import{S as nxt,i as sxt,s as lxt,e as a,k as l,w as F,t as o,M as ixt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as dxt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as jOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function cxt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,b0,_f,De,We,hi,yn,v0,Ln,xn,F0,pi,$n,T0,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),b0=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),v0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),F0=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),T0=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var D$=s(p);m=r(D$,"NewModelConfig"),D$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var G$=s(fi);pf=r(G$,"model_type"),G$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var O$=s(mi);gi=r(O$,'"new-model"'),O$.forEach(t),b0=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),v0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var V$=s(Ln);xn=r(V$,"PreTrainedModel"),V$.forEach(t),F0=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),T0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var X$=s(_i);uf=r(X$,"NewModelConfig"),X$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,b0),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,v0),e(De,Ln),e(Ln,xn),e(De,F0),e(De,pi),e(pi,$n),e(De,T0),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,b0,_f,De,We,hi,yn,v0,Ln,xn,F0,pi,$n,T0,_i,uf,Ca,Qe,Ae,D$,ui,G$,O$,Eo,wa,V$,bf,X$,VGe,Sqe,bi,vf,Jee,M0,XGe,Yee,zGe,Rqe,kn,WGe,Kee,QGe,HGe,Zee,UGe,JGe,Pqe,E0,Bqe,z$,YGe,Iqe,Ff,qqe,vi,Tf,eoe,C0,KGe,ooe,ZGe,Nqe,Co,w0,eOe,A0,oOe,W$,rOe,tOe,aOe,y0,nOe,roe,sOe,lOe,iOe,Er,L0,dOe,toe,cOe,fOe,Fi,mOe,aoe,gOe,hOe,noe,pOe,_Oe,uOe,A,Mf,soe,bOe,vOe,Q$,FOe,TOe,MOe,Ef,loe,EOe,COe,H$,wOe,AOe,yOe,Cf,ioe,LOe,xOe,U$,$Oe,kOe,SOe,wf,doe,ROe,POe,J$,BOe,IOe,qOe,Af,coe,NOe,jOe,Y$,DOe,GOe,OOe,yf,foe,VOe,XOe,K$,zOe,WOe,QOe,Lf,moe,HOe,UOe,Z$,JOe,YOe,KOe,xf,goe,ZOe,eVe,ek,oVe,rVe,tVe,$f,hoe,aVe,nVe,ok,sVe,lVe,iVe,kf,poe,dVe,cVe,rk,fVe,mVe,gVe,Sf,_oe,hVe,pVe,tk,_Ve,uVe,bVe,Rf,uoe,vVe,FVe,ak,TVe,MVe,EVe,Pf,boe,CVe,wVe,nk,AVe,yVe,LVe,Bf,voe,xVe,$Ve,sk,kVe,SVe,RVe,If,Foe,PVe,BVe,lk,IVe,qVe,NVe,qf,Toe,jVe,DVe,ik,GVe,OVe,VVe,Nf,Moe,XVe,zVe,dk,WVe,QVe,HVe,jf,Eoe,UVe,JVe,ck,YVe,KVe,ZVe,Df,Coe,eXe,oXe,fk,rXe,tXe,aXe,Gf,woe,nXe,sXe,mk,lXe,iXe,dXe,Of,Aoe,cXe,fXe,gk,mXe,gXe,hXe,Vf,yoe,pXe,_Xe,hk,uXe,bXe,vXe,Xf,Loe,FXe,TXe,pk,MXe,EXe,CXe,zf,xoe,wXe,AXe,_k,yXe,LXe,xXe,Wf,$oe,$Xe,kXe,uk,SXe,RXe,PXe,Qf,koe,BXe,IXe,bk,qXe,NXe,jXe,Hf,Soe,DXe,GXe,vk,OXe,VXe,XXe,Uf,Roe,zXe,WXe,Fk,QXe,HXe,UXe,Jf,Poe,JXe,YXe,Tk,KXe,ZXe,eze,Yf,Boe,oze,rze,Mk,tze,aze,nze,Kf,Ioe,sze,lze,Ek,ize,dze,cze,Zf,qoe,fze,mze,Ck,gze,hze,pze,em,Noe,_ze,uze,wk,bze,vze,Fze,om,joe,Tze,Mze,Ak,Eze,Cze,wze,rm,Doe,Aze,yze,yk,Lze,xze,$ze,tm,Goe,kze,Sze,Lk,Rze,Pze,Bze,am,Ooe,Ize,qze,xk,Nze,jze,Dze,nm,Voe,Gze,Oze,$k,Vze,Xze,zze,sm,Xoe,Wze,Qze,kk,Hze,Uze,Jze,lm,zoe,Yze,Kze,Sk,Zze,eWe,oWe,im,Woe,rWe,tWe,Rk,aWe,nWe,sWe,dm,Qoe,lWe,iWe,Pk,dWe,cWe,fWe,cm,Hoe,mWe,gWe,Bk,hWe,pWe,_We,fm,Uoe,uWe,bWe,Ik,vWe,FWe,TWe,mm,Joe,MWe,EWe,qk,CWe,wWe,AWe,gm,Yoe,yWe,LWe,Nk,xWe,$We,kWe,hm,Koe,SWe,RWe,jk,PWe,BWe,IWe,pm,Zoe,qWe,NWe,Dk,jWe,DWe,GWe,_m,ere,OWe,VWe,Gk,XWe,zWe,WWe,um,ore,QWe,HWe,Ok,UWe,JWe,YWe,bm,rre,KWe,ZWe,Vk,eQe,oQe,rQe,vm,tre,tQe,aQe,Xk,nQe,sQe,lQe,Fm,are,iQe,dQe,zk,cQe,fQe,mQe,Tm,nre,gQe,hQe,Wk,pQe,_Qe,uQe,Mm,sre,bQe,vQe,Qk,FQe,TQe,MQe,Em,lre,EQe,CQe,Hk,wQe,AQe,yQe,Cm,ire,LQe,xQe,Uk,$Qe,kQe,SQe,wm,dre,RQe,PQe,Jk,BQe,IQe,qQe,Am,cre,NQe,jQe,Yk,DQe,GQe,OQe,ym,fre,VQe,XQe,Kk,zQe,WQe,QQe,Lm,mre,HQe,UQe,Zk,JQe,YQe,KQe,xm,gre,ZQe,eHe,eS,oHe,rHe,tHe,$m,hre,aHe,nHe,oS,sHe,lHe,iHe,km,pre,dHe,cHe,rS,fHe,mHe,gHe,Sm,_re,hHe,pHe,tS,_He,uHe,bHe,Rm,ure,vHe,FHe,aS,THe,MHe,EHe,Pm,bre,CHe,wHe,nS,AHe,yHe,LHe,Bm,vre,xHe,$He,sS,kHe,SHe,RHe,Im,Fre,PHe,BHe,lS,IHe,qHe,NHe,qm,Tre,jHe,DHe,iS,GHe,OHe,VHe,Nm,Mre,XHe,zHe,dS,WHe,QHe,HHe,jm,Ere,UHe,JHe,cS,YHe,KHe,ZHe,Dm,Cre,eUe,oUe,fS,rUe,tUe,aUe,Gm,wre,nUe,sUe,mS,lUe,iUe,dUe,Om,Are,cUe,fUe,gS,mUe,gUe,hUe,Vm,yre,pUe,_Ue,hS,uUe,bUe,vUe,Xm,Lre,FUe,TUe,pS,MUe,EUe,CUe,zm,xre,wUe,AUe,_S,yUe,LUe,xUe,Wm,$re,$Ue,kUe,uS,SUe,RUe,PUe,Qm,kre,BUe,IUe,bS,qUe,NUe,jUe,Hm,Sre,DUe,GUe,vS,OUe,VUe,XUe,Um,Rre,zUe,WUe,FS,QUe,HUe,UUe,Jm,Pre,JUe,YUe,TS,KUe,ZUe,eJe,Ym,Bre,oJe,rJe,MS,tJe,aJe,nJe,Km,Ire,sJe,lJe,ES,iJe,dJe,cJe,Zm,qre,fJe,mJe,CS,gJe,hJe,pJe,eg,Nre,_Je,uJe,wS,bJe,vJe,FJe,og,jre,TJe,MJe,AS,EJe,CJe,wJe,rg,Dre,AJe,yJe,yS,LJe,xJe,$Je,tg,Gre,kJe,SJe,LS,RJe,PJe,BJe,ag,Ore,IJe,qJe,xS,NJe,jJe,DJe,ng,Vre,GJe,OJe,$S,VJe,XJe,zJe,sg,Xre,WJe,QJe,kS,HJe,UJe,JJe,lg,zre,YJe,KJe,SS,ZJe,eYe,oYe,ig,Wre,rYe,tYe,RS,aYe,nYe,sYe,dg,Qre,lYe,iYe,PS,dYe,cYe,fYe,cg,Hre,mYe,gYe,BS,hYe,pYe,_Ye,fg,Ure,uYe,bYe,IS,vYe,FYe,TYe,mg,Jre,MYe,EYe,qS,CYe,wYe,AYe,gg,Yre,yYe,LYe,NS,xYe,$Ye,kYe,hg,Kre,SYe,RYe,jS,PYe,BYe,IYe,pg,Zre,qYe,NYe,DS,jYe,DYe,GYe,_g,ete,OYe,VYe,GS,XYe,zYe,WYe,ug,ote,QYe,HYe,OS,UYe,JYe,YYe,bg,rte,KYe,ZYe,VS,eKe,oKe,rKe,vg,tte,tKe,aKe,XS,nKe,sKe,lKe,Fg,ate,iKe,dKe,zS,cKe,fKe,mKe,Tg,nte,gKe,hKe,WS,pKe,_Ke,uKe,Mg,bKe,Eg,x0,vKe,ste,FKe,jqe,Ti,Cg,lte,$0,TKe,ite,MKe,Dqe,wo,k0,EKe,S0,CKe,QS,wKe,AKe,yKe,R0,LKe,dte,xKe,$Ke,kKe,Cr,P0,SKe,cte,RKe,PKe,Aa,BKe,fte,IKe,qKe,mte,NKe,jKe,gte,DKe,GKe,OKe,k,Sn,hte,VKe,XKe,HS,zKe,WKe,US,QKe,HKe,UKe,Rn,pte,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,Pn,_te,tZe,aZe,KS,nZe,sZe,ZS,lZe,iZe,dZe,wg,ute,cZe,fZe,eR,mZe,gZe,hZe,Bn,bte,pZe,_Ze,oR,uZe,bZe,rR,vZe,FZe,TZe,Ag,vte,MZe,EZe,tR,CZe,wZe,AZe,yg,Fte,yZe,LZe,aR,xZe,$Ze,kZe,Lg,Tte,SZe,RZe,nR,PZe,BZe,IZe,In,Mte,qZe,NZe,sR,jZe,DZe,lR,GZe,OZe,VZe,qn,Ete,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Nn,Cte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,xg,wte,aeo,neo,mR,seo,leo,ieo,$g,Ate,deo,ceo,gR,feo,meo,geo,jn,yte,heo,peo,hR,_eo,ueo,pR,beo,veo,Feo,kg,Lte,Teo,Meo,_R,Eeo,Ceo,weo,Dn,xte,Aeo,yeo,uR,Leo,xeo,bR,$eo,keo,Seo,Gn,$te,Reo,Peo,vR,Beo,Ieo,FR,qeo,Neo,jeo,On,kte,Deo,Geo,TR,Oeo,Veo,MR,Xeo,zeo,Weo,Sg,Ste,Qeo,Heo,ER,Ueo,Jeo,Yeo,Vn,Rte,Keo,Zeo,CR,eoo,ooo,wR,roo,too,aoo,Xn,Pte,noo,soo,AR,loo,ioo,yR,doo,coo,foo,zn,Bte,moo,goo,LR,hoo,poo,xR,_oo,uoo,boo,Wn,Ite,voo,Foo,$R,Too,Moo,kR,Eoo,Coo,woo,Qn,qte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,Hn,Nte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Rg,jte,Doo,Goo,IR,Ooo,Voo,Xoo,Un,Dte,zoo,Woo,qR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Pg,Gte,Koo,Zoo,jR,ero,oro,rro,Jn,Ote,tro,aro,DR,nro,sro,GR,lro,iro,dro,Yn,Vte,cro,fro,OR,mro,gro,VR,hro,pro,_ro,Kn,Xte,uro,bro,XR,vro,Fro,zR,Tro,Mro,Ero,Zn,zte,Cro,wro,WR,Aro,yro,QR,Lro,xro,$ro,es,Wte,kro,Sro,HR,Rro,Pro,UR,Bro,Iro,qro,Bg,Qte,Nro,jro,JR,Dro,Gro,Oro,os,Hte,Vro,Xro,YR,zro,Wro,KR,Qro,Hro,Uro,rs,Ute,Jro,Yro,ZR,Kro,Zro,eP,eto,oto,rto,ts,Jte,tto,ato,oP,nto,sto,rP,lto,ito,dto,as,Yte,cto,fto,tP,mto,gto,aP,hto,pto,_to,ns,Kte,uto,bto,nP,vto,Fto,sP,Tto,Mto,Eto,ss,Zte,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,ls,eae,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,Ig,oae,Nto,jto,fP,Dto,Gto,Oto,is,rae,Vto,Xto,mP,zto,Wto,gP,Qto,Hto,Uto,qg,tae,Jto,Yto,hP,Kto,Zto,eao,Ng,aae,oao,rao,pP,tao,aao,nao,ds,nae,sao,lao,_P,iao,dao,uP,cao,fao,mao,cs,sae,gao,hao,bP,pao,_ao,vP,uao,bao,vao,fs,lae,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,jg,iae,yao,Lao,MP,xao,$ao,kao,ms,dae,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,gs,cae,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,hs,fae,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,ps,mae,Zao,eno,xP,ono,rno,$P,tno,ano,nno,_s,gae,sno,lno,kP,ino,dno,SP,cno,fno,mno,Dg,hae,gno,hno,RP,pno,_no,uno,us,pae,bno,vno,PP,Fno,Tno,BP,Mno,Eno,Cno,Gg,_ae,wno,Ano,IP,yno,Lno,xno,Og,uae,$no,kno,qP,Sno,Rno,Pno,Vg,bae,Bno,Ino,NP,qno,Nno,jno,Xg,vae,Dno,Gno,jP,Ono,Vno,Xno,bs,Fae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,zg,Tae,Kno,Zno,OP,eso,oso,rso,vs,Mae,tso,aso,VP,nso,sso,XP,lso,iso,dso,Fs,Eae,cso,fso,zP,mso,gso,WP,hso,pso,_so,Ts,Cae,uso,bso,QP,vso,Fso,HP,Tso,Mso,Eso,Ms,wae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Es,Aae,kso,Sso,YP,Rso,Pso,KP,Bso,Iso,qso,Cs,yae,Nso,jso,ZP,Dso,Gso,eB,Oso,Vso,Xso,Wg,Lae,zso,Wso,oB,Qso,Hso,Uso,Qg,xae,Jso,Yso,rB,Kso,Zso,elo,ws,$ae,olo,rlo,tB,tlo,alo,aB,nlo,slo,llo,As,kae,ilo,dlo,nB,clo,flo,sB,mlo,glo,hlo,ys,Sae,plo,_lo,lB,ulo,blo,iB,vlo,Flo,Tlo,Hg,Rae,Mlo,Elo,dB,Clo,wlo,Alo,Ug,Pae,ylo,Llo,cB,xlo,$lo,klo,Jg,Bae,Slo,Rlo,fB,Plo,Blo,Ilo,Ls,Iae,qlo,Nlo,mB,jlo,Dlo,gB,Glo,Olo,Vlo,Yg,qae,Xlo,zlo,hB,Wlo,Qlo,Hlo,Kg,Nae,Ulo,Jlo,pB,Ylo,Klo,Zlo,Zg,jae,eio,oio,_B,rio,tio,aio,xs,Dae,nio,sio,uB,lio,iio,bB,dio,cio,fio,eh,Gae,mio,gio,vB,hio,pio,_io,oh,Oae,uio,bio,FB,vio,Fio,Tio,$s,Vae,Mio,Eio,TB,Cio,wio,MB,Aio,yio,Lio,ks,Xae,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,Ss,zae,Iio,qio,wB,Nio,jio,AB,Dio,Gio,Oio,Rs,Wae,Vio,Xio,yB,zio,Wio,LB,Qio,Hio,Uio,rh,Jio,th,B0,Yio,Qae,Kio,Gqe,Mi,ah,Hae,I0,Zio,Uae,edo,Oqe,Ao,q0,odo,N0,rdo,xB,tdo,ado,ndo,j0,sdo,Jae,ldo,ido,ddo,He,D0,cdo,Yae,fdo,mdo,ya,gdo,Kae,hdo,pdo,Zae,_do,udo,ene,bdo,vdo,Fdo,Z,nh,one,Tdo,Mdo,$B,Edo,Cdo,wdo,sh,rne,Ado,ydo,kB,Ldo,xdo,$do,lh,tne,kdo,Sdo,SB,Rdo,Pdo,Bdo,ih,ane,Ido,qdo,RB,Ndo,jdo,Ddo,dh,nne,Gdo,Odo,PB,Vdo,Xdo,zdo,ch,sne,Wdo,Qdo,BB,Hdo,Udo,Jdo,fh,lne,Ydo,Kdo,IB,Zdo,eco,oco,mh,ine,rco,tco,qB,aco,nco,sco,gh,dne,lco,ico,NB,dco,cco,fco,hh,cne,mco,gco,jB,hco,pco,_co,ph,fne,uco,bco,DB,vco,Fco,Tco,_h,mne,Mco,Eco,GB,Cco,wco,Aco,uh,gne,yco,Lco,OB,xco,$co,kco,bh,hne,Sco,Rco,VB,Pco,Bco,Ico,vh,pne,qco,Nco,XB,jco,Dco,Gco,Fh,_ne,Oco,Vco,zB,Xco,zco,Wco,Th,une,Qco,Hco,WB,Uco,Jco,Yco,Mh,bne,Kco,Zco,QB,efo,ofo,rfo,Eh,vne,tfo,afo,HB,nfo,sfo,lfo,Ch,Fne,ifo,dfo,UB,cfo,ffo,mfo,wh,Tne,gfo,hfo,JB,pfo,_fo,ufo,Ah,Mne,bfo,vfo,YB,Ffo,Tfo,Mfo,yh,Ene,Efo,Cfo,KB,wfo,Afo,yfo,Lh,Cne,Lfo,xfo,ZB,$fo,kfo,Sfo,xh,wne,Rfo,Pfo,eI,Bfo,Ifo,qfo,$h,Ane,Nfo,jfo,oI,Dfo,Gfo,Ofo,kh,yne,Vfo,Xfo,rI,zfo,Wfo,Qfo,Sh,Hfo,Rh,Ufo,Ph,G0,Jfo,Lne,Yfo,Vqe,Ei,Bh,xne,O0,Kfo,$ne,Zfo,Xqe,yo,V0,emo,X0,omo,tI,rmo,tmo,amo,z0,nmo,kne,smo,lmo,imo,Ue,W0,dmo,Sne,cmo,fmo,Ci,mmo,Rne,gmo,hmo,Pne,pmo,_mo,umo,_e,Ih,Bne,bmo,vmo,aI,Fmo,Tmo,Mmo,qh,Ine,Emo,Cmo,qne,wmo,Amo,ymo,Nh,Nne,Lmo,xmo,nI,$mo,kmo,Smo,jh,jne,Rmo,Pmo,sI,Bmo,Imo,qmo,Dh,Dne,Nmo,jmo,lI,Dmo,Gmo,Omo,Gh,Gne,Vmo,Xmo,iI,zmo,Wmo,Qmo,Oh,One,Hmo,Umo,dI,Jmo,Ymo,Kmo,Vh,Vne,Zmo,ego,cI,ogo,rgo,tgo,Xh,Xne,ago,ngo,fI,sgo,lgo,igo,zh,zne,dgo,cgo,mI,fgo,mgo,ggo,Wh,Wne,hgo,pgo,gI,_go,ugo,bgo,Qh,Qne,vgo,Fgo,hI,Tgo,Mgo,Ego,Hh,Hne,Cgo,wgo,pI,Ago,ygo,Lgo,Uh,Une,xgo,$go,_I,kgo,Sgo,Rgo,Jh,Jne,Pgo,Bgo,uI,Igo,qgo,Ngo,Yh,Yne,jgo,Dgo,bI,Ggo,Ogo,Vgo,Kh,Xgo,Zh,zgo,ep,Q0,Wgo,Kne,Qgo,zqe,wi,op,Zne,H0,Hgo,ese,Ugo,Wqe,Lo,U0,Jgo,Ai,Ygo,vI,Kgo,Zgo,FI,eho,oho,rho,J0,tho,ose,aho,nho,sho,tt,Y0,lho,rse,iho,dho,yi,cho,tse,fho,mho,TI,gho,hho,pho,rp,_ho,Je,K0,uho,ase,bho,vho,La,Fho,nse,Tho,Mho,sse,Eho,Cho,lse,who,Aho,yho,x,tp,ise,Lho,xho,MI,$ho,kho,Sho,ap,dse,Rho,Pho,EI,Bho,Iho,qho,np,cse,Nho,jho,CI,Dho,Gho,Oho,sp,fse,Vho,Xho,wI,zho,Who,Qho,lp,mse,Hho,Uho,AI,Jho,Yho,Kho,ip,gse,Zho,epo,yI,opo,rpo,tpo,dp,hse,apo,npo,LI,spo,lpo,ipo,cp,pse,dpo,cpo,xI,fpo,mpo,gpo,fp,_se,hpo,ppo,$I,_po,upo,bpo,mp,use,vpo,Fpo,kI,Tpo,Mpo,Epo,gp,bse,Cpo,wpo,SI,Apo,ypo,Lpo,hp,vse,xpo,$po,RI,kpo,Spo,Rpo,pp,Fse,Ppo,Bpo,PI,Ipo,qpo,Npo,_p,Tse,jpo,Dpo,BI,Gpo,Opo,Vpo,up,Mse,Xpo,zpo,II,Wpo,Qpo,Hpo,bp,Ese,Upo,Jpo,qI,Ypo,Kpo,Zpo,vp,Cse,e_o,o_o,NI,r_o,t_o,a_o,Fp,wse,n_o,s_o,jI,l_o,i_o,d_o,Tp,Ase,c_o,f_o,DI,m_o,g_o,h_o,Mp,yse,p_o,__o,GI,u_o,b_o,v_o,Ep,Lse,F_o,T_o,OI,M_o,E_o,C_o,Cp,xse,w_o,A_o,VI,y_o,L_o,x_o,wp,$se,$_o,k_o,XI,S_o,R_o,P_o,Ap,kse,B_o,I_o,zI,q_o,N_o,j_o,yp,Sse,D_o,G_o,WI,O_o,V_o,X_o,Lp,Rse,z_o,W_o,QI,Q_o,H_o,U_o,xp,Pse,J_o,Y_o,HI,K_o,Z_o,euo,$p,Bse,ouo,ruo,UI,tuo,auo,nuo,kp,Ise,suo,luo,JI,iuo,duo,cuo,Sp,qse,fuo,muo,YI,guo,huo,puo,Rp,Nse,_uo,uuo,KI,buo,vuo,Fuo,Pp,jse,Tuo,Muo,ZI,Euo,Cuo,wuo,Ps,Dse,Auo,yuo,eq,Luo,xuo,oq,$uo,kuo,Suo,Bp,Gse,Ruo,Puo,rq,Buo,Iuo,quo,Ip,Ose,Nuo,juo,tq,Duo,Guo,Ouo,qp,Vse,Vuo,Xuo,aq,zuo,Wuo,Quo,Np,Xse,Huo,Uuo,nq,Juo,Yuo,Kuo,jp,zse,Zuo,e2o,sq,o2o,r2o,t2o,Dp,Wse,a2o,n2o,lq,s2o,l2o,i2o,Gp,Qse,d2o,c2o,iq,f2o,m2o,g2o,Op,Hse,h2o,p2o,dq,_2o,u2o,b2o,Vp,Use,v2o,F2o,cq,T2o,M2o,E2o,Xp,Jse,C2o,w2o,fq,A2o,y2o,L2o,zp,Yse,x2o,$2o,mq,k2o,S2o,R2o,Wp,Kse,P2o,B2o,gq,I2o,q2o,N2o,Qp,Zse,j2o,D2o,hq,G2o,O2o,V2o,Hp,ele,X2o,z2o,pq,W2o,Q2o,H2o,Up,ole,U2o,J2o,_q,Y2o,K2o,Z2o,Jp,rle,e1o,o1o,uq,r1o,t1o,a1o,Yp,tle,n1o,s1o,bq,l1o,i1o,d1o,Kp,ale,c1o,f1o,vq,m1o,g1o,h1o,Zp,nle,p1o,_1o,Fq,u1o,b1o,v1o,e_,sle,F1o,T1o,Tq,M1o,E1o,C1o,o_,lle,w1o,A1o,Mq,y1o,L1o,x1o,r_,ile,$1o,k1o,Eq,S1o,R1o,P1o,t_,dle,B1o,I1o,Cq,q1o,N1o,j1o,a_,cle,D1o,G1o,wq,O1o,V1o,X1o,n_,fle,z1o,W1o,Aq,Q1o,H1o,U1o,s_,mle,J1o,Y1o,yq,K1o,Z1o,ebo,l_,gle,obo,rbo,Lq,tbo,abo,nbo,i_,hle,sbo,lbo,xq,ibo,dbo,cbo,d_,ple,fbo,mbo,$q,gbo,hbo,pbo,c_,_le,_bo,ubo,kq,bbo,vbo,Fbo,f_,ule,Tbo,Mbo,Sq,Ebo,Cbo,wbo,m_,ble,Abo,ybo,Rq,Lbo,xbo,$bo,g_,vle,kbo,Sbo,Pq,Rbo,Pbo,Bbo,h_,Fle,Ibo,qbo,Bq,Nbo,jbo,Dbo,p_,Tle,Gbo,Obo,Iq,Vbo,Xbo,zbo,__,Mle,Wbo,Qbo,qq,Hbo,Ubo,Jbo,u_,Ele,Ybo,Kbo,Nq,Zbo,evo,ovo,b_,Cle,rvo,tvo,jq,avo,nvo,svo,v_,wle,lvo,ivo,Dq,dvo,cvo,fvo,F_,Ale,mvo,gvo,Gq,hvo,pvo,_vo,T_,yle,uvo,bvo,Oq,vvo,Fvo,Tvo,M_,Lle,Mvo,Evo,Vq,Cvo,wvo,Avo,E_,xle,yvo,Lvo,Xq,xvo,$vo,kvo,C_,$le,Svo,Rvo,zq,Pvo,Bvo,Ivo,w_,kle,qvo,Nvo,Wq,jvo,Dvo,Gvo,A_,Sle,Ovo,Vvo,Qq,Xvo,zvo,Wvo,y_,Rle,Qvo,Hvo,Hq,Uvo,Jvo,Yvo,L_,Ple,Kvo,Zvo,Uq,eFo,oFo,rFo,x_,Ble,tFo,aFo,Jq,nFo,sFo,lFo,$_,Ile,iFo,dFo,Yq,cFo,fFo,mFo,k_,qle,gFo,hFo,Kq,pFo,_Fo,uFo,S_,Nle,bFo,vFo,Zq,FFo,TFo,MFo,R_,jle,EFo,CFo,eN,wFo,AFo,yFo,P_,Dle,LFo,xFo,oN,$Fo,kFo,SFo,B_,Gle,RFo,PFo,rN,BFo,IFo,qFo,I_,Ole,NFo,jFo,tN,DFo,GFo,OFo,q_,Vle,VFo,XFo,aN,zFo,WFo,QFo,N_,Xle,HFo,UFo,nN,JFo,YFo,KFo,j_,zle,ZFo,e6o,sN,o6o,r6o,t6o,D_,Wle,a6o,n6o,lN,s6o,l6o,i6o,G_,Qle,d6o,c6o,iN,f6o,m6o,g6o,O_,Hle,h6o,p6o,dN,_6o,u6o,b6o,V_,Ule,v6o,F6o,cN,T6o,M6o,E6o,X_,Jle,C6o,w6o,fN,A6o,y6o,L6o,z_,Yle,x6o,$6o,mN,k6o,S6o,R6o,W_,Kle,P6o,B6o,gN,I6o,q6o,N6o,Q_,Zle,j6o,D6o,hN,G6o,O6o,V6o,H_,eie,X6o,z6o,pN,W6o,Q6o,H6o,U_,U6o,oie,J6o,Y6o,rie,K6o,Z6o,J_,Qqe,Li,Y_,tie,Z0,eTo,aie,oTo,Hqe,xo,eA,rTo,xi,tTo,_N,aTo,nTo,uN,sTo,lTo,iTo,oA,dTo,nie,cTo,fTo,mTo,at,rA,gTo,sie,hTo,pTo,$i,_To,lie,uTo,bTo,bN,vTo,FTo,TTo,K_,MTo,Ye,tA,ETo,iie,CTo,wTo,xa,ATo,die,yTo,LTo,cie,xTo,$To,fie,kTo,STo,RTo,G,Z_,mie,PTo,BTo,vN,ITo,qTo,NTo,eu,gie,jTo,DTo,FN,GTo,OTo,VTo,ou,hie,XTo,zTo,TN,WTo,QTo,HTo,ru,pie,UTo,JTo,MN,YTo,KTo,ZTo,tu,_ie,e7o,o7o,EN,r7o,t7o,a7o,au,uie,n7o,s7o,CN,l7o,i7o,d7o,nu,bie,c7o,f7o,wN,m7o,g7o,h7o,su,vie,p7o,_7o,AN,u7o,b7o,v7o,lu,Fie,F7o,T7o,yN,M7o,E7o,C7o,iu,Tie,w7o,A7o,LN,y7o,L7o,x7o,du,Mie,$7o,k7o,xN,S7o,R7o,P7o,cu,Eie,B7o,I7o,$N,q7o,N7o,j7o,fu,Cie,D7o,G7o,kN,O7o,V7o,X7o,mu,wie,z7o,W7o,SN,Q7o,H7o,U7o,gu,Aie,J7o,Y7o,RN,K7o,Z7o,e9o,hu,yie,o9o,r9o,PN,t9o,a9o,n9o,pu,Lie,s9o,l9o,BN,i9o,d9o,c9o,_u,xie,f9o,m9o,IN,g9o,h9o,p9o,uu,$ie,_9o,u9o,qN,b9o,v9o,F9o,bu,kie,T9o,M9o,NN,E9o,C9o,w9o,vu,Sie,A9o,y9o,jN,L9o,x9o,$9o,Fu,Rie,k9o,S9o,DN,R9o,P9o,B9o,Tu,Pie,I9o,q9o,GN,N9o,j9o,D9o,Mu,Bie,G9o,O9o,ON,V9o,X9o,z9o,Eu,Iie,W9o,Q9o,VN,H9o,U9o,J9o,Cu,qie,Y9o,K9o,XN,Z9o,eMo,oMo,wu,Nie,rMo,tMo,zN,aMo,nMo,sMo,Au,jie,lMo,iMo,WN,dMo,cMo,fMo,yu,Die,mMo,gMo,QN,hMo,pMo,_Mo,Lu,Gie,uMo,bMo,HN,vMo,FMo,TMo,xu,Oie,MMo,EMo,UN,CMo,wMo,AMo,$u,Vie,yMo,LMo,JN,xMo,$Mo,kMo,ku,Xie,SMo,RMo,YN,PMo,BMo,IMo,Su,zie,qMo,NMo,KN,jMo,DMo,GMo,Ru,Wie,OMo,VMo,ZN,XMo,zMo,WMo,Pu,Qie,QMo,HMo,ej,UMo,JMo,YMo,Bu,Hie,KMo,ZMo,oj,e4o,o4o,r4o,Iu,Uie,t4o,a4o,rj,n4o,s4o,l4o,qu,Jie,i4o,d4o,tj,c4o,f4o,m4o,Nu,Yie,g4o,h4o,aj,p4o,_4o,u4o,ju,Kie,b4o,v4o,nj,F4o,T4o,M4o,Du,Zie,E4o,C4o,sj,w4o,A4o,y4o,Gu,ede,L4o,x4o,lj,$4o,k4o,S4o,Ou,R4o,ode,P4o,B4o,rde,I4o,q4o,Vu,Uqe,ki,Xu,tde,aA,N4o,ade,j4o,Jqe,$o,nA,D4o,Si,G4o,ij,O4o,V4o,dj,X4o,z4o,W4o,sA,Q4o,nde,H4o,U4o,J4o,nt,lA,Y4o,sde,K4o,Z4o,Ri,eEo,lde,oEo,rEo,cj,tEo,aEo,nEo,zu,sEo,Ke,iA,lEo,ide,iEo,dEo,$a,cEo,dde,fEo,mEo,cde,gEo,hEo,fde,pEo,_Eo,uEo,z,Wu,mde,bEo,vEo,fj,FEo,TEo,MEo,Qu,gde,EEo,CEo,mj,wEo,AEo,yEo,Hu,hde,LEo,xEo,gj,$Eo,kEo,SEo,Uu,pde,REo,PEo,hj,BEo,IEo,qEo,Ju,_de,NEo,jEo,pj,DEo,GEo,OEo,Yu,ude,VEo,XEo,_j,zEo,WEo,QEo,Ku,bde,HEo,UEo,uj,JEo,YEo,KEo,Zu,vde,ZEo,e5o,bj,o5o,r5o,t5o,e2,Fde,a5o,n5o,vj,s5o,l5o,i5o,o2,Tde,d5o,c5o,Fj,f5o,m5o,g5o,r2,Mde,h5o,p5o,Tj,_5o,u5o,b5o,t2,Ede,v5o,F5o,Mj,T5o,M5o,E5o,a2,Cde,C5o,w5o,Ej,A5o,y5o,L5o,n2,wde,x5o,$5o,Cj,k5o,S5o,R5o,s2,Ade,P5o,B5o,wj,I5o,q5o,N5o,l2,yde,j5o,D5o,Aj,G5o,O5o,V5o,i2,Lde,X5o,z5o,yj,W5o,Q5o,H5o,d2,xde,U5o,J5o,Lj,Y5o,K5o,Z5o,c2,$de,eCo,oCo,xj,rCo,tCo,aCo,f2,kde,nCo,sCo,$j,lCo,iCo,dCo,m2,Sde,cCo,fCo,kj,mCo,gCo,hCo,g2,Rde,pCo,_Co,Sj,uCo,bCo,vCo,h2,Pde,FCo,TCo,Rj,MCo,ECo,CCo,p2,Bde,wCo,ACo,Pj,yCo,LCo,xCo,_2,Ide,$Co,kCo,Bj,SCo,RCo,PCo,u2,qde,BCo,ICo,Ij,qCo,NCo,jCo,b2,Nde,DCo,GCo,qj,OCo,VCo,XCo,v2,jde,zCo,WCo,Nj,QCo,HCo,UCo,F2,Dde,JCo,YCo,jj,KCo,ZCo,e3o,T2,Gde,o3o,r3o,Dj,t3o,a3o,n3o,M2,Ode,s3o,l3o,Gj,i3o,d3o,c3o,E2,Vde,f3o,m3o,Oj,g3o,h3o,p3o,C2,Xde,_3o,u3o,Vj,b3o,v3o,F3o,w2,zde,T3o,M3o,Xj,E3o,C3o,w3o,A2,Wde,A3o,y3o,zj,L3o,x3o,$3o,y2,Qde,k3o,S3o,Wj,R3o,P3o,B3o,L2,I3o,Hde,q3o,N3o,Ude,j3o,D3o,x2,Yqe,Pi,$2,Jde,dA,G3o,Yde,O3o,Kqe,ko,cA,V3o,Bi,X3o,Qj,z3o,W3o,Hj,Q3o,H3o,U3o,fA,J3o,Kde,Y3o,K3o,Z3o,st,mA,ewo,Zde,owo,rwo,Ii,two,ece,awo,nwo,Uj,swo,lwo,iwo,k2,dwo,Ze,gA,cwo,oce,fwo,mwo,ka,gwo,rce,hwo,pwo,tce,_wo,uwo,ace,bwo,vwo,Fwo,W,S2,nce,Two,Mwo,Jj,Ewo,Cwo,wwo,R2,sce,Awo,ywo,Yj,Lwo,xwo,$wo,P2,lce,kwo,Swo,Kj,Rwo,Pwo,Bwo,B2,ice,Iwo,qwo,Zj,Nwo,jwo,Dwo,I2,dce,Gwo,Owo,eD,Vwo,Xwo,zwo,q2,cce,Wwo,Qwo,oD,Hwo,Uwo,Jwo,N2,fce,Ywo,Kwo,rD,Zwo,e0o,o0o,j2,mce,r0o,t0o,tD,a0o,n0o,s0o,D2,gce,l0o,i0o,aD,d0o,c0o,f0o,G2,hce,m0o,g0o,nD,h0o,p0o,_0o,O2,pce,u0o,b0o,sD,v0o,F0o,T0o,V2,_ce,M0o,E0o,lD,C0o,w0o,A0o,X2,uce,y0o,L0o,iD,x0o,$0o,k0o,z2,bce,S0o,R0o,dD,P0o,B0o,I0o,W2,vce,q0o,N0o,cD,j0o,D0o,G0o,Q2,Fce,O0o,V0o,fD,X0o,z0o,W0o,H2,Tce,Q0o,H0o,mD,U0o,J0o,Y0o,U2,Mce,K0o,Z0o,gD,eAo,oAo,rAo,J2,Ece,tAo,aAo,hD,nAo,sAo,lAo,Y2,Cce,iAo,dAo,pD,cAo,fAo,mAo,K2,wce,gAo,hAo,_D,pAo,_Ao,uAo,Z2,Ace,bAo,vAo,uD,FAo,TAo,MAo,e1,yce,EAo,CAo,bD,wAo,AAo,yAo,o1,Lce,LAo,xAo,vD,$Ao,kAo,SAo,r1,xce,RAo,PAo,FD,BAo,IAo,qAo,t1,$ce,NAo,jAo,TD,DAo,GAo,OAo,a1,kce,VAo,XAo,MD,zAo,WAo,QAo,n1,Sce,HAo,UAo,ED,JAo,YAo,KAo,s1,Rce,ZAo,eyo,CD,oyo,ryo,tyo,l1,Pce,ayo,nyo,wD,syo,lyo,iyo,i1,Bce,dyo,cyo,Ice,fyo,myo,gyo,d1,qce,hyo,pyo,AD,_yo,uyo,byo,c1,Nce,vyo,Fyo,yD,Tyo,Myo,Eyo,f1,jce,Cyo,wyo,LD,Ayo,yyo,Lyo,m1,Dce,xyo,$yo,xD,kyo,Syo,Ryo,g1,Pyo,Gce,Byo,Iyo,Oce,qyo,Nyo,h1,Zqe,qi,p1,Vce,hA,jyo,Xce,Dyo,eNe,So,pA,Gyo,Ni,Oyo,$D,Vyo,Xyo,kD,zyo,Wyo,Qyo,_A,Hyo,zce,Uyo,Jyo,Yyo,lt,uA,Kyo,Wce,Zyo,eLo,ji,oLo,Qce,rLo,tLo,SD,aLo,nLo,sLo,_1,lLo,eo,bA,iLo,Hce,dLo,cLo,Sa,fLo,Uce,mLo,gLo,Jce,hLo,pLo,Yce,_Lo,uLo,bLo,he,u1,Kce,vLo,FLo,RD,TLo,MLo,ELo,b1,Zce,CLo,wLo,PD,ALo,yLo,LLo,v1,efe,xLo,$Lo,BD,kLo,SLo,RLo,F1,ofe,PLo,BLo,ID,ILo,qLo,NLo,T1,rfe,jLo,DLo,qD,GLo,OLo,VLo,M1,tfe,XLo,zLo,ND,WLo,QLo,HLo,E1,afe,ULo,JLo,jD,YLo,KLo,ZLo,C1,nfe,e8o,o8o,DD,r8o,t8o,a8o,w1,sfe,n8o,s8o,GD,l8o,i8o,d8o,A1,lfe,c8o,f8o,OD,m8o,g8o,h8o,y1,ife,p8o,_8o,VD,u8o,b8o,v8o,L1,dfe,F8o,T8o,XD,M8o,E8o,C8o,x1,cfe,w8o,A8o,zD,y8o,L8o,x8o,$1,ffe,$8o,k8o,WD,S8o,R8o,P8o,k1,mfe,B8o,I8o,QD,q8o,N8o,j8o,S1,gfe,D8o,G8o,HD,O8o,V8o,X8o,R1,hfe,z8o,W8o,UD,Q8o,H8o,U8o,P1,J8o,pfe,Y8o,K8o,_fe,Z8o,exo,B1,oNe,Di,I1,ufe,vA,oxo,bfe,rxo,rNe,Ro,FA,txo,Gi,axo,JD,nxo,sxo,YD,lxo,ixo,dxo,TA,cxo,vfe,fxo,mxo,gxo,it,MA,hxo,Ffe,pxo,_xo,Oi,uxo,Tfe,bxo,vxo,KD,Fxo,Txo,Mxo,q1,Exo,oo,EA,Cxo,Mfe,wxo,Axo,Ra,yxo,Efe,Lxo,xxo,Cfe,$xo,kxo,wfe,Sxo,Rxo,Pxo,q,N1,Afe,Bxo,Ixo,ZD,qxo,Nxo,jxo,j1,yfe,Dxo,Gxo,eG,Oxo,Vxo,Xxo,D1,Lfe,zxo,Wxo,oG,Qxo,Hxo,Uxo,G1,xfe,Jxo,Yxo,rG,Kxo,Zxo,e$o,O1,$fe,o$o,r$o,tG,t$o,a$o,n$o,V1,kfe,s$o,l$o,aG,i$o,d$o,c$o,X1,Sfe,f$o,m$o,nG,g$o,h$o,p$o,z1,Rfe,_$o,u$o,sG,b$o,v$o,F$o,W1,Pfe,T$o,M$o,lG,E$o,C$o,w$o,Q1,Bfe,A$o,y$o,iG,L$o,x$o,$$o,H1,Ife,k$o,S$o,dG,R$o,P$o,B$o,U1,qfe,I$o,q$o,cG,N$o,j$o,D$o,J1,Nfe,G$o,O$o,fG,V$o,X$o,z$o,Y1,jfe,W$o,Q$o,mG,H$o,U$o,J$o,K1,Dfe,Y$o,K$o,gG,Z$o,eko,oko,Z1,Gfe,rko,tko,hG,ako,nko,sko,eb,Ofe,lko,iko,pG,dko,cko,fko,ob,Vfe,mko,gko,_G,hko,pko,_ko,rb,Xfe,uko,bko,uG,vko,Fko,Tko,tb,zfe,Mko,Eko,bG,Cko,wko,Ako,ab,Wfe,yko,Lko,vG,xko,$ko,kko,nb,Qfe,Sko,Rko,FG,Pko,Bko,Iko,sb,Hfe,qko,Nko,TG,jko,Dko,Gko,lb,Ufe,Oko,Vko,MG,Xko,zko,Wko,ib,Jfe,Qko,Hko,EG,Uko,Jko,Yko,db,Yfe,Kko,Zko,CG,eSo,oSo,rSo,cb,Kfe,tSo,aSo,wG,nSo,sSo,lSo,fb,Zfe,iSo,dSo,AG,cSo,fSo,mSo,mb,eme,gSo,hSo,yG,pSo,_So,uSo,gb,ome,bSo,vSo,LG,FSo,TSo,MSo,hb,rme,ESo,CSo,xG,wSo,ASo,ySo,pb,tme,LSo,xSo,$G,$So,kSo,SSo,_b,ame,RSo,PSo,kG,BSo,ISo,qSo,ub,nme,NSo,jSo,SG,DSo,GSo,OSo,bb,sme,VSo,XSo,RG,zSo,WSo,QSo,vb,lme,HSo,USo,PG,JSo,YSo,KSo,Fb,ime,ZSo,eRo,BG,oRo,rRo,tRo,Tb,dme,aRo,nRo,IG,sRo,lRo,iRo,Mb,cme,dRo,cRo,qG,fRo,mRo,gRo,Eb,fme,hRo,pRo,NG,_Ro,uRo,bRo,Cb,mme,vRo,FRo,jG,TRo,MRo,ERo,wb,gme,CRo,wRo,DG,ARo,yRo,LRo,Ab,hme,xRo,$Ro,GG,kRo,SRo,RRo,yb,pme,PRo,BRo,OG,IRo,qRo,NRo,Lb,_me,jRo,DRo,VG,GRo,ORo,VRo,xb,ume,XRo,zRo,XG,WRo,QRo,HRo,$b,URo,bme,JRo,YRo,vme,KRo,ZRo,kb,tNe,Vi,Sb,Fme,CA,ePo,Tme,oPo,aNe,Po,wA,rPo,Xi,tPo,zG,aPo,nPo,WG,sPo,lPo,iPo,AA,dPo,Mme,cPo,fPo,mPo,dt,yA,gPo,Eme,hPo,pPo,zi,_Po,Cme,uPo,bPo,QG,vPo,FPo,TPo,Rb,MPo,ro,LA,EPo,wme,CPo,wPo,Pa,APo,Ame,yPo,LPo,yme,xPo,$Po,Lme,kPo,SPo,RPo,Y,Pb,xme,PPo,BPo,HG,IPo,qPo,NPo,Bb,$me,jPo,DPo,UG,GPo,OPo,VPo,Ib,kme,XPo,zPo,JG,WPo,QPo,HPo,qb,Sme,UPo,JPo,YG,YPo,KPo,ZPo,Nb,Rme,eBo,oBo,KG,rBo,tBo,aBo,jb,Pme,nBo,sBo,ZG,lBo,iBo,dBo,Db,Bme,cBo,fBo,eO,mBo,gBo,hBo,Gb,Ime,pBo,_Bo,oO,uBo,bBo,vBo,Ob,qme,FBo,TBo,rO,MBo,EBo,CBo,Vb,Nme,wBo,ABo,tO,yBo,LBo,xBo,Xb,jme,$Bo,kBo,aO,SBo,RBo,PBo,zb,Dme,BBo,IBo,nO,qBo,NBo,jBo,Wb,Gme,DBo,GBo,sO,OBo,VBo,XBo,Qb,Ome,zBo,WBo,lO,QBo,HBo,UBo,Hb,Vme,JBo,YBo,iO,KBo,ZBo,eIo,Ub,Xme,oIo,rIo,dO,tIo,aIo,nIo,Jb,zme,sIo,lIo,cO,iIo,dIo,cIo,Yb,Wme,fIo,mIo,fO,gIo,hIo,pIo,Kb,Qme,_Io,uIo,mO,bIo,vIo,FIo,Zb,Hme,TIo,MIo,gO,EIo,CIo,wIo,ev,Ume,AIo,yIo,hO,LIo,xIo,$Io,ov,Jme,kIo,SIo,pO,RIo,PIo,BIo,rv,Yme,IIo,qIo,_O,NIo,jIo,DIo,tv,Kme,GIo,OIo,uO,VIo,XIo,zIo,av,Zme,WIo,QIo,bO,HIo,UIo,JIo,nv,ege,YIo,KIo,vO,ZIo,eqo,oqo,sv,oge,rqo,tqo,FO,aqo,nqo,sqo,lv,rge,lqo,iqo,TO,dqo,cqo,fqo,iv,tge,mqo,gqo,MO,hqo,pqo,_qo,dv,uqo,age,bqo,vqo,nge,Fqo,Tqo,cv,nNe,Wi,fv,sge,xA,Mqo,lge,Eqo,sNe,Bo,$A,Cqo,Qi,wqo,EO,Aqo,yqo,CO,Lqo,xqo,$qo,kA,kqo,ige,Sqo,Rqo,Pqo,ct,SA,Bqo,dge,Iqo,qqo,Hi,Nqo,cge,jqo,Dqo,wO,Gqo,Oqo,Vqo,mv,Xqo,to,RA,zqo,fge,Wqo,Qqo,Ba,Hqo,mge,Uqo,Jqo,gge,Yqo,Kqo,hge,Zqo,eNo,oNo,Yr,gv,pge,rNo,tNo,AO,aNo,nNo,sNo,hv,_ge,lNo,iNo,yO,dNo,cNo,fNo,pv,uge,mNo,gNo,LO,hNo,pNo,_No,_v,bge,uNo,bNo,xO,vNo,FNo,TNo,uv,vge,MNo,ENo,$O,CNo,wNo,ANo,bv,yNo,Fge,LNo,xNo,Tge,$No,kNo,vv,lNe,Ui,Fv,Mge,PA,SNo,Ege,RNo,iNe,Io,BA,PNo,Ji,BNo,kO,INo,qNo,SO,NNo,jNo,DNo,IA,GNo,Cge,ONo,VNo,XNo,ft,qA,zNo,wge,WNo,QNo,Yi,HNo,Age,UNo,JNo,RO,YNo,KNo,ZNo,Tv,ejo,ao,NA,ojo,yge,rjo,tjo,Ia,ajo,Lge,njo,sjo,xge,ljo,ijo,$ge,djo,cjo,fjo,U,Mv,kge,mjo,gjo,PO,hjo,pjo,_jo,Ev,Sge,ujo,bjo,BO,vjo,Fjo,Tjo,Cv,Rge,Mjo,Ejo,IO,Cjo,wjo,Ajo,wv,Pge,yjo,Ljo,qO,xjo,$jo,kjo,Av,Bge,Sjo,Rjo,NO,Pjo,Bjo,Ijo,yv,Ige,qjo,Njo,jO,jjo,Djo,Gjo,Lv,qge,Ojo,Vjo,DO,Xjo,zjo,Wjo,xv,Nge,Qjo,Hjo,GO,Ujo,Jjo,Yjo,$v,jge,Kjo,Zjo,OO,eDo,oDo,rDo,kv,Dge,tDo,aDo,VO,nDo,sDo,lDo,Sv,Gge,iDo,dDo,XO,cDo,fDo,mDo,Rv,Oge,gDo,hDo,zO,pDo,_Do,uDo,Pv,Vge,bDo,vDo,WO,FDo,TDo,MDo,Bv,Xge,EDo,CDo,QO,wDo,ADo,yDo,Iv,zge,LDo,xDo,HO,$Do,kDo,SDo,qv,Wge,RDo,PDo,UO,BDo,IDo,qDo,Nv,Qge,NDo,jDo,JO,DDo,GDo,ODo,jv,Hge,VDo,XDo,YO,zDo,WDo,QDo,Dv,Uge,HDo,UDo,KO,JDo,YDo,KDo,Gv,Jge,ZDo,eGo,ZO,oGo,rGo,tGo,Ov,Yge,aGo,nGo,eV,sGo,lGo,iGo,Vv,Kge,dGo,cGo,oV,fGo,mGo,gGo,Xv,Zge,hGo,pGo,rV,_Go,uGo,bGo,zv,ehe,vGo,FGo,tV,TGo,MGo,EGo,Wv,ohe,CGo,wGo,aV,AGo,yGo,LGo,Qv,rhe,xGo,$Go,nV,kGo,SGo,RGo,Hv,the,PGo,BGo,sV,IGo,qGo,NGo,Uv,ahe,jGo,DGo,lV,GGo,OGo,VGo,Jv,nhe,XGo,zGo,iV,WGo,QGo,HGo,Yv,she,UGo,JGo,dV,YGo,KGo,ZGo,Kv,lhe,eOo,oOo,cV,rOo,tOo,aOo,Zv,ihe,nOo,sOo,fV,lOo,iOo,dOo,eF,dhe,cOo,fOo,mV,mOo,gOo,hOo,oF,pOo,che,_Oo,uOo,fhe,bOo,vOo,rF,dNe,Ki,tF,mhe,jA,FOo,ghe,TOo,cNe,qo,DA,MOo,Zi,EOo,gV,COo,wOo,hV,AOo,yOo,LOo,GA,xOo,hhe,$Oo,kOo,SOo,mt,OA,ROo,phe,POo,BOo,ed,IOo,_he,qOo,NOo,pV,jOo,DOo,GOo,aF,OOo,no,VA,VOo,uhe,XOo,zOo,qa,WOo,bhe,QOo,HOo,vhe,UOo,JOo,Fhe,YOo,KOo,ZOo,V,nF,The,eVo,oVo,_V,rVo,tVo,aVo,sF,Mhe,nVo,sVo,uV,lVo,iVo,dVo,lF,Ehe,cVo,fVo,bV,mVo,gVo,hVo,iF,Che,pVo,_Vo,vV,uVo,bVo,vVo,dF,whe,FVo,TVo,FV,MVo,EVo,CVo,cF,Ahe,wVo,AVo,TV,yVo,LVo,xVo,fF,yhe,$Vo,kVo,MV,SVo,RVo,PVo,mF,Lhe,BVo,IVo,EV,qVo,NVo,jVo,gF,xhe,DVo,GVo,CV,OVo,VVo,XVo,hF,$he,zVo,WVo,wV,QVo,HVo,UVo,pF,khe,JVo,YVo,AV,KVo,ZVo,eXo,_F,She,oXo,rXo,yV,tXo,aXo,nXo,uF,Rhe,sXo,lXo,LV,iXo,dXo,cXo,bF,Phe,fXo,mXo,xV,gXo,hXo,pXo,vF,Bhe,_Xo,uXo,$V,bXo,vXo,FXo,FF,Ihe,TXo,MXo,kV,EXo,CXo,wXo,TF,qhe,AXo,yXo,SV,LXo,xXo,$Xo,MF,Nhe,kXo,SXo,RV,RXo,PXo,BXo,EF,jhe,IXo,qXo,PV,NXo,jXo,DXo,CF,Dhe,GXo,OXo,BV,VXo,XXo,zXo,wF,Ghe,WXo,QXo,IV,HXo,UXo,JXo,AF,Ohe,YXo,KXo,qV,ZXo,ezo,ozo,yF,Vhe,rzo,tzo,NV,azo,nzo,szo,LF,Xhe,lzo,izo,jV,dzo,czo,fzo,xF,zhe,mzo,gzo,DV,hzo,pzo,_zo,$F,Whe,uzo,bzo,GV,vzo,Fzo,Tzo,kF,Qhe,Mzo,Ezo,OV,Czo,wzo,Azo,SF,Hhe,yzo,Lzo,VV,xzo,$zo,kzo,RF,Uhe,Szo,Rzo,XV,Pzo,Bzo,Izo,PF,Jhe,qzo,Nzo,zV,jzo,Dzo,Gzo,BF,Yhe,Ozo,Vzo,WV,Xzo,zzo,Wzo,IF,Khe,Qzo,Hzo,QV,Uzo,Jzo,Yzo,qF,Zhe,Kzo,Zzo,HV,eWo,oWo,rWo,NF,epe,tWo,aWo,UV,nWo,sWo,lWo,jF,ope,iWo,dWo,JV,cWo,fWo,mWo,DF,rpe,gWo,hWo,YV,pWo,_Wo,uWo,GF,tpe,bWo,vWo,KV,FWo,TWo,MWo,OF,ape,EWo,CWo,ZV,wWo,AWo,yWo,VF,npe,LWo,xWo,eX,$Wo,kWo,SWo,XF,RWo,spe,PWo,BWo,lpe,IWo,qWo,zF,fNe,od,WF,ipe,XA,NWo,dpe,jWo,mNe,No,zA,DWo,rd,GWo,oX,OWo,VWo,rX,XWo,zWo,WWo,WA,QWo,cpe,HWo,UWo,JWo,gt,QA,YWo,fpe,KWo,ZWo,td,eQo,mpe,oQo,rQo,tX,tQo,aQo,nQo,QF,sQo,so,HA,lQo,gpe,iQo,dQo,Na,cQo,hpe,fQo,mQo,ppe,gQo,hQo,_pe,pQo,_Qo,uQo,upe,HF,bpe,bQo,vQo,aX,FQo,TQo,MQo,UF,EQo,vpe,CQo,wQo,Fpe,AQo,yQo,JF,gNe,ad,YF,Tpe,UA,LQo,Mpe,xQo,hNe,jo,JA,$Qo,nd,kQo,nX,SQo,RQo,sX,PQo,BQo,IQo,YA,qQo,Epe,NQo,jQo,DQo,ht,KA,GQo,Cpe,OQo,VQo,sd,XQo,wpe,zQo,WQo,lX,QQo,HQo,UQo,KF,JQo,lo,ZA,YQo,Ape,KQo,ZQo,ja,eHo,ype,oHo,rHo,Lpe,tHo,aHo,xpe,nHo,sHo,lHo,Fe,ZF,$pe,iHo,dHo,iX,cHo,fHo,mHo,e6,kpe,gHo,hHo,dX,pHo,_Ho,uHo,o6,Spe,bHo,vHo,cX,FHo,THo,MHo,r6,Rpe,EHo,CHo,fX,wHo,AHo,yHo,Bs,Ppe,LHo,xHo,mX,$Ho,kHo,gX,SHo,RHo,PHo,t6,Bpe,BHo,IHo,hX,qHo,NHo,jHo,pt,Ipe,DHo,GHo,pX,OHo,VHo,_X,XHo,zHo,uX,WHo,QHo,HHo,a6,qpe,UHo,JHo,bX,YHo,KHo,ZHo,n6,Npe,eUo,oUo,vX,rUo,tUo,aUo,s6,jpe,nUo,sUo,FX,lUo,iUo,dUo,l6,Dpe,cUo,fUo,TX,mUo,gUo,hUo,i6,Gpe,pUo,_Uo,MX,uUo,bUo,vUo,d6,Ope,FUo,TUo,EX,MUo,EUo,CUo,c6,Vpe,wUo,AUo,CX,yUo,LUo,xUo,f6,$Uo,Xpe,kUo,SUo,zpe,RUo,PUo,m6,pNe,ld,g6,Wpe,ey,BUo,Qpe,IUo,_Ne,Do,oy,qUo,id,NUo,wX,jUo,DUo,AX,GUo,OUo,VUo,ry,XUo,Hpe,zUo,WUo,QUo,_t,ty,HUo,Upe,UUo,JUo,dd,YUo,Jpe,KUo,ZUo,yX,eJo,oJo,rJo,h6,tJo,io,ay,aJo,Ype,nJo,sJo,Da,lJo,Kpe,iJo,dJo,Zpe,cJo,fJo,e_e,mJo,gJo,hJo,o_e,p6,r_e,pJo,_Jo,LX,uJo,bJo,vJo,_6,FJo,t_e,TJo,MJo,a_e,EJo,CJo,u6,uNe,cd,b6,n_e,ny,wJo,s_e,AJo,bNe,Go,sy,yJo,fd,LJo,xX,xJo,$Jo,$X,kJo,SJo,RJo,ly,PJo,l_e,BJo,IJo,qJo,ut,iy,NJo,i_e,jJo,DJo,md,GJo,d_e,OJo,VJo,kX,XJo,zJo,WJo,v6,QJo,co,dy,HJo,c_e,UJo,JJo,Ga,YJo,f_e,KJo,ZJo,m_e,eYo,oYo,g_e,rYo,tYo,aYo,Se,F6,h_e,nYo,sYo,SX,lYo,iYo,dYo,T6,p_e,cYo,fYo,RX,mYo,gYo,hYo,M6,__e,pYo,_Yo,PX,uYo,bYo,vYo,E6,u_e,FYo,TYo,BX,MYo,EYo,CYo,C6,b_e,wYo,AYo,IX,yYo,LYo,xYo,w6,v_e,$Yo,kYo,qX,SYo,RYo,PYo,A6,F_e,BYo,IYo,NX,qYo,NYo,jYo,y6,T_e,DYo,GYo,jX,OYo,VYo,XYo,L6,M_e,zYo,WYo,DX,QYo,HYo,UYo,x6,JYo,E_e,YYo,KYo,C_e,ZYo,eKo,$6,vNe,gd,k6,w_e,cy,oKo,A_e,rKo,FNe,Oo,fy,tKo,hd,aKo,GX,nKo,sKo,OX,lKo,iKo,dKo,my,cKo,y_e,fKo,mKo,gKo,bt,gy,hKo,L_e,pKo,_Ko,pd,uKo,x_e,bKo,vKo,VX,FKo,TKo,MKo,S6,EKo,fo,hy,CKo,$_e,wKo,AKo,Oa,yKo,k_e,LKo,xKo,S_e,$Ko,kKo,R_e,SKo,RKo,PKo,Kr,R6,P_e,BKo,IKo,XX,qKo,NKo,jKo,P6,B_e,DKo,GKo,zX,OKo,VKo,XKo,B6,I_e,zKo,WKo,WX,QKo,HKo,UKo,I6,q_e,JKo,YKo,QX,KKo,ZKo,eZo,q6,N_e,oZo,rZo,HX,tZo,aZo,nZo,N6,sZo,j_e,lZo,iZo,D_e,dZo,cZo,j6,TNe,_d,D6,G_e,py,fZo,O_e,mZo,MNe,Vo,_y,gZo,ud,hZo,UX,pZo,_Zo,JX,uZo,bZo,vZo,uy,FZo,V_e,TZo,MZo,EZo,vt,by,CZo,X_e,wZo,AZo,bd,yZo,z_e,LZo,xZo,YX,$Zo,kZo,SZo,G6,RZo,mo,vy,PZo,W_e,BZo,IZo,Va,qZo,Q_e,NZo,jZo,H_e,DZo,GZo,U_e,OZo,VZo,XZo,Re,O6,J_e,zZo,WZo,KX,QZo,HZo,UZo,V6,Y_e,JZo,YZo,ZX,KZo,ZZo,eer,X6,K_e,oer,rer,ez,ter,aer,ner,z6,Z_e,ser,ler,oz,ier,der,cer,W6,eue,fer,mer,rz,ger,her,per,Q6,oue,_er,uer,tz,ber,ver,Fer,H6,rue,Ter,Mer,az,Eer,Cer,wer,U6,tue,Aer,yer,nz,Ler,xer,$er,J6,aue,ker,Ser,sz,Rer,Per,Ber,Y6,Ier,nue,qer,Ner,sue,jer,Der,K6,ENe,vd,Z6,lue,Fy,Ger,iue,Oer,CNe,Xo,Ty,Ver,Fd,Xer,lz,zer,Wer,iz,Qer,Her,Uer,My,Jer,due,Yer,Ker,Zer,Ft,Ey,eor,cue,oor,ror,Td,tor,fue,aor,nor,dz,sor,lor,ior,eT,dor,go,Cy,cor,mue,mor,gor,Xa,hor,gue,por,_or,hue,uor,bor,pue,vor,For,Tor,wy,oT,_ue,Mor,Eor,cz,Cor,wor,Aor,rT,uue,yor,Lor,fz,xor,$or,kor,tT,Sor,bue,Ror,Por,vue,Bor,Ior,aT,wNe,Md,nT,Fue,Ay,qor,Tue,Nor,ANe,zo,yy,jor,Ed,Dor,mz,Gor,Oor,gz,Vor,Xor,zor,Ly,Wor,Mue,Qor,Hor,Uor,Tt,xy,Jor,Eue,Yor,Kor,Cd,Zor,Cue,err,orr,hz,rrr,trr,arr,sT,nrr,ho,$y,srr,wue,lrr,irr,za,drr,Aue,crr,frr,yue,mrr,grr,Lue,hrr,prr,_rr,Zr,lT,xue,urr,brr,pz,vrr,Frr,Trr,iT,$ue,Mrr,Err,_z,Crr,wrr,Arr,dT,kue,yrr,Lrr,uz,xrr,$rr,krr,cT,Sue,Srr,Rrr,bz,Prr,Brr,Irr,fT,Rue,qrr,Nrr,vz,jrr,Drr,Grr,mT,Orr,Pue,Vrr,Xrr,Bue,zrr,Wrr,gT,yNe,wd,hT,Iue,ky,Qrr,que,Hrr,LNe,Wo,Sy,Urr,Ad,Jrr,Fz,Yrr,Krr,Tz,Zrr,etr,otr,Ry,rtr,Nue,ttr,atr,ntr,Mt,Py,str,jue,ltr,itr,yd,dtr,Due,ctr,ftr,Mz,mtr,gtr,htr,pT,ptr,po,By,_tr,Gue,utr,btr,Wa,vtr,Oue,Ftr,Ttr,Vue,Mtr,Etr,Xue,Ctr,wtr,Atr,Ld,_T,zue,ytr,Ltr,Ez,xtr,$tr,ktr,uT,Wue,Str,Rtr,Cz,Ptr,Btr,Itr,bT,Que,qtr,Ntr,wz,jtr,Dtr,Gtr,vT,Otr,Hue,Vtr,Xtr,Uue,ztr,Wtr,FT,xNe,xd,TT,Jue,Iy,Qtr,Yue,Htr,$Ne,Qo,qy,Utr,$d,Jtr,Az,Ytr,Ktr,yz,Ztr,ear,oar,Ny,rar,Kue,tar,aar,nar,Et,jy,sar,Zue,lar,iar,kd,dar,e2e,car,far,Lz,mar,gar,har,MT,par,_o,Dy,_ar,o2e,uar,bar,Qa,Far,r2e,Tar,Mar,t2e,Ear,Car,a2e,war,Aar,yar,Gy,ET,n2e,Lar,xar,xz,$ar,kar,Sar,CT,s2e,Rar,Par,$z,Bar,Iar,qar,wT,Nar,l2e,jar,Dar,i2e,Gar,Oar,AT,kNe,Sd,yT,d2e,Oy,Var,c2e,Xar,SNe,Ho,Vy,zar,Rd,War,kz,Qar,Har,Sz,Uar,Jar,Yar,Xy,Kar,f2e,Zar,enr,onr,Ct,zy,rnr,m2e,tnr,anr,Pd,nnr,g2e,snr,lnr,Rz,inr,dnr,cnr,LT,fnr,uo,Wy,mnr,h2e,gnr,hnr,Ha,pnr,p2e,_nr,unr,_2e,bnr,vnr,u2e,Fnr,Tnr,Mnr,b2e,xT,v2e,Enr,Cnr,Pz,wnr,Anr,ynr,$T,Lnr,F2e,xnr,$nr,T2e,knr,Snr,kT,RNe,Bd,ST,M2e,Qy,Rnr,E2e,Pnr,PNe,Uo,Hy,Bnr,Id,Inr,Bz,qnr,Nnr,Iz,jnr,Dnr,Gnr,Uy,Onr,C2e,Vnr,Xnr,znr,wt,Jy,Wnr,w2e,Qnr,Hnr,qd,Unr,A2e,Jnr,Ynr,qz,Knr,Znr,esr,RT,osr,bo,Yy,rsr,y2e,tsr,asr,Ua,nsr,L2e,ssr,lsr,x2e,isr,dsr,$2e,csr,fsr,msr,Ja,PT,k2e,gsr,hsr,Nz,psr,_sr,usr,BT,S2e,bsr,vsr,jz,Fsr,Tsr,Msr,IT,R2e,Esr,Csr,Dz,wsr,Asr,ysr,qT,P2e,Lsr,xsr,Gz,$sr,ksr,Ssr,NT,Rsr,B2e,Psr,Bsr,I2e,Isr,qsr,jT,BNe,Nd,DT,q2e,Ky,Nsr,N2e,jsr,INe,Jo,Zy,Dsr,jd,Gsr,Oz,Osr,Vsr,Vz,Xsr,zsr,Wsr,eL,Qsr,j2e,Hsr,Usr,Jsr,At,oL,Ysr,D2e,Ksr,Zsr,Dd,elr,G2e,olr,rlr,Xz,tlr,alr,nlr,GT,slr,vo,rL,llr,O2e,ilr,dlr,Ya,clr,V2e,flr,mlr,X2e,glr,hlr,z2e,plr,_lr,ulr,W2e,OT,Q2e,blr,vlr,zz,Flr,Tlr,Mlr,VT,Elr,H2e,Clr,wlr,U2e,Alr,ylr,XT,qNe,Gd,zT,J2e,tL,Llr,Y2e,xlr,NNe,Yo,aL,$lr,Od,klr,Wz,Slr,Rlr,Qz,Plr,Blr,Ilr,nL,qlr,K2e,Nlr,jlr,Dlr,yt,sL,Glr,Z2e,Olr,Vlr,Vd,Xlr,e1e,zlr,Wlr,Hz,Qlr,Hlr,Ulr,WT,Jlr,wr,lL,Ylr,o1e,Klr,Zlr,Ka,eir,r1e,oir,rir,t1e,tir,air,a1e,nir,sir,lir,N,QT,n1e,iir,dir,Uz,cir,fir,mir,HT,s1e,gir,hir,Jz,pir,_ir,uir,UT,l1e,bir,vir,Yz,Fir,Tir,Mir,JT,i1e,Eir,Cir,Kz,wir,Air,yir,YT,d1e,Lir,xir,Zz,$ir,kir,Sir,KT,c1e,Rir,Pir,eW,Bir,Iir,qir,ZT,f1e,Nir,jir,oW,Dir,Gir,Oir,e7,m1e,Vir,Xir,rW,zir,Wir,Qir,o7,g1e,Hir,Uir,tW,Jir,Yir,Kir,r7,h1e,Zir,edr,aW,odr,rdr,tdr,t7,p1e,adr,ndr,nW,sdr,ldr,idr,a7,_1e,ddr,cdr,sW,fdr,mdr,gdr,n7,u1e,hdr,pdr,lW,_dr,udr,bdr,s7,b1e,vdr,Fdr,iW,Tdr,Mdr,Edr,l7,v1e,Cdr,wdr,dW,Adr,ydr,Ldr,i7,F1e,xdr,$dr,cW,kdr,Sdr,Rdr,d7,T1e,Pdr,Bdr,fW,Idr,qdr,Ndr,Is,M1e,jdr,Ddr,mW,Gdr,Odr,gW,Vdr,Xdr,zdr,c7,E1e,Wdr,Qdr,hW,Hdr,Udr,Jdr,f7,C1e,Ydr,Kdr,pW,Zdr,ecr,ocr,m7,w1e,rcr,tcr,_W,acr,ncr,scr,g7,A1e,lcr,icr,uW,dcr,ccr,fcr,h7,y1e,mcr,gcr,bW,hcr,pcr,_cr,p7,L1e,ucr,bcr,vW,vcr,Fcr,Tcr,_7,x1e,Mcr,Ecr,FW,Ccr,wcr,Acr,u7,$1e,ycr,Lcr,TW,xcr,$cr,kcr,b7,k1e,Scr,Rcr,MW,Pcr,Bcr,Icr,v7,S1e,qcr,Ncr,EW,jcr,Dcr,Gcr,F7,R1e,Ocr,Vcr,CW,Xcr,zcr,Wcr,T7,P1e,Qcr,Hcr,wW,Ucr,Jcr,Ycr,M7,B1e,Kcr,Zcr,AW,efr,ofr,rfr,E7,I1e,tfr,afr,yW,nfr,sfr,lfr,C7,q1e,ifr,dfr,LW,cfr,ffr,mfr,w7,N1e,gfr,hfr,xW,pfr,_fr,ufr,A7,j1e,bfr,vfr,$W,Ffr,Tfr,Mfr,y7,D1e,Efr,Cfr,kW,wfr,Afr,yfr,L7,G1e,Lfr,xfr,SW,$fr,kfr,Sfr,x7,O1e,Rfr,Pfr,RW,Bfr,Ifr,qfr,$7,V1e,Nfr,jfr,PW,Dfr,Gfr,Ofr,k7,X1e,Vfr,Xfr,BW,zfr,Wfr,Qfr,S7,z1e,Hfr,Ufr,IW,Jfr,Yfr,Kfr,R7,W1e,Zfr,emr,qW,omr,rmr,tmr,P7,Q1e,amr,nmr,NW,smr,lmr,imr,B7,H1e,dmr,cmr,jW,fmr,mmr,gmr,I7,U1e,hmr,pmr,DW,_mr,umr,bmr,q7,J1e,vmr,Fmr,GW,Tmr,Mmr,Emr,N7,jNe,Xd,j7,Y1e,iL,Cmr,K1e,wmr,DNe,Ko,dL,Amr,zd,ymr,OW,Lmr,xmr,VW,$mr,kmr,Smr,cL,Rmr,Z1e,Pmr,Bmr,Imr,Lt,fL,qmr,ebe,Nmr,jmr,Wd,Dmr,obe,Gmr,Omr,XW,Vmr,Xmr,zmr,D7,Wmr,Ar,mL,Qmr,rbe,Hmr,Umr,Za,Jmr,tbe,Ymr,Kmr,abe,Zmr,egr,nbe,ogr,rgr,tgr,se,G7,sbe,agr,ngr,zW,sgr,lgr,igr,O7,lbe,dgr,cgr,WW,fgr,mgr,ggr,V7,ibe,hgr,pgr,QW,_gr,ugr,bgr,X7,dbe,vgr,Fgr,HW,Tgr,Mgr,Egr,z7,cbe,Cgr,wgr,UW,Agr,ygr,Lgr,W7,fbe,xgr,$gr,JW,kgr,Sgr,Rgr,Q7,mbe,Pgr,Bgr,YW,Igr,qgr,Ngr,H7,gbe,jgr,Dgr,KW,Ggr,Ogr,Vgr,U7,hbe,Xgr,zgr,ZW,Wgr,Qgr,Hgr,J7,pbe,Ugr,Jgr,eQ,Ygr,Kgr,Zgr,Y7,_be,ehr,ohr,oQ,rhr,thr,ahr,K7,ube,nhr,shr,rQ,lhr,ihr,dhr,Z7,bbe,chr,fhr,tQ,mhr,ghr,hhr,e9,vbe,phr,_hr,aQ,uhr,bhr,vhr,o9,Fbe,Fhr,Thr,nQ,Mhr,Ehr,Chr,r9,Tbe,whr,Ahr,sQ,yhr,Lhr,xhr,t9,Mbe,$hr,khr,lQ,Shr,Rhr,Phr,a9,Ebe,Bhr,Ihr,iQ,qhr,Nhr,jhr,n9,Cbe,Dhr,Ghr,dQ,Ohr,Vhr,Xhr,s9,wbe,zhr,Whr,cQ,Qhr,Hhr,Uhr,l9,Abe,Jhr,Yhr,fQ,Khr,Zhr,epr,i9,ybe,opr,rpr,mQ,tpr,apr,npr,d9,Lbe,spr,lpr,gQ,ipr,dpr,cpr,c9,GNe,Qd,f9,xbe,gL,fpr,$be,mpr,ONe,Zo,hL,gpr,Hd,hpr,hQ,ppr,_pr,pQ,upr,bpr,vpr,pL,Fpr,kbe,Tpr,Mpr,Epr,xt,_L,Cpr,Sbe,wpr,Apr,Ud,ypr,Rbe,Lpr,xpr,_Q,$pr,kpr,Spr,m9,Rpr,yr,uL,Ppr,Pbe,Bpr,Ipr,en,qpr,Bbe,Npr,jpr,Ibe,Dpr,Gpr,qbe,Opr,Vpr,Xpr,Ee,g9,Nbe,zpr,Wpr,uQ,Qpr,Hpr,Upr,h9,jbe,Jpr,Ypr,bQ,Kpr,Zpr,e_r,p9,Dbe,o_r,r_r,vQ,t_r,a_r,n_r,_9,Gbe,s_r,l_r,FQ,i_r,d_r,c_r,u9,Obe,f_r,m_r,TQ,g_r,h_r,p_r,b9,Vbe,__r,u_r,MQ,b_r,v_r,F_r,v9,Xbe,T_r,M_r,EQ,E_r,C_r,w_r,F9,zbe,A_r,y_r,CQ,L_r,x_r,$_r,T9,Wbe,k_r,S_r,wQ,R_r,P_r,B_r,M9,Qbe,I_r,q_r,AQ,N_r,j_r,D_r,E9,Hbe,G_r,O_r,yQ,V_r,X_r,z_r,C9,Ube,W_r,Q_r,LQ,H_r,U_r,J_r,w9,VNe,Jd,A9,Jbe,bL,Y_r,Ybe,K_r,XNe,er,vL,Z_r,Yd,eur,xQ,our,rur,$Q,tur,aur,nur,FL,sur,Kbe,lur,iur,dur,$t,TL,cur,Zbe,fur,mur,Kd,gur,eve,hur,pur,kQ,_ur,uur,bur,y9,vur,Lr,ML,Fur,ove,Tur,Mur,on,Eur,rve,Cur,wur,tve,Aur,yur,ave,Lur,xur,$ur,rn,L9,nve,kur,Sur,SQ,Rur,Pur,Bur,x9,sve,Iur,qur,RQ,Nur,jur,Dur,$9,lve,Gur,Our,PQ,Vur,Xur,zur,k9,ive,Wur,Qur,BQ,Hur,Uur,Jur,S9,zNe,Zd,R9,dve,EL,Yur,cve,Kur,WNe,or,CL,Zur,ec,e2r,IQ,o2r,r2r,qQ,t2r,a2r,n2r,wL,s2r,fve,l2r,i2r,d2r,kt,AL,c2r,mve,f2r,m2r,oc,g2r,gve,h2r,p2r,NQ,_2r,u2r,b2r,P9,v2r,xr,yL,F2r,hve,T2r,M2r,tn,E2r,pve,C2r,w2r,_ve,A2r,y2r,uve,L2r,x2r,$2r,ie,B9,bve,k2r,S2r,jQ,R2r,P2r,B2r,I9,vve,I2r,q2r,DQ,N2r,j2r,D2r,q9,Fve,G2r,O2r,GQ,V2r,X2r,z2r,N9,Tve,W2r,Q2r,OQ,H2r,U2r,J2r,j9,Mve,Y2r,K2r,VQ,Z2r,e1r,o1r,D9,Eve,r1r,t1r,XQ,a1r,n1r,s1r,G9,Cve,l1r,i1r,zQ,d1r,c1r,f1r,O9,wve,m1r,g1r,WQ,h1r,p1r,_1r,V9,Ave,u1r,b1r,QQ,v1r,F1r,T1r,X9,yve,M1r,E1r,HQ,C1r,w1r,A1r,z9,Lve,y1r,L1r,UQ,x1r,$1r,k1r,W9,xve,S1r,R1r,JQ,P1r,B1r,I1r,Q9,$ve,q1r,N1r,YQ,j1r,D1r,G1r,H9,kve,O1r,V1r,KQ,X1r,z1r,W1r,U9,Sve,Q1r,H1r,ZQ,U1r,J1r,Y1r,J9,Rve,K1r,Z1r,eH,ebr,obr,rbr,Y9,Pve,tbr,abr,oH,nbr,sbr,lbr,K9,Bve,ibr,dbr,rH,cbr,fbr,mbr,Z9,Ive,gbr,hbr,tH,pbr,_br,ubr,eM,qve,bbr,vbr,aH,Fbr,Tbr,Mbr,oM,QNe,rc,rM,Nve,LL,Ebr,jve,Cbr,HNe,rr,xL,wbr,tc,Abr,nH,ybr,Lbr,sH,xbr,$br,kbr,$L,Sbr,Dve,Rbr,Pbr,Bbr,St,kL,Ibr,Gve,qbr,Nbr,ac,jbr,Ove,Dbr,Gbr,lH,Obr,Vbr,Xbr,tM,zbr,$r,SL,Wbr,Vve,Qbr,Hbr,an,Ubr,Xve,Jbr,Ybr,zve,Kbr,Zbr,Wve,evr,ovr,rvr,ye,aM,Qve,tvr,avr,iH,nvr,svr,lvr,nM,Hve,ivr,dvr,dH,cvr,fvr,mvr,sM,Uve,gvr,hvr,cH,pvr,_vr,uvr,lM,Jve,bvr,vvr,fH,Fvr,Tvr,Mvr,iM,Yve,Evr,Cvr,mH,wvr,Avr,yvr,dM,Kve,Lvr,xvr,gH,$vr,kvr,Svr,cM,Zve,Rvr,Pvr,hH,Bvr,Ivr,qvr,fM,eFe,Nvr,jvr,pH,Dvr,Gvr,Ovr,mM,oFe,Vvr,Xvr,_H,zvr,Wvr,Qvr,gM,rFe,Hvr,Uvr,uH,Jvr,Yvr,Kvr,hM,UNe,nc,pM,tFe,RL,Zvr,aFe,eFr,JNe,tr,PL,oFr,sc,rFr,bH,tFr,aFr,vH,nFr,sFr,lFr,BL,iFr,nFe,dFr,cFr,fFr,Rt,IL,mFr,sFe,gFr,hFr,lc,pFr,lFe,_Fr,uFr,FH,bFr,vFr,FFr,_M,TFr,kr,qL,MFr,iFe,EFr,CFr,nn,wFr,dFe,AFr,yFr,cFe,LFr,xFr,fFe,$Fr,kFr,SFr,ee,uM,mFe,RFr,PFr,TH,BFr,IFr,qFr,bM,gFe,NFr,jFr,MH,DFr,GFr,OFr,vM,hFe,VFr,XFr,EH,zFr,WFr,QFr,FM,pFe,HFr,UFr,CH,JFr,YFr,KFr,TM,_Fe,ZFr,e6r,wH,o6r,r6r,t6r,MM,uFe,a6r,n6r,AH,s6r,l6r,i6r,EM,bFe,d6r,c6r,yH,f6r,m6r,g6r,CM,vFe,h6r,p6r,LH,_6r,u6r,b6r,wM,FFe,v6r,F6r,xH,T6r,M6r,E6r,AM,TFe,C6r,w6r,$H,A6r,y6r,L6r,yM,MFe,x6r,$6r,kH,k6r,S6r,R6r,LM,EFe,P6r,B6r,SH,I6r,q6r,N6r,xM,CFe,j6r,D6r,RH,G6r,O6r,V6r,$M,wFe,X6r,z6r,PH,W6r,Q6r,H6r,kM,AFe,U6r,J6r,BH,Y6r,K6r,Z6r,SM,yFe,eTr,oTr,IH,rTr,tTr,aTr,RM,LFe,nTr,sTr,qH,lTr,iTr,dTr,PM,xFe,cTr,fTr,NH,mTr,gTr,hTr,BM,$Fe,pTr,_Tr,jH,uTr,bTr,vTr,IM,kFe,FTr,TTr,DH,MTr,ETr,CTr,qM,SFe,wTr,ATr,GH,yTr,LTr,xTr,NM,RFe,$Tr,kTr,OH,STr,RTr,PTr,jM,PFe,BTr,ITr,VH,qTr,NTr,jTr,DM,BFe,DTr,GTr,XH,OTr,VTr,XTr,GM,IFe,zTr,WTr,zH,QTr,HTr,UTr,OM,qFe,JTr,YTr,WH,KTr,ZTr,e7r,VM,YNe,ic,XM,NFe,NL,o7r,jFe,r7r,KNe,ar,jL,t7r,dc,a7r,QH,n7r,s7r,HH,l7r,i7r,d7r,DL,c7r,DFe,f7r,m7r,g7r,Pt,GL,h7r,GFe,p7r,_7r,cc,u7r,OFe,b7r,v7r,UH,F7r,T7r,M7r,zM,E7r,Sr,OL,C7r,VFe,w7r,A7r,sn,y7r,XFe,L7r,x7r,zFe,$7r,k7r,WFe,S7r,R7r,P7r,pe,WM,QFe,B7r,I7r,JH,q7r,N7r,j7r,QM,HFe,D7r,G7r,YH,O7r,V7r,X7r,HM,UFe,z7r,W7r,KH,Q7r,H7r,U7r,UM,JFe,J7r,Y7r,ZH,K7r,Z7r,e9r,JM,YFe,o9r,r9r,eU,t9r,a9r,n9r,YM,KFe,s9r,l9r,oU,i9r,d9r,c9r,KM,ZFe,f9r,m9r,rU,g9r,h9r,p9r,ZM,e6e,_9r,u9r,tU,b9r,v9r,F9r,e4,o6e,T9r,M9r,aU,E9r,C9r,w9r,o4,r6e,A9r,y9r,nU,L9r,x9r,$9r,r4,t6e,k9r,S9r,sU,R9r,P9r,B9r,t4,a6e,I9r,q9r,lU,N9r,j9r,D9r,a4,n6e,G9r,O9r,iU,V9r,X9r,z9r,n4,s6e,W9r,Q9r,dU,H9r,U9r,J9r,s4,l6e,Y9r,K9r,cU,Z9r,eMr,oMr,l4,i6e,rMr,tMr,fU,aMr,nMr,sMr,i4,d6e,lMr,iMr,mU,dMr,cMr,fMr,d4,ZNe,fc,c4,c6e,VL,mMr,f6e,gMr,eje,nr,XL,hMr,mc,pMr,gU,_Mr,uMr,hU,bMr,vMr,FMr,zL,TMr,m6e,MMr,EMr,CMr,Bt,WL,wMr,g6e,AMr,yMr,gc,LMr,h6e,xMr,$Mr,pU,kMr,SMr,RMr,f4,PMr,Rr,QL,BMr,p6e,IMr,qMr,ln,NMr,_6e,jMr,DMr,u6e,GMr,OMr,b6e,VMr,XMr,zMr,HL,m4,v6e,WMr,QMr,_U,HMr,UMr,JMr,g4,F6e,YMr,KMr,uU,ZMr,e4r,o4r,h4,oje,hc,p4,T6e,UL,r4r,M6e,t4r,rje,sr,JL,a4r,pc,n4r,bU,s4r,l4r,vU,i4r,d4r,c4r,YL,f4r,E6e,m4r,g4r,h4r,It,KL,p4r,C6e,_4r,u4r,_c,b4r,w6e,v4r,F4r,FU,T4r,M4r,E4r,_4,C4r,Pr,ZL,w4r,A6e,A4r,y4r,dn,L4r,y6e,x4r,$4r,L6e,k4r,S4r,x6e,R4r,P4r,B4r,$6e,u4,k6e,I4r,q4r,TU,N4r,j4r,D4r,b4,tje,uc,v4,S6e,e8,G4r,R6e,O4r,aje,lr,o8,V4r,bc,X4r,MU,z4r,W4r,EU,Q4r,H4r,U4r,r8,J4r,P6e,Y4r,K4r,Z4r,qt,t8,eEr,B6e,oEr,rEr,vc,tEr,I6e,aEr,nEr,CU,sEr,lEr,iEr,F4,dEr,Br,a8,cEr,q6e,fEr,mEr,cn,gEr,N6e,hEr,pEr,j6e,_Er,uEr,D6e,bEr,vEr,FEr,de,T4,G6e,TEr,MEr,wU,EEr,CEr,wEr,M4,O6e,AEr,yEr,AU,LEr,xEr,$Er,E4,V6e,kEr,SEr,yU,REr,PEr,BEr,C4,X6e,IEr,qEr,LU,NEr,jEr,DEr,w4,z6e,GEr,OEr,xU,VEr,XEr,zEr,A4,W6e,WEr,QEr,$U,HEr,UEr,JEr,y4,Q6e,YEr,KEr,kU,ZEr,e5r,o5r,L4,H6e,r5r,t5r,SU,a5r,n5r,s5r,x4,U6e,l5r,i5r,RU,d5r,c5r,f5r,$4,J6e,m5r,g5r,PU,h5r,p5r,_5r,k4,Y6e,u5r,b5r,BU,v5r,F5r,T5r,S4,K6e,M5r,E5r,IU,C5r,w5r,A5r,R4,Z6e,y5r,L5r,qU,x5r,$5r,k5r,P4,eTe,S5r,R5r,NU,P5r,B5r,I5r,B4,oTe,q5r,N5r,jU,j5r,D5r,G5r,I4,rTe,O5r,V5r,DU,X5r,z5r,W5r,q4,tTe,Q5r,H5r,GU,U5r,J5r,Y5r,N4,aTe,K5r,Z5r,OU,eCr,oCr,rCr,j4,nTe,tCr,aCr,VU,nCr,sCr,lCr,D4,sTe,iCr,dCr,XU,cCr,fCr,mCr,G4,nje,Fc,O4,lTe,n8,gCr,iTe,hCr,sje,ir,s8,pCr,Tc,_Cr,zU,uCr,bCr,WU,vCr,FCr,TCr,l8,MCr,dTe,ECr,CCr,wCr,Nt,i8,ACr,cTe,yCr,LCr,Mc,xCr,fTe,$Cr,kCr,QU,SCr,RCr,PCr,V4,BCr,Ir,d8,ICr,mTe,qCr,NCr,fn,jCr,gTe,DCr,GCr,hTe,OCr,VCr,pTe,XCr,zCr,WCr,ce,X4,_Te,QCr,HCr,HU,UCr,JCr,YCr,z4,uTe,KCr,ZCr,UU,e3r,o3r,r3r,W4,bTe,t3r,a3r,JU,n3r,s3r,l3r,Q4,vTe,i3r,d3r,YU,c3r,f3r,m3r,H4,FTe,g3r,h3r,KU,p3r,_3r,u3r,U4,TTe,b3r,v3r,ZU,F3r,T3r,M3r,J4,MTe,E3r,C3r,eJ,w3r,A3r,y3r,Y4,ETe,L3r,x3r,oJ,$3r,k3r,S3r,K4,CTe,R3r,P3r,rJ,B3r,I3r,q3r,Z4,wTe,N3r,j3r,tJ,D3r,G3r,O3r,eE,ATe,V3r,X3r,aJ,z3r,W3r,Q3r,oE,yTe,H3r,U3r,nJ,J3r,Y3r,K3r,rE,LTe,Z3r,ewr,sJ,owr,rwr,twr,tE,xTe,awr,nwr,lJ,swr,lwr,iwr,aE,$Te,dwr,cwr,iJ,fwr,mwr,gwr,nE,kTe,hwr,pwr,dJ,_wr,uwr,bwr,sE,STe,vwr,Fwr,cJ,Twr,Mwr,Ewr,lE,RTe,Cwr,wwr,fJ,Awr,ywr,Lwr,iE,PTe,xwr,$wr,mJ,kwr,Swr,Rwr,dE,BTe,Pwr,Bwr,gJ,Iwr,qwr,Nwr,cE,lje,Ec,fE,ITe,c8,jwr,qTe,Dwr,ije,dr,f8,Gwr,Cc,Owr,hJ,Vwr,Xwr,pJ,zwr,Wwr,Qwr,m8,Hwr,NTe,Uwr,Jwr,Ywr,jt,g8,Kwr,jTe,Zwr,e0r,wc,o0r,DTe,r0r,t0r,_J,a0r,n0r,s0r,mE,l0r,qr,h8,i0r,GTe,d0r,c0r,mn,f0r,OTe,m0r,g0r,VTe,h0r,p0r,XTe,_0r,u0r,b0r,zTe,gE,WTe,v0r,F0r,uJ,T0r,M0r,E0r,hE,dje,Ac,pE,QTe,p8,C0r,HTe,w0r,cje,cr,_8,A0r,yc,y0r,bJ,L0r,x0r,vJ,$0r,k0r,S0r,u8,R0r,UTe,P0r,B0r,I0r,Dt,b8,q0r,JTe,N0r,j0r,Lc,D0r,YTe,G0r,O0r,FJ,V0r,X0r,z0r,_E,W0r,Nr,v8,Q0r,KTe,H0r,U0r,gn,J0r,ZTe,Y0r,K0r,e7e,Z0r,eAr,o7e,oAr,rAr,tAr,r7e,uE,t7e,aAr,nAr,TJ,sAr,lAr,iAr,bE,fje,xc,vE,a7e,F8,dAr,n7e,cAr,mje,fr,T8,fAr,$c,mAr,MJ,gAr,hAr,EJ,pAr,_Ar,uAr,M8,bAr,s7e,vAr,FAr,TAr,Gt,E8,MAr,l7e,EAr,CAr,kc,wAr,i7e,AAr,yAr,CJ,LAr,xAr,$Ar,FE,kAr,jr,C8,SAr,d7e,RAr,PAr,hn,BAr,c7e,IAr,qAr,f7e,NAr,jAr,m7e,DAr,GAr,OAr,oe,TE,g7e,VAr,XAr,wJ,zAr,WAr,QAr,ME,h7e,HAr,UAr,AJ,JAr,YAr,KAr,EE,p7e,ZAr,eyr,yJ,oyr,ryr,tyr,CE,_7e,ayr,nyr,LJ,syr,lyr,iyr,wE,u7e,dyr,cyr,xJ,fyr,myr,gyr,AE,b7e,hyr,pyr,$J,_yr,uyr,byr,yE,v7e,vyr,Fyr,kJ,Tyr,Myr,Eyr,LE,F7e,Cyr,wyr,SJ,Ayr,yyr,Lyr,xE,T7e,xyr,$yr,RJ,kyr,Syr,Ryr,$E,M7e,Pyr,Byr,PJ,Iyr,qyr,Nyr,kE,E7e,jyr,Dyr,BJ,Gyr,Oyr,Vyr,SE,C7e,Xyr,zyr,IJ,Wyr,Qyr,Hyr,RE,w7e,Uyr,Jyr,qJ,Yyr,Kyr,Zyr,PE,A7e,eLr,oLr,NJ,rLr,tLr,aLr,BE,y7e,nLr,sLr,jJ,lLr,iLr,dLr,IE,L7e,cLr,fLr,DJ,mLr,gLr,hLr,qE,x7e,pLr,_Lr,GJ,uLr,bLr,vLr,NE,$7e,FLr,TLr,OJ,MLr,ELr,CLr,jE,k7e,wLr,ALr,VJ,yLr,LLr,xLr,DE,S7e,$Lr,kLr,XJ,SLr,RLr,PLr,GE,R7e,BLr,ILr,zJ,qLr,NLr,jLr,OE,P7e,DLr,GLr,WJ,OLr,VLr,XLr,VE,B7e,zLr,WLr,QJ,QLr,HLr,ULr,XE,I7e,JLr,YLr,HJ,KLr,ZLr,e8r,zE,q7e,o8r,r8r,UJ,t8r,a8r,n8r,WE,N7e,s8r,l8r,JJ,i8r,d8r,c8r,QE,gje,Sc,HE,j7e,w8,f8r,D7e,m8r,hje,mr,A8,g8r,Rc,h8r,YJ,p8r,_8r,KJ,u8r,b8r,v8r,y8,F8r,G7e,T8r,M8r,E8r,Ot,L8,C8r,O7e,w8r,A8r,Pc,y8r,V7e,L8r,x8r,ZJ,$8r,k8r,S8r,UE,R8r,Dr,x8,P8r,X7e,B8r,I8r,pn,q8r,z7e,N8r,j8r,W7e,D8r,G8r,Q7e,O8r,V8r,X8r,Pe,JE,H7e,z8r,W8r,eY,Q8r,H8r,U8r,YE,U7e,J8r,Y8r,oY,K8r,Z8r,exr,KE,J7e,oxr,rxr,rY,txr,axr,nxr,ZE,Y7e,sxr,lxr,tY,ixr,dxr,cxr,e5,K7e,fxr,mxr,aY,gxr,hxr,pxr,o5,Z7e,_xr,uxr,nY,bxr,vxr,Fxr,r5,e9e,Txr,Mxr,sY,Exr,Cxr,wxr,t5,o9e,Axr,yxr,lY,Lxr,xxr,$xr,a5,r9e,kxr,Sxr,iY,Rxr,Pxr,Bxr,n5,pje,Bc,s5,t9e,$8,Ixr,a9e,qxr,_je,gr,k8,Nxr,Ic,jxr,dY,Dxr,Gxr,cY,Oxr,Vxr,Xxr,S8,zxr,n9e,Wxr,Qxr,Hxr,Vt,R8,Uxr,s9e,Jxr,Yxr,qc,Kxr,l9e,Zxr,e$r,fY,o$r,r$r,t$r,l5,a$r,Gr,P8,n$r,i9e,s$r,l$r,_n,i$r,d9e,d$r,c$r,c9e,f$r,m$r,f9e,g$r,h$r,p$r,Te,i5,m9e,_$r,u$r,mY,b$r,v$r,F$r,d5,g9e,T$r,M$r,gY,E$r,C$r,w$r,c5,h9e,A$r,y$r,hY,L$r,x$r,$$r,f5,p9e,k$r,S$r,pY,R$r,P$r,B$r,m5,_9e,I$r,q$r,_Y,N$r,j$r,D$r,g5,u9e,G$r,O$r,uY,V$r,X$r,z$r,h5,b9e,W$r,Q$r,bY,H$r,U$r,J$r,p5,v9e,Y$r,K$r,vY,Z$r,ekr,okr,_5,F9e,rkr,tkr,FY,akr,nkr,skr,u5,T9e,lkr,ikr,TY,dkr,ckr,fkr,b5,M9e,mkr,gkr,MY,hkr,pkr,_kr,v5,E9e,ukr,bkr,EY,vkr,Fkr,Tkr,F5,C9e,Mkr,Ekr,CY,Ckr,wkr,Akr,T5,uje,Nc,M5,w9e,B8,ykr,A9e,Lkr,bje,hr,I8,xkr,jc,$kr,wY,kkr,Skr,AY,Rkr,Pkr,Bkr,q8,Ikr,y9e,qkr,Nkr,jkr,Xt,N8,Dkr,L9e,Gkr,Okr,Dc,Vkr,x9e,Xkr,zkr,yY,Wkr,Qkr,Hkr,E5,Ukr,Or,j8,Jkr,$9e,Ykr,Kkr,un,Zkr,k9e,eSr,oSr,S9e,rSr,tSr,R9e,aSr,nSr,sSr,Le,C5,P9e,lSr,iSr,LY,dSr,cSr,fSr,w5,B9e,mSr,gSr,xY,hSr,pSr,_Sr,A5,I9e,uSr,bSr,$Y,vSr,FSr,TSr,y5,q9e,MSr,ESr,kY,CSr,wSr,ASr,L5,N9e,ySr,LSr,SY,xSr,$Sr,kSr,x5,j9e,SSr,RSr,RY,PSr,BSr,ISr,$5,D9e,qSr,NSr,PY,jSr,DSr,GSr,k5,G9e,OSr,VSr,BY,XSr,zSr,WSr,S5,O9e,QSr,HSr,IY,USr,JSr,YSr,R5,V9e,KSr,ZSr,qY,eRr,oRr,rRr,P5,vje,Gc,B5,X9e,D8,tRr,z9e,aRr,Fje,pr,G8,nRr,Oc,sRr,NY,lRr,iRr,jY,dRr,cRr,fRr,O8,mRr,W9e,gRr,hRr,pRr,zt,V8,_Rr,Q9e,uRr,bRr,Vc,vRr,H9e,FRr,TRr,DY,MRr,ERr,CRr,I5,wRr,Vr,X8,ARr,U9e,yRr,LRr,bn,xRr,J9e,$Rr,kRr,Y9e,SRr,RRr,K9e,PRr,BRr,IRr,xe,q5,Z9e,qRr,NRr,GY,jRr,DRr,GRr,N5,eMe,ORr,VRr,OY,XRr,zRr,WRr,j5,oMe,QRr,HRr,VY,URr,JRr,YRr,D5,rMe,KRr,ZRr,XY,ePr,oPr,rPr,G5,tMe,tPr,aPr,zY,nPr,sPr,lPr,O5,aMe,iPr,dPr,WY,cPr,fPr,mPr,V5,nMe,gPr,hPr,QY,pPr,_Pr,uPr,X5,sMe,bPr,vPr,HY,FPr,TPr,MPr,z5,lMe,EPr,CPr,UY,wPr,APr,yPr,W5,iMe,LPr,xPr,JY,$Pr,kPr,SPr,Q5,Tje,Xc,H5,dMe,z8,RPr,cMe,PPr,Mje,_r,W8,BPr,zc,IPr,YY,qPr,NPr,KY,jPr,DPr,GPr,Q8,OPr,fMe,VPr,XPr,zPr,Wt,H8,WPr,mMe,QPr,HPr,Wc,UPr,gMe,JPr,YPr,ZY,KPr,ZPr,eBr,U5,oBr,Xr,U8,rBr,hMe,tBr,aBr,vn,nBr,pMe,sBr,lBr,_Me,iBr,dBr,uMe,cBr,fBr,mBr,$e,J5,bMe,gBr,hBr,eK,pBr,_Br,uBr,Y5,vMe,bBr,vBr,oK,FBr,TBr,MBr,K5,FMe,EBr,CBr,rK,wBr,ABr,yBr,Z5,TMe,LBr,xBr,tK,$Br,kBr,SBr,eC,MMe,RBr,PBr,aK,BBr,IBr,qBr,oC,EMe,NBr,jBr,nK,DBr,GBr,OBr,rC,CMe,VBr,XBr,sK,zBr,WBr,QBr,tC,wMe,HBr,UBr,lK,JBr,YBr,KBr,aC,AMe,ZBr,eIr,iK,oIr,rIr,tIr,nC,yMe,aIr,nIr,dK,sIr,lIr,iIr,sC,Eje,Qc,lC,LMe,J8,dIr,xMe,cIr,Cje,ur,Y8,fIr,Hc,mIr,cK,gIr,hIr,fK,pIr,_Ir,uIr,K8,bIr,$Me,vIr,FIr,TIr,Qt,Z8,MIr,kMe,EIr,CIr,Uc,wIr,SMe,AIr,yIr,mK,LIr,xIr,$Ir,iC,kIr,zr,ex,SIr,RMe,RIr,PIr,Fn,BIr,PMe,IIr,qIr,BMe,NIr,jIr,IMe,DIr,GIr,OIr,ke,dC,qMe,VIr,XIr,gK,zIr,WIr,QIr,cC,NMe,HIr,UIr,hK,JIr,YIr,KIr,fC,jMe,ZIr,eqr,pK,oqr,rqr,tqr,mC,DMe,aqr,nqr,_K,sqr,lqr,iqr,gC,GMe,dqr,cqr,uK,fqr,mqr,gqr,hC,OMe,hqr,pqr,bK,_qr,uqr,bqr,pC,VMe,vqr,Fqr,vK,Tqr,Mqr,Eqr,_C,XMe,Cqr,wqr,FK,Aqr,yqr,Lqr,uC,zMe,xqr,$qr,TK,kqr,Sqr,Rqr,bC,WMe,Pqr,Bqr,MK,Iqr,qqr,Nqr,vC,wje,Jc,FC,QMe,ox,jqr,HMe,Dqr,Aje,br,rx,Gqr,Yc,Oqr,EK,Vqr,Xqr,CK,zqr,Wqr,Qqr,tx,Hqr,UMe,Uqr,Jqr,Yqr,Ht,ax,Kqr,JMe,Zqr,eNr,Kc,oNr,YMe,rNr,tNr,wK,aNr,nNr,sNr,TC,lNr,Wr,nx,iNr,KMe,dNr,cNr,Tn,fNr,ZMe,mNr,gNr,e4e,hNr,pNr,o4e,_Nr,uNr,bNr,Ge,MC,r4e,vNr,FNr,AK,TNr,MNr,ENr,EC,t4e,CNr,wNr,yK,ANr,yNr,LNr,CC,a4e,xNr,$Nr,LK,kNr,SNr,RNr,wC,n4e,PNr,BNr,xK,INr,qNr,NNr,AC,s4e,jNr,DNr,$K,GNr,ONr,VNr,yC,l4e,XNr,zNr,kK,WNr,QNr,HNr,LC,i4e,UNr,JNr,SK,YNr,KNr,ZNr,xC,d4e,ejr,ojr,RK,rjr,tjr,ajr,$C,yje,Zc,kC,c4e,sx,njr,f4e,sjr,Lje,vr,lx,ljr,ef,ijr,PK,djr,cjr,BK,fjr,mjr,gjr,ix,hjr,m4e,pjr,_jr,ujr,Ut,dx,bjr,g4e,vjr,Fjr,of,Tjr,h4e,Mjr,Ejr,IK,Cjr,wjr,Ajr,SC,yjr,Qr,cx,Ljr,p4e,xjr,$jr,Mn,kjr,_4e,Sjr,Rjr,u4e,Pjr,Bjr,b4e,Ijr,qjr,Njr,Oe,RC,v4e,jjr,Djr,qK,Gjr,Ojr,Vjr,PC,F4e,Xjr,zjr,NK,Wjr,Qjr,Hjr,BC,T4e,Ujr,Jjr,jK,Yjr,Kjr,Zjr,IC,M4e,eDr,oDr,DK,rDr,tDr,aDr,qC,E4e,nDr,sDr,GK,lDr,iDr,dDr,NC,C4e,cDr,fDr,OK,mDr,gDr,hDr,jC,w4e,pDr,_Dr,VK,uDr,bDr,vDr,DC,A4e,FDr,TDr,XK,MDr,EDr,CDr,GC,xje,rf,OC,y4e,fx,wDr,L4e,ADr,$je,Fr,mx,yDr,tf,LDr,zK,xDr,$Dr,WK,kDr,SDr,RDr,gx,PDr,x4e,BDr,IDr,qDr,Jt,hx,NDr,$4e,jDr,DDr,af,GDr,k4e,ODr,VDr,QK,XDr,zDr,WDr,VC,QDr,Hr,px,HDr,S4e,UDr,JDr,En,YDr,R4e,KDr,ZDr,P4e,eGr,oGr,B4e,rGr,tGr,aGr,I4e,XC,q4e,nGr,sGr,HK,lGr,iGr,dGr,zC,kje,nf,WC,N4e,_x,cGr,j4e,fGr,Sje,Tr,ux,mGr,sf,gGr,UK,hGr,pGr,JK,_Gr,uGr,bGr,bx,vGr,D4e,FGr,TGr,MGr,Yt,vx,EGr,G4e,CGr,wGr,lf,AGr,O4e,yGr,LGr,YK,xGr,$Gr,kGr,QC,SGr,Ur,Fx,RGr,V4e,PGr,BGr,Cn,IGr,X4e,qGr,NGr,z4e,jGr,DGr,W4e,GGr,OGr,VGr,Tx,HC,Q4e,XGr,zGr,KK,WGr,QGr,HGr,UC,H4e,UGr,JGr,ZK,YGr,KGr,ZGr,JC,Rje,df,YC,U4e,Mx,eOr,J4e,oOr,Pje,Mr,Ex,rOr,cf,tOr,eZ,aOr,nOr,oZ,sOr,lOr,iOr,Cx,dOr,Y4e,cOr,fOr,mOr,Kt,wx,gOr,K4e,hOr,pOr,ff,_Or,Z4e,uOr,bOr,rZ,vOr,FOr,TOr,KC,MOr,Jr,Ax,EOr,eEe,COr,wOr,wn,AOr,oEe,yOr,LOr,rEe,xOr,$Or,tEe,kOr,SOr,ROr,aEe,ZC,nEe,POr,BOr,tZ,IOr,qOr,NOr,e3,Bje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),M0=new re({}),E0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new jOr({props:{warning:!0,$$slots:{default:[cxt]},$$scope:{ctx:L}}}),C0=new re({}),w0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L581"}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),x0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L727"}}),$0=new re({}),k0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L395"}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L409"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),B0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L605"}}),I0=new re({}),q0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),Sh=new jOr({props:{$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Rh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),G0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),O0=new re({}),V0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L87"}}),W0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L101"}}),Kh=new jOr({props:{$$slots:{default:[pxt]},$$scope:{ctx:L}}}),Zh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L254"}}),H0=new re({}),U0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L733"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),Z0=new re({}),eA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L740"}}),rA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),K_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),tA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Vu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),aA=new re({}),nA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L755"}}),lA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),dA=new re({}),cA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L762"}}),mA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),hA=new re({}),pA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L769"}}),uA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),vA=new re({}),FA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L778"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),CA=new re({}),wA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L812"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),xA=new re({}),$A=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L819"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),PA=new re({}),BA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L805"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),jA=new re({}),DA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L787"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),XA=new re({}),zA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L794"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),UA=new re({}),JA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L828"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L867"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L874"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L897"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L881"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L888"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L906"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L913"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L860"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L835"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L842"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L851"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),tL=new re({}),aL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),iL=new re({}),dL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),c9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),gL=new re({}),hL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),m9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),w9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),bL=new re({}),vL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),EL=new re({}),CL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),LL=new re({}),xL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),RL=new re({}),PL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),NL=new re({}),jL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),VL=new re({}),XL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),E8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),L8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),$8=new re({}),k8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),R8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),D8=new re({}),G8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),V8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),z8=new re({}),W8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),_x=new re({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),b0=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),v0=o("AutoConfig"),Ln=o(", "),xn=a("a"),F0=o("AutoModel"),pi=o(`, and
`),$n=a("a"),T0=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),D$=o("will create a model that is an instance of "),ui=a("a"),G$=o("BertModel"),O$=o("."),Eo=l(),wa=a("p"),V$=o("There is one class of "),bf=a("code"),X$=o("AutoModel"),VGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Sqe=l(),bi=a("h2"),vf=a("a"),Jee=a("span"),F(M0.$$.fragment),XGe=l(),Yee=a("span"),zGe=o("Extending the Auto Classes"),Rqe=l(),kn=a("p"),WGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=a("code"),QGe=o("NewModel"),HGe=o(", make sure you have a "),Zee=a("code"),UGe=o("NewModelConfig"),JGe=o(` then you can add those to the auto
classes like this:`),Pqe=l(),F(E0.$$.fragment),Bqe=l(),z$=a("p"),YGe=o("You will then be able to use the auto classes like you would usually do!"),Iqe=l(),F(Ff.$$.fragment),qqe=l(),vi=a("h2"),Tf=a("a"),eoe=a("span"),F(C0.$$.fragment),KGe=l(),ooe=a("span"),ZGe=o("AutoConfig"),Nqe=l(),Co=a("div"),F(w0.$$.fragment),eOe=l(),A0=a("p"),oOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=a("a"),rOe=o("from_pretrained()"),tOe=o(" class method."),aOe=l(),y0=a("p"),nOe=o("This class cannot be instantiated directly using "),roe=a("code"),sOe=o("__init__()"),lOe=o(" (throws an error)."),iOe=l(),Er=a("div"),F(L0.$$.fragment),dOe=l(),toe=a("p"),cOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fOe=l(),Fi=a("p"),mOe=o("The configuration class to instantiate is selected based on the "),aoe=a("code"),gOe=o("model_type"),hOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=a("code"),pOe=o("pretrained_model_name_or_path"),_Oe=o(":"),uOe=l(),A=a("ul"),Mf=a("li"),soe=a("strong"),bOe=o("albert"),vOe=o(" \u2014 "),Q$=a("a"),FOe=o("AlbertConfig"),TOe=o(" (ALBERT model)"),MOe=l(),Ef=a("li"),loe=a("strong"),EOe=o("bart"),COe=o(" \u2014 "),H$=a("a"),wOe=o("BartConfig"),AOe=o(" (BART model)"),yOe=l(),Cf=a("li"),ioe=a("strong"),LOe=o("beit"),xOe=o(" \u2014 "),U$=a("a"),$Oe=o("BeitConfig"),kOe=o(" (BEiT model)"),SOe=l(),wf=a("li"),doe=a("strong"),ROe=o("bert"),POe=o(" \u2014 "),J$=a("a"),BOe=o("BertConfig"),IOe=o(" (BERT model)"),qOe=l(),Af=a("li"),coe=a("strong"),NOe=o("bert-generation"),jOe=o(" \u2014 "),Y$=a("a"),DOe=o("BertGenerationConfig"),GOe=o(" (Bert Generation model)"),OOe=l(),yf=a("li"),foe=a("strong"),VOe=o("big_bird"),XOe=o(" \u2014 "),K$=a("a"),zOe=o("BigBirdConfig"),WOe=o(" (BigBird model)"),QOe=l(),Lf=a("li"),moe=a("strong"),HOe=o("bigbird_pegasus"),UOe=o(" \u2014 "),Z$=a("a"),JOe=o("BigBirdPegasusConfig"),YOe=o(" (BigBirdPegasus model)"),KOe=l(),xf=a("li"),goe=a("strong"),ZOe=o("blenderbot"),eVe=o(" \u2014 "),ek=a("a"),oVe=o("BlenderbotConfig"),rVe=o(" (Blenderbot model)"),tVe=l(),$f=a("li"),hoe=a("strong"),aVe=o("blenderbot-small"),nVe=o(" \u2014 "),ok=a("a"),sVe=o("BlenderbotSmallConfig"),lVe=o(" (BlenderbotSmall model)"),iVe=l(),kf=a("li"),poe=a("strong"),dVe=o("camembert"),cVe=o(" \u2014 "),rk=a("a"),fVe=o("CamembertConfig"),mVe=o(" (CamemBERT model)"),gVe=l(),Sf=a("li"),_oe=a("strong"),hVe=o("canine"),pVe=o(" \u2014 "),tk=a("a"),_Ve=o("CanineConfig"),uVe=o(" (Canine model)"),bVe=l(),Rf=a("li"),uoe=a("strong"),vVe=o("clip"),FVe=o(" \u2014 "),ak=a("a"),TVe=o("CLIPConfig"),MVe=o(" (CLIP model)"),EVe=l(),Pf=a("li"),boe=a("strong"),CVe=o("convbert"),wVe=o(" \u2014 "),nk=a("a"),AVe=o("ConvBertConfig"),yVe=o(" (ConvBERT model)"),LVe=l(),Bf=a("li"),voe=a("strong"),xVe=o("convnext"),$Ve=o(" \u2014 "),sk=a("a"),kVe=o("ConvNextConfig"),SVe=o(" (ConvNext model)"),RVe=l(),If=a("li"),Foe=a("strong"),PVe=o("ctrl"),BVe=o(" \u2014 "),lk=a("a"),IVe=o("CTRLConfig"),qVe=o(" (CTRL model)"),NVe=l(),qf=a("li"),Toe=a("strong"),jVe=o("cvt"),DVe=o(" \u2014 "),ik=a("a"),GVe=o("CvtConfig"),OVe=o(" (CvT model)"),VVe=l(),Nf=a("li"),Moe=a("strong"),XVe=o("data2vec-audio"),zVe=o(" \u2014 "),dk=a("a"),WVe=o("Data2VecAudioConfig"),QVe=o(" (Data2VecAudio model)"),HVe=l(),jf=a("li"),Eoe=a("strong"),UVe=o("data2vec-text"),JVe=o(" \u2014 "),ck=a("a"),YVe=o("Data2VecTextConfig"),KVe=o(" (Data2VecText model)"),ZVe=l(),Df=a("li"),Coe=a("strong"),eXe=o("data2vec-vision"),oXe=o(" \u2014 "),fk=a("a"),rXe=o("Data2VecVisionConfig"),tXe=o(" (Data2VecVision model)"),aXe=l(),Gf=a("li"),woe=a("strong"),nXe=o("deberta"),sXe=o(" \u2014 "),mk=a("a"),lXe=o("DebertaConfig"),iXe=o(" (DeBERTa model)"),dXe=l(),Of=a("li"),Aoe=a("strong"),cXe=o("deberta-v2"),fXe=o(" \u2014 "),gk=a("a"),mXe=o("DebertaV2Config"),gXe=o(" (DeBERTa-v2 model)"),hXe=l(),Vf=a("li"),yoe=a("strong"),pXe=o("decision_transformer"),_Xe=o(" \u2014 "),hk=a("a"),uXe=o("DecisionTransformerConfig"),bXe=o(" (Decision Transformer model)"),vXe=l(),Xf=a("li"),Loe=a("strong"),FXe=o("deit"),TXe=o(" \u2014 "),pk=a("a"),MXe=o("DeiTConfig"),EXe=o(" (DeiT model)"),CXe=l(),zf=a("li"),xoe=a("strong"),wXe=o("detr"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("DetrConfig"),LXe=o(" (DETR model)"),xXe=l(),Wf=a("li"),$oe=a("strong"),$Xe=o("distilbert"),kXe=o(" \u2014 "),uk=a("a"),SXe=o("DistilBertConfig"),RXe=o(" (DistilBERT model)"),PXe=l(),Qf=a("li"),koe=a("strong"),BXe=o("dpr"),IXe=o(" \u2014 "),bk=a("a"),qXe=o("DPRConfig"),NXe=o(" (DPR model)"),jXe=l(),Hf=a("li"),Soe=a("strong"),DXe=o("dpt"),GXe=o(" \u2014 "),vk=a("a"),OXe=o("DPTConfig"),VXe=o(" (DPT model)"),XXe=l(),Uf=a("li"),Roe=a("strong"),zXe=o("electra"),WXe=o(" \u2014 "),Fk=a("a"),QXe=o("ElectraConfig"),HXe=o(" (ELECTRA model)"),UXe=l(),Jf=a("li"),Poe=a("strong"),JXe=o("encoder-decoder"),YXe=o(" \u2014 "),Tk=a("a"),KXe=o("EncoderDecoderConfig"),ZXe=o(" (Encoder decoder model)"),eze=l(),Yf=a("li"),Boe=a("strong"),oze=o("flaubert"),rze=o(" \u2014 "),Mk=a("a"),tze=o("FlaubertConfig"),aze=o(" (FlauBERT model)"),nze=l(),Kf=a("li"),Ioe=a("strong"),sze=o("flava"),lze=o(" \u2014 "),Ek=a("a"),ize=o("FlavaConfig"),dze=o(" (Flava model)"),cze=l(),Zf=a("li"),qoe=a("strong"),fze=o("fnet"),mze=o(" \u2014 "),Ck=a("a"),gze=o("FNetConfig"),hze=o(" (FNet model)"),pze=l(),em=a("li"),Noe=a("strong"),_ze=o("fsmt"),uze=o(" \u2014 "),wk=a("a"),bze=o("FSMTConfig"),vze=o(" (FairSeq Machine-Translation model)"),Fze=l(),om=a("li"),joe=a("strong"),Tze=o("funnel"),Mze=o(" \u2014 "),Ak=a("a"),Eze=o("FunnelConfig"),Cze=o(" (Funnel Transformer model)"),wze=l(),rm=a("li"),Doe=a("strong"),Aze=o("glpn"),yze=o(" \u2014 "),yk=a("a"),Lze=o("GLPNConfig"),xze=o(" (GLPN model)"),$ze=l(),tm=a("li"),Goe=a("strong"),kze=o("gpt2"),Sze=o(" \u2014 "),Lk=a("a"),Rze=o("GPT2Config"),Pze=o(" (OpenAI GPT-2 model)"),Bze=l(),am=a("li"),Ooe=a("strong"),Ize=o("gpt_neo"),qze=o(" \u2014 "),xk=a("a"),Nze=o("GPTNeoConfig"),jze=o(" (GPT Neo model)"),Dze=l(),nm=a("li"),Voe=a("strong"),Gze=o("gptj"),Oze=o(" \u2014 "),$k=a("a"),Vze=o("GPTJConfig"),Xze=o(" (GPT-J model)"),zze=l(),sm=a("li"),Xoe=a("strong"),Wze=o("hubert"),Qze=o(" \u2014 "),kk=a("a"),Hze=o("HubertConfig"),Uze=o(" (Hubert model)"),Jze=l(),lm=a("li"),zoe=a("strong"),Yze=o("ibert"),Kze=o(" \u2014 "),Sk=a("a"),Zze=o("IBertConfig"),eWe=o(" (I-BERT model)"),oWe=l(),im=a("li"),Woe=a("strong"),rWe=o("imagegpt"),tWe=o(" \u2014 "),Rk=a("a"),aWe=o("ImageGPTConfig"),nWe=o(" (ImageGPT model)"),sWe=l(),dm=a("li"),Qoe=a("strong"),lWe=o("layoutlm"),iWe=o(" \u2014 "),Pk=a("a"),dWe=o("LayoutLMConfig"),cWe=o(" (LayoutLM model)"),fWe=l(),cm=a("li"),Hoe=a("strong"),mWe=o("layoutlmv2"),gWe=o(" \u2014 "),Bk=a("a"),hWe=o("LayoutLMv2Config"),pWe=o(" (LayoutLMv2 model)"),_We=l(),fm=a("li"),Uoe=a("strong"),uWe=o("led"),bWe=o(" \u2014 "),Ik=a("a"),vWe=o("LEDConfig"),FWe=o(" (LED model)"),TWe=l(),mm=a("li"),Joe=a("strong"),MWe=o("longformer"),EWe=o(" \u2014 "),qk=a("a"),CWe=o("LongformerConfig"),wWe=o(" (Longformer model)"),AWe=l(),gm=a("li"),Yoe=a("strong"),yWe=o("longt5"),LWe=o(" \u2014 "),Nk=a("a"),xWe=o("LongT5Config"),$We=o(" (LongT5 model)"),kWe=l(),hm=a("li"),Koe=a("strong"),SWe=o("luke"),RWe=o(" \u2014 "),jk=a("a"),PWe=o("LukeConfig"),BWe=o(" (LUKE model)"),IWe=l(),pm=a("li"),Zoe=a("strong"),qWe=o("lxmert"),NWe=o(" \u2014 "),Dk=a("a"),jWe=o("LxmertConfig"),DWe=o(" (LXMERT model)"),GWe=l(),_m=a("li"),ere=a("strong"),OWe=o("m2m_100"),VWe=o(" \u2014 "),Gk=a("a"),XWe=o("M2M100Config"),zWe=o(" (M2M100 model)"),WWe=l(),um=a("li"),ore=a("strong"),QWe=o("marian"),HWe=o(" \u2014 "),Ok=a("a"),UWe=o("MarianConfig"),JWe=o(" (Marian model)"),YWe=l(),bm=a("li"),rre=a("strong"),KWe=o("maskformer"),ZWe=o(" \u2014 "),Vk=a("a"),eQe=o("MaskFormerConfig"),oQe=o(" (MaskFormer model)"),rQe=l(),vm=a("li"),tre=a("strong"),tQe=o("mbart"),aQe=o(" \u2014 "),Xk=a("a"),nQe=o("MBartConfig"),sQe=o(" (mBART model)"),lQe=l(),Fm=a("li"),are=a("strong"),iQe=o("megatron-bert"),dQe=o(" \u2014 "),zk=a("a"),cQe=o("MegatronBertConfig"),fQe=o(" (MegatronBert model)"),mQe=l(),Tm=a("li"),nre=a("strong"),gQe=o("mobilebert"),hQe=o(" \u2014 "),Wk=a("a"),pQe=o("MobileBertConfig"),_Qe=o(" (MobileBERT model)"),uQe=l(),Mm=a("li"),sre=a("strong"),bQe=o("mpnet"),vQe=o(" \u2014 "),Qk=a("a"),FQe=o("MPNetConfig"),TQe=o(" (MPNet model)"),MQe=l(),Em=a("li"),lre=a("strong"),EQe=o("mt5"),CQe=o(" \u2014 "),Hk=a("a"),wQe=o("MT5Config"),AQe=o(" (mT5 model)"),yQe=l(),Cm=a("li"),ire=a("strong"),LQe=o("nystromformer"),xQe=o(" \u2014 "),Uk=a("a"),$Qe=o("NystromformerConfig"),kQe=o(" (Nystromformer model)"),SQe=l(),wm=a("li"),dre=a("strong"),RQe=o("openai-gpt"),PQe=o(" \u2014 "),Jk=a("a"),BQe=o("OpenAIGPTConfig"),IQe=o(" (OpenAI GPT model)"),qQe=l(),Am=a("li"),cre=a("strong"),NQe=o("opt"),jQe=o(" \u2014 "),Yk=a("a"),DQe=o("OPTConfig"),GQe=o(" (OPT model)"),OQe=l(),ym=a("li"),fre=a("strong"),VQe=o("pegasus"),XQe=o(" \u2014 "),Kk=a("a"),zQe=o("PegasusConfig"),WQe=o(" (Pegasus model)"),QQe=l(),Lm=a("li"),mre=a("strong"),HQe=o("perceiver"),UQe=o(" \u2014 "),Zk=a("a"),JQe=o("PerceiverConfig"),YQe=o(" (Perceiver model)"),KQe=l(),xm=a("li"),gre=a("strong"),ZQe=o("plbart"),eHe=o(" \u2014 "),eS=a("a"),oHe=o("PLBartConfig"),rHe=o(" (PLBart model)"),tHe=l(),$m=a("li"),hre=a("strong"),aHe=o("poolformer"),nHe=o(" \u2014 "),oS=a("a"),sHe=o("PoolFormerConfig"),lHe=o(" (PoolFormer model)"),iHe=l(),km=a("li"),pre=a("strong"),dHe=o("prophetnet"),cHe=o(" \u2014 "),rS=a("a"),fHe=o("ProphetNetConfig"),mHe=o(" (ProphetNet model)"),gHe=l(),Sm=a("li"),_re=a("strong"),hHe=o("qdqbert"),pHe=o(" \u2014 "),tS=a("a"),_He=o("QDQBertConfig"),uHe=o(" (QDQBert model)"),bHe=l(),Rm=a("li"),ure=a("strong"),vHe=o("rag"),FHe=o(" \u2014 "),aS=a("a"),THe=o("RagConfig"),MHe=o(" (RAG model)"),EHe=l(),Pm=a("li"),bre=a("strong"),CHe=o("realm"),wHe=o(" \u2014 "),nS=a("a"),AHe=o("RealmConfig"),yHe=o(" (Realm model)"),LHe=l(),Bm=a("li"),vre=a("strong"),xHe=o("reformer"),$He=o(" \u2014 "),sS=a("a"),kHe=o("ReformerConfig"),SHe=o(" (Reformer model)"),RHe=l(),Im=a("li"),Fre=a("strong"),PHe=o("regnet"),BHe=o(" \u2014 "),lS=a("a"),IHe=o("RegNetConfig"),qHe=o(" (RegNet model)"),NHe=l(),qm=a("li"),Tre=a("strong"),jHe=o("rembert"),DHe=o(" \u2014 "),iS=a("a"),GHe=o("RemBertConfig"),OHe=o(" (RemBERT model)"),VHe=l(),Nm=a("li"),Mre=a("strong"),XHe=o("resnet"),zHe=o(" \u2014 "),dS=a("a"),WHe=o("ResNetConfig"),QHe=o(" (ResNet model)"),HHe=l(),jm=a("li"),Ere=a("strong"),UHe=o("retribert"),JHe=o(" \u2014 "),cS=a("a"),YHe=o("RetriBertConfig"),KHe=o(" (RetriBERT model)"),ZHe=l(),Dm=a("li"),Cre=a("strong"),eUe=o("roberta"),oUe=o(" \u2014 "),fS=a("a"),rUe=o("RobertaConfig"),tUe=o(" (RoBERTa model)"),aUe=l(),Gm=a("li"),wre=a("strong"),nUe=o("roformer"),sUe=o(" \u2014 "),mS=a("a"),lUe=o("RoFormerConfig"),iUe=o(" (RoFormer model)"),dUe=l(),Om=a("li"),Are=a("strong"),cUe=o("segformer"),fUe=o(" \u2014 "),gS=a("a"),mUe=o("SegformerConfig"),gUe=o(" (SegFormer model)"),hUe=l(),Vm=a("li"),yre=a("strong"),pUe=o("sew"),_Ue=o(" \u2014 "),hS=a("a"),uUe=o("SEWConfig"),bUe=o(" (SEW model)"),vUe=l(),Xm=a("li"),Lre=a("strong"),FUe=o("sew-d"),TUe=o(" \u2014 "),pS=a("a"),MUe=o("SEWDConfig"),EUe=o(" (SEW-D model)"),CUe=l(),zm=a("li"),xre=a("strong"),wUe=o("speech-encoder-decoder"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("SpeechEncoderDecoderConfig"),LUe=o(" (Speech Encoder decoder model)"),xUe=l(),Wm=a("li"),$re=a("strong"),$Ue=o("speech_to_text"),kUe=o(" \u2014 "),uS=a("a"),SUe=o("Speech2TextConfig"),RUe=o(" (Speech2Text model)"),PUe=l(),Qm=a("li"),kre=a("strong"),BUe=o("speech_to_text_2"),IUe=o(" \u2014 "),bS=a("a"),qUe=o("Speech2Text2Config"),NUe=o(" (Speech2Text2 model)"),jUe=l(),Hm=a("li"),Sre=a("strong"),DUe=o("splinter"),GUe=o(" \u2014 "),vS=a("a"),OUe=o("SplinterConfig"),VUe=o(" (Splinter model)"),XUe=l(),Um=a("li"),Rre=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),FS=a("a"),QUe=o("SqueezeBertConfig"),HUe=o(" (SqueezeBERT model)"),UUe=l(),Jm=a("li"),Pre=a("strong"),JUe=o("swin"),YUe=o(" \u2014 "),TS=a("a"),KUe=o("SwinConfig"),ZUe=o(" (Swin model)"),eJe=l(),Ym=a("li"),Bre=a("strong"),oJe=o("t5"),rJe=o(" \u2014 "),MS=a("a"),tJe=o("T5Config"),aJe=o(" (T5 model)"),nJe=l(),Km=a("li"),Ire=a("strong"),sJe=o("tapas"),lJe=o(" \u2014 "),ES=a("a"),iJe=o("TapasConfig"),dJe=o(" (TAPAS model)"),cJe=l(),Zm=a("li"),qre=a("strong"),fJe=o("trajectory_transformer"),mJe=o(" \u2014 "),CS=a("a"),gJe=o("TrajectoryTransformerConfig"),hJe=o(" (Trajectory Transformer model)"),pJe=l(),eg=a("li"),Nre=a("strong"),_Je=o("transfo-xl"),uJe=o(" \u2014 "),wS=a("a"),bJe=o("TransfoXLConfig"),vJe=o(" (Transformer-XL model)"),FJe=l(),og=a("li"),jre=a("strong"),TJe=o("trocr"),MJe=o(" \u2014 "),AS=a("a"),EJe=o("TrOCRConfig"),CJe=o(" (TrOCR model)"),wJe=l(),rg=a("li"),Dre=a("strong"),AJe=o("unispeech"),yJe=o(" \u2014 "),yS=a("a"),LJe=o("UniSpeechConfig"),xJe=o(" (UniSpeech model)"),$Je=l(),tg=a("li"),Gre=a("strong"),kJe=o("unispeech-sat"),SJe=o(" \u2014 "),LS=a("a"),RJe=o("UniSpeechSatConfig"),PJe=o(" (UniSpeechSat model)"),BJe=l(),ag=a("li"),Ore=a("strong"),IJe=o("van"),qJe=o(" \u2014 "),xS=a("a"),NJe=o("VanConfig"),jJe=o(" (VAN model)"),DJe=l(),ng=a("li"),Vre=a("strong"),GJe=o("vilt"),OJe=o(" \u2014 "),$S=a("a"),VJe=o("ViltConfig"),XJe=o(" (ViLT model)"),zJe=l(),sg=a("li"),Xre=a("strong"),WJe=o("vision-encoder-decoder"),QJe=o(" \u2014 "),kS=a("a"),HJe=o("VisionEncoderDecoderConfig"),UJe=o(" (Vision Encoder decoder model)"),JJe=l(),lg=a("li"),zre=a("strong"),YJe=o("vision-text-dual-encoder"),KJe=o(" \u2014 "),SS=a("a"),ZJe=o("VisionTextDualEncoderConfig"),eYe=o(" (VisionTextDualEncoder model)"),oYe=l(),ig=a("li"),Wre=a("strong"),rYe=o("visual_bert"),tYe=o(" \u2014 "),RS=a("a"),aYe=o("VisualBertConfig"),nYe=o(" (VisualBert model)"),sYe=l(),dg=a("li"),Qre=a("strong"),lYe=o("vit"),iYe=o(" \u2014 "),PS=a("a"),dYe=o("ViTConfig"),cYe=o(" (ViT model)"),fYe=l(),cg=a("li"),Hre=a("strong"),mYe=o("vit_mae"),gYe=o(" \u2014 "),BS=a("a"),hYe=o("ViTMAEConfig"),pYe=o(" (ViTMAE model)"),_Ye=l(),fg=a("li"),Ure=a("strong"),uYe=o("wav2vec2"),bYe=o(" \u2014 "),IS=a("a"),vYe=o("Wav2Vec2Config"),FYe=o(" (Wav2Vec2 model)"),TYe=l(),mg=a("li"),Jre=a("strong"),MYe=o("wav2vec2-conformer"),EYe=o(" \u2014 "),qS=a("a"),CYe=o("Wav2Vec2ConformerConfig"),wYe=o(" (Wav2Vec2-Conformer model)"),AYe=l(),gg=a("li"),Yre=a("strong"),yYe=o("wavlm"),LYe=o(" \u2014 "),NS=a("a"),xYe=o("WavLMConfig"),$Ye=o(" (WavLM model)"),kYe=l(),hg=a("li"),Kre=a("strong"),SYe=o("xglm"),RYe=o(" \u2014 "),jS=a("a"),PYe=o("XGLMConfig"),BYe=o(" (XGLM model)"),IYe=l(),pg=a("li"),Zre=a("strong"),qYe=o("xlm"),NYe=o(" \u2014 "),DS=a("a"),jYe=o("XLMConfig"),DYe=o(" (XLM model)"),GYe=l(),_g=a("li"),ete=a("strong"),OYe=o("xlm-prophetnet"),VYe=o(" \u2014 "),GS=a("a"),XYe=o("XLMProphetNetConfig"),zYe=o(" (XLMProphetNet model)"),WYe=l(),ug=a("li"),ote=a("strong"),QYe=o("xlm-roberta"),HYe=o(" \u2014 "),OS=a("a"),UYe=o("XLMRobertaConfig"),JYe=o(" (XLM-RoBERTa model)"),YYe=l(),bg=a("li"),rte=a("strong"),KYe=o("xlm-roberta-xl"),ZYe=o(" \u2014 "),VS=a("a"),eKe=o("XLMRobertaXLConfig"),oKe=o(" (XLM-RoBERTa-XL model)"),rKe=l(),vg=a("li"),tte=a("strong"),tKe=o("xlnet"),aKe=o(" \u2014 "),XS=a("a"),nKe=o("XLNetConfig"),sKe=o(" (XLNet model)"),lKe=l(),Fg=a("li"),ate=a("strong"),iKe=o("yolos"),dKe=o(" \u2014 "),zS=a("a"),cKe=o("YolosConfig"),fKe=o(" (YOLOS model)"),mKe=l(),Tg=a("li"),nte=a("strong"),gKe=o("yoso"),hKe=o(" \u2014 "),WS=a("a"),pKe=o("YosoConfig"),_Ke=o(" (YOSO model)"),uKe=l(),F(Mg.$$.fragment),bKe=l(),Eg=a("div"),F(x0.$$.fragment),vKe=l(),ste=a("p"),FKe=o("Register a new configuration for this class."),jqe=l(),Ti=a("h2"),Cg=a("a"),lte=a("span"),F($0.$$.fragment),TKe=l(),ite=a("span"),MKe=o("AutoTokenizer"),Dqe=l(),wo=a("div"),F(k0.$$.fragment),EKe=l(),S0=a("p"),CKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=a("a"),wKe=o("AutoTokenizer.from_pretrained()"),AKe=o(" class method."),yKe=l(),R0=a("p"),LKe=o("This class cannot be instantiated directly using "),dte=a("code"),xKe=o("__init__()"),$Ke=o(" (throws an error)."),kKe=l(),Cr=a("div"),F(P0.$$.fragment),SKe=l(),cte=a("p"),RKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PKe=l(),Aa=a("p"),BKe=o("The tokenizer class to instantiate is selected based on the "),fte=a("code"),IKe=o("model_type"),qKe=o(` property of the config object (either
passed as an argument or loaded from `),mte=a("code"),NKe=o("pretrained_model_name_or_path"),jKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=a("code"),DKe=o("pretrained_model_name_or_path"),GKe=o(":"),OKe=l(),k=a("ul"),Sn=a("li"),hte=a("strong"),VKe=o("albert"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("AlbertTokenizer"),WKe=o(" or "),US=a("a"),QKe=o("AlbertTokenizerFast"),HKe=o(" (ALBERT model)"),UKe=l(),Rn=a("li"),pte=a("strong"),JKe=o("bart"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("BartTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("BartTokenizerFast"),oZe=o(" (BART model)"),rZe=l(),Pn=a("li"),_te=a("strong"),tZe=o("barthez"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BarthezTokenizer"),sZe=o(" or "),ZS=a("a"),lZe=o("BarthezTokenizerFast"),iZe=o(" (BARThez model)"),dZe=l(),wg=a("li"),ute=a("strong"),cZe=o("bartpho"),fZe=o(" \u2014 "),eR=a("a"),mZe=o("BartphoTokenizer"),gZe=o(" (BARTpho model)"),hZe=l(),Bn=a("li"),bte=a("strong"),pZe=o("bert"),_Ze=o(" \u2014 "),oR=a("a"),uZe=o("BertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("BertTokenizerFast"),FZe=o(" (BERT model)"),TZe=l(),Ag=a("li"),vte=a("strong"),MZe=o("bert-generation"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("BertGenerationTokenizer"),wZe=o(" (Bert Generation model)"),AZe=l(),yg=a("li"),Fte=a("strong"),yZe=o("bert-japanese"),LZe=o(" \u2014 "),aR=a("a"),xZe=o("BertJapaneseTokenizer"),$Ze=o(" (BertJapanese model)"),kZe=l(),Lg=a("li"),Tte=a("strong"),SZe=o("bertweet"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("BertweetTokenizer"),BZe=o(" (Bertweet model)"),IZe=l(),In=a("li"),Mte=a("strong"),qZe=o("big_bird"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("BigBirdTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("BigBirdTokenizerFast"),OZe=o(" (BigBird model)"),VZe=l(),qn=a("li"),Ete=a("strong"),XZe=o("bigbird_pegasus"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("PegasusTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("PegasusTokenizerFast"),UZe=o(" (BigBirdPegasus model)"),JZe=l(),Nn=a("li"),Cte=a("strong"),YZe=o("blenderbot"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BlenderbotTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("BlenderbotTokenizerFast"),reo=o(" (Blenderbot model)"),teo=l(),xg=a("li"),wte=a("strong"),aeo=o("blenderbot-small"),neo=o(" \u2014 "),mR=a("a"),seo=o("BlenderbotSmallTokenizer"),leo=o(" (BlenderbotSmall model)"),ieo=l(),$g=a("li"),Ate=a("strong"),deo=o("byt5"),ceo=o(" \u2014 "),gR=a("a"),feo=o("ByT5Tokenizer"),meo=o(" (ByT5 model)"),geo=l(),jn=a("li"),yte=a("strong"),heo=o("camembert"),peo=o(" \u2014 "),hR=a("a"),_eo=o("CamembertTokenizer"),ueo=o(" or "),pR=a("a"),beo=o("CamembertTokenizerFast"),veo=o(" (CamemBERT model)"),Feo=l(),kg=a("li"),Lte=a("strong"),Teo=o("canine"),Meo=o(" \u2014 "),_R=a("a"),Eeo=o("CanineTokenizer"),Ceo=o(" (Canine model)"),weo=l(),Dn=a("li"),xte=a("strong"),Aeo=o("clip"),yeo=o(" \u2014 "),uR=a("a"),Leo=o("CLIPTokenizer"),xeo=o(" or "),bR=a("a"),$eo=o("CLIPTokenizerFast"),keo=o(" (CLIP model)"),Seo=l(),Gn=a("li"),$te=a("strong"),Reo=o("convbert"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("ConvBertTokenizer"),Ieo=o(" or "),FR=a("a"),qeo=o("ConvBertTokenizerFast"),Neo=o(" (ConvBERT model)"),jeo=l(),On=a("li"),kte=a("strong"),Deo=o("cpm"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("CpmTokenizer"),Veo=o(" or "),MR=a("a"),Xeo=o("CpmTokenizerFast"),zeo=o(" (CPM model)"),Weo=l(),Sg=a("li"),Ste=a("strong"),Qeo=o("ctrl"),Heo=o(" \u2014 "),ER=a("a"),Ueo=o("CTRLTokenizer"),Jeo=o(" (CTRL model)"),Yeo=l(),Vn=a("li"),Rte=a("strong"),Keo=o("data2vec-text"),Zeo=o(" \u2014 "),CR=a("a"),eoo=o("RobertaTokenizer"),ooo=o(" or "),wR=a("a"),roo=o("RobertaTokenizerFast"),too=o(" (Data2VecText model)"),aoo=l(),Xn=a("li"),Pte=a("strong"),noo=o("deberta"),soo=o(" \u2014 "),AR=a("a"),loo=o("DebertaTokenizer"),ioo=o(" or "),yR=a("a"),doo=o("DebertaTokenizerFast"),coo=o(" (DeBERTa model)"),foo=l(),zn=a("li"),Bte=a("strong"),moo=o("deberta-v2"),goo=o(" \u2014 "),LR=a("a"),hoo=o("DebertaV2Tokenizer"),poo=o(" or "),xR=a("a"),_oo=o("DebertaV2TokenizerFast"),uoo=o(" (DeBERTa-v2 model)"),boo=l(),Wn=a("li"),Ite=a("strong"),voo=o("distilbert"),Foo=o(" \u2014 "),$R=a("a"),Too=o("DistilBertTokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("DistilBertTokenizerFast"),Coo=o(" (DistilBERT model)"),woo=l(),Qn=a("li"),qte=a("strong"),Aoo=o("dpr"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("DPRQuestionEncoderTokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("DPRQuestionEncoderTokenizerFast"),koo=o(" (DPR model)"),Soo=l(),Hn=a("li"),Nte=a("strong"),Roo=o("electra"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("ElectraTokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("ElectraTokenizerFast"),Noo=o(" (ELECTRA model)"),joo=l(),Rg=a("li"),jte=a("strong"),Doo=o("flaubert"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("FlaubertTokenizer"),Voo=o(" (FlauBERT model)"),Xoo=l(),Un=a("li"),Dte=a("strong"),zoo=o("fnet"),Woo=o(" \u2014 "),qR=a("a"),Qoo=o("FNetTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("FNetTokenizerFast"),Joo=o(" (FNet model)"),Yoo=l(),Pg=a("li"),Gte=a("strong"),Koo=o("fsmt"),Zoo=o(" \u2014 "),jR=a("a"),ero=o("FSMTTokenizer"),oro=o(" (FairSeq Machine-Translation model)"),rro=l(),Jn=a("li"),Ote=a("strong"),tro=o("funnel"),aro=o(" \u2014 "),DR=a("a"),nro=o("FunnelTokenizer"),sro=o(" or "),GR=a("a"),lro=o("FunnelTokenizerFast"),iro=o(" (Funnel Transformer model)"),dro=l(),Yn=a("li"),Vte=a("strong"),cro=o("gpt2"),fro=o(" \u2014 "),OR=a("a"),mro=o("GPT2Tokenizer"),gro=o(" or "),VR=a("a"),hro=o("GPT2TokenizerFast"),pro=o(" (OpenAI GPT-2 model)"),_ro=l(),Kn=a("li"),Xte=a("strong"),uro=o("gpt_neo"),bro=o(" \u2014 "),XR=a("a"),vro=o("GPT2Tokenizer"),Fro=o(" or "),zR=a("a"),Tro=o("GPT2TokenizerFast"),Mro=o(" (GPT Neo model)"),Ero=l(),Zn=a("li"),zte=a("strong"),Cro=o("gptj"),wro=o(" \u2014 "),WR=a("a"),Aro=o("GPT2Tokenizer"),yro=o(" or "),QR=a("a"),Lro=o("GPT2TokenizerFast"),xro=o(" (GPT-J model)"),$ro=l(),es=a("li"),Wte=a("strong"),kro=o("herbert"),Sro=o(" \u2014 "),HR=a("a"),Rro=o("HerbertTokenizer"),Pro=o(" or "),UR=a("a"),Bro=o("HerbertTokenizerFast"),Iro=o(" (HerBERT model)"),qro=l(),Bg=a("li"),Qte=a("strong"),Nro=o("hubert"),jro=o(" \u2014 "),JR=a("a"),Dro=o("Wav2Vec2CTCTokenizer"),Gro=o(" (Hubert model)"),Oro=l(),os=a("li"),Hte=a("strong"),Vro=o("ibert"),Xro=o(" \u2014 "),YR=a("a"),zro=o("RobertaTokenizer"),Wro=o(" or "),KR=a("a"),Qro=o("RobertaTokenizerFast"),Hro=o(" (I-BERT model)"),Uro=l(),rs=a("li"),Ute=a("strong"),Jro=o("layoutlm"),Yro=o(" \u2014 "),ZR=a("a"),Kro=o("LayoutLMTokenizer"),Zro=o(" or "),eP=a("a"),eto=o("LayoutLMTokenizerFast"),oto=o(" (LayoutLM model)"),rto=l(),ts=a("li"),Jte=a("strong"),tto=o("layoutlmv2"),ato=o(" \u2014 "),oP=a("a"),nto=o("LayoutLMv2Tokenizer"),sto=o(" or "),rP=a("a"),lto=o("LayoutLMv2TokenizerFast"),ito=o(" (LayoutLMv2 model)"),dto=l(),as=a("li"),Yte=a("strong"),cto=o("layoutxlm"),fto=o(" \u2014 "),tP=a("a"),mto=o("LayoutXLMTokenizer"),gto=o(" or "),aP=a("a"),hto=o("LayoutXLMTokenizerFast"),pto=o(" (LayoutXLM model)"),_to=l(),ns=a("li"),Kte=a("strong"),uto=o("led"),bto=o(" \u2014 "),nP=a("a"),vto=o("LEDTokenizer"),Fto=o(" or "),sP=a("a"),Tto=o("LEDTokenizerFast"),Mto=o(" (LED model)"),Eto=l(),ss=a("li"),Zte=a("strong"),Cto=o("longformer"),wto=o(" \u2014 "),lP=a("a"),Ato=o("LongformerTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("LongformerTokenizerFast"),xto=o(" (Longformer model)"),$to=l(),ls=a("li"),eae=a("strong"),kto=o("longt5"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("T5Tokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("T5TokenizerFast"),Ito=o(" (LongT5 model)"),qto=l(),Ig=a("li"),oae=a("strong"),Nto=o("luke"),jto=o(" \u2014 "),fP=a("a"),Dto=o("LukeTokenizer"),Gto=o(" (LUKE model)"),Oto=l(),is=a("li"),rae=a("strong"),Vto=o("lxmert"),Xto=o(" \u2014 "),mP=a("a"),zto=o("LxmertTokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("LxmertTokenizerFast"),Hto=o(" (LXMERT model)"),Uto=l(),qg=a("li"),tae=a("strong"),Jto=o("m2m_100"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("M2M100Tokenizer"),Zto=o(" (M2M100 model)"),eao=l(),Ng=a("li"),aae=a("strong"),oao=o("marian"),rao=o(" \u2014 "),pP=a("a"),tao=o("MarianTokenizer"),aao=o(" (Marian model)"),nao=l(),ds=a("li"),nae=a("strong"),sao=o("mbart"),lao=o(" \u2014 "),_P=a("a"),iao=o("MBartTokenizer"),dao=o(" or "),uP=a("a"),cao=o("MBartTokenizerFast"),fao=o(" (mBART model)"),mao=l(),cs=a("li"),sae=a("strong"),gao=o("mbart50"),hao=o(" \u2014 "),bP=a("a"),pao=o("MBart50Tokenizer"),_ao=o(" or "),vP=a("a"),uao=o("MBart50TokenizerFast"),bao=o(" (mBART-50 model)"),vao=l(),fs=a("li"),lae=a("strong"),Fao=o("megatron-bert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("BertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("BertTokenizerFast"),wao=o(" (MegatronBert model)"),Aao=l(),jg=a("li"),iae=a("strong"),yao=o("mluke"),Lao=o(" \u2014 "),MP=a("a"),xao=o("MLukeTokenizer"),$ao=o(" (mLUKE model)"),kao=l(),ms=a("li"),dae=a("strong"),Sao=o("mobilebert"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("MobileBertTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("MobileBertTokenizerFast"),qao=o(" (MobileBERT model)"),Nao=l(),gs=a("li"),cae=a("strong"),jao=o("mpnet"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("MPNetTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("MPNetTokenizerFast"),Xao=o(" (MPNet model)"),zao=l(),hs=a("li"),fae=a("strong"),Wao=o("mt5"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("MT5Tokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("MT5TokenizerFast"),Yao=o(" (mT5 model)"),Kao=l(),ps=a("li"),mae=a("strong"),Zao=o("nystromformer"),eno=o(" \u2014 "),xP=a("a"),ono=o("AlbertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("AlbertTokenizerFast"),ano=o(" (Nystromformer model)"),nno=l(),_s=a("li"),gae=a("strong"),sno=o("openai-gpt"),lno=o(" \u2014 "),kP=a("a"),ino=o("OpenAIGPTTokenizer"),dno=o(" or "),SP=a("a"),cno=o("OpenAIGPTTokenizerFast"),fno=o(" (OpenAI GPT model)"),mno=l(),Dg=a("li"),hae=a("strong"),gno=o("opt"),hno=o(" \u2014 "),RP=a("a"),pno=o("GPT2Tokenizer"),_no=o(" (OPT model)"),uno=l(),us=a("li"),pae=a("strong"),bno=o("pegasus"),vno=o(" \u2014 "),PP=a("a"),Fno=o("PegasusTokenizer"),Tno=o(" or "),BP=a("a"),Mno=o("PegasusTokenizerFast"),Eno=o(" (Pegasus model)"),Cno=l(),Gg=a("li"),_ae=a("strong"),wno=o("perceiver"),Ano=o(" \u2014 "),IP=a("a"),yno=o("PerceiverTokenizer"),Lno=o(" (Perceiver model)"),xno=l(),Og=a("li"),uae=a("strong"),$no=o("phobert"),kno=o(" \u2014 "),qP=a("a"),Sno=o("PhobertTokenizer"),Rno=o(" (PhoBERT model)"),Pno=l(),Vg=a("li"),bae=a("strong"),Bno=o("plbart"),Ino=o(" \u2014 "),NP=a("a"),qno=o("PLBartTokenizer"),Nno=o(" (PLBart model)"),jno=l(),Xg=a("li"),vae=a("strong"),Dno=o("prophetnet"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("ProphetNetTokenizer"),Vno=o(" (ProphetNet model)"),Xno=l(),bs=a("li"),Fae=a("strong"),zno=o("qdqbert"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("BertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("BertTokenizerFast"),Jno=o(" (QDQBert model)"),Yno=l(),zg=a("li"),Tae=a("strong"),Kno=o("rag"),Zno=o(" \u2014 "),OP=a("a"),eso=o("RagTokenizer"),oso=o(" (RAG model)"),rso=l(),vs=a("li"),Mae=a("strong"),tso=o("realm"),aso=o(" \u2014 "),VP=a("a"),nso=o("RealmTokenizer"),sso=o(" or "),XP=a("a"),lso=o("RealmTokenizerFast"),iso=o(" (Realm model)"),dso=l(),Fs=a("li"),Eae=a("strong"),cso=o("reformer"),fso=o(" \u2014 "),zP=a("a"),mso=o("ReformerTokenizer"),gso=o(" or "),WP=a("a"),hso=o("ReformerTokenizerFast"),pso=o(" (Reformer model)"),_so=l(),Ts=a("li"),Cae=a("strong"),uso=o("rembert"),bso=o(" \u2014 "),QP=a("a"),vso=o("RemBertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("RemBertTokenizerFast"),Mso=o(" (RemBERT model)"),Eso=l(),Ms=a("li"),wae=a("strong"),Cso=o("retribert"),wso=o(" \u2014 "),UP=a("a"),Aso=o("RetriBertTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("RetriBertTokenizerFast"),xso=o(" (RetriBERT model)"),$so=l(),Es=a("li"),Aae=a("strong"),kso=o("roberta"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("RobertaTokenizer"),Pso=o(" or "),KP=a("a"),Bso=o("RobertaTokenizerFast"),Iso=o(" (RoBERTa model)"),qso=l(),Cs=a("li"),yae=a("strong"),Nso=o("roformer"),jso=o(" \u2014 "),ZP=a("a"),Dso=o("RoFormerTokenizer"),Gso=o(" or "),eB=a("a"),Oso=o("RoFormerTokenizerFast"),Vso=o(" (RoFormer model)"),Xso=l(),Wg=a("li"),Lae=a("strong"),zso=o("speech_to_text"),Wso=o(" \u2014 "),oB=a("a"),Qso=o("Speech2TextTokenizer"),Hso=o(" (Speech2Text model)"),Uso=l(),Qg=a("li"),xae=a("strong"),Jso=o("speech_to_text_2"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("Speech2Text2Tokenizer"),Zso=o(" (Speech2Text2 model)"),elo=l(),ws=a("li"),$ae=a("strong"),olo=o("splinter"),rlo=o(" \u2014 "),tB=a("a"),tlo=o("SplinterTokenizer"),alo=o(" or "),aB=a("a"),nlo=o("SplinterTokenizerFast"),slo=o(" (Splinter model)"),llo=l(),As=a("li"),kae=a("strong"),ilo=o("squeezebert"),dlo=o(" \u2014 "),nB=a("a"),clo=o("SqueezeBertTokenizer"),flo=o(" or "),sB=a("a"),mlo=o("SqueezeBertTokenizerFast"),glo=o(" (SqueezeBERT model)"),hlo=l(),ys=a("li"),Sae=a("strong"),plo=o("t5"),_lo=o(" \u2014 "),lB=a("a"),ulo=o("T5Tokenizer"),blo=o(" or "),iB=a("a"),vlo=o("T5TokenizerFast"),Flo=o(" (T5 model)"),Tlo=l(),Hg=a("li"),Rae=a("strong"),Mlo=o("tapas"),Elo=o(" \u2014 "),dB=a("a"),Clo=o("TapasTokenizer"),wlo=o(" (TAPAS model)"),Alo=l(),Ug=a("li"),Pae=a("strong"),ylo=o("tapex"),Llo=o(" \u2014 "),cB=a("a"),xlo=o("TapexTokenizer"),$lo=o(" (TAPEX model)"),klo=l(),Jg=a("li"),Bae=a("strong"),Slo=o("transfo-xl"),Rlo=o(" \u2014 "),fB=a("a"),Plo=o("TransfoXLTokenizer"),Blo=o(" (Transformer-XL model)"),Ilo=l(),Ls=a("li"),Iae=a("strong"),qlo=o("visual_bert"),Nlo=o(" \u2014 "),mB=a("a"),jlo=o("BertTokenizer"),Dlo=o(" or "),gB=a("a"),Glo=o("BertTokenizerFast"),Olo=o(" (VisualBert model)"),Vlo=l(),Yg=a("li"),qae=a("strong"),Xlo=o("wav2vec2"),zlo=o(" \u2014 "),hB=a("a"),Wlo=o("Wav2Vec2CTCTokenizer"),Qlo=o(" (Wav2Vec2 model)"),Hlo=l(),Kg=a("li"),Nae=a("strong"),Ulo=o("wav2vec2-conformer"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("Wav2Vec2CTCTokenizer"),Klo=o(" (Wav2Vec2-Conformer model)"),Zlo=l(),Zg=a("li"),jae=a("strong"),eio=o("wav2vec2_phoneme"),oio=o(" \u2014 "),_B=a("a"),rio=o("Wav2Vec2PhonemeCTCTokenizer"),tio=o(" (Wav2Vec2Phoneme model)"),aio=l(),xs=a("li"),Dae=a("strong"),nio=o("xglm"),sio=o(" \u2014 "),uB=a("a"),lio=o("XGLMTokenizer"),iio=o(" or "),bB=a("a"),dio=o("XGLMTokenizerFast"),cio=o(" (XGLM model)"),fio=l(),eh=a("li"),Gae=a("strong"),mio=o("xlm"),gio=o(" \u2014 "),vB=a("a"),hio=o("XLMTokenizer"),pio=o(" (XLM model)"),_io=l(),oh=a("li"),Oae=a("strong"),uio=o("xlm-prophetnet"),bio=o(" \u2014 "),FB=a("a"),vio=o("XLMProphetNetTokenizer"),Fio=o(" (XLMProphetNet model)"),Tio=l(),$s=a("li"),Vae=a("strong"),Mio=o("xlm-roberta"),Eio=o(" \u2014 "),TB=a("a"),Cio=o("XLMRobertaTokenizer"),wio=o(" or "),MB=a("a"),Aio=o("XLMRobertaTokenizerFast"),yio=o(" (XLM-RoBERTa model)"),Lio=l(),ks=a("li"),Xae=a("strong"),xio=o("xlm-roberta-xl"),$io=o(" \u2014 "),EB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (XLM-RoBERTa-XL model)"),Bio=l(),Ss=a("li"),zae=a("strong"),Iio=o("xlnet"),qio=o(" \u2014 "),wB=a("a"),Nio=o("XLNetTokenizer"),jio=o(" or "),AB=a("a"),Dio=o("XLNetTokenizerFast"),Gio=o(" (XLNet model)"),Oio=l(),Rs=a("li"),Wae=a("strong"),Vio=o("yoso"),Xio=o(" \u2014 "),yB=a("a"),zio=o("AlbertTokenizer"),Wio=o(" or "),LB=a("a"),Qio=o("AlbertTokenizerFast"),Hio=o(" (YOSO model)"),Uio=l(),F(rh.$$.fragment),Jio=l(),th=a("div"),F(B0.$$.fragment),Yio=l(),Qae=a("p"),Kio=o("Register a new tokenizer in this mapping."),Gqe=l(),Mi=a("h2"),ah=a("a"),Hae=a("span"),F(I0.$$.fragment),Zio=l(),Uae=a("span"),edo=o("AutoFeatureExtractor"),Oqe=l(),Ao=a("div"),F(q0.$$.fragment),odo=l(),N0=a("p"),rdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=a("a"),tdo=o("AutoFeatureExtractor.from_pretrained()"),ado=o(" class method."),ndo=l(),j0=a("p"),sdo=o("This class cannot be instantiated directly using "),Jae=a("code"),ldo=o("__init__()"),ido=o(" (throws an error)."),ddo=l(),He=a("div"),F(D0.$$.fragment),cdo=l(),Yae=a("p"),fdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mdo=l(),ya=a("p"),gdo=o("The feature extractor class to instantiate is selected based on the "),Kae=a("code"),hdo=o("model_type"),pdo=o(` property of the config object
(either passed as an argument or loaded from `),Zae=a("code"),_do=o("pretrained_model_name_or_path"),udo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=a("code"),bdo=o("pretrained_model_name_or_path"),vdo=o(":"),Fdo=l(),Z=a("ul"),nh=a("li"),one=a("strong"),Tdo=o("beit"),Mdo=o(" \u2014 "),$B=a("a"),Edo=o("BeitFeatureExtractor"),Cdo=o(" (BEiT model)"),wdo=l(),sh=a("li"),rne=a("strong"),Ado=o("clip"),ydo=o(" \u2014 "),kB=a("a"),Ldo=o("CLIPFeatureExtractor"),xdo=o(" (CLIP model)"),$do=l(),lh=a("li"),tne=a("strong"),kdo=o("convnext"),Sdo=o(" \u2014 "),SB=a("a"),Rdo=o("ConvNextFeatureExtractor"),Pdo=o(" (ConvNext model)"),Bdo=l(),ih=a("li"),ane=a("strong"),Ido=o("cvt"),qdo=o(" \u2014 "),RB=a("a"),Ndo=o("ConvNextFeatureExtractor"),jdo=o(" (CvT model)"),Ddo=l(),dh=a("li"),nne=a("strong"),Gdo=o("data2vec-audio"),Odo=o(" \u2014 "),PB=a("a"),Vdo=o("Wav2Vec2FeatureExtractor"),Xdo=o(" (Data2VecAudio model)"),zdo=l(),ch=a("li"),sne=a("strong"),Wdo=o("data2vec-vision"),Qdo=o(" \u2014 "),BB=a("a"),Hdo=o("BeitFeatureExtractor"),Udo=o(" (Data2VecVision model)"),Jdo=l(),fh=a("li"),lne=a("strong"),Ydo=o("deit"),Kdo=o(" \u2014 "),IB=a("a"),Zdo=o("DeiTFeatureExtractor"),eco=o(" (DeiT model)"),oco=l(),mh=a("li"),ine=a("strong"),rco=o("detr"),tco=o(" \u2014 "),qB=a("a"),aco=o("DetrFeatureExtractor"),nco=o(" (DETR model)"),sco=l(),gh=a("li"),dne=a("strong"),lco=o("dpt"),ico=o(" \u2014 "),NB=a("a"),dco=o("DPTFeatureExtractor"),cco=o(" (DPT model)"),fco=l(),hh=a("li"),cne=a("strong"),mco=o("flava"),gco=o(" \u2014 "),jB=a("a"),hco=o("FlavaFeatureExtractor"),pco=o(" (Flava model)"),_co=l(),ph=a("li"),fne=a("strong"),uco=o("glpn"),bco=o(" \u2014 "),DB=a("a"),vco=o("GLPNFeatureExtractor"),Fco=o(" (GLPN model)"),Tco=l(),_h=a("li"),mne=a("strong"),Mco=o("hubert"),Eco=o(" \u2014 "),GB=a("a"),Cco=o("Wav2Vec2FeatureExtractor"),wco=o(" (Hubert model)"),Aco=l(),uh=a("li"),gne=a("strong"),yco=o("layoutlmv2"),Lco=o(" \u2014 "),OB=a("a"),xco=o("LayoutLMv2FeatureExtractor"),$co=o(" (LayoutLMv2 model)"),kco=l(),bh=a("li"),hne=a("strong"),Sco=o("maskformer"),Rco=o(" \u2014 "),VB=a("a"),Pco=o("MaskFormerFeatureExtractor"),Bco=o(" (MaskFormer model)"),Ico=l(),vh=a("li"),pne=a("strong"),qco=o("perceiver"),Nco=o(" \u2014 "),XB=a("a"),jco=o("PerceiverFeatureExtractor"),Dco=o(" (Perceiver model)"),Gco=l(),Fh=a("li"),_ne=a("strong"),Oco=o("poolformer"),Vco=o(" \u2014 "),zB=a("a"),Xco=o("PoolFormerFeatureExtractor"),zco=o(" (PoolFormer model)"),Wco=l(),Th=a("li"),une=a("strong"),Qco=o("regnet"),Hco=o(" \u2014 "),WB=a("a"),Uco=o("ConvNextFeatureExtractor"),Jco=o(" (RegNet model)"),Yco=l(),Mh=a("li"),bne=a("strong"),Kco=o("resnet"),Zco=o(" \u2014 "),QB=a("a"),efo=o("ConvNextFeatureExtractor"),ofo=o(" (ResNet model)"),rfo=l(),Eh=a("li"),vne=a("strong"),tfo=o("segformer"),afo=o(" \u2014 "),HB=a("a"),nfo=o("SegformerFeatureExtractor"),sfo=o(" (SegFormer model)"),lfo=l(),Ch=a("li"),Fne=a("strong"),ifo=o("speech_to_text"),dfo=o(" \u2014 "),UB=a("a"),cfo=o("Speech2TextFeatureExtractor"),ffo=o(" (Speech2Text model)"),mfo=l(),wh=a("li"),Tne=a("strong"),gfo=o("swin"),hfo=o(" \u2014 "),JB=a("a"),pfo=o("ViTFeatureExtractor"),_fo=o(" (Swin model)"),ufo=l(),Ah=a("li"),Mne=a("strong"),bfo=o("van"),vfo=o(" \u2014 "),YB=a("a"),Ffo=o("ConvNextFeatureExtractor"),Tfo=o(" (VAN model)"),Mfo=l(),yh=a("li"),Ene=a("strong"),Efo=o("vit"),Cfo=o(" \u2014 "),KB=a("a"),wfo=o("ViTFeatureExtractor"),Afo=o(" (ViT model)"),yfo=l(),Lh=a("li"),Cne=a("strong"),Lfo=o("vit_mae"),xfo=o(" \u2014 "),ZB=a("a"),$fo=o("ViTFeatureExtractor"),kfo=o(" (ViTMAE model)"),Sfo=l(),xh=a("li"),wne=a("strong"),Rfo=o("wav2vec2"),Pfo=o(" \u2014 "),eI=a("a"),Bfo=o("Wav2Vec2FeatureExtractor"),Ifo=o(" (Wav2Vec2 model)"),qfo=l(),$h=a("li"),Ane=a("strong"),Nfo=o("wav2vec2-conformer"),jfo=o(" \u2014 "),oI=a("a"),Dfo=o("Wav2Vec2FeatureExtractor"),Gfo=o(" (Wav2Vec2-Conformer model)"),Ofo=l(),kh=a("li"),yne=a("strong"),Vfo=o("yolos"),Xfo=o(" \u2014 "),rI=a("a"),zfo=o("YolosFeatureExtractor"),Wfo=o(" (YOLOS model)"),Qfo=l(),F(Sh.$$.fragment),Hfo=l(),F(Rh.$$.fragment),Ufo=l(),Ph=a("div"),F(G0.$$.fragment),Jfo=l(),Lne=a("p"),Yfo=o("Register a new feature extractor for this class."),Vqe=l(),Ei=a("h2"),Bh=a("a"),xne=a("span"),F(O0.$$.fragment),Kfo=l(),$ne=a("span"),Zfo=o("AutoProcessor"),Xqe=l(),yo=a("div"),F(V0.$$.fragment),emo=l(),X0=a("p"),omo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tI=a("a"),rmo=o("AutoProcessor.from_pretrained()"),tmo=o(" class method."),amo=l(),z0=a("p"),nmo=o("This class cannot be instantiated directly using "),kne=a("code"),smo=o("__init__()"),lmo=o(" (throws an error)."),imo=l(),Ue=a("div"),F(W0.$$.fragment),dmo=l(),Sne=a("p"),cmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),fmo=l(),Ci=a("p"),mmo=o("The processor class to instantiate is selected based on the "),Rne=a("code"),gmo=o("model_type"),hmo=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),pmo=o("pretrained_model_name_or_path"),_mo=o(" if possible):"),umo=l(),_e=a("ul"),Ih=a("li"),Bne=a("strong"),bmo=o("clip"),vmo=o(" \u2014 "),aI=a("a"),Fmo=o("CLIPProcessor"),Tmo=o(" (CLIP model)"),Mmo=l(),qh=a("li"),Ine=a("strong"),Emo=o("flava"),Cmo=o(" \u2014 "),qne=a("code"),wmo=o("FLAVAProcessor"),Amo=o(" (Flava model)"),ymo=l(),Nh=a("li"),Nne=a("strong"),Lmo=o("layoutlmv2"),xmo=o(" \u2014 "),nI=a("a"),$mo=o("LayoutLMv2Processor"),kmo=o(" (LayoutLMv2 model)"),Smo=l(),jh=a("li"),jne=a("strong"),Rmo=o("layoutxlm"),Pmo=o(" \u2014 "),sI=a("a"),Bmo=o("LayoutXLMProcessor"),Imo=o(" (LayoutXLM model)"),qmo=l(),Dh=a("li"),Dne=a("strong"),Nmo=o("sew"),jmo=o(" \u2014 "),lI=a("a"),Dmo=o("Wav2Vec2Processor"),Gmo=o(" (SEW model)"),Omo=l(),Gh=a("li"),Gne=a("strong"),Vmo=o("sew-d"),Xmo=o(" \u2014 "),iI=a("a"),zmo=o("Wav2Vec2Processor"),Wmo=o(" (SEW-D model)"),Qmo=l(),Oh=a("li"),One=a("strong"),Hmo=o("speech_to_text"),Umo=o(" \u2014 "),dI=a("a"),Jmo=o("Speech2TextProcessor"),Ymo=o(" (Speech2Text model)"),Kmo=l(),Vh=a("li"),Vne=a("strong"),Zmo=o("speech_to_text_2"),ego=o(" \u2014 "),cI=a("a"),ogo=o("Speech2Text2Processor"),rgo=o(" (Speech2Text2 model)"),tgo=l(),Xh=a("li"),Xne=a("strong"),ago=o("trocr"),ngo=o(" \u2014 "),fI=a("a"),sgo=o("TrOCRProcessor"),lgo=o(" (TrOCR model)"),igo=l(),zh=a("li"),zne=a("strong"),dgo=o("unispeech"),cgo=o(" \u2014 "),mI=a("a"),fgo=o("Wav2Vec2Processor"),mgo=o(" (UniSpeech model)"),ggo=l(),Wh=a("li"),Wne=a("strong"),hgo=o("unispeech-sat"),pgo=o(" \u2014 "),gI=a("a"),_go=o("Wav2Vec2Processor"),ugo=o(" (UniSpeechSat model)"),bgo=l(),Qh=a("li"),Qne=a("strong"),vgo=o("vilt"),Fgo=o(" \u2014 "),hI=a("a"),Tgo=o("ViltProcessor"),Mgo=o(" (ViLT model)"),Ego=l(),Hh=a("li"),Hne=a("strong"),Cgo=o("vision-text-dual-encoder"),wgo=o(" \u2014 "),pI=a("a"),Ago=o("VisionTextDualEncoderProcessor"),ygo=o(" (VisionTextDualEncoder model)"),Lgo=l(),Uh=a("li"),Une=a("strong"),xgo=o("wav2vec2"),$go=o(" \u2014 "),_I=a("a"),kgo=o("Wav2Vec2Processor"),Sgo=o(" (Wav2Vec2 model)"),Rgo=l(),Jh=a("li"),Jne=a("strong"),Pgo=o("wav2vec2-conformer"),Bgo=o(" \u2014 "),uI=a("a"),Igo=o("Wav2Vec2Processor"),qgo=o(" (Wav2Vec2-Conformer model)"),Ngo=l(),Yh=a("li"),Yne=a("strong"),jgo=o("wavlm"),Dgo=o(" \u2014 "),bI=a("a"),Ggo=o("Wav2Vec2Processor"),Ogo=o(" (WavLM model)"),Vgo=l(),F(Kh.$$.fragment),Xgo=l(),F(Zh.$$.fragment),zgo=l(),ep=a("div"),F(Q0.$$.fragment),Wgo=l(),Kne=a("p"),Qgo=o("Register a new processor for this class."),zqe=l(),wi=a("h2"),op=a("a"),Zne=a("span"),F(H0.$$.fragment),Hgo=l(),ese=a("span"),Ugo=o("AutoModel"),Wqe=l(),Lo=a("div"),F(U0.$$.fragment),Jgo=l(),Ai=a("p"),Ygo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vI=a("a"),Kgo=o("from_pretrained()"),Zgo=o(" class method or the "),FI=a("a"),eho=o("from_config()"),oho=o(` class
method.`),rho=l(),J0=a("p"),tho=o("This class cannot be instantiated directly using "),ose=a("code"),aho=o("__init__()"),nho=o(" (throws an error)."),sho=l(),tt=a("div"),F(Y0.$$.fragment),lho=l(),rse=a("p"),iho=o("Instantiates one of the base model classes of the library from a configuration."),dho=l(),yi=a("p"),cho=o(`Note:
Loading a model from its configuration file does `),tse=a("strong"),fho=o("not"),mho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TI=a("a"),gho=o("from_pretrained()"),hho=o(" to load the model weights."),pho=l(),F(rp.$$.fragment),_ho=l(),Je=a("div"),F(K0.$$.fragment),uho=l(),ase=a("p"),bho=o("Instantiate one of the base model classes of the library from a pretrained model."),vho=l(),La=a("p"),Fho=o("The model class to instantiate is selected based on the "),nse=a("code"),Tho=o("model_type"),Mho=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),Eho=o("pretrained_model_name_or_path"),Cho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=a("code"),who=o("pretrained_model_name_or_path"),Aho=o(":"),yho=l(),x=a("ul"),tp=a("li"),ise=a("strong"),Lho=o("albert"),xho=o(" \u2014 "),MI=a("a"),$ho=o("AlbertModel"),kho=o(" (ALBERT model)"),Sho=l(),ap=a("li"),dse=a("strong"),Rho=o("bart"),Pho=o(" \u2014 "),EI=a("a"),Bho=o("BartModel"),Iho=o(" (BART model)"),qho=l(),np=a("li"),cse=a("strong"),Nho=o("beit"),jho=o(" \u2014 "),CI=a("a"),Dho=o("BeitModel"),Gho=o(" (BEiT model)"),Oho=l(),sp=a("li"),fse=a("strong"),Vho=o("bert"),Xho=o(" \u2014 "),wI=a("a"),zho=o("BertModel"),Who=o(" (BERT model)"),Qho=l(),lp=a("li"),mse=a("strong"),Hho=o("bert-generation"),Uho=o(" \u2014 "),AI=a("a"),Jho=o("BertGenerationEncoder"),Yho=o(" (Bert Generation model)"),Kho=l(),ip=a("li"),gse=a("strong"),Zho=o("big_bird"),epo=o(" \u2014 "),yI=a("a"),opo=o("BigBirdModel"),rpo=o(" (BigBird model)"),tpo=l(),dp=a("li"),hse=a("strong"),apo=o("bigbird_pegasus"),npo=o(" \u2014 "),LI=a("a"),spo=o("BigBirdPegasusModel"),lpo=o(" (BigBirdPegasus model)"),ipo=l(),cp=a("li"),pse=a("strong"),dpo=o("blenderbot"),cpo=o(" \u2014 "),xI=a("a"),fpo=o("BlenderbotModel"),mpo=o(" (Blenderbot model)"),gpo=l(),fp=a("li"),_se=a("strong"),hpo=o("blenderbot-small"),ppo=o(" \u2014 "),$I=a("a"),_po=o("BlenderbotSmallModel"),upo=o(" (BlenderbotSmall model)"),bpo=l(),mp=a("li"),use=a("strong"),vpo=o("camembert"),Fpo=o(" \u2014 "),kI=a("a"),Tpo=o("CamembertModel"),Mpo=o(" (CamemBERT model)"),Epo=l(),gp=a("li"),bse=a("strong"),Cpo=o("canine"),wpo=o(" \u2014 "),SI=a("a"),Apo=o("CanineModel"),ypo=o(" (Canine model)"),Lpo=l(),hp=a("li"),vse=a("strong"),xpo=o("clip"),$po=o(" \u2014 "),RI=a("a"),kpo=o("CLIPModel"),Spo=o(" (CLIP model)"),Rpo=l(),pp=a("li"),Fse=a("strong"),Ppo=o("convbert"),Bpo=o(" \u2014 "),PI=a("a"),Ipo=o("ConvBertModel"),qpo=o(" (ConvBERT model)"),Npo=l(),_p=a("li"),Tse=a("strong"),jpo=o("convnext"),Dpo=o(" \u2014 "),BI=a("a"),Gpo=o("ConvNextModel"),Opo=o(" (ConvNext model)"),Vpo=l(),up=a("li"),Mse=a("strong"),Xpo=o("ctrl"),zpo=o(" \u2014 "),II=a("a"),Wpo=o("CTRLModel"),Qpo=o(" (CTRL model)"),Hpo=l(),bp=a("li"),Ese=a("strong"),Upo=o("cvt"),Jpo=o(" \u2014 "),qI=a("a"),Ypo=o("CvtModel"),Kpo=o(" (CvT model)"),Zpo=l(),vp=a("li"),Cse=a("strong"),e_o=o("data2vec-audio"),o_o=o(" \u2014 "),NI=a("a"),r_o=o("Data2VecAudioModel"),t_o=o(" (Data2VecAudio model)"),a_o=l(),Fp=a("li"),wse=a("strong"),n_o=o("data2vec-text"),s_o=o(" \u2014 "),jI=a("a"),l_o=o("Data2VecTextModel"),i_o=o(" (Data2VecText model)"),d_o=l(),Tp=a("li"),Ase=a("strong"),c_o=o("data2vec-vision"),f_o=o(" \u2014 "),DI=a("a"),m_o=o("Data2VecVisionModel"),g_o=o(" (Data2VecVision model)"),h_o=l(),Mp=a("li"),yse=a("strong"),p_o=o("deberta"),__o=o(" \u2014 "),GI=a("a"),u_o=o("DebertaModel"),b_o=o(" (DeBERTa model)"),v_o=l(),Ep=a("li"),Lse=a("strong"),F_o=o("deberta-v2"),T_o=o(" \u2014 "),OI=a("a"),M_o=o("DebertaV2Model"),E_o=o(" (DeBERTa-v2 model)"),C_o=l(),Cp=a("li"),xse=a("strong"),w_o=o("decision_transformer"),A_o=o(" \u2014 "),VI=a("a"),y_o=o("DecisionTransformerModel"),L_o=o(" (Decision Transformer model)"),x_o=l(),wp=a("li"),$se=a("strong"),$_o=o("deit"),k_o=o(" \u2014 "),XI=a("a"),S_o=o("DeiTModel"),R_o=o(" (DeiT model)"),P_o=l(),Ap=a("li"),kse=a("strong"),B_o=o("detr"),I_o=o(" \u2014 "),zI=a("a"),q_o=o("DetrModel"),N_o=o(" (DETR model)"),j_o=l(),yp=a("li"),Sse=a("strong"),D_o=o("distilbert"),G_o=o(" \u2014 "),WI=a("a"),O_o=o("DistilBertModel"),V_o=o(" (DistilBERT model)"),X_o=l(),Lp=a("li"),Rse=a("strong"),z_o=o("dpr"),W_o=o(" \u2014 "),QI=a("a"),Q_o=o("DPRQuestionEncoder"),H_o=o(" (DPR model)"),U_o=l(),xp=a("li"),Pse=a("strong"),J_o=o("dpt"),Y_o=o(" \u2014 "),HI=a("a"),K_o=o("DPTModel"),Z_o=o(" (DPT model)"),euo=l(),$p=a("li"),Bse=a("strong"),ouo=o("electra"),ruo=o(" \u2014 "),UI=a("a"),tuo=o("ElectraModel"),auo=o(" (ELECTRA model)"),nuo=l(),kp=a("li"),Ise=a("strong"),suo=o("flaubert"),luo=o(" \u2014 "),JI=a("a"),iuo=o("FlaubertModel"),duo=o(" (FlauBERT model)"),cuo=l(),Sp=a("li"),qse=a("strong"),fuo=o("flava"),muo=o(" \u2014 "),YI=a("a"),guo=o("FlavaModel"),huo=o(" (Flava model)"),puo=l(),Rp=a("li"),Nse=a("strong"),_uo=o("fnet"),uuo=o(" \u2014 "),KI=a("a"),buo=o("FNetModel"),vuo=o(" (FNet model)"),Fuo=l(),Pp=a("li"),jse=a("strong"),Tuo=o("fsmt"),Muo=o(" \u2014 "),ZI=a("a"),Euo=o("FSMTModel"),Cuo=o(" (FairSeq Machine-Translation model)"),wuo=l(),Ps=a("li"),Dse=a("strong"),Auo=o("funnel"),yuo=o(" \u2014 "),eq=a("a"),Luo=o("FunnelModel"),xuo=o(" or "),oq=a("a"),$uo=o("FunnelBaseModel"),kuo=o(" (Funnel Transformer model)"),Suo=l(),Bp=a("li"),Gse=a("strong"),Ruo=o("glpn"),Puo=o(" \u2014 "),rq=a("a"),Buo=o("GLPNModel"),Iuo=o(" (GLPN model)"),quo=l(),Ip=a("li"),Ose=a("strong"),Nuo=o("gpt2"),juo=o(" \u2014 "),tq=a("a"),Duo=o("GPT2Model"),Guo=o(" (OpenAI GPT-2 model)"),Ouo=l(),qp=a("li"),Vse=a("strong"),Vuo=o("gpt_neo"),Xuo=o(" \u2014 "),aq=a("a"),zuo=o("GPTNeoModel"),Wuo=o(" (GPT Neo model)"),Quo=l(),Np=a("li"),Xse=a("strong"),Huo=o("gptj"),Uuo=o(" \u2014 "),nq=a("a"),Juo=o("GPTJModel"),Yuo=o(" (GPT-J model)"),Kuo=l(),jp=a("li"),zse=a("strong"),Zuo=o("hubert"),e2o=o(" \u2014 "),sq=a("a"),o2o=o("HubertModel"),r2o=o(" (Hubert model)"),t2o=l(),Dp=a("li"),Wse=a("strong"),a2o=o("ibert"),n2o=o(" \u2014 "),lq=a("a"),s2o=o("IBertModel"),l2o=o(" (I-BERT model)"),i2o=l(),Gp=a("li"),Qse=a("strong"),d2o=o("imagegpt"),c2o=o(" \u2014 "),iq=a("a"),f2o=o("ImageGPTModel"),m2o=o(" (ImageGPT model)"),g2o=l(),Op=a("li"),Hse=a("strong"),h2o=o("layoutlm"),p2o=o(" \u2014 "),dq=a("a"),_2o=o("LayoutLMModel"),u2o=o(" (LayoutLM model)"),b2o=l(),Vp=a("li"),Use=a("strong"),v2o=o("layoutlmv2"),F2o=o(" \u2014 "),cq=a("a"),T2o=o("LayoutLMv2Model"),M2o=o(" (LayoutLMv2 model)"),E2o=l(),Xp=a("li"),Jse=a("strong"),C2o=o("led"),w2o=o(" \u2014 "),fq=a("a"),A2o=o("LEDModel"),y2o=o(" (LED model)"),L2o=l(),zp=a("li"),Yse=a("strong"),x2o=o("longformer"),$2o=o(" \u2014 "),mq=a("a"),k2o=o("LongformerModel"),S2o=o(" (Longformer model)"),R2o=l(),Wp=a("li"),Kse=a("strong"),P2o=o("longt5"),B2o=o(" \u2014 "),gq=a("a"),I2o=o("LongT5Model"),q2o=o(" (LongT5 model)"),N2o=l(),Qp=a("li"),Zse=a("strong"),j2o=o("luke"),D2o=o(" \u2014 "),hq=a("a"),G2o=o("LukeModel"),O2o=o(" (LUKE model)"),V2o=l(),Hp=a("li"),ele=a("strong"),X2o=o("lxmert"),z2o=o(" \u2014 "),pq=a("a"),W2o=o("LxmertModel"),Q2o=o(" (LXMERT model)"),H2o=l(),Up=a("li"),ole=a("strong"),U2o=o("m2m_100"),J2o=o(" \u2014 "),_q=a("a"),Y2o=o("M2M100Model"),K2o=o(" (M2M100 model)"),Z2o=l(),Jp=a("li"),rle=a("strong"),e1o=o("marian"),o1o=o(" \u2014 "),uq=a("a"),r1o=o("MarianModel"),t1o=o(" (Marian model)"),a1o=l(),Yp=a("li"),tle=a("strong"),n1o=o("maskformer"),s1o=o(" \u2014 "),bq=a("a"),l1o=o("MaskFormerModel"),i1o=o(" (MaskFormer model)"),d1o=l(),Kp=a("li"),ale=a("strong"),c1o=o("mbart"),f1o=o(" \u2014 "),vq=a("a"),m1o=o("MBartModel"),g1o=o(" (mBART model)"),h1o=l(),Zp=a("li"),nle=a("strong"),p1o=o("megatron-bert"),_1o=o(" \u2014 "),Fq=a("a"),u1o=o("MegatronBertModel"),b1o=o(" (MegatronBert model)"),v1o=l(),e_=a("li"),sle=a("strong"),F1o=o("mobilebert"),T1o=o(" \u2014 "),Tq=a("a"),M1o=o("MobileBertModel"),E1o=o(" (MobileBERT model)"),C1o=l(),o_=a("li"),lle=a("strong"),w1o=o("mpnet"),A1o=o(" \u2014 "),Mq=a("a"),y1o=o("MPNetModel"),L1o=o(" (MPNet model)"),x1o=l(),r_=a("li"),ile=a("strong"),$1o=o("mt5"),k1o=o(" \u2014 "),Eq=a("a"),S1o=o("MT5Model"),R1o=o(" (mT5 model)"),P1o=l(),t_=a("li"),dle=a("strong"),B1o=o("nystromformer"),I1o=o(" \u2014 "),Cq=a("a"),q1o=o("NystromformerModel"),N1o=o(" (Nystromformer model)"),j1o=l(),a_=a("li"),cle=a("strong"),D1o=o("openai-gpt"),G1o=o(" \u2014 "),wq=a("a"),O1o=o("OpenAIGPTModel"),V1o=o(" (OpenAI GPT model)"),X1o=l(),n_=a("li"),fle=a("strong"),z1o=o("opt"),W1o=o(" \u2014 "),Aq=a("a"),Q1o=o("OPTModel"),H1o=o(" (OPT model)"),U1o=l(),s_=a("li"),mle=a("strong"),J1o=o("pegasus"),Y1o=o(" \u2014 "),yq=a("a"),K1o=o("PegasusModel"),Z1o=o(" (Pegasus model)"),ebo=l(),l_=a("li"),gle=a("strong"),obo=o("perceiver"),rbo=o(" \u2014 "),Lq=a("a"),tbo=o("PerceiverModel"),abo=o(" (Perceiver model)"),nbo=l(),i_=a("li"),hle=a("strong"),sbo=o("plbart"),lbo=o(" \u2014 "),xq=a("a"),ibo=o("PLBartModel"),dbo=o(" (PLBart model)"),cbo=l(),d_=a("li"),ple=a("strong"),fbo=o("poolformer"),mbo=o(" \u2014 "),$q=a("a"),gbo=o("PoolFormerModel"),hbo=o(" (PoolFormer model)"),pbo=l(),c_=a("li"),_le=a("strong"),_bo=o("prophetnet"),ubo=o(" \u2014 "),kq=a("a"),bbo=o("ProphetNetModel"),vbo=o(" (ProphetNet model)"),Fbo=l(),f_=a("li"),ule=a("strong"),Tbo=o("qdqbert"),Mbo=o(" \u2014 "),Sq=a("a"),Ebo=o("QDQBertModel"),Cbo=o(" (QDQBert model)"),wbo=l(),m_=a("li"),ble=a("strong"),Abo=o("reformer"),ybo=o(" \u2014 "),Rq=a("a"),Lbo=o("ReformerModel"),xbo=o(" (Reformer model)"),$bo=l(),g_=a("li"),vle=a("strong"),kbo=o("regnet"),Sbo=o(" \u2014 "),Pq=a("a"),Rbo=o("RegNetModel"),Pbo=o(" (RegNet model)"),Bbo=l(),h_=a("li"),Fle=a("strong"),Ibo=o("rembert"),qbo=o(" \u2014 "),Bq=a("a"),Nbo=o("RemBertModel"),jbo=o(" (RemBERT model)"),Dbo=l(),p_=a("li"),Tle=a("strong"),Gbo=o("resnet"),Obo=o(" \u2014 "),Iq=a("a"),Vbo=o("ResNetModel"),Xbo=o(" (ResNet model)"),zbo=l(),__=a("li"),Mle=a("strong"),Wbo=o("retribert"),Qbo=o(" \u2014 "),qq=a("a"),Hbo=o("RetriBertModel"),Ubo=o(" (RetriBERT model)"),Jbo=l(),u_=a("li"),Ele=a("strong"),Ybo=o("roberta"),Kbo=o(" \u2014 "),Nq=a("a"),Zbo=o("RobertaModel"),evo=o(" (RoBERTa model)"),ovo=l(),b_=a("li"),Cle=a("strong"),rvo=o("roformer"),tvo=o(" \u2014 "),jq=a("a"),avo=o("RoFormerModel"),nvo=o(" (RoFormer model)"),svo=l(),v_=a("li"),wle=a("strong"),lvo=o("segformer"),ivo=o(" \u2014 "),Dq=a("a"),dvo=o("SegformerModel"),cvo=o(" (SegFormer model)"),fvo=l(),F_=a("li"),Ale=a("strong"),mvo=o("sew"),gvo=o(" \u2014 "),Gq=a("a"),hvo=o("SEWModel"),pvo=o(" (SEW model)"),_vo=l(),T_=a("li"),yle=a("strong"),uvo=o("sew-d"),bvo=o(" \u2014 "),Oq=a("a"),vvo=o("SEWDModel"),Fvo=o(" (SEW-D model)"),Tvo=l(),M_=a("li"),Lle=a("strong"),Mvo=o("speech_to_text"),Evo=o(" \u2014 "),Vq=a("a"),Cvo=o("Speech2TextModel"),wvo=o(" (Speech2Text model)"),Avo=l(),E_=a("li"),xle=a("strong"),yvo=o("splinter"),Lvo=o(" \u2014 "),Xq=a("a"),xvo=o("SplinterModel"),$vo=o(" (Splinter model)"),kvo=l(),C_=a("li"),$le=a("strong"),Svo=o("squeezebert"),Rvo=o(" \u2014 "),zq=a("a"),Pvo=o("SqueezeBertModel"),Bvo=o(" (SqueezeBERT model)"),Ivo=l(),w_=a("li"),kle=a("strong"),qvo=o("swin"),Nvo=o(" \u2014 "),Wq=a("a"),jvo=o("SwinModel"),Dvo=o(" (Swin model)"),Gvo=l(),A_=a("li"),Sle=a("strong"),Ovo=o("t5"),Vvo=o(" \u2014 "),Qq=a("a"),Xvo=o("T5Model"),zvo=o(" (T5 model)"),Wvo=l(),y_=a("li"),Rle=a("strong"),Qvo=o("tapas"),Hvo=o(" \u2014 "),Hq=a("a"),Uvo=o("TapasModel"),Jvo=o(" (TAPAS model)"),Yvo=l(),L_=a("li"),Ple=a("strong"),Kvo=o("trajectory_transformer"),Zvo=o(" \u2014 "),Uq=a("a"),eFo=o("TrajectoryTransformerModel"),oFo=o(" (Trajectory Transformer model)"),rFo=l(),x_=a("li"),Ble=a("strong"),tFo=o("transfo-xl"),aFo=o(" \u2014 "),Jq=a("a"),nFo=o("TransfoXLModel"),sFo=o(" (Transformer-XL model)"),lFo=l(),$_=a("li"),Ile=a("strong"),iFo=o("unispeech"),dFo=o(" \u2014 "),Yq=a("a"),cFo=o("UniSpeechModel"),fFo=o(" (UniSpeech model)"),mFo=l(),k_=a("li"),qle=a("strong"),gFo=o("unispeech-sat"),hFo=o(" \u2014 "),Kq=a("a"),pFo=o("UniSpeechSatModel"),_Fo=o(" (UniSpeechSat model)"),uFo=l(),S_=a("li"),Nle=a("strong"),bFo=o("van"),vFo=o(" \u2014 "),Zq=a("a"),FFo=o("VanModel"),TFo=o(" (VAN model)"),MFo=l(),R_=a("li"),jle=a("strong"),EFo=o("vilt"),CFo=o(" \u2014 "),eN=a("a"),wFo=o("ViltModel"),AFo=o(" (ViLT model)"),yFo=l(),P_=a("li"),Dle=a("strong"),LFo=o("vision-text-dual-encoder"),xFo=o(" \u2014 "),oN=a("a"),$Fo=o("VisionTextDualEncoderModel"),kFo=o(" (VisionTextDualEncoder model)"),SFo=l(),B_=a("li"),Gle=a("strong"),RFo=o("visual_bert"),PFo=o(" \u2014 "),rN=a("a"),BFo=o("VisualBertModel"),IFo=o(" (VisualBert model)"),qFo=l(),I_=a("li"),Ole=a("strong"),NFo=o("vit"),jFo=o(" \u2014 "),tN=a("a"),DFo=o("ViTModel"),GFo=o(" (ViT model)"),OFo=l(),q_=a("li"),Vle=a("strong"),VFo=o("vit_mae"),XFo=o(" \u2014 "),aN=a("a"),zFo=o("ViTMAEModel"),WFo=o(" (ViTMAE model)"),QFo=l(),N_=a("li"),Xle=a("strong"),HFo=o("wav2vec2"),UFo=o(" \u2014 "),nN=a("a"),JFo=o("Wav2Vec2Model"),YFo=o(" (Wav2Vec2 model)"),KFo=l(),j_=a("li"),zle=a("strong"),ZFo=o("wav2vec2-conformer"),e6o=o(" \u2014 "),sN=a("a"),o6o=o("Wav2Vec2ConformerModel"),r6o=o(" (Wav2Vec2-Conformer model)"),t6o=l(),D_=a("li"),Wle=a("strong"),a6o=o("wavlm"),n6o=o(" \u2014 "),lN=a("a"),s6o=o("WavLMModel"),l6o=o(" (WavLM model)"),i6o=l(),G_=a("li"),Qle=a("strong"),d6o=o("xglm"),c6o=o(" \u2014 "),iN=a("a"),f6o=o("XGLMModel"),m6o=o(" (XGLM model)"),g6o=l(),O_=a("li"),Hle=a("strong"),h6o=o("xlm"),p6o=o(" \u2014 "),dN=a("a"),_6o=o("XLMModel"),u6o=o(" (XLM model)"),b6o=l(),V_=a("li"),Ule=a("strong"),v6o=o("xlm-prophetnet"),F6o=o(" \u2014 "),cN=a("a"),T6o=o("XLMProphetNetModel"),M6o=o(" (XLMProphetNet model)"),E6o=l(),X_=a("li"),Jle=a("strong"),C6o=o("xlm-roberta"),w6o=o(" \u2014 "),fN=a("a"),A6o=o("XLMRobertaModel"),y6o=o(" (XLM-RoBERTa model)"),L6o=l(),z_=a("li"),Yle=a("strong"),x6o=o("xlm-roberta-xl"),$6o=o(" \u2014 "),mN=a("a"),k6o=o("XLMRobertaXLModel"),S6o=o(" (XLM-RoBERTa-XL model)"),R6o=l(),W_=a("li"),Kle=a("strong"),P6o=o("xlnet"),B6o=o(" \u2014 "),gN=a("a"),I6o=o("XLNetModel"),q6o=o(" (XLNet model)"),N6o=l(),Q_=a("li"),Zle=a("strong"),j6o=o("yolos"),D6o=o(" \u2014 "),hN=a("a"),G6o=o("YolosModel"),O6o=o(" (YOLOS model)"),V6o=l(),H_=a("li"),eie=a("strong"),X6o=o("yoso"),z6o=o(" \u2014 "),pN=a("a"),W6o=o("YosoModel"),Q6o=o(" (YOSO model)"),H6o=l(),U_=a("p"),U6o=o("The model is set in evaluation mode by default using "),oie=a("code"),J6o=o("model.eval()"),Y6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),K6o=o("model.train()"),Z6o=l(),F(J_.$$.fragment),Qqe=l(),Li=a("h2"),Y_=a("a"),tie=a("span"),F(Z0.$$.fragment),eTo=l(),aie=a("span"),oTo=o("AutoModelForPreTraining"),Hqe=l(),xo=a("div"),F(eA.$$.fragment),rTo=l(),xi=a("p"),tTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_N=a("a"),aTo=o("from_pretrained()"),nTo=o(" class method or the "),uN=a("a"),sTo=o("from_config()"),lTo=o(` class
method.`),iTo=l(),oA=a("p"),dTo=o("This class cannot be instantiated directly using "),nie=a("code"),cTo=o("__init__()"),fTo=o(" (throws an error)."),mTo=l(),at=a("div"),F(rA.$$.fragment),gTo=l(),sie=a("p"),hTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pTo=l(),$i=a("p"),_To=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),uTo=o("not"),bTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),vTo=o("from_pretrained()"),FTo=o(" to load the model weights."),TTo=l(),F(K_.$$.fragment),MTo=l(),Ye=a("div"),F(tA.$$.fragment),ETo=l(),iie=a("p"),CTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wTo=l(),xa=a("p"),ATo=o("The model class to instantiate is selected based on the "),die=a("code"),yTo=o("model_type"),LTo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),xTo=o("pretrained_model_name_or_path"),$To=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),kTo=o("pretrained_model_name_or_path"),STo=o(":"),RTo=l(),G=a("ul"),Z_=a("li"),mie=a("strong"),PTo=o("albert"),BTo=o(" \u2014 "),vN=a("a"),ITo=o("AlbertForPreTraining"),qTo=o(" (ALBERT model)"),NTo=l(),eu=a("li"),gie=a("strong"),jTo=o("bart"),DTo=o(" \u2014 "),FN=a("a"),GTo=o("BartForConditionalGeneration"),OTo=o(" (BART model)"),VTo=l(),ou=a("li"),hie=a("strong"),XTo=o("bert"),zTo=o(" \u2014 "),TN=a("a"),WTo=o("BertForPreTraining"),QTo=o(" (BERT model)"),HTo=l(),ru=a("li"),pie=a("strong"),UTo=o("big_bird"),JTo=o(" \u2014 "),MN=a("a"),YTo=o("BigBirdForPreTraining"),KTo=o(" (BigBird model)"),ZTo=l(),tu=a("li"),_ie=a("strong"),e7o=o("camembert"),o7o=o(" \u2014 "),EN=a("a"),r7o=o("CamembertForMaskedLM"),t7o=o(" (CamemBERT model)"),a7o=l(),au=a("li"),uie=a("strong"),n7o=o("ctrl"),s7o=o(" \u2014 "),CN=a("a"),l7o=o("CTRLLMHeadModel"),i7o=o(" (CTRL model)"),d7o=l(),nu=a("li"),bie=a("strong"),c7o=o("data2vec-text"),f7o=o(" \u2014 "),wN=a("a"),m7o=o("Data2VecTextForMaskedLM"),g7o=o(" (Data2VecText model)"),h7o=l(),su=a("li"),vie=a("strong"),p7o=o("deberta"),_7o=o(" \u2014 "),AN=a("a"),u7o=o("DebertaForMaskedLM"),b7o=o(" (DeBERTa model)"),v7o=l(),lu=a("li"),Fie=a("strong"),F7o=o("deberta-v2"),T7o=o(" \u2014 "),yN=a("a"),M7o=o("DebertaV2ForMaskedLM"),E7o=o(" (DeBERTa-v2 model)"),C7o=l(),iu=a("li"),Tie=a("strong"),w7o=o("distilbert"),A7o=o(" \u2014 "),LN=a("a"),y7o=o("DistilBertForMaskedLM"),L7o=o(" (DistilBERT model)"),x7o=l(),du=a("li"),Mie=a("strong"),$7o=o("electra"),k7o=o(" \u2014 "),xN=a("a"),S7o=o("ElectraForPreTraining"),R7o=o(" (ELECTRA model)"),P7o=l(),cu=a("li"),Eie=a("strong"),B7o=o("flaubert"),I7o=o(" \u2014 "),$N=a("a"),q7o=o("FlaubertWithLMHeadModel"),N7o=o(" (FlauBERT model)"),j7o=l(),fu=a("li"),Cie=a("strong"),D7o=o("flava"),G7o=o(" \u2014 "),kN=a("a"),O7o=o("FlavaForPreTraining"),V7o=o(" (Flava model)"),X7o=l(),mu=a("li"),wie=a("strong"),z7o=o("fnet"),W7o=o(" \u2014 "),SN=a("a"),Q7o=o("FNetForPreTraining"),H7o=o(" (FNet model)"),U7o=l(),gu=a("li"),Aie=a("strong"),J7o=o("fsmt"),Y7o=o(" \u2014 "),RN=a("a"),K7o=o("FSMTForConditionalGeneration"),Z7o=o(" (FairSeq Machine-Translation model)"),e9o=l(),hu=a("li"),yie=a("strong"),o9o=o("funnel"),r9o=o(" \u2014 "),PN=a("a"),t9o=o("FunnelForPreTraining"),a9o=o(" (Funnel Transformer model)"),n9o=l(),pu=a("li"),Lie=a("strong"),s9o=o("gpt2"),l9o=o(" \u2014 "),BN=a("a"),i9o=o("GPT2LMHeadModel"),d9o=o(" (OpenAI GPT-2 model)"),c9o=l(),_u=a("li"),xie=a("strong"),f9o=o("ibert"),m9o=o(" \u2014 "),IN=a("a"),g9o=o("IBertForMaskedLM"),h9o=o(" (I-BERT model)"),p9o=l(),uu=a("li"),$ie=a("strong"),_9o=o("layoutlm"),u9o=o(" \u2014 "),qN=a("a"),b9o=o("LayoutLMForMaskedLM"),v9o=o(" (LayoutLM model)"),F9o=l(),bu=a("li"),kie=a("strong"),T9o=o("longformer"),M9o=o(" \u2014 "),NN=a("a"),E9o=o("LongformerForMaskedLM"),C9o=o(" (Longformer model)"),w9o=l(),vu=a("li"),Sie=a("strong"),A9o=o("longt5"),y9o=o(" \u2014 "),jN=a("a"),L9o=o("LongT5ForConditionalGeneration"),x9o=o(" (LongT5 model)"),$9o=l(),Fu=a("li"),Rie=a("strong"),k9o=o("lxmert"),S9o=o(" \u2014 "),DN=a("a"),R9o=o("LxmertForPreTraining"),P9o=o(" (LXMERT model)"),B9o=l(),Tu=a("li"),Pie=a("strong"),I9o=o("megatron-bert"),q9o=o(" \u2014 "),GN=a("a"),N9o=o("MegatronBertForPreTraining"),j9o=o(" (MegatronBert model)"),D9o=l(),Mu=a("li"),Bie=a("strong"),G9o=o("mobilebert"),O9o=o(" \u2014 "),ON=a("a"),V9o=o("MobileBertForPreTraining"),X9o=o(" (MobileBERT model)"),z9o=l(),Eu=a("li"),Iie=a("strong"),W9o=o("mpnet"),Q9o=o(" \u2014 "),VN=a("a"),H9o=o("MPNetForMaskedLM"),U9o=o(" (MPNet model)"),J9o=l(),Cu=a("li"),qie=a("strong"),Y9o=o("openai-gpt"),K9o=o(" \u2014 "),XN=a("a"),Z9o=o("OpenAIGPTLMHeadModel"),eMo=o(" (OpenAI GPT model)"),oMo=l(),wu=a("li"),Nie=a("strong"),rMo=o("retribert"),tMo=o(" \u2014 "),zN=a("a"),aMo=o("RetriBertModel"),nMo=o(" (RetriBERT model)"),sMo=l(),Au=a("li"),jie=a("strong"),lMo=o("roberta"),iMo=o(" \u2014 "),WN=a("a"),dMo=o("RobertaForMaskedLM"),cMo=o(" (RoBERTa model)"),fMo=l(),yu=a("li"),Die=a("strong"),mMo=o("splinter"),gMo=o(" \u2014 "),QN=a("a"),hMo=o("SplinterForPreTraining"),pMo=o(" (Splinter model)"),_Mo=l(),Lu=a("li"),Gie=a("strong"),uMo=o("squeezebert"),bMo=o(" \u2014 "),HN=a("a"),vMo=o("SqueezeBertForMaskedLM"),FMo=o(" (SqueezeBERT model)"),TMo=l(),xu=a("li"),Oie=a("strong"),MMo=o("t5"),EMo=o(" \u2014 "),UN=a("a"),CMo=o("T5ForConditionalGeneration"),wMo=o(" (T5 model)"),AMo=l(),$u=a("li"),Vie=a("strong"),yMo=o("tapas"),LMo=o(" \u2014 "),JN=a("a"),xMo=o("TapasForMaskedLM"),$Mo=o(" (TAPAS model)"),kMo=l(),ku=a("li"),Xie=a("strong"),SMo=o("transfo-xl"),RMo=o(" \u2014 "),YN=a("a"),PMo=o("TransfoXLLMHeadModel"),BMo=o(" (Transformer-XL model)"),IMo=l(),Su=a("li"),zie=a("strong"),qMo=o("unispeech"),NMo=o(" \u2014 "),KN=a("a"),jMo=o("UniSpeechForPreTraining"),DMo=o(" (UniSpeech model)"),GMo=l(),Ru=a("li"),Wie=a("strong"),OMo=o("unispeech-sat"),VMo=o(" \u2014 "),ZN=a("a"),XMo=o("UniSpeechSatForPreTraining"),zMo=o(" (UniSpeechSat model)"),WMo=l(),Pu=a("li"),Qie=a("strong"),QMo=o("visual_bert"),HMo=o(" \u2014 "),ej=a("a"),UMo=o("VisualBertForPreTraining"),JMo=o(" (VisualBert model)"),YMo=l(),Bu=a("li"),Hie=a("strong"),KMo=o("vit_mae"),ZMo=o(" \u2014 "),oj=a("a"),e4o=o("ViTMAEForPreTraining"),o4o=o(" (ViTMAE model)"),r4o=l(),Iu=a("li"),Uie=a("strong"),t4o=o("wav2vec2"),a4o=o(" \u2014 "),rj=a("a"),n4o=o("Wav2Vec2ForPreTraining"),s4o=o(" (Wav2Vec2 model)"),l4o=l(),qu=a("li"),Jie=a("strong"),i4o=o("wav2vec2-conformer"),d4o=o(" \u2014 "),tj=a("a"),c4o=o("Wav2Vec2ConformerForPreTraining"),f4o=o(" (Wav2Vec2-Conformer model)"),m4o=l(),Nu=a("li"),Yie=a("strong"),g4o=o("xlm"),h4o=o(" \u2014 "),aj=a("a"),p4o=o("XLMWithLMHeadModel"),_4o=o(" (XLM model)"),u4o=l(),ju=a("li"),Kie=a("strong"),b4o=o("xlm-roberta"),v4o=o(" \u2014 "),nj=a("a"),F4o=o("XLMRobertaForMaskedLM"),T4o=o(" (XLM-RoBERTa model)"),M4o=l(),Du=a("li"),Zie=a("strong"),E4o=o("xlm-roberta-xl"),C4o=o(" \u2014 "),sj=a("a"),w4o=o("XLMRobertaXLForMaskedLM"),A4o=o(" (XLM-RoBERTa-XL model)"),y4o=l(),Gu=a("li"),ede=a("strong"),L4o=o("xlnet"),x4o=o(" \u2014 "),lj=a("a"),$4o=o("XLNetLMHeadModel"),k4o=o(" (XLNet model)"),S4o=l(),Ou=a("p"),R4o=o("The model is set in evaluation mode by default using "),ode=a("code"),P4o=o("model.eval()"),B4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),I4o=o("model.train()"),q4o=l(),F(Vu.$$.fragment),Uqe=l(),ki=a("h2"),Xu=a("a"),tde=a("span"),F(aA.$$.fragment),N4o=l(),ade=a("span"),j4o=o("AutoModelForCausalLM"),Jqe=l(),$o=a("div"),F(nA.$$.fragment),D4o=l(),Si=a("p"),G4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ij=a("a"),O4o=o("from_pretrained()"),V4o=o(" class method or the "),dj=a("a"),X4o=o("from_config()"),z4o=o(` class
method.`),W4o=l(),sA=a("p"),Q4o=o("This class cannot be instantiated directly using "),nde=a("code"),H4o=o("__init__()"),U4o=o(" (throws an error)."),J4o=l(),nt=a("div"),F(lA.$$.fragment),Y4o=l(),sde=a("p"),K4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z4o=l(),Ri=a("p"),eEo=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),oEo=o("not"),rEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),tEo=o("from_pretrained()"),aEo=o(" to load the model weights."),nEo=l(),F(zu.$$.fragment),sEo=l(),Ke=a("div"),F(iA.$$.fragment),lEo=l(),ide=a("p"),iEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dEo=l(),$a=a("p"),cEo=o("The model class to instantiate is selected based on the "),dde=a("code"),fEo=o("model_type"),mEo=o(` property of the config object (either
passed as an argument or loaded from `),cde=a("code"),gEo=o("pretrained_model_name_or_path"),hEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=a("code"),pEo=o("pretrained_model_name_or_path"),_Eo=o(":"),uEo=l(),z=a("ul"),Wu=a("li"),mde=a("strong"),bEo=o("bart"),vEo=o(" \u2014 "),fj=a("a"),FEo=o("BartForCausalLM"),TEo=o(" (BART model)"),MEo=l(),Qu=a("li"),gde=a("strong"),EEo=o("bert"),CEo=o(" \u2014 "),mj=a("a"),wEo=o("BertLMHeadModel"),AEo=o(" (BERT model)"),yEo=l(),Hu=a("li"),hde=a("strong"),LEo=o("bert-generation"),xEo=o(" \u2014 "),gj=a("a"),$Eo=o("BertGenerationDecoder"),kEo=o(" (Bert Generation model)"),SEo=l(),Uu=a("li"),pde=a("strong"),REo=o("big_bird"),PEo=o(" \u2014 "),hj=a("a"),BEo=o("BigBirdForCausalLM"),IEo=o(" (BigBird model)"),qEo=l(),Ju=a("li"),_de=a("strong"),NEo=o("bigbird_pegasus"),jEo=o(" \u2014 "),pj=a("a"),DEo=o("BigBirdPegasusForCausalLM"),GEo=o(" (BigBirdPegasus model)"),OEo=l(),Yu=a("li"),ude=a("strong"),VEo=o("blenderbot"),XEo=o(" \u2014 "),_j=a("a"),zEo=o("BlenderbotForCausalLM"),WEo=o(" (Blenderbot model)"),QEo=l(),Ku=a("li"),bde=a("strong"),HEo=o("blenderbot-small"),UEo=o(" \u2014 "),uj=a("a"),JEo=o("BlenderbotSmallForCausalLM"),YEo=o(" (BlenderbotSmall model)"),KEo=l(),Zu=a("li"),vde=a("strong"),ZEo=o("camembert"),e5o=o(" \u2014 "),bj=a("a"),o5o=o("CamembertForCausalLM"),r5o=o(" (CamemBERT model)"),t5o=l(),e2=a("li"),Fde=a("strong"),a5o=o("ctrl"),n5o=o(" \u2014 "),vj=a("a"),s5o=o("CTRLLMHeadModel"),l5o=o(" (CTRL model)"),i5o=l(),o2=a("li"),Tde=a("strong"),d5o=o("data2vec-text"),c5o=o(" \u2014 "),Fj=a("a"),f5o=o("Data2VecTextForCausalLM"),m5o=o(" (Data2VecText model)"),g5o=l(),r2=a("li"),Mde=a("strong"),h5o=o("electra"),p5o=o(" \u2014 "),Tj=a("a"),_5o=o("ElectraForCausalLM"),u5o=o(" (ELECTRA model)"),b5o=l(),t2=a("li"),Ede=a("strong"),v5o=o("gpt2"),F5o=o(" \u2014 "),Mj=a("a"),T5o=o("GPT2LMHeadModel"),M5o=o(" (OpenAI GPT-2 model)"),E5o=l(),a2=a("li"),Cde=a("strong"),C5o=o("gpt_neo"),w5o=o(" \u2014 "),Ej=a("a"),A5o=o("GPTNeoForCausalLM"),y5o=o(" (GPT Neo model)"),L5o=l(),n2=a("li"),wde=a("strong"),x5o=o("gptj"),$5o=o(" \u2014 "),Cj=a("a"),k5o=o("GPTJForCausalLM"),S5o=o(" (GPT-J model)"),R5o=l(),s2=a("li"),Ade=a("strong"),P5o=o("marian"),B5o=o(" \u2014 "),wj=a("a"),I5o=o("MarianForCausalLM"),q5o=o(" (Marian model)"),N5o=l(),l2=a("li"),yde=a("strong"),j5o=o("mbart"),D5o=o(" \u2014 "),Aj=a("a"),G5o=o("MBartForCausalLM"),O5o=o(" (mBART model)"),V5o=l(),i2=a("li"),Lde=a("strong"),X5o=o("megatron-bert"),z5o=o(" \u2014 "),yj=a("a"),W5o=o("MegatronBertForCausalLM"),Q5o=o(" (MegatronBert model)"),H5o=l(),d2=a("li"),xde=a("strong"),U5o=o("openai-gpt"),J5o=o(" \u2014 "),Lj=a("a"),Y5o=o("OpenAIGPTLMHeadModel"),K5o=o(" (OpenAI GPT model)"),Z5o=l(),c2=a("li"),$de=a("strong"),eCo=o("opt"),oCo=o(" \u2014 "),xj=a("a"),rCo=o("OPTForCausalLM"),tCo=o(" (OPT model)"),aCo=l(),f2=a("li"),kde=a("strong"),nCo=o("pegasus"),sCo=o(" \u2014 "),$j=a("a"),lCo=o("PegasusForCausalLM"),iCo=o(" (Pegasus model)"),dCo=l(),m2=a("li"),Sde=a("strong"),cCo=o("plbart"),fCo=o(" \u2014 "),kj=a("a"),mCo=o("PLBartForCausalLM"),gCo=o(" (PLBart model)"),hCo=l(),g2=a("li"),Rde=a("strong"),pCo=o("prophetnet"),_Co=o(" \u2014 "),Sj=a("a"),uCo=o("ProphetNetForCausalLM"),bCo=o(" (ProphetNet model)"),vCo=l(),h2=a("li"),Pde=a("strong"),FCo=o("qdqbert"),TCo=o(" \u2014 "),Rj=a("a"),MCo=o("QDQBertLMHeadModel"),ECo=o(" (QDQBert model)"),CCo=l(),p2=a("li"),Bde=a("strong"),wCo=o("reformer"),ACo=o(" \u2014 "),Pj=a("a"),yCo=o("ReformerModelWithLMHead"),LCo=o(" (Reformer model)"),xCo=l(),_2=a("li"),Ide=a("strong"),$Co=o("rembert"),kCo=o(" \u2014 "),Bj=a("a"),SCo=o("RemBertForCausalLM"),RCo=o(" (RemBERT model)"),PCo=l(),u2=a("li"),qde=a("strong"),BCo=o("roberta"),ICo=o(" \u2014 "),Ij=a("a"),qCo=o("RobertaForCausalLM"),NCo=o(" (RoBERTa model)"),jCo=l(),b2=a("li"),Nde=a("strong"),DCo=o("roformer"),GCo=o(" \u2014 "),qj=a("a"),OCo=o("RoFormerForCausalLM"),VCo=o(" (RoFormer model)"),XCo=l(),v2=a("li"),jde=a("strong"),zCo=o("speech_to_text_2"),WCo=o(" \u2014 "),Nj=a("a"),QCo=o("Speech2Text2ForCausalLM"),HCo=o(" (Speech2Text2 model)"),UCo=l(),F2=a("li"),Dde=a("strong"),JCo=o("transfo-xl"),YCo=o(" \u2014 "),jj=a("a"),KCo=o("TransfoXLLMHeadModel"),ZCo=o(" (Transformer-XL model)"),e3o=l(),T2=a("li"),Gde=a("strong"),o3o=o("trocr"),r3o=o(" \u2014 "),Dj=a("a"),t3o=o("TrOCRForCausalLM"),a3o=o(" (TrOCR model)"),n3o=l(),M2=a("li"),Ode=a("strong"),s3o=o("xglm"),l3o=o(" \u2014 "),Gj=a("a"),i3o=o("XGLMForCausalLM"),d3o=o(" (XGLM model)"),c3o=l(),E2=a("li"),Vde=a("strong"),f3o=o("xlm"),m3o=o(" \u2014 "),Oj=a("a"),g3o=o("XLMWithLMHeadModel"),h3o=o(" (XLM model)"),p3o=l(),C2=a("li"),Xde=a("strong"),_3o=o("xlm-prophetnet"),u3o=o(" \u2014 "),Vj=a("a"),b3o=o("XLMProphetNetForCausalLM"),v3o=o(" (XLMProphetNet model)"),F3o=l(),w2=a("li"),zde=a("strong"),T3o=o("xlm-roberta"),M3o=o(" \u2014 "),Xj=a("a"),E3o=o("XLMRobertaForCausalLM"),C3o=o(" (XLM-RoBERTa model)"),w3o=l(),A2=a("li"),Wde=a("strong"),A3o=o("xlm-roberta-xl"),y3o=o(" \u2014 "),zj=a("a"),L3o=o("XLMRobertaXLForCausalLM"),x3o=o(" (XLM-RoBERTa-XL model)"),$3o=l(),y2=a("li"),Qde=a("strong"),k3o=o("xlnet"),S3o=o(" \u2014 "),Wj=a("a"),R3o=o("XLNetLMHeadModel"),P3o=o(" (XLNet model)"),B3o=l(),L2=a("p"),I3o=o("The model is set in evaluation mode by default using "),Hde=a("code"),q3o=o("model.eval()"),N3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),j3o=o("model.train()"),D3o=l(),F(x2.$$.fragment),Yqe=l(),Pi=a("h2"),$2=a("a"),Jde=a("span"),F(dA.$$.fragment),G3o=l(),Yde=a("span"),O3o=o("AutoModelForMaskedLM"),Kqe=l(),ko=a("div"),F(cA.$$.fragment),V3o=l(),Bi=a("p"),X3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qj=a("a"),z3o=o("from_pretrained()"),W3o=o(" class method or the "),Hj=a("a"),Q3o=o("from_config()"),H3o=o(` class
method.`),U3o=l(),fA=a("p"),J3o=o("This class cannot be instantiated directly using "),Kde=a("code"),Y3o=o("__init__()"),K3o=o(" (throws an error)."),Z3o=l(),st=a("div"),F(mA.$$.fragment),ewo=l(),Zde=a("p"),owo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rwo=l(),Ii=a("p"),two=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),awo=o("not"),nwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),swo=o("from_pretrained()"),lwo=o(" to load the model weights."),iwo=l(),F(k2.$$.fragment),dwo=l(),Ze=a("div"),F(gA.$$.fragment),cwo=l(),oce=a("p"),fwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mwo=l(),ka=a("p"),gwo=o("The model class to instantiate is selected based on the "),rce=a("code"),hwo=o("model_type"),pwo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),_wo=o("pretrained_model_name_or_path"),uwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),bwo=o("pretrained_model_name_or_path"),vwo=o(":"),Fwo=l(),W=a("ul"),S2=a("li"),nce=a("strong"),Two=o("albert"),Mwo=o(" \u2014 "),Jj=a("a"),Ewo=o("AlbertForMaskedLM"),Cwo=o(" (ALBERT model)"),wwo=l(),R2=a("li"),sce=a("strong"),Awo=o("bart"),ywo=o(" \u2014 "),Yj=a("a"),Lwo=o("BartForConditionalGeneration"),xwo=o(" (BART model)"),$wo=l(),P2=a("li"),lce=a("strong"),kwo=o("bert"),Swo=o(" \u2014 "),Kj=a("a"),Rwo=o("BertForMaskedLM"),Pwo=o(" (BERT model)"),Bwo=l(),B2=a("li"),ice=a("strong"),Iwo=o("big_bird"),qwo=o(" \u2014 "),Zj=a("a"),Nwo=o("BigBirdForMaskedLM"),jwo=o(" (BigBird model)"),Dwo=l(),I2=a("li"),dce=a("strong"),Gwo=o("camembert"),Owo=o(" \u2014 "),eD=a("a"),Vwo=o("CamembertForMaskedLM"),Xwo=o(" (CamemBERT model)"),zwo=l(),q2=a("li"),cce=a("strong"),Wwo=o("convbert"),Qwo=o(" \u2014 "),oD=a("a"),Hwo=o("ConvBertForMaskedLM"),Uwo=o(" (ConvBERT model)"),Jwo=l(),N2=a("li"),fce=a("strong"),Ywo=o("data2vec-text"),Kwo=o(" \u2014 "),rD=a("a"),Zwo=o("Data2VecTextForMaskedLM"),e0o=o(" (Data2VecText model)"),o0o=l(),j2=a("li"),mce=a("strong"),r0o=o("deberta"),t0o=o(" \u2014 "),tD=a("a"),a0o=o("DebertaForMaskedLM"),n0o=o(" (DeBERTa model)"),s0o=l(),D2=a("li"),gce=a("strong"),l0o=o("deberta-v2"),i0o=o(" \u2014 "),aD=a("a"),d0o=o("DebertaV2ForMaskedLM"),c0o=o(" (DeBERTa-v2 model)"),f0o=l(),G2=a("li"),hce=a("strong"),m0o=o("distilbert"),g0o=o(" \u2014 "),nD=a("a"),h0o=o("DistilBertForMaskedLM"),p0o=o(" (DistilBERT model)"),_0o=l(),O2=a("li"),pce=a("strong"),u0o=o("electra"),b0o=o(" \u2014 "),sD=a("a"),v0o=o("ElectraForMaskedLM"),F0o=o(" (ELECTRA model)"),T0o=l(),V2=a("li"),_ce=a("strong"),M0o=o("flaubert"),E0o=o(" \u2014 "),lD=a("a"),C0o=o("FlaubertWithLMHeadModel"),w0o=o(" (FlauBERT model)"),A0o=l(),X2=a("li"),uce=a("strong"),y0o=o("fnet"),L0o=o(" \u2014 "),iD=a("a"),x0o=o("FNetForMaskedLM"),$0o=o(" (FNet model)"),k0o=l(),z2=a("li"),bce=a("strong"),S0o=o("funnel"),R0o=o(" \u2014 "),dD=a("a"),P0o=o("FunnelForMaskedLM"),B0o=o(" (Funnel Transformer model)"),I0o=l(),W2=a("li"),vce=a("strong"),q0o=o("ibert"),N0o=o(" \u2014 "),cD=a("a"),j0o=o("IBertForMaskedLM"),D0o=o(" (I-BERT model)"),G0o=l(),Q2=a("li"),Fce=a("strong"),O0o=o("layoutlm"),V0o=o(" \u2014 "),fD=a("a"),X0o=o("LayoutLMForMaskedLM"),z0o=o(" (LayoutLM model)"),W0o=l(),H2=a("li"),Tce=a("strong"),Q0o=o("longformer"),H0o=o(" \u2014 "),mD=a("a"),U0o=o("LongformerForMaskedLM"),J0o=o(" (Longformer model)"),Y0o=l(),U2=a("li"),Mce=a("strong"),K0o=o("mbart"),Z0o=o(" \u2014 "),gD=a("a"),eAo=o("MBartForConditionalGeneration"),oAo=o(" (mBART model)"),rAo=l(),J2=a("li"),Ece=a("strong"),tAo=o("megatron-bert"),aAo=o(" \u2014 "),hD=a("a"),nAo=o("MegatronBertForMaskedLM"),sAo=o(" (MegatronBert model)"),lAo=l(),Y2=a("li"),Cce=a("strong"),iAo=o("mobilebert"),dAo=o(" \u2014 "),pD=a("a"),cAo=o("MobileBertForMaskedLM"),fAo=o(" (MobileBERT model)"),mAo=l(),K2=a("li"),wce=a("strong"),gAo=o("mpnet"),hAo=o(" \u2014 "),_D=a("a"),pAo=o("MPNetForMaskedLM"),_Ao=o(" (MPNet model)"),uAo=l(),Z2=a("li"),Ace=a("strong"),bAo=o("nystromformer"),vAo=o(" \u2014 "),uD=a("a"),FAo=o("NystromformerForMaskedLM"),TAo=o(" (Nystromformer model)"),MAo=l(),e1=a("li"),yce=a("strong"),EAo=o("perceiver"),CAo=o(" \u2014 "),bD=a("a"),wAo=o("PerceiverForMaskedLM"),AAo=o(" (Perceiver model)"),yAo=l(),o1=a("li"),Lce=a("strong"),LAo=o("qdqbert"),xAo=o(" \u2014 "),vD=a("a"),$Ao=o("QDQBertForMaskedLM"),kAo=o(" (QDQBert model)"),SAo=l(),r1=a("li"),xce=a("strong"),RAo=o("reformer"),PAo=o(" \u2014 "),FD=a("a"),BAo=o("ReformerForMaskedLM"),IAo=o(" (Reformer model)"),qAo=l(),t1=a("li"),$ce=a("strong"),NAo=o("rembert"),jAo=o(" \u2014 "),TD=a("a"),DAo=o("RemBertForMaskedLM"),GAo=o(" (RemBERT model)"),OAo=l(),a1=a("li"),kce=a("strong"),VAo=o("roberta"),XAo=o(" \u2014 "),MD=a("a"),zAo=o("RobertaForMaskedLM"),WAo=o(" (RoBERTa model)"),QAo=l(),n1=a("li"),Sce=a("strong"),HAo=o("roformer"),UAo=o(" \u2014 "),ED=a("a"),JAo=o("RoFormerForMaskedLM"),YAo=o(" (RoFormer model)"),KAo=l(),s1=a("li"),Rce=a("strong"),ZAo=o("squeezebert"),eyo=o(" \u2014 "),CD=a("a"),oyo=o("SqueezeBertForMaskedLM"),ryo=o(" (SqueezeBERT model)"),tyo=l(),l1=a("li"),Pce=a("strong"),ayo=o("tapas"),nyo=o(" \u2014 "),wD=a("a"),syo=o("TapasForMaskedLM"),lyo=o(" (TAPAS model)"),iyo=l(),i1=a("li"),Bce=a("strong"),dyo=o("wav2vec2"),cyo=o(" \u2014 "),Ice=a("code"),fyo=o("Wav2Vec2ForMaskedLM"),myo=o(" (Wav2Vec2 model)"),gyo=l(),d1=a("li"),qce=a("strong"),hyo=o("xlm"),pyo=o(" \u2014 "),AD=a("a"),_yo=o("XLMWithLMHeadModel"),uyo=o(" (XLM model)"),byo=l(),c1=a("li"),Nce=a("strong"),vyo=o("xlm-roberta"),Fyo=o(" \u2014 "),yD=a("a"),Tyo=o("XLMRobertaForMaskedLM"),Myo=o(" (XLM-RoBERTa model)"),Eyo=l(),f1=a("li"),jce=a("strong"),Cyo=o("xlm-roberta-xl"),wyo=o(" \u2014 "),LD=a("a"),Ayo=o("XLMRobertaXLForMaskedLM"),yyo=o(" (XLM-RoBERTa-XL model)"),Lyo=l(),m1=a("li"),Dce=a("strong"),xyo=o("yoso"),$yo=o(" \u2014 "),xD=a("a"),kyo=o("YosoForMaskedLM"),Syo=o(" (YOSO model)"),Ryo=l(),g1=a("p"),Pyo=o("The model is set in evaluation mode by default using "),Gce=a("code"),Byo=o("model.eval()"),Iyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),qyo=o("model.train()"),Nyo=l(),F(h1.$$.fragment),Zqe=l(),qi=a("h2"),p1=a("a"),Vce=a("span"),F(hA.$$.fragment),jyo=l(),Xce=a("span"),Dyo=o("AutoModelForSeq2SeqLM"),eNe=l(),So=a("div"),F(pA.$$.fragment),Gyo=l(),Ni=a("p"),Oyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$D=a("a"),Vyo=o("from_pretrained()"),Xyo=o(" class method or the "),kD=a("a"),zyo=o("from_config()"),Wyo=o(` class
method.`),Qyo=l(),_A=a("p"),Hyo=o("This class cannot be instantiated directly using "),zce=a("code"),Uyo=o("__init__()"),Jyo=o(" (throws an error)."),Yyo=l(),lt=a("div"),F(uA.$$.fragment),Kyo=l(),Wce=a("p"),Zyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eLo=l(),ji=a("p"),oLo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),rLo=o("not"),tLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),aLo=o("from_pretrained()"),nLo=o(" to load the model weights."),sLo=l(),F(_1.$$.fragment),lLo=l(),eo=a("div"),F(bA.$$.fragment),iLo=l(),Hce=a("p"),dLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cLo=l(),Sa=a("p"),fLo=o("The model class to instantiate is selected based on the "),Uce=a("code"),mLo=o("model_type"),gLo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),hLo=o("pretrained_model_name_or_path"),pLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),_Lo=o("pretrained_model_name_or_path"),uLo=o(":"),bLo=l(),he=a("ul"),u1=a("li"),Kce=a("strong"),vLo=o("bart"),FLo=o(" \u2014 "),RD=a("a"),TLo=o("BartForConditionalGeneration"),MLo=o(" (BART model)"),ELo=l(),b1=a("li"),Zce=a("strong"),CLo=o("bigbird_pegasus"),wLo=o(" \u2014 "),PD=a("a"),ALo=o("BigBirdPegasusForConditionalGeneration"),yLo=o(" (BigBirdPegasus model)"),LLo=l(),v1=a("li"),efe=a("strong"),xLo=o("blenderbot"),$Lo=o(" \u2014 "),BD=a("a"),kLo=o("BlenderbotForConditionalGeneration"),SLo=o(" (Blenderbot model)"),RLo=l(),F1=a("li"),ofe=a("strong"),PLo=o("blenderbot-small"),BLo=o(" \u2014 "),ID=a("a"),ILo=o("BlenderbotSmallForConditionalGeneration"),qLo=o(" (BlenderbotSmall model)"),NLo=l(),T1=a("li"),rfe=a("strong"),jLo=o("encoder-decoder"),DLo=o(" \u2014 "),qD=a("a"),GLo=o("EncoderDecoderModel"),OLo=o(" (Encoder decoder model)"),VLo=l(),M1=a("li"),tfe=a("strong"),XLo=o("fsmt"),zLo=o(" \u2014 "),ND=a("a"),WLo=o("FSMTForConditionalGeneration"),QLo=o(" (FairSeq Machine-Translation model)"),HLo=l(),E1=a("li"),afe=a("strong"),ULo=o("led"),JLo=o(" \u2014 "),jD=a("a"),YLo=o("LEDForConditionalGeneration"),KLo=o(" (LED model)"),ZLo=l(),C1=a("li"),nfe=a("strong"),e8o=o("longt5"),o8o=o(" \u2014 "),DD=a("a"),r8o=o("LongT5ForConditionalGeneration"),t8o=o(" (LongT5 model)"),a8o=l(),w1=a("li"),sfe=a("strong"),n8o=o("m2m_100"),s8o=o(" \u2014 "),GD=a("a"),l8o=o("M2M100ForConditionalGeneration"),i8o=o(" (M2M100 model)"),d8o=l(),A1=a("li"),lfe=a("strong"),c8o=o("marian"),f8o=o(" \u2014 "),OD=a("a"),m8o=o("MarianMTModel"),g8o=o(" (Marian model)"),h8o=l(),y1=a("li"),ife=a("strong"),p8o=o("mbart"),_8o=o(" \u2014 "),VD=a("a"),u8o=o("MBartForConditionalGeneration"),b8o=o(" (mBART model)"),v8o=l(),L1=a("li"),dfe=a("strong"),F8o=o("mt5"),T8o=o(" \u2014 "),XD=a("a"),M8o=o("MT5ForConditionalGeneration"),E8o=o(" (mT5 model)"),C8o=l(),x1=a("li"),cfe=a("strong"),w8o=o("pegasus"),A8o=o(" \u2014 "),zD=a("a"),y8o=o("PegasusForConditionalGeneration"),L8o=o(" (Pegasus model)"),x8o=l(),$1=a("li"),ffe=a("strong"),$8o=o("plbart"),k8o=o(" \u2014 "),WD=a("a"),S8o=o("PLBartForConditionalGeneration"),R8o=o(" (PLBart model)"),P8o=l(),k1=a("li"),mfe=a("strong"),B8o=o("prophetnet"),I8o=o(" \u2014 "),QD=a("a"),q8o=o("ProphetNetForConditionalGeneration"),N8o=o(" (ProphetNet model)"),j8o=l(),S1=a("li"),gfe=a("strong"),D8o=o("t5"),G8o=o(" \u2014 "),HD=a("a"),O8o=o("T5ForConditionalGeneration"),V8o=o(" (T5 model)"),X8o=l(),R1=a("li"),hfe=a("strong"),z8o=o("xlm-prophetnet"),W8o=o(" \u2014 "),UD=a("a"),Q8o=o("XLMProphetNetForConditionalGeneration"),H8o=o(" (XLMProphetNet model)"),U8o=l(),P1=a("p"),J8o=o("The model is set in evaluation mode by default using "),pfe=a("code"),Y8o=o("model.eval()"),K8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),Z8o=o("model.train()"),exo=l(),F(B1.$$.fragment),oNe=l(),Di=a("h2"),I1=a("a"),ufe=a("span"),F(vA.$$.fragment),oxo=l(),bfe=a("span"),rxo=o("AutoModelForSequenceClassification"),rNe=l(),Ro=a("div"),F(FA.$$.fragment),txo=l(),Gi=a("p"),axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=a("a"),nxo=o("from_pretrained()"),sxo=o(" class method or the "),YD=a("a"),lxo=o("from_config()"),ixo=o(` class
method.`),dxo=l(),TA=a("p"),cxo=o("This class cannot be instantiated directly using "),vfe=a("code"),fxo=o("__init__()"),mxo=o(" (throws an error)."),gxo=l(),it=a("div"),F(MA.$$.fragment),hxo=l(),Ffe=a("p"),pxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_xo=l(),Oi=a("p"),uxo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),bxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),Fxo=o("from_pretrained()"),Txo=o(" to load the model weights."),Mxo=l(),F(q1.$$.fragment),Exo=l(),oo=a("div"),F(EA.$$.fragment),Cxo=l(),Mfe=a("p"),wxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Axo=l(),Ra=a("p"),yxo=o("The model class to instantiate is selected based on the "),Efe=a("code"),Lxo=o("model_type"),xxo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Pxo=l(),q=a("ul"),N1=a("li"),Afe=a("strong"),Bxo=o("albert"),Ixo=o(" \u2014 "),ZD=a("a"),qxo=o("AlbertForSequenceClassification"),Nxo=o(" (ALBERT model)"),jxo=l(),j1=a("li"),yfe=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),eG=a("a"),Oxo=o("BartForSequenceClassification"),Vxo=o(" (BART model)"),Xxo=l(),D1=a("li"),Lfe=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),oG=a("a"),Qxo=o("BertForSequenceClassification"),Hxo=o(" (BERT model)"),Uxo=l(),G1=a("li"),xfe=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),rG=a("a"),Kxo=o("BigBirdForSequenceClassification"),Zxo=o(" (BigBird model)"),e$o=l(),O1=a("li"),$fe=a("strong"),o$o=o("bigbird_pegasus"),r$o=o(" \u2014 "),tG=a("a"),t$o=o("BigBirdPegasusForSequenceClassification"),a$o=o(" (BigBirdPegasus model)"),n$o=l(),V1=a("li"),kfe=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),aG=a("a"),i$o=o("CamembertForSequenceClassification"),d$o=o(" (CamemBERT model)"),c$o=l(),X1=a("li"),Sfe=a("strong"),f$o=o("canine"),m$o=o(" \u2014 "),nG=a("a"),g$o=o("CanineForSequenceClassification"),h$o=o(" (Canine model)"),p$o=l(),z1=a("li"),Rfe=a("strong"),_$o=o("convbert"),u$o=o(" \u2014 "),sG=a("a"),b$o=o("ConvBertForSequenceClassification"),v$o=o(" (ConvBERT model)"),F$o=l(),W1=a("li"),Pfe=a("strong"),T$o=o("ctrl"),M$o=o(" \u2014 "),lG=a("a"),E$o=o("CTRLForSequenceClassification"),C$o=o(" (CTRL model)"),w$o=l(),Q1=a("li"),Bfe=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),iG=a("a"),L$o=o("Data2VecTextForSequenceClassification"),x$o=o(" (Data2VecText model)"),$$o=l(),H1=a("li"),Ife=a("strong"),k$o=o("deberta"),S$o=o(" \u2014 "),dG=a("a"),R$o=o("DebertaForSequenceClassification"),P$o=o(" (DeBERTa model)"),B$o=l(),U1=a("li"),qfe=a("strong"),I$o=o("deberta-v2"),q$o=o(" \u2014 "),cG=a("a"),N$o=o("DebertaV2ForSequenceClassification"),j$o=o(" (DeBERTa-v2 model)"),D$o=l(),J1=a("li"),Nfe=a("strong"),G$o=o("distilbert"),O$o=o(" \u2014 "),fG=a("a"),V$o=o("DistilBertForSequenceClassification"),X$o=o(" (DistilBERT model)"),z$o=l(),Y1=a("li"),jfe=a("strong"),W$o=o("electra"),Q$o=o(" \u2014 "),mG=a("a"),H$o=o("ElectraForSequenceClassification"),U$o=o(" (ELECTRA model)"),J$o=l(),K1=a("li"),Dfe=a("strong"),Y$o=o("flaubert"),K$o=o(" \u2014 "),gG=a("a"),Z$o=o("FlaubertForSequenceClassification"),eko=o(" (FlauBERT model)"),oko=l(),Z1=a("li"),Gfe=a("strong"),rko=o("fnet"),tko=o(" \u2014 "),hG=a("a"),ako=o("FNetForSequenceClassification"),nko=o(" (FNet model)"),sko=l(),eb=a("li"),Ofe=a("strong"),lko=o("funnel"),iko=o(" \u2014 "),pG=a("a"),dko=o("FunnelForSequenceClassification"),cko=o(" (Funnel Transformer model)"),fko=l(),ob=a("li"),Vfe=a("strong"),mko=o("gpt2"),gko=o(" \u2014 "),_G=a("a"),hko=o("GPT2ForSequenceClassification"),pko=o(" (OpenAI GPT-2 model)"),_ko=l(),rb=a("li"),Xfe=a("strong"),uko=o("gpt_neo"),bko=o(" \u2014 "),uG=a("a"),vko=o("GPTNeoForSequenceClassification"),Fko=o(" (GPT Neo model)"),Tko=l(),tb=a("li"),zfe=a("strong"),Mko=o("gptj"),Eko=o(" \u2014 "),bG=a("a"),Cko=o("GPTJForSequenceClassification"),wko=o(" (GPT-J model)"),Ako=l(),ab=a("li"),Wfe=a("strong"),yko=o("ibert"),Lko=o(" \u2014 "),vG=a("a"),xko=o("IBertForSequenceClassification"),$ko=o(" (I-BERT model)"),kko=l(),nb=a("li"),Qfe=a("strong"),Sko=o("layoutlm"),Rko=o(" \u2014 "),FG=a("a"),Pko=o("LayoutLMForSequenceClassification"),Bko=o(" (LayoutLM model)"),Iko=l(),sb=a("li"),Hfe=a("strong"),qko=o("layoutlmv2"),Nko=o(" \u2014 "),TG=a("a"),jko=o("LayoutLMv2ForSequenceClassification"),Dko=o(" (LayoutLMv2 model)"),Gko=l(),lb=a("li"),Ufe=a("strong"),Oko=o("led"),Vko=o(" \u2014 "),MG=a("a"),Xko=o("LEDForSequenceClassification"),zko=o(" (LED model)"),Wko=l(),ib=a("li"),Jfe=a("strong"),Qko=o("longformer"),Hko=o(" \u2014 "),EG=a("a"),Uko=o("LongformerForSequenceClassification"),Jko=o(" (Longformer model)"),Yko=l(),db=a("li"),Yfe=a("strong"),Kko=o("mbart"),Zko=o(" \u2014 "),CG=a("a"),eSo=o("MBartForSequenceClassification"),oSo=o(" (mBART model)"),rSo=l(),cb=a("li"),Kfe=a("strong"),tSo=o("megatron-bert"),aSo=o(" \u2014 "),wG=a("a"),nSo=o("MegatronBertForSequenceClassification"),sSo=o(" (MegatronBert model)"),lSo=l(),fb=a("li"),Zfe=a("strong"),iSo=o("mobilebert"),dSo=o(" \u2014 "),AG=a("a"),cSo=o("MobileBertForSequenceClassification"),fSo=o(" (MobileBERT model)"),mSo=l(),mb=a("li"),eme=a("strong"),gSo=o("mpnet"),hSo=o(" \u2014 "),yG=a("a"),pSo=o("MPNetForSequenceClassification"),_So=o(" (MPNet model)"),uSo=l(),gb=a("li"),ome=a("strong"),bSo=o("nystromformer"),vSo=o(" \u2014 "),LG=a("a"),FSo=o("NystromformerForSequenceClassification"),TSo=o(" (Nystromformer model)"),MSo=l(),hb=a("li"),rme=a("strong"),ESo=o("openai-gpt"),CSo=o(" \u2014 "),xG=a("a"),wSo=o("OpenAIGPTForSequenceClassification"),ASo=o(" (OpenAI GPT model)"),ySo=l(),pb=a("li"),tme=a("strong"),LSo=o("perceiver"),xSo=o(" \u2014 "),$G=a("a"),$So=o("PerceiverForSequenceClassification"),kSo=o(" (Perceiver model)"),SSo=l(),_b=a("li"),ame=a("strong"),RSo=o("plbart"),PSo=o(" \u2014 "),kG=a("a"),BSo=o("PLBartForSequenceClassification"),ISo=o(" (PLBart model)"),qSo=l(),ub=a("li"),nme=a("strong"),NSo=o("qdqbert"),jSo=o(" \u2014 "),SG=a("a"),DSo=o("QDQBertForSequenceClassification"),GSo=o(" (QDQBert model)"),OSo=l(),bb=a("li"),sme=a("strong"),VSo=o("reformer"),XSo=o(" \u2014 "),RG=a("a"),zSo=o("ReformerForSequenceClassification"),WSo=o(" (Reformer model)"),QSo=l(),vb=a("li"),lme=a("strong"),HSo=o("rembert"),USo=o(" \u2014 "),PG=a("a"),JSo=o("RemBertForSequenceClassification"),YSo=o(" (RemBERT model)"),KSo=l(),Fb=a("li"),ime=a("strong"),ZSo=o("roberta"),eRo=o(" \u2014 "),BG=a("a"),oRo=o("RobertaForSequenceClassification"),rRo=o(" (RoBERTa model)"),tRo=l(),Tb=a("li"),dme=a("strong"),aRo=o("roformer"),nRo=o(" \u2014 "),IG=a("a"),sRo=o("RoFormerForSequenceClassification"),lRo=o(" (RoFormer model)"),iRo=l(),Mb=a("li"),cme=a("strong"),dRo=o("squeezebert"),cRo=o(" \u2014 "),qG=a("a"),fRo=o("SqueezeBertForSequenceClassification"),mRo=o(" (SqueezeBERT model)"),gRo=l(),Eb=a("li"),fme=a("strong"),hRo=o("tapas"),pRo=o(" \u2014 "),NG=a("a"),_Ro=o("TapasForSequenceClassification"),uRo=o(" (TAPAS model)"),bRo=l(),Cb=a("li"),mme=a("strong"),vRo=o("transfo-xl"),FRo=o(" \u2014 "),jG=a("a"),TRo=o("TransfoXLForSequenceClassification"),MRo=o(" (Transformer-XL model)"),ERo=l(),wb=a("li"),gme=a("strong"),CRo=o("xlm"),wRo=o(" \u2014 "),DG=a("a"),ARo=o("XLMForSequenceClassification"),yRo=o(" (XLM model)"),LRo=l(),Ab=a("li"),hme=a("strong"),xRo=o("xlm-roberta"),$Ro=o(" \u2014 "),GG=a("a"),kRo=o("XLMRobertaForSequenceClassification"),SRo=o(" (XLM-RoBERTa model)"),RRo=l(),yb=a("li"),pme=a("strong"),PRo=o("xlm-roberta-xl"),BRo=o(" \u2014 "),OG=a("a"),IRo=o("XLMRobertaXLForSequenceClassification"),qRo=o(" (XLM-RoBERTa-XL model)"),NRo=l(),Lb=a("li"),_me=a("strong"),jRo=o("xlnet"),DRo=o(" \u2014 "),VG=a("a"),GRo=o("XLNetForSequenceClassification"),ORo=o(" (XLNet model)"),VRo=l(),xb=a("li"),ume=a("strong"),XRo=o("yoso"),zRo=o(" \u2014 "),XG=a("a"),WRo=o("YosoForSequenceClassification"),QRo=o(" (YOSO model)"),HRo=l(),$b=a("p"),URo=o("The model is set in evaluation mode by default using "),bme=a("code"),JRo=o("model.eval()"),YRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),KRo=o("model.train()"),ZRo=l(),F(kb.$$.fragment),tNe=l(),Vi=a("h2"),Sb=a("a"),Fme=a("span"),F(CA.$$.fragment),ePo=l(),Tme=a("span"),oPo=o("AutoModelForMultipleChoice"),aNe=l(),Po=a("div"),F(wA.$$.fragment),rPo=l(),Xi=a("p"),tPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zG=a("a"),aPo=o("from_pretrained()"),nPo=o(" class method or the "),WG=a("a"),sPo=o("from_config()"),lPo=o(` class
method.`),iPo=l(),AA=a("p"),dPo=o("This class cannot be instantiated directly using "),Mme=a("code"),cPo=o("__init__()"),fPo=o(" (throws an error)."),mPo=l(),dt=a("div"),F(yA.$$.fragment),gPo=l(),Eme=a("p"),hPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pPo=l(),zi=a("p"),_Po=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),uPo=o("not"),bPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),vPo=o("from_pretrained()"),FPo=o(" to load the model weights."),TPo=l(),F(Rb.$$.fragment),MPo=l(),ro=a("div"),F(LA.$$.fragment),EPo=l(),wme=a("p"),CPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wPo=l(),Pa=a("p"),APo=o("The model class to instantiate is selected based on the "),Ame=a("code"),yPo=o("model_type"),LPo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),xPo=o("pretrained_model_name_or_path"),$Po=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),kPo=o("pretrained_model_name_or_path"),SPo=o(":"),RPo=l(),Y=a("ul"),Pb=a("li"),xme=a("strong"),PPo=o("albert"),BPo=o(" \u2014 "),HG=a("a"),IPo=o("AlbertForMultipleChoice"),qPo=o(" (ALBERT model)"),NPo=l(),Bb=a("li"),$me=a("strong"),jPo=o("bert"),DPo=o(" \u2014 "),UG=a("a"),GPo=o("BertForMultipleChoice"),OPo=o(" (BERT model)"),VPo=l(),Ib=a("li"),kme=a("strong"),XPo=o("big_bird"),zPo=o(" \u2014 "),JG=a("a"),WPo=o("BigBirdForMultipleChoice"),QPo=o(" (BigBird model)"),HPo=l(),qb=a("li"),Sme=a("strong"),UPo=o("camembert"),JPo=o(" \u2014 "),YG=a("a"),YPo=o("CamembertForMultipleChoice"),KPo=o(" (CamemBERT model)"),ZPo=l(),Nb=a("li"),Rme=a("strong"),eBo=o("canine"),oBo=o(" \u2014 "),KG=a("a"),rBo=o("CanineForMultipleChoice"),tBo=o(" (Canine model)"),aBo=l(),jb=a("li"),Pme=a("strong"),nBo=o("convbert"),sBo=o(" \u2014 "),ZG=a("a"),lBo=o("ConvBertForMultipleChoice"),iBo=o(" (ConvBERT model)"),dBo=l(),Db=a("li"),Bme=a("strong"),cBo=o("data2vec-text"),fBo=o(" \u2014 "),eO=a("a"),mBo=o("Data2VecTextForMultipleChoice"),gBo=o(" (Data2VecText model)"),hBo=l(),Gb=a("li"),Ime=a("strong"),pBo=o("deberta-v2"),_Bo=o(" \u2014 "),oO=a("a"),uBo=o("DebertaV2ForMultipleChoice"),bBo=o(" (DeBERTa-v2 model)"),vBo=l(),Ob=a("li"),qme=a("strong"),FBo=o("distilbert"),TBo=o(" \u2014 "),rO=a("a"),MBo=o("DistilBertForMultipleChoice"),EBo=o(" (DistilBERT model)"),CBo=l(),Vb=a("li"),Nme=a("strong"),wBo=o("electra"),ABo=o(" \u2014 "),tO=a("a"),yBo=o("ElectraForMultipleChoice"),LBo=o(" (ELECTRA model)"),xBo=l(),Xb=a("li"),jme=a("strong"),$Bo=o("flaubert"),kBo=o(" \u2014 "),aO=a("a"),SBo=o("FlaubertForMultipleChoice"),RBo=o(" (FlauBERT model)"),PBo=l(),zb=a("li"),Dme=a("strong"),BBo=o("fnet"),IBo=o(" \u2014 "),nO=a("a"),qBo=o("FNetForMultipleChoice"),NBo=o(" (FNet model)"),jBo=l(),Wb=a("li"),Gme=a("strong"),DBo=o("funnel"),GBo=o(" \u2014 "),sO=a("a"),OBo=o("FunnelForMultipleChoice"),VBo=o(" (Funnel Transformer model)"),XBo=l(),Qb=a("li"),Ome=a("strong"),zBo=o("ibert"),WBo=o(" \u2014 "),lO=a("a"),QBo=o("IBertForMultipleChoice"),HBo=o(" (I-BERT model)"),UBo=l(),Hb=a("li"),Vme=a("strong"),JBo=o("longformer"),YBo=o(" \u2014 "),iO=a("a"),KBo=o("LongformerForMultipleChoice"),ZBo=o(" (Longformer model)"),eIo=l(),Ub=a("li"),Xme=a("strong"),oIo=o("megatron-bert"),rIo=o(" \u2014 "),dO=a("a"),tIo=o("MegatronBertForMultipleChoice"),aIo=o(" (MegatronBert model)"),nIo=l(),Jb=a("li"),zme=a("strong"),sIo=o("mobilebert"),lIo=o(" \u2014 "),cO=a("a"),iIo=o("MobileBertForMultipleChoice"),dIo=o(" (MobileBERT model)"),cIo=l(),Yb=a("li"),Wme=a("strong"),fIo=o("mpnet"),mIo=o(" \u2014 "),fO=a("a"),gIo=o("MPNetForMultipleChoice"),hIo=o(" (MPNet model)"),pIo=l(),Kb=a("li"),Qme=a("strong"),_Io=o("nystromformer"),uIo=o(" \u2014 "),mO=a("a"),bIo=o("NystromformerForMultipleChoice"),vIo=o(" (Nystromformer model)"),FIo=l(),Zb=a("li"),Hme=a("strong"),TIo=o("qdqbert"),MIo=o(" \u2014 "),gO=a("a"),EIo=o("QDQBertForMultipleChoice"),CIo=o(" (QDQBert model)"),wIo=l(),ev=a("li"),Ume=a("strong"),AIo=o("rembert"),yIo=o(" \u2014 "),hO=a("a"),LIo=o("RemBertForMultipleChoice"),xIo=o(" (RemBERT model)"),$Io=l(),ov=a("li"),Jme=a("strong"),kIo=o("roberta"),SIo=o(" \u2014 "),pO=a("a"),RIo=o("RobertaForMultipleChoice"),PIo=o(" (RoBERTa model)"),BIo=l(),rv=a("li"),Yme=a("strong"),IIo=o("roformer"),qIo=o(" \u2014 "),_O=a("a"),NIo=o("RoFormerForMultipleChoice"),jIo=o(" (RoFormer model)"),DIo=l(),tv=a("li"),Kme=a("strong"),GIo=o("squeezebert"),OIo=o(" \u2014 "),uO=a("a"),VIo=o("SqueezeBertForMultipleChoice"),XIo=o(" (SqueezeBERT model)"),zIo=l(),av=a("li"),Zme=a("strong"),WIo=o("xlm"),QIo=o(" \u2014 "),bO=a("a"),HIo=o("XLMForMultipleChoice"),UIo=o(" (XLM model)"),JIo=l(),nv=a("li"),ege=a("strong"),YIo=o("xlm-roberta"),KIo=o(" \u2014 "),vO=a("a"),ZIo=o("XLMRobertaForMultipleChoice"),eqo=o(" (XLM-RoBERTa model)"),oqo=l(),sv=a("li"),oge=a("strong"),rqo=o("xlm-roberta-xl"),tqo=o(" \u2014 "),FO=a("a"),aqo=o("XLMRobertaXLForMultipleChoice"),nqo=o(" (XLM-RoBERTa-XL model)"),sqo=l(),lv=a("li"),rge=a("strong"),lqo=o("xlnet"),iqo=o(" \u2014 "),TO=a("a"),dqo=o("XLNetForMultipleChoice"),cqo=o(" (XLNet model)"),fqo=l(),iv=a("li"),tge=a("strong"),mqo=o("yoso"),gqo=o(" \u2014 "),MO=a("a"),hqo=o("YosoForMultipleChoice"),pqo=o(" (YOSO model)"),_qo=l(),dv=a("p"),uqo=o("The model is set in evaluation mode by default using "),age=a("code"),bqo=o("model.eval()"),vqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),Fqo=o("model.train()"),Tqo=l(),F(cv.$$.fragment),nNe=l(),Wi=a("h2"),fv=a("a"),sge=a("span"),F(xA.$$.fragment),Mqo=l(),lge=a("span"),Eqo=o("AutoModelForNextSentencePrediction"),sNe=l(),Bo=a("div"),F($A.$$.fragment),Cqo=l(),Qi=a("p"),wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EO=a("a"),Aqo=o("from_pretrained()"),yqo=o(" class method or the "),CO=a("a"),Lqo=o("from_config()"),xqo=o(` class
method.`),$qo=l(),kA=a("p"),kqo=o("This class cannot be instantiated directly using "),ige=a("code"),Sqo=o("__init__()"),Rqo=o(" (throws an error)."),Pqo=l(),ct=a("div"),F(SA.$$.fragment),Bqo=l(),dge=a("p"),Iqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qqo=l(),Hi=a("p"),Nqo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),jqo=o("not"),Dqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),Gqo=o("from_pretrained()"),Oqo=o(" to load the model weights."),Vqo=l(),F(mv.$$.fragment),Xqo=l(),to=a("div"),F(RA.$$.fragment),zqo=l(),fge=a("p"),Wqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qqo=l(),Ba=a("p"),Hqo=o("The model class to instantiate is selected based on the "),mge=a("code"),Uqo=o("model_type"),Jqo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),Yqo=o("pretrained_model_name_or_path"),Kqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),Zqo=o("pretrained_model_name_or_path"),eNo=o(":"),oNo=l(),Yr=a("ul"),gv=a("li"),pge=a("strong"),rNo=o("bert"),tNo=o(" \u2014 "),AO=a("a"),aNo=o("BertForNextSentencePrediction"),nNo=o(" (BERT model)"),sNo=l(),hv=a("li"),_ge=a("strong"),lNo=o("fnet"),iNo=o(" \u2014 "),yO=a("a"),dNo=o("FNetForNextSentencePrediction"),cNo=o(" (FNet model)"),fNo=l(),pv=a("li"),uge=a("strong"),mNo=o("megatron-bert"),gNo=o(" \u2014 "),LO=a("a"),hNo=o("MegatronBertForNextSentencePrediction"),pNo=o(" (MegatronBert model)"),_No=l(),_v=a("li"),bge=a("strong"),uNo=o("mobilebert"),bNo=o(" \u2014 "),xO=a("a"),vNo=o("MobileBertForNextSentencePrediction"),FNo=o(" (MobileBERT model)"),TNo=l(),uv=a("li"),vge=a("strong"),MNo=o("qdqbert"),ENo=o(" \u2014 "),$O=a("a"),CNo=o("QDQBertForNextSentencePrediction"),wNo=o(" (QDQBert model)"),ANo=l(),bv=a("p"),yNo=o("The model is set in evaluation mode by default using "),Fge=a("code"),LNo=o("model.eval()"),xNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),$No=o("model.train()"),kNo=l(),F(vv.$$.fragment),lNe=l(),Ui=a("h2"),Fv=a("a"),Mge=a("span"),F(PA.$$.fragment),SNo=l(),Ege=a("span"),RNo=o("AutoModelForTokenClassification"),iNe=l(),Io=a("div"),F(BA.$$.fragment),PNo=l(),Ji=a("p"),BNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kO=a("a"),INo=o("from_pretrained()"),qNo=o(" class method or the "),SO=a("a"),NNo=o("from_config()"),jNo=o(` class
method.`),DNo=l(),IA=a("p"),GNo=o("This class cannot be instantiated directly using "),Cge=a("code"),ONo=o("__init__()"),VNo=o(" (throws an error)."),XNo=l(),ft=a("div"),F(qA.$$.fragment),zNo=l(),wge=a("p"),WNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QNo=l(),Yi=a("p"),HNo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),UNo=o("not"),JNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=a("a"),YNo=o("from_pretrained()"),KNo=o(" to load the model weights."),ZNo=l(),F(Tv.$$.fragment),ejo=l(),ao=a("div"),F(NA.$$.fragment),ojo=l(),yge=a("p"),rjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tjo=l(),Ia=a("p"),ajo=o("The model class to instantiate is selected based on the "),Lge=a("code"),njo=o("model_type"),sjo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),ljo=o("pretrained_model_name_or_path"),ijo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(":"),fjo=l(),U=a("ul"),Mv=a("li"),kge=a("strong"),mjo=o("albert"),gjo=o(" \u2014 "),PO=a("a"),hjo=o("AlbertForTokenClassification"),pjo=o(" (ALBERT model)"),_jo=l(),Ev=a("li"),Sge=a("strong"),ujo=o("bert"),bjo=o(" \u2014 "),BO=a("a"),vjo=o("BertForTokenClassification"),Fjo=o(" (BERT model)"),Tjo=l(),Cv=a("li"),Rge=a("strong"),Mjo=o("big_bird"),Ejo=o(" \u2014 "),IO=a("a"),Cjo=o("BigBirdForTokenClassification"),wjo=o(" (BigBird model)"),Ajo=l(),wv=a("li"),Pge=a("strong"),yjo=o("camembert"),Ljo=o(" \u2014 "),qO=a("a"),xjo=o("CamembertForTokenClassification"),$jo=o(" (CamemBERT model)"),kjo=l(),Av=a("li"),Bge=a("strong"),Sjo=o("canine"),Rjo=o(" \u2014 "),NO=a("a"),Pjo=o("CanineForTokenClassification"),Bjo=o(" (Canine model)"),Ijo=l(),yv=a("li"),Ige=a("strong"),qjo=o("convbert"),Njo=o(" \u2014 "),jO=a("a"),jjo=o("ConvBertForTokenClassification"),Djo=o(" (ConvBERT model)"),Gjo=l(),Lv=a("li"),qge=a("strong"),Ojo=o("data2vec-text"),Vjo=o(" \u2014 "),DO=a("a"),Xjo=o("Data2VecTextForTokenClassification"),zjo=o(" (Data2VecText model)"),Wjo=l(),xv=a("li"),Nge=a("strong"),Qjo=o("deberta"),Hjo=o(" \u2014 "),GO=a("a"),Ujo=o("DebertaForTokenClassification"),Jjo=o(" (DeBERTa model)"),Yjo=l(),$v=a("li"),jge=a("strong"),Kjo=o("deberta-v2"),Zjo=o(" \u2014 "),OO=a("a"),eDo=o("DebertaV2ForTokenClassification"),oDo=o(" (DeBERTa-v2 model)"),rDo=l(),kv=a("li"),Dge=a("strong"),tDo=o("distilbert"),aDo=o(" \u2014 "),VO=a("a"),nDo=o("DistilBertForTokenClassification"),sDo=o(" (DistilBERT model)"),lDo=l(),Sv=a("li"),Gge=a("strong"),iDo=o("electra"),dDo=o(" \u2014 "),XO=a("a"),cDo=o("ElectraForTokenClassification"),fDo=o(" (ELECTRA model)"),mDo=l(),Rv=a("li"),Oge=a("strong"),gDo=o("flaubert"),hDo=o(" \u2014 "),zO=a("a"),pDo=o("FlaubertForTokenClassification"),_Do=o(" (FlauBERT model)"),uDo=l(),Pv=a("li"),Vge=a("strong"),bDo=o("fnet"),vDo=o(" \u2014 "),WO=a("a"),FDo=o("FNetForTokenClassification"),TDo=o(" (FNet model)"),MDo=l(),Bv=a("li"),Xge=a("strong"),EDo=o("funnel"),CDo=o(" \u2014 "),QO=a("a"),wDo=o("FunnelForTokenClassification"),ADo=o(" (Funnel Transformer model)"),yDo=l(),Iv=a("li"),zge=a("strong"),LDo=o("gpt2"),xDo=o(" \u2014 "),HO=a("a"),$Do=o("GPT2ForTokenClassification"),kDo=o(" (OpenAI GPT-2 model)"),SDo=l(),qv=a("li"),Wge=a("strong"),RDo=o("ibert"),PDo=o(" \u2014 "),UO=a("a"),BDo=o("IBertForTokenClassification"),IDo=o(" (I-BERT model)"),qDo=l(),Nv=a("li"),Qge=a("strong"),NDo=o("layoutlm"),jDo=o(" \u2014 "),JO=a("a"),DDo=o("LayoutLMForTokenClassification"),GDo=o(" (LayoutLM model)"),ODo=l(),jv=a("li"),Hge=a("strong"),VDo=o("layoutlmv2"),XDo=o(" \u2014 "),YO=a("a"),zDo=o("LayoutLMv2ForTokenClassification"),WDo=o(" (LayoutLMv2 model)"),QDo=l(),Dv=a("li"),Uge=a("strong"),HDo=o("longformer"),UDo=o(" \u2014 "),KO=a("a"),JDo=o("LongformerForTokenClassification"),YDo=o(" (Longformer model)"),KDo=l(),Gv=a("li"),Jge=a("strong"),ZDo=o("megatron-bert"),eGo=o(" \u2014 "),ZO=a("a"),oGo=o("MegatronBertForTokenClassification"),rGo=o(" (MegatronBert model)"),tGo=l(),Ov=a("li"),Yge=a("strong"),aGo=o("mobilebert"),nGo=o(" \u2014 "),eV=a("a"),sGo=o("MobileBertForTokenClassification"),lGo=o(" (MobileBERT model)"),iGo=l(),Vv=a("li"),Kge=a("strong"),dGo=o("mpnet"),cGo=o(" \u2014 "),oV=a("a"),fGo=o("MPNetForTokenClassification"),mGo=o(" (MPNet model)"),gGo=l(),Xv=a("li"),Zge=a("strong"),hGo=o("nystromformer"),pGo=o(" \u2014 "),rV=a("a"),_Go=o("NystromformerForTokenClassification"),uGo=o(" (Nystromformer model)"),bGo=l(),zv=a("li"),ehe=a("strong"),vGo=o("qdqbert"),FGo=o(" \u2014 "),tV=a("a"),TGo=o("QDQBertForTokenClassification"),MGo=o(" (QDQBert model)"),EGo=l(),Wv=a("li"),ohe=a("strong"),CGo=o("rembert"),wGo=o(" \u2014 "),aV=a("a"),AGo=o("RemBertForTokenClassification"),yGo=o(" (RemBERT model)"),LGo=l(),Qv=a("li"),rhe=a("strong"),xGo=o("roberta"),$Go=o(" \u2014 "),nV=a("a"),kGo=o("RobertaForTokenClassification"),SGo=o(" (RoBERTa model)"),RGo=l(),Hv=a("li"),the=a("strong"),PGo=o("roformer"),BGo=o(" \u2014 "),sV=a("a"),IGo=o("RoFormerForTokenClassification"),qGo=o(" (RoFormer model)"),NGo=l(),Uv=a("li"),ahe=a("strong"),jGo=o("squeezebert"),DGo=o(" \u2014 "),lV=a("a"),GGo=o("SqueezeBertForTokenClassification"),OGo=o(" (SqueezeBERT model)"),VGo=l(),Jv=a("li"),nhe=a("strong"),XGo=o("xlm"),zGo=o(" \u2014 "),iV=a("a"),WGo=o("XLMForTokenClassification"),QGo=o(" (XLM model)"),HGo=l(),Yv=a("li"),she=a("strong"),UGo=o("xlm-roberta"),JGo=o(" \u2014 "),dV=a("a"),YGo=o("XLMRobertaForTokenClassification"),KGo=o(" (XLM-RoBERTa model)"),ZGo=l(),Kv=a("li"),lhe=a("strong"),eOo=o("xlm-roberta-xl"),oOo=o(" \u2014 "),cV=a("a"),rOo=o("XLMRobertaXLForTokenClassification"),tOo=o(" (XLM-RoBERTa-XL model)"),aOo=l(),Zv=a("li"),ihe=a("strong"),nOo=o("xlnet"),sOo=o(" \u2014 "),fV=a("a"),lOo=o("XLNetForTokenClassification"),iOo=o(" (XLNet model)"),dOo=l(),eF=a("li"),dhe=a("strong"),cOo=o("yoso"),fOo=o(" \u2014 "),mV=a("a"),mOo=o("YosoForTokenClassification"),gOo=o(" (YOSO model)"),hOo=l(),oF=a("p"),pOo=o("The model is set in evaluation mode by default using "),che=a("code"),_Oo=o("model.eval()"),uOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),bOo=o("model.train()"),vOo=l(),F(rF.$$.fragment),dNe=l(),Ki=a("h2"),tF=a("a"),mhe=a("span"),F(jA.$$.fragment),FOo=l(),ghe=a("span"),TOo=o("AutoModelForQuestionAnswering"),cNe=l(),qo=a("div"),F(DA.$$.fragment),MOo=l(),Zi=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gV=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),hV=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),GA=a("p"),xOo=o("This class cannot be instantiated directly using "),hhe=a("code"),$Oo=o("__init__()"),kOo=o(" (throws an error)."),SOo=l(),mt=a("div"),F(OA.$$.fragment),ROo=l(),phe=a("p"),POo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BOo=l(),ed=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),F(aF.$$.fragment),OOo=l(),no=a("div"),F(VA.$$.fragment),VOo=l(),uhe=a("p"),XOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zOo=l(),qa=a("p"),WOo=o("The model class to instantiate is selected based on the "),bhe=a("code"),QOo=o("model_type"),HOo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),UOo=o("pretrained_model_name_or_path"),JOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(":"),ZOo=l(),V=a("ul"),nF=a("li"),The=a("strong"),eVo=o("albert"),oVo=o(" \u2014 "),_V=a("a"),rVo=o("AlbertForQuestionAnswering"),tVo=o(" (ALBERT model)"),aVo=l(),sF=a("li"),Mhe=a("strong"),nVo=o("bart"),sVo=o(" \u2014 "),uV=a("a"),lVo=o("BartForQuestionAnswering"),iVo=o(" (BART model)"),dVo=l(),lF=a("li"),Ehe=a("strong"),cVo=o("bert"),fVo=o(" \u2014 "),bV=a("a"),mVo=o("BertForQuestionAnswering"),gVo=o(" (BERT model)"),hVo=l(),iF=a("li"),Che=a("strong"),pVo=o("big_bird"),_Vo=o(" \u2014 "),vV=a("a"),uVo=o("BigBirdForQuestionAnswering"),bVo=o(" (BigBird model)"),vVo=l(),dF=a("li"),whe=a("strong"),FVo=o("bigbird_pegasus"),TVo=o(" \u2014 "),FV=a("a"),MVo=o("BigBirdPegasusForQuestionAnswering"),EVo=o(" (BigBirdPegasus model)"),CVo=l(),cF=a("li"),Ahe=a("strong"),wVo=o("camembert"),AVo=o(" \u2014 "),TV=a("a"),yVo=o("CamembertForQuestionAnswering"),LVo=o(" (CamemBERT model)"),xVo=l(),fF=a("li"),yhe=a("strong"),$Vo=o("canine"),kVo=o(" \u2014 "),MV=a("a"),SVo=o("CanineForQuestionAnswering"),RVo=o(" (Canine model)"),PVo=l(),mF=a("li"),Lhe=a("strong"),BVo=o("convbert"),IVo=o(" \u2014 "),EV=a("a"),qVo=o("ConvBertForQuestionAnswering"),NVo=o(" (ConvBERT model)"),jVo=l(),gF=a("li"),xhe=a("strong"),DVo=o("data2vec-text"),GVo=o(" \u2014 "),CV=a("a"),OVo=o("Data2VecTextForQuestionAnswering"),VVo=o(" (Data2VecText model)"),XVo=l(),hF=a("li"),$he=a("strong"),zVo=o("deberta"),WVo=o(" \u2014 "),wV=a("a"),QVo=o("DebertaForQuestionAnswering"),HVo=o(" (DeBERTa model)"),UVo=l(),pF=a("li"),khe=a("strong"),JVo=o("deberta-v2"),YVo=o(" \u2014 "),AV=a("a"),KVo=o("DebertaV2ForQuestionAnswering"),ZVo=o(" (DeBERTa-v2 model)"),eXo=l(),_F=a("li"),She=a("strong"),oXo=o("distilbert"),rXo=o(" \u2014 "),yV=a("a"),tXo=o("DistilBertForQuestionAnswering"),aXo=o(" (DistilBERT model)"),nXo=l(),uF=a("li"),Rhe=a("strong"),sXo=o("electra"),lXo=o(" \u2014 "),LV=a("a"),iXo=o("ElectraForQuestionAnswering"),dXo=o(" (ELECTRA model)"),cXo=l(),bF=a("li"),Phe=a("strong"),fXo=o("flaubert"),mXo=o(" \u2014 "),xV=a("a"),gXo=o("FlaubertForQuestionAnsweringSimple"),hXo=o(" (FlauBERT model)"),pXo=l(),vF=a("li"),Bhe=a("strong"),_Xo=o("fnet"),uXo=o(" \u2014 "),$V=a("a"),bXo=o("FNetForQuestionAnswering"),vXo=o(" (FNet model)"),FXo=l(),FF=a("li"),Ihe=a("strong"),TXo=o("funnel"),MXo=o(" \u2014 "),kV=a("a"),EXo=o("FunnelForQuestionAnswering"),CXo=o(" (Funnel Transformer model)"),wXo=l(),TF=a("li"),qhe=a("strong"),AXo=o("gptj"),yXo=o(" \u2014 "),SV=a("a"),LXo=o("GPTJForQuestionAnswering"),xXo=o(" (GPT-J model)"),$Xo=l(),MF=a("li"),Nhe=a("strong"),kXo=o("ibert"),SXo=o(" \u2014 "),RV=a("a"),RXo=o("IBertForQuestionAnswering"),PXo=o(" (I-BERT model)"),BXo=l(),EF=a("li"),jhe=a("strong"),IXo=o("layoutlmv2"),qXo=o(" \u2014 "),PV=a("a"),NXo=o("LayoutLMv2ForQuestionAnswering"),jXo=o(" (LayoutLMv2 model)"),DXo=l(),CF=a("li"),Dhe=a("strong"),GXo=o("led"),OXo=o(" \u2014 "),BV=a("a"),VXo=o("LEDForQuestionAnswering"),XXo=o(" (LED model)"),zXo=l(),wF=a("li"),Ghe=a("strong"),WXo=o("longformer"),QXo=o(" \u2014 "),IV=a("a"),HXo=o("LongformerForQuestionAnswering"),UXo=o(" (Longformer model)"),JXo=l(),AF=a("li"),Ohe=a("strong"),YXo=o("lxmert"),KXo=o(" \u2014 "),qV=a("a"),ZXo=o("LxmertForQuestionAnswering"),ezo=o(" (LXMERT model)"),ozo=l(),yF=a("li"),Vhe=a("strong"),rzo=o("mbart"),tzo=o(" \u2014 "),NV=a("a"),azo=o("MBartForQuestionAnswering"),nzo=o(" (mBART model)"),szo=l(),LF=a("li"),Xhe=a("strong"),lzo=o("megatron-bert"),izo=o(" \u2014 "),jV=a("a"),dzo=o("MegatronBertForQuestionAnswering"),czo=o(" (MegatronBert model)"),fzo=l(),xF=a("li"),zhe=a("strong"),mzo=o("mobilebert"),gzo=o(" \u2014 "),DV=a("a"),hzo=o("MobileBertForQuestionAnswering"),pzo=o(" (MobileBERT model)"),_zo=l(),$F=a("li"),Whe=a("strong"),uzo=o("mpnet"),bzo=o(" \u2014 "),GV=a("a"),vzo=o("MPNetForQuestionAnswering"),Fzo=o(" (MPNet model)"),Tzo=l(),kF=a("li"),Qhe=a("strong"),Mzo=o("nystromformer"),Ezo=o(" \u2014 "),OV=a("a"),Czo=o("NystromformerForQuestionAnswering"),wzo=o(" (Nystromformer model)"),Azo=l(),SF=a("li"),Hhe=a("strong"),yzo=o("qdqbert"),Lzo=o(" \u2014 "),VV=a("a"),xzo=o("QDQBertForQuestionAnswering"),$zo=o(" (QDQBert model)"),kzo=l(),RF=a("li"),Uhe=a("strong"),Szo=o("reformer"),Rzo=o(" \u2014 "),XV=a("a"),Pzo=o("ReformerForQuestionAnswering"),Bzo=o(" (Reformer model)"),Izo=l(),PF=a("li"),Jhe=a("strong"),qzo=o("rembert"),Nzo=o(" \u2014 "),zV=a("a"),jzo=o("RemBertForQuestionAnswering"),Dzo=o(" (RemBERT model)"),Gzo=l(),BF=a("li"),Yhe=a("strong"),Ozo=o("roberta"),Vzo=o(" \u2014 "),WV=a("a"),Xzo=o("RobertaForQuestionAnswering"),zzo=o(" (RoBERTa model)"),Wzo=l(),IF=a("li"),Khe=a("strong"),Qzo=o("roformer"),Hzo=o(" \u2014 "),QV=a("a"),Uzo=o("RoFormerForQuestionAnswering"),Jzo=o(" (RoFormer model)"),Yzo=l(),qF=a("li"),Zhe=a("strong"),Kzo=o("splinter"),Zzo=o(" \u2014 "),HV=a("a"),eWo=o("SplinterForQuestionAnswering"),oWo=o(" (Splinter model)"),rWo=l(),NF=a("li"),epe=a("strong"),tWo=o("squeezebert"),aWo=o(" \u2014 "),UV=a("a"),nWo=o("SqueezeBertForQuestionAnswering"),sWo=o(" (SqueezeBERT model)"),lWo=l(),jF=a("li"),ope=a("strong"),iWo=o("xlm"),dWo=o(" \u2014 "),JV=a("a"),cWo=o("XLMForQuestionAnsweringSimple"),fWo=o(" (XLM model)"),mWo=l(),DF=a("li"),rpe=a("strong"),gWo=o("xlm-roberta"),hWo=o(" \u2014 "),YV=a("a"),pWo=o("XLMRobertaForQuestionAnswering"),_Wo=o(" (XLM-RoBERTa model)"),uWo=l(),GF=a("li"),tpe=a("strong"),bWo=o("xlm-roberta-xl"),vWo=o(" \u2014 "),KV=a("a"),FWo=o("XLMRobertaXLForQuestionAnswering"),TWo=o(" (XLM-RoBERTa-XL model)"),MWo=l(),OF=a("li"),ape=a("strong"),EWo=o("xlnet"),CWo=o(" \u2014 "),ZV=a("a"),wWo=o("XLNetForQuestionAnsweringSimple"),AWo=o(" (XLNet model)"),yWo=l(),VF=a("li"),npe=a("strong"),LWo=o("yoso"),xWo=o(" \u2014 "),eX=a("a"),$Wo=o("YosoForQuestionAnswering"),kWo=o(" (YOSO model)"),SWo=l(),XF=a("p"),RWo=o("The model is set in evaluation mode by default using "),spe=a("code"),PWo=o("model.eval()"),BWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),IWo=o("model.train()"),qWo=l(),F(zF.$$.fragment),fNe=l(),od=a("h2"),WF=a("a"),ipe=a("span"),F(XA.$$.fragment),NWo=l(),dpe=a("span"),jWo=o("AutoModelForTableQuestionAnswering"),mNe=l(),No=a("div"),F(zA.$$.fragment),DWo=l(),rd=a("p"),GWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oX=a("a"),OWo=o("from_pretrained()"),VWo=o(" class method or the "),rX=a("a"),XWo=o("from_config()"),zWo=o(` class
method.`),WWo=l(),WA=a("p"),QWo=o("This class cannot be instantiated directly using "),cpe=a("code"),HWo=o("__init__()"),UWo=o(" (throws an error)."),JWo=l(),gt=a("div"),F(QA.$$.fragment),YWo=l(),fpe=a("p"),KWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZWo=l(),td=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(QF.$$.fragment),sQo=l(),so=a("div"),F(HA.$$.fragment),lQo=l(),gpe=a("p"),iQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dQo=l(),Na=a("p"),cQo=o("The model class to instantiate is selected based on the "),hpe=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),pQo=o("pretrained_model_name_or_path"),_Qo=o(":"),uQo=l(),upe=a("ul"),HF=a("li"),bpe=a("strong"),bQo=o("tapas"),vQo=o(" \u2014 "),aX=a("a"),FQo=o("TapasForQuestionAnswering"),TQo=o(" (TAPAS model)"),MQo=l(),UF=a("p"),EQo=o("The model is set in evaluation mode by default using "),vpe=a("code"),CQo=o("model.eval()"),wQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),AQo=o("model.train()"),yQo=l(),F(JF.$$.fragment),gNe=l(),ad=a("h2"),YF=a("a"),Tpe=a("span"),F(UA.$$.fragment),LQo=l(),Mpe=a("span"),xQo=o("AutoModelForImageClassification"),hNe=l(),jo=a("div"),F(JA.$$.fragment),$Qo=l(),nd=a("p"),kQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nX=a("a"),SQo=o("from_pretrained()"),RQo=o(" class method or the "),sX=a("a"),PQo=o("from_config()"),BQo=o(` class
method.`),IQo=l(),YA=a("p"),qQo=o("This class cannot be instantiated directly using "),Epe=a("code"),NQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),ht=a("div"),F(KA.$$.fragment),GQo=l(),Cpe=a("p"),OQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VQo=l(),sd=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),zQo=o("not"),WQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),QQo=o("from_pretrained()"),HQo=o(" to load the model weights."),UQo=l(),F(KF.$$.fragment),JQo=l(),lo=a("div"),F(ZA.$$.fragment),YQo=l(),Ape=a("p"),KQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZQo=l(),ja=a("p"),eHo=o("The model class to instantiate is selected based on the "),ype=a("code"),oHo=o("model_type"),rHo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),tHo=o("pretrained_model_name_or_path"),aHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),nHo=o("pretrained_model_name_or_path"),sHo=o(":"),lHo=l(),Fe=a("ul"),ZF=a("li"),$pe=a("strong"),iHo=o("beit"),dHo=o(" \u2014 "),iX=a("a"),cHo=o("BeitForImageClassification"),fHo=o(" (BEiT model)"),mHo=l(),e6=a("li"),kpe=a("strong"),gHo=o("convnext"),hHo=o(" \u2014 "),dX=a("a"),pHo=o("ConvNextForImageClassification"),_Ho=o(" (ConvNext model)"),uHo=l(),o6=a("li"),Spe=a("strong"),bHo=o("cvt"),vHo=o(" \u2014 "),cX=a("a"),FHo=o("CvtForImageClassification"),THo=o(" (CvT model)"),MHo=l(),r6=a("li"),Rpe=a("strong"),EHo=o("data2vec-vision"),CHo=o(" \u2014 "),fX=a("a"),wHo=o("Data2VecVisionForImageClassification"),AHo=o(" (Data2VecVision model)"),yHo=l(),Bs=a("li"),Ppe=a("strong"),LHo=o("deit"),xHo=o(" \u2014 "),mX=a("a"),$Ho=o("DeiTForImageClassification"),kHo=o(" or "),gX=a("a"),SHo=o("DeiTForImageClassificationWithTeacher"),RHo=o(" (DeiT model)"),PHo=l(),t6=a("li"),Bpe=a("strong"),BHo=o("imagegpt"),IHo=o(" \u2014 "),hX=a("a"),qHo=o("ImageGPTForImageClassification"),NHo=o(" (ImageGPT model)"),jHo=l(),pt=a("li"),Ipe=a("strong"),DHo=o("perceiver"),GHo=o(" \u2014 "),pX=a("a"),OHo=o("PerceiverForImageClassificationLearned"),VHo=o(" or "),_X=a("a"),XHo=o("PerceiverForImageClassificationFourier"),zHo=o(" or "),uX=a("a"),WHo=o("PerceiverForImageClassificationConvProcessing"),QHo=o(" (Perceiver model)"),HHo=l(),a6=a("li"),qpe=a("strong"),UHo=o("poolformer"),JHo=o(" \u2014 "),bX=a("a"),YHo=o("PoolFormerForImageClassification"),KHo=o(" (PoolFormer model)"),ZHo=l(),n6=a("li"),Npe=a("strong"),eUo=o("regnet"),oUo=o(" \u2014 "),vX=a("a"),rUo=o("RegNetForImageClassification"),tUo=o(" (RegNet model)"),aUo=l(),s6=a("li"),jpe=a("strong"),nUo=o("resnet"),sUo=o(" \u2014 "),FX=a("a"),lUo=o("ResNetForImageClassification"),iUo=o(" (ResNet model)"),dUo=l(),l6=a("li"),Dpe=a("strong"),cUo=o("segformer"),fUo=o(" \u2014 "),TX=a("a"),mUo=o("SegformerForImageClassification"),gUo=o(" (SegFormer model)"),hUo=l(),i6=a("li"),Gpe=a("strong"),pUo=o("swin"),_Uo=o(" \u2014 "),MX=a("a"),uUo=o("SwinForImageClassification"),bUo=o(" (Swin model)"),vUo=l(),d6=a("li"),Ope=a("strong"),FUo=o("van"),TUo=o(" \u2014 "),EX=a("a"),MUo=o("VanForImageClassification"),EUo=o(" (VAN model)"),CUo=l(),c6=a("li"),Vpe=a("strong"),wUo=o("vit"),AUo=o(" \u2014 "),CX=a("a"),yUo=o("ViTForImageClassification"),LUo=o(" (ViT model)"),xUo=l(),f6=a("p"),$Uo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),kUo=o("model.eval()"),SUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),RUo=o("model.train()"),PUo=l(),F(m6.$$.fragment),pNe=l(),ld=a("h2"),g6=a("a"),Wpe=a("span"),F(ey.$$.fragment),BUo=l(),Qpe=a("span"),IUo=o("AutoModelForVision2Seq"),_Ne=l(),Do=a("div"),F(oy.$$.fragment),qUo=l(),id=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wX=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),AX=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),ry=a("p"),XUo=o("This class cannot be instantiated directly using "),Hpe=a("code"),zUo=o("__init__()"),WUo=o(" (throws an error)."),QUo=l(),_t=a("div"),F(ty.$$.fragment),HUo=l(),Upe=a("p"),UUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JUo=l(),dd=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),F(h6.$$.fragment),tJo=l(),io=a("div"),F(ay.$$.fragment),aJo=l(),Ype=a("p"),nJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sJo=l(),Da=a("p"),lJo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),o_e=a("ul"),p6=a("li"),r_e=a("strong"),pJo=o("vision-encoder-decoder"),_Jo=o(" \u2014 "),LX=a("a"),uJo=o("VisionEncoderDecoderModel"),bJo=o(" (Vision Encoder decoder model)"),vJo=l(),_6=a("p"),FJo=o("The model is set in evaluation mode by default using "),t_e=a("code"),TJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),EJo=o("model.train()"),CJo=l(),F(u6.$$.fragment),uNe=l(),cd=a("h2"),b6=a("a"),n_e=a("span"),F(ny.$$.fragment),wJo=l(),s_e=a("span"),AJo=o("AutoModelForAudioClassification"),bNe=l(),Go=a("div"),F(sy.$$.fragment),yJo=l(),fd=a("p"),LJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xX=a("a"),xJo=o("from_pretrained()"),$Jo=o(" class method or the "),$X=a("a"),kJo=o("from_config()"),SJo=o(` class
method.`),RJo=l(),ly=a("p"),PJo=o("This class cannot be instantiated directly using "),l_e=a("code"),BJo=o("__init__()"),IJo=o(" (throws an error)."),qJo=l(),ut=a("div"),F(iy.$$.fragment),NJo=l(),i_e=a("p"),jJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),DJo=l(),md=a("p"),GJo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),OJo=o("not"),VJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),XJo=o("from_pretrained()"),zJo=o(" to load the model weights."),WJo=l(),F(v6.$$.fragment),QJo=l(),co=a("div"),F(dy.$$.fragment),HJo=l(),c_e=a("p"),UJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),JJo=l(),Ga=a("p"),YJo=o("The model class to instantiate is selected based on the "),f_e=a("code"),KJo=o("model_type"),ZJo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),rYo=o("pretrained_model_name_or_path"),tYo=o(":"),aYo=l(),Se=a("ul"),F6=a("li"),h_e=a("strong"),nYo=o("data2vec-audio"),sYo=o(" \u2014 "),SX=a("a"),lYo=o("Data2VecAudioForSequenceClassification"),iYo=o(" (Data2VecAudio model)"),dYo=l(),T6=a("li"),p_e=a("strong"),cYo=o("hubert"),fYo=o(" \u2014 "),RX=a("a"),mYo=o("HubertForSequenceClassification"),gYo=o(" (Hubert model)"),hYo=l(),M6=a("li"),__e=a("strong"),pYo=o("sew"),_Yo=o(" \u2014 "),PX=a("a"),uYo=o("SEWForSequenceClassification"),bYo=o(" (SEW model)"),vYo=l(),E6=a("li"),u_e=a("strong"),FYo=o("sew-d"),TYo=o(" \u2014 "),BX=a("a"),MYo=o("SEWDForSequenceClassification"),EYo=o(" (SEW-D model)"),CYo=l(),C6=a("li"),b_e=a("strong"),wYo=o("unispeech"),AYo=o(" \u2014 "),IX=a("a"),yYo=o("UniSpeechForSequenceClassification"),LYo=o(" (UniSpeech model)"),xYo=l(),w6=a("li"),v_e=a("strong"),$Yo=o("unispeech-sat"),kYo=o(" \u2014 "),qX=a("a"),SYo=o("UniSpeechSatForSequenceClassification"),RYo=o(" (UniSpeechSat model)"),PYo=l(),A6=a("li"),F_e=a("strong"),BYo=o("wav2vec2"),IYo=o(" \u2014 "),NX=a("a"),qYo=o("Wav2Vec2ForSequenceClassification"),NYo=o(" (Wav2Vec2 model)"),jYo=l(),y6=a("li"),T_e=a("strong"),DYo=o("wav2vec2-conformer"),GYo=o(" \u2014 "),jX=a("a"),OYo=o("Wav2Vec2ConformerForSequenceClassification"),VYo=o(" (Wav2Vec2-Conformer model)"),XYo=l(),L6=a("li"),M_e=a("strong"),zYo=o("wavlm"),WYo=o(" \u2014 "),DX=a("a"),QYo=o("WavLMForSequenceClassification"),HYo=o(" (WavLM model)"),UYo=l(),x6=a("p"),JYo=o("The model is set in evaluation mode by default using "),E_e=a("code"),YYo=o("model.eval()"),KYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),ZYo=o("model.train()"),eKo=l(),F($6.$$.fragment),vNe=l(),gd=a("h2"),k6=a("a"),w_e=a("span"),F(cy.$$.fragment),oKo=l(),A_e=a("span"),rKo=o("AutoModelForAudioFrameClassification"),FNe=l(),Oo=a("div"),F(fy.$$.fragment),tKo=l(),hd=a("p"),aKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),GX=a("a"),nKo=o("from_pretrained()"),sKo=o(" class method or the "),OX=a("a"),lKo=o("from_config()"),iKo=o(` class
method.`),dKo=l(),my=a("p"),cKo=o("This class cannot be instantiated directly using "),y_e=a("code"),fKo=o("__init__()"),mKo=o(" (throws an error)."),gKo=l(),bt=a("div"),F(gy.$$.fragment),hKo=l(),L_e=a("p"),pKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Ko=l(),pd=a("p"),uKo=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),bKo=o("not"),vKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),FKo=o("from_pretrained()"),TKo=o(" to load the model weights."),MKo=l(),F(S6.$$.fragment),EKo=l(),fo=a("div"),F(hy.$$.fragment),CKo=l(),$_e=a("p"),wKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),AKo=l(),Oa=a("p"),yKo=o("The model class to instantiate is selected based on the "),k_e=a("code"),LKo=o("model_type"),xKo=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),$Ko=o("pretrained_model_name_or_path"),kKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),SKo=o("pretrained_model_name_or_path"),RKo=o(":"),PKo=l(),Kr=a("ul"),R6=a("li"),P_e=a("strong"),BKo=o("data2vec-audio"),IKo=o(" \u2014 "),XX=a("a"),qKo=o("Data2VecAudioForAudioFrameClassification"),NKo=o(" (Data2VecAudio model)"),jKo=l(),P6=a("li"),B_e=a("strong"),DKo=o("unispeech-sat"),GKo=o(" \u2014 "),zX=a("a"),OKo=o("UniSpeechSatForAudioFrameClassification"),VKo=o(" (UniSpeechSat model)"),XKo=l(),B6=a("li"),I_e=a("strong"),zKo=o("wav2vec2"),WKo=o(" \u2014 "),WX=a("a"),QKo=o("Wav2Vec2ForAudioFrameClassification"),HKo=o(" (Wav2Vec2 model)"),UKo=l(),I6=a("li"),q_e=a("strong"),JKo=o("wav2vec2-conformer"),YKo=o(" \u2014 "),QX=a("a"),KKo=o("Wav2Vec2ConformerForAudioFrameClassification"),ZKo=o(" (Wav2Vec2-Conformer model)"),eZo=l(),q6=a("li"),N_e=a("strong"),oZo=o("wavlm"),rZo=o(" \u2014 "),HX=a("a"),tZo=o("WavLMForAudioFrameClassification"),aZo=o(" (WavLM model)"),nZo=l(),N6=a("p"),sZo=o("The model is set in evaluation mode by default using "),j_e=a("code"),lZo=o("model.eval()"),iZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),dZo=o("model.train()"),cZo=l(),F(j6.$$.fragment),TNe=l(),_d=a("h2"),D6=a("a"),G_e=a("span"),F(py.$$.fragment),fZo=l(),O_e=a("span"),mZo=o("AutoModelForCTC"),MNe=l(),Vo=a("div"),F(_y.$$.fragment),gZo=l(),ud=a("p"),hZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),UX=a("a"),pZo=o("from_pretrained()"),_Zo=o(" class method or the "),JX=a("a"),uZo=o("from_config()"),bZo=o(` class
method.`),vZo=l(),uy=a("p"),FZo=o("This class cannot be instantiated directly using "),V_e=a("code"),TZo=o("__init__()"),MZo=o(" (throws an error)."),EZo=l(),vt=a("div"),F(by.$$.fragment),CZo=l(),X_e=a("p"),wZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),AZo=l(),bd=a("p"),yZo=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),LZo=o("not"),xZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),$Zo=o("from_pretrained()"),kZo=o(" to load the model weights."),SZo=l(),F(G6.$$.fragment),RZo=l(),mo=a("div"),F(vy.$$.fragment),PZo=l(),W_e=a("p"),BZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),IZo=l(),Va=a("p"),qZo=o("The model class to instantiate is selected based on the "),Q_e=a("code"),NZo=o("model_type"),jZo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),DZo=o("pretrained_model_name_or_path"),GZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(":"),XZo=l(),Re=a("ul"),O6=a("li"),J_e=a("strong"),zZo=o("data2vec-audio"),WZo=o(" \u2014 "),KX=a("a"),QZo=o("Data2VecAudioForCTC"),HZo=o(" (Data2VecAudio model)"),UZo=l(),V6=a("li"),Y_e=a("strong"),JZo=o("hubert"),YZo=o(" \u2014 "),ZX=a("a"),KZo=o("HubertForCTC"),ZZo=o(" (Hubert model)"),eer=l(),X6=a("li"),K_e=a("strong"),oer=o("sew"),rer=o(" \u2014 "),ez=a("a"),ter=o("SEWForCTC"),aer=o(" (SEW model)"),ner=l(),z6=a("li"),Z_e=a("strong"),ser=o("sew-d"),ler=o(" \u2014 "),oz=a("a"),ier=o("SEWDForCTC"),der=o(" (SEW-D model)"),cer=l(),W6=a("li"),eue=a("strong"),fer=o("unispeech"),mer=o(" \u2014 "),rz=a("a"),ger=o("UniSpeechForCTC"),her=o(" (UniSpeech model)"),per=l(),Q6=a("li"),oue=a("strong"),_er=o("unispeech-sat"),uer=o(" \u2014 "),tz=a("a"),ber=o("UniSpeechSatForCTC"),ver=o(" (UniSpeechSat model)"),Fer=l(),H6=a("li"),rue=a("strong"),Ter=o("wav2vec2"),Mer=o(" \u2014 "),az=a("a"),Eer=o("Wav2Vec2ForCTC"),Cer=o(" (Wav2Vec2 model)"),wer=l(),U6=a("li"),tue=a("strong"),Aer=o("wav2vec2-conformer"),yer=o(" \u2014 "),nz=a("a"),Ler=o("Wav2Vec2ConformerForCTC"),xer=o(" (Wav2Vec2-Conformer model)"),$er=l(),J6=a("li"),aue=a("strong"),ker=o("wavlm"),Ser=o(" \u2014 "),sz=a("a"),Rer=o("WavLMForCTC"),Per=o(" (WavLM model)"),Ber=l(),Y6=a("p"),Ier=o("The model is set in evaluation mode by default using "),nue=a("code"),qer=o("model.eval()"),Ner=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),jer=o("model.train()"),Der=l(),F(K6.$$.fragment),ENe=l(),vd=a("h2"),Z6=a("a"),lue=a("span"),F(Fy.$$.fragment),Ger=l(),iue=a("span"),Oer=o("AutoModelForSpeechSeq2Seq"),CNe=l(),Xo=a("div"),F(Ty.$$.fragment),Ver=l(),Fd=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lz=a("a"),zer=o("from_pretrained()"),Wer=o(" class method or the "),iz=a("a"),Qer=o("from_config()"),Her=o(` class
method.`),Uer=l(),My=a("p"),Jer=o("This class cannot be instantiated directly using "),due=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),Ft=a("div"),F(Ey.$$.fragment),eor=l(),cue=a("p"),oor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ror=l(),Td=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(eT.$$.fragment),dor=l(),go=a("div"),F(Cy.$$.fragment),cor=l(),mue=a("p"),mor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gor=l(),Xa=a("p"),hor=o("The model class to instantiate is selected based on the "),gue=a("code"),por=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),wy=a("ul"),oT=a("li"),_ue=a("strong"),Mor=o("speech-encoder-decoder"),Eor=o(" \u2014 "),cz=a("a"),Cor=o("SpeechEncoderDecoderModel"),wor=o(" (Speech Encoder decoder model)"),Aor=l(),rT=a("li"),uue=a("strong"),yor=o("speech_to_text"),Lor=o(" \u2014 "),fz=a("a"),xor=o("Speech2TextForConditionalGeneration"),$or=o(" (Speech2Text model)"),kor=l(),tT=a("p"),Sor=o("The model is set in evaluation mode by default using "),bue=a("code"),Ror=o("model.eval()"),Por=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),Bor=o("model.train()"),Ior=l(),F(aT.$$.fragment),wNe=l(),Md=a("h2"),nT=a("a"),Fue=a("span"),F(Ay.$$.fragment),qor=l(),Tue=a("span"),Nor=o("AutoModelForAudioXVector"),ANe=l(),zo=a("div"),F(yy.$$.fragment),jor=l(),Ed=a("p"),Dor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mz=a("a"),Gor=o("from_pretrained()"),Oor=o(" class method or the "),gz=a("a"),Vor=o("from_config()"),Xor=o(` class
method.`),zor=l(),Ly=a("p"),Wor=o("This class cannot be instantiated directly using "),Mue=a("code"),Qor=o("__init__()"),Hor=o(" (throws an error)."),Uor=l(),Tt=a("div"),F(xy.$$.fragment),Jor=l(),Eue=a("p"),Yor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Kor=l(),Cd=a("p"),Zor=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),err=o("not"),orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),rrr=o("from_pretrained()"),trr=o(" to load the model weights."),arr=l(),F(sT.$$.fragment),nrr=l(),ho=a("div"),F($y.$$.fragment),srr=l(),wue=a("p"),lrr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),irr=l(),za=a("p"),drr=o("The model class to instantiate is selected based on the "),Aue=a("code"),crr=o("model_type"),frr=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),hrr=o("pretrained_model_name_or_path"),prr=o(":"),_rr=l(),Zr=a("ul"),lT=a("li"),xue=a("strong"),urr=o("data2vec-audio"),brr=o(" \u2014 "),pz=a("a"),vrr=o("Data2VecAudioForXVector"),Frr=o(" (Data2VecAudio model)"),Trr=l(),iT=a("li"),$ue=a("strong"),Mrr=o("unispeech-sat"),Err=o(" \u2014 "),_z=a("a"),Crr=o("UniSpeechSatForXVector"),wrr=o(" (UniSpeechSat model)"),Arr=l(),dT=a("li"),kue=a("strong"),yrr=o("wav2vec2"),Lrr=o(" \u2014 "),uz=a("a"),xrr=o("Wav2Vec2ForXVector"),$rr=o(" (Wav2Vec2 model)"),krr=l(),cT=a("li"),Sue=a("strong"),Srr=o("wav2vec2-conformer"),Rrr=o(" \u2014 "),bz=a("a"),Prr=o("Wav2Vec2ConformerForXVector"),Brr=o(" (Wav2Vec2-Conformer model)"),Irr=l(),fT=a("li"),Rue=a("strong"),qrr=o("wavlm"),Nrr=o(" \u2014 "),vz=a("a"),jrr=o("WavLMForXVector"),Drr=o(" (WavLM model)"),Grr=l(),mT=a("p"),Orr=o("The model is set in evaluation mode by default using "),Pue=a("code"),Vrr=o("model.eval()"),Xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),zrr=o("model.train()"),Wrr=l(),F(gT.$$.fragment),yNe=l(),wd=a("h2"),hT=a("a"),Iue=a("span"),F(ky.$$.fragment),Qrr=l(),que=a("span"),Hrr=o("AutoModelForMaskedImageModeling"),LNe=l(),Wo=a("div"),F(Sy.$$.fragment),Urr=l(),Ad=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Fz=a("a"),Yrr=o("from_pretrained()"),Krr=o(" class method or the "),Tz=a("a"),Zrr=o("from_config()"),etr=o(` class
method.`),otr=l(),Ry=a("p"),rtr=o("This class cannot be instantiated directly using "),Nue=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),Mt=a("div"),F(Py.$$.fragment),str=l(),jue=a("p"),ltr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),itr=l(),yd=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),mtr=o("from_pretrained()"),gtr=o(" to load the model weights."),htr=l(),F(pT.$$.fragment),ptr=l(),po=a("div"),F(By.$$.fragment),_tr=l(),Gue=a("p"),utr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),btr=l(),Wa=a("p"),vtr=o("The model class to instantiate is selected based on the "),Oue=a("code"),Ftr=o("model_type"),Ttr=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(":"),Atr=l(),Ld=a("ul"),_T=a("li"),zue=a("strong"),ytr=o("deit"),Ltr=o(" \u2014 "),Ez=a("a"),xtr=o("DeiTForMaskedImageModeling"),$tr=o(" (DeiT model)"),ktr=l(),uT=a("li"),Wue=a("strong"),Str=o("swin"),Rtr=o(" \u2014 "),Cz=a("a"),Ptr=o("SwinForMaskedImageModeling"),Btr=o(" (Swin model)"),Itr=l(),bT=a("li"),Que=a("strong"),qtr=o("vit"),Ntr=o(" \u2014 "),wz=a("a"),jtr=o("ViTForMaskedImageModeling"),Dtr=o(" (ViT model)"),Gtr=l(),vT=a("p"),Otr=o("The model is set in evaluation mode by default using "),Hue=a("code"),Vtr=o("model.eval()"),Xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),ztr=o("model.train()"),Wtr=l(),F(FT.$$.fragment),xNe=l(),xd=a("h2"),TT=a("a"),Jue=a("span"),F(Iy.$$.fragment),Qtr=l(),Yue=a("span"),Htr=o("AutoModelForObjectDetection"),$Ne=l(),Qo=a("div"),F(qy.$$.fragment),Utr=l(),$d=a("p"),Jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Az=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" class method or the "),yz=a("a"),Ztr=o("from_config()"),ear=o(` class
method.`),oar=l(),Ny=a("p"),rar=o("This class cannot be instantiated directly using "),Kue=a("code"),tar=o("__init__()"),aar=o(" (throws an error)."),nar=l(),Et=a("div"),F(jy.$$.fragment),sar=l(),Zue=a("p"),lar=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iar=l(),kd=a("p"),dar=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),car=o("not"),far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),mar=o("from_pretrained()"),gar=o(" to load the model weights."),har=l(),F(MT.$$.fragment),par=l(),_o=a("div"),F(Dy.$$.fragment),_ar=l(),o2e=a("p"),uar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bar=l(),Qa=a("p"),Far=o("The model class to instantiate is selected based on the "),r2e=a("code"),Tar=o("model_type"),Mar=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(":"),yar=l(),Gy=a("ul"),ET=a("li"),n2e=a("strong"),Lar=o("detr"),xar=o(" \u2014 "),xz=a("a"),$ar=o("DetrForObjectDetection"),kar=o(" (DETR model)"),Sar=l(),CT=a("li"),s2e=a("strong"),Rar=o("yolos"),Par=o(" \u2014 "),$z=a("a"),Bar=o("YolosForObjectDetection"),Iar=o(" (YOLOS model)"),qar=l(),wT=a("p"),Nar=o("The model is set in evaluation mode by default using "),l2e=a("code"),jar=o("model.eval()"),Dar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),Gar=o("model.train()"),Oar=l(),F(AT.$$.fragment),kNe=l(),Sd=a("h2"),yT=a("a"),d2e=a("span"),F(Oy.$$.fragment),Var=l(),c2e=a("span"),Xar=o("AutoModelForImageSegmentation"),SNe=l(),Ho=a("div"),F(Vy.$$.fragment),zar=l(),Rd=a("p"),War=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kz=a("a"),Qar=o("from_pretrained()"),Har=o(" class method or the "),Sz=a("a"),Uar=o("from_config()"),Jar=o(` class
method.`),Yar=l(),Xy=a("p"),Kar=o("This class cannot be instantiated directly using "),f2e=a("code"),Zar=o("__init__()"),enr=o(" (throws an error)."),onr=l(),Ct=a("div"),F(zy.$$.fragment),rnr=l(),m2e=a("p"),tnr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),anr=l(),Pd=a("p"),nnr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),snr=o("not"),lnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),inr=o("from_pretrained()"),dnr=o(" to load the model weights."),cnr=l(),F(LT.$$.fragment),fnr=l(),uo=a("div"),F(Wy.$$.fragment),mnr=l(),h2e=a("p"),gnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hnr=l(),Ha=a("p"),pnr=o("The model class to instantiate is selected based on the "),p2e=a("code"),_nr=o("model_type"),unr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),bnr=o("pretrained_model_name_or_path"),vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(":"),Mnr=l(),b2e=a("ul"),xT=a("li"),v2e=a("strong"),Enr=o("detr"),Cnr=o(" \u2014 "),Pz=a("a"),wnr=o("DetrForSegmentation"),Anr=o(" (DETR model)"),ynr=l(),$T=a("p"),Lnr=o("The model is set in evaluation mode by default using "),F2e=a("code"),xnr=o("model.eval()"),$nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),knr=o("model.train()"),Snr=l(),F(kT.$$.fragment),RNe=l(),Bd=a("h2"),ST=a("a"),M2e=a("span"),F(Qy.$$.fragment),Rnr=l(),E2e=a("span"),Pnr=o("AutoModelForSemanticSegmentation"),PNe=l(),Uo=a("div"),F(Hy.$$.fragment),Bnr=l(),Id=a("p"),Inr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Bz=a("a"),qnr=o("from_pretrained()"),Nnr=o(" class method or the "),Iz=a("a"),jnr=o("from_config()"),Dnr=o(` class
method.`),Gnr=l(),Uy=a("p"),Onr=o("This class cannot be instantiated directly using "),C2e=a("code"),Vnr=o("__init__()"),Xnr=o(" (throws an error)."),znr=l(),wt=a("div"),F(Jy.$$.fragment),Wnr=l(),w2e=a("p"),Qnr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hnr=l(),qd=a("p"),Unr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),Jnr=o("not"),Ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Knr=o("from_pretrained()"),Znr=o(" to load the model weights."),esr=l(),F(RT.$$.fragment),osr=l(),bo=a("div"),F(Yy.$$.fragment),rsr=l(),y2e=a("p"),tsr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),asr=l(),Ua=a("p"),nsr=o("The model class to instantiate is selected based on the "),L2e=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),Ja=a("ul"),PT=a("li"),k2e=a("strong"),gsr=o("beit"),hsr=o(" \u2014 "),Nz=a("a"),psr=o("BeitForSemanticSegmentation"),_sr=o(" (BEiT model)"),usr=l(),BT=a("li"),S2e=a("strong"),bsr=o("data2vec-vision"),vsr=o(" \u2014 "),jz=a("a"),Fsr=o("Data2VecVisionForSemanticSegmentation"),Tsr=o(" (Data2VecVision model)"),Msr=l(),IT=a("li"),R2e=a("strong"),Esr=o("dpt"),Csr=o(" \u2014 "),Dz=a("a"),wsr=o("DPTForSemanticSegmentation"),Asr=o(" (DPT model)"),ysr=l(),qT=a("li"),P2e=a("strong"),Lsr=o("segformer"),xsr=o(" \u2014 "),Gz=a("a"),$sr=o("SegformerForSemanticSegmentation"),ksr=o(" (SegFormer model)"),Ssr=l(),NT=a("p"),Rsr=o("The model is set in evaluation mode by default using "),B2e=a("code"),Psr=o("model.eval()"),Bsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),Isr=o("model.train()"),qsr=l(),F(jT.$$.fragment),BNe=l(),Nd=a("h2"),DT=a("a"),q2e=a("span"),F(Ky.$$.fragment),Nsr=l(),N2e=a("span"),jsr=o("AutoModelForInstanceSegmentation"),INe=l(),Jo=a("div"),F(Zy.$$.fragment),Dsr=l(),jd=a("p"),Gsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Oz=a("a"),Osr=o("from_pretrained()"),Vsr=o(" class method or the "),Vz=a("a"),Xsr=o("from_config()"),zsr=o(` class
method.`),Wsr=l(),eL=a("p"),Qsr=o("This class cannot be instantiated directly using "),j2e=a("code"),Hsr=o("__init__()"),Usr=o(" (throws an error)."),Jsr=l(),At=a("div"),F(oL.$$.fragment),Ysr=l(),D2e=a("p"),Ksr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zsr=l(),Dd=a("p"),elr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),olr=o("not"),rlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),tlr=o("from_pretrained()"),alr=o(" to load the model weights."),nlr=l(),F(GT.$$.fragment),slr=l(),vo=a("div"),F(rL.$$.fragment),llr=l(),O2e=a("p"),ilr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),dlr=l(),Ya=a("p"),clr=o("The model class to instantiate is selected based on the "),V2e=a("code"),flr=o("model_type"),mlr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(":"),ulr=l(),W2e=a("ul"),OT=a("li"),Q2e=a("strong"),blr=o("maskformer"),vlr=o(" \u2014 "),zz=a("a"),Flr=o("MaskFormerForInstanceSegmentation"),Tlr=o(" (MaskFormer model)"),Mlr=l(),VT=a("p"),Elr=o("The model is set in evaluation mode by default using "),H2e=a("code"),Clr=o("model.eval()"),wlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),Alr=o("model.train()"),ylr=l(),F(XT.$$.fragment),qNe=l(),Gd=a("h2"),zT=a("a"),J2e=a("span"),F(tL.$$.fragment),Llr=l(),Y2e=a("span"),xlr=o("TFAutoModel"),NNe=l(),Yo=a("div"),F(aL.$$.fragment),$lr=l(),Od=a("p"),klr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wz=a("a"),Slr=o("from_pretrained()"),Rlr=o(" class method or the "),Qz=a("a"),Plr=o("from_config()"),Blr=o(` class
method.`),Ilr=l(),nL=a("p"),qlr=o("This class cannot be instantiated directly using "),K2e=a("code"),Nlr=o("__init__()"),jlr=o(" (throws an error)."),Dlr=l(),yt=a("div"),F(sL.$$.fragment),Glr=l(),Z2e=a("p"),Olr=o("Instantiates one of the base model classes of the library from a configuration."),Vlr=l(),Vd=a("p"),Xlr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),zlr=o("not"),Wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Qlr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Ulr=l(),F(WT.$$.fragment),Jlr=l(),wr=a("div"),F(lL.$$.fragment),Ylr=l(),o1e=a("p"),Klr=o("Instantiate one of the base model classes of the library from a pretrained model."),Zlr=l(),Ka=a("p"),eir=o("The model class to instantiate is selected based on the "),r1e=a("code"),oir=o("model_type"),rir=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),tir=o("pretrained_model_name_or_path"),air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(":"),lir=l(),N=a("ul"),QT=a("li"),n1e=a("strong"),iir=o("albert"),dir=o(" \u2014 "),Uz=a("a"),cir=o("TFAlbertModel"),fir=o(" (ALBERT model)"),mir=l(),HT=a("li"),s1e=a("strong"),gir=o("bart"),hir=o(" \u2014 "),Jz=a("a"),pir=o("TFBartModel"),_ir=o(" (BART model)"),uir=l(),UT=a("li"),l1e=a("strong"),bir=o("bert"),vir=o(" \u2014 "),Yz=a("a"),Fir=o("TFBertModel"),Tir=o(" (BERT model)"),Mir=l(),JT=a("li"),i1e=a("strong"),Eir=o("blenderbot"),Cir=o(" \u2014 "),Kz=a("a"),wir=o("TFBlenderbotModel"),Air=o(" (Blenderbot model)"),yir=l(),YT=a("li"),d1e=a("strong"),Lir=o("blenderbot-small"),xir=o(" \u2014 "),Zz=a("a"),$ir=o("TFBlenderbotSmallModel"),kir=o(" (BlenderbotSmall model)"),Sir=l(),KT=a("li"),c1e=a("strong"),Rir=o("camembert"),Pir=o(" \u2014 "),eW=a("a"),Bir=o("TFCamembertModel"),Iir=o(" (CamemBERT model)"),qir=l(),ZT=a("li"),f1e=a("strong"),Nir=o("clip"),jir=o(" \u2014 "),oW=a("a"),Dir=o("TFCLIPModel"),Gir=o(" (CLIP model)"),Oir=l(),e7=a("li"),m1e=a("strong"),Vir=o("convbert"),Xir=o(" \u2014 "),rW=a("a"),zir=o("TFConvBertModel"),Wir=o(" (ConvBERT model)"),Qir=l(),o7=a("li"),g1e=a("strong"),Hir=o("convnext"),Uir=o(" \u2014 "),tW=a("a"),Jir=o("TFConvNextModel"),Yir=o(" (ConvNext model)"),Kir=l(),r7=a("li"),h1e=a("strong"),Zir=o("ctrl"),edr=o(" \u2014 "),aW=a("a"),odr=o("TFCTRLModel"),rdr=o(" (CTRL model)"),tdr=l(),t7=a("li"),p1e=a("strong"),adr=o("data2vec-vision"),ndr=o(" \u2014 "),nW=a("a"),sdr=o("TFData2VecVisionModel"),ldr=o(" (Data2VecVision model)"),idr=l(),a7=a("li"),_1e=a("strong"),ddr=o("deberta"),cdr=o(" \u2014 "),sW=a("a"),fdr=o("TFDebertaModel"),mdr=o(" (DeBERTa model)"),gdr=l(),n7=a("li"),u1e=a("strong"),hdr=o("deberta-v2"),pdr=o(" \u2014 "),lW=a("a"),_dr=o("TFDebertaV2Model"),udr=o(" (DeBERTa-v2 model)"),bdr=l(),s7=a("li"),b1e=a("strong"),vdr=o("distilbert"),Fdr=o(" \u2014 "),iW=a("a"),Tdr=o("TFDistilBertModel"),Mdr=o(" (DistilBERT model)"),Edr=l(),l7=a("li"),v1e=a("strong"),Cdr=o("dpr"),wdr=o(" \u2014 "),dW=a("a"),Adr=o("TFDPRQuestionEncoder"),ydr=o(" (DPR model)"),Ldr=l(),i7=a("li"),F1e=a("strong"),xdr=o("electra"),$dr=o(" \u2014 "),cW=a("a"),kdr=o("TFElectraModel"),Sdr=o(" (ELECTRA model)"),Rdr=l(),d7=a("li"),T1e=a("strong"),Pdr=o("flaubert"),Bdr=o(" \u2014 "),fW=a("a"),Idr=o("TFFlaubertModel"),qdr=o(" (FlauBERT model)"),Ndr=l(),Is=a("li"),M1e=a("strong"),jdr=o("funnel"),Ddr=o(" \u2014 "),mW=a("a"),Gdr=o("TFFunnelModel"),Odr=o(" or "),gW=a("a"),Vdr=o("TFFunnelBaseModel"),Xdr=o(" (Funnel Transformer model)"),zdr=l(),c7=a("li"),E1e=a("strong"),Wdr=o("gpt2"),Qdr=o(" \u2014 "),hW=a("a"),Hdr=o("TFGPT2Model"),Udr=o(" (OpenAI GPT-2 model)"),Jdr=l(),f7=a("li"),C1e=a("strong"),Ydr=o("gptj"),Kdr=o(" \u2014 "),pW=a("a"),Zdr=o("TFGPTJModel"),ecr=o(" (GPT-J model)"),ocr=l(),m7=a("li"),w1e=a("strong"),rcr=o("hubert"),tcr=o(" \u2014 "),_W=a("a"),acr=o("TFHubertModel"),ncr=o(" (Hubert model)"),scr=l(),g7=a("li"),A1e=a("strong"),lcr=o("layoutlm"),icr=o(" \u2014 "),uW=a("a"),dcr=o("TFLayoutLMModel"),ccr=o(" (LayoutLM model)"),fcr=l(),h7=a("li"),y1e=a("strong"),mcr=o("led"),gcr=o(" \u2014 "),bW=a("a"),hcr=o("TFLEDModel"),pcr=o(" (LED model)"),_cr=l(),p7=a("li"),L1e=a("strong"),ucr=o("longformer"),bcr=o(" \u2014 "),vW=a("a"),vcr=o("TFLongformerModel"),Fcr=o(" (Longformer model)"),Tcr=l(),_7=a("li"),x1e=a("strong"),Mcr=o("lxmert"),Ecr=o(" \u2014 "),FW=a("a"),Ccr=o("TFLxmertModel"),wcr=o(" (LXMERT model)"),Acr=l(),u7=a("li"),$1e=a("strong"),ycr=o("marian"),Lcr=o(" \u2014 "),TW=a("a"),xcr=o("TFMarianModel"),$cr=o(" (Marian model)"),kcr=l(),b7=a("li"),k1e=a("strong"),Scr=o("mbart"),Rcr=o(" \u2014 "),MW=a("a"),Pcr=o("TFMBartModel"),Bcr=o(" (mBART model)"),Icr=l(),v7=a("li"),S1e=a("strong"),qcr=o("mobilebert"),Ncr=o(" \u2014 "),EW=a("a"),jcr=o("TFMobileBertModel"),Dcr=o(" (MobileBERT model)"),Gcr=l(),F7=a("li"),R1e=a("strong"),Ocr=o("mpnet"),Vcr=o(" \u2014 "),CW=a("a"),Xcr=o("TFMPNetModel"),zcr=o(" (MPNet model)"),Wcr=l(),T7=a("li"),P1e=a("strong"),Qcr=o("mt5"),Hcr=o(" \u2014 "),wW=a("a"),Ucr=o("TFMT5Model"),Jcr=o(" (mT5 model)"),Ycr=l(),M7=a("li"),B1e=a("strong"),Kcr=o("openai-gpt"),Zcr=o(" \u2014 "),AW=a("a"),efr=o("TFOpenAIGPTModel"),ofr=o(" (OpenAI GPT model)"),rfr=l(),E7=a("li"),I1e=a("strong"),tfr=o("pegasus"),afr=o(" \u2014 "),yW=a("a"),nfr=o("TFPegasusModel"),sfr=o(" (Pegasus model)"),lfr=l(),C7=a("li"),q1e=a("strong"),ifr=o("rembert"),dfr=o(" \u2014 "),LW=a("a"),cfr=o("TFRemBertModel"),ffr=o(" (RemBERT model)"),mfr=l(),w7=a("li"),N1e=a("strong"),gfr=o("roberta"),hfr=o(" \u2014 "),xW=a("a"),pfr=o("TFRobertaModel"),_fr=o(" (RoBERTa model)"),ufr=l(),A7=a("li"),j1e=a("strong"),bfr=o("roformer"),vfr=o(" \u2014 "),$W=a("a"),Ffr=o("TFRoFormerModel"),Tfr=o(" (RoFormer model)"),Mfr=l(),y7=a("li"),D1e=a("strong"),Efr=o("speech_to_text"),Cfr=o(" \u2014 "),kW=a("a"),wfr=o("TFSpeech2TextModel"),Afr=o(" (Speech2Text model)"),yfr=l(),L7=a("li"),G1e=a("strong"),Lfr=o("swin"),xfr=o(" \u2014 "),SW=a("a"),$fr=o("TFSwinModel"),kfr=o(" (Swin model)"),Sfr=l(),x7=a("li"),O1e=a("strong"),Rfr=o("t5"),Pfr=o(" \u2014 "),RW=a("a"),Bfr=o("TFT5Model"),Ifr=o(" (T5 model)"),qfr=l(),$7=a("li"),V1e=a("strong"),Nfr=o("tapas"),jfr=o(" \u2014 "),PW=a("a"),Dfr=o("TFTapasModel"),Gfr=o(" (TAPAS model)"),Ofr=l(),k7=a("li"),X1e=a("strong"),Vfr=o("transfo-xl"),Xfr=o(" \u2014 "),BW=a("a"),zfr=o("TFTransfoXLModel"),Wfr=o(" (Transformer-XL model)"),Qfr=l(),S7=a("li"),z1e=a("strong"),Hfr=o("vit"),Ufr=o(" \u2014 "),IW=a("a"),Jfr=o("TFViTModel"),Yfr=o(" (ViT model)"),Kfr=l(),R7=a("li"),W1e=a("strong"),Zfr=o("vit_mae"),emr=o(" \u2014 "),qW=a("a"),omr=o("TFViTMAEModel"),rmr=o(" (ViTMAE model)"),tmr=l(),P7=a("li"),Q1e=a("strong"),amr=o("wav2vec2"),nmr=o(" \u2014 "),NW=a("a"),smr=o("TFWav2Vec2Model"),lmr=o(" (Wav2Vec2 model)"),imr=l(),B7=a("li"),H1e=a("strong"),dmr=o("xlm"),cmr=o(" \u2014 "),jW=a("a"),fmr=o("TFXLMModel"),mmr=o(" (XLM model)"),gmr=l(),I7=a("li"),U1e=a("strong"),hmr=o("xlm-roberta"),pmr=o(" \u2014 "),DW=a("a"),_mr=o("TFXLMRobertaModel"),umr=o(" (XLM-RoBERTa model)"),bmr=l(),q7=a("li"),J1e=a("strong"),vmr=o("xlnet"),Fmr=o(" \u2014 "),GW=a("a"),Tmr=o("TFXLNetModel"),Mmr=o(" (XLNet model)"),Emr=l(),F(N7.$$.fragment),jNe=l(),Xd=a("h2"),j7=a("a"),Y1e=a("span"),F(iL.$$.fragment),Cmr=l(),K1e=a("span"),wmr=o("TFAutoModelForPreTraining"),DNe=l(),Ko=a("div"),F(dL.$$.fragment),Amr=l(),zd=a("p"),ymr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OW=a("a"),Lmr=o("from_pretrained()"),xmr=o(" class method or the "),VW=a("a"),$mr=o("from_config()"),kmr=o(` class
method.`),Smr=l(),cL=a("p"),Rmr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Pmr=o("__init__()"),Bmr=o(" (throws an error)."),Imr=l(),Lt=a("div"),F(fL.$$.fragment),qmr=l(),ebe=a("p"),Nmr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jmr=l(),Wd=a("p"),Dmr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Gmr=o("not"),Omr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" to load the model weights."),zmr=l(),F(D7.$$.fragment),Wmr=l(),Ar=a("div"),F(mL.$$.fragment),Qmr=l(),rbe=a("p"),Hmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Umr=l(),Za=a("p"),Jmr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Ymr=o("model_type"),Kmr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),Zmr=o("pretrained_model_name_or_path"),egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(":"),tgr=l(),se=a("ul"),G7=a("li"),sbe=a("strong"),agr=o("albert"),ngr=o(" \u2014 "),zW=a("a"),sgr=o("TFAlbertForPreTraining"),lgr=o(" (ALBERT model)"),igr=l(),O7=a("li"),lbe=a("strong"),dgr=o("bart"),cgr=o(" \u2014 "),WW=a("a"),fgr=o("TFBartForConditionalGeneration"),mgr=o(" (BART model)"),ggr=l(),V7=a("li"),ibe=a("strong"),hgr=o("bert"),pgr=o(" \u2014 "),QW=a("a"),_gr=o("TFBertForPreTraining"),ugr=o(" (BERT model)"),bgr=l(),X7=a("li"),dbe=a("strong"),vgr=o("camembert"),Fgr=o(" \u2014 "),HW=a("a"),Tgr=o("TFCamembertForMaskedLM"),Mgr=o(" (CamemBERT model)"),Egr=l(),z7=a("li"),cbe=a("strong"),Cgr=o("ctrl"),wgr=o(" \u2014 "),UW=a("a"),Agr=o("TFCTRLLMHeadModel"),ygr=o(" (CTRL model)"),Lgr=l(),W7=a("li"),fbe=a("strong"),xgr=o("distilbert"),$gr=o(" \u2014 "),JW=a("a"),kgr=o("TFDistilBertForMaskedLM"),Sgr=o(" (DistilBERT model)"),Rgr=l(),Q7=a("li"),mbe=a("strong"),Pgr=o("electra"),Bgr=o(" \u2014 "),YW=a("a"),Igr=o("TFElectraForPreTraining"),qgr=o(" (ELECTRA model)"),Ngr=l(),H7=a("li"),gbe=a("strong"),jgr=o("flaubert"),Dgr=o(" \u2014 "),KW=a("a"),Ggr=o("TFFlaubertWithLMHeadModel"),Ogr=o(" (FlauBERT model)"),Vgr=l(),U7=a("li"),hbe=a("strong"),Xgr=o("funnel"),zgr=o(" \u2014 "),ZW=a("a"),Wgr=o("TFFunnelForPreTraining"),Qgr=o(" (Funnel Transformer model)"),Hgr=l(),J7=a("li"),pbe=a("strong"),Ugr=o("gpt2"),Jgr=o(" \u2014 "),eQ=a("a"),Ygr=o("TFGPT2LMHeadModel"),Kgr=o(" (OpenAI GPT-2 model)"),Zgr=l(),Y7=a("li"),_be=a("strong"),ehr=o("layoutlm"),ohr=o(" \u2014 "),oQ=a("a"),rhr=o("TFLayoutLMForMaskedLM"),thr=o(" (LayoutLM model)"),ahr=l(),K7=a("li"),ube=a("strong"),nhr=o("lxmert"),shr=o(" \u2014 "),rQ=a("a"),lhr=o("TFLxmertForPreTraining"),ihr=o(" (LXMERT model)"),dhr=l(),Z7=a("li"),bbe=a("strong"),chr=o("mobilebert"),fhr=o(" \u2014 "),tQ=a("a"),mhr=o("TFMobileBertForPreTraining"),ghr=o(" (MobileBERT model)"),hhr=l(),e9=a("li"),vbe=a("strong"),phr=o("mpnet"),_hr=o(" \u2014 "),aQ=a("a"),uhr=o("TFMPNetForMaskedLM"),bhr=o(" (MPNet model)"),vhr=l(),o9=a("li"),Fbe=a("strong"),Fhr=o("openai-gpt"),Thr=o(" \u2014 "),nQ=a("a"),Mhr=o("TFOpenAIGPTLMHeadModel"),Ehr=o(" (OpenAI GPT model)"),Chr=l(),r9=a("li"),Tbe=a("strong"),whr=o("roberta"),Ahr=o(" \u2014 "),sQ=a("a"),yhr=o("TFRobertaForMaskedLM"),Lhr=o(" (RoBERTa model)"),xhr=l(),t9=a("li"),Mbe=a("strong"),$hr=o("t5"),khr=o(" \u2014 "),lQ=a("a"),Shr=o("TFT5ForConditionalGeneration"),Rhr=o(" (T5 model)"),Phr=l(),a9=a("li"),Ebe=a("strong"),Bhr=o("tapas"),Ihr=o(" \u2014 "),iQ=a("a"),qhr=o("TFTapasForMaskedLM"),Nhr=o(" (TAPAS model)"),jhr=l(),n9=a("li"),Cbe=a("strong"),Dhr=o("transfo-xl"),Ghr=o(" \u2014 "),dQ=a("a"),Ohr=o("TFTransfoXLLMHeadModel"),Vhr=o(" (Transformer-XL model)"),Xhr=l(),s9=a("li"),wbe=a("strong"),zhr=o("vit_mae"),Whr=o(" \u2014 "),cQ=a("a"),Qhr=o("TFViTMAEForPreTraining"),Hhr=o(" (ViTMAE model)"),Uhr=l(),l9=a("li"),Abe=a("strong"),Jhr=o("xlm"),Yhr=o(" \u2014 "),fQ=a("a"),Khr=o("TFXLMWithLMHeadModel"),Zhr=o(" (XLM model)"),epr=l(),i9=a("li"),ybe=a("strong"),opr=o("xlm-roberta"),rpr=o(" \u2014 "),mQ=a("a"),tpr=o("TFXLMRobertaForMaskedLM"),apr=o(" (XLM-RoBERTa model)"),npr=l(),d9=a("li"),Lbe=a("strong"),spr=o("xlnet"),lpr=o(" \u2014 "),gQ=a("a"),ipr=o("TFXLNetLMHeadModel"),dpr=o(" (XLNet model)"),cpr=l(),F(c9.$$.fragment),GNe=l(),Qd=a("h2"),f9=a("a"),xbe=a("span"),F(gL.$$.fragment),fpr=l(),$be=a("span"),mpr=o("TFAutoModelForCausalLM"),ONe=l(),Zo=a("div"),F(hL.$$.fragment),gpr=l(),Hd=a("p"),hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=a("a"),ppr=o("from_pretrained()"),_pr=o(" class method or the "),pQ=a("a"),upr=o("from_config()"),bpr=o(` class
method.`),vpr=l(),pL=a("p"),Fpr=o("This class cannot be instantiated directly using "),kbe=a("code"),Tpr=o("__init__()"),Mpr=o(" (throws an error)."),Epr=l(),xt=a("div"),F(_L.$$.fragment),Cpr=l(),Sbe=a("p"),wpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Apr=l(),Ud=a("p"),ypr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Lpr=o("not"),xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),$pr=o("from_pretrained()"),kpr=o(" to load the model weights."),Spr=l(),F(m9.$$.fragment),Rpr=l(),yr=a("div"),F(uL.$$.fragment),Ppr=l(),Pbe=a("p"),Bpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ipr=l(),en=a("p"),qpr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),Npr=o("model_type"),jpr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(":"),Xpr=l(),Ee=a("ul"),g9=a("li"),Nbe=a("strong"),zpr=o("bert"),Wpr=o(" \u2014 "),uQ=a("a"),Qpr=o("TFBertLMHeadModel"),Hpr=o(" (BERT model)"),Upr=l(),h9=a("li"),jbe=a("strong"),Jpr=o("camembert"),Ypr=o(" \u2014 "),bQ=a("a"),Kpr=o("TFCamembertForCausalLM"),Zpr=o(" (CamemBERT model)"),e_r=l(),p9=a("li"),Dbe=a("strong"),o_r=o("ctrl"),r_r=o(" \u2014 "),vQ=a("a"),t_r=o("TFCTRLLMHeadModel"),a_r=o(" (CTRL model)"),n_r=l(),_9=a("li"),Gbe=a("strong"),s_r=o("gpt2"),l_r=o(" \u2014 "),FQ=a("a"),i_r=o("TFGPT2LMHeadModel"),d_r=o(" (OpenAI GPT-2 model)"),c_r=l(),u9=a("li"),Obe=a("strong"),f_r=o("gptj"),m_r=o(" \u2014 "),TQ=a("a"),g_r=o("TFGPTJForCausalLM"),h_r=o(" (GPT-J model)"),p_r=l(),b9=a("li"),Vbe=a("strong"),__r=o("openai-gpt"),u_r=o(" \u2014 "),MQ=a("a"),b_r=o("TFOpenAIGPTLMHeadModel"),v_r=o(" (OpenAI GPT model)"),F_r=l(),v9=a("li"),Xbe=a("strong"),T_r=o("rembert"),M_r=o(" \u2014 "),EQ=a("a"),E_r=o("TFRemBertForCausalLM"),C_r=o(" (RemBERT model)"),w_r=l(),F9=a("li"),zbe=a("strong"),A_r=o("roberta"),y_r=o(" \u2014 "),CQ=a("a"),L_r=o("TFRobertaForCausalLM"),x_r=o(" (RoBERTa model)"),$_r=l(),T9=a("li"),Wbe=a("strong"),k_r=o("roformer"),S_r=o(" \u2014 "),wQ=a("a"),R_r=o("TFRoFormerForCausalLM"),P_r=o(" (RoFormer model)"),B_r=l(),M9=a("li"),Qbe=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),AQ=a("a"),N_r=o("TFTransfoXLLMHeadModel"),j_r=o(" (Transformer-XL model)"),D_r=l(),E9=a("li"),Hbe=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),yQ=a("a"),V_r=o("TFXLMWithLMHeadModel"),X_r=o(" (XLM model)"),z_r=l(),C9=a("li"),Ube=a("strong"),W_r=o("xlnet"),Q_r=o(" \u2014 "),LQ=a("a"),H_r=o("TFXLNetLMHeadModel"),U_r=o(" (XLNet model)"),J_r=l(),F(w9.$$.fragment),VNe=l(),Jd=a("h2"),A9=a("a"),Jbe=a("span"),F(bL.$$.fragment),Y_r=l(),Ybe=a("span"),K_r=o("TFAutoModelForImageClassification"),XNe=l(),er=a("div"),F(vL.$$.fragment),Z_r=l(),Yd=a("p"),eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xQ=a("a"),our=o("from_pretrained()"),rur=o(" class method or the "),$Q=a("a"),tur=o("from_config()"),aur=o(` class
method.`),nur=l(),FL=a("p"),sur=o("This class cannot be instantiated directly using "),Kbe=a("code"),lur=o("__init__()"),iur=o(" (throws an error)."),dur=l(),$t=a("div"),F(TL.$$.fragment),cur=l(),Zbe=a("p"),fur=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mur=l(),Kd=a("p"),gur=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),hur=o("not"),pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),_ur=o("from_pretrained()"),uur=o(" to load the model weights."),bur=l(),F(y9.$$.fragment),vur=l(),Lr=a("div"),F(ML.$$.fragment),Fur=l(),ove=a("p"),Tur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mur=l(),on=a("p"),Eur=o("The model class to instantiate is selected based on the "),rve=a("code"),Cur=o("model_type"),wur=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),Aur=o("pretrained_model_name_or_path"),yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(":"),$ur=l(),rn=a("ul"),L9=a("li"),nve=a("strong"),kur=o("convnext"),Sur=o(" \u2014 "),SQ=a("a"),Rur=o("TFConvNextForImageClassification"),Pur=o(" (ConvNext model)"),Bur=l(),x9=a("li"),sve=a("strong"),Iur=o("data2vec-vision"),qur=o(" \u2014 "),RQ=a("a"),Nur=o("TFData2VecVisionForImageClassification"),jur=o(" (Data2VecVision model)"),Dur=l(),$9=a("li"),lve=a("strong"),Gur=o("swin"),Our=o(" \u2014 "),PQ=a("a"),Vur=o("TFSwinForImageClassification"),Xur=o(" (Swin model)"),zur=l(),k9=a("li"),ive=a("strong"),Wur=o("vit"),Qur=o(" \u2014 "),BQ=a("a"),Hur=o("TFViTForImageClassification"),Uur=o(" (ViT model)"),Jur=l(),F(S9.$$.fragment),zNe=l(),Zd=a("h2"),R9=a("a"),dve=a("span"),F(EL.$$.fragment),Yur=l(),cve=a("span"),Kur=o("TFAutoModelForMaskedLM"),WNe=l(),or=a("div"),F(CL.$$.fragment),Zur=l(),ec=a("p"),e2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=a("a"),o2r=o("from_pretrained()"),r2r=o(" class method or the "),qQ=a("a"),t2r=o("from_config()"),a2r=o(` class
method.`),n2r=l(),wL=a("p"),s2r=o("This class cannot be instantiated directly using "),fve=a("code"),l2r=o("__init__()"),i2r=o(" (throws an error)."),d2r=l(),kt=a("div"),F(AL.$$.fragment),c2r=l(),mve=a("p"),f2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m2r=l(),oc=a("p"),g2r=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),h2r=o("not"),p2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),_2r=o("from_pretrained()"),u2r=o(" to load the model weights."),b2r=l(),F(P9.$$.fragment),v2r=l(),xr=a("div"),F(yL.$$.fragment),F2r=l(),hve=a("p"),T2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M2r=l(),tn=a("p"),E2r=o("The model class to instantiate is selected based on the "),pve=a("code"),C2r=o("model_type"),w2r=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),A2r=o("pretrained_model_name_or_path"),y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),L2r=o("pretrained_model_name_or_path"),x2r=o(":"),$2r=l(),ie=a("ul"),B9=a("li"),bve=a("strong"),k2r=o("albert"),S2r=o(" \u2014 "),jQ=a("a"),R2r=o("TFAlbertForMaskedLM"),P2r=o(" (ALBERT model)"),B2r=l(),I9=a("li"),vve=a("strong"),I2r=o("bert"),q2r=o(" \u2014 "),DQ=a("a"),N2r=o("TFBertForMaskedLM"),j2r=o(" (BERT model)"),D2r=l(),q9=a("li"),Fve=a("strong"),G2r=o("camembert"),O2r=o(" \u2014 "),GQ=a("a"),V2r=o("TFCamembertForMaskedLM"),X2r=o(" (CamemBERT model)"),z2r=l(),N9=a("li"),Tve=a("strong"),W2r=o("convbert"),Q2r=o(" \u2014 "),OQ=a("a"),H2r=o("TFConvBertForMaskedLM"),U2r=o(" (ConvBERT model)"),J2r=l(),j9=a("li"),Mve=a("strong"),Y2r=o("deberta"),K2r=o(" \u2014 "),VQ=a("a"),Z2r=o("TFDebertaForMaskedLM"),e1r=o(" (DeBERTa model)"),o1r=l(),D9=a("li"),Eve=a("strong"),r1r=o("deberta-v2"),t1r=o(" \u2014 "),XQ=a("a"),a1r=o("TFDebertaV2ForMaskedLM"),n1r=o(" (DeBERTa-v2 model)"),s1r=l(),G9=a("li"),Cve=a("strong"),l1r=o("distilbert"),i1r=o(" \u2014 "),zQ=a("a"),d1r=o("TFDistilBertForMaskedLM"),c1r=o(" (DistilBERT model)"),f1r=l(),O9=a("li"),wve=a("strong"),m1r=o("electra"),g1r=o(" \u2014 "),WQ=a("a"),h1r=o("TFElectraForMaskedLM"),p1r=o(" (ELECTRA model)"),_1r=l(),V9=a("li"),Ave=a("strong"),u1r=o("flaubert"),b1r=o(" \u2014 "),QQ=a("a"),v1r=o("TFFlaubertWithLMHeadModel"),F1r=o(" (FlauBERT model)"),T1r=l(),X9=a("li"),yve=a("strong"),M1r=o("funnel"),E1r=o(" \u2014 "),HQ=a("a"),C1r=o("TFFunnelForMaskedLM"),w1r=o(" (Funnel Transformer model)"),A1r=l(),z9=a("li"),Lve=a("strong"),y1r=o("layoutlm"),L1r=o(" \u2014 "),UQ=a("a"),x1r=o("TFLayoutLMForMaskedLM"),$1r=o(" (LayoutLM model)"),k1r=l(),W9=a("li"),xve=a("strong"),S1r=o("longformer"),R1r=o(" \u2014 "),JQ=a("a"),P1r=o("TFLongformerForMaskedLM"),B1r=o(" (Longformer model)"),I1r=l(),Q9=a("li"),$ve=a("strong"),q1r=o("mobilebert"),N1r=o(" \u2014 "),YQ=a("a"),j1r=o("TFMobileBertForMaskedLM"),D1r=o(" (MobileBERT model)"),G1r=l(),H9=a("li"),kve=a("strong"),O1r=o("mpnet"),V1r=o(" \u2014 "),KQ=a("a"),X1r=o("TFMPNetForMaskedLM"),z1r=o(" (MPNet model)"),W1r=l(),U9=a("li"),Sve=a("strong"),Q1r=o("rembert"),H1r=o(" \u2014 "),ZQ=a("a"),U1r=o("TFRemBertForMaskedLM"),J1r=o(" (RemBERT model)"),Y1r=l(),J9=a("li"),Rve=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),eH=a("a"),ebr=o("TFRobertaForMaskedLM"),obr=o(" (RoBERTa model)"),rbr=l(),Y9=a("li"),Pve=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),oH=a("a"),nbr=o("TFRoFormerForMaskedLM"),sbr=o(" (RoFormer model)"),lbr=l(),K9=a("li"),Bve=a("strong"),ibr=o("tapas"),dbr=o(" \u2014 "),rH=a("a"),cbr=o("TFTapasForMaskedLM"),fbr=o(" (TAPAS model)"),mbr=l(),Z9=a("li"),Ive=a("strong"),gbr=o("xlm"),hbr=o(" \u2014 "),tH=a("a"),pbr=o("TFXLMWithLMHeadModel"),_br=o(" (XLM model)"),ubr=l(),eM=a("li"),qve=a("strong"),bbr=o("xlm-roberta"),vbr=o(" \u2014 "),aH=a("a"),Fbr=o("TFXLMRobertaForMaskedLM"),Tbr=o(" (XLM-RoBERTa model)"),Mbr=l(),F(oM.$$.fragment),QNe=l(),rc=a("h2"),rM=a("a"),Nve=a("span"),F(LL.$$.fragment),Ebr=l(),jve=a("span"),Cbr=o("TFAutoModelForSeq2SeqLM"),HNe=l(),rr=a("div"),F(xL.$$.fragment),wbr=l(),tc=a("p"),Abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nH=a("a"),ybr=o("from_pretrained()"),Lbr=o(" class method or the "),sH=a("a"),xbr=o("from_config()"),$br=o(` class
method.`),kbr=l(),$L=a("p"),Sbr=o("This class cannot be instantiated directly using "),Dve=a("code"),Rbr=o("__init__()"),Pbr=o(" (throws an error)."),Bbr=l(),St=a("div"),F(kL.$$.fragment),Ibr=l(),Gve=a("p"),qbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nbr=l(),ac=a("p"),jbr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),Dbr=o("not"),Gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Obr=o("from_pretrained()"),Vbr=o(" to load the model weights."),Xbr=l(),F(tM.$$.fragment),zbr=l(),$r=a("div"),F(SL.$$.fragment),Wbr=l(),Vve=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hbr=l(),an=a("p"),Ubr=o("The model class to instantiate is selected based on the "),Xve=a("code"),Jbr=o("model_type"),Ybr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(":"),rvr=l(),ye=a("ul"),aM=a("li"),Qve=a("strong"),tvr=o("bart"),avr=o(" \u2014 "),iH=a("a"),nvr=o("TFBartForConditionalGeneration"),svr=o(" (BART model)"),lvr=l(),nM=a("li"),Hve=a("strong"),ivr=o("blenderbot"),dvr=o(" \u2014 "),dH=a("a"),cvr=o("TFBlenderbotForConditionalGeneration"),fvr=o(" (Blenderbot model)"),mvr=l(),sM=a("li"),Uve=a("strong"),gvr=o("blenderbot-small"),hvr=o(" \u2014 "),cH=a("a"),pvr=o("TFBlenderbotSmallForConditionalGeneration"),_vr=o(" (BlenderbotSmall model)"),uvr=l(),lM=a("li"),Jve=a("strong"),bvr=o("encoder-decoder"),vvr=o(" \u2014 "),fH=a("a"),Fvr=o("TFEncoderDecoderModel"),Tvr=o(" (Encoder decoder model)"),Mvr=l(),iM=a("li"),Yve=a("strong"),Evr=o("led"),Cvr=o(" \u2014 "),mH=a("a"),wvr=o("TFLEDForConditionalGeneration"),Avr=o(" (LED model)"),yvr=l(),dM=a("li"),Kve=a("strong"),Lvr=o("marian"),xvr=o(" \u2014 "),gH=a("a"),$vr=o("TFMarianMTModel"),kvr=o(" (Marian model)"),Svr=l(),cM=a("li"),Zve=a("strong"),Rvr=o("mbart"),Pvr=o(" \u2014 "),hH=a("a"),Bvr=o("TFMBartForConditionalGeneration"),Ivr=o(" (mBART model)"),qvr=l(),fM=a("li"),eFe=a("strong"),Nvr=o("mt5"),jvr=o(" \u2014 "),pH=a("a"),Dvr=o("TFMT5ForConditionalGeneration"),Gvr=o(" (mT5 model)"),Ovr=l(),mM=a("li"),oFe=a("strong"),Vvr=o("pegasus"),Xvr=o(" \u2014 "),_H=a("a"),zvr=o("TFPegasusForConditionalGeneration"),Wvr=o(" (Pegasus model)"),Qvr=l(),gM=a("li"),rFe=a("strong"),Hvr=o("t5"),Uvr=o(" \u2014 "),uH=a("a"),Jvr=o("TFT5ForConditionalGeneration"),Yvr=o(" (T5 model)"),Kvr=l(),F(hM.$$.fragment),UNe=l(),nc=a("h2"),pM=a("a"),tFe=a("span"),F(RL.$$.fragment),Zvr=l(),aFe=a("span"),eFr=o("TFAutoModelForSequenceClassification"),JNe=l(),tr=a("div"),F(PL.$$.fragment),oFr=l(),sc=a("p"),rFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bH=a("a"),tFr=o("from_pretrained()"),aFr=o(" class method or the "),vH=a("a"),nFr=o("from_config()"),sFr=o(` class
method.`),lFr=l(),BL=a("p"),iFr=o("This class cannot be instantiated directly using "),nFe=a("code"),dFr=o("__init__()"),cFr=o(" (throws an error)."),fFr=l(),Rt=a("div"),F(IL.$$.fragment),mFr=l(),sFe=a("p"),gFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hFr=l(),lc=a("p"),pFr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),_Fr=o("not"),uFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),bFr=o("from_pretrained()"),vFr=o(" to load the model weights."),FFr=l(),F(_M.$$.fragment),TFr=l(),kr=a("div"),F(qL.$$.fragment),MFr=l(),iFe=a("p"),EFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CFr=l(),nn=a("p"),wFr=o("The model class to instantiate is selected based on the "),dFe=a("code"),AFr=o("model_type"),yFr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),LFr=o("pretrained_model_name_or_path"),xFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),$Fr=o("pretrained_model_name_or_path"),kFr=o(":"),SFr=l(),ee=a("ul"),uM=a("li"),mFe=a("strong"),RFr=o("albert"),PFr=o(" \u2014 "),TH=a("a"),BFr=o("TFAlbertForSequenceClassification"),IFr=o(" (ALBERT model)"),qFr=l(),bM=a("li"),gFe=a("strong"),NFr=o("bert"),jFr=o(" \u2014 "),MH=a("a"),DFr=o("TFBertForSequenceClassification"),GFr=o(" (BERT model)"),OFr=l(),vM=a("li"),hFe=a("strong"),VFr=o("camembert"),XFr=o(" \u2014 "),EH=a("a"),zFr=o("TFCamembertForSequenceClassification"),WFr=o(" (CamemBERT model)"),QFr=l(),FM=a("li"),pFe=a("strong"),HFr=o("convbert"),UFr=o(" \u2014 "),CH=a("a"),JFr=o("TFConvBertForSequenceClassification"),YFr=o(" (ConvBERT model)"),KFr=l(),TM=a("li"),_Fe=a("strong"),ZFr=o("ctrl"),e6r=o(" \u2014 "),wH=a("a"),o6r=o("TFCTRLForSequenceClassification"),r6r=o(" (CTRL model)"),t6r=l(),MM=a("li"),uFe=a("strong"),a6r=o("deberta"),n6r=o(" \u2014 "),AH=a("a"),s6r=o("TFDebertaForSequenceClassification"),l6r=o(" (DeBERTa model)"),i6r=l(),EM=a("li"),bFe=a("strong"),d6r=o("deberta-v2"),c6r=o(" \u2014 "),yH=a("a"),f6r=o("TFDebertaV2ForSequenceClassification"),m6r=o(" (DeBERTa-v2 model)"),g6r=l(),CM=a("li"),vFe=a("strong"),h6r=o("distilbert"),p6r=o(" \u2014 "),LH=a("a"),_6r=o("TFDistilBertForSequenceClassification"),u6r=o(" (DistilBERT model)"),b6r=l(),wM=a("li"),FFe=a("strong"),v6r=o("electra"),F6r=o(" \u2014 "),xH=a("a"),T6r=o("TFElectraForSequenceClassification"),M6r=o(" (ELECTRA model)"),E6r=l(),AM=a("li"),TFe=a("strong"),C6r=o("flaubert"),w6r=o(" \u2014 "),$H=a("a"),A6r=o("TFFlaubertForSequenceClassification"),y6r=o(" (FlauBERT model)"),L6r=l(),yM=a("li"),MFe=a("strong"),x6r=o("funnel"),$6r=o(" \u2014 "),kH=a("a"),k6r=o("TFFunnelForSequenceClassification"),S6r=o(" (Funnel Transformer model)"),R6r=l(),LM=a("li"),EFe=a("strong"),P6r=o("gpt2"),B6r=o(" \u2014 "),SH=a("a"),I6r=o("TFGPT2ForSequenceClassification"),q6r=o(" (OpenAI GPT-2 model)"),N6r=l(),xM=a("li"),CFe=a("strong"),j6r=o("gptj"),D6r=o(" \u2014 "),RH=a("a"),G6r=o("TFGPTJForSequenceClassification"),O6r=o(" (GPT-J model)"),V6r=l(),$M=a("li"),wFe=a("strong"),X6r=o("layoutlm"),z6r=o(" \u2014 "),PH=a("a"),W6r=o("TFLayoutLMForSequenceClassification"),Q6r=o(" (LayoutLM model)"),H6r=l(),kM=a("li"),AFe=a("strong"),U6r=o("longformer"),J6r=o(" \u2014 "),BH=a("a"),Y6r=o("TFLongformerForSequenceClassification"),K6r=o(" (Longformer model)"),Z6r=l(),SM=a("li"),yFe=a("strong"),eTr=o("mobilebert"),oTr=o(" \u2014 "),IH=a("a"),rTr=o("TFMobileBertForSequenceClassification"),tTr=o(" (MobileBERT model)"),aTr=l(),RM=a("li"),LFe=a("strong"),nTr=o("mpnet"),sTr=o(" \u2014 "),qH=a("a"),lTr=o("TFMPNetForSequenceClassification"),iTr=o(" (MPNet model)"),dTr=l(),PM=a("li"),xFe=a("strong"),cTr=o("openai-gpt"),fTr=o(" \u2014 "),NH=a("a"),mTr=o("TFOpenAIGPTForSequenceClassification"),gTr=o(" (OpenAI GPT model)"),hTr=l(),BM=a("li"),$Fe=a("strong"),pTr=o("rembert"),_Tr=o(" \u2014 "),jH=a("a"),uTr=o("TFRemBertForSequenceClassification"),bTr=o(" (RemBERT model)"),vTr=l(),IM=a("li"),kFe=a("strong"),FTr=o("roberta"),TTr=o(" \u2014 "),DH=a("a"),MTr=o("TFRobertaForSequenceClassification"),ETr=o(" (RoBERTa model)"),CTr=l(),qM=a("li"),SFe=a("strong"),wTr=o("roformer"),ATr=o(" \u2014 "),GH=a("a"),yTr=o("TFRoFormerForSequenceClassification"),LTr=o(" (RoFormer model)"),xTr=l(),NM=a("li"),RFe=a("strong"),$Tr=o("tapas"),kTr=o(" \u2014 "),OH=a("a"),STr=o("TFTapasForSequenceClassification"),RTr=o(" (TAPAS model)"),PTr=l(),jM=a("li"),PFe=a("strong"),BTr=o("transfo-xl"),ITr=o(" \u2014 "),VH=a("a"),qTr=o("TFTransfoXLForSequenceClassification"),NTr=o(" (Transformer-XL model)"),jTr=l(),DM=a("li"),BFe=a("strong"),DTr=o("xlm"),GTr=o(" \u2014 "),XH=a("a"),OTr=o("TFXLMForSequenceClassification"),VTr=o(" (XLM model)"),XTr=l(),GM=a("li"),IFe=a("strong"),zTr=o("xlm-roberta"),WTr=o(" \u2014 "),zH=a("a"),QTr=o("TFXLMRobertaForSequenceClassification"),HTr=o(" (XLM-RoBERTa model)"),UTr=l(),OM=a("li"),qFe=a("strong"),JTr=o("xlnet"),YTr=o(" \u2014 "),WH=a("a"),KTr=o("TFXLNetForSequenceClassification"),ZTr=o(" (XLNet model)"),e7r=l(),F(VM.$$.fragment),YNe=l(),ic=a("h2"),XM=a("a"),NFe=a("span"),F(NL.$$.fragment),o7r=l(),jFe=a("span"),r7r=o("TFAutoModelForMultipleChoice"),KNe=l(),ar=a("div"),F(jL.$$.fragment),t7r=l(),dc=a("p"),a7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=a("a"),n7r=o("from_pretrained()"),s7r=o(" class method or the "),HH=a("a"),l7r=o("from_config()"),i7r=o(` class
method.`),d7r=l(),DL=a("p"),c7r=o("This class cannot be instantiated directly using "),DFe=a("code"),f7r=o("__init__()"),m7r=o(" (throws an error)."),g7r=l(),Pt=a("div"),F(GL.$$.fragment),h7r=l(),GFe=a("p"),p7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_7r=l(),cc=a("p"),u7r=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),b7r=o("not"),v7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),F7r=o("from_pretrained()"),T7r=o(" to load the model weights."),M7r=l(),F(zM.$$.fragment),E7r=l(),Sr=a("div"),F(OL.$$.fragment),C7r=l(),VFe=a("p"),w7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A7r=l(),sn=a("p"),y7r=o("The model class to instantiate is selected based on the "),XFe=a("code"),L7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),$7r=o("pretrained_model_name_or_path"),k7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),S7r=o("pretrained_model_name_or_path"),R7r=o(":"),P7r=l(),pe=a("ul"),WM=a("li"),QFe=a("strong"),B7r=o("albert"),I7r=o(" \u2014 "),JH=a("a"),q7r=o("TFAlbertForMultipleChoice"),N7r=o(" (ALBERT model)"),j7r=l(),QM=a("li"),HFe=a("strong"),D7r=o("bert"),G7r=o(" \u2014 "),YH=a("a"),O7r=o("TFBertForMultipleChoice"),V7r=o(" (BERT model)"),X7r=l(),HM=a("li"),UFe=a("strong"),z7r=o("camembert"),W7r=o(" \u2014 "),KH=a("a"),Q7r=o("TFCamembertForMultipleChoice"),H7r=o(" (CamemBERT model)"),U7r=l(),UM=a("li"),JFe=a("strong"),J7r=o("convbert"),Y7r=o(" \u2014 "),ZH=a("a"),K7r=o("TFConvBertForMultipleChoice"),Z7r=o(" (ConvBERT model)"),e9r=l(),JM=a("li"),YFe=a("strong"),o9r=o("distilbert"),r9r=o(" \u2014 "),eU=a("a"),t9r=o("TFDistilBertForMultipleChoice"),a9r=o(" (DistilBERT model)"),n9r=l(),YM=a("li"),KFe=a("strong"),s9r=o("electra"),l9r=o(" \u2014 "),oU=a("a"),i9r=o("TFElectraForMultipleChoice"),d9r=o(" (ELECTRA model)"),c9r=l(),KM=a("li"),ZFe=a("strong"),f9r=o("flaubert"),m9r=o(" \u2014 "),rU=a("a"),g9r=o("TFFlaubertForMultipleChoice"),h9r=o(" (FlauBERT model)"),p9r=l(),ZM=a("li"),e6e=a("strong"),_9r=o("funnel"),u9r=o(" \u2014 "),tU=a("a"),b9r=o("TFFunnelForMultipleChoice"),v9r=o(" (Funnel Transformer model)"),F9r=l(),e4=a("li"),o6e=a("strong"),T9r=o("longformer"),M9r=o(" \u2014 "),aU=a("a"),E9r=o("TFLongformerForMultipleChoice"),C9r=o(" (Longformer model)"),w9r=l(),o4=a("li"),r6e=a("strong"),A9r=o("mobilebert"),y9r=o(" \u2014 "),nU=a("a"),L9r=o("TFMobileBertForMultipleChoice"),x9r=o(" (MobileBERT model)"),$9r=l(),r4=a("li"),t6e=a("strong"),k9r=o("mpnet"),S9r=o(" \u2014 "),sU=a("a"),R9r=o("TFMPNetForMultipleChoice"),P9r=o(" (MPNet model)"),B9r=l(),t4=a("li"),a6e=a("strong"),I9r=o("rembert"),q9r=o(" \u2014 "),lU=a("a"),N9r=o("TFRemBertForMultipleChoice"),j9r=o(" (RemBERT model)"),D9r=l(),a4=a("li"),n6e=a("strong"),G9r=o("roberta"),O9r=o(" \u2014 "),iU=a("a"),V9r=o("TFRobertaForMultipleChoice"),X9r=o(" (RoBERTa model)"),z9r=l(),n4=a("li"),s6e=a("strong"),W9r=o("roformer"),Q9r=o(" \u2014 "),dU=a("a"),H9r=o("TFRoFormerForMultipleChoice"),U9r=o(" (RoFormer model)"),J9r=l(),s4=a("li"),l6e=a("strong"),Y9r=o("xlm"),K9r=o(" \u2014 "),cU=a("a"),Z9r=o("TFXLMForMultipleChoice"),eMr=o(" (XLM model)"),oMr=l(),l4=a("li"),i6e=a("strong"),rMr=o("xlm-roberta"),tMr=o(" \u2014 "),fU=a("a"),aMr=o("TFXLMRobertaForMultipleChoice"),nMr=o(" (XLM-RoBERTa model)"),sMr=l(),i4=a("li"),d6e=a("strong"),lMr=o("xlnet"),iMr=o(" \u2014 "),mU=a("a"),dMr=o("TFXLNetForMultipleChoice"),cMr=o(" (XLNet model)"),fMr=l(),F(d4.$$.fragment),ZNe=l(),fc=a("h2"),c4=a("a"),c6e=a("span"),F(VL.$$.fragment),mMr=l(),f6e=a("span"),gMr=o("TFAutoModelForNextSentencePrediction"),eje=l(),nr=a("div"),F(XL.$$.fragment),hMr=l(),mc=a("p"),pMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gU=a("a"),_Mr=o("from_pretrained()"),uMr=o(" class method or the "),hU=a("a"),bMr=o("from_config()"),vMr=o(` class
method.`),FMr=l(),zL=a("p"),TMr=o("This class cannot be instantiated directly using "),m6e=a("code"),MMr=o("__init__()"),EMr=o(" (throws an error)."),CMr=l(),Bt=a("div"),F(WL.$$.fragment),wMr=l(),g6e=a("p"),AMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yMr=l(),gc=a("p"),LMr=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),xMr=o("not"),$Mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),kMr=o("from_pretrained()"),SMr=o(" to load the model weights."),RMr=l(),F(f4.$$.fragment),PMr=l(),Rr=a("div"),F(QL.$$.fragment),BMr=l(),p6e=a("p"),IMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qMr=l(),ln=a("p"),NMr=o("The model class to instantiate is selected based on the "),_6e=a("code"),jMr=o("model_type"),DMr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(":"),zMr=l(),HL=a("ul"),m4=a("li"),v6e=a("strong"),WMr=o("bert"),QMr=o(" \u2014 "),_U=a("a"),HMr=o("TFBertForNextSentencePrediction"),UMr=o(" (BERT model)"),JMr=l(),g4=a("li"),F6e=a("strong"),YMr=o("mobilebert"),KMr=o(" \u2014 "),uU=a("a"),ZMr=o("TFMobileBertForNextSentencePrediction"),e4r=o(" (MobileBERT model)"),o4r=l(),F(h4.$$.fragment),oje=l(),hc=a("h2"),p4=a("a"),T6e=a("span"),F(UL.$$.fragment),r4r=l(),M6e=a("span"),t4r=o("TFAutoModelForTableQuestionAnswering"),rje=l(),sr=a("div"),F(JL.$$.fragment),a4r=l(),pc=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bU=a("a"),s4r=o("from_pretrained()"),l4r=o(" class method or the "),vU=a("a"),i4r=o("from_config()"),d4r=o(` class
method.`),c4r=l(),YL=a("p"),f4r=o("This class cannot be instantiated directly using "),E6e=a("code"),m4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),It=a("div"),F(KL.$$.fragment),p4r=l(),C6e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),u4r=l(),_c=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),v4r=o("not"),F4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),T4r=o("from_pretrained()"),M4r=o(" to load the model weights."),E4r=l(),F(_4.$$.fragment),C4r=l(),Pr=a("div"),F(ZL.$$.fragment),w4r=l(),A6e=a("p"),A4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y4r=l(),dn=a("p"),L4r=o("The model class to instantiate is selected based on the "),y6e=a("code"),x4r=o("model_type"),$4r=o(` property of the config object (either
passed as an argument or loaded from `),L6e=a("code"),k4r=o("pretrained_model_name_or_path"),S4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),R4r=o("pretrained_model_name_or_path"),P4r=o(":"),B4r=l(),$6e=a("ul"),u4=a("li"),k6e=a("strong"),I4r=o("tapas"),q4r=o(" \u2014 "),TU=a("a"),N4r=o("TFTapasForQuestionAnswering"),j4r=o(" (TAPAS model)"),D4r=l(),F(b4.$$.fragment),tje=l(),uc=a("h2"),v4=a("a"),S6e=a("span"),F(e8.$$.fragment),G4r=l(),R6e=a("span"),O4r=o("TFAutoModelForTokenClassification"),aje=l(),lr=a("div"),F(o8.$$.fragment),V4r=l(),bc=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MU=a("a"),z4r=o("from_pretrained()"),W4r=o(" class method or the "),EU=a("a"),Q4r=o("from_config()"),H4r=o(` class
method.`),U4r=l(),r8=a("p"),J4r=o("This class cannot be instantiated directly using "),P6e=a("code"),Y4r=o("__init__()"),K4r=o(" (throws an error)."),Z4r=l(),qt=a("div"),F(t8.$$.fragment),eEr=l(),B6e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rEr=l(),vc=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),sEr=o("from_pretrained()"),lEr=o(" to load the model weights."),iEr=l(),F(F4.$$.fragment),dEr=l(),Br=a("div"),F(a8.$$.fragment),cEr=l(),q6e=a("p"),fEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mEr=l(),cn=a("p"),gEr=o("The model class to instantiate is selected based on the "),N6e=a("code"),hEr=o("model_type"),pEr=o(` property of the config object (either
passed as an argument or loaded from `),j6e=a("code"),_Er=o("pretrained_model_name_or_path"),uEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(":"),FEr=l(),de=a("ul"),T4=a("li"),G6e=a("strong"),TEr=o("albert"),MEr=o(" \u2014 "),wU=a("a"),EEr=o("TFAlbertForTokenClassification"),CEr=o(" (ALBERT model)"),wEr=l(),M4=a("li"),O6e=a("strong"),AEr=o("bert"),yEr=o(" \u2014 "),AU=a("a"),LEr=o("TFBertForTokenClassification"),xEr=o(" (BERT model)"),$Er=l(),E4=a("li"),V6e=a("strong"),kEr=o("camembert"),SEr=o(" \u2014 "),yU=a("a"),REr=o("TFCamembertForTokenClassification"),PEr=o(" (CamemBERT model)"),BEr=l(),C4=a("li"),X6e=a("strong"),IEr=o("convbert"),qEr=o(" \u2014 "),LU=a("a"),NEr=o("TFConvBertForTokenClassification"),jEr=o(" (ConvBERT model)"),DEr=l(),w4=a("li"),z6e=a("strong"),GEr=o("deberta"),OEr=o(" \u2014 "),xU=a("a"),VEr=o("TFDebertaForTokenClassification"),XEr=o(" (DeBERTa model)"),zEr=l(),A4=a("li"),W6e=a("strong"),WEr=o("deberta-v2"),QEr=o(" \u2014 "),$U=a("a"),HEr=o("TFDebertaV2ForTokenClassification"),UEr=o(" (DeBERTa-v2 model)"),JEr=l(),y4=a("li"),Q6e=a("strong"),YEr=o("distilbert"),KEr=o(" \u2014 "),kU=a("a"),ZEr=o("TFDistilBertForTokenClassification"),e5r=o(" (DistilBERT model)"),o5r=l(),L4=a("li"),H6e=a("strong"),r5r=o("electra"),t5r=o(" \u2014 "),SU=a("a"),a5r=o("TFElectraForTokenClassification"),n5r=o(" (ELECTRA model)"),s5r=l(),x4=a("li"),U6e=a("strong"),l5r=o("flaubert"),i5r=o(" \u2014 "),RU=a("a"),d5r=o("TFFlaubertForTokenClassification"),c5r=o(" (FlauBERT model)"),f5r=l(),$4=a("li"),J6e=a("strong"),m5r=o("funnel"),g5r=o(" \u2014 "),PU=a("a"),h5r=o("TFFunnelForTokenClassification"),p5r=o(" (Funnel Transformer model)"),_5r=l(),k4=a("li"),Y6e=a("strong"),u5r=o("layoutlm"),b5r=o(" \u2014 "),BU=a("a"),v5r=o("TFLayoutLMForTokenClassification"),F5r=o(" (LayoutLM model)"),T5r=l(),S4=a("li"),K6e=a("strong"),M5r=o("longformer"),E5r=o(" \u2014 "),IU=a("a"),C5r=o("TFLongformerForTokenClassification"),w5r=o(" (Longformer model)"),A5r=l(),R4=a("li"),Z6e=a("strong"),y5r=o("mobilebert"),L5r=o(" \u2014 "),qU=a("a"),x5r=o("TFMobileBertForTokenClassification"),$5r=o(" (MobileBERT model)"),k5r=l(),P4=a("li"),eTe=a("strong"),S5r=o("mpnet"),R5r=o(" \u2014 "),NU=a("a"),P5r=o("TFMPNetForTokenClassification"),B5r=o(" (MPNet model)"),I5r=l(),B4=a("li"),oTe=a("strong"),q5r=o("rembert"),N5r=o(" \u2014 "),jU=a("a"),j5r=o("TFRemBertForTokenClassification"),D5r=o(" (RemBERT model)"),G5r=l(),I4=a("li"),rTe=a("strong"),O5r=o("roberta"),V5r=o(" \u2014 "),DU=a("a"),X5r=o("TFRobertaForTokenClassification"),z5r=o(" (RoBERTa model)"),W5r=l(),q4=a("li"),tTe=a("strong"),Q5r=o("roformer"),H5r=o(" \u2014 "),GU=a("a"),U5r=o("TFRoFormerForTokenClassification"),J5r=o(" (RoFormer model)"),Y5r=l(),N4=a("li"),aTe=a("strong"),K5r=o("xlm"),Z5r=o(" \u2014 "),OU=a("a"),eCr=o("TFXLMForTokenClassification"),oCr=o(" (XLM model)"),rCr=l(),j4=a("li"),nTe=a("strong"),tCr=o("xlm-roberta"),aCr=o(" \u2014 "),VU=a("a"),nCr=o("TFXLMRobertaForTokenClassification"),sCr=o(" (XLM-RoBERTa model)"),lCr=l(),D4=a("li"),sTe=a("strong"),iCr=o("xlnet"),dCr=o(" \u2014 "),XU=a("a"),cCr=o("TFXLNetForTokenClassification"),fCr=o(" (XLNet model)"),mCr=l(),F(G4.$$.fragment),nje=l(),Fc=a("h2"),O4=a("a"),lTe=a("span"),F(n8.$$.fragment),gCr=l(),iTe=a("span"),hCr=o("TFAutoModelForQuestionAnswering"),sje=l(),ir=a("div"),F(s8.$$.fragment),pCr=l(),Tc=a("p"),_Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zU=a("a"),uCr=o("from_pretrained()"),bCr=o(" class method or the "),WU=a("a"),vCr=o("from_config()"),FCr=o(` class
method.`),TCr=l(),l8=a("p"),MCr=o("This class cannot be instantiated directly using "),dTe=a("code"),ECr=o("__init__()"),CCr=o(" (throws an error)."),wCr=l(),Nt=a("div"),F(i8.$$.fragment),ACr=l(),cTe=a("p"),yCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LCr=l(),Mc=a("p"),xCr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),$Cr=o("not"),kCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),SCr=o("from_pretrained()"),RCr=o(" to load the model weights."),PCr=l(),F(V4.$$.fragment),BCr=l(),Ir=a("div"),F(d8.$$.fragment),ICr=l(),mTe=a("p"),qCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NCr=l(),fn=a("p"),jCr=o("The model class to instantiate is selected based on the "),gTe=a("code"),DCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(":"),WCr=l(),ce=a("ul"),X4=a("li"),_Te=a("strong"),QCr=o("albert"),HCr=o(" \u2014 "),HU=a("a"),UCr=o("TFAlbertForQuestionAnswering"),JCr=o(" (ALBERT model)"),YCr=l(),z4=a("li"),uTe=a("strong"),KCr=o("bert"),ZCr=o(" \u2014 "),UU=a("a"),e3r=o("TFBertForQuestionAnswering"),o3r=o(" (BERT model)"),r3r=l(),W4=a("li"),bTe=a("strong"),t3r=o("camembert"),a3r=o(" \u2014 "),JU=a("a"),n3r=o("TFCamembertForQuestionAnswering"),s3r=o(" (CamemBERT model)"),l3r=l(),Q4=a("li"),vTe=a("strong"),i3r=o("convbert"),d3r=o(" \u2014 "),YU=a("a"),c3r=o("TFConvBertForQuestionAnswering"),f3r=o(" (ConvBERT model)"),m3r=l(),H4=a("li"),FTe=a("strong"),g3r=o("deberta"),h3r=o(" \u2014 "),KU=a("a"),p3r=o("TFDebertaForQuestionAnswering"),_3r=o(" (DeBERTa model)"),u3r=l(),U4=a("li"),TTe=a("strong"),b3r=o("deberta-v2"),v3r=o(" \u2014 "),ZU=a("a"),F3r=o("TFDebertaV2ForQuestionAnswering"),T3r=o(" (DeBERTa-v2 model)"),M3r=l(),J4=a("li"),MTe=a("strong"),E3r=o("distilbert"),C3r=o(" \u2014 "),eJ=a("a"),w3r=o("TFDistilBertForQuestionAnswering"),A3r=o(" (DistilBERT model)"),y3r=l(),Y4=a("li"),ETe=a("strong"),L3r=o("electra"),x3r=o(" \u2014 "),oJ=a("a"),$3r=o("TFElectraForQuestionAnswering"),k3r=o(" (ELECTRA model)"),S3r=l(),K4=a("li"),CTe=a("strong"),R3r=o("flaubert"),P3r=o(" \u2014 "),rJ=a("a"),B3r=o("TFFlaubertForQuestionAnsweringSimple"),I3r=o(" (FlauBERT model)"),q3r=l(),Z4=a("li"),wTe=a("strong"),N3r=o("funnel"),j3r=o(" \u2014 "),tJ=a("a"),D3r=o("TFFunnelForQuestionAnswering"),G3r=o(" (Funnel Transformer model)"),O3r=l(),eE=a("li"),ATe=a("strong"),V3r=o("gptj"),X3r=o(" \u2014 "),aJ=a("a"),z3r=o("TFGPTJForQuestionAnswering"),W3r=o(" (GPT-J model)"),Q3r=l(),oE=a("li"),yTe=a("strong"),H3r=o("longformer"),U3r=o(" \u2014 "),nJ=a("a"),J3r=o("TFLongformerForQuestionAnswering"),Y3r=o(" (Longformer model)"),K3r=l(),rE=a("li"),LTe=a("strong"),Z3r=o("mobilebert"),ewr=o(" \u2014 "),sJ=a("a"),owr=o("TFMobileBertForQuestionAnswering"),rwr=o(" (MobileBERT model)"),twr=l(),tE=a("li"),xTe=a("strong"),awr=o("mpnet"),nwr=o(" \u2014 "),lJ=a("a"),swr=o("TFMPNetForQuestionAnswering"),lwr=o(" (MPNet model)"),iwr=l(),aE=a("li"),$Te=a("strong"),dwr=o("rembert"),cwr=o(" \u2014 "),iJ=a("a"),fwr=o("TFRemBertForQuestionAnswering"),mwr=o(" (RemBERT model)"),gwr=l(),nE=a("li"),kTe=a("strong"),hwr=o("roberta"),pwr=o(" \u2014 "),dJ=a("a"),_wr=o("TFRobertaForQuestionAnswering"),uwr=o(" (RoBERTa model)"),bwr=l(),sE=a("li"),STe=a("strong"),vwr=o("roformer"),Fwr=o(" \u2014 "),cJ=a("a"),Twr=o("TFRoFormerForQuestionAnswering"),Mwr=o(" (RoFormer model)"),Ewr=l(),lE=a("li"),RTe=a("strong"),Cwr=o("xlm"),wwr=o(" \u2014 "),fJ=a("a"),Awr=o("TFXLMForQuestionAnsweringSimple"),ywr=o(" (XLM model)"),Lwr=l(),iE=a("li"),PTe=a("strong"),xwr=o("xlm-roberta"),$wr=o(" \u2014 "),mJ=a("a"),kwr=o("TFXLMRobertaForQuestionAnswering"),Swr=o(" (XLM-RoBERTa model)"),Rwr=l(),dE=a("li"),BTe=a("strong"),Pwr=o("xlnet"),Bwr=o(" \u2014 "),gJ=a("a"),Iwr=o("TFXLNetForQuestionAnsweringSimple"),qwr=o(" (XLNet model)"),Nwr=l(),F(cE.$$.fragment),lje=l(),Ec=a("h2"),fE=a("a"),ITe=a("span"),F(c8.$$.fragment),jwr=l(),qTe=a("span"),Dwr=o("TFAutoModelForVision2Seq"),ije=l(),dr=a("div"),F(f8.$$.fragment),Gwr=l(),Cc=a("p"),Owr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hJ=a("a"),Vwr=o("from_pretrained()"),Xwr=o(" class method or the "),pJ=a("a"),zwr=o("from_config()"),Wwr=o(` class
method.`),Qwr=l(),m8=a("p"),Hwr=o("This class cannot be instantiated directly using "),NTe=a("code"),Uwr=o("__init__()"),Jwr=o(" (throws an error)."),Ywr=l(),jt=a("div"),F(g8.$$.fragment),Kwr=l(),jTe=a("p"),Zwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e0r=l(),wc=a("p"),o0r=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),r0r=o("not"),t0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),a0r=o("from_pretrained()"),n0r=o(" to load the model weights."),s0r=l(),F(mE.$$.fragment),l0r=l(),qr=a("div"),F(h8.$$.fragment),i0r=l(),GTe=a("p"),d0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),c0r=l(),mn=a("p"),f0r=o("The model class to instantiate is selected based on the "),OTe=a("code"),m0r=o("model_type"),g0r=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),h0r=o("pretrained_model_name_or_path"),p0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(":"),b0r=l(),zTe=a("ul"),gE=a("li"),WTe=a("strong"),v0r=o("vision-encoder-decoder"),F0r=o(" \u2014 "),uJ=a("a"),T0r=o("TFVisionEncoderDecoderModel"),M0r=o(" (Vision Encoder decoder model)"),E0r=l(),F(hE.$$.fragment),dje=l(),Ac=a("h2"),pE=a("a"),QTe=a("span"),F(p8.$$.fragment),C0r=l(),HTe=a("span"),w0r=o("TFAutoModelForSpeechSeq2Seq"),cje=l(),cr=a("div"),F(_8.$$.fragment),A0r=l(),yc=a("p"),y0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bJ=a("a"),L0r=o("from_pretrained()"),x0r=o(" class method or the "),vJ=a("a"),$0r=o("from_config()"),k0r=o(` class
method.`),S0r=l(),u8=a("p"),R0r=o("This class cannot be instantiated directly using "),UTe=a("code"),P0r=o("__init__()"),B0r=o(" (throws an error)."),I0r=l(),Dt=a("div"),F(b8.$$.fragment),q0r=l(),JTe=a("p"),N0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),j0r=l(),Lc=a("p"),D0r=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),G0r=o("not"),O0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),V0r=o("from_pretrained()"),X0r=o(" to load the model weights."),z0r=l(),F(_E.$$.fragment),W0r=l(),Nr=a("div"),F(v8.$$.fragment),Q0r=l(),KTe=a("p"),H0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),U0r=l(),gn=a("p"),J0r=o("The model class to instantiate is selected based on the "),ZTe=a("code"),Y0r=o("model_type"),K0r=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),Z0r=o("pretrained_model_name_or_path"),eAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(":"),tAr=l(),r7e=a("ul"),uE=a("li"),t7e=a("strong"),aAr=o("speech_to_text"),nAr=o(" \u2014 "),TJ=a("a"),sAr=o("TFSpeech2TextForConditionalGeneration"),lAr=o(" (Speech2Text model)"),iAr=l(),F(bE.$$.fragment),fje=l(),xc=a("h2"),vE=a("a"),a7e=a("span"),F(F8.$$.fragment),dAr=l(),n7e=a("span"),cAr=o("FlaxAutoModel"),mje=l(),fr=a("div"),F(T8.$$.fragment),fAr=l(),$c=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MJ=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),EJ=a("a"),pAr=o("from_config()"),_Ar=o(` class
method.`),uAr=l(),M8=a("p"),bAr=o("This class cannot be instantiated directly using "),s7e=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Gt=a("div"),F(E8.$$.fragment),MAr=l(),l7e=a("p"),EAr=o("Instantiates one of the base model classes of the library from a configuration."),CAr=l(),kc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(FE.$$.fragment),kAr=l(),jr=a("div"),F(C8.$$.fragment),SAr=l(),d7e=a("p"),RAr=o("Instantiate one of the base model classes of the library from a pretrained model."),PAr=l(),hn=a("p"),BAr=o("The model class to instantiate is selected based on the "),c7e=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),oe=a("ul"),TE=a("li"),g7e=a("strong"),VAr=o("albert"),XAr=o(" \u2014 "),wJ=a("a"),zAr=o("FlaxAlbertModel"),WAr=o(" (ALBERT model)"),QAr=l(),ME=a("li"),h7e=a("strong"),HAr=o("bart"),UAr=o(" \u2014 "),AJ=a("a"),JAr=o("FlaxBartModel"),YAr=o(" (BART model)"),KAr=l(),EE=a("li"),p7e=a("strong"),ZAr=o("beit"),eyr=o(" \u2014 "),yJ=a("a"),oyr=o("FlaxBeitModel"),ryr=o(" (BEiT model)"),tyr=l(),CE=a("li"),_7e=a("strong"),ayr=o("bert"),nyr=o(" \u2014 "),LJ=a("a"),syr=o("FlaxBertModel"),lyr=o(" (BERT model)"),iyr=l(),wE=a("li"),u7e=a("strong"),dyr=o("big_bird"),cyr=o(" \u2014 "),xJ=a("a"),fyr=o("FlaxBigBirdModel"),myr=o(" (BigBird model)"),gyr=l(),AE=a("li"),b7e=a("strong"),hyr=o("blenderbot"),pyr=o(" \u2014 "),$J=a("a"),_yr=o("FlaxBlenderbotModel"),uyr=o(" (Blenderbot model)"),byr=l(),yE=a("li"),v7e=a("strong"),vyr=o("blenderbot-small"),Fyr=o(" \u2014 "),kJ=a("a"),Tyr=o("FlaxBlenderbotSmallModel"),Myr=o(" (BlenderbotSmall model)"),Eyr=l(),LE=a("li"),F7e=a("strong"),Cyr=o("clip"),wyr=o(" \u2014 "),SJ=a("a"),Ayr=o("FlaxCLIPModel"),yyr=o(" (CLIP model)"),Lyr=l(),xE=a("li"),T7e=a("strong"),xyr=o("distilbert"),$yr=o(" \u2014 "),RJ=a("a"),kyr=o("FlaxDistilBertModel"),Syr=o(" (DistilBERT model)"),Ryr=l(),$E=a("li"),M7e=a("strong"),Pyr=o("electra"),Byr=o(" \u2014 "),PJ=a("a"),Iyr=o("FlaxElectraModel"),qyr=o(" (ELECTRA model)"),Nyr=l(),kE=a("li"),E7e=a("strong"),jyr=o("gpt2"),Dyr=o(" \u2014 "),BJ=a("a"),Gyr=o("FlaxGPT2Model"),Oyr=o(" (OpenAI GPT-2 model)"),Vyr=l(),SE=a("li"),C7e=a("strong"),Xyr=o("gpt_neo"),zyr=o(" \u2014 "),IJ=a("a"),Wyr=o("FlaxGPTNeoModel"),Qyr=o(" (GPT Neo model)"),Hyr=l(),RE=a("li"),w7e=a("strong"),Uyr=o("gptj"),Jyr=o(" \u2014 "),qJ=a("a"),Yyr=o("FlaxGPTJModel"),Kyr=o(" (GPT-J model)"),Zyr=l(),PE=a("li"),A7e=a("strong"),eLr=o("longt5"),oLr=o(" \u2014 "),NJ=a("a"),rLr=o("FlaxLongT5Model"),tLr=o(" (LongT5 model)"),aLr=l(),BE=a("li"),y7e=a("strong"),nLr=o("marian"),sLr=o(" \u2014 "),jJ=a("a"),lLr=o("FlaxMarianModel"),iLr=o(" (Marian model)"),dLr=l(),IE=a("li"),L7e=a("strong"),cLr=o("mbart"),fLr=o(" \u2014 "),DJ=a("a"),mLr=o("FlaxMBartModel"),gLr=o(" (mBART model)"),hLr=l(),qE=a("li"),x7e=a("strong"),pLr=o("mt5"),_Lr=o(" \u2014 "),GJ=a("a"),uLr=o("FlaxMT5Model"),bLr=o(" (mT5 model)"),vLr=l(),NE=a("li"),$7e=a("strong"),FLr=o("pegasus"),TLr=o(" \u2014 "),OJ=a("a"),MLr=o("FlaxPegasusModel"),ELr=o(" (Pegasus model)"),CLr=l(),jE=a("li"),k7e=a("strong"),wLr=o("roberta"),ALr=o(" \u2014 "),VJ=a("a"),yLr=o("FlaxRobertaModel"),LLr=o(" (RoBERTa model)"),xLr=l(),DE=a("li"),S7e=a("strong"),$Lr=o("roformer"),kLr=o(" \u2014 "),XJ=a("a"),SLr=o("FlaxRoFormerModel"),RLr=o(" (RoFormer model)"),PLr=l(),GE=a("li"),R7e=a("strong"),BLr=o("t5"),ILr=o(" \u2014 "),zJ=a("a"),qLr=o("FlaxT5Model"),NLr=o(" (T5 model)"),jLr=l(),OE=a("li"),P7e=a("strong"),DLr=o("vision-text-dual-encoder"),GLr=o(" \u2014 "),WJ=a("a"),OLr=o("FlaxVisionTextDualEncoderModel"),VLr=o(" (VisionTextDualEncoder model)"),XLr=l(),VE=a("li"),B7e=a("strong"),zLr=o("vit"),WLr=o(" \u2014 "),QJ=a("a"),QLr=o("FlaxViTModel"),HLr=o(" (ViT model)"),ULr=l(),XE=a("li"),I7e=a("strong"),JLr=o("wav2vec2"),YLr=o(" \u2014 "),HJ=a("a"),KLr=o("FlaxWav2Vec2Model"),ZLr=o(" (Wav2Vec2 model)"),e8r=l(),zE=a("li"),q7e=a("strong"),o8r=o("xglm"),r8r=o(" \u2014 "),UJ=a("a"),t8r=o("FlaxXGLMModel"),a8r=o(" (XGLM model)"),n8r=l(),WE=a("li"),N7e=a("strong"),s8r=o("xlm-roberta"),l8r=o(" \u2014 "),JJ=a("a"),i8r=o("FlaxXLMRobertaModel"),d8r=o(" (XLM-RoBERTa model)"),c8r=l(),F(QE.$$.fragment),gje=l(),Sc=a("h2"),HE=a("a"),j7e=a("span"),F(w8.$$.fragment),f8r=l(),D7e=a("span"),m8r=o("FlaxAutoModelForCausalLM"),hje=l(),mr=a("div"),F(A8.$$.fragment),g8r=l(),Rc=a("p"),h8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YJ=a("a"),p8r=o("from_pretrained()"),_8r=o(" class method or the "),KJ=a("a"),u8r=o("from_config()"),b8r=o(` class
method.`),v8r=l(),y8=a("p"),F8r=o("This class cannot be instantiated directly using "),G7e=a("code"),T8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),Ot=a("div"),F(L8.$$.fragment),C8r=l(),O7e=a("p"),w8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),A8r=l(),Pc=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),L8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" to load the model weights."),S8r=l(),F(UE.$$.fragment),R8r=l(),Dr=a("div"),F(x8.$$.fragment),P8r=l(),X7e=a("p"),B8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I8r=l(),pn=a("p"),q8r=o("The model class to instantiate is selected based on the "),z7e=a("code"),N8r=o("model_type"),j8r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(":"),X8r=l(),Pe=a("ul"),JE=a("li"),H7e=a("strong"),z8r=o("bart"),W8r=o(" \u2014 "),eY=a("a"),Q8r=o("FlaxBartForCausalLM"),H8r=o(" (BART model)"),U8r=l(),YE=a("li"),U7e=a("strong"),J8r=o("bert"),Y8r=o(" \u2014 "),oY=a("a"),K8r=o("FlaxBertForCausalLM"),Z8r=o(" (BERT model)"),exr=l(),KE=a("li"),J7e=a("strong"),oxr=o("big_bird"),rxr=o(" \u2014 "),rY=a("a"),txr=o("FlaxBigBirdForCausalLM"),axr=o(" (BigBird model)"),nxr=l(),ZE=a("li"),Y7e=a("strong"),sxr=o("electra"),lxr=o(" \u2014 "),tY=a("a"),ixr=o("FlaxElectraForCausalLM"),dxr=o(" (ELECTRA model)"),cxr=l(),e5=a("li"),K7e=a("strong"),fxr=o("gpt2"),mxr=o(" \u2014 "),aY=a("a"),gxr=o("FlaxGPT2LMHeadModel"),hxr=o(" (OpenAI GPT-2 model)"),pxr=l(),o5=a("li"),Z7e=a("strong"),_xr=o("gpt_neo"),uxr=o(" \u2014 "),nY=a("a"),bxr=o("FlaxGPTNeoForCausalLM"),vxr=o(" (GPT Neo model)"),Fxr=l(),r5=a("li"),e9e=a("strong"),Txr=o("gptj"),Mxr=o(" \u2014 "),sY=a("a"),Exr=o("FlaxGPTJForCausalLM"),Cxr=o(" (GPT-J model)"),wxr=l(),t5=a("li"),o9e=a("strong"),Axr=o("roberta"),yxr=o(" \u2014 "),lY=a("a"),Lxr=o("FlaxRobertaForCausalLM"),xxr=o(" (RoBERTa model)"),$xr=l(),a5=a("li"),r9e=a("strong"),kxr=o("xglm"),Sxr=o(" \u2014 "),iY=a("a"),Rxr=o("FlaxXGLMForCausalLM"),Pxr=o(" (XGLM model)"),Bxr=l(),F(n5.$$.fragment),pje=l(),Bc=a("h2"),s5=a("a"),t9e=a("span"),F($8.$$.fragment),Ixr=l(),a9e=a("span"),qxr=o("FlaxAutoModelForPreTraining"),_je=l(),gr=a("div"),F(k8.$$.fragment),Nxr=l(),Ic=a("p"),jxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dY=a("a"),Dxr=o("from_pretrained()"),Gxr=o(" class method or the "),cY=a("a"),Oxr=o("from_config()"),Vxr=o(` class
method.`),Xxr=l(),S8=a("p"),zxr=o("This class cannot be instantiated directly using "),n9e=a("code"),Wxr=o("__init__()"),Qxr=o(" (throws an error)."),Hxr=l(),Vt=a("div"),F(R8.$$.fragment),Uxr=l(),s9e=a("p"),Jxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yxr=l(),qc=a("p"),Kxr=o(`Note:
Loading a model from its configuration file does `),l9e=a("strong"),Zxr=o("not"),e$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),o$r=o("from_pretrained()"),r$r=o(" to load the model weights."),t$r=l(),F(l5.$$.fragment),a$r=l(),Gr=a("div"),F(P8.$$.fragment),n$r=l(),i9e=a("p"),s$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l$r=l(),_n=a("p"),i$r=o("The model class to instantiate is selected based on the "),d9e=a("code"),d$r=o("model_type"),c$r=o(` property of the config object (either
passed as an argument or loaded from `),c9e=a("code"),f$r=o("pretrained_model_name_or_path"),m$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(":"),p$r=l(),Te=a("ul"),i5=a("li"),m9e=a("strong"),_$r=o("albert"),u$r=o(" \u2014 "),mY=a("a"),b$r=o("FlaxAlbertForPreTraining"),v$r=o(" (ALBERT model)"),F$r=l(),d5=a("li"),g9e=a("strong"),T$r=o("bart"),M$r=o(" \u2014 "),gY=a("a"),E$r=o("FlaxBartForConditionalGeneration"),C$r=o(" (BART model)"),w$r=l(),c5=a("li"),h9e=a("strong"),A$r=o("bert"),y$r=o(" \u2014 "),hY=a("a"),L$r=o("FlaxBertForPreTraining"),x$r=o(" (BERT model)"),$$r=l(),f5=a("li"),p9e=a("strong"),k$r=o("big_bird"),S$r=o(" \u2014 "),pY=a("a"),R$r=o("FlaxBigBirdForPreTraining"),P$r=o(" (BigBird model)"),B$r=l(),m5=a("li"),_9e=a("strong"),I$r=o("electra"),q$r=o(" \u2014 "),_Y=a("a"),N$r=o("FlaxElectraForPreTraining"),j$r=o(" (ELECTRA model)"),D$r=l(),g5=a("li"),u9e=a("strong"),G$r=o("longt5"),O$r=o(" \u2014 "),uY=a("a"),V$r=o("FlaxLongT5ForConditionalGeneration"),X$r=o(" (LongT5 model)"),z$r=l(),h5=a("li"),b9e=a("strong"),W$r=o("mbart"),Q$r=o(" \u2014 "),bY=a("a"),H$r=o("FlaxMBartForConditionalGeneration"),U$r=o(" (mBART model)"),J$r=l(),p5=a("li"),v9e=a("strong"),Y$r=o("mt5"),K$r=o(" \u2014 "),vY=a("a"),Z$r=o("FlaxMT5ForConditionalGeneration"),ekr=o(" (mT5 model)"),okr=l(),_5=a("li"),F9e=a("strong"),rkr=o("roberta"),tkr=o(" \u2014 "),FY=a("a"),akr=o("FlaxRobertaForMaskedLM"),nkr=o(" (RoBERTa model)"),skr=l(),u5=a("li"),T9e=a("strong"),lkr=o("roformer"),ikr=o(" \u2014 "),TY=a("a"),dkr=o("FlaxRoFormerForMaskedLM"),ckr=o(" (RoFormer model)"),fkr=l(),b5=a("li"),M9e=a("strong"),mkr=o("t5"),gkr=o(" \u2014 "),MY=a("a"),hkr=o("FlaxT5ForConditionalGeneration"),pkr=o(" (T5 model)"),_kr=l(),v5=a("li"),E9e=a("strong"),ukr=o("wav2vec2"),bkr=o(" \u2014 "),EY=a("a"),vkr=o("FlaxWav2Vec2ForPreTraining"),Fkr=o(" (Wav2Vec2 model)"),Tkr=l(),F5=a("li"),C9e=a("strong"),Mkr=o("xlm-roberta"),Ekr=o(" \u2014 "),CY=a("a"),Ckr=o("FlaxXLMRobertaForMaskedLM"),wkr=o(" (XLM-RoBERTa model)"),Akr=l(),F(T5.$$.fragment),uje=l(),Nc=a("h2"),M5=a("a"),w9e=a("span"),F(B8.$$.fragment),ykr=l(),A9e=a("span"),Lkr=o("FlaxAutoModelForMaskedLM"),bje=l(),hr=a("div"),F(I8.$$.fragment),xkr=l(),jc=a("p"),$kr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wY=a("a"),kkr=o("from_pretrained()"),Skr=o(" class method or the "),AY=a("a"),Rkr=o("from_config()"),Pkr=o(` class
method.`),Bkr=l(),q8=a("p"),Ikr=o("This class cannot be instantiated directly using "),y9e=a("code"),qkr=o("__init__()"),Nkr=o(" (throws an error)."),jkr=l(),Xt=a("div"),F(N8.$$.fragment),Dkr=l(),L9e=a("p"),Gkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Okr=l(),Dc=a("p"),Vkr=o(`Note:
Loading a model from its configuration file does `),x9e=a("strong"),Xkr=o("not"),zkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),Wkr=o("from_pretrained()"),Qkr=o(" to load the model weights."),Hkr=l(),F(E5.$$.fragment),Ukr=l(),Or=a("div"),F(j8.$$.fragment),Jkr=l(),$9e=a("p"),Ykr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kkr=l(),un=a("p"),Zkr=o("The model class to instantiate is selected based on the "),k9e=a("code"),eSr=o("model_type"),oSr=o(` property of the config object (either
passed as an argument or loaded from `),S9e=a("code"),rSr=o("pretrained_model_name_or_path"),tSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R9e=a("code"),aSr=o("pretrained_model_name_or_path"),nSr=o(":"),sSr=l(),Le=a("ul"),C5=a("li"),P9e=a("strong"),lSr=o("albert"),iSr=o(" \u2014 "),LY=a("a"),dSr=o("FlaxAlbertForMaskedLM"),cSr=o(" (ALBERT model)"),fSr=l(),w5=a("li"),B9e=a("strong"),mSr=o("bart"),gSr=o(" \u2014 "),xY=a("a"),hSr=o("FlaxBartForConditionalGeneration"),pSr=o(" (BART model)"),_Sr=l(),A5=a("li"),I9e=a("strong"),uSr=o("bert"),bSr=o(" \u2014 "),$Y=a("a"),vSr=o("FlaxBertForMaskedLM"),FSr=o(" (BERT model)"),TSr=l(),y5=a("li"),q9e=a("strong"),MSr=o("big_bird"),ESr=o(" \u2014 "),kY=a("a"),CSr=o("FlaxBigBirdForMaskedLM"),wSr=o(" (BigBird model)"),ASr=l(),L5=a("li"),N9e=a("strong"),ySr=o("distilbert"),LSr=o(" \u2014 "),SY=a("a"),xSr=o("FlaxDistilBertForMaskedLM"),$Sr=o(" (DistilBERT model)"),kSr=l(),x5=a("li"),j9e=a("strong"),SSr=o("electra"),RSr=o(" \u2014 "),RY=a("a"),PSr=o("FlaxElectraForMaskedLM"),BSr=o(" (ELECTRA model)"),ISr=l(),$5=a("li"),D9e=a("strong"),qSr=o("mbart"),NSr=o(" \u2014 "),PY=a("a"),jSr=o("FlaxMBartForConditionalGeneration"),DSr=o(" (mBART model)"),GSr=l(),k5=a("li"),G9e=a("strong"),OSr=o("roberta"),VSr=o(" \u2014 "),BY=a("a"),XSr=o("FlaxRobertaForMaskedLM"),zSr=o(" (RoBERTa model)"),WSr=l(),S5=a("li"),O9e=a("strong"),QSr=o("roformer"),HSr=o(" \u2014 "),IY=a("a"),USr=o("FlaxRoFormerForMaskedLM"),JSr=o(" (RoFormer model)"),YSr=l(),R5=a("li"),V9e=a("strong"),KSr=o("xlm-roberta"),ZSr=o(" \u2014 "),qY=a("a"),eRr=o("FlaxXLMRobertaForMaskedLM"),oRr=o(" (XLM-RoBERTa model)"),rRr=l(),F(P5.$$.fragment),vje=l(),Gc=a("h2"),B5=a("a"),X9e=a("span"),F(D8.$$.fragment),tRr=l(),z9e=a("span"),aRr=o("FlaxAutoModelForSeq2SeqLM"),Fje=l(),pr=a("div"),F(G8.$$.fragment),nRr=l(),Oc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NY=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),jY=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),O8=a("p"),mRr=o("This class cannot be instantiated directly using "),W9e=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),zt=a("div"),F(V8.$$.fragment),_Rr=l(),Q9e=a("p"),uRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRr=l(),Vc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),H9e=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(I5.$$.fragment),wRr=l(),Vr=a("div"),F(X8.$$.fragment),ARr=l(),U9e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LRr=l(),bn=a("p"),xRr=o("The model class to instantiate is selected based on the "),J9e=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),Y9e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(":"),IRr=l(),xe=a("ul"),q5=a("li"),Z9e=a("strong"),qRr=o("bart"),NRr=o(" \u2014 "),GY=a("a"),jRr=o("FlaxBartForConditionalGeneration"),DRr=o(" (BART model)"),GRr=l(),N5=a("li"),eMe=a("strong"),ORr=o("blenderbot"),VRr=o(" \u2014 "),OY=a("a"),XRr=o("FlaxBlenderbotForConditionalGeneration"),zRr=o(" (Blenderbot model)"),WRr=l(),j5=a("li"),oMe=a("strong"),QRr=o("blenderbot-small"),HRr=o(" \u2014 "),VY=a("a"),URr=o("FlaxBlenderbotSmallForConditionalGeneration"),JRr=o(" (BlenderbotSmall model)"),YRr=l(),D5=a("li"),rMe=a("strong"),KRr=o("encoder-decoder"),ZRr=o(" \u2014 "),XY=a("a"),ePr=o("FlaxEncoderDecoderModel"),oPr=o(" (Encoder decoder model)"),rPr=l(),G5=a("li"),tMe=a("strong"),tPr=o("longt5"),aPr=o(" \u2014 "),zY=a("a"),nPr=o("FlaxLongT5ForConditionalGeneration"),sPr=o(" (LongT5 model)"),lPr=l(),O5=a("li"),aMe=a("strong"),iPr=o("marian"),dPr=o(" \u2014 "),WY=a("a"),cPr=o("FlaxMarianMTModel"),fPr=o(" (Marian model)"),mPr=l(),V5=a("li"),nMe=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),QY=a("a"),pPr=o("FlaxMBartForConditionalGeneration"),_Pr=o(" (mBART model)"),uPr=l(),X5=a("li"),sMe=a("strong"),bPr=o("mt5"),vPr=o(" \u2014 "),HY=a("a"),FPr=o("FlaxMT5ForConditionalGeneration"),TPr=o(" (mT5 model)"),MPr=l(),z5=a("li"),lMe=a("strong"),EPr=o("pegasus"),CPr=o(" \u2014 "),UY=a("a"),wPr=o("FlaxPegasusForConditionalGeneration"),APr=o(" (Pegasus model)"),yPr=l(),W5=a("li"),iMe=a("strong"),LPr=o("t5"),xPr=o(" \u2014 "),JY=a("a"),$Pr=o("FlaxT5ForConditionalGeneration"),kPr=o(" (T5 model)"),SPr=l(),F(Q5.$$.fragment),Tje=l(),Xc=a("h2"),H5=a("a"),dMe=a("span"),F(z8.$$.fragment),RPr=l(),cMe=a("span"),PPr=o("FlaxAutoModelForSequenceClassification"),Mje=l(),_r=a("div"),F(W8.$$.fragment),BPr=l(),zc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=a("a"),qPr=o("from_pretrained()"),NPr=o(" class method or the "),KY=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),Q8=a("p"),OPr=o("This class cannot be instantiated directly using "),fMe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Wt=a("div"),F(H8.$$.fragment),WPr=l(),mMe=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HPr=l(),Wc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(U5.$$.fragment),oBr=l(),Xr=a("div"),F(U8.$$.fragment),rBr=l(),hMe=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aBr=l(),vn=a("p"),nBr=o("The model class to instantiate is selected based on the "),pMe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),$e=a("ul"),J5=a("li"),bMe=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),eK=a("a"),pBr=o("FlaxAlbertForSequenceClassification"),_Br=o(" (ALBERT model)"),uBr=l(),Y5=a("li"),vMe=a("strong"),bBr=o("bart"),vBr=o(" \u2014 "),oK=a("a"),FBr=o("FlaxBartForSequenceClassification"),TBr=o(" (BART model)"),MBr=l(),K5=a("li"),FMe=a("strong"),EBr=o("bert"),CBr=o(" \u2014 "),rK=a("a"),wBr=o("FlaxBertForSequenceClassification"),ABr=o(" (BERT model)"),yBr=l(),Z5=a("li"),TMe=a("strong"),LBr=o("big_bird"),xBr=o(" \u2014 "),tK=a("a"),$Br=o("FlaxBigBirdForSequenceClassification"),kBr=o(" (BigBird model)"),SBr=l(),eC=a("li"),MMe=a("strong"),RBr=o("distilbert"),PBr=o(" \u2014 "),aK=a("a"),BBr=o("FlaxDistilBertForSequenceClassification"),IBr=o(" (DistilBERT model)"),qBr=l(),oC=a("li"),EMe=a("strong"),NBr=o("electra"),jBr=o(" \u2014 "),nK=a("a"),DBr=o("FlaxElectraForSequenceClassification"),GBr=o(" (ELECTRA model)"),OBr=l(),rC=a("li"),CMe=a("strong"),VBr=o("mbart"),XBr=o(" \u2014 "),sK=a("a"),zBr=o("FlaxMBartForSequenceClassification"),WBr=o(" (mBART model)"),QBr=l(),tC=a("li"),wMe=a("strong"),HBr=o("roberta"),UBr=o(" \u2014 "),lK=a("a"),JBr=o("FlaxRobertaForSequenceClassification"),YBr=o(" (RoBERTa model)"),KBr=l(),aC=a("li"),AMe=a("strong"),ZBr=o("roformer"),eIr=o(" \u2014 "),iK=a("a"),oIr=o("FlaxRoFormerForSequenceClassification"),rIr=o(" (RoFormer model)"),tIr=l(),nC=a("li"),yMe=a("strong"),aIr=o("xlm-roberta"),nIr=o(" \u2014 "),dK=a("a"),sIr=o("FlaxXLMRobertaForSequenceClassification"),lIr=o(" (XLM-RoBERTa model)"),iIr=l(),F(sC.$$.fragment),Eje=l(),Qc=a("h2"),lC=a("a"),LMe=a("span"),F(J8.$$.fragment),dIr=l(),xMe=a("span"),cIr=o("FlaxAutoModelForQuestionAnswering"),Cje=l(),ur=a("div"),F(Y8.$$.fragment),fIr=l(),Hc=a("p"),mIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),fK=a("a"),pIr=o("from_config()"),_Ir=o(` class
method.`),uIr=l(),K8=a("p"),bIr=o("This class cannot be instantiated directly using "),$Me=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),Qt=a("div"),F(Z8.$$.fragment),MIr=l(),kMe=a("p"),EIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CIr=l(),Uc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),AIr=o("not"),yIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),LIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(iC.$$.fragment),kIr=l(),zr=a("div"),F(ex.$$.fragment),SIr=l(),RMe=a("p"),RIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PIr=l(),Fn=a("p"),BIr=o("The model class to instantiate is selected based on the "),PMe=a("code"),IIr=o("model_type"),qIr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),NIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),ke=a("ul"),dC=a("li"),qMe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),gK=a("a"),zIr=o("FlaxAlbertForQuestionAnswering"),WIr=o(" (ALBERT model)"),QIr=l(),cC=a("li"),NMe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),hK=a("a"),JIr=o("FlaxBartForQuestionAnswering"),YIr=o(" (BART model)"),KIr=l(),fC=a("li"),jMe=a("strong"),ZIr=o("bert"),eqr=o(" \u2014 "),pK=a("a"),oqr=o("FlaxBertForQuestionAnswering"),rqr=o(" (BERT model)"),tqr=l(),mC=a("li"),DMe=a("strong"),aqr=o("big_bird"),nqr=o(" \u2014 "),_K=a("a"),sqr=o("FlaxBigBirdForQuestionAnswering"),lqr=o(" (BigBird model)"),iqr=l(),gC=a("li"),GMe=a("strong"),dqr=o("distilbert"),cqr=o(" \u2014 "),uK=a("a"),fqr=o("FlaxDistilBertForQuestionAnswering"),mqr=o(" (DistilBERT model)"),gqr=l(),hC=a("li"),OMe=a("strong"),hqr=o("electra"),pqr=o(" \u2014 "),bK=a("a"),_qr=o("FlaxElectraForQuestionAnswering"),uqr=o(" (ELECTRA model)"),bqr=l(),pC=a("li"),VMe=a("strong"),vqr=o("mbart"),Fqr=o(" \u2014 "),vK=a("a"),Tqr=o("FlaxMBartForQuestionAnswering"),Mqr=o(" (mBART model)"),Eqr=l(),_C=a("li"),XMe=a("strong"),Cqr=o("roberta"),wqr=o(" \u2014 "),FK=a("a"),Aqr=o("FlaxRobertaForQuestionAnswering"),yqr=o(" (RoBERTa model)"),Lqr=l(),uC=a("li"),zMe=a("strong"),xqr=o("roformer"),$qr=o(" \u2014 "),TK=a("a"),kqr=o("FlaxRoFormerForQuestionAnswering"),Sqr=o(" (RoFormer model)"),Rqr=l(),bC=a("li"),WMe=a("strong"),Pqr=o("xlm-roberta"),Bqr=o(" \u2014 "),MK=a("a"),Iqr=o("FlaxXLMRobertaForQuestionAnswering"),qqr=o(" (XLM-RoBERTa model)"),Nqr=l(),F(vC.$$.fragment),wje=l(),Jc=a("h2"),FC=a("a"),QMe=a("span"),F(ox.$$.fragment),jqr=l(),HMe=a("span"),Dqr=o("FlaxAutoModelForTokenClassification"),Aje=l(),br=a("div"),F(rx.$$.fragment),Gqr=l(),Yc=a("p"),Oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" class method or the "),CK=a("a"),zqr=o("from_config()"),Wqr=o(` class
method.`),Qqr=l(),tx=a("p"),Hqr=o("This class cannot be instantiated directly using "),UMe=a("code"),Uqr=o("__init__()"),Jqr=o(" (throws an error)."),Yqr=l(),Ht=a("div"),F(ax.$$.fragment),Kqr=l(),JMe=a("p"),Zqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eNr=l(),Kc=a("p"),oNr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),rNr=o("not"),tNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),aNr=o("from_pretrained()"),nNr=o(" to load the model weights."),sNr=l(),F(TC.$$.fragment),lNr=l(),Wr=a("div"),F(nx.$$.fragment),iNr=l(),KMe=a("p"),dNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cNr=l(),Tn=a("p"),fNr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),mNr=o("model_type"),gNr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),hNr=o("pretrained_model_name_or_path"),pNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),_Nr=o("pretrained_model_name_or_path"),uNr=o(":"),bNr=l(),Ge=a("ul"),MC=a("li"),r4e=a("strong"),vNr=o("albert"),FNr=o(" \u2014 "),AK=a("a"),TNr=o("FlaxAlbertForTokenClassification"),MNr=o(" (ALBERT model)"),ENr=l(),EC=a("li"),t4e=a("strong"),CNr=o("bert"),wNr=o(" \u2014 "),yK=a("a"),ANr=o("FlaxBertForTokenClassification"),yNr=o(" (BERT model)"),LNr=l(),CC=a("li"),a4e=a("strong"),xNr=o("big_bird"),$Nr=o(" \u2014 "),LK=a("a"),kNr=o("FlaxBigBirdForTokenClassification"),SNr=o(" (BigBird model)"),RNr=l(),wC=a("li"),n4e=a("strong"),PNr=o("distilbert"),BNr=o(" \u2014 "),xK=a("a"),INr=o("FlaxDistilBertForTokenClassification"),qNr=o(" (DistilBERT model)"),NNr=l(),AC=a("li"),s4e=a("strong"),jNr=o("electra"),DNr=o(" \u2014 "),$K=a("a"),GNr=o("FlaxElectraForTokenClassification"),ONr=o(" (ELECTRA model)"),VNr=l(),yC=a("li"),l4e=a("strong"),XNr=o("roberta"),zNr=o(" \u2014 "),kK=a("a"),WNr=o("FlaxRobertaForTokenClassification"),QNr=o(" (RoBERTa model)"),HNr=l(),LC=a("li"),i4e=a("strong"),UNr=o("roformer"),JNr=o(" \u2014 "),SK=a("a"),YNr=o("FlaxRoFormerForTokenClassification"),KNr=o(" (RoFormer model)"),ZNr=l(),xC=a("li"),d4e=a("strong"),ejr=o("xlm-roberta"),ojr=o(" \u2014 "),RK=a("a"),rjr=o("FlaxXLMRobertaForTokenClassification"),tjr=o(" (XLM-RoBERTa model)"),ajr=l(),F($C.$$.fragment),yje=l(),Zc=a("h2"),kC=a("a"),c4e=a("span"),F(sx.$$.fragment),njr=l(),f4e=a("span"),sjr=o("FlaxAutoModelForMultipleChoice"),Lje=l(),vr=a("div"),F(lx.$$.fragment),ljr=l(),ef=a("p"),ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=a("a"),djr=o("from_pretrained()"),cjr=o(" class method or the "),BK=a("a"),fjr=o("from_config()"),mjr=o(` class
method.`),gjr=l(),ix=a("p"),hjr=o("This class cannot be instantiated directly using "),m4e=a("code"),pjr=o("__init__()"),_jr=o(" (throws an error)."),ujr=l(),Ut=a("div"),F(dx.$$.fragment),bjr=l(),g4e=a("p"),vjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fjr=l(),of=a("p"),Tjr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),Mjr=o("not"),Ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),Cjr=o("from_pretrained()"),wjr=o(" to load the model weights."),Ajr=l(),F(SC.$$.fragment),yjr=l(),Qr=a("div"),F(cx.$$.fragment),Ljr=l(),p4e=a("p"),xjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$jr=l(),Mn=a("p"),kjr=o("The model class to instantiate is selected based on the "),_4e=a("code"),Sjr=o("model_type"),Rjr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(":"),Njr=l(),Oe=a("ul"),RC=a("li"),v4e=a("strong"),jjr=o("albert"),Djr=o(" \u2014 "),qK=a("a"),Gjr=o("FlaxAlbertForMultipleChoice"),Ojr=o(" (ALBERT model)"),Vjr=l(),PC=a("li"),F4e=a("strong"),Xjr=o("bert"),zjr=o(" \u2014 "),NK=a("a"),Wjr=o("FlaxBertForMultipleChoice"),Qjr=o(" (BERT model)"),Hjr=l(),BC=a("li"),T4e=a("strong"),Ujr=o("big_bird"),Jjr=o(" \u2014 "),jK=a("a"),Yjr=o("FlaxBigBirdForMultipleChoice"),Kjr=o(" (BigBird model)"),Zjr=l(),IC=a("li"),M4e=a("strong"),eDr=o("distilbert"),oDr=o(" \u2014 "),DK=a("a"),rDr=o("FlaxDistilBertForMultipleChoice"),tDr=o(" (DistilBERT model)"),aDr=l(),qC=a("li"),E4e=a("strong"),nDr=o("electra"),sDr=o(" \u2014 "),GK=a("a"),lDr=o("FlaxElectraForMultipleChoice"),iDr=o(" (ELECTRA model)"),dDr=l(),NC=a("li"),C4e=a("strong"),cDr=o("roberta"),fDr=o(" \u2014 "),OK=a("a"),mDr=o("FlaxRobertaForMultipleChoice"),gDr=o(" (RoBERTa model)"),hDr=l(),jC=a("li"),w4e=a("strong"),pDr=o("roformer"),_Dr=o(" \u2014 "),VK=a("a"),uDr=o("FlaxRoFormerForMultipleChoice"),bDr=o(" (RoFormer model)"),vDr=l(),DC=a("li"),A4e=a("strong"),FDr=o("xlm-roberta"),TDr=o(" \u2014 "),XK=a("a"),MDr=o("FlaxXLMRobertaForMultipleChoice"),EDr=o(" (XLM-RoBERTa model)"),CDr=l(),F(GC.$$.fragment),xje=l(),rf=a("h2"),OC=a("a"),y4e=a("span"),F(fx.$$.fragment),wDr=l(),L4e=a("span"),ADr=o("FlaxAutoModelForNextSentencePrediction"),$je=l(),Fr=a("div"),F(mx.$$.fragment),yDr=l(),tf=a("p"),LDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),WK=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),gx=a("p"),PDr=o("This class cannot be instantiated directly using "),x4e=a("code"),BDr=o("__init__()"),IDr=o(" (throws an error)."),qDr=l(),Jt=a("div"),F(hx.$$.fragment),NDr=l(),$4e=a("p"),jDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DDr=l(),af=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),WDr=l(),F(VC.$$.fragment),QDr=l(),Hr=a("div"),F(px.$$.fragment),HDr=l(),S4e=a("p"),UDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JDr=l(),En=a("p"),YDr=o("The model class to instantiate is selected based on the "),R4e=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),I4e=a("ul"),XC=a("li"),q4e=a("strong"),nGr=o("bert"),sGr=o(" \u2014 "),HK=a("a"),lGr=o("FlaxBertForNextSentencePrediction"),iGr=o(" (BERT model)"),dGr=l(),F(zC.$$.fragment),kje=l(),nf=a("h2"),WC=a("a"),N4e=a("span"),F(_x.$$.fragment),cGr=l(),j4e=a("span"),fGr=o("FlaxAutoModelForImageClassification"),Sje=l(),Tr=a("div"),F(ux.$$.fragment),mGr=l(),sf=a("p"),gGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=a("a"),hGr=o("from_pretrained()"),pGr=o(" class method or the "),JK=a("a"),_Gr=o("from_config()"),uGr=o(` class
method.`),bGr=l(),bx=a("p"),vGr=o("This class cannot be instantiated directly using "),D4e=a("code"),FGr=o("__init__()"),TGr=o(" (throws an error)."),MGr=l(),Yt=a("div"),F(vx.$$.fragment),EGr=l(),G4e=a("p"),CGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wGr=l(),lf=a("p"),AGr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),yGr=o("not"),LGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),xGr=o("from_pretrained()"),$Gr=o(" to load the model weights."),kGr=l(),F(QC.$$.fragment),SGr=l(),Ur=a("div"),F(Fx.$$.fragment),RGr=l(),V4e=a("p"),PGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BGr=l(),Cn=a("p"),IGr=o("The model class to instantiate is selected based on the "),X4e=a("code"),qGr=o("model_type"),NGr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(":"),VGr=l(),Tx=a("ul"),HC=a("li"),Q4e=a("strong"),XGr=o("beit"),zGr=o(" \u2014 "),KK=a("a"),WGr=o("FlaxBeitForImageClassification"),QGr=o(" (BEiT model)"),HGr=l(),UC=a("li"),H4e=a("strong"),UGr=o("vit"),JGr=o(" \u2014 "),ZK=a("a"),YGr=o("FlaxViTForImageClassification"),KGr=o(" (ViT model)"),ZGr=l(),F(JC.$$.fragment),Rje=l(),df=a("h2"),YC=a("a"),U4e=a("span"),F(Mx.$$.fragment),eOr=l(),J4e=a("span"),oOr=o("FlaxAutoModelForVision2Seq"),Pje=l(),Mr=a("div"),F(Ex.$$.fragment),rOr=l(),cf=a("p"),tOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=a("a"),aOr=o("from_pretrained()"),nOr=o(" class method or the "),oZ=a("a"),sOr=o("from_config()"),lOr=o(` class
method.`),iOr=l(),Cx=a("p"),dOr=o("This class cannot be instantiated directly using "),Y4e=a("code"),cOr=o("__init__()"),fOr=o(" (throws an error)."),mOr=l(),Kt=a("div"),F(wx.$$.fragment),gOr=l(),K4e=a("p"),hOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pOr=l(),ff=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),uOr=o("not"),bOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),vOr=o("from_pretrained()"),FOr=o(" to load the model weights."),TOr=l(),F(KC.$$.fragment),MOr=l(),Jr=a("div"),F(Ax.$$.fragment),EOr=l(),eEe=a("p"),COr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wOr=l(),wn=a("p"),AOr=o("The model class to instantiate is selected based on the "),oEe=a("code"),yOr=o("model_type"),LOr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),kOr=o("pretrained_model_name_or_path"),SOr=o(":"),ROr=l(),aEe=a("ul"),ZC=a("li"),nEe=a("strong"),POr=o("vision-encoder-decoder"),BOr=o(" \u2014 "),tZ=a("a"),IOr=o("FlaxVisionEncoderDecoderModel"),qOr=o(" (Vision Encoder decoder model)"),NOr=l(),F(e3.$$.fragment),this.h()},l(f){const u=ixt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var yx=s(p);m=n(yx,"A",{id:!0,class:!0,href:!0});var sEe=s(m);_=n(sEe,"SPAN",{});var lEe=s(_);T(d.$$.fragment,lEe),lEe.forEach(t),sEe.forEach(t),h=i(yx),Mo=n(yx,"SPAN",{});var iEe=s(Mo);fi=r(iEe,"Auto Classes"),iEe.forEach(t),yx.forEach(t),pf=i(f),rt=n(f,"P",{});var Lx=s(rt);mi=r(Lx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Lx,"CODE",{});var dEe=s(gi);b0=r(dEe,"from_pretrained()"),dEe.forEach(t),_f=r(Lx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Lx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var cEe=s(yn);v0=r(cEe,"AutoConfig"),cEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var fEe=s(xn);F0=r(fEe,"AutoModel"),fEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var mEe=s($n);T0=r(mEe,"AutoTokenizer"),mEe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var xx=s(Ae);D$=r(xx,"will create a model that is an instance of "),ui=n(xx,"A",{href:!0});var gEe=s(ui);G$=r(gEe,"BertModel"),gEe.forEach(t),O$=r(xx,"."),xx.forEach(t),Eo=i(f),wa=n(f,"P",{});var $x=s(wa);V$=r($x,"There is one class of "),bf=n($x,"CODE",{});var hEe=s(bf);X$=r(hEe,"AutoModel"),hEe.forEach(t),VGe=r($x," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$x.forEach(t),Sqe=i(f),bi=n(f,"H2",{class:!0});var kx=s(bi);vf=n(kx,"A",{id:!0,class:!0,href:!0});var pEe=s(vf);Jee=n(pEe,"SPAN",{});var _Ee=s(Jee);T(M0.$$.fragment,_Ee),_Ee.forEach(t),pEe.forEach(t),XGe=i(kx),Yee=n(kx,"SPAN",{});var uEe=s(Yee);zGe=r(uEe,"Extending the Auto Classes"),uEe.forEach(t),kx.forEach(t),Rqe=i(f),kn=n(f,"P",{});var mf=s(kn);WGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=n(mf,"CODE",{});var bEe=s(Kee);QGe=r(bEe,"NewModel"),bEe.forEach(t),HGe=r(mf,", make sure you have a "),Zee=n(mf,"CODE",{});var vEe=s(Zee);UGe=r(vEe,"NewModelConfig"),vEe.forEach(t),JGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Pqe=i(f),T(E0.$$.fragment,f),Bqe=i(f),z$=n(f,"P",{});var FEe=s(z$);YGe=r(FEe,"You will then be able to use the auto classes like you would usually do!"),FEe.forEach(t),Iqe=i(f),T(Ff.$$.fragment,f),qqe=i(f),vi=n(f,"H2",{class:!0});var Sx=s(vi);Tf=n(Sx,"A",{id:!0,class:!0,href:!0});var TEe=s(Tf);eoe=n(TEe,"SPAN",{});var MEe=s(eoe);T(C0.$$.fragment,MEe),MEe.forEach(t),TEe.forEach(t),KGe=i(Sx),ooe=n(Sx,"SPAN",{});var EEe=s(ooe);ZGe=r(EEe,"AutoConfig"),EEe.forEach(t),Sx.forEach(t),Nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(w0.$$.fragment,et),eOe=i(et),A0=n(et,"P",{});var Rx=s(A0);oOe=r(Rx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=n(Rx,"A",{href:!0});var CEe=s(W$);rOe=r(CEe,"from_pretrained()"),CEe.forEach(t),tOe=r(Rx," class method."),Rx.forEach(t),aOe=i(et),y0=n(et,"P",{});var Px=s(y0);nOe=r(Px,"This class cannot be instantiated directly using "),roe=n(Px,"CODE",{});var wEe=s(roe);sOe=r(wEe,"__init__()"),wEe.forEach(t),lOe=r(Px," (throws an error)."),Px.forEach(t),iOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(L0.$$.fragment,ot),dOe=i(ot),toe=n(ot,"P",{});var AEe=s(toe);cOe=r(AEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),AEe.forEach(t),fOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);mOe=r(gf,"The configuration class to instantiate is selected based on the "),aoe=n(gf,"CODE",{});var yEe=s(aoe);gOe=r(yEe,"model_type"),yEe.forEach(t),hOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=n(gf,"CODE",{});var LEe=s(noe);pOe=r(LEe,"pretrained_model_name_or_path"),LEe.forEach(t),_Oe=r(gf,":"),gf.forEach(t),uOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var o3=s(Mf);soe=n(o3,"STRONG",{});var xEe=s(soe);bOe=r(xEe,"albert"),xEe.forEach(t),vOe=r(o3," \u2014 "),Q$=n(o3,"A",{href:!0});var $Ee=s(Q$);FOe=r($Ee,"AlbertConfig"),$Ee.forEach(t),TOe=r(o3," (ALBERT model)"),o3.forEach(t),MOe=i(y),Ef=n(y,"LI",{});var r3=s(Ef);loe=n(r3,"STRONG",{});var kEe=s(loe);EOe=r(kEe,"bart"),kEe.forEach(t),COe=r(r3," \u2014 "),H$=n(r3,"A",{href:!0});var SEe=s(H$);wOe=r(SEe,"BartConfig"),SEe.forEach(t),AOe=r(r3," (BART model)"),r3.forEach(t),yOe=i(y),Cf=n(y,"LI",{});var t3=s(Cf);ioe=n(t3,"STRONG",{});var REe=s(ioe);LOe=r(REe,"beit"),REe.forEach(t),xOe=r(t3," \u2014 "),U$=n(t3,"A",{href:!0});var PEe=s(U$);$Oe=r(PEe,"BeitConfig"),PEe.forEach(t),kOe=r(t3," (BEiT model)"),t3.forEach(t),SOe=i(y),wf=n(y,"LI",{});var a3=s(wf);doe=n(a3,"STRONG",{});var BEe=s(doe);ROe=r(BEe,"bert"),BEe.forEach(t),POe=r(a3," \u2014 "),J$=n(a3,"A",{href:!0});var IEe=s(J$);BOe=r(IEe,"BertConfig"),IEe.forEach(t),IOe=r(a3," (BERT model)"),a3.forEach(t),qOe=i(y),Af=n(y,"LI",{});var n3=s(Af);coe=n(n3,"STRONG",{});var qEe=s(coe);NOe=r(qEe,"bert-generation"),qEe.forEach(t),jOe=r(n3," \u2014 "),Y$=n(n3,"A",{href:!0});var NEe=s(Y$);DOe=r(NEe,"BertGenerationConfig"),NEe.forEach(t),GOe=r(n3," (Bert Generation model)"),n3.forEach(t),OOe=i(y),yf=n(y,"LI",{});var s3=s(yf);foe=n(s3,"STRONG",{});var jEe=s(foe);VOe=r(jEe,"big_bird"),jEe.forEach(t),XOe=r(s3," \u2014 "),K$=n(s3,"A",{href:!0});var DEe=s(K$);zOe=r(DEe,"BigBirdConfig"),DEe.forEach(t),WOe=r(s3," (BigBird model)"),s3.forEach(t),QOe=i(y),Lf=n(y,"LI",{});var l3=s(Lf);moe=n(l3,"STRONG",{});var GEe=s(moe);HOe=r(GEe,"bigbird_pegasus"),GEe.forEach(t),UOe=r(l3," \u2014 "),Z$=n(l3,"A",{href:!0});var OEe=s(Z$);JOe=r(OEe,"BigBirdPegasusConfig"),OEe.forEach(t),YOe=r(l3," (BigBirdPegasus model)"),l3.forEach(t),KOe=i(y),xf=n(y,"LI",{});var i3=s(xf);goe=n(i3,"STRONG",{});var VEe=s(goe);ZOe=r(VEe,"blenderbot"),VEe.forEach(t),eVe=r(i3," \u2014 "),ek=n(i3,"A",{href:!0});var XEe=s(ek);oVe=r(XEe,"BlenderbotConfig"),XEe.forEach(t),rVe=r(i3," (Blenderbot model)"),i3.forEach(t),tVe=i(y),$f=n(y,"LI",{});var d3=s($f);hoe=n(d3,"STRONG",{});var zEe=s(hoe);aVe=r(zEe,"blenderbot-small"),zEe.forEach(t),nVe=r(d3," \u2014 "),ok=n(d3,"A",{href:!0});var WEe=s(ok);sVe=r(WEe,"BlenderbotSmallConfig"),WEe.forEach(t),lVe=r(d3," (BlenderbotSmall model)"),d3.forEach(t),iVe=i(y),kf=n(y,"LI",{});var c3=s(kf);poe=n(c3,"STRONG",{});var QEe=s(poe);dVe=r(QEe,"camembert"),QEe.forEach(t),cVe=r(c3," \u2014 "),rk=n(c3,"A",{href:!0});var HEe=s(rk);fVe=r(HEe,"CamembertConfig"),HEe.forEach(t),mVe=r(c3," (CamemBERT model)"),c3.forEach(t),gVe=i(y),Sf=n(y,"LI",{});var f3=s(Sf);_oe=n(f3,"STRONG",{});var UEe=s(_oe);hVe=r(UEe,"canine"),UEe.forEach(t),pVe=r(f3," \u2014 "),tk=n(f3,"A",{href:!0});var JEe=s(tk);_Ve=r(JEe,"CanineConfig"),JEe.forEach(t),uVe=r(f3," (Canine model)"),f3.forEach(t),bVe=i(y),Rf=n(y,"LI",{});var m3=s(Rf);uoe=n(m3,"STRONG",{});var YEe=s(uoe);vVe=r(YEe,"clip"),YEe.forEach(t),FVe=r(m3," \u2014 "),ak=n(m3,"A",{href:!0});var KEe=s(ak);TVe=r(KEe,"CLIPConfig"),KEe.forEach(t),MVe=r(m3," (CLIP model)"),m3.forEach(t),EVe=i(y),Pf=n(y,"LI",{});var g3=s(Pf);boe=n(g3,"STRONG",{});var ZEe=s(boe);CVe=r(ZEe,"convbert"),ZEe.forEach(t),wVe=r(g3," \u2014 "),nk=n(g3,"A",{href:!0});var e5e=s(nk);AVe=r(e5e,"ConvBertConfig"),e5e.forEach(t),yVe=r(g3," (ConvBERT model)"),g3.forEach(t),LVe=i(y),Bf=n(y,"LI",{});var h3=s(Bf);voe=n(h3,"STRONG",{});var o5e=s(voe);xVe=r(o5e,"convnext"),o5e.forEach(t),$Ve=r(h3," \u2014 "),sk=n(h3,"A",{href:!0});var r5e=s(sk);kVe=r(r5e,"ConvNextConfig"),r5e.forEach(t),SVe=r(h3," (ConvNext model)"),h3.forEach(t),RVe=i(y),If=n(y,"LI",{});var p3=s(If);Foe=n(p3,"STRONG",{});var t5e=s(Foe);PVe=r(t5e,"ctrl"),t5e.forEach(t),BVe=r(p3," \u2014 "),lk=n(p3,"A",{href:!0});var a5e=s(lk);IVe=r(a5e,"CTRLConfig"),a5e.forEach(t),qVe=r(p3," (CTRL model)"),p3.forEach(t),NVe=i(y),qf=n(y,"LI",{});var _3=s(qf);Toe=n(_3,"STRONG",{});var n5e=s(Toe);jVe=r(n5e,"cvt"),n5e.forEach(t),DVe=r(_3," \u2014 "),ik=n(_3,"A",{href:!0});var s5e=s(ik);GVe=r(s5e,"CvtConfig"),s5e.forEach(t),OVe=r(_3," (CvT model)"),_3.forEach(t),VVe=i(y),Nf=n(y,"LI",{});var u3=s(Nf);Moe=n(u3,"STRONG",{});var l5e=s(Moe);XVe=r(l5e,"data2vec-audio"),l5e.forEach(t),zVe=r(u3," \u2014 "),dk=n(u3,"A",{href:!0});var i5e=s(dk);WVe=r(i5e,"Data2VecAudioConfig"),i5e.forEach(t),QVe=r(u3," (Data2VecAudio model)"),u3.forEach(t),HVe=i(y),jf=n(y,"LI",{});var b3=s(jf);Eoe=n(b3,"STRONG",{});var d5e=s(Eoe);UVe=r(d5e,"data2vec-text"),d5e.forEach(t),JVe=r(b3," \u2014 "),ck=n(b3,"A",{href:!0});var c5e=s(ck);YVe=r(c5e,"Data2VecTextConfig"),c5e.forEach(t),KVe=r(b3," (Data2VecText model)"),b3.forEach(t),ZVe=i(y),Df=n(y,"LI",{});var v3=s(Df);Coe=n(v3,"STRONG",{});var f5e=s(Coe);eXe=r(f5e,"data2vec-vision"),f5e.forEach(t),oXe=r(v3," \u2014 "),fk=n(v3,"A",{href:!0});var m5e=s(fk);rXe=r(m5e,"Data2VecVisionConfig"),m5e.forEach(t),tXe=r(v3," (Data2VecVision model)"),v3.forEach(t),aXe=i(y),Gf=n(y,"LI",{});var F3=s(Gf);woe=n(F3,"STRONG",{});var g5e=s(woe);nXe=r(g5e,"deberta"),g5e.forEach(t),sXe=r(F3," \u2014 "),mk=n(F3,"A",{href:!0});var h5e=s(mk);lXe=r(h5e,"DebertaConfig"),h5e.forEach(t),iXe=r(F3," (DeBERTa model)"),F3.forEach(t),dXe=i(y),Of=n(y,"LI",{});var T3=s(Of);Aoe=n(T3,"STRONG",{});var p5e=s(Aoe);cXe=r(p5e,"deberta-v2"),p5e.forEach(t),fXe=r(T3," \u2014 "),gk=n(T3,"A",{href:!0});var _5e=s(gk);mXe=r(_5e,"DebertaV2Config"),_5e.forEach(t),gXe=r(T3," (DeBERTa-v2 model)"),T3.forEach(t),hXe=i(y),Vf=n(y,"LI",{});var M3=s(Vf);yoe=n(M3,"STRONG",{});var u5e=s(yoe);pXe=r(u5e,"decision_transformer"),u5e.forEach(t),_Xe=r(M3," \u2014 "),hk=n(M3,"A",{href:!0});var b5e=s(hk);uXe=r(b5e,"DecisionTransformerConfig"),b5e.forEach(t),bXe=r(M3," (Decision Transformer model)"),M3.forEach(t),vXe=i(y),Xf=n(y,"LI",{});var E3=s(Xf);Loe=n(E3,"STRONG",{});var v5e=s(Loe);FXe=r(v5e,"deit"),v5e.forEach(t),TXe=r(E3," \u2014 "),pk=n(E3,"A",{href:!0});var DOr=s(pk);MXe=r(DOr,"DeiTConfig"),DOr.forEach(t),EXe=r(E3," (DeiT model)"),E3.forEach(t),CXe=i(y),zf=n(y,"LI",{});var F5e=s(zf);xoe=n(F5e,"STRONG",{});var GOr=s(xoe);wXe=r(GOr,"detr"),GOr.forEach(t),AXe=r(F5e," \u2014 "),_k=n(F5e,"A",{href:!0});var OOr=s(_k);yXe=r(OOr,"DetrConfig"),OOr.forEach(t),LXe=r(F5e," (DETR model)"),F5e.forEach(t),xXe=i(y),Wf=n(y,"LI",{});var T5e=s(Wf);$oe=n(T5e,"STRONG",{});var VOr=s($oe);$Xe=r(VOr,"distilbert"),VOr.forEach(t),kXe=r(T5e," \u2014 "),uk=n(T5e,"A",{href:!0});var XOr=s(uk);SXe=r(XOr,"DistilBertConfig"),XOr.forEach(t),RXe=r(T5e," (DistilBERT model)"),T5e.forEach(t),PXe=i(y),Qf=n(y,"LI",{});var M5e=s(Qf);koe=n(M5e,"STRONG",{});var zOr=s(koe);BXe=r(zOr,"dpr"),zOr.forEach(t),IXe=r(M5e," \u2014 "),bk=n(M5e,"A",{href:!0});var WOr=s(bk);qXe=r(WOr,"DPRConfig"),WOr.forEach(t),NXe=r(M5e," (DPR model)"),M5e.forEach(t),jXe=i(y),Hf=n(y,"LI",{});var E5e=s(Hf);Soe=n(E5e,"STRONG",{});var QOr=s(Soe);DXe=r(QOr,"dpt"),QOr.forEach(t),GXe=r(E5e," \u2014 "),vk=n(E5e,"A",{href:!0});var HOr=s(vk);OXe=r(HOr,"DPTConfig"),HOr.forEach(t),VXe=r(E5e," (DPT model)"),E5e.forEach(t),XXe=i(y),Uf=n(y,"LI",{});var C5e=s(Uf);Roe=n(C5e,"STRONG",{});var UOr=s(Roe);zXe=r(UOr,"electra"),UOr.forEach(t),WXe=r(C5e," \u2014 "),Fk=n(C5e,"A",{href:!0});var JOr=s(Fk);QXe=r(JOr,"ElectraConfig"),JOr.forEach(t),HXe=r(C5e," (ELECTRA model)"),C5e.forEach(t),UXe=i(y),Jf=n(y,"LI",{});var w5e=s(Jf);Poe=n(w5e,"STRONG",{});var YOr=s(Poe);JXe=r(YOr,"encoder-decoder"),YOr.forEach(t),YXe=r(w5e," \u2014 "),Tk=n(w5e,"A",{href:!0});var KOr=s(Tk);KXe=r(KOr,"EncoderDecoderConfig"),KOr.forEach(t),ZXe=r(w5e," (Encoder decoder model)"),w5e.forEach(t),eze=i(y),Yf=n(y,"LI",{});var A5e=s(Yf);Boe=n(A5e,"STRONG",{});var ZOr=s(Boe);oze=r(ZOr,"flaubert"),ZOr.forEach(t),rze=r(A5e," \u2014 "),Mk=n(A5e,"A",{href:!0});var eVr=s(Mk);tze=r(eVr,"FlaubertConfig"),eVr.forEach(t),aze=r(A5e," (FlauBERT model)"),A5e.forEach(t),nze=i(y),Kf=n(y,"LI",{});var y5e=s(Kf);Ioe=n(y5e,"STRONG",{});var oVr=s(Ioe);sze=r(oVr,"flava"),oVr.forEach(t),lze=r(y5e," \u2014 "),Ek=n(y5e,"A",{href:!0});var rVr=s(Ek);ize=r(rVr,"FlavaConfig"),rVr.forEach(t),dze=r(y5e," (Flava model)"),y5e.forEach(t),cze=i(y),Zf=n(y,"LI",{});var L5e=s(Zf);qoe=n(L5e,"STRONG",{});var tVr=s(qoe);fze=r(tVr,"fnet"),tVr.forEach(t),mze=r(L5e," \u2014 "),Ck=n(L5e,"A",{href:!0});var aVr=s(Ck);gze=r(aVr,"FNetConfig"),aVr.forEach(t),hze=r(L5e," (FNet model)"),L5e.forEach(t),pze=i(y),em=n(y,"LI",{});var x5e=s(em);Noe=n(x5e,"STRONG",{});var nVr=s(Noe);_ze=r(nVr,"fsmt"),nVr.forEach(t),uze=r(x5e," \u2014 "),wk=n(x5e,"A",{href:!0});var sVr=s(wk);bze=r(sVr,"FSMTConfig"),sVr.forEach(t),vze=r(x5e," (FairSeq Machine-Translation model)"),x5e.forEach(t),Fze=i(y),om=n(y,"LI",{});var $5e=s(om);joe=n($5e,"STRONG",{});var lVr=s(joe);Tze=r(lVr,"funnel"),lVr.forEach(t),Mze=r($5e," \u2014 "),Ak=n($5e,"A",{href:!0});var iVr=s(Ak);Eze=r(iVr,"FunnelConfig"),iVr.forEach(t),Cze=r($5e," (Funnel Transformer model)"),$5e.forEach(t),wze=i(y),rm=n(y,"LI",{});var k5e=s(rm);Doe=n(k5e,"STRONG",{});var dVr=s(Doe);Aze=r(dVr,"glpn"),dVr.forEach(t),yze=r(k5e," \u2014 "),yk=n(k5e,"A",{href:!0});var cVr=s(yk);Lze=r(cVr,"GLPNConfig"),cVr.forEach(t),xze=r(k5e," (GLPN model)"),k5e.forEach(t),$ze=i(y),tm=n(y,"LI",{});var S5e=s(tm);Goe=n(S5e,"STRONG",{});var fVr=s(Goe);kze=r(fVr,"gpt2"),fVr.forEach(t),Sze=r(S5e," \u2014 "),Lk=n(S5e,"A",{href:!0});var mVr=s(Lk);Rze=r(mVr,"GPT2Config"),mVr.forEach(t),Pze=r(S5e," (OpenAI GPT-2 model)"),S5e.forEach(t),Bze=i(y),am=n(y,"LI",{});var R5e=s(am);Ooe=n(R5e,"STRONG",{});var gVr=s(Ooe);Ize=r(gVr,"gpt_neo"),gVr.forEach(t),qze=r(R5e," \u2014 "),xk=n(R5e,"A",{href:!0});var hVr=s(xk);Nze=r(hVr,"GPTNeoConfig"),hVr.forEach(t),jze=r(R5e," (GPT Neo model)"),R5e.forEach(t),Dze=i(y),nm=n(y,"LI",{});var P5e=s(nm);Voe=n(P5e,"STRONG",{});var pVr=s(Voe);Gze=r(pVr,"gptj"),pVr.forEach(t),Oze=r(P5e," \u2014 "),$k=n(P5e,"A",{href:!0});var _Vr=s($k);Vze=r(_Vr,"GPTJConfig"),_Vr.forEach(t),Xze=r(P5e," (GPT-J model)"),P5e.forEach(t),zze=i(y),sm=n(y,"LI",{});var B5e=s(sm);Xoe=n(B5e,"STRONG",{});var uVr=s(Xoe);Wze=r(uVr,"hubert"),uVr.forEach(t),Qze=r(B5e," \u2014 "),kk=n(B5e,"A",{href:!0});var bVr=s(kk);Hze=r(bVr,"HubertConfig"),bVr.forEach(t),Uze=r(B5e," (Hubert model)"),B5e.forEach(t),Jze=i(y),lm=n(y,"LI",{});var I5e=s(lm);zoe=n(I5e,"STRONG",{});var vVr=s(zoe);Yze=r(vVr,"ibert"),vVr.forEach(t),Kze=r(I5e," \u2014 "),Sk=n(I5e,"A",{href:!0});var FVr=s(Sk);Zze=r(FVr,"IBertConfig"),FVr.forEach(t),eWe=r(I5e," (I-BERT model)"),I5e.forEach(t),oWe=i(y),im=n(y,"LI",{});var q5e=s(im);Woe=n(q5e,"STRONG",{});var TVr=s(Woe);rWe=r(TVr,"imagegpt"),TVr.forEach(t),tWe=r(q5e," \u2014 "),Rk=n(q5e,"A",{href:!0});var MVr=s(Rk);aWe=r(MVr,"ImageGPTConfig"),MVr.forEach(t),nWe=r(q5e," (ImageGPT model)"),q5e.forEach(t),sWe=i(y),dm=n(y,"LI",{});var N5e=s(dm);Qoe=n(N5e,"STRONG",{});var EVr=s(Qoe);lWe=r(EVr,"layoutlm"),EVr.forEach(t),iWe=r(N5e," \u2014 "),Pk=n(N5e,"A",{href:!0});var CVr=s(Pk);dWe=r(CVr,"LayoutLMConfig"),CVr.forEach(t),cWe=r(N5e," (LayoutLM model)"),N5e.forEach(t),fWe=i(y),cm=n(y,"LI",{});var j5e=s(cm);Hoe=n(j5e,"STRONG",{});var wVr=s(Hoe);mWe=r(wVr,"layoutlmv2"),wVr.forEach(t),gWe=r(j5e," \u2014 "),Bk=n(j5e,"A",{href:!0});var AVr=s(Bk);hWe=r(AVr,"LayoutLMv2Config"),AVr.forEach(t),pWe=r(j5e," (LayoutLMv2 model)"),j5e.forEach(t),_We=i(y),fm=n(y,"LI",{});var D5e=s(fm);Uoe=n(D5e,"STRONG",{});var yVr=s(Uoe);uWe=r(yVr,"led"),yVr.forEach(t),bWe=r(D5e," \u2014 "),Ik=n(D5e,"A",{href:!0});var LVr=s(Ik);vWe=r(LVr,"LEDConfig"),LVr.forEach(t),FWe=r(D5e," (LED model)"),D5e.forEach(t),TWe=i(y),mm=n(y,"LI",{});var G5e=s(mm);Joe=n(G5e,"STRONG",{});var xVr=s(Joe);MWe=r(xVr,"longformer"),xVr.forEach(t),EWe=r(G5e," \u2014 "),qk=n(G5e,"A",{href:!0});var $Vr=s(qk);CWe=r($Vr,"LongformerConfig"),$Vr.forEach(t),wWe=r(G5e," (Longformer model)"),G5e.forEach(t),AWe=i(y),gm=n(y,"LI",{});var O5e=s(gm);Yoe=n(O5e,"STRONG",{});var kVr=s(Yoe);yWe=r(kVr,"longt5"),kVr.forEach(t),LWe=r(O5e," \u2014 "),Nk=n(O5e,"A",{href:!0});var SVr=s(Nk);xWe=r(SVr,"LongT5Config"),SVr.forEach(t),$We=r(O5e," (LongT5 model)"),O5e.forEach(t),kWe=i(y),hm=n(y,"LI",{});var V5e=s(hm);Koe=n(V5e,"STRONG",{});var RVr=s(Koe);SWe=r(RVr,"luke"),RVr.forEach(t),RWe=r(V5e," \u2014 "),jk=n(V5e,"A",{href:!0});var PVr=s(jk);PWe=r(PVr,"LukeConfig"),PVr.forEach(t),BWe=r(V5e," (LUKE model)"),V5e.forEach(t),IWe=i(y),pm=n(y,"LI",{});var X5e=s(pm);Zoe=n(X5e,"STRONG",{});var BVr=s(Zoe);qWe=r(BVr,"lxmert"),BVr.forEach(t),NWe=r(X5e," \u2014 "),Dk=n(X5e,"A",{href:!0});var IVr=s(Dk);jWe=r(IVr,"LxmertConfig"),IVr.forEach(t),DWe=r(X5e," (LXMERT model)"),X5e.forEach(t),GWe=i(y),_m=n(y,"LI",{});var z5e=s(_m);ere=n(z5e,"STRONG",{});var qVr=s(ere);OWe=r(qVr,"m2m_100"),qVr.forEach(t),VWe=r(z5e," \u2014 "),Gk=n(z5e,"A",{href:!0});var NVr=s(Gk);XWe=r(NVr,"M2M100Config"),NVr.forEach(t),zWe=r(z5e," (M2M100 model)"),z5e.forEach(t),WWe=i(y),um=n(y,"LI",{});var W5e=s(um);ore=n(W5e,"STRONG",{});var jVr=s(ore);QWe=r(jVr,"marian"),jVr.forEach(t),HWe=r(W5e," \u2014 "),Ok=n(W5e,"A",{href:!0});var DVr=s(Ok);UWe=r(DVr,"MarianConfig"),DVr.forEach(t),JWe=r(W5e," (Marian model)"),W5e.forEach(t),YWe=i(y),bm=n(y,"LI",{});var Q5e=s(bm);rre=n(Q5e,"STRONG",{});var GVr=s(rre);KWe=r(GVr,"maskformer"),GVr.forEach(t),ZWe=r(Q5e," \u2014 "),Vk=n(Q5e,"A",{href:!0});var OVr=s(Vk);eQe=r(OVr,"MaskFormerConfig"),OVr.forEach(t),oQe=r(Q5e," (MaskFormer model)"),Q5e.forEach(t),rQe=i(y),vm=n(y,"LI",{});var H5e=s(vm);tre=n(H5e,"STRONG",{});var VVr=s(tre);tQe=r(VVr,"mbart"),VVr.forEach(t),aQe=r(H5e," \u2014 "),Xk=n(H5e,"A",{href:!0});var XVr=s(Xk);nQe=r(XVr,"MBartConfig"),XVr.forEach(t),sQe=r(H5e," (mBART model)"),H5e.forEach(t),lQe=i(y),Fm=n(y,"LI",{});var U5e=s(Fm);are=n(U5e,"STRONG",{});var zVr=s(are);iQe=r(zVr,"megatron-bert"),zVr.forEach(t),dQe=r(U5e," \u2014 "),zk=n(U5e,"A",{href:!0});var WVr=s(zk);cQe=r(WVr,"MegatronBertConfig"),WVr.forEach(t),fQe=r(U5e," (MegatronBert model)"),U5e.forEach(t),mQe=i(y),Tm=n(y,"LI",{});var J5e=s(Tm);nre=n(J5e,"STRONG",{});var QVr=s(nre);gQe=r(QVr,"mobilebert"),QVr.forEach(t),hQe=r(J5e," \u2014 "),Wk=n(J5e,"A",{href:!0});var HVr=s(Wk);pQe=r(HVr,"MobileBertConfig"),HVr.forEach(t),_Qe=r(J5e," (MobileBERT model)"),J5e.forEach(t),uQe=i(y),Mm=n(y,"LI",{});var Y5e=s(Mm);sre=n(Y5e,"STRONG",{});var UVr=s(sre);bQe=r(UVr,"mpnet"),UVr.forEach(t),vQe=r(Y5e," \u2014 "),Qk=n(Y5e,"A",{href:!0});var JVr=s(Qk);FQe=r(JVr,"MPNetConfig"),JVr.forEach(t),TQe=r(Y5e," (MPNet model)"),Y5e.forEach(t),MQe=i(y),Em=n(y,"LI",{});var K5e=s(Em);lre=n(K5e,"STRONG",{});var YVr=s(lre);EQe=r(YVr,"mt5"),YVr.forEach(t),CQe=r(K5e," \u2014 "),Hk=n(K5e,"A",{href:!0});var KVr=s(Hk);wQe=r(KVr,"MT5Config"),KVr.forEach(t),AQe=r(K5e," (mT5 model)"),K5e.forEach(t),yQe=i(y),Cm=n(y,"LI",{});var Z5e=s(Cm);ire=n(Z5e,"STRONG",{});var ZVr=s(ire);LQe=r(ZVr,"nystromformer"),ZVr.forEach(t),xQe=r(Z5e," \u2014 "),Uk=n(Z5e,"A",{href:!0});var eXr=s(Uk);$Qe=r(eXr,"NystromformerConfig"),eXr.forEach(t),kQe=r(Z5e," (Nystromformer model)"),Z5e.forEach(t),SQe=i(y),wm=n(y,"LI",{});var eCe=s(wm);dre=n(eCe,"STRONG",{});var oXr=s(dre);RQe=r(oXr,"openai-gpt"),oXr.forEach(t),PQe=r(eCe," \u2014 "),Jk=n(eCe,"A",{href:!0});var rXr=s(Jk);BQe=r(rXr,"OpenAIGPTConfig"),rXr.forEach(t),IQe=r(eCe," (OpenAI GPT model)"),eCe.forEach(t),qQe=i(y),Am=n(y,"LI",{});var oCe=s(Am);cre=n(oCe,"STRONG",{});var tXr=s(cre);NQe=r(tXr,"opt"),tXr.forEach(t),jQe=r(oCe," \u2014 "),Yk=n(oCe,"A",{href:!0});var aXr=s(Yk);DQe=r(aXr,"OPTConfig"),aXr.forEach(t),GQe=r(oCe," (OPT model)"),oCe.forEach(t),OQe=i(y),ym=n(y,"LI",{});var rCe=s(ym);fre=n(rCe,"STRONG",{});var nXr=s(fre);VQe=r(nXr,"pegasus"),nXr.forEach(t),XQe=r(rCe," \u2014 "),Kk=n(rCe,"A",{href:!0});var sXr=s(Kk);zQe=r(sXr,"PegasusConfig"),sXr.forEach(t),WQe=r(rCe," (Pegasus model)"),rCe.forEach(t),QQe=i(y),Lm=n(y,"LI",{});var tCe=s(Lm);mre=n(tCe,"STRONG",{});var lXr=s(mre);HQe=r(lXr,"perceiver"),lXr.forEach(t),UQe=r(tCe," \u2014 "),Zk=n(tCe,"A",{href:!0});var iXr=s(Zk);JQe=r(iXr,"PerceiverConfig"),iXr.forEach(t),YQe=r(tCe," (Perceiver model)"),tCe.forEach(t),KQe=i(y),xm=n(y,"LI",{});var aCe=s(xm);gre=n(aCe,"STRONG",{});var dXr=s(gre);ZQe=r(dXr,"plbart"),dXr.forEach(t),eHe=r(aCe," \u2014 "),eS=n(aCe,"A",{href:!0});var cXr=s(eS);oHe=r(cXr,"PLBartConfig"),cXr.forEach(t),rHe=r(aCe," (PLBart model)"),aCe.forEach(t),tHe=i(y),$m=n(y,"LI",{});var nCe=s($m);hre=n(nCe,"STRONG",{});var fXr=s(hre);aHe=r(fXr,"poolformer"),fXr.forEach(t),nHe=r(nCe," \u2014 "),oS=n(nCe,"A",{href:!0});var mXr=s(oS);sHe=r(mXr,"PoolFormerConfig"),mXr.forEach(t),lHe=r(nCe," (PoolFormer model)"),nCe.forEach(t),iHe=i(y),km=n(y,"LI",{});var sCe=s(km);pre=n(sCe,"STRONG",{});var gXr=s(pre);dHe=r(gXr,"prophetnet"),gXr.forEach(t),cHe=r(sCe," \u2014 "),rS=n(sCe,"A",{href:!0});var hXr=s(rS);fHe=r(hXr,"ProphetNetConfig"),hXr.forEach(t),mHe=r(sCe," (ProphetNet model)"),sCe.forEach(t),gHe=i(y),Sm=n(y,"LI",{});var lCe=s(Sm);_re=n(lCe,"STRONG",{});var pXr=s(_re);hHe=r(pXr,"qdqbert"),pXr.forEach(t),pHe=r(lCe," \u2014 "),tS=n(lCe,"A",{href:!0});var _Xr=s(tS);_He=r(_Xr,"QDQBertConfig"),_Xr.forEach(t),uHe=r(lCe," (QDQBert model)"),lCe.forEach(t),bHe=i(y),Rm=n(y,"LI",{});var iCe=s(Rm);ure=n(iCe,"STRONG",{});var uXr=s(ure);vHe=r(uXr,"rag"),uXr.forEach(t),FHe=r(iCe," \u2014 "),aS=n(iCe,"A",{href:!0});var bXr=s(aS);THe=r(bXr,"RagConfig"),bXr.forEach(t),MHe=r(iCe," (RAG model)"),iCe.forEach(t),EHe=i(y),Pm=n(y,"LI",{});var dCe=s(Pm);bre=n(dCe,"STRONG",{});var vXr=s(bre);CHe=r(vXr,"realm"),vXr.forEach(t),wHe=r(dCe," \u2014 "),nS=n(dCe,"A",{href:!0});var FXr=s(nS);AHe=r(FXr,"RealmConfig"),FXr.forEach(t),yHe=r(dCe," (Realm model)"),dCe.forEach(t),LHe=i(y),Bm=n(y,"LI",{});var cCe=s(Bm);vre=n(cCe,"STRONG",{});var TXr=s(vre);xHe=r(TXr,"reformer"),TXr.forEach(t),$He=r(cCe," \u2014 "),sS=n(cCe,"A",{href:!0});var MXr=s(sS);kHe=r(MXr,"ReformerConfig"),MXr.forEach(t),SHe=r(cCe," (Reformer model)"),cCe.forEach(t),RHe=i(y),Im=n(y,"LI",{});var fCe=s(Im);Fre=n(fCe,"STRONG",{});var EXr=s(Fre);PHe=r(EXr,"regnet"),EXr.forEach(t),BHe=r(fCe," \u2014 "),lS=n(fCe,"A",{href:!0});var CXr=s(lS);IHe=r(CXr,"RegNetConfig"),CXr.forEach(t),qHe=r(fCe," (RegNet model)"),fCe.forEach(t),NHe=i(y),qm=n(y,"LI",{});var mCe=s(qm);Tre=n(mCe,"STRONG",{});var wXr=s(Tre);jHe=r(wXr,"rembert"),wXr.forEach(t),DHe=r(mCe," \u2014 "),iS=n(mCe,"A",{href:!0});var AXr=s(iS);GHe=r(AXr,"RemBertConfig"),AXr.forEach(t),OHe=r(mCe," (RemBERT model)"),mCe.forEach(t),VHe=i(y),Nm=n(y,"LI",{});var gCe=s(Nm);Mre=n(gCe,"STRONG",{});var yXr=s(Mre);XHe=r(yXr,"resnet"),yXr.forEach(t),zHe=r(gCe," \u2014 "),dS=n(gCe,"A",{href:!0});var LXr=s(dS);WHe=r(LXr,"ResNetConfig"),LXr.forEach(t),QHe=r(gCe," (ResNet model)"),gCe.forEach(t),HHe=i(y),jm=n(y,"LI",{});var hCe=s(jm);Ere=n(hCe,"STRONG",{});var xXr=s(Ere);UHe=r(xXr,"retribert"),xXr.forEach(t),JHe=r(hCe," \u2014 "),cS=n(hCe,"A",{href:!0});var $Xr=s(cS);YHe=r($Xr,"RetriBertConfig"),$Xr.forEach(t),KHe=r(hCe," (RetriBERT model)"),hCe.forEach(t),ZHe=i(y),Dm=n(y,"LI",{});var pCe=s(Dm);Cre=n(pCe,"STRONG",{});var kXr=s(Cre);eUe=r(kXr,"roberta"),kXr.forEach(t),oUe=r(pCe," \u2014 "),fS=n(pCe,"A",{href:!0});var SXr=s(fS);rUe=r(SXr,"RobertaConfig"),SXr.forEach(t),tUe=r(pCe," (RoBERTa model)"),pCe.forEach(t),aUe=i(y),Gm=n(y,"LI",{});var _Ce=s(Gm);wre=n(_Ce,"STRONG",{});var RXr=s(wre);nUe=r(RXr,"roformer"),RXr.forEach(t),sUe=r(_Ce," \u2014 "),mS=n(_Ce,"A",{href:!0});var PXr=s(mS);lUe=r(PXr,"RoFormerConfig"),PXr.forEach(t),iUe=r(_Ce," (RoFormer model)"),_Ce.forEach(t),dUe=i(y),Om=n(y,"LI",{});var uCe=s(Om);Are=n(uCe,"STRONG",{});var BXr=s(Are);cUe=r(BXr,"segformer"),BXr.forEach(t),fUe=r(uCe," \u2014 "),gS=n(uCe,"A",{href:!0});var IXr=s(gS);mUe=r(IXr,"SegformerConfig"),IXr.forEach(t),gUe=r(uCe," (SegFormer model)"),uCe.forEach(t),hUe=i(y),Vm=n(y,"LI",{});var bCe=s(Vm);yre=n(bCe,"STRONG",{});var qXr=s(yre);pUe=r(qXr,"sew"),qXr.forEach(t),_Ue=r(bCe," \u2014 "),hS=n(bCe,"A",{href:!0});var NXr=s(hS);uUe=r(NXr,"SEWConfig"),NXr.forEach(t),bUe=r(bCe," (SEW model)"),bCe.forEach(t),vUe=i(y),Xm=n(y,"LI",{});var vCe=s(Xm);Lre=n(vCe,"STRONG",{});var jXr=s(Lre);FUe=r(jXr,"sew-d"),jXr.forEach(t),TUe=r(vCe," \u2014 "),pS=n(vCe,"A",{href:!0});var DXr=s(pS);MUe=r(DXr,"SEWDConfig"),DXr.forEach(t),EUe=r(vCe," (SEW-D model)"),vCe.forEach(t),CUe=i(y),zm=n(y,"LI",{});var FCe=s(zm);xre=n(FCe,"STRONG",{});var GXr=s(xre);wUe=r(GXr,"speech-encoder-decoder"),GXr.forEach(t),AUe=r(FCe," \u2014 "),_S=n(FCe,"A",{href:!0});var OXr=s(_S);yUe=r(OXr,"SpeechEncoderDecoderConfig"),OXr.forEach(t),LUe=r(FCe," (Speech Encoder decoder model)"),FCe.forEach(t),xUe=i(y),Wm=n(y,"LI",{});var TCe=s(Wm);$re=n(TCe,"STRONG",{});var VXr=s($re);$Ue=r(VXr,"speech_to_text"),VXr.forEach(t),kUe=r(TCe," \u2014 "),uS=n(TCe,"A",{href:!0});var XXr=s(uS);SUe=r(XXr,"Speech2TextConfig"),XXr.forEach(t),RUe=r(TCe," (Speech2Text model)"),TCe.forEach(t),PUe=i(y),Qm=n(y,"LI",{});var MCe=s(Qm);kre=n(MCe,"STRONG",{});var zXr=s(kre);BUe=r(zXr,"speech_to_text_2"),zXr.forEach(t),IUe=r(MCe," \u2014 "),bS=n(MCe,"A",{href:!0});var WXr=s(bS);qUe=r(WXr,"Speech2Text2Config"),WXr.forEach(t),NUe=r(MCe," (Speech2Text2 model)"),MCe.forEach(t),jUe=i(y),Hm=n(y,"LI",{});var ECe=s(Hm);Sre=n(ECe,"STRONG",{});var QXr=s(Sre);DUe=r(QXr,"splinter"),QXr.forEach(t),GUe=r(ECe," \u2014 "),vS=n(ECe,"A",{href:!0});var HXr=s(vS);OUe=r(HXr,"SplinterConfig"),HXr.forEach(t),VUe=r(ECe," (Splinter model)"),ECe.forEach(t),XUe=i(y),Um=n(y,"LI",{});var CCe=s(Um);Rre=n(CCe,"STRONG",{});var UXr=s(Rre);zUe=r(UXr,"squeezebert"),UXr.forEach(t),WUe=r(CCe," \u2014 "),FS=n(CCe,"A",{href:!0});var JXr=s(FS);QUe=r(JXr,"SqueezeBertConfig"),JXr.forEach(t),HUe=r(CCe," (SqueezeBERT model)"),CCe.forEach(t),UUe=i(y),Jm=n(y,"LI",{});var wCe=s(Jm);Pre=n(wCe,"STRONG",{});var YXr=s(Pre);JUe=r(YXr,"swin"),YXr.forEach(t),YUe=r(wCe," \u2014 "),TS=n(wCe,"A",{href:!0});var KXr=s(TS);KUe=r(KXr,"SwinConfig"),KXr.forEach(t),ZUe=r(wCe," (Swin model)"),wCe.forEach(t),eJe=i(y),Ym=n(y,"LI",{});var ACe=s(Ym);Bre=n(ACe,"STRONG",{});var ZXr=s(Bre);oJe=r(ZXr,"t5"),ZXr.forEach(t),rJe=r(ACe," \u2014 "),MS=n(ACe,"A",{href:!0});var ezr=s(MS);tJe=r(ezr,"T5Config"),ezr.forEach(t),aJe=r(ACe," (T5 model)"),ACe.forEach(t),nJe=i(y),Km=n(y,"LI",{});var yCe=s(Km);Ire=n(yCe,"STRONG",{});var ozr=s(Ire);sJe=r(ozr,"tapas"),ozr.forEach(t),lJe=r(yCe," \u2014 "),ES=n(yCe,"A",{href:!0});var rzr=s(ES);iJe=r(rzr,"TapasConfig"),rzr.forEach(t),dJe=r(yCe," (TAPAS model)"),yCe.forEach(t),cJe=i(y),Zm=n(y,"LI",{});var LCe=s(Zm);qre=n(LCe,"STRONG",{});var tzr=s(qre);fJe=r(tzr,"trajectory_transformer"),tzr.forEach(t),mJe=r(LCe," \u2014 "),CS=n(LCe,"A",{href:!0});var azr=s(CS);gJe=r(azr,"TrajectoryTransformerConfig"),azr.forEach(t),hJe=r(LCe," (Trajectory Transformer model)"),LCe.forEach(t),pJe=i(y),eg=n(y,"LI",{});var xCe=s(eg);Nre=n(xCe,"STRONG",{});var nzr=s(Nre);_Je=r(nzr,"transfo-xl"),nzr.forEach(t),uJe=r(xCe," \u2014 "),wS=n(xCe,"A",{href:!0});var szr=s(wS);bJe=r(szr,"TransfoXLConfig"),szr.forEach(t),vJe=r(xCe," (Transformer-XL model)"),xCe.forEach(t),FJe=i(y),og=n(y,"LI",{});var $Ce=s(og);jre=n($Ce,"STRONG",{});var lzr=s(jre);TJe=r(lzr,"trocr"),lzr.forEach(t),MJe=r($Ce," \u2014 "),AS=n($Ce,"A",{href:!0});var izr=s(AS);EJe=r(izr,"TrOCRConfig"),izr.forEach(t),CJe=r($Ce," (TrOCR model)"),$Ce.forEach(t),wJe=i(y),rg=n(y,"LI",{});var kCe=s(rg);Dre=n(kCe,"STRONG",{});var dzr=s(Dre);AJe=r(dzr,"unispeech"),dzr.forEach(t),yJe=r(kCe," \u2014 "),yS=n(kCe,"A",{href:!0});var czr=s(yS);LJe=r(czr,"UniSpeechConfig"),czr.forEach(t),xJe=r(kCe," (UniSpeech model)"),kCe.forEach(t),$Je=i(y),tg=n(y,"LI",{});var SCe=s(tg);Gre=n(SCe,"STRONG",{});var fzr=s(Gre);kJe=r(fzr,"unispeech-sat"),fzr.forEach(t),SJe=r(SCe," \u2014 "),LS=n(SCe,"A",{href:!0});var mzr=s(LS);RJe=r(mzr,"UniSpeechSatConfig"),mzr.forEach(t),PJe=r(SCe," (UniSpeechSat model)"),SCe.forEach(t),BJe=i(y),ag=n(y,"LI",{});var RCe=s(ag);Ore=n(RCe,"STRONG",{});var gzr=s(Ore);IJe=r(gzr,"van"),gzr.forEach(t),qJe=r(RCe," \u2014 "),xS=n(RCe,"A",{href:!0});var hzr=s(xS);NJe=r(hzr,"VanConfig"),hzr.forEach(t),jJe=r(RCe," (VAN model)"),RCe.forEach(t),DJe=i(y),ng=n(y,"LI",{});var PCe=s(ng);Vre=n(PCe,"STRONG",{});var pzr=s(Vre);GJe=r(pzr,"vilt"),pzr.forEach(t),OJe=r(PCe," \u2014 "),$S=n(PCe,"A",{href:!0});var _zr=s($S);VJe=r(_zr,"ViltConfig"),_zr.forEach(t),XJe=r(PCe," (ViLT model)"),PCe.forEach(t),zJe=i(y),sg=n(y,"LI",{});var BCe=s(sg);Xre=n(BCe,"STRONG",{});var uzr=s(Xre);WJe=r(uzr,"vision-encoder-decoder"),uzr.forEach(t),QJe=r(BCe," \u2014 "),kS=n(BCe,"A",{href:!0});var bzr=s(kS);HJe=r(bzr,"VisionEncoderDecoderConfig"),bzr.forEach(t),UJe=r(BCe," (Vision Encoder decoder model)"),BCe.forEach(t),JJe=i(y),lg=n(y,"LI",{});var ICe=s(lg);zre=n(ICe,"STRONG",{});var vzr=s(zre);YJe=r(vzr,"vision-text-dual-encoder"),vzr.forEach(t),KJe=r(ICe," \u2014 "),SS=n(ICe,"A",{href:!0});var Fzr=s(SS);ZJe=r(Fzr,"VisionTextDualEncoderConfig"),Fzr.forEach(t),eYe=r(ICe," (VisionTextDualEncoder model)"),ICe.forEach(t),oYe=i(y),ig=n(y,"LI",{});var qCe=s(ig);Wre=n(qCe,"STRONG",{});var Tzr=s(Wre);rYe=r(Tzr,"visual_bert"),Tzr.forEach(t),tYe=r(qCe," \u2014 "),RS=n(qCe,"A",{href:!0});var Mzr=s(RS);aYe=r(Mzr,"VisualBertConfig"),Mzr.forEach(t),nYe=r(qCe," (VisualBert model)"),qCe.forEach(t),sYe=i(y),dg=n(y,"LI",{});var NCe=s(dg);Qre=n(NCe,"STRONG",{});var Ezr=s(Qre);lYe=r(Ezr,"vit"),Ezr.forEach(t),iYe=r(NCe," \u2014 "),PS=n(NCe,"A",{href:!0});var Czr=s(PS);dYe=r(Czr,"ViTConfig"),Czr.forEach(t),cYe=r(NCe," (ViT model)"),NCe.forEach(t),fYe=i(y),cg=n(y,"LI",{});var jCe=s(cg);Hre=n(jCe,"STRONG",{});var wzr=s(Hre);mYe=r(wzr,"vit_mae"),wzr.forEach(t),gYe=r(jCe," \u2014 "),BS=n(jCe,"A",{href:!0});var Azr=s(BS);hYe=r(Azr,"ViTMAEConfig"),Azr.forEach(t),pYe=r(jCe," (ViTMAE model)"),jCe.forEach(t),_Ye=i(y),fg=n(y,"LI",{});var DCe=s(fg);Ure=n(DCe,"STRONG",{});var yzr=s(Ure);uYe=r(yzr,"wav2vec2"),yzr.forEach(t),bYe=r(DCe," \u2014 "),IS=n(DCe,"A",{href:!0});var Lzr=s(IS);vYe=r(Lzr,"Wav2Vec2Config"),Lzr.forEach(t),FYe=r(DCe," (Wav2Vec2 model)"),DCe.forEach(t),TYe=i(y),mg=n(y,"LI",{});var GCe=s(mg);Jre=n(GCe,"STRONG",{});var xzr=s(Jre);MYe=r(xzr,"wav2vec2-conformer"),xzr.forEach(t),EYe=r(GCe," \u2014 "),qS=n(GCe,"A",{href:!0});var $zr=s(qS);CYe=r($zr,"Wav2Vec2ConformerConfig"),$zr.forEach(t),wYe=r(GCe," (Wav2Vec2-Conformer model)"),GCe.forEach(t),AYe=i(y),gg=n(y,"LI",{});var OCe=s(gg);Yre=n(OCe,"STRONG",{});var kzr=s(Yre);yYe=r(kzr,"wavlm"),kzr.forEach(t),LYe=r(OCe," \u2014 "),NS=n(OCe,"A",{href:!0});var Szr=s(NS);xYe=r(Szr,"WavLMConfig"),Szr.forEach(t),$Ye=r(OCe," (WavLM model)"),OCe.forEach(t),kYe=i(y),hg=n(y,"LI",{});var VCe=s(hg);Kre=n(VCe,"STRONG",{});var Rzr=s(Kre);SYe=r(Rzr,"xglm"),Rzr.forEach(t),RYe=r(VCe," \u2014 "),jS=n(VCe,"A",{href:!0});var Pzr=s(jS);PYe=r(Pzr,"XGLMConfig"),Pzr.forEach(t),BYe=r(VCe," (XGLM model)"),VCe.forEach(t),IYe=i(y),pg=n(y,"LI",{});var XCe=s(pg);Zre=n(XCe,"STRONG",{});var Bzr=s(Zre);qYe=r(Bzr,"xlm"),Bzr.forEach(t),NYe=r(XCe," \u2014 "),DS=n(XCe,"A",{href:!0});var Izr=s(DS);jYe=r(Izr,"XLMConfig"),Izr.forEach(t),DYe=r(XCe," (XLM model)"),XCe.forEach(t),GYe=i(y),_g=n(y,"LI",{});var zCe=s(_g);ete=n(zCe,"STRONG",{});var qzr=s(ete);OYe=r(qzr,"xlm-prophetnet"),qzr.forEach(t),VYe=r(zCe," \u2014 "),GS=n(zCe,"A",{href:!0});var Nzr=s(GS);XYe=r(Nzr,"XLMProphetNetConfig"),Nzr.forEach(t),zYe=r(zCe," (XLMProphetNet model)"),zCe.forEach(t),WYe=i(y),ug=n(y,"LI",{});var WCe=s(ug);ote=n(WCe,"STRONG",{});var jzr=s(ote);QYe=r(jzr,"xlm-roberta"),jzr.forEach(t),HYe=r(WCe," \u2014 "),OS=n(WCe,"A",{href:!0});var Dzr=s(OS);UYe=r(Dzr,"XLMRobertaConfig"),Dzr.forEach(t),JYe=r(WCe," (XLM-RoBERTa model)"),WCe.forEach(t),YYe=i(y),bg=n(y,"LI",{});var QCe=s(bg);rte=n(QCe,"STRONG",{});var Gzr=s(rte);KYe=r(Gzr,"xlm-roberta-xl"),Gzr.forEach(t),ZYe=r(QCe," \u2014 "),VS=n(QCe,"A",{href:!0});var Ozr=s(VS);eKe=r(Ozr,"XLMRobertaXLConfig"),Ozr.forEach(t),oKe=r(QCe," (XLM-RoBERTa-XL model)"),QCe.forEach(t),rKe=i(y),vg=n(y,"LI",{});var HCe=s(vg);tte=n(HCe,"STRONG",{});var Vzr=s(tte);tKe=r(Vzr,"xlnet"),Vzr.forEach(t),aKe=r(HCe," \u2014 "),XS=n(HCe,"A",{href:!0});var Xzr=s(XS);nKe=r(Xzr,"XLNetConfig"),Xzr.forEach(t),sKe=r(HCe," (XLNet model)"),HCe.forEach(t),lKe=i(y),Fg=n(y,"LI",{});var UCe=s(Fg);ate=n(UCe,"STRONG",{});var zzr=s(ate);iKe=r(zzr,"yolos"),zzr.forEach(t),dKe=r(UCe," \u2014 "),zS=n(UCe,"A",{href:!0});var Wzr=s(zS);cKe=r(Wzr,"YolosConfig"),Wzr.forEach(t),fKe=r(UCe," (YOLOS model)"),UCe.forEach(t),mKe=i(y),Tg=n(y,"LI",{});var JCe=s(Tg);nte=n(JCe,"STRONG",{});var Qzr=s(nte);gKe=r(Qzr,"yoso"),Qzr.forEach(t),hKe=r(JCe," \u2014 "),WS=n(JCe,"A",{href:!0});var Hzr=s(WS);pKe=r(Hzr,"YosoConfig"),Hzr.forEach(t),_Ke=r(JCe," (YOSO model)"),JCe.forEach(t),y.forEach(t),uKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),bKe=i(et),Eg=n(et,"DIV",{class:!0});var Ije=s(Eg);T(x0.$$.fragment,Ije),vKe=i(Ije),ste=n(Ije,"P",{});var Uzr=s(ste);FKe=r(Uzr,"Register a new configuration for this class."),Uzr.forEach(t),Ije.forEach(t),et.forEach(t),jqe=i(f),Ti=n(f,"H2",{class:!0});var qje=s(Ti);Cg=n(qje,"A",{id:!0,class:!0,href:!0});var Jzr=s(Cg);lte=n(Jzr,"SPAN",{});var Yzr=s(lte);T($0.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),TKe=i(qje),ite=n(qje,"SPAN",{});var Kzr=s(ite);MKe=r(Kzr,"AutoTokenizer"),Kzr.forEach(t),qje.forEach(t),Dqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(k0.$$.fragment,qs),EKe=i(qs),S0=n(qs,"P",{});var Nje=s(S0);CKe=r(Nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=n(Nje,"A",{href:!0});var Zzr=s(QS);wKe=r(Zzr,"AutoTokenizer.from_pretrained()"),Zzr.forEach(t),AKe=r(Nje," class method."),Nje.forEach(t),yKe=i(qs),R0=n(qs,"P",{});var jje=s(R0);LKe=r(jje,"This class cannot be instantiated directly using "),dte=n(jje,"CODE",{});var eWr=s(dte);xKe=r(eWr,"__init__()"),eWr.forEach(t),$Ke=r(jje," (throws an error)."),jje.forEach(t),kKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(P0.$$.fragment,Ns),SKe=i(Ns),cte=n(Ns,"P",{});var oWr=s(cte);RKe=r(oWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oWr.forEach(t),PKe=i(Ns),Aa=n(Ns,"P",{});var C3=s(Aa);BKe=r(C3,"The tokenizer class to instantiate is selected based on the "),fte=n(C3,"CODE",{});var rWr=s(fte);IKe=r(rWr,"model_type"),rWr.forEach(t),qKe=r(C3,` property of the config object (either
passed as an argument or loaded from `),mte=n(C3,"CODE",{});var tWr=s(mte);NKe=r(tWr,"pretrained_model_name_or_path"),tWr.forEach(t),jKe=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=n(C3,"CODE",{});var aWr=s(gte);DKe=r(aWr,"pretrained_model_name_or_path"),aWr.forEach(t),GKe=r(C3,":"),C3.forEach(t),OKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Bx=s(Sn);hte=n(Bx,"STRONG",{});var nWr=s(hte);VKe=r(nWr,"albert"),nWr.forEach(t),XKe=r(Bx," \u2014 "),HS=n(Bx,"A",{href:!0});var sWr=s(HS);zKe=r(sWr,"AlbertTokenizer"),sWr.forEach(t),WKe=r(Bx," or "),US=n(Bx,"A",{href:!0});var lWr=s(US);QKe=r(lWr,"AlbertTokenizerFast"),lWr.forEach(t),HKe=r(Bx," (ALBERT model)"),Bx.forEach(t),UKe=i(S),Rn=n(S,"LI",{});var Ix=s(Rn);pte=n(Ix,"STRONG",{});var iWr=s(pte);JKe=r(iWr,"bart"),iWr.forEach(t),YKe=r(Ix," \u2014 "),JS=n(Ix,"A",{href:!0});var dWr=s(JS);KKe=r(dWr,"BartTokenizer"),dWr.forEach(t),ZKe=r(Ix," or "),YS=n(Ix,"A",{href:!0});var cWr=s(YS);eZe=r(cWr,"BartTokenizerFast"),cWr.forEach(t),oZe=r(Ix," (BART model)"),Ix.forEach(t),rZe=i(S),Pn=n(S,"LI",{});var qx=s(Pn);_te=n(qx,"STRONG",{});var fWr=s(_te);tZe=r(fWr,"barthez"),fWr.forEach(t),aZe=r(qx," \u2014 "),KS=n(qx,"A",{href:!0});var mWr=s(KS);nZe=r(mWr,"BarthezTokenizer"),mWr.forEach(t),sZe=r(qx," or "),ZS=n(qx,"A",{href:!0});var gWr=s(ZS);lZe=r(gWr,"BarthezTokenizerFast"),gWr.forEach(t),iZe=r(qx," (BARThez model)"),qx.forEach(t),dZe=i(S),wg=n(S,"LI",{});var YCe=s(wg);ute=n(YCe,"STRONG",{});var hWr=s(ute);cZe=r(hWr,"bartpho"),hWr.forEach(t),fZe=r(YCe," \u2014 "),eR=n(YCe,"A",{href:!0});var pWr=s(eR);mZe=r(pWr,"BartphoTokenizer"),pWr.forEach(t),gZe=r(YCe," (BARTpho model)"),YCe.forEach(t),hZe=i(S),Bn=n(S,"LI",{});var Nx=s(Bn);bte=n(Nx,"STRONG",{});var _Wr=s(bte);pZe=r(_Wr,"bert"),_Wr.forEach(t),_Ze=r(Nx," \u2014 "),oR=n(Nx,"A",{href:!0});var uWr=s(oR);uZe=r(uWr,"BertTokenizer"),uWr.forEach(t),bZe=r(Nx," or "),rR=n(Nx,"A",{href:!0});var bWr=s(rR);vZe=r(bWr,"BertTokenizerFast"),bWr.forEach(t),FZe=r(Nx," (BERT model)"),Nx.forEach(t),TZe=i(S),Ag=n(S,"LI",{});var KCe=s(Ag);vte=n(KCe,"STRONG",{});var vWr=s(vte);MZe=r(vWr,"bert-generation"),vWr.forEach(t),EZe=r(KCe," \u2014 "),tR=n(KCe,"A",{href:!0});var FWr=s(tR);CZe=r(FWr,"BertGenerationTokenizer"),FWr.forEach(t),wZe=r(KCe," (Bert Generation model)"),KCe.forEach(t),AZe=i(S),yg=n(S,"LI",{});var ZCe=s(yg);Fte=n(ZCe,"STRONG",{});var TWr=s(Fte);yZe=r(TWr,"bert-japanese"),TWr.forEach(t),LZe=r(ZCe," \u2014 "),aR=n(ZCe,"A",{href:!0});var MWr=s(aR);xZe=r(MWr,"BertJapaneseTokenizer"),MWr.forEach(t),$Ze=r(ZCe," (BertJapanese model)"),ZCe.forEach(t),kZe=i(S),Lg=n(S,"LI",{});var e3e=s(Lg);Tte=n(e3e,"STRONG",{});var EWr=s(Tte);SZe=r(EWr,"bertweet"),EWr.forEach(t),RZe=r(e3e," \u2014 "),nR=n(e3e,"A",{href:!0});var CWr=s(nR);PZe=r(CWr,"BertweetTokenizer"),CWr.forEach(t),BZe=r(e3e," (Bertweet model)"),e3e.forEach(t),IZe=i(S),In=n(S,"LI",{});var jx=s(In);Mte=n(jx,"STRONG",{});var wWr=s(Mte);qZe=r(wWr,"big_bird"),wWr.forEach(t),NZe=r(jx," \u2014 "),sR=n(jx,"A",{href:!0});var AWr=s(sR);jZe=r(AWr,"BigBirdTokenizer"),AWr.forEach(t),DZe=r(jx," or "),lR=n(jx,"A",{href:!0});var yWr=s(lR);GZe=r(yWr,"BigBirdTokenizerFast"),yWr.forEach(t),OZe=r(jx," (BigBird model)"),jx.forEach(t),VZe=i(S),qn=n(S,"LI",{});var Dx=s(qn);Ete=n(Dx,"STRONG",{});var LWr=s(Ete);XZe=r(LWr,"bigbird_pegasus"),LWr.forEach(t),zZe=r(Dx," \u2014 "),iR=n(Dx,"A",{href:!0});var xWr=s(iR);WZe=r(xWr,"PegasusTokenizer"),xWr.forEach(t),QZe=r(Dx," or "),dR=n(Dx,"A",{href:!0});var $Wr=s(dR);HZe=r($Wr,"PegasusTokenizerFast"),$Wr.forEach(t),UZe=r(Dx," (BigBirdPegasus model)"),Dx.forEach(t),JZe=i(S),Nn=n(S,"LI",{});var Gx=s(Nn);Cte=n(Gx,"STRONG",{});var kWr=s(Cte);YZe=r(kWr,"blenderbot"),kWr.forEach(t),KZe=r(Gx," \u2014 "),cR=n(Gx,"A",{href:!0});var SWr=s(cR);ZZe=r(SWr,"BlenderbotTokenizer"),SWr.forEach(t),eeo=r(Gx," or "),fR=n(Gx,"A",{href:!0});var RWr=s(fR);oeo=r(RWr,"BlenderbotTokenizerFast"),RWr.forEach(t),reo=r(Gx," (Blenderbot model)"),Gx.forEach(t),teo=i(S),xg=n(S,"LI",{});var o3e=s(xg);wte=n(o3e,"STRONG",{});var PWr=s(wte);aeo=r(PWr,"blenderbot-small"),PWr.forEach(t),neo=r(o3e," \u2014 "),mR=n(o3e,"A",{href:!0});var BWr=s(mR);seo=r(BWr,"BlenderbotSmallTokenizer"),BWr.forEach(t),leo=r(o3e," (BlenderbotSmall model)"),o3e.forEach(t),ieo=i(S),$g=n(S,"LI",{});var r3e=s($g);Ate=n(r3e,"STRONG",{});var IWr=s(Ate);deo=r(IWr,"byt5"),IWr.forEach(t),ceo=r(r3e," \u2014 "),gR=n(r3e,"A",{href:!0});var qWr=s(gR);feo=r(qWr,"ByT5Tokenizer"),qWr.forEach(t),meo=r(r3e," (ByT5 model)"),r3e.forEach(t),geo=i(S),jn=n(S,"LI",{});var Ox=s(jn);yte=n(Ox,"STRONG",{});var NWr=s(yte);heo=r(NWr,"camembert"),NWr.forEach(t),peo=r(Ox," \u2014 "),hR=n(Ox,"A",{href:!0});var jWr=s(hR);_eo=r(jWr,"CamembertTokenizer"),jWr.forEach(t),ueo=r(Ox," or "),pR=n(Ox,"A",{href:!0});var DWr=s(pR);beo=r(DWr,"CamembertTokenizerFast"),DWr.forEach(t),veo=r(Ox," (CamemBERT model)"),Ox.forEach(t),Feo=i(S),kg=n(S,"LI",{});var t3e=s(kg);Lte=n(t3e,"STRONG",{});var GWr=s(Lte);Teo=r(GWr,"canine"),GWr.forEach(t),Meo=r(t3e," \u2014 "),_R=n(t3e,"A",{href:!0});var OWr=s(_R);Eeo=r(OWr,"CanineTokenizer"),OWr.forEach(t),Ceo=r(t3e," (Canine model)"),t3e.forEach(t),weo=i(S),Dn=n(S,"LI",{});var Vx=s(Dn);xte=n(Vx,"STRONG",{});var VWr=s(xte);Aeo=r(VWr,"clip"),VWr.forEach(t),yeo=r(Vx," \u2014 "),uR=n(Vx,"A",{href:!0});var XWr=s(uR);Leo=r(XWr,"CLIPTokenizer"),XWr.forEach(t),xeo=r(Vx," or "),bR=n(Vx,"A",{href:!0});var zWr=s(bR);$eo=r(zWr,"CLIPTokenizerFast"),zWr.forEach(t),keo=r(Vx," (CLIP model)"),Vx.forEach(t),Seo=i(S),Gn=n(S,"LI",{});var Xx=s(Gn);$te=n(Xx,"STRONG",{});var WWr=s($te);Reo=r(WWr,"convbert"),WWr.forEach(t),Peo=r(Xx," \u2014 "),vR=n(Xx,"A",{href:!0});var QWr=s(vR);Beo=r(QWr,"ConvBertTokenizer"),QWr.forEach(t),Ieo=r(Xx," or "),FR=n(Xx,"A",{href:!0});var HWr=s(FR);qeo=r(HWr,"ConvBertTokenizerFast"),HWr.forEach(t),Neo=r(Xx," (ConvBERT model)"),Xx.forEach(t),jeo=i(S),On=n(S,"LI",{});var zx=s(On);kte=n(zx,"STRONG",{});var UWr=s(kte);Deo=r(UWr,"cpm"),UWr.forEach(t),Geo=r(zx," \u2014 "),TR=n(zx,"A",{href:!0});var JWr=s(TR);Oeo=r(JWr,"CpmTokenizer"),JWr.forEach(t),Veo=r(zx," or "),MR=n(zx,"A",{href:!0});var YWr=s(MR);Xeo=r(YWr,"CpmTokenizerFast"),YWr.forEach(t),zeo=r(zx," (CPM model)"),zx.forEach(t),Weo=i(S),Sg=n(S,"LI",{});var a3e=s(Sg);Ste=n(a3e,"STRONG",{});var KWr=s(Ste);Qeo=r(KWr,"ctrl"),KWr.forEach(t),Heo=r(a3e," \u2014 "),ER=n(a3e,"A",{href:!0});var ZWr=s(ER);Ueo=r(ZWr,"CTRLTokenizer"),ZWr.forEach(t),Jeo=r(a3e," (CTRL model)"),a3e.forEach(t),Yeo=i(S),Vn=n(S,"LI",{});var Wx=s(Vn);Rte=n(Wx,"STRONG",{});var eQr=s(Rte);Keo=r(eQr,"data2vec-text"),eQr.forEach(t),Zeo=r(Wx," \u2014 "),CR=n(Wx,"A",{href:!0});var oQr=s(CR);eoo=r(oQr,"RobertaTokenizer"),oQr.forEach(t),ooo=r(Wx," or "),wR=n(Wx,"A",{href:!0});var rQr=s(wR);roo=r(rQr,"RobertaTokenizerFast"),rQr.forEach(t),too=r(Wx," (Data2VecText model)"),Wx.forEach(t),aoo=i(S),Xn=n(S,"LI",{});var Qx=s(Xn);Pte=n(Qx,"STRONG",{});var tQr=s(Pte);noo=r(tQr,"deberta"),tQr.forEach(t),soo=r(Qx," \u2014 "),AR=n(Qx,"A",{href:!0});var aQr=s(AR);loo=r(aQr,"DebertaTokenizer"),aQr.forEach(t),ioo=r(Qx," or "),yR=n(Qx,"A",{href:!0});var nQr=s(yR);doo=r(nQr,"DebertaTokenizerFast"),nQr.forEach(t),coo=r(Qx," (DeBERTa model)"),Qx.forEach(t),foo=i(S),zn=n(S,"LI",{});var Hx=s(zn);Bte=n(Hx,"STRONG",{});var sQr=s(Bte);moo=r(sQr,"deberta-v2"),sQr.forEach(t),goo=r(Hx," \u2014 "),LR=n(Hx,"A",{href:!0});var lQr=s(LR);hoo=r(lQr,"DebertaV2Tokenizer"),lQr.forEach(t),poo=r(Hx," or "),xR=n(Hx,"A",{href:!0});var iQr=s(xR);_oo=r(iQr,"DebertaV2TokenizerFast"),iQr.forEach(t),uoo=r(Hx," (DeBERTa-v2 model)"),Hx.forEach(t),boo=i(S),Wn=n(S,"LI",{});var Ux=s(Wn);Ite=n(Ux,"STRONG",{});var dQr=s(Ite);voo=r(dQr,"distilbert"),dQr.forEach(t),Foo=r(Ux," \u2014 "),$R=n(Ux,"A",{href:!0});var cQr=s($R);Too=r(cQr,"DistilBertTokenizer"),cQr.forEach(t),Moo=r(Ux," or "),kR=n(Ux,"A",{href:!0});var fQr=s(kR);Eoo=r(fQr,"DistilBertTokenizerFast"),fQr.forEach(t),Coo=r(Ux," (DistilBERT model)"),Ux.forEach(t),woo=i(S),Qn=n(S,"LI",{});var Jx=s(Qn);qte=n(Jx,"STRONG",{});var mQr=s(qte);Aoo=r(mQr,"dpr"),mQr.forEach(t),yoo=r(Jx," \u2014 "),SR=n(Jx,"A",{href:!0});var gQr=s(SR);Loo=r(gQr,"DPRQuestionEncoderTokenizer"),gQr.forEach(t),xoo=r(Jx," or "),RR=n(Jx,"A",{href:!0});var hQr=s(RR);$oo=r(hQr,"DPRQuestionEncoderTokenizerFast"),hQr.forEach(t),koo=r(Jx," (DPR model)"),Jx.forEach(t),Soo=i(S),Hn=n(S,"LI",{});var Yx=s(Hn);Nte=n(Yx,"STRONG",{});var pQr=s(Nte);Roo=r(pQr,"electra"),pQr.forEach(t),Poo=r(Yx," \u2014 "),PR=n(Yx,"A",{href:!0});var _Qr=s(PR);Boo=r(_Qr,"ElectraTokenizer"),_Qr.forEach(t),Ioo=r(Yx," or "),BR=n(Yx,"A",{href:!0});var uQr=s(BR);qoo=r(uQr,"ElectraTokenizerFast"),uQr.forEach(t),Noo=r(Yx," (ELECTRA model)"),Yx.forEach(t),joo=i(S),Rg=n(S,"LI",{});var n3e=s(Rg);jte=n(n3e,"STRONG",{});var bQr=s(jte);Doo=r(bQr,"flaubert"),bQr.forEach(t),Goo=r(n3e," \u2014 "),IR=n(n3e,"A",{href:!0});var vQr=s(IR);Ooo=r(vQr,"FlaubertTokenizer"),vQr.forEach(t),Voo=r(n3e," (FlauBERT model)"),n3e.forEach(t),Xoo=i(S),Un=n(S,"LI",{});var Kx=s(Un);Dte=n(Kx,"STRONG",{});var FQr=s(Dte);zoo=r(FQr,"fnet"),FQr.forEach(t),Woo=r(Kx," \u2014 "),qR=n(Kx,"A",{href:!0});var TQr=s(qR);Qoo=r(TQr,"FNetTokenizer"),TQr.forEach(t),Hoo=r(Kx," or "),NR=n(Kx,"A",{href:!0});var MQr=s(NR);Uoo=r(MQr,"FNetTokenizerFast"),MQr.forEach(t),Joo=r(Kx," (FNet model)"),Kx.forEach(t),Yoo=i(S),Pg=n(S,"LI",{});var s3e=s(Pg);Gte=n(s3e,"STRONG",{});var EQr=s(Gte);Koo=r(EQr,"fsmt"),EQr.forEach(t),Zoo=r(s3e," \u2014 "),jR=n(s3e,"A",{href:!0});var CQr=s(jR);ero=r(CQr,"FSMTTokenizer"),CQr.forEach(t),oro=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),rro=i(S),Jn=n(S,"LI",{});var Zx=s(Jn);Ote=n(Zx,"STRONG",{});var wQr=s(Ote);tro=r(wQr,"funnel"),wQr.forEach(t),aro=r(Zx," \u2014 "),DR=n(Zx,"A",{href:!0});var AQr=s(DR);nro=r(AQr,"FunnelTokenizer"),AQr.forEach(t),sro=r(Zx," or "),GR=n(Zx,"A",{href:!0});var yQr=s(GR);lro=r(yQr,"FunnelTokenizerFast"),yQr.forEach(t),iro=r(Zx," (Funnel Transformer model)"),Zx.forEach(t),dro=i(S),Yn=n(S,"LI",{});var e$=s(Yn);Vte=n(e$,"STRONG",{});var LQr=s(Vte);cro=r(LQr,"gpt2"),LQr.forEach(t),fro=r(e$," \u2014 "),OR=n(e$,"A",{href:!0});var xQr=s(OR);mro=r(xQr,"GPT2Tokenizer"),xQr.forEach(t),gro=r(e$," or "),VR=n(e$,"A",{href:!0});var $Qr=s(VR);hro=r($Qr,"GPT2TokenizerFast"),$Qr.forEach(t),pro=r(e$," (OpenAI GPT-2 model)"),e$.forEach(t),_ro=i(S),Kn=n(S,"LI",{});var o$=s(Kn);Xte=n(o$,"STRONG",{});var kQr=s(Xte);uro=r(kQr,"gpt_neo"),kQr.forEach(t),bro=r(o$," \u2014 "),XR=n(o$,"A",{href:!0});var SQr=s(XR);vro=r(SQr,"GPT2Tokenizer"),SQr.forEach(t),Fro=r(o$," or "),zR=n(o$,"A",{href:!0});var RQr=s(zR);Tro=r(RQr,"GPT2TokenizerFast"),RQr.forEach(t),Mro=r(o$," (GPT Neo model)"),o$.forEach(t),Ero=i(S),Zn=n(S,"LI",{});var r$=s(Zn);zte=n(r$,"STRONG",{});var PQr=s(zte);Cro=r(PQr,"gptj"),PQr.forEach(t),wro=r(r$," \u2014 "),WR=n(r$,"A",{href:!0});var BQr=s(WR);Aro=r(BQr,"GPT2Tokenizer"),BQr.forEach(t),yro=r(r$," or "),QR=n(r$,"A",{href:!0});var IQr=s(QR);Lro=r(IQr,"GPT2TokenizerFast"),IQr.forEach(t),xro=r(r$," (GPT-J model)"),r$.forEach(t),$ro=i(S),es=n(S,"LI",{});var t$=s(es);Wte=n(t$,"STRONG",{});var qQr=s(Wte);kro=r(qQr,"herbert"),qQr.forEach(t),Sro=r(t$," \u2014 "),HR=n(t$,"A",{href:!0});var NQr=s(HR);Rro=r(NQr,"HerbertTokenizer"),NQr.forEach(t),Pro=r(t$," or "),UR=n(t$,"A",{href:!0});var jQr=s(UR);Bro=r(jQr,"HerbertTokenizerFast"),jQr.forEach(t),Iro=r(t$," (HerBERT model)"),t$.forEach(t),qro=i(S),Bg=n(S,"LI",{});var l3e=s(Bg);Qte=n(l3e,"STRONG",{});var DQr=s(Qte);Nro=r(DQr,"hubert"),DQr.forEach(t),jro=r(l3e," \u2014 "),JR=n(l3e,"A",{href:!0});var GQr=s(JR);Dro=r(GQr,"Wav2Vec2CTCTokenizer"),GQr.forEach(t),Gro=r(l3e," (Hubert model)"),l3e.forEach(t),Oro=i(S),os=n(S,"LI",{});var a$=s(os);Hte=n(a$,"STRONG",{});var OQr=s(Hte);Vro=r(OQr,"ibert"),OQr.forEach(t),Xro=r(a$," \u2014 "),YR=n(a$,"A",{href:!0});var VQr=s(YR);zro=r(VQr,"RobertaTokenizer"),VQr.forEach(t),Wro=r(a$," or "),KR=n(a$,"A",{href:!0});var XQr=s(KR);Qro=r(XQr,"RobertaTokenizerFast"),XQr.forEach(t),Hro=r(a$," (I-BERT model)"),a$.forEach(t),Uro=i(S),rs=n(S,"LI",{});var n$=s(rs);Ute=n(n$,"STRONG",{});var zQr=s(Ute);Jro=r(zQr,"layoutlm"),zQr.forEach(t),Yro=r(n$," \u2014 "),ZR=n(n$,"A",{href:!0});var WQr=s(ZR);Kro=r(WQr,"LayoutLMTokenizer"),WQr.forEach(t),Zro=r(n$," or "),eP=n(n$,"A",{href:!0});var QQr=s(eP);eto=r(QQr,"LayoutLMTokenizerFast"),QQr.forEach(t),oto=r(n$," (LayoutLM model)"),n$.forEach(t),rto=i(S),ts=n(S,"LI",{});var s$=s(ts);Jte=n(s$,"STRONG",{});var HQr=s(Jte);tto=r(HQr,"layoutlmv2"),HQr.forEach(t),ato=r(s$," \u2014 "),oP=n(s$,"A",{href:!0});var UQr=s(oP);nto=r(UQr,"LayoutLMv2Tokenizer"),UQr.forEach(t),sto=r(s$," or "),rP=n(s$,"A",{href:!0});var JQr=s(rP);lto=r(JQr,"LayoutLMv2TokenizerFast"),JQr.forEach(t),ito=r(s$," (LayoutLMv2 model)"),s$.forEach(t),dto=i(S),as=n(S,"LI",{});var l$=s(as);Yte=n(l$,"STRONG",{});var YQr=s(Yte);cto=r(YQr,"layoutxlm"),YQr.forEach(t),fto=r(l$," \u2014 "),tP=n(l$,"A",{href:!0});var KQr=s(tP);mto=r(KQr,"LayoutXLMTokenizer"),KQr.forEach(t),gto=r(l$," or "),aP=n(l$,"A",{href:!0});var ZQr=s(aP);hto=r(ZQr,"LayoutXLMTokenizerFast"),ZQr.forEach(t),pto=r(l$," (LayoutXLM model)"),l$.forEach(t),_to=i(S),ns=n(S,"LI",{});var i$=s(ns);Kte=n(i$,"STRONG",{});var eHr=s(Kte);uto=r(eHr,"led"),eHr.forEach(t),bto=r(i$," \u2014 "),nP=n(i$,"A",{href:!0});var oHr=s(nP);vto=r(oHr,"LEDTokenizer"),oHr.forEach(t),Fto=r(i$," or "),sP=n(i$,"A",{href:!0});var rHr=s(sP);Tto=r(rHr,"LEDTokenizerFast"),rHr.forEach(t),Mto=r(i$," (LED model)"),i$.forEach(t),Eto=i(S),ss=n(S,"LI",{});var d$=s(ss);Zte=n(d$,"STRONG",{});var tHr=s(Zte);Cto=r(tHr,"longformer"),tHr.forEach(t),wto=r(d$," \u2014 "),lP=n(d$,"A",{href:!0});var aHr=s(lP);Ato=r(aHr,"LongformerTokenizer"),aHr.forEach(t),yto=r(d$," or "),iP=n(d$,"A",{href:!0});var nHr=s(iP);Lto=r(nHr,"LongformerTokenizerFast"),nHr.forEach(t),xto=r(d$," (Longformer model)"),d$.forEach(t),$to=i(S),ls=n(S,"LI",{});var c$=s(ls);eae=n(c$,"STRONG",{});var sHr=s(eae);kto=r(sHr,"longt5"),sHr.forEach(t),Sto=r(c$," \u2014 "),dP=n(c$,"A",{href:!0});var lHr=s(dP);Rto=r(lHr,"T5Tokenizer"),lHr.forEach(t),Pto=r(c$," or "),cP=n(c$,"A",{href:!0});var iHr=s(cP);Bto=r(iHr,"T5TokenizerFast"),iHr.forEach(t),Ito=r(c$," (LongT5 model)"),c$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var i3e=s(Ig);oae=n(i3e,"STRONG",{});var dHr=s(oae);Nto=r(dHr,"luke"),dHr.forEach(t),jto=r(i3e," \u2014 "),fP=n(i3e,"A",{href:!0});var cHr=s(fP);Dto=r(cHr,"LukeTokenizer"),cHr.forEach(t),Gto=r(i3e," (LUKE model)"),i3e.forEach(t),Oto=i(S),is=n(S,"LI",{});var f$=s(is);rae=n(f$,"STRONG",{});var fHr=s(rae);Vto=r(fHr,"lxmert"),fHr.forEach(t),Xto=r(f$," \u2014 "),mP=n(f$,"A",{href:!0});var mHr=s(mP);zto=r(mHr,"LxmertTokenizer"),mHr.forEach(t),Wto=r(f$," or "),gP=n(f$,"A",{href:!0});var gHr=s(gP);Qto=r(gHr,"LxmertTokenizerFast"),gHr.forEach(t),Hto=r(f$," (LXMERT model)"),f$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var d3e=s(qg);tae=n(d3e,"STRONG",{});var hHr=s(tae);Jto=r(hHr,"m2m_100"),hHr.forEach(t),Yto=r(d3e," \u2014 "),hP=n(d3e,"A",{href:!0});var pHr=s(hP);Kto=r(pHr,"M2M100Tokenizer"),pHr.forEach(t),Zto=r(d3e," (M2M100 model)"),d3e.forEach(t),eao=i(S),Ng=n(S,"LI",{});var c3e=s(Ng);aae=n(c3e,"STRONG",{});var _Hr=s(aae);oao=r(_Hr,"marian"),_Hr.forEach(t),rao=r(c3e," \u2014 "),pP=n(c3e,"A",{href:!0});var uHr=s(pP);tao=r(uHr,"MarianTokenizer"),uHr.forEach(t),aao=r(c3e," (Marian model)"),c3e.forEach(t),nao=i(S),ds=n(S,"LI",{});var m$=s(ds);nae=n(m$,"STRONG",{});var bHr=s(nae);sao=r(bHr,"mbart"),bHr.forEach(t),lao=r(m$," \u2014 "),_P=n(m$,"A",{href:!0});var vHr=s(_P);iao=r(vHr,"MBartTokenizer"),vHr.forEach(t),dao=r(m$," or "),uP=n(m$,"A",{href:!0});var FHr=s(uP);cao=r(FHr,"MBartTokenizerFast"),FHr.forEach(t),fao=r(m$," (mBART model)"),m$.forEach(t),mao=i(S),cs=n(S,"LI",{});var g$=s(cs);sae=n(g$,"STRONG",{});var THr=s(sae);gao=r(THr,"mbart50"),THr.forEach(t),hao=r(g$," \u2014 "),bP=n(g$,"A",{href:!0});var MHr=s(bP);pao=r(MHr,"MBart50Tokenizer"),MHr.forEach(t),_ao=r(g$," or "),vP=n(g$,"A",{href:!0});var EHr=s(vP);uao=r(EHr,"MBart50TokenizerFast"),EHr.forEach(t),bao=r(g$," (mBART-50 model)"),g$.forEach(t),vao=i(S),fs=n(S,"LI",{});var h$=s(fs);lae=n(h$,"STRONG",{});var CHr=s(lae);Fao=r(CHr,"megatron-bert"),CHr.forEach(t),Tao=r(h$," \u2014 "),FP=n(h$,"A",{href:!0});var wHr=s(FP);Mao=r(wHr,"BertTokenizer"),wHr.forEach(t),Eao=r(h$," or "),TP=n(h$,"A",{href:!0});var AHr=s(TP);Cao=r(AHr,"BertTokenizerFast"),AHr.forEach(t),wao=r(h$," (MegatronBert model)"),h$.forEach(t),Aao=i(S),jg=n(S,"LI",{});var f3e=s(jg);iae=n(f3e,"STRONG",{});var yHr=s(iae);yao=r(yHr,"mluke"),yHr.forEach(t),Lao=r(f3e," \u2014 "),MP=n(f3e,"A",{href:!0});var LHr=s(MP);xao=r(LHr,"MLukeTokenizer"),LHr.forEach(t),$ao=r(f3e," (mLUKE model)"),f3e.forEach(t),kao=i(S),ms=n(S,"LI",{});var p$=s(ms);dae=n(p$,"STRONG",{});var xHr=s(dae);Sao=r(xHr,"mobilebert"),xHr.forEach(t),Rao=r(p$," \u2014 "),EP=n(p$,"A",{href:!0});var $Hr=s(EP);Pao=r($Hr,"MobileBertTokenizer"),$Hr.forEach(t),Bao=r(p$," or "),CP=n(p$,"A",{href:!0});var kHr=s(CP);Iao=r(kHr,"MobileBertTokenizerFast"),kHr.forEach(t),qao=r(p$," (MobileBERT model)"),p$.forEach(t),Nao=i(S),gs=n(S,"LI",{});var _$=s(gs);cae=n(_$,"STRONG",{});var SHr=s(cae);jao=r(SHr,"mpnet"),SHr.forEach(t),Dao=r(_$," \u2014 "),wP=n(_$,"A",{href:!0});var RHr=s(wP);Gao=r(RHr,"MPNetTokenizer"),RHr.forEach(t),Oao=r(_$," or "),AP=n(_$,"A",{href:!0});var PHr=s(AP);Vao=r(PHr,"MPNetTokenizerFast"),PHr.forEach(t),Xao=r(_$," (MPNet model)"),_$.forEach(t),zao=i(S),hs=n(S,"LI",{});var u$=s(hs);fae=n(u$,"STRONG",{});var BHr=s(fae);Wao=r(BHr,"mt5"),BHr.forEach(t),Qao=r(u$," \u2014 "),yP=n(u$,"A",{href:!0});var IHr=s(yP);Hao=r(IHr,"MT5Tokenizer"),IHr.forEach(t),Uao=r(u$," or "),LP=n(u$,"A",{href:!0});var qHr=s(LP);Jao=r(qHr,"MT5TokenizerFast"),qHr.forEach(t),Yao=r(u$," (mT5 model)"),u$.forEach(t),Kao=i(S),ps=n(S,"LI",{});var b$=s(ps);mae=n(b$,"STRONG",{});var NHr=s(mae);Zao=r(NHr,"nystromformer"),NHr.forEach(t),eno=r(b$," \u2014 "),xP=n(b$,"A",{href:!0});var jHr=s(xP);ono=r(jHr,"AlbertTokenizer"),jHr.forEach(t),rno=r(b$," or "),$P=n(b$,"A",{href:!0});var DHr=s($P);tno=r(DHr,"AlbertTokenizerFast"),DHr.forEach(t),ano=r(b$," (Nystromformer model)"),b$.forEach(t),nno=i(S),_s=n(S,"LI",{});var v$=s(_s);gae=n(v$,"STRONG",{});var GHr=s(gae);sno=r(GHr,"openai-gpt"),GHr.forEach(t),lno=r(v$," \u2014 "),kP=n(v$,"A",{href:!0});var OHr=s(kP);ino=r(OHr,"OpenAIGPTTokenizer"),OHr.forEach(t),dno=r(v$," or "),SP=n(v$,"A",{href:!0});var VHr=s(SP);cno=r(VHr,"OpenAIGPTTokenizerFast"),VHr.forEach(t),fno=r(v$," (OpenAI GPT model)"),v$.forEach(t),mno=i(S),Dg=n(S,"LI",{});var m3e=s(Dg);hae=n(m3e,"STRONG",{});var XHr=s(hae);gno=r(XHr,"opt"),XHr.forEach(t),hno=r(m3e," \u2014 "),RP=n(m3e,"A",{href:!0});var zHr=s(RP);pno=r(zHr,"GPT2Tokenizer"),zHr.forEach(t),_no=r(m3e," (OPT model)"),m3e.forEach(t),uno=i(S),us=n(S,"LI",{});var F$=s(us);pae=n(F$,"STRONG",{});var WHr=s(pae);bno=r(WHr,"pegasus"),WHr.forEach(t),vno=r(F$," \u2014 "),PP=n(F$,"A",{href:!0});var QHr=s(PP);Fno=r(QHr,"PegasusTokenizer"),QHr.forEach(t),Tno=r(F$," or "),BP=n(F$,"A",{href:!0});var HHr=s(BP);Mno=r(HHr,"PegasusTokenizerFast"),HHr.forEach(t),Eno=r(F$," (Pegasus model)"),F$.forEach(t),Cno=i(S),Gg=n(S,"LI",{});var g3e=s(Gg);_ae=n(g3e,"STRONG",{});var UHr=s(_ae);wno=r(UHr,"perceiver"),UHr.forEach(t),Ano=r(g3e," \u2014 "),IP=n(g3e,"A",{href:!0});var JHr=s(IP);yno=r(JHr,"PerceiverTokenizer"),JHr.forEach(t),Lno=r(g3e," (Perceiver model)"),g3e.forEach(t),xno=i(S),Og=n(S,"LI",{});var h3e=s(Og);uae=n(h3e,"STRONG",{});var YHr=s(uae);$no=r(YHr,"phobert"),YHr.forEach(t),kno=r(h3e," \u2014 "),qP=n(h3e,"A",{href:!0});var KHr=s(qP);Sno=r(KHr,"PhobertTokenizer"),KHr.forEach(t),Rno=r(h3e," (PhoBERT model)"),h3e.forEach(t),Pno=i(S),Vg=n(S,"LI",{});var p3e=s(Vg);bae=n(p3e,"STRONG",{});var ZHr=s(bae);Bno=r(ZHr,"plbart"),ZHr.forEach(t),Ino=r(p3e," \u2014 "),NP=n(p3e,"A",{href:!0});var eUr=s(NP);qno=r(eUr,"PLBartTokenizer"),eUr.forEach(t),Nno=r(p3e," (PLBart model)"),p3e.forEach(t),jno=i(S),Xg=n(S,"LI",{});var _3e=s(Xg);vae=n(_3e,"STRONG",{});var oUr=s(vae);Dno=r(oUr,"prophetnet"),oUr.forEach(t),Gno=r(_3e," \u2014 "),jP=n(_3e,"A",{href:!0});var rUr=s(jP);Ono=r(rUr,"ProphetNetTokenizer"),rUr.forEach(t),Vno=r(_3e," (ProphetNet model)"),_3e.forEach(t),Xno=i(S),bs=n(S,"LI",{});var T$=s(bs);Fae=n(T$,"STRONG",{});var tUr=s(Fae);zno=r(tUr,"qdqbert"),tUr.forEach(t),Wno=r(T$," \u2014 "),DP=n(T$,"A",{href:!0});var aUr=s(DP);Qno=r(aUr,"BertTokenizer"),aUr.forEach(t),Hno=r(T$," or "),GP=n(T$,"A",{href:!0});var nUr=s(GP);Uno=r(nUr,"BertTokenizerFast"),nUr.forEach(t),Jno=r(T$," (QDQBert model)"),T$.forEach(t),Yno=i(S),zg=n(S,"LI",{});var u3e=s(zg);Tae=n(u3e,"STRONG",{});var sUr=s(Tae);Kno=r(sUr,"rag"),sUr.forEach(t),Zno=r(u3e," \u2014 "),OP=n(u3e,"A",{href:!0});var lUr=s(OP);eso=r(lUr,"RagTokenizer"),lUr.forEach(t),oso=r(u3e," (RAG model)"),u3e.forEach(t),rso=i(S),vs=n(S,"LI",{});var M$=s(vs);Mae=n(M$,"STRONG",{});var iUr=s(Mae);tso=r(iUr,"realm"),iUr.forEach(t),aso=r(M$," \u2014 "),VP=n(M$,"A",{href:!0});var dUr=s(VP);nso=r(dUr,"RealmTokenizer"),dUr.forEach(t),sso=r(M$," or "),XP=n(M$,"A",{href:!0});var cUr=s(XP);lso=r(cUr,"RealmTokenizerFast"),cUr.forEach(t),iso=r(M$," (Realm model)"),M$.forEach(t),dso=i(S),Fs=n(S,"LI",{});var E$=s(Fs);Eae=n(E$,"STRONG",{});var fUr=s(Eae);cso=r(fUr,"reformer"),fUr.forEach(t),fso=r(E$," \u2014 "),zP=n(E$,"A",{href:!0});var mUr=s(zP);mso=r(mUr,"ReformerTokenizer"),mUr.forEach(t),gso=r(E$," or "),WP=n(E$,"A",{href:!0});var gUr=s(WP);hso=r(gUr,"ReformerTokenizerFast"),gUr.forEach(t),pso=r(E$," (Reformer model)"),E$.forEach(t),_so=i(S),Ts=n(S,"LI",{});var C$=s(Ts);Cae=n(C$,"STRONG",{});var hUr=s(Cae);uso=r(hUr,"rembert"),hUr.forEach(t),bso=r(C$," \u2014 "),QP=n(C$,"A",{href:!0});var pUr=s(QP);vso=r(pUr,"RemBertTokenizer"),pUr.forEach(t),Fso=r(C$," or "),HP=n(C$,"A",{href:!0});var _Ur=s(HP);Tso=r(_Ur,"RemBertTokenizerFast"),_Ur.forEach(t),Mso=r(C$," (RemBERT model)"),C$.forEach(t),Eso=i(S),Ms=n(S,"LI",{});var w$=s(Ms);wae=n(w$,"STRONG",{});var uUr=s(wae);Cso=r(uUr,"retribert"),uUr.forEach(t),wso=r(w$," \u2014 "),UP=n(w$,"A",{href:!0});var bUr=s(UP);Aso=r(bUr,"RetriBertTokenizer"),bUr.forEach(t),yso=r(w$," or "),JP=n(w$,"A",{href:!0});var vUr=s(JP);Lso=r(vUr,"RetriBertTokenizerFast"),vUr.forEach(t),xso=r(w$," (RetriBERT model)"),w$.forEach(t),$so=i(S),Es=n(S,"LI",{});var A$=s(Es);Aae=n(A$,"STRONG",{});var FUr=s(Aae);kso=r(FUr,"roberta"),FUr.forEach(t),Sso=r(A$," \u2014 "),YP=n(A$,"A",{href:!0});var TUr=s(YP);Rso=r(TUr,"RobertaTokenizer"),TUr.forEach(t),Pso=r(A$," or "),KP=n(A$,"A",{href:!0});var MUr=s(KP);Bso=r(MUr,"RobertaTokenizerFast"),MUr.forEach(t),Iso=r(A$," (RoBERTa model)"),A$.forEach(t),qso=i(S),Cs=n(S,"LI",{});var y$=s(Cs);yae=n(y$,"STRONG",{});var EUr=s(yae);Nso=r(EUr,"roformer"),EUr.forEach(t),jso=r(y$," \u2014 "),ZP=n(y$,"A",{href:!0});var CUr=s(ZP);Dso=r(CUr,"RoFormerTokenizer"),CUr.forEach(t),Gso=r(y$," or "),eB=n(y$,"A",{href:!0});var wUr=s(eB);Oso=r(wUr,"RoFormerTokenizerFast"),wUr.forEach(t),Vso=r(y$," (RoFormer model)"),y$.forEach(t),Xso=i(S),Wg=n(S,"LI",{});var b3e=s(Wg);Lae=n(b3e,"STRONG",{});var AUr=s(Lae);zso=r(AUr,"speech_to_text"),AUr.forEach(t),Wso=r(b3e," \u2014 "),oB=n(b3e,"A",{href:!0});var yUr=s(oB);Qso=r(yUr,"Speech2TextTokenizer"),yUr.forEach(t),Hso=r(b3e," (Speech2Text model)"),b3e.forEach(t),Uso=i(S),Qg=n(S,"LI",{});var v3e=s(Qg);xae=n(v3e,"STRONG",{});var LUr=s(xae);Jso=r(LUr,"speech_to_text_2"),LUr.forEach(t),Yso=r(v3e," \u2014 "),rB=n(v3e,"A",{href:!0});var xUr=s(rB);Kso=r(xUr,"Speech2Text2Tokenizer"),xUr.forEach(t),Zso=r(v3e," (Speech2Text2 model)"),v3e.forEach(t),elo=i(S),ws=n(S,"LI",{});var L$=s(ws);$ae=n(L$,"STRONG",{});var $Ur=s($ae);olo=r($Ur,"splinter"),$Ur.forEach(t),rlo=r(L$," \u2014 "),tB=n(L$,"A",{href:!0});var kUr=s(tB);tlo=r(kUr,"SplinterTokenizer"),kUr.forEach(t),alo=r(L$," or "),aB=n(L$,"A",{href:!0});var SUr=s(aB);nlo=r(SUr,"SplinterTokenizerFast"),SUr.forEach(t),slo=r(L$," (Splinter model)"),L$.forEach(t),llo=i(S),As=n(S,"LI",{});var x$=s(As);kae=n(x$,"STRONG",{});var RUr=s(kae);ilo=r(RUr,"squeezebert"),RUr.forEach(t),dlo=r(x$," \u2014 "),nB=n(x$,"A",{href:!0});var PUr=s(nB);clo=r(PUr,"SqueezeBertTokenizer"),PUr.forEach(t),flo=r(x$," or "),sB=n(x$,"A",{href:!0});var BUr=s(sB);mlo=r(BUr,"SqueezeBertTokenizerFast"),BUr.forEach(t),glo=r(x$," (SqueezeBERT model)"),x$.forEach(t),hlo=i(S),ys=n(S,"LI",{});var $$=s(ys);Sae=n($$,"STRONG",{});var IUr=s(Sae);plo=r(IUr,"t5"),IUr.forEach(t),_lo=r($$," \u2014 "),lB=n($$,"A",{href:!0});var qUr=s(lB);ulo=r(qUr,"T5Tokenizer"),qUr.forEach(t),blo=r($$," or "),iB=n($$,"A",{href:!0});var NUr=s(iB);vlo=r(NUr,"T5TokenizerFast"),NUr.forEach(t),Flo=r($$," (T5 model)"),$$.forEach(t),Tlo=i(S),Hg=n(S,"LI",{});var F3e=s(Hg);Rae=n(F3e,"STRONG",{});var jUr=s(Rae);Mlo=r(jUr,"tapas"),jUr.forEach(t),Elo=r(F3e," \u2014 "),dB=n(F3e,"A",{href:!0});var DUr=s(dB);Clo=r(DUr,"TapasTokenizer"),DUr.forEach(t),wlo=r(F3e," (TAPAS model)"),F3e.forEach(t),Alo=i(S),Ug=n(S,"LI",{});var T3e=s(Ug);Pae=n(T3e,"STRONG",{});var GUr=s(Pae);ylo=r(GUr,"tapex"),GUr.forEach(t),Llo=r(T3e," \u2014 "),cB=n(T3e,"A",{href:!0});var OUr=s(cB);xlo=r(OUr,"TapexTokenizer"),OUr.forEach(t),$lo=r(T3e," (TAPEX model)"),T3e.forEach(t),klo=i(S),Jg=n(S,"LI",{});var M3e=s(Jg);Bae=n(M3e,"STRONG",{});var VUr=s(Bae);Slo=r(VUr,"transfo-xl"),VUr.forEach(t),Rlo=r(M3e," \u2014 "),fB=n(M3e,"A",{href:!0});var XUr=s(fB);Plo=r(XUr,"TransfoXLTokenizer"),XUr.forEach(t),Blo=r(M3e," (Transformer-XL model)"),M3e.forEach(t),Ilo=i(S),Ls=n(S,"LI",{});var k$=s(Ls);Iae=n(k$,"STRONG",{});var zUr=s(Iae);qlo=r(zUr,"visual_bert"),zUr.forEach(t),Nlo=r(k$," \u2014 "),mB=n(k$,"A",{href:!0});var WUr=s(mB);jlo=r(WUr,"BertTokenizer"),WUr.forEach(t),Dlo=r(k$," or "),gB=n(k$,"A",{href:!0});var QUr=s(gB);Glo=r(QUr,"BertTokenizerFast"),QUr.forEach(t),Olo=r(k$," (VisualBert model)"),k$.forEach(t),Vlo=i(S),Yg=n(S,"LI",{});var E3e=s(Yg);qae=n(E3e,"STRONG",{});var HUr=s(qae);Xlo=r(HUr,"wav2vec2"),HUr.forEach(t),zlo=r(E3e," \u2014 "),hB=n(E3e,"A",{href:!0});var UUr=s(hB);Wlo=r(UUr,"Wav2Vec2CTCTokenizer"),UUr.forEach(t),Qlo=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),Hlo=i(S),Kg=n(S,"LI",{});var C3e=s(Kg);Nae=n(C3e,"STRONG",{});var JUr=s(Nae);Ulo=r(JUr,"wav2vec2-conformer"),JUr.forEach(t),Jlo=r(C3e," \u2014 "),pB=n(C3e,"A",{href:!0});var YUr=s(pB);Ylo=r(YUr,"Wav2Vec2CTCTokenizer"),YUr.forEach(t),Klo=r(C3e," (Wav2Vec2-Conformer model)"),C3e.forEach(t),Zlo=i(S),Zg=n(S,"LI",{});var w3e=s(Zg);jae=n(w3e,"STRONG",{});var KUr=s(jae);eio=r(KUr,"wav2vec2_phoneme"),KUr.forEach(t),oio=r(w3e," \u2014 "),_B=n(w3e,"A",{href:!0});var ZUr=s(_B);rio=r(ZUr,"Wav2Vec2PhonemeCTCTokenizer"),ZUr.forEach(t),tio=r(w3e," (Wav2Vec2Phoneme model)"),w3e.forEach(t),aio=i(S),xs=n(S,"LI",{});var S$=s(xs);Dae=n(S$,"STRONG",{});var eJr=s(Dae);nio=r(eJr,"xglm"),eJr.forEach(t),sio=r(S$," \u2014 "),uB=n(S$,"A",{href:!0});var oJr=s(uB);lio=r(oJr,"XGLMTokenizer"),oJr.forEach(t),iio=r(S$," or "),bB=n(S$,"A",{href:!0});var rJr=s(bB);dio=r(rJr,"XGLMTokenizerFast"),rJr.forEach(t),cio=r(S$," (XGLM model)"),S$.forEach(t),fio=i(S),eh=n(S,"LI",{});var A3e=s(eh);Gae=n(A3e,"STRONG",{});var tJr=s(Gae);mio=r(tJr,"xlm"),tJr.forEach(t),gio=r(A3e," \u2014 "),vB=n(A3e,"A",{href:!0});var aJr=s(vB);hio=r(aJr,"XLMTokenizer"),aJr.forEach(t),pio=r(A3e," (XLM model)"),A3e.forEach(t),_io=i(S),oh=n(S,"LI",{});var y3e=s(oh);Oae=n(y3e,"STRONG",{});var nJr=s(Oae);uio=r(nJr,"xlm-prophetnet"),nJr.forEach(t),bio=r(y3e," \u2014 "),FB=n(y3e,"A",{href:!0});var sJr=s(FB);vio=r(sJr,"XLMProphetNetTokenizer"),sJr.forEach(t),Fio=r(y3e," (XLMProphetNet model)"),y3e.forEach(t),Tio=i(S),$s=n(S,"LI",{});var R$=s($s);Vae=n(R$,"STRONG",{});var lJr=s(Vae);Mio=r(lJr,"xlm-roberta"),lJr.forEach(t),Eio=r(R$," \u2014 "),TB=n(R$,"A",{href:!0});var iJr=s(TB);Cio=r(iJr,"XLMRobertaTokenizer"),iJr.forEach(t),wio=r(R$," or "),MB=n(R$,"A",{href:!0});var dJr=s(MB);Aio=r(dJr,"XLMRobertaTokenizerFast"),dJr.forEach(t),yio=r(R$," (XLM-RoBERTa model)"),R$.forEach(t),Lio=i(S),ks=n(S,"LI",{});var P$=s(ks);Xae=n(P$,"STRONG",{});var cJr=s(Xae);xio=r(cJr,"xlm-roberta-xl"),cJr.forEach(t),$io=r(P$," \u2014 "),EB=n(P$,"A",{href:!0});var fJr=s(EB);kio=r(fJr,"RobertaTokenizer"),fJr.forEach(t),Sio=r(P$," or "),CB=n(P$,"A",{href:!0});var mJr=s(CB);Rio=r(mJr,"RobertaTokenizerFast"),mJr.forEach(t),Pio=r(P$," (XLM-RoBERTa-XL model)"),P$.forEach(t),Bio=i(S),Ss=n(S,"LI",{});var B$=s(Ss);zae=n(B$,"STRONG",{});var gJr=s(zae);Iio=r(gJr,"xlnet"),gJr.forEach(t),qio=r(B$," \u2014 "),wB=n(B$,"A",{href:!0});var hJr=s(wB);Nio=r(hJr,"XLNetTokenizer"),hJr.forEach(t),jio=r(B$," or "),AB=n(B$,"A",{href:!0});var pJr=s(AB);Dio=r(pJr,"XLNetTokenizerFast"),pJr.forEach(t),Gio=r(B$," (XLNet model)"),B$.forEach(t),Oio=i(S),Rs=n(S,"LI",{});var I$=s(Rs);Wae=n(I$,"STRONG",{});var _Jr=s(Wae);Vio=r(_Jr,"yoso"),_Jr.forEach(t),Xio=r(I$," \u2014 "),yB=n(I$,"A",{href:!0});var uJr=s(yB);zio=r(uJr,"AlbertTokenizer"),uJr.forEach(t),Wio=r(I$," or "),LB=n(I$,"A",{href:!0});var bJr=s(LB);Qio=r(bJr,"AlbertTokenizerFast"),bJr.forEach(t),Hio=r(I$," (YOSO model)"),I$.forEach(t),S.forEach(t),Uio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),Jio=i(qs),th=n(qs,"DIV",{class:!0});var Dje=s(th);T(B0.$$.fragment,Dje),Yio=i(Dje),Qae=n(Dje,"P",{});var vJr=s(Qae);Kio=r(vJr,"Register a new tokenizer in this mapping."),vJr.forEach(t),Dje.forEach(t),qs.forEach(t),Gqe=i(f),Mi=n(f,"H2",{class:!0});var Gje=s(Mi);ah=n(Gje,"A",{id:!0,class:!0,href:!0});var FJr=s(ah);Hae=n(FJr,"SPAN",{});var TJr=s(Hae);T(I0.$$.fragment,TJr),TJr.forEach(t),FJr.forEach(t),Zio=i(Gje),Uae=n(Gje,"SPAN",{});var MJr=s(Uae);edo=r(MJr,"AutoFeatureExtractor"),MJr.forEach(t),Gje.forEach(t),Oqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(q0.$$.fragment,js),odo=i(js),N0=n(js,"P",{});var Oje=s(N0);rdo=r(Oje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=n(Oje,"A",{href:!0});var EJr=s(xB);tdo=r(EJr,"AutoFeatureExtractor.from_pretrained()"),EJr.forEach(t),ado=r(Oje," class method."),Oje.forEach(t),ndo=i(js),j0=n(js,"P",{});var Vje=s(j0);sdo=r(Vje,"This class cannot be instantiated directly using "),Jae=n(Vje,"CODE",{});var CJr=s(Jae);ldo=r(CJr,"__init__()"),CJr.forEach(t),ido=r(Vje," (throws an error)."),Vje.forEach(t),ddo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(D0.$$.fragment,Zt),cdo=i(Zt),Yae=n(Zt,"P",{});var wJr=s(Yae);fdo=r(wJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wJr.forEach(t),mdo=i(Zt),ya=n(Zt,"P",{});var w3=s(ya);gdo=r(w3,"The feature extractor class to instantiate is selected based on the "),Kae=n(w3,"CODE",{});var AJr=s(Kae);hdo=r(AJr,"model_type"),AJr.forEach(t),pdo=r(w3,` property of the config object
(either passed as an argument or loaded from `),Zae=n(w3,"CODE",{});var yJr=s(Zae);_do=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),udo=r(w3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=n(w3,"CODE",{});var LJr=s(ene);bdo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),vdo=r(w3,":"),w3.forEach(t),Fdo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);nh=n(te,"LI",{});var L3e=s(nh);one=n(L3e,"STRONG",{});var xJr=s(one);Tdo=r(xJr,"beit"),xJr.forEach(t),Mdo=r(L3e," \u2014 "),$B=n(L3e,"A",{href:!0});var $Jr=s($B);Edo=r($Jr,"BeitFeatureExtractor"),$Jr.forEach(t),Cdo=r(L3e," (BEiT model)"),L3e.forEach(t),wdo=i(te),sh=n(te,"LI",{});var x3e=s(sh);rne=n(x3e,"STRONG",{});var kJr=s(rne);Ado=r(kJr,"clip"),kJr.forEach(t),ydo=r(x3e," \u2014 "),kB=n(x3e,"A",{href:!0});var SJr=s(kB);Ldo=r(SJr,"CLIPFeatureExtractor"),SJr.forEach(t),xdo=r(x3e," (CLIP model)"),x3e.forEach(t),$do=i(te),lh=n(te,"LI",{});var $3e=s(lh);tne=n($3e,"STRONG",{});var RJr=s(tne);kdo=r(RJr,"convnext"),RJr.forEach(t),Sdo=r($3e," \u2014 "),SB=n($3e,"A",{href:!0});var PJr=s(SB);Rdo=r(PJr,"ConvNextFeatureExtractor"),PJr.forEach(t),Pdo=r($3e," (ConvNext model)"),$3e.forEach(t),Bdo=i(te),ih=n(te,"LI",{});var k3e=s(ih);ane=n(k3e,"STRONG",{});var BJr=s(ane);Ido=r(BJr,"cvt"),BJr.forEach(t),qdo=r(k3e," \u2014 "),RB=n(k3e,"A",{href:!0});var IJr=s(RB);Ndo=r(IJr,"ConvNextFeatureExtractor"),IJr.forEach(t),jdo=r(k3e," (CvT model)"),k3e.forEach(t),Ddo=i(te),dh=n(te,"LI",{});var S3e=s(dh);nne=n(S3e,"STRONG",{});var qJr=s(nne);Gdo=r(qJr,"data2vec-audio"),qJr.forEach(t),Odo=r(S3e," \u2014 "),PB=n(S3e,"A",{href:!0});var NJr=s(PB);Vdo=r(NJr,"Wav2Vec2FeatureExtractor"),NJr.forEach(t),Xdo=r(S3e," (Data2VecAudio model)"),S3e.forEach(t),zdo=i(te),ch=n(te,"LI",{});var R3e=s(ch);sne=n(R3e,"STRONG",{});var jJr=s(sne);Wdo=r(jJr,"data2vec-vision"),jJr.forEach(t),Qdo=r(R3e," \u2014 "),BB=n(R3e,"A",{href:!0});var DJr=s(BB);Hdo=r(DJr,"BeitFeatureExtractor"),DJr.forEach(t),Udo=r(R3e," (Data2VecVision model)"),R3e.forEach(t),Jdo=i(te),fh=n(te,"LI",{});var P3e=s(fh);lne=n(P3e,"STRONG",{});var GJr=s(lne);Ydo=r(GJr,"deit"),GJr.forEach(t),Kdo=r(P3e," \u2014 "),IB=n(P3e,"A",{href:!0});var OJr=s(IB);Zdo=r(OJr,"DeiTFeatureExtractor"),OJr.forEach(t),eco=r(P3e," (DeiT model)"),P3e.forEach(t),oco=i(te),mh=n(te,"LI",{});var B3e=s(mh);ine=n(B3e,"STRONG",{});var VJr=s(ine);rco=r(VJr,"detr"),VJr.forEach(t),tco=r(B3e," \u2014 "),qB=n(B3e,"A",{href:!0});var XJr=s(qB);aco=r(XJr,"DetrFeatureExtractor"),XJr.forEach(t),nco=r(B3e," (DETR model)"),B3e.forEach(t),sco=i(te),gh=n(te,"LI",{});var I3e=s(gh);dne=n(I3e,"STRONG",{});var zJr=s(dne);lco=r(zJr,"dpt"),zJr.forEach(t),ico=r(I3e," \u2014 "),NB=n(I3e,"A",{href:!0});var WJr=s(NB);dco=r(WJr,"DPTFeatureExtractor"),WJr.forEach(t),cco=r(I3e," (DPT model)"),I3e.forEach(t),fco=i(te),hh=n(te,"LI",{});var q3e=s(hh);cne=n(q3e,"STRONG",{});var QJr=s(cne);mco=r(QJr,"flava"),QJr.forEach(t),gco=r(q3e," \u2014 "),jB=n(q3e,"A",{href:!0});var HJr=s(jB);hco=r(HJr,"FlavaFeatureExtractor"),HJr.forEach(t),pco=r(q3e," (Flava model)"),q3e.forEach(t),_co=i(te),ph=n(te,"LI",{});var N3e=s(ph);fne=n(N3e,"STRONG",{});var UJr=s(fne);uco=r(UJr,"glpn"),UJr.forEach(t),bco=r(N3e," \u2014 "),DB=n(N3e,"A",{href:!0});var JJr=s(DB);vco=r(JJr,"GLPNFeatureExtractor"),JJr.forEach(t),Fco=r(N3e," (GLPN model)"),N3e.forEach(t),Tco=i(te),_h=n(te,"LI",{});var j3e=s(_h);mne=n(j3e,"STRONG",{});var YJr=s(mne);Mco=r(YJr,"hubert"),YJr.forEach(t),Eco=r(j3e," \u2014 "),GB=n(j3e,"A",{href:!0});var KJr=s(GB);Cco=r(KJr,"Wav2Vec2FeatureExtractor"),KJr.forEach(t),wco=r(j3e," (Hubert model)"),j3e.forEach(t),Aco=i(te),uh=n(te,"LI",{});var D3e=s(uh);gne=n(D3e,"STRONG",{});var ZJr=s(gne);yco=r(ZJr,"layoutlmv2"),ZJr.forEach(t),Lco=r(D3e," \u2014 "),OB=n(D3e,"A",{href:!0});var eYr=s(OB);xco=r(eYr,"LayoutLMv2FeatureExtractor"),eYr.forEach(t),$co=r(D3e," (LayoutLMv2 model)"),D3e.forEach(t),kco=i(te),bh=n(te,"LI",{});var G3e=s(bh);hne=n(G3e,"STRONG",{});var oYr=s(hne);Sco=r(oYr,"maskformer"),oYr.forEach(t),Rco=r(G3e," \u2014 "),VB=n(G3e,"A",{href:!0});var rYr=s(VB);Pco=r(rYr,"MaskFormerFeatureExtractor"),rYr.forEach(t),Bco=r(G3e," (MaskFormer model)"),G3e.forEach(t),Ico=i(te),vh=n(te,"LI",{});var O3e=s(vh);pne=n(O3e,"STRONG",{});var tYr=s(pne);qco=r(tYr,"perceiver"),tYr.forEach(t),Nco=r(O3e," \u2014 "),XB=n(O3e,"A",{href:!0});var aYr=s(XB);jco=r(aYr,"PerceiverFeatureExtractor"),aYr.forEach(t),Dco=r(O3e," (Perceiver model)"),O3e.forEach(t),Gco=i(te),Fh=n(te,"LI",{});var V3e=s(Fh);_ne=n(V3e,"STRONG",{});var nYr=s(_ne);Oco=r(nYr,"poolformer"),nYr.forEach(t),Vco=r(V3e," \u2014 "),zB=n(V3e,"A",{href:!0});var sYr=s(zB);Xco=r(sYr,"PoolFormerFeatureExtractor"),sYr.forEach(t),zco=r(V3e," (PoolFormer model)"),V3e.forEach(t),Wco=i(te),Th=n(te,"LI",{});var X3e=s(Th);une=n(X3e,"STRONG",{});var lYr=s(une);Qco=r(lYr,"regnet"),lYr.forEach(t),Hco=r(X3e," \u2014 "),WB=n(X3e,"A",{href:!0});var iYr=s(WB);Uco=r(iYr,"ConvNextFeatureExtractor"),iYr.forEach(t),Jco=r(X3e," (RegNet model)"),X3e.forEach(t),Yco=i(te),Mh=n(te,"LI",{});var z3e=s(Mh);bne=n(z3e,"STRONG",{});var dYr=s(bne);Kco=r(dYr,"resnet"),dYr.forEach(t),Zco=r(z3e," \u2014 "),QB=n(z3e,"A",{href:!0});var cYr=s(QB);efo=r(cYr,"ConvNextFeatureExtractor"),cYr.forEach(t),ofo=r(z3e," (ResNet model)"),z3e.forEach(t),rfo=i(te),Eh=n(te,"LI",{});var W3e=s(Eh);vne=n(W3e,"STRONG",{});var fYr=s(vne);tfo=r(fYr,"segformer"),fYr.forEach(t),afo=r(W3e," \u2014 "),HB=n(W3e,"A",{href:!0});var mYr=s(HB);nfo=r(mYr,"SegformerFeatureExtractor"),mYr.forEach(t),sfo=r(W3e," (SegFormer model)"),W3e.forEach(t),lfo=i(te),Ch=n(te,"LI",{});var Q3e=s(Ch);Fne=n(Q3e,"STRONG",{});var gYr=s(Fne);ifo=r(gYr,"speech_to_text"),gYr.forEach(t),dfo=r(Q3e," \u2014 "),UB=n(Q3e,"A",{href:!0});var hYr=s(UB);cfo=r(hYr,"Speech2TextFeatureExtractor"),hYr.forEach(t),ffo=r(Q3e," (Speech2Text model)"),Q3e.forEach(t),mfo=i(te),wh=n(te,"LI",{});var H3e=s(wh);Tne=n(H3e,"STRONG",{});var pYr=s(Tne);gfo=r(pYr,"swin"),pYr.forEach(t),hfo=r(H3e," \u2014 "),JB=n(H3e,"A",{href:!0});var _Yr=s(JB);pfo=r(_Yr,"ViTFeatureExtractor"),_Yr.forEach(t),_fo=r(H3e," (Swin model)"),H3e.forEach(t),ufo=i(te),Ah=n(te,"LI",{});var U3e=s(Ah);Mne=n(U3e,"STRONG",{});var uYr=s(Mne);bfo=r(uYr,"van"),uYr.forEach(t),vfo=r(U3e," \u2014 "),YB=n(U3e,"A",{href:!0});var bYr=s(YB);Ffo=r(bYr,"ConvNextFeatureExtractor"),bYr.forEach(t),Tfo=r(U3e," (VAN model)"),U3e.forEach(t),Mfo=i(te),yh=n(te,"LI",{});var J3e=s(yh);Ene=n(J3e,"STRONG",{});var vYr=s(Ene);Efo=r(vYr,"vit"),vYr.forEach(t),Cfo=r(J3e," \u2014 "),KB=n(J3e,"A",{href:!0});var FYr=s(KB);wfo=r(FYr,"ViTFeatureExtractor"),FYr.forEach(t),Afo=r(J3e," (ViT model)"),J3e.forEach(t),yfo=i(te),Lh=n(te,"LI",{});var Y3e=s(Lh);Cne=n(Y3e,"STRONG",{});var TYr=s(Cne);Lfo=r(TYr,"vit_mae"),TYr.forEach(t),xfo=r(Y3e," \u2014 "),ZB=n(Y3e,"A",{href:!0});var MYr=s(ZB);$fo=r(MYr,"ViTFeatureExtractor"),MYr.forEach(t),kfo=r(Y3e," (ViTMAE model)"),Y3e.forEach(t),Sfo=i(te),xh=n(te,"LI",{});var K3e=s(xh);wne=n(K3e,"STRONG",{});var EYr=s(wne);Rfo=r(EYr,"wav2vec2"),EYr.forEach(t),Pfo=r(K3e," \u2014 "),eI=n(K3e,"A",{href:!0});var CYr=s(eI);Bfo=r(CYr,"Wav2Vec2FeatureExtractor"),CYr.forEach(t),Ifo=r(K3e," (Wav2Vec2 model)"),K3e.forEach(t),qfo=i(te),$h=n(te,"LI",{});var Z3e=s($h);Ane=n(Z3e,"STRONG",{});var wYr=s(Ane);Nfo=r(wYr,"wav2vec2-conformer"),wYr.forEach(t),jfo=r(Z3e," \u2014 "),oI=n(Z3e,"A",{href:!0});var AYr=s(oI);Dfo=r(AYr,"Wav2Vec2FeatureExtractor"),AYr.forEach(t),Gfo=r(Z3e," (Wav2Vec2-Conformer model)"),Z3e.forEach(t),Ofo=i(te),kh=n(te,"LI",{});var ewe=s(kh);yne=n(ewe,"STRONG",{});var yYr=s(yne);Vfo=r(yYr,"yolos"),yYr.forEach(t),Xfo=r(ewe," \u2014 "),rI=n(ewe,"A",{href:!0});var LYr=s(rI);zfo=r(LYr,"YolosFeatureExtractor"),LYr.forEach(t),Wfo=r(ewe," (YOLOS model)"),ewe.forEach(t),te.forEach(t),Qfo=i(Zt),T(Sh.$$.fragment,Zt),Hfo=i(Zt),T(Rh.$$.fragment,Zt),Zt.forEach(t),Ufo=i(js),Ph=n(js,"DIV",{class:!0});var Xje=s(Ph);T(G0.$$.fragment,Xje),Jfo=i(Xje),Lne=n(Xje,"P",{});var xYr=s(Lne);Yfo=r(xYr,"Register a new feature extractor for this class."),xYr.forEach(t),Xje.forEach(t),js.forEach(t),Vqe=i(f),Ei=n(f,"H2",{class:!0});var zje=s(Ei);Bh=n(zje,"A",{id:!0,class:!0,href:!0});var $Yr=s(Bh);xne=n($Yr,"SPAN",{});var kYr=s(xne);T(O0.$$.fragment,kYr),kYr.forEach(t),$Yr.forEach(t),Kfo=i(zje),$ne=n(zje,"SPAN",{});var SYr=s($ne);Zfo=r(SYr,"AutoProcessor"),SYr.forEach(t),zje.forEach(t),Xqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(V0.$$.fragment,Ds),emo=i(Ds),X0=n(Ds,"P",{});var Wje=s(X0);omo=r(Wje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tI=n(Wje,"A",{href:!0});var RYr=s(tI);rmo=r(RYr,"AutoProcessor.from_pretrained()"),RYr.forEach(t),tmo=r(Wje," class method."),Wje.forEach(t),amo=i(Ds),z0=n(Ds,"P",{});var Qje=s(z0);nmo=r(Qje,"This class cannot be instantiated directly using "),kne=n(Qje,"CODE",{});var PYr=s(kne);smo=r(PYr,"__init__()"),PYr.forEach(t),lmo=r(Qje," (throws an error)."),Qje.forEach(t),imo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(W0.$$.fragment,ea),dmo=i(ea),Sne=n(ea,"P",{});var BYr=s(Sne);cmo=r(BYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BYr.forEach(t),fmo=i(ea),Ci=n(ea,"P",{});var aZ=s(Ci);mmo=r(aZ,"The processor class to instantiate is selected based on the "),Rne=n(aZ,"CODE",{});var IYr=s(Rne);gmo=r(IYr,"model_type"),IYr.forEach(t),hmo=r(aZ,` property of the config object (either
passed as an argument or loaded from `),Pne=n(aZ,"CODE",{});var qYr=s(Pne);pmo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),_mo=r(aZ," if possible):"),aZ.forEach(t),umo=i(ea),_e=n(ea,"UL",{});var ve=s(_e);Ih=n(ve,"LI",{});var owe=s(Ih);Bne=n(owe,"STRONG",{});var NYr=s(Bne);bmo=r(NYr,"clip"),NYr.forEach(t),vmo=r(owe," \u2014 "),aI=n(owe,"A",{href:!0});var jYr=s(aI);Fmo=r(jYr,"CLIPProcessor"),jYr.forEach(t),Tmo=r(owe," (CLIP model)"),owe.forEach(t),Mmo=i(ve),qh=n(ve,"LI",{});var rwe=s(qh);Ine=n(rwe,"STRONG",{});var DYr=s(Ine);Emo=r(DYr,"flava"),DYr.forEach(t),Cmo=r(rwe," \u2014 "),qne=n(rwe,"CODE",{});var GYr=s(qne);wmo=r(GYr,"FLAVAProcessor"),GYr.forEach(t),Amo=r(rwe," (Flava model)"),rwe.forEach(t),ymo=i(ve),Nh=n(ve,"LI",{});var twe=s(Nh);Nne=n(twe,"STRONG",{});var OYr=s(Nne);Lmo=r(OYr,"layoutlmv2"),OYr.forEach(t),xmo=r(twe," \u2014 "),nI=n(twe,"A",{href:!0});var VYr=s(nI);$mo=r(VYr,"LayoutLMv2Processor"),VYr.forEach(t),kmo=r(twe," (LayoutLMv2 model)"),twe.forEach(t),Smo=i(ve),jh=n(ve,"LI",{});var awe=s(jh);jne=n(awe,"STRONG",{});var XYr=s(jne);Rmo=r(XYr,"layoutxlm"),XYr.forEach(t),Pmo=r(awe," \u2014 "),sI=n(awe,"A",{href:!0});var zYr=s(sI);Bmo=r(zYr,"LayoutXLMProcessor"),zYr.forEach(t),Imo=r(awe," (LayoutXLM model)"),awe.forEach(t),qmo=i(ve),Dh=n(ve,"LI",{});var nwe=s(Dh);Dne=n(nwe,"STRONG",{});var WYr=s(Dne);Nmo=r(WYr,"sew"),WYr.forEach(t),jmo=r(nwe," \u2014 "),lI=n(nwe,"A",{href:!0});var QYr=s(lI);Dmo=r(QYr,"Wav2Vec2Processor"),QYr.forEach(t),Gmo=r(nwe," (SEW model)"),nwe.forEach(t),Omo=i(ve),Gh=n(ve,"LI",{});var swe=s(Gh);Gne=n(swe,"STRONG",{});var HYr=s(Gne);Vmo=r(HYr,"sew-d"),HYr.forEach(t),Xmo=r(swe," \u2014 "),iI=n(swe,"A",{href:!0});var UYr=s(iI);zmo=r(UYr,"Wav2Vec2Processor"),UYr.forEach(t),Wmo=r(swe," (SEW-D model)"),swe.forEach(t),Qmo=i(ve),Oh=n(ve,"LI",{});var lwe=s(Oh);One=n(lwe,"STRONG",{});var JYr=s(One);Hmo=r(JYr,"speech_to_text"),JYr.forEach(t),Umo=r(lwe," \u2014 "),dI=n(lwe,"A",{href:!0});var YYr=s(dI);Jmo=r(YYr,"Speech2TextProcessor"),YYr.forEach(t),Ymo=r(lwe," (Speech2Text model)"),lwe.forEach(t),Kmo=i(ve),Vh=n(ve,"LI",{});var iwe=s(Vh);Vne=n(iwe,"STRONG",{});var KYr=s(Vne);Zmo=r(KYr,"speech_to_text_2"),KYr.forEach(t),ego=r(iwe," \u2014 "),cI=n(iwe,"A",{href:!0});var ZYr=s(cI);ogo=r(ZYr,"Speech2Text2Processor"),ZYr.forEach(t),rgo=r(iwe," (Speech2Text2 model)"),iwe.forEach(t),tgo=i(ve),Xh=n(ve,"LI",{});var dwe=s(Xh);Xne=n(dwe,"STRONG",{});var eKr=s(Xne);ago=r(eKr,"trocr"),eKr.forEach(t),ngo=r(dwe," \u2014 "),fI=n(dwe,"A",{href:!0});var oKr=s(fI);sgo=r(oKr,"TrOCRProcessor"),oKr.forEach(t),lgo=r(dwe," (TrOCR model)"),dwe.forEach(t),igo=i(ve),zh=n(ve,"LI",{});var cwe=s(zh);zne=n(cwe,"STRONG",{});var rKr=s(zne);dgo=r(rKr,"unispeech"),rKr.forEach(t),cgo=r(cwe," \u2014 "),mI=n(cwe,"A",{href:!0});var tKr=s(mI);fgo=r(tKr,"Wav2Vec2Processor"),tKr.forEach(t),mgo=r(cwe," (UniSpeech model)"),cwe.forEach(t),ggo=i(ve),Wh=n(ve,"LI",{});var fwe=s(Wh);Wne=n(fwe,"STRONG",{});var aKr=s(Wne);hgo=r(aKr,"unispeech-sat"),aKr.forEach(t),pgo=r(fwe," \u2014 "),gI=n(fwe,"A",{href:!0});var nKr=s(gI);_go=r(nKr,"Wav2Vec2Processor"),nKr.forEach(t),ugo=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),bgo=i(ve),Qh=n(ve,"LI",{});var mwe=s(Qh);Qne=n(mwe,"STRONG",{});var sKr=s(Qne);vgo=r(sKr,"vilt"),sKr.forEach(t),Fgo=r(mwe," \u2014 "),hI=n(mwe,"A",{href:!0});var lKr=s(hI);Tgo=r(lKr,"ViltProcessor"),lKr.forEach(t),Mgo=r(mwe," (ViLT model)"),mwe.forEach(t),Ego=i(ve),Hh=n(ve,"LI",{});var gwe=s(Hh);Hne=n(gwe,"STRONG",{});var iKr=s(Hne);Cgo=r(iKr,"vision-text-dual-encoder"),iKr.forEach(t),wgo=r(gwe," \u2014 "),pI=n(gwe,"A",{href:!0});var dKr=s(pI);Ago=r(dKr,"VisionTextDualEncoderProcessor"),dKr.forEach(t),ygo=r(gwe," (VisionTextDualEncoder model)"),gwe.forEach(t),Lgo=i(ve),Uh=n(ve,"LI",{});var hwe=s(Uh);Une=n(hwe,"STRONG",{});var cKr=s(Une);xgo=r(cKr,"wav2vec2"),cKr.forEach(t),$go=r(hwe," \u2014 "),_I=n(hwe,"A",{href:!0});var fKr=s(_I);kgo=r(fKr,"Wav2Vec2Processor"),fKr.forEach(t),Sgo=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),Rgo=i(ve),Jh=n(ve,"LI",{});var pwe=s(Jh);Jne=n(pwe,"STRONG",{});var mKr=s(Jne);Pgo=r(mKr,"wav2vec2-conformer"),mKr.forEach(t),Bgo=r(pwe," \u2014 "),uI=n(pwe,"A",{href:!0});var gKr=s(uI);Igo=r(gKr,"Wav2Vec2Processor"),gKr.forEach(t),qgo=r(pwe," (Wav2Vec2-Conformer model)"),pwe.forEach(t),Ngo=i(ve),Yh=n(ve,"LI",{});var _we=s(Yh);Yne=n(_we,"STRONG",{});var hKr=s(Yne);jgo=r(hKr,"wavlm"),hKr.forEach(t),Dgo=r(_we," \u2014 "),bI=n(_we,"A",{href:!0});var pKr=s(bI);Ggo=r(pKr,"Wav2Vec2Processor"),pKr.forEach(t),Ogo=r(_we," (WavLM model)"),_we.forEach(t),ve.forEach(t),Vgo=i(ea),T(Kh.$$.fragment,ea),Xgo=i(ea),T(Zh.$$.fragment,ea),ea.forEach(t),zgo=i(Ds),ep=n(Ds,"DIV",{class:!0});var Hje=s(ep);T(Q0.$$.fragment,Hje),Wgo=i(Hje),Kne=n(Hje,"P",{});var _Kr=s(Kne);Qgo=r(_Kr,"Register a new processor for this class."),_Kr.forEach(t),Hje.forEach(t),Ds.forEach(t),zqe=i(f),wi=n(f,"H2",{class:!0});var Uje=s(wi);op=n(Uje,"A",{id:!0,class:!0,href:!0});var uKr=s(op);Zne=n(uKr,"SPAN",{});var bKr=s(Zne);T(H0.$$.fragment,bKr),bKr.forEach(t),uKr.forEach(t),Hgo=i(Uje),ese=n(Uje,"SPAN",{});var vKr=s(ese);Ugo=r(vKr,"AutoModel"),vKr.forEach(t),Uje.forEach(t),Wqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(U0.$$.fragment,Gs),Jgo=i(Gs),Ai=n(Gs,"P",{});var nZ=s(Ai);Ygo=r(nZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vI=n(nZ,"A",{href:!0});var FKr=s(vI);Kgo=r(FKr,"from_pretrained()"),FKr.forEach(t),Zgo=r(nZ," class method or the "),FI=n(nZ,"A",{href:!0});var TKr=s(FI);eho=r(TKr,"from_config()"),TKr.forEach(t),oho=r(nZ,` class
method.`),nZ.forEach(t),rho=i(Gs),J0=n(Gs,"P",{});var Jje=s(J0);tho=r(Jje,"This class cannot be instantiated directly using "),ose=n(Jje,"CODE",{});var MKr=s(ose);aho=r(MKr,"__init__()"),MKr.forEach(t),nho=r(Jje," (throws an error)."),Jje.forEach(t),sho=i(Gs),tt=n(Gs,"DIV",{class:!0});var A3=s(tt);T(Y0.$$.fragment,A3),lho=i(A3),rse=n(A3,"P",{});var EKr=s(rse);iho=r(EKr,"Instantiates one of the base model classes of the library from a configuration."),EKr.forEach(t),dho=i(A3),yi=n(A3,"P",{});var sZ=s(yi);cho=r(sZ,`Note:
Loading a model from its configuration file does `),tse=n(sZ,"STRONG",{});var CKr=s(tse);fho=r(CKr,"not"),CKr.forEach(t),mho=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TI=n(sZ,"A",{href:!0});var wKr=s(TI);gho=r(wKr,"from_pretrained()"),wKr.forEach(t),hho=r(sZ," to load the model weights."),sZ.forEach(t),pho=i(A3),T(rp.$$.fragment,A3),A3.forEach(t),_ho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(K0.$$.fragment,oa),uho=i(oa),ase=n(oa,"P",{});var AKr=s(ase);bho=r(AKr,"Instantiate one of the base model classes of the library from a pretrained model."),AKr.forEach(t),vho=i(oa),La=n(oa,"P",{});var y3=s(La);Fho=r(y3,"The model class to instantiate is selected based on the "),nse=n(y3,"CODE",{});var yKr=s(nse);Tho=r(yKr,"model_type"),yKr.forEach(t),Mho=r(y3,` property of the config object (either
passed as an argument or loaded from `),sse=n(y3,"CODE",{});var LKr=s(sse);Eho=r(LKr,"pretrained_model_name_or_path"),LKr.forEach(t),Cho=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=n(y3,"CODE",{});var xKr=s(lse);who=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),Aho=r(y3,":"),y3.forEach(t),yho=i(oa),x=n(oa,"UL",{});var $=s(x);tp=n($,"LI",{});var uwe=s(tp);ise=n(uwe,"STRONG",{});var $Kr=s(ise);Lho=r($Kr,"albert"),$Kr.forEach(t),xho=r(uwe," \u2014 "),MI=n(uwe,"A",{href:!0});var kKr=s(MI);$ho=r(kKr,"AlbertModel"),kKr.forEach(t),kho=r(uwe," (ALBERT model)"),uwe.forEach(t),Sho=i($),ap=n($,"LI",{});var bwe=s(ap);dse=n(bwe,"STRONG",{});var SKr=s(dse);Rho=r(SKr,"bart"),SKr.forEach(t),Pho=r(bwe," \u2014 "),EI=n(bwe,"A",{href:!0});var RKr=s(EI);Bho=r(RKr,"BartModel"),RKr.forEach(t),Iho=r(bwe," (BART model)"),bwe.forEach(t),qho=i($),np=n($,"LI",{});var vwe=s(np);cse=n(vwe,"STRONG",{});var PKr=s(cse);Nho=r(PKr,"beit"),PKr.forEach(t),jho=r(vwe," \u2014 "),CI=n(vwe,"A",{href:!0});var BKr=s(CI);Dho=r(BKr,"BeitModel"),BKr.forEach(t),Gho=r(vwe," (BEiT model)"),vwe.forEach(t),Oho=i($),sp=n($,"LI",{});var Fwe=s(sp);fse=n(Fwe,"STRONG",{});var IKr=s(fse);Vho=r(IKr,"bert"),IKr.forEach(t),Xho=r(Fwe," \u2014 "),wI=n(Fwe,"A",{href:!0});var qKr=s(wI);zho=r(qKr,"BertModel"),qKr.forEach(t),Who=r(Fwe," (BERT model)"),Fwe.forEach(t),Qho=i($),lp=n($,"LI",{});var Twe=s(lp);mse=n(Twe,"STRONG",{});var NKr=s(mse);Hho=r(NKr,"bert-generation"),NKr.forEach(t),Uho=r(Twe," \u2014 "),AI=n(Twe,"A",{href:!0});var jKr=s(AI);Jho=r(jKr,"BertGenerationEncoder"),jKr.forEach(t),Yho=r(Twe," (Bert Generation model)"),Twe.forEach(t),Kho=i($),ip=n($,"LI",{});var Mwe=s(ip);gse=n(Mwe,"STRONG",{});var DKr=s(gse);Zho=r(DKr,"big_bird"),DKr.forEach(t),epo=r(Mwe," \u2014 "),yI=n(Mwe,"A",{href:!0});var GKr=s(yI);opo=r(GKr,"BigBirdModel"),GKr.forEach(t),rpo=r(Mwe," (BigBird model)"),Mwe.forEach(t),tpo=i($),dp=n($,"LI",{});var Ewe=s(dp);hse=n(Ewe,"STRONG",{});var OKr=s(hse);apo=r(OKr,"bigbird_pegasus"),OKr.forEach(t),npo=r(Ewe," \u2014 "),LI=n(Ewe,"A",{href:!0});var VKr=s(LI);spo=r(VKr,"BigBirdPegasusModel"),VKr.forEach(t),lpo=r(Ewe," (BigBirdPegasus model)"),Ewe.forEach(t),ipo=i($),cp=n($,"LI",{});var Cwe=s(cp);pse=n(Cwe,"STRONG",{});var XKr=s(pse);dpo=r(XKr,"blenderbot"),XKr.forEach(t),cpo=r(Cwe," \u2014 "),xI=n(Cwe,"A",{href:!0});var zKr=s(xI);fpo=r(zKr,"BlenderbotModel"),zKr.forEach(t),mpo=r(Cwe," (Blenderbot model)"),Cwe.forEach(t),gpo=i($),fp=n($,"LI",{});var wwe=s(fp);_se=n(wwe,"STRONG",{});var WKr=s(_se);hpo=r(WKr,"blenderbot-small"),WKr.forEach(t),ppo=r(wwe," \u2014 "),$I=n(wwe,"A",{href:!0});var QKr=s($I);_po=r(QKr,"BlenderbotSmallModel"),QKr.forEach(t),upo=r(wwe," (BlenderbotSmall model)"),wwe.forEach(t),bpo=i($),mp=n($,"LI",{});var Awe=s(mp);use=n(Awe,"STRONG",{});var HKr=s(use);vpo=r(HKr,"camembert"),HKr.forEach(t),Fpo=r(Awe," \u2014 "),kI=n(Awe,"A",{href:!0});var UKr=s(kI);Tpo=r(UKr,"CamembertModel"),UKr.forEach(t),Mpo=r(Awe," (CamemBERT model)"),Awe.forEach(t),Epo=i($),gp=n($,"LI",{});var ywe=s(gp);bse=n(ywe,"STRONG",{});var JKr=s(bse);Cpo=r(JKr,"canine"),JKr.forEach(t),wpo=r(ywe," \u2014 "),SI=n(ywe,"A",{href:!0});var YKr=s(SI);Apo=r(YKr,"CanineModel"),YKr.forEach(t),ypo=r(ywe," (Canine model)"),ywe.forEach(t),Lpo=i($),hp=n($,"LI",{});var Lwe=s(hp);vse=n(Lwe,"STRONG",{});var KKr=s(vse);xpo=r(KKr,"clip"),KKr.forEach(t),$po=r(Lwe," \u2014 "),RI=n(Lwe,"A",{href:!0});var ZKr=s(RI);kpo=r(ZKr,"CLIPModel"),ZKr.forEach(t),Spo=r(Lwe," (CLIP model)"),Lwe.forEach(t),Rpo=i($),pp=n($,"LI",{});var xwe=s(pp);Fse=n(xwe,"STRONG",{});var eZr=s(Fse);Ppo=r(eZr,"convbert"),eZr.forEach(t),Bpo=r(xwe," \u2014 "),PI=n(xwe,"A",{href:!0});var oZr=s(PI);Ipo=r(oZr,"ConvBertModel"),oZr.forEach(t),qpo=r(xwe," (ConvBERT model)"),xwe.forEach(t),Npo=i($),_p=n($,"LI",{});var $we=s(_p);Tse=n($we,"STRONG",{});var rZr=s(Tse);jpo=r(rZr,"convnext"),rZr.forEach(t),Dpo=r($we," \u2014 "),BI=n($we,"A",{href:!0});var tZr=s(BI);Gpo=r(tZr,"ConvNextModel"),tZr.forEach(t),Opo=r($we," (ConvNext model)"),$we.forEach(t),Vpo=i($),up=n($,"LI",{});var kwe=s(up);Mse=n(kwe,"STRONG",{});var aZr=s(Mse);Xpo=r(aZr,"ctrl"),aZr.forEach(t),zpo=r(kwe," \u2014 "),II=n(kwe,"A",{href:!0});var nZr=s(II);Wpo=r(nZr,"CTRLModel"),nZr.forEach(t),Qpo=r(kwe," (CTRL model)"),kwe.forEach(t),Hpo=i($),bp=n($,"LI",{});var Swe=s(bp);Ese=n(Swe,"STRONG",{});var sZr=s(Ese);Upo=r(sZr,"cvt"),sZr.forEach(t),Jpo=r(Swe," \u2014 "),qI=n(Swe,"A",{href:!0});var lZr=s(qI);Ypo=r(lZr,"CvtModel"),lZr.forEach(t),Kpo=r(Swe," (CvT model)"),Swe.forEach(t),Zpo=i($),vp=n($,"LI",{});var Rwe=s(vp);Cse=n(Rwe,"STRONG",{});var iZr=s(Cse);e_o=r(iZr,"data2vec-audio"),iZr.forEach(t),o_o=r(Rwe," \u2014 "),NI=n(Rwe,"A",{href:!0});var dZr=s(NI);r_o=r(dZr,"Data2VecAudioModel"),dZr.forEach(t),t_o=r(Rwe," (Data2VecAudio model)"),Rwe.forEach(t),a_o=i($),Fp=n($,"LI",{});var Pwe=s(Fp);wse=n(Pwe,"STRONG",{});var cZr=s(wse);n_o=r(cZr,"data2vec-text"),cZr.forEach(t),s_o=r(Pwe," \u2014 "),jI=n(Pwe,"A",{href:!0});var fZr=s(jI);l_o=r(fZr,"Data2VecTextModel"),fZr.forEach(t),i_o=r(Pwe," (Data2VecText model)"),Pwe.forEach(t),d_o=i($),Tp=n($,"LI",{});var Bwe=s(Tp);Ase=n(Bwe,"STRONG",{});var mZr=s(Ase);c_o=r(mZr,"data2vec-vision"),mZr.forEach(t),f_o=r(Bwe," \u2014 "),DI=n(Bwe,"A",{href:!0});var gZr=s(DI);m_o=r(gZr,"Data2VecVisionModel"),gZr.forEach(t),g_o=r(Bwe," (Data2VecVision model)"),Bwe.forEach(t),h_o=i($),Mp=n($,"LI",{});var Iwe=s(Mp);yse=n(Iwe,"STRONG",{});var hZr=s(yse);p_o=r(hZr,"deberta"),hZr.forEach(t),__o=r(Iwe," \u2014 "),GI=n(Iwe,"A",{href:!0});var pZr=s(GI);u_o=r(pZr,"DebertaModel"),pZr.forEach(t),b_o=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),v_o=i($),Ep=n($,"LI",{});var qwe=s(Ep);Lse=n(qwe,"STRONG",{});var _Zr=s(Lse);F_o=r(_Zr,"deberta-v2"),_Zr.forEach(t),T_o=r(qwe," \u2014 "),OI=n(qwe,"A",{href:!0});var uZr=s(OI);M_o=r(uZr,"DebertaV2Model"),uZr.forEach(t),E_o=r(qwe," (DeBERTa-v2 model)"),qwe.forEach(t),C_o=i($),Cp=n($,"LI",{});var Nwe=s(Cp);xse=n(Nwe,"STRONG",{});var bZr=s(xse);w_o=r(bZr,"decision_transformer"),bZr.forEach(t),A_o=r(Nwe," \u2014 "),VI=n(Nwe,"A",{href:!0});var vZr=s(VI);y_o=r(vZr,"DecisionTransformerModel"),vZr.forEach(t),L_o=r(Nwe," (Decision Transformer model)"),Nwe.forEach(t),x_o=i($),wp=n($,"LI",{});var jwe=s(wp);$se=n(jwe,"STRONG",{});var FZr=s($se);$_o=r(FZr,"deit"),FZr.forEach(t),k_o=r(jwe," \u2014 "),XI=n(jwe,"A",{href:!0});var TZr=s(XI);S_o=r(TZr,"DeiTModel"),TZr.forEach(t),R_o=r(jwe," (DeiT model)"),jwe.forEach(t),P_o=i($),Ap=n($,"LI",{});var Dwe=s(Ap);kse=n(Dwe,"STRONG",{});var MZr=s(kse);B_o=r(MZr,"detr"),MZr.forEach(t),I_o=r(Dwe," \u2014 "),zI=n(Dwe,"A",{href:!0});var EZr=s(zI);q_o=r(EZr,"DetrModel"),EZr.forEach(t),N_o=r(Dwe," (DETR model)"),Dwe.forEach(t),j_o=i($),yp=n($,"LI",{});var Gwe=s(yp);Sse=n(Gwe,"STRONG",{});var CZr=s(Sse);D_o=r(CZr,"distilbert"),CZr.forEach(t),G_o=r(Gwe," \u2014 "),WI=n(Gwe,"A",{href:!0});var wZr=s(WI);O_o=r(wZr,"DistilBertModel"),wZr.forEach(t),V_o=r(Gwe," (DistilBERT model)"),Gwe.forEach(t),X_o=i($),Lp=n($,"LI",{});var Owe=s(Lp);Rse=n(Owe,"STRONG",{});var AZr=s(Rse);z_o=r(AZr,"dpr"),AZr.forEach(t),W_o=r(Owe," \u2014 "),QI=n(Owe,"A",{href:!0});var yZr=s(QI);Q_o=r(yZr,"DPRQuestionEncoder"),yZr.forEach(t),H_o=r(Owe," (DPR model)"),Owe.forEach(t),U_o=i($),xp=n($,"LI",{});var Vwe=s(xp);Pse=n(Vwe,"STRONG",{});var LZr=s(Pse);J_o=r(LZr,"dpt"),LZr.forEach(t),Y_o=r(Vwe," \u2014 "),HI=n(Vwe,"A",{href:!0});var xZr=s(HI);K_o=r(xZr,"DPTModel"),xZr.forEach(t),Z_o=r(Vwe," (DPT model)"),Vwe.forEach(t),euo=i($),$p=n($,"LI",{});var Xwe=s($p);Bse=n(Xwe,"STRONG",{});var $Zr=s(Bse);ouo=r($Zr,"electra"),$Zr.forEach(t),ruo=r(Xwe," \u2014 "),UI=n(Xwe,"A",{href:!0});var kZr=s(UI);tuo=r(kZr,"ElectraModel"),kZr.forEach(t),auo=r(Xwe," (ELECTRA model)"),Xwe.forEach(t),nuo=i($),kp=n($,"LI",{});var zwe=s(kp);Ise=n(zwe,"STRONG",{});var SZr=s(Ise);suo=r(SZr,"flaubert"),SZr.forEach(t),luo=r(zwe," \u2014 "),JI=n(zwe,"A",{href:!0});var RZr=s(JI);iuo=r(RZr,"FlaubertModel"),RZr.forEach(t),duo=r(zwe," (FlauBERT model)"),zwe.forEach(t),cuo=i($),Sp=n($,"LI",{});var Wwe=s(Sp);qse=n(Wwe,"STRONG",{});var PZr=s(qse);fuo=r(PZr,"flava"),PZr.forEach(t),muo=r(Wwe," \u2014 "),YI=n(Wwe,"A",{href:!0});var BZr=s(YI);guo=r(BZr,"FlavaModel"),BZr.forEach(t),huo=r(Wwe," (Flava model)"),Wwe.forEach(t),puo=i($),Rp=n($,"LI",{});var Qwe=s(Rp);Nse=n(Qwe,"STRONG",{});var IZr=s(Nse);_uo=r(IZr,"fnet"),IZr.forEach(t),uuo=r(Qwe," \u2014 "),KI=n(Qwe,"A",{href:!0});var qZr=s(KI);buo=r(qZr,"FNetModel"),qZr.forEach(t),vuo=r(Qwe," (FNet model)"),Qwe.forEach(t),Fuo=i($),Pp=n($,"LI",{});var Hwe=s(Pp);jse=n(Hwe,"STRONG",{});var NZr=s(jse);Tuo=r(NZr,"fsmt"),NZr.forEach(t),Muo=r(Hwe," \u2014 "),ZI=n(Hwe,"A",{href:!0});var jZr=s(ZI);Euo=r(jZr,"FSMTModel"),jZr.forEach(t),Cuo=r(Hwe," (FairSeq Machine-Translation model)"),Hwe.forEach(t),wuo=i($),Ps=n($,"LI",{});var q$=s(Ps);Dse=n(q$,"STRONG",{});var DZr=s(Dse);Auo=r(DZr,"funnel"),DZr.forEach(t),yuo=r(q$," \u2014 "),eq=n(q$,"A",{href:!0});var GZr=s(eq);Luo=r(GZr,"FunnelModel"),GZr.forEach(t),xuo=r(q$," or "),oq=n(q$,"A",{href:!0});var OZr=s(oq);$uo=r(OZr,"FunnelBaseModel"),OZr.forEach(t),kuo=r(q$," (Funnel Transformer model)"),q$.forEach(t),Suo=i($),Bp=n($,"LI",{});var Uwe=s(Bp);Gse=n(Uwe,"STRONG",{});var VZr=s(Gse);Ruo=r(VZr,"glpn"),VZr.forEach(t),Puo=r(Uwe," \u2014 "),rq=n(Uwe,"A",{href:!0});var XZr=s(rq);Buo=r(XZr,"GLPNModel"),XZr.forEach(t),Iuo=r(Uwe," (GLPN model)"),Uwe.forEach(t),quo=i($),Ip=n($,"LI",{});var Jwe=s(Ip);Ose=n(Jwe,"STRONG",{});var zZr=s(Ose);Nuo=r(zZr,"gpt2"),zZr.forEach(t),juo=r(Jwe," \u2014 "),tq=n(Jwe,"A",{href:!0});var WZr=s(tq);Duo=r(WZr,"GPT2Model"),WZr.forEach(t),Guo=r(Jwe," (OpenAI GPT-2 model)"),Jwe.forEach(t),Ouo=i($),qp=n($,"LI",{});var Ywe=s(qp);Vse=n(Ywe,"STRONG",{});var QZr=s(Vse);Vuo=r(QZr,"gpt_neo"),QZr.forEach(t),Xuo=r(Ywe," \u2014 "),aq=n(Ywe,"A",{href:!0});var HZr=s(aq);zuo=r(HZr,"GPTNeoModel"),HZr.forEach(t),Wuo=r(Ywe," (GPT Neo model)"),Ywe.forEach(t),Quo=i($),Np=n($,"LI",{});var Kwe=s(Np);Xse=n(Kwe,"STRONG",{});var UZr=s(Xse);Huo=r(UZr,"gptj"),UZr.forEach(t),Uuo=r(Kwe," \u2014 "),nq=n(Kwe,"A",{href:!0});var JZr=s(nq);Juo=r(JZr,"GPTJModel"),JZr.forEach(t),Yuo=r(Kwe," (GPT-J model)"),Kwe.forEach(t),Kuo=i($),jp=n($,"LI",{});var Zwe=s(jp);zse=n(Zwe,"STRONG",{});var YZr=s(zse);Zuo=r(YZr,"hubert"),YZr.forEach(t),e2o=r(Zwe," \u2014 "),sq=n(Zwe,"A",{href:!0});var KZr=s(sq);o2o=r(KZr,"HubertModel"),KZr.forEach(t),r2o=r(Zwe," (Hubert model)"),Zwe.forEach(t),t2o=i($),Dp=n($,"LI",{});var e0e=s(Dp);Wse=n(e0e,"STRONG",{});var ZZr=s(Wse);a2o=r(ZZr,"ibert"),ZZr.forEach(t),n2o=r(e0e," \u2014 "),lq=n(e0e,"A",{href:!0});var eet=s(lq);s2o=r(eet,"IBertModel"),eet.forEach(t),l2o=r(e0e," (I-BERT model)"),e0e.forEach(t),i2o=i($),Gp=n($,"LI",{});var o0e=s(Gp);Qse=n(o0e,"STRONG",{});var oet=s(Qse);d2o=r(oet,"imagegpt"),oet.forEach(t),c2o=r(o0e," \u2014 "),iq=n(o0e,"A",{href:!0});var ret=s(iq);f2o=r(ret,"ImageGPTModel"),ret.forEach(t),m2o=r(o0e," (ImageGPT model)"),o0e.forEach(t),g2o=i($),Op=n($,"LI",{});var r0e=s(Op);Hse=n(r0e,"STRONG",{});var tet=s(Hse);h2o=r(tet,"layoutlm"),tet.forEach(t),p2o=r(r0e," \u2014 "),dq=n(r0e,"A",{href:!0});var aet=s(dq);_2o=r(aet,"LayoutLMModel"),aet.forEach(t),u2o=r(r0e," (LayoutLM model)"),r0e.forEach(t),b2o=i($),Vp=n($,"LI",{});var t0e=s(Vp);Use=n(t0e,"STRONG",{});var net=s(Use);v2o=r(net,"layoutlmv2"),net.forEach(t),F2o=r(t0e," \u2014 "),cq=n(t0e,"A",{href:!0});var set=s(cq);T2o=r(set,"LayoutLMv2Model"),set.forEach(t),M2o=r(t0e," (LayoutLMv2 model)"),t0e.forEach(t),E2o=i($),Xp=n($,"LI",{});var a0e=s(Xp);Jse=n(a0e,"STRONG",{});var iet=s(Jse);C2o=r(iet,"led"),iet.forEach(t),w2o=r(a0e," \u2014 "),fq=n(a0e,"A",{href:!0});var det=s(fq);A2o=r(det,"LEDModel"),det.forEach(t),y2o=r(a0e," (LED model)"),a0e.forEach(t),L2o=i($),zp=n($,"LI",{});var n0e=s(zp);Yse=n(n0e,"STRONG",{});var cet=s(Yse);x2o=r(cet,"longformer"),cet.forEach(t),$2o=r(n0e," \u2014 "),mq=n(n0e,"A",{href:!0});var fet=s(mq);k2o=r(fet,"LongformerModel"),fet.forEach(t),S2o=r(n0e," (Longformer model)"),n0e.forEach(t),R2o=i($),Wp=n($,"LI",{});var s0e=s(Wp);Kse=n(s0e,"STRONG",{});var met=s(Kse);P2o=r(met,"longt5"),met.forEach(t),B2o=r(s0e," \u2014 "),gq=n(s0e,"A",{href:!0});var get=s(gq);I2o=r(get,"LongT5Model"),get.forEach(t),q2o=r(s0e," (LongT5 model)"),s0e.forEach(t),N2o=i($),Qp=n($,"LI",{});var l0e=s(Qp);Zse=n(l0e,"STRONG",{});var het=s(Zse);j2o=r(het,"luke"),het.forEach(t),D2o=r(l0e," \u2014 "),hq=n(l0e,"A",{href:!0});var pet=s(hq);G2o=r(pet,"LukeModel"),pet.forEach(t),O2o=r(l0e," (LUKE model)"),l0e.forEach(t),V2o=i($),Hp=n($,"LI",{});var i0e=s(Hp);ele=n(i0e,"STRONG",{});var _et=s(ele);X2o=r(_et,"lxmert"),_et.forEach(t),z2o=r(i0e," \u2014 "),pq=n(i0e,"A",{href:!0});var uet=s(pq);W2o=r(uet,"LxmertModel"),uet.forEach(t),Q2o=r(i0e," (LXMERT model)"),i0e.forEach(t),H2o=i($),Up=n($,"LI",{});var d0e=s(Up);ole=n(d0e,"STRONG",{});var bet=s(ole);U2o=r(bet,"m2m_100"),bet.forEach(t),J2o=r(d0e," \u2014 "),_q=n(d0e,"A",{href:!0});var vet=s(_q);Y2o=r(vet,"M2M100Model"),vet.forEach(t),K2o=r(d0e," (M2M100 model)"),d0e.forEach(t),Z2o=i($),Jp=n($,"LI",{});var c0e=s(Jp);rle=n(c0e,"STRONG",{});var Fet=s(rle);e1o=r(Fet,"marian"),Fet.forEach(t),o1o=r(c0e," \u2014 "),uq=n(c0e,"A",{href:!0});var Tet=s(uq);r1o=r(Tet,"MarianModel"),Tet.forEach(t),t1o=r(c0e," (Marian model)"),c0e.forEach(t),a1o=i($),Yp=n($,"LI",{});var f0e=s(Yp);tle=n(f0e,"STRONG",{});var Met=s(tle);n1o=r(Met,"maskformer"),Met.forEach(t),s1o=r(f0e," \u2014 "),bq=n(f0e,"A",{href:!0});var Eet=s(bq);l1o=r(Eet,"MaskFormerModel"),Eet.forEach(t),i1o=r(f0e," (MaskFormer model)"),f0e.forEach(t),d1o=i($),Kp=n($,"LI",{});var m0e=s(Kp);ale=n(m0e,"STRONG",{});var Cet=s(ale);c1o=r(Cet,"mbart"),Cet.forEach(t),f1o=r(m0e," \u2014 "),vq=n(m0e,"A",{href:!0});var wet=s(vq);m1o=r(wet,"MBartModel"),wet.forEach(t),g1o=r(m0e," (mBART model)"),m0e.forEach(t),h1o=i($),Zp=n($,"LI",{});var g0e=s(Zp);nle=n(g0e,"STRONG",{});var Aet=s(nle);p1o=r(Aet,"megatron-bert"),Aet.forEach(t),_1o=r(g0e," \u2014 "),Fq=n(g0e,"A",{href:!0});var yet=s(Fq);u1o=r(yet,"MegatronBertModel"),yet.forEach(t),b1o=r(g0e," (MegatronBert model)"),g0e.forEach(t),v1o=i($),e_=n($,"LI",{});var h0e=s(e_);sle=n(h0e,"STRONG",{});var Let=s(sle);F1o=r(Let,"mobilebert"),Let.forEach(t),T1o=r(h0e," \u2014 "),Tq=n(h0e,"A",{href:!0});var xet=s(Tq);M1o=r(xet,"MobileBertModel"),xet.forEach(t),E1o=r(h0e," (MobileBERT model)"),h0e.forEach(t),C1o=i($),o_=n($,"LI",{});var p0e=s(o_);lle=n(p0e,"STRONG",{});var $et=s(lle);w1o=r($et,"mpnet"),$et.forEach(t),A1o=r(p0e," \u2014 "),Mq=n(p0e,"A",{href:!0});var ket=s(Mq);y1o=r(ket,"MPNetModel"),ket.forEach(t),L1o=r(p0e," (MPNet model)"),p0e.forEach(t),x1o=i($),r_=n($,"LI",{});var _0e=s(r_);ile=n(_0e,"STRONG",{});var Set=s(ile);$1o=r(Set,"mt5"),Set.forEach(t),k1o=r(_0e," \u2014 "),Eq=n(_0e,"A",{href:!0});var Ret=s(Eq);S1o=r(Ret,"MT5Model"),Ret.forEach(t),R1o=r(_0e," (mT5 model)"),_0e.forEach(t),P1o=i($),t_=n($,"LI",{});var u0e=s(t_);dle=n(u0e,"STRONG",{});var Pet=s(dle);B1o=r(Pet,"nystromformer"),Pet.forEach(t),I1o=r(u0e," \u2014 "),Cq=n(u0e,"A",{href:!0});var Bet=s(Cq);q1o=r(Bet,"NystromformerModel"),Bet.forEach(t),N1o=r(u0e," (Nystromformer model)"),u0e.forEach(t),j1o=i($),a_=n($,"LI",{});var b0e=s(a_);cle=n(b0e,"STRONG",{});var Iet=s(cle);D1o=r(Iet,"openai-gpt"),Iet.forEach(t),G1o=r(b0e," \u2014 "),wq=n(b0e,"A",{href:!0});var qet=s(wq);O1o=r(qet,"OpenAIGPTModel"),qet.forEach(t),V1o=r(b0e," (OpenAI GPT model)"),b0e.forEach(t),X1o=i($),n_=n($,"LI",{});var v0e=s(n_);fle=n(v0e,"STRONG",{});var Net=s(fle);z1o=r(Net,"opt"),Net.forEach(t),W1o=r(v0e," \u2014 "),Aq=n(v0e,"A",{href:!0});var jet=s(Aq);Q1o=r(jet,"OPTModel"),jet.forEach(t),H1o=r(v0e," (OPT model)"),v0e.forEach(t),U1o=i($),s_=n($,"LI",{});var F0e=s(s_);mle=n(F0e,"STRONG",{});var Det=s(mle);J1o=r(Det,"pegasus"),Det.forEach(t),Y1o=r(F0e," \u2014 "),yq=n(F0e,"A",{href:!0});var Get=s(yq);K1o=r(Get,"PegasusModel"),Get.forEach(t),Z1o=r(F0e," (Pegasus model)"),F0e.forEach(t),ebo=i($),l_=n($,"LI",{});var T0e=s(l_);gle=n(T0e,"STRONG",{});var Oet=s(gle);obo=r(Oet,"perceiver"),Oet.forEach(t),rbo=r(T0e," \u2014 "),Lq=n(T0e,"A",{href:!0});var Vet=s(Lq);tbo=r(Vet,"PerceiverModel"),Vet.forEach(t),abo=r(T0e," (Perceiver model)"),T0e.forEach(t),nbo=i($),i_=n($,"LI",{});var M0e=s(i_);hle=n(M0e,"STRONG",{});var Xet=s(hle);sbo=r(Xet,"plbart"),Xet.forEach(t),lbo=r(M0e," \u2014 "),xq=n(M0e,"A",{href:!0});var zet=s(xq);ibo=r(zet,"PLBartModel"),zet.forEach(t),dbo=r(M0e," (PLBart model)"),M0e.forEach(t),cbo=i($),d_=n($,"LI",{});var E0e=s(d_);ple=n(E0e,"STRONG",{});var Wet=s(ple);fbo=r(Wet,"poolformer"),Wet.forEach(t),mbo=r(E0e," \u2014 "),$q=n(E0e,"A",{href:!0});var Qet=s($q);gbo=r(Qet,"PoolFormerModel"),Qet.forEach(t),hbo=r(E0e," (PoolFormer model)"),E0e.forEach(t),pbo=i($),c_=n($,"LI",{});var C0e=s(c_);_le=n(C0e,"STRONG",{});var Het=s(_le);_bo=r(Het,"prophetnet"),Het.forEach(t),ubo=r(C0e," \u2014 "),kq=n(C0e,"A",{href:!0});var Uet=s(kq);bbo=r(Uet,"ProphetNetModel"),Uet.forEach(t),vbo=r(C0e," (ProphetNet model)"),C0e.forEach(t),Fbo=i($),f_=n($,"LI",{});var w0e=s(f_);ule=n(w0e,"STRONG",{});var Jet=s(ule);Tbo=r(Jet,"qdqbert"),Jet.forEach(t),Mbo=r(w0e," \u2014 "),Sq=n(w0e,"A",{href:!0});var Yet=s(Sq);Ebo=r(Yet,"QDQBertModel"),Yet.forEach(t),Cbo=r(w0e," (QDQBert model)"),w0e.forEach(t),wbo=i($),m_=n($,"LI",{});var A0e=s(m_);ble=n(A0e,"STRONG",{});var Ket=s(ble);Abo=r(Ket,"reformer"),Ket.forEach(t),ybo=r(A0e," \u2014 "),Rq=n(A0e,"A",{href:!0});var Zet=s(Rq);Lbo=r(Zet,"ReformerModel"),Zet.forEach(t),xbo=r(A0e," (Reformer model)"),A0e.forEach(t),$bo=i($),g_=n($,"LI",{});var y0e=s(g_);vle=n(y0e,"STRONG",{});var eot=s(vle);kbo=r(eot,"regnet"),eot.forEach(t),Sbo=r(y0e," \u2014 "),Pq=n(y0e,"A",{href:!0});var oot=s(Pq);Rbo=r(oot,"RegNetModel"),oot.forEach(t),Pbo=r(y0e," (RegNet model)"),y0e.forEach(t),Bbo=i($),h_=n($,"LI",{});var L0e=s(h_);Fle=n(L0e,"STRONG",{});var rot=s(Fle);Ibo=r(rot,"rembert"),rot.forEach(t),qbo=r(L0e," \u2014 "),Bq=n(L0e,"A",{href:!0});var tot=s(Bq);Nbo=r(tot,"RemBertModel"),tot.forEach(t),jbo=r(L0e," (RemBERT model)"),L0e.forEach(t),Dbo=i($),p_=n($,"LI",{});var x0e=s(p_);Tle=n(x0e,"STRONG",{});var aot=s(Tle);Gbo=r(aot,"resnet"),aot.forEach(t),Obo=r(x0e," \u2014 "),Iq=n(x0e,"A",{href:!0});var not=s(Iq);Vbo=r(not,"ResNetModel"),not.forEach(t),Xbo=r(x0e," (ResNet model)"),x0e.forEach(t),zbo=i($),__=n($,"LI",{});var $0e=s(__);Mle=n($0e,"STRONG",{});var sot=s(Mle);Wbo=r(sot,"retribert"),sot.forEach(t),Qbo=r($0e," \u2014 "),qq=n($0e,"A",{href:!0});var lot=s(qq);Hbo=r(lot,"RetriBertModel"),lot.forEach(t),Ubo=r($0e," (RetriBERT model)"),$0e.forEach(t),Jbo=i($),u_=n($,"LI",{});var k0e=s(u_);Ele=n(k0e,"STRONG",{});var iot=s(Ele);Ybo=r(iot,"roberta"),iot.forEach(t),Kbo=r(k0e," \u2014 "),Nq=n(k0e,"A",{href:!0});var dot=s(Nq);Zbo=r(dot,"RobertaModel"),dot.forEach(t),evo=r(k0e," (RoBERTa model)"),k0e.forEach(t),ovo=i($),b_=n($,"LI",{});var S0e=s(b_);Cle=n(S0e,"STRONG",{});var cot=s(Cle);rvo=r(cot,"roformer"),cot.forEach(t),tvo=r(S0e," \u2014 "),jq=n(S0e,"A",{href:!0});var fot=s(jq);avo=r(fot,"RoFormerModel"),fot.forEach(t),nvo=r(S0e," (RoFormer model)"),S0e.forEach(t),svo=i($),v_=n($,"LI",{});var R0e=s(v_);wle=n(R0e,"STRONG",{});var mot=s(wle);lvo=r(mot,"segformer"),mot.forEach(t),ivo=r(R0e," \u2014 "),Dq=n(R0e,"A",{href:!0});var got=s(Dq);dvo=r(got,"SegformerModel"),got.forEach(t),cvo=r(R0e," (SegFormer model)"),R0e.forEach(t),fvo=i($),F_=n($,"LI",{});var P0e=s(F_);Ale=n(P0e,"STRONG",{});var hot=s(Ale);mvo=r(hot,"sew"),hot.forEach(t),gvo=r(P0e," \u2014 "),Gq=n(P0e,"A",{href:!0});var pot=s(Gq);hvo=r(pot,"SEWModel"),pot.forEach(t),pvo=r(P0e," (SEW model)"),P0e.forEach(t),_vo=i($),T_=n($,"LI",{});var B0e=s(T_);yle=n(B0e,"STRONG",{});var _ot=s(yle);uvo=r(_ot,"sew-d"),_ot.forEach(t),bvo=r(B0e," \u2014 "),Oq=n(B0e,"A",{href:!0});var uot=s(Oq);vvo=r(uot,"SEWDModel"),uot.forEach(t),Fvo=r(B0e," (SEW-D model)"),B0e.forEach(t),Tvo=i($),M_=n($,"LI",{});var I0e=s(M_);Lle=n(I0e,"STRONG",{});var bot=s(Lle);Mvo=r(bot,"speech_to_text"),bot.forEach(t),Evo=r(I0e," \u2014 "),Vq=n(I0e,"A",{href:!0});var vot=s(Vq);Cvo=r(vot,"Speech2TextModel"),vot.forEach(t),wvo=r(I0e," (Speech2Text model)"),I0e.forEach(t),Avo=i($),E_=n($,"LI",{});var q0e=s(E_);xle=n(q0e,"STRONG",{});var Fot=s(xle);yvo=r(Fot,"splinter"),Fot.forEach(t),Lvo=r(q0e," \u2014 "),Xq=n(q0e,"A",{href:!0});var Tot=s(Xq);xvo=r(Tot,"SplinterModel"),Tot.forEach(t),$vo=r(q0e," (Splinter model)"),q0e.forEach(t),kvo=i($),C_=n($,"LI",{});var N0e=s(C_);$le=n(N0e,"STRONG",{});var Mot=s($le);Svo=r(Mot,"squeezebert"),Mot.forEach(t),Rvo=r(N0e," \u2014 "),zq=n(N0e,"A",{href:!0});var Eot=s(zq);Pvo=r(Eot,"SqueezeBertModel"),Eot.forEach(t),Bvo=r(N0e," (SqueezeBERT model)"),N0e.forEach(t),Ivo=i($),w_=n($,"LI",{});var j0e=s(w_);kle=n(j0e,"STRONG",{});var Cot=s(kle);qvo=r(Cot,"swin"),Cot.forEach(t),Nvo=r(j0e," \u2014 "),Wq=n(j0e,"A",{href:!0});var wot=s(Wq);jvo=r(wot,"SwinModel"),wot.forEach(t),Dvo=r(j0e," (Swin model)"),j0e.forEach(t),Gvo=i($),A_=n($,"LI",{});var D0e=s(A_);Sle=n(D0e,"STRONG",{});var Aot=s(Sle);Ovo=r(Aot,"t5"),Aot.forEach(t),Vvo=r(D0e," \u2014 "),Qq=n(D0e,"A",{href:!0});var yot=s(Qq);Xvo=r(yot,"T5Model"),yot.forEach(t),zvo=r(D0e," (T5 model)"),D0e.forEach(t),Wvo=i($),y_=n($,"LI",{});var G0e=s(y_);Rle=n(G0e,"STRONG",{});var Lot=s(Rle);Qvo=r(Lot,"tapas"),Lot.forEach(t),Hvo=r(G0e," \u2014 "),Hq=n(G0e,"A",{href:!0});var xot=s(Hq);Uvo=r(xot,"TapasModel"),xot.forEach(t),Jvo=r(G0e," (TAPAS model)"),G0e.forEach(t),Yvo=i($),L_=n($,"LI",{});var O0e=s(L_);Ple=n(O0e,"STRONG",{});var $ot=s(Ple);Kvo=r($ot,"trajectory_transformer"),$ot.forEach(t),Zvo=r(O0e," \u2014 "),Uq=n(O0e,"A",{href:!0});var kot=s(Uq);eFo=r(kot,"TrajectoryTransformerModel"),kot.forEach(t),oFo=r(O0e," (Trajectory Transformer model)"),O0e.forEach(t),rFo=i($),x_=n($,"LI",{});var V0e=s(x_);Ble=n(V0e,"STRONG",{});var Sot=s(Ble);tFo=r(Sot,"transfo-xl"),Sot.forEach(t),aFo=r(V0e," \u2014 "),Jq=n(V0e,"A",{href:!0});var Rot=s(Jq);nFo=r(Rot,"TransfoXLModel"),Rot.forEach(t),sFo=r(V0e," (Transformer-XL model)"),V0e.forEach(t),lFo=i($),$_=n($,"LI",{});var X0e=s($_);Ile=n(X0e,"STRONG",{});var Pot=s(Ile);iFo=r(Pot,"unispeech"),Pot.forEach(t),dFo=r(X0e," \u2014 "),Yq=n(X0e,"A",{href:!0});var Bot=s(Yq);cFo=r(Bot,"UniSpeechModel"),Bot.forEach(t),fFo=r(X0e," (UniSpeech model)"),X0e.forEach(t),mFo=i($),k_=n($,"LI",{});var z0e=s(k_);qle=n(z0e,"STRONG",{});var Iot=s(qle);gFo=r(Iot,"unispeech-sat"),Iot.forEach(t),hFo=r(z0e," \u2014 "),Kq=n(z0e,"A",{href:!0});var qot=s(Kq);pFo=r(qot,"UniSpeechSatModel"),qot.forEach(t),_Fo=r(z0e," (UniSpeechSat model)"),z0e.forEach(t),uFo=i($),S_=n($,"LI",{});var W0e=s(S_);Nle=n(W0e,"STRONG",{});var Not=s(Nle);bFo=r(Not,"van"),Not.forEach(t),vFo=r(W0e," \u2014 "),Zq=n(W0e,"A",{href:!0});var jot=s(Zq);FFo=r(jot,"VanModel"),jot.forEach(t),TFo=r(W0e," (VAN model)"),W0e.forEach(t),MFo=i($),R_=n($,"LI",{});var Q0e=s(R_);jle=n(Q0e,"STRONG",{});var Dot=s(jle);EFo=r(Dot,"vilt"),Dot.forEach(t),CFo=r(Q0e," \u2014 "),eN=n(Q0e,"A",{href:!0});var Got=s(eN);wFo=r(Got,"ViltModel"),Got.forEach(t),AFo=r(Q0e," (ViLT model)"),Q0e.forEach(t),yFo=i($),P_=n($,"LI",{});var H0e=s(P_);Dle=n(H0e,"STRONG",{});var Oot=s(Dle);LFo=r(Oot,"vision-text-dual-encoder"),Oot.forEach(t),xFo=r(H0e," \u2014 "),oN=n(H0e,"A",{href:!0});var Vot=s(oN);$Fo=r(Vot,"VisionTextDualEncoderModel"),Vot.forEach(t),kFo=r(H0e," (VisionTextDualEncoder model)"),H0e.forEach(t),SFo=i($),B_=n($,"LI",{});var U0e=s(B_);Gle=n(U0e,"STRONG",{});var Xot=s(Gle);RFo=r(Xot,"visual_bert"),Xot.forEach(t),PFo=r(U0e," \u2014 "),rN=n(U0e,"A",{href:!0});var zot=s(rN);BFo=r(zot,"VisualBertModel"),zot.forEach(t),IFo=r(U0e," (VisualBert model)"),U0e.forEach(t),qFo=i($),I_=n($,"LI",{});var J0e=s(I_);Ole=n(J0e,"STRONG",{});var Wot=s(Ole);NFo=r(Wot,"vit"),Wot.forEach(t),jFo=r(J0e," \u2014 "),tN=n(J0e,"A",{href:!0});var Qot=s(tN);DFo=r(Qot,"ViTModel"),Qot.forEach(t),GFo=r(J0e," (ViT model)"),J0e.forEach(t),OFo=i($),q_=n($,"LI",{});var Y0e=s(q_);Vle=n(Y0e,"STRONG",{});var Hot=s(Vle);VFo=r(Hot,"vit_mae"),Hot.forEach(t),XFo=r(Y0e," \u2014 "),aN=n(Y0e,"A",{href:!0});var Uot=s(aN);zFo=r(Uot,"ViTMAEModel"),Uot.forEach(t),WFo=r(Y0e," (ViTMAE model)"),Y0e.forEach(t),QFo=i($),N_=n($,"LI",{});var K0e=s(N_);Xle=n(K0e,"STRONG",{});var Jot=s(Xle);HFo=r(Jot,"wav2vec2"),Jot.forEach(t),UFo=r(K0e," \u2014 "),nN=n(K0e,"A",{href:!0});var Yot=s(nN);JFo=r(Yot,"Wav2Vec2Model"),Yot.forEach(t),YFo=r(K0e," (Wav2Vec2 model)"),K0e.forEach(t),KFo=i($),j_=n($,"LI",{});var Z0e=s(j_);zle=n(Z0e,"STRONG",{});var Kot=s(zle);ZFo=r(Kot,"wav2vec2-conformer"),Kot.forEach(t),e6o=r(Z0e," \u2014 "),sN=n(Z0e,"A",{href:!0});var Zot=s(sN);o6o=r(Zot,"Wav2Vec2ConformerModel"),Zot.forEach(t),r6o=r(Z0e," (Wav2Vec2-Conformer model)"),Z0e.forEach(t),t6o=i($),D_=n($,"LI",{});var eAe=s(D_);Wle=n(eAe,"STRONG",{});var ert=s(Wle);a6o=r(ert,"wavlm"),ert.forEach(t),n6o=r(eAe," \u2014 "),lN=n(eAe,"A",{href:!0});var ort=s(lN);s6o=r(ort,"WavLMModel"),ort.forEach(t),l6o=r(eAe," (WavLM model)"),eAe.forEach(t),i6o=i($),G_=n($,"LI",{});var oAe=s(G_);Qle=n(oAe,"STRONG",{});var rrt=s(Qle);d6o=r(rrt,"xglm"),rrt.forEach(t),c6o=r(oAe," \u2014 "),iN=n(oAe,"A",{href:!0});var trt=s(iN);f6o=r(trt,"XGLMModel"),trt.forEach(t),m6o=r(oAe," (XGLM model)"),oAe.forEach(t),g6o=i($),O_=n($,"LI",{});var rAe=s(O_);Hle=n(rAe,"STRONG",{});var art=s(Hle);h6o=r(art,"xlm"),art.forEach(t),p6o=r(rAe," \u2014 "),dN=n(rAe,"A",{href:!0});var nrt=s(dN);_6o=r(nrt,"XLMModel"),nrt.forEach(t),u6o=r(rAe," (XLM model)"),rAe.forEach(t),b6o=i($),V_=n($,"LI",{});var tAe=s(V_);Ule=n(tAe,"STRONG",{});var srt=s(Ule);v6o=r(srt,"xlm-prophetnet"),srt.forEach(t),F6o=r(tAe," \u2014 "),cN=n(tAe,"A",{href:!0});var lrt=s(cN);T6o=r(lrt,"XLMProphetNetModel"),lrt.forEach(t),M6o=r(tAe," (XLMProphetNet model)"),tAe.forEach(t),E6o=i($),X_=n($,"LI",{});var aAe=s(X_);Jle=n(aAe,"STRONG",{});var irt=s(Jle);C6o=r(irt,"xlm-roberta"),irt.forEach(t),w6o=r(aAe," \u2014 "),fN=n(aAe,"A",{href:!0});var drt=s(fN);A6o=r(drt,"XLMRobertaModel"),drt.forEach(t),y6o=r(aAe," (XLM-RoBERTa model)"),aAe.forEach(t),L6o=i($),z_=n($,"LI",{});var nAe=s(z_);Yle=n(nAe,"STRONG",{});var crt=s(Yle);x6o=r(crt,"xlm-roberta-xl"),crt.forEach(t),$6o=r(nAe," \u2014 "),mN=n(nAe,"A",{href:!0});var frt=s(mN);k6o=r(frt,"XLMRobertaXLModel"),frt.forEach(t),S6o=r(nAe," (XLM-RoBERTa-XL model)"),nAe.forEach(t),R6o=i($),W_=n($,"LI",{});var sAe=s(W_);Kle=n(sAe,"STRONG",{});var mrt=s(Kle);P6o=r(mrt,"xlnet"),mrt.forEach(t),B6o=r(sAe," \u2014 "),gN=n(sAe,"A",{href:!0});var grt=s(gN);I6o=r(grt,"XLNetModel"),grt.forEach(t),q6o=r(sAe," (XLNet model)"),sAe.forEach(t),N6o=i($),Q_=n($,"LI",{});var lAe=s(Q_);Zle=n(lAe,"STRONG",{});var hrt=s(Zle);j6o=r(hrt,"yolos"),hrt.forEach(t),D6o=r(lAe," \u2014 "),hN=n(lAe,"A",{href:!0});var prt=s(hN);G6o=r(prt,"YolosModel"),prt.forEach(t),O6o=r(lAe," (YOLOS model)"),lAe.forEach(t),V6o=i($),H_=n($,"LI",{});var iAe=s(H_);eie=n(iAe,"STRONG",{});var _rt=s(eie);X6o=r(_rt,"yoso"),_rt.forEach(t),z6o=r(iAe," \u2014 "),pN=n(iAe,"A",{href:!0});var urt=s(pN);W6o=r(urt,"YosoModel"),urt.forEach(t),Q6o=r(iAe," (YOSO model)"),iAe.forEach(t),$.forEach(t),H6o=i(oa),U_=n(oa,"P",{});var dAe=s(U_);U6o=r(dAe,"The model is set in evaluation mode by default using "),oie=n(dAe,"CODE",{});var brt=s(oie);J6o=r(brt,"model.eval()"),brt.forEach(t),Y6o=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(dAe,"CODE",{});var vrt=s(rie);K6o=r(vrt,"model.train()"),vrt.forEach(t),dAe.forEach(t),Z6o=i(oa),T(J_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Qqe=i(f),Li=n(f,"H2",{class:!0});var Yje=s(Li);Y_=n(Yje,"A",{id:!0,class:!0,href:!0});var Frt=s(Y_);tie=n(Frt,"SPAN",{});var Trt=s(tie);T(Z0.$$.fragment,Trt),Trt.forEach(t),Frt.forEach(t),eTo=i(Yje),aie=n(Yje,"SPAN",{});var Mrt=s(aie);oTo=r(Mrt,"AutoModelForPreTraining"),Mrt.forEach(t),Yje.forEach(t),Hqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(eA.$$.fragment,Os),rTo=i(Os),xi=n(Os,"P",{});var lZ=s(xi);tTo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_N=n(lZ,"A",{href:!0});var Ert=s(_N);aTo=r(Ert,"from_pretrained()"),Ert.forEach(t),nTo=r(lZ," class method or the "),uN=n(lZ,"A",{href:!0});var Crt=s(uN);sTo=r(Crt,"from_config()"),Crt.forEach(t),lTo=r(lZ,` class
method.`),lZ.forEach(t),iTo=i(Os),oA=n(Os,"P",{});var Kje=s(oA);dTo=r(Kje,"This class cannot be instantiated directly using "),nie=n(Kje,"CODE",{});var wrt=s(nie);cTo=r(wrt,"__init__()"),wrt.forEach(t),fTo=r(Kje," (throws an error)."),Kje.forEach(t),mTo=i(Os),at=n(Os,"DIV",{class:!0});var L3=s(at);T(rA.$$.fragment,L3),gTo=i(L3),sie=n(L3,"P",{});var Art=s(sie);hTo=r(Art,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Art.forEach(t),pTo=i(L3),$i=n(L3,"P",{});var iZ=s($i);_To=r(iZ,`Note:
Loading a model from its configuration file does `),lie=n(iZ,"STRONG",{});var yrt=s(lie);uTo=r(yrt,"not"),yrt.forEach(t),bTo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(iZ,"A",{href:!0});var Lrt=s(bN);vTo=r(Lrt,"from_pretrained()"),Lrt.forEach(t),FTo=r(iZ," to load the model weights."),iZ.forEach(t),TTo=i(L3),T(K_.$$.fragment,L3),L3.forEach(t),MTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(tA.$$.fragment,ra),ETo=i(ra),iie=n(ra,"P",{});var xrt=s(iie);CTo=r(xrt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xrt.forEach(t),wTo=i(ra),xa=n(ra,"P",{});var x3=s(xa);ATo=r(x3,"The model class to instantiate is selected based on the "),die=n(x3,"CODE",{});var $rt=s(die);yTo=r($rt,"model_type"),$rt.forEach(t),LTo=r(x3,` property of the config object (either
passed as an argument or loaded from `),cie=n(x3,"CODE",{});var krt=s(cie);xTo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),$To=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(x3,"CODE",{});var Srt=s(fie);kTo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),STo=r(x3,":"),x3.forEach(t),RTo=i(ra),G=n(ra,"UL",{});var O=s(G);Z_=n(O,"LI",{});var cAe=s(Z_);mie=n(cAe,"STRONG",{});var Rrt=s(mie);PTo=r(Rrt,"albert"),Rrt.forEach(t),BTo=r(cAe," \u2014 "),vN=n(cAe,"A",{href:!0});var Prt=s(vN);ITo=r(Prt,"AlbertForPreTraining"),Prt.forEach(t),qTo=r(cAe," (ALBERT model)"),cAe.forEach(t),NTo=i(O),eu=n(O,"LI",{});var fAe=s(eu);gie=n(fAe,"STRONG",{});var Brt=s(gie);jTo=r(Brt,"bart"),Brt.forEach(t),DTo=r(fAe," \u2014 "),FN=n(fAe,"A",{href:!0});var Irt=s(FN);GTo=r(Irt,"BartForConditionalGeneration"),Irt.forEach(t),OTo=r(fAe," (BART model)"),fAe.forEach(t),VTo=i(O),ou=n(O,"LI",{});var mAe=s(ou);hie=n(mAe,"STRONG",{});var qrt=s(hie);XTo=r(qrt,"bert"),qrt.forEach(t),zTo=r(mAe," \u2014 "),TN=n(mAe,"A",{href:!0});var Nrt=s(TN);WTo=r(Nrt,"BertForPreTraining"),Nrt.forEach(t),QTo=r(mAe," (BERT model)"),mAe.forEach(t),HTo=i(O),ru=n(O,"LI",{});var gAe=s(ru);pie=n(gAe,"STRONG",{});var jrt=s(pie);UTo=r(jrt,"big_bird"),jrt.forEach(t),JTo=r(gAe," \u2014 "),MN=n(gAe,"A",{href:!0});var Drt=s(MN);YTo=r(Drt,"BigBirdForPreTraining"),Drt.forEach(t),KTo=r(gAe," (BigBird model)"),gAe.forEach(t),ZTo=i(O),tu=n(O,"LI",{});var hAe=s(tu);_ie=n(hAe,"STRONG",{});var Grt=s(_ie);e7o=r(Grt,"camembert"),Grt.forEach(t),o7o=r(hAe," \u2014 "),EN=n(hAe,"A",{href:!0});var Ort=s(EN);r7o=r(Ort,"CamembertForMaskedLM"),Ort.forEach(t),t7o=r(hAe," (CamemBERT model)"),hAe.forEach(t),a7o=i(O),au=n(O,"LI",{});var pAe=s(au);uie=n(pAe,"STRONG",{});var Vrt=s(uie);n7o=r(Vrt,"ctrl"),Vrt.forEach(t),s7o=r(pAe," \u2014 "),CN=n(pAe,"A",{href:!0});var Xrt=s(CN);l7o=r(Xrt,"CTRLLMHeadModel"),Xrt.forEach(t),i7o=r(pAe," (CTRL model)"),pAe.forEach(t),d7o=i(O),nu=n(O,"LI",{});var _Ae=s(nu);bie=n(_Ae,"STRONG",{});var zrt=s(bie);c7o=r(zrt,"data2vec-text"),zrt.forEach(t),f7o=r(_Ae," \u2014 "),wN=n(_Ae,"A",{href:!0});var Wrt=s(wN);m7o=r(Wrt,"Data2VecTextForMaskedLM"),Wrt.forEach(t),g7o=r(_Ae," (Data2VecText model)"),_Ae.forEach(t),h7o=i(O),su=n(O,"LI",{});var uAe=s(su);vie=n(uAe,"STRONG",{});var Qrt=s(vie);p7o=r(Qrt,"deberta"),Qrt.forEach(t),_7o=r(uAe," \u2014 "),AN=n(uAe,"A",{href:!0});var Hrt=s(AN);u7o=r(Hrt,"DebertaForMaskedLM"),Hrt.forEach(t),b7o=r(uAe," (DeBERTa model)"),uAe.forEach(t),v7o=i(O),lu=n(O,"LI",{});var bAe=s(lu);Fie=n(bAe,"STRONG",{});var Urt=s(Fie);F7o=r(Urt,"deberta-v2"),Urt.forEach(t),T7o=r(bAe," \u2014 "),yN=n(bAe,"A",{href:!0});var Jrt=s(yN);M7o=r(Jrt,"DebertaV2ForMaskedLM"),Jrt.forEach(t),E7o=r(bAe," (DeBERTa-v2 model)"),bAe.forEach(t),C7o=i(O),iu=n(O,"LI",{});var vAe=s(iu);Tie=n(vAe,"STRONG",{});var Yrt=s(Tie);w7o=r(Yrt,"distilbert"),Yrt.forEach(t),A7o=r(vAe," \u2014 "),LN=n(vAe,"A",{href:!0});var Krt=s(LN);y7o=r(Krt,"DistilBertForMaskedLM"),Krt.forEach(t),L7o=r(vAe," (DistilBERT model)"),vAe.forEach(t),x7o=i(O),du=n(O,"LI",{});var FAe=s(du);Mie=n(FAe,"STRONG",{});var Zrt=s(Mie);$7o=r(Zrt,"electra"),Zrt.forEach(t),k7o=r(FAe," \u2014 "),xN=n(FAe,"A",{href:!0});var ett=s(xN);S7o=r(ett,"ElectraForPreTraining"),ett.forEach(t),R7o=r(FAe," (ELECTRA model)"),FAe.forEach(t),P7o=i(O),cu=n(O,"LI",{});var TAe=s(cu);Eie=n(TAe,"STRONG",{});var ott=s(Eie);B7o=r(ott,"flaubert"),ott.forEach(t),I7o=r(TAe," \u2014 "),$N=n(TAe,"A",{href:!0});var rtt=s($N);q7o=r(rtt,"FlaubertWithLMHeadModel"),rtt.forEach(t),N7o=r(TAe," (FlauBERT model)"),TAe.forEach(t),j7o=i(O),fu=n(O,"LI",{});var MAe=s(fu);Cie=n(MAe,"STRONG",{});var ttt=s(Cie);D7o=r(ttt,"flava"),ttt.forEach(t),G7o=r(MAe," \u2014 "),kN=n(MAe,"A",{href:!0});var att=s(kN);O7o=r(att,"FlavaForPreTraining"),att.forEach(t),V7o=r(MAe," (Flava model)"),MAe.forEach(t),X7o=i(O),mu=n(O,"LI",{});var EAe=s(mu);wie=n(EAe,"STRONG",{});var ntt=s(wie);z7o=r(ntt,"fnet"),ntt.forEach(t),W7o=r(EAe," \u2014 "),SN=n(EAe,"A",{href:!0});var stt=s(SN);Q7o=r(stt,"FNetForPreTraining"),stt.forEach(t),H7o=r(EAe," (FNet model)"),EAe.forEach(t),U7o=i(O),gu=n(O,"LI",{});var CAe=s(gu);Aie=n(CAe,"STRONG",{});var ltt=s(Aie);J7o=r(ltt,"fsmt"),ltt.forEach(t),Y7o=r(CAe," \u2014 "),RN=n(CAe,"A",{href:!0});var itt=s(RN);K7o=r(itt,"FSMTForConditionalGeneration"),itt.forEach(t),Z7o=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),e9o=i(O),hu=n(O,"LI",{});var wAe=s(hu);yie=n(wAe,"STRONG",{});var dtt=s(yie);o9o=r(dtt,"funnel"),dtt.forEach(t),r9o=r(wAe," \u2014 "),PN=n(wAe,"A",{href:!0});var ctt=s(PN);t9o=r(ctt,"FunnelForPreTraining"),ctt.forEach(t),a9o=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),n9o=i(O),pu=n(O,"LI",{});var AAe=s(pu);Lie=n(AAe,"STRONG",{});var ftt=s(Lie);s9o=r(ftt,"gpt2"),ftt.forEach(t),l9o=r(AAe," \u2014 "),BN=n(AAe,"A",{href:!0});var mtt=s(BN);i9o=r(mtt,"GPT2LMHeadModel"),mtt.forEach(t),d9o=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),c9o=i(O),_u=n(O,"LI",{});var yAe=s(_u);xie=n(yAe,"STRONG",{});var gtt=s(xie);f9o=r(gtt,"ibert"),gtt.forEach(t),m9o=r(yAe," \u2014 "),IN=n(yAe,"A",{href:!0});var htt=s(IN);g9o=r(htt,"IBertForMaskedLM"),htt.forEach(t),h9o=r(yAe," (I-BERT model)"),yAe.forEach(t),p9o=i(O),uu=n(O,"LI",{});var LAe=s(uu);$ie=n(LAe,"STRONG",{});var ptt=s($ie);_9o=r(ptt,"layoutlm"),ptt.forEach(t),u9o=r(LAe," \u2014 "),qN=n(LAe,"A",{href:!0});var _tt=s(qN);b9o=r(_tt,"LayoutLMForMaskedLM"),_tt.forEach(t),v9o=r(LAe," (LayoutLM model)"),LAe.forEach(t),F9o=i(O),bu=n(O,"LI",{});var xAe=s(bu);kie=n(xAe,"STRONG",{});var utt=s(kie);T9o=r(utt,"longformer"),utt.forEach(t),M9o=r(xAe," \u2014 "),NN=n(xAe,"A",{href:!0});var btt=s(NN);E9o=r(btt,"LongformerForMaskedLM"),btt.forEach(t),C9o=r(xAe," (Longformer model)"),xAe.forEach(t),w9o=i(O),vu=n(O,"LI",{});var $Ae=s(vu);Sie=n($Ae,"STRONG",{});var vtt=s(Sie);A9o=r(vtt,"longt5"),vtt.forEach(t),y9o=r($Ae," \u2014 "),jN=n($Ae,"A",{href:!0});var Ftt=s(jN);L9o=r(Ftt,"LongT5ForConditionalGeneration"),Ftt.forEach(t),x9o=r($Ae," (LongT5 model)"),$Ae.forEach(t),$9o=i(O),Fu=n(O,"LI",{});var kAe=s(Fu);Rie=n(kAe,"STRONG",{});var Ttt=s(Rie);k9o=r(Ttt,"lxmert"),Ttt.forEach(t),S9o=r(kAe," \u2014 "),DN=n(kAe,"A",{href:!0});var Mtt=s(DN);R9o=r(Mtt,"LxmertForPreTraining"),Mtt.forEach(t),P9o=r(kAe," (LXMERT model)"),kAe.forEach(t),B9o=i(O),Tu=n(O,"LI",{});var SAe=s(Tu);Pie=n(SAe,"STRONG",{});var Ett=s(Pie);I9o=r(Ett,"megatron-bert"),Ett.forEach(t),q9o=r(SAe," \u2014 "),GN=n(SAe,"A",{href:!0});var Ctt=s(GN);N9o=r(Ctt,"MegatronBertForPreTraining"),Ctt.forEach(t),j9o=r(SAe," (MegatronBert model)"),SAe.forEach(t),D9o=i(O),Mu=n(O,"LI",{});var RAe=s(Mu);Bie=n(RAe,"STRONG",{});var wtt=s(Bie);G9o=r(wtt,"mobilebert"),wtt.forEach(t),O9o=r(RAe," \u2014 "),ON=n(RAe,"A",{href:!0});var Att=s(ON);V9o=r(Att,"MobileBertForPreTraining"),Att.forEach(t),X9o=r(RAe," (MobileBERT model)"),RAe.forEach(t),z9o=i(O),Eu=n(O,"LI",{});var PAe=s(Eu);Iie=n(PAe,"STRONG",{});var ytt=s(Iie);W9o=r(ytt,"mpnet"),ytt.forEach(t),Q9o=r(PAe," \u2014 "),VN=n(PAe,"A",{href:!0});var Ltt=s(VN);H9o=r(Ltt,"MPNetForMaskedLM"),Ltt.forEach(t),U9o=r(PAe," (MPNet model)"),PAe.forEach(t),J9o=i(O),Cu=n(O,"LI",{});var BAe=s(Cu);qie=n(BAe,"STRONG",{});var xtt=s(qie);Y9o=r(xtt,"openai-gpt"),xtt.forEach(t),K9o=r(BAe," \u2014 "),XN=n(BAe,"A",{href:!0});var $tt=s(XN);Z9o=r($tt,"OpenAIGPTLMHeadModel"),$tt.forEach(t),eMo=r(BAe," (OpenAI GPT model)"),BAe.forEach(t),oMo=i(O),wu=n(O,"LI",{});var IAe=s(wu);Nie=n(IAe,"STRONG",{});var ktt=s(Nie);rMo=r(ktt,"retribert"),ktt.forEach(t),tMo=r(IAe," \u2014 "),zN=n(IAe,"A",{href:!0});var Stt=s(zN);aMo=r(Stt,"RetriBertModel"),Stt.forEach(t),nMo=r(IAe," (RetriBERT model)"),IAe.forEach(t),sMo=i(O),Au=n(O,"LI",{});var qAe=s(Au);jie=n(qAe,"STRONG",{});var Rtt=s(jie);lMo=r(Rtt,"roberta"),Rtt.forEach(t),iMo=r(qAe," \u2014 "),WN=n(qAe,"A",{href:!0});var Ptt=s(WN);dMo=r(Ptt,"RobertaForMaskedLM"),Ptt.forEach(t),cMo=r(qAe," (RoBERTa model)"),qAe.forEach(t),fMo=i(O),yu=n(O,"LI",{});var NAe=s(yu);Die=n(NAe,"STRONG",{});var Btt=s(Die);mMo=r(Btt,"splinter"),Btt.forEach(t),gMo=r(NAe," \u2014 "),QN=n(NAe,"A",{href:!0});var Itt=s(QN);hMo=r(Itt,"SplinterForPreTraining"),Itt.forEach(t),pMo=r(NAe," (Splinter model)"),NAe.forEach(t),_Mo=i(O),Lu=n(O,"LI",{});var jAe=s(Lu);Gie=n(jAe,"STRONG",{});var qtt=s(Gie);uMo=r(qtt,"squeezebert"),qtt.forEach(t),bMo=r(jAe," \u2014 "),HN=n(jAe,"A",{href:!0});var Ntt=s(HN);vMo=r(Ntt,"SqueezeBertForMaskedLM"),Ntt.forEach(t),FMo=r(jAe," (SqueezeBERT model)"),jAe.forEach(t),TMo=i(O),xu=n(O,"LI",{});var DAe=s(xu);Oie=n(DAe,"STRONG",{});var jtt=s(Oie);MMo=r(jtt,"t5"),jtt.forEach(t),EMo=r(DAe," \u2014 "),UN=n(DAe,"A",{href:!0});var Dtt=s(UN);CMo=r(Dtt,"T5ForConditionalGeneration"),Dtt.forEach(t),wMo=r(DAe," (T5 model)"),DAe.forEach(t),AMo=i(O),$u=n(O,"LI",{});var GAe=s($u);Vie=n(GAe,"STRONG",{});var Gtt=s(Vie);yMo=r(Gtt,"tapas"),Gtt.forEach(t),LMo=r(GAe," \u2014 "),JN=n(GAe,"A",{href:!0});var Ott=s(JN);xMo=r(Ott,"TapasForMaskedLM"),Ott.forEach(t),$Mo=r(GAe," (TAPAS model)"),GAe.forEach(t),kMo=i(O),ku=n(O,"LI",{});var OAe=s(ku);Xie=n(OAe,"STRONG",{});var Vtt=s(Xie);SMo=r(Vtt,"transfo-xl"),Vtt.forEach(t),RMo=r(OAe," \u2014 "),YN=n(OAe,"A",{href:!0});var Xtt=s(YN);PMo=r(Xtt,"TransfoXLLMHeadModel"),Xtt.forEach(t),BMo=r(OAe," (Transformer-XL model)"),OAe.forEach(t),IMo=i(O),Su=n(O,"LI",{});var VAe=s(Su);zie=n(VAe,"STRONG",{});var ztt=s(zie);qMo=r(ztt,"unispeech"),ztt.forEach(t),NMo=r(VAe," \u2014 "),KN=n(VAe,"A",{href:!0});var Wtt=s(KN);jMo=r(Wtt,"UniSpeechForPreTraining"),Wtt.forEach(t),DMo=r(VAe," (UniSpeech model)"),VAe.forEach(t),GMo=i(O),Ru=n(O,"LI",{});var XAe=s(Ru);Wie=n(XAe,"STRONG",{});var Qtt=s(Wie);OMo=r(Qtt,"unispeech-sat"),Qtt.forEach(t),VMo=r(XAe," \u2014 "),ZN=n(XAe,"A",{href:!0});var Htt=s(ZN);XMo=r(Htt,"UniSpeechSatForPreTraining"),Htt.forEach(t),zMo=r(XAe," (UniSpeechSat model)"),XAe.forEach(t),WMo=i(O),Pu=n(O,"LI",{});var zAe=s(Pu);Qie=n(zAe,"STRONG",{});var Utt=s(Qie);QMo=r(Utt,"visual_bert"),Utt.forEach(t),HMo=r(zAe," \u2014 "),ej=n(zAe,"A",{href:!0});var Jtt=s(ej);UMo=r(Jtt,"VisualBertForPreTraining"),Jtt.forEach(t),JMo=r(zAe," (VisualBert model)"),zAe.forEach(t),YMo=i(O),Bu=n(O,"LI",{});var WAe=s(Bu);Hie=n(WAe,"STRONG",{});var Ytt=s(Hie);KMo=r(Ytt,"vit_mae"),Ytt.forEach(t),ZMo=r(WAe," \u2014 "),oj=n(WAe,"A",{href:!0});var Ktt=s(oj);e4o=r(Ktt,"ViTMAEForPreTraining"),Ktt.forEach(t),o4o=r(WAe," (ViTMAE model)"),WAe.forEach(t),r4o=i(O),Iu=n(O,"LI",{});var QAe=s(Iu);Uie=n(QAe,"STRONG",{});var Ztt=s(Uie);t4o=r(Ztt,"wav2vec2"),Ztt.forEach(t),a4o=r(QAe," \u2014 "),rj=n(QAe,"A",{href:!0});var eat=s(rj);n4o=r(eat,"Wav2Vec2ForPreTraining"),eat.forEach(t),s4o=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),l4o=i(O),qu=n(O,"LI",{});var HAe=s(qu);Jie=n(HAe,"STRONG",{});var oat=s(Jie);i4o=r(oat,"wav2vec2-conformer"),oat.forEach(t),d4o=r(HAe," \u2014 "),tj=n(HAe,"A",{href:!0});var rat=s(tj);c4o=r(rat,"Wav2Vec2ConformerForPreTraining"),rat.forEach(t),f4o=r(HAe," (Wav2Vec2-Conformer model)"),HAe.forEach(t),m4o=i(O),Nu=n(O,"LI",{});var UAe=s(Nu);Yie=n(UAe,"STRONG",{});var tat=s(Yie);g4o=r(tat,"xlm"),tat.forEach(t),h4o=r(UAe," \u2014 "),aj=n(UAe,"A",{href:!0});var aat=s(aj);p4o=r(aat,"XLMWithLMHeadModel"),aat.forEach(t),_4o=r(UAe," (XLM model)"),UAe.forEach(t),u4o=i(O),ju=n(O,"LI",{});var JAe=s(ju);Kie=n(JAe,"STRONG",{});var nat=s(Kie);b4o=r(nat,"xlm-roberta"),nat.forEach(t),v4o=r(JAe," \u2014 "),nj=n(JAe,"A",{href:!0});var sat=s(nj);F4o=r(sat,"XLMRobertaForMaskedLM"),sat.forEach(t),T4o=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),M4o=i(O),Du=n(O,"LI",{});var YAe=s(Du);Zie=n(YAe,"STRONG",{});var lat=s(Zie);E4o=r(lat,"xlm-roberta-xl"),lat.forEach(t),C4o=r(YAe," \u2014 "),sj=n(YAe,"A",{href:!0});var iat=s(sj);w4o=r(iat,"XLMRobertaXLForMaskedLM"),iat.forEach(t),A4o=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),y4o=i(O),Gu=n(O,"LI",{});var KAe=s(Gu);ede=n(KAe,"STRONG",{});var dat=s(ede);L4o=r(dat,"xlnet"),dat.forEach(t),x4o=r(KAe," \u2014 "),lj=n(KAe,"A",{href:!0});var cat=s(lj);$4o=r(cat,"XLNetLMHeadModel"),cat.forEach(t),k4o=r(KAe," (XLNet model)"),KAe.forEach(t),O.forEach(t),S4o=i(ra),Ou=n(ra,"P",{});var ZAe=s(Ou);R4o=r(ZAe,"The model is set in evaluation mode by default using "),ode=n(ZAe,"CODE",{});var fat=s(ode);P4o=r(fat,"model.eval()"),fat.forEach(t),B4o=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(ZAe,"CODE",{});var mat=s(rde);I4o=r(mat,"model.train()"),mat.forEach(t),ZAe.forEach(t),q4o=i(ra),T(Vu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Uqe=i(f),ki=n(f,"H2",{class:!0});var Zje=s(ki);Xu=n(Zje,"A",{id:!0,class:!0,href:!0});var gat=s(Xu);tde=n(gat,"SPAN",{});var hat=s(tde);T(aA.$$.fragment,hat),hat.forEach(t),gat.forEach(t),N4o=i(Zje),ade=n(Zje,"SPAN",{});var pat=s(ade);j4o=r(pat,"AutoModelForCausalLM"),pat.forEach(t),Zje.forEach(t),Jqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(nA.$$.fragment,Vs),D4o=i(Vs),Si=n(Vs,"P",{});var dZ=s(Si);G4o=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ij=n(dZ,"A",{href:!0});var _at=s(ij);O4o=r(_at,"from_pretrained()"),_at.forEach(t),V4o=r(dZ," class method or the "),dj=n(dZ,"A",{href:!0});var uat=s(dj);X4o=r(uat,"from_config()"),uat.forEach(t),z4o=r(dZ,` class
method.`),dZ.forEach(t),W4o=i(Vs),sA=n(Vs,"P",{});var eDe=s(sA);Q4o=r(eDe,"This class cannot be instantiated directly using "),nde=n(eDe,"CODE",{});var bat=s(nde);H4o=r(bat,"__init__()"),bat.forEach(t),U4o=r(eDe," (throws an error)."),eDe.forEach(t),J4o=i(Vs),nt=n(Vs,"DIV",{class:!0});var $3=s(nt);T(lA.$$.fragment,$3),Y4o=i($3),sde=n($3,"P",{});var vat=s(sde);K4o=r(vat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vat.forEach(t),Z4o=i($3),Ri=n($3,"P",{});var cZ=s(Ri);eEo=r(cZ,`Note:
Loading a model from its configuration file does `),lde=n(cZ,"STRONG",{});var Fat=s(lde);oEo=r(Fat,"not"),Fat.forEach(t),rEo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(cZ,"A",{href:!0});var Tat=s(cj);tEo=r(Tat,"from_pretrained()"),Tat.forEach(t),aEo=r(cZ," to load the model weights."),cZ.forEach(t),nEo=i($3),T(zu.$$.fragment,$3),$3.forEach(t),sEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(iA.$$.fragment,ta),lEo=i(ta),ide=n(ta,"P",{});var Mat=s(ide);iEo=r(Mat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mat.forEach(t),dEo=i(ta),$a=n(ta,"P",{});var k3=s($a);cEo=r(k3,"The model class to instantiate is selected based on the "),dde=n(k3,"CODE",{});var Eat=s(dde);fEo=r(Eat,"model_type"),Eat.forEach(t),mEo=r(k3,` property of the config object (either
passed as an argument or loaded from `),cde=n(k3,"CODE",{});var Cat=s(cde);gEo=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),hEo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=n(k3,"CODE",{});var wat=s(fde);pEo=r(wat,"pretrained_model_name_or_path"),wat.forEach(t),_Eo=r(k3,":"),k3.forEach(t),uEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Wu=n(Q,"LI",{});var eye=s(Wu);mde=n(eye,"STRONG",{});var Aat=s(mde);bEo=r(Aat,"bart"),Aat.forEach(t),vEo=r(eye," \u2014 "),fj=n(eye,"A",{href:!0});var yat=s(fj);FEo=r(yat,"BartForCausalLM"),yat.forEach(t),TEo=r(eye," (BART model)"),eye.forEach(t),MEo=i(Q),Qu=n(Q,"LI",{});var oye=s(Qu);gde=n(oye,"STRONG",{});var Lat=s(gde);EEo=r(Lat,"bert"),Lat.forEach(t),CEo=r(oye," \u2014 "),mj=n(oye,"A",{href:!0});var xat=s(mj);wEo=r(xat,"BertLMHeadModel"),xat.forEach(t),AEo=r(oye," (BERT model)"),oye.forEach(t),yEo=i(Q),Hu=n(Q,"LI",{});var rye=s(Hu);hde=n(rye,"STRONG",{});var $at=s(hde);LEo=r($at,"bert-generation"),$at.forEach(t),xEo=r(rye," \u2014 "),gj=n(rye,"A",{href:!0});var kat=s(gj);$Eo=r(kat,"BertGenerationDecoder"),kat.forEach(t),kEo=r(rye," (Bert Generation model)"),rye.forEach(t),SEo=i(Q),Uu=n(Q,"LI",{});var tye=s(Uu);pde=n(tye,"STRONG",{});var Sat=s(pde);REo=r(Sat,"big_bird"),Sat.forEach(t),PEo=r(tye," \u2014 "),hj=n(tye,"A",{href:!0});var Rat=s(hj);BEo=r(Rat,"BigBirdForCausalLM"),Rat.forEach(t),IEo=r(tye," (BigBird model)"),tye.forEach(t),qEo=i(Q),Ju=n(Q,"LI",{});var aye=s(Ju);_de=n(aye,"STRONG",{});var Pat=s(_de);NEo=r(Pat,"bigbird_pegasus"),Pat.forEach(t),jEo=r(aye," \u2014 "),pj=n(aye,"A",{href:!0});var Bat=s(pj);DEo=r(Bat,"BigBirdPegasusForCausalLM"),Bat.forEach(t),GEo=r(aye," (BigBirdPegasus model)"),aye.forEach(t),OEo=i(Q),Yu=n(Q,"LI",{});var nye=s(Yu);ude=n(nye,"STRONG",{});var Iat=s(ude);VEo=r(Iat,"blenderbot"),Iat.forEach(t),XEo=r(nye," \u2014 "),_j=n(nye,"A",{href:!0});var qat=s(_j);zEo=r(qat,"BlenderbotForCausalLM"),qat.forEach(t),WEo=r(nye," (Blenderbot model)"),nye.forEach(t),QEo=i(Q),Ku=n(Q,"LI",{});var sye=s(Ku);bde=n(sye,"STRONG",{});var Nat=s(bde);HEo=r(Nat,"blenderbot-small"),Nat.forEach(t),UEo=r(sye," \u2014 "),uj=n(sye,"A",{href:!0});var jat=s(uj);JEo=r(jat,"BlenderbotSmallForCausalLM"),jat.forEach(t),YEo=r(sye," (BlenderbotSmall model)"),sye.forEach(t),KEo=i(Q),Zu=n(Q,"LI",{});var lye=s(Zu);vde=n(lye,"STRONG",{});var Dat=s(vde);ZEo=r(Dat,"camembert"),Dat.forEach(t),e5o=r(lye," \u2014 "),bj=n(lye,"A",{href:!0});var Gat=s(bj);o5o=r(Gat,"CamembertForCausalLM"),Gat.forEach(t),r5o=r(lye," (CamemBERT model)"),lye.forEach(t),t5o=i(Q),e2=n(Q,"LI",{});var iye=s(e2);Fde=n(iye,"STRONG",{});var Oat=s(Fde);a5o=r(Oat,"ctrl"),Oat.forEach(t),n5o=r(iye," \u2014 "),vj=n(iye,"A",{href:!0});var Vat=s(vj);s5o=r(Vat,"CTRLLMHeadModel"),Vat.forEach(t),l5o=r(iye," (CTRL model)"),iye.forEach(t),i5o=i(Q),o2=n(Q,"LI",{});var dye=s(o2);Tde=n(dye,"STRONG",{});var Xat=s(Tde);d5o=r(Xat,"data2vec-text"),Xat.forEach(t),c5o=r(dye," \u2014 "),Fj=n(dye,"A",{href:!0});var zat=s(Fj);f5o=r(zat,"Data2VecTextForCausalLM"),zat.forEach(t),m5o=r(dye," (Data2VecText model)"),dye.forEach(t),g5o=i(Q),r2=n(Q,"LI",{});var cye=s(r2);Mde=n(cye,"STRONG",{});var Wat=s(Mde);h5o=r(Wat,"electra"),Wat.forEach(t),p5o=r(cye," \u2014 "),Tj=n(cye,"A",{href:!0});var Qat=s(Tj);_5o=r(Qat,"ElectraForCausalLM"),Qat.forEach(t),u5o=r(cye," (ELECTRA model)"),cye.forEach(t),b5o=i(Q),t2=n(Q,"LI",{});var fye=s(t2);Ede=n(fye,"STRONG",{});var Hat=s(Ede);v5o=r(Hat,"gpt2"),Hat.forEach(t),F5o=r(fye," \u2014 "),Mj=n(fye,"A",{href:!0});var Uat=s(Mj);T5o=r(Uat,"GPT2LMHeadModel"),Uat.forEach(t),M5o=r(fye," (OpenAI GPT-2 model)"),fye.forEach(t),E5o=i(Q),a2=n(Q,"LI",{});var mye=s(a2);Cde=n(mye,"STRONG",{});var Jat=s(Cde);C5o=r(Jat,"gpt_neo"),Jat.forEach(t),w5o=r(mye," \u2014 "),Ej=n(mye,"A",{href:!0});var Yat=s(Ej);A5o=r(Yat,"GPTNeoForCausalLM"),Yat.forEach(t),y5o=r(mye," (GPT Neo model)"),mye.forEach(t),L5o=i(Q),n2=n(Q,"LI",{});var gye=s(n2);wde=n(gye,"STRONG",{});var Kat=s(wde);x5o=r(Kat,"gptj"),Kat.forEach(t),$5o=r(gye," \u2014 "),Cj=n(gye,"A",{href:!0});var Zat=s(Cj);k5o=r(Zat,"GPTJForCausalLM"),Zat.forEach(t),S5o=r(gye," (GPT-J model)"),gye.forEach(t),R5o=i(Q),s2=n(Q,"LI",{});var hye=s(s2);Ade=n(hye,"STRONG",{});var ent=s(Ade);P5o=r(ent,"marian"),ent.forEach(t),B5o=r(hye," \u2014 "),wj=n(hye,"A",{href:!0});var ont=s(wj);I5o=r(ont,"MarianForCausalLM"),ont.forEach(t),q5o=r(hye," (Marian model)"),hye.forEach(t),N5o=i(Q),l2=n(Q,"LI",{});var pye=s(l2);yde=n(pye,"STRONG",{});var rnt=s(yde);j5o=r(rnt,"mbart"),rnt.forEach(t),D5o=r(pye," \u2014 "),Aj=n(pye,"A",{href:!0});var tnt=s(Aj);G5o=r(tnt,"MBartForCausalLM"),tnt.forEach(t),O5o=r(pye," (mBART model)"),pye.forEach(t),V5o=i(Q),i2=n(Q,"LI",{});var _ye=s(i2);Lde=n(_ye,"STRONG",{});var ant=s(Lde);X5o=r(ant,"megatron-bert"),ant.forEach(t),z5o=r(_ye," \u2014 "),yj=n(_ye,"A",{href:!0});var nnt=s(yj);W5o=r(nnt,"MegatronBertForCausalLM"),nnt.forEach(t),Q5o=r(_ye," (MegatronBert model)"),_ye.forEach(t),H5o=i(Q),d2=n(Q,"LI",{});var uye=s(d2);xde=n(uye,"STRONG",{});var snt=s(xde);U5o=r(snt,"openai-gpt"),snt.forEach(t),J5o=r(uye," \u2014 "),Lj=n(uye,"A",{href:!0});var lnt=s(Lj);Y5o=r(lnt,"OpenAIGPTLMHeadModel"),lnt.forEach(t),K5o=r(uye," (OpenAI GPT model)"),uye.forEach(t),Z5o=i(Q),c2=n(Q,"LI",{});var bye=s(c2);$de=n(bye,"STRONG",{});var int=s($de);eCo=r(int,"opt"),int.forEach(t),oCo=r(bye," \u2014 "),xj=n(bye,"A",{href:!0});var dnt=s(xj);rCo=r(dnt,"OPTForCausalLM"),dnt.forEach(t),tCo=r(bye," (OPT model)"),bye.forEach(t),aCo=i(Q),f2=n(Q,"LI",{});var vye=s(f2);kde=n(vye,"STRONG",{});var cnt=s(kde);nCo=r(cnt,"pegasus"),cnt.forEach(t),sCo=r(vye," \u2014 "),$j=n(vye,"A",{href:!0});var fnt=s($j);lCo=r(fnt,"PegasusForCausalLM"),fnt.forEach(t),iCo=r(vye," (Pegasus model)"),vye.forEach(t),dCo=i(Q),m2=n(Q,"LI",{});var Fye=s(m2);Sde=n(Fye,"STRONG",{});var mnt=s(Sde);cCo=r(mnt,"plbart"),mnt.forEach(t),fCo=r(Fye," \u2014 "),kj=n(Fye,"A",{href:!0});var gnt=s(kj);mCo=r(gnt,"PLBartForCausalLM"),gnt.forEach(t),gCo=r(Fye," (PLBart model)"),Fye.forEach(t),hCo=i(Q),g2=n(Q,"LI",{});var Tye=s(g2);Rde=n(Tye,"STRONG",{});var hnt=s(Rde);pCo=r(hnt,"prophetnet"),hnt.forEach(t),_Co=r(Tye," \u2014 "),Sj=n(Tye,"A",{href:!0});var pnt=s(Sj);uCo=r(pnt,"ProphetNetForCausalLM"),pnt.forEach(t),bCo=r(Tye," (ProphetNet model)"),Tye.forEach(t),vCo=i(Q),h2=n(Q,"LI",{});var Mye=s(h2);Pde=n(Mye,"STRONG",{});var _nt=s(Pde);FCo=r(_nt,"qdqbert"),_nt.forEach(t),TCo=r(Mye," \u2014 "),Rj=n(Mye,"A",{href:!0});var unt=s(Rj);MCo=r(unt,"QDQBertLMHeadModel"),unt.forEach(t),ECo=r(Mye," (QDQBert model)"),Mye.forEach(t),CCo=i(Q),p2=n(Q,"LI",{});var Eye=s(p2);Bde=n(Eye,"STRONG",{});var bnt=s(Bde);wCo=r(bnt,"reformer"),bnt.forEach(t),ACo=r(Eye," \u2014 "),Pj=n(Eye,"A",{href:!0});var vnt=s(Pj);yCo=r(vnt,"ReformerModelWithLMHead"),vnt.forEach(t),LCo=r(Eye," (Reformer model)"),Eye.forEach(t),xCo=i(Q),_2=n(Q,"LI",{});var Cye=s(_2);Ide=n(Cye,"STRONG",{});var Fnt=s(Ide);$Co=r(Fnt,"rembert"),Fnt.forEach(t),kCo=r(Cye," \u2014 "),Bj=n(Cye,"A",{href:!0});var Tnt=s(Bj);SCo=r(Tnt,"RemBertForCausalLM"),Tnt.forEach(t),RCo=r(Cye," (RemBERT model)"),Cye.forEach(t),PCo=i(Q),u2=n(Q,"LI",{});var wye=s(u2);qde=n(wye,"STRONG",{});var Mnt=s(qde);BCo=r(Mnt,"roberta"),Mnt.forEach(t),ICo=r(wye," \u2014 "),Ij=n(wye,"A",{href:!0});var Ent=s(Ij);qCo=r(Ent,"RobertaForCausalLM"),Ent.forEach(t),NCo=r(wye," (RoBERTa model)"),wye.forEach(t),jCo=i(Q),b2=n(Q,"LI",{});var Aye=s(b2);Nde=n(Aye,"STRONG",{});var Cnt=s(Nde);DCo=r(Cnt,"roformer"),Cnt.forEach(t),GCo=r(Aye," \u2014 "),qj=n(Aye,"A",{href:!0});var wnt=s(qj);OCo=r(wnt,"RoFormerForCausalLM"),wnt.forEach(t),VCo=r(Aye," (RoFormer model)"),Aye.forEach(t),XCo=i(Q),v2=n(Q,"LI",{});var yye=s(v2);jde=n(yye,"STRONG",{});var Ant=s(jde);zCo=r(Ant,"speech_to_text_2"),Ant.forEach(t),WCo=r(yye," \u2014 "),Nj=n(yye,"A",{href:!0});var ynt=s(Nj);QCo=r(ynt,"Speech2Text2ForCausalLM"),ynt.forEach(t),HCo=r(yye," (Speech2Text2 model)"),yye.forEach(t),UCo=i(Q),F2=n(Q,"LI",{});var Lye=s(F2);Dde=n(Lye,"STRONG",{});var Lnt=s(Dde);JCo=r(Lnt,"transfo-xl"),Lnt.forEach(t),YCo=r(Lye," \u2014 "),jj=n(Lye,"A",{href:!0});var xnt=s(jj);KCo=r(xnt,"TransfoXLLMHeadModel"),xnt.forEach(t),ZCo=r(Lye," (Transformer-XL model)"),Lye.forEach(t),e3o=i(Q),T2=n(Q,"LI",{});var xye=s(T2);Gde=n(xye,"STRONG",{});var $nt=s(Gde);o3o=r($nt,"trocr"),$nt.forEach(t),r3o=r(xye," \u2014 "),Dj=n(xye,"A",{href:!0});var knt=s(Dj);t3o=r(knt,"TrOCRForCausalLM"),knt.forEach(t),a3o=r(xye," (TrOCR model)"),xye.forEach(t),n3o=i(Q),M2=n(Q,"LI",{});var $ye=s(M2);Ode=n($ye,"STRONG",{});var Snt=s(Ode);s3o=r(Snt,"xglm"),Snt.forEach(t),l3o=r($ye," \u2014 "),Gj=n($ye,"A",{href:!0});var Rnt=s(Gj);i3o=r(Rnt,"XGLMForCausalLM"),Rnt.forEach(t),d3o=r($ye," (XGLM model)"),$ye.forEach(t),c3o=i(Q),E2=n(Q,"LI",{});var kye=s(E2);Vde=n(kye,"STRONG",{});var Pnt=s(Vde);f3o=r(Pnt,"xlm"),Pnt.forEach(t),m3o=r(kye," \u2014 "),Oj=n(kye,"A",{href:!0});var Bnt=s(Oj);g3o=r(Bnt,"XLMWithLMHeadModel"),Bnt.forEach(t),h3o=r(kye," (XLM model)"),kye.forEach(t),p3o=i(Q),C2=n(Q,"LI",{});var Sye=s(C2);Xde=n(Sye,"STRONG",{});var Int=s(Xde);_3o=r(Int,"xlm-prophetnet"),Int.forEach(t),u3o=r(Sye," \u2014 "),Vj=n(Sye,"A",{href:!0});var qnt=s(Vj);b3o=r(qnt,"XLMProphetNetForCausalLM"),qnt.forEach(t),v3o=r(Sye," (XLMProphetNet model)"),Sye.forEach(t),F3o=i(Q),w2=n(Q,"LI",{});var Rye=s(w2);zde=n(Rye,"STRONG",{});var Nnt=s(zde);T3o=r(Nnt,"xlm-roberta"),Nnt.forEach(t),M3o=r(Rye," \u2014 "),Xj=n(Rye,"A",{href:!0});var jnt=s(Xj);E3o=r(jnt,"XLMRobertaForCausalLM"),jnt.forEach(t),C3o=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),w3o=i(Q),A2=n(Q,"LI",{});var Pye=s(A2);Wde=n(Pye,"STRONG",{});var Dnt=s(Wde);A3o=r(Dnt,"xlm-roberta-xl"),Dnt.forEach(t),y3o=r(Pye," \u2014 "),zj=n(Pye,"A",{href:!0});var Gnt=s(zj);L3o=r(Gnt,"XLMRobertaXLForCausalLM"),Gnt.forEach(t),x3o=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),$3o=i(Q),y2=n(Q,"LI",{});var Bye=s(y2);Qde=n(Bye,"STRONG",{});var Ont=s(Qde);k3o=r(Ont,"xlnet"),Ont.forEach(t),S3o=r(Bye," \u2014 "),Wj=n(Bye,"A",{href:!0});var Vnt=s(Wj);R3o=r(Vnt,"XLNetLMHeadModel"),Vnt.forEach(t),P3o=r(Bye," (XLNet model)"),Bye.forEach(t),Q.forEach(t),B3o=i(ta),L2=n(ta,"P",{});var Iye=s(L2);I3o=r(Iye,"The model is set in evaluation mode by default using "),Hde=n(Iye,"CODE",{});var Xnt=s(Hde);q3o=r(Xnt,"model.eval()"),Xnt.forEach(t),N3o=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(Iye,"CODE",{});var znt=s(Ude);j3o=r(znt,"model.train()"),znt.forEach(t),Iye.forEach(t),D3o=i(ta),T(x2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Yqe=i(f),Pi=n(f,"H2",{class:!0});var oDe=s(Pi);$2=n(oDe,"A",{id:!0,class:!0,href:!0});var Wnt=s($2);Jde=n(Wnt,"SPAN",{});var Qnt=s(Jde);T(dA.$$.fragment,Qnt),Qnt.forEach(t),Wnt.forEach(t),G3o=i(oDe),Yde=n(oDe,"SPAN",{});var Hnt=s(Yde);O3o=r(Hnt,"AutoModelForMaskedLM"),Hnt.forEach(t),oDe.forEach(t),Kqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(cA.$$.fragment,Xs),V3o=i(Xs),Bi=n(Xs,"P",{});var fZ=s(Bi);X3o=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qj=n(fZ,"A",{href:!0});var Unt=s(Qj);z3o=r(Unt,"from_pretrained()"),Unt.forEach(t),W3o=r(fZ," class method or the "),Hj=n(fZ,"A",{href:!0});var Jnt=s(Hj);Q3o=r(Jnt,"from_config()"),Jnt.forEach(t),H3o=r(fZ,` class
method.`),fZ.forEach(t),U3o=i(Xs),fA=n(Xs,"P",{});var rDe=s(fA);J3o=r(rDe,"This class cannot be instantiated directly using "),Kde=n(rDe,"CODE",{});var Ynt=s(Kde);Y3o=r(Ynt,"__init__()"),Ynt.forEach(t),K3o=r(rDe," (throws an error)."),rDe.forEach(t),Z3o=i(Xs),st=n(Xs,"DIV",{class:!0});var S3=s(st);T(mA.$$.fragment,S3),ewo=i(S3),Zde=n(S3,"P",{});var Knt=s(Zde);owo=r(Knt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Knt.forEach(t),rwo=i(S3),Ii=n(S3,"P",{});var mZ=s(Ii);two=r(mZ,`Note:
Loading a model from its configuration file does `),ece=n(mZ,"STRONG",{});var Znt=s(ece);awo=r(Znt,"not"),Znt.forEach(t),nwo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(mZ,"A",{href:!0});var est=s(Uj);swo=r(est,"from_pretrained()"),est.forEach(t),lwo=r(mZ," to load the model weights."),mZ.forEach(t),iwo=i(S3),T(k2.$$.fragment,S3),S3.forEach(t),dwo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(gA.$$.fragment,aa),cwo=i(aa),oce=n(aa,"P",{});var ost=s(oce);fwo=r(ost,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ost.forEach(t),mwo=i(aa),ka=n(aa,"P",{});var R3=s(ka);gwo=r(R3,"The model class to instantiate is selected based on the "),rce=n(R3,"CODE",{});var rst=s(rce);hwo=r(rst,"model_type"),rst.forEach(t),pwo=r(R3,` property of the config object (either
passed as an argument or loaded from `),tce=n(R3,"CODE",{});var tst=s(tce);_wo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),uwo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(R3,"CODE",{});var ast=s(ace);bwo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),vwo=r(R3,":"),R3.forEach(t),Fwo=i(aa),W=n(aa,"UL",{});var H=s(W);S2=n(H,"LI",{});var qye=s(S2);nce=n(qye,"STRONG",{});var nst=s(nce);Two=r(nst,"albert"),nst.forEach(t),Mwo=r(qye," \u2014 "),Jj=n(qye,"A",{href:!0});var sst=s(Jj);Ewo=r(sst,"AlbertForMaskedLM"),sst.forEach(t),Cwo=r(qye," (ALBERT model)"),qye.forEach(t),wwo=i(H),R2=n(H,"LI",{});var Nye=s(R2);sce=n(Nye,"STRONG",{});var lst=s(sce);Awo=r(lst,"bart"),lst.forEach(t),ywo=r(Nye," \u2014 "),Yj=n(Nye,"A",{href:!0});var ist=s(Yj);Lwo=r(ist,"BartForConditionalGeneration"),ist.forEach(t),xwo=r(Nye," (BART model)"),Nye.forEach(t),$wo=i(H),P2=n(H,"LI",{});var jye=s(P2);lce=n(jye,"STRONG",{});var dst=s(lce);kwo=r(dst,"bert"),dst.forEach(t),Swo=r(jye," \u2014 "),Kj=n(jye,"A",{href:!0});var cst=s(Kj);Rwo=r(cst,"BertForMaskedLM"),cst.forEach(t),Pwo=r(jye," (BERT model)"),jye.forEach(t),Bwo=i(H),B2=n(H,"LI",{});var Dye=s(B2);ice=n(Dye,"STRONG",{});var fst=s(ice);Iwo=r(fst,"big_bird"),fst.forEach(t),qwo=r(Dye," \u2014 "),Zj=n(Dye,"A",{href:!0});var mst=s(Zj);Nwo=r(mst,"BigBirdForMaskedLM"),mst.forEach(t),jwo=r(Dye," (BigBird model)"),Dye.forEach(t),Dwo=i(H),I2=n(H,"LI",{});var Gye=s(I2);dce=n(Gye,"STRONG",{});var gst=s(dce);Gwo=r(gst,"camembert"),gst.forEach(t),Owo=r(Gye," \u2014 "),eD=n(Gye,"A",{href:!0});var hst=s(eD);Vwo=r(hst,"CamembertForMaskedLM"),hst.forEach(t),Xwo=r(Gye," (CamemBERT model)"),Gye.forEach(t),zwo=i(H),q2=n(H,"LI",{});var Oye=s(q2);cce=n(Oye,"STRONG",{});var pst=s(cce);Wwo=r(pst,"convbert"),pst.forEach(t),Qwo=r(Oye," \u2014 "),oD=n(Oye,"A",{href:!0});var _st=s(oD);Hwo=r(_st,"ConvBertForMaskedLM"),_st.forEach(t),Uwo=r(Oye," (ConvBERT model)"),Oye.forEach(t),Jwo=i(H),N2=n(H,"LI",{});var Vye=s(N2);fce=n(Vye,"STRONG",{});var ust=s(fce);Ywo=r(ust,"data2vec-text"),ust.forEach(t),Kwo=r(Vye," \u2014 "),rD=n(Vye,"A",{href:!0});var bst=s(rD);Zwo=r(bst,"Data2VecTextForMaskedLM"),bst.forEach(t),e0o=r(Vye," (Data2VecText model)"),Vye.forEach(t),o0o=i(H),j2=n(H,"LI",{});var Xye=s(j2);mce=n(Xye,"STRONG",{});var vst=s(mce);r0o=r(vst,"deberta"),vst.forEach(t),t0o=r(Xye," \u2014 "),tD=n(Xye,"A",{href:!0});var Fst=s(tD);a0o=r(Fst,"DebertaForMaskedLM"),Fst.forEach(t),n0o=r(Xye," (DeBERTa model)"),Xye.forEach(t),s0o=i(H),D2=n(H,"LI",{});var zye=s(D2);gce=n(zye,"STRONG",{});var Tst=s(gce);l0o=r(Tst,"deberta-v2"),Tst.forEach(t),i0o=r(zye," \u2014 "),aD=n(zye,"A",{href:!0});var Mst=s(aD);d0o=r(Mst,"DebertaV2ForMaskedLM"),Mst.forEach(t),c0o=r(zye," (DeBERTa-v2 model)"),zye.forEach(t),f0o=i(H),G2=n(H,"LI",{});var Wye=s(G2);hce=n(Wye,"STRONG",{});var Est=s(hce);m0o=r(Est,"distilbert"),Est.forEach(t),g0o=r(Wye," \u2014 "),nD=n(Wye,"A",{href:!0});var Cst=s(nD);h0o=r(Cst,"DistilBertForMaskedLM"),Cst.forEach(t),p0o=r(Wye," (DistilBERT model)"),Wye.forEach(t),_0o=i(H),O2=n(H,"LI",{});var Qye=s(O2);pce=n(Qye,"STRONG",{});var wst=s(pce);u0o=r(wst,"electra"),wst.forEach(t),b0o=r(Qye," \u2014 "),sD=n(Qye,"A",{href:!0});var Ast=s(sD);v0o=r(Ast,"ElectraForMaskedLM"),Ast.forEach(t),F0o=r(Qye," (ELECTRA model)"),Qye.forEach(t),T0o=i(H),V2=n(H,"LI",{});var Hye=s(V2);_ce=n(Hye,"STRONG",{});var yst=s(_ce);M0o=r(yst,"flaubert"),yst.forEach(t),E0o=r(Hye," \u2014 "),lD=n(Hye,"A",{href:!0});var Lst=s(lD);C0o=r(Lst,"FlaubertWithLMHeadModel"),Lst.forEach(t),w0o=r(Hye," (FlauBERT model)"),Hye.forEach(t),A0o=i(H),X2=n(H,"LI",{});var Uye=s(X2);uce=n(Uye,"STRONG",{});var xst=s(uce);y0o=r(xst,"fnet"),xst.forEach(t),L0o=r(Uye," \u2014 "),iD=n(Uye,"A",{href:!0});var $st=s(iD);x0o=r($st,"FNetForMaskedLM"),$st.forEach(t),$0o=r(Uye," (FNet model)"),Uye.forEach(t),k0o=i(H),z2=n(H,"LI",{});var Jye=s(z2);bce=n(Jye,"STRONG",{});var kst=s(bce);S0o=r(kst,"funnel"),kst.forEach(t),R0o=r(Jye," \u2014 "),dD=n(Jye,"A",{href:!0});var Sst=s(dD);P0o=r(Sst,"FunnelForMaskedLM"),Sst.forEach(t),B0o=r(Jye," (Funnel Transformer model)"),Jye.forEach(t),I0o=i(H),W2=n(H,"LI",{});var Yye=s(W2);vce=n(Yye,"STRONG",{});var Rst=s(vce);q0o=r(Rst,"ibert"),Rst.forEach(t),N0o=r(Yye," \u2014 "),cD=n(Yye,"A",{href:!0});var Pst=s(cD);j0o=r(Pst,"IBertForMaskedLM"),Pst.forEach(t),D0o=r(Yye," (I-BERT model)"),Yye.forEach(t),G0o=i(H),Q2=n(H,"LI",{});var Kye=s(Q2);Fce=n(Kye,"STRONG",{});var Bst=s(Fce);O0o=r(Bst,"layoutlm"),Bst.forEach(t),V0o=r(Kye," \u2014 "),fD=n(Kye,"A",{href:!0});var Ist=s(fD);X0o=r(Ist,"LayoutLMForMaskedLM"),Ist.forEach(t),z0o=r(Kye," (LayoutLM model)"),Kye.forEach(t),W0o=i(H),H2=n(H,"LI",{});var Zye=s(H2);Tce=n(Zye,"STRONG",{});var qst=s(Tce);Q0o=r(qst,"longformer"),qst.forEach(t),H0o=r(Zye," \u2014 "),mD=n(Zye,"A",{href:!0});var Nst=s(mD);U0o=r(Nst,"LongformerForMaskedLM"),Nst.forEach(t),J0o=r(Zye," (Longformer model)"),Zye.forEach(t),Y0o=i(H),U2=n(H,"LI",{});var eLe=s(U2);Mce=n(eLe,"STRONG",{});var jst=s(Mce);K0o=r(jst,"mbart"),jst.forEach(t),Z0o=r(eLe," \u2014 "),gD=n(eLe,"A",{href:!0});var Dst=s(gD);eAo=r(Dst,"MBartForConditionalGeneration"),Dst.forEach(t),oAo=r(eLe," (mBART model)"),eLe.forEach(t),rAo=i(H),J2=n(H,"LI",{});var oLe=s(J2);Ece=n(oLe,"STRONG",{});var Gst=s(Ece);tAo=r(Gst,"megatron-bert"),Gst.forEach(t),aAo=r(oLe," \u2014 "),hD=n(oLe,"A",{href:!0});var Ost=s(hD);nAo=r(Ost,"MegatronBertForMaskedLM"),Ost.forEach(t),sAo=r(oLe," (MegatronBert model)"),oLe.forEach(t),lAo=i(H),Y2=n(H,"LI",{});var rLe=s(Y2);Cce=n(rLe,"STRONG",{});var Vst=s(Cce);iAo=r(Vst,"mobilebert"),Vst.forEach(t),dAo=r(rLe," \u2014 "),pD=n(rLe,"A",{href:!0});var Xst=s(pD);cAo=r(Xst,"MobileBertForMaskedLM"),Xst.forEach(t),fAo=r(rLe," (MobileBERT model)"),rLe.forEach(t),mAo=i(H),K2=n(H,"LI",{});var tLe=s(K2);wce=n(tLe,"STRONG",{});var zst=s(wce);gAo=r(zst,"mpnet"),zst.forEach(t),hAo=r(tLe," \u2014 "),_D=n(tLe,"A",{href:!0});var Wst=s(_D);pAo=r(Wst,"MPNetForMaskedLM"),Wst.forEach(t),_Ao=r(tLe," (MPNet model)"),tLe.forEach(t),uAo=i(H),Z2=n(H,"LI",{});var aLe=s(Z2);Ace=n(aLe,"STRONG",{});var Qst=s(Ace);bAo=r(Qst,"nystromformer"),Qst.forEach(t),vAo=r(aLe," \u2014 "),uD=n(aLe,"A",{href:!0});var Hst=s(uD);FAo=r(Hst,"NystromformerForMaskedLM"),Hst.forEach(t),TAo=r(aLe," (Nystromformer model)"),aLe.forEach(t),MAo=i(H),e1=n(H,"LI",{});var nLe=s(e1);yce=n(nLe,"STRONG",{});var Ust=s(yce);EAo=r(Ust,"perceiver"),Ust.forEach(t),CAo=r(nLe," \u2014 "),bD=n(nLe,"A",{href:!0});var Jst=s(bD);wAo=r(Jst,"PerceiverForMaskedLM"),Jst.forEach(t),AAo=r(nLe," (Perceiver model)"),nLe.forEach(t),yAo=i(H),o1=n(H,"LI",{});var sLe=s(o1);Lce=n(sLe,"STRONG",{});var Yst=s(Lce);LAo=r(Yst,"qdqbert"),Yst.forEach(t),xAo=r(sLe," \u2014 "),vD=n(sLe,"A",{href:!0});var Kst=s(vD);$Ao=r(Kst,"QDQBertForMaskedLM"),Kst.forEach(t),kAo=r(sLe," (QDQBert model)"),sLe.forEach(t),SAo=i(H),r1=n(H,"LI",{});var lLe=s(r1);xce=n(lLe,"STRONG",{});var Zst=s(xce);RAo=r(Zst,"reformer"),Zst.forEach(t),PAo=r(lLe," \u2014 "),FD=n(lLe,"A",{href:!0});var elt=s(FD);BAo=r(elt,"ReformerForMaskedLM"),elt.forEach(t),IAo=r(lLe," (Reformer model)"),lLe.forEach(t),qAo=i(H),t1=n(H,"LI",{});var iLe=s(t1);$ce=n(iLe,"STRONG",{});var olt=s($ce);NAo=r(olt,"rembert"),olt.forEach(t),jAo=r(iLe," \u2014 "),TD=n(iLe,"A",{href:!0});var rlt=s(TD);DAo=r(rlt,"RemBertForMaskedLM"),rlt.forEach(t),GAo=r(iLe," (RemBERT model)"),iLe.forEach(t),OAo=i(H),a1=n(H,"LI",{});var dLe=s(a1);kce=n(dLe,"STRONG",{});var tlt=s(kce);VAo=r(tlt,"roberta"),tlt.forEach(t),XAo=r(dLe," \u2014 "),MD=n(dLe,"A",{href:!0});var alt=s(MD);zAo=r(alt,"RobertaForMaskedLM"),alt.forEach(t),WAo=r(dLe," (RoBERTa model)"),dLe.forEach(t),QAo=i(H),n1=n(H,"LI",{});var cLe=s(n1);Sce=n(cLe,"STRONG",{});var nlt=s(Sce);HAo=r(nlt,"roformer"),nlt.forEach(t),UAo=r(cLe," \u2014 "),ED=n(cLe,"A",{href:!0});var slt=s(ED);JAo=r(slt,"RoFormerForMaskedLM"),slt.forEach(t),YAo=r(cLe," (RoFormer model)"),cLe.forEach(t),KAo=i(H),s1=n(H,"LI",{});var fLe=s(s1);Rce=n(fLe,"STRONG",{});var llt=s(Rce);ZAo=r(llt,"squeezebert"),llt.forEach(t),eyo=r(fLe," \u2014 "),CD=n(fLe,"A",{href:!0});var ilt=s(CD);oyo=r(ilt,"SqueezeBertForMaskedLM"),ilt.forEach(t),ryo=r(fLe," (SqueezeBERT model)"),fLe.forEach(t),tyo=i(H),l1=n(H,"LI",{});var mLe=s(l1);Pce=n(mLe,"STRONG",{});var dlt=s(Pce);ayo=r(dlt,"tapas"),dlt.forEach(t),nyo=r(mLe," \u2014 "),wD=n(mLe,"A",{href:!0});var clt=s(wD);syo=r(clt,"TapasForMaskedLM"),clt.forEach(t),lyo=r(mLe," (TAPAS model)"),mLe.forEach(t),iyo=i(H),i1=n(H,"LI",{});var gLe=s(i1);Bce=n(gLe,"STRONG",{});var flt=s(Bce);dyo=r(flt,"wav2vec2"),flt.forEach(t),cyo=r(gLe," \u2014 "),Ice=n(gLe,"CODE",{});var mlt=s(Ice);fyo=r(mlt,"Wav2Vec2ForMaskedLM"),mlt.forEach(t),myo=r(gLe," (Wav2Vec2 model)"),gLe.forEach(t),gyo=i(H),d1=n(H,"LI",{});var hLe=s(d1);qce=n(hLe,"STRONG",{});var glt=s(qce);hyo=r(glt,"xlm"),glt.forEach(t),pyo=r(hLe," \u2014 "),AD=n(hLe,"A",{href:!0});var hlt=s(AD);_yo=r(hlt,"XLMWithLMHeadModel"),hlt.forEach(t),uyo=r(hLe," (XLM model)"),hLe.forEach(t),byo=i(H),c1=n(H,"LI",{});var pLe=s(c1);Nce=n(pLe,"STRONG",{});var plt=s(Nce);vyo=r(plt,"xlm-roberta"),plt.forEach(t),Fyo=r(pLe," \u2014 "),yD=n(pLe,"A",{href:!0});var _lt=s(yD);Tyo=r(_lt,"XLMRobertaForMaskedLM"),_lt.forEach(t),Myo=r(pLe," (XLM-RoBERTa model)"),pLe.forEach(t),Eyo=i(H),f1=n(H,"LI",{});var _Le=s(f1);jce=n(_Le,"STRONG",{});var ult=s(jce);Cyo=r(ult,"xlm-roberta-xl"),ult.forEach(t),wyo=r(_Le," \u2014 "),LD=n(_Le,"A",{href:!0});var blt=s(LD);Ayo=r(blt,"XLMRobertaXLForMaskedLM"),blt.forEach(t),yyo=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),Lyo=i(H),m1=n(H,"LI",{});var uLe=s(m1);Dce=n(uLe,"STRONG",{});var vlt=s(Dce);xyo=r(vlt,"yoso"),vlt.forEach(t),$yo=r(uLe," \u2014 "),xD=n(uLe,"A",{href:!0});var Flt=s(xD);kyo=r(Flt,"YosoForMaskedLM"),Flt.forEach(t),Syo=r(uLe," (YOSO model)"),uLe.forEach(t),H.forEach(t),Ryo=i(aa),g1=n(aa,"P",{});var bLe=s(g1);Pyo=r(bLe,"The model is set in evaluation mode by default using "),Gce=n(bLe,"CODE",{});var Tlt=s(Gce);Byo=r(Tlt,"model.eval()"),Tlt.forEach(t),Iyo=r(bLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(bLe,"CODE",{});var Mlt=s(Oce);qyo=r(Mlt,"model.train()"),Mlt.forEach(t),bLe.forEach(t),Nyo=i(aa),T(h1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Zqe=i(f),qi=n(f,"H2",{class:!0});var tDe=s(qi);p1=n(tDe,"A",{id:!0,class:!0,href:!0});var Elt=s(p1);Vce=n(Elt,"SPAN",{});var Clt=s(Vce);T(hA.$$.fragment,Clt),Clt.forEach(t),Elt.forEach(t),jyo=i(tDe),Xce=n(tDe,"SPAN",{});var wlt=s(Xce);Dyo=r(wlt,"AutoModelForSeq2SeqLM"),wlt.forEach(t),tDe.forEach(t),eNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(pA.$$.fragment,zs),Gyo=i(zs),Ni=n(zs,"P",{});var gZ=s(Ni);Oyo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$D=n(gZ,"A",{href:!0});var Alt=s($D);Vyo=r(Alt,"from_pretrained()"),Alt.forEach(t),Xyo=r(gZ," class method or the "),kD=n(gZ,"A",{href:!0});var ylt=s(kD);zyo=r(ylt,"from_config()"),ylt.forEach(t),Wyo=r(gZ,` class
method.`),gZ.forEach(t),Qyo=i(zs),_A=n(zs,"P",{});var aDe=s(_A);Hyo=r(aDe,"This class cannot be instantiated directly using "),zce=n(aDe,"CODE",{});var Llt=s(zce);Uyo=r(Llt,"__init__()"),Llt.forEach(t),Jyo=r(aDe," (throws an error)."),aDe.forEach(t),Yyo=i(zs),lt=n(zs,"DIV",{class:!0});var P3=s(lt);T(uA.$$.fragment,P3),Kyo=i(P3),Wce=n(P3,"P",{});var xlt=s(Wce);Zyo=r(xlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xlt.forEach(t),eLo=i(P3),ji=n(P3,"P",{});var hZ=s(ji);oLo=r(hZ,`Note:
Loading a model from its configuration file does `),Qce=n(hZ,"STRONG",{});var $lt=s(Qce);rLo=r($lt,"not"),$lt.forEach(t),tLo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(hZ,"A",{href:!0});var klt=s(SD);aLo=r(klt,"from_pretrained()"),klt.forEach(t),nLo=r(hZ," to load the model weights."),hZ.forEach(t),sLo=i(P3),T(_1.$$.fragment,P3),P3.forEach(t),lLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(bA.$$.fragment,na),iLo=i(na),Hce=n(na,"P",{});var Slt=s(Hce);dLo=r(Slt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Slt.forEach(t),cLo=i(na),Sa=n(na,"P",{});var B3=s(Sa);fLo=r(B3,"The model class to instantiate is selected based on the "),Uce=n(B3,"CODE",{});var Rlt=s(Uce);mLo=r(Rlt,"model_type"),Rlt.forEach(t),gLo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Jce=n(B3,"CODE",{});var Plt=s(Jce);hLo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),pLo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(B3,"CODE",{});var Blt=s(Yce);_Lo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),uLo=r(B3,":"),B3.forEach(t),bLo=i(na),he=n(na,"UL",{});var ue=s(he);u1=n(ue,"LI",{});var vLe=s(u1);Kce=n(vLe,"STRONG",{});var Ilt=s(Kce);vLo=r(Ilt,"bart"),Ilt.forEach(t),FLo=r(vLe," \u2014 "),RD=n(vLe,"A",{href:!0});var qlt=s(RD);TLo=r(qlt,"BartForConditionalGeneration"),qlt.forEach(t),MLo=r(vLe," (BART model)"),vLe.forEach(t),ELo=i(ue),b1=n(ue,"LI",{});var FLe=s(b1);Zce=n(FLe,"STRONG",{});var Nlt=s(Zce);CLo=r(Nlt,"bigbird_pegasus"),Nlt.forEach(t),wLo=r(FLe," \u2014 "),PD=n(FLe,"A",{href:!0});var jlt=s(PD);ALo=r(jlt,"BigBirdPegasusForConditionalGeneration"),jlt.forEach(t),yLo=r(FLe," (BigBirdPegasus model)"),FLe.forEach(t),LLo=i(ue),v1=n(ue,"LI",{});var TLe=s(v1);efe=n(TLe,"STRONG",{});var Dlt=s(efe);xLo=r(Dlt,"blenderbot"),Dlt.forEach(t),$Lo=r(TLe," \u2014 "),BD=n(TLe,"A",{href:!0});var Glt=s(BD);kLo=r(Glt,"BlenderbotForConditionalGeneration"),Glt.forEach(t),SLo=r(TLe," (Blenderbot model)"),TLe.forEach(t),RLo=i(ue),F1=n(ue,"LI",{});var MLe=s(F1);ofe=n(MLe,"STRONG",{});var Olt=s(ofe);PLo=r(Olt,"blenderbot-small"),Olt.forEach(t),BLo=r(MLe," \u2014 "),ID=n(MLe,"A",{href:!0});var Vlt=s(ID);ILo=r(Vlt,"BlenderbotSmallForConditionalGeneration"),Vlt.forEach(t),qLo=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),NLo=i(ue),T1=n(ue,"LI",{});var ELe=s(T1);rfe=n(ELe,"STRONG",{});var Xlt=s(rfe);jLo=r(Xlt,"encoder-decoder"),Xlt.forEach(t),DLo=r(ELe," \u2014 "),qD=n(ELe,"A",{href:!0});var zlt=s(qD);GLo=r(zlt,"EncoderDecoderModel"),zlt.forEach(t),OLo=r(ELe," (Encoder decoder model)"),ELe.forEach(t),VLo=i(ue),M1=n(ue,"LI",{});var CLe=s(M1);tfe=n(CLe,"STRONG",{});var Wlt=s(tfe);XLo=r(Wlt,"fsmt"),Wlt.forEach(t),zLo=r(CLe," \u2014 "),ND=n(CLe,"A",{href:!0});var Qlt=s(ND);WLo=r(Qlt,"FSMTForConditionalGeneration"),Qlt.forEach(t),QLo=r(CLe," (FairSeq Machine-Translation model)"),CLe.forEach(t),HLo=i(ue),E1=n(ue,"LI",{});var wLe=s(E1);afe=n(wLe,"STRONG",{});var Hlt=s(afe);ULo=r(Hlt,"led"),Hlt.forEach(t),JLo=r(wLe," \u2014 "),jD=n(wLe,"A",{href:!0});var Ult=s(jD);YLo=r(Ult,"LEDForConditionalGeneration"),Ult.forEach(t),KLo=r(wLe," (LED model)"),wLe.forEach(t),ZLo=i(ue),C1=n(ue,"LI",{});var ALe=s(C1);nfe=n(ALe,"STRONG",{});var Jlt=s(nfe);e8o=r(Jlt,"longt5"),Jlt.forEach(t),o8o=r(ALe," \u2014 "),DD=n(ALe,"A",{href:!0});var Ylt=s(DD);r8o=r(Ylt,"LongT5ForConditionalGeneration"),Ylt.forEach(t),t8o=r(ALe," (LongT5 model)"),ALe.forEach(t),a8o=i(ue),w1=n(ue,"LI",{});var yLe=s(w1);sfe=n(yLe,"STRONG",{});var Klt=s(sfe);n8o=r(Klt,"m2m_100"),Klt.forEach(t),s8o=r(yLe," \u2014 "),GD=n(yLe,"A",{href:!0});var Zlt=s(GD);l8o=r(Zlt,"M2M100ForConditionalGeneration"),Zlt.forEach(t),i8o=r(yLe," (M2M100 model)"),yLe.forEach(t),d8o=i(ue),A1=n(ue,"LI",{});var LLe=s(A1);lfe=n(LLe,"STRONG",{});var eit=s(lfe);c8o=r(eit,"marian"),eit.forEach(t),f8o=r(LLe," \u2014 "),OD=n(LLe,"A",{href:!0});var oit=s(OD);m8o=r(oit,"MarianMTModel"),oit.forEach(t),g8o=r(LLe," (Marian model)"),LLe.forEach(t),h8o=i(ue),y1=n(ue,"LI",{});var xLe=s(y1);ife=n(xLe,"STRONG",{});var rit=s(ife);p8o=r(rit,"mbart"),rit.forEach(t),_8o=r(xLe," \u2014 "),VD=n(xLe,"A",{href:!0});var tit=s(VD);u8o=r(tit,"MBartForConditionalGeneration"),tit.forEach(t),b8o=r(xLe," (mBART model)"),xLe.forEach(t),v8o=i(ue),L1=n(ue,"LI",{});var $Le=s(L1);dfe=n($Le,"STRONG",{});var ait=s(dfe);F8o=r(ait,"mt5"),ait.forEach(t),T8o=r($Le," \u2014 "),XD=n($Le,"A",{href:!0});var nit=s(XD);M8o=r(nit,"MT5ForConditionalGeneration"),nit.forEach(t),E8o=r($Le," (mT5 model)"),$Le.forEach(t),C8o=i(ue),x1=n(ue,"LI",{});var kLe=s(x1);cfe=n(kLe,"STRONG",{});var sit=s(cfe);w8o=r(sit,"pegasus"),sit.forEach(t),A8o=r(kLe," \u2014 "),zD=n(kLe,"A",{href:!0});var lit=s(zD);y8o=r(lit,"PegasusForConditionalGeneration"),lit.forEach(t),L8o=r(kLe," (Pegasus model)"),kLe.forEach(t),x8o=i(ue),$1=n(ue,"LI",{});var SLe=s($1);ffe=n(SLe,"STRONG",{});var iit=s(ffe);$8o=r(iit,"plbart"),iit.forEach(t),k8o=r(SLe," \u2014 "),WD=n(SLe,"A",{href:!0});var dit=s(WD);S8o=r(dit,"PLBartForConditionalGeneration"),dit.forEach(t),R8o=r(SLe," (PLBart model)"),SLe.forEach(t),P8o=i(ue),k1=n(ue,"LI",{});var RLe=s(k1);mfe=n(RLe,"STRONG",{});var cit=s(mfe);B8o=r(cit,"prophetnet"),cit.forEach(t),I8o=r(RLe," \u2014 "),QD=n(RLe,"A",{href:!0});var fit=s(QD);q8o=r(fit,"ProphetNetForConditionalGeneration"),fit.forEach(t),N8o=r(RLe," (ProphetNet model)"),RLe.forEach(t),j8o=i(ue),S1=n(ue,"LI",{});var PLe=s(S1);gfe=n(PLe,"STRONG",{});var mit=s(gfe);D8o=r(mit,"t5"),mit.forEach(t),G8o=r(PLe," \u2014 "),HD=n(PLe,"A",{href:!0});var git=s(HD);O8o=r(git,"T5ForConditionalGeneration"),git.forEach(t),V8o=r(PLe," (T5 model)"),PLe.forEach(t),X8o=i(ue),R1=n(ue,"LI",{});var BLe=s(R1);hfe=n(BLe,"STRONG",{});var hit=s(hfe);z8o=r(hit,"xlm-prophetnet"),hit.forEach(t),W8o=r(BLe," \u2014 "),UD=n(BLe,"A",{href:!0});var pit=s(UD);Q8o=r(pit,"XLMProphetNetForConditionalGeneration"),pit.forEach(t),H8o=r(BLe," (XLMProphetNet model)"),BLe.forEach(t),ue.forEach(t),U8o=i(na),P1=n(na,"P",{});var ILe=s(P1);J8o=r(ILe,"The model is set in evaluation mode by default using "),pfe=n(ILe,"CODE",{});var _it=s(pfe);Y8o=r(_it,"model.eval()"),_it.forEach(t),K8o=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(ILe,"CODE",{});var uit=s(_fe);Z8o=r(uit,"model.train()"),uit.forEach(t),ILe.forEach(t),exo=i(na),T(B1.$$.fragment,na),na.forEach(t),zs.forEach(t),oNe=i(f),Di=n(f,"H2",{class:!0});var nDe=s(Di);I1=n(nDe,"A",{id:!0,class:!0,href:!0});var bit=s(I1);ufe=n(bit,"SPAN",{});var vit=s(ufe);T(vA.$$.fragment,vit),vit.forEach(t),bit.forEach(t),oxo=i(nDe),bfe=n(nDe,"SPAN",{});var Fit=s(bfe);rxo=r(Fit,"AutoModelForSequenceClassification"),Fit.forEach(t),nDe.forEach(t),rNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(FA.$$.fragment,Ws),txo=i(Ws),Gi=n(Ws,"P",{});var pZ=s(Gi);axo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=n(pZ,"A",{href:!0});var Tit=s(JD);nxo=r(Tit,"from_pretrained()"),Tit.forEach(t),sxo=r(pZ," class method or the "),YD=n(pZ,"A",{href:!0});var Mit=s(YD);lxo=r(Mit,"from_config()"),Mit.forEach(t),ixo=r(pZ,` class
method.`),pZ.forEach(t),dxo=i(Ws),TA=n(Ws,"P",{});var sDe=s(TA);cxo=r(sDe,"This class cannot be instantiated directly using "),vfe=n(sDe,"CODE",{});var Eit=s(vfe);fxo=r(Eit,"__init__()"),Eit.forEach(t),mxo=r(sDe," (throws an error)."),sDe.forEach(t),gxo=i(Ws),it=n(Ws,"DIV",{class:!0});var I3=s(it);T(MA.$$.fragment,I3),hxo=i(I3),Ffe=n(I3,"P",{});var Cit=s(Ffe);pxo=r(Cit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cit.forEach(t),_xo=i(I3),Oi=n(I3,"P",{});var _Z=s(Oi);uxo=r(_Z,`Note:
Loading a model from its configuration file does `),Tfe=n(_Z,"STRONG",{});var wit=s(Tfe);bxo=r(wit,"not"),wit.forEach(t),vxo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(_Z,"A",{href:!0});var Ait=s(KD);Fxo=r(Ait,"from_pretrained()"),Ait.forEach(t),Txo=r(_Z," to load the model weights."),_Z.forEach(t),Mxo=i(I3),T(q1.$$.fragment,I3),I3.forEach(t),Exo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(EA.$$.fragment,sa),Cxo=i(sa),Mfe=n(sa,"P",{});var yit=s(Mfe);wxo=r(yit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yit.forEach(t),Axo=i(sa),Ra=n(sa,"P",{});var q3=s(Ra);yxo=r(q3,"The model class to instantiate is selected based on the "),Efe=n(q3,"CODE",{});var Lit=s(Efe);Lxo=r(Lit,"model_type"),Lit.forEach(t),xxo=r(q3,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(q3,"CODE",{});var xit=s(Cfe);$xo=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),kxo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(q3,"CODE",{});var $it=s(wfe);Sxo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),Rxo=r(q3,":"),q3.forEach(t),Pxo=i(sa),q=n(sa,"UL",{});var j=s(q);N1=n(j,"LI",{});var qLe=s(N1);Afe=n(qLe,"STRONG",{});var kit=s(Afe);Bxo=r(kit,"albert"),kit.forEach(t),Ixo=r(qLe," \u2014 "),ZD=n(qLe,"A",{href:!0});var Sit=s(ZD);qxo=r(Sit,"AlbertForSequenceClassification"),Sit.forEach(t),Nxo=r(qLe," (ALBERT model)"),qLe.forEach(t),jxo=i(j),j1=n(j,"LI",{});var NLe=s(j1);yfe=n(NLe,"STRONG",{});var Rit=s(yfe);Dxo=r(Rit,"bart"),Rit.forEach(t),Gxo=r(NLe," \u2014 "),eG=n(NLe,"A",{href:!0});var Pit=s(eG);Oxo=r(Pit,"BartForSequenceClassification"),Pit.forEach(t),Vxo=r(NLe," (BART model)"),NLe.forEach(t),Xxo=i(j),D1=n(j,"LI",{});var jLe=s(D1);Lfe=n(jLe,"STRONG",{});var Bit=s(Lfe);zxo=r(Bit,"bert"),Bit.forEach(t),Wxo=r(jLe," \u2014 "),oG=n(jLe,"A",{href:!0});var Iit=s(oG);Qxo=r(Iit,"BertForSequenceClassification"),Iit.forEach(t),Hxo=r(jLe," (BERT model)"),jLe.forEach(t),Uxo=i(j),G1=n(j,"LI",{});var DLe=s(G1);xfe=n(DLe,"STRONG",{});var qit=s(xfe);Jxo=r(qit,"big_bird"),qit.forEach(t),Yxo=r(DLe," \u2014 "),rG=n(DLe,"A",{href:!0});var Nit=s(rG);Kxo=r(Nit,"BigBirdForSequenceClassification"),Nit.forEach(t),Zxo=r(DLe," (BigBird model)"),DLe.forEach(t),e$o=i(j),O1=n(j,"LI",{});var GLe=s(O1);$fe=n(GLe,"STRONG",{});var jit=s($fe);o$o=r(jit,"bigbird_pegasus"),jit.forEach(t),r$o=r(GLe," \u2014 "),tG=n(GLe,"A",{href:!0});var Dit=s(tG);t$o=r(Dit,"BigBirdPegasusForSequenceClassification"),Dit.forEach(t),a$o=r(GLe," (BigBirdPegasus model)"),GLe.forEach(t),n$o=i(j),V1=n(j,"LI",{});var OLe=s(V1);kfe=n(OLe,"STRONG",{});var Git=s(kfe);s$o=r(Git,"camembert"),Git.forEach(t),l$o=r(OLe," \u2014 "),aG=n(OLe,"A",{href:!0});var Oit=s(aG);i$o=r(Oit,"CamembertForSequenceClassification"),Oit.forEach(t),d$o=r(OLe," (CamemBERT model)"),OLe.forEach(t),c$o=i(j),X1=n(j,"LI",{});var VLe=s(X1);Sfe=n(VLe,"STRONG",{});var Vit=s(Sfe);f$o=r(Vit,"canine"),Vit.forEach(t),m$o=r(VLe," \u2014 "),nG=n(VLe,"A",{href:!0});var Xit=s(nG);g$o=r(Xit,"CanineForSequenceClassification"),Xit.forEach(t),h$o=r(VLe," (Canine model)"),VLe.forEach(t),p$o=i(j),z1=n(j,"LI",{});var XLe=s(z1);Rfe=n(XLe,"STRONG",{});var zit=s(Rfe);_$o=r(zit,"convbert"),zit.forEach(t),u$o=r(XLe," \u2014 "),sG=n(XLe,"A",{href:!0});var Wit=s(sG);b$o=r(Wit,"ConvBertForSequenceClassification"),Wit.forEach(t),v$o=r(XLe," (ConvBERT model)"),XLe.forEach(t),F$o=i(j),W1=n(j,"LI",{});var zLe=s(W1);Pfe=n(zLe,"STRONG",{});var Qit=s(Pfe);T$o=r(Qit,"ctrl"),Qit.forEach(t),M$o=r(zLe," \u2014 "),lG=n(zLe,"A",{href:!0});var Hit=s(lG);E$o=r(Hit,"CTRLForSequenceClassification"),Hit.forEach(t),C$o=r(zLe," (CTRL model)"),zLe.forEach(t),w$o=i(j),Q1=n(j,"LI",{});var WLe=s(Q1);Bfe=n(WLe,"STRONG",{});var Uit=s(Bfe);A$o=r(Uit,"data2vec-text"),Uit.forEach(t),y$o=r(WLe," \u2014 "),iG=n(WLe,"A",{href:!0});var Jit=s(iG);L$o=r(Jit,"Data2VecTextForSequenceClassification"),Jit.forEach(t),x$o=r(WLe," (Data2VecText model)"),WLe.forEach(t),$$o=i(j),H1=n(j,"LI",{});var QLe=s(H1);Ife=n(QLe,"STRONG",{});var Yit=s(Ife);k$o=r(Yit,"deberta"),Yit.forEach(t),S$o=r(QLe," \u2014 "),dG=n(QLe,"A",{href:!0});var Kit=s(dG);R$o=r(Kit,"DebertaForSequenceClassification"),Kit.forEach(t),P$o=r(QLe," (DeBERTa model)"),QLe.forEach(t),B$o=i(j),U1=n(j,"LI",{});var HLe=s(U1);qfe=n(HLe,"STRONG",{});var Zit=s(qfe);I$o=r(Zit,"deberta-v2"),Zit.forEach(t),q$o=r(HLe," \u2014 "),cG=n(HLe,"A",{href:!0});var edt=s(cG);N$o=r(edt,"DebertaV2ForSequenceClassification"),edt.forEach(t),j$o=r(HLe," (DeBERTa-v2 model)"),HLe.forEach(t),D$o=i(j),J1=n(j,"LI",{});var ULe=s(J1);Nfe=n(ULe,"STRONG",{});var odt=s(Nfe);G$o=r(odt,"distilbert"),odt.forEach(t),O$o=r(ULe," \u2014 "),fG=n(ULe,"A",{href:!0});var rdt=s(fG);V$o=r(rdt,"DistilBertForSequenceClassification"),rdt.forEach(t),X$o=r(ULe," (DistilBERT model)"),ULe.forEach(t),z$o=i(j),Y1=n(j,"LI",{});var JLe=s(Y1);jfe=n(JLe,"STRONG",{});var tdt=s(jfe);W$o=r(tdt,"electra"),tdt.forEach(t),Q$o=r(JLe," \u2014 "),mG=n(JLe,"A",{href:!0});var adt=s(mG);H$o=r(adt,"ElectraForSequenceClassification"),adt.forEach(t),U$o=r(JLe," (ELECTRA model)"),JLe.forEach(t),J$o=i(j),K1=n(j,"LI",{});var YLe=s(K1);Dfe=n(YLe,"STRONG",{});var ndt=s(Dfe);Y$o=r(ndt,"flaubert"),ndt.forEach(t),K$o=r(YLe," \u2014 "),gG=n(YLe,"A",{href:!0});var sdt=s(gG);Z$o=r(sdt,"FlaubertForSequenceClassification"),sdt.forEach(t),eko=r(YLe," (FlauBERT model)"),YLe.forEach(t),oko=i(j),Z1=n(j,"LI",{});var KLe=s(Z1);Gfe=n(KLe,"STRONG",{});var ldt=s(Gfe);rko=r(ldt,"fnet"),ldt.forEach(t),tko=r(KLe," \u2014 "),hG=n(KLe,"A",{href:!0});var idt=s(hG);ako=r(idt,"FNetForSequenceClassification"),idt.forEach(t),nko=r(KLe," (FNet model)"),KLe.forEach(t),sko=i(j),eb=n(j,"LI",{});var ZLe=s(eb);Ofe=n(ZLe,"STRONG",{});var ddt=s(Ofe);lko=r(ddt,"funnel"),ddt.forEach(t),iko=r(ZLe," \u2014 "),pG=n(ZLe,"A",{href:!0});var cdt=s(pG);dko=r(cdt,"FunnelForSequenceClassification"),cdt.forEach(t),cko=r(ZLe," (Funnel Transformer model)"),ZLe.forEach(t),fko=i(j),ob=n(j,"LI",{});var e8e=s(ob);Vfe=n(e8e,"STRONG",{});var fdt=s(Vfe);mko=r(fdt,"gpt2"),fdt.forEach(t),gko=r(e8e," \u2014 "),_G=n(e8e,"A",{href:!0});var mdt=s(_G);hko=r(mdt,"GPT2ForSequenceClassification"),mdt.forEach(t),pko=r(e8e," (OpenAI GPT-2 model)"),e8e.forEach(t),_ko=i(j),rb=n(j,"LI",{});var o8e=s(rb);Xfe=n(o8e,"STRONG",{});var gdt=s(Xfe);uko=r(gdt,"gpt_neo"),gdt.forEach(t),bko=r(o8e," \u2014 "),uG=n(o8e,"A",{href:!0});var hdt=s(uG);vko=r(hdt,"GPTNeoForSequenceClassification"),hdt.forEach(t),Fko=r(o8e," (GPT Neo model)"),o8e.forEach(t),Tko=i(j),tb=n(j,"LI",{});var r8e=s(tb);zfe=n(r8e,"STRONG",{});var pdt=s(zfe);Mko=r(pdt,"gptj"),pdt.forEach(t),Eko=r(r8e," \u2014 "),bG=n(r8e,"A",{href:!0});var _dt=s(bG);Cko=r(_dt,"GPTJForSequenceClassification"),_dt.forEach(t),wko=r(r8e," (GPT-J model)"),r8e.forEach(t),Ako=i(j),ab=n(j,"LI",{});var t8e=s(ab);Wfe=n(t8e,"STRONG",{});var udt=s(Wfe);yko=r(udt,"ibert"),udt.forEach(t),Lko=r(t8e," \u2014 "),vG=n(t8e,"A",{href:!0});var bdt=s(vG);xko=r(bdt,"IBertForSequenceClassification"),bdt.forEach(t),$ko=r(t8e," (I-BERT model)"),t8e.forEach(t),kko=i(j),nb=n(j,"LI",{});var a8e=s(nb);Qfe=n(a8e,"STRONG",{});var vdt=s(Qfe);Sko=r(vdt,"layoutlm"),vdt.forEach(t),Rko=r(a8e," \u2014 "),FG=n(a8e,"A",{href:!0});var Fdt=s(FG);Pko=r(Fdt,"LayoutLMForSequenceClassification"),Fdt.forEach(t),Bko=r(a8e," (LayoutLM model)"),a8e.forEach(t),Iko=i(j),sb=n(j,"LI",{});var n8e=s(sb);Hfe=n(n8e,"STRONG",{});var Tdt=s(Hfe);qko=r(Tdt,"layoutlmv2"),Tdt.forEach(t),Nko=r(n8e," \u2014 "),TG=n(n8e,"A",{href:!0});var Mdt=s(TG);jko=r(Mdt,"LayoutLMv2ForSequenceClassification"),Mdt.forEach(t),Dko=r(n8e," (LayoutLMv2 model)"),n8e.forEach(t),Gko=i(j),lb=n(j,"LI",{});var s8e=s(lb);Ufe=n(s8e,"STRONG",{});var Edt=s(Ufe);Oko=r(Edt,"led"),Edt.forEach(t),Vko=r(s8e," \u2014 "),MG=n(s8e,"A",{href:!0});var Cdt=s(MG);Xko=r(Cdt,"LEDForSequenceClassification"),Cdt.forEach(t),zko=r(s8e," (LED model)"),s8e.forEach(t),Wko=i(j),ib=n(j,"LI",{});var l8e=s(ib);Jfe=n(l8e,"STRONG",{});var wdt=s(Jfe);Qko=r(wdt,"longformer"),wdt.forEach(t),Hko=r(l8e," \u2014 "),EG=n(l8e,"A",{href:!0});var Adt=s(EG);Uko=r(Adt,"LongformerForSequenceClassification"),Adt.forEach(t),Jko=r(l8e," (Longformer model)"),l8e.forEach(t),Yko=i(j),db=n(j,"LI",{});var i8e=s(db);Yfe=n(i8e,"STRONG",{});var ydt=s(Yfe);Kko=r(ydt,"mbart"),ydt.forEach(t),Zko=r(i8e," \u2014 "),CG=n(i8e,"A",{href:!0});var Ldt=s(CG);eSo=r(Ldt,"MBartForSequenceClassification"),Ldt.forEach(t),oSo=r(i8e," (mBART model)"),i8e.forEach(t),rSo=i(j),cb=n(j,"LI",{});var d8e=s(cb);Kfe=n(d8e,"STRONG",{});var xdt=s(Kfe);tSo=r(xdt,"megatron-bert"),xdt.forEach(t),aSo=r(d8e," \u2014 "),wG=n(d8e,"A",{href:!0});var $dt=s(wG);nSo=r($dt,"MegatronBertForSequenceClassification"),$dt.forEach(t),sSo=r(d8e," (MegatronBert model)"),d8e.forEach(t),lSo=i(j),fb=n(j,"LI",{});var c8e=s(fb);Zfe=n(c8e,"STRONG",{});var kdt=s(Zfe);iSo=r(kdt,"mobilebert"),kdt.forEach(t),dSo=r(c8e," \u2014 "),AG=n(c8e,"A",{href:!0});var Sdt=s(AG);cSo=r(Sdt,"MobileBertForSequenceClassification"),Sdt.forEach(t),fSo=r(c8e," (MobileBERT model)"),c8e.forEach(t),mSo=i(j),mb=n(j,"LI",{});var f8e=s(mb);eme=n(f8e,"STRONG",{});var Rdt=s(eme);gSo=r(Rdt,"mpnet"),Rdt.forEach(t),hSo=r(f8e," \u2014 "),yG=n(f8e,"A",{href:!0});var Pdt=s(yG);pSo=r(Pdt,"MPNetForSequenceClassification"),Pdt.forEach(t),_So=r(f8e," (MPNet model)"),f8e.forEach(t),uSo=i(j),gb=n(j,"LI",{});var m8e=s(gb);ome=n(m8e,"STRONG",{});var Bdt=s(ome);bSo=r(Bdt,"nystromformer"),Bdt.forEach(t),vSo=r(m8e," \u2014 "),LG=n(m8e,"A",{href:!0});var Idt=s(LG);FSo=r(Idt,"NystromformerForSequenceClassification"),Idt.forEach(t),TSo=r(m8e," (Nystromformer model)"),m8e.forEach(t),MSo=i(j),hb=n(j,"LI",{});var g8e=s(hb);rme=n(g8e,"STRONG",{});var qdt=s(rme);ESo=r(qdt,"openai-gpt"),qdt.forEach(t),CSo=r(g8e," \u2014 "),xG=n(g8e,"A",{href:!0});var Ndt=s(xG);wSo=r(Ndt,"OpenAIGPTForSequenceClassification"),Ndt.forEach(t),ASo=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),ySo=i(j),pb=n(j,"LI",{});var h8e=s(pb);tme=n(h8e,"STRONG",{});var jdt=s(tme);LSo=r(jdt,"perceiver"),jdt.forEach(t),xSo=r(h8e," \u2014 "),$G=n(h8e,"A",{href:!0});var Ddt=s($G);$So=r(Ddt,"PerceiverForSequenceClassification"),Ddt.forEach(t),kSo=r(h8e," (Perceiver model)"),h8e.forEach(t),SSo=i(j),_b=n(j,"LI",{});var p8e=s(_b);ame=n(p8e,"STRONG",{});var Gdt=s(ame);RSo=r(Gdt,"plbart"),Gdt.forEach(t),PSo=r(p8e," \u2014 "),kG=n(p8e,"A",{href:!0});var Odt=s(kG);BSo=r(Odt,"PLBartForSequenceClassification"),Odt.forEach(t),ISo=r(p8e," (PLBart model)"),p8e.forEach(t),qSo=i(j),ub=n(j,"LI",{});var _8e=s(ub);nme=n(_8e,"STRONG",{});var Vdt=s(nme);NSo=r(Vdt,"qdqbert"),Vdt.forEach(t),jSo=r(_8e," \u2014 "),SG=n(_8e,"A",{href:!0});var Xdt=s(SG);DSo=r(Xdt,"QDQBertForSequenceClassification"),Xdt.forEach(t),GSo=r(_8e," (QDQBert model)"),_8e.forEach(t),OSo=i(j),bb=n(j,"LI",{});var u8e=s(bb);sme=n(u8e,"STRONG",{});var zdt=s(sme);VSo=r(zdt,"reformer"),zdt.forEach(t),XSo=r(u8e," \u2014 "),RG=n(u8e,"A",{href:!0});var Wdt=s(RG);zSo=r(Wdt,"ReformerForSequenceClassification"),Wdt.forEach(t),WSo=r(u8e," (Reformer model)"),u8e.forEach(t),QSo=i(j),vb=n(j,"LI",{});var b8e=s(vb);lme=n(b8e,"STRONG",{});var Qdt=s(lme);HSo=r(Qdt,"rembert"),Qdt.forEach(t),USo=r(b8e," \u2014 "),PG=n(b8e,"A",{href:!0});var Hdt=s(PG);JSo=r(Hdt,"RemBertForSequenceClassification"),Hdt.forEach(t),YSo=r(b8e," (RemBERT model)"),b8e.forEach(t),KSo=i(j),Fb=n(j,"LI",{});var v8e=s(Fb);ime=n(v8e,"STRONG",{});var Udt=s(ime);ZSo=r(Udt,"roberta"),Udt.forEach(t),eRo=r(v8e," \u2014 "),BG=n(v8e,"A",{href:!0});var Jdt=s(BG);oRo=r(Jdt,"RobertaForSequenceClassification"),Jdt.forEach(t),rRo=r(v8e," (RoBERTa model)"),v8e.forEach(t),tRo=i(j),Tb=n(j,"LI",{});var F8e=s(Tb);dme=n(F8e,"STRONG",{});var Ydt=s(dme);aRo=r(Ydt,"roformer"),Ydt.forEach(t),nRo=r(F8e," \u2014 "),IG=n(F8e,"A",{href:!0});var Kdt=s(IG);sRo=r(Kdt,"RoFormerForSequenceClassification"),Kdt.forEach(t),lRo=r(F8e," (RoFormer model)"),F8e.forEach(t),iRo=i(j),Mb=n(j,"LI",{});var T8e=s(Mb);cme=n(T8e,"STRONG",{});var Zdt=s(cme);dRo=r(Zdt,"squeezebert"),Zdt.forEach(t),cRo=r(T8e," \u2014 "),qG=n(T8e,"A",{href:!0});var ect=s(qG);fRo=r(ect,"SqueezeBertForSequenceClassification"),ect.forEach(t),mRo=r(T8e," (SqueezeBERT model)"),T8e.forEach(t),gRo=i(j),Eb=n(j,"LI",{});var M8e=s(Eb);fme=n(M8e,"STRONG",{});var oct=s(fme);hRo=r(oct,"tapas"),oct.forEach(t),pRo=r(M8e," \u2014 "),NG=n(M8e,"A",{href:!0});var rct=s(NG);_Ro=r(rct,"TapasForSequenceClassification"),rct.forEach(t),uRo=r(M8e," (TAPAS model)"),M8e.forEach(t),bRo=i(j),Cb=n(j,"LI",{});var E8e=s(Cb);mme=n(E8e,"STRONG",{});var tct=s(mme);vRo=r(tct,"transfo-xl"),tct.forEach(t),FRo=r(E8e," \u2014 "),jG=n(E8e,"A",{href:!0});var act=s(jG);TRo=r(act,"TransfoXLForSequenceClassification"),act.forEach(t),MRo=r(E8e," (Transformer-XL model)"),E8e.forEach(t),ERo=i(j),wb=n(j,"LI",{});var C8e=s(wb);gme=n(C8e,"STRONG",{});var nct=s(gme);CRo=r(nct,"xlm"),nct.forEach(t),wRo=r(C8e," \u2014 "),DG=n(C8e,"A",{href:!0});var sct=s(DG);ARo=r(sct,"XLMForSequenceClassification"),sct.forEach(t),yRo=r(C8e," (XLM model)"),C8e.forEach(t),LRo=i(j),Ab=n(j,"LI",{});var w8e=s(Ab);hme=n(w8e,"STRONG",{});var lct=s(hme);xRo=r(lct,"xlm-roberta"),lct.forEach(t),$Ro=r(w8e," \u2014 "),GG=n(w8e,"A",{href:!0});var ict=s(GG);kRo=r(ict,"XLMRobertaForSequenceClassification"),ict.forEach(t),SRo=r(w8e," (XLM-RoBERTa model)"),w8e.forEach(t),RRo=i(j),yb=n(j,"LI",{});var A8e=s(yb);pme=n(A8e,"STRONG",{});var dct=s(pme);PRo=r(dct,"xlm-roberta-xl"),dct.forEach(t),BRo=r(A8e," \u2014 "),OG=n(A8e,"A",{href:!0});var cct=s(OG);IRo=r(cct,"XLMRobertaXLForSequenceClassification"),cct.forEach(t),qRo=r(A8e," (XLM-RoBERTa-XL model)"),A8e.forEach(t),NRo=i(j),Lb=n(j,"LI",{});var y8e=s(Lb);_me=n(y8e,"STRONG",{});var fct=s(_me);jRo=r(fct,"xlnet"),fct.forEach(t),DRo=r(y8e," \u2014 "),VG=n(y8e,"A",{href:!0});var mct=s(VG);GRo=r(mct,"XLNetForSequenceClassification"),mct.forEach(t),ORo=r(y8e," (XLNet model)"),y8e.forEach(t),VRo=i(j),xb=n(j,"LI",{});var L8e=s(xb);ume=n(L8e,"STRONG",{});var gct=s(ume);XRo=r(gct,"yoso"),gct.forEach(t),zRo=r(L8e," \u2014 "),XG=n(L8e,"A",{href:!0});var hct=s(XG);WRo=r(hct,"YosoForSequenceClassification"),hct.forEach(t),QRo=r(L8e," (YOSO model)"),L8e.forEach(t),j.forEach(t),HRo=i(sa),$b=n(sa,"P",{});var x8e=s($b);URo=r(x8e,"The model is set in evaluation mode by default using "),bme=n(x8e,"CODE",{});var pct=s(bme);JRo=r(pct,"model.eval()"),pct.forEach(t),YRo=r(x8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(x8e,"CODE",{});var _ct=s(vme);KRo=r(_ct,"model.train()"),_ct.forEach(t),x8e.forEach(t),ZRo=i(sa),T(kb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),tNe=i(f),Vi=n(f,"H2",{class:!0});var lDe=s(Vi);Sb=n(lDe,"A",{id:!0,class:!0,href:!0});var uct=s(Sb);Fme=n(uct,"SPAN",{});var bct=s(Fme);T(CA.$$.fragment,bct),bct.forEach(t),uct.forEach(t),ePo=i(lDe),Tme=n(lDe,"SPAN",{});var vct=s(Tme);oPo=r(vct,"AutoModelForMultipleChoice"),vct.forEach(t),lDe.forEach(t),aNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(wA.$$.fragment,Qs),rPo=i(Qs),Xi=n(Qs,"P",{});var uZ=s(Xi);tPo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zG=n(uZ,"A",{href:!0});var Fct=s(zG);aPo=r(Fct,"from_pretrained()"),Fct.forEach(t),nPo=r(uZ," class method or the "),WG=n(uZ,"A",{href:!0});var Tct=s(WG);sPo=r(Tct,"from_config()"),Tct.forEach(t),lPo=r(uZ,` class
method.`),uZ.forEach(t),iPo=i(Qs),AA=n(Qs,"P",{});var iDe=s(AA);dPo=r(iDe,"This class cannot be instantiated directly using "),Mme=n(iDe,"CODE",{});var Mct=s(Mme);cPo=r(Mct,"__init__()"),Mct.forEach(t),fPo=r(iDe," (throws an error)."),iDe.forEach(t),mPo=i(Qs),dt=n(Qs,"DIV",{class:!0});var N3=s(dt);T(yA.$$.fragment,N3),gPo=i(N3),Eme=n(N3,"P",{});var Ect=s(Eme);hPo=r(Ect,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ect.forEach(t),pPo=i(N3),zi=n(N3,"P",{});var bZ=s(zi);_Po=r(bZ,`Note:
Loading a model from its configuration file does `),Cme=n(bZ,"STRONG",{});var Cct=s(Cme);uPo=r(Cct,"not"),Cct.forEach(t),bPo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(bZ,"A",{href:!0});var wct=s(QG);vPo=r(wct,"from_pretrained()"),wct.forEach(t),FPo=r(bZ," to load the model weights."),bZ.forEach(t),TPo=i(N3),T(Rb.$$.fragment,N3),N3.forEach(t),MPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(LA.$$.fragment,la),EPo=i(la),wme=n(la,"P",{});var Act=s(wme);CPo=r(Act,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Act.forEach(t),wPo=i(la),Pa=n(la,"P",{});var j3=s(Pa);APo=r(j3,"The model class to instantiate is selected based on the "),Ame=n(j3,"CODE",{});var yct=s(Ame);yPo=r(yct,"model_type"),yct.forEach(t),LPo=r(j3,` property of the config object (either
passed as an argument or loaded from `),yme=n(j3,"CODE",{});var Lct=s(yme);xPo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),$Po=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(j3,"CODE",{});var xct=s(Lme);kPo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),SPo=r(j3,":"),j3.forEach(t),RPo=i(la),Y=n(la,"UL",{});var K=s(Y);Pb=n(K,"LI",{});var $8e=s(Pb);xme=n($8e,"STRONG",{});var $ct=s(xme);PPo=r($ct,"albert"),$ct.forEach(t),BPo=r($8e," \u2014 "),HG=n($8e,"A",{href:!0});var kct=s(HG);IPo=r(kct,"AlbertForMultipleChoice"),kct.forEach(t),qPo=r($8e," (ALBERT model)"),$8e.forEach(t),NPo=i(K),Bb=n(K,"LI",{});var k8e=s(Bb);$me=n(k8e,"STRONG",{});var Sct=s($me);jPo=r(Sct,"bert"),Sct.forEach(t),DPo=r(k8e," \u2014 "),UG=n(k8e,"A",{href:!0});var Rct=s(UG);GPo=r(Rct,"BertForMultipleChoice"),Rct.forEach(t),OPo=r(k8e," (BERT model)"),k8e.forEach(t),VPo=i(K),Ib=n(K,"LI",{});var S8e=s(Ib);kme=n(S8e,"STRONG",{});var Pct=s(kme);XPo=r(Pct,"big_bird"),Pct.forEach(t),zPo=r(S8e," \u2014 "),JG=n(S8e,"A",{href:!0});var Bct=s(JG);WPo=r(Bct,"BigBirdForMultipleChoice"),Bct.forEach(t),QPo=r(S8e," (BigBird model)"),S8e.forEach(t),HPo=i(K),qb=n(K,"LI",{});var R8e=s(qb);Sme=n(R8e,"STRONG",{});var Ict=s(Sme);UPo=r(Ict,"camembert"),Ict.forEach(t),JPo=r(R8e," \u2014 "),YG=n(R8e,"A",{href:!0});var qct=s(YG);YPo=r(qct,"CamembertForMultipleChoice"),qct.forEach(t),KPo=r(R8e," (CamemBERT model)"),R8e.forEach(t),ZPo=i(K),Nb=n(K,"LI",{});var P8e=s(Nb);Rme=n(P8e,"STRONG",{});var Nct=s(Rme);eBo=r(Nct,"canine"),Nct.forEach(t),oBo=r(P8e," \u2014 "),KG=n(P8e,"A",{href:!0});var jct=s(KG);rBo=r(jct,"CanineForMultipleChoice"),jct.forEach(t),tBo=r(P8e," (Canine model)"),P8e.forEach(t),aBo=i(K),jb=n(K,"LI",{});var B8e=s(jb);Pme=n(B8e,"STRONG",{});var Dct=s(Pme);nBo=r(Dct,"convbert"),Dct.forEach(t),sBo=r(B8e," \u2014 "),ZG=n(B8e,"A",{href:!0});var Gct=s(ZG);lBo=r(Gct,"ConvBertForMultipleChoice"),Gct.forEach(t),iBo=r(B8e," (ConvBERT model)"),B8e.forEach(t),dBo=i(K),Db=n(K,"LI",{});var I8e=s(Db);Bme=n(I8e,"STRONG",{});var Oct=s(Bme);cBo=r(Oct,"data2vec-text"),Oct.forEach(t),fBo=r(I8e," \u2014 "),eO=n(I8e,"A",{href:!0});var Vct=s(eO);mBo=r(Vct,"Data2VecTextForMultipleChoice"),Vct.forEach(t),gBo=r(I8e," (Data2VecText model)"),I8e.forEach(t),hBo=i(K),Gb=n(K,"LI",{});var q8e=s(Gb);Ime=n(q8e,"STRONG",{});var Xct=s(Ime);pBo=r(Xct,"deberta-v2"),Xct.forEach(t),_Bo=r(q8e," \u2014 "),oO=n(q8e,"A",{href:!0});var zct=s(oO);uBo=r(zct,"DebertaV2ForMultipleChoice"),zct.forEach(t),bBo=r(q8e," (DeBERTa-v2 model)"),q8e.forEach(t),vBo=i(K),Ob=n(K,"LI",{});var N8e=s(Ob);qme=n(N8e,"STRONG",{});var Wct=s(qme);FBo=r(Wct,"distilbert"),Wct.forEach(t),TBo=r(N8e," \u2014 "),rO=n(N8e,"A",{href:!0});var Qct=s(rO);MBo=r(Qct,"DistilBertForMultipleChoice"),Qct.forEach(t),EBo=r(N8e," (DistilBERT model)"),N8e.forEach(t),CBo=i(K),Vb=n(K,"LI",{});var j8e=s(Vb);Nme=n(j8e,"STRONG",{});var Hct=s(Nme);wBo=r(Hct,"electra"),Hct.forEach(t),ABo=r(j8e," \u2014 "),tO=n(j8e,"A",{href:!0});var Uct=s(tO);yBo=r(Uct,"ElectraForMultipleChoice"),Uct.forEach(t),LBo=r(j8e," (ELECTRA model)"),j8e.forEach(t),xBo=i(K),Xb=n(K,"LI",{});var D8e=s(Xb);jme=n(D8e,"STRONG",{});var Jct=s(jme);$Bo=r(Jct,"flaubert"),Jct.forEach(t),kBo=r(D8e," \u2014 "),aO=n(D8e,"A",{href:!0});var Yct=s(aO);SBo=r(Yct,"FlaubertForMultipleChoice"),Yct.forEach(t),RBo=r(D8e," (FlauBERT model)"),D8e.forEach(t),PBo=i(K),zb=n(K,"LI",{});var G8e=s(zb);Dme=n(G8e,"STRONG",{});var Kct=s(Dme);BBo=r(Kct,"fnet"),Kct.forEach(t),IBo=r(G8e," \u2014 "),nO=n(G8e,"A",{href:!0});var Zct=s(nO);qBo=r(Zct,"FNetForMultipleChoice"),Zct.forEach(t),NBo=r(G8e," (FNet model)"),G8e.forEach(t),jBo=i(K),Wb=n(K,"LI",{});var O8e=s(Wb);Gme=n(O8e,"STRONG",{});var eft=s(Gme);DBo=r(eft,"funnel"),eft.forEach(t),GBo=r(O8e," \u2014 "),sO=n(O8e,"A",{href:!0});var oft=s(sO);OBo=r(oft,"FunnelForMultipleChoice"),oft.forEach(t),VBo=r(O8e," (Funnel Transformer model)"),O8e.forEach(t),XBo=i(K),Qb=n(K,"LI",{});var V8e=s(Qb);Ome=n(V8e,"STRONG",{});var rft=s(Ome);zBo=r(rft,"ibert"),rft.forEach(t),WBo=r(V8e," \u2014 "),lO=n(V8e,"A",{href:!0});var tft=s(lO);QBo=r(tft,"IBertForMultipleChoice"),tft.forEach(t),HBo=r(V8e," (I-BERT model)"),V8e.forEach(t),UBo=i(K),Hb=n(K,"LI",{});var X8e=s(Hb);Vme=n(X8e,"STRONG",{});var aft=s(Vme);JBo=r(aft,"longformer"),aft.forEach(t),YBo=r(X8e," \u2014 "),iO=n(X8e,"A",{href:!0});var nft=s(iO);KBo=r(nft,"LongformerForMultipleChoice"),nft.forEach(t),ZBo=r(X8e," (Longformer model)"),X8e.forEach(t),eIo=i(K),Ub=n(K,"LI",{});var z8e=s(Ub);Xme=n(z8e,"STRONG",{});var sft=s(Xme);oIo=r(sft,"megatron-bert"),sft.forEach(t),rIo=r(z8e," \u2014 "),dO=n(z8e,"A",{href:!0});var lft=s(dO);tIo=r(lft,"MegatronBertForMultipleChoice"),lft.forEach(t),aIo=r(z8e," (MegatronBert model)"),z8e.forEach(t),nIo=i(K),Jb=n(K,"LI",{});var W8e=s(Jb);zme=n(W8e,"STRONG",{});var ift=s(zme);sIo=r(ift,"mobilebert"),ift.forEach(t),lIo=r(W8e," \u2014 "),cO=n(W8e,"A",{href:!0});var dft=s(cO);iIo=r(dft,"MobileBertForMultipleChoice"),dft.forEach(t),dIo=r(W8e," (MobileBERT model)"),W8e.forEach(t),cIo=i(K),Yb=n(K,"LI",{});var Q8e=s(Yb);Wme=n(Q8e,"STRONG",{});var cft=s(Wme);fIo=r(cft,"mpnet"),cft.forEach(t),mIo=r(Q8e," \u2014 "),fO=n(Q8e,"A",{href:!0});var fft=s(fO);gIo=r(fft,"MPNetForMultipleChoice"),fft.forEach(t),hIo=r(Q8e," (MPNet model)"),Q8e.forEach(t),pIo=i(K),Kb=n(K,"LI",{});var H8e=s(Kb);Qme=n(H8e,"STRONG",{});var mft=s(Qme);_Io=r(mft,"nystromformer"),mft.forEach(t),uIo=r(H8e," \u2014 "),mO=n(H8e,"A",{href:!0});var gft=s(mO);bIo=r(gft,"NystromformerForMultipleChoice"),gft.forEach(t),vIo=r(H8e," (Nystromformer model)"),H8e.forEach(t),FIo=i(K),Zb=n(K,"LI",{});var U8e=s(Zb);Hme=n(U8e,"STRONG",{});var hft=s(Hme);TIo=r(hft,"qdqbert"),hft.forEach(t),MIo=r(U8e," \u2014 "),gO=n(U8e,"A",{href:!0});var pft=s(gO);EIo=r(pft,"QDQBertForMultipleChoice"),pft.forEach(t),CIo=r(U8e," (QDQBert model)"),U8e.forEach(t),wIo=i(K),ev=n(K,"LI",{});var J8e=s(ev);Ume=n(J8e,"STRONG",{});var _ft=s(Ume);AIo=r(_ft,"rembert"),_ft.forEach(t),yIo=r(J8e," \u2014 "),hO=n(J8e,"A",{href:!0});var uft=s(hO);LIo=r(uft,"RemBertForMultipleChoice"),uft.forEach(t),xIo=r(J8e," (RemBERT model)"),J8e.forEach(t),$Io=i(K),ov=n(K,"LI",{});var Y8e=s(ov);Jme=n(Y8e,"STRONG",{});var bft=s(Jme);kIo=r(bft,"roberta"),bft.forEach(t),SIo=r(Y8e," \u2014 "),pO=n(Y8e,"A",{href:!0});var vft=s(pO);RIo=r(vft,"RobertaForMultipleChoice"),vft.forEach(t),PIo=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),BIo=i(K),rv=n(K,"LI",{});var K8e=s(rv);Yme=n(K8e,"STRONG",{});var Fft=s(Yme);IIo=r(Fft,"roformer"),Fft.forEach(t),qIo=r(K8e," \u2014 "),_O=n(K8e,"A",{href:!0});var Tft=s(_O);NIo=r(Tft,"RoFormerForMultipleChoice"),Tft.forEach(t),jIo=r(K8e," (RoFormer model)"),K8e.forEach(t),DIo=i(K),tv=n(K,"LI",{});var Z8e=s(tv);Kme=n(Z8e,"STRONG",{});var Mft=s(Kme);GIo=r(Mft,"squeezebert"),Mft.forEach(t),OIo=r(Z8e," \u2014 "),uO=n(Z8e,"A",{href:!0});var Eft=s(uO);VIo=r(Eft,"SqueezeBertForMultipleChoice"),Eft.forEach(t),XIo=r(Z8e," (SqueezeBERT model)"),Z8e.forEach(t),zIo=i(K),av=n(K,"LI",{});var exe=s(av);Zme=n(exe,"STRONG",{});var Cft=s(Zme);WIo=r(Cft,"xlm"),Cft.forEach(t),QIo=r(exe," \u2014 "),bO=n(exe,"A",{href:!0});var wft=s(bO);HIo=r(wft,"XLMForMultipleChoice"),wft.forEach(t),UIo=r(exe," (XLM model)"),exe.forEach(t),JIo=i(K),nv=n(K,"LI",{});var oxe=s(nv);ege=n(oxe,"STRONG",{});var Aft=s(ege);YIo=r(Aft,"xlm-roberta"),Aft.forEach(t),KIo=r(oxe," \u2014 "),vO=n(oxe,"A",{href:!0});var yft=s(vO);ZIo=r(yft,"XLMRobertaForMultipleChoice"),yft.forEach(t),eqo=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),oqo=i(K),sv=n(K,"LI",{});var rxe=s(sv);oge=n(rxe,"STRONG",{});var Lft=s(oge);rqo=r(Lft,"xlm-roberta-xl"),Lft.forEach(t),tqo=r(rxe," \u2014 "),FO=n(rxe,"A",{href:!0});var xft=s(FO);aqo=r(xft,"XLMRobertaXLForMultipleChoice"),xft.forEach(t),nqo=r(rxe," (XLM-RoBERTa-XL model)"),rxe.forEach(t),sqo=i(K),lv=n(K,"LI",{});var txe=s(lv);rge=n(txe,"STRONG",{});var $ft=s(rge);lqo=r($ft,"xlnet"),$ft.forEach(t),iqo=r(txe," \u2014 "),TO=n(txe,"A",{href:!0});var kft=s(TO);dqo=r(kft,"XLNetForMultipleChoice"),kft.forEach(t),cqo=r(txe," (XLNet model)"),txe.forEach(t),fqo=i(K),iv=n(K,"LI",{});var axe=s(iv);tge=n(axe,"STRONG",{});var Sft=s(tge);mqo=r(Sft,"yoso"),Sft.forEach(t),gqo=r(axe," \u2014 "),MO=n(axe,"A",{href:!0});var Rft=s(MO);hqo=r(Rft,"YosoForMultipleChoice"),Rft.forEach(t),pqo=r(axe," (YOSO model)"),axe.forEach(t),K.forEach(t),_qo=i(la),dv=n(la,"P",{});var nxe=s(dv);uqo=r(nxe,"The model is set in evaluation mode by default using "),age=n(nxe,"CODE",{});var Pft=s(age);bqo=r(Pft,"model.eval()"),Pft.forEach(t),vqo=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(nxe,"CODE",{});var Bft=s(nge);Fqo=r(Bft,"model.train()"),Bft.forEach(t),nxe.forEach(t),Tqo=i(la),T(cv.$$.fragment,la),la.forEach(t),Qs.forEach(t),nNe=i(f),Wi=n(f,"H2",{class:!0});var dDe=s(Wi);fv=n(dDe,"A",{id:!0,class:!0,href:!0});var Ift=s(fv);sge=n(Ift,"SPAN",{});var qft=s(sge);T(xA.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),Mqo=i(dDe),lge=n(dDe,"SPAN",{});var Nft=s(lge);Eqo=r(Nft,"AutoModelForNextSentencePrediction"),Nft.forEach(t),dDe.forEach(t),sNe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T($A.$$.fragment,Hs),Cqo=i(Hs),Qi=n(Hs,"P",{});var vZ=s(Qi);wqo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EO=n(vZ,"A",{href:!0});var jft=s(EO);Aqo=r(jft,"from_pretrained()"),jft.forEach(t),yqo=r(vZ," class method or the "),CO=n(vZ,"A",{href:!0});var Dft=s(CO);Lqo=r(Dft,"from_config()"),Dft.forEach(t),xqo=r(vZ,` class
method.`),vZ.forEach(t),$qo=i(Hs),kA=n(Hs,"P",{});var cDe=s(kA);kqo=r(cDe,"This class cannot be instantiated directly using "),ige=n(cDe,"CODE",{});var Gft=s(ige);Sqo=r(Gft,"__init__()"),Gft.forEach(t),Rqo=r(cDe," (throws an error)."),cDe.forEach(t),Pqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var D3=s(ct);T(SA.$$.fragment,D3),Bqo=i(D3),dge=n(D3,"P",{});var Oft=s(dge);Iqo=r(Oft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oft.forEach(t),qqo=i(D3),Hi=n(D3,"P",{});var FZ=s(Hi);Nqo=r(FZ,`Note:
Loading a model from its configuration file does `),cge=n(FZ,"STRONG",{});var Vft=s(cge);jqo=r(Vft,"not"),Vft.forEach(t),Dqo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(FZ,"A",{href:!0});var Xft=s(wO);Gqo=r(Xft,"from_pretrained()"),Xft.forEach(t),Oqo=r(FZ," to load the model weights."),FZ.forEach(t),Vqo=i(D3),T(mv.$$.fragment,D3),D3.forEach(t),Xqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(RA.$$.fragment,ia),zqo=i(ia),fge=n(ia,"P",{});var zft=s(fge);Wqo=r(zft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zft.forEach(t),Qqo=i(ia),Ba=n(ia,"P",{});var G3=s(Ba);Hqo=r(G3,"The model class to instantiate is selected based on the "),mge=n(G3,"CODE",{});var Wft=s(mge);Uqo=r(Wft,"model_type"),Wft.forEach(t),Jqo=r(G3,` property of the config object (either
passed as an argument or loaded from `),gge=n(G3,"CODE",{});var Qft=s(gge);Yqo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),Kqo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(G3,"CODE",{});var Hft=s(hge);Zqo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),eNo=r(G3,":"),G3.forEach(t),oNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);gv=n(Us,"LI",{});var sxe=s(gv);pge=n(sxe,"STRONG",{});var Uft=s(pge);rNo=r(Uft,"bert"),Uft.forEach(t),tNo=r(sxe," \u2014 "),AO=n(sxe,"A",{href:!0});var Jft=s(AO);aNo=r(Jft,"BertForNextSentencePrediction"),Jft.forEach(t),nNo=r(sxe," (BERT model)"),sxe.forEach(t),sNo=i(Us),hv=n(Us,"LI",{});var lxe=s(hv);_ge=n(lxe,"STRONG",{});var Yft=s(_ge);lNo=r(Yft,"fnet"),Yft.forEach(t),iNo=r(lxe," \u2014 "),yO=n(lxe,"A",{href:!0});var Kft=s(yO);dNo=r(Kft,"FNetForNextSentencePrediction"),Kft.forEach(t),cNo=r(lxe," (FNet model)"),lxe.forEach(t),fNo=i(Us),pv=n(Us,"LI",{});var ixe=s(pv);uge=n(ixe,"STRONG",{});var Zft=s(uge);mNo=r(Zft,"megatron-bert"),Zft.forEach(t),gNo=r(ixe," \u2014 "),LO=n(ixe,"A",{href:!0});var emt=s(LO);hNo=r(emt,"MegatronBertForNextSentencePrediction"),emt.forEach(t),pNo=r(ixe," (MegatronBert model)"),ixe.forEach(t),_No=i(Us),_v=n(Us,"LI",{});var dxe=s(_v);bge=n(dxe,"STRONG",{});var omt=s(bge);uNo=r(omt,"mobilebert"),omt.forEach(t),bNo=r(dxe," \u2014 "),xO=n(dxe,"A",{href:!0});var rmt=s(xO);vNo=r(rmt,"MobileBertForNextSentencePrediction"),rmt.forEach(t),FNo=r(dxe," (MobileBERT model)"),dxe.forEach(t),TNo=i(Us),uv=n(Us,"LI",{});var cxe=s(uv);vge=n(cxe,"STRONG",{});var tmt=s(vge);MNo=r(tmt,"qdqbert"),tmt.forEach(t),ENo=r(cxe," \u2014 "),$O=n(cxe,"A",{href:!0});var amt=s($O);CNo=r(amt,"QDQBertForNextSentencePrediction"),amt.forEach(t),wNo=r(cxe," (QDQBert model)"),cxe.forEach(t),Us.forEach(t),ANo=i(ia),bv=n(ia,"P",{});var fxe=s(bv);yNo=r(fxe,"The model is set in evaluation mode by default using "),Fge=n(fxe,"CODE",{});var nmt=s(Fge);LNo=r(nmt,"model.eval()"),nmt.forEach(t),xNo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(fxe,"CODE",{});var smt=s(Tge);$No=r(smt,"model.train()"),smt.forEach(t),fxe.forEach(t),kNo=i(ia),T(vv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),lNe=i(f),Ui=n(f,"H2",{class:!0});var fDe=s(Ui);Fv=n(fDe,"A",{id:!0,class:!0,href:!0});var lmt=s(Fv);Mge=n(lmt,"SPAN",{});var imt=s(Mge);T(PA.$$.fragment,imt),imt.forEach(t),lmt.forEach(t),SNo=i(fDe),Ege=n(fDe,"SPAN",{});var dmt=s(Ege);RNo=r(dmt,"AutoModelForTokenClassification"),dmt.forEach(t),fDe.forEach(t),iNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(BA.$$.fragment,Js),PNo=i(Js),Ji=n(Js,"P",{});var TZ=s(Ji);BNo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kO=n(TZ,"A",{href:!0});var cmt=s(kO);INo=r(cmt,"from_pretrained()"),cmt.forEach(t),qNo=r(TZ," class method or the "),SO=n(TZ,"A",{href:!0});var fmt=s(SO);NNo=r(fmt,"from_config()"),fmt.forEach(t),jNo=r(TZ,` class
method.`),TZ.forEach(t),DNo=i(Js),IA=n(Js,"P",{});var mDe=s(IA);GNo=r(mDe,"This class cannot be instantiated directly using "),Cge=n(mDe,"CODE",{});var mmt=s(Cge);ONo=r(mmt,"__init__()"),mmt.forEach(t),VNo=r(mDe," (throws an error)."),mDe.forEach(t),XNo=i(Js),ft=n(Js,"DIV",{class:!0});var O3=s(ft);T(qA.$$.fragment,O3),zNo=i(O3),wge=n(O3,"P",{});var gmt=s(wge);WNo=r(gmt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gmt.forEach(t),QNo=i(O3),Yi=n(O3,"P",{});var MZ=s(Yi);HNo=r(MZ,`Note:
Loading a model from its configuration file does `),Age=n(MZ,"STRONG",{});var hmt=s(Age);UNo=r(hmt,"not"),hmt.forEach(t),JNo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=n(MZ,"A",{href:!0});var pmt=s(RO);YNo=r(pmt,"from_pretrained()"),pmt.forEach(t),KNo=r(MZ," to load the model weights."),MZ.forEach(t),ZNo=i(O3),T(Tv.$$.fragment,O3),O3.forEach(t),ejo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(NA.$$.fragment,da),ojo=i(da),yge=n(da,"P",{});var _mt=s(yge);rjo=r(_mt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_mt.forEach(t),tjo=i(da),Ia=n(da,"P",{});var V3=s(Ia);ajo=r(V3,"The model class to instantiate is selected based on the "),Lge=n(V3,"CODE",{});var umt=s(Lge);njo=r(umt,"model_type"),umt.forEach(t),sjo=r(V3,` property of the config object (either
passed as an argument or loaded from `),xge=n(V3,"CODE",{});var bmt=s(xge);ljo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),ijo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(V3,"CODE",{});var vmt=s($ge);djo=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),cjo=r(V3,":"),V3.forEach(t),fjo=i(da),U=n(da,"UL",{});var J=s(U);Mv=n(J,"LI",{});var mxe=s(Mv);kge=n(mxe,"STRONG",{});var Fmt=s(kge);mjo=r(Fmt,"albert"),Fmt.forEach(t),gjo=r(mxe," \u2014 "),PO=n(mxe,"A",{href:!0});var Tmt=s(PO);hjo=r(Tmt,"AlbertForTokenClassification"),Tmt.forEach(t),pjo=r(mxe," (ALBERT model)"),mxe.forEach(t),_jo=i(J),Ev=n(J,"LI",{});var gxe=s(Ev);Sge=n(gxe,"STRONG",{});var Mmt=s(Sge);ujo=r(Mmt,"bert"),Mmt.forEach(t),bjo=r(gxe," \u2014 "),BO=n(gxe,"A",{href:!0});var Emt=s(BO);vjo=r(Emt,"BertForTokenClassification"),Emt.forEach(t),Fjo=r(gxe," (BERT model)"),gxe.forEach(t),Tjo=i(J),Cv=n(J,"LI",{});var hxe=s(Cv);Rge=n(hxe,"STRONG",{});var Cmt=s(Rge);Mjo=r(Cmt,"big_bird"),Cmt.forEach(t),Ejo=r(hxe," \u2014 "),IO=n(hxe,"A",{href:!0});var wmt=s(IO);Cjo=r(wmt,"BigBirdForTokenClassification"),wmt.forEach(t),wjo=r(hxe," (BigBird model)"),hxe.forEach(t),Ajo=i(J),wv=n(J,"LI",{});var pxe=s(wv);Pge=n(pxe,"STRONG",{});var Amt=s(Pge);yjo=r(Amt,"camembert"),Amt.forEach(t),Ljo=r(pxe," \u2014 "),qO=n(pxe,"A",{href:!0});var ymt=s(qO);xjo=r(ymt,"CamembertForTokenClassification"),ymt.forEach(t),$jo=r(pxe," (CamemBERT model)"),pxe.forEach(t),kjo=i(J),Av=n(J,"LI",{});var _xe=s(Av);Bge=n(_xe,"STRONG",{});var Lmt=s(Bge);Sjo=r(Lmt,"canine"),Lmt.forEach(t),Rjo=r(_xe," \u2014 "),NO=n(_xe,"A",{href:!0});var xmt=s(NO);Pjo=r(xmt,"CanineForTokenClassification"),xmt.forEach(t),Bjo=r(_xe," (Canine model)"),_xe.forEach(t),Ijo=i(J),yv=n(J,"LI",{});var uxe=s(yv);Ige=n(uxe,"STRONG",{});var $mt=s(Ige);qjo=r($mt,"convbert"),$mt.forEach(t),Njo=r(uxe," \u2014 "),jO=n(uxe,"A",{href:!0});var kmt=s(jO);jjo=r(kmt,"ConvBertForTokenClassification"),kmt.forEach(t),Djo=r(uxe," (ConvBERT model)"),uxe.forEach(t),Gjo=i(J),Lv=n(J,"LI",{});var bxe=s(Lv);qge=n(bxe,"STRONG",{});var Smt=s(qge);Ojo=r(Smt,"data2vec-text"),Smt.forEach(t),Vjo=r(bxe," \u2014 "),DO=n(bxe,"A",{href:!0});var Rmt=s(DO);Xjo=r(Rmt,"Data2VecTextForTokenClassification"),Rmt.forEach(t),zjo=r(bxe," (Data2VecText model)"),bxe.forEach(t),Wjo=i(J),xv=n(J,"LI",{});var vxe=s(xv);Nge=n(vxe,"STRONG",{});var Pmt=s(Nge);Qjo=r(Pmt,"deberta"),Pmt.forEach(t),Hjo=r(vxe," \u2014 "),GO=n(vxe,"A",{href:!0});var Bmt=s(GO);Ujo=r(Bmt,"DebertaForTokenClassification"),Bmt.forEach(t),Jjo=r(vxe," (DeBERTa model)"),vxe.forEach(t),Yjo=i(J),$v=n(J,"LI",{});var Fxe=s($v);jge=n(Fxe,"STRONG",{});var Imt=s(jge);Kjo=r(Imt,"deberta-v2"),Imt.forEach(t),Zjo=r(Fxe," \u2014 "),OO=n(Fxe,"A",{href:!0});var qmt=s(OO);eDo=r(qmt,"DebertaV2ForTokenClassification"),qmt.forEach(t),oDo=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),rDo=i(J),kv=n(J,"LI",{});var Txe=s(kv);Dge=n(Txe,"STRONG",{});var Nmt=s(Dge);tDo=r(Nmt,"distilbert"),Nmt.forEach(t),aDo=r(Txe," \u2014 "),VO=n(Txe,"A",{href:!0});var jmt=s(VO);nDo=r(jmt,"DistilBertForTokenClassification"),jmt.forEach(t),sDo=r(Txe," (DistilBERT model)"),Txe.forEach(t),lDo=i(J),Sv=n(J,"LI",{});var Mxe=s(Sv);Gge=n(Mxe,"STRONG",{});var Dmt=s(Gge);iDo=r(Dmt,"electra"),Dmt.forEach(t),dDo=r(Mxe," \u2014 "),XO=n(Mxe,"A",{href:!0});var Gmt=s(XO);cDo=r(Gmt,"ElectraForTokenClassification"),Gmt.forEach(t),fDo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),mDo=i(J),Rv=n(J,"LI",{});var Exe=s(Rv);Oge=n(Exe,"STRONG",{});var Omt=s(Oge);gDo=r(Omt,"flaubert"),Omt.forEach(t),hDo=r(Exe," \u2014 "),zO=n(Exe,"A",{href:!0});var Vmt=s(zO);pDo=r(Vmt,"FlaubertForTokenClassification"),Vmt.forEach(t),_Do=r(Exe," (FlauBERT model)"),Exe.forEach(t),uDo=i(J),Pv=n(J,"LI",{});var Cxe=s(Pv);Vge=n(Cxe,"STRONG",{});var Xmt=s(Vge);bDo=r(Xmt,"fnet"),Xmt.forEach(t),vDo=r(Cxe," \u2014 "),WO=n(Cxe,"A",{href:!0});var zmt=s(WO);FDo=r(zmt,"FNetForTokenClassification"),zmt.forEach(t),TDo=r(Cxe," (FNet model)"),Cxe.forEach(t),MDo=i(J),Bv=n(J,"LI",{});var wxe=s(Bv);Xge=n(wxe,"STRONG",{});var Wmt=s(Xge);EDo=r(Wmt,"funnel"),Wmt.forEach(t),CDo=r(wxe," \u2014 "),QO=n(wxe,"A",{href:!0});var Qmt=s(QO);wDo=r(Qmt,"FunnelForTokenClassification"),Qmt.forEach(t),ADo=r(wxe," (Funnel Transformer model)"),wxe.forEach(t),yDo=i(J),Iv=n(J,"LI",{});var Axe=s(Iv);zge=n(Axe,"STRONG",{});var Hmt=s(zge);LDo=r(Hmt,"gpt2"),Hmt.forEach(t),xDo=r(Axe," \u2014 "),HO=n(Axe,"A",{href:!0});var Umt=s(HO);$Do=r(Umt,"GPT2ForTokenClassification"),Umt.forEach(t),kDo=r(Axe," (OpenAI GPT-2 model)"),Axe.forEach(t),SDo=i(J),qv=n(J,"LI",{});var yxe=s(qv);Wge=n(yxe,"STRONG",{});var Jmt=s(Wge);RDo=r(Jmt,"ibert"),Jmt.forEach(t),PDo=r(yxe," \u2014 "),UO=n(yxe,"A",{href:!0});var Ymt=s(UO);BDo=r(Ymt,"IBertForTokenClassification"),Ymt.forEach(t),IDo=r(yxe," (I-BERT model)"),yxe.forEach(t),qDo=i(J),Nv=n(J,"LI",{});var Lxe=s(Nv);Qge=n(Lxe,"STRONG",{});var Kmt=s(Qge);NDo=r(Kmt,"layoutlm"),Kmt.forEach(t),jDo=r(Lxe," \u2014 "),JO=n(Lxe,"A",{href:!0});var Zmt=s(JO);DDo=r(Zmt,"LayoutLMForTokenClassification"),Zmt.forEach(t),GDo=r(Lxe," (LayoutLM model)"),Lxe.forEach(t),ODo=i(J),jv=n(J,"LI",{});var xxe=s(jv);Hge=n(xxe,"STRONG",{});var egt=s(Hge);VDo=r(egt,"layoutlmv2"),egt.forEach(t),XDo=r(xxe," \u2014 "),YO=n(xxe,"A",{href:!0});var ogt=s(YO);zDo=r(ogt,"LayoutLMv2ForTokenClassification"),ogt.forEach(t),WDo=r(xxe," (LayoutLMv2 model)"),xxe.forEach(t),QDo=i(J),Dv=n(J,"LI",{});var $xe=s(Dv);Uge=n($xe,"STRONG",{});var rgt=s(Uge);HDo=r(rgt,"longformer"),rgt.forEach(t),UDo=r($xe," \u2014 "),KO=n($xe,"A",{href:!0});var tgt=s(KO);JDo=r(tgt,"LongformerForTokenClassification"),tgt.forEach(t),YDo=r($xe," (Longformer model)"),$xe.forEach(t),KDo=i(J),Gv=n(J,"LI",{});var kxe=s(Gv);Jge=n(kxe,"STRONG",{});var agt=s(Jge);ZDo=r(agt,"megatron-bert"),agt.forEach(t),eGo=r(kxe," \u2014 "),ZO=n(kxe,"A",{href:!0});var ngt=s(ZO);oGo=r(ngt,"MegatronBertForTokenClassification"),ngt.forEach(t),rGo=r(kxe," (MegatronBert model)"),kxe.forEach(t),tGo=i(J),Ov=n(J,"LI",{});var Sxe=s(Ov);Yge=n(Sxe,"STRONG",{});var sgt=s(Yge);aGo=r(sgt,"mobilebert"),sgt.forEach(t),nGo=r(Sxe," \u2014 "),eV=n(Sxe,"A",{href:!0});var lgt=s(eV);sGo=r(lgt,"MobileBertForTokenClassification"),lgt.forEach(t),lGo=r(Sxe," (MobileBERT model)"),Sxe.forEach(t),iGo=i(J),Vv=n(J,"LI",{});var Rxe=s(Vv);Kge=n(Rxe,"STRONG",{});var igt=s(Kge);dGo=r(igt,"mpnet"),igt.forEach(t),cGo=r(Rxe," \u2014 "),oV=n(Rxe,"A",{href:!0});var dgt=s(oV);fGo=r(dgt,"MPNetForTokenClassification"),dgt.forEach(t),mGo=r(Rxe," (MPNet model)"),Rxe.forEach(t),gGo=i(J),Xv=n(J,"LI",{});var Pxe=s(Xv);Zge=n(Pxe,"STRONG",{});var cgt=s(Zge);hGo=r(cgt,"nystromformer"),cgt.forEach(t),pGo=r(Pxe," \u2014 "),rV=n(Pxe,"A",{href:!0});var fgt=s(rV);_Go=r(fgt,"NystromformerForTokenClassification"),fgt.forEach(t),uGo=r(Pxe," (Nystromformer model)"),Pxe.forEach(t),bGo=i(J),zv=n(J,"LI",{});var Bxe=s(zv);ehe=n(Bxe,"STRONG",{});var mgt=s(ehe);vGo=r(mgt,"qdqbert"),mgt.forEach(t),FGo=r(Bxe," \u2014 "),tV=n(Bxe,"A",{href:!0});var ggt=s(tV);TGo=r(ggt,"QDQBertForTokenClassification"),ggt.forEach(t),MGo=r(Bxe," (QDQBert model)"),Bxe.forEach(t),EGo=i(J),Wv=n(J,"LI",{});var Ixe=s(Wv);ohe=n(Ixe,"STRONG",{});var hgt=s(ohe);CGo=r(hgt,"rembert"),hgt.forEach(t),wGo=r(Ixe," \u2014 "),aV=n(Ixe,"A",{href:!0});var pgt=s(aV);AGo=r(pgt,"RemBertForTokenClassification"),pgt.forEach(t),yGo=r(Ixe," (RemBERT model)"),Ixe.forEach(t),LGo=i(J),Qv=n(J,"LI",{});var qxe=s(Qv);rhe=n(qxe,"STRONG",{});var _gt=s(rhe);xGo=r(_gt,"roberta"),_gt.forEach(t),$Go=r(qxe," \u2014 "),nV=n(qxe,"A",{href:!0});var ugt=s(nV);kGo=r(ugt,"RobertaForTokenClassification"),ugt.forEach(t),SGo=r(qxe," (RoBERTa model)"),qxe.forEach(t),RGo=i(J),Hv=n(J,"LI",{});var Nxe=s(Hv);the=n(Nxe,"STRONG",{});var bgt=s(the);PGo=r(bgt,"roformer"),bgt.forEach(t),BGo=r(Nxe," \u2014 "),sV=n(Nxe,"A",{href:!0});var vgt=s(sV);IGo=r(vgt,"RoFormerForTokenClassification"),vgt.forEach(t),qGo=r(Nxe," (RoFormer model)"),Nxe.forEach(t),NGo=i(J),Uv=n(J,"LI",{});var jxe=s(Uv);ahe=n(jxe,"STRONG",{});var Fgt=s(ahe);jGo=r(Fgt,"squeezebert"),Fgt.forEach(t),DGo=r(jxe," \u2014 "),lV=n(jxe,"A",{href:!0});var Tgt=s(lV);GGo=r(Tgt,"SqueezeBertForTokenClassification"),Tgt.forEach(t),OGo=r(jxe," (SqueezeBERT model)"),jxe.forEach(t),VGo=i(J),Jv=n(J,"LI",{});var Dxe=s(Jv);nhe=n(Dxe,"STRONG",{});var Mgt=s(nhe);XGo=r(Mgt,"xlm"),Mgt.forEach(t),zGo=r(Dxe," \u2014 "),iV=n(Dxe,"A",{href:!0});var Egt=s(iV);WGo=r(Egt,"XLMForTokenClassification"),Egt.forEach(t),QGo=r(Dxe," (XLM model)"),Dxe.forEach(t),HGo=i(J),Yv=n(J,"LI",{});var Gxe=s(Yv);she=n(Gxe,"STRONG",{});var Cgt=s(she);UGo=r(Cgt,"xlm-roberta"),Cgt.forEach(t),JGo=r(Gxe," \u2014 "),dV=n(Gxe,"A",{href:!0});var wgt=s(dV);YGo=r(wgt,"XLMRobertaForTokenClassification"),wgt.forEach(t),KGo=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),ZGo=i(J),Kv=n(J,"LI",{});var Oxe=s(Kv);lhe=n(Oxe,"STRONG",{});var Agt=s(lhe);eOo=r(Agt,"xlm-roberta-xl"),Agt.forEach(t),oOo=r(Oxe," \u2014 "),cV=n(Oxe,"A",{href:!0});var ygt=s(cV);rOo=r(ygt,"XLMRobertaXLForTokenClassification"),ygt.forEach(t),tOo=r(Oxe," (XLM-RoBERTa-XL model)"),Oxe.forEach(t),aOo=i(J),Zv=n(J,"LI",{});var Vxe=s(Zv);ihe=n(Vxe,"STRONG",{});var Lgt=s(ihe);nOo=r(Lgt,"xlnet"),Lgt.forEach(t),sOo=r(Vxe," \u2014 "),fV=n(Vxe,"A",{href:!0});var xgt=s(fV);lOo=r(xgt,"XLNetForTokenClassification"),xgt.forEach(t),iOo=r(Vxe," (XLNet model)"),Vxe.forEach(t),dOo=i(J),eF=n(J,"LI",{});var Xxe=s(eF);dhe=n(Xxe,"STRONG",{});var $gt=s(dhe);cOo=r($gt,"yoso"),$gt.forEach(t),fOo=r(Xxe," \u2014 "),mV=n(Xxe,"A",{href:!0});var kgt=s(mV);mOo=r(kgt,"YosoForTokenClassification"),kgt.forEach(t),gOo=r(Xxe," (YOSO model)"),Xxe.forEach(t),J.forEach(t),hOo=i(da),oF=n(da,"P",{});var zxe=s(oF);pOo=r(zxe,"The model is set in evaluation mode by default using "),che=n(zxe,"CODE",{});var Sgt=s(che);_Oo=r(Sgt,"model.eval()"),Sgt.forEach(t),uOo=r(zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(zxe,"CODE",{});var Rgt=s(fhe);bOo=r(Rgt,"model.train()"),Rgt.forEach(t),zxe.forEach(t),vOo=i(da),T(rF.$$.fragment,da),da.forEach(t),Js.forEach(t),dNe=i(f),Ki=n(f,"H2",{class:!0});var gDe=s(Ki);tF=n(gDe,"A",{id:!0,class:!0,href:!0});var Pgt=s(tF);mhe=n(Pgt,"SPAN",{});var Bgt=s(mhe);T(jA.$$.fragment,Bgt),Bgt.forEach(t),Pgt.forEach(t),FOo=i(gDe),ghe=n(gDe,"SPAN",{});var Igt=s(ghe);TOo=r(Igt,"AutoModelForQuestionAnswering"),Igt.forEach(t),gDe.forEach(t),cNe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(DA.$$.fragment,Ys),MOo=i(Ys),Zi=n(Ys,"P",{});var EZ=s(Zi);EOo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gV=n(EZ,"A",{href:!0});var qgt=s(gV);COo=r(qgt,"from_pretrained()"),qgt.forEach(t),wOo=r(EZ," class method or the "),hV=n(EZ,"A",{href:!0});var Ngt=s(hV);AOo=r(Ngt,"from_config()"),Ngt.forEach(t),yOo=r(EZ,` class
method.`),EZ.forEach(t),LOo=i(Ys),GA=n(Ys,"P",{});var hDe=s(GA);xOo=r(hDe,"This class cannot be instantiated directly using "),hhe=n(hDe,"CODE",{});var jgt=s(hhe);$Oo=r(jgt,"__init__()"),jgt.forEach(t),kOo=r(hDe," (throws an error)."),hDe.forEach(t),SOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var X3=s(mt);T(OA.$$.fragment,X3),ROo=i(X3),phe=n(X3,"P",{});var Dgt=s(phe);POo=r(Dgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dgt.forEach(t),BOo=i(X3),ed=n(X3,"P",{});var CZ=s(ed);IOo=r(CZ,`Note:
Loading a model from its configuration file does `),_he=n(CZ,"STRONG",{});var Ggt=s(_he);qOo=r(Ggt,"not"),Ggt.forEach(t),NOo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(CZ,"A",{href:!0});var Ogt=s(pV);jOo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),DOo=r(CZ," to load the model weights."),CZ.forEach(t),GOo=i(X3),T(aF.$$.fragment,X3),X3.forEach(t),OOo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(VA.$$.fragment,ca),VOo=i(ca),uhe=n(ca,"P",{});var Vgt=s(uhe);XOo=r(Vgt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vgt.forEach(t),zOo=i(ca),qa=n(ca,"P",{});var z3=s(qa);WOo=r(z3,"The model class to instantiate is selected based on the "),bhe=n(z3,"CODE",{});var Xgt=s(bhe);QOo=r(Xgt,"model_type"),Xgt.forEach(t),HOo=r(z3,` property of the config object (either
passed as an argument or loaded from `),vhe=n(z3,"CODE",{});var zgt=s(vhe);UOo=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),JOo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(z3,"CODE",{});var Wgt=s(Fhe);YOo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),KOo=r(z3,":"),z3.forEach(t),ZOo=i(ca),V=n(ca,"UL",{});var X=s(V);nF=n(X,"LI",{});var Wxe=s(nF);The=n(Wxe,"STRONG",{});var Qgt=s(The);eVo=r(Qgt,"albert"),Qgt.forEach(t),oVo=r(Wxe," \u2014 "),_V=n(Wxe,"A",{href:!0});var Hgt=s(_V);rVo=r(Hgt,"AlbertForQuestionAnswering"),Hgt.forEach(t),tVo=r(Wxe," (ALBERT model)"),Wxe.forEach(t),aVo=i(X),sF=n(X,"LI",{});var Qxe=s(sF);Mhe=n(Qxe,"STRONG",{});var Ugt=s(Mhe);nVo=r(Ugt,"bart"),Ugt.forEach(t),sVo=r(Qxe," \u2014 "),uV=n(Qxe,"A",{href:!0});var Jgt=s(uV);lVo=r(Jgt,"BartForQuestionAnswering"),Jgt.forEach(t),iVo=r(Qxe," (BART model)"),Qxe.forEach(t),dVo=i(X),lF=n(X,"LI",{});var Hxe=s(lF);Ehe=n(Hxe,"STRONG",{});var Ygt=s(Ehe);cVo=r(Ygt,"bert"),Ygt.forEach(t),fVo=r(Hxe," \u2014 "),bV=n(Hxe,"A",{href:!0});var Kgt=s(bV);mVo=r(Kgt,"BertForQuestionAnswering"),Kgt.forEach(t),gVo=r(Hxe," (BERT model)"),Hxe.forEach(t),hVo=i(X),iF=n(X,"LI",{});var Uxe=s(iF);Che=n(Uxe,"STRONG",{});var Zgt=s(Che);pVo=r(Zgt,"big_bird"),Zgt.forEach(t),_Vo=r(Uxe," \u2014 "),vV=n(Uxe,"A",{href:!0});var eht=s(vV);uVo=r(eht,"BigBirdForQuestionAnswering"),eht.forEach(t),bVo=r(Uxe," (BigBird model)"),Uxe.forEach(t),vVo=i(X),dF=n(X,"LI",{});var Jxe=s(dF);whe=n(Jxe,"STRONG",{});var oht=s(whe);FVo=r(oht,"bigbird_pegasus"),oht.forEach(t),TVo=r(Jxe," \u2014 "),FV=n(Jxe,"A",{href:!0});var rht=s(FV);MVo=r(rht,"BigBirdPegasusForQuestionAnswering"),rht.forEach(t),EVo=r(Jxe," (BigBirdPegasus model)"),Jxe.forEach(t),CVo=i(X),cF=n(X,"LI",{});var Yxe=s(cF);Ahe=n(Yxe,"STRONG",{});var tht=s(Ahe);wVo=r(tht,"camembert"),tht.forEach(t),AVo=r(Yxe," \u2014 "),TV=n(Yxe,"A",{href:!0});var aht=s(TV);yVo=r(aht,"CamembertForQuestionAnswering"),aht.forEach(t),LVo=r(Yxe," (CamemBERT model)"),Yxe.forEach(t),xVo=i(X),fF=n(X,"LI",{});var Kxe=s(fF);yhe=n(Kxe,"STRONG",{});var nht=s(yhe);$Vo=r(nht,"canine"),nht.forEach(t),kVo=r(Kxe," \u2014 "),MV=n(Kxe,"A",{href:!0});var sht=s(MV);SVo=r(sht,"CanineForQuestionAnswering"),sht.forEach(t),RVo=r(Kxe," (Canine model)"),Kxe.forEach(t),PVo=i(X),mF=n(X,"LI",{});var Zxe=s(mF);Lhe=n(Zxe,"STRONG",{});var lht=s(Lhe);BVo=r(lht,"convbert"),lht.forEach(t),IVo=r(Zxe," \u2014 "),EV=n(Zxe,"A",{href:!0});var iht=s(EV);qVo=r(iht,"ConvBertForQuestionAnswering"),iht.forEach(t),NVo=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),jVo=i(X),gF=n(X,"LI",{});var e$e=s(gF);xhe=n(e$e,"STRONG",{});var dht=s(xhe);DVo=r(dht,"data2vec-text"),dht.forEach(t),GVo=r(e$e," \u2014 "),CV=n(e$e,"A",{href:!0});var cht=s(CV);OVo=r(cht,"Data2VecTextForQuestionAnswering"),cht.forEach(t),VVo=r(e$e," (Data2VecText model)"),e$e.forEach(t),XVo=i(X),hF=n(X,"LI",{});var o$e=s(hF);$he=n(o$e,"STRONG",{});var fht=s($he);zVo=r(fht,"deberta"),fht.forEach(t),WVo=r(o$e," \u2014 "),wV=n(o$e,"A",{href:!0});var mht=s(wV);QVo=r(mht,"DebertaForQuestionAnswering"),mht.forEach(t),HVo=r(o$e," (DeBERTa model)"),o$e.forEach(t),UVo=i(X),pF=n(X,"LI",{});var r$e=s(pF);khe=n(r$e,"STRONG",{});var ght=s(khe);JVo=r(ght,"deberta-v2"),ght.forEach(t),YVo=r(r$e," \u2014 "),AV=n(r$e,"A",{href:!0});var hht=s(AV);KVo=r(hht,"DebertaV2ForQuestionAnswering"),hht.forEach(t),ZVo=r(r$e," (DeBERTa-v2 model)"),r$e.forEach(t),eXo=i(X),_F=n(X,"LI",{});var t$e=s(_F);She=n(t$e,"STRONG",{});var pht=s(She);oXo=r(pht,"distilbert"),pht.forEach(t),rXo=r(t$e," \u2014 "),yV=n(t$e,"A",{href:!0});var _ht=s(yV);tXo=r(_ht,"DistilBertForQuestionAnswering"),_ht.forEach(t),aXo=r(t$e," (DistilBERT model)"),t$e.forEach(t),nXo=i(X),uF=n(X,"LI",{});var a$e=s(uF);Rhe=n(a$e,"STRONG",{});var uht=s(Rhe);sXo=r(uht,"electra"),uht.forEach(t),lXo=r(a$e," \u2014 "),LV=n(a$e,"A",{href:!0});var bht=s(LV);iXo=r(bht,"ElectraForQuestionAnswering"),bht.forEach(t),dXo=r(a$e," (ELECTRA model)"),a$e.forEach(t),cXo=i(X),bF=n(X,"LI",{});var n$e=s(bF);Phe=n(n$e,"STRONG",{});var vht=s(Phe);fXo=r(vht,"flaubert"),vht.forEach(t),mXo=r(n$e," \u2014 "),xV=n(n$e,"A",{href:!0});var Fht=s(xV);gXo=r(Fht,"FlaubertForQuestionAnsweringSimple"),Fht.forEach(t),hXo=r(n$e," (FlauBERT model)"),n$e.forEach(t),pXo=i(X),vF=n(X,"LI",{});var s$e=s(vF);Bhe=n(s$e,"STRONG",{});var Tht=s(Bhe);_Xo=r(Tht,"fnet"),Tht.forEach(t),uXo=r(s$e," \u2014 "),$V=n(s$e,"A",{href:!0});var Mht=s($V);bXo=r(Mht,"FNetForQuestionAnswering"),Mht.forEach(t),vXo=r(s$e," (FNet model)"),s$e.forEach(t),FXo=i(X),FF=n(X,"LI",{});var l$e=s(FF);Ihe=n(l$e,"STRONG",{});var Eht=s(Ihe);TXo=r(Eht,"funnel"),Eht.forEach(t),MXo=r(l$e," \u2014 "),kV=n(l$e,"A",{href:!0});var Cht=s(kV);EXo=r(Cht,"FunnelForQuestionAnswering"),Cht.forEach(t),CXo=r(l$e," (Funnel Transformer model)"),l$e.forEach(t),wXo=i(X),TF=n(X,"LI",{});var i$e=s(TF);qhe=n(i$e,"STRONG",{});var wht=s(qhe);AXo=r(wht,"gptj"),wht.forEach(t),yXo=r(i$e," \u2014 "),SV=n(i$e,"A",{href:!0});var Aht=s(SV);LXo=r(Aht,"GPTJForQuestionAnswering"),Aht.forEach(t),xXo=r(i$e," (GPT-J model)"),i$e.forEach(t),$Xo=i(X),MF=n(X,"LI",{});var d$e=s(MF);Nhe=n(d$e,"STRONG",{});var yht=s(Nhe);kXo=r(yht,"ibert"),yht.forEach(t),SXo=r(d$e," \u2014 "),RV=n(d$e,"A",{href:!0});var Lht=s(RV);RXo=r(Lht,"IBertForQuestionAnswering"),Lht.forEach(t),PXo=r(d$e," (I-BERT model)"),d$e.forEach(t),BXo=i(X),EF=n(X,"LI",{});var c$e=s(EF);jhe=n(c$e,"STRONG",{});var xht=s(jhe);IXo=r(xht,"layoutlmv2"),xht.forEach(t),qXo=r(c$e," \u2014 "),PV=n(c$e,"A",{href:!0});var $ht=s(PV);NXo=r($ht,"LayoutLMv2ForQuestionAnswering"),$ht.forEach(t),jXo=r(c$e," (LayoutLMv2 model)"),c$e.forEach(t),DXo=i(X),CF=n(X,"LI",{});var f$e=s(CF);Dhe=n(f$e,"STRONG",{});var kht=s(Dhe);GXo=r(kht,"led"),kht.forEach(t),OXo=r(f$e," \u2014 "),BV=n(f$e,"A",{href:!0});var Sht=s(BV);VXo=r(Sht,"LEDForQuestionAnswering"),Sht.forEach(t),XXo=r(f$e," (LED model)"),f$e.forEach(t),zXo=i(X),wF=n(X,"LI",{});var m$e=s(wF);Ghe=n(m$e,"STRONG",{});var Rht=s(Ghe);WXo=r(Rht,"longformer"),Rht.forEach(t),QXo=r(m$e," \u2014 "),IV=n(m$e,"A",{href:!0});var Pht=s(IV);HXo=r(Pht,"LongformerForQuestionAnswering"),Pht.forEach(t),UXo=r(m$e," (Longformer model)"),m$e.forEach(t),JXo=i(X),AF=n(X,"LI",{});var g$e=s(AF);Ohe=n(g$e,"STRONG",{});var Bht=s(Ohe);YXo=r(Bht,"lxmert"),Bht.forEach(t),KXo=r(g$e," \u2014 "),qV=n(g$e,"A",{href:!0});var Iht=s(qV);ZXo=r(Iht,"LxmertForQuestionAnswering"),Iht.forEach(t),ezo=r(g$e," (LXMERT model)"),g$e.forEach(t),ozo=i(X),yF=n(X,"LI",{});var h$e=s(yF);Vhe=n(h$e,"STRONG",{});var qht=s(Vhe);rzo=r(qht,"mbart"),qht.forEach(t),tzo=r(h$e," \u2014 "),NV=n(h$e,"A",{href:!0});var Nht=s(NV);azo=r(Nht,"MBartForQuestionAnswering"),Nht.forEach(t),nzo=r(h$e," (mBART model)"),h$e.forEach(t),szo=i(X),LF=n(X,"LI",{});var p$e=s(LF);Xhe=n(p$e,"STRONG",{});var jht=s(Xhe);lzo=r(jht,"megatron-bert"),jht.forEach(t),izo=r(p$e," \u2014 "),jV=n(p$e,"A",{href:!0});var Dht=s(jV);dzo=r(Dht,"MegatronBertForQuestionAnswering"),Dht.forEach(t),czo=r(p$e," (MegatronBert model)"),p$e.forEach(t),fzo=i(X),xF=n(X,"LI",{});var _$e=s(xF);zhe=n(_$e,"STRONG",{});var Ght=s(zhe);mzo=r(Ght,"mobilebert"),Ght.forEach(t),gzo=r(_$e," \u2014 "),DV=n(_$e,"A",{href:!0});var Oht=s(DV);hzo=r(Oht,"MobileBertForQuestionAnswering"),Oht.forEach(t),pzo=r(_$e," (MobileBERT model)"),_$e.forEach(t),_zo=i(X),$F=n(X,"LI",{});var u$e=s($F);Whe=n(u$e,"STRONG",{});var Vht=s(Whe);uzo=r(Vht,"mpnet"),Vht.forEach(t),bzo=r(u$e," \u2014 "),GV=n(u$e,"A",{href:!0});var Xht=s(GV);vzo=r(Xht,"MPNetForQuestionAnswering"),Xht.forEach(t),Fzo=r(u$e," (MPNet model)"),u$e.forEach(t),Tzo=i(X),kF=n(X,"LI",{});var b$e=s(kF);Qhe=n(b$e,"STRONG",{});var zht=s(Qhe);Mzo=r(zht,"nystromformer"),zht.forEach(t),Ezo=r(b$e," \u2014 "),OV=n(b$e,"A",{href:!0});var Wht=s(OV);Czo=r(Wht,"NystromformerForQuestionAnswering"),Wht.forEach(t),wzo=r(b$e," (Nystromformer model)"),b$e.forEach(t),Azo=i(X),SF=n(X,"LI",{});var v$e=s(SF);Hhe=n(v$e,"STRONG",{});var Qht=s(Hhe);yzo=r(Qht,"qdqbert"),Qht.forEach(t),Lzo=r(v$e," \u2014 "),VV=n(v$e,"A",{href:!0});var Hht=s(VV);xzo=r(Hht,"QDQBertForQuestionAnswering"),Hht.forEach(t),$zo=r(v$e," (QDQBert model)"),v$e.forEach(t),kzo=i(X),RF=n(X,"LI",{});var F$e=s(RF);Uhe=n(F$e,"STRONG",{});var Uht=s(Uhe);Szo=r(Uht,"reformer"),Uht.forEach(t),Rzo=r(F$e," \u2014 "),XV=n(F$e,"A",{href:!0});var Jht=s(XV);Pzo=r(Jht,"ReformerForQuestionAnswering"),Jht.forEach(t),Bzo=r(F$e," (Reformer model)"),F$e.forEach(t),Izo=i(X),PF=n(X,"LI",{});var T$e=s(PF);Jhe=n(T$e,"STRONG",{});var Yht=s(Jhe);qzo=r(Yht,"rembert"),Yht.forEach(t),Nzo=r(T$e," \u2014 "),zV=n(T$e,"A",{href:!0});var Kht=s(zV);jzo=r(Kht,"RemBertForQuestionAnswering"),Kht.forEach(t),Dzo=r(T$e," (RemBERT model)"),T$e.forEach(t),Gzo=i(X),BF=n(X,"LI",{});var M$e=s(BF);Yhe=n(M$e,"STRONG",{});var Zht=s(Yhe);Ozo=r(Zht,"roberta"),Zht.forEach(t),Vzo=r(M$e," \u2014 "),WV=n(M$e,"A",{href:!0});var ept=s(WV);Xzo=r(ept,"RobertaForQuestionAnswering"),ept.forEach(t),zzo=r(M$e," (RoBERTa model)"),M$e.forEach(t),Wzo=i(X),IF=n(X,"LI",{});var E$e=s(IF);Khe=n(E$e,"STRONG",{});var opt=s(Khe);Qzo=r(opt,"roformer"),opt.forEach(t),Hzo=r(E$e," \u2014 "),QV=n(E$e,"A",{href:!0});var rpt=s(QV);Uzo=r(rpt,"RoFormerForQuestionAnswering"),rpt.forEach(t),Jzo=r(E$e," (RoFormer model)"),E$e.forEach(t),Yzo=i(X),qF=n(X,"LI",{});var C$e=s(qF);Zhe=n(C$e,"STRONG",{});var tpt=s(Zhe);Kzo=r(tpt,"splinter"),tpt.forEach(t),Zzo=r(C$e," \u2014 "),HV=n(C$e,"A",{href:!0});var apt=s(HV);eWo=r(apt,"SplinterForQuestionAnswering"),apt.forEach(t),oWo=r(C$e," (Splinter model)"),C$e.forEach(t),rWo=i(X),NF=n(X,"LI",{});var w$e=s(NF);epe=n(w$e,"STRONG",{});var npt=s(epe);tWo=r(npt,"squeezebert"),npt.forEach(t),aWo=r(w$e," \u2014 "),UV=n(w$e,"A",{href:!0});var spt=s(UV);nWo=r(spt,"SqueezeBertForQuestionAnswering"),spt.forEach(t),sWo=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),lWo=i(X),jF=n(X,"LI",{});var A$e=s(jF);ope=n(A$e,"STRONG",{});var lpt=s(ope);iWo=r(lpt,"xlm"),lpt.forEach(t),dWo=r(A$e," \u2014 "),JV=n(A$e,"A",{href:!0});var ipt=s(JV);cWo=r(ipt,"XLMForQuestionAnsweringSimple"),ipt.forEach(t),fWo=r(A$e," (XLM model)"),A$e.forEach(t),mWo=i(X),DF=n(X,"LI",{});var y$e=s(DF);rpe=n(y$e,"STRONG",{});var dpt=s(rpe);gWo=r(dpt,"xlm-roberta"),dpt.forEach(t),hWo=r(y$e," \u2014 "),YV=n(y$e,"A",{href:!0});var cpt=s(YV);pWo=r(cpt,"XLMRobertaForQuestionAnswering"),cpt.forEach(t),_Wo=r(y$e," (XLM-RoBERTa model)"),y$e.forEach(t),uWo=i(X),GF=n(X,"LI",{});var L$e=s(GF);tpe=n(L$e,"STRONG",{});var fpt=s(tpe);bWo=r(fpt,"xlm-roberta-xl"),fpt.forEach(t),vWo=r(L$e," \u2014 "),KV=n(L$e,"A",{href:!0});var mpt=s(KV);FWo=r(mpt,"XLMRobertaXLForQuestionAnswering"),mpt.forEach(t),TWo=r(L$e," (XLM-RoBERTa-XL model)"),L$e.forEach(t),MWo=i(X),OF=n(X,"LI",{});var x$e=s(OF);ape=n(x$e,"STRONG",{});var gpt=s(ape);EWo=r(gpt,"xlnet"),gpt.forEach(t),CWo=r(x$e," \u2014 "),ZV=n(x$e,"A",{href:!0});var hpt=s(ZV);wWo=r(hpt,"XLNetForQuestionAnsweringSimple"),hpt.forEach(t),AWo=r(x$e," (XLNet model)"),x$e.forEach(t),yWo=i(X),VF=n(X,"LI",{});var $$e=s(VF);npe=n($$e,"STRONG",{});var ppt=s(npe);LWo=r(ppt,"yoso"),ppt.forEach(t),xWo=r($$e," \u2014 "),eX=n($$e,"A",{href:!0});var _pt=s(eX);$Wo=r(_pt,"YosoForQuestionAnswering"),_pt.forEach(t),kWo=r($$e," (YOSO model)"),$$e.forEach(t),X.forEach(t),SWo=i(ca),XF=n(ca,"P",{});var k$e=s(XF);RWo=r(k$e,"The model is set in evaluation mode by default using "),spe=n(k$e,"CODE",{});var upt=s(spe);PWo=r(upt,"model.eval()"),upt.forEach(t),BWo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(k$e,"CODE",{});var bpt=s(lpe);IWo=r(bpt,"model.train()"),bpt.forEach(t),k$e.forEach(t),qWo=i(ca),T(zF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),fNe=i(f),od=n(f,"H2",{class:!0});var pDe=s(od);WF=n(pDe,"A",{id:!0,class:!0,href:!0});var vpt=s(WF);ipe=n(vpt,"SPAN",{});var Fpt=s(ipe);T(XA.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),NWo=i(pDe),dpe=n(pDe,"SPAN",{});var Tpt=s(dpe);jWo=r(Tpt,"AutoModelForTableQuestionAnswering"),Tpt.forEach(t),pDe.forEach(t),mNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(zA.$$.fragment,Ks),DWo=i(Ks),rd=n(Ks,"P",{});var wZ=s(rd);GWo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oX=n(wZ,"A",{href:!0});var Mpt=s(oX);OWo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),VWo=r(wZ," class method or the "),rX=n(wZ,"A",{href:!0});var Ept=s(rX);XWo=r(Ept,"from_config()"),Ept.forEach(t),zWo=r(wZ,` class
method.`),wZ.forEach(t),WWo=i(Ks),WA=n(Ks,"P",{});var _De=s(WA);QWo=r(_De,"This class cannot be instantiated directly using "),cpe=n(_De,"CODE",{});var Cpt=s(cpe);HWo=r(Cpt,"__init__()"),Cpt.forEach(t),UWo=r(_De," (throws an error)."),_De.forEach(t),JWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var W3=s(gt);T(QA.$$.fragment,W3),YWo=i(W3),fpe=n(W3,"P",{});var wpt=s(fpe);KWo=r(wpt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wpt.forEach(t),ZWo=i(W3),td=n(W3,"P",{});var AZ=s(td);eQo=r(AZ,`Note:
Loading a model from its configuration file does `),mpe=n(AZ,"STRONG",{});var Apt=s(mpe);oQo=r(Apt,"not"),Apt.forEach(t),rQo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(AZ,"A",{href:!0});var ypt=s(tX);tQo=r(ypt,"from_pretrained()"),ypt.forEach(t),aQo=r(AZ," to load the model weights."),AZ.forEach(t),nQo=i(W3),T(QF.$$.fragment,W3),W3.forEach(t),sQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(HA.$$.fragment,fa),lQo=i(fa),gpe=n(fa,"P",{});var Lpt=s(gpe);iQo=r(Lpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lpt.forEach(t),dQo=i(fa),Na=n(fa,"P",{});var Q3=s(Na);cQo=r(Q3,"The model class to instantiate is selected based on the "),hpe=n(Q3,"CODE",{});var xpt=s(hpe);fQo=r(xpt,"model_type"),xpt.forEach(t),mQo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),ppe=n(Q3,"CODE",{});var $pt=s(ppe);gQo=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),hQo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(Q3,"CODE",{});var kpt=s(_pe);pQo=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),_Qo=r(Q3,":"),Q3.forEach(t),uQo=i(fa),upe=n(fa,"UL",{});var Spt=s(upe);HF=n(Spt,"LI",{});var S$e=s(HF);bpe=n(S$e,"STRONG",{});var Rpt=s(bpe);bQo=r(Rpt,"tapas"),Rpt.forEach(t),vQo=r(S$e," \u2014 "),aX=n(S$e,"A",{href:!0});var Ppt=s(aX);FQo=r(Ppt,"TapasForQuestionAnswering"),Ppt.forEach(t),TQo=r(S$e," (TAPAS model)"),S$e.forEach(t),Spt.forEach(t),MQo=i(fa),UF=n(fa,"P",{});var R$e=s(UF);EQo=r(R$e,"The model is set in evaluation mode by default using "),vpe=n(R$e,"CODE",{});var Bpt=s(vpe);CQo=r(Bpt,"model.eval()"),Bpt.forEach(t),wQo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(R$e,"CODE",{});var Ipt=s(Fpe);AQo=r(Ipt,"model.train()"),Ipt.forEach(t),R$e.forEach(t),yQo=i(fa),T(JF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),gNe=i(f),ad=n(f,"H2",{class:!0});var uDe=s(ad);YF=n(uDe,"A",{id:!0,class:!0,href:!0});var qpt=s(YF);Tpe=n(qpt,"SPAN",{});var Npt=s(Tpe);T(UA.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),LQo=i(uDe),Mpe=n(uDe,"SPAN",{});var jpt=s(Mpe);xQo=r(jpt,"AutoModelForImageClassification"),jpt.forEach(t),uDe.forEach(t),hNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(JA.$$.fragment,Zs),$Qo=i(Zs),nd=n(Zs,"P",{});var yZ=s(nd);kQo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nX=n(yZ,"A",{href:!0});var Dpt=s(nX);SQo=r(Dpt,"from_pretrained()"),Dpt.forEach(t),RQo=r(yZ," class method or the "),sX=n(yZ,"A",{href:!0});var Gpt=s(sX);PQo=r(Gpt,"from_config()"),Gpt.forEach(t),BQo=r(yZ,` class
method.`),yZ.forEach(t),IQo=i(Zs),YA=n(Zs,"P",{});var bDe=s(YA);qQo=r(bDe,"This class cannot be instantiated directly using "),Epe=n(bDe,"CODE",{});var Opt=s(Epe);NQo=r(Opt,"__init__()"),Opt.forEach(t),jQo=r(bDe," (throws an error)."),bDe.forEach(t),DQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var H3=s(ht);T(KA.$$.fragment,H3),GQo=i(H3),Cpe=n(H3,"P",{});var Vpt=s(Cpe);OQo=r(Vpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vpt.forEach(t),VQo=i(H3),sd=n(H3,"P",{});var LZ=s(sd);XQo=r(LZ,`Note:
Loading a model from its configuration file does `),wpe=n(LZ,"STRONG",{});var Xpt=s(wpe);zQo=r(Xpt,"not"),Xpt.forEach(t),WQo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(LZ,"A",{href:!0});var zpt=s(lX);QQo=r(zpt,"from_pretrained()"),zpt.forEach(t),HQo=r(LZ," to load the model weights."),LZ.forEach(t),UQo=i(H3),T(KF.$$.fragment,H3),H3.forEach(t),JQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(ZA.$$.fragment,ma),YQo=i(ma),Ape=n(ma,"P",{});var Wpt=s(Ape);KQo=r(Wpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wpt.forEach(t),ZQo=i(ma),ja=n(ma,"P",{});var U3=s(ja);eHo=r(U3,"The model class to instantiate is selected based on the "),ype=n(U3,"CODE",{});var Qpt=s(ype);oHo=r(Qpt,"model_type"),Qpt.forEach(t),rHo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(U3,"CODE",{});var Hpt=s(Lpe);tHo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),aHo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(U3,"CODE",{});var Upt=s(xpe);nHo=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),sHo=r(U3,":"),U3.forEach(t),lHo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);ZF=n(Me,"LI",{});var P$e=s(ZF);$pe=n(P$e,"STRONG",{});var Jpt=s($pe);iHo=r(Jpt,"beit"),Jpt.forEach(t),dHo=r(P$e," \u2014 "),iX=n(P$e,"A",{href:!0});var Ypt=s(iX);cHo=r(Ypt,"BeitForImageClassification"),Ypt.forEach(t),fHo=r(P$e," (BEiT model)"),P$e.forEach(t),mHo=i(Me),e6=n(Me,"LI",{});var B$e=s(e6);kpe=n(B$e,"STRONG",{});var Kpt=s(kpe);gHo=r(Kpt,"convnext"),Kpt.forEach(t),hHo=r(B$e," \u2014 "),dX=n(B$e,"A",{href:!0});var Zpt=s(dX);pHo=r(Zpt,"ConvNextForImageClassification"),Zpt.forEach(t),_Ho=r(B$e," (ConvNext model)"),B$e.forEach(t),uHo=i(Me),o6=n(Me,"LI",{});var I$e=s(o6);Spe=n(I$e,"STRONG",{});var e_t=s(Spe);bHo=r(e_t,"cvt"),e_t.forEach(t),vHo=r(I$e," \u2014 "),cX=n(I$e,"A",{href:!0});var o_t=s(cX);FHo=r(o_t,"CvtForImageClassification"),o_t.forEach(t),THo=r(I$e," (CvT model)"),I$e.forEach(t),MHo=i(Me),r6=n(Me,"LI",{});var q$e=s(r6);Rpe=n(q$e,"STRONG",{});var r_t=s(Rpe);EHo=r(r_t,"data2vec-vision"),r_t.forEach(t),CHo=r(q$e," \u2014 "),fX=n(q$e,"A",{href:!0});var t_t=s(fX);wHo=r(t_t,"Data2VecVisionForImageClassification"),t_t.forEach(t),AHo=r(q$e," (Data2VecVision model)"),q$e.forEach(t),yHo=i(Me),Bs=n(Me,"LI",{});var N$=s(Bs);Ppe=n(N$,"STRONG",{});var a_t=s(Ppe);LHo=r(a_t,"deit"),a_t.forEach(t),xHo=r(N$," \u2014 "),mX=n(N$,"A",{href:!0});var n_t=s(mX);$Ho=r(n_t,"DeiTForImageClassification"),n_t.forEach(t),kHo=r(N$," or "),gX=n(N$,"A",{href:!0});var s_t=s(gX);SHo=r(s_t,"DeiTForImageClassificationWithTeacher"),s_t.forEach(t),RHo=r(N$," (DeiT model)"),N$.forEach(t),PHo=i(Me),t6=n(Me,"LI",{});var N$e=s(t6);Bpe=n(N$e,"STRONG",{});var l_t=s(Bpe);BHo=r(l_t,"imagegpt"),l_t.forEach(t),IHo=r(N$e," \u2014 "),hX=n(N$e,"A",{href:!0});var i_t=s(hX);qHo=r(i_t,"ImageGPTForImageClassification"),i_t.forEach(t),NHo=r(N$e," (ImageGPT model)"),N$e.forEach(t),jHo=i(Me),pt=n(Me,"LI",{});var hf=s(pt);Ipe=n(hf,"STRONG",{});var d_t=s(Ipe);DHo=r(d_t,"perceiver"),d_t.forEach(t),GHo=r(hf," \u2014 "),pX=n(hf,"A",{href:!0});var c_t=s(pX);OHo=r(c_t,"PerceiverForImageClassificationLearned"),c_t.forEach(t),VHo=r(hf," or "),_X=n(hf,"A",{href:!0});var f_t=s(_X);XHo=r(f_t,"PerceiverForImageClassificationFourier"),f_t.forEach(t),zHo=r(hf," or "),uX=n(hf,"A",{href:!0});var m_t=s(uX);WHo=r(m_t,"PerceiverForImageClassificationConvProcessing"),m_t.forEach(t),QHo=r(hf," (Perceiver model)"),hf.forEach(t),HHo=i(Me),a6=n(Me,"LI",{});var j$e=s(a6);qpe=n(j$e,"STRONG",{});var g_t=s(qpe);UHo=r(g_t,"poolformer"),g_t.forEach(t),JHo=r(j$e," \u2014 "),bX=n(j$e,"A",{href:!0});var h_t=s(bX);YHo=r(h_t,"PoolFormerForImageClassification"),h_t.forEach(t),KHo=r(j$e," (PoolFormer model)"),j$e.forEach(t),ZHo=i(Me),n6=n(Me,"LI",{});var D$e=s(n6);Npe=n(D$e,"STRONG",{});var p_t=s(Npe);eUo=r(p_t,"regnet"),p_t.forEach(t),oUo=r(D$e," \u2014 "),vX=n(D$e,"A",{href:!0});var __t=s(vX);rUo=r(__t,"RegNetForImageClassification"),__t.forEach(t),tUo=r(D$e," (RegNet model)"),D$e.forEach(t),aUo=i(Me),s6=n(Me,"LI",{});var G$e=s(s6);jpe=n(G$e,"STRONG",{});var u_t=s(jpe);nUo=r(u_t,"resnet"),u_t.forEach(t),sUo=r(G$e," \u2014 "),FX=n(G$e,"A",{href:!0});var b_t=s(FX);lUo=r(b_t,"ResNetForImageClassification"),b_t.forEach(t),iUo=r(G$e," (ResNet model)"),G$e.forEach(t),dUo=i(Me),l6=n(Me,"LI",{});var O$e=s(l6);Dpe=n(O$e,"STRONG",{});var v_t=s(Dpe);cUo=r(v_t,"segformer"),v_t.forEach(t),fUo=r(O$e," \u2014 "),TX=n(O$e,"A",{href:!0});var F_t=s(TX);mUo=r(F_t,"SegformerForImageClassification"),F_t.forEach(t),gUo=r(O$e," (SegFormer model)"),O$e.forEach(t),hUo=i(Me),i6=n(Me,"LI",{});var V$e=s(i6);Gpe=n(V$e,"STRONG",{});var T_t=s(Gpe);pUo=r(T_t,"swin"),T_t.forEach(t),_Uo=r(V$e," \u2014 "),MX=n(V$e,"A",{href:!0});var M_t=s(MX);uUo=r(M_t,"SwinForImageClassification"),M_t.forEach(t),bUo=r(V$e," (Swin model)"),V$e.forEach(t),vUo=i(Me),d6=n(Me,"LI",{});var X$e=s(d6);Ope=n(X$e,"STRONG",{});var E_t=s(Ope);FUo=r(E_t,"van"),E_t.forEach(t),TUo=r(X$e," \u2014 "),EX=n(X$e,"A",{href:!0});var C_t=s(EX);MUo=r(C_t,"VanForImageClassification"),C_t.forEach(t),EUo=r(X$e," (VAN model)"),X$e.forEach(t),CUo=i(Me),c6=n(Me,"LI",{});var z$e=s(c6);Vpe=n(z$e,"STRONG",{});var w_t=s(Vpe);wUo=r(w_t,"vit"),w_t.forEach(t),AUo=r(z$e," \u2014 "),CX=n(z$e,"A",{href:!0});var A_t=s(CX);yUo=r(A_t,"ViTForImageClassification"),A_t.forEach(t),LUo=r(z$e," (ViT model)"),z$e.forEach(t),Me.forEach(t),xUo=i(ma),f6=n(ma,"P",{});var W$e=s(f6);$Uo=r(W$e,"The model is set in evaluation mode by default using "),Xpe=n(W$e,"CODE",{});var y_t=s(Xpe);kUo=r(y_t,"model.eval()"),y_t.forEach(t),SUo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(W$e,"CODE",{});var L_t=s(zpe);RUo=r(L_t,"model.train()"),L_t.forEach(t),W$e.forEach(t),PUo=i(ma),T(m6.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),pNe=i(f),ld=n(f,"H2",{class:!0});var vDe=s(ld);g6=n(vDe,"A",{id:!0,class:!0,href:!0});var x_t=s(g6);Wpe=n(x_t,"SPAN",{});var $_t=s(Wpe);T(ey.$$.fragment,$_t),$_t.forEach(t),x_t.forEach(t),BUo=i(vDe),Qpe=n(vDe,"SPAN",{});var k_t=s(Qpe);IUo=r(k_t,"AutoModelForVision2Seq"),k_t.forEach(t),vDe.forEach(t),_Ne=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(oy.$$.fragment,el),qUo=i(el),id=n(el,"P",{});var xZ=s(id);NUo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wX=n(xZ,"A",{href:!0});var S_t=s(wX);jUo=r(S_t,"from_pretrained()"),S_t.forEach(t),DUo=r(xZ," class method or the "),AX=n(xZ,"A",{href:!0});var R_t=s(AX);GUo=r(R_t,"from_config()"),R_t.forEach(t),OUo=r(xZ,` class
method.`),xZ.forEach(t),VUo=i(el),ry=n(el,"P",{});var FDe=s(ry);XUo=r(FDe,"This class cannot be instantiated directly using "),Hpe=n(FDe,"CODE",{});var P_t=s(Hpe);zUo=r(P_t,"__init__()"),P_t.forEach(t),WUo=r(FDe," (throws an error)."),FDe.forEach(t),QUo=i(el),_t=n(el,"DIV",{class:!0});var J3=s(_t);T(ty.$$.fragment,J3),HUo=i(J3),Upe=n(J3,"P",{});var B_t=s(Upe);UUo=r(B_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),B_t.forEach(t),JUo=i(J3),dd=n(J3,"P",{});var $Z=s(dd);YUo=r($Z,`Note:
Loading a model from its configuration file does `),Jpe=n($Z,"STRONG",{});var I_t=s(Jpe);KUo=r(I_t,"not"),I_t.forEach(t),ZUo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n($Z,"A",{href:!0});var q_t=s(yX);eJo=r(q_t,"from_pretrained()"),q_t.forEach(t),oJo=r($Z," to load the model weights."),$Z.forEach(t),rJo=i(J3),T(h6.$$.fragment,J3),J3.forEach(t),tJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(ay.$$.fragment,ga),aJo=i(ga),Ype=n(ga,"P",{});var N_t=s(Ype);nJo=r(N_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),N_t.forEach(t),sJo=i(ga),Da=n(ga,"P",{});var Y3=s(Da);lJo=r(Y3,"The model class to instantiate is selected based on the "),Kpe=n(Y3,"CODE",{});var j_t=s(Kpe);iJo=r(j_t,"model_type"),j_t.forEach(t),dJo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(Y3,"CODE",{});var D_t=s(Zpe);cJo=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),fJo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(Y3,"CODE",{});var G_t=s(e_e);mJo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),gJo=r(Y3,":"),Y3.forEach(t),hJo=i(ga),o_e=n(ga,"UL",{});var O_t=s(o_e);p6=n(O_t,"LI",{});var Q$e=s(p6);r_e=n(Q$e,"STRONG",{});var V_t=s(r_e);pJo=r(V_t,"vision-encoder-decoder"),V_t.forEach(t),_Jo=r(Q$e," \u2014 "),LX=n(Q$e,"A",{href:!0});var X_t=s(LX);uJo=r(X_t,"VisionEncoderDecoderModel"),X_t.forEach(t),bJo=r(Q$e," (Vision Encoder decoder model)"),Q$e.forEach(t),O_t.forEach(t),vJo=i(ga),_6=n(ga,"P",{});var H$e=s(_6);FJo=r(H$e,"The model is set in evaluation mode by default using "),t_e=n(H$e,"CODE",{});var z_t=s(t_e);TJo=r(z_t,"model.eval()"),z_t.forEach(t),MJo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(H$e,"CODE",{});var W_t=s(a_e);EJo=r(W_t,"model.train()"),W_t.forEach(t),H$e.forEach(t),CJo=i(ga),T(u6.$$.fragment,ga),ga.forEach(t),el.forEach(t),uNe=i(f),cd=n(f,"H2",{class:!0});var TDe=s(cd);b6=n(TDe,"A",{id:!0,class:!0,href:!0});var Q_t=s(b6);n_e=n(Q_t,"SPAN",{});var H_t=s(n_e);T(ny.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),wJo=i(TDe),s_e=n(TDe,"SPAN",{});var U_t=s(s_e);AJo=r(U_t,"AutoModelForAudioClassification"),U_t.forEach(t),TDe.forEach(t),bNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(sy.$$.fragment,ol),yJo=i(ol),fd=n(ol,"P",{});var kZ=s(fd);LJo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xX=n(kZ,"A",{href:!0});var J_t=s(xX);xJo=r(J_t,"from_pretrained()"),J_t.forEach(t),$Jo=r(kZ," class method or the "),$X=n(kZ,"A",{href:!0});var Y_t=s($X);kJo=r(Y_t,"from_config()"),Y_t.forEach(t),SJo=r(kZ,` class
method.`),kZ.forEach(t),RJo=i(ol),ly=n(ol,"P",{});var MDe=s(ly);PJo=r(MDe,"This class cannot be instantiated directly using "),l_e=n(MDe,"CODE",{});var K_t=s(l_e);BJo=r(K_t,"__init__()"),K_t.forEach(t),IJo=r(MDe," (throws an error)."),MDe.forEach(t),qJo=i(ol),ut=n(ol,"DIV",{class:!0});var K3=s(ut);T(iy.$$.fragment,K3),NJo=i(K3),i_e=n(K3,"P",{});var Z_t=s(i_e);jJo=r(Z_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Z_t.forEach(t),DJo=i(K3),md=n(K3,"P",{});var SZ=s(md);GJo=r(SZ,`Note:
Loading a model from its configuration file does `),d_e=n(SZ,"STRONG",{});var eut=s(d_e);OJo=r(eut,"not"),eut.forEach(t),VJo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(SZ,"A",{href:!0});var out=s(kX);XJo=r(out,"from_pretrained()"),out.forEach(t),zJo=r(SZ," to load the model weights."),SZ.forEach(t),WJo=i(K3),T(v6.$$.fragment,K3),K3.forEach(t),QJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(dy.$$.fragment,ha),HJo=i(ha),c_e=n(ha,"P",{});var rut=s(c_e);UJo=r(rut,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rut.forEach(t),JJo=i(ha),Ga=n(ha,"P",{});var Z3=s(Ga);YJo=r(Z3,"The model class to instantiate is selected based on the "),f_e=n(Z3,"CODE",{});var tut=s(f_e);KJo=r(tut,"model_type"),tut.forEach(t),ZJo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),m_e=n(Z3,"CODE",{});var aut=s(m_e);eYo=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),oYo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(Z3,"CODE",{});var nut=s(g_e);rYo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),tYo=r(Z3,":"),Z3.forEach(t),aYo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);F6=n(Ve,"LI",{});var U$e=s(F6);h_e=n(U$e,"STRONG",{});var sut=s(h_e);nYo=r(sut,"data2vec-audio"),sut.forEach(t),sYo=r(U$e," \u2014 "),SX=n(U$e,"A",{href:!0});var lut=s(SX);lYo=r(lut,"Data2VecAudioForSequenceClassification"),lut.forEach(t),iYo=r(U$e," (Data2VecAudio model)"),U$e.forEach(t),dYo=i(Ve),T6=n(Ve,"LI",{});var J$e=s(T6);p_e=n(J$e,"STRONG",{});var iut=s(p_e);cYo=r(iut,"hubert"),iut.forEach(t),fYo=r(J$e," \u2014 "),RX=n(J$e,"A",{href:!0});var dut=s(RX);mYo=r(dut,"HubertForSequenceClassification"),dut.forEach(t),gYo=r(J$e," (Hubert model)"),J$e.forEach(t),hYo=i(Ve),M6=n(Ve,"LI",{});var Y$e=s(M6);__e=n(Y$e,"STRONG",{});var cut=s(__e);pYo=r(cut,"sew"),cut.forEach(t),_Yo=r(Y$e," \u2014 "),PX=n(Y$e,"A",{href:!0});var fut=s(PX);uYo=r(fut,"SEWForSequenceClassification"),fut.forEach(t),bYo=r(Y$e," (SEW model)"),Y$e.forEach(t),vYo=i(Ve),E6=n(Ve,"LI",{});var K$e=s(E6);u_e=n(K$e,"STRONG",{});var mut=s(u_e);FYo=r(mut,"sew-d"),mut.forEach(t),TYo=r(K$e," \u2014 "),BX=n(K$e,"A",{href:!0});var gut=s(BX);MYo=r(gut,"SEWDForSequenceClassification"),gut.forEach(t),EYo=r(K$e," (SEW-D model)"),K$e.forEach(t),CYo=i(Ve),C6=n(Ve,"LI",{});var Z$e=s(C6);b_e=n(Z$e,"STRONG",{});var hut=s(b_e);wYo=r(hut,"unispeech"),hut.forEach(t),AYo=r(Z$e," \u2014 "),IX=n(Z$e,"A",{href:!0});var put=s(IX);yYo=r(put,"UniSpeechForSequenceClassification"),put.forEach(t),LYo=r(Z$e," (UniSpeech model)"),Z$e.forEach(t),xYo=i(Ve),w6=n(Ve,"LI",{});var eke=s(w6);v_e=n(eke,"STRONG",{});var _ut=s(v_e);$Yo=r(_ut,"unispeech-sat"),_ut.forEach(t),kYo=r(eke," \u2014 "),qX=n(eke,"A",{href:!0});var uut=s(qX);SYo=r(uut,"UniSpeechSatForSequenceClassification"),uut.forEach(t),RYo=r(eke," (UniSpeechSat model)"),eke.forEach(t),PYo=i(Ve),A6=n(Ve,"LI",{});var oke=s(A6);F_e=n(oke,"STRONG",{});var but=s(F_e);BYo=r(but,"wav2vec2"),but.forEach(t),IYo=r(oke," \u2014 "),NX=n(oke,"A",{href:!0});var vut=s(NX);qYo=r(vut,"Wav2Vec2ForSequenceClassification"),vut.forEach(t),NYo=r(oke," (Wav2Vec2 model)"),oke.forEach(t),jYo=i(Ve),y6=n(Ve,"LI",{});var rke=s(y6);T_e=n(rke,"STRONG",{});var Fut=s(T_e);DYo=r(Fut,"wav2vec2-conformer"),Fut.forEach(t),GYo=r(rke," \u2014 "),jX=n(rke,"A",{href:!0});var Tut=s(jX);OYo=r(Tut,"Wav2Vec2ConformerForSequenceClassification"),Tut.forEach(t),VYo=r(rke," (Wav2Vec2-Conformer model)"),rke.forEach(t),XYo=i(Ve),L6=n(Ve,"LI",{});var tke=s(L6);M_e=n(tke,"STRONG",{});var Mut=s(M_e);zYo=r(Mut,"wavlm"),Mut.forEach(t),WYo=r(tke," \u2014 "),DX=n(tke,"A",{href:!0});var Eut=s(DX);QYo=r(Eut,"WavLMForSequenceClassification"),Eut.forEach(t),HYo=r(tke," (WavLM model)"),tke.forEach(t),Ve.forEach(t),UYo=i(ha),x6=n(ha,"P",{});var ake=s(x6);JYo=r(ake,"The model is set in evaluation mode by default using "),E_e=n(ake,"CODE",{});var Cut=s(E_e);YYo=r(Cut,"model.eval()"),Cut.forEach(t),KYo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(ake,"CODE",{});var wut=s(C_e);ZYo=r(wut,"model.train()"),wut.forEach(t),ake.forEach(t),eKo=i(ha),T($6.$$.fragment,ha),ha.forEach(t),ol.forEach(t),vNe=i(f),gd=n(f,"H2",{class:!0});var EDe=s(gd);k6=n(EDe,"A",{id:!0,class:!0,href:!0});var Aut=s(k6);w_e=n(Aut,"SPAN",{});var yut=s(w_e);T(cy.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),oKo=i(EDe),A_e=n(EDe,"SPAN",{});var Lut=s(A_e);rKo=r(Lut,"AutoModelForAudioFrameClassification"),Lut.forEach(t),EDe.forEach(t),FNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(fy.$$.fragment,rl),tKo=i(rl),hd=n(rl,"P",{});var RZ=s(hd);aKo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),GX=n(RZ,"A",{href:!0});var xut=s(GX);nKo=r(xut,"from_pretrained()"),xut.forEach(t),sKo=r(RZ," class method or the "),OX=n(RZ,"A",{href:!0});var $ut=s(OX);lKo=r($ut,"from_config()"),$ut.forEach(t),iKo=r(RZ,` class
method.`),RZ.forEach(t),dKo=i(rl),my=n(rl,"P",{});var CDe=s(my);cKo=r(CDe,"This class cannot be instantiated directly using "),y_e=n(CDe,"CODE",{});var kut=s(y_e);fKo=r(kut,"__init__()"),kut.forEach(t),mKo=r(CDe," (throws an error)."),CDe.forEach(t),gKo=i(rl),bt=n(rl,"DIV",{class:!0});var ew=s(bt);T(gy.$$.fragment,ew),hKo=i(ew),L_e=n(ew,"P",{});var Sut=s(L_e);pKo=r(Sut,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Sut.forEach(t),_Ko=i(ew),pd=n(ew,"P",{});var PZ=s(pd);uKo=r(PZ,`Note:
Loading a model from its configuration file does `),x_e=n(PZ,"STRONG",{});var Rut=s(x_e);bKo=r(Rut,"not"),Rut.forEach(t),vKo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(PZ,"A",{href:!0});var Put=s(VX);FKo=r(Put,"from_pretrained()"),Put.forEach(t),TKo=r(PZ," to load the model weights."),PZ.forEach(t),MKo=i(ew),T(S6.$$.fragment,ew),ew.forEach(t),EKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(hy.$$.fragment,pa),CKo=i(pa),$_e=n(pa,"P",{});var But=s($_e);wKo=r(But,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),But.forEach(t),AKo=i(pa),Oa=n(pa,"P",{});var ow=s(Oa);yKo=r(ow,"The model class to instantiate is selected based on the "),k_e=n(ow,"CODE",{});var Iut=s(k_e);LKo=r(Iut,"model_type"),Iut.forEach(t),xKo=r(ow,` property of the config object (either
passed as an argument or loaded from `),S_e=n(ow,"CODE",{});var qut=s(S_e);$Ko=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),kKo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(ow,"CODE",{});var Nut=s(R_e);SKo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),RKo=r(ow,":"),ow.forEach(t),PKo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);R6=n(tl,"LI",{});var nke=s(R6);P_e=n(nke,"STRONG",{});var jut=s(P_e);BKo=r(jut,"data2vec-audio"),jut.forEach(t),IKo=r(nke," \u2014 "),XX=n(nke,"A",{href:!0});var Dut=s(XX);qKo=r(Dut,"Data2VecAudioForAudioFrameClassification"),Dut.forEach(t),NKo=r(nke," (Data2VecAudio model)"),nke.forEach(t),jKo=i(tl),P6=n(tl,"LI",{});var ske=s(P6);B_e=n(ske,"STRONG",{});var Gut=s(B_e);DKo=r(Gut,"unispeech-sat"),Gut.forEach(t),GKo=r(ske," \u2014 "),zX=n(ske,"A",{href:!0});var Out=s(zX);OKo=r(Out,"UniSpeechSatForAudioFrameClassification"),Out.forEach(t),VKo=r(ske," (UniSpeechSat model)"),ske.forEach(t),XKo=i(tl),B6=n(tl,"LI",{});var lke=s(B6);I_e=n(lke,"STRONG",{});var Vut=s(I_e);zKo=r(Vut,"wav2vec2"),Vut.forEach(t),WKo=r(lke," \u2014 "),WX=n(lke,"A",{href:!0});var Xut=s(WX);QKo=r(Xut,"Wav2Vec2ForAudioFrameClassification"),Xut.forEach(t),HKo=r(lke," (Wav2Vec2 model)"),lke.forEach(t),UKo=i(tl),I6=n(tl,"LI",{});var ike=s(I6);q_e=n(ike,"STRONG",{});var zut=s(q_e);JKo=r(zut,"wav2vec2-conformer"),zut.forEach(t),YKo=r(ike," \u2014 "),QX=n(ike,"A",{href:!0});var Wut=s(QX);KKo=r(Wut,"Wav2Vec2ConformerForAudioFrameClassification"),Wut.forEach(t),ZKo=r(ike," (Wav2Vec2-Conformer model)"),ike.forEach(t),eZo=i(tl),q6=n(tl,"LI",{});var dke=s(q6);N_e=n(dke,"STRONG",{});var Qut=s(N_e);oZo=r(Qut,"wavlm"),Qut.forEach(t),rZo=r(dke," \u2014 "),HX=n(dke,"A",{href:!0});var Hut=s(HX);tZo=r(Hut,"WavLMForAudioFrameClassification"),Hut.forEach(t),aZo=r(dke," (WavLM model)"),dke.forEach(t),tl.forEach(t),nZo=i(pa),N6=n(pa,"P",{});var cke=s(N6);sZo=r(cke,"The model is set in evaluation mode by default using "),j_e=n(cke,"CODE",{});var Uut=s(j_e);lZo=r(Uut,"model.eval()"),Uut.forEach(t),iZo=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(cke,"CODE",{});var Jut=s(D_e);dZo=r(Jut,"model.train()"),Jut.forEach(t),cke.forEach(t),cZo=i(pa),T(j6.$$.fragment,pa),pa.forEach(t),rl.forEach(t),TNe=i(f),_d=n(f,"H2",{class:!0});var wDe=s(_d);D6=n(wDe,"A",{id:!0,class:!0,href:!0});var Yut=s(D6);G_e=n(Yut,"SPAN",{});var Kut=s(G_e);T(py.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),fZo=i(wDe),O_e=n(wDe,"SPAN",{});var Zut=s(O_e);mZo=r(Zut,"AutoModelForCTC"),Zut.forEach(t),wDe.forEach(t),MNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(_y.$$.fragment,al),gZo=i(al),ud=n(al,"P",{});var BZ=s(ud);hZo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),UX=n(BZ,"A",{href:!0});var e2t=s(UX);pZo=r(e2t,"from_pretrained()"),e2t.forEach(t),_Zo=r(BZ," class method or the "),JX=n(BZ,"A",{href:!0});var o2t=s(JX);uZo=r(o2t,"from_config()"),o2t.forEach(t),bZo=r(BZ,` class
method.`),BZ.forEach(t),vZo=i(al),uy=n(al,"P",{});var ADe=s(uy);FZo=r(ADe,"This class cannot be instantiated directly using "),V_e=n(ADe,"CODE",{});var r2t=s(V_e);TZo=r(r2t,"__init__()"),r2t.forEach(t),MZo=r(ADe," (throws an error)."),ADe.forEach(t),EZo=i(al),vt=n(al,"DIV",{class:!0});var rw=s(vt);T(by.$$.fragment,rw),CZo=i(rw),X_e=n(rw,"P",{});var t2t=s(X_e);wZo=r(t2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),t2t.forEach(t),AZo=i(rw),bd=n(rw,"P",{});var IZ=s(bd);yZo=r(IZ,`Note:
Loading a model from its configuration file does `),z_e=n(IZ,"STRONG",{});var a2t=s(z_e);LZo=r(a2t,"not"),a2t.forEach(t),xZo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(IZ,"A",{href:!0});var n2t=s(YX);$Zo=r(n2t,"from_pretrained()"),n2t.forEach(t),kZo=r(IZ," to load the model weights."),IZ.forEach(t),SZo=i(rw),T(G6.$$.fragment,rw),rw.forEach(t),RZo=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(vy.$$.fragment,_a),PZo=i(_a),W_e=n(_a,"P",{});var s2t=s(W_e);BZo=r(s2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),s2t.forEach(t),IZo=i(_a),Va=n(_a,"P",{});var tw=s(Va);qZo=r(tw,"The model class to instantiate is selected based on the "),Q_e=n(tw,"CODE",{});var l2t=s(Q_e);NZo=r(l2t,"model_type"),l2t.forEach(t),jZo=r(tw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(tw,"CODE",{});var i2t=s(H_e);DZo=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),GZo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(tw,"CODE",{});var d2t=s(U_e);OZo=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),VZo=r(tw,":"),tw.forEach(t),XZo=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);O6=n(Xe,"LI",{});var fke=s(O6);J_e=n(fke,"STRONG",{});var c2t=s(J_e);zZo=r(c2t,"data2vec-audio"),c2t.forEach(t),WZo=r(fke," \u2014 "),KX=n(fke,"A",{href:!0});var f2t=s(KX);QZo=r(f2t,"Data2VecAudioForCTC"),f2t.forEach(t),HZo=r(fke," (Data2VecAudio model)"),fke.forEach(t),UZo=i(Xe),V6=n(Xe,"LI",{});var mke=s(V6);Y_e=n(mke,"STRONG",{});var m2t=s(Y_e);JZo=r(m2t,"hubert"),m2t.forEach(t),YZo=r(mke," \u2014 "),ZX=n(mke,"A",{href:!0});var g2t=s(ZX);KZo=r(g2t,"HubertForCTC"),g2t.forEach(t),ZZo=r(mke," (Hubert model)"),mke.forEach(t),eer=i(Xe),X6=n(Xe,"LI",{});var gke=s(X6);K_e=n(gke,"STRONG",{});var h2t=s(K_e);oer=r(h2t,"sew"),h2t.forEach(t),rer=r(gke," \u2014 "),ez=n(gke,"A",{href:!0});var p2t=s(ez);ter=r(p2t,"SEWForCTC"),p2t.forEach(t),aer=r(gke," (SEW model)"),gke.forEach(t),ner=i(Xe),z6=n(Xe,"LI",{});var hke=s(z6);Z_e=n(hke,"STRONG",{});var _2t=s(Z_e);ser=r(_2t,"sew-d"),_2t.forEach(t),ler=r(hke," \u2014 "),oz=n(hke,"A",{href:!0});var u2t=s(oz);ier=r(u2t,"SEWDForCTC"),u2t.forEach(t),der=r(hke," (SEW-D model)"),hke.forEach(t),cer=i(Xe),W6=n(Xe,"LI",{});var pke=s(W6);eue=n(pke,"STRONG",{});var b2t=s(eue);fer=r(b2t,"unispeech"),b2t.forEach(t),mer=r(pke," \u2014 "),rz=n(pke,"A",{href:!0});var v2t=s(rz);ger=r(v2t,"UniSpeechForCTC"),v2t.forEach(t),her=r(pke," (UniSpeech model)"),pke.forEach(t),per=i(Xe),Q6=n(Xe,"LI",{});var _ke=s(Q6);oue=n(_ke,"STRONG",{});var F2t=s(oue);_er=r(F2t,"unispeech-sat"),F2t.forEach(t),uer=r(_ke," \u2014 "),tz=n(_ke,"A",{href:!0});var T2t=s(tz);ber=r(T2t,"UniSpeechSatForCTC"),T2t.forEach(t),ver=r(_ke," (UniSpeechSat model)"),_ke.forEach(t),Fer=i(Xe),H6=n(Xe,"LI",{});var uke=s(H6);rue=n(uke,"STRONG",{});var M2t=s(rue);Ter=r(M2t,"wav2vec2"),M2t.forEach(t),Mer=r(uke," \u2014 "),az=n(uke,"A",{href:!0});var E2t=s(az);Eer=r(E2t,"Wav2Vec2ForCTC"),E2t.forEach(t),Cer=r(uke," (Wav2Vec2 model)"),uke.forEach(t),wer=i(Xe),U6=n(Xe,"LI",{});var bke=s(U6);tue=n(bke,"STRONG",{});var C2t=s(tue);Aer=r(C2t,"wav2vec2-conformer"),C2t.forEach(t),yer=r(bke," \u2014 "),nz=n(bke,"A",{href:!0});var w2t=s(nz);Ler=r(w2t,"Wav2Vec2ConformerForCTC"),w2t.forEach(t),xer=r(bke," (Wav2Vec2-Conformer model)"),bke.forEach(t),$er=i(Xe),J6=n(Xe,"LI",{});var vke=s(J6);aue=n(vke,"STRONG",{});var A2t=s(aue);ker=r(A2t,"wavlm"),A2t.forEach(t),Ser=r(vke," \u2014 "),sz=n(vke,"A",{href:!0});var y2t=s(sz);Rer=r(y2t,"WavLMForCTC"),y2t.forEach(t),Per=r(vke," (WavLM model)"),vke.forEach(t),Xe.forEach(t),Ber=i(_a),Y6=n(_a,"P",{});var Fke=s(Y6);Ier=r(Fke,"The model is set in evaluation mode by default using "),nue=n(Fke,"CODE",{});var L2t=s(nue);qer=r(L2t,"model.eval()"),L2t.forEach(t),Ner=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(Fke,"CODE",{});var x2t=s(sue);jer=r(x2t,"model.train()"),x2t.forEach(t),Fke.forEach(t),Der=i(_a),T(K6.$$.fragment,_a),_a.forEach(t),al.forEach(t),ENe=i(f),vd=n(f,"H2",{class:!0});var yDe=s(vd);Z6=n(yDe,"A",{id:!0,class:!0,href:!0});var $2t=s(Z6);lue=n($2t,"SPAN",{});var k2t=s(lue);T(Fy.$$.fragment,k2t),k2t.forEach(t),$2t.forEach(t),Ger=i(yDe),iue=n(yDe,"SPAN",{});var S2t=s(iue);Oer=r(S2t,"AutoModelForSpeechSeq2Seq"),S2t.forEach(t),yDe.forEach(t),CNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(Ty.$$.fragment,nl),Ver=i(nl),Fd=n(nl,"P",{});var qZ=s(Fd);Xer=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lz=n(qZ,"A",{href:!0});var R2t=s(lz);zer=r(R2t,"from_pretrained()"),R2t.forEach(t),Wer=r(qZ," class method or the "),iz=n(qZ,"A",{href:!0});var P2t=s(iz);Qer=r(P2t,"from_config()"),P2t.forEach(t),Her=r(qZ,` class
method.`),qZ.forEach(t),Uer=i(nl),My=n(nl,"P",{});var LDe=s(My);Jer=r(LDe,"This class cannot be instantiated directly using "),due=n(LDe,"CODE",{});var B2t=s(due);Yer=r(B2t,"__init__()"),B2t.forEach(t),Ker=r(LDe," (throws an error)."),LDe.forEach(t),Zer=i(nl),Ft=n(nl,"DIV",{class:!0});var aw=s(Ft);T(Ey.$$.fragment,aw),eor=i(aw),cue=n(aw,"P",{});var I2t=s(cue);oor=r(I2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I2t.forEach(t),ror=i(aw),Td=n(aw,"P",{});var NZ=s(Td);tor=r(NZ,`Note:
Loading a model from its configuration file does `),fue=n(NZ,"STRONG",{});var q2t=s(fue);aor=r(q2t,"not"),q2t.forEach(t),nor=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(NZ,"A",{href:!0});var N2t=s(dz);sor=r(N2t,"from_pretrained()"),N2t.forEach(t),lor=r(NZ," to load the model weights."),NZ.forEach(t),ior=i(aw),T(eT.$$.fragment,aw),aw.forEach(t),dor=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(Cy.$$.fragment,ua),cor=i(ua),mue=n(ua,"P",{});var j2t=s(mue);mor=r(j2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j2t.forEach(t),gor=i(ua),Xa=n(ua,"P",{});var nw=s(Xa);hor=r(nw,"The model class to instantiate is selected based on the "),gue=n(nw,"CODE",{});var D2t=s(gue);por=r(D2t,"model_type"),D2t.forEach(t),_or=r(nw,` property of the config object (either
passed as an argument or loaded from `),hue=n(nw,"CODE",{});var G2t=s(hue);uor=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),bor=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(nw,"CODE",{});var O2t=s(pue);vor=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),For=r(nw,":"),nw.forEach(t),Tor=i(ua),wy=n(ua,"UL",{});var xDe=s(wy);oT=n(xDe,"LI",{});var Tke=s(oT);_ue=n(Tke,"STRONG",{});var V2t=s(_ue);Mor=r(V2t,"speech-encoder-decoder"),V2t.forEach(t),Eor=r(Tke," \u2014 "),cz=n(Tke,"A",{href:!0});var X2t=s(cz);Cor=r(X2t,"SpeechEncoderDecoderModel"),X2t.forEach(t),wor=r(Tke," (Speech Encoder decoder model)"),Tke.forEach(t),Aor=i(xDe),rT=n(xDe,"LI",{});var Mke=s(rT);uue=n(Mke,"STRONG",{});var z2t=s(uue);yor=r(z2t,"speech_to_text"),z2t.forEach(t),Lor=r(Mke," \u2014 "),fz=n(Mke,"A",{href:!0});var W2t=s(fz);xor=r(W2t,"Speech2TextForConditionalGeneration"),W2t.forEach(t),$or=r(Mke," (Speech2Text model)"),Mke.forEach(t),xDe.forEach(t),kor=i(ua),tT=n(ua,"P",{});var Eke=s(tT);Sor=r(Eke,"The model is set in evaluation mode by default using "),bue=n(Eke,"CODE",{});var Q2t=s(bue);Ror=r(Q2t,"model.eval()"),Q2t.forEach(t),Por=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(Eke,"CODE",{});var H2t=s(vue);Bor=r(H2t,"model.train()"),H2t.forEach(t),Eke.forEach(t),Ior=i(ua),T(aT.$$.fragment,ua),ua.forEach(t),nl.forEach(t),wNe=i(f),Md=n(f,"H2",{class:!0});var $De=s(Md);nT=n($De,"A",{id:!0,class:!0,href:!0});var U2t=s(nT);Fue=n(U2t,"SPAN",{});var J2t=s(Fue);T(Ay.$$.fragment,J2t),J2t.forEach(t),U2t.forEach(t),qor=i($De),Tue=n($De,"SPAN",{});var Y2t=s(Tue);Nor=r(Y2t,"AutoModelForAudioXVector"),Y2t.forEach(t),$De.forEach(t),ANe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(yy.$$.fragment,sl),jor=i(sl),Ed=n(sl,"P",{});var jZ=s(Ed);Dor=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mz=n(jZ,"A",{href:!0});var K2t=s(mz);Gor=r(K2t,"from_pretrained()"),K2t.forEach(t),Oor=r(jZ," class method or the "),gz=n(jZ,"A",{href:!0});var Z2t=s(gz);Vor=r(Z2t,"from_config()"),Z2t.forEach(t),Xor=r(jZ,` class
method.`),jZ.forEach(t),zor=i(sl),Ly=n(sl,"P",{});var kDe=s(Ly);Wor=r(kDe,"This class cannot be instantiated directly using "),Mue=n(kDe,"CODE",{});var e1t=s(Mue);Qor=r(e1t,"__init__()"),e1t.forEach(t),Hor=r(kDe," (throws an error)."),kDe.forEach(t),Uor=i(sl),Tt=n(sl,"DIV",{class:!0});var sw=s(Tt);T(xy.$$.fragment,sw),Jor=i(sw),Eue=n(sw,"P",{});var o1t=s(Eue);Yor=r(o1t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),o1t.forEach(t),Kor=i(sw),Cd=n(sw,"P",{});var DZ=s(Cd);Zor=r(DZ,`Note:
Loading a model from its configuration file does `),Cue=n(DZ,"STRONG",{});var r1t=s(Cue);err=r(r1t,"not"),r1t.forEach(t),orr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(DZ,"A",{href:!0});var t1t=s(hz);rrr=r(t1t,"from_pretrained()"),t1t.forEach(t),trr=r(DZ," to load the model weights."),DZ.forEach(t),arr=i(sw),T(sT.$$.fragment,sw),sw.forEach(t),nrr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T($y.$$.fragment,ba),srr=i(ba),wue=n(ba,"P",{});var a1t=s(wue);lrr=r(a1t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),a1t.forEach(t),irr=i(ba),za=n(ba,"P",{});var lw=s(za);drr=r(lw,"The model class to instantiate is selected based on the "),Aue=n(lw,"CODE",{});var n1t=s(Aue);crr=r(n1t,"model_type"),n1t.forEach(t),frr=r(lw,` property of the config object (either
passed as an argument or loaded from `),yue=n(lw,"CODE",{});var s1t=s(yue);mrr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),grr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(lw,"CODE",{});var l1t=s(Lue);hrr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),prr=r(lw,":"),lw.forEach(t),_rr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);lT=n(ll,"LI",{});var Cke=s(lT);xue=n(Cke,"STRONG",{});var i1t=s(xue);urr=r(i1t,"data2vec-audio"),i1t.forEach(t),brr=r(Cke," \u2014 "),pz=n(Cke,"A",{href:!0});var d1t=s(pz);vrr=r(d1t,"Data2VecAudioForXVector"),d1t.forEach(t),Frr=r(Cke," (Data2VecAudio model)"),Cke.forEach(t),Trr=i(ll),iT=n(ll,"LI",{});var wke=s(iT);$ue=n(wke,"STRONG",{});var c1t=s($ue);Mrr=r(c1t,"unispeech-sat"),c1t.forEach(t),Err=r(wke," \u2014 "),_z=n(wke,"A",{href:!0});var f1t=s(_z);Crr=r(f1t,"UniSpeechSatForXVector"),f1t.forEach(t),wrr=r(wke," (UniSpeechSat model)"),wke.forEach(t),Arr=i(ll),dT=n(ll,"LI",{});var Ake=s(dT);kue=n(Ake,"STRONG",{});var m1t=s(kue);yrr=r(m1t,"wav2vec2"),m1t.forEach(t),Lrr=r(Ake," \u2014 "),uz=n(Ake,"A",{href:!0});var g1t=s(uz);xrr=r(g1t,"Wav2Vec2ForXVector"),g1t.forEach(t),$rr=r(Ake," (Wav2Vec2 model)"),Ake.forEach(t),krr=i(ll),cT=n(ll,"LI",{});var yke=s(cT);Sue=n(yke,"STRONG",{});var h1t=s(Sue);Srr=r(h1t,"wav2vec2-conformer"),h1t.forEach(t),Rrr=r(yke," \u2014 "),bz=n(yke,"A",{href:!0});var p1t=s(bz);Prr=r(p1t,"Wav2Vec2ConformerForXVector"),p1t.forEach(t),Brr=r(yke," (Wav2Vec2-Conformer model)"),yke.forEach(t),Irr=i(ll),fT=n(ll,"LI",{});var Lke=s(fT);Rue=n(Lke,"STRONG",{});var _1t=s(Rue);qrr=r(_1t,"wavlm"),_1t.forEach(t),Nrr=r(Lke," \u2014 "),vz=n(Lke,"A",{href:!0});var u1t=s(vz);jrr=r(u1t,"WavLMForXVector"),u1t.forEach(t),Drr=r(Lke," (WavLM model)"),Lke.forEach(t),ll.forEach(t),Grr=i(ba),mT=n(ba,"P",{});var xke=s(mT);Orr=r(xke,"The model is set in evaluation mode by default using "),Pue=n(xke,"CODE",{});var b1t=s(Pue);Vrr=r(b1t,"model.eval()"),b1t.forEach(t),Xrr=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(xke,"CODE",{});var v1t=s(Bue);zrr=r(v1t,"model.train()"),v1t.forEach(t),xke.forEach(t),Wrr=i(ba),T(gT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),yNe=i(f),wd=n(f,"H2",{class:!0});var SDe=s(wd);hT=n(SDe,"A",{id:!0,class:!0,href:!0});var F1t=s(hT);Iue=n(F1t,"SPAN",{});var T1t=s(Iue);T(ky.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),Qrr=i(SDe),que=n(SDe,"SPAN",{});var M1t=s(que);Hrr=r(M1t,"AutoModelForMaskedImageModeling"),M1t.forEach(t),SDe.forEach(t),LNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(Sy.$$.fragment,il),Urr=i(il),Ad=n(il,"P",{});var GZ=s(Ad);Jrr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Fz=n(GZ,"A",{href:!0});var E1t=s(Fz);Yrr=r(E1t,"from_pretrained()"),E1t.forEach(t),Krr=r(GZ," class method or the "),Tz=n(GZ,"A",{href:!0});var C1t=s(Tz);Zrr=r(C1t,"from_config()"),C1t.forEach(t),etr=r(GZ,` class
method.`),GZ.forEach(t),otr=i(il),Ry=n(il,"P",{});var RDe=s(Ry);rtr=r(RDe,"This class cannot be instantiated directly using "),Nue=n(RDe,"CODE",{});var w1t=s(Nue);ttr=r(w1t,"__init__()"),w1t.forEach(t),atr=r(RDe," (throws an error)."),RDe.forEach(t),ntr=i(il),Mt=n(il,"DIV",{class:!0});var iw=s(Mt);T(Py.$$.fragment,iw),str=i(iw),jue=n(iw,"P",{});var A1t=s(jue);ltr=r(A1t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),A1t.forEach(t),itr=i(iw),yd=n(iw,"P",{});var OZ=s(yd);dtr=r(OZ,`Note:
Loading a model from its configuration file does `),Due=n(OZ,"STRONG",{});var y1t=s(Due);ctr=r(y1t,"not"),y1t.forEach(t),ftr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(OZ,"A",{href:!0});var L1t=s(Mz);mtr=r(L1t,"from_pretrained()"),L1t.forEach(t),gtr=r(OZ," to load the model weights."),OZ.forEach(t),htr=i(iw),T(pT.$$.fragment,iw),iw.forEach(t),ptr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(By.$$.fragment,va),_tr=i(va),Gue=n(va,"P",{});var x1t=s(Gue);utr=r(x1t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),x1t.forEach(t),btr=i(va),Wa=n(va,"P",{});var dw=s(Wa);vtr=r(dw,"The model class to instantiate is selected based on the "),Oue=n(dw,"CODE",{});var $1t=s(Oue);Ftr=r($1t,"model_type"),$1t.forEach(t),Ttr=r(dw,` property of the config object (either
passed as an argument or loaded from `),Vue=n(dw,"CODE",{});var k1t=s(Vue);Mtr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),Etr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(dw,"CODE",{});var S1t=s(Xue);Ctr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),wtr=r(dw,":"),dw.forEach(t),Atr=i(va),Ld=n(va,"UL",{});var VZ=s(Ld);_T=n(VZ,"LI",{});var $ke=s(_T);zue=n($ke,"STRONG",{});var R1t=s(zue);ytr=r(R1t,"deit"),R1t.forEach(t),Ltr=r($ke," \u2014 "),Ez=n($ke,"A",{href:!0});var P1t=s(Ez);xtr=r(P1t,"DeiTForMaskedImageModeling"),P1t.forEach(t),$tr=r($ke," (DeiT model)"),$ke.forEach(t),ktr=i(VZ),uT=n(VZ,"LI",{});var kke=s(uT);Wue=n(kke,"STRONG",{});var B1t=s(Wue);Str=r(B1t,"swin"),B1t.forEach(t),Rtr=r(kke," \u2014 "),Cz=n(kke,"A",{href:!0});var I1t=s(Cz);Ptr=r(I1t,"SwinForMaskedImageModeling"),I1t.forEach(t),Btr=r(kke," (Swin model)"),kke.forEach(t),Itr=i(VZ),bT=n(VZ,"LI",{});var Ske=s(bT);Que=n(Ske,"STRONG",{});var q1t=s(Que);qtr=r(q1t,"vit"),q1t.forEach(t),Ntr=r(Ske," \u2014 "),wz=n(Ske,"A",{href:!0});var N1t=s(wz);jtr=r(N1t,"ViTForMaskedImageModeling"),N1t.forEach(t),Dtr=r(Ske," (ViT model)"),Ske.forEach(t),VZ.forEach(t),Gtr=i(va),vT=n(va,"P",{});var Rke=s(vT);Otr=r(Rke,"The model is set in evaluation mode by default using "),Hue=n(Rke,"CODE",{});var j1t=s(Hue);Vtr=r(j1t,"model.eval()"),j1t.forEach(t),Xtr=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(Rke,"CODE",{});var D1t=s(Uue);ztr=r(D1t,"model.train()"),D1t.forEach(t),Rke.forEach(t),Wtr=i(va),T(FT.$$.fragment,va),va.forEach(t),il.forEach(t),xNe=i(f),xd=n(f,"H2",{class:!0});var PDe=s(xd);TT=n(PDe,"A",{id:!0,class:!0,href:!0});var G1t=s(TT);Jue=n(G1t,"SPAN",{});var O1t=s(Jue);T(Iy.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),Qtr=i(PDe),Yue=n(PDe,"SPAN",{});var V1t=s(Yue);Htr=r(V1t,"AutoModelForObjectDetection"),V1t.forEach(t),PDe.forEach(t),$Ne=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(qy.$$.fragment,dl),Utr=i(dl),$d=n(dl,"P",{});var XZ=s($d);Jtr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Az=n(XZ,"A",{href:!0});var X1t=s(Az);Ytr=r(X1t,"from_pretrained()"),X1t.forEach(t),Ktr=r(XZ," class method or the "),yz=n(XZ,"A",{href:!0});var z1t=s(yz);Ztr=r(z1t,"from_config()"),z1t.forEach(t),ear=r(XZ,` class
method.`),XZ.forEach(t),oar=i(dl),Ny=n(dl,"P",{});var BDe=s(Ny);rar=r(BDe,"This class cannot be instantiated directly using "),Kue=n(BDe,"CODE",{});var W1t=s(Kue);tar=r(W1t,"__init__()"),W1t.forEach(t),aar=r(BDe," (throws an error)."),BDe.forEach(t),nar=i(dl),Et=n(dl,"DIV",{class:!0});var cw=s(Et);T(jy.$$.fragment,cw),sar=i(cw),Zue=n(cw,"P",{});var Q1t=s(Zue);lar=r(Q1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Q1t.forEach(t),iar=i(cw),kd=n(cw,"P",{});var zZ=s(kd);dar=r(zZ,`Note:
Loading a model from its configuration file does `),e2e=n(zZ,"STRONG",{});var H1t=s(e2e);car=r(H1t,"not"),H1t.forEach(t),far=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(zZ,"A",{href:!0});var U1t=s(Lz);mar=r(U1t,"from_pretrained()"),U1t.forEach(t),gar=r(zZ," to load the model weights."),zZ.forEach(t),har=i(cw),T(MT.$$.fragment,cw),cw.forEach(t),par=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(Dy.$$.fragment,Fa),_ar=i(Fa),o2e=n(Fa,"P",{});var J1t=s(o2e);uar=r(J1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),J1t.forEach(t),bar=i(Fa),Qa=n(Fa,"P",{});var fw=s(Qa);Far=r(fw,"The model class to instantiate is selected based on the "),r2e=n(fw,"CODE",{});var Y1t=s(r2e);Tar=r(Y1t,"model_type"),Y1t.forEach(t),Mar=r(fw,` property of the config object (either
passed as an argument or loaded from `),t2e=n(fw,"CODE",{});var K1t=s(t2e);Ear=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),Car=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(fw,"CODE",{});var Z1t=s(a2e);war=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),Aar=r(fw,":"),fw.forEach(t),yar=i(Fa),Gy=n(Fa,"UL",{});var IDe=s(Gy);ET=n(IDe,"LI",{});var Pke=s(ET);n2e=n(Pke,"STRONG",{});var ebt=s(n2e);Lar=r(ebt,"detr"),ebt.forEach(t),xar=r(Pke," \u2014 "),xz=n(Pke,"A",{href:!0});var obt=s(xz);$ar=r(obt,"DetrForObjectDetection"),obt.forEach(t),kar=r(Pke," (DETR model)"),Pke.forEach(t),Sar=i(IDe),CT=n(IDe,"LI",{});var Bke=s(CT);s2e=n(Bke,"STRONG",{});var rbt=s(s2e);Rar=r(rbt,"yolos"),rbt.forEach(t),Par=r(Bke," \u2014 "),$z=n(Bke,"A",{href:!0});var tbt=s($z);Bar=r(tbt,"YolosForObjectDetection"),tbt.forEach(t),Iar=r(Bke," (YOLOS model)"),Bke.forEach(t),IDe.forEach(t),qar=i(Fa),wT=n(Fa,"P",{});var Ike=s(wT);Nar=r(Ike,"The model is set in evaluation mode by default using "),l2e=n(Ike,"CODE",{});var abt=s(l2e);jar=r(abt,"model.eval()"),abt.forEach(t),Dar=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(Ike,"CODE",{});var nbt=s(i2e);Gar=r(nbt,"model.train()"),nbt.forEach(t),Ike.forEach(t),Oar=i(Fa),T(AT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),kNe=i(f),Sd=n(f,"H2",{class:!0});var qDe=s(Sd);yT=n(qDe,"A",{id:!0,class:!0,href:!0});var sbt=s(yT);d2e=n(sbt,"SPAN",{});var lbt=s(d2e);T(Oy.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),Var=i(qDe),c2e=n(qDe,"SPAN",{});var ibt=s(c2e);Xar=r(ibt,"AutoModelForImageSegmentation"),ibt.forEach(t),qDe.forEach(t),SNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Vy.$$.fragment,cl),zar=i(cl),Rd=n(cl,"P",{});var WZ=s(Rd);War=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kz=n(WZ,"A",{href:!0});var dbt=s(kz);Qar=r(dbt,"from_pretrained()"),dbt.forEach(t),Har=r(WZ," class method or the "),Sz=n(WZ,"A",{href:!0});var cbt=s(Sz);Uar=r(cbt,"from_config()"),cbt.forEach(t),Jar=r(WZ,` class
method.`),WZ.forEach(t),Yar=i(cl),Xy=n(cl,"P",{});var NDe=s(Xy);Kar=r(NDe,"This class cannot be instantiated directly using "),f2e=n(NDe,"CODE",{});var fbt=s(f2e);Zar=r(fbt,"__init__()"),fbt.forEach(t),enr=r(NDe," (throws an error)."),NDe.forEach(t),onr=i(cl),Ct=n(cl,"DIV",{class:!0});var mw=s(Ct);T(zy.$$.fragment,mw),rnr=i(mw),m2e=n(mw,"P",{});var mbt=s(m2e);tnr=r(mbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mbt.forEach(t),anr=i(mw),Pd=n(mw,"P",{});var QZ=s(Pd);nnr=r(QZ,`Note:
Loading a model from its configuration file does `),g2e=n(QZ,"STRONG",{});var gbt=s(g2e);snr=r(gbt,"not"),gbt.forEach(t),lnr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(QZ,"A",{href:!0});var hbt=s(Rz);inr=r(hbt,"from_pretrained()"),hbt.forEach(t),dnr=r(QZ," to load the model weights."),QZ.forEach(t),cnr=i(mw),T(LT.$$.fragment,mw),mw.forEach(t),fnr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(Wy.$$.fragment,Ta),mnr=i(Ta),h2e=n(Ta,"P",{});var pbt=s(h2e);gnr=r(pbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pbt.forEach(t),hnr=i(Ta),Ha=n(Ta,"P",{});var gw=s(Ha);pnr=r(gw,"The model class to instantiate is selected based on the "),p2e=n(gw,"CODE",{});var _bt=s(p2e);_nr=r(_bt,"model_type"),_bt.forEach(t),unr=r(gw,` property of the config object (either
passed as an argument or loaded from `),_2e=n(gw,"CODE",{});var ubt=s(_2e);bnr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),vnr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(gw,"CODE",{});var bbt=s(u2e);Fnr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Tnr=r(gw,":"),gw.forEach(t),Mnr=i(Ta),b2e=n(Ta,"UL",{});var vbt=s(b2e);xT=n(vbt,"LI",{});var qke=s(xT);v2e=n(qke,"STRONG",{});var Fbt=s(v2e);Enr=r(Fbt,"detr"),Fbt.forEach(t),Cnr=r(qke," \u2014 "),Pz=n(qke,"A",{href:!0});var Tbt=s(Pz);wnr=r(Tbt,"DetrForSegmentation"),Tbt.forEach(t),Anr=r(qke," (DETR model)"),qke.forEach(t),vbt.forEach(t),ynr=i(Ta),$T=n(Ta,"P",{});var Nke=s($T);Lnr=r(Nke,"The model is set in evaluation mode by default using "),F2e=n(Nke,"CODE",{});var Mbt=s(F2e);xnr=r(Mbt,"model.eval()"),Mbt.forEach(t),$nr=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(Nke,"CODE",{});var Ebt=s(T2e);knr=r(Ebt,"model.train()"),Ebt.forEach(t),Nke.forEach(t),Snr=i(Ta),T(kT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),RNe=i(f),Bd=n(f,"H2",{class:!0});var jDe=s(Bd);ST=n(jDe,"A",{id:!0,class:!0,href:!0});var Cbt=s(ST);M2e=n(Cbt,"SPAN",{});var wbt=s(M2e);T(Qy.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),Rnr=i(jDe),E2e=n(jDe,"SPAN",{});var Abt=s(E2e);Pnr=r(Abt,"AutoModelForSemanticSegmentation"),Abt.forEach(t),jDe.forEach(t),PNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Hy.$$.fragment,fl),Bnr=i(fl),Id=n(fl,"P",{});var HZ=s(Id);Inr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Bz=n(HZ,"A",{href:!0});var ybt=s(Bz);qnr=r(ybt,"from_pretrained()"),ybt.forEach(t),Nnr=r(HZ," class method or the "),Iz=n(HZ,"A",{href:!0});var Lbt=s(Iz);jnr=r(Lbt,"from_config()"),Lbt.forEach(t),Dnr=r(HZ,` class
method.`),HZ.forEach(t),Gnr=i(fl),Uy=n(fl,"P",{});var DDe=s(Uy);Onr=r(DDe,"This class cannot be instantiated directly using "),C2e=n(DDe,"CODE",{});var xbt=s(C2e);Vnr=r(xbt,"__init__()"),xbt.forEach(t),Xnr=r(DDe," (throws an error)."),DDe.forEach(t),znr=i(fl),wt=n(fl,"DIV",{class:!0});var hw=s(wt);T(Jy.$$.fragment,hw),Wnr=i(hw),w2e=n(hw,"P",{});var $bt=s(w2e);Qnr=r($bt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$bt.forEach(t),Hnr=i(hw),qd=n(hw,"P",{});var UZ=s(qd);Unr=r(UZ,`Note:
Loading a model from its configuration file does `),A2e=n(UZ,"STRONG",{});var kbt=s(A2e);Jnr=r(kbt,"not"),kbt.forEach(t),Ynr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(UZ,"A",{href:!0});var Sbt=s(qz);Knr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),Znr=r(UZ," to load the model weights."),UZ.forEach(t),esr=i(hw),T(RT.$$.fragment,hw),hw.forEach(t),osr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(Yy.$$.fragment,Ma),rsr=i(Ma),y2e=n(Ma,"P",{});var Rbt=s(y2e);tsr=r(Rbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rbt.forEach(t),asr=i(Ma),Ua=n(Ma,"P",{});var pw=s(Ua);nsr=r(pw,"The model class to instantiate is selected based on the "),L2e=n(pw,"CODE",{});var Pbt=s(L2e);ssr=r(Pbt,"model_type"),Pbt.forEach(t),lsr=r(pw,` property of the config object (either
passed as an argument or loaded from `),x2e=n(pw,"CODE",{});var Bbt=s(x2e);isr=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),dsr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(pw,"CODE",{});var Ibt=s($2e);csr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),fsr=r(pw,":"),pw.forEach(t),msr=i(Ma),Ja=n(Ma,"UL",{});var _w=s(Ja);PT=n(_w,"LI",{});var jke=s(PT);k2e=n(jke,"STRONG",{});var qbt=s(k2e);gsr=r(qbt,"beit"),qbt.forEach(t),hsr=r(jke," \u2014 "),Nz=n(jke,"A",{href:!0});var Nbt=s(Nz);psr=r(Nbt,"BeitForSemanticSegmentation"),Nbt.forEach(t),_sr=r(jke," (BEiT model)"),jke.forEach(t),usr=i(_w),BT=n(_w,"LI",{});var Dke=s(BT);S2e=n(Dke,"STRONG",{});var jbt=s(S2e);bsr=r(jbt,"data2vec-vision"),jbt.forEach(t),vsr=r(Dke," \u2014 "),jz=n(Dke,"A",{href:!0});var Dbt=s(jz);Fsr=r(Dbt,"Data2VecVisionForSemanticSegmentation"),Dbt.forEach(t),Tsr=r(Dke," (Data2VecVision model)"),Dke.forEach(t),Msr=i(_w),IT=n(_w,"LI",{});var Gke=s(IT);R2e=n(Gke,"STRONG",{});var Gbt=s(R2e);Esr=r(Gbt,"dpt"),Gbt.forEach(t),Csr=r(Gke," \u2014 "),Dz=n(Gke,"A",{href:!0});var Obt=s(Dz);wsr=r(Obt,"DPTForSemanticSegmentation"),Obt.forEach(t),Asr=r(Gke," (DPT model)"),Gke.forEach(t),ysr=i(_w),qT=n(_w,"LI",{});var Oke=s(qT);P2e=n(Oke,"STRONG",{});var Vbt=s(P2e);Lsr=r(Vbt,"segformer"),Vbt.forEach(t),xsr=r(Oke," \u2014 "),Gz=n(Oke,"A",{href:!0});var Xbt=s(Gz);$sr=r(Xbt,"SegformerForSemanticSegmentation"),Xbt.forEach(t),ksr=r(Oke," (SegFormer model)"),Oke.forEach(t),_w.forEach(t),Ssr=i(Ma),NT=n(Ma,"P",{});var Vke=s(NT);Rsr=r(Vke,"The model is set in evaluation mode by default using "),B2e=n(Vke,"CODE",{});var zbt=s(B2e);Psr=r(zbt,"model.eval()"),zbt.forEach(t),Bsr=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(Vke,"CODE",{});var Wbt=s(I2e);Isr=r(Wbt,"model.train()"),Wbt.forEach(t),Vke.forEach(t),qsr=i(Ma),T(jT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),BNe=i(f),Nd=n(f,"H2",{class:!0});var GDe=s(Nd);DT=n(GDe,"A",{id:!0,class:!0,href:!0});var Qbt=s(DT);q2e=n(Qbt,"SPAN",{});var Hbt=s(q2e);T(Ky.$$.fragment,Hbt),Hbt.forEach(t),Qbt.forEach(t),Nsr=i(GDe),N2e=n(GDe,"SPAN",{});var Ubt=s(N2e);jsr=r(Ubt,"AutoModelForInstanceSegmentation"),Ubt.forEach(t),GDe.forEach(t),INe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(Zy.$$.fragment,ml),Dsr=i(ml),jd=n(ml,"P",{});var JZ=s(jd);Gsr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Oz=n(JZ,"A",{href:!0});var Jbt=s(Oz);Osr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),Vsr=r(JZ," class method or the "),Vz=n(JZ,"A",{href:!0});var Ybt=s(Vz);Xsr=r(Ybt,"from_config()"),Ybt.forEach(t),zsr=r(JZ,` class
method.`),JZ.forEach(t),Wsr=i(ml),eL=n(ml,"P",{});var ODe=s(eL);Qsr=r(ODe,"This class cannot be instantiated directly using "),j2e=n(ODe,"CODE",{});var Kbt=s(j2e);Hsr=r(Kbt,"__init__()"),Kbt.forEach(t),Usr=r(ODe," (throws an error)."),ODe.forEach(t),Jsr=i(ml),At=n(ml,"DIV",{class:!0});var uw=s(At);T(oL.$$.fragment,uw),Ysr=i(uw),D2e=n(uw,"P",{});var Zbt=s(D2e);Ksr=r(Zbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zbt.forEach(t),Zsr=i(uw),Dd=n(uw,"P",{});var YZ=s(Dd);elr=r(YZ,`Note:
Loading a model from its configuration file does `),G2e=n(YZ,"STRONG",{});var evt=s(G2e);olr=r(evt,"not"),evt.forEach(t),rlr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(YZ,"A",{href:!0});var ovt=s(Xz);tlr=r(ovt,"from_pretrained()"),ovt.forEach(t),alr=r(YZ," to load the model weights."),YZ.forEach(t),nlr=i(uw),T(GT.$$.fragment,uw),uw.forEach(t),slr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(rL.$$.fragment,Ea),llr=i(Ea),O2e=n(Ea,"P",{});var rvt=s(O2e);ilr=r(rvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rvt.forEach(t),dlr=i(Ea),Ya=n(Ea,"P",{});var bw=s(Ya);clr=r(bw,"The model class to instantiate is selected based on the "),V2e=n(bw,"CODE",{});var tvt=s(V2e);flr=r(tvt,"model_type"),tvt.forEach(t),mlr=r(bw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(bw,"CODE",{});var avt=s(X2e);glr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),hlr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(bw,"CODE",{});var nvt=s(z2e);plr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),_lr=r(bw,":"),bw.forEach(t),ulr=i(Ea),W2e=n(Ea,"UL",{});var svt=s(W2e);OT=n(svt,"LI",{});var Xke=s(OT);Q2e=n(Xke,"STRONG",{});var lvt=s(Q2e);blr=r(lvt,"maskformer"),lvt.forEach(t),vlr=r(Xke," \u2014 "),zz=n(Xke,"A",{href:!0});var ivt=s(zz);Flr=r(ivt,"MaskFormerForInstanceSegmentation"),ivt.forEach(t),Tlr=r(Xke," (MaskFormer model)"),Xke.forEach(t),svt.forEach(t),Mlr=i(Ea),VT=n(Ea,"P",{});var zke=s(VT);Elr=r(zke,"The model is set in evaluation mode by default using "),H2e=n(zke,"CODE",{});var dvt=s(H2e);Clr=r(dvt,"model.eval()"),dvt.forEach(t),wlr=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(zke,"CODE",{});var cvt=s(U2e);Alr=r(cvt,"model.train()"),cvt.forEach(t),zke.forEach(t),ylr=i(Ea),T(XT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),qNe=i(f),Gd=n(f,"H2",{class:!0});var VDe=s(Gd);zT=n(VDe,"A",{id:!0,class:!0,href:!0});var fvt=s(zT);J2e=n(fvt,"SPAN",{});var mvt=s(J2e);T(tL.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),Llr=i(VDe),Y2e=n(VDe,"SPAN",{});var gvt=s(Y2e);xlr=r(gvt,"TFAutoModel"),gvt.forEach(t),VDe.forEach(t),NNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(aL.$$.fragment,gl),$lr=i(gl),Od=n(gl,"P",{});var KZ=s(Od);klr=r(KZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wz=n(KZ,"A",{href:!0});var hvt=s(Wz);Slr=r(hvt,"from_pretrained()"),hvt.forEach(t),Rlr=r(KZ," class method or the "),Qz=n(KZ,"A",{href:!0});var pvt=s(Qz);Plr=r(pvt,"from_config()"),pvt.forEach(t),Blr=r(KZ,` class
method.`),KZ.forEach(t),Ilr=i(gl),nL=n(gl,"P",{});var XDe=s(nL);qlr=r(XDe,"This class cannot be instantiated directly using "),K2e=n(XDe,"CODE",{});var _vt=s(K2e);Nlr=r(_vt,"__init__()"),_vt.forEach(t),jlr=r(XDe," (throws an error)."),XDe.forEach(t),Dlr=i(gl),yt=n(gl,"DIV",{class:!0});var vw=s(yt);T(sL.$$.fragment,vw),Glr=i(vw),Z2e=n(vw,"P",{});var uvt=s(Z2e);Olr=r(uvt,"Instantiates one of the base model classes of the library from a configuration."),uvt.forEach(t),Vlr=i(vw),Vd=n(vw,"P",{});var ZZ=s(Vd);Xlr=r(ZZ,`Note:
Loading a model from its configuration file does `),e1e=n(ZZ,"STRONG",{});var bvt=s(e1e);zlr=r(bvt,"not"),bvt.forEach(t),Wlr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(ZZ,"A",{href:!0});var vvt=s(Hz);Qlr=r(vvt,"from_pretrained()"),vvt.forEach(t),Hlr=r(ZZ," to load the model weights."),ZZ.forEach(t),Ulr=i(vw),T(WT.$$.fragment,vw),vw.forEach(t),Jlr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(lL.$$.fragment,hl),Ylr=i(hl),o1e=n(hl,"P",{});var Fvt=s(o1e);Klr=r(Fvt,"Instantiate one of the base model classes of the library from a pretrained model."),Fvt.forEach(t),Zlr=i(hl),Ka=n(hl,"P",{});var Fw=s(Ka);eir=r(Fw,"The model class to instantiate is selected based on the "),r1e=n(Fw,"CODE",{});var Tvt=s(r1e);oir=r(Tvt,"model_type"),Tvt.forEach(t),rir=r(Fw,` property of the config object (either
passed as an argument or loaded from `),t1e=n(Fw,"CODE",{});var Mvt=s(t1e);tir=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),air=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(Fw,"CODE",{});var Evt=s(a1e);nir=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),sir=r(Fw,":"),Fw.forEach(t),lir=i(hl),N=n(hl,"UL",{});var D=s(N);QT=n(D,"LI",{});var Wke=s(QT);n1e=n(Wke,"STRONG",{});var Cvt=s(n1e);iir=r(Cvt,"albert"),Cvt.forEach(t),dir=r(Wke," \u2014 "),Uz=n(Wke,"A",{href:!0});var wvt=s(Uz);cir=r(wvt,"TFAlbertModel"),wvt.forEach(t),fir=r(Wke," (ALBERT model)"),Wke.forEach(t),mir=i(D),HT=n(D,"LI",{});var Qke=s(HT);s1e=n(Qke,"STRONG",{});var Avt=s(s1e);gir=r(Avt,"bart"),Avt.forEach(t),hir=r(Qke," \u2014 "),Jz=n(Qke,"A",{href:!0});var yvt=s(Jz);pir=r(yvt,"TFBartModel"),yvt.forEach(t),_ir=r(Qke," (BART model)"),Qke.forEach(t),uir=i(D),UT=n(D,"LI",{});var Hke=s(UT);l1e=n(Hke,"STRONG",{});var Lvt=s(l1e);bir=r(Lvt,"bert"),Lvt.forEach(t),vir=r(Hke," \u2014 "),Yz=n(Hke,"A",{href:!0});var xvt=s(Yz);Fir=r(xvt,"TFBertModel"),xvt.forEach(t),Tir=r(Hke," (BERT model)"),Hke.forEach(t),Mir=i(D),JT=n(D,"LI",{});var Uke=s(JT);i1e=n(Uke,"STRONG",{});var $vt=s(i1e);Eir=r($vt,"blenderbot"),$vt.forEach(t),Cir=r(Uke," \u2014 "),Kz=n(Uke,"A",{href:!0});var kvt=s(Kz);wir=r(kvt,"TFBlenderbotModel"),kvt.forEach(t),Air=r(Uke," (Blenderbot model)"),Uke.forEach(t),yir=i(D),YT=n(D,"LI",{});var Jke=s(YT);d1e=n(Jke,"STRONG",{});var Svt=s(d1e);Lir=r(Svt,"blenderbot-small"),Svt.forEach(t),xir=r(Jke," \u2014 "),Zz=n(Jke,"A",{href:!0});var Rvt=s(Zz);$ir=r(Rvt,"TFBlenderbotSmallModel"),Rvt.forEach(t),kir=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),Sir=i(D),KT=n(D,"LI",{});var Yke=s(KT);c1e=n(Yke,"STRONG",{});var Pvt=s(c1e);Rir=r(Pvt,"camembert"),Pvt.forEach(t),Pir=r(Yke," \u2014 "),eW=n(Yke,"A",{href:!0});var Bvt=s(eW);Bir=r(Bvt,"TFCamembertModel"),Bvt.forEach(t),Iir=r(Yke," (CamemBERT model)"),Yke.forEach(t),qir=i(D),ZT=n(D,"LI",{});var Kke=s(ZT);f1e=n(Kke,"STRONG",{});var Ivt=s(f1e);Nir=r(Ivt,"clip"),Ivt.forEach(t),jir=r(Kke," \u2014 "),oW=n(Kke,"A",{href:!0});var qvt=s(oW);Dir=r(qvt,"TFCLIPModel"),qvt.forEach(t),Gir=r(Kke," (CLIP model)"),Kke.forEach(t),Oir=i(D),e7=n(D,"LI",{});var Zke=s(e7);m1e=n(Zke,"STRONG",{});var Nvt=s(m1e);Vir=r(Nvt,"convbert"),Nvt.forEach(t),Xir=r(Zke," \u2014 "),rW=n(Zke,"A",{href:!0});var jvt=s(rW);zir=r(jvt,"TFConvBertModel"),jvt.forEach(t),Wir=r(Zke," (ConvBERT model)"),Zke.forEach(t),Qir=i(D),o7=n(D,"LI",{});var eSe=s(o7);g1e=n(eSe,"STRONG",{});var Dvt=s(g1e);Hir=r(Dvt,"convnext"),Dvt.forEach(t),Uir=r(eSe," \u2014 "),tW=n(eSe,"A",{href:!0});var Gvt=s(tW);Jir=r(Gvt,"TFConvNextModel"),Gvt.forEach(t),Yir=r(eSe," (ConvNext model)"),eSe.forEach(t),Kir=i(D),r7=n(D,"LI",{});var oSe=s(r7);h1e=n(oSe,"STRONG",{});var Ovt=s(h1e);Zir=r(Ovt,"ctrl"),Ovt.forEach(t),edr=r(oSe," \u2014 "),aW=n(oSe,"A",{href:!0});var Vvt=s(aW);odr=r(Vvt,"TFCTRLModel"),Vvt.forEach(t),rdr=r(oSe," (CTRL model)"),oSe.forEach(t),tdr=i(D),t7=n(D,"LI",{});var rSe=s(t7);p1e=n(rSe,"STRONG",{});var Xvt=s(p1e);adr=r(Xvt,"data2vec-vision"),Xvt.forEach(t),ndr=r(rSe," \u2014 "),nW=n(rSe,"A",{href:!0});var zvt=s(nW);sdr=r(zvt,"TFData2VecVisionModel"),zvt.forEach(t),ldr=r(rSe," (Data2VecVision model)"),rSe.forEach(t),idr=i(D),a7=n(D,"LI",{});var tSe=s(a7);_1e=n(tSe,"STRONG",{});var Wvt=s(_1e);ddr=r(Wvt,"deberta"),Wvt.forEach(t),cdr=r(tSe," \u2014 "),sW=n(tSe,"A",{href:!0});var Qvt=s(sW);fdr=r(Qvt,"TFDebertaModel"),Qvt.forEach(t),mdr=r(tSe," (DeBERTa model)"),tSe.forEach(t),gdr=i(D),n7=n(D,"LI",{});var aSe=s(n7);u1e=n(aSe,"STRONG",{});var Hvt=s(u1e);hdr=r(Hvt,"deberta-v2"),Hvt.forEach(t),pdr=r(aSe," \u2014 "),lW=n(aSe,"A",{href:!0});var Uvt=s(lW);_dr=r(Uvt,"TFDebertaV2Model"),Uvt.forEach(t),udr=r(aSe," (DeBERTa-v2 model)"),aSe.forEach(t),bdr=i(D),s7=n(D,"LI",{});var nSe=s(s7);b1e=n(nSe,"STRONG",{});var Jvt=s(b1e);vdr=r(Jvt,"distilbert"),Jvt.forEach(t),Fdr=r(nSe," \u2014 "),iW=n(nSe,"A",{href:!0});var Yvt=s(iW);Tdr=r(Yvt,"TFDistilBertModel"),Yvt.forEach(t),Mdr=r(nSe," (DistilBERT model)"),nSe.forEach(t),Edr=i(D),l7=n(D,"LI",{});var sSe=s(l7);v1e=n(sSe,"STRONG",{});var Kvt=s(v1e);Cdr=r(Kvt,"dpr"),Kvt.forEach(t),wdr=r(sSe," \u2014 "),dW=n(sSe,"A",{href:!0});var Zvt=s(dW);Adr=r(Zvt,"TFDPRQuestionEncoder"),Zvt.forEach(t),ydr=r(sSe," (DPR model)"),sSe.forEach(t),Ldr=i(D),i7=n(D,"LI",{});var lSe=s(i7);F1e=n(lSe,"STRONG",{});var eFt=s(F1e);xdr=r(eFt,"electra"),eFt.forEach(t),$dr=r(lSe," \u2014 "),cW=n(lSe,"A",{href:!0});var oFt=s(cW);kdr=r(oFt,"TFElectraModel"),oFt.forEach(t),Sdr=r(lSe," (ELECTRA model)"),lSe.forEach(t),Rdr=i(D),d7=n(D,"LI",{});var iSe=s(d7);T1e=n(iSe,"STRONG",{});var rFt=s(T1e);Pdr=r(rFt,"flaubert"),rFt.forEach(t),Bdr=r(iSe," \u2014 "),fW=n(iSe,"A",{href:!0});var tFt=s(fW);Idr=r(tFt,"TFFlaubertModel"),tFt.forEach(t),qdr=r(iSe," (FlauBERT model)"),iSe.forEach(t),Ndr=i(D),Is=n(D,"LI",{});var j$=s(Is);M1e=n(j$,"STRONG",{});var aFt=s(M1e);jdr=r(aFt,"funnel"),aFt.forEach(t),Ddr=r(j$," \u2014 "),mW=n(j$,"A",{href:!0});var nFt=s(mW);Gdr=r(nFt,"TFFunnelModel"),nFt.forEach(t),Odr=r(j$," or "),gW=n(j$,"A",{href:!0});var sFt=s(gW);Vdr=r(sFt,"TFFunnelBaseModel"),sFt.forEach(t),Xdr=r(j$," (Funnel Transformer model)"),j$.forEach(t),zdr=i(D),c7=n(D,"LI",{});var dSe=s(c7);E1e=n(dSe,"STRONG",{});var lFt=s(E1e);Wdr=r(lFt,"gpt2"),lFt.forEach(t),Qdr=r(dSe," \u2014 "),hW=n(dSe,"A",{href:!0});var iFt=s(hW);Hdr=r(iFt,"TFGPT2Model"),iFt.forEach(t),Udr=r(dSe," (OpenAI GPT-2 model)"),dSe.forEach(t),Jdr=i(D),f7=n(D,"LI",{});var cSe=s(f7);C1e=n(cSe,"STRONG",{});var dFt=s(C1e);Ydr=r(dFt,"gptj"),dFt.forEach(t),Kdr=r(cSe," \u2014 "),pW=n(cSe,"A",{href:!0});var cFt=s(pW);Zdr=r(cFt,"TFGPTJModel"),cFt.forEach(t),ecr=r(cSe," (GPT-J model)"),cSe.forEach(t),ocr=i(D),m7=n(D,"LI",{});var fSe=s(m7);w1e=n(fSe,"STRONG",{});var fFt=s(w1e);rcr=r(fFt,"hubert"),fFt.forEach(t),tcr=r(fSe," \u2014 "),_W=n(fSe,"A",{href:!0});var mFt=s(_W);acr=r(mFt,"TFHubertModel"),mFt.forEach(t),ncr=r(fSe," (Hubert model)"),fSe.forEach(t),scr=i(D),g7=n(D,"LI",{});var mSe=s(g7);A1e=n(mSe,"STRONG",{});var gFt=s(A1e);lcr=r(gFt,"layoutlm"),gFt.forEach(t),icr=r(mSe," \u2014 "),uW=n(mSe,"A",{href:!0});var hFt=s(uW);dcr=r(hFt,"TFLayoutLMModel"),hFt.forEach(t),ccr=r(mSe," (LayoutLM model)"),mSe.forEach(t),fcr=i(D),h7=n(D,"LI",{});var gSe=s(h7);y1e=n(gSe,"STRONG",{});var pFt=s(y1e);mcr=r(pFt,"led"),pFt.forEach(t),gcr=r(gSe," \u2014 "),bW=n(gSe,"A",{href:!0});var _Ft=s(bW);hcr=r(_Ft,"TFLEDModel"),_Ft.forEach(t),pcr=r(gSe," (LED model)"),gSe.forEach(t),_cr=i(D),p7=n(D,"LI",{});var hSe=s(p7);L1e=n(hSe,"STRONG",{});var uFt=s(L1e);ucr=r(uFt,"longformer"),uFt.forEach(t),bcr=r(hSe," \u2014 "),vW=n(hSe,"A",{href:!0});var bFt=s(vW);vcr=r(bFt,"TFLongformerModel"),bFt.forEach(t),Fcr=r(hSe," (Longformer model)"),hSe.forEach(t),Tcr=i(D),_7=n(D,"LI",{});var pSe=s(_7);x1e=n(pSe,"STRONG",{});var vFt=s(x1e);Mcr=r(vFt,"lxmert"),vFt.forEach(t),Ecr=r(pSe," \u2014 "),FW=n(pSe,"A",{href:!0});var FFt=s(FW);Ccr=r(FFt,"TFLxmertModel"),FFt.forEach(t),wcr=r(pSe," (LXMERT model)"),pSe.forEach(t),Acr=i(D),u7=n(D,"LI",{});var _Se=s(u7);$1e=n(_Se,"STRONG",{});var TFt=s($1e);ycr=r(TFt,"marian"),TFt.forEach(t),Lcr=r(_Se," \u2014 "),TW=n(_Se,"A",{href:!0});var MFt=s(TW);xcr=r(MFt,"TFMarianModel"),MFt.forEach(t),$cr=r(_Se," (Marian model)"),_Se.forEach(t),kcr=i(D),b7=n(D,"LI",{});var uSe=s(b7);k1e=n(uSe,"STRONG",{});var EFt=s(k1e);Scr=r(EFt,"mbart"),EFt.forEach(t),Rcr=r(uSe," \u2014 "),MW=n(uSe,"A",{href:!0});var CFt=s(MW);Pcr=r(CFt,"TFMBartModel"),CFt.forEach(t),Bcr=r(uSe," (mBART model)"),uSe.forEach(t),Icr=i(D),v7=n(D,"LI",{});var bSe=s(v7);S1e=n(bSe,"STRONG",{});var wFt=s(S1e);qcr=r(wFt,"mobilebert"),wFt.forEach(t),Ncr=r(bSe," \u2014 "),EW=n(bSe,"A",{href:!0});var AFt=s(EW);jcr=r(AFt,"TFMobileBertModel"),AFt.forEach(t),Dcr=r(bSe," (MobileBERT model)"),bSe.forEach(t),Gcr=i(D),F7=n(D,"LI",{});var vSe=s(F7);R1e=n(vSe,"STRONG",{});var yFt=s(R1e);Ocr=r(yFt,"mpnet"),yFt.forEach(t),Vcr=r(vSe," \u2014 "),CW=n(vSe,"A",{href:!0});var LFt=s(CW);Xcr=r(LFt,"TFMPNetModel"),LFt.forEach(t),zcr=r(vSe," (MPNet model)"),vSe.forEach(t),Wcr=i(D),T7=n(D,"LI",{});var FSe=s(T7);P1e=n(FSe,"STRONG",{});var xFt=s(P1e);Qcr=r(xFt,"mt5"),xFt.forEach(t),Hcr=r(FSe," \u2014 "),wW=n(FSe,"A",{href:!0});var $Ft=s(wW);Ucr=r($Ft,"TFMT5Model"),$Ft.forEach(t),Jcr=r(FSe," (mT5 model)"),FSe.forEach(t),Ycr=i(D),M7=n(D,"LI",{});var TSe=s(M7);B1e=n(TSe,"STRONG",{});var kFt=s(B1e);Kcr=r(kFt,"openai-gpt"),kFt.forEach(t),Zcr=r(TSe," \u2014 "),AW=n(TSe,"A",{href:!0});var SFt=s(AW);efr=r(SFt,"TFOpenAIGPTModel"),SFt.forEach(t),ofr=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),rfr=i(D),E7=n(D,"LI",{});var MSe=s(E7);I1e=n(MSe,"STRONG",{});var RFt=s(I1e);tfr=r(RFt,"pegasus"),RFt.forEach(t),afr=r(MSe," \u2014 "),yW=n(MSe,"A",{href:!0});var PFt=s(yW);nfr=r(PFt,"TFPegasusModel"),PFt.forEach(t),sfr=r(MSe," (Pegasus model)"),MSe.forEach(t),lfr=i(D),C7=n(D,"LI",{});var ESe=s(C7);q1e=n(ESe,"STRONG",{});var BFt=s(q1e);ifr=r(BFt,"rembert"),BFt.forEach(t),dfr=r(ESe," \u2014 "),LW=n(ESe,"A",{href:!0});var IFt=s(LW);cfr=r(IFt,"TFRemBertModel"),IFt.forEach(t),ffr=r(ESe," (RemBERT model)"),ESe.forEach(t),mfr=i(D),w7=n(D,"LI",{});var CSe=s(w7);N1e=n(CSe,"STRONG",{});var qFt=s(N1e);gfr=r(qFt,"roberta"),qFt.forEach(t),hfr=r(CSe," \u2014 "),xW=n(CSe,"A",{href:!0});var NFt=s(xW);pfr=r(NFt,"TFRobertaModel"),NFt.forEach(t),_fr=r(CSe," (RoBERTa model)"),CSe.forEach(t),ufr=i(D),A7=n(D,"LI",{});var wSe=s(A7);j1e=n(wSe,"STRONG",{});var jFt=s(j1e);bfr=r(jFt,"roformer"),jFt.forEach(t),vfr=r(wSe," \u2014 "),$W=n(wSe,"A",{href:!0});var DFt=s($W);Ffr=r(DFt,"TFRoFormerModel"),DFt.forEach(t),Tfr=r(wSe," (RoFormer model)"),wSe.forEach(t),Mfr=i(D),y7=n(D,"LI",{});var ASe=s(y7);D1e=n(ASe,"STRONG",{});var GFt=s(D1e);Efr=r(GFt,"speech_to_text"),GFt.forEach(t),Cfr=r(ASe," \u2014 "),kW=n(ASe,"A",{href:!0});var OFt=s(kW);wfr=r(OFt,"TFSpeech2TextModel"),OFt.forEach(t),Afr=r(ASe," (Speech2Text model)"),ASe.forEach(t),yfr=i(D),L7=n(D,"LI",{});var ySe=s(L7);G1e=n(ySe,"STRONG",{});var VFt=s(G1e);Lfr=r(VFt,"swin"),VFt.forEach(t),xfr=r(ySe," \u2014 "),SW=n(ySe,"A",{href:!0});var XFt=s(SW);$fr=r(XFt,"TFSwinModel"),XFt.forEach(t),kfr=r(ySe," (Swin model)"),ySe.forEach(t),Sfr=i(D),x7=n(D,"LI",{});var LSe=s(x7);O1e=n(LSe,"STRONG",{});var zFt=s(O1e);Rfr=r(zFt,"t5"),zFt.forEach(t),Pfr=r(LSe," \u2014 "),RW=n(LSe,"A",{href:!0});var WFt=s(RW);Bfr=r(WFt,"TFT5Model"),WFt.forEach(t),Ifr=r(LSe," (T5 model)"),LSe.forEach(t),qfr=i(D),$7=n(D,"LI",{});var xSe=s($7);V1e=n(xSe,"STRONG",{});var QFt=s(V1e);Nfr=r(QFt,"tapas"),QFt.forEach(t),jfr=r(xSe," \u2014 "),PW=n(xSe,"A",{href:!0});var HFt=s(PW);Dfr=r(HFt,"TFTapasModel"),HFt.forEach(t),Gfr=r(xSe," (TAPAS model)"),xSe.forEach(t),Ofr=i(D),k7=n(D,"LI",{});var $Se=s(k7);X1e=n($Se,"STRONG",{});var UFt=s(X1e);Vfr=r(UFt,"transfo-xl"),UFt.forEach(t),Xfr=r($Se," \u2014 "),BW=n($Se,"A",{href:!0});var JFt=s(BW);zfr=r(JFt,"TFTransfoXLModel"),JFt.forEach(t),Wfr=r($Se," (Transformer-XL model)"),$Se.forEach(t),Qfr=i(D),S7=n(D,"LI",{});var kSe=s(S7);z1e=n(kSe,"STRONG",{});var YFt=s(z1e);Hfr=r(YFt,"vit"),YFt.forEach(t),Ufr=r(kSe," \u2014 "),IW=n(kSe,"A",{href:!0});var KFt=s(IW);Jfr=r(KFt,"TFViTModel"),KFt.forEach(t),Yfr=r(kSe," (ViT model)"),kSe.forEach(t),Kfr=i(D),R7=n(D,"LI",{});var SSe=s(R7);W1e=n(SSe,"STRONG",{});var ZFt=s(W1e);Zfr=r(ZFt,"vit_mae"),ZFt.forEach(t),emr=r(SSe," \u2014 "),qW=n(SSe,"A",{href:!0});var e6t=s(qW);omr=r(e6t,"TFViTMAEModel"),e6t.forEach(t),rmr=r(SSe," (ViTMAE model)"),SSe.forEach(t),tmr=i(D),P7=n(D,"LI",{});var RSe=s(P7);Q1e=n(RSe,"STRONG",{});var o6t=s(Q1e);amr=r(o6t,"wav2vec2"),o6t.forEach(t),nmr=r(RSe," \u2014 "),NW=n(RSe,"A",{href:!0});var r6t=s(NW);smr=r(r6t,"TFWav2Vec2Model"),r6t.forEach(t),lmr=r(RSe," (Wav2Vec2 model)"),RSe.forEach(t),imr=i(D),B7=n(D,"LI",{});var PSe=s(B7);H1e=n(PSe,"STRONG",{});var t6t=s(H1e);dmr=r(t6t,"xlm"),t6t.forEach(t),cmr=r(PSe," \u2014 "),jW=n(PSe,"A",{href:!0});var a6t=s(jW);fmr=r(a6t,"TFXLMModel"),a6t.forEach(t),mmr=r(PSe," (XLM model)"),PSe.forEach(t),gmr=i(D),I7=n(D,"LI",{});var BSe=s(I7);U1e=n(BSe,"STRONG",{});var n6t=s(U1e);hmr=r(n6t,"xlm-roberta"),n6t.forEach(t),pmr=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var s6t=s(DW);_mr=r(s6t,"TFXLMRobertaModel"),s6t.forEach(t),umr=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),bmr=i(D),q7=n(D,"LI",{});var ISe=s(q7);J1e=n(ISe,"STRONG",{});var l6t=s(J1e);vmr=r(l6t,"xlnet"),l6t.forEach(t),Fmr=r(ISe," \u2014 "),GW=n(ISe,"A",{href:!0});var i6t=s(GW);Tmr=r(i6t,"TFXLNetModel"),i6t.forEach(t),Mmr=r(ISe," (XLNet model)"),ISe.forEach(t),D.forEach(t),Emr=i(hl),T(N7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),jNe=i(f),Xd=n(f,"H2",{class:!0});var zDe=s(Xd);j7=n(zDe,"A",{id:!0,class:!0,href:!0});var d6t=s(j7);Y1e=n(d6t,"SPAN",{});var c6t=s(Y1e);T(iL.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),Cmr=i(zDe),K1e=n(zDe,"SPAN",{});var f6t=s(K1e);wmr=r(f6t,"TFAutoModelForPreTraining"),f6t.forEach(t),zDe.forEach(t),DNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(dL.$$.fragment,pl),Amr=i(pl),zd=n(pl,"P",{});var eee=s(zd);ymr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OW=n(eee,"A",{href:!0});var m6t=s(OW);Lmr=r(m6t,"from_pretrained()"),m6t.forEach(t),xmr=r(eee," class method or the "),VW=n(eee,"A",{href:!0});var g6t=s(VW);$mr=r(g6t,"from_config()"),g6t.forEach(t),kmr=r(eee,` class
method.`),eee.forEach(t),Smr=i(pl),cL=n(pl,"P",{});var WDe=s(cL);Rmr=r(WDe,"This class cannot be instantiated directly using "),Z1e=n(WDe,"CODE",{});var h6t=s(Z1e);Pmr=r(h6t,"__init__()"),h6t.forEach(t),Bmr=r(WDe," (throws an error)."),WDe.forEach(t),Imr=i(pl),Lt=n(pl,"DIV",{class:!0});var Tw=s(Lt);T(fL.$$.fragment,Tw),qmr=i(Tw),ebe=n(Tw,"P",{});var p6t=s(ebe);Nmr=r(p6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),p6t.forEach(t),jmr=i(Tw),Wd=n(Tw,"P",{});var oee=s(Wd);Dmr=r(oee,`Note:
Loading a model from its configuration file does `),obe=n(oee,"STRONG",{});var _6t=s(obe);Gmr=r(_6t,"not"),_6t.forEach(t),Omr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(oee,"A",{href:!0});var u6t=s(XW);Vmr=r(u6t,"from_pretrained()"),u6t.forEach(t),Xmr=r(oee," to load the model weights."),oee.forEach(t),zmr=i(Tw),T(D7.$$.fragment,Tw),Tw.forEach(t),Wmr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(mL.$$.fragment,_l),Qmr=i(_l),rbe=n(_l,"P",{});var b6t=s(rbe);Hmr=r(b6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b6t.forEach(t),Umr=i(_l),Za=n(_l,"P",{});var Mw=s(Za);Jmr=r(Mw,"The model class to instantiate is selected based on the "),tbe=n(Mw,"CODE",{});var v6t=s(tbe);Ymr=r(v6t,"model_type"),v6t.forEach(t),Kmr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),abe=n(Mw,"CODE",{});var F6t=s(abe);Zmr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),egr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(Mw,"CODE",{});var T6t=s(nbe);ogr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),rgr=r(Mw,":"),Mw.forEach(t),tgr=i(_l),se=n(_l,"UL",{});var le=s(se);G7=n(le,"LI",{});var qSe=s(G7);sbe=n(qSe,"STRONG",{});var M6t=s(sbe);agr=r(M6t,"albert"),M6t.forEach(t),ngr=r(qSe," \u2014 "),zW=n(qSe,"A",{href:!0});var E6t=s(zW);sgr=r(E6t,"TFAlbertForPreTraining"),E6t.forEach(t),lgr=r(qSe," (ALBERT model)"),qSe.forEach(t),igr=i(le),O7=n(le,"LI",{});var NSe=s(O7);lbe=n(NSe,"STRONG",{});var C6t=s(lbe);dgr=r(C6t,"bart"),C6t.forEach(t),cgr=r(NSe," \u2014 "),WW=n(NSe,"A",{href:!0});var w6t=s(WW);fgr=r(w6t,"TFBartForConditionalGeneration"),w6t.forEach(t),mgr=r(NSe," (BART model)"),NSe.forEach(t),ggr=i(le),V7=n(le,"LI",{});var jSe=s(V7);ibe=n(jSe,"STRONG",{});var A6t=s(ibe);hgr=r(A6t,"bert"),A6t.forEach(t),pgr=r(jSe," \u2014 "),QW=n(jSe,"A",{href:!0});var y6t=s(QW);_gr=r(y6t,"TFBertForPreTraining"),y6t.forEach(t),ugr=r(jSe," (BERT model)"),jSe.forEach(t),bgr=i(le),X7=n(le,"LI",{});var DSe=s(X7);dbe=n(DSe,"STRONG",{});var L6t=s(dbe);vgr=r(L6t,"camembert"),L6t.forEach(t),Fgr=r(DSe," \u2014 "),HW=n(DSe,"A",{href:!0});var x6t=s(HW);Tgr=r(x6t,"TFCamembertForMaskedLM"),x6t.forEach(t),Mgr=r(DSe," (CamemBERT model)"),DSe.forEach(t),Egr=i(le),z7=n(le,"LI",{});var GSe=s(z7);cbe=n(GSe,"STRONG",{});var $6t=s(cbe);Cgr=r($6t,"ctrl"),$6t.forEach(t),wgr=r(GSe," \u2014 "),UW=n(GSe,"A",{href:!0});var k6t=s(UW);Agr=r(k6t,"TFCTRLLMHeadModel"),k6t.forEach(t),ygr=r(GSe," (CTRL model)"),GSe.forEach(t),Lgr=i(le),W7=n(le,"LI",{});var OSe=s(W7);fbe=n(OSe,"STRONG",{});var S6t=s(fbe);xgr=r(S6t,"distilbert"),S6t.forEach(t),$gr=r(OSe," \u2014 "),JW=n(OSe,"A",{href:!0});var R6t=s(JW);kgr=r(R6t,"TFDistilBertForMaskedLM"),R6t.forEach(t),Sgr=r(OSe," (DistilBERT model)"),OSe.forEach(t),Rgr=i(le),Q7=n(le,"LI",{});var VSe=s(Q7);mbe=n(VSe,"STRONG",{});var P6t=s(mbe);Pgr=r(P6t,"electra"),P6t.forEach(t),Bgr=r(VSe," \u2014 "),YW=n(VSe,"A",{href:!0});var B6t=s(YW);Igr=r(B6t,"TFElectraForPreTraining"),B6t.forEach(t),qgr=r(VSe," (ELECTRA model)"),VSe.forEach(t),Ngr=i(le),H7=n(le,"LI",{});var XSe=s(H7);gbe=n(XSe,"STRONG",{});var I6t=s(gbe);jgr=r(I6t,"flaubert"),I6t.forEach(t),Dgr=r(XSe," \u2014 "),KW=n(XSe,"A",{href:!0});var q6t=s(KW);Ggr=r(q6t,"TFFlaubertWithLMHeadModel"),q6t.forEach(t),Ogr=r(XSe," (FlauBERT model)"),XSe.forEach(t),Vgr=i(le),U7=n(le,"LI",{});var zSe=s(U7);hbe=n(zSe,"STRONG",{});var N6t=s(hbe);Xgr=r(N6t,"funnel"),N6t.forEach(t),zgr=r(zSe," \u2014 "),ZW=n(zSe,"A",{href:!0});var j6t=s(ZW);Wgr=r(j6t,"TFFunnelForPreTraining"),j6t.forEach(t),Qgr=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),Hgr=i(le),J7=n(le,"LI",{});var WSe=s(J7);pbe=n(WSe,"STRONG",{});var D6t=s(pbe);Ugr=r(D6t,"gpt2"),D6t.forEach(t),Jgr=r(WSe," \u2014 "),eQ=n(WSe,"A",{href:!0});var G6t=s(eQ);Ygr=r(G6t,"TFGPT2LMHeadModel"),G6t.forEach(t),Kgr=r(WSe," (OpenAI GPT-2 model)"),WSe.forEach(t),Zgr=i(le),Y7=n(le,"LI",{});var QSe=s(Y7);_be=n(QSe,"STRONG",{});var O6t=s(_be);ehr=r(O6t,"layoutlm"),O6t.forEach(t),ohr=r(QSe," \u2014 "),oQ=n(QSe,"A",{href:!0});var V6t=s(oQ);rhr=r(V6t,"TFLayoutLMForMaskedLM"),V6t.forEach(t),thr=r(QSe," (LayoutLM model)"),QSe.forEach(t),ahr=i(le),K7=n(le,"LI",{});var HSe=s(K7);ube=n(HSe,"STRONG",{});var X6t=s(ube);nhr=r(X6t,"lxmert"),X6t.forEach(t),shr=r(HSe," \u2014 "),rQ=n(HSe,"A",{href:!0});var z6t=s(rQ);lhr=r(z6t,"TFLxmertForPreTraining"),z6t.forEach(t),ihr=r(HSe," (LXMERT model)"),HSe.forEach(t),dhr=i(le),Z7=n(le,"LI",{});var USe=s(Z7);bbe=n(USe,"STRONG",{});var W6t=s(bbe);chr=r(W6t,"mobilebert"),W6t.forEach(t),fhr=r(USe," \u2014 "),tQ=n(USe,"A",{href:!0});var Q6t=s(tQ);mhr=r(Q6t,"TFMobileBertForPreTraining"),Q6t.forEach(t),ghr=r(USe," (MobileBERT model)"),USe.forEach(t),hhr=i(le),e9=n(le,"LI",{});var JSe=s(e9);vbe=n(JSe,"STRONG",{});var H6t=s(vbe);phr=r(H6t,"mpnet"),H6t.forEach(t),_hr=r(JSe," \u2014 "),aQ=n(JSe,"A",{href:!0});var U6t=s(aQ);uhr=r(U6t,"TFMPNetForMaskedLM"),U6t.forEach(t),bhr=r(JSe," (MPNet model)"),JSe.forEach(t),vhr=i(le),o9=n(le,"LI",{});var YSe=s(o9);Fbe=n(YSe,"STRONG",{});var J6t=s(Fbe);Fhr=r(J6t,"openai-gpt"),J6t.forEach(t),Thr=r(YSe," \u2014 "),nQ=n(YSe,"A",{href:!0});var Y6t=s(nQ);Mhr=r(Y6t,"TFOpenAIGPTLMHeadModel"),Y6t.forEach(t),Ehr=r(YSe," (OpenAI GPT model)"),YSe.forEach(t),Chr=i(le),r9=n(le,"LI",{});var KSe=s(r9);Tbe=n(KSe,"STRONG",{});var K6t=s(Tbe);whr=r(K6t,"roberta"),K6t.forEach(t),Ahr=r(KSe," \u2014 "),sQ=n(KSe,"A",{href:!0});var Z6t=s(sQ);yhr=r(Z6t,"TFRobertaForMaskedLM"),Z6t.forEach(t),Lhr=r(KSe," (RoBERTa model)"),KSe.forEach(t),xhr=i(le),t9=n(le,"LI",{});var ZSe=s(t9);Mbe=n(ZSe,"STRONG",{});var eTt=s(Mbe);$hr=r(eTt,"t5"),eTt.forEach(t),khr=r(ZSe," \u2014 "),lQ=n(ZSe,"A",{href:!0});var oTt=s(lQ);Shr=r(oTt,"TFT5ForConditionalGeneration"),oTt.forEach(t),Rhr=r(ZSe," (T5 model)"),ZSe.forEach(t),Phr=i(le),a9=n(le,"LI",{});var eRe=s(a9);Ebe=n(eRe,"STRONG",{});var rTt=s(Ebe);Bhr=r(rTt,"tapas"),rTt.forEach(t),Ihr=r(eRe," \u2014 "),iQ=n(eRe,"A",{href:!0});var tTt=s(iQ);qhr=r(tTt,"TFTapasForMaskedLM"),tTt.forEach(t),Nhr=r(eRe," (TAPAS model)"),eRe.forEach(t),jhr=i(le),n9=n(le,"LI",{});var oRe=s(n9);Cbe=n(oRe,"STRONG",{});var aTt=s(Cbe);Dhr=r(aTt,"transfo-xl"),aTt.forEach(t),Ghr=r(oRe," \u2014 "),dQ=n(oRe,"A",{href:!0});var nTt=s(dQ);Ohr=r(nTt,"TFTransfoXLLMHeadModel"),nTt.forEach(t),Vhr=r(oRe," (Transformer-XL model)"),oRe.forEach(t),Xhr=i(le),s9=n(le,"LI",{});var rRe=s(s9);wbe=n(rRe,"STRONG",{});var sTt=s(wbe);zhr=r(sTt,"vit_mae"),sTt.forEach(t),Whr=r(rRe," \u2014 "),cQ=n(rRe,"A",{href:!0});var lTt=s(cQ);Qhr=r(lTt,"TFViTMAEForPreTraining"),lTt.forEach(t),Hhr=r(rRe," (ViTMAE model)"),rRe.forEach(t),Uhr=i(le),l9=n(le,"LI",{});var tRe=s(l9);Abe=n(tRe,"STRONG",{});var iTt=s(Abe);Jhr=r(iTt,"xlm"),iTt.forEach(t),Yhr=r(tRe," \u2014 "),fQ=n(tRe,"A",{href:!0});var dTt=s(fQ);Khr=r(dTt,"TFXLMWithLMHeadModel"),dTt.forEach(t),Zhr=r(tRe," (XLM model)"),tRe.forEach(t),epr=i(le),i9=n(le,"LI",{});var aRe=s(i9);ybe=n(aRe,"STRONG",{});var cTt=s(ybe);opr=r(cTt,"xlm-roberta"),cTt.forEach(t),rpr=r(aRe," \u2014 "),mQ=n(aRe,"A",{href:!0});var fTt=s(mQ);tpr=r(fTt,"TFXLMRobertaForMaskedLM"),fTt.forEach(t),apr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),npr=i(le),d9=n(le,"LI",{});var nRe=s(d9);Lbe=n(nRe,"STRONG",{});var mTt=s(Lbe);spr=r(mTt,"xlnet"),mTt.forEach(t),lpr=r(nRe," \u2014 "),gQ=n(nRe,"A",{href:!0});var gTt=s(gQ);ipr=r(gTt,"TFXLNetLMHeadModel"),gTt.forEach(t),dpr=r(nRe," (XLNet model)"),nRe.forEach(t),le.forEach(t),cpr=i(_l),T(c9.$$.fragment,_l),_l.forEach(t),pl.forEach(t),GNe=i(f),Qd=n(f,"H2",{class:!0});var QDe=s(Qd);f9=n(QDe,"A",{id:!0,class:!0,href:!0});var hTt=s(f9);xbe=n(hTt,"SPAN",{});var pTt=s(xbe);T(gL.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),fpr=i(QDe),$be=n(QDe,"SPAN",{});var _Tt=s($be);mpr=r(_Tt,"TFAutoModelForCausalLM"),_Tt.forEach(t),QDe.forEach(t),ONe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(hL.$$.fragment,ul),gpr=i(ul),Hd=n(ul,"P",{});var ree=s(Hd);hpr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=n(ree,"A",{href:!0});var uTt=s(hQ);ppr=r(uTt,"from_pretrained()"),uTt.forEach(t),_pr=r(ree," class method or the "),pQ=n(ree,"A",{href:!0});var bTt=s(pQ);upr=r(bTt,"from_config()"),bTt.forEach(t),bpr=r(ree,` class
method.`),ree.forEach(t),vpr=i(ul),pL=n(ul,"P",{});var HDe=s(pL);Fpr=r(HDe,"This class cannot be instantiated directly using "),kbe=n(HDe,"CODE",{});var vTt=s(kbe);Tpr=r(vTt,"__init__()"),vTt.forEach(t),Mpr=r(HDe," (throws an error)."),HDe.forEach(t),Epr=i(ul),xt=n(ul,"DIV",{class:!0});var Ew=s(xt);T(_L.$$.fragment,Ew),Cpr=i(Ew),Sbe=n(Ew,"P",{});var FTt=s(Sbe);wpr=r(FTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FTt.forEach(t),Apr=i(Ew),Ud=n(Ew,"P",{});var tee=s(Ud);ypr=r(tee,`Note:
Loading a model from its configuration file does `),Rbe=n(tee,"STRONG",{});var TTt=s(Rbe);Lpr=r(TTt,"not"),TTt.forEach(t),xpr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(tee,"A",{href:!0});var MTt=s(_Q);$pr=r(MTt,"from_pretrained()"),MTt.forEach(t),kpr=r(tee," to load the model weights."),tee.forEach(t),Spr=i(Ew),T(m9.$$.fragment,Ew),Ew.forEach(t),Rpr=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(uL.$$.fragment,bl),Ppr=i(bl),Pbe=n(bl,"P",{});var ETt=s(Pbe);Bpr=r(ETt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ETt.forEach(t),Ipr=i(bl),en=n(bl,"P",{});var Cw=s(en);qpr=r(Cw,"The model class to instantiate is selected based on the "),Bbe=n(Cw,"CODE",{});var CTt=s(Bbe);Npr=r(CTt,"model_type"),CTt.forEach(t),jpr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(Cw,"CODE",{});var wTt=s(Ibe);Dpr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),Gpr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(Cw,"CODE",{});var ATt=s(qbe);Opr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),Vpr=r(Cw,":"),Cw.forEach(t),Xpr=i(bl),Ee=n(bl,"UL",{});var we=s(Ee);g9=n(we,"LI",{});var sRe=s(g9);Nbe=n(sRe,"STRONG",{});var yTt=s(Nbe);zpr=r(yTt,"bert"),yTt.forEach(t),Wpr=r(sRe," \u2014 "),uQ=n(sRe,"A",{href:!0});var LTt=s(uQ);Qpr=r(LTt,"TFBertLMHeadModel"),LTt.forEach(t),Hpr=r(sRe," (BERT model)"),sRe.forEach(t),Upr=i(we),h9=n(we,"LI",{});var lRe=s(h9);jbe=n(lRe,"STRONG",{});var xTt=s(jbe);Jpr=r(xTt,"camembert"),xTt.forEach(t),Ypr=r(lRe," \u2014 "),bQ=n(lRe,"A",{href:!0});var $Tt=s(bQ);Kpr=r($Tt,"TFCamembertForCausalLM"),$Tt.forEach(t),Zpr=r(lRe," (CamemBERT model)"),lRe.forEach(t),e_r=i(we),p9=n(we,"LI",{});var iRe=s(p9);Dbe=n(iRe,"STRONG",{});var kTt=s(Dbe);o_r=r(kTt,"ctrl"),kTt.forEach(t),r_r=r(iRe," \u2014 "),vQ=n(iRe,"A",{href:!0});var STt=s(vQ);t_r=r(STt,"TFCTRLLMHeadModel"),STt.forEach(t),a_r=r(iRe," (CTRL model)"),iRe.forEach(t),n_r=i(we),_9=n(we,"LI",{});var dRe=s(_9);Gbe=n(dRe,"STRONG",{});var RTt=s(Gbe);s_r=r(RTt,"gpt2"),RTt.forEach(t),l_r=r(dRe," \u2014 "),FQ=n(dRe,"A",{href:!0});var PTt=s(FQ);i_r=r(PTt,"TFGPT2LMHeadModel"),PTt.forEach(t),d_r=r(dRe," (OpenAI GPT-2 model)"),dRe.forEach(t),c_r=i(we),u9=n(we,"LI",{});var cRe=s(u9);Obe=n(cRe,"STRONG",{});var BTt=s(Obe);f_r=r(BTt,"gptj"),BTt.forEach(t),m_r=r(cRe," \u2014 "),TQ=n(cRe,"A",{href:!0});var ITt=s(TQ);g_r=r(ITt,"TFGPTJForCausalLM"),ITt.forEach(t),h_r=r(cRe," (GPT-J model)"),cRe.forEach(t),p_r=i(we),b9=n(we,"LI",{});var fRe=s(b9);Vbe=n(fRe,"STRONG",{});var qTt=s(Vbe);__r=r(qTt,"openai-gpt"),qTt.forEach(t),u_r=r(fRe," \u2014 "),MQ=n(fRe,"A",{href:!0});var NTt=s(MQ);b_r=r(NTt,"TFOpenAIGPTLMHeadModel"),NTt.forEach(t),v_r=r(fRe," (OpenAI GPT model)"),fRe.forEach(t),F_r=i(we),v9=n(we,"LI",{});var mRe=s(v9);Xbe=n(mRe,"STRONG",{});var jTt=s(Xbe);T_r=r(jTt,"rembert"),jTt.forEach(t),M_r=r(mRe," \u2014 "),EQ=n(mRe,"A",{href:!0});var DTt=s(EQ);E_r=r(DTt,"TFRemBertForCausalLM"),DTt.forEach(t),C_r=r(mRe," (RemBERT model)"),mRe.forEach(t),w_r=i(we),F9=n(we,"LI",{});var gRe=s(F9);zbe=n(gRe,"STRONG",{});var GTt=s(zbe);A_r=r(GTt,"roberta"),GTt.forEach(t),y_r=r(gRe," \u2014 "),CQ=n(gRe,"A",{href:!0});var OTt=s(CQ);L_r=r(OTt,"TFRobertaForCausalLM"),OTt.forEach(t),x_r=r(gRe," (RoBERTa model)"),gRe.forEach(t),$_r=i(we),T9=n(we,"LI",{});var hRe=s(T9);Wbe=n(hRe,"STRONG",{});var VTt=s(Wbe);k_r=r(VTt,"roformer"),VTt.forEach(t),S_r=r(hRe," \u2014 "),wQ=n(hRe,"A",{href:!0});var XTt=s(wQ);R_r=r(XTt,"TFRoFormerForCausalLM"),XTt.forEach(t),P_r=r(hRe," (RoFormer model)"),hRe.forEach(t),B_r=i(we),M9=n(we,"LI",{});var pRe=s(M9);Qbe=n(pRe,"STRONG",{});var zTt=s(Qbe);I_r=r(zTt,"transfo-xl"),zTt.forEach(t),q_r=r(pRe," \u2014 "),AQ=n(pRe,"A",{href:!0});var WTt=s(AQ);N_r=r(WTt,"TFTransfoXLLMHeadModel"),WTt.forEach(t),j_r=r(pRe," (Transformer-XL model)"),pRe.forEach(t),D_r=i(we),E9=n(we,"LI",{});var _Re=s(E9);Hbe=n(_Re,"STRONG",{});var QTt=s(Hbe);G_r=r(QTt,"xlm"),QTt.forEach(t),O_r=r(_Re," \u2014 "),yQ=n(_Re,"A",{href:!0});var HTt=s(yQ);V_r=r(HTt,"TFXLMWithLMHeadModel"),HTt.forEach(t),X_r=r(_Re," (XLM model)"),_Re.forEach(t),z_r=i(we),C9=n(we,"LI",{});var uRe=s(C9);Ube=n(uRe,"STRONG",{});var UTt=s(Ube);W_r=r(UTt,"xlnet"),UTt.forEach(t),Q_r=r(uRe," \u2014 "),LQ=n(uRe,"A",{href:!0});var JTt=s(LQ);H_r=r(JTt,"TFXLNetLMHeadModel"),JTt.forEach(t),U_r=r(uRe," (XLNet model)"),uRe.forEach(t),we.forEach(t),J_r=i(bl),T(w9.$$.fragment,bl),bl.forEach(t),ul.forEach(t),VNe=i(f),Jd=n(f,"H2",{class:!0});var UDe=s(Jd);A9=n(UDe,"A",{id:!0,class:!0,href:!0});var YTt=s(A9);Jbe=n(YTt,"SPAN",{});var KTt=s(Jbe);T(bL.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),Y_r=i(UDe),Ybe=n(UDe,"SPAN",{});var ZTt=s(Ybe);K_r=r(ZTt,"TFAutoModelForImageClassification"),ZTt.forEach(t),UDe.forEach(t),XNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(vL.$$.fragment,vl),Z_r=i(vl),Yd=n(vl,"P",{});var aee=s(Yd);eur=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xQ=n(aee,"A",{href:!0});var e7t=s(xQ);our=r(e7t,"from_pretrained()"),e7t.forEach(t),rur=r(aee," class method or the "),$Q=n(aee,"A",{href:!0});var o7t=s($Q);tur=r(o7t,"from_config()"),o7t.forEach(t),aur=r(aee,` class
method.`),aee.forEach(t),nur=i(vl),FL=n(vl,"P",{});var JDe=s(FL);sur=r(JDe,"This class cannot be instantiated directly using "),Kbe=n(JDe,"CODE",{});var r7t=s(Kbe);lur=r(r7t,"__init__()"),r7t.forEach(t),iur=r(JDe," (throws an error)."),JDe.forEach(t),dur=i(vl),$t=n(vl,"DIV",{class:!0});var ww=s($t);T(TL.$$.fragment,ww),cur=i(ww),Zbe=n(ww,"P",{});var t7t=s(Zbe);fur=r(t7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t7t.forEach(t),mur=i(ww),Kd=n(ww,"P",{});var nee=s(Kd);gur=r(nee,`Note:
Loading a model from its configuration file does `),eve=n(nee,"STRONG",{});var a7t=s(eve);hur=r(a7t,"not"),a7t.forEach(t),pur=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(nee,"A",{href:!0});var n7t=s(kQ);_ur=r(n7t,"from_pretrained()"),n7t.forEach(t),uur=r(nee," to load the model weights."),nee.forEach(t),bur=i(ww),T(y9.$$.fragment,ww),ww.forEach(t),vur=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(ML.$$.fragment,Fl),Fur=i(Fl),ove=n(Fl,"P",{});var s7t=s(ove);Tur=r(s7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s7t.forEach(t),Mur=i(Fl),on=n(Fl,"P",{});var Aw=s(on);Eur=r(Aw,"The model class to instantiate is selected based on the "),rve=n(Aw,"CODE",{});var l7t=s(rve);Cur=r(l7t,"model_type"),l7t.forEach(t),wur=r(Aw,` property of the config object (either
passed as an argument or loaded from `),tve=n(Aw,"CODE",{});var i7t=s(tve);Aur=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),yur=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(Aw,"CODE",{});var d7t=s(ave);Lur=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),xur=r(Aw,":"),Aw.forEach(t),$ur=i(Fl),rn=n(Fl,"UL",{});var yw=s(rn);L9=n(yw,"LI",{});var bRe=s(L9);nve=n(bRe,"STRONG",{});var c7t=s(nve);kur=r(c7t,"convnext"),c7t.forEach(t),Sur=r(bRe," \u2014 "),SQ=n(bRe,"A",{href:!0});var f7t=s(SQ);Rur=r(f7t,"TFConvNextForImageClassification"),f7t.forEach(t),Pur=r(bRe," (ConvNext model)"),bRe.forEach(t),Bur=i(yw),x9=n(yw,"LI",{});var vRe=s(x9);sve=n(vRe,"STRONG",{});var m7t=s(sve);Iur=r(m7t,"data2vec-vision"),m7t.forEach(t),qur=r(vRe," \u2014 "),RQ=n(vRe,"A",{href:!0});var g7t=s(RQ);Nur=r(g7t,"TFData2VecVisionForImageClassification"),g7t.forEach(t),jur=r(vRe," (Data2VecVision model)"),vRe.forEach(t),Dur=i(yw),$9=n(yw,"LI",{});var FRe=s($9);lve=n(FRe,"STRONG",{});var h7t=s(lve);Gur=r(h7t,"swin"),h7t.forEach(t),Our=r(FRe," \u2014 "),PQ=n(FRe,"A",{href:!0});var p7t=s(PQ);Vur=r(p7t,"TFSwinForImageClassification"),p7t.forEach(t),Xur=r(FRe," (Swin model)"),FRe.forEach(t),zur=i(yw),k9=n(yw,"LI",{});var TRe=s(k9);ive=n(TRe,"STRONG",{});var _7t=s(ive);Wur=r(_7t,"vit"),_7t.forEach(t),Qur=r(TRe," \u2014 "),BQ=n(TRe,"A",{href:!0});var u7t=s(BQ);Hur=r(u7t,"TFViTForImageClassification"),u7t.forEach(t),Uur=r(TRe," (ViT model)"),TRe.forEach(t),yw.forEach(t),Jur=i(Fl),T(S9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),zNe=i(f),Zd=n(f,"H2",{class:!0});var YDe=s(Zd);R9=n(YDe,"A",{id:!0,class:!0,href:!0});var b7t=s(R9);dve=n(b7t,"SPAN",{});var v7t=s(dve);T(EL.$$.fragment,v7t),v7t.forEach(t),b7t.forEach(t),Yur=i(YDe),cve=n(YDe,"SPAN",{});var F7t=s(cve);Kur=r(F7t,"TFAutoModelForMaskedLM"),F7t.forEach(t),YDe.forEach(t),WNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(CL.$$.fragment,Tl),Zur=i(Tl),ec=n(Tl,"P",{});var see=s(ec);e2r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IQ=n(see,"A",{href:!0});var T7t=s(IQ);o2r=r(T7t,"from_pretrained()"),T7t.forEach(t),r2r=r(see," class method or the "),qQ=n(see,"A",{href:!0});var M7t=s(qQ);t2r=r(M7t,"from_config()"),M7t.forEach(t),a2r=r(see,` class
method.`),see.forEach(t),n2r=i(Tl),wL=n(Tl,"P",{});var KDe=s(wL);s2r=r(KDe,"This class cannot be instantiated directly using "),fve=n(KDe,"CODE",{});var E7t=s(fve);l2r=r(E7t,"__init__()"),E7t.forEach(t),i2r=r(KDe," (throws an error)."),KDe.forEach(t),d2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Lw=s(kt);T(AL.$$.fragment,Lw),c2r=i(Lw),mve=n(Lw,"P",{});var C7t=s(mve);f2r=r(C7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C7t.forEach(t),m2r=i(Lw),oc=n(Lw,"P",{});var lee=s(oc);g2r=r(lee,`Note:
Loading a model from its configuration file does `),gve=n(lee,"STRONG",{});var w7t=s(gve);h2r=r(w7t,"not"),w7t.forEach(t),p2r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(lee,"A",{href:!0});var A7t=s(NQ);_2r=r(A7t,"from_pretrained()"),A7t.forEach(t),u2r=r(lee," to load the model weights."),lee.forEach(t),b2r=i(Lw),T(P9.$$.fragment,Lw),Lw.forEach(t),v2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(yL.$$.fragment,Ml),F2r=i(Ml),hve=n(Ml,"P",{});var y7t=s(hve);T2r=r(y7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y7t.forEach(t),M2r=i(Ml),tn=n(Ml,"P",{});var xw=s(tn);E2r=r(xw,"The model class to instantiate is selected based on the "),pve=n(xw,"CODE",{});var L7t=s(pve);C2r=r(L7t,"model_type"),L7t.forEach(t),w2r=r(xw,` property of the config object (either
passed as an argument or loaded from `),_ve=n(xw,"CODE",{});var x7t=s(_ve);A2r=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),y2r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(xw,"CODE",{});var $7t=s(uve);L2r=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),x2r=r(xw,":"),xw.forEach(t),$2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);B9=n(fe,"LI",{});var MRe=s(B9);bve=n(MRe,"STRONG",{});var k7t=s(bve);k2r=r(k7t,"albert"),k7t.forEach(t),S2r=r(MRe," \u2014 "),jQ=n(MRe,"A",{href:!0});var S7t=s(jQ);R2r=r(S7t,"TFAlbertForMaskedLM"),S7t.forEach(t),P2r=r(MRe," (ALBERT model)"),MRe.forEach(t),B2r=i(fe),I9=n(fe,"LI",{});var ERe=s(I9);vve=n(ERe,"STRONG",{});var R7t=s(vve);I2r=r(R7t,"bert"),R7t.forEach(t),q2r=r(ERe," \u2014 "),DQ=n(ERe,"A",{href:!0});var P7t=s(DQ);N2r=r(P7t,"TFBertForMaskedLM"),P7t.forEach(t),j2r=r(ERe," (BERT model)"),ERe.forEach(t),D2r=i(fe),q9=n(fe,"LI",{});var CRe=s(q9);Fve=n(CRe,"STRONG",{});var B7t=s(Fve);G2r=r(B7t,"camembert"),B7t.forEach(t),O2r=r(CRe," \u2014 "),GQ=n(CRe,"A",{href:!0});var I7t=s(GQ);V2r=r(I7t,"TFCamembertForMaskedLM"),I7t.forEach(t),X2r=r(CRe," (CamemBERT model)"),CRe.forEach(t),z2r=i(fe),N9=n(fe,"LI",{});var wRe=s(N9);Tve=n(wRe,"STRONG",{});var q7t=s(Tve);W2r=r(q7t,"convbert"),q7t.forEach(t),Q2r=r(wRe," \u2014 "),OQ=n(wRe,"A",{href:!0});var N7t=s(OQ);H2r=r(N7t,"TFConvBertForMaskedLM"),N7t.forEach(t),U2r=r(wRe," (ConvBERT model)"),wRe.forEach(t),J2r=i(fe),j9=n(fe,"LI",{});var ARe=s(j9);Mve=n(ARe,"STRONG",{});var j7t=s(Mve);Y2r=r(j7t,"deberta"),j7t.forEach(t),K2r=r(ARe," \u2014 "),VQ=n(ARe,"A",{href:!0});var D7t=s(VQ);Z2r=r(D7t,"TFDebertaForMaskedLM"),D7t.forEach(t),e1r=r(ARe," (DeBERTa model)"),ARe.forEach(t),o1r=i(fe),D9=n(fe,"LI",{});var yRe=s(D9);Eve=n(yRe,"STRONG",{});var G7t=s(Eve);r1r=r(G7t,"deberta-v2"),G7t.forEach(t),t1r=r(yRe," \u2014 "),XQ=n(yRe,"A",{href:!0});var O7t=s(XQ);a1r=r(O7t,"TFDebertaV2ForMaskedLM"),O7t.forEach(t),n1r=r(yRe," (DeBERTa-v2 model)"),yRe.forEach(t),s1r=i(fe),G9=n(fe,"LI",{});var LRe=s(G9);Cve=n(LRe,"STRONG",{});var V7t=s(Cve);l1r=r(V7t,"distilbert"),V7t.forEach(t),i1r=r(LRe," \u2014 "),zQ=n(LRe,"A",{href:!0});var X7t=s(zQ);d1r=r(X7t,"TFDistilBertForMaskedLM"),X7t.forEach(t),c1r=r(LRe," (DistilBERT model)"),LRe.forEach(t),f1r=i(fe),O9=n(fe,"LI",{});var xRe=s(O9);wve=n(xRe,"STRONG",{});var z7t=s(wve);m1r=r(z7t,"electra"),z7t.forEach(t),g1r=r(xRe," \u2014 "),WQ=n(xRe,"A",{href:!0});var W7t=s(WQ);h1r=r(W7t,"TFElectraForMaskedLM"),W7t.forEach(t),p1r=r(xRe," (ELECTRA model)"),xRe.forEach(t),_1r=i(fe),V9=n(fe,"LI",{});var $Re=s(V9);Ave=n($Re,"STRONG",{});var Q7t=s(Ave);u1r=r(Q7t,"flaubert"),Q7t.forEach(t),b1r=r($Re," \u2014 "),QQ=n($Re,"A",{href:!0});var H7t=s(QQ);v1r=r(H7t,"TFFlaubertWithLMHeadModel"),H7t.forEach(t),F1r=r($Re," (FlauBERT model)"),$Re.forEach(t),T1r=i(fe),X9=n(fe,"LI",{});var kRe=s(X9);yve=n(kRe,"STRONG",{});var U7t=s(yve);M1r=r(U7t,"funnel"),U7t.forEach(t),E1r=r(kRe," \u2014 "),HQ=n(kRe,"A",{href:!0});var J7t=s(HQ);C1r=r(J7t,"TFFunnelForMaskedLM"),J7t.forEach(t),w1r=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),A1r=i(fe),z9=n(fe,"LI",{});var SRe=s(z9);Lve=n(SRe,"STRONG",{});var Y7t=s(Lve);y1r=r(Y7t,"layoutlm"),Y7t.forEach(t),L1r=r(SRe," \u2014 "),UQ=n(SRe,"A",{href:!0});var K7t=s(UQ);x1r=r(K7t,"TFLayoutLMForMaskedLM"),K7t.forEach(t),$1r=r(SRe," (LayoutLM model)"),SRe.forEach(t),k1r=i(fe),W9=n(fe,"LI",{});var RRe=s(W9);xve=n(RRe,"STRONG",{});var Z7t=s(xve);S1r=r(Z7t,"longformer"),Z7t.forEach(t),R1r=r(RRe," \u2014 "),JQ=n(RRe,"A",{href:!0});var e9t=s(JQ);P1r=r(e9t,"TFLongformerForMaskedLM"),e9t.forEach(t),B1r=r(RRe," (Longformer model)"),RRe.forEach(t),I1r=i(fe),Q9=n(fe,"LI",{});var PRe=s(Q9);$ve=n(PRe,"STRONG",{});var o9t=s($ve);q1r=r(o9t,"mobilebert"),o9t.forEach(t),N1r=r(PRe," \u2014 "),YQ=n(PRe,"A",{href:!0});var r9t=s(YQ);j1r=r(r9t,"TFMobileBertForMaskedLM"),r9t.forEach(t),D1r=r(PRe," (MobileBERT model)"),PRe.forEach(t),G1r=i(fe),H9=n(fe,"LI",{});var BRe=s(H9);kve=n(BRe,"STRONG",{});var t9t=s(kve);O1r=r(t9t,"mpnet"),t9t.forEach(t),V1r=r(BRe," \u2014 "),KQ=n(BRe,"A",{href:!0});var a9t=s(KQ);X1r=r(a9t,"TFMPNetForMaskedLM"),a9t.forEach(t),z1r=r(BRe," (MPNet model)"),BRe.forEach(t),W1r=i(fe),U9=n(fe,"LI",{});var IRe=s(U9);Sve=n(IRe,"STRONG",{});var n9t=s(Sve);Q1r=r(n9t,"rembert"),n9t.forEach(t),H1r=r(IRe," \u2014 "),ZQ=n(IRe,"A",{href:!0});var s9t=s(ZQ);U1r=r(s9t,"TFRemBertForMaskedLM"),s9t.forEach(t),J1r=r(IRe," (RemBERT model)"),IRe.forEach(t),Y1r=i(fe),J9=n(fe,"LI",{});var qRe=s(J9);Rve=n(qRe,"STRONG",{});var l9t=s(Rve);K1r=r(l9t,"roberta"),l9t.forEach(t),Z1r=r(qRe," \u2014 "),eH=n(qRe,"A",{href:!0});var i9t=s(eH);ebr=r(i9t,"TFRobertaForMaskedLM"),i9t.forEach(t),obr=r(qRe," (RoBERTa model)"),qRe.forEach(t),rbr=i(fe),Y9=n(fe,"LI",{});var NRe=s(Y9);Pve=n(NRe,"STRONG",{});var d9t=s(Pve);tbr=r(d9t,"roformer"),d9t.forEach(t),abr=r(NRe," \u2014 "),oH=n(NRe,"A",{href:!0});var c9t=s(oH);nbr=r(c9t,"TFRoFormerForMaskedLM"),c9t.forEach(t),sbr=r(NRe," (RoFormer model)"),NRe.forEach(t),lbr=i(fe),K9=n(fe,"LI",{});var jRe=s(K9);Bve=n(jRe,"STRONG",{});var f9t=s(Bve);ibr=r(f9t,"tapas"),f9t.forEach(t),dbr=r(jRe," \u2014 "),rH=n(jRe,"A",{href:!0});var m9t=s(rH);cbr=r(m9t,"TFTapasForMaskedLM"),m9t.forEach(t),fbr=r(jRe," (TAPAS model)"),jRe.forEach(t),mbr=i(fe),Z9=n(fe,"LI",{});var DRe=s(Z9);Ive=n(DRe,"STRONG",{});var g9t=s(Ive);gbr=r(g9t,"xlm"),g9t.forEach(t),hbr=r(DRe," \u2014 "),tH=n(DRe,"A",{href:!0});var h9t=s(tH);pbr=r(h9t,"TFXLMWithLMHeadModel"),h9t.forEach(t),_br=r(DRe," (XLM model)"),DRe.forEach(t),ubr=i(fe),eM=n(fe,"LI",{});var GRe=s(eM);qve=n(GRe,"STRONG",{});var p9t=s(qve);bbr=r(p9t,"xlm-roberta"),p9t.forEach(t),vbr=r(GRe," \u2014 "),aH=n(GRe,"A",{href:!0});var _9t=s(aH);Fbr=r(_9t,"TFXLMRobertaForMaskedLM"),_9t.forEach(t),Tbr=r(GRe," (XLM-RoBERTa model)"),GRe.forEach(t),fe.forEach(t),Mbr=i(Ml),T(oM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),QNe=i(f),rc=n(f,"H2",{class:!0});var ZDe=s(rc);rM=n(ZDe,"A",{id:!0,class:!0,href:!0});var u9t=s(rM);Nve=n(u9t,"SPAN",{});var b9t=s(Nve);T(LL.$$.fragment,b9t),b9t.forEach(t),u9t.forEach(t),Ebr=i(ZDe),jve=n(ZDe,"SPAN",{});var v9t=s(jve);Cbr=r(v9t,"TFAutoModelForSeq2SeqLM"),v9t.forEach(t),ZDe.forEach(t),HNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(xL.$$.fragment,El),wbr=i(El),tc=n(El,"P",{});var iee=s(tc);Abr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nH=n(iee,"A",{href:!0});var F9t=s(nH);ybr=r(F9t,"from_pretrained()"),F9t.forEach(t),Lbr=r(iee," class method or the "),sH=n(iee,"A",{href:!0});var T9t=s(sH);xbr=r(T9t,"from_config()"),T9t.forEach(t),$br=r(iee,` class
method.`),iee.forEach(t),kbr=i(El),$L=n(El,"P",{});var eGe=s($L);Sbr=r(eGe,"This class cannot be instantiated directly using "),Dve=n(eGe,"CODE",{});var M9t=s(Dve);Rbr=r(M9t,"__init__()"),M9t.forEach(t),Pbr=r(eGe," (throws an error)."),eGe.forEach(t),Bbr=i(El),St=n(El,"DIV",{class:!0});var $w=s(St);T(kL.$$.fragment,$w),Ibr=i($w),Gve=n($w,"P",{});var E9t=s(Gve);qbr=r(E9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E9t.forEach(t),Nbr=i($w),ac=n($w,"P",{});var dee=s(ac);jbr=r(dee,`Note:
Loading a model from its configuration file does `),Ove=n(dee,"STRONG",{});var C9t=s(Ove);Dbr=r(C9t,"not"),C9t.forEach(t),Gbr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(dee,"A",{href:!0});var w9t=s(lH);Obr=r(w9t,"from_pretrained()"),w9t.forEach(t),Vbr=r(dee," to load the model weights."),dee.forEach(t),Xbr=i($w),T(tM.$$.fragment,$w),$w.forEach(t),zbr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(SL.$$.fragment,Cl),Wbr=i(Cl),Vve=n(Cl,"P",{});var A9t=s(Vve);Qbr=r(A9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A9t.forEach(t),Hbr=i(Cl),an=n(Cl,"P",{});var kw=s(an);Ubr=r(kw,"The model class to instantiate is selected based on the "),Xve=n(kw,"CODE",{});var y9t=s(Xve);Jbr=r(y9t,"model_type"),y9t.forEach(t),Ybr=r(kw,` property of the config object (either
passed as an argument or loaded from `),zve=n(kw,"CODE",{});var L9t=s(zve);Kbr=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),Zbr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(kw,"CODE",{});var x9t=s(Wve);evr=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),ovr=r(kw,":"),kw.forEach(t),rvr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);aM=n(Be,"LI",{});var ORe=s(aM);Qve=n(ORe,"STRONG",{});var $9t=s(Qve);tvr=r($9t,"bart"),$9t.forEach(t),avr=r(ORe," \u2014 "),iH=n(ORe,"A",{href:!0});var k9t=s(iH);nvr=r(k9t,"TFBartForConditionalGeneration"),k9t.forEach(t),svr=r(ORe," (BART model)"),ORe.forEach(t),lvr=i(Be),nM=n(Be,"LI",{});var VRe=s(nM);Hve=n(VRe,"STRONG",{});var S9t=s(Hve);ivr=r(S9t,"blenderbot"),S9t.forEach(t),dvr=r(VRe," \u2014 "),dH=n(VRe,"A",{href:!0});var R9t=s(dH);cvr=r(R9t,"TFBlenderbotForConditionalGeneration"),R9t.forEach(t),fvr=r(VRe," (Blenderbot model)"),VRe.forEach(t),mvr=i(Be),sM=n(Be,"LI",{});var XRe=s(sM);Uve=n(XRe,"STRONG",{});var P9t=s(Uve);gvr=r(P9t,"blenderbot-small"),P9t.forEach(t),hvr=r(XRe," \u2014 "),cH=n(XRe,"A",{href:!0});var B9t=s(cH);pvr=r(B9t,"TFBlenderbotSmallForConditionalGeneration"),B9t.forEach(t),_vr=r(XRe," (BlenderbotSmall model)"),XRe.forEach(t),uvr=i(Be),lM=n(Be,"LI",{});var zRe=s(lM);Jve=n(zRe,"STRONG",{});var I9t=s(Jve);bvr=r(I9t,"encoder-decoder"),I9t.forEach(t),vvr=r(zRe," \u2014 "),fH=n(zRe,"A",{href:!0});var q9t=s(fH);Fvr=r(q9t,"TFEncoderDecoderModel"),q9t.forEach(t),Tvr=r(zRe," (Encoder decoder model)"),zRe.forEach(t),Mvr=i(Be),iM=n(Be,"LI",{});var WRe=s(iM);Yve=n(WRe,"STRONG",{});var N9t=s(Yve);Evr=r(N9t,"led"),N9t.forEach(t),Cvr=r(WRe," \u2014 "),mH=n(WRe,"A",{href:!0});var j9t=s(mH);wvr=r(j9t,"TFLEDForConditionalGeneration"),j9t.forEach(t),Avr=r(WRe," (LED model)"),WRe.forEach(t),yvr=i(Be),dM=n(Be,"LI",{});var QRe=s(dM);Kve=n(QRe,"STRONG",{});var D9t=s(Kve);Lvr=r(D9t,"marian"),D9t.forEach(t),xvr=r(QRe," \u2014 "),gH=n(QRe,"A",{href:!0});var G9t=s(gH);$vr=r(G9t,"TFMarianMTModel"),G9t.forEach(t),kvr=r(QRe," (Marian model)"),QRe.forEach(t),Svr=i(Be),cM=n(Be,"LI",{});var HRe=s(cM);Zve=n(HRe,"STRONG",{});var O9t=s(Zve);Rvr=r(O9t,"mbart"),O9t.forEach(t),Pvr=r(HRe," \u2014 "),hH=n(HRe,"A",{href:!0});var V9t=s(hH);Bvr=r(V9t,"TFMBartForConditionalGeneration"),V9t.forEach(t),Ivr=r(HRe," (mBART model)"),HRe.forEach(t),qvr=i(Be),fM=n(Be,"LI",{});var URe=s(fM);eFe=n(URe,"STRONG",{});var X9t=s(eFe);Nvr=r(X9t,"mt5"),X9t.forEach(t),jvr=r(URe," \u2014 "),pH=n(URe,"A",{href:!0});var z9t=s(pH);Dvr=r(z9t,"TFMT5ForConditionalGeneration"),z9t.forEach(t),Gvr=r(URe," (mT5 model)"),URe.forEach(t),Ovr=i(Be),mM=n(Be,"LI",{});var JRe=s(mM);oFe=n(JRe,"STRONG",{});var W9t=s(oFe);Vvr=r(W9t,"pegasus"),W9t.forEach(t),Xvr=r(JRe," \u2014 "),_H=n(JRe,"A",{href:!0});var Q9t=s(_H);zvr=r(Q9t,"TFPegasusForConditionalGeneration"),Q9t.forEach(t),Wvr=r(JRe," (Pegasus model)"),JRe.forEach(t),Qvr=i(Be),gM=n(Be,"LI",{});var YRe=s(gM);rFe=n(YRe,"STRONG",{});var H9t=s(rFe);Hvr=r(H9t,"t5"),H9t.forEach(t),Uvr=r(YRe," \u2014 "),uH=n(YRe,"A",{href:!0});var U9t=s(uH);Jvr=r(U9t,"TFT5ForConditionalGeneration"),U9t.forEach(t),Yvr=r(YRe," (T5 model)"),YRe.forEach(t),Be.forEach(t),Kvr=i(Cl),T(hM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),UNe=i(f),nc=n(f,"H2",{class:!0});var oGe=s(nc);pM=n(oGe,"A",{id:!0,class:!0,href:!0});var J9t=s(pM);tFe=n(J9t,"SPAN",{});var Y9t=s(tFe);T(RL.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),Zvr=i(oGe),aFe=n(oGe,"SPAN",{});var K9t=s(aFe);eFr=r(K9t,"TFAutoModelForSequenceClassification"),K9t.forEach(t),oGe.forEach(t),JNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(PL.$$.fragment,wl),oFr=i(wl),sc=n(wl,"P",{});var cee=s(sc);rFr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bH=n(cee,"A",{href:!0});var Z9t=s(bH);tFr=r(Z9t,"from_pretrained()"),Z9t.forEach(t),aFr=r(cee," class method or the "),vH=n(cee,"A",{href:!0});var eMt=s(vH);nFr=r(eMt,"from_config()"),eMt.forEach(t),sFr=r(cee,` class
method.`),cee.forEach(t),lFr=i(wl),BL=n(wl,"P",{});var rGe=s(BL);iFr=r(rGe,"This class cannot be instantiated directly using "),nFe=n(rGe,"CODE",{});var oMt=s(nFe);dFr=r(oMt,"__init__()"),oMt.forEach(t),cFr=r(rGe," (throws an error)."),rGe.forEach(t),fFr=i(wl),Rt=n(wl,"DIV",{class:!0});var Sw=s(Rt);T(IL.$$.fragment,Sw),mFr=i(Sw),sFe=n(Sw,"P",{});var rMt=s(sFe);gFr=r(rMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rMt.forEach(t),hFr=i(Sw),lc=n(Sw,"P",{});var fee=s(lc);pFr=r(fee,`Note:
Loading a model from its configuration file does `),lFe=n(fee,"STRONG",{});var tMt=s(lFe);_Fr=r(tMt,"not"),tMt.forEach(t),uFr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(fee,"A",{href:!0});var aMt=s(FH);bFr=r(aMt,"from_pretrained()"),aMt.forEach(t),vFr=r(fee," to load the model weights."),fee.forEach(t),FFr=i(Sw),T(_M.$$.fragment,Sw),Sw.forEach(t),TFr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(qL.$$.fragment,Al),MFr=i(Al),iFe=n(Al,"P",{});var nMt=s(iFe);EFr=r(nMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nMt.forEach(t),CFr=i(Al),nn=n(Al,"P",{});var Rw=s(nn);wFr=r(Rw,"The model class to instantiate is selected based on the "),dFe=n(Rw,"CODE",{});var sMt=s(dFe);AFr=r(sMt,"model_type"),sMt.forEach(t),yFr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),cFe=n(Rw,"CODE",{});var lMt=s(cFe);LFr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),xFr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(Rw,"CODE",{});var iMt=s(fFe);$Fr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),kFr=r(Rw,":"),Rw.forEach(t),SFr=i(Al),ee=n(Al,"UL",{});var ae=s(ee);uM=n(ae,"LI",{});var KRe=s(uM);mFe=n(KRe,"STRONG",{});var dMt=s(mFe);RFr=r(dMt,"albert"),dMt.forEach(t),PFr=r(KRe," \u2014 "),TH=n(KRe,"A",{href:!0});var cMt=s(TH);BFr=r(cMt,"TFAlbertForSequenceClassification"),cMt.forEach(t),IFr=r(KRe," (ALBERT model)"),KRe.forEach(t),qFr=i(ae),bM=n(ae,"LI",{});var ZRe=s(bM);gFe=n(ZRe,"STRONG",{});var fMt=s(gFe);NFr=r(fMt,"bert"),fMt.forEach(t),jFr=r(ZRe," \u2014 "),MH=n(ZRe,"A",{href:!0});var mMt=s(MH);DFr=r(mMt,"TFBertForSequenceClassification"),mMt.forEach(t),GFr=r(ZRe," (BERT model)"),ZRe.forEach(t),OFr=i(ae),vM=n(ae,"LI",{});var ePe=s(vM);hFe=n(ePe,"STRONG",{});var gMt=s(hFe);VFr=r(gMt,"camembert"),gMt.forEach(t),XFr=r(ePe," \u2014 "),EH=n(ePe,"A",{href:!0});var hMt=s(EH);zFr=r(hMt,"TFCamembertForSequenceClassification"),hMt.forEach(t),WFr=r(ePe," (CamemBERT model)"),ePe.forEach(t),QFr=i(ae),FM=n(ae,"LI",{});var oPe=s(FM);pFe=n(oPe,"STRONG",{});var pMt=s(pFe);HFr=r(pMt,"convbert"),pMt.forEach(t),UFr=r(oPe," \u2014 "),CH=n(oPe,"A",{href:!0});var _Mt=s(CH);JFr=r(_Mt,"TFConvBertForSequenceClassification"),_Mt.forEach(t),YFr=r(oPe," (ConvBERT model)"),oPe.forEach(t),KFr=i(ae),TM=n(ae,"LI",{});var rPe=s(TM);_Fe=n(rPe,"STRONG",{});var uMt=s(_Fe);ZFr=r(uMt,"ctrl"),uMt.forEach(t),e6r=r(rPe," \u2014 "),wH=n(rPe,"A",{href:!0});var bMt=s(wH);o6r=r(bMt,"TFCTRLForSequenceClassification"),bMt.forEach(t),r6r=r(rPe," (CTRL model)"),rPe.forEach(t),t6r=i(ae),MM=n(ae,"LI",{});var tPe=s(MM);uFe=n(tPe,"STRONG",{});var vMt=s(uFe);a6r=r(vMt,"deberta"),vMt.forEach(t),n6r=r(tPe," \u2014 "),AH=n(tPe,"A",{href:!0});var FMt=s(AH);s6r=r(FMt,"TFDebertaForSequenceClassification"),FMt.forEach(t),l6r=r(tPe," (DeBERTa model)"),tPe.forEach(t),i6r=i(ae),EM=n(ae,"LI",{});var aPe=s(EM);bFe=n(aPe,"STRONG",{});var TMt=s(bFe);d6r=r(TMt,"deberta-v2"),TMt.forEach(t),c6r=r(aPe," \u2014 "),yH=n(aPe,"A",{href:!0});var MMt=s(yH);f6r=r(MMt,"TFDebertaV2ForSequenceClassification"),MMt.forEach(t),m6r=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),g6r=i(ae),CM=n(ae,"LI",{});var nPe=s(CM);vFe=n(nPe,"STRONG",{});var EMt=s(vFe);h6r=r(EMt,"distilbert"),EMt.forEach(t),p6r=r(nPe," \u2014 "),LH=n(nPe,"A",{href:!0});var CMt=s(LH);_6r=r(CMt,"TFDistilBertForSequenceClassification"),CMt.forEach(t),u6r=r(nPe," (DistilBERT model)"),nPe.forEach(t),b6r=i(ae),wM=n(ae,"LI",{});var sPe=s(wM);FFe=n(sPe,"STRONG",{});var wMt=s(FFe);v6r=r(wMt,"electra"),wMt.forEach(t),F6r=r(sPe," \u2014 "),xH=n(sPe,"A",{href:!0});var AMt=s(xH);T6r=r(AMt,"TFElectraForSequenceClassification"),AMt.forEach(t),M6r=r(sPe," (ELECTRA model)"),sPe.forEach(t),E6r=i(ae),AM=n(ae,"LI",{});var lPe=s(AM);TFe=n(lPe,"STRONG",{});var yMt=s(TFe);C6r=r(yMt,"flaubert"),yMt.forEach(t),w6r=r(lPe," \u2014 "),$H=n(lPe,"A",{href:!0});var LMt=s($H);A6r=r(LMt,"TFFlaubertForSequenceClassification"),LMt.forEach(t),y6r=r(lPe," (FlauBERT model)"),lPe.forEach(t),L6r=i(ae),yM=n(ae,"LI",{});var iPe=s(yM);MFe=n(iPe,"STRONG",{});var xMt=s(MFe);x6r=r(xMt,"funnel"),xMt.forEach(t),$6r=r(iPe," \u2014 "),kH=n(iPe,"A",{href:!0});var $Mt=s(kH);k6r=r($Mt,"TFFunnelForSequenceClassification"),$Mt.forEach(t),S6r=r(iPe," (Funnel Transformer model)"),iPe.forEach(t),R6r=i(ae),LM=n(ae,"LI",{});var dPe=s(LM);EFe=n(dPe,"STRONG",{});var kMt=s(EFe);P6r=r(kMt,"gpt2"),kMt.forEach(t),B6r=r(dPe," \u2014 "),SH=n(dPe,"A",{href:!0});var SMt=s(SH);I6r=r(SMt,"TFGPT2ForSequenceClassification"),SMt.forEach(t),q6r=r(dPe," (OpenAI GPT-2 model)"),dPe.forEach(t),N6r=i(ae),xM=n(ae,"LI",{});var cPe=s(xM);CFe=n(cPe,"STRONG",{});var RMt=s(CFe);j6r=r(RMt,"gptj"),RMt.forEach(t),D6r=r(cPe," \u2014 "),RH=n(cPe,"A",{href:!0});var PMt=s(RH);G6r=r(PMt,"TFGPTJForSequenceClassification"),PMt.forEach(t),O6r=r(cPe," (GPT-J model)"),cPe.forEach(t),V6r=i(ae),$M=n(ae,"LI",{});var fPe=s($M);wFe=n(fPe,"STRONG",{});var BMt=s(wFe);X6r=r(BMt,"layoutlm"),BMt.forEach(t),z6r=r(fPe," \u2014 "),PH=n(fPe,"A",{href:!0});var IMt=s(PH);W6r=r(IMt,"TFLayoutLMForSequenceClassification"),IMt.forEach(t),Q6r=r(fPe," (LayoutLM model)"),fPe.forEach(t),H6r=i(ae),kM=n(ae,"LI",{});var mPe=s(kM);AFe=n(mPe,"STRONG",{});var qMt=s(AFe);U6r=r(qMt,"longformer"),qMt.forEach(t),J6r=r(mPe," \u2014 "),BH=n(mPe,"A",{href:!0});var NMt=s(BH);Y6r=r(NMt,"TFLongformerForSequenceClassification"),NMt.forEach(t),K6r=r(mPe," (Longformer model)"),mPe.forEach(t),Z6r=i(ae),SM=n(ae,"LI",{});var gPe=s(SM);yFe=n(gPe,"STRONG",{});var jMt=s(yFe);eTr=r(jMt,"mobilebert"),jMt.forEach(t),oTr=r(gPe," \u2014 "),IH=n(gPe,"A",{href:!0});var DMt=s(IH);rTr=r(DMt,"TFMobileBertForSequenceClassification"),DMt.forEach(t),tTr=r(gPe," (MobileBERT model)"),gPe.forEach(t),aTr=i(ae),RM=n(ae,"LI",{});var hPe=s(RM);LFe=n(hPe,"STRONG",{});var GMt=s(LFe);nTr=r(GMt,"mpnet"),GMt.forEach(t),sTr=r(hPe," \u2014 "),qH=n(hPe,"A",{href:!0});var OMt=s(qH);lTr=r(OMt,"TFMPNetForSequenceClassification"),OMt.forEach(t),iTr=r(hPe," (MPNet model)"),hPe.forEach(t),dTr=i(ae),PM=n(ae,"LI",{});var pPe=s(PM);xFe=n(pPe,"STRONG",{});var VMt=s(xFe);cTr=r(VMt,"openai-gpt"),VMt.forEach(t),fTr=r(pPe," \u2014 "),NH=n(pPe,"A",{href:!0});var XMt=s(NH);mTr=r(XMt,"TFOpenAIGPTForSequenceClassification"),XMt.forEach(t),gTr=r(pPe," (OpenAI GPT model)"),pPe.forEach(t),hTr=i(ae),BM=n(ae,"LI",{});var _Pe=s(BM);$Fe=n(_Pe,"STRONG",{});var zMt=s($Fe);pTr=r(zMt,"rembert"),zMt.forEach(t),_Tr=r(_Pe," \u2014 "),jH=n(_Pe,"A",{href:!0});var WMt=s(jH);uTr=r(WMt,"TFRemBertForSequenceClassification"),WMt.forEach(t),bTr=r(_Pe," (RemBERT model)"),_Pe.forEach(t),vTr=i(ae),IM=n(ae,"LI",{});var uPe=s(IM);kFe=n(uPe,"STRONG",{});var QMt=s(kFe);FTr=r(QMt,"roberta"),QMt.forEach(t),TTr=r(uPe," \u2014 "),DH=n(uPe,"A",{href:!0});var HMt=s(DH);MTr=r(HMt,"TFRobertaForSequenceClassification"),HMt.forEach(t),ETr=r(uPe," (RoBERTa model)"),uPe.forEach(t),CTr=i(ae),qM=n(ae,"LI",{});var bPe=s(qM);SFe=n(bPe,"STRONG",{});var UMt=s(SFe);wTr=r(UMt,"roformer"),UMt.forEach(t),ATr=r(bPe," \u2014 "),GH=n(bPe,"A",{href:!0});var JMt=s(GH);yTr=r(JMt,"TFRoFormerForSequenceClassification"),JMt.forEach(t),LTr=r(bPe," (RoFormer model)"),bPe.forEach(t),xTr=i(ae),NM=n(ae,"LI",{});var vPe=s(NM);RFe=n(vPe,"STRONG",{});var YMt=s(RFe);$Tr=r(YMt,"tapas"),YMt.forEach(t),kTr=r(vPe," \u2014 "),OH=n(vPe,"A",{href:!0});var KMt=s(OH);STr=r(KMt,"TFTapasForSequenceClassification"),KMt.forEach(t),RTr=r(vPe," (TAPAS model)"),vPe.forEach(t),PTr=i(ae),jM=n(ae,"LI",{});var FPe=s(jM);PFe=n(FPe,"STRONG",{});var ZMt=s(PFe);BTr=r(ZMt,"transfo-xl"),ZMt.forEach(t),ITr=r(FPe," \u2014 "),VH=n(FPe,"A",{href:!0});var e4t=s(VH);qTr=r(e4t,"TFTransfoXLForSequenceClassification"),e4t.forEach(t),NTr=r(FPe," (Transformer-XL model)"),FPe.forEach(t),jTr=i(ae),DM=n(ae,"LI",{});var TPe=s(DM);BFe=n(TPe,"STRONG",{});var o4t=s(BFe);DTr=r(o4t,"xlm"),o4t.forEach(t),GTr=r(TPe," \u2014 "),XH=n(TPe,"A",{href:!0});var r4t=s(XH);OTr=r(r4t,"TFXLMForSequenceClassification"),r4t.forEach(t),VTr=r(TPe," (XLM model)"),TPe.forEach(t),XTr=i(ae),GM=n(ae,"LI",{});var MPe=s(GM);IFe=n(MPe,"STRONG",{});var t4t=s(IFe);zTr=r(t4t,"xlm-roberta"),t4t.forEach(t),WTr=r(MPe," \u2014 "),zH=n(MPe,"A",{href:!0});var a4t=s(zH);QTr=r(a4t,"TFXLMRobertaForSequenceClassification"),a4t.forEach(t),HTr=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),UTr=i(ae),OM=n(ae,"LI",{});var EPe=s(OM);qFe=n(EPe,"STRONG",{});var n4t=s(qFe);JTr=r(n4t,"xlnet"),n4t.forEach(t),YTr=r(EPe," \u2014 "),WH=n(EPe,"A",{href:!0});var s4t=s(WH);KTr=r(s4t,"TFXLNetForSequenceClassification"),s4t.forEach(t),ZTr=r(EPe," (XLNet model)"),EPe.forEach(t),ae.forEach(t),e7r=i(Al),T(VM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),YNe=i(f),ic=n(f,"H2",{class:!0});var tGe=s(ic);XM=n(tGe,"A",{id:!0,class:!0,href:!0});var l4t=s(XM);NFe=n(l4t,"SPAN",{});var i4t=s(NFe);T(NL.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),o7r=i(tGe),jFe=n(tGe,"SPAN",{});var d4t=s(jFe);r7r=r(d4t,"TFAutoModelForMultipleChoice"),d4t.forEach(t),tGe.forEach(t),KNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(jL.$$.fragment,yl),t7r=i(yl),dc=n(yl,"P",{});var mee=s(dc);a7r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=n(mee,"A",{href:!0});var c4t=s(QH);n7r=r(c4t,"from_pretrained()"),c4t.forEach(t),s7r=r(mee," class method or the "),HH=n(mee,"A",{href:!0});var f4t=s(HH);l7r=r(f4t,"from_config()"),f4t.forEach(t),i7r=r(mee,` class
method.`),mee.forEach(t),d7r=i(yl),DL=n(yl,"P",{});var aGe=s(DL);c7r=r(aGe,"This class cannot be instantiated directly using "),DFe=n(aGe,"CODE",{});var m4t=s(DFe);f7r=r(m4t,"__init__()"),m4t.forEach(t),m7r=r(aGe," (throws an error)."),aGe.forEach(t),g7r=i(yl),Pt=n(yl,"DIV",{class:!0});var Pw=s(Pt);T(GL.$$.fragment,Pw),h7r=i(Pw),GFe=n(Pw,"P",{});var g4t=s(GFe);p7r=r(g4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g4t.forEach(t),_7r=i(Pw),cc=n(Pw,"P",{});var gee=s(cc);u7r=r(gee,`Note:
Loading a model from its configuration file does `),OFe=n(gee,"STRONG",{});var h4t=s(OFe);b7r=r(h4t,"not"),h4t.forEach(t),v7r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(gee,"A",{href:!0});var p4t=s(UH);F7r=r(p4t,"from_pretrained()"),p4t.forEach(t),T7r=r(gee," to load the model weights."),gee.forEach(t),M7r=i(Pw),T(zM.$$.fragment,Pw),Pw.forEach(t),E7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(OL.$$.fragment,Ll),C7r=i(Ll),VFe=n(Ll,"P",{});var _4t=s(VFe);w7r=r(_4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_4t.forEach(t),A7r=i(Ll),sn=n(Ll,"P",{});var Bw=s(sn);y7r=r(Bw,"The model class to instantiate is selected based on the "),XFe=n(Bw,"CODE",{});var u4t=s(XFe);L7r=r(u4t,"model_type"),u4t.forEach(t),x7r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),zFe=n(Bw,"CODE",{});var b4t=s(zFe);$7r=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),k7r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(Bw,"CODE",{});var v4t=s(WFe);S7r=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),R7r=r(Bw,":"),Bw.forEach(t),P7r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);WM=n(be,"LI",{});var CPe=s(WM);QFe=n(CPe,"STRONG",{});var F4t=s(QFe);B7r=r(F4t,"albert"),F4t.forEach(t),I7r=r(CPe," \u2014 "),JH=n(CPe,"A",{href:!0});var T4t=s(JH);q7r=r(T4t,"TFAlbertForMultipleChoice"),T4t.forEach(t),N7r=r(CPe," (ALBERT model)"),CPe.forEach(t),j7r=i(be),QM=n(be,"LI",{});var wPe=s(QM);HFe=n(wPe,"STRONG",{});var M4t=s(HFe);D7r=r(M4t,"bert"),M4t.forEach(t),G7r=r(wPe," \u2014 "),YH=n(wPe,"A",{href:!0});var E4t=s(YH);O7r=r(E4t,"TFBertForMultipleChoice"),E4t.forEach(t),V7r=r(wPe," (BERT model)"),wPe.forEach(t),X7r=i(be),HM=n(be,"LI",{});var APe=s(HM);UFe=n(APe,"STRONG",{});var C4t=s(UFe);z7r=r(C4t,"camembert"),C4t.forEach(t),W7r=r(APe," \u2014 "),KH=n(APe,"A",{href:!0});var w4t=s(KH);Q7r=r(w4t,"TFCamembertForMultipleChoice"),w4t.forEach(t),H7r=r(APe," (CamemBERT model)"),APe.forEach(t),U7r=i(be),UM=n(be,"LI",{});var yPe=s(UM);JFe=n(yPe,"STRONG",{});var A4t=s(JFe);J7r=r(A4t,"convbert"),A4t.forEach(t),Y7r=r(yPe," \u2014 "),ZH=n(yPe,"A",{href:!0});var y4t=s(ZH);K7r=r(y4t,"TFConvBertForMultipleChoice"),y4t.forEach(t),Z7r=r(yPe," (ConvBERT model)"),yPe.forEach(t),e9r=i(be),JM=n(be,"LI",{});var LPe=s(JM);YFe=n(LPe,"STRONG",{});var L4t=s(YFe);o9r=r(L4t,"distilbert"),L4t.forEach(t),r9r=r(LPe," \u2014 "),eU=n(LPe,"A",{href:!0});var x4t=s(eU);t9r=r(x4t,"TFDistilBertForMultipleChoice"),x4t.forEach(t),a9r=r(LPe," (DistilBERT model)"),LPe.forEach(t),n9r=i(be),YM=n(be,"LI",{});var xPe=s(YM);KFe=n(xPe,"STRONG",{});var $4t=s(KFe);s9r=r($4t,"electra"),$4t.forEach(t),l9r=r(xPe," \u2014 "),oU=n(xPe,"A",{href:!0});var k4t=s(oU);i9r=r(k4t,"TFElectraForMultipleChoice"),k4t.forEach(t),d9r=r(xPe," (ELECTRA model)"),xPe.forEach(t),c9r=i(be),KM=n(be,"LI",{});var $Pe=s(KM);ZFe=n($Pe,"STRONG",{});var S4t=s(ZFe);f9r=r(S4t,"flaubert"),S4t.forEach(t),m9r=r($Pe," \u2014 "),rU=n($Pe,"A",{href:!0});var R4t=s(rU);g9r=r(R4t,"TFFlaubertForMultipleChoice"),R4t.forEach(t),h9r=r($Pe," (FlauBERT model)"),$Pe.forEach(t),p9r=i(be),ZM=n(be,"LI",{});var kPe=s(ZM);e6e=n(kPe,"STRONG",{});var P4t=s(e6e);_9r=r(P4t,"funnel"),P4t.forEach(t),u9r=r(kPe," \u2014 "),tU=n(kPe,"A",{href:!0});var B4t=s(tU);b9r=r(B4t,"TFFunnelForMultipleChoice"),B4t.forEach(t),v9r=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),F9r=i(be),e4=n(be,"LI",{});var SPe=s(e4);o6e=n(SPe,"STRONG",{});var I4t=s(o6e);T9r=r(I4t,"longformer"),I4t.forEach(t),M9r=r(SPe," \u2014 "),aU=n(SPe,"A",{href:!0});var q4t=s(aU);E9r=r(q4t,"TFLongformerForMultipleChoice"),q4t.forEach(t),C9r=r(SPe," (Longformer model)"),SPe.forEach(t),w9r=i(be),o4=n(be,"LI",{});var RPe=s(o4);r6e=n(RPe,"STRONG",{});var N4t=s(r6e);A9r=r(N4t,"mobilebert"),N4t.forEach(t),y9r=r(RPe," \u2014 "),nU=n(RPe,"A",{href:!0});var j4t=s(nU);L9r=r(j4t,"TFMobileBertForMultipleChoice"),j4t.forEach(t),x9r=r(RPe," (MobileBERT model)"),RPe.forEach(t),$9r=i(be),r4=n(be,"LI",{});var PPe=s(r4);t6e=n(PPe,"STRONG",{});var D4t=s(t6e);k9r=r(D4t,"mpnet"),D4t.forEach(t),S9r=r(PPe," \u2014 "),sU=n(PPe,"A",{href:!0});var G4t=s(sU);R9r=r(G4t,"TFMPNetForMultipleChoice"),G4t.forEach(t),P9r=r(PPe," (MPNet model)"),PPe.forEach(t),B9r=i(be),t4=n(be,"LI",{});var BPe=s(t4);a6e=n(BPe,"STRONG",{});var O4t=s(a6e);I9r=r(O4t,"rembert"),O4t.forEach(t),q9r=r(BPe," \u2014 "),lU=n(BPe,"A",{href:!0});var V4t=s(lU);N9r=r(V4t,"TFRemBertForMultipleChoice"),V4t.forEach(t),j9r=r(BPe," (RemBERT model)"),BPe.forEach(t),D9r=i(be),a4=n(be,"LI",{});var IPe=s(a4);n6e=n(IPe,"STRONG",{});var X4t=s(n6e);G9r=r(X4t,"roberta"),X4t.forEach(t),O9r=r(IPe," \u2014 "),iU=n(IPe,"A",{href:!0});var z4t=s(iU);V9r=r(z4t,"TFRobertaForMultipleChoice"),z4t.forEach(t),X9r=r(IPe," (RoBERTa model)"),IPe.forEach(t),z9r=i(be),n4=n(be,"LI",{});var qPe=s(n4);s6e=n(qPe,"STRONG",{});var W4t=s(s6e);W9r=r(W4t,"roformer"),W4t.forEach(t),Q9r=r(qPe," \u2014 "),dU=n(qPe,"A",{href:!0});var Q4t=s(dU);H9r=r(Q4t,"TFRoFormerForMultipleChoice"),Q4t.forEach(t),U9r=r(qPe," (RoFormer model)"),qPe.forEach(t),J9r=i(be),s4=n(be,"LI",{});var NPe=s(s4);l6e=n(NPe,"STRONG",{});var H4t=s(l6e);Y9r=r(H4t,"xlm"),H4t.forEach(t),K9r=r(NPe," \u2014 "),cU=n(NPe,"A",{href:!0});var U4t=s(cU);Z9r=r(U4t,"TFXLMForMultipleChoice"),U4t.forEach(t),eMr=r(NPe," (XLM model)"),NPe.forEach(t),oMr=i(be),l4=n(be,"LI",{});var jPe=s(l4);i6e=n(jPe,"STRONG",{});var J4t=s(i6e);rMr=r(J4t,"xlm-roberta"),J4t.forEach(t),tMr=r(jPe," \u2014 "),fU=n(jPe,"A",{href:!0});var Y4t=s(fU);aMr=r(Y4t,"TFXLMRobertaForMultipleChoice"),Y4t.forEach(t),nMr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),sMr=i(be),i4=n(be,"LI",{});var DPe=s(i4);d6e=n(DPe,"STRONG",{});var K4t=s(d6e);lMr=r(K4t,"xlnet"),K4t.forEach(t),iMr=r(DPe," \u2014 "),mU=n(DPe,"A",{href:!0});var Z4t=s(mU);dMr=r(Z4t,"TFXLNetForMultipleChoice"),Z4t.forEach(t),cMr=r(DPe," (XLNet model)"),DPe.forEach(t),be.forEach(t),fMr=i(Ll),T(d4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),ZNe=i(f),fc=n(f,"H2",{class:!0});var nGe=s(fc);c4=n(nGe,"A",{id:!0,class:!0,href:!0});var eEt=s(c4);c6e=n(eEt,"SPAN",{});var oEt=s(c6e);T(VL.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),mMr=i(nGe),f6e=n(nGe,"SPAN",{});var rEt=s(f6e);gMr=r(rEt,"TFAutoModelForNextSentencePrediction"),rEt.forEach(t),nGe.forEach(t),eje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(XL.$$.fragment,xl),hMr=i(xl),mc=n(xl,"P",{});var hee=s(mc);pMr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gU=n(hee,"A",{href:!0});var tEt=s(gU);_Mr=r(tEt,"from_pretrained()"),tEt.forEach(t),uMr=r(hee," class method or the "),hU=n(hee,"A",{href:!0});var aEt=s(hU);bMr=r(aEt,"from_config()"),aEt.forEach(t),vMr=r(hee,` class
method.`),hee.forEach(t),FMr=i(xl),zL=n(xl,"P",{});var sGe=s(zL);TMr=r(sGe,"This class cannot be instantiated directly using "),m6e=n(sGe,"CODE",{});var nEt=s(m6e);MMr=r(nEt,"__init__()"),nEt.forEach(t),EMr=r(sGe," (throws an error)."),sGe.forEach(t),CMr=i(xl),Bt=n(xl,"DIV",{class:!0});var Iw=s(Bt);T(WL.$$.fragment,Iw),wMr=i(Iw),g6e=n(Iw,"P",{});var sEt=s(g6e);AMr=r(sEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sEt.forEach(t),yMr=i(Iw),gc=n(Iw,"P",{});var pee=s(gc);LMr=r(pee,`Note:
Loading a model from its configuration file does `),h6e=n(pee,"STRONG",{});var lEt=s(h6e);xMr=r(lEt,"not"),lEt.forEach(t),$Mr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(pee,"A",{href:!0});var iEt=s(pU);kMr=r(iEt,"from_pretrained()"),iEt.forEach(t),SMr=r(pee," to load the model weights."),pee.forEach(t),RMr=i(Iw),T(f4.$$.fragment,Iw),Iw.forEach(t),PMr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(QL.$$.fragment,$l),BMr=i($l),p6e=n($l,"P",{});var dEt=s(p6e);IMr=r(dEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dEt.forEach(t),qMr=i($l),ln=n($l,"P",{});var qw=s(ln);NMr=r(qw,"The model class to instantiate is selected based on the "),_6e=n(qw,"CODE",{});var cEt=s(_6e);jMr=r(cEt,"model_type"),cEt.forEach(t),DMr=r(qw,` property of the config object (either
passed as an argument or loaded from `),u6e=n(qw,"CODE",{});var fEt=s(u6e);GMr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),OMr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(qw,"CODE",{});var mEt=s(b6e);VMr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),XMr=r(qw,":"),qw.forEach(t),zMr=i($l),HL=n($l,"UL",{});var lGe=s(HL);m4=n(lGe,"LI",{});var GPe=s(m4);v6e=n(GPe,"STRONG",{});var gEt=s(v6e);WMr=r(gEt,"bert"),gEt.forEach(t),QMr=r(GPe," \u2014 "),_U=n(GPe,"A",{href:!0});var hEt=s(_U);HMr=r(hEt,"TFBertForNextSentencePrediction"),hEt.forEach(t),UMr=r(GPe," (BERT model)"),GPe.forEach(t),JMr=i(lGe),g4=n(lGe,"LI",{});var OPe=s(g4);F6e=n(OPe,"STRONG",{});var pEt=s(F6e);YMr=r(pEt,"mobilebert"),pEt.forEach(t),KMr=r(OPe," \u2014 "),uU=n(OPe,"A",{href:!0});var _Et=s(uU);ZMr=r(_Et,"TFMobileBertForNextSentencePrediction"),_Et.forEach(t),e4r=r(OPe," (MobileBERT model)"),OPe.forEach(t),lGe.forEach(t),o4r=i($l),T(h4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),oje=i(f),hc=n(f,"H2",{class:!0});var iGe=s(hc);p4=n(iGe,"A",{id:!0,class:!0,href:!0});var uEt=s(p4);T6e=n(uEt,"SPAN",{});var bEt=s(T6e);T(UL.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),r4r=i(iGe),M6e=n(iGe,"SPAN",{});var vEt=s(M6e);t4r=r(vEt,"TFAutoModelForTableQuestionAnswering"),vEt.forEach(t),iGe.forEach(t),rje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(JL.$$.fragment,kl),a4r=i(kl),pc=n(kl,"P",{});var _ee=s(pc);n4r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bU=n(_ee,"A",{href:!0});var FEt=s(bU);s4r=r(FEt,"from_pretrained()"),FEt.forEach(t),l4r=r(_ee," class method or the "),vU=n(_ee,"A",{href:!0});var TEt=s(vU);i4r=r(TEt,"from_config()"),TEt.forEach(t),d4r=r(_ee,` class
method.`),_ee.forEach(t),c4r=i(kl),YL=n(kl,"P",{});var dGe=s(YL);f4r=r(dGe,"This class cannot be instantiated directly using "),E6e=n(dGe,"CODE",{});var MEt=s(E6e);m4r=r(MEt,"__init__()"),MEt.forEach(t),g4r=r(dGe," (throws an error)."),dGe.forEach(t),h4r=i(kl),It=n(kl,"DIV",{class:!0});var Nw=s(It);T(KL.$$.fragment,Nw),p4r=i(Nw),C6e=n(Nw,"P",{});var EEt=s(C6e);_4r=r(EEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EEt.forEach(t),u4r=i(Nw),_c=n(Nw,"P",{});var uee=s(_c);b4r=r(uee,`Note:
Loading a model from its configuration file does `),w6e=n(uee,"STRONG",{});var CEt=s(w6e);v4r=r(CEt,"not"),CEt.forEach(t),F4r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(uee,"A",{href:!0});var wEt=s(FU);T4r=r(wEt,"from_pretrained()"),wEt.forEach(t),M4r=r(uee," to load the model weights."),uee.forEach(t),E4r=i(Nw),T(_4.$$.fragment,Nw),Nw.forEach(t),C4r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(ZL.$$.fragment,Sl),w4r=i(Sl),A6e=n(Sl,"P",{});var AEt=s(A6e);A4r=r(AEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),AEt.forEach(t),y4r=i(Sl),dn=n(Sl,"P",{});var jw=s(dn);L4r=r(jw,"The model class to instantiate is selected based on the "),y6e=n(jw,"CODE",{});var yEt=s(y6e);x4r=r(yEt,"model_type"),yEt.forEach(t),$4r=r(jw,` property of the config object (either
passed as an argument or loaded from `),L6e=n(jw,"CODE",{});var LEt=s(L6e);k4r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),S4r=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(jw,"CODE",{});var xEt=s(x6e);R4r=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),P4r=r(jw,":"),jw.forEach(t),B4r=i(Sl),$6e=n(Sl,"UL",{});var $Et=s($6e);u4=n($Et,"LI",{});var VPe=s(u4);k6e=n(VPe,"STRONG",{});var kEt=s(k6e);I4r=r(kEt,"tapas"),kEt.forEach(t),q4r=r(VPe," \u2014 "),TU=n(VPe,"A",{href:!0});var SEt=s(TU);N4r=r(SEt,"TFTapasForQuestionAnswering"),SEt.forEach(t),j4r=r(VPe," (TAPAS model)"),VPe.forEach(t),$Et.forEach(t),D4r=i(Sl),T(b4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),tje=i(f),uc=n(f,"H2",{class:!0});var cGe=s(uc);v4=n(cGe,"A",{id:!0,class:!0,href:!0});var REt=s(v4);S6e=n(REt,"SPAN",{});var PEt=s(S6e);T(e8.$$.fragment,PEt),PEt.forEach(t),REt.forEach(t),G4r=i(cGe),R6e=n(cGe,"SPAN",{});var BEt=s(R6e);O4r=r(BEt,"TFAutoModelForTokenClassification"),BEt.forEach(t),cGe.forEach(t),aje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(o8.$$.fragment,Rl),V4r=i(Rl),bc=n(Rl,"P",{});var bee=s(bc);X4r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MU=n(bee,"A",{href:!0});var IEt=s(MU);z4r=r(IEt,"from_pretrained()"),IEt.forEach(t),W4r=r(bee," class method or the "),EU=n(bee,"A",{href:!0});var qEt=s(EU);Q4r=r(qEt,"from_config()"),qEt.forEach(t),H4r=r(bee,` class
method.`),bee.forEach(t),U4r=i(Rl),r8=n(Rl,"P",{});var fGe=s(r8);J4r=r(fGe,"This class cannot be instantiated directly using "),P6e=n(fGe,"CODE",{});var NEt=s(P6e);Y4r=r(NEt,"__init__()"),NEt.forEach(t),K4r=r(fGe," (throws an error)."),fGe.forEach(t),Z4r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Dw=s(qt);T(t8.$$.fragment,Dw),eEr=i(Dw),B6e=n(Dw,"P",{});var jEt=s(B6e);oEr=r(jEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jEt.forEach(t),rEr=i(Dw),vc=n(Dw,"P",{});var vee=s(vc);tEr=r(vee,`Note:
Loading a model from its configuration file does `),I6e=n(vee,"STRONG",{});var DEt=s(I6e);aEr=r(DEt,"not"),DEt.forEach(t),nEr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(vee,"A",{href:!0});var GEt=s(CU);sEr=r(GEt,"from_pretrained()"),GEt.forEach(t),lEr=r(vee," to load the model weights."),vee.forEach(t),iEr=i(Dw),T(F4.$$.fragment,Dw),Dw.forEach(t),dEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(a8.$$.fragment,Pl),cEr=i(Pl),q6e=n(Pl,"P",{});var OEt=s(q6e);fEr=r(OEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OEt.forEach(t),mEr=i(Pl),cn=n(Pl,"P",{});var Gw=s(cn);gEr=r(Gw,"The model class to instantiate is selected based on the "),N6e=n(Gw,"CODE",{});var VEt=s(N6e);hEr=r(VEt,"model_type"),VEt.forEach(t),pEr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),j6e=n(Gw,"CODE",{});var XEt=s(j6e);_Er=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),uEr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=n(Gw,"CODE",{});var zEt=s(D6e);bEr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),vEr=r(Gw,":"),Gw.forEach(t),FEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);T4=n(me,"LI",{});var XPe=s(T4);G6e=n(XPe,"STRONG",{});var WEt=s(G6e);TEr=r(WEt,"albert"),WEt.forEach(t),MEr=r(XPe," \u2014 "),wU=n(XPe,"A",{href:!0});var QEt=s(wU);EEr=r(QEt,"TFAlbertForTokenClassification"),QEt.forEach(t),CEr=r(XPe," (ALBERT model)"),XPe.forEach(t),wEr=i(me),M4=n(me,"LI",{});var zPe=s(M4);O6e=n(zPe,"STRONG",{});var HEt=s(O6e);AEr=r(HEt,"bert"),HEt.forEach(t),yEr=r(zPe," \u2014 "),AU=n(zPe,"A",{href:!0});var UEt=s(AU);LEr=r(UEt,"TFBertForTokenClassification"),UEt.forEach(t),xEr=r(zPe," (BERT model)"),zPe.forEach(t),$Er=i(me),E4=n(me,"LI",{});var WPe=s(E4);V6e=n(WPe,"STRONG",{});var JEt=s(V6e);kEr=r(JEt,"camembert"),JEt.forEach(t),SEr=r(WPe," \u2014 "),yU=n(WPe,"A",{href:!0});var YEt=s(yU);REr=r(YEt,"TFCamembertForTokenClassification"),YEt.forEach(t),PEr=r(WPe," (CamemBERT model)"),WPe.forEach(t),BEr=i(me),C4=n(me,"LI",{});var QPe=s(C4);X6e=n(QPe,"STRONG",{});var KEt=s(X6e);IEr=r(KEt,"convbert"),KEt.forEach(t),qEr=r(QPe," \u2014 "),LU=n(QPe,"A",{href:!0});var ZEt=s(LU);NEr=r(ZEt,"TFConvBertForTokenClassification"),ZEt.forEach(t),jEr=r(QPe," (ConvBERT model)"),QPe.forEach(t),DEr=i(me),w4=n(me,"LI",{});var HPe=s(w4);z6e=n(HPe,"STRONG",{});var e5t=s(z6e);GEr=r(e5t,"deberta"),e5t.forEach(t),OEr=r(HPe," \u2014 "),xU=n(HPe,"A",{href:!0});var o5t=s(xU);VEr=r(o5t,"TFDebertaForTokenClassification"),o5t.forEach(t),XEr=r(HPe," (DeBERTa model)"),HPe.forEach(t),zEr=i(me),A4=n(me,"LI",{});var UPe=s(A4);W6e=n(UPe,"STRONG",{});var r5t=s(W6e);WEr=r(r5t,"deberta-v2"),r5t.forEach(t),QEr=r(UPe," \u2014 "),$U=n(UPe,"A",{href:!0});var t5t=s($U);HEr=r(t5t,"TFDebertaV2ForTokenClassification"),t5t.forEach(t),UEr=r(UPe," (DeBERTa-v2 model)"),UPe.forEach(t),JEr=i(me),y4=n(me,"LI",{});var JPe=s(y4);Q6e=n(JPe,"STRONG",{});var a5t=s(Q6e);YEr=r(a5t,"distilbert"),a5t.forEach(t),KEr=r(JPe," \u2014 "),kU=n(JPe,"A",{href:!0});var n5t=s(kU);ZEr=r(n5t,"TFDistilBertForTokenClassification"),n5t.forEach(t),e5r=r(JPe," (DistilBERT model)"),JPe.forEach(t),o5r=i(me),L4=n(me,"LI",{});var YPe=s(L4);H6e=n(YPe,"STRONG",{});var s5t=s(H6e);r5r=r(s5t,"electra"),s5t.forEach(t),t5r=r(YPe," \u2014 "),SU=n(YPe,"A",{href:!0});var l5t=s(SU);a5r=r(l5t,"TFElectraForTokenClassification"),l5t.forEach(t),n5r=r(YPe," (ELECTRA model)"),YPe.forEach(t),s5r=i(me),x4=n(me,"LI",{});var KPe=s(x4);U6e=n(KPe,"STRONG",{});var i5t=s(U6e);l5r=r(i5t,"flaubert"),i5t.forEach(t),i5r=r(KPe," \u2014 "),RU=n(KPe,"A",{href:!0});var d5t=s(RU);d5r=r(d5t,"TFFlaubertForTokenClassification"),d5t.forEach(t),c5r=r(KPe," (FlauBERT model)"),KPe.forEach(t),f5r=i(me),$4=n(me,"LI",{});var ZPe=s($4);J6e=n(ZPe,"STRONG",{});var c5t=s(J6e);m5r=r(c5t,"funnel"),c5t.forEach(t),g5r=r(ZPe," \u2014 "),PU=n(ZPe,"A",{href:!0});var f5t=s(PU);h5r=r(f5t,"TFFunnelForTokenClassification"),f5t.forEach(t),p5r=r(ZPe," (Funnel Transformer model)"),ZPe.forEach(t),_5r=i(me),k4=n(me,"LI",{});var eBe=s(k4);Y6e=n(eBe,"STRONG",{});var m5t=s(Y6e);u5r=r(m5t,"layoutlm"),m5t.forEach(t),b5r=r(eBe," \u2014 "),BU=n(eBe,"A",{href:!0});var g5t=s(BU);v5r=r(g5t,"TFLayoutLMForTokenClassification"),g5t.forEach(t),F5r=r(eBe," (LayoutLM model)"),eBe.forEach(t),T5r=i(me),S4=n(me,"LI",{});var oBe=s(S4);K6e=n(oBe,"STRONG",{});var h5t=s(K6e);M5r=r(h5t,"longformer"),h5t.forEach(t),E5r=r(oBe," \u2014 "),IU=n(oBe,"A",{href:!0});var p5t=s(IU);C5r=r(p5t,"TFLongformerForTokenClassification"),p5t.forEach(t),w5r=r(oBe," (Longformer model)"),oBe.forEach(t),A5r=i(me),R4=n(me,"LI",{});var rBe=s(R4);Z6e=n(rBe,"STRONG",{});var _5t=s(Z6e);y5r=r(_5t,"mobilebert"),_5t.forEach(t),L5r=r(rBe," \u2014 "),qU=n(rBe,"A",{href:!0});var u5t=s(qU);x5r=r(u5t,"TFMobileBertForTokenClassification"),u5t.forEach(t),$5r=r(rBe," (MobileBERT model)"),rBe.forEach(t),k5r=i(me),P4=n(me,"LI",{});var tBe=s(P4);eTe=n(tBe,"STRONG",{});var b5t=s(eTe);S5r=r(b5t,"mpnet"),b5t.forEach(t),R5r=r(tBe," \u2014 "),NU=n(tBe,"A",{href:!0});var v5t=s(NU);P5r=r(v5t,"TFMPNetForTokenClassification"),v5t.forEach(t),B5r=r(tBe," (MPNet model)"),tBe.forEach(t),I5r=i(me),B4=n(me,"LI",{});var aBe=s(B4);oTe=n(aBe,"STRONG",{});var F5t=s(oTe);q5r=r(F5t,"rembert"),F5t.forEach(t),N5r=r(aBe," \u2014 "),jU=n(aBe,"A",{href:!0});var T5t=s(jU);j5r=r(T5t,"TFRemBertForTokenClassification"),T5t.forEach(t),D5r=r(aBe," (RemBERT model)"),aBe.forEach(t),G5r=i(me),I4=n(me,"LI",{});var nBe=s(I4);rTe=n(nBe,"STRONG",{});var M5t=s(rTe);O5r=r(M5t,"roberta"),M5t.forEach(t),V5r=r(nBe," \u2014 "),DU=n(nBe,"A",{href:!0});var E5t=s(DU);X5r=r(E5t,"TFRobertaForTokenClassification"),E5t.forEach(t),z5r=r(nBe," (RoBERTa model)"),nBe.forEach(t),W5r=i(me),q4=n(me,"LI",{});var sBe=s(q4);tTe=n(sBe,"STRONG",{});var C5t=s(tTe);Q5r=r(C5t,"roformer"),C5t.forEach(t),H5r=r(sBe," \u2014 "),GU=n(sBe,"A",{href:!0});var w5t=s(GU);U5r=r(w5t,"TFRoFormerForTokenClassification"),w5t.forEach(t),J5r=r(sBe," (RoFormer model)"),sBe.forEach(t),Y5r=i(me),N4=n(me,"LI",{});var lBe=s(N4);aTe=n(lBe,"STRONG",{});var A5t=s(aTe);K5r=r(A5t,"xlm"),A5t.forEach(t),Z5r=r(lBe," \u2014 "),OU=n(lBe,"A",{href:!0});var y5t=s(OU);eCr=r(y5t,"TFXLMForTokenClassification"),y5t.forEach(t),oCr=r(lBe," (XLM model)"),lBe.forEach(t),rCr=i(me),j4=n(me,"LI",{});var iBe=s(j4);nTe=n(iBe,"STRONG",{});var L5t=s(nTe);tCr=r(L5t,"xlm-roberta"),L5t.forEach(t),aCr=r(iBe," \u2014 "),VU=n(iBe,"A",{href:!0});var x5t=s(VU);nCr=r(x5t,"TFXLMRobertaForTokenClassification"),x5t.forEach(t),sCr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),lCr=i(me),D4=n(me,"LI",{});var dBe=s(D4);sTe=n(dBe,"STRONG",{});var $5t=s(sTe);iCr=r($5t,"xlnet"),$5t.forEach(t),dCr=r(dBe," \u2014 "),XU=n(dBe,"A",{href:!0});var k5t=s(XU);cCr=r(k5t,"TFXLNetForTokenClassification"),k5t.forEach(t),fCr=r(dBe," (XLNet model)"),dBe.forEach(t),me.forEach(t),mCr=i(Pl),T(G4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),nje=i(f),Fc=n(f,"H2",{class:!0});var mGe=s(Fc);O4=n(mGe,"A",{id:!0,class:!0,href:!0});var S5t=s(O4);lTe=n(S5t,"SPAN",{});var R5t=s(lTe);T(n8.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),gCr=i(mGe),iTe=n(mGe,"SPAN",{});var P5t=s(iTe);hCr=r(P5t,"TFAutoModelForQuestionAnswering"),P5t.forEach(t),mGe.forEach(t),sje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(s8.$$.fragment,Bl),pCr=i(Bl),Tc=n(Bl,"P",{});var Fee=s(Tc);_Cr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zU=n(Fee,"A",{href:!0});var B5t=s(zU);uCr=r(B5t,"from_pretrained()"),B5t.forEach(t),bCr=r(Fee," class method or the "),WU=n(Fee,"A",{href:!0});var I5t=s(WU);vCr=r(I5t,"from_config()"),I5t.forEach(t),FCr=r(Fee,` class
method.`),Fee.forEach(t),TCr=i(Bl),l8=n(Bl,"P",{});var gGe=s(l8);MCr=r(gGe,"This class cannot be instantiated directly using "),dTe=n(gGe,"CODE",{});var q5t=s(dTe);ECr=r(q5t,"__init__()"),q5t.forEach(t),CCr=r(gGe," (throws an error)."),gGe.forEach(t),wCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Ow=s(Nt);T(i8.$$.fragment,Ow),ACr=i(Ow),cTe=n(Ow,"P",{});var N5t=s(cTe);yCr=r(N5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N5t.forEach(t),LCr=i(Ow),Mc=n(Ow,"P",{});var Tee=s(Mc);xCr=r(Tee,`Note:
Loading a model from its configuration file does `),fTe=n(Tee,"STRONG",{});var j5t=s(fTe);$Cr=r(j5t,"not"),j5t.forEach(t),kCr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Tee,"A",{href:!0});var D5t=s(QU);SCr=r(D5t,"from_pretrained()"),D5t.forEach(t),RCr=r(Tee," to load the model weights."),Tee.forEach(t),PCr=i(Ow),T(V4.$$.fragment,Ow),Ow.forEach(t),BCr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(d8.$$.fragment,Il),ICr=i(Il),mTe=n(Il,"P",{});var G5t=s(mTe);qCr=r(G5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5t.forEach(t),NCr=i(Il),fn=n(Il,"P",{});var Vw=s(fn);jCr=r(Vw,"The model class to instantiate is selected based on the "),gTe=n(Vw,"CODE",{});var O5t=s(gTe);DCr=r(O5t,"model_type"),O5t.forEach(t),GCr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),hTe=n(Vw,"CODE",{});var V5t=s(hTe);OCr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),VCr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(Vw,"CODE",{});var X5t=s(pTe);XCr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),zCr=r(Vw,":"),Vw.forEach(t),WCr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);X4=n(ge,"LI",{});var cBe=s(X4);_Te=n(cBe,"STRONG",{});var z5t=s(_Te);QCr=r(z5t,"albert"),z5t.forEach(t),HCr=r(cBe," \u2014 "),HU=n(cBe,"A",{href:!0});var W5t=s(HU);UCr=r(W5t,"TFAlbertForQuestionAnswering"),W5t.forEach(t),JCr=r(cBe," (ALBERT model)"),cBe.forEach(t),YCr=i(ge),z4=n(ge,"LI",{});var fBe=s(z4);uTe=n(fBe,"STRONG",{});var Q5t=s(uTe);KCr=r(Q5t,"bert"),Q5t.forEach(t),ZCr=r(fBe," \u2014 "),UU=n(fBe,"A",{href:!0});var H5t=s(UU);e3r=r(H5t,"TFBertForQuestionAnswering"),H5t.forEach(t),o3r=r(fBe," (BERT model)"),fBe.forEach(t),r3r=i(ge),W4=n(ge,"LI",{});var mBe=s(W4);bTe=n(mBe,"STRONG",{});var U5t=s(bTe);t3r=r(U5t,"camembert"),U5t.forEach(t),a3r=r(mBe," \u2014 "),JU=n(mBe,"A",{href:!0});var J5t=s(JU);n3r=r(J5t,"TFCamembertForQuestionAnswering"),J5t.forEach(t),s3r=r(mBe," (CamemBERT model)"),mBe.forEach(t),l3r=i(ge),Q4=n(ge,"LI",{});var gBe=s(Q4);vTe=n(gBe,"STRONG",{});var Y5t=s(vTe);i3r=r(Y5t,"convbert"),Y5t.forEach(t),d3r=r(gBe," \u2014 "),YU=n(gBe,"A",{href:!0});var K5t=s(YU);c3r=r(K5t,"TFConvBertForQuestionAnswering"),K5t.forEach(t),f3r=r(gBe," (ConvBERT model)"),gBe.forEach(t),m3r=i(ge),H4=n(ge,"LI",{});var hBe=s(H4);FTe=n(hBe,"STRONG",{});var Z5t=s(FTe);g3r=r(Z5t,"deberta"),Z5t.forEach(t),h3r=r(hBe," \u2014 "),KU=n(hBe,"A",{href:!0});var eCt=s(KU);p3r=r(eCt,"TFDebertaForQuestionAnswering"),eCt.forEach(t),_3r=r(hBe," (DeBERTa model)"),hBe.forEach(t),u3r=i(ge),U4=n(ge,"LI",{});var pBe=s(U4);TTe=n(pBe,"STRONG",{});var oCt=s(TTe);b3r=r(oCt,"deberta-v2"),oCt.forEach(t),v3r=r(pBe," \u2014 "),ZU=n(pBe,"A",{href:!0});var rCt=s(ZU);F3r=r(rCt,"TFDebertaV2ForQuestionAnswering"),rCt.forEach(t),T3r=r(pBe," (DeBERTa-v2 model)"),pBe.forEach(t),M3r=i(ge),J4=n(ge,"LI",{});var _Be=s(J4);MTe=n(_Be,"STRONG",{});var tCt=s(MTe);E3r=r(tCt,"distilbert"),tCt.forEach(t),C3r=r(_Be," \u2014 "),eJ=n(_Be,"A",{href:!0});var aCt=s(eJ);w3r=r(aCt,"TFDistilBertForQuestionAnswering"),aCt.forEach(t),A3r=r(_Be," (DistilBERT model)"),_Be.forEach(t),y3r=i(ge),Y4=n(ge,"LI",{});var uBe=s(Y4);ETe=n(uBe,"STRONG",{});var nCt=s(ETe);L3r=r(nCt,"electra"),nCt.forEach(t),x3r=r(uBe," \u2014 "),oJ=n(uBe,"A",{href:!0});var sCt=s(oJ);$3r=r(sCt,"TFElectraForQuestionAnswering"),sCt.forEach(t),k3r=r(uBe," (ELECTRA model)"),uBe.forEach(t),S3r=i(ge),K4=n(ge,"LI",{});var bBe=s(K4);CTe=n(bBe,"STRONG",{});var lCt=s(CTe);R3r=r(lCt,"flaubert"),lCt.forEach(t),P3r=r(bBe," \u2014 "),rJ=n(bBe,"A",{href:!0});var iCt=s(rJ);B3r=r(iCt,"TFFlaubertForQuestionAnsweringSimple"),iCt.forEach(t),I3r=r(bBe," (FlauBERT model)"),bBe.forEach(t),q3r=i(ge),Z4=n(ge,"LI",{});var vBe=s(Z4);wTe=n(vBe,"STRONG",{});var dCt=s(wTe);N3r=r(dCt,"funnel"),dCt.forEach(t),j3r=r(vBe," \u2014 "),tJ=n(vBe,"A",{href:!0});var cCt=s(tJ);D3r=r(cCt,"TFFunnelForQuestionAnswering"),cCt.forEach(t),G3r=r(vBe," (Funnel Transformer model)"),vBe.forEach(t),O3r=i(ge),eE=n(ge,"LI",{});var FBe=s(eE);ATe=n(FBe,"STRONG",{});var fCt=s(ATe);V3r=r(fCt,"gptj"),fCt.forEach(t),X3r=r(FBe," \u2014 "),aJ=n(FBe,"A",{href:!0});var mCt=s(aJ);z3r=r(mCt,"TFGPTJForQuestionAnswering"),mCt.forEach(t),W3r=r(FBe," (GPT-J model)"),FBe.forEach(t),Q3r=i(ge),oE=n(ge,"LI",{});var TBe=s(oE);yTe=n(TBe,"STRONG",{});var gCt=s(yTe);H3r=r(gCt,"longformer"),gCt.forEach(t),U3r=r(TBe," \u2014 "),nJ=n(TBe,"A",{href:!0});var hCt=s(nJ);J3r=r(hCt,"TFLongformerForQuestionAnswering"),hCt.forEach(t),Y3r=r(TBe," (Longformer model)"),TBe.forEach(t),K3r=i(ge),rE=n(ge,"LI",{});var MBe=s(rE);LTe=n(MBe,"STRONG",{});var pCt=s(LTe);Z3r=r(pCt,"mobilebert"),pCt.forEach(t),ewr=r(MBe," \u2014 "),sJ=n(MBe,"A",{href:!0});var _Ct=s(sJ);owr=r(_Ct,"TFMobileBertForQuestionAnswering"),_Ct.forEach(t),rwr=r(MBe," (MobileBERT model)"),MBe.forEach(t),twr=i(ge),tE=n(ge,"LI",{});var EBe=s(tE);xTe=n(EBe,"STRONG",{});var uCt=s(xTe);awr=r(uCt,"mpnet"),uCt.forEach(t),nwr=r(EBe," \u2014 "),lJ=n(EBe,"A",{href:!0});var bCt=s(lJ);swr=r(bCt,"TFMPNetForQuestionAnswering"),bCt.forEach(t),lwr=r(EBe," (MPNet model)"),EBe.forEach(t),iwr=i(ge),aE=n(ge,"LI",{});var CBe=s(aE);$Te=n(CBe,"STRONG",{});var vCt=s($Te);dwr=r(vCt,"rembert"),vCt.forEach(t),cwr=r(CBe," \u2014 "),iJ=n(CBe,"A",{href:!0});var FCt=s(iJ);fwr=r(FCt,"TFRemBertForQuestionAnswering"),FCt.forEach(t),mwr=r(CBe," (RemBERT model)"),CBe.forEach(t),gwr=i(ge),nE=n(ge,"LI",{});var wBe=s(nE);kTe=n(wBe,"STRONG",{});var TCt=s(kTe);hwr=r(TCt,"roberta"),TCt.forEach(t),pwr=r(wBe," \u2014 "),dJ=n(wBe,"A",{href:!0});var MCt=s(dJ);_wr=r(MCt,"TFRobertaForQuestionAnswering"),MCt.forEach(t),uwr=r(wBe," (RoBERTa model)"),wBe.forEach(t),bwr=i(ge),sE=n(ge,"LI",{});var ABe=s(sE);STe=n(ABe,"STRONG",{});var ECt=s(STe);vwr=r(ECt,"roformer"),ECt.forEach(t),Fwr=r(ABe," \u2014 "),cJ=n(ABe,"A",{href:!0});var CCt=s(cJ);Twr=r(CCt,"TFRoFormerForQuestionAnswering"),CCt.forEach(t),Mwr=r(ABe," (RoFormer model)"),ABe.forEach(t),Ewr=i(ge),lE=n(ge,"LI",{});var yBe=s(lE);RTe=n(yBe,"STRONG",{});var wCt=s(RTe);Cwr=r(wCt,"xlm"),wCt.forEach(t),wwr=r(yBe," \u2014 "),fJ=n(yBe,"A",{href:!0});var ACt=s(fJ);Awr=r(ACt,"TFXLMForQuestionAnsweringSimple"),ACt.forEach(t),ywr=r(yBe," (XLM model)"),yBe.forEach(t),Lwr=i(ge),iE=n(ge,"LI",{});var LBe=s(iE);PTe=n(LBe,"STRONG",{});var yCt=s(PTe);xwr=r(yCt,"xlm-roberta"),yCt.forEach(t),$wr=r(LBe," \u2014 "),mJ=n(LBe,"A",{href:!0});var LCt=s(mJ);kwr=r(LCt,"TFXLMRobertaForQuestionAnswering"),LCt.forEach(t),Swr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),Rwr=i(ge),dE=n(ge,"LI",{});var xBe=s(dE);BTe=n(xBe,"STRONG",{});var xCt=s(BTe);Pwr=r(xCt,"xlnet"),xCt.forEach(t),Bwr=r(xBe," \u2014 "),gJ=n(xBe,"A",{href:!0});var $Ct=s(gJ);Iwr=r($Ct,"TFXLNetForQuestionAnsweringSimple"),$Ct.forEach(t),qwr=r(xBe," (XLNet model)"),xBe.forEach(t),ge.forEach(t),Nwr=i(Il),T(cE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),lje=i(f),Ec=n(f,"H2",{class:!0});var hGe=s(Ec);fE=n(hGe,"A",{id:!0,class:!0,href:!0});var kCt=s(fE);ITe=n(kCt,"SPAN",{});var SCt=s(ITe);T(c8.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),jwr=i(hGe),qTe=n(hGe,"SPAN",{});var RCt=s(qTe);Dwr=r(RCt,"TFAutoModelForVision2Seq"),RCt.forEach(t),hGe.forEach(t),ije=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(f8.$$.fragment,ql),Gwr=i(ql),Cc=n(ql,"P",{});var Mee=s(Cc);Owr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hJ=n(Mee,"A",{href:!0});var PCt=s(hJ);Vwr=r(PCt,"from_pretrained()"),PCt.forEach(t),Xwr=r(Mee," class method or the "),pJ=n(Mee,"A",{href:!0});var BCt=s(pJ);zwr=r(BCt,"from_config()"),BCt.forEach(t),Wwr=r(Mee,` class
method.`),Mee.forEach(t),Qwr=i(ql),m8=n(ql,"P",{});var pGe=s(m8);Hwr=r(pGe,"This class cannot be instantiated directly using "),NTe=n(pGe,"CODE",{});var ICt=s(NTe);Uwr=r(ICt,"__init__()"),ICt.forEach(t),Jwr=r(pGe," (throws an error)."),pGe.forEach(t),Ywr=i(ql),jt=n(ql,"DIV",{class:!0});var Xw=s(jt);T(g8.$$.fragment,Xw),Kwr=i(Xw),jTe=n(Xw,"P",{});var qCt=s(jTe);Zwr=r(qCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qCt.forEach(t),e0r=i(Xw),wc=n(Xw,"P",{});var Eee=s(wc);o0r=r(Eee,`Note:
Loading a model from its configuration file does `),DTe=n(Eee,"STRONG",{});var NCt=s(DTe);r0r=r(NCt,"not"),NCt.forEach(t),t0r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Eee,"A",{href:!0});var jCt=s(_J);a0r=r(jCt,"from_pretrained()"),jCt.forEach(t),n0r=r(Eee," to load the model weights."),Eee.forEach(t),s0r=i(Xw),T(mE.$$.fragment,Xw),Xw.forEach(t),l0r=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(h8.$$.fragment,Nl),i0r=i(Nl),GTe=n(Nl,"P",{});var DCt=s(GTe);d0r=r(DCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DCt.forEach(t),c0r=i(Nl),mn=n(Nl,"P",{});var zw=s(mn);f0r=r(zw,"The model class to instantiate is selected based on the "),OTe=n(zw,"CODE",{});var GCt=s(OTe);m0r=r(GCt,"model_type"),GCt.forEach(t),g0r=r(zw,` property of the config object (either
passed as an argument or loaded from `),VTe=n(zw,"CODE",{});var OCt=s(VTe);h0r=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),p0r=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(zw,"CODE",{});var VCt=s(XTe);_0r=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),u0r=r(zw,":"),zw.forEach(t),b0r=i(Nl),zTe=n(Nl,"UL",{});var XCt=s(zTe);gE=n(XCt,"LI",{});var $Be=s(gE);WTe=n($Be,"STRONG",{});var zCt=s(WTe);v0r=r(zCt,"vision-encoder-decoder"),zCt.forEach(t),F0r=r($Be," \u2014 "),uJ=n($Be,"A",{href:!0});var WCt=s(uJ);T0r=r(WCt,"TFVisionEncoderDecoderModel"),WCt.forEach(t),M0r=r($Be," (Vision Encoder decoder model)"),$Be.forEach(t),XCt.forEach(t),E0r=i(Nl),T(hE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),dje=i(f),Ac=n(f,"H2",{class:!0});var _Ge=s(Ac);pE=n(_Ge,"A",{id:!0,class:!0,href:!0});var QCt=s(pE);QTe=n(QCt,"SPAN",{});var HCt=s(QTe);T(p8.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),C0r=i(_Ge),HTe=n(_Ge,"SPAN",{});var UCt=s(HTe);w0r=r(UCt,"TFAutoModelForSpeechSeq2Seq"),UCt.forEach(t),_Ge.forEach(t),cje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(_8.$$.fragment,jl),A0r=i(jl),yc=n(jl,"P",{});var Cee=s(yc);y0r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bJ=n(Cee,"A",{href:!0});var JCt=s(bJ);L0r=r(JCt,"from_pretrained()"),JCt.forEach(t),x0r=r(Cee," class method or the "),vJ=n(Cee,"A",{href:!0});var YCt=s(vJ);$0r=r(YCt,"from_config()"),YCt.forEach(t),k0r=r(Cee,` class
method.`),Cee.forEach(t),S0r=i(jl),u8=n(jl,"P",{});var uGe=s(u8);R0r=r(uGe,"This class cannot be instantiated directly using "),UTe=n(uGe,"CODE",{});var KCt=s(UTe);P0r=r(KCt,"__init__()"),KCt.forEach(t),B0r=r(uGe," (throws an error)."),uGe.forEach(t),I0r=i(jl),Dt=n(jl,"DIV",{class:!0});var Ww=s(Dt);T(b8.$$.fragment,Ww),q0r=i(Ww),JTe=n(Ww,"P",{});var ZCt=s(JTe);N0r=r(ZCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZCt.forEach(t),j0r=i(Ww),Lc=n(Ww,"P",{});var wee=s(Lc);D0r=r(wee,`Note:
Loading a model from its configuration file does `),YTe=n(wee,"STRONG",{});var e3t=s(YTe);G0r=r(e3t,"not"),e3t.forEach(t),O0r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(wee,"A",{href:!0});var o3t=s(FJ);V0r=r(o3t,"from_pretrained()"),o3t.forEach(t),X0r=r(wee," to load the model weights."),wee.forEach(t),z0r=i(Ww),T(_E.$$.fragment,Ww),Ww.forEach(t),W0r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(v8.$$.fragment,Dl),Q0r=i(Dl),KTe=n(Dl,"P",{});var r3t=s(KTe);H0r=r(r3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r3t.forEach(t),U0r=i(Dl),gn=n(Dl,"P",{});var Qw=s(gn);J0r=r(Qw,"The model class to instantiate is selected based on the "),ZTe=n(Qw,"CODE",{});var t3t=s(ZTe);Y0r=r(t3t,"model_type"),t3t.forEach(t),K0r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),e7e=n(Qw,"CODE",{});var a3t=s(e7e);Z0r=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),eAr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(Qw,"CODE",{});var n3t=s(o7e);oAr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),rAr=r(Qw,":"),Qw.forEach(t),tAr=i(Dl),r7e=n(Dl,"UL",{});var s3t=s(r7e);uE=n(s3t,"LI",{});var kBe=s(uE);t7e=n(kBe,"STRONG",{});var l3t=s(t7e);aAr=r(l3t,"speech_to_text"),l3t.forEach(t),nAr=r(kBe," \u2014 "),TJ=n(kBe,"A",{href:!0});var i3t=s(TJ);sAr=r(i3t,"TFSpeech2TextForConditionalGeneration"),i3t.forEach(t),lAr=r(kBe," (Speech2Text model)"),kBe.forEach(t),s3t.forEach(t),iAr=i(Dl),T(bE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),fje=i(f),xc=n(f,"H2",{class:!0});var bGe=s(xc);vE=n(bGe,"A",{id:!0,class:!0,href:!0});var d3t=s(vE);a7e=n(d3t,"SPAN",{});var c3t=s(a7e);T(F8.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),dAr=i(bGe),n7e=n(bGe,"SPAN",{});var f3t=s(n7e);cAr=r(f3t,"FlaxAutoModel"),f3t.forEach(t),bGe.forEach(t),mje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(T8.$$.fragment,Gl),fAr=i(Gl),$c=n(Gl,"P",{});var Aee=s($c);mAr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MJ=n(Aee,"A",{href:!0});var m3t=s(MJ);gAr=r(m3t,"from_pretrained()"),m3t.forEach(t),hAr=r(Aee," class method or the "),EJ=n(Aee,"A",{href:!0});var g3t=s(EJ);pAr=r(g3t,"from_config()"),g3t.forEach(t),_Ar=r(Aee,` class
method.`),Aee.forEach(t),uAr=i(Gl),M8=n(Gl,"P",{});var vGe=s(M8);bAr=r(vGe,"This class cannot be instantiated directly using "),s7e=n(vGe,"CODE",{});var h3t=s(s7e);vAr=r(h3t,"__init__()"),h3t.forEach(t),FAr=r(vGe," (throws an error)."),vGe.forEach(t),TAr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Hw=s(Gt);T(E8.$$.fragment,Hw),MAr=i(Hw),l7e=n(Hw,"P",{});var p3t=s(l7e);EAr=r(p3t,"Instantiates one of the base model classes of the library from a configuration."),p3t.forEach(t),CAr=i(Hw),kc=n(Hw,"P",{});var yee=s(kc);wAr=r(yee,`Note:
Loading a model from its configuration file does `),i7e=n(yee,"STRONG",{});var _3t=s(i7e);AAr=r(_3t,"not"),_3t.forEach(t),yAr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(yee,"A",{href:!0});var u3t=s(CJ);LAr=r(u3t,"from_pretrained()"),u3t.forEach(t),xAr=r(yee," to load the model weights."),yee.forEach(t),$Ar=i(Hw),T(FE.$$.fragment,Hw),Hw.forEach(t),kAr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(C8.$$.fragment,Ol),SAr=i(Ol),d7e=n(Ol,"P",{});var b3t=s(d7e);RAr=r(b3t,"Instantiate one of the base model classes of the library from a pretrained model."),b3t.forEach(t),PAr=i(Ol),hn=n(Ol,"P",{});var Uw=s(hn);BAr=r(Uw,"The model class to instantiate is selected based on the "),c7e=n(Uw,"CODE",{});var v3t=s(c7e);IAr=r(v3t,"model_type"),v3t.forEach(t),qAr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),f7e=n(Uw,"CODE",{});var F3t=s(f7e);NAr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),jAr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(Uw,"CODE",{});var T3t=s(m7e);DAr=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),GAr=r(Uw,":"),Uw.forEach(t),OAr=i(Ol),oe=n(Ol,"UL",{});var ne=s(oe);TE=n(ne,"LI",{});var SBe=s(TE);g7e=n(SBe,"STRONG",{});var M3t=s(g7e);VAr=r(M3t,"albert"),M3t.forEach(t),XAr=r(SBe," \u2014 "),wJ=n(SBe,"A",{href:!0});var E3t=s(wJ);zAr=r(E3t,"FlaxAlbertModel"),E3t.forEach(t),WAr=r(SBe," (ALBERT model)"),SBe.forEach(t),QAr=i(ne),ME=n(ne,"LI",{});var RBe=s(ME);h7e=n(RBe,"STRONG",{});var C3t=s(h7e);HAr=r(C3t,"bart"),C3t.forEach(t),UAr=r(RBe," \u2014 "),AJ=n(RBe,"A",{href:!0});var w3t=s(AJ);JAr=r(w3t,"FlaxBartModel"),w3t.forEach(t),YAr=r(RBe," (BART model)"),RBe.forEach(t),KAr=i(ne),EE=n(ne,"LI",{});var PBe=s(EE);p7e=n(PBe,"STRONG",{});var A3t=s(p7e);ZAr=r(A3t,"beit"),A3t.forEach(t),eyr=r(PBe," \u2014 "),yJ=n(PBe,"A",{href:!0});var y3t=s(yJ);oyr=r(y3t,"FlaxBeitModel"),y3t.forEach(t),ryr=r(PBe," (BEiT model)"),PBe.forEach(t),tyr=i(ne),CE=n(ne,"LI",{});var BBe=s(CE);_7e=n(BBe,"STRONG",{});var L3t=s(_7e);ayr=r(L3t,"bert"),L3t.forEach(t),nyr=r(BBe," \u2014 "),LJ=n(BBe,"A",{href:!0});var x3t=s(LJ);syr=r(x3t,"FlaxBertModel"),x3t.forEach(t),lyr=r(BBe," (BERT model)"),BBe.forEach(t),iyr=i(ne),wE=n(ne,"LI",{});var IBe=s(wE);u7e=n(IBe,"STRONG",{});var $3t=s(u7e);dyr=r($3t,"big_bird"),$3t.forEach(t),cyr=r(IBe," \u2014 "),xJ=n(IBe,"A",{href:!0});var k3t=s(xJ);fyr=r(k3t,"FlaxBigBirdModel"),k3t.forEach(t),myr=r(IBe," (BigBird model)"),IBe.forEach(t),gyr=i(ne),AE=n(ne,"LI",{});var qBe=s(AE);b7e=n(qBe,"STRONG",{});var S3t=s(b7e);hyr=r(S3t,"blenderbot"),S3t.forEach(t),pyr=r(qBe," \u2014 "),$J=n(qBe,"A",{href:!0});var R3t=s($J);_yr=r(R3t,"FlaxBlenderbotModel"),R3t.forEach(t),uyr=r(qBe," (Blenderbot model)"),qBe.forEach(t),byr=i(ne),yE=n(ne,"LI",{});var NBe=s(yE);v7e=n(NBe,"STRONG",{});var P3t=s(v7e);vyr=r(P3t,"blenderbot-small"),P3t.forEach(t),Fyr=r(NBe," \u2014 "),kJ=n(NBe,"A",{href:!0});var B3t=s(kJ);Tyr=r(B3t,"FlaxBlenderbotSmallModel"),B3t.forEach(t),Myr=r(NBe," (BlenderbotSmall model)"),NBe.forEach(t),Eyr=i(ne),LE=n(ne,"LI",{});var jBe=s(LE);F7e=n(jBe,"STRONG",{});var I3t=s(F7e);Cyr=r(I3t,"clip"),I3t.forEach(t),wyr=r(jBe," \u2014 "),SJ=n(jBe,"A",{href:!0});var q3t=s(SJ);Ayr=r(q3t,"FlaxCLIPModel"),q3t.forEach(t),yyr=r(jBe," (CLIP model)"),jBe.forEach(t),Lyr=i(ne),xE=n(ne,"LI",{});var DBe=s(xE);T7e=n(DBe,"STRONG",{});var N3t=s(T7e);xyr=r(N3t,"distilbert"),N3t.forEach(t),$yr=r(DBe," \u2014 "),RJ=n(DBe,"A",{href:!0});var j3t=s(RJ);kyr=r(j3t,"FlaxDistilBertModel"),j3t.forEach(t),Syr=r(DBe," (DistilBERT model)"),DBe.forEach(t),Ryr=i(ne),$E=n(ne,"LI",{});var GBe=s($E);M7e=n(GBe,"STRONG",{});var D3t=s(M7e);Pyr=r(D3t,"electra"),D3t.forEach(t),Byr=r(GBe," \u2014 "),PJ=n(GBe,"A",{href:!0});var G3t=s(PJ);Iyr=r(G3t,"FlaxElectraModel"),G3t.forEach(t),qyr=r(GBe," (ELECTRA model)"),GBe.forEach(t),Nyr=i(ne),kE=n(ne,"LI",{});var OBe=s(kE);E7e=n(OBe,"STRONG",{});var O3t=s(E7e);jyr=r(O3t,"gpt2"),O3t.forEach(t),Dyr=r(OBe," \u2014 "),BJ=n(OBe,"A",{href:!0});var V3t=s(BJ);Gyr=r(V3t,"FlaxGPT2Model"),V3t.forEach(t),Oyr=r(OBe," (OpenAI GPT-2 model)"),OBe.forEach(t),Vyr=i(ne),SE=n(ne,"LI",{});var VBe=s(SE);C7e=n(VBe,"STRONG",{});var X3t=s(C7e);Xyr=r(X3t,"gpt_neo"),X3t.forEach(t),zyr=r(VBe," \u2014 "),IJ=n(VBe,"A",{href:!0});var z3t=s(IJ);Wyr=r(z3t,"FlaxGPTNeoModel"),z3t.forEach(t),Qyr=r(VBe," (GPT Neo model)"),VBe.forEach(t),Hyr=i(ne),RE=n(ne,"LI",{});var XBe=s(RE);w7e=n(XBe,"STRONG",{});var W3t=s(w7e);Uyr=r(W3t,"gptj"),W3t.forEach(t),Jyr=r(XBe," \u2014 "),qJ=n(XBe,"A",{href:!0});var Q3t=s(qJ);Yyr=r(Q3t,"FlaxGPTJModel"),Q3t.forEach(t),Kyr=r(XBe," (GPT-J model)"),XBe.forEach(t),Zyr=i(ne),PE=n(ne,"LI",{});var zBe=s(PE);A7e=n(zBe,"STRONG",{});var H3t=s(A7e);eLr=r(H3t,"longt5"),H3t.forEach(t),oLr=r(zBe," \u2014 "),NJ=n(zBe,"A",{href:!0});var U3t=s(NJ);rLr=r(U3t,"FlaxLongT5Model"),U3t.forEach(t),tLr=r(zBe," (LongT5 model)"),zBe.forEach(t),aLr=i(ne),BE=n(ne,"LI",{});var WBe=s(BE);y7e=n(WBe,"STRONG",{});var J3t=s(y7e);nLr=r(J3t,"marian"),J3t.forEach(t),sLr=r(WBe," \u2014 "),jJ=n(WBe,"A",{href:!0});var Y3t=s(jJ);lLr=r(Y3t,"FlaxMarianModel"),Y3t.forEach(t),iLr=r(WBe," (Marian model)"),WBe.forEach(t),dLr=i(ne),IE=n(ne,"LI",{});var QBe=s(IE);L7e=n(QBe,"STRONG",{});var K3t=s(L7e);cLr=r(K3t,"mbart"),K3t.forEach(t),fLr=r(QBe," \u2014 "),DJ=n(QBe,"A",{href:!0});var Z3t=s(DJ);mLr=r(Z3t,"FlaxMBartModel"),Z3t.forEach(t),gLr=r(QBe," (mBART model)"),QBe.forEach(t),hLr=i(ne),qE=n(ne,"LI",{});var HBe=s(qE);x7e=n(HBe,"STRONG",{});var ewt=s(x7e);pLr=r(ewt,"mt5"),ewt.forEach(t),_Lr=r(HBe," \u2014 "),GJ=n(HBe,"A",{href:!0});var owt=s(GJ);uLr=r(owt,"FlaxMT5Model"),owt.forEach(t),bLr=r(HBe," (mT5 model)"),HBe.forEach(t),vLr=i(ne),NE=n(ne,"LI",{});var UBe=s(NE);$7e=n(UBe,"STRONG",{});var rwt=s($7e);FLr=r(rwt,"pegasus"),rwt.forEach(t),TLr=r(UBe," \u2014 "),OJ=n(UBe,"A",{href:!0});var twt=s(OJ);MLr=r(twt,"FlaxPegasusModel"),twt.forEach(t),ELr=r(UBe," (Pegasus model)"),UBe.forEach(t),CLr=i(ne),jE=n(ne,"LI",{});var JBe=s(jE);k7e=n(JBe,"STRONG",{});var awt=s(k7e);wLr=r(awt,"roberta"),awt.forEach(t),ALr=r(JBe," \u2014 "),VJ=n(JBe,"A",{href:!0});var nwt=s(VJ);yLr=r(nwt,"FlaxRobertaModel"),nwt.forEach(t),LLr=r(JBe," (RoBERTa model)"),JBe.forEach(t),xLr=i(ne),DE=n(ne,"LI",{});var YBe=s(DE);S7e=n(YBe,"STRONG",{});var swt=s(S7e);$Lr=r(swt,"roformer"),swt.forEach(t),kLr=r(YBe," \u2014 "),XJ=n(YBe,"A",{href:!0});var lwt=s(XJ);SLr=r(lwt,"FlaxRoFormerModel"),lwt.forEach(t),RLr=r(YBe," (RoFormer model)"),YBe.forEach(t),PLr=i(ne),GE=n(ne,"LI",{});var KBe=s(GE);R7e=n(KBe,"STRONG",{});var iwt=s(R7e);BLr=r(iwt,"t5"),iwt.forEach(t),ILr=r(KBe," \u2014 "),zJ=n(KBe,"A",{href:!0});var dwt=s(zJ);qLr=r(dwt,"FlaxT5Model"),dwt.forEach(t),NLr=r(KBe," (T5 model)"),KBe.forEach(t),jLr=i(ne),OE=n(ne,"LI",{});var ZBe=s(OE);P7e=n(ZBe,"STRONG",{});var cwt=s(P7e);DLr=r(cwt,"vision-text-dual-encoder"),cwt.forEach(t),GLr=r(ZBe," \u2014 "),WJ=n(ZBe,"A",{href:!0});var fwt=s(WJ);OLr=r(fwt,"FlaxVisionTextDualEncoderModel"),fwt.forEach(t),VLr=r(ZBe," (VisionTextDualEncoder model)"),ZBe.forEach(t),XLr=i(ne),VE=n(ne,"LI",{});var eIe=s(VE);B7e=n(eIe,"STRONG",{});var mwt=s(B7e);zLr=r(mwt,"vit"),mwt.forEach(t),WLr=r(eIe," \u2014 "),QJ=n(eIe,"A",{href:!0});var gwt=s(QJ);QLr=r(gwt,"FlaxViTModel"),gwt.forEach(t),HLr=r(eIe," (ViT model)"),eIe.forEach(t),ULr=i(ne),XE=n(ne,"LI",{});var oIe=s(XE);I7e=n(oIe,"STRONG",{});var hwt=s(I7e);JLr=r(hwt,"wav2vec2"),hwt.forEach(t),YLr=r(oIe," \u2014 "),HJ=n(oIe,"A",{href:!0});var pwt=s(HJ);KLr=r(pwt,"FlaxWav2Vec2Model"),pwt.forEach(t),ZLr=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),e8r=i(ne),zE=n(ne,"LI",{});var rIe=s(zE);q7e=n(rIe,"STRONG",{});var _wt=s(q7e);o8r=r(_wt,"xglm"),_wt.forEach(t),r8r=r(rIe," \u2014 "),UJ=n(rIe,"A",{href:!0});var uwt=s(UJ);t8r=r(uwt,"FlaxXGLMModel"),uwt.forEach(t),a8r=r(rIe," (XGLM model)"),rIe.forEach(t),n8r=i(ne),WE=n(ne,"LI",{});var tIe=s(WE);N7e=n(tIe,"STRONG",{});var bwt=s(N7e);s8r=r(bwt,"xlm-roberta"),bwt.forEach(t),l8r=r(tIe," \u2014 "),JJ=n(tIe,"A",{href:!0});var vwt=s(JJ);i8r=r(vwt,"FlaxXLMRobertaModel"),vwt.forEach(t),d8r=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),ne.forEach(t),c8r=i(Ol),T(QE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),gje=i(f),Sc=n(f,"H2",{class:!0});var FGe=s(Sc);HE=n(FGe,"A",{id:!0,class:!0,href:!0});var Fwt=s(HE);j7e=n(Fwt,"SPAN",{});var Twt=s(j7e);T(w8.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),f8r=i(FGe),D7e=n(FGe,"SPAN",{});var Mwt=s(D7e);m8r=r(Mwt,"FlaxAutoModelForCausalLM"),Mwt.forEach(t),FGe.forEach(t),hje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(A8.$$.fragment,Vl),g8r=i(Vl),Rc=n(Vl,"P",{});var Lee=s(Rc);h8r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YJ=n(Lee,"A",{href:!0});var Ewt=s(YJ);p8r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),_8r=r(Lee," class method or the "),KJ=n(Lee,"A",{href:!0});var Cwt=s(KJ);u8r=r(Cwt,"from_config()"),Cwt.forEach(t),b8r=r(Lee,` class
method.`),Lee.forEach(t),v8r=i(Vl),y8=n(Vl,"P",{});var TGe=s(y8);F8r=r(TGe,"This class cannot be instantiated directly using "),G7e=n(TGe,"CODE",{});var wwt=s(G7e);T8r=r(wwt,"__init__()"),wwt.forEach(t),M8r=r(TGe," (throws an error)."),TGe.forEach(t),E8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Jw=s(Ot);T(L8.$$.fragment,Jw),C8r=i(Jw),O7e=n(Jw,"P",{});var Awt=s(O7e);w8r=r(Awt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Awt.forEach(t),A8r=i(Jw),Pc=n(Jw,"P",{});var xee=s(Pc);y8r=r(xee,`Note:
Loading a model from its configuration file does `),V7e=n(xee,"STRONG",{});var ywt=s(V7e);L8r=r(ywt,"not"),ywt.forEach(t),x8r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(xee,"A",{href:!0});var Lwt=s(ZJ);$8r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),k8r=r(xee," to load the model weights."),xee.forEach(t),S8r=i(Jw),T(UE.$$.fragment,Jw),Jw.forEach(t),R8r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(x8.$$.fragment,Xl),P8r=i(Xl),X7e=n(Xl,"P",{});var xwt=s(X7e);B8r=r(xwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xwt.forEach(t),I8r=i(Xl),pn=n(Xl,"P",{});var Yw=s(pn);q8r=r(Yw,"The model class to instantiate is selected based on the "),z7e=n(Yw,"CODE",{});var $wt=s(z7e);N8r=r($wt,"model_type"),$wt.forEach(t),j8r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),W7e=n(Yw,"CODE",{});var kwt=s(W7e);D8r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),G8r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(Yw,"CODE",{});var Swt=s(Q7e);O8r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),V8r=r(Yw,":"),Yw.forEach(t),X8r=i(Xl),Pe=n(Xl,"UL",{});var ze=s(Pe);JE=n(ze,"LI",{});var aIe=s(JE);H7e=n(aIe,"STRONG",{});var Rwt=s(H7e);z8r=r(Rwt,"bart"),Rwt.forEach(t),W8r=r(aIe," \u2014 "),eY=n(aIe,"A",{href:!0});var Pwt=s(eY);Q8r=r(Pwt,"FlaxBartForCausalLM"),Pwt.forEach(t),H8r=r(aIe," (BART model)"),aIe.forEach(t),U8r=i(ze),YE=n(ze,"LI",{});var nIe=s(YE);U7e=n(nIe,"STRONG",{});var Bwt=s(U7e);J8r=r(Bwt,"bert"),Bwt.forEach(t),Y8r=r(nIe," \u2014 "),oY=n(nIe,"A",{href:!0});var Iwt=s(oY);K8r=r(Iwt,"FlaxBertForCausalLM"),Iwt.forEach(t),Z8r=r(nIe," (BERT model)"),nIe.forEach(t),exr=i(ze),KE=n(ze,"LI",{});var sIe=s(KE);J7e=n(sIe,"STRONG",{});var qwt=s(J7e);oxr=r(qwt,"big_bird"),qwt.forEach(t),rxr=r(sIe," \u2014 "),rY=n(sIe,"A",{href:!0});var Nwt=s(rY);txr=r(Nwt,"FlaxBigBirdForCausalLM"),Nwt.forEach(t),axr=r(sIe," (BigBird model)"),sIe.forEach(t),nxr=i(ze),ZE=n(ze,"LI",{});var lIe=s(ZE);Y7e=n(lIe,"STRONG",{});var jwt=s(Y7e);sxr=r(jwt,"electra"),jwt.forEach(t),lxr=r(lIe," \u2014 "),tY=n(lIe,"A",{href:!0});var Dwt=s(tY);ixr=r(Dwt,"FlaxElectraForCausalLM"),Dwt.forEach(t),dxr=r(lIe," (ELECTRA model)"),lIe.forEach(t),cxr=i(ze),e5=n(ze,"LI",{});var iIe=s(e5);K7e=n(iIe,"STRONG",{});var Gwt=s(K7e);fxr=r(Gwt,"gpt2"),Gwt.forEach(t),mxr=r(iIe," \u2014 "),aY=n(iIe,"A",{href:!0});var Owt=s(aY);gxr=r(Owt,"FlaxGPT2LMHeadModel"),Owt.forEach(t),hxr=r(iIe," (OpenAI GPT-2 model)"),iIe.forEach(t),pxr=i(ze),o5=n(ze,"LI",{});var dIe=s(o5);Z7e=n(dIe,"STRONG",{});var Vwt=s(Z7e);_xr=r(Vwt,"gpt_neo"),Vwt.forEach(t),uxr=r(dIe," \u2014 "),nY=n(dIe,"A",{href:!0});var Xwt=s(nY);bxr=r(Xwt,"FlaxGPTNeoForCausalLM"),Xwt.forEach(t),vxr=r(dIe," (GPT Neo model)"),dIe.forEach(t),Fxr=i(ze),r5=n(ze,"LI",{});var cIe=s(r5);e9e=n(cIe,"STRONG",{});var zwt=s(e9e);Txr=r(zwt,"gptj"),zwt.forEach(t),Mxr=r(cIe," \u2014 "),sY=n(cIe,"A",{href:!0});var Wwt=s(sY);Exr=r(Wwt,"FlaxGPTJForCausalLM"),Wwt.forEach(t),Cxr=r(cIe," (GPT-J model)"),cIe.forEach(t),wxr=i(ze),t5=n(ze,"LI",{});var fIe=s(t5);o9e=n(fIe,"STRONG",{});var Qwt=s(o9e);Axr=r(Qwt,"roberta"),Qwt.forEach(t),yxr=r(fIe," \u2014 "),lY=n(fIe,"A",{href:!0});var Hwt=s(lY);Lxr=r(Hwt,"FlaxRobertaForCausalLM"),Hwt.forEach(t),xxr=r(fIe," (RoBERTa model)"),fIe.forEach(t),$xr=i(ze),a5=n(ze,"LI",{});var mIe=s(a5);r9e=n(mIe,"STRONG",{});var Uwt=s(r9e);kxr=r(Uwt,"xglm"),Uwt.forEach(t),Sxr=r(mIe," \u2014 "),iY=n(mIe,"A",{href:!0});var Jwt=s(iY);Rxr=r(Jwt,"FlaxXGLMForCausalLM"),Jwt.forEach(t),Pxr=r(mIe," (XGLM model)"),mIe.forEach(t),ze.forEach(t),Bxr=i(Xl),T(n5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),pje=i(f),Bc=n(f,"H2",{class:!0});var MGe=s(Bc);s5=n(MGe,"A",{id:!0,class:!0,href:!0});var Ywt=s(s5);t9e=n(Ywt,"SPAN",{});var Kwt=s(t9e);T($8.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),Ixr=i(MGe),a9e=n(MGe,"SPAN",{});var Zwt=s(a9e);qxr=r(Zwt,"FlaxAutoModelForPreTraining"),Zwt.forEach(t),MGe.forEach(t),_je=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(k8.$$.fragment,zl),Nxr=i(zl),Ic=n(zl,"P",{});var $ee=s(Ic);jxr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dY=n($ee,"A",{href:!0});var e0t=s(dY);Dxr=r(e0t,"from_pretrained()"),e0t.forEach(t),Gxr=r($ee," class method or the "),cY=n($ee,"A",{href:!0});var o0t=s(cY);Oxr=r(o0t,"from_config()"),o0t.forEach(t),Vxr=r($ee,` class
method.`),$ee.forEach(t),Xxr=i(zl),S8=n(zl,"P",{});var EGe=s(S8);zxr=r(EGe,"This class cannot be instantiated directly using "),n9e=n(EGe,"CODE",{});var r0t=s(n9e);Wxr=r(r0t,"__init__()"),r0t.forEach(t),Qxr=r(EGe," (throws an error)."),EGe.forEach(t),Hxr=i(zl),Vt=n(zl,"DIV",{class:!0});var Kw=s(Vt);T(R8.$$.fragment,Kw),Uxr=i(Kw),s9e=n(Kw,"P",{});var t0t=s(s9e);Jxr=r(t0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t0t.forEach(t),Yxr=i(Kw),qc=n(Kw,"P",{});var kee=s(qc);Kxr=r(kee,`Note:
Loading a model from its configuration file does `),l9e=n(kee,"STRONG",{});var a0t=s(l9e);Zxr=r(a0t,"not"),a0t.forEach(t),e$r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(kee,"A",{href:!0});var n0t=s(fY);o$r=r(n0t,"from_pretrained()"),n0t.forEach(t),r$r=r(kee," to load the model weights."),kee.forEach(t),t$r=i(Kw),T(l5.$$.fragment,Kw),Kw.forEach(t),a$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(P8.$$.fragment,Wl),n$r=i(Wl),i9e=n(Wl,"P",{});var s0t=s(i9e);s$r=r(s0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s0t.forEach(t),l$r=i(Wl),_n=n(Wl,"P",{});var Zw=s(_n);i$r=r(Zw,"The model class to instantiate is selected based on the "),d9e=n(Zw,"CODE",{});var l0t=s(d9e);d$r=r(l0t,"model_type"),l0t.forEach(t),c$r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),c9e=n(Zw,"CODE",{});var i0t=s(c9e);f$r=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),m$r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(Zw,"CODE",{});var d0t=s(f9e);g$r=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),h$r=r(Zw,":"),Zw.forEach(t),p$r=i(Wl),Te=n(Wl,"UL",{});var Ce=s(Te);i5=n(Ce,"LI",{});var gIe=s(i5);m9e=n(gIe,"STRONG",{});var c0t=s(m9e);_$r=r(c0t,"albert"),c0t.forEach(t),u$r=r(gIe," \u2014 "),mY=n(gIe,"A",{href:!0});var f0t=s(mY);b$r=r(f0t,"FlaxAlbertForPreTraining"),f0t.forEach(t),v$r=r(gIe," (ALBERT model)"),gIe.forEach(t),F$r=i(Ce),d5=n(Ce,"LI",{});var hIe=s(d5);g9e=n(hIe,"STRONG",{});var m0t=s(g9e);T$r=r(m0t,"bart"),m0t.forEach(t),M$r=r(hIe," \u2014 "),gY=n(hIe,"A",{href:!0});var g0t=s(gY);E$r=r(g0t,"FlaxBartForConditionalGeneration"),g0t.forEach(t),C$r=r(hIe," (BART model)"),hIe.forEach(t),w$r=i(Ce),c5=n(Ce,"LI",{});var pIe=s(c5);h9e=n(pIe,"STRONG",{});var h0t=s(h9e);A$r=r(h0t,"bert"),h0t.forEach(t),y$r=r(pIe," \u2014 "),hY=n(pIe,"A",{href:!0});var p0t=s(hY);L$r=r(p0t,"FlaxBertForPreTraining"),p0t.forEach(t),x$r=r(pIe," (BERT model)"),pIe.forEach(t),$$r=i(Ce),f5=n(Ce,"LI",{});var _Ie=s(f5);p9e=n(_Ie,"STRONG",{});var _0t=s(p9e);k$r=r(_0t,"big_bird"),_0t.forEach(t),S$r=r(_Ie," \u2014 "),pY=n(_Ie,"A",{href:!0});var u0t=s(pY);R$r=r(u0t,"FlaxBigBirdForPreTraining"),u0t.forEach(t),P$r=r(_Ie," (BigBird model)"),_Ie.forEach(t),B$r=i(Ce),m5=n(Ce,"LI",{});var uIe=s(m5);_9e=n(uIe,"STRONG",{});var b0t=s(_9e);I$r=r(b0t,"electra"),b0t.forEach(t),q$r=r(uIe," \u2014 "),_Y=n(uIe,"A",{href:!0});var v0t=s(_Y);N$r=r(v0t,"FlaxElectraForPreTraining"),v0t.forEach(t),j$r=r(uIe," (ELECTRA model)"),uIe.forEach(t),D$r=i(Ce),g5=n(Ce,"LI",{});var bIe=s(g5);u9e=n(bIe,"STRONG",{});var F0t=s(u9e);G$r=r(F0t,"longt5"),F0t.forEach(t),O$r=r(bIe," \u2014 "),uY=n(bIe,"A",{href:!0});var T0t=s(uY);V$r=r(T0t,"FlaxLongT5ForConditionalGeneration"),T0t.forEach(t),X$r=r(bIe," (LongT5 model)"),bIe.forEach(t),z$r=i(Ce),h5=n(Ce,"LI",{});var vIe=s(h5);b9e=n(vIe,"STRONG",{});var M0t=s(b9e);W$r=r(M0t,"mbart"),M0t.forEach(t),Q$r=r(vIe," \u2014 "),bY=n(vIe,"A",{href:!0});var E0t=s(bY);H$r=r(E0t,"FlaxMBartForConditionalGeneration"),E0t.forEach(t),U$r=r(vIe," (mBART model)"),vIe.forEach(t),J$r=i(Ce),p5=n(Ce,"LI",{});var FIe=s(p5);v9e=n(FIe,"STRONG",{});var C0t=s(v9e);Y$r=r(C0t,"mt5"),C0t.forEach(t),K$r=r(FIe," \u2014 "),vY=n(FIe,"A",{href:!0});var w0t=s(vY);Z$r=r(w0t,"FlaxMT5ForConditionalGeneration"),w0t.forEach(t),ekr=r(FIe," (mT5 model)"),FIe.forEach(t),okr=i(Ce),_5=n(Ce,"LI",{});var TIe=s(_5);F9e=n(TIe,"STRONG",{});var A0t=s(F9e);rkr=r(A0t,"roberta"),A0t.forEach(t),tkr=r(TIe," \u2014 "),FY=n(TIe,"A",{href:!0});var y0t=s(FY);akr=r(y0t,"FlaxRobertaForMaskedLM"),y0t.forEach(t),nkr=r(TIe," (RoBERTa model)"),TIe.forEach(t),skr=i(Ce),u5=n(Ce,"LI",{});var MIe=s(u5);T9e=n(MIe,"STRONG",{});var L0t=s(T9e);lkr=r(L0t,"roformer"),L0t.forEach(t),ikr=r(MIe," \u2014 "),TY=n(MIe,"A",{href:!0});var x0t=s(TY);dkr=r(x0t,"FlaxRoFormerForMaskedLM"),x0t.forEach(t),ckr=r(MIe," (RoFormer model)"),MIe.forEach(t),fkr=i(Ce),b5=n(Ce,"LI",{});var EIe=s(b5);M9e=n(EIe,"STRONG",{});var $0t=s(M9e);mkr=r($0t,"t5"),$0t.forEach(t),gkr=r(EIe," \u2014 "),MY=n(EIe,"A",{href:!0});var k0t=s(MY);hkr=r(k0t,"FlaxT5ForConditionalGeneration"),k0t.forEach(t),pkr=r(EIe," (T5 model)"),EIe.forEach(t),_kr=i(Ce),v5=n(Ce,"LI",{});var CIe=s(v5);E9e=n(CIe,"STRONG",{});var S0t=s(E9e);ukr=r(S0t,"wav2vec2"),S0t.forEach(t),bkr=r(CIe," \u2014 "),EY=n(CIe,"A",{href:!0});var R0t=s(EY);vkr=r(R0t,"FlaxWav2Vec2ForPreTraining"),R0t.forEach(t),Fkr=r(CIe," (Wav2Vec2 model)"),CIe.forEach(t),Tkr=i(Ce),F5=n(Ce,"LI",{});var wIe=s(F5);C9e=n(wIe,"STRONG",{});var P0t=s(C9e);Mkr=r(P0t,"xlm-roberta"),P0t.forEach(t),Ekr=r(wIe," \u2014 "),CY=n(wIe,"A",{href:!0});var B0t=s(CY);Ckr=r(B0t,"FlaxXLMRobertaForMaskedLM"),B0t.forEach(t),wkr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),Ce.forEach(t),Akr=i(Wl),T(T5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),uje=i(f),Nc=n(f,"H2",{class:!0});var CGe=s(Nc);M5=n(CGe,"A",{id:!0,class:!0,href:!0});var I0t=s(M5);w9e=n(I0t,"SPAN",{});var q0t=s(w9e);T(B8.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),ykr=i(CGe),A9e=n(CGe,"SPAN",{});var N0t=s(A9e);Lkr=r(N0t,"FlaxAutoModelForMaskedLM"),N0t.forEach(t),CGe.forEach(t),bje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(I8.$$.fragment,Ql),xkr=i(Ql),jc=n(Ql,"P",{});var See=s(jc);$kr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wY=n(See,"A",{href:!0});var j0t=s(wY);kkr=r(j0t,"from_pretrained()"),j0t.forEach(t),Skr=r(See," class method or the "),AY=n(See,"A",{href:!0});var D0t=s(AY);Rkr=r(D0t,"from_config()"),D0t.forEach(t),Pkr=r(See,` class
method.`),See.forEach(t),Bkr=i(Ql),q8=n(Ql,"P",{});var wGe=s(q8);Ikr=r(wGe,"This class cannot be instantiated directly using "),y9e=n(wGe,"CODE",{});var G0t=s(y9e);qkr=r(G0t,"__init__()"),G0t.forEach(t),Nkr=r(wGe," (throws an error)."),wGe.forEach(t),jkr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var e0=s(Xt);T(N8.$$.fragment,e0),Dkr=i(e0),L9e=n(e0,"P",{});var O0t=s(L9e);Gkr=r(O0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O0t.forEach(t),Okr=i(e0),Dc=n(e0,"P",{});var Ree=s(Dc);Vkr=r(Ree,`Note:
Loading a model from its configuration file does `),x9e=n(Ree,"STRONG",{});var V0t=s(x9e);Xkr=r(V0t,"not"),V0t.forEach(t),zkr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Ree,"A",{href:!0});var X0t=s(yY);Wkr=r(X0t,"from_pretrained()"),X0t.forEach(t),Qkr=r(Ree," to load the model weights."),Ree.forEach(t),Hkr=i(e0),T(E5.$$.fragment,e0),e0.forEach(t),Ukr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(j8.$$.fragment,Hl),Jkr=i(Hl),$9e=n(Hl,"P",{});var z0t=s($9e);Ykr=r(z0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z0t.forEach(t),Kkr=i(Hl),un=n(Hl,"P",{});var o0=s(un);Zkr=r(o0,"The model class to instantiate is selected based on the "),k9e=n(o0,"CODE",{});var W0t=s(k9e);eSr=r(W0t,"model_type"),W0t.forEach(t),oSr=r(o0,` property of the config object (either
passed as an argument or loaded from `),S9e=n(o0,"CODE",{});var Q0t=s(S9e);rSr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),tSr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R9e=n(o0,"CODE",{});var H0t=s(R9e);aSr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),nSr=r(o0,":"),o0.forEach(t),sSr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);C5=n(Ie,"LI",{});var AIe=s(C5);P9e=n(AIe,"STRONG",{});var U0t=s(P9e);lSr=r(U0t,"albert"),U0t.forEach(t),iSr=r(AIe," \u2014 "),LY=n(AIe,"A",{href:!0});var J0t=s(LY);dSr=r(J0t,"FlaxAlbertForMaskedLM"),J0t.forEach(t),cSr=r(AIe," (ALBERT model)"),AIe.forEach(t),fSr=i(Ie),w5=n(Ie,"LI",{});var yIe=s(w5);B9e=n(yIe,"STRONG",{});var Y0t=s(B9e);mSr=r(Y0t,"bart"),Y0t.forEach(t),gSr=r(yIe," \u2014 "),xY=n(yIe,"A",{href:!0});var K0t=s(xY);hSr=r(K0t,"FlaxBartForConditionalGeneration"),K0t.forEach(t),pSr=r(yIe," (BART model)"),yIe.forEach(t),_Sr=i(Ie),A5=n(Ie,"LI",{});var LIe=s(A5);I9e=n(LIe,"STRONG",{});var Z0t=s(I9e);uSr=r(Z0t,"bert"),Z0t.forEach(t),bSr=r(LIe," \u2014 "),$Y=n(LIe,"A",{href:!0});var eAt=s($Y);vSr=r(eAt,"FlaxBertForMaskedLM"),eAt.forEach(t),FSr=r(LIe," (BERT model)"),LIe.forEach(t),TSr=i(Ie),y5=n(Ie,"LI",{});var xIe=s(y5);q9e=n(xIe,"STRONG",{});var oAt=s(q9e);MSr=r(oAt,"big_bird"),oAt.forEach(t),ESr=r(xIe," \u2014 "),kY=n(xIe,"A",{href:!0});var rAt=s(kY);CSr=r(rAt,"FlaxBigBirdForMaskedLM"),rAt.forEach(t),wSr=r(xIe," (BigBird model)"),xIe.forEach(t),ASr=i(Ie),L5=n(Ie,"LI",{});var $Ie=s(L5);N9e=n($Ie,"STRONG",{});var tAt=s(N9e);ySr=r(tAt,"distilbert"),tAt.forEach(t),LSr=r($Ie," \u2014 "),SY=n($Ie,"A",{href:!0});var aAt=s(SY);xSr=r(aAt,"FlaxDistilBertForMaskedLM"),aAt.forEach(t),$Sr=r($Ie," (DistilBERT model)"),$Ie.forEach(t),kSr=i(Ie),x5=n(Ie,"LI",{});var kIe=s(x5);j9e=n(kIe,"STRONG",{});var nAt=s(j9e);SSr=r(nAt,"electra"),nAt.forEach(t),RSr=r(kIe," \u2014 "),RY=n(kIe,"A",{href:!0});var sAt=s(RY);PSr=r(sAt,"FlaxElectraForMaskedLM"),sAt.forEach(t),BSr=r(kIe," (ELECTRA model)"),kIe.forEach(t),ISr=i(Ie),$5=n(Ie,"LI",{});var SIe=s($5);D9e=n(SIe,"STRONG",{});var lAt=s(D9e);qSr=r(lAt,"mbart"),lAt.forEach(t),NSr=r(SIe," \u2014 "),PY=n(SIe,"A",{href:!0});var iAt=s(PY);jSr=r(iAt,"FlaxMBartForConditionalGeneration"),iAt.forEach(t),DSr=r(SIe," (mBART model)"),SIe.forEach(t),GSr=i(Ie),k5=n(Ie,"LI",{});var RIe=s(k5);G9e=n(RIe,"STRONG",{});var dAt=s(G9e);OSr=r(dAt,"roberta"),dAt.forEach(t),VSr=r(RIe," \u2014 "),BY=n(RIe,"A",{href:!0});var cAt=s(BY);XSr=r(cAt,"FlaxRobertaForMaskedLM"),cAt.forEach(t),zSr=r(RIe," (RoBERTa model)"),RIe.forEach(t),WSr=i(Ie),S5=n(Ie,"LI",{});var PIe=s(S5);O9e=n(PIe,"STRONG",{});var fAt=s(O9e);QSr=r(fAt,"roformer"),fAt.forEach(t),HSr=r(PIe," \u2014 "),IY=n(PIe,"A",{href:!0});var mAt=s(IY);USr=r(mAt,"FlaxRoFormerForMaskedLM"),mAt.forEach(t),JSr=r(PIe," (RoFormer model)"),PIe.forEach(t),YSr=i(Ie),R5=n(Ie,"LI",{});var BIe=s(R5);V9e=n(BIe,"STRONG",{});var gAt=s(V9e);KSr=r(gAt,"xlm-roberta"),gAt.forEach(t),ZSr=r(BIe," \u2014 "),qY=n(BIe,"A",{href:!0});var hAt=s(qY);eRr=r(hAt,"FlaxXLMRobertaForMaskedLM"),hAt.forEach(t),oRr=r(BIe," (XLM-RoBERTa model)"),BIe.forEach(t),Ie.forEach(t),rRr=i(Hl),T(P5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),vje=i(f),Gc=n(f,"H2",{class:!0});var AGe=s(Gc);B5=n(AGe,"A",{id:!0,class:!0,href:!0});var pAt=s(B5);X9e=n(pAt,"SPAN",{});var _At=s(X9e);T(D8.$$.fragment,_At),_At.forEach(t),pAt.forEach(t),tRr=i(AGe),z9e=n(AGe,"SPAN",{});var uAt=s(z9e);aRr=r(uAt,"FlaxAutoModelForSeq2SeqLM"),uAt.forEach(t),AGe.forEach(t),Fje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(G8.$$.fragment,Ul),nRr=i(Ul),Oc=n(Ul,"P",{});var Pee=s(Oc);sRr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NY=n(Pee,"A",{href:!0});var bAt=s(NY);lRr=r(bAt,"from_pretrained()"),bAt.forEach(t),iRr=r(Pee," class method or the "),jY=n(Pee,"A",{href:!0});var vAt=s(jY);dRr=r(vAt,"from_config()"),vAt.forEach(t),cRr=r(Pee,` class
method.`),Pee.forEach(t),fRr=i(Ul),O8=n(Ul,"P",{});var yGe=s(O8);mRr=r(yGe,"This class cannot be instantiated directly using "),W9e=n(yGe,"CODE",{});var FAt=s(W9e);gRr=r(FAt,"__init__()"),FAt.forEach(t),hRr=r(yGe," (throws an error)."),yGe.forEach(t),pRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var r0=s(zt);T(V8.$$.fragment,r0),_Rr=i(r0),Q9e=n(r0,"P",{});var TAt=s(Q9e);uRr=r(TAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TAt.forEach(t),bRr=i(r0),Vc=n(r0,"P",{});var Bee=s(Vc);vRr=r(Bee,`Note:
Loading a model from its configuration file does `),H9e=n(Bee,"STRONG",{});var MAt=s(H9e);FRr=r(MAt,"not"),MAt.forEach(t),TRr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(Bee,"A",{href:!0});var EAt=s(DY);MRr=r(EAt,"from_pretrained()"),EAt.forEach(t),ERr=r(Bee," to load the model weights."),Bee.forEach(t),CRr=i(r0),T(I5.$$.fragment,r0),r0.forEach(t),wRr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(X8.$$.fragment,Jl),ARr=i(Jl),U9e=n(Jl,"P",{});var CAt=s(U9e);yRr=r(CAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CAt.forEach(t),LRr=i(Jl),bn=n(Jl,"P",{});var t0=s(bn);xRr=r(t0,"The model class to instantiate is selected based on the "),J9e=n(t0,"CODE",{});var wAt=s(J9e);$Rr=r(wAt,"model_type"),wAt.forEach(t),kRr=r(t0,` property of the config object (either
passed as an argument or loaded from `),Y9e=n(t0,"CODE",{});var AAt=s(Y9e);SRr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),RRr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=n(t0,"CODE",{});var yAt=s(K9e);PRr=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),BRr=r(t0,":"),t0.forEach(t),IRr=i(Jl),xe=n(Jl,"UL",{});var qe=s(xe);q5=n(qe,"LI",{});var IIe=s(q5);Z9e=n(IIe,"STRONG",{});var LAt=s(Z9e);qRr=r(LAt,"bart"),LAt.forEach(t),NRr=r(IIe," \u2014 "),GY=n(IIe,"A",{href:!0});var xAt=s(GY);jRr=r(xAt,"FlaxBartForConditionalGeneration"),xAt.forEach(t),DRr=r(IIe," (BART model)"),IIe.forEach(t),GRr=i(qe),N5=n(qe,"LI",{});var qIe=s(N5);eMe=n(qIe,"STRONG",{});var $At=s(eMe);ORr=r($At,"blenderbot"),$At.forEach(t),VRr=r(qIe," \u2014 "),OY=n(qIe,"A",{href:!0});var kAt=s(OY);XRr=r(kAt,"FlaxBlenderbotForConditionalGeneration"),kAt.forEach(t),zRr=r(qIe," (Blenderbot model)"),qIe.forEach(t),WRr=i(qe),j5=n(qe,"LI",{});var NIe=s(j5);oMe=n(NIe,"STRONG",{});var SAt=s(oMe);QRr=r(SAt,"blenderbot-small"),SAt.forEach(t),HRr=r(NIe," \u2014 "),VY=n(NIe,"A",{href:!0});var RAt=s(VY);URr=r(RAt,"FlaxBlenderbotSmallForConditionalGeneration"),RAt.forEach(t),JRr=r(NIe," (BlenderbotSmall model)"),NIe.forEach(t),YRr=i(qe),D5=n(qe,"LI",{});var jIe=s(D5);rMe=n(jIe,"STRONG",{});var PAt=s(rMe);KRr=r(PAt,"encoder-decoder"),PAt.forEach(t),ZRr=r(jIe," \u2014 "),XY=n(jIe,"A",{href:!0});var BAt=s(XY);ePr=r(BAt,"FlaxEncoderDecoderModel"),BAt.forEach(t),oPr=r(jIe," (Encoder decoder model)"),jIe.forEach(t),rPr=i(qe),G5=n(qe,"LI",{});var DIe=s(G5);tMe=n(DIe,"STRONG",{});var IAt=s(tMe);tPr=r(IAt,"longt5"),IAt.forEach(t),aPr=r(DIe," \u2014 "),zY=n(DIe,"A",{href:!0});var qAt=s(zY);nPr=r(qAt,"FlaxLongT5ForConditionalGeneration"),qAt.forEach(t),sPr=r(DIe," (LongT5 model)"),DIe.forEach(t),lPr=i(qe),O5=n(qe,"LI",{});var GIe=s(O5);aMe=n(GIe,"STRONG",{});var NAt=s(aMe);iPr=r(NAt,"marian"),NAt.forEach(t),dPr=r(GIe," \u2014 "),WY=n(GIe,"A",{href:!0});var jAt=s(WY);cPr=r(jAt,"FlaxMarianMTModel"),jAt.forEach(t),fPr=r(GIe," (Marian model)"),GIe.forEach(t),mPr=i(qe),V5=n(qe,"LI",{});var OIe=s(V5);nMe=n(OIe,"STRONG",{});var DAt=s(nMe);gPr=r(DAt,"mbart"),DAt.forEach(t),hPr=r(OIe," \u2014 "),QY=n(OIe,"A",{href:!0});var GAt=s(QY);pPr=r(GAt,"FlaxMBartForConditionalGeneration"),GAt.forEach(t),_Pr=r(OIe," (mBART model)"),OIe.forEach(t),uPr=i(qe),X5=n(qe,"LI",{});var VIe=s(X5);sMe=n(VIe,"STRONG",{});var OAt=s(sMe);bPr=r(OAt,"mt5"),OAt.forEach(t),vPr=r(VIe," \u2014 "),HY=n(VIe,"A",{href:!0});var VAt=s(HY);FPr=r(VAt,"FlaxMT5ForConditionalGeneration"),VAt.forEach(t),TPr=r(VIe," (mT5 model)"),VIe.forEach(t),MPr=i(qe),z5=n(qe,"LI",{});var XIe=s(z5);lMe=n(XIe,"STRONG",{});var XAt=s(lMe);EPr=r(XAt,"pegasus"),XAt.forEach(t),CPr=r(XIe," \u2014 "),UY=n(XIe,"A",{href:!0});var zAt=s(UY);wPr=r(zAt,"FlaxPegasusForConditionalGeneration"),zAt.forEach(t),APr=r(XIe," (Pegasus model)"),XIe.forEach(t),yPr=i(qe),W5=n(qe,"LI",{});var zIe=s(W5);iMe=n(zIe,"STRONG",{});var WAt=s(iMe);LPr=r(WAt,"t5"),WAt.forEach(t),xPr=r(zIe," \u2014 "),JY=n(zIe,"A",{href:!0});var QAt=s(JY);$Pr=r(QAt,"FlaxT5ForConditionalGeneration"),QAt.forEach(t),kPr=r(zIe," (T5 model)"),zIe.forEach(t),qe.forEach(t),SPr=i(Jl),T(Q5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Tje=i(f),Xc=n(f,"H2",{class:!0});var LGe=s(Xc);H5=n(LGe,"A",{id:!0,class:!0,href:!0});var HAt=s(H5);dMe=n(HAt,"SPAN",{});var UAt=s(dMe);T(z8.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),RPr=i(LGe),cMe=n(LGe,"SPAN",{});var JAt=s(cMe);PPr=r(JAt,"FlaxAutoModelForSequenceClassification"),JAt.forEach(t),LGe.forEach(t),Mje=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(W8.$$.fragment,Yl),BPr=i(Yl),zc=n(Yl,"P",{});var Iee=s(zc);IPr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=n(Iee,"A",{href:!0});var YAt=s(YY);qPr=r(YAt,"from_pretrained()"),YAt.forEach(t),NPr=r(Iee," class method or the "),KY=n(Iee,"A",{href:!0});var KAt=s(KY);jPr=r(KAt,"from_config()"),KAt.forEach(t),DPr=r(Iee,` class
method.`),Iee.forEach(t),GPr=i(Yl),Q8=n(Yl,"P",{});var xGe=s(Q8);OPr=r(xGe,"This class cannot be instantiated directly using "),fMe=n(xGe,"CODE",{});var ZAt=s(fMe);VPr=r(ZAt,"__init__()"),ZAt.forEach(t),XPr=r(xGe," (throws an error)."),xGe.forEach(t),zPr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var a0=s(Wt);T(H8.$$.fragment,a0),WPr=i(a0),mMe=n(a0,"P",{});var eyt=s(mMe);QPr=r(eyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eyt.forEach(t),HPr=i(a0),Wc=n(a0,"P",{});var qee=s(Wc);UPr=r(qee,`Note:
Loading a model from its configuration file does `),gMe=n(qee,"STRONG",{});var oyt=s(gMe);JPr=r(oyt,"not"),oyt.forEach(t),YPr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(qee,"A",{href:!0});var ryt=s(ZY);KPr=r(ryt,"from_pretrained()"),ryt.forEach(t),ZPr=r(qee," to load the model weights."),qee.forEach(t),eBr=i(a0),T(U5.$$.fragment,a0),a0.forEach(t),oBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(U8.$$.fragment,Kl),rBr=i(Kl),hMe=n(Kl,"P",{});var tyt=s(hMe);tBr=r(tyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tyt.forEach(t),aBr=i(Kl),vn=n(Kl,"P",{});var n0=s(vn);nBr=r(n0,"The model class to instantiate is selected based on the "),pMe=n(n0,"CODE",{});var ayt=s(pMe);sBr=r(ayt,"model_type"),ayt.forEach(t),lBr=r(n0,` property of the config object (either
passed as an argument or loaded from `),_Me=n(n0,"CODE",{});var nyt=s(_Me);iBr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),dBr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(n0,"CODE",{});var syt=s(uMe);cBr=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),fBr=r(n0,":"),n0.forEach(t),mBr=i(Kl),$e=n(Kl,"UL",{});var Ne=s($e);J5=n(Ne,"LI",{});var WIe=s(J5);bMe=n(WIe,"STRONG",{});var lyt=s(bMe);gBr=r(lyt,"albert"),lyt.forEach(t),hBr=r(WIe," \u2014 "),eK=n(WIe,"A",{href:!0});var iyt=s(eK);pBr=r(iyt,"FlaxAlbertForSequenceClassification"),iyt.forEach(t),_Br=r(WIe," (ALBERT model)"),WIe.forEach(t),uBr=i(Ne),Y5=n(Ne,"LI",{});var QIe=s(Y5);vMe=n(QIe,"STRONG",{});var dyt=s(vMe);bBr=r(dyt,"bart"),dyt.forEach(t),vBr=r(QIe," \u2014 "),oK=n(QIe,"A",{href:!0});var cyt=s(oK);FBr=r(cyt,"FlaxBartForSequenceClassification"),cyt.forEach(t),TBr=r(QIe," (BART model)"),QIe.forEach(t),MBr=i(Ne),K5=n(Ne,"LI",{});var HIe=s(K5);FMe=n(HIe,"STRONG",{});var fyt=s(FMe);EBr=r(fyt,"bert"),fyt.forEach(t),CBr=r(HIe," \u2014 "),rK=n(HIe,"A",{href:!0});var myt=s(rK);wBr=r(myt,"FlaxBertForSequenceClassification"),myt.forEach(t),ABr=r(HIe," (BERT model)"),HIe.forEach(t),yBr=i(Ne),Z5=n(Ne,"LI",{});var UIe=s(Z5);TMe=n(UIe,"STRONG",{});var gyt=s(TMe);LBr=r(gyt,"big_bird"),gyt.forEach(t),xBr=r(UIe," \u2014 "),tK=n(UIe,"A",{href:!0});var hyt=s(tK);$Br=r(hyt,"FlaxBigBirdForSequenceClassification"),hyt.forEach(t),kBr=r(UIe," (BigBird model)"),UIe.forEach(t),SBr=i(Ne),eC=n(Ne,"LI",{});var JIe=s(eC);MMe=n(JIe,"STRONG",{});var pyt=s(MMe);RBr=r(pyt,"distilbert"),pyt.forEach(t),PBr=r(JIe," \u2014 "),aK=n(JIe,"A",{href:!0});var _yt=s(aK);BBr=r(_yt,"FlaxDistilBertForSequenceClassification"),_yt.forEach(t),IBr=r(JIe," (DistilBERT model)"),JIe.forEach(t),qBr=i(Ne),oC=n(Ne,"LI",{});var YIe=s(oC);EMe=n(YIe,"STRONG",{});var uyt=s(EMe);NBr=r(uyt,"electra"),uyt.forEach(t),jBr=r(YIe," \u2014 "),nK=n(YIe,"A",{href:!0});var byt=s(nK);DBr=r(byt,"FlaxElectraForSequenceClassification"),byt.forEach(t),GBr=r(YIe," (ELECTRA model)"),YIe.forEach(t),OBr=i(Ne),rC=n(Ne,"LI",{});var KIe=s(rC);CMe=n(KIe,"STRONG",{});var vyt=s(CMe);VBr=r(vyt,"mbart"),vyt.forEach(t),XBr=r(KIe," \u2014 "),sK=n(KIe,"A",{href:!0});var Fyt=s(sK);zBr=r(Fyt,"FlaxMBartForSequenceClassification"),Fyt.forEach(t),WBr=r(KIe," (mBART model)"),KIe.forEach(t),QBr=i(Ne),tC=n(Ne,"LI",{});var ZIe=s(tC);wMe=n(ZIe,"STRONG",{});var Tyt=s(wMe);HBr=r(Tyt,"roberta"),Tyt.forEach(t),UBr=r(ZIe," \u2014 "),lK=n(ZIe,"A",{href:!0});var Myt=s(lK);JBr=r(Myt,"FlaxRobertaForSequenceClassification"),Myt.forEach(t),YBr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),KBr=i(Ne),aC=n(Ne,"LI",{});var eqe=s(aC);AMe=n(eqe,"STRONG",{});var Eyt=s(AMe);ZBr=r(Eyt,"roformer"),Eyt.forEach(t),eIr=r(eqe," \u2014 "),iK=n(eqe,"A",{href:!0});var Cyt=s(iK);oIr=r(Cyt,"FlaxRoFormerForSequenceClassification"),Cyt.forEach(t),rIr=r(eqe," (RoFormer model)"),eqe.forEach(t),tIr=i(Ne),nC=n(Ne,"LI",{});var oqe=s(nC);yMe=n(oqe,"STRONG",{});var wyt=s(yMe);aIr=r(wyt,"xlm-roberta"),wyt.forEach(t),nIr=r(oqe," \u2014 "),dK=n(oqe,"A",{href:!0});var Ayt=s(dK);sIr=r(Ayt,"FlaxXLMRobertaForSequenceClassification"),Ayt.forEach(t),lIr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),Ne.forEach(t),iIr=i(Kl),T(sC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Eje=i(f),Qc=n(f,"H2",{class:!0});var $Ge=s(Qc);lC=n($Ge,"A",{id:!0,class:!0,href:!0});var yyt=s(lC);LMe=n(yyt,"SPAN",{});var Lyt=s(LMe);T(J8.$$.fragment,Lyt),Lyt.forEach(t),yyt.forEach(t),dIr=i($Ge),xMe=n($Ge,"SPAN",{});var xyt=s(xMe);cIr=r(xyt,"FlaxAutoModelForQuestionAnswering"),xyt.forEach(t),$Ge.forEach(t),Cje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(Y8.$$.fragment,Zl),fIr=i(Zl),Hc=n(Zl,"P",{});var Nee=s(Hc);mIr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=n(Nee,"A",{href:!0});var $yt=s(cK);gIr=r($yt,"from_pretrained()"),$yt.forEach(t),hIr=r(Nee," class method or the "),fK=n(Nee,"A",{href:!0});var kyt=s(fK);pIr=r(kyt,"from_config()"),kyt.forEach(t),_Ir=r(Nee,` class
method.`),Nee.forEach(t),uIr=i(Zl),K8=n(Zl,"P",{});var kGe=s(K8);bIr=r(kGe,"This class cannot be instantiated directly using "),$Me=n(kGe,"CODE",{});var Syt=s($Me);vIr=r(Syt,"__init__()"),Syt.forEach(t),FIr=r(kGe," (throws an error)."),kGe.forEach(t),TIr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var s0=s(Qt);T(Z8.$$.fragment,s0),MIr=i(s0),kMe=n(s0,"P",{});var Ryt=s(kMe);EIr=r(Ryt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ryt.forEach(t),CIr=i(s0),Uc=n(s0,"P",{});var jee=s(Uc);wIr=r(jee,`Note:
Loading a model from its configuration file does `),SMe=n(jee,"STRONG",{});var Pyt=s(SMe);AIr=r(Pyt,"not"),Pyt.forEach(t),yIr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(jee,"A",{href:!0});var Byt=s(mK);LIr=r(Byt,"from_pretrained()"),Byt.forEach(t),xIr=r(jee," to load the model weights."),jee.forEach(t),$Ir=i(s0),T(iC.$$.fragment,s0),s0.forEach(t),kIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ex.$$.fragment,ei),SIr=i(ei),RMe=n(ei,"P",{});var Iyt=s(RMe);RIr=r(Iyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Iyt.forEach(t),PIr=i(ei),Fn=n(ei,"P",{});var l0=s(Fn);BIr=r(l0,"The model class to instantiate is selected based on the "),PMe=n(l0,"CODE",{});var qyt=s(PMe);IIr=r(qyt,"model_type"),qyt.forEach(t),qIr=r(l0,` property of the config object (either
passed as an argument or loaded from `),BMe=n(l0,"CODE",{});var Nyt=s(BMe);NIr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),jIr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(l0,"CODE",{});var jyt=s(IMe);DIr=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),GIr=r(l0,":"),l0.forEach(t),OIr=i(ei),ke=n(ei,"UL",{});var je=s(ke);dC=n(je,"LI",{});var rqe=s(dC);qMe=n(rqe,"STRONG",{});var Dyt=s(qMe);VIr=r(Dyt,"albert"),Dyt.forEach(t),XIr=r(rqe," \u2014 "),gK=n(rqe,"A",{href:!0});var Gyt=s(gK);zIr=r(Gyt,"FlaxAlbertForQuestionAnswering"),Gyt.forEach(t),WIr=r(rqe," (ALBERT model)"),rqe.forEach(t),QIr=i(je),cC=n(je,"LI",{});var tqe=s(cC);NMe=n(tqe,"STRONG",{});var Oyt=s(NMe);HIr=r(Oyt,"bart"),Oyt.forEach(t),UIr=r(tqe," \u2014 "),hK=n(tqe,"A",{href:!0});var Vyt=s(hK);JIr=r(Vyt,"FlaxBartForQuestionAnswering"),Vyt.forEach(t),YIr=r(tqe," (BART model)"),tqe.forEach(t),KIr=i(je),fC=n(je,"LI",{});var aqe=s(fC);jMe=n(aqe,"STRONG",{});var Xyt=s(jMe);ZIr=r(Xyt,"bert"),Xyt.forEach(t),eqr=r(aqe," \u2014 "),pK=n(aqe,"A",{href:!0});var zyt=s(pK);oqr=r(zyt,"FlaxBertForQuestionAnswering"),zyt.forEach(t),rqr=r(aqe," (BERT model)"),aqe.forEach(t),tqr=i(je),mC=n(je,"LI",{});var nqe=s(mC);DMe=n(nqe,"STRONG",{});var Wyt=s(DMe);aqr=r(Wyt,"big_bird"),Wyt.forEach(t),nqr=r(nqe," \u2014 "),_K=n(nqe,"A",{href:!0});var Qyt=s(_K);sqr=r(Qyt,"FlaxBigBirdForQuestionAnswering"),Qyt.forEach(t),lqr=r(nqe," (BigBird model)"),nqe.forEach(t),iqr=i(je),gC=n(je,"LI",{});var sqe=s(gC);GMe=n(sqe,"STRONG",{});var Hyt=s(GMe);dqr=r(Hyt,"distilbert"),Hyt.forEach(t),cqr=r(sqe," \u2014 "),uK=n(sqe,"A",{href:!0});var Uyt=s(uK);fqr=r(Uyt,"FlaxDistilBertForQuestionAnswering"),Uyt.forEach(t),mqr=r(sqe," (DistilBERT model)"),sqe.forEach(t),gqr=i(je),hC=n(je,"LI",{});var lqe=s(hC);OMe=n(lqe,"STRONG",{});var Jyt=s(OMe);hqr=r(Jyt,"electra"),Jyt.forEach(t),pqr=r(lqe," \u2014 "),bK=n(lqe,"A",{href:!0});var Yyt=s(bK);_qr=r(Yyt,"FlaxElectraForQuestionAnswering"),Yyt.forEach(t),uqr=r(lqe," (ELECTRA model)"),lqe.forEach(t),bqr=i(je),pC=n(je,"LI",{});var iqe=s(pC);VMe=n(iqe,"STRONG",{});var Kyt=s(VMe);vqr=r(Kyt,"mbart"),Kyt.forEach(t),Fqr=r(iqe," \u2014 "),vK=n(iqe,"A",{href:!0});var Zyt=s(vK);Tqr=r(Zyt,"FlaxMBartForQuestionAnswering"),Zyt.forEach(t),Mqr=r(iqe," (mBART model)"),iqe.forEach(t),Eqr=i(je),_C=n(je,"LI",{});var dqe=s(_C);XMe=n(dqe,"STRONG",{});var eLt=s(XMe);Cqr=r(eLt,"roberta"),eLt.forEach(t),wqr=r(dqe," \u2014 "),FK=n(dqe,"A",{href:!0});var oLt=s(FK);Aqr=r(oLt,"FlaxRobertaForQuestionAnswering"),oLt.forEach(t),yqr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Lqr=i(je),uC=n(je,"LI",{});var cqe=s(uC);zMe=n(cqe,"STRONG",{});var rLt=s(zMe);xqr=r(rLt,"roformer"),rLt.forEach(t),$qr=r(cqe," \u2014 "),TK=n(cqe,"A",{href:!0});var tLt=s(TK);kqr=r(tLt,"FlaxRoFormerForQuestionAnswering"),tLt.forEach(t),Sqr=r(cqe," (RoFormer model)"),cqe.forEach(t),Rqr=i(je),bC=n(je,"LI",{});var fqe=s(bC);WMe=n(fqe,"STRONG",{});var aLt=s(WMe);Pqr=r(aLt,"xlm-roberta"),aLt.forEach(t),Bqr=r(fqe," \u2014 "),MK=n(fqe,"A",{href:!0});var nLt=s(MK);Iqr=r(nLt,"FlaxXLMRobertaForQuestionAnswering"),nLt.forEach(t),qqr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),je.forEach(t),Nqr=i(ei),T(vC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),wje=i(f),Jc=n(f,"H2",{class:!0});var SGe=s(Jc);FC=n(SGe,"A",{id:!0,class:!0,href:!0});var sLt=s(FC);QMe=n(sLt,"SPAN",{});var lLt=s(QMe);T(ox.$$.fragment,lLt),lLt.forEach(t),sLt.forEach(t),jqr=i(SGe),HMe=n(SGe,"SPAN",{});var iLt=s(HMe);Dqr=r(iLt,"FlaxAutoModelForTokenClassification"),iLt.forEach(t),SGe.forEach(t),Aje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(rx.$$.fragment,oi),Gqr=i(oi),Yc=n(oi,"P",{});var Dee=s(Yc);Oqr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=n(Dee,"A",{href:!0});var dLt=s(EK);Vqr=r(dLt,"from_pretrained()"),dLt.forEach(t),Xqr=r(Dee," class method or the "),CK=n(Dee,"A",{href:!0});var cLt=s(CK);zqr=r(cLt,"from_config()"),cLt.forEach(t),Wqr=r(Dee,` class
method.`),Dee.forEach(t),Qqr=i(oi),tx=n(oi,"P",{});var RGe=s(tx);Hqr=r(RGe,"This class cannot be instantiated directly using "),UMe=n(RGe,"CODE",{});var fLt=s(UMe);Uqr=r(fLt,"__init__()"),fLt.forEach(t),Jqr=r(RGe," (throws an error)."),RGe.forEach(t),Yqr=i(oi),Ht=n(oi,"DIV",{class:!0});var i0=s(Ht);T(ax.$$.fragment,i0),Kqr=i(i0),JMe=n(i0,"P",{});var mLt=s(JMe);Zqr=r(mLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mLt.forEach(t),eNr=i(i0),Kc=n(i0,"P",{});var Gee=s(Kc);oNr=r(Gee,`Note:
Loading a model from its configuration file does `),YMe=n(Gee,"STRONG",{});var gLt=s(YMe);rNr=r(gLt,"not"),gLt.forEach(t),tNr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Gee,"A",{href:!0});var hLt=s(wK);aNr=r(hLt,"from_pretrained()"),hLt.forEach(t),nNr=r(Gee," to load the model weights."),Gee.forEach(t),sNr=i(i0),T(TC.$$.fragment,i0),i0.forEach(t),lNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(nx.$$.fragment,ri),iNr=i(ri),KMe=n(ri,"P",{});var pLt=s(KMe);dNr=r(pLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pLt.forEach(t),cNr=i(ri),Tn=n(ri,"P",{});var d0=s(Tn);fNr=r(d0,"The model class to instantiate is selected based on the "),ZMe=n(d0,"CODE",{});var _Lt=s(ZMe);mNr=r(_Lt,"model_type"),_Lt.forEach(t),gNr=r(d0,` property of the config object (either
passed as an argument or loaded from `),e4e=n(d0,"CODE",{});var uLt=s(e4e);hNr=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),pNr=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(d0,"CODE",{});var bLt=s(o4e);_Nr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),uNr=r(d0,":"),d0.forEach(t),bNr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);MC=n(Fo,"LI",{});var mqe=s(MC);r4e=n(mqe,"STRONG",{});var vLt=s(r4e);vNr=r(vLt,"albert"),vLt.forEach(t),FNr=r(mqe," \u2014 "),AK=n(mqe,"A",{href:!0});var FLt=s(AK);TNr=r(FLt,"FlaxAlbertForTokenClassification"),FLt.forEach(t),MNr=r(mqe," (ALBERT model)"),mqe.forEach(t),ENr=i(Fo),EC=n(Fo,"LI",{});var gqe=s(EC);t4e=n(gqe,"STRONG",{});var TLt=s(t4e);CNr=r(TLt,"bert"),TLt.forEach(t),wNr=r(gqe," \u2014 "),yK=n(gqe,"A",{href:!0});var MLt=s(yK);ANr=r(MLt,"FlaxBertForTokenClassification"),MLt.forEach(t),yNr=r(gqe," (BERT model)"),gqe.forEach(t),LNr=i(Fo),CC=n(Fo,"LI",{});var hqe=s(CC);a4e=n(hqe,"STRONG",{});var ELt=s(a4e);xNr=r(ELt,"big_bird"),ELt.forEach(t),$Nr=r(hqe," \u2014 "),LK=n(hqe,"A",{href:!0});var CLt=s(LK);kNr=r(CLt,"FlaxBigBirdForTokenClassification"),CLt.forEach(t),SNr=r(hqe," (BigBird model)"),hqe.forEach(t),RNr=i(Fo),wC=n(Fo,"LI",{});var pqe=s(wC);n4e=n(pqe,"STRONG",{});var wLt=s(n4e);PNr=r(wLt,"distilbert"),wLt.forEach(t),BNr=r(pqe," \u2014 "),xK=n(pqe,"A",{href:!0});var ALt=s(xK);INr=r(ALt,"FlaxDistilBertForTokenClassification"),ALt.forEach(t),qNr=r(pqe," (DistilBERT model)"),pqe.forEach(t),NNr=i(Fo),AC=n(Fo,"LI",{});var _qe=s(AC);s4e=n(_qe,"STRONG",{});var yLt=s(s4e);jNr=r(yLt,"electra"),yLt.forEach(t),DNr=r(_qe," \u2014 "),$K=n(_qe,"A",{href:!0});var LLt=s($K);GNr=r(LLt,"FlaxElectraForTokenClassification"),LLt.forEach(t),ONr=r(_qe," (ELECTRA model)"),_qe.forEach(t),VNr=i(Fo),yC=n(Fo,"LI",{});var uqe=s(yC);l4e=n(uqe,"STRONG",{});var xLt=s(l4e);XNr=r(xLt,"roberta"),xLt.forEach(t),zNr=r(uqe," \u2014 "),kK=n(uqe,"A",{href:!0});var $Lt=s(kK);WNr=r($Lt,"FlaxRobertaForTokenClassification"),$Lt.forEach(t),QNr=r(uqe," (RoBERTa model)"),uqe.forEach(t),HNr=i(Fo),LC=n(Fo,"LI",{});var bqe=s(LC);i4e=n(bqe,"STRONG",{});var kLt=s(i4e);UNr=r(kLt,"roformer"),kLt.forEach(t),JNr=r(bqe," \u2014 "),SK=n(bqe,"A",{href:!0});var SLt=s(SK);YNr=r(SLt,"FlaxRoFormerForTokenClassification"),SLt.forEach(t),KNr=r(bqe," (RoFormer model)"),bqe.forEach(t),ZNr=i(Fo),xC=n(Fo,"LI",{});var vqe=s(xC);d4e=n(vqe,"STRONG",{});var RLt=s(d4e);ejr=r(RLt,"xlm-roberta"),RLt.forEach(t),ojr=r(vqe," \u2014 "),RK=n(vqe,"A",{href:!0});var PLt=s(RK);rjr=r(PLt,"FlaxXLMRobertaForTokenClassification"),PLt.forEach(t),tjr=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),Fo.forEach(t),ajr=i(ri),T($C.$$.fragment,ri),ri.forEach(t),oi.forEach(t),yje=i(f),Zc=n(f,"H2",{class:!0});var PGe=s(Zc);kC=n(PGe,"A",{id:!0,class:!0,href:!0});var BLt=s(kC);c4e=n(BLt,"SPAN",{});var ILt=s(c4e);T(sx.$$.fragment,ILt),ILt.forEach(t),BLt.forEach(t),njr=i(PGe),f4e=n(PGe,"SPAN",{});var qLt=s(f4e);sjr=r(qLt,"FlaxAutoModelForMultipleChoice"),qLt.forEach(t),PGe.forEach(t),Lje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(lx.$$.fragment,ti),ljr=i(ti),ef=n(ti,"P",{});var Oee=s(ef);ijr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=n(Oee,"A",{href:!0});var NLt=s(PK);djr=r(NLt,"from_pretrained()"),NLt.forEach(t),cjr=r(Oee," class method or the "),BK=n(Oee,"A",{href:!0});var jLt=s(BK);fjr=r(jLt,"from_config()"),jLt.forEach(t),mjr=r(Oee,` class
method.`),Oee.forEach(t),gjr=i(ti),ix=n(ti,"P",{});var BGe=s(ix);hjr=r(BGe,"This class cannot be instantiated directly using "),m4e=n(BGe,"CODE",{});var DLt=s(m4e);pjr=r(DLt,"__init__()"),DLt.forEach(t),_jr=r(BGe," (throws an error)."),BGe.forEach(t),ujr=i(ti),Ut=n(ti,"DIV",{class:!0});var c0=s(Ut);T(dx.$$.fragment,c0),bjr=i(c0),g4e=n(c0,"P",{});var GLt=s(g4e);vjr=r(GLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GLt.forEach(t),Fjr=i(c0),of=n(c0,"P",{});var Vee=s(of);Tjr=r(Vee,`Note:
Loading a model from its configuration file does `),h4e=n(Vee,"STRONG",{});var OLt=s(h4e);Mjr=r(OLt,"not"),OLt.forEach(t),Ejr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Vee,"A",{href:!0});var VLt=s(IK);Cjr=r(VLt,"from_pretrained()"),VLt.forEach(t),wjr=r(Vee," to load the model weights."),Vee.forEach(t),Ajr=i(c0),T(SC.$$.fragment,c0),c0.forEach(t),yjr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(cx.$$.fragment,ai),Ljr=i(ai),p4e=n(ai,"P",{});var XLt=s(p4e);xjr=r(XLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XLt.forEach(t),$jr=i(ai),Mn=n(ai,"P",{});var f0=s(Mn);kjr=r(f0,"The model class to instantiate is selected based on the "),_4e=n(f0,"CODE",{});var zLt=s(_4e);Sjr=r(zLt,"model_type"),zLt.forEach(t),Rjr=r(f0,` property of the config object (either
passed as an argument or loaded from `),u4e=n(f0,"CODE",{});var WLt=s(u4e);Pjr=r(WLt,"pretrained_model_name_or_path"),WLt.forEach(t),Bjr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(f0,"CODE",{});var QLt=s(b4e);Ijr=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),qjr=r(f0,":"),f0.forEach(t),Njr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);RC=n(To,"LI",{});var Fqe=s(RC);v4e=n(Fqe,"STRONG",{});var HLt=s(v4e);jjr=r(HLt,"albert"),HLt.forEach(t),Djr=r(Fqe," \u2014 "),qK=n(Fqe,"A",{href:!0});var ULt=s(qK);Gjr=r(ULt,"FlaxAlbertForMultipleChoice"),ULt.forEach(t),Ojr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Vjr=i(To),PC=n(To,"LI",{});var Tqe=s(PC);F4e=n(Tqe,"STRONG",{});var JLt=s(F4e);Xjr=r(JLt,"bert"),JLt.forEach(t),zjr=r(Tqe," \u2014 "),NK=n(Tqe,"A",{href:!0});var YLt=s(NK);Wjr=r(YLt,"FlaxBertForMultipleChoice"),YLt.forEach(t),Qjr=r(Tqe," (BERT model)"),Tqe.forEach(t),Hjr=i(To),BC=n(To,"LI",{});var Mqe=s(BC);T4e=n(Mqe,"STRONG",{});var KLt=s(T4e);Ujr=r(KLt,"big_bird"),KLt.forEach(t),Jjr=r(Mqe," \u2014 "),jK=n(Mqe,"A",{href:!0});var ZLt=s(jK);Yjr=r(ZLt,"FlaxBigBirdForMultipleChoice"),ZLt.forEach(t),Kjr=r(Mqe," (BigBird model)"),Mqe.forEach(t),Zjr=i(To),IC=n(To,"LI",{});var Eqe=s(IC);M4e=n(Eqe,"STRONG",{});var e8t=s(M4e);eDr=r(e8t,"distilbert"),e8t.forEach(t),oDr=r(Eqe," \u2014 "),DK=n(Eqe,"A",{href:!0});var o8t=s(DK);rDr=r(o8t,"FlaxDistilBertForMultipleChoice"),o8t.forEach(t),tDr=r(Eqe," (DistilBERT model)"),Eqe.forEach(t),aDr=i(To),qC=n(To,"LI",{});var Cqe=s(qC);E4e=n(Cqe,"STRONG",{});var r8t=s(E4e);nDr=r(r8t,"electra"),r8t.forEach(t),sDr=r(Cqe," \u2014 "),GK=n(Cqe,"A",{href:!0});var t8t=s(GK);lDr=r(t8t,"FlaxElectraForMultipleChoice"),t8t.forEach(t),iDr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),dDr=i(To),NC=n(To,"LI",{});var wqe=s(NC);C4e=n(wqe,"STRONG",{});var a8t=s(C4e);cDr=r(a8t,"roberta"),a8t.forEach(t),fDr=r(wqe," \u2014 "),OK=n(wqe,"A",{href:!0});var n8t=s(OK);mDr=r(n8t,"FlaxRobertaForMultipleChoice"),n8t.forEach(t),gDr=r(wqe," (RoBERTa model)"),wqe.forEach(t),hDr=i(To),jC=n(To,"LI",{});var Aqe=s(jC);w4e=n(Aqe,"STRONG",{});var s8t=s(w4e);pDr=r(s8t,"roformer"),s8t.forEach(t),_Dr=r(Aqe," \u2014 "),VK=n(Aqe,"A",{href:!0});var l8t=s(VK);uDr=r(l8t,"FlaxRoFormerForMultipleChoice"),l8t.forEach(t),bDr=r(Aqe," (RoFormer model)"),Aqe.forEach(t),vDr=i(To),DC=n(To,"LI",{});var yqe=s(DC);A4e=n(yqe,"STRONG",{});var i8t=s(A4e);FDr=r(i8t,"xlm-roberta"),i8t.forEach(t),TDr=r(yqe," \u2014 "),XK=n(yqe,"A",{href:!0});var d8t=s(XK);MDr=r(d8t,"FlaxXLMRobertaForMultipleChoice"),d8t.forEach(t),EDr=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),To.forEach(t),CDr=i(ai),T(GC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),xje=i(f),rf=n(f,"H2",{class:!0});var IGe=s(rf);OC=n(IGe,"A",{id:!0,class:!0,href:!0});var c8t=s(OC);y4e=n(c8t,"SPAN",{});var f8t=s(y4e);T(fx.$$.fragment,f8t),f8t.forEach(t),c8t.forEach(t),wDr=i(IGe),L4e=n(IGe,"SPAN",{});var m8t=s(L4e);ADr=r(m8t,"FlaxAutoModelForNextSentencePrediction"),m8t.forEach(t),IGe.forEach(t),$je=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(mx.$$.fragment,ni),yDr=i(ni),tf=n(ni,"P",{});var Xee=s(tf);LDr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Xee,"A",{href:!0});var g8t=s(zK);xDr=r(g8t,"from_pretrained()"),g8t.forEach(t),$Dr=r(Xee," class method or the "),WK=n(Xee,"A",{href:!0});var h8t=s(WK);kDr=r(h8t,"from_config()"),h8t.forEach(t),SDr=r(Xee,` class
method.`),Xee.forEach(t),RDr=i(ni),gx=n(ni,"P",{});var qGe=s(gx);PDr=r(qGe,"This class cannot be instantiated directly using "),x4e=n(qGe,"CODE",{});var p8t=s(x4e);BDr=r(p8t,"__init__()"),p8t.forEach(t),IDr=r(qGe," (throws an error)."),qGe.forEach(t),qDr=i(ni),Jt=n(ni,"DIV",{class:!0});var m0=s(Jt);T(hx.$$.fragment,m0),NDr=i(m0),$4e=n(m0,"P",{});var _8t=s($4e);jDr=r(_8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_8t.forEach(t),DDr=i(m0),af=n(m0,"P",{});var zee=s(af);GDr=r(zee,`Note:
Loading a model from its configuration file does `),k4e=n(zee,"STRONG",{});var u8t=s(k4e);ODr=r(u8t,"not"),u8t.forEach(t),VDr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(zee,"A",{href:!0});var b8t=s(QK);XDr=r(b8t,"from_pretrained()"),b8t.forEach(t),zDr=r(zee," to load the model weights."),zee.forEach(t),WDr=i(m0),T(VC.$$.fragment,m0),m0.forEach(t),QDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(px.$$.fragment,si),HDr=i(si),S4e=n(si,"P",{});var v8t=s(S4e);UDr=r(v8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v8t.forEach(t),JDr=i(si),En=n(si,"P",{});var g0=s(En);YDr=r(g0,"The model class to instantiate is selected based on the "),R4e=n(g0,"CODE",{});var F8t=s(R4e);KDr=r(F8t,"model_type"),F8t.forEach(t),ZDr=r(g0,` property of the config object (either
passed as an argument or loaded from `),P4e=n(g0,"CODE",{});var T8t=s(P4e);eGr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),oGr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(g0,"CODE",{});var M8t=s(B4e);rGr=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),tGr=r(g0,":"),g0.forEach(t),aGr=i(si),I4e=n(si,"UL",{});var E8t=s(I4e);XC=n(E8t,"LI",{});var Lqe=s(XC);q4e=n(Lqe,"STRONG",{});var C8t=s(q4e);nGr=r(C8t,"bert"),C8t.forEach(t),sGr=r(Lqe," \u2014 "),HK=n(Lqe,"A",{href:!0});var w8t=s(HK);lGr=r(w8t,"FlaxBertForNextSentencePrediction"),w8t.forEach(t),iGr=r(Lqe," (BERT model)"),Lqe.forEach(t),E8t.forEach(t),dGr=i(si),T(zC.$$.fragment,si),si.forEach(t),ni.forEach(t),kje=i(f),nf=n(f,"H2",{class:!0});var NGe=s(nf);WC=n(NGe,"A",{id:!0,class:!0,href:!0});var A8t=s(WC);N4e=n(A8t,"SPAN",{});var y8t=s(N4e);T(_x.$$.fragment,y8t),y8t.forEach(t),A8t.forEach(t),cGr=i(NGe),j4e=n(NGe,"SPAN",{});var L8t=s(j4e);fGr=r(L8t,"FlaxAutoModelForImageClassification"),L8t.forEach(t),NGe.forEach(t),Sje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(ux.$$.fragment,li),mGr=i(li),sf=n(li,"P",{});var Wee=s(sf);gGr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=n(Wee,"A",{href:!0});var x8t=s(UK);hGr=r(x8t,"from_pretrained()"),x8t.forEach(t),pGr=r(Wee," class method or the "),JK=n(Wee,"A",{href:!0});var $8t=s(JK);_Gr=r($8t,"from_config()"),$8t.forEach(t),uGr=r(Wee,` class
method.`),Wee.forEach(t),bGr=i(li),bx=n(li,"P",{});var jGe=s(bx);vGr=r(jGe,"This class cannot be instantiated directly using "),D4e=n(jGe,"CODE",{});var k8t=s(D4e);FGr=r(k8t,"__init__()"),k8t.forEach(t),TGr=r(jGe," (throws an error)."),jGe.forEach(t),MGr=i(li),Yt=n(li,"DIV",{class:!0});var h0=s(Yt);T(vx.$$.fragment,h0),EGr=i(h0),G4e=n(h0,"P",{});var S8t=s(G4e);CGr=r(S8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S8t.forEach(t),wGr=i(h0),lf=n(h0,"P",{});var Qee=s(lf);AGr=r(Qee,`Note:
Loading a model from its configuration file does `),O4e=n(Qee,"STRONG",{});var R8t=s(O4e);yGr=r(R8t,"not"),R8t.forEach(t),LGr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Qee,"A",{href:!0});var P8t=s(YK);xGr=r(P8t,"from_pretrained()"),P8t.forEach(t),$Gr=r(Qee," to load the model weights."),Qee.forEach(t),kGr=i(h0),T(QC.$$.fragment,h0),h0.forEach(t),SGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Fx.$$.fragment,ii),RGr=i(ii),V4e=n(ii,"P",{});var B8t=s(V4e);PGr=r(B8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B8t.forEach(t),BGr=i(ii),Cn=n(ii,"P",{});var p0=s(Cn);IGr=r(p0,"The model class to instantiate is selected based on the "),X4e=n(p0,"CODE",{});var I8t=s(X4e);qGr=r(I8t,"model_type"),I8t.forEach(t),NGr=r(p0,` property of the config object (either
passed as an argument or loaded from `),z4e=n(p0,"CODE",{});var q8t=s(z4e);jGr=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),DGr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(p0,"CODE",{});var N8t=s(W4e);GGr=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),OGr=r(p0,":"),p0.forEach(t),VGr=i(ii),Tx=n(ii,"UL",{});var DGe=s(Tx);HC=n(DGe,"LI",{});var xqe=s(HC);Q4e=n(xqe,"STRONG",{});var j8t=s(Q4e);XGr=r(j8t,"beit"),j8t.forEach(t),zGr=r(xqe," \u2014 "),KK=n(xqe,"A",{href:!0});var D8t=s(KK);WGr=r(D8t,"FlaxBeitForImageClassification"),D8t.forEach(t),QGr=r(xqe," (BEiT model)"),xqe.forEach(t),HGr=i(DGe),UC=n(DGe,"LI",{});var $qe=s(UC);H4e=n($qe,"STRONG",{});var G8t=s(H4e);UGr=r(G8t,"vit"),G8t.forEach(t),JGr=r($qe," \u2014 "),ZK=n($qe,"A",{href:!0});var O8t=s(ZK);YGr=r(O8t,"FlaxViTForImageClassification"),O8t.forEach(t),KGr=r($qe," (ViT model)"),$qe.forEach(t),DGe.forEach(t),ZGr=i(ii),T(JC.$$.fragment,ii),ii.forEach(t),li.forEach(t),Rje=i(f),df=n(f,"H2",{class:!0});var GGe=s(df);YC=n(GGe,"A",{id:!0,class:!0,href:!0});var V8t=s(YC);U4e=n(V8t,"SPAN",{});var X8t=s(U4e);T(Mx.$$.fragment,X8t),X8t.forEach(t),V8t.forEach(t),eOr=i(GGe),J4e=n(GGe,"SPAN",{});var z8t=s(J4e);oOr=r(z8t,"FlaxAutoModelForVision2Seq"),z8t.forEach(t),GGe.forEach(t),Pje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Ex.$$.fragment,di),rOr=i(di),cf=n(di,"P",{});var Hee=s(cf);tOr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=n(Hee,"A",{href:!0});var W8t=s(eZ);aOr=r(W8t,"from_pretrained()"),W8t.forEach(t),nOr=r(Hee," class method or the "),oZ=n(Hee,"A",{href:!0});var Q8t=s(oZ);sOr=r(Q8t,"from_config()"),Q8t.forEach(t),lOr=r(Hee,` class
method.`),Hee.forEach(t),iOr=i(di),Cx=n(di,"P",{});var OGe=s(Cx);dOr=r(OGe,"This class cannot be instantiated directly using "),Y4e=n(OGe,"CODE",{});var H8t=s(Y4e);cOr=r(H8t,"__init__()"),H8t.forEach(t),fOr=r(OGe," (throws an error)."),OGe.forEach(t),mOr=i(di),Kt=n(di,"DIV",{class:!0});var _0=s(Kt);T(wx.$$.fragment,_0),gOr=i(_0),K4e=n(_0,"P",{});var U8t=s(K4e);hOr=r(U8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U8t.forEach(t),pOr=i(_0),ff=n(_0,"P",{});var Uee=s(ff);_Or=r(Uee,`Note:
Loading a model from its configuration file does `),Z4e=n(Uee,"STRONG",{});var J8t=s(Z4e);uOr=r(J8t,"not"),J8t.forEach(t),bOr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(Uee,"A",{href:!0});var Y8t=s(rZ);vOr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),FOr=r(Uee," to load the model weights."),Uee.forEach(t),TOr=i(_0),T(KC.$$.fragment,_0),_0.forEach(t),MOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ax.$$.fragment,ci),EOr=i(ci),eEe=n(ci,"P",{});var K8t=s(eEe);COr=r(K8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K8t.forEach(t),wOr=i(ci),wn=n(ci,"P",{});var u0=s(wn);AOr=r(u0,"The model class to instantiate is selected based on the "),oEe=n(u0,"CODE",{});var Z8t=s(oEe);yOr=r(Z8t,"model_type"),Z8t.forEach(t),LOr=r(u0,` property of the config object (either
passed as an argument or loaded from `),rEe=n(u0,"CODE",{});var ext=s(rEe);xOr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),$Or=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(u0,"CODE",{});var oxt=s(tEe);kOr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),SOr=r(u0,":"),u0.forEach(t),ROr=i(ci),aEe=n(ci,"UL",{});var rxt=s(aEe);ZC=n(rxt,"LI",{});var kqe=s(ZC);nEe=n(kqe,"STRONG",{});var txt=s(nEe);POr=r(txt,"vision-encoder-decoder"),txt.forEach(t),BOr=r(kqe," \u2014 "),tZ=n(kqe,"A",{href:!0});var axt=s(tZ);IOr=r(axt,"FlaxVisionEncoderDecoderModel"),axt.forEach(t),qOr=r(kqe," (Vision Encoder decoder model)"),kqe.forEach(t),rxt.forEach(t),NOr=i(ci),T(e3.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ikt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(W$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Q$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(H$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(U$,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(J$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(Y$,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z$,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ek,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ok,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(tk,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(ak,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(nk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoProcessor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(op,"id","transformers.AutoModel"),c(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(op,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y_,"id","transformers.AutoModelForPreTraining"),c(Y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xu,"id","transformers.AutoModelForCausalLM"),c(Xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForMaskedLM"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForSeq2SeqLM"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForSequenceClassification"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMultipleChoice"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForTokenClassification"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForQuestionAnswering"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForTableQuestionAnswering"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForImageClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForVision2Seq"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.AutoModelForAudioClassification"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.AutoModelForAudioFrameClassification"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForCTC"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForAudioXVector"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForMaskedImageModeling"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForObjectDetection"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForImageSegmentation"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForSemanticSegmentation"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForInstanceSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModel"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.TFAutoModelForPreTraining"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f9,"id","transformers.TFAutoModelForCausalLM"),c(f9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f9,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A9,"id","transformers.TFAutoModelForImageClassification"),c(A9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A9,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R9,"id","transformers.TFAutoModelForMaskedLM"),c(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R9,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForSequenceClassification"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForMultipleChoice"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForTokenClassification"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForQuestionAnswering"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForVision2Seq"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.FlaxAutoModel"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForCausalLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForPreTraining"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.FlaxAutoModelForMaskedLM"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForTokenClassification"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForImageClassification"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForVision2Seq"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,b0),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,v0),e(We,Ln),e(We,xn),e(xn,F0),e(We,pi),e(We,$n),e($n,T0),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,D$),e(Ae,ui),e(ui,G$),e(Ae,O$),b(f,Eo,u),b(f,wa,u),e(wa,V$),e(wa,bf),e(bf,X$),e(wa,VGe),b(f,Sqe,u),b(f,bi,u),e(bi,vf),e(vf,Jee),M(M0,Jee,null),e(bi,XGe),e(bi,Yee),e(Yee,zGe),b(f,Rqe,u),b(f,kn,u),e(kn,WGe),e(kn,Kee),e(Kee,QGe),e(kn,HGe),e(kn,Zee),e(Zee,UGe),e(kn,JGe),b(f,Pqe,u),M(E0,f,u),b(f,Bqe,u),b(f,z$,u),e(z$,YGe),b(f,Iqe,u),M(Ff,f,u),b(f,qqe,u),b(f,vi,u),e(vi,Tf),e(Tf,eoe),M(C0,eoe,null),e(vi,KGe),e(vi,ooe),e(ooe,ZGe),b(f,Nqe,u),b(f,Co,u),M(w0,Co,null),e(Co,eOe),e(Co,A0),e(A0,oOe),e(A0,W$),e(W$,rOe),e(A0,tOe),e(Co,aOe),e(Co,y0),e(y0,nOe),e(y0,roe),e(roe,sOe),e(y0,lOe),e(Co,iOe),e(Co,Er),M(L0,Er,null),e(Er,dOe),e(Er,toe),e(toe,cOe),e(Er,fOe),e(Er,Fi),e(Fi,mOe),e(Fi,aoe),e(aoe,gOe),e(Fi,hOe),e(Fi,noe),e(noe,pOe),e(Fi,_Oe),e(Er,uOe),e(Er,A),e(A,Mf),e(Mf,soe),e(soe,bOe),e(Mf,vOe),e(Mf,Q$),e(Q$,FOe),e(Mf,TOe),e(A,MOe),e(A,Ef),e(Ef,loe),e(loe,EOe),e(Ef,COe),e(Ef,H$),e(H$,wOe),e(Ef,AOe),e(A,yOe),e(A,Cf),e(Cf,ioe),e(ioe,LOe),e(Cf,xOe),e(Cf,U$),e(U$,$Oe),e(Cf,kOe),e(A,SOe),e(A,wf),e(wf,doe),e(doe,ROe),e(wf,POe),e(wf,J$),e(J$,BOe),e(wf,IOe),e(A,qOe),e(A,Af),e(Af,coe),e(coe,NOe),e(Af,jOe),e(Af,Y$),e(Y$,DOe),e(Af,GOe),e(A,OOe),e(A,yf),e(yf,foe),e(foe,VOe),e(yf,XOe),e(yf,K$),e(K$,zOe),e(yf,WOe),e(A,QOe),e(A,Lf),e(Lf,moe),e(moe,HOe),e(Lf,UOe),e(Lf,Z$),e(Z$,JOe),e(Lf,YOe),e(A,KOe),e(A,xf),e(xf,goe),e(goe,ZOe),e(xf,eVe),e(xf,ek),e(ek,oVe),e(xf,rVe),e(A,tVe),e(A,$f),e($f,hoe),e(hoe,aVe),e($f,nVe),e($f,ok),e(ok,sVe),e($f,lVe),e(A,iVe),e(A,kf),e(kf,poe),e(poe,dVe),e(kf,cVe),e(kf,rk),e(rk,fVe),e(kf,mVe),e(A,gVe),e(A,Sf),e(Sf,_oe),e(_oe,hVe),e(Sf,pVe),e(Sf,tk),e(tk,_Ve),e(Sf,uVe),e(A,bVe),e(A,Rf),e(Rf,uoe),e(uoe,vVe),e(Rf,FVe),e(Rf,ak),e(ak,TVe),e(Rf,MVe),e(A,EVe),e(A,Pf),e(Pf,boe),e(boe,CVe),e(Pf,wVe),e(Pf,nk),e(nk,AVe),e(Pf,yVe),e(A,LVe),e(A,Bf),e(Bf,voe),e(voe,xVe),e(Bf,$Ve),e(Bf,sk),e(sk,kVe),e(Bf,SVe),e(A,RVe),e(A,If),e(If,Foe),e(Foe,PVe),e(If,BVe),e(If,lk),e(lk,IVe),e(If,qVe),e(A,NVe),e(A,qf),e(qf,Toe),e(Toe,jVe),e(qf,DVe),e(qf,ik),e(ik,GVe),e(qf,OVe),e(A,VVe),e(A,Nf),e(Nf,Moe),e(Moe,XVe),e(Nf,zVe),e(Nf,dk),e(dk,WVe),e(Nf,QVe),e(A,HVe),e(A,jf),e(jf,Eoe),e(Eoe,UVe),e(jf,JVe),e(jf,ck),e(ck,YVe),e(jf,KVe),e(A,ZVe),e(A,Df),e(Df,Coe),e(Coe,eXe),e(Df,oXe),e(Df,fk),e(fk,rXe),e(Df,tXe),e(A,aXe),e(A,Gf),e(Gf,woe),e(woe,nXe),e(Gf,sXe),e(Gf,mk),e(mk,lXe),e(Gf,iXe),e(A,dXe),e(A,Of),e(Of,Aoe),e(Aoe,cXe),e(Of,fXe),e(Of,gk),e(gk,mXe),e(Of,gXe),e(A,hXe),e(A,Vf),e(Vf,yoe),e(yoe,pXe),e(Vf,_Xe),e(Vf,hk),e(hk,uXe),e(Vf,bXe),e(A,vXe),e(A,Xf),e(Xf,Loe),e(Loe,FXe),e(Xf,TXe),e(Xf,pk),e(pk,MXe),e(Xf,EXe),e(A,CXe),e(A,zf),e(zf,xoe),e(xoe,wXe),e(zf,AXe),e(zf,_k),e(_k,yXe),e(zf,LXe),e(A,xXe),e(A,Wf),e(Wf,$oe),e($oe,$Xe),e(Wf,kXe),e(Wf,uk),e(uk,SXe),e(Wf,RXe),e(A,PXe),e(A,Qf),e(Qf,koe),e(koe,BXe),e(Qf,IXe),e(Qf,bk),e(bk,qXe),e(Qf,NXe),e(A,jXe),e(A,Hf),e(Hf,Soe),e(Soe,DXe),e(Hf,GXe),e(Hf,vk),e(vk,OXe),e(Hf,VXe),e(A,XXe),e(A,Uf),e(Uf,Roe),e(Roe,zXe),e(Uf,WXe),e(Uf,Fk),e(Fk,QXe),e(Uf,HXe),e(A,UXe),e(A,Jf),e(Jf,Poe),e(Poe,JXe),e(Jf,YXe),e(Jf,Tk),e(Tk,KXe),e(Jf,ZXe),e(A,eze),e(A,Yf),e(Yf,Boe),e(Boe,oze),e(Yf,rze),e(Yf,Mk),e(Mk,tze),e(Yf,aze),e(A,nze),e(A,Kf),e(Kf,Ioe),e(Ioe,sze),e(Kf,lze),e(Kf,Ek),e(Ek,ize),e(Kf,dze),e(A,cze),e(A,Zf),e(Zf,qoe),e(qoe,fze),e(Zf,mze),e(Zf,Ck),e(Ck,gze),e(Zf,hze),e(A,pze),e(A,em),e(em,Noe),e(Noe,_ze),e(em,uze),e(em,wk),e(wk,bze),e(em,vze),e(A,Fze),e(A,om),e(om,joe),e(joe,Tze),e(om,Mze),e(om,Ak),e(Ak,Eze),e(om,Cze),e(A,wze),e(A,rm),e(rm,Doe),e(Doe,Aze),e(rm,yze),e(rm,yk),e(yk,Lze),e(rm,xze),e(A,$ze),e(A,tm),e(tm,Goe),e(Goe,kze),e(tm,Sze),e(tm,Lk),e(Lk,Rze),e(tm,Pze),e(A,Bze),e(A,am),e(am,Ooe),e(Ooe,Ize),e(am,qze),e(am,xk),e(xk,Nze),e(am,jze),e(A,Dze),e(A,nm),e(nm,Voe),e(Voe,Gze),e(nm,Oze),e(nm,$k),e($k,Vze),e(nm,Xze),e(A,zze),e(A,sm),e(sm,Xoe),e(Xoe,Wze),e(sm,Qze),e(sm,kk),e(kk,Hze),e(sm,Uze),e(A,Jze),e(A,lm),e(lm,zoe),e(zoe,Yze),e(lm,Kze),e(lm,Sk),e(Sk,Zze),e(lm,eWe),e(A,oWe),e(A,im),e(im,Woe),e(Woe,rWe),e(im,tWe),e(im,Rk),e(Rk,aWe),e(im,nWe),e(A,sWe),e(A,dm),e(dm,Qoe),e(Qoe,lWe),e(dm,iWe),e(dm,Pk),e(Pk,dWe),e(dm,cWe),e(A,fWe),e(A,cm),e(cm,Hoe),e(Hoe,mWe),e(cm,gWe),e(cm,Bk),e(Bk,hWe),e(cm,pWe),e(A,_We),e(A,fm),e(fm,Uoe),e(Uoe,uWe),e(fm,bWe),e(fm,Ik),e(Ik,vWe),e(fm,FWe),e(A,TWe),e(A,mm),e(mm,Joe),e(Joe,MWe),e(mm,EWe),e(mm,qk),e(qk,CWe),e(mm,wWe),e(A,AWe),e(A,gm),e(gm,Yoe),e(Yoe,yWe),e(gm,LWe),e(gm,Nk),e(Nk,xWe),e(gm,$We),e(A,kWe),e(A,hm),e(hm,Koe),e(Koe,SWe),e(hm,RWe),e(hm,jk),e(jk,PWe),e(hm,BWe),e(A,IWe),e(A,pm),e(pm,Zoe),e(Zoe,qWe),e(pm,NWe),e(pm,Dk),e(Dk,jWe),e(pm,DWe),e(A,GWe),e(A,_m),e(_m,ere),e(ere,OWe),e(_m,VWe),e(_m,Gk),e(Gk,XWe),e(_m,zWe),e(A,WWe),e(A,um),e(um,ore),e(ore,QWe),e(um,HWe),e(um,Ok),e(Ok,UWe),e(um,JWe),e(A,YWe),e(A,bm),e(bm,rre),e(rre,KWe),e(bm,ZWe),e(bm,Vk),e(Vk,eQe),e(bm,oQe),e(A,rQe),e(A,vm),e(vm,tre),e(tre,tQe),e(vm,aQe),e(vm,Xk),e(Xk,nQe),e(vm,sQe),e(A,lQe),e(A,Fm),e(Fm,are),e(are,iQe),e(Fm,dQe),e(Fm,zk),e(zk,cQe),e(Fm,fQe),e(A,mQe),e(A,Tm),e(Tm,nre),e(nre,gQe),e(Tm,hQe),e(Tm,Wk),e(Wk,pQe),e(Tm,_Qe),e(A,uQe),e(A,Mm),e(Mm,sre),e(sre,bQe),e(Mm,vQe),e(Mm,Qk),e(Qk,FQe),e(Mm,TQe),e(A,MQe),e(A,Em),e(Em,lre),e(lre,EQe),e(Em,CQe),e(Em,Hk),e(Hk,wQe),e(Em,AQe),e(A,yQe),e(A,Cm),e(Cm,ire),e(ire,LQe),e(Cm,xQe),e(Cm,Uk),e(Uk,$Qe),e(Cm,kQe),e(A,SQe),e(A,wm),e(wm,dre),e(dre,RQe),e(wm,PQe),e(wm,Jk),e(Jk,BQe),e(wm,IQe),e(A,qQe),e(A,Am),e(Am,cre),e(cre,NQe),e(Am,jQe),e(Am,Yk),e(Yk,DQe),e(Am,GQe),e(A,OQe),e(A,ym),e(ym,fre),e(fre,VQe),e(ym,XQe),e(ym,Kk),e(Kk,zQe),e(ym,WQe),e(A,QQe),e(A,Lm),e(Lm,mre),e(mre,HQe),e(Lm,UQe),e(Lm,Zk),e(Zk,JQe),e(Lm,YQe),e(A,KQe),e(A,xm),e(xm,gre),e(gre,ZQe),e(xm,eHe),e(xm,eS),e(eS,oHe),e(xm,rHe),e(A,tHe),e(A,$m),e($m,hre),e(hre,aHe),e($m,nHe),e($m,oS),e(oS,sHe),e($m,lHe),e(A,iHe),e(A,km),e(km,pre),e(pre,dHe),e(km,cHe),e(km,rS),e(rS,fHe),e(km,mHe),e(A,gHe),e(A,Sm),e(Sm,_re),e(_re,hHe),e(Sm,pHe),e(Sm,tS),e(tS,_He),e(Sm,uHe),e(A,bHe),e(A,Rm),e(Rm,ure),e(ure,vHe),e(Rm,FHe),e(Rm,aS),e(aS,THe),e(Rm,MHe),e(A,EHe),e(A,Pm),e(Pm,bre),e(bre,CHe),e(Pm,wHe),e(Pm,nS),e(nS,AHe),e(Pm,yHe),e(A,LHe),e(A,Bm),e(Bm,vre),e(vre,xHe),e(Bm,$He),e(Bm,sS),e(sS,kHe),e(Bm,SHe),e(A,RHe),e(A,Im),e(Im,Fre),e(Fre,PHe),e(Im,BHe),e(Im,lS),e(lS,IHe),e(Im,qHe),e(A,NHe),e(A,qm),e(qm,Tre),e(Tre,jHe),e(qm,DHe),e(qm,iS),e(iS,GHe),e(qm,OHe),e(A,VHe),e(A,Nm),e(Nm,Mre),e(Mre,XHe),e(Nm,zHe),e(Nm,dS),e(dS,WHe),e(Nm,QHe),e(A,HHe),e(A,jm),e(jm,Ere),e(Ere,UHe),e(jm,JHe),e(jm,cS),e(cS,YHe),e(jm,KHe),e(A,ZHe),e(A,Dm),e(Dm,Cre),e(Cre,eUe),e(Dm,oUe),e(Dm,fS),e(fS,rUe),e(Dm,tUe),e(A,aUe),e(A,Gm),e(Gm,wre),e(wre,nUe),e(Gm,sUe),e(Gm,mS),e(mS,lUe),e(Gm,iUe),e(A,dUe),e(A,Om),e(Om,Are),e(Are,cUe),e(Om,fUe),e(Om,gS),e(gS,mUe),e(Om,gUe),e(A,hUe),e(A,Vm),e(Vm,yre),e(yre,pUe),e(Vm,_Ue),e(Vm,hS),e(hS,uUe),e(Vm,bUe),e(A,vUe),e(A,Xm),e(Xm,Lre),e(Lre,FUe),e(Xm,TUe),e(Xm,pS),e(pS,MUe),e(Xm,EUe),e(A,CUe),e(A,zm),e(zm,xre),e(xre,wUe),e(zm,AUe),e(zm,_S),e(_S,yUe),e(zm,LUe),e(A,xUe),e(A,Wm),e(Wm,$re),e($re,$Ue),e(Wm,kUe),e(Wm,uS),e(uS,SUe),e(Wm,RUe),e(A,PUe),e(A,Qm),e(Qm,kre),e(kre,BUe),e(Qm,IUe),e(Qm,bS),e(bS,qUe),e(Qm,NUe),e(A,jUe),e(A,Hm),e(Hm,Sre),e(Sre,DUe),e(Hm,GUe),e(Hm,vS),e(vS,OUe),e(Hm,VUe),e(A,XUe),e(A,Um),e(Um,Rre),e(Rre,zUe),e(Um,WUe),e(Um,FS),e(FS,QUe),e(Um,HUe),e(A,UUe),e(A,Jm),e(Jm,Pre),e(Pre,JUe),e(Jm,YUe),e(Jm,TS),e(TS,KUe),e(Jm,ZUe),e(A,eJe),e(A,Ym),e(Ym,Bre),e(Bre,oJe),e(Ym,rJe),e(Ym,MS),e(MS,tJe),e(Ym,aJe),e(A,nJe),e(A,Km),e(Km,Ire),e(Ire,sJe),e(Km,lJe),e(Km,ES),e(ES,iJe),e(Km,dJe),e(A,cJe),e(A,Zm),e(Zm,qre),e(qre,fJe),e(Zm,mJe),e(Zm,CS),e(CS,gJe),e(Zm,hJe),e(A,pJe),e(A,eg),e(eg,Nre),e(Nre,_Je),e(eg,uJe),e(eg,wS),e(wS,bJe),e(eg,vJe),e(A,FJe),e(A,og),e(og,jre),e(jre,TJe),e(og,MJe),e(og,AS),e(AS,EJe),e(og,CJe),e(A,wJe),e(A,rg),e(rg,Dre),e(Dre,AJe),e(rg,yJe),e(rg,yS),e(yS,LJe),e(rg,xJe),e(A,$Je),e(A,tg),e(tg,Gre),e(Gre,kJe),e(tg,SJe),e(tg,LS),e(LS,RJe),e(tg,PJe),e(A,BJe),e(A,ag),e(ag,Ore),e(Ore,IJe),e(ag,qJe),e(ag,xS),e(xS,NJe),e(ag,jJe),e(A,DJe),e(A,ng),e(ng,Vre),e(Vre,GJe),e(ng,OJe),e(ng,$S),e($S,VJe),e(ng,XJe),e(A,zJe),e(A,sg),e(sg,Xre),e(Xre,WJe),e(sg,QJe),e(sg,kS),e(kS,HJe),e(sg,UJe),e(A,JJe),e(A,lg),e(lg,zre),e(zre,YJe),e(lg,KJe),e(lg,SS),e(SS,ZJe),e(lg,eYe),e(A,oYe),e(A,ig),e(ig,Wre),e(Wre,rYe),e(ig,tYe),e(ig,RS),e(RS,aYe),e(ig,nYe),e(A,sYe),e(A,dg),e(dg,Qre),e(Qre,lYe),e(dg,iYe),e(dg,PS),e(PS,dYe),e(dg,cYe),e(A,fYe),e(A,cg),e(cg,Hre),e(Hre,mYe),e(cg,gYe),e(cg,BS),e(BS,hYe),e(cg,pYe),e(A,_Ye),e(A,fg),e(fg,Ure),e(Ure,uYe),e(fg,bYe),e(fg,IS),e(IS,vYe),e(fg,FYe),e(A,TYe),e(A,mg),e(mg,Jre),e(Jre,MYe),e(mg,EYe),e(mg,qS),e(qS,CYe),e(mg,wYe),e(A,AYe),e(A,gg),e(gg,Yre),e(Yre,yYe),e(gg,LYe),e(gg,NS),e(NS,xYe),e(gg,$Ye),e(A,kYe),e(A,hg),e(hg,Kre),e(Kre,SYe),e(hg,RYe),e(hg,jS),e(jS,PYe),e(hg,BYe),e(A,IYe),e(A,pg),e(pg,Zre),e(Zre,qYe),e(pg,NYe),e(pg,DS),e(DS,jYe),e(pg,DYe),e(A,GYe),e(A,_g),e(_g,ete),e(ete,OYe),e(_g,VYe),e(_g,GS),e(GS,XYe),e(_g,zYe),e(A,WYe),e(A,ug),e(ug,ote),e(ote,QYe),e(ug,HYe),e(ug,OS),e(OS,UYe),e(ug,JYe),e(A,YYe),e(A,bg),e(bg,rte),e(rte,KYe),e(bg,ZYe),e(bg,VS),e(VS,eKe),e(bg,oKe),e(A,rKe),e(A,vg),e(vg,tte),e(tte,tKe),e(vg,aKe),e(vg,XS),e(XS,nKe),e(vg,sKe),e(A,lKe),e(A,Fg),e(Fg,ate),e(ate,iKe),e(Fg,dKe),e(Fg,zS),e(zS,cKe),e(Fg,fKe),e(A,mKe),e(A,Tg),e(Tg,nte),e(nte,gKe),e(Tg,hKe),e(Tg,WS),e(WS,pKe),e(Tg,_Ke),e(Er,uKe),M(Mg,Er,null),e(Co,bKe),e(Co,Eg),M(x0,Eg,null),e(Eg,vKe),e(Eg,ste),e(ste,FKe),b(f,jqe,u),b(f,Ti,u),e(Ti,Cg),e(Cg,lte),M($0,lte,null),e(Ti,TKe),e(Ti,ite),e(ite,MKe),b(f,Dqe,u),b(f,wo,u),M(k0,wo,null),e(wo,EKe),e(wo,S0),e(S0,CKe),e(S0,QS),e(QS,wKe),e(S0,AKe),e(wo,yKe),e(wo,R0),e(R0,LKe),e(R0,dte),e(dte,xKe),e(R0,$Ke),e(wo,kKe),e(wo,Cr),M(P0,Cr,null),e(Cr,SKe),e(Cr,cte),e(cte,RKe),e(Cr,PKe),e(Cr,Aa),e(Aa,BKe),e(Aa,fte),e(fte,IKe),e(Aa,qKe),e(Aa,mte),e(mte,NKe),e(Aa,jKe),e(Aa,gte),e(gte,DKe),e(Aa,GKe),e(Cr,OKe),e(Cr,k),e(k,Sn),e(Sn,hte),e(hte,VKe),e(Sn,XKe),e(Sn,HS),e(HS,zKe),e(Sn,WKe),e(Sn,US),e(US,QKe),e(Sn,HKe),e(k,UKe),e(k,Rn),e(Rn,pte),e(pte,JKe),e(Rn,YKe),e(Rn,JS),e(JS,KKe),e(Rn,ZKe),e(Rn,YS),e(YS,eZe),e(Rn,oZe),e(k,rZe),e(k,Pn),e(Pn,_te),e(_te,tZe),e(Pn,aZe),e(Pn,KS),e(KS,nZe),e(Pn,sZe),e(Pn,ZS),e(ZS,lZe),e(Pn,iZe),e(k,dZe),e(k,wg),e(wg,ute),e(ute,cZe),e(wg,fZe),e(wg,eR),e(eR,mZe),e(wg,gZe),e(k,hZe),e(k,Bn),e(Bn,bte),e(bte,pZe),e(Bn,_Ze),e(Bn,oR),e(oR,uZe),e(Bn,bZe),e(Bn,rR),e(rR,vZe),e(Bn,FZe),e(k,TZe),e(k,Ag),e(Ag,vte),e(vte,MZe),e(Ag,EZe),e(Ag,tR),e(tR,CZe),e(Ag,wZe),e(k,AZe),e(k,yg),e(yg,Fte),e(Fte,yZe),e(yg,LZe),e(yg,aR),e(aR,xZe),e(yg,$Ze),e(k,kZe),e(k,Lg),e(Lg,Tte),e(Tte,SZe),e(Lg,RZe),e(Lg,nR),e(nR,PZe),e(Lg,BZe),e(k,IZe),e(k,In),e(In,Mte),e(Mte,qZe),e(In,NZe),e(In,sR),e(sR,jZe),e(In,DZe),e(In,lR),e(lR,GZe),e(In,OZe),e(k,VZe),e(k,qn),e(qn,Ete),e(Ete,XZe),e(qn,zZe),e(qn,iR),e(iR,WZe),e(qn,QZe),e(qn,dR),e(dR,HZe),e(qn,UZe),e(k,JZe),e(k,Nn),e(Nn,Cte),e(Cte,YZe),e(Nn,KZe),e(Nn,cR),e(cR,ZZe),e(Nn,eeo),e(Nn,fR),e(fR,oeo),e(Nn,reo),e(k,teo),e(k,xg),e(xg,wte),e(wte,aeo),e(xg,neo),e(xg,mR),e(mR,seo),e(xg,leo),e(k,ieo),e(k,$g),e($g,Ate),e(Ate,deo),e($g,ceo),e($g,gR),e(gR,feo),e($g,meo),e(k,geo),e(k,jn),e(jn,yte),e(yte,heo),e(jn,peo),e(jn,hR),e(hR,_eo),e(jn,ueo),e(jn,pR),e(pR,beo),e(jn,veo),e(k,Feo),e(k,kg),e(kg,Lte),e(Lte,Teo),e(kg,Meo),e(kg,_R),e(_R,Eeo),e(kg,Ceo),e(k,weo),e(k,Dn),e(Dn,xte),e(xte,Aeo),e(Dn,yeo),e(Dn,uR),e(uR,Leo),e(Dn,xeo),e(Dn,bR),e(bR,$eo),e(Dn,keo),e(k,Seo),e(k,Gn),e(Gn,$te),e($te,Reo),e(Gn,Peo),e(Gn,vR),e(vR,Beo),e(Gn,Ieo),e(Gn,FR),e(FR,qeo),e(Gn,Neo),e(k,jeo),e(k,On),e(On,kte),e(kte,Deo),e(On,Geo),e(On,TR),e(TR,Oeo),e(On,Veo),e(On,MR),e(MR,Xeo),e(On,zeo),e(k,Weo),e(k,Sg),e(Sg,Ste),e(Ste,Qeo),e(Sg,Heo),e(Sg,ER),e(ER,Ueo),e(Sg,Jeo),e(k,Yeo),e(k,Vn),e(Vn,Rte),e(Rte,Keo),e(Vn,Zeo),e(Vn,CR),e(CR,eoo),e(Vn,ooo),e(Vn,wR),e(wR,roo),e(Vn,too),e(k,aoo),e(k,Xn),e(Xn,Pte),e(Pte,noo),e(Xn,soo),e(Xn,AR),e(AR,loo),e(Xn,ioo),e(Xn,yR),e(yR,doo),e(Xn,coo),e(k,foo),e(k,zn),e(zn,Bte),e(Bte,moo),e(zn,goo),e(zn,LR),e(LR,hoo),e(zn,poo),e(zn,xR),e(xR,_oo),e(zn,uoo),e(k,boo),e(k,Wn),e(Wn,Ite),e(Ite,voo),e(Wn,Foo),e(Wn,$R),e($R,Too),e(Wn,Moo),e(Wn,kR),e(kR,Eoo),e(Wn,Coo),e(k,woo),e(k,Qn),e(Qn,qte),e(qte,Aoo),e(Qn,yoo),e(Qn,SR),e(SR,Loo),e(Qn,xoo),e(Qn,RR),e(RR,$oo),e(Qn,koo),e(k,Soo),e(k,Hn),e(Hn,Nte),e(Nte,Roo),e(Hn,Poo),e(Hn,PR),e(PR,Boo),e(Hn,Ioo),e(Hn,BR),e(BR,qoo),e(Hn,Noo),e(k,joo),e(k,Rg),e(Rg,jte),e(jte,Doo),e(Rg,Goo),e(Rg,IR),e(IR,Ooo),e(Rg,Voo),e(k,Xoo),e(k,Un),e(Un,Dte),e(Dte,zoo),e(Un,Woo),e(Un,qR),e(qR,Qoo),e(Un,Hoo),e(Un,NR),e(NR,Uoo),e(Un,Joo),e(k,Yoo),e(k,Pg),e(Pg,Gte),e(Gte,Koo),e(Pg,Zoo),e(Pg,jR),e(jR,ero),e(Pg,oro),e(k,rro),e(k,Jn),e(Jn,Ote),e(Ote,tro),e(Jn,aro),e(Jn,DR),e(DR,nro),e(Jn,sro),e(Jn,GR),e(GR,lro),e(Jn,iro),e(k,dro),e(k,Yn),e(Yn,Vte),e(Vte,cro),e(Yn,fro),e(Yn,OR),e(OR,mro),e(Yn,gro),e(Yn,VR),e(VR,hro),e(Yn,pro),e(k,_ro),e(k,Kn),e(Kn,Xte),e(Xte,uro),e(Kn,bro),e(Kn,XR),e(XR,vro),e(Kn,Fro),e(Kn,zR),e(zR,Tro),e(Kn,Mro),e(k,Ero),e(k,Zn),e(Zn,zte),e(zte,Cro),e(Zn,wro),e(Zn,WR),e(WR,Aro),e(Zn,yro),e(Zn,QR),e(QR,Lro),e(Zn,xro),e(k,$ro),e(k,es),e(es,Wte),e(Wte,kro),e(es,Sro),e(es,HR),e(HR,Rro),e(es,Pro),e(es,UR),e(UR,Bro),e(es,Iro),e(k,qro),e(k,Bg),e(Bg,Qte),e(Qte,Nro),e(Bg,jro),e(Bg,JR),e(JR,Dro),e(Bg,Gro),e(k,Oro),e(k,os),e(os,Hte),e(Hte,Vro),e(os,Xro),e(os,YR),e(YR,zro),e(os,Wro),e(os,KR),e(KR,Qro),e(os,Hro),e(k,Uro),e(k,rs),e(rs,Ute),e(Ute,Jro),e(rs,Yro),e(rs,ZR),e(ZR,Kro),e(rs,Zro),e(rs,eP),e(eP,eto),e(rs,oto),e(k,rto),e(k,ts),e(ts,Jte),e(Jte,tto),e(ts,ato),e(ts,oP),e(oP,nto),e(ts,sto),e(ts,rP),e(rP,lto),e(ts,ito),e(k,dto),e(k,as),e(as,Yte),e(Yte,cto),e(as,fto),e(as,tP),e(tP,mto),e(as,gto),e(as,aP),e(aP,hto),e(as,pto),e(k,_to),e(k,ns),e(ns,Kte),e(Kte,uto),e(ns,bto),e(ns,nP),e(nP,vto),e(ns,Fto),e(ns,sP),e(sP,Tto),e(ns,Mto),e(k,Eto),e(k,ss),e(ss,Zte),e(Zte,Cto),e(ss,wto),e(ss,lP),e(lP,Ato),e(ss,yto),e(ss,iP),e(iP,Lto),e(ss,xto),e(k,$to),e(k,ls),e(ls,eae),e(eae,kto),e(ls,Sto),e(ls,dP),e(dP,Rto),e(ls,Pto),e(ls,cP),e(cP,Bto),e(ls,Ito),e(k,qto),e(k,Ig),e(Ig,oae),e(oae,Nto),e(Ig,jto),e(Ig,fP),e(fP,Dto),e(Ig,Gto),e(k,Oto),e(k,is),e(is,rae),e(rae,Vto),e(is,Xto),e(is,mP),e(mP,zto),e(is,Wto),e(is,gP),e(gP,Qto),e(is,Hto),e(k,Uto),e(k,qg),e(qg,tae),e(tae,Jto),e(qg,Yto),e(qg,hP),e(hP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,aae),e(aae,oao),e(Ng,rao),e(Ng,pP),e(pP,tao),e(Ng,aao),e(k,nao),e(k,ds),e(ds,nae),e(nae,sao),e(ds,lao),e(ds,_P),e(_P,iao),e(ds,dao),e(ds,uP),e(uP,cao),e(ds,fao),e(k,mao),e(k,cs),e(cs,sae),e(sae,gao),e(cs,hao),e(cs,bP),e(bP,pao),e(cs,_ao),e(cs,vP),e(vP,uao),e(cs,bao),e(k,vao),e(k,fs),e(fs,lae),e(lae,Fao),e(fs,Tao),e(fs,FP),e(FP,Mao),e(fs,Eao),e(fs,TP),e(TP,Cao),e(fs,wao),e(k,Aao),e(k,jg),e(jg,iae),e(iae,yao),e(jg,Lao),e(jg,MP),e(MP,xao),e(jg,$ao),e(k,kao),e(k,ms),e(ms,dae),e(dae,Sao),e(ms,Rao),e(ms,EP),e(EP,Pao),e(ms,Bao),e(ms,CP),e(CP,Iao),e(ms,qao),e(k,Nao),e(k,gs),e(gs,cae),e(cae,jao),e(gs,Dao),e(gs,wP),e(wP,Gao),e(gs,Oao),e(gs,AP),e(AP,Vao),e(gs,Xao),e(k,zao),e(k,hs),e(hs,fae),e(fae,Wao),e(hs,Qao),e(hs,yP),e(yP,Hao),e(hs,Uao),e(hs,LP),e(LP,Jao),e(hs,Yao),e(k,Kao),e(k,ps),e(ps,mae),e(mae,Zao),e(ps,eno),e(ps,xP),e(xP,ono),e(ps,rno),e(ps,$P),e($P,tno),e(ps,ano),e(k,nno),e(k,_s),e(_s,gae),e(gae,sno),e(_s,lno),e(_s,kP),e(kP,ino),e(_s,dno),e(_s,SP),e(SP,cno),e(_s,fno),e(k,mno),e(k,Dg),e(Dg,hae),e(hae,gno),e(Dg,hno),e(Dg,RP),e(RP,pno),e(Dg,_no),e(k,uno),e(k,us),e(us,pae),e(pae,bno),e(us,vno),e(us,PP),e(PP,Fno),e(us,Tno),e(us,BP),e(BP,Mno),e(us,Eno),e(k,Cno),e(k,Gg),e(Gg,_ae),e(_ae,wno),e(Gg,Ano),e(Gg,IP),e(IP,yno),e(Gg,Lno),e(k,xno),e(k,Og),e(Og,uae),e(uae,$no),e(Og,kno),e(Og,qP),e(qP,Sno),e(Og,Rno),e(k,Pno),e(k,Vg),e(Vg,bae),e(bae,Bno),e(Vg,Ino),e(Vg,NP),e(NP,qno),e(Vg,Nno),e(k,jno),e(k,Xg),e(Xg,vae),e(vae,Dno),e(Xg,Gno),e(Xg,jP),e(jP,Ono),e(Xg,Vno),e(k,Xno),e(k,bs),e(bs,Fae),e(Fae,zno),e(bs,Wno),e(bs,DP),e(DP,Qno),e(bs,Hno),e(bs,GP),e(GP,Uno),e(bs,Jno),e(k,Yno),e(k,zg),e(zg,Tae),e(Tae,Kno),e(zg,Zno),e(zg,OP),e(OP,eso),e(zg,oso),e(k,rso),e(k,vs),e(vs,Mae),e(Mae,tso),e(vs,aso),e(vs,VP),e(VP,nso),e(vs,sso),e(vs,XP),e(XP,lso),e(vs,iso),e(k,dso),e(k,Fs),e(Fs,Eae),e(Eae,cso),e(Fs,fso),e(Fs,zP),e(zP,mso),e(Fs,gso),e(Fs,WP),e(WP,hso),e(Fs,pso),e(k,_so),e(k,Ts),e(Ts,Cae),e(Cae,uso),e(Ts,bso),e(Ts,QP),e(QP,vso),e(Ts,Fso),e(Ts,HP),e(HP,Tso),e(Ts,Mso),e(k,Eso),e(k,Ms),e(Ms,wae),e(wae,Cso),e(Ms,wso),e(Ms,UP),e(UP,Aso),e(Ms,yso),e(Ms,JP),e(JP,Lso),e(Ms,xso),e(k,$so),e(k,Es),e(Es,Aae),e(Aae,kso),e(Es,Sso),e(Es,YP),e(YP,Rso),e(Es,Pso),e(Es,KP),e(KP,Bso),e(Es,Iso),e(k,qso),e(k,Cs),e(Cs,yae),e(yae,Nso),e(Cs,jso),e(Cs,ZP),e(ZP,Dso),e(Cs,Gso),e(Cs,eB),e(eB,Oso),e(Cs,Vso),e(k,Xso),e(k,Wg),e(Wg,Lae),e(Lae,zso),e(Wg,Wso),e(Wg,oB),e(oB,Qso),e(Wg,Hso),e(k,Uso),e(k,Qg),e(Qg,xae),e(xae,Jso),e(Qg,Yso),e(Qg,rB),e(rB,Kso),e(Qg,Zso),e(k,elo),e(k,ws),e(ws,$ae),e($ae,olo),e(ws,rlo),e(ws,tB),e(tB,tlo),e(ws,alo),e(ws,aB),e(aB,nlo),e(ws,slo),e(k,llo),e(k,As),e(As,kae),e(kae,ilo),e(As,dlo),e(As,nB),e(nB,clo),e(As,flo),e(As,sB),e(sB,mlo),e(As,glo),e(k,hlo),e(k,ys),e(ys,Sae),e(Sae,plo),e(ys,_lo),e(ys,lB),e(lB,ulo),e(ys,blo),e(ys,iB),e(iB,vlo),e(ys,Flo),e(k,Tlo),e(k,Hg),e(Hg,Rae),e(Rae,Mlo),e(Hg,Elo),e(Hg,dB),e(dB,Clo),e(Hg,wlo),e(k,Alo),e(k,Ug),e(Ug,Pae),e(Pae,ylo),e(Ug,Llo),e(Ug,cB),e(cB,xlo),e(Ug,$lo),e(k,klo),e(k,Jg),e(Jg,Bae),e(Bae,Slo),e(Jg,Rlo),e(Jg,fB),e(fB,Plo),e(Jg,Blo),e(k,Ilo),e(k,Ls),e(Ls,Iae),e(Iae,qlo),e(Ls,Nlo),e(Ls,mB),e(mB,jlo),e(Ls,Dlo),e(Ls,gB),e(gB,Glo),e(Ls,Olo),e(k,Vlo),e(k,Yg),e(Yg,qae),e(qae,Xlo),e(Yg,zlo),e(Yg,hB),e(hB,Wlo),e(Yg,Qlo),e(k,Hlo),e(k,Kg),e(Kg,Nae),e(Nae,Ulo),e(Kg,Jlo),e(Kg,pB),e(pB,Ylo),e(Kg,Klo),e(k,Zlo),e(k,Zg),e(Zg,jae),e(jae,eio),e(Zg,oio),e(Zg,_B),e(_B,rio),e(Zg,tio),e(k,aio),e(k,xs),e(xs,Dae),e(Dae,nio),e(xs,sio),e(xs,uB),e(uB,lio),e(xs,iio),e(xs,bB),e(bB,dio),e(xs,cio),e(k,fio),e(k,eh),e(eh,Gae),e(Gae,mio),e(eh,gio),e(eh,vB),e(vB,hio),e(eh,pio),e(k,_io),e(k,oh),e(oh,Oae),e(Oae,uio),e(oh,bio),e(oh,FB),e(FB,vio),e(oh,Fio),e(k,Tio),e(k,$s),e($s,Vae),e(Vae,Mio),e($s,Eio),e($s,TB),e(TB,Cio),e($s,wio),e($s,MB),e(MB,Aio),e($s,yio),e(k,Lio),e(k,ks),e(ks,Xae),e(Xae,xio),e(ks,$io),e(ks,EB),e(EB,kio),e(ks,Sio),e(ks,CB),e(CB,Rio),e(ks,Pio),e(k,Bio),e(k,Ss),e(Ss,zae),e(zae,Iio),e(Ss,qio),e(Ss,wB),e(wB,Nio),e(Ss,jio),e(Ss,AB),e(AB,Dio),e(Ss,Gio),e(k,Oio),e(k,Rs),e(Rs,Wae),e(Wae,Vio),e(Rs,Xio),e(Rs,yB),e(yB,zio),e(Rs,Wio),e(Rs,LB),e(LB,Qio),e(Rs,Hio),e(Cr,Uio),M(rh,Cr,null),e(wo,Jio),e(wo,th),M(B0,th,null),e(th,Yio),e(th,Qae),e(Qae,Kio),b(f,Gqe,u),b(f,Mi,u),e(Mi,ah),e(ah,Hae),M(I0,Hae,null),e(Mi,Zio),e(Mi,Uae),e(Uae,edo),b(f,Oqe,u),b(f,Ao,u),M(q0,Ao,null),e(Ao,odo),e(Ao,N0),e(N0,rdo),e(N0,xB),e(xB,tdo),e(N0,ado),e(Ao,ndo),e(Ao,j0),e(j0,sdo),e(j0,Jae),e(Jae,ldo),e(j0,ido),e(Ao,ddo),e(Ao,He),M(D0,He,null),e(He,cdo),e(He,Yae),e(Yae,fdo),e(He,mdo),e(He,ya),e(ya,gdo),e(ya,Kae),e(Kae,hdo),e(ya,pdo),e(ya,Zae),e(Zae,_do),e(ya,udo),e(ya,ene),e(ene,bdo),e(ya,vdo),e(He,Fdo),e(He,Z),e(Z,nh),e(nh,one),e(one,Tdo),e(nh,Mdo),e(nh,$B),e($B,Edo),e(nh,Cdo),e(Z,wdo),e(Z,sh),e(sh,rne),e(rne,Ado),e(sh,ydo),e(sh,kB),e(kB,Ldo),e(sh,xdo),e(Z,$do),e(Z,lh),e(lh,tne),e(tne,kdo),e(lh,Sdo),e(lh,SB),e(SB,Rdo),e(lh,Pdo),e(Z,Bdo),e(Z,ih),e(ih,ane),e(ane,Ido),e(ih,qdo),e(ih,RB),e(RB,Ndo),e(ih,jdo),e(Z,Ddo),e(Z,dh),e(dh,nne),e(nne,Gdo),e(dh,Odo),e(dh,PB),e(PB,Vdo),e(dh,Xdo),e(Z,zdo),e(Z,ch),e(ch,sne),e(sne,Wdo),e(ch,Qdo),e(ch,BB),e(BB,Hdo),e(ch,Udo),e(Z,Jdo),e(Z,fh),e(fh,lne),e(lne,Ydo),e(fh,Kdo),e(fh,IB),e(IB,Zdo),e(fh,eco),e(Z,oco),e(Z,mh),e(mh,ine),e(ine,rco),e(mh,tco),e(mh,qB),e(qB,aco),e(mh,nco),e(Z,sco),e(Z,gh),e(gh,dne),e(dne,lco),e(gh,ico),e(gh,NB),e(NB,dco),e(gh,cco),e(Z,fco),e(Z,hh),e(hh,cne),e(cne,mco),e(hh,gco),e(hh,jB),e(jB,hco),e(hh,pco),e(Z,_co),e(Z,ph),e(ph,fne),e(fne,uco),e(ph,bco),e(ph,DB),e(DB,vco),e(ph,Fco),e(Z,Tco),e(Z,_h),e(_h,mne),e(mne,Mco),e(_h,Eco),e(_h,GB),e(GB,Cco),e(_h,wco),e(Z,Aco),e(Z,uh),e(uh,gne),e(gne,yco),e(uh,Lco),e(uh,OB),e(OB,xco),e(uh,$co),e(Z,kco),e(Z,bh),e(bh,hne),e(hne,Sco),e(bh,Rco),e(bh,VB),e(VB,Pco),e(bh,Bco),e(Z,Ico),e(Z,vh),e(vh,pne),e(pne,qco),e(vh,Nco),e(vh,XB),e(XB,jco),e(vh,Dco),e(Z,Gco),e(Z,Fh),e(Fh,_ne),e(_ne,Oco),e(Fh,Vco),e(Fh,zB),e(zB,Xco),e(Fh,zco),e(Z,Wco),e(Z,Th),e(Th,une),e(une,Qco),e(Th,Hco),e(Th,WB),e(WB,Uco),e(Th,Jco),e(Z,Yco),e(Z,Mh),e(Mh,bne),e(bne,Kco),e(Mh,Zco),e(Mh,QB),e(QB,efo),e(Mh,ofo),e(Z,rfo),e(Z,Eh),e(Eh,vne),e(vne,tfo),e(Eh,afo),e(Eh,HB),e(HB,nfo),e(Eh,sfo),e(Z,lfo),e(Z,Ch),e(Ch,Fne),e(Fne,ifo),e(Ch,dfo),e(Ch,UB),e(UB,cfo),e(Ch,ffo),e(Z,mfo),e(Z,wh),e(wh,Tne),e(Tne,gfo),e(wh,hfo),e(wh,JB),e(JB,pfo),e(wh,_fo),e(Z,ufo),e(Z,Ah),e(Ah,Mne),e(Mne,bfo),e(Ah,vfo),e(Ah,YB),e(YB,Ffo),e(Ah,Tfo),e(Z,Mfo),e(Z,yh),e(yh,Ene),e(Ene,Efo),e(yh,Cfo),e(yh,KB),e(KB,wfo),e(yh,Afo),e(Z,yfo),e(Z,Lh),e(Lh,Cne),e(Cne,Lfo),e(Lh,xfo),e(Lh,ZB),e(ZB,$fo),e(Lh,kfo),e(Z,Sfo),e(Z,xh),e(xh,wne),e(wne,Rfo),e(xh,Pfo),e(xh,eI),e(eI,Bfo),e(xh,Ifo),e(Z,qfo),e(Z,$h),e($h,Ane),e(Ane,Nfo),e($h,jfo),e($h,oI),e(oI,Dfo),e($h,Gfo),e(Z,Ofo),e(Z,kh),e(kh,yne),e(yne,Vfo),e(kh,Xfo),e(kh,rI),e(rI,zfo),e(kh,Wfo),e(He,Qfo),M(Sh,He,null),e(He,Hfo),M(Rh,He,null),e(Ao,Ufo),e(Ao,Ph),M(G0,Ph,null),e(Ph,Jfo),e(Ph,Lne),e(Lne,Yfo),b(f,Vqe,u),b(f,Ei,u),e(Ei,Bh),e(Bh,xne),M(O0,xne,null),e(Ei,Kfo),e(Ei,$ne),e($ne,Zfo),b(f,Xqe,u),b(f,yo,u),M(V0,yo,null),e(yo,emo),e(yo,X0),e(X0,omo),e(X0,tI),e(tI,rmo),e(X0,tmo),e(yo,amo),e(yo,z0),e(z0,nmo),e(z0,kne),e(kne,smo),e(z0,lmo),e(yo,imo),e(yo,Ue),M(W0,Ue,null),e(Ue,dmo),e(Ue,Sne),e(Sne,cmo),e(Ue,fmo),e(Ue,Ci),e(Ci,mmo),e(Ci,Rne),e(Rne,gmo),e(Ci,hmo),e(Ci,Pne),e(Pne,pmo),e(Ci,_mo),e(Ue,umo),e(Ue,_e),e(_e,Ih),e(Ih,Bne),e(Bne,bmo),e(Ih,vmo),e(Ih,aI),e(aI,Fmo),e(Ih,Tmo),e(_e,Mmo),e(_e,qh),e(qh,Ine),e(Ine,Emo),e(qh,Cmo),e(qh,qne),e(qne,wmo),e(qh,Amo),e(_e,ymo),e(_e,Nh),e(Nh,Nne),e(Nne,Lmo),e(Nh,xmo),e(Nh,nI),e(nI,$mo),e(Nh,kmo),e(_e,Smo),e(_e,jh),e(jh,jne),e(jne,Rmo),e(jh,Pmo),e(jh,sI),e(sI,Bmo),e(jh,Imo),e(_e,qmo),e(_e,Dh),e(Dh,Dne),e(Dne,Nmo),e(Dh,jmo),e(Dh,lI),e(lI,Dmo),e(Dh,Gmo),e(_e,Omo),e(_e,Gh),e(Gh,Gne),e(Gne,Vmo),e(Gh,Xmo),e(Gh,iI),e(iI,zmo),e(Gh,Wmo),e(_e,Qmo),e(_e,Oh),e(Oh,One),e(One,Hmo),e(Oh,Umo),e(Oh,dI),e(dI,Jmo),e(Oh,Ymo),e(_e,Kmo),e(_e,Vh),e(Vh,Vne),e(Vne,Zmo),e(Vh,ego),e(Vh,cI),e(cI,ogo),e(Vh,rgo),e(_e,tgo),e(_e,Xh),e(Xh,Xne),e(Xne,ago),e(Xh,ngo),e(Xh,fI),e(fI,sgo),e(Xh,lgo),e(_e,igo),e(_e,zh),e(zh,zne),e(zne,dgo),e(zh,cgo),e(zh,mI),e(mI,fgo),e(zh,mgo),e(_e,ggo),e(_e,Wh),e(Wh,Wne),e(Wne,hgo),e(Wh,pgo),e(Wh,gI),e(gI,_go),e(Wh,ugo),e(_e,bgo),e(_e,Qh),e(Qh,Qne),e(Qne,vgo),e(Qh,Fgo),e(Qh,hI),e(hI,Tgo),e(Qh,Mgo),e(_e,Ego),e(_e,Hh),e(Hh,Hne),e(Hne,Cgo),e(Hh,wgo),e(Hh,pI),e(pI,Ago),e(Hh,ygo),e(_e,Lgo),e(_e,Uh),e(Uh,Une),e(Une,xgo),e(Uh,$go),e(Uh,_I),e(_I,kgo),e(Uh,Sgo),e(_e,Rgo),e(_e,Jh),e(Jh,Jne),e(Jne,Pgo),e(Jh,Bgo),e(Jh,uI),e(uI,Igo),e(Jh,qgo),e(_e,Ngo),e(_e,Yh),e(Yh,Yne),e(Yne,jgo),e(Yh,Dgo),e(Yh,bI),e(bI,Ggo),e(Yh,Ogo),e(Ue,Vgo),M(Kh,Ue,null),e(Ue,Xgo),M(Zh,Ue,null),e(yo,zgo),e(yo,ep),M(Q0,ep,null),e(ep,Wgo),e(ep,Kne),e(Kne,Qgo),b(f,zqe,u),b(f,wi,u),e(wi,op),e(op,Zne),M(H0,Zne,null),e(wi,Hgo),e(wi,ese),e(ese,Ugo),b(f,Wqe,u),b(f,Lo,u),M(U0,Lo,null),e(Lo,Jgo),e(Lo,Ai),e(Ai,Ygo),e(Ai,vI),e(vI,Kgo),e(Ai,Zgo),e(Ai,FI),e(FI,eho),e(Ai,oho),e(Lo,rho),e(Lo,J0),e(J0,tho),e(J0,ose),e(ose,aho),e(J0,nho),e(Lo,sho),e(Lo,tt),M(Y0,tt,null),e(tt,lho),e(tt,rse),e(rse,iho),e(tt,dho),e(tt,yi),e(yi,cho),e(yi,tse),e(tse,fho),e(yi,mho),e(yi,TI),e(TI,gho),e(yi,hho),e(tt,pho),M(rp,tt,null),e(Lo,_ho),e(Lo,Je),M(K0,Je,null),e(Je,uho),e(Je,ase),e(ase,bho),e(Je,vho),e(Je,La),e(La,Fho),e(La,nse),e(nse,Tho),e(La,Mho),e(La,sse),e(sse,Eho),e(La,Cho),e(La,lse),e(lse,who),e(La,Aho),e(Je,yho),e(Je,x),e(x,tp),e(tp,ise),e(ise,Lho),e(tp,xho),e(tp,MI),e(MI,$ho),e(tp,kho),e(x,Sho),e(x,ap),e(ap,dse),e(dse,Rho),e(ap,Pho),e(ap,EI),e(EI,Bho),e(ap,Iho),e(x,qho),e(x,np),e(np,cse),e(cse,Nho),e(np,jho),e(np,CI),e(CI,Dho),e(np,Gho),e(x,Oho),e(x,sp),e(sp,fse),e(fse,Vho),e(sp,Xho),e(sp,wI),e(wI,zho),e(sp,Who),e(x,Qho),e(x,lp),e(lp,mse),e(mse,Hho),e(lp,Uho),e(lp,AI),e(AI,Jho),e(lp,Yho),e(x,Kho),e(x,ip),e(ip,gse),e(gse,Zho),e(ip,epo),e(ip,yI),e(yI,opo),e(ip,rpo),e(x,tpo),e(x,dp),e(dp,hse),e(hse,apo),e(dp,npo),e(dp,LI),e(LI,spo),e(dp,lpo),e(x,ipo),e(x,cp),e(cp,pse),e(pse,dpo),e(cp,cpo),e(cp,xI),e(xI,fpo),e(cp,mpo),e(x,gpo),e(x,fp),e(fp,_se),e(_se,hpo),e(fp,ppo),e(fp,$I),e($I,_po),e(fp,upo),e(x,bpo),e(x,mp),e(mp,use),e(use,vpo),e(mp,Fpo),e(mp,kI),e(kI,Tpo),e(mp,Mpo),e(x,Epo),e(x,gp),e(gp,bse),e(bse,Cpo),e(gp,wpo),e(gp,SI),e(SI,Apo),e(gp,ypo),e(x,Lpo),e(x,hp),e(hp,vse),e(vse,xpo),e(hp,$po),e(hp,RI),e(RI,kpo),e(hp,Spo),e(x,Rpo),e(x,pp),e(pp,Fse),e(Fse,Ppo),e(pp,Bpo),e(pp,PI),e(PI,Ipo),e(pp,qpo),e(x,Npo),e(x,_p),e(_p,Tse),e(Tse,jpo),e(_p,Dpo),e(_p,BI),e(BI,Gpo),e(_p,Opo),e(x,Vpo),e(x,up),e(up,Mse),e(Mse,Xpo),e(up,zpo),e(up,II),e(II,Wpo),e(up,Qpo),e(x,Hpo),e(x,bp),e(bp,Ese),e(Ese,Upo),e(bp,Jpo),e(bp,qI),e(qI,Ypo),e(bp,Kpo),e(x,Zpo),e(x,vp),e(vp,Cse),e(Cse,e_o),e(vp,o_o),e(vp,NI),e(NI,r_o),e(vp,t_o),e(x,a_o),e(x,Fp),e(Fp,wse),e(wse,n_o),e(Fp,s_o),e(Fp,jI),e(jI,l_o),e(Fp,i_o),e(x,d_o),e(x,Tp),e(Tp,Ase),e(Ase,c_o),e(Tp,f_o),e(Tp,DI),e(DI,m_o),e(Tp,g_o),e(x,h_o),e(x,Mp),e(Mp,yse),e(yse,p_o),e(Mp,__o),e(Mp,GI),e(GI,u_o),e(Mp,b_o),e(x,v_o),e(x,Ep),e(Ep,Lse),e(Lse,F_o),e(Ep,T_o),e(Ep,OI),e(OI,M_o),e(Ep,E_o),e(x,C_o),e(x,Cp),e(Cp,xse),e(xse,w_o),e(Cp,A_o),e(Cp,VI),e(VI,y_o),e(Cp,L_o),e(x,x_o),e(x,wp),e(wp,$se),e($se,$_o),e(wp,k_o),e(wp,XI),e(XI,S_o),e(wp,R_o),e(x,P_o),e(x,Ap),e(Ap,kse),e(kse,B_o),e(Ap,I_o),e(Ap,zI),e(zI,q_o),e(Ap,N_o),e(x,j_o),e(x,yp),e(yp,Sse),e(Sse,D_o),e(yp,G_o),e(yp,WI),e(WI,O_o),e(yp,V_o),e(x,X_o),e(x,Lp),e(Lp,Rse),e(Rse,z_o),e(Lp,W_o),e(Lp,QI),e(QI,Q_o),e(Lp,H_o),e(x,U_o),e(x,xp),e(xp,Pse),e(Pse,J_o),e(xp,Y_o),e(xp,HI),e(HI,K_o),e(xp,Z_o),e(x,euo),e(x,$p),e($p,Bse),e(Bse,ouo),e($p,ruo),e($p,UI),e(UI,tuo),e($p,auo),e(x,nuo),e(x,kp),e(kp,Ise),e(Ise,suo),e(kp,luo),e(kp,JI),e(JI,iuo),e(kp,duo),e(x,cuo),e(x,Sp),e(Sp,qse),e(qse,fuo),e(Sp,muo),e(Sp,YI),e(YI,guo),e(Sp,huo),e(x,puo),e(x,Rp),e(Rp,Nse),e(Nse,_uo),e(Rp,uuo),e(Rp,KI),e(KI,buo),e(Rp,vuo),e(x,Fuo),e(x,Pp),e(Pp,jse),e(jse,Tuo),e(Pp,Muo),e(Pp,ZI),e(ZI,Euo),e(Pp,Cuo),e(x,wuo),e(x,Ps),e(Ps,Dse),e(Dse,Auo),e(Ps,yuo),e(Ps,eq),e(eq,Luo),e(Ps,xuo),e(Ps,oq),e(oq,$uo),e(Ps,kuo),e(x,Suo),e(x,Bp),e(Bp,Gse),e(Gse,Ruo),e(Bp,Puo),e(Bp,rq),e(rq,Buo),e(Bp,Iuo),e(x,quo),e(x,Ip),e(Ip,Ose),e(Ose,Nuo),e(Ip,juo),e(Ip,tq),e(tq,Duo),e(Ip,Guo),e(x,Ouo),e(x,qp),e(qp,Vse),e(Vse,Vuo),e(qp,Xuo),e(qp,aq),e(aq,zuo),e(qp,Wuo),e(x,Quo),e(x,Np),e(Np,Xse),e(Xse,Huo),e(Np,Uuo),e(Np,nq),e(nq,Juo),e(Np,Yuo),e(x,Kuo),e(x,jp),e(jp,zse),e(zse,Zuo),e(jp,e2o),e(jp,sq),e(sq,o2o),e(jp,r2o),e(x,t2o),e(x,Dp),e(Dp,Wse),e(Wse,a2o),e(Dp,n2o),e(Dp,lq),e(lq,s2o),e(Dp,l2o),e(x,i2o),e(x,Gp),e(Gp,Qse),e(Qse,d2o),e(Gp,c2o),e(Gp,iq),e(iq,f2o),e(Gp,m2o),e(x,g2o),e(x,Op),e(Op,Hse),e(Hse,h2o),e(Op,p2o),e(Op,dq),e(dq,_2o),e(Op,u2o),e(x,b2o),e(x,Vp),e(Vp,Use),e(Use,v2o),e(Vp,F2o),e(Vp,cq),e(cq,T2o),e(Vp,M2o),e(x,E2o),e(x,Xp),e(Xp,Jse),e(Jse,C2o),e(Xp,w2o),e(Xp,fq),e(fq,A2o),e(Xp,y2o),e(x,L2o),e(x,zp),e(zp,Yse),e(Yse,x2o),e(zp,$2o),e(zp,mq),e(mq,k2o),e(zp,S2o),e(x,R2o),e(x,Wp),e(Wp,Kse),e(Kse,P2o),e(Wp,B2o),e(Wp,gq),e(gq,I2o),e(Wp,q2o),e(x,N2o),e(x,Qp),e(Qp,Zse),e(Zse,j2o),e(Qp,D2o),e(Qp,hq),e(hq,G2o),e(Qp,O2o),e(x,V2o),e(x,Hp),e(Hp,ele),e(ele,X2o),e(Hp,z2o),e(Hp,pq),e(pq,W2o),e(Hp,Q2o),e(x,H2o),e(x,Up),e(Up,ole),e(ole,U2o),e(Up,J2o),e(Up,_q),e(_q,Y2o),e(Up,K2o),e(x,Z2o),e(x,Jp),e(Jp,rle),e(rle,e1o),e(Jp,o1o),e(Jp,uq),e(uq,r1o),e(Jp,t1o),e(x,a1o),e(x,Yp),e(Yp,tle),e(tle,n1o),e(Yp,s1o),e(Yp,bq),e(bq,l1o),e(Yp,i1o),e(x,d1o),e(x,Kp),e(Kp,ale),e(ale,c1o),e(Kp,f1o),e(Kp,vq),e(vq,m1o),e(Kp,g1o),e(x,h1o),e(x,Zp),e(Zp,nle),e(nle,p1o),e(Zp,_1o),e(Zp,Fq),e(Fq,u1o),e(Zp,b1o),e(x,v1o),e(x,e_),e(e_,sle),e(sle,F1o),e(e_,T1o),e(e_,Tq),e(Tq,M1o),e(e_,E1o),e(x,C1o),e(x,o_),e(o_,lle),e(lle,w1o),e(o_,A1o),e(o_,Mq),e(Mq,y1o),e(o_,L1o),e(x,x1o),e(x,r_),e(r_,ile),e(ile,$1o),e(r_,k1o),e(r_,Eq),e(Eq,S1o),e(r_,R1o),e(x,P1o),e(x,t_),e(t_,dle),e(dle,B1o),e(t_,I1o),e(t_,Cq),e(Cq,q1o),e(t_,N1o),e(x,j1o),e(x,a_),e(a_,cle),e(cle,D1o),e(a_,G1o),e(a_,wq),e(wq,O1o),e(a_,V1o),e(x,X1o),e(x,n_),e(n_,fle),e(fle,z1o),e(n_,W1o),e(n_,Aq),e(Aq,Q1o),e(n_,H1o),e(x,U1o),e(x,s_),e(s_,mle),e(mle,J1o),e(s_,Y1o),e(s_,yq),e(yq,K1o),e(s_,Z1o),e(x,ebo),e(x,l_),e(l_,gle),e(gle,obo),e(l_,rbo),e(l_,Lq),e(Lq,tbo),e(l_,abo),e(x,nbo),e(x,i_),e(i_,hle),e(hle,sbo),e(i_,lbo),e(i_,xq),e(xq,ibo),e(i_,dbo),e(x,cbo),e(x,d_),e(d_,ple),e(ple,fbo),e(d_,mbo),e(d_,$q),e($q,gbo),e(d_,hbo),e(x,pbo),e(x,c_),e(c_,_le),e(_le,_bo),e(c_,ubo),e(c_,kq),e(kq,bbo),e(c_,vbo),e(x,Fbo),e(x,f_),e(f_,ule),e(ule,Tbo),e(f_,Mbo),e(f_,Sq),e(Sq,Ebo),e(f_,Cbo),e(x,wbo),e(x,m_),e(m_,ble),e(ble,Abo),e(m_,ybo),e(m_,Rq),e(Rq,Lbo),e(m_,xbo),e(x,$bo),e(x,g_),e(g_,vle),e(vle,kbo),e(g_,Sbo),e(g_,Pq),e(Pq,Rbo),e(g_,Pbo),e(x,Bbo),e(x,h_),e(h_,Fle),e(Fle,Ibo),e(h_,qbo),e(h_,Bq),e(Bq,Nbo),e(h_,jbo),e(x,Dbo),e(x,p_),e(p_,Tle),e(Tle,Gbo),e(p_,Obo),e(p_,Iq),e(Iq,Vbo),e(p_,Xbo),e(x,zbo),e(x,__),e(__,Mle),e(Mle,Wbo),e(__,Qbo),e(__,qq),e(qq,Hbo),e(__,Ubo),e(x,Jbo),e(x,u_),e(u_,Ele),e(Ele,Ybo),e(u_,Kbo),e(u_,Nq),e(Nq,Zbo),e(u_,evo),e(x,ovo),e(x,b_),e(b_,Cle),e(Cle,rvo),e(b_,tvo),e(b_,jq),e(jq,avo),e(b_,nvo),e(x,svo),e(x,v_),e(v_,wle),e(wle,lvo),e(v_,ivo),e(v_,Dq),e(Dq,dvo),e(v_,cvo),e(x,fvo),e(x,F_),e(F_,Ale),e(Ale,mvo),e(F_,gvo),e(F_,Gq),e(Gq,hvo),e(F_,pvo),e(x,_vo),e(x,T_),e(T_,yle),e(yle,uvo),e(T_,bvo),e(T_,Oq),e(Oq,vvo),e(T_,Fvo),e(x,Tvo),e(x,M_),e(M_,Lle),e(Lle,Mvo),e(M_,Evo),e(M_,Vq),e(Vq,Cvo),e(M_,wvo),e(x,Avo),e(x,E_),e(E_,xle),e(xle,yvo),e(E_,Lvo),e(E_,Xq),e(Xq,xvo),e(E_,$vo),e(x,kvo),e(x,C_),e(C_,$le),e($le,Svo),e(C_,Rvo),e(C_,zq),e(zq,Pvo),e(C_,Bvo),e(x,Ivo),e(x,w_),e(w_,kle),e(kle,qvo),e(w_,Nvo),e(w_,Wq),e(Wq,jvo),e(w_,Dvo),e(x,Gvo),e(x,A_),e(A_,Sle),e(Sle,Ovo),e(A_,Vvo),e(A_,Qq),e(Qq,Xvo),e(A_,zvo),e(x,Wvo),e(x,y_),e(y_,Rle),e(Rle,Qvo),e(y_,Hvo),e(y_,Hq),e(Hq,Uvo),e(y_,Jvo),e(x,Yvo),e(x,L_),e(L_,Ple),e(Ple,Kvo),e(L_,Zvo),e(L_,Uq),e(Uq,eFo),e(L_,oFo),e(x,rFo),e(x,x_),e(x_,Ble),e(Ble,tFo),e(x_,aFo),e(x_,Jq),e(Jq,nFo),e(x_,sFo),e(x,lFo),e(x,$_),e($_,Ile),e(Ile,iFo),e($_,dFo),e($_,Yq),e(Yq,cFo),e($_,fFo),e(x,mFo),e(x,k_),e(k_,qle),e(qle,gFo),e(k_,hFo),e(k_,Kq),e(Kq,pFo),e(k_,_Fo),e(x,uFo),e(x,S_),e(S_,Nle),e(Nle,bFo),e(S_,vFo),e(S_,Zq),e(Zq,FFo),e(S_,TFo),e(x,MFo),e(x,R_),e(R_,jle),e(jle,EFo),e(R_,CFo),e(R_,eN),e(eN,wFo),e(R_,AFo),e(x,yFo),e(x,P_),e(P_,Dle),e(Dle,LFo),e(P_,xFo),e(P_,oN),e(oN,$Fo),e(P_,kFo),e(x,SFo),e(x,B_),e(B_,Gle),e(Gle,RFo),e(B_,PFo),e(B_,rN),e(rN,BFo),e(B_,IFo),e(x,qFo),e(x,I_),e(I_,Ole),e(Ole,NFo),e(I_,jFo),e(I_,tN),e(tN,DFo),e(I_,GFo),e(x,OFo),e(x,q_),e(q_,Vle),e(Vle,VFo),e(q_,XFo),e(q_,aN),e(aN,zFo),e(q_,WFo),e(x,QFo),e(x,N_),e(N_,Xle),e(Xle,HFo),e(N_,UFo),e(N_,nN),e(nN,JFo),e(N_,YFo),e(x,KFo),e(x,j_),e(j_,zle),e(zle,ZFo),e(j_,e6o),e(j_,sN),e(sN,o6o),e(j_,r6o),e(x,t6o),e(x,D_),e(D_,Wle),e(Wle,a6o),e(D_,n6o),e(D_,lN),e(lN,s6o),e(D_,l6o),e(x,i6o),e(x,G_),e(G_,Qle),e(Qle,d6o),e(G_,c6o),e(G_,iN),e(iN,f6o),e(G_,m6o),e(x,g6o),e(x,O_),e(O_,Hle),e(Hle,h6o),e(O_,p6o),e(O_,dN),e(dN,_6o),e(O_,u6o),e(x,b6o),e(x,V_),e(V_,Ule),e(Ule,v6o),e(V_,F6o),e(V_,cN),e(cN,T6o),e(V_,M6o),e(x,E6o),e(x,X_),e(X_,Jle),e(Jle,C6o),e(X_,w6o),e(X_,fN),e(fN,A6o),e(X_,y6o),e(x,L6o),e(x,z_),e(z_,Yle),e(Yle,x6o),e(z_,$6o),e(z_,mN),e(mN,k6o),e(z_,S6o),e(x,R6o),e(x,W_),e(W_,Kle),e(Kle,P6o),e(W_,B6o),e(W_,gN),e(gN,I6o),e(W_,q6o),e(x,N6o),e(x,Q_),e(Q_,Zle),e(Zle,j6o),e(Q_,D6o),e(Q_,hN),e(hN,G6o),e(Q_,O6o),e(x,V6o),e(x,H_),e(H_,eie),e(eie,X6o),e(H_,z6o),e(H_,pN),e(pN,W6o),e(H_,Q6o),e(Je,H6o),e(Je,U_),e(U_,U6o),e(U_,oie),e(oie,J6o),e(U_,Y6o),e(U_,rie),e(rie,K6o),e(Je,Z6o),M(J_,Je,null),b(f,Qqe,u),b(f,Li,u),e(Li,Y_),e(Y_,tie),M(Z0,tie,null),e(Li,eTo),e(Li,aie),e(aie,oTo),b(f,Hqe,u),b(f,xo,u),M(eA,xo,null),e(xo,rTo),e(xo,xi),e(xi,tTo),e(xi,_N),e(_N,aTo),e(xi,nTo),e(xi,uN),e(uN,sTo),e(xi,lTo),e(xo,iTo),e(xo,oA),e(oA,dTo),e(oA,nie),e(nie,cTo),e(oA,fTo),e(xo,mTo),e(xo,at),M(rA,at,null),e(at,gTo),e(at,sie),e(sie,hTo),e(at,pTo),e(at,$i),e($i,_To),e($i,lie),e(lie,uTo),e($i,bTo),e($i,bN),e(bN,vTo),e($i,FTo),e(at,TTo),M(K_,at,null),e(xo,MTo),e(xo,Ye),M(tA,Ye,null),e(Ye,ETo),e(Ye,iie),e(iie,CTo),e(Ye,wTo),e(Ye,xa),e(xa,ATo),e(xa,die),e(die,yTo),e(xa,LTo),e(xa,cie),e(cie,xTo),e(xa,$To),e(xa,fie),e(fie,kTo),e(xa,STo),e(Ye,RTo),e(Ye,G),e(G,Z_),e(Z_,mie),e(mie,PTo),e(Z_,BTo),e(Z_,vN),e(vN,ITo),e(Z_,qTo),e(G,NTo),e(G,eu),e(eu,gie),e(gie,jTo),e(eu,DTo),e(eu,FN),e(FN,GTo),e(eu,OTo),e(G,VTo),e(G,ou),e(ou,hie),e(hie,XTo),e(ou,zTo),e(ou,TN),e(TN,WTo),e(ou,QTo),e(G,HTo),e(G,ru),e(ru,pie),e(pie,UTo),e(ru,JTo),e(ru,MN),e(MN,YTo),e(ru,KTo),e(G,ZTo),e(G,tu),e(tu,_ie),e(_ie,e7o),e(tu,o7o),e(tu,EN),e(EN,r7o),e(tu,t7o),e(G,a7o),e(G,au),e(au,uie),e(uie,n7o),e(au,s7o),e(au,CN),e(CN,l7o),e(au,i7o),e(G,d7o),e(G,nu),e(nu,bie),e(bie,c7o),e(nu,f7o),e(nu,wN),e(wN,m7o),e(nu,g7o),e(G,h7o),e(G,su),e(su,vie),e(vie,p7o),e(su,_7o),e(su,AN),e(AN,u7o),e(su,b7o),e(G,v7o),e(G,lu),e(lu,Fie),e(Fie,F7o),e(lu,T7o),e(lu,yN),e(yN,M7o),e(lu,E7o),e(G,C7o),e(G,iu),e(iu,Tie),e(Tie,w7o),e(iu,A7o),e(iu,LN),e(LN,y7o),e(iu,L7o),e(G,x7o),e(G,du),e(du,Mie),e(Mie,$7o),e(du,k7o),e(du,xN),e(xN,S7o),e(du,R7o),e(G,P7o),e(G,cu),e(cu,Eie),e(Eie,B7o),e(cu,I7o),e(cu,$N),e($N,q7o),e(cu,N7o),e(G,j7o),e(G,fu),e(fu,Cie),e(Cie,D7o),e(fu,G7o),e(fu,kN),e(kN,O7o),e(fu,V7o),e(G,X7o),e(G,mu),e(mu,wie),e(wie,z7o),e(mu,W7o),e(mu,SN),e(SN,Q7o),e(mu,H7o),e(G,U7o),e(G,gu),e(gu,Aie),e(Aie,J7o),e(gu,Y7o),e(gu,RN),e(RN,K7o),e(gu,Z7o),e(G,e9o),e(G,hu),e(hu,yie),e(yie,o9o),e(hu,r9o),e(hu,PN),e(PN,t9o),e(hu,a9o),e(G,n9o),e(G,pu),e(pu,Lie),e(Lie,s9o),e(pu,l9o),e(pu,BN),e(BN,i9o),e(pu,d9o),e(G,c9o),e(G,_u),e(_u,xie),e(xie,f9o),e(_u,m9o),e(_u,IN),e(IN,g9o),e(_u,h9o),e(G,p9o),e(G,uu),e(uu,$ie),e($ie,_9o),e(uu,u9o),e(uu,qN),e(qN,b9o),e(uu,v9o),e(G,F9o),e(G,bu),e(bu,kie),e(kie,T9o),e(bu,M9o),e(bu,NN),e(NN,E9o),e(bu,C9o),e(G,w9o),e(G,vu),e(vu,Sie),e(Sie,A9o),e(vu,y9o),e(vu,jN),e(jN,L9o),e(vu,x9o),e(G,$9o),e(G,Fu),e(Fu,Rie),e(Rie,k9o),e(Fu,S9o),e(Fu,DN),e(DN,R9o),e(Fu,P9o),e(G,B9o),e(G,Tu),e(Tu,Pie),e(Pie,I9o),e(Tu,q9o),e(Tu,GN),e(GN,N9o),e(Tu,j9o),e(G,D9o),e(G,Mu),e(Mu,Bie),e(Bie,G9o),e(Mu,O9o),e(Mu,ON),e(ON,V9o),e(Mu,X9o),e(G,z9o),e(G,Eu),e(Eu,Iie),e(Iie,W9o),e(Eu,Q9o),e(Eu,VN),e(VN,H9o),e(Eu,U9o),e(G,J9o),e(G,Cu),e(Cu,qie),e(qie,Y9o),e(Cu,K9o),e(Cu,XN),e(XN,Z9o),e(Cu,eMo),e(G,oMo),e(G,wu),e(wu,Nie),e(Nie,rMo),e(wu,tMo),e(wu,zN),e(zN,aMo),e(wu,nMo),e(G,sMo),e(G,Au),e(Au,jie),e(jie,lMo),e(Au,iMo),e(Au,WN),e(WN,dMo),e(Au,cMo),e(G,fMo),e(G,yu),e(yu,Die),e(Die,mMo),e(yu,gMo),e(yu,QN),e(QN,hMo),e(yu,pMo),e(G,_Mo),e(G,Lu),e(Lu,Gie),e(Gie,uMo),e(Lu,bMo),e(Lu,HN),e(HN,vMo),e(Lu,FMo),e(G,TMo),e(G,xu),e(xu,Oie),e(Oie,MMo),e(xu,EMo),e(xu,UN),e(UN,CMo),e(xu,wMo),e(G,AMo),e(G,$u),e($u,Vie),e(Vie,yMo),e($u,LMo),e($u,JN),e(JN,xMo),e($u,$Mo),e(G,kMo),e(G,ku),e(ku,Xie),e(Xie,SMo),e(ku,RMo),e(ku,YN),e(YN,PMo),e(ku,BMo),e(G,IMo),e(G,Su),e(Su,zie),e(zie,qMo),e(Su,NMo),e(Su,KN),e(KN,jMo),e(Su,DMo),e(G,GMo),e(G,Ru),e(Ru,Wie),e(Wie,OMo),e(Ru,VMo),e(Ru,ZN),e(ZN,XMo),e(Ru,zMo),e(G,WMo),e(G,Pu),e(Pu,Qie),e(Qie,QMo),e(Pu,HMo),e(Pu,ej),e(ej,UMo),e(Pu,JMo),e(G,YMo),e(G,Bu),e(Bu,Hie),e(Hie,KMo),e(Bu,ZMo),e(Bu,oj),e(oj,e4o),e(Bu,o4o),e(G,r4o),e(G,Iu),e(Iu,Uie),e(Uie,t4o),e(Iu,a4o),e(Iu,rj),e(rj,n4o),e(Iu,s4o),e(G,l4o),e(G,qu),e(qu,Jie),e(Jie,i4o),e(qu,d4o),e(qu,tj),e(tj,c4o),e(qu,f4o),e(G,m4o),e(G,Nu),e(Nu,Yie),e(Yie,g4o),e(Nu,h4o),e(Nu,aj),e(aj,p4o),e(Nu,_4o),e(G,u4o),e(G,ju),e(ju,Kie),e(Kie,b4o),e(ju,v4o),e(ju,nj),e(nj,F4o),e(ju,T4o),e(G,M4o),e(G,Du),e(Du,Zie),e(Zie,E4o),e(Du,C4o),e(Du,sj),e(sj,w4o),e(Du,A4o),e(G,y4o),e(G,Gu),e(Gu,ede),e(ede,L4o),e(Gu,x4o),e(Gu,lj),e(lj,$4o),e(Gu,k4o),e(Ye,S4o),e(Ye,Ou),e(Ou,R4o),e(Ou,ode),e(ode,P4o),e(Ou,B4o),e(Ou,rde),e(rde,I4o),e(Ye,q4o),M(Vu,Ye,null),b(f,Uqe,u),b(f,ki,u),e(ki,Xu),e(Xu,tde),M(aA,tde,null),e(ki,N4o),e(ki,ade),e(ade,j4o),b(f,Jqe,u),b(f,$o,u),M(nA,$o,null),e($o,D4o),e($o,Si),e(Si,G4o),e(Si,ij),e(ij,O4o),e(Si,V4o),e(Si,dj),e(dj,X4o),e(Si,z4o),e($o,W4o),e($o,sA),e(sA,Q4o),e(sA,nde),e(nde,H4o),e(sA,U4o),e($o,J4o),e($o,nt),M(lA,nt,null),e(nt,Y4o),e(nt,sde),e(sde,K4o),e(nt,Z4o),e(nt,Ri),e(Ri,eEo),e(Ri,lde),e(lde,oEo),e(Ri,rEo),e(Ri,cj),e(cj,tEo),e(Ri,aEo),e(nt,nEo),M(zu,nt,null),e($o,sEo),e($o,Ke),M(iA,Ke,null),e(Ke,lEo),e(Ke,ide),e(ide,iEo),e(Ke,dEo),e(Ke,$a),e($a,cEo),e($a,dde),e(dde,fEo),e($a,mEo),e($a,cde),e(cde,gEo),e($a,hEo),e($a,fde),e(fde,pEo),e($a,_Eo),e(Ke,uEo),e(Ke,z),e(z,Wu),e(Wu,mde),e(mde,bEo),e(Wu,vEo),e(Wu,fj),e(fj,FEo),e(Wu,TEo),e(z,MEo),e(z,Qu),e(Qu,gde),e(gde,EEo),e(Qu,CEo),e(Qu,mj),e(mj,wEo),e(Qu,AEo),e(z,yEo),e(z,Hu),e(Hu,hde),e(hde,LEo),e(Hu,xEo),e(Hu,gj),e(gj,$Eo),e(Hu,kEo),e(z,SEo),e(z,Uu),e(Uu,pde),e(pde,REo),e(Uu,PEo),e(Uu,hj),e(hj,BEo),e(Uu,IEo),e(z,qEo),e(z,Ju),e(Ju,_de),e(_de,NEo),e(Ju,jEo),e(Ju,pj),e(pj,DEo),e(Ju,GEo),e(z,OEo),e(z,Yu),e(Yu,ude),e(ude,VEo),e(Yu,XEo),e(Yu,_j),e(_j,zEo),e(Yu,WEo),e(z,QEo),e(z,Ku),e(Ku,bde),e(bde,HEo),e(Ku,UEo),e(Ku,uj),e(uj,JEo),e(Ku,YEo),e(z,KEo),e(z,Zu),e(Zu,vde),e(vde,ZEo),e(Zu,e5o),e(Zu,bj),e(bj,o5o),e(Zu,r5o),e(z,t5o),e(z,e2),e(e2,Fde),e(Fde,a5o),e(e2,n5o),e(e2,vj),e(vj,s5o),e(e2,l5o),e(z,i5o),e(z,o2),e(o2,Tde),e(Tde,d5o),e(o2,c5o),e(o2,Fj),e(Fj,f5o),e(o2,m5o),e(z,g5o),e(z,r2),e(r2,Mde),e(Mde,h5o),e(r2,p5o),e(r2,Tj),e(Tj,_5o),e(r2,u5o),e(z,b5o),e(z,t2),e(t2,Ede),e(Ede,v5o),e(t2,F5o),e(t2,Mj),e(Mj,T5o),e(t2,M5o),e(z,E5o),e(z,a2),e(a2,Cde),e(Cde,C5o),e(a2,w5o),e(a2,Ej),e(Ej,A5o),e(a2,y5o),e(z,L5o),e(z,n2),e(n2,wde),e(wde,x5o),e(n2,$5o),e(n2,Cj),e(Cj,k5o),e(n2,S5o),e(z,R5o),e(z,s2),e(s2,Ade),e(Ade,P5o),e(s2,B5o),e(s2,wj),e(wj,I5o),e(s2,q5o),e(z,N5o),e(z,l2),e(l2,yde),e(yde,j5o),e(l2,D5o),e(l2,Aj),e(Aj,G5o),e(l2,O5o),e(z,V5o),e(z,i2),e(i2,Lde),e(Lde,X5o),e(i2,z5o),e(i2,yj),e(yj,W5o),e(i2,Q5o),e(z,H5o),e(z,d2),e(d2,xde),e(xde,U5o),e(d2,J5o),e(d2,Lj),e(Lj,Y5o),e(d2,K5o),e(z,Z5o),e(z,c2),e(c2,$de),e($de,eCo),e(c2,oCo),e(c2,xj),e(xj,rCo),e(c2,tCo),e(z,aCo),e(z,f2),e(f2,kde),e(kde,nCo),e(f2,sCo),e(f2,$j),e($j,lCo),e(f2,iCo),e(z,dCo),e(z,m2),e(m2,Sde),e(Sde,cCo),e(m2,fCo),e(m2,kj),e(kj,mCo),e(m2,gCo),e(z,hCo),e(z,g2),e(g2,Rde),e(Rde,pCo),e(g2,_Co),e(g2,Sj),e(Sj,uCo),e(g2,bCo),e(z,vCo),e(z,h2),e(h2,Pde),e(Pde,FCo),e(h2,TCo),e(h2,Rj),e(Rj,MCo),e(h2,ECo),e(z,CCo),e(z,p2),e(p2,Bde),e(Bde,wCo),e(p2,ACo),e(p2,Pj),e(Pj,yCo),e(p2,LCo),e(z,xCo),e(z,_2),e(_2,Ide),e(Ide,$Co),e(_2,kCo),e(_2,Bj),e(Bj,SCo),e(_2,RCo),e(z,PCo),e(z,u2),e(u2,qde),e(qde,BCo),e(u2,ICo),e(u2,Ij),e(Ij,qCo),e(u2,NCo),e(z,jCo),e(z,b2),e(b2,Nde),e(Nde,DCo),e(b2,GCo),e(b2,qj),e(qj,OCo),e(b2,VCo),e(z,XCo),e(z,v2),e(v2,jde),e(jde,zCo),e(v2,WCo),e(v2,Nj),e(Nj,QCo),e(v2,HCo),e(z,UCo),e(z,F2),e(F2,Dde),e(Dde,JCo),e(F2,YCo),e(F2,jj),e(jj,KCo),e(F2,ZCo),e(z,e3o),e(z,T2),e(T2,Gde),e(Gde,o3o),e(T2,r3o),e(T2,Dj),e(Dj,t3o),e(T2,a3o),e(z,n3o),e(z,M2),e(M2,Ode),e(Ode,s3o),e(M2,l3o),e(M2,Gj),e(Gj,i3o),e(M2,d3o),e(z,c3o),e(z,E2),e(E2,Vde),e(Vde,f3o),e(E2,m3o),e(E2,Oj),e(Oj,g3o),e(E2,h3o),e(z,p3o),e(z,C2),e(C2,Xde),e(Xde,_3o),e(C2,u3o),e(C2,Vj),e(Vj,b3o),e(C2,v3o),e(z,F3o),e(z,w2),e(w2,zde),e(zde,T3o),e(w2,M3o),e(w2,Xj),e(Xj,E3o),e(w2,C3o),e(z,w3o),e(z,A2),e(A2,Wde),e(Wde,A3o),e(A2,y3o),e(A2,zj),e(zj,L3o),e(A2,x3o),e(z,$3o),e(z,y2),e(y2,Qde),e(Qde,k3o),e(y2,S3o),e(y2,Wj),e(Wj,R3o),e(y2,P3o),e(Ke,B3o),e(Ke,L2),e(L2,I3o),e(L2,Hde),e(Hde,q3o),e(L2,N3o),e(L2,Ude),e(Ude,j3o),e(Ke,D3o),M(x2,Ke,null),b(f,Yqe,u),b(f,Pi,u),e(Pi,$2),e($2,Jde),M(dA,Jde,null),e(Pi,G3o),e(Pi,Yde),e(Yde,O3o),b(f,Kqe,u),b(f,ko,u),M(cA,ko,null),e(ko,V3o),e(ko,Bi),e(Bi,X3o),e(Bi,Qj),e(Qj,z3o),e(Bi,W3o),e(Bi,Hj),e(Hj,Q3o),e(Bi,H3o),e(ko,U3o),e(ko,fA),e(fA,J3o),e(fA,Kde),e(Kde,Y3o),e(fA,K3o),e(ko,Z3o),e(ko,st),M(mA,st,null),e(st,ewo),e(st,Zde),e(Zde,owo),e(st,rwo),e(st,Ii),e(Ii,two),e(Ii,ece),e(ece,awo),e(Ii,nwo),e(Ii,Uj),e(Uj,swo),e(Ii,lwo),e(st,iwo),M(k2,st,null),e(ko,dwo),e(ko,Ze),M(gA,Ze,null),e(Ze,cwo),e(Ze,oce),e(oce,fwo),e(Ze,mwo),e(Ze,ka),e(ka,gwo),e(ka,rce),e(rce,hwo),e(ka,pwo),e(ka,tce),e(tce,_wo),e(ka,uwo),e(ka,ace),e(ace,bwo),e(ka,vwo),e(Ze,Fwo),e(Ze,W),e(W,S2),e(S2,nce),e(nce,Two),e(S2,Mwo),e(S2,Jj),e(Jj,Ewo),e(S2,Cwo),e(W,wwo),e(W,R2),e(R2,sce),e(sce,Awo),e(R2,ywo),e(R2,Yj),e(Yj,Lwo),e(R2,xwo),e(W,$wo),e(W,P2),e(P2,lce),e(lce,kwo),e(P2,Swo),e(P2,Kj),e(Kj,Rwo),e(P2,Pwo),e(W,Bwo),e(W,B2),e(B2,ice),e(ice,Iwo),e(B2,qwo),e(B2,Zj),e(Zj,Nwo),e(B2,jwo),e(W,Dwo),e(W,I2),e(I2,dce),e(dce,Gwo),e(I2,Owo),e(I2,eD),e(eD,Vwo),e(I2,Xwo),e(W,zwo),e(W,q2),e(q2,cce),e(cce,Wwo),e(q2,Qwo),e(q2,oD),e(oD,Hwo),e(q2,Uwo),e(W,Jwo),e(W,N2),e(N2,fce),e(fce,Ywo),e(N2,Kwo),e(N2,rD),e(rD,Zwo),e(N2,e0o),e(W,o0o),e(W,j2),e(j2,mce),e(mce,r0o),e(j2,t0o),e(j2,tD),e(tD,a0o),e(j2,n0o),e(W,s0o),e(W,D2),e(D2,gce),e(gce,l0o),e(D2,i0o),e(D2,aD),e(aD,d0o),e(D2,c0o),e(W,f0o),e(W,G2),e(G2,hce),e(hce,m0o),e(G2,g0o),e(G2,nD),e(nD,h0o),e(G2,p0o),e(W,_0o),e(W,O2),e(O2,pce),e(pce,u0o),e(O2,b0o),e(O2,sD),e(sD,v0o),e(O2,F0o),e(W,T0o),e(W,V2),e(V2,_ce),e(_ce,M0o),e(V2,E0o),e(V2,lD),e(lD,C0o),e(V2,w0o),e(W,A0o),e(W,X2),e(X2,uce),e(uce,y0o),e(X2,L0o),e(X2,iD),e(iD,x0o),e(X2,$0o),e(W,k0o),e(W,z2),e(z2,bce),e(bce,S0o),e(z2,R0o),e(z2,dD),e(dD,P0o),e(z2,B0o),e(W,I0o),e(W,W2),e(W2,vce),e(vce,q0o),e(W2,N0o),e(W2,cD),e(cD,j0o),e(W2,D0o),e(W,G0o),e(W,Q2),e(Q2,Fce),e(Fce,O0o),e(Q2,V0o),e(Q2,fD),e(fD,X0o),e(Q2,z0o),e(W,W0o),e(W,H2),e(H2,Tce),e(Tce,Q0o),e(H2,H0o),e(H2,mD),e(mD,U0o),e(H2,J0o),e(W,Y0o),e(W,U2),e(U2,Mce),e(Mce,K0o),e(U2,Z0o),e(U2,gD),e(gD,eAo),e(U2,oAo),e(W,rAo),e(W,J2),e(J2,Ece),e(Ece,tAo),e(J2,aAo),e(J2,hD),e(hD,nAo),e(J2,sAo),e(W,lAo),e(W,Y2),e(Y2,Cce),e(Cce,iAo),e(Y2,dAo),e(Y2,pD),e(pD,cAo),e(Y2,fAo),e(W,mAo),e(W,K2),e(K2,wce),e(wce,gAo),e(K2,hAo),e(K2,_D),e(_D,pAo),e(K2,_Ao),e(W,uAo),e(W,Z2),e(Z2,Ace),e(Ace,bAo),e(Z2,vAo),e(Z2,uD),e(uD,FAo),e(Z2,TAo),e(W,MAo),e(W,e1),e(e1,yce),e(yce,EAo),e(e1,CAo),e(e1,bD),e(bD,wAo),e(e1,AAo),e(W,yAo),e(W,o1),e(o1,Lce),e(Lce,LAo),e(o1,xAo),e(o1,vD),e(vD,$Ao),e(o1,kAo),e(W,SAo),e(W,r1),e(r1,xce),e(xce,RAo),e(r1,PAo),e(r1,FD),e(FD,BAo),e(r1,IAo),e(W,qAo),e(W,t1),e(t1,$ce),e($ce,NAo),e(t1,jAo),e(t1,TD),e(TD,DAo),e(t1,GAo),e(W,OAo),e(W,a1),e(a1,kce),e(kce,VAo),e(a1,XAo),e(a1,MD),e(MD,zAo),e(a1,WAo),e(W,QAo),e(W,n1),e(n1,Sce),e(Sce,HAo),e(n1,UAo),e(n1,ED),e(ED,JAo),e(n1,YAo),e(W,KAo),e(W,s1),e(s1,Rce),e(Rce,ZAo),e(s1,eyo),e(s1,CD),e(CD,oyo),e(s1,ryo),e(W,tyo),e(W,l1),e(l1,Pce),e(Pce,ayo),e(l1,nyo),e(l1,wD),e(wD,syo),e(l1,lyo),e(W,iyo),e(W,i1),e(i1,Bce),e(Bce,dyo),e(i1,cyo),e(i1,Ice),e(Ice,fyo),e(i1,myo),e(W,gyo),e(W,d1),e(d1,qce),e(qce,hyo),e(d1,pyo),e(d1,AD),e(AD,_yo),e(d1,uyo),e(W,byo),e(W,c1),e(c1,Nce),e(Nce,vyo),e(c1,Fyo),e(c1,yD),e(yD,Tyo),e(c1,Myo),e(W,Eyo),e(W,f1),e(f1,jce),e(jce,Cyo),e(f1,wyo),e(f1,LD),e(LD,Ayo),e(f1,yyo),e(W,Lyo),e(W,m1),e(m1,Dce),e(Dce,xyo),e(m1,$yo),e(m1,xD),e(xD,kyo),e(m1,Syo),e(Ze,Ryo),e(Ze,g1),e(g1,Pyo),e(g1,Gce),e(Gce,Byo),e(g1,Iyo),e(g1,Oce),e(Oce,qyo),e(Ze,Nyo),M(h1,Ze,null),b(f,Zqe,u),b(f,qi,u),e(qi,p1),e(p1,Vce),M(hA,Vce,null),e(qi,jyo),e(qi,Xce),e(Xce,Dyo),b(f,eNe,u),b(f,So,u),M(pA,So,null),e(So,Gyo),e(So,Ni),e(Ni,Oyo),e(Ni,$D),e($D,Vyo),e(Ni,Xyo),e(Ni,kD),e(kD,zyo),e(Ni,Wyo),e(So,Qyo),e(So,_A),e(_A,Hyo),e(_A,zce),e(zce,Uyo),e(_A,Jyo),e(So,Yyo),e(So,lt),M(uA,lt,null),e(lt,Kyo),e(lt,Wce),e(Wce,Zyo),e(lt,eLo),e(lt,ji),e(ji,oLo),e(ji,Qce),e(Qce,rLo),e(ji,tLo),e(ji,SD),e(SD,aLo),e(ji,nLo),e(lt,sLo),M(_1,lt,null),e(So,lLo),e(So,eo),M(bA,eo,null),e(eo,iLo),e(eo,Hce),e(Hce,dLo),e(eo,cLo),e(eo,Sa),e(Sa,fLo),e(Sa,Uce),e(Uce,mLo),e(Sa,gLo),e(Sa,Jce),e(Jce,hLo),e(Sa,pLo),e(Sa,Yce),e(Yce,_Lo),e(Sa,uLo),e(eo,bLo),e(eo,he),e(he,u1),e(u1,Kce),e(Kce,vLo),e(u1,FLo),e(u1,RD),e(RD,TLo),e(u1,MLo),e(he,ELo),e(he,b1),e(b1,Zce),e(Zce,CLo),e(b1,wLo),e(b1,PD),e(PD,ALo),e(b1,yLo),e(he,LLo),e(he,v1),e(v1,efe),e(efe,xLo),e(v1,$Lo),e(v1,BD),e(BD,kLo),e(v1,SLo),e(he,RLo),e(he,F1),e(F1,ofe),e(ofe,PLo),e(F1,BLo),e(F1,ID),e(ID,ILo),e(F1,qLo),e(he,NLo),e(he,T1),e(T1,rfe),e(rfe,jLo),e(T1,DLo),e(T1,qD),e(qD,GLo),e(T1,OLo),e(he,VLo),e(he,M1),e(M1,tfe),e(tfe,XLo),e(M1,zLo),e(M1,ND),e(ND,WLo),e(M1,QLo),e(he,HLo),e(he,E1),e(E1,afe),e(afe,ULo),e(E1,JLo),e(E1,jD),e(jD,YLo),e(E1,KLo),e(he,ZLo),e(he,C1),e(C1,nfe),e(nfe,e8o),e(C1,o8o),e(C1,DD),e(DD,r8o),e(C1,t8o),e(he,a8o),e(he,w1),e(w1,sfe),e(sfe,n8o),e(w1,s8o),e(w1,GD),e(GD,l8o),e(w1,i8o),e(he,d8o),e(he,A1),e(A1,lfe),e(lfe,c8o),e(A1,f8o),e(A1,OD),e(OD,m8o),e(A1,g8o),e(he,h8o),e(he,y1),e(y1,ife),e(ife,p8o),e(y1,_8o),e(y1,VD),e(VD,u8o),e(y1,b8o),e(he,v8o),e(he,L1),e(L1,dfe),e(dfe,F8o),e(L1,T8o),e(L1,XD),e(XD,M8o),e(L1,E8o),e(he,C8o),e(he,x1),e(x1,cfe),e(cfe,w8o),e(x1,A8o),e(x1,zD),e(zD,y8o),e(x1,L8o),e(he,x8o),e(he,$1),e($1,ffe),e(ffe,$8o),e($1,k8o),e($1,WD),e(WD,S8o),e($1,R8o),e(he,P8o),e(he,k1),e(k1,mfe),e(mfe,B8o),e(k1,I8o),e(k1,QD),e(QD,q8o),e(k1,N8o),e(he,j8o),e(he,S1),e(S1,gfe),e(gfe,D8o),e(S1,G8o),e(S1,HD),e(HD,O8o),e(S1,V8o),e(he,X8o),e(he,R1),e(R1,hfe),e(hfe,z8o),e(R1,W8o),e(R1,UD),e(UD,Q8o),e(R1,H8o),e(eo,U8o),e(eo,P1),e(P1,J8o),e(P1,pfe),e(pfe,Y8o),e(P1,K8o),e(P1,_fe),e(_fe,Z8o),e(eo,exo),M(B1,eo,null),b(f,oNe,u),b(f,Di,u),e(Di,I1),e(I1,ufe),M(vA,ufe,null),e(Di,oxo),e(Di,bfe),e(bfe,rxo),b(f,rNe,u),b(f,Ro,u),M(FA,Ro,null),e(Ro,txo),e(Ro,Gi),e(Gi,axo),e(Gi,JD),e(JD,nxo),e(Gi,sxo),e(Gi,YD),e(YD,lxo),e(Gi,ixo),e(Ro,dxo),e(Ro,TA),e(TA,cxo),e(TA,vfe),e(vfe,fxo),e(TA,mxo),e(Ro,gxo),e(Ro,it),M(MA,it,null),e(it,hxo),e(it,Ffe),e(Ffe,pxo),e(it,_xo),e(it,Oi),e(Oi,uxo),e(Oi,Tfe),e(Tfe,bxo),e(Oi,vxo),e(Oi,KD),e(KD,Fxo),e(Oi,Txo),e(it,Mxo),M(q1,it,null),e(Ro,Exo),e(Ro,oo),M(EA,oo,null),e(oo,Cxo),e(oo,Mfe),e(Mfe,wxo),e(oo,Axo),e(oo,Ra),e(Ra,yxo),e(Ra,Efe),e(Efe,Lxo),e(Ra,xxo),e(Ra,Cfe),e(Cfe,$xo),e(Ra,kxo),e(Ra,wfe),e(wfe,Sxo),e(Ra,Rxo),e(oo,Pxo),e(oo,q),e(q,N1),e(N1,Afe),e(Afe,Bxo),e(N1,Ixo),e(N1,ZD),e(ZD,qxo),e(N1,Nxo),e(q,jxo),e(q,j1),e(j1,yfe),e(yfe,Dxo),e(j1,Gxo),e(j1,eG),e(eG,Oxo),e(j1,Vxo),e(q,Xxo),e(q,D1),e(D1,Lfe),e(Lfe,zxo),e(D1,Wxo),e(D1,oG),e(oG,Qxo),e(D1,Hxo),e(q,Uxo),e(q,G1),e(G1,xfe),e(xfe,Jxo),e(G1,Yxo),e(G1,rG),e(rG,Kxo),e(G1,Zxo),e(q,e$o),e(q,O1),e(O1,$fe),e($fe,o$o),e(O1,r$o),e(O1,tG),e(tG,t$o),e(O1,a$o),e(q,n$o),e(q,V1),e(V1,kfe),e(kfe,s$o),e(V1,l$o),e(V1,aG),e(aG,i$o),e(V1,d$o),e(q,c$o),e(q,X1),e(X1,Sfe),e(Sfe,f$o),e(X1,m$o),e(X1,nG),e(nG,g$o),e(X1,h$o),e(q,p$o),e(q,z1),e(z1,Rfe),e(Rfe,_$o),e(z1,u$o),e(z1,sG),e(sG,b$o),e(z1,v$o),e(q,F$o),e(q,W1),e(W1,Pfe),e(Pfe,T$o),e(W1,M$o),e(W1,lG),e(lG,E$o),e(W1,C$o),e(q,w$o),e(q,Q1),e(Q1,Bfe),e(Bfe,A$o),e(Q1,y$o),e(Q1,iG),e(iG,L$o),e(Q1,x$o),e(q,$$o),e(q,H1),e(H1,Ife),e(Ife,k$o),e(H1,S$o),e(H1,dG),e(dG,R$o),e(H1,P$o),e(q,B$o),e(q,U1),e(U1,qfe),e(qfe,I$o),e(U1,q$o),e(U1,cG),e(cG,N$o),e(U1,j$o),e(q,D$o),e(q,J1),e(J1,Nfe),e(Nfe,G$o),e(J1,O$o),e(J1,fG),e(fG,V$o),e(J1,X$o),e(q,z$o),e(q,Y1),e(Y1,jfe),e(jfe,W$o),e(Y1,Q$o),e(Y1,mG),e(mG,H$o),e(Y1,U$o),e(q,J$o),e(q,K1),e(K1,Dfe),e(Dfe,Y$o),e(K1,K$o),e(K1,gG),e(gG,Z$o),e(K1,eko),e(q,oko),e(q,Z1),e(Z1,Gfe),e(Gfe,rko),e(Z1,tko),e(Z1,hG),e(hG,ako),e(Z1,nko),e(q,sko),e(q,eb),e(eb,Ofe),e(Ofe,lko),e(eb,iko),e(eb,pG),e(pG,dko),e(eb,cko),e(q,fko),e(q,ob),e(ob,Vfe),e(Vfe,mko),e(ob,gko),e(ob,_G),e(_G,hko),e(ob,pko),e(q,_ko),e(q,rb),e(rb,Xfe),e(Xfe,uko),e(rb,bko),e(rb,uG),e(uG,vko),e(rb,Fko),e(q,Tko),e(q,tb),e(tb,zfe),e(zfe,Mko),e(tb,Eko),e(tb,bG),e(bG,Cko),e(tb,wko),e(q,Ako),e(q,ab),e(ab,Wfe),e(Wfe,yko),e(ab,Lko),e(ab,vG),e(vG,xko),e(ab,$ko),e(q,kko),e(q,nb),e(nb,Qfe),e(Qfe,Sko),e(nb,Rko),e(nb,FG),e(FG,Pko),e(nb,Bko),e(q,Iko),e(q,sb),e(sb,Hfe),e(Hfe,qko),e(sb,Nko),e(sb,TG),e(TG,jko),e(sb,Dko),e(q,Gko),e(q,lb),e(lb,Ufe),e(Ufe,Oko),e(lb,Vko),e(lb,MG),e(MG,Xko),e(lb,zko),e(q,Wko),e(q,ib),e(ib,Jfe),e(Jfe,Qko),e(ib,Hko),e(ib,EG),e(EG,Uko),e(ib,Jko),e(q,Yko),e(q,db),e(db,Yfe),e(Yfe,Kko),e(db,Zko),e(db,CG),e(CG,eSo),e(db,oSo),e(q,rSo),e(q,cb),e(cb,Kfe),e(Kfe,tSo),e(cb,aSo),e(cb,wG),e(wG,nSo),e(cb,sSo),e(q,lSo),e(q,fb),e(fb,Zfe),e(Zfe,iSo),e(fb,dSo),e(fb,AG),e(AG,cSo),e(fb,fSo),e(q,mSo),e(q,mb),e(mb,eme),e(eme,gSo),e(mb,hSo),e(mb,yG),e(yG,pSo),e(mb,_So),e(q,uSo),e(q,gb),e(gb,ome),e(ome,bSo),e(gb,vSo),e(gb,LG),e(LG,FSo),e(gb,TSo),e(q,MSo),e(q,hb),e(hb,rme),e(rme,ESo),e(hb,CSo),e(hb,xG),e(xG,wSo),e(hb,ASo),e(q,ySo),e(q,pb),e(pb,tme),e(tme,LSo),e(pb,xSo),e(pb,$G),e($G,$So),e(pb,kSo),e(q,SSo),e(q,_b),e(_b,ame),e(ame,RSo),e(_b,PSo),e(_b,kG),e(kG,BSo),e(_b,ISo),e(q,qSo),e(q,ub),e(ub,nme),e(nme,NSo),e(ub,jSo),e(ub,SG),e(SG,DSo),e(ub,GSo),e(q,OSo),e(q,bb),e(bb,sme),e(sme,VSo),e(bb,XSo),e(bb,RG),e(RG,zSo),e(bb,WSo),e(q,QSo),e(q,vb),e(vb,lme),e(lme,HSo),e(vb,USo),e(vb,PG),e(PG,JSo),e(vb,YSo),e(q,KSo),e(q,Fb),e(Fb,ime),e(ime,ZSo),e(Fb,eRo),e(Fb,BG),e(BG,oRo),e(Fb,rRo),e(q,tRo),e(q,Tb),e(Tb,dme),e(dme,aRo),e(Tb,nRo),e(Tb,IG),e(IG,sRo),e(Tb,lRo),e(q,iRo),e(q,Mb),e(Mb,cme),e(cme,dRo),e(Mb,cRo),e(Mb,qG),e(qG,fRo),e(Mb,mRo),e(q,gRo),e(q,Eb),e(Eb,fme),e(fme,hRo),e(Eb,pRo),e(Eb,NG),e(NG,_Ro),e(Eb,uRo),e(q,bRo),e(q,Cb),e(Cb,mme),e(mme,vRo),e(Cb,FRo),e(Cb,jG),e(jG,TRo),e(Cb,MRo),e(q,ERo),e(q,wb),e(wb,gme),e(gme,CRo),e(wb,wRo),e(wb,DG),e(DG,ARo),e(wb,yRo),e(q,LRo),e(q,Ab),e(Ab,hme),e(hme,xRo),e(Ab,$Ro),e(Ab,GG),e(GG,kRo),e(Ab,SRo),e(q,RRo),e(q,yb),e(yb,pme),e(pme,PRo),e(yb,BRo),e(yb,OG),e(OG,IRo),e(yb,qRo),e(q,NRo),e(q,Lb),e(Lb,_me),e(_me,jRo),e(Lb,DRo),e(Lb,VG),e(VG,GRo),e(Lb,ORo),e(q,VRo),e(q,xb),e(xb,ume),e(ume,XRo),e(xb,zRo),e(xb,XG),e(XG,WRo),e(xb,QRo),e(oo,HRo),e(oo,$b),e($b,URo),e($b,bme),e(bme,JRo),e($b,YRo),e($b,vme),e(vme,KRo),e(oo,ZRo),M(kb,oo,null),b(f,tNe,u),b(f,Vi,u),e(Vi,Sb),e(Sb,Fme),M(CA,Fme,null),e(Vi,ePo),e(Vi,Tme),e(Tme,oPo),b(f,aNe,u),b(f,Po,u),M(wA,Po,null),e(Po,rPo),e(Po,Xi),e(Xi,tPo),e(Xi,zG),e(zG,aPo),e(Xi,nPo),e(Xi,WG),e(WG,sPo),e(Xi,lPo),e(Po,iPo),e(Po,AA),e(AA,dPo),e(AA,Mme),e(Mme,cPo),e(AA,fPo),e(Po,mPo),e(Po,dt),M(yA,dt,null),e(dt,gPo),e(dt,Eme),e(Eme,hPo),e(dt,pPo),e(dt,zi),e(zi,_Po),e(zi,Cme),e(Cme,uPo),e(zi,bPo),e(zi,QG),e(QG,vPo),e(zi,FPo),e(dt,TPo),M(Rb,dt,null),e(Po,MPo),e(Po,ro),M(LA,ro,null),e(ro,EPo),e(ro,wme),e(wme,CPo),e(ro,wPo),e(ro,Pa),e(Pa,APo),e(Pa,Ame),e(Ame,yPo),e(Pa,LPo),e(Pa,yme),e(yme,xPo),e(Pa,$Po),e(Pa,Lme),e(Lme,kPo),e(Pa,SPo),e(ro,RPo),e(ro,Y),e(Y,Pb),e(Pb,xme),e(xme,PPo),e(Pb,BPo),e(Pb,HG),e(HG,IPo),e(Pb,qPo),e(Y,NPo),e(Y,Bb),e(Bb,$me),e($me,jPo),e(Bb,DPo),e(Bb,UG),e(UG,GPo),e(Bb,OPo),e(Y,VPo),e(Y,Ib),e(Ib,kme),e(kme,XPo),e(Ib,zPo),e(Ib,JG),e(JG,WPo),e(Ib,QPo),e(Y,HPo),e(Y,qb),e(qb,Sme),e(Sme,UPo),e(qb,JPo),e(qb,YG),e(YG,YPo),e(qb,KPo),e(Y,ZPo),e(Y,Nb),e(Nb,Rme),e(Rme,eBo),e(Nb,oBo),e(Nb,KG),e(KG,rBo),e(Nb,tBo),e(Y,aBo),e(Y,jb),e(jb,Pme),e(Pme,nBo),e(jb,sBo),e(jb,ZG),e(ZG,lBo),e(jb,iBo),e(Y,dBo),e(Y,Db),e(Db,Bme),e(Bme,cBo),e(Db,fBo),e(Db,eO),e(eO,mBo),e(Db,gBo),e(Y,hBo),e(Y,Gb),e(Gb,Ime),e(Ime,pBo),e(Gb,_Bo),e(Gb,oO),e(oO,uBo),e(Gb,bBo),e(Y,vBo),e(Y,Ob),e(Ob,qme),e(qme,FBo),e(Ob,TBo),e(Ob,rO),e(rO,MBo),e(Ob,EBo),e(Y,CBo),e(Y,Vb),e(Vb,Nme),e(Nme,wBo),e(Vb,ABo),e(Vb,tO),e(tO,yBo),e(Vb,LBo),e(Y,xBo),e(Y,Xb),e(Xb,jme),e(jme,$Bo),e(Xb,kBo),e(Xb,aO),e(aO,SBo),e(Xb,RBo),e(Y,PBo),e(Y,zb),e(zb,Dme),e(Dme,BBo),e(zb,IBo),e(zb,nO),e(nO,qBo),e(zb,NBo),e(Y,jBo),e(Y,Wb),e(Wb,Gme),e(Gme,DBo),e(Wb,GBo),e(Wb,sO),e(sO,OBo),e(Wb,VBo),e(Y,XBo),e(Y,Qb),e(Qb,Ome),e(Ome,zBo),e(Qb,WBo),e(Qb,lO),e(lO,QBo),e(Qb,HBo),e(Y,UBo),e(Y,Hb),e(Hb,Vme),e(Vme,JBo),e(Hb,YBo),e(Hb,iO),e(iO,KBo),e(Hb,ZBo),e(Y,eIo),e(Y,Ub),e(Ub,Xme),e(Xme,oIo),e(Ub,rIo),e(Ub,dO),e(dO,tIo),e(Ub,aIo),e(Y,nIo),e(Y,Jb),e(Jb,zme),e(zme,sIo),e(Jb,lIo),e(Jb,cO),e(cO,iIo),e(Jb,dIo),e(Y,cIo),e(Y,Yb),e(Yb,Wme),e(Wme,fIo),e(Yb,mIo),e(Yb,fO),e(fO,gIo),e(Yb,hIo),e(Y,pIo),e(Y,Kb),e(Kb,Qme),e(Qme,_Io),e(Kb,uIo),e(Kb,mO),e(mO,bIo),e(Kb,vIo),e(Y,FIo),e(Y,Zb),e(Zb,Hme),e(Hme,TIo),e(Zb,MIo),e(Zb,gO),e(gO,EIo),e(Zb,CIo),e(Y,wIo),e(Y,ev),e(ev,Ume),e(Ume,AIo),e(ev,yIo),e(ev,hO),e(hO,LIo),e(ev,xIo),e(Y,$Io),e(Y,ov),e(ov,Jme),e(Jme,kIo),e(ov,SIo),e(ov,pO),e(pO,RIo),e(ov,PIo),e(Y,BIo),e(Y,rv),e(rv,Yme),e(Yme,IIo),e(rv,qIo),e(rv,_O),e(_O,NIo),e(rv,jIo),e(Y,DIo),e(Y,tv),e(tv,Kme),e(Kme,GIo),e(tv,OIo),e(tv,uO),e(uO,VIo),e(tv,XIo),e(Y,zIo),e(Y,av),e(av,Zme),e(Zme,WIo),e(av,QIo),e(av,bO),e(bO,HIo),e(av,UIo),e(Y,JIo),e(Y,nv),e(nv,ege),e(ege,YIo),e(nv,KIo),e(nv,vO),e(vO,ZIo),e(nv,eqo),e(Y,oqo),e(Y,sv),e(sv,oge),e(oge,rqo),e(sv,tqo),e(sv,FO),e(FO,aqo),e(sv,nqo),e(Y,sqo),e(Y,lv),e(lv,rge),e(rge,lqo),e(lv,iqo),e(lv,TO),e(TO,dqo),e(lv,cqo),e(Y,fqo),e(Y,iv),e(iv,tge),e(tge,mqo),e(iv,gqo),e(iv,MO),e(MO,hqo),e(iv,pqo),e(ro,_qo),e(ro,dv),e(dv,uqo),e(dv,age),e(age,bqo),e(dv,vqo),e(dv,nge),e(nge,Fqo),e(ro,Tqo),M(cv,ro,null),b(f,nNe,u),b(f,Wi,u),e(Wi,fv),e(fv,sge),M(xA,sge,null),e(Wi,Mqo),e(Wi,lge),e(lge,Eqo),b(f,sNe,u),b(f,Bo,u),M($A,Bo,null),e(Bo,Cqo),e(Bo,Qi),e(Qi,wqo),e(Qi,EO),e(EO,Aqo),e(Qi,yqo),e(Qi,CO),e(CO,Lqo),e(Qi,xqo),e(Bo,$qo),e(Bo,kA),e(kA,kqo),e(kA,ige),e(ige,Sqo),e(kA,Rqo),e(Bo,Pqo),e(Bo,ct),M(SA,ct,null),e(ct,Bqo),e(ct,dge),e(dge,Iqo),e(ct,qqo),e(ct,Hi),e(Hi,Nqo),e(Hi,cge),e(cge,jqo),e(Hi,Dqo),e(Hi,wO),e(wO,Gqo),e(Hi,Oqo),e(ct,Vqo),M(mv,ct,null),e(Bo,Xqo),e(Bo,to),M(RA,to,null),e(to,zqo),e(to,fge),e(fge,Wqo),e(to,Qqo),e(to,Ba),e(Ba,Hqo),e(Ba,mge),e(mge,Uqo),e(Ba,Jqo),e(Ba,gge),e(gge,Yqo),e(Ba,Kqo),e(Ba,hge),e(hge,Zqo),e(Ba,eNo),e(to,oNo),e(to,Yr),e(Yr,gv),e(gv,pge),e(pge,rNo),e(gv,tNo),e(gv,AO),e(AO,aNo),e(gv,nNo),e(Yr,sNo),e(Yr,hv),e(hv,_ge),e(_ge,lNo),e(hv,iNo),e(hv,yO),e(yO,dNo),e(hv,cNo),e(Yr,fNo),e(Yr,pv),e(pv,uge),e(uge,mNo),e(pv,gNo),e(pv,LO),e(LO,hNo),e(pv,pNo),e(Yr,_No),e(Yr,_v),e(_v,bge),e(bge,uNo),e(_v,bNo),e(_v,xO),e(xO,vNo),e(_v,FNo),e(Yr,TNo),e(Yr,uv),e(uv,vge),e(vge,MNo),e(uv,ENo),e(uv,$O),e($O,CNo),e(uv,wNo),e(to,ANo),e(to,bv),e(bv,yNo),e(bv,Fge),e(Fge,LNo),e(bv,xNo),e(bv,Tge),e(Tge,$No),e(to,kNo),M(vv,to,null),b(f,lNe,u),b(f,Ui,u),e(Ui,Fv),e(Fv,Mge),M(PA,Mge,null),e(Ui,SNo),e(Ui,Ege),e(Ege,RNo),b(f,iNe,u),b(f,Io,u),M(BA,Io,null),e(Io,PNo),e(Io,Ji),e(Ji,BNo),e(Ji,kO),e(kO,INo),e(Ji,qNo),e(Ji,SO),e(SO,NNo),e(Ji,jNo),e(Io,DNo),e(Io,IA),e(IA,GNo),e(IA,Cge),e(Cge,ONo),e(IA,VNo),e(Io,XNo),e(Io,ft),M(qA,ft,null),e(ft,zNo),e(ft,wge),e(wge,WNo),e(ft,QNo),e(ft,Yi),e(Yi,HNo),e(Yi,Age),e(Age,UNo),e(Yi,JNo),e(Yi,RO),e(RO,YNo),e(Yi,KNo),e(ft,ZNo),M(Tv,ft,null),e(Io,ejo),e(Io,ao),M(NA,ao,null),e(ao,ojo),e(ao,yge),e(yge,rjo),e(ao,tjo),e(ao,Ia),e(Ia,ajo),e(Ia,Lge),e(Lge,njo),e(Ia,sjo),e(Ia,xge),e(xge,ljo),e(Ia,ijo),e(Ia,$ge),e($ge,djo),e(Ia,cjo),e(ao,fjo),e(ao,U),e(U,Mv),e(Mv,kge),e(kge,mjo),e(Mv,gjo),e(Mv,PO),e(PO,hjo),e(Mv,pjo),e(U,_jo),e(U,Ev),e(Ev,Sge),e(Sge,ujo),e(Ev,bjo),e(Ev,BO),e(BO,vjo),e(Ev,Fjo),e(U,Tjo),e(U,Cv),e(Cv,Rge),e(Rge,Mjo),e(Cv,Ejo),e(Cv,IO),e(IO,Cjo),e(Cv,wjo),e(U,Ajo),e(U,wv),e(wv,Pge),e(Pge,yjo),e(wv,Ljo),e(wv,qO),e(qO,xjo),e(wv,$jo),e(U,kjo),e(U,Av),e(Av,Bge),e(Bge,Sjo),e(Av,Rjo),e(Av,NO),e(NO,Pjo),e(Av,Bjo),e(U,Ijo),e(U,yv),e(yv,Ige),e(Ige,qjo),e(yv,Njo),e(yv,jO),e(jO,jjo),e(yv,Djo),e(U,Gjo),e(U,Lv),e(Lv,qge),e(qge,Ojo),e(Lv,Vjo),e(Lv,DO),e(DO,Xjo),e(Lv,zjo),e(U,Wjo),e(U,xv),e(xv,Nge),e(Nge,Qjo),e(xv,Hjo),e(xv,GO),e(GO,Ujo),e(xv,Jjo),e(U,Yjo),e(U,$v),e($v,jge),e(jge,Kjo),e($v,Zjo),e($v,OO),e(OO,eDo),e($v,oDo),e(U,rDo),e(U,kv),e(kv,Dge),e(Dge,tDo),e(kv,aDo),e(kv,VO),e(VO,nDo),e(kv,sDo),e(U,lDo),e(U,Sv),e(Sv,Gge),e(Gge,iDo),e(Sv,dDo),e(Sv,XO),e(XO,cDo),e(Sv,fDo),e(U,mDo),e(U,Rv),e(Rv,Oge),e(Oge,gDo),e(Rv,hDo),e(Rv,zO),e(zO,pDo),e(Rv,_Do),e(U,uDo),e(U,Pv),e(Pv,Vge),e(Vge,bDo),e(Pv,vDo),e(Pv,WO),e(WO,FDo),e(Pv,TDo),e(U,MDo),e(U,Bv),e(Bv,Xge),e(Xge,EDo),e(Bv,CDo),e(Bv,QO),e(QO,wDo),e(Bv,ADo),e(U,yDo),e(U,Iv),e(Iv,zge),e(zge,LDo),e(Iv,xDo),e(Iv,HO),e(HO,$Do),e(Iv,kDo),e(U,SDo),e(U,qv),e(qv,Wge),e(Wge,RDo),e(qv,PDo),e(qv,UO),e(UO,BDo),e(qv,IDo),e(U,qDo),e(U,Nv),e(Nv,Qge),e(Qge,NDo),e(Nv,jDo),e(Nv,JO),e(JO,DDo),e(Nv,GDo),e(U,ODo),e(U,jv),e(jv,Hge),e(Hge,VDo),e(jv,XDo),e(jv,YO),e(YO,zDo),e(jv,WDo),e(U,QDo),e(U,Dv),e(Dv,Uge),e(Uge,HDo),e(Dv,UDo),e(Dv,KO),e(KO,JDo),e(Dv,YDo),e(U,KDo),e(U,Gv),e(Gv,Jge),e(Jge,ZDo),e(Gv,eGo),e(Gv,ZO),e(ZO,oGo),e(Gv,rGo),e(U,tGo),e(U,Ov),e(Ov,Yge),e(Yge,aGo),e(Ov,nGo),e(Ov,eV),e(eV,sGo),e(Ov,lGo),e(U,iGo),e(U,Vv),e(Vv,Kge),e(Kge,dGo),e(Vv,cGo),e(Vv,oV),e(oV,fGo),e(Vv,mGo),e(U,gGo),e(U,Xv),e(Xv,Zge),e(Zge,hGo),e(Xv,pGo),e(Xv,rV),e(rV,_Go),e(Xv,uGo),e(U,bGo),e(U,zv),e(zv,ehe),e(ehe,vGo),e(zv,FGo),e(zv,tV),e(tV,TGo),e(zv,MGo),e(U,EGo),e(U,Wv),e(Wv,ohe),e(ohe,CGo),e(Wv,wGo),e(Wv,aV),e(aV,AGo),e(Wv,yGo),e(U,LGo),e(U,Qv),e(Qv,rhe),e(rhe,xGo),e(Qv,$Go),e(Qv,nV),e(nV,kGo),e(Qv,SGo),e(U,RGo),e(U,Hv),e(Hv,the),e(the,PGo),e(Hv,BGo),e(Hv,sV),e(sV,IGo),e(Hv,qGo),e(U,NGo),e(U,Uv),e(Uv,ahe),e(ahe,jGo),e(Uv,DGo),e(Uv,lV),e(lV,GGo),e(Uv,OGo),e(U,VGo),e(U,Jv),e(Jv,nhe),e(nhe,XGo),e(Jv,zGo),e(Jv,iV),e(iV,WGo),e(Jv,QGo),e(U,HGo),e(U,Yv),e(Yv,she),e(she,UGo),e(Yv,JGo),e(Yv,dV),e(dV,YGo),e(Yv,KGo),e(U,ZGo),e(U,Kv),e(Kv,lhe),e(lhe,eOo),e(Kv,oOo),e(Kv,cV),e(cV,rOo),e(Kv,tOo),e(U,aOo),e(U,Zv),e(Zv,ihe),e(ihe,nOo),e(Zv,sOo),e(Zv,fV),e(fV,lOo),e(Zv,iOo),e(U,dOo),e(U,eF),e(eF,dhe),e(dhe,cOo),e(eF,fOo),e(eF,mV),e(mV,mOo),e(eF,gOo),e(ao,hOo),e(ao,oF),e(oF,pOo),e(oF,che),e(che,_Oo),e(oF,uOo),e(oF,fhe),e(fhe,bOo),e(ao,vOo),M(rF,ao,null),b(f,dNe,u),b(f,Ki,u),e(Ki,tF),e(tF,mhe),M(jA,mhe,null),e(Ki,FOo),e(Ki,ghe),e(ghe,TOo),b(f,cNe,u),b(f,qo,u),M(DA,qo,null),e(qo,MOo),e(qo,Zi),e(Zi,EOo),e(Zi,gV),e(gV,COo),e(Zi,wOo),e(Zi,hV),e(hV,AOo),e(Zi,yOo),e(qo,LOo),e(qo,GA),e(GA,xOo),e(GA,hhe),e(hhe,$Oo),e(GA,kOo),e(qo,SOo),e(qo,mt),M(OA,mt,null),e(mt,ROo),e(mt,phe),e(phe,POo),e(mt,BOo),e(mt,ed),e(ed,IOo),e(ed,_he),e(_he,qOo),e(ed,NOo),e(ed,pV),e(pV,jOo),e(ed,DOo),e(mt,GOo),M(aF,mt,null),e(qo,OOo),e(qo,no),M(VA,no,null),e(no,VOo),e(no,uhe),e(uhe,XOo),e(no,zOo),e(no,qa),e(qa,WOo),e(qa,bhe),e(bhe,QOo),e(qa,HOo),e(qa,vhe),e(vhe,UOo),e(qa,JOo),e(qa,Fhe),e(Fhe,YOo),e(qa,KOo),e(no,ZOo),e(no,V),e(V,nF),e(nF,The),e(The,eVo),e(nF,oVo),e(nF,_V),e(_V,rVo),e(nF,tVo),e(V,aVo),e(V,sF),e(sF,Mhe),e(Mhe,nVo),e(sF,sVo),e(sF,uV),e(uV,lVo),e(sF,iVo),e(V,dVo),e(V,lF),e(lF,Ehe),e(Ehe,cVo),e(lF,fVo),e(lF,bV),e(bV,mVo),e(lF,gVo),e(V,hVo),e(V,iF),e(iF,Che),e(Che,pVo),e(iF,_Vo),e(iF,vV),e(vV,uVo),e(iF,bVo),e(V,vVo),e(V,dF),e(dF,whe),e(whe,FVo),e(dF,TVo),e(dF,FV),e(FV,MVo),e(dF,EVo),e(V,CVo),e(V,cF),e(cF,Ahe),e(Ahe,wVo),e(cF,AVo),e(cF,TV),e(TV,yVo),e(cF,LVo),e(V,xVo),e(V,fF),e(fF,yhe),e(yhe,$Vo),e(fF,kVo),e(fF,MV),e(MV,SVo),e(fF,RVo),e(V,PVo),e(V,mF),e(mF,Lhe),e(Lhe,BVo),e(mF,IVo),e(mF,EV),e(EV,qVo),e(mF,NVo),e(V,jVo),e(V,gF),e(gF,xhe),e(xhe,DVo),e(gF,GVo),e(gF,CV),e(CV,OVo),e(gF,VVo),e(V,XVo),e(V,hF),e(hF,$he),e($he,zVo),e(hF,WVo),e(hF,wV),e(wV,QVo),e(hF,HVo),e(V,UVo),e(V,pF),e(pF,khe),e(khe,JVo),e(pF,YVo),e(pF,AV),e(AV,KVo),e(pF,ZVo),e(V,eXo),e(V,_F),e(_F,She),e(She,oXo),e(_F,rXo),e(_F,yV),e(yV,tXo),e(_F,aXo),e(V,nXo),e(V,uF),e(uF,Rhe),e(Rhe,sXo),e(uF,lXo),e(uF,LV),e(LV,iXo),e(uF,dXo),e(V,cXo),e(V,bF),e(bF,Phe),e(Phe,fXo),e(bF,mXo),e(bF,xV),e(xV,gXo),e(bF,hXo),e(V,pXo),e(V,vF),e(vF,Bhe),e(Bhe,_Xo),e(vF,uXo),e(vF,$V),e($V,bXo),e(vF,vXo),e(V,FXo),e(V,FF),e(FF,Ihe),e(Ihe,TXo),e(FF,MXo),e(FF,kV),e(kV,EXo),e(FF,CXo),e(V,wXo),e(V,TF),e(TF,qhe),e(qhe,AXo),e(TF,yXo),e(TF,SV),e(SV,LXo),e(TF,xXo),e(V,$Xo),e(V,MF),e(MF,Nhe),e(Nhe,kXo),e(MF,SXo),e(MF,RV),e(RV,RXo),e(MF,PXo),e(V,BXo),e(V,EF),e(EF,jhe),e(jhe,IXo),e(EF,qXo),e(EF,PV),e(PV,NXo),e(EF,jXo),e(V,DXo),e(V,CF),e(CF,Dhe),e(Dhe,GXo),e(CF,OXo),e(CF,BV),e(BV,VXo),e(CF,XXo),e(V,zXo),e(V,wF),e(wF,Ghe),e(Ghe,WXo),e(wF,QXo),e(wF,IV),e(IV,HXo),e(wF,UXo),e(V,JXo),e(V,AF),e(AF,Ohe),e(Ohe,YXo),e(AF,KXo),e(AF,qV),e(qV,ZXo),e(AF,ezo),e(V,ozo),e(V,yF),e(yF,Vhe),e(Vhe,rzo),e(yF,tzo),e(yF,NV),e(NV,azo),e(yF,nzo),e(V,szo),e(V,LF),e(LF,Xhe),e(Xhe,lzo),e(LF,izo),e(LF,jV),e(jV,dzo),e(LF,czo),e(V,fzo),e(V,xF),e(xF,zhe),e(zhe,mzo),e(xF,gzo),e(xF,DV),e(DV,hzo),e(xF,pzo),e(V,_zo),e(V,$F),e($F,Whe),e(Whe,uzo),e($F,bzo),e($F,GV),e(GV,vzo),e($F,Fzo),e(V,Tzo),e(V,kF),e(kF,Qhe),e(Qhe,Mzo),e(kF,Ezo),e(kF,OV),e(OV,Czo),e(kF,wzo),e(V,Azo),e(V,SF),e(SF,Hhe),e(Hhe,yzo),e(SF,Lzo),e(SF,VV),e(VV,xzo),e(SF,$zo),e(V,kzo),e(V,RF),e(RF,Uhe),e(Uhe,Szo),e(RF,Rzo),e(RF,XV),e(XV,Pzo),e(RF,Bzo),e(V,Izo),e(V,PF),e(PF,Jhe),e(Jhe,qzo),e(PF,Nzo),e(PF,zV),e(zV,jzo),e(PF,Dzo),e(V,Gzo),e(V,BF),e(BF,Yhe),e(Yhe,Ozo),e(BF,Vzo),e(BF,WV),e(WV,Xzo),e(BF,zzo),e(V,Wzo),e(V,IF),e(IF,Khe),e(Khe,Qzo),e(IF,Hzo),e(IF,QV),e(QV,Uzo),e(IF,Jzo),e(V,Yzo),e(V,qF),e(qF,Zhe),e(Zhe,Kzo),e(qF,Zzo),e(qF,HV),e(HV,eWo),e(qF,oWo),e(V,rWo),e(V,NF),e(NF,epe),e(epe,tWo),e(NF,aWo),e(NF,UV),e(UV,nWo),e(NF,sWo),e(V,lWo),e(V,jF),e(jF,ope),e(ope,iWo),e(jF,dWo),e(jF,JV),e(JV,cWo),e(jF,fWo),e(V,mWo),e(V,DF),e(DF,rpe),e(rpe,gWo),e(DF,hWo),e(DF,YV),e(YV,pWo),e(DF,_Wo),e(V,uWo),e(V,GF),e(GF,tpe),e(tpe,bWo),e(GF,vWo),e(GF,KV),e(KV,FWo),e(GF,TWo),e(V,MWo),e(V,OF),e(OF,ape),e(ape,EWo),e(OF,CWo),e(OF,ZV),e(ZV,wWo),e(OF,AWo),e(V,yWo),e(V,VF),e(VF,npe),e(npe,LWo),e(VF,xWo),e(VF,eX),e(eX,$Wo),e(VF,kWo),e(no,SWo),e(no,XF),e(XF,RWo),e(XF,spe),e(spe,PWo),e(XF,BWo),e(XF,lpe),e(lpe,IWo),e(no,qWo),M(zF,no,null),b(f,fNe,u),b(f,od,u),e(od,WF),e(WF,ipe),M(XA,ipe,null),e(od,NWo),e(od,dpe),e(dpe,jWo),b(f,mNe,u),b(f,No,u),M(zA,No,null),e(No,DWo),e(No,rd),e(rd,GWo),e(rd,oX),e(oX,OWo),e(rd,VWo),e(rd,rX),e(rX,XWo),e(rd,zWo),e(No,WWo),e(No,WA),e(WA,QWo),e(WA,cpe),e(cpe,HWo),e(WA,UWo),e(No,JWo),e(No,gt),M(QA,gt,null),e(gt,YWo),e(gt,fpe),e(fpe,KWo),e(gt,ZWo),e(gt,td),e(td,eQo),e(td,mpe),e(mpe,oQo),e(td,rQo),e(td,tX),e(tX,tQo),e(td,aQo),e(gt,nQo),M(QF,gt,null),e(No,sQo),e(No,so),M(HA,so,null),e(so,lQo),e(so,gpe),e(gpe,iQo),e(so,dQo),e(so,Na),e(Na,cQo),e(Na,hpe),e(hpe,fQo),e(Na,mQo),e(Na,ppe),e(ppe,gQo),e(Na,hQo),e(Na,_pe),e(_pe,pQo),e(Na,_Qo),e(so,uQo),e(so,upe),e(upe,HF),e(HF,bpe),e(bpe,bQo),e(HF,vQo),e(HF,aX),e(aX,FQo),e(HF,TQo),e(so,MQo),e(so,UF),e(UF,EQo),e(UF,vpe),e(vpe,CQo),e(UF,wQo),e(UF,Fpe),e(Fpe,AQo),e(so,yQo),M(JF,so,null),b(f,gNe,u),b(f,ad,u),e(ad,YF),e(YF,Tpe),M(UA,Tpe,null),e(ad,LQo),e(ad,Mpe),e(Mpe,xQo),b(f,hNe,u),b(f,jo,u),M(JA,jo,null),e(jo,$Qo),e(jo,nd),e(nd,kQo),e(nd,nX),e(nX,SQo),e(nd,RQo),e(nd,sX),e(sX,PQo),e(nd,BQo),e(jo,IQo),e(jo,YA),e(YA,qQo),e(YA,Epe),e(Epe,NQo),e(YA,jQo),e(jo,DQo),e(jo,ht),M(KA,ht,null),e(ht,GQo),e(ht,Cpe),e(Cpe,OQo),e(ht,VQo),e(ht,sd),e(sd,XQo),e(sd,wpe),e(wpe,zQo),e(sd,WQo),e(sd,lX),e(lX,QQo),e(sd,HQo),e(ht,UQo),M(KF,ht,null),e(jo,JQo),e(jo,lo),M(ZA,lo,null),e(lo,YQo),e(lo,Ape),e(Ape,KQo),e(lo,ZQo),e(lo,ja),e(ja,eHo),e(ja,ype),e(ype,oHo),e(ja,rHo),e(ja,Lpe),e(Lpe,tHo),e(ja,aHo),e(ja,xpe),e(xpe,nHo),e(ja,sHo),e(lo,lHo),e(lo,Fe),e(Fe,ZF),e(ZF,$pe),e($pe,iHo),e(ZF,dHo),e(ZF,iX),e(iX,cHo),e(ZF,fHo),e(Fe,mHo),e(Fe,e6),e(e6,kpe),e(kpe,gHo),e(e6,hHo),e(e6,dX),e(dX,pHo),e(e6,_Ho),e(Fe,uHo),e(Fe,o6),e(o6,Spe),e(Spe,bHo),e(o6,vHo),e(o6,cX),e(cX,FHo),e(o6,THo),e(Fe,MHo),e(Fe,r6),e(r6,Rpe),e(Rpe,EHo),e(r6,CHo),e(r6,fX),e(fX,wHo),e(r6,AHo),e(Fe,yHo),e(Fe,Bs),e(Bs,Ppe),e(Ppe,LHo),e(Bs,xHo),e(Bs,mX),e(mX,$Ho),e(Bs,kHo),e(Bs,gX),e(gX,SHo),e(Bs,RHo),e(Fe,PHo),e(Fe,t6),e(t6,Bpe),e(Bpe,BHo),e(t6,IHo),e(t6,hX),e(hX,qHo),e(t6,NHo),e(Fe,jHo),e(Fe,pt),e(pt,Ipe),e(Ipe,DHo),e(pt,GHo),e(pt,pX),e(pX,OHo),e(pt,VHo),e(pt,_X),e(_X,XHo),e(pt,zHo),e(pt,uX),e(uX,WHo),e(pt,QHo),e(Fe,HHo),e(Fe,a6),e(a6,qpe),e(qpe,UHo),e(a6,JHo),e(a6,bX),e(bX,YHo),e(a6,KHo),e(Fe,ZHo),e(Fe,n6),e(n6,Npe),e(Npe,eUo),e(n6,oUo),e(n6,vX),e(vX,rUo),e(n6,tUo),e(Fe,aUo),e(Fe,s6),e(s6,jpe),e(jpe,nUo),e(s6,sUo),e(s6,FX),e(FX,lUo),e(s6,iUo),e(Fe,dUo),e(Fe,l6),e(l6,Dpe),e(Dpe,cUo),e(l6,fUo),e(l6,TX),e(TX,mUo),e(l6,gUo),e(Fe,hUo),e(Fe,i6),e(i6,Gpe),e(Gpe,pUo),e(i6,_Uo),e(i6,MX),e(MX,uUo),e(i6,bUo),e(Fe,vUo),e(Fe,d6),e(d6,Ope),e(Ope,FUo),e(d6,TUo),e(d6,EX),e(EX,MUo),e(d6,EUo),e(Fe,CUo),e(Fe,c6),e(c6,Vpe),e(Vpe,wUo),e(c6,AUo),e(c6,CX),e(CX,yUo),e(c6,LUo),e(lo,xUo),e(lo,f6),e(f6,$Uo),e(f6,Xpe),e(Xpe,kUo),e(f6,SUo),e(f6,zpe),e(zpe,RUo),e(lo,PUo),M(m6,lo,null),b(f,pNe,u),b(f,ld,u),e(ld,g6),e(g6,Wpe),M(ey,Wpe,null),e(ld,BUo),e(ld,Qpe),e(Qpe,IUo),b(f,_Ne,u),b(f,Do,u),M(oy,Do,null),e(Do,qUo),e(Do,id),e(id,NUo),e(id,wX),e(wX,jUo),e(id,DUo),e(id,AX),e(AX,GUo),e(id,OUo),e(Do,VUo),e(Do,ry),e(ry,XUo),e(ry,Hpe),e(Hpe,zUo),e(ry,WUo),e(Do,QUo),e(Do,_t),M(ty,_t,null),e(_t,HUo),e(_t,Upe),e(Upe,UUo),e(_t,JUo),e(_t,dd),e(dd,YUo),e(dd,Jpe),e(Jpe,KUo),e(dd,ZUo),e(dd,yX),e(yX,eJo),e(dd,oJo),e(_t,rJo),M(h6,_t,null),e(Do,tJo),e(Do,io),M(ay,io,null),e(io,aJo),e(io,Ype),e(Ype,nJo),e(io,sJo),e(io,Da),e(Da,lJo),e(Da,Kpe),e(Kpe,iJo),e(Da,dJo),e(Da,Zpe),e(Zpe,cJo),e(Da,fJo),e(Da,e_e),e(e_e,mJo),e(Da,gJo),e(io,hJo),e(io,o_e),e(o_e,p6),e(p6,r_e),e(r_e,pJo),e(p6,_Jo),e(p6,LX),e(LX,uJo),e(p6,bJo),e(io,vJo),e(io,_6),e(_6,FJo),e(_6,t_e),e(t_e,TJo),e(_6,MJo),e(_6,a_e),e(a_e,EJo),e(io,CJo),M(u6,io,null),b(f,uNe,u),b(f,cd,u),e(cd,b6),e(b6,n_e),M(ny,n_e,null),e(cd,wJo),e(cd,s_e),e(s_e,AJo),b(f,bNe,u),b(f,Go,u),M(sy,Go,null),e(Go,yJo),e(Go,fd),e(fd,LJo),e(fd,xX),e(xX,xJo),e(fd,$Jo),e(fd,$X),e($X,kJo),e(fd,SJo),e(Go,RJo),e(Go,ly),e(ly,PJo),e(ly,l_e),e(l_e,BJo),e(ly,IJo),e(Go,qJo),e(Go,ut),M(iy,ut,null),e(ut,NJo),e(ut,i_e),e(i_e,jJo),e(ut,DJo),e(ut,md),e(md,GJo),e(md,d_e),e(d_e,OJo),e(md,VJo),e(md,kX),e(kX,XJo),e(md,zJo),e(ut,WJo),M(v6,ut,null),e(Go,QJo),e(Go,co),M(dy,co,null),e(co,HJo),e(co,c_e),e(c_e,UJo),e(co,JJo),e(co,Ga),e(Ga,YJo),e(Ga,f_e),e(f_e,KJo),e(Ga,ZJo),e(Ga,m_e),e(m_e,eYo),e(Ga,oYo),e(Ga,g_e),e(g_e,rYo),e(Ga,tYo),e(co,aYo),e(co,Se),e(Se,F6),e(F6,h_e),e(h_e,nYo),e(F6,sYo),e(F6,SX),e(SX,lYo),e(F6,iYo),e(Se,dYo),e(Se,T6),e(T6,p_e),e(p_e,cYo),e(T6,fYo),e(T6,RX),e(RX,mYo),e(T6,gYo),e(Se,hYo),e(Se,M6),e(M6,__e),e(__e,pYo),e(M6,_Yo),e(M6,PX),e(PX,uYo),e(M6,bYo),e(Se,vYo),e(Se,E6),e(E6,u_e),e(u_e,FYo),e(E6,TYo),e(E6,BX),e(BX,MYo),e(E6,EYo),e(Se,CYo),e(Se,C6),e(C6,b_e),e(b_e,wYo),e(C6,AYo),e(C6,IX),e(IX,yYo),e(C6,LYo),e(Se,xYo),e(Se,w6),e(w6,v_e),e(v_e,$Yo),e(w6,kYo),e(w6,qX),e(qX,SYo),e(w6,RYo),e(Se,PYo),e(Se,A6),e(A6,F_e),e(F_e,BYo),e(A6,IYo),e(A6,NX),e(NX,qYo),e(A6,NYo),e(Se,jYo),e(Se,y6),e(y6,T_e),e(T_e,DYo),e(y6,GYo),e(y6,jX),e(jX,OYo),e(y6,VYo),e(Se,XYo),e(Se,L6),e(L6,M_e),e(M_e,zYo),e(L6,WYo),e(L6,DX),e(DX,QYo),e(L6,HYo),e(co,UYo),e(co,x6),e(x6,JYo),e(x6,E_e),e(E_e,YYo),e(x6,KYo),e(x6,C_e),e(C_e,ZYo),e(co,eKo),M($6,co,null),b(f,vNe,u),b(f,gd,u),e(gd,k6),e(k6,w_e),M(cy,w_e,null),e(gd,oKo),e(gd,A_e),e(A_e,rKo),b(f,FNe,u),b(f,Oo,u),M(fy,Oo,null),e(Oo,tKo),e(Oo,hd),e(hd,aKo),e(hd,GX),e(GX,nKo),e(hd,sKo),e(hd,OX),e(OX,lKo),e(hd,iKo),e(Oo,dKo),e(Oo,my),e(my,cKo),e(my,y_e),e(y_e,fKo),e(my,mKo),e(Oo,gKo),e(Oo,bt),M(gy,bt,null),e(bt,hKo),e(bt,L_e),e(L_e,pKo),e(bt,_Ko),e(bt,pd),e(pd,uKo),e(pd,x_e),e(x_e,bKo),e(pd,vKo),e(pd,VX),e(VX,FKo),e(pd,TKo),e(bt,MKo),M(S6,bt,null),e(Oo,EKo),e(Oo,fo),M(hy,fo,null),e(fo,CKo),e(fo,$_e),e($_e,wKo),e(fo,AKo),e(fo,Oa),e(Oa,yKo),e(Oa,k_e),e(k_e,LKo),e(Oa,xKo),e(Oa,S_e),e(S_e,$Ko),e(Oa,kKo),e(Oa,R_e),e(R_e,SKo),e(Oa,RKo),e(fo,PKo),e(fo,Kr),e(Kr,R6),e(R6,P_e),e(P_e,BKo),e(R6,IKo),e(R6,XX),e(XX,qKo),e(R6,NKo),e(Kr,jKo),e(Kr,P6),e(P6,B_e),e(B_e,DKo),e(P6,GKo),e(P6,zX),e(zX,OKo),e(P6,VKo),e(Kr,XKo),e(Kr,B6),e(B6,I_e),e(I_e,zKo),e(B6,WKo),e(B6,WX),e(WX,QKo),e(B6,HKo),e(Kr,UKo),e(Kr,I6),e(I6,q_e),e(q_e,JKo),e(I6,YKo),e(I6,QX),e(QX,KKo),e(I6,ZKo),e(Kr,eZo),e(Kr,q6),e(q6,N_e),e(N_e,oZo),e(q6,rZo),e(q6,HX),e(HX,tZo),e(q6,aZo),e(fo,nZo),e(fo,N6),e(N6,sZo),e(N6,j_e),e(j_e,lZo),e(N6,iZo),e(N6,D_e),e(D_e,dZo),e(fo,cZo),M(j6,fo,null),b(f,TNe,u),b(f,_d,u),e(_d,D6),e(D6,G_e),M(py,G_e,null),e(_d,fZo),e(_d,O_e),e(O_e,mZo),b(f,MNe,u),b(f,Vo,u),M(_y,Vo,null),e(Vo,gZo),e(Vo,ud),e(ud,hZo),e(ud,UX),e(UX,pZo),e(ud,_Zo),e(ud,JX),e(JX,uZo),e(ud,bZo),e(Vo,vZo),e(Vo,uy),e(uy,FZo),e(uy,V_e),e(V_e,TZo),e(uy,MZo),e(Vo,EZo),e(Vo,vt),M(by,vt,null),e(vt,CZo),e(vt,X_e),e(X_e,wZo),e(vt,AZo),e(vt,bd),e(bd,yZo),e(bd,z_e),e(z_e,LZo),e(bd,xZo),e(bd,YX),e(YX,$Zo),e(bd,kZo),e(vt,SZo),M(G6,vt,null),e(Vo,RZo),e(Vo,mo),M(vy,mo,null),e(mo,PZo),e(mo,W_e),e(W_e,BZo),e(mo,IZo),e(mo,Va),e(Va,qZo),e(Va,Q_e),e(Q_e,NZo),e(Va,jZo),e(Va,H_e),e(H_e,DZo),e(Va,GZo),e(Va,U_e),e(U_e,OZo),e(Va,VZo),e(mo,XZo),e(mo,Re),e(Re,O6),e(O6,J_e),e(J_e,zZo),e(O6,WZo),e(O6,KX),e(KX,QZo),e(O6,HZo),e(Re,UZo),e(Re,V6),e(V6,Y_e),e(Y_e,JZo),e(V6,YZo),e(V6,ZX),e(ZX,KZo),e(V6,ZZo),e(Re,eer),e(Re,X6),e(X6,K_e),e(K_e,oer),e(X6,rer),e(X6,ez),e(ez,ter),e(X6,aer),e(Re,ner),e(Re,z6),e(z6,Z_e),e(Z_e,ser),e(z6,ler),e(z6,oz),e(oz,ier),e(z6,der),e(Re,cer),e(Re,W6),e(W6,eue),e(eue,fer),e(W6,mer),e(W6,rz),e(rz,ger),e(W6,her),e(Re,per),e(Re,Q6),e(Q6,oue),e(oue,_er),e(Q6,uer),e(Q6,tz),e(tz,ber),e(Q6,ver),e(Re,Fer),e(Re,H6),e(H6,rue),e(rue,Ter),e(H6,Mer),e(H6,az),e(az,Eer),e(H6,Cer),e(Re,wer),e(Re,U6),e(U6,tue),e(tue,Aer),e(U6,yer),e(U6,nz),e(nz,Ler),e(U6,xer),e(Re,$er),e(Re,J6),e(J6,aue),e(aue,ker),e(J6,Ser),e(J6,sz),e(sz,Rer),e(J6,Per),e(mo,Ber),e(mo,Y6),e(Y6,Ier),e(Y6,nue),e(nue,qer),e(Y6,Ner),e(Y6,sue),e(sue,jer),e(mo,Der),M(K6,mo,null),b(f,ENe,u),b(f,vd,u),e(vd,Z6),e(Z6,lue),M(Fy,lue,null),e(vd,Ger),e(vd,iue),e(iue,Oer),b(f,CNe,u),b(f,Xo,u),M(Ty,Xo,null),e(Xo,Ver),e(Xo,Fd),e(Fd,Xer),e(Fd,lz),e(lz,zer),e(Fd,Wer),e(Fd,iz),e(iz,Qer),e(Fd,Her),e(Xo,Uer),e(Xo,My),e(My,Jer),e(My,due),e(due,Yer),e(My,Ker),e(Xo,Zer),e(Xo,Ft),M(Ey,Ft,null),e(Ft,eor),e(Ft,cue),e(cue,oor),e(Ft,ror),e(Ft,Td),e(Td,tor),e(Td,fue),e(fue,aor),e(Td,nor),e(Td,dz),e(dz,sor),e(Td,lor),e(Ft,ior),M(eT,Ft,null),e(Xo,dor),e(Xo,go),M(Cy,go,null),e(go,cor),e(go,mue),e(mue,mor),e(go,gor),e(go,Xa),e(Xa,hor),e(Xa,gue),e(gue,por),e(Xa,_or),e(Xa,hue),e(hue,uor),e(Xa,bor),e(Xa,pue),e(pue,vor),e(Xa,For),e(go,Tor),e(go,wy),e(wy,oT),e(oT,_ue),e(_ue,Mor),e(oT,Eor),e(oT,cz),e(cz,Cor),e(oT,wor),e(wy,Aor),e(wy,rT),e(rT,uue),e(uue,yor),e(rT,Lor),e(rT,fz),e(fz,xor),e(rT,$or),e(go,kor),e(go,tT),e(tT,Sor),e(tT,bue),e(bue,Ror),e(tT,Por),e(tT,vue),e(vue,Bor),e(go,Ior),M(aT,go,null),b(f,wNe,u),b(f,Md,u),e(Md,nT),e(nT,Fue),M(Ay,Fue,null),e(Md,qor),e(Md,Tue),e(Tue,Nor),b(f,ANe,u),b(f,zo,u),M(yy,zo,null),e(zo,jor),e(zo,Ed),e(Ed,Dor),e(Ed,mz),e(mz,Gor),e(Ed,Oor),e(Ed,gz),e(gz,Vor),e(Ed,Xor),e(zo,zor),e(zo,Ly),e(Ly,Wor),e(Ly,Mue),e(Mue,Qor),e(Ly,Hor),e(zo,Uor),e(zo,Tt),M(xy,Tt,null),e(Tt,Jor),e(Tt,Eue),e(Eue,Yor),e(Tt,Kor),e(Tt,Cd),e(Cd,Zor),e(Cd,Cue),e(Cue,err),e(Cd,orr),e(Cd,hz),e(hz,rrr),e(Cd,trr),e(Tt,arr),M(sT,Tt,null),e(zo,nrr),e(zo,ho),M($y,ho,null),e(ho,srr),e(ho,wue),e(wue,lrr),e(ho,irr),e(ho,za),e(za,drr),e(za,Aue),e(Aue,crr),e(za,frr),e(za,yue),e(yue,mrr),e(za,grr),e(za,Lue),e(Lue,hrr),e(za,prr),e(ho,_rr),e(ho,Zr),e(Zr,lT),e(lT,xue),e(xue,urr),e(lT,brr),e(lT,pz),e(pz,vrr),e(lT,Frr),e(Zr,Trr),e(Zr,iT),e(iT,$ue),e($ue,Mrr),e(iT,Err),e(iT,_z),e(_z,Crr),e(iT,wrr),e(Zr,Arr),e(Zr,dT),e(dT,kue),e(kue,yrr),e(dT,Lrr),e(dT,uz),e(uz,xrr),e(dT,$rr),e(Zr,krr),e(Zr,cT),e(cT,Sue),e(Sue,Srr),e(cT,Rrr),e(cT,bz),e(bz,Prr),e(cT,Brr),e(Zr,Irr),e(Zr,fT),e(fT,Rue),e(Rue,qrr),e(fT,Nrr),e(fT,vz),e(vz,jrr),e(fT,Drr),e(ho,Grr),e(ho,mT),e(mT,Orr),e(mT,Pue),e(Pue,Vrr),e(mT,Xrr),e(mT,Bue),e(Bue,zrr),e(ho,Wrr),M(gT,ho,null),b(f,yNe,u),b(f,wd,u),e(wd,hT),e(hT,Iue),M(ky,Iue,null),e(wd,Qrr),e(wd,que),e(que,Hrr),b(f,LNe,u),b(f,Wo,u),M(Sy,Wo,null),e(Wo,Urr),e(Wo,Ad),e(Ad,Jrr),e(Ad,Fz),e(Fz,Yrr),e(Ad,Krr),e(Ad,Tz),e(Tz,Zrr),e(Ad,etr),e(Wo,otr),e(Wo,Ry),e(Ry,rtr),e(Ry,Nue),e(Nue,ttr),e(Ry,atr),e(Wo,ntr),e(Wo,Mt),M(Py,Mt,null),e(Mt,str),e(Mt,jue),e(jue,ltr),e(Mt,itr),e(Mt,yd),e(yd,dtr),e(yd,Due),e(Due,ctr),e(yd,ftr),e(yd,Mz),e(Mz,mtr),e(yd,gtr),e(Mt,htr),M(pT,Mt,null),e(Wo,ptr),e(Wo,po),M(By,po,null),e(po,_tr),e(po,Gue),e(Gue,utr),e(po,btr),e(po,Wa),e(Wa,vtr),e(Wa,Oue),e(Oue,Ftr),e(Wa,Ttr),e(Wa,Vue),e(Vue,Mtr),e(Wa,Etr),e(Wa,Xue),e(Xue,Ctr),e(Wa,wtr),e(po,Atr),e(po,Ld),e(Ld,_T),e(_T,zue),e(zue,ytr),e(_T,Ltr),e(_T,Ez),e(Ez,xtr),e(_T,$tr),e(Ld,ktr),e(Ld,uT),e(uT,Wue),e(Wue,Str),e(uT,Rtr),e(uT,Cz),e(Cz,Ptr),e(uT,Btr),e(Ld,Itr),e(Ld,bT),e(bT,Que),e(Que,qtr),e(bT,Ntr),e(bT,wz),e(wz,jtr),e(bT,Dtr),e(po,Gtr),e(po,vT),e(vT,Otr),e(vT,Hue),e(Hue,Vtr),e(vT,Xtr),e(vT,Uue),e(Uue,ztr),e(po,Wtr),M(FT,po,null),b(f,xNe,u),b(f,xd,u),e(xd,TT),e(TT,Jue),M(Iy,Jue,null),e(xd,Qtr),e(xd,Yue),e(Yue,Htr),b(f,$Ne,u),b(f,Qo,u),M(qy,Qo,null),e(Qo,Utr),e(Qo,$d),e($d,Jtr),e($d,Az),e(Az,Ytr),e($d,Ktr),e($d,yz),e(yz,Ztr),e($d,ear),e(Qo,oar),e(Qo,Ny),e(Ny,rar),e(Ny,Kue),e(Kue,tar),e(Ny,aar),e(Qo,nar),e(Qo,Et),M(jy,Et,null),e(Et,sar),e(Et,Zue),e(Zue,lar),e(Et,iar),e(Et,kd),e(kd,dar),e(kd,e2e),e(e2e,car),e(kd,far),e(kd,Lz),e(Lz,mar),e(kd,gar),e(Et,har),M(MT,Et,null),e(Qo,par),e(Qo,_o),M(Dy,_o,null),e(_o,_ar),e(_o,o2e),e(o2e,uar),e(_o,bar),e(_o,Qa),e(Qa,Far),e(Qa,r2e),e(r2e,Tar),e(Qa,Mar),e(Qa,t2e),e(t2e,Ear),e(Qa,Car),e(Qa,a2e),e(a2e,war),e(Qa,Aar),e(_o,yar),e(_o,Gy),e(Gy,ET),e(ET,n2e),e(n2e,Lar),e(ET,xar),e(ET,xz),e(xz,$ar),e(ET,kar),e(Gy,Sar),e(Gy,CT),e(CT,s2e),e(s2e,Rar),e(CT,Par),e(CT,$z),e($z,Bar),e(CT,Iar),e(_o,qar),e(_o,wT),e(wT,Nar),e(wT,l2e),e(l2e,jar),e(wT,Dar),e(wT,i2e),e(i2e,Gar),e(_o,Oar),M(AT,_o,null),b(f,kNe,u),b(f,Sd,u),e(Sd,yT),e(yT,d2e),M(Oy,d2e,null),e(Sd,Var),e(Sd,c2e),e(c2e,Xar),b(f,SNe,u),b(f,Ho,u),M(Vy,Ho,null),e(Ho,zar),e(Ho,Rd),e(Rd,War),e(Rd,kz),e(kz,Qar),e(Rd,Har),e(Rd,Sz),e(Sz,Uar),e(Rd,Jar),e(Ho,Yar),e(Ho,Xy),e(Xy,Kar),e(Xy,f2e),e(f2e,Zar),e(Xy,enr),e(Ho,onr),e(Ho,Ct),M(zy,Ct,null),e(Ct,rnr),e(Ct,m2e),e(m2e,tnr),e(Ct,anr),e(Ct,Pd),e(Pd,nnr),e(Pd,g2e),e(g2e,snr),e(Pd,lnr),e(Pd,Rz),e(Rz,inr),e(Pd,dnr),e(Ct,cnr),M(LT,Ct,null),e(Ho,fnr),e(Ho,uo),M(Wy,uo,null),e(uo,mnr),e(uo,h2e),e(h2e,gnr),e(uo,hnr),e(uo,Ha),e(Ha,pnr),e(Ha,p2e),e(p2e,_nr),e(Ha,unr),e(Ha,_2e),e(_2e,bnr),e(Ha,vnr),e(Ha,u2e),e(u2e,Fnr),e(Ha,Tnr),e(uo,Mnr),e(uo,b2e),e(b2e,xT),e(xT,v2e),e(v2e,Enr),e(xT,Cnr),e(xT,Pz),e(Pz,wnr),e(xT,Anr),e(uo,ynr),e(uo,$T),e($T,Lnr),e($T,F2e),e(F2e,xnr),e($T,$nr),e($T,T2e),e(T2e,knr),e(uo,Snr),M(kT,uo,null),b(f,RNe,u),b(f,Bd,u),e(Bd,ST),e(ST,M2e),M(Qy,M2e,null),e(Bd,Rnr),e(Bd,E2e),e(E2e,Pnr),b(f,PNe,u),b(f,Uo,u),M(Hy,Uo,null),e(Uo,Bnr),e(Uo,Id),e(Id,Inr),e(Id,Bz),e(Bz,qnr),e(Id,Nnr),e(Id,Iz),e(Iz,jnr),e(Id,Dnr),e(Uo,Gnr),e(Uo,Uy),e(Uy,Onr),e(Uy,C2e),e(C2e,Vnr),e(Uy,Xnr),e(Uo,znr),e(Uo,wt),M(Jy,wt,null),e(wt,Wnr),e(wt,w2e),e(w2e,Qnr),e(wt,Hnr),e(wt,qd),e(qd,Unr),e(qd,A2e),e(A2e,Jnr),e(qd,Ynr),e(qd,qz),e(qz,Knr),e(qd,Znr),e(wt,esr),M(RT,wt,null),e(Uo,osr),e(Uo,bo),M(Yy,bo,null),e(bo,rsr),e(bo,y2e),e(y2e,tsr),e(bo,asr),e(bo,Ua),e(Ua,nsr),e(Ua,L2e),e(L2e,ssr),e(Ua,lsr),e(Ua,x2e),e(x2e,isr),e(Ua,dsr),e(Ua,$2e),e($2e,csr),e(Ua,fsr),e(bo,msr),e(bo,Ja),e(Ja,PT),e(PT,k2e),e(k2e,gsr),e(PT,hsr),e(PT,Nz),e(Nz,psr),e(PT,_sr),e(Ja,usr),e(Ja,BT),e(BT,S2e),e(S2e,bsr),e(BT,vsr),e(BT,jz),e(jz,Fsr),e(BT,Tsr),e(Ja,Msr),e(Ja,IT),e(IT,R2e),e(R2e,Esr),e(IT,Csr),e(IT,Dz),e(Dz,wsr),e(IT,Asr),e(Ja,ysr),e(Ja,qT),e(qT,P2e),e(P2e,Lsr),e(qT,xsr),e(qT,Gz),e(Gz,$sr),e(qT,ksr),e(bo,Ssr),e(bo,NT),e(NT,Rsr),e(NT,B2e),e(B2e,Psr),e(NT,Bsr),e(NT,I2e),e(I2e,Isr),e(bo,qsr),M(jT,bo,null),b(f,BNe,u),b(f,Nd,u),e(Nd,DT),e(DT,q2e),M(Ky,q2e,null),e(Nd,Nsr),e(Nd,N2e),e(N2e,jsr),b(f,INe,u),b(f,Jo,u),M(Zy,Jo,null),e(Jo,Dsr),e(Jo,jd),e(jd,Gsr),e(jd,Oz),e(Oz,Osr),e(jd,Vsr),e(jd,Vz),e(Vz,Xsr),e(jd,zsr),e(Jo,Wsr),e(Jo,eL),e(eL,Qsr),e(eL,j2e),e(j2e,Hsr),e(eL,Usr),e(Jo,Jsr),e(Jo,At),M(oL,At,null),e(At,Ysr),e(At,D2e),e(D2e,Ksr),e(At,Zsr),e(At,Dd),e(Dd,elr),e(Dd,G2e),e(G2e,olr),e(Dd,rlr),e(Dd,Xz),e(Xz,tlr),e(Dd,alr),e(At,nlr),M(GT,At,null),e(Jo,slr),e(Jo,vo),M(rL,vo,null),e(vo,llr),e(vo,O2e),e(O2e,ilr),e(vo,dlr),e(vo,Ya),e(Ya,clr),e(Ya,V2e),e(V2e,flr),e(Ya,mlr),e(Ya,X2e),e(X2e,glr),e(Ya,hlr),e(Ya,z2e),e(z2e,plr),e(Ya,_lr),e(vo,ulr),e(vo,W2e),e(W2e,OT),e(OT,Q2e),e(Q2e,blr),e(OT,vlr),e(OT,zz),e(zz,Flr),e(OT,Tlr),e(vo,Mlr),e(vo,VT),e(VT,Elr),e(VT,H2e),e(H2e,Clr),e(VT,wlr),e(VT,U2e),e(U2e,Alr),e(vo,ylr),M(XT,vo,null),b(f,qNe,u),b(f,Gd,u),e(Gd,zT),e(zT,J2e),M(tL,J2e,null),e(Gd,Llr),e(Gd,Y2e),e(Y2e,xlr),b(f,NNe,u),b(f,Yo,u),M(aL,Yo,null),e(Yo,$lr),e(Yo,Od),e(Od,klr),e(Od,Wz),e(Wz,Slr),e(Od,Rlr),e(Od,Qz),e(Qz,Plr),e(Od,Blr),e(Yo,Ilr),e(Yo,nL),e(nL,qlr),e(nL,K2e),e(K2e,Nlr),e(nL,jlr),e(Yo,Dlr),e(Yo,yt),M(sL,yt,null),e(yt,Glr),e(yt,Z2e),e(Z2e,Olr),e(yt,Vlr),e(yt,Vd),e(Vd,Xlr),e(Vd,e1e),e(e1e,zlr),e(Vd,Wlr),e(Vd,Hz),e(Hz,Qlr),e(Vd,Hlr),e(yt,Ulr),M(WT,yt,null),e(Yo,Jlr),e(Yo,wr),M(lL,wr,null),e(wr,Ylr),e(wr,o1e),e(o1e,Klr),e(wr,Zlr),e(wr,Ka),e(Ka,eir),e(Ka,r1e),e(r1e,oir),e(Ka,rir),e(Ka,t1e),e(t1e,tir),e(Ka,air),e(Ka,a1e),e(a1e,nir),e(Ka,sir),e(wr,lir),e(wr,N),e(N,QT),e(QT,n1e),e(n1e,iir),e(QT,dir),e(QT,Uz),e(Uz,cir),e(QT,fir),e(N,mir),e(N,HT),e(HT,s1e),e(s1e,gir),e(HT,hir),e(HT,Jz),e(Jz,pir),e(HT,_ir),e(N,uir),e(N,UT),e(UT,l1e),e(l1e,bir),e(UT,vir),e(UT,Yz),e(Yz,Fir),e(UT,Tir),e(N,Mir),e(N,JT),e(JT,i1e),e(i1e,Eir),e(JT,Cir),e(JT,Kz),e(Kz,wir),e(JT,Air),e(N,yir),e(N,YT),e(YT,d1e),e(d1e,Lir),e(YT,xir),e(YT,Zz),e(Zz,$ir),e(YT,kir),e(N,Sir),e(N,KT),e(KT,c1e),e(c1e,Rir),e(KT,Pir),e(KT,eW),e(eW,Bir),e(KT,Iir),e(N,qir),e(N,ZT),e(ZT,f1e),e(f1e,Nir),e(ZT,jir),e(ZT,oW),e(oW,Dir),e(ZT,Gir),e(N,Oir),e(N,e7),e(e7,m1e),e(m1e,Vir),e(e7,Xir),e(e7,rW),e(rW,zir),e(e7,Wir),e(N,Qir),e(N,o7),e(o7,g1e),e(g1e,Hir),e(o7,Uir),e(o7,tW),e(tW,Jir),e(o7,Yir),e(N,Kir),e(N,r7),e(r7,h1e),e(h1e,Zir),e(r7,edr),e(r7,aW),e(aW,odr),e(r7,rdr),e(N,tdr),e(N,t7),e(t7,p1e),e(p1e,adr),e(t7,ndr),e(t7,nW),e(nW,sdr),e(t7,ldr),e(N,idr),e(N,a7),e(a7,_1e),e(_1e,ddr),e(a7,cdr),e(a7,sW),e(sW,fdr),e(a7,mdr),e(N,gdr),e(N,n7),e(n7,u1e),e(u1e,hdr),e(n7,pdr),e(n7,lW),e(lW,_dr),e(n7,udr),e(N,bdr),e(N,s7),e(s7,b1e),e(b1e,vdr),e(s7,Fdr),e(s7,iW),e(iW,Tdr),e(s7,Mdr),e(N,Edr),e(N,l7),e(l7,v1e),e(v1e,Cdr),e(l7,wdr),e(l7,dW),e(dW,Adr),e(l7,ydr),e(N,Ldr),e(N,i7),e(i7,F1e),e(F1e,xdr),e(i7,$dr),e(i7,cW),e(cW,kdr),e(i7,Sdr),e(N,Rdr),e(N,d7),e(d7,T1e),e(T1e,Pdr),e(d7,Bdr),e(d7,fW),e(fW,Idr),e(d7,qdr),e(N,Ndr),e(N,Is),e(Is,M1e),e(M1e,jdr),e(Is,Ddr),e(Is,mW),e(mW,Gdr),e(Is,Odr),e(Is,gW),e(gW,Vdr),e(Is,Xdr),e(N,zdr),e(N,c7),e(c7,E1e),e(E1e,Wdr),e(c7,Qdr),e(c7,hW),e(hW,Hdr),e(c7,Udr),e(N,Jdr),e(N,f7),e(f7,C1e),e(C1e,Ydr),e(f7,Kdr),e(f7,pW),e(pW,Zdr),e(f7,ecr),e(N,ocr),e(N,m7),e(m7,w1e),e(w1e,rcr),e(m7,tcr),e(m7,_W),e(_W,acr),e(m7,ncr),e(N,scr),e(N,g7),e(g7,A1e),e(A1e,lcr),e(g7,icr),e(g7,uW),e(uW,dcr),e(g7,ccr),e(N,fcr),e(N,h7),e(h7,y1e),e(y1e,mcr),e(h7,gcr),e(h7,bW),e(bW,hcr),e(h7,pcr),e(N,_cr),e(N,p7),e(p7,L1e),e(L1e,ucr),e(p7,bcr),e(p7,vW),e(vW,vcr),e(p7,Fcr),e(N,Tcr),e(N,_7),e(_7,x1e),e(x1e,Mcr),e(_7,Ecr),e(_7,FW),e(FW,Ccr),e(_7,wcr),e(N,Acr),e(N,u7),e(u7,$1e),e($1e,ycr),e(u7,Lcr),e(u7,TW),e(TW,xcr),e(u7,$cr),e(N,kcr),e(N,b7),e(b7,k1e),e(k1e,Scr),e(b7,Rcr),e(b7,MW),e(MW,Pcr),e(b7,Bcr),e(N,Icr),e(N,v7),e(v7,S1e),e(S1e,qcr),e(v7,Ncr),e(v7,EW),e(EW,jcr),e(v7,Dcr),e(N,Gcr),e(N,F7),e(F7,R1e),e(R1e,Ocr),e(F7,Vcr),e(F7,CW),e(CW,Xcr),e(F7,zcr),e(N,Wcr),e(N,T7),e(T7,P1e),e(P1e,Qcr),e(T7,Hcr),e(T7,wW),e(wW,Ucr),e(T7,Jcr),e(N,Ycr),e(N,M7),e(M7,B1e),e(B1e,Kcr),e(M7,Zcr),e(M7,AW),e(AW,efr),e(M7,ofr),e(N,rfr),e(N,E7),e(E7,I1e),e(I1e,tfr),e(E7,afr),e(E7,yW),e(yW,nfr),e(E7,sfr),e(N,lfr),e(N,C7),e(C7,q1e),e(q1e,ifr),e(C7,dfr),e(C7,LW),e(LW,cfr),e(C7,ffr),e(N,mfr),e(N,w7),e(w7,N1e),e(N1e,gfr),e(w7,hfr),e(w7,xW),e(xW,pfr),e(w7,_fr),e(N,ufr),e(N,A7),e(A7,j1e),e(j1e,bfr),e(A7,vfr),e(A7,$W),e($W,Ffr),e(A7,Tfr),e(N,Mfr),e(N,y7),e(y7,D1e),e(D1e,Efr),e(y7,Cfr),e(y7,kW),e(kW,wfr),e(y7,Afr),e(N,yfr),e(N,L7),e(L7,G1e),e(G1e,Lfr),e(L7,xfr),e(L7,SW),e(SW,$fr),e(L7,kfr),e(N,Sfr),e(N,x7),e(x7,O1e),e(O1e,Rfr),e(x7,Pfr),e(x7,RW),e(RW,Bfr),e(x7,Ifr),e(N,qfr),e(N,$7),e($7,V1e),e(V1e,Nfr),e($7,jfr),e($7,PW),e(PW,Dfr),e($7,Gfr),e(N,Ofr),e(N,k7),e(k7,X1e),e(X1e,Vfr),e(k7,Xfr),e(k7,BW),e(BW,zfr),e(k7,Wfr),e(N,Qfr),e(N,S7),e(S7,z1e),e(z1e,Hfr),e(S7,Ufr),e(S7,IW),e(IW,Jfr),e(S7,Yfr),e(N,Kfr),e(N,R7),e(R7,W1e),e(W1e,Zfr),e(R7,emr),e(R7,qW),e(qW,omr),e(R7,rmr),e(N,tmr),e(N,P7),e(P7,Q1e),e(Q1e,amr),e(P7,nmr),e(P7,NW),e(NW,smr),e(P7,lmr),e(N,imr),e(N,B7),e(B7,H1e),e(H1e,dmr),e(B7,cmr),e(B7,jW),e(jW,fmr),e(B7,mmr),e(N,gmr),e(N,I7),e(I7,U1e),e(U1e,hmr),e(I7,pmr),e(I7,DW),e(DW,_mr),e(I7,umr),e(N,bmr),e(N,q7),e(q7,J1e),e(J1e,vmr),e(q7,Fmr),e(q7,GW),e(GW,Tmr),e(q7,Mmr),e(wr,Emr),M(N7,wr,null),b(f,jNe,u),b(f,Xd,u),e(Xd,j7),e(j7,Y1e),M(iL,Y1e,null),e(Xd,Cmr),e(Xd,K1e),e(K1e,wmr),b(f,DNe,u),b(f,Ko,u),M(dL,Ko,null),e(Ko,Amr),e(Ko,zd),e(zd,ymr),e(zd,OW),e(OW,Lmr),e(zd,xmr),e(zd,VW),e(VW,$mr),e(zd,kmr),e(Ko,Smr),e(Ko,cL),e(cL,Rmr),e(cL,Z1e),e(Z1e,Pmr),e(cL,Bmr),e(Ko,Imr),e(Ko,Lt),M(fL,Lt,null),e(Lt,qmr),e(Lt,ebe),e(ebe,Nmr),e(Lt,jmr),e(Lt,Wd),e(Wd,Dmr),e(Wd,obe),e(obe,Gmr),e(Wd,Omr),e(Wd,XW),e(XW,Vmr),e(Wd,Xmr),e(Lt,zmr),M(D7,Lt,null),e(Ko,Wmr),e(Ko,Ar),M(mL,Ar,null),e(Ar,Qmr),e(Ar,rbe),e(rbe,Hmr),e(Ar,Umr),e(Ar,Za),e(Za,Jmr),e(Za,tbe),e(tbe,Ymr),e(Za,Kmr),e(Za,abe),e(abe,Zmr),e(Za,egr),e(Za,nbe),e(nbe,ogr),e(Za,rgr),e(Ar,tgr),e(Ar,se),e(se,G7),e(G7,sbe),e(sbe,agr),e(G7,ngr),e(G7,zW),e(zW,sgr),e(G7,lgr),e(se,igr),e(se,O7),e(O7,lbe),e(lbe,dgr),e(O7,cgr),e(O7,WW),e(WW,fgr),e(O7,mgr),e(se,ggr),e(se,V7),e(V7,ibe),e(ibe,hgr),e(V7,pgr),e(V7,QW),e(QW,_gr),e(V7,ugr),e(se,bgr),e(se,X7),e(X7,dbe),e(dbe,vgr),e(X7,Fgr),e(X7,HW),e(HW,Tgr),e(X7,Mgr),e(se,Egr),e(se,z7),e(z7,cbe),e(cbe,Cgr),e(z7,wgr),e(z7,UW),e(UW,Agr),e(z7,ygr),e(se,Lgr),e(se,W7),e(W7,fbe),e(fbe,xgr),e(W7,$gr),e(W7,JW),e(JW,kgr),e(W7,Sgr),e(se,Rgr),e(se,Q7),e(Q7,mbe),e(mbe,Pgr),e(Q7,Bgr),e(Q7,YW),e(YW,Igr),e(Q7,qgr),e(se,Ngr),e(se,H7),e(H7,gbe),e(gbe,jgr),e(H7,Dgr),e(H7,KW),e(KW,Ggr),e(H7,Ogr),e(se,Vgr),e(se,U7),e(U7,hbe),e(hbe,Xgr),e(U7,zgr),e(U7,ZW),e(ZW,Wgr),e(U7,Qgr),e(se,Hgr),e(se,J7),e(J7,pbe),e(pbe,Ugr),e(J7,Jgr),e(J7,eQ),e(eQ,Ygr),e(J7,Kgr),e(se,Zgr),e(se,Y7),e(Y7,_be),e(_be,ehr),e(Y7,ohr),e(Y7,oQ),e(oQ,rhr),e(Y7,thr),e(se,ahr),e(se,K7),e(K7,ube),e(ube,nhr),e(K7,shr),e(K7,rQ),e(rQ,lhr),e(K7,ihr),e(se,dhr),e(se,Z7),e(Z7,bbe),e(bbe,chr),e(Z7,fhr),e(Z7,tQ),e(tQ,mhr),e(Z7,ghr),e(se,hhr),e(se,e9),e(e9,vbe),e(vbe,phr),e(e9,_hr),e(e9,aQ),e(aQ,uhr),e(e9,bhr),e(se,vhr),e(se,o9),e(o9,Fbe),e(Fbe,Fhr),e(o9,Thr),e(o9,nQ),e(nQ,Mhr),e(o9,Ehr),e(se,Chr),e(se,r9),e(r9,Tbe),e(Tbe,whr),e(r9,Ahr),e(r9,sQ),e(sQ,yhr),e(r9,Lhr),e(se,xhr),e(se,t9),e(t9,Mbe),e(Mbe,$hr),e(t9,khr),e(t9,lQ),e(lQ,Shr),e(t9,Rhr),e(se,Phr),e(se,a9),e(a9,Ebe),e(Ebe,Bhr),e(a9,Ihr),e(a9,iQ),e(iQ,qhr),e(a9,Nhr),e(se,jhr),e(se,n9),e(n9,Cbe),e(Cbe,Dhr),e(n9,Ghr),e(n9,dQ),e(dQ,Ohr),e(n9,Vhr),e(se,Xhr),e(se,s9),e(s9,wbe),e(wbe,zhr),e(s9,Whr),e(s9,cQ),e(cQ,Qhr),e(s9,Hhr),e(se,Uhr),e(se,l9),e(l9,Abe),e(Abe,Jhr),e(l9,Yhr),e(l9,fQ),e(fQ,Khr),e(l9,Zhr),e(se,epr),e(se,i9),e(i9,ybe),e(ybe,opr),e(i9,rpr),e(i9,mQ),e(mQ,tpr),e(i9,apr),e(se,npr),e(se,d9),e(d9,Lbe),e(Lbe,spr),e(d9,lpr),e(d9,gQ),e(gQ,ipr),e(d9,dpr),e(Ar,cpr),M(c9,Ar,null),b(f,GNe,u),b(f,Qd,u),e(Qd,f9),e(f9,xbe),M(gL,xbe,null),e(Qd,fpr),e(Qd,$be),e($be,mpr),b(f,ONe,u),b(f,Zo,u),M(hL,Zo,null),e(Zo,gpr),e(Zo,Hd),e(Hd,hpr),e(Hd,hQ),e(hQ,ppr),e(Hd,_pr),e(Hd,pQ),e(pQ,upr),e(Hd,bpr),e(Zo,vpr),e(Zo,pL),e(pL,Fpr),e(pL,kbe),e(kbe,Tpr),e(pL,Mpr),e(Zo,Epr),e(Zo,xt),M(_L,xt,null),e(xt,Cpr),e(xt,Sbe),e(Sbe,wpr),e(xt,Apr),e(xt,Ud),e(Ud,ypr),e(Ud,Rbe),e(Rbe,Lpr),e(Ud,xpr),e(Ud,_Q),e(_Q,$pr),e(Ud,kpr),e(xt,Spr),M(m9,xt,null),e(Zo,Rpr),e(Zo,yr),M(uL,yr,null),e(yr,Ppr),e(yr,Pbe),e(Pbe,Bpr),e(yr,Ipr),e(yr,en),e(en,qpr),e(en,Bbe),e(Bbe,Npr),e(en,jpr),e(en,Ibe),e(Ibe,Dpr),e(en,Gpr),e(en,qbe),e(qbe,Opr),e(en,Vpr),e(yr,Xpr),e(yr,Ee),e(Ee,g9),e(g9,Nbe),e(Nbe,zpr),e(g9,Wpr),e(g9,uQ),e(uQ,Qpr),e(g9,Hpr),e(Ee,Upr),e(Ee,h9),e(h9,jbe),e(jbe,Jpr),e(h9,Ypr),e(h9,bQ),e(bQ,Kpr),e(h9,Zpr),e(Ee,e_r),e(Ee,p9),e(p9,Dbe),e(Dbe,o_r),e(p9,r_r),e(p9,vQ),e(vQ,t_r),e(p9,a_r),e(Ee,n_r),e(Ee,_9),e(_9,Gbe),e(Gbe,s_r),e(_9,l_r),e(_9,FQ),e(FQ,i_r),e(_9,d_r),e(Ee,c_r),e(Ee,u9),e(u9,Obe),e(Obe,f_r),e(u9,m_r),e(u9,TQ),e(TQ,g_r),e(u9,h_r),e(Ee,p_r),e(Ee,b9),e(b9,Vbe),e(Vbe,__r),e(b9,u_r),e(b9,MQ),e(MQ,b_r),e(b9,v_r),e(Ee,F_r),e(Ee,v9),e(v9,Xbe),e(Xbe,T_r),e(v9,M_r),e(v9,EQ),e(EQ,E_r),e(v9,C_r),e(Ee,w_r),e(Ee,F9),e(F9,zbe),e(zbe,A_r),e(F9,y_r),e(F9,CQ),e(CQ,L_r),e(F9,x_r),e(Ee,$_r),e(Ee,T9),e(T9,Wbe),e(Wbe,k_r),e(T9,S_r),e(T9,wQ),e(wQ,R_r),e(T9,P_r),e(Ee,B_r),e(Ee,M9),e(M9,Qbe),e(Qbe,I_r),e(M9,q_r),e(M9,AQ),e(AQ,N_r),e(M9,j_r),e(Ee,D_r),e(Ee,E9),e(E9,Hbe),e(Hbe,G_r),e(E9,O_r),e(E9,yQ),e(yQ,V_r),e(E9,X_r),e(Ee,z_r),e(Ee,C9),e(C9,Ube),e(Ube,W_r),e(C9,Q_r),e(C9,LQ),e(LQ,H_r),e(C9,U_r),e(yr,J_r),M(w9,yr,null),b(f,VNe,u),b(f,Jd,u),e(Jd,A9),e(A9,Jbe),M(bL,Jbe,null),e(Jd,Y_r),e(Jd,Ybe),e(Ybe,K_r),b(f,XNe,u),b(f,er,u),M(vL,er,null),e(er,Z_r),e(er,Yd),e(Yd,eur),e(Yd,xQ),e(xQ,our),e(Yd,rur),e(Yd,$Q),e($Q,tur),e(Yd,aur),e(er,nur),e(er,FL),e(FL,sur),e(FL,Kbe),e(Kbe,lur),e(FL,iur),e(er,dur),e(er,$t),M(TL,$t,null),e($t,cur),e($t,Zbe),e(Zbe,fur),e($t,mur),e($t,Kd),e(Kd,gur),e(Kd,eve),e(eve,hur),e(Kd,pur),e(Kd,kQ),e(kQ,_ur),e(Kd,uur),e($t,bur),M(y9,$t,null),e(er,vur),e(er,Lr),M(ML,Lr,null),e(Lr,Fur),e(Lr,ove),e(ove,Tur),e(Lr,Mur),e(Lr,on),e(on,Eur),e(on,rve),e(rve,Cur),e(on,wur),e(on,tve),e(tve,Aur),e(on,yur),e(on,ave),e(ave,Lur),e(on,xur),e(Lr,$ur),e(Lr,rn),e(rn,L9),e(L9,nve),e(nve,kur),e(L9,Sur),e(L9,SQ),e(SQ,Rur),e(L9,Pur),e(rn,Bur),e(rn,x9),e(x9,sve),e(sve,Iur),e(x9,qur),e(x9,RQ),e(RQ,Nur),e(x9,jur),e(rn,Dur),e(rn,$9),e($9,lve),e(lve,Gur),e($9,Our),e($9,PQ),e(PQ,Vur),e($9,Xur),e(rn,zur),e(rn,k9),e(k9,ive),e(ive,Wur),e(k9,Qur),e(k9,BQ),e(BQ,Hur),e(k9,Uur),e(Lr,Jur),M(S9,Lr,null),b(f,zNe,u),b(f,Zd,u),e(Zd,R9),e(R9,dve),M(EL,dve,null),e(Zd,Yur),e(Zd,cve),e(cve,Kur),b(f,WNe,u),b(f,or,u),M(CL,or,null),e(or,Zur),e(or,ec),e(ec,e2r),e(ec,IQ),e(IQ,o2r),e(ec,r2r),e(ec,qQ),e(qQ,t2r),e(ec,a2r),e(or,n2r),e(or,wL),e(wL,s2r),e(wL,fve),e(fve,l2r),e(wL,i2r),e(or,d2r),e(or,kt),M(AL,kt,null),e(kt,c2r),e(kt,mve),e(mve,f2r),e(kt,m2r),e(kt,oc),e(oc,g2r),e(oc,gve),e(gve,h2r),e(oc,p2r),e(oc,NQ),e(NQ,_2r),e(oc,u2r),e(kt,b2r),M(P9,kt,null),e(or,v2r),e(or,xr),M(yL,xr,null),e(xr,F2r),e(xr,hve),e(hve,T2r),e(xr,M2r),e(xr,tn),e(tn,E2r),e(tn,pve),e(pve,C2r),e(tn,w2r),e(tn,_ve),e(_ve,A2r),e(tn,y2r),e(tn,uve),e(uve,L2r),e(tn,x2r),e(xr,$2r),e(xr,ie),e(ie,B9),e(B9,bve),e(bve,k2r),e(B9,S2r),e(B9,jQ),e(jQ,R2r),e(B9,P2r),e(ie,B2r),e(ie,I9),e(I9,vve),e(vve,I2r),e(I9,q2r),e(I9,DQ),e(DQ,N2r),e(I9,j2r),e(ie,D2r),e(ie,q9),e(q9,Fve),e(Fve,G2r),e(q9,O2r),e(q9,GQ),e(GQ,V2r),e(q9,X2r),e(ie,z2r),e(ie,N9),e(N9,Tve),e(Tve,W2r),e(N9,Q2r),e(N9,OQ),e(OQ,H2r),e(N9,U2r),e(ie,J2r),e(ie,j9),e(j9,Mve),e(Mve,Y2r),e(j9,K2r),e(j9,VQ),e(VQ,Z2r),e(j9,e1r),e(ie,o1r),e(ie,D9),e(D9,Eve),e(Eve,r1r),e(D9,t1r),e(D9,XQ),e(XQ,a1r),e(D9,n1r),e(ie,s1r),e(ie,G9),e(G9,Cve),e(Cve,l1r),e(G9,i1r),e(G9,zQ),e(zQ,d1r),e(G9,c1r),e(ie,f1r),e(ie,O9),e(O9,wve),e(wve,m1r),e(O9,g1r),e(O9,WQ),e(WQ,h1r),e(O9,p1r),e(ie,_1r),e(ie,V9),e(V9,Ave),e(Ave,u1r),e(V9,b1r),e(V9,QQ),e(QQ,v1r),e(V9,F1r),e(ie,T1r),e(ie,X9),e(X9,yve),e(yve,M1r),e(X9,E1r),e(X9,HQ),e(HQ,C1r),e(X9,w1r),e(ie,A1r),e(ie,z9),e(z9,Lve),e(Lve,y1r),e(z9,L1r),e(z9,UQ),e(UQ,x1r),e(z9,$1r),e(ie,k1r),e(ie,W9),e(W9,xve),e(xve,S1r),e(W9,R1r),e(W9,JQ),e(JQ,P1r),e(W9,B1r),e(ie,I1r),e(ie,Q9),e(Q9,$ve),e($ve,q1r),e(Q9,N1r),e(Q9,YQ),e(YQ,j1r),e(Q9,D1r),e(ie,G1r),e(ie,H9),e(H9,kve),e(kve,O1r),e(H9,V1r),e(H9,KQ),e(KQ,X1r),e(H9,z1r),e(ie,W1r),e(ie,U9),e(U9,Sve),e(Sve,Q1r),e(U9,H1r),e(U9,ZQ),e(ZQ,U1r),e(U9,J1r),e(ie,Y1r),e(ie,J9),e(J9,Rve),e(Rve,K1r),e(J9,Z1r),e(J9,eH),e(eH,ebr),e(J9,obr),e(ie,rbr),e(ie,Y9),e(Y9,Pve),e(Pve,tbr),e(Y9,abr),e(Y9,oH),e(oH,nbr),e(Y9,sbr),e(ie,lbr),e(ie,K9),e(K9,Bve),e(Bve,ibr),e(K9,dbr),e(K9,rH),e(rH,cbr),e(K9,fbr),e(ie,mbr),e(ie,Z9),e(Z9,Ive),e(Ive,gbr),e(Z9,hbr),e(Z9,tH),e(tH,pbr),e(Z9,_br),e(ie,ubr),e(ie,eM),e(eM,qve),e(qve,bbr),e(eM,vbr),e(eM,aH),e(aH,Fbr),e(eM,Tbr),e(xr,Mbr),M(oM,xr,null),b(f,QNe,u),b(f,rc,u),e(rc,rM),e(rM,Nve),M(LL,Nve,null),e(rc,Ebr),e(rc,jve),e(jve,Cbr),b(f,HNe,u),b(f,rr,u),M(xL,rr,null),e(rr,wbr),e(rr,tc),e(tc,Abr),e(tc,nH),e(nH,ybr),e(tc,Lbr),e(tc,sH),e(sH,xbr),e(tc,$br),e(rr,kbr),e(rr,$L),e($L,Sbr),e($L,Dve),e(Dve,Rbr),e($L,Pbr),e(rr,Bbr),e(rr,St),M(kL,St,null),e(St,Ibr),e(St,Gve),e(Gve,qbr),e(St,Nbr),e(St,ac),e(ac,jbr),e(ac,Ove),e(Ove,Dbr),e(ac,Gbr),e(ac,lH),e(lH,Obr),e(ac,Vbr),e(St,Xbr),M(tM,St,null),e(rr,zbr),e(rr,$r),M(SL,$r,null),e($r,Wbr),e($r,Vve),e(Vve,Qbr),e($r,Hbr),e($r,an),e(an,Ubr),e(an,Xve),e(Xve,Jbr),e(an,Ybr),e(an,zve),e(zve,Kbr),e(an,Zbr),e(an,Wve),e(Wve,evr),e(an,ovr),e($r,rvr),e($r,ye),e(ye,aM),e(aM,Qve),e(Qve,tvr),e(aM,avr),e(aM,iH),e(iH,nvr),e(aM,svr),e(ye,lvr),e(ye,nM),e(nM,Hve),e(Hve,ivr),e(nM,dvr),e(nM,dH),e(dH,cvr),e(nM,fvr),e(ye,mvr),e(ye,sM),e(sM,Uve),e(Uve,gvr),e(sM,hvr),e(sM,cH),e(cH,pvr),e(sM,_vr),e(ye,uvr),e(ye,lM),e(lM,Jve),e(Jve,bvr),e(lM,vvr),e(lM,fH),e(fH,Fvr),e(lM,Tvr),e(ye,Mvr),e(ye,iM),e(iM,Yve),e(Yve,Evr),e(iM,Cvr),e(iM,mH),e(mH,wvr),e(iM,Avr),e(ye,yvr),e(ye,dM),e(dM,Kve),e(Kve,Lvr),e(dM,xvr),e(dM,gH),e(gH,$vr),e(dM,kvr),e(ye,Svr),e(ye,cM),e(cM,Zve),e(Zve,Rvr),e(cM,Pvr),e(cM,hH),e(hH,Bvr),e(cM,Ivr),e(ye,qvr),e(ye,fM),e(fM,eFe),e(eFe,Nvr),e(fM,jvr),e(fM,pH),e(pH,Dvr),e(fM,Gvr),e(ye,Ovr),e(ye,mM),e(mM,oFe),e(oFe,Vvr),e(mM,Xvr),e(mM,_H),e(_H,zvr),e(mM,Wvr),e(ye,Qvr),e(ye,gM),e(gM,rFe),e(rFe,Hvr),e(gM,Uvr),e(gM,uH),e(uH,Jvr),e(gM,Yvr),e($r,Kvr),M(hM,$r,null),b(f,UNe,u),b(f,nc,u),e(nc,pM),e(pM,tFe),M(RL,tFe,null),e(nc,Zvr),e(nc,aFe),e(aFe,eFr),b(f,JNe,u),b(f,tr,u),M(PL,tr,null),e(tr,oFr),e(tr,sc),e(sc,rFr),e(sc,bH),e(bH,tFr),e(sc,aFr),e(sc,vH),e(vH,nFr),e(sc,sFr),e(tr,lFr),e(tr,BL),e(BL,iFr),e(BL,nFe),e(nFe,dFr),e(BL,cFr),e(tr,fFr),e(tr,Rt),M(IL,Rt,null),e(Rt,mFr),e(Rt,sFe),e(sFe,gFr),e(Rt,hFr),e(Rt,lc),e(lc,pFr),e(lc,lFe),e(lFe,_Fr),e(lc,uFr),e(lc,FH),e(FH,bFr),e(lc,vFr),e(Rt,FFr),M(_M,Rt,null),e(tr,TFr),e(tr,kr),M(qL,kr,null),e(kr,MFr),e(kr,iFe),e(iFe,EFr),e(kr,CFr),e(kr,nn),e(nn,wFr),e(nn,dFe),e(dFe,AFr),e(nn,yFr),e(nn,cFe),e(cFe,LFr),e(nn,xFr),e(nn,fFe),e(fFe,$Fr),e(nn,kFr),e(kr,SFr),e(kr,ee),e(ee,uM),e(uM,mFe),e(mFe,RFr),e(uM,PFr),e(uM,TH),e(TH,BFr),e(uM,IFr),e(ee,qFr),e(ee,bM),e(bM,gFe),e(gFe,NFr),e(bM,jFr),e(bM,MH),e(MH,DFr),e(bM,GFr),e(ee,OFr),e(ee,vM),e(vM,hFe),e(hFe,VFr),e(vM,XFr),e(vM,EH),e(EH,zFr),e(vM,WFr),e(ee,QFr),e(ee,FM),e(FM,pFe),e(pFe,HFr),e(FM,UFr),e(FM,CH),e(CH,JFr),e(FM,YFr),e(ee,KFr),e(ee,TM),e(TM,_Fe),e(_Fe,ZFr),e(TM,e6r),e(TM,wH),e(wH,o6r),e(TM,r6r),e(ee,t6r),e(ee,MM),e(MM,uFe),e(uFe,a6r),e(MM,n6r),e(MM,AH),e(AH,s6r),e(MM,l6r),e(ee,i6r),e(ee,EM),e(EM,bFe),e(bFe,d6r),e(EM,c6r),e(EM,yH),e(yH,f6r),e(EM,m6r),e(ee,g6r),e(ee,CM),e(CM,vFe),e(vFe,h6r),e(CM,p6r),e(CM,LH),e(LH,_6r),e(CM,u6r),e(ee,b6r),e(ee,wM),e(wM,FFe),e(FFe,v6r),e(wM,F6r),e(wM,xH),e(xH,T6r),e(wM,M6r),e(ee,E6r),e(ee,AM),e(AM,TFe),e(TFe,C6r),e(AM,w6r),e(AM,$H),e($H,A6r),e(AM,y6r),e(ee,L6r),e(ee,yM),e(yM,MFe),e(MFe,x6r),e(yM,$6r),e(yM,kH),e(kH,k6r),e(yM,S6r),e(ee,R6r),e(ee,LM),e(LM,EFe),e(EFe,P6r),e(LM,B6r),e(LM,SH),e(SH,I6r),e(LM,q6r),e(ee,N6r),e(ee,xM),e(xM,CFe),e(CFe,j6r),e(xM,D6r),e(xM,RH),e(RH,G6r),e(xM,O6r),e(ee,V6r),e(ee,$M),e($M,wFe),e(wFe,X6r),e($M,z6r),e($M,PH),e(PH,W6r),e($M,Q6r),e(ee,H6r),e(ee,kM),e(kM,AFe),e(AFe,U6r),e(kM,J6r),e(kM,BH),e(BH,Y6r),e(kM,K6r),e(ee,Z6r),e(ee,SM),e(SM,yFe),e(yFe,eTr),e(SM,oTr),e(SM,IH),e(IH,rTr),e(SM,tTr),e(ee,aTr),e(ee,RM),e(RM,LFe),e(LFe,nTr),e(RM,sTr),e(RM,qH),e(qH,lTr),e(RM,iTr),e(ee,dTr),e(ee,PM),e(PM,xFe),e(xFe,cTr),e(PM,fTr),e(PM,NH),e(NH,mTr),e(PM,gTr),e(ee,hTr),e(ee,BM),e(BM,$Fe),e($Fe,pTr),e(BM,_Tr),e(BM,jH),e(jH,uTr),e(BM,bTr),e(ee,vTr),e(ee,IM),e(IM,kFe),e(kFe,FTr),e(IM,TTr),e(IM,DH),e(DH,MTr),e(IM,ETr),e(ee,CTr),e(ee,qM),e(qM,SFe),e(SFe,wTr),e(qM,ATr),e(qM,GH),e(GH,yTr),e(qM,LTr),e(ee,xTr),e(ee,NM),e(NM,RFe),e(RFe,$Tr),e(NM,kTr),e(NM,OH),e(OH,STr),e(NM,RTr),e(ee,PTr),e(ee,jM),e(jM,PFe),e(PFe,BTr),e(jM,ITr),e(jM,VH),e(VH,qTr),e(jM,NTr),e(ee,jTr),e(ee,DM),e(DM,BFe),e(BFe,DTr),e(DM,GTr),e(DM,XH),e(XH,OTr),e(DM,VTr),e(ee,XTr),e(ee,GM),e(GM,IFe),e(IFe,zTr),e(GM,WTr),e(GM,zH),e(zH,QTr),e(GM,HTr),e(ee,UTr),e(ee,OM),e(OM,qFe),e(qFe,JTr),e(OM,YTr),e(OM,WH),e(WH,KTr),e(OM,ZTr),e(kr,e7r),M(VM,kr,null),b(f,YNe,u),b(f,ic,u),e(ic,XM),e(XM,NFe),M(NL,NFe,null),e(ic,o7r),e(ic,jFe),e(jFe,r7r),b(f,KNe,u),b(f,ar,u),M(jL,ar,null),e(ar,t7r),e(ar,dc),e(dc,a7r),e(dc,QH),e(QH,n7r),e(dc,s7r),e(dc,HH),e(HH,l7r),e(dc,i7r),e(ar,d7r),e(ar,DL),e(DL,c7r),e(DL,DFe),e(DFe,f7r),e(DL,m7r),e(ar,g7r),e(ar,Pt),M(GL,Pt,null),e(Pt,h7r),e(Pt,GFe),e(GFe,p7r),e(Pt,_7r),e(Pt,cc),e(cc,u7r),e(cc,OFe),e(OFe,b7r),e(cc,v7r),e(cc,UH),e(UH,F7r),e(cc,T7r),e(Pt,M7r),M(zM,Pt,null),e(ar,E7r),e(ar,Sr),M(OL,Sr,null),e(Sr,C7r),e(Sr,VFe),e(VFe,w7r),e(Sr,A7r),e(Sr,sn),e(sn,y7r),e(sn,XFe),e(XFe,L7r),e(sn,x7r),e(sn,zFe),e(zFe,$7r),e(sn,k7r),e(sn,WFe),e(WFe,S7r),e(sn,R7r),e(Sr,P7r),e(Sr,pe),e(pe,WM),e(WM,QFe),e(QFe,B7r),e(WM,I7r),e(WM,JH),e(JH,q7r),e(WM,N7r),e(pe,j7r),e(pe,QM),e(QM,HFe),e(HFe,D7r),e(QM,G7r),e(QM,YH),e(YH,O7r),e(QM,V7r),e(pe,X7r),e(pe,HM),e(HM,UFe),e(UFe,z7r),e(HM,W7r),e(HM,KH),e(KH,Q7r),e(HM,H7r),e(pe,U7r),e(pe,UM),e(UM,JFe),e(JFe,J7r),e(UM,Y7r),e(UM,ZH),e(ZH,K7r),e(UM,Z7r),e(pe,e9r),e(pe,JM),e(JM,YFe),e(YFe,o9r),e(JM,r9r),e(JM,eU),e(eU,t9r),e(JM,a9r),e(pe,n9r),e(pe,YM),e(YM,KFe),e(KFe,s9r),e(YM,l9r),e(YM,oU),e(oU,i9r),e(YM,d9r),e(pe,c9r),e(pe,KM),e(KM,ZFe),e(ZFe,f9r),e(KM,m9r),e(KM,rU),e(rU,g9r),e(KM,h9r),e(pe,p9r),e(pe,ZM),e(ZM,e6e),e(e6e,_9r),e(ZM,u9r),e(ZM,tU),e(tU,b9r),e(ZM,v9r),e(pe,F9r),e(pe,e4),e(e4,o6e),e(o6e,T9r),e(e4,M9r),e(e4,aU),e(aU,E9r),e(e4,C9r),e(pe,w9r),e(pe,o4),e(o4,r6e),e(r6e,A9r),e(o4,y9r),e(o4,nU),e(nU,L9r),e(o4,x9r),e(pe,$9r),e(pe,r4),e(r4,t6e),e(t6e,k9r),e(r4,S9r),e(r4,sU),e(sU,R9r),e(r4,P9r),e(pe,B9r),e(pe,t4),e(t4,a6e),e(a6e,I9r),e(t4,q9r),e(t4,lU),e(lU,N9r),e(t4,j9r),e(pe,D9r),e(pe,a4),e(a4,n6e),e(n6e,G9r),e(a4,O9r),e(a4,iU),e(iU,V9r),e(a4,X9r),e(pe,z9r),e(pe,n4),e(n4,s6e),e(s6e,W9r),e(n4,Q9r),e(n4,dU),e(dU,H9r),e(n4,U9r),e(pe,J9r),e(pe,s4),e(s4,l6e),e(l6e,Y9r),e(s4,K9r),e(s4,cU),e(cU,Z9r),e(s4,eMr),e(pe,oMr),e(pe,l4),e(l4,i6e),e(i6e,rMr),e(l4,tMr),e(l4,fU),e(fU,aMr),e(l4,nMr),e(pe,sMr),e(pe,i4),e(i4,d6e),e(d6e,lMr),e(i4,iMr),e(i4,mU),e(mU,dMr),e(i4,cMr),e(Sr,fMr),M(d4,Sr,null),b(f,ZNe,u),b(f,fc,u),e(fc,c4),e(c4,c6e),M(VL,c6e,null),e(fc,mMr),e(fc,f6e),e(f6e,gMr),b(f,eje,u),b(f,nr,u),M(XL,nr,null),e(nr,hMr),e(nr,mc),e(mc,pMr),e(mc,gU),e(gU,_Mr),e(mc,uMr),e(mc,hU),e(hU,bMr),e(mc,vMr),e(nr,FMr),e(nr,zL),e(zL,TMr),e(zL,m6e),e(m6e,MMr),e(zL,EMr),e(nr,CMr),e(nr,Bt),M(WL,Bt,null),e(Bt,wMr),e(Bt,g6e),e(g6e,AMr),e(Bt,yMr),e(Bt,gc),e(gc,LMr),e(gc,h6e),e(h6e,xMr),e(gc,$Mr),e(gc,pU),e(pU,kMr),e(gc,SMr),e(Bt,RMr),M(f4,Bt,null),e(nr,PMr),e(nr,Rr),M(QL,Rr,null),e(Rr,BMr),e(Rr,p6e),e(p6e,IMr),e(Rr,qMr),e(Rr,ln),e(ln,NMr),e(ln,_6e),e(_6e,jMr),e(ln,DMr),e(ln,u6e),e(u6e,GMr),e(ln,OMr),e(ln,b6e),e(b6e,VMr),e(ln,XMr),e(Rr,zMr),e(Rr,HL),e(HL,m4),e(m4,v6e),e(v6e,WMr),e(m4,QMr),e(m4,_U),e(_U,HMr),e(m4,UMr),e(HL,JMr),e(HL,g4),e(g4,F6e),e(F6e,YMr),e(g4,KMr),e(g4,uU),e(uU,ZMr),e(g4,e4r),e(Rr,o4r),M(h4,Rr,null),b(f,oje,u),b(f,hc,u),e(hc,p4),e(p4,T6e),M(UL,T6e,null),e(hc,r4r),e(hc,M6e),e(M6e,t4r),b(f,rje,u),b(f,sr,u),M(JL,sr,null),e(sr,a4r),e(sr,pc),e(pc,n4r),e(pc,bU),e(bU,s4r),e(pc,l4r),e(pc,vU),e(vU,i4r),e(pc,d4r),e(sr,c4r),e(sr,YL),e(YL,f4r),e(YL,E6e),e(E6e,m4r),e(YL,g4r),e(sr,h4r),e(sr,It),M(KL,It,null),e(It,p4r),e(It,C6e),e(C6e,_4r),e(It,u4r),e(It,_c),e(_c,b4r),e(_c,w6e),e(w6e,v4r),e(_c,F4r),e(_c,FU),e(FU,T4r),e(_c,M4r),e(It,E4r),M(_4,It,null),e(sr,C4r),e(sr,Pr),M(ZL,Pr,null),e(Pr,w4r),e(Pr,A6e),e(A6e,A4r),e(Pr,y4r),e(Pr,dn),e(dn,L4r),e(dn,y6e),e(y6e,x4r),e(dn,$4r),e(dn,L6e),e(L6e,k4r),e(dn,S4r),e(dn,x6e),e(x6e,R4r),e(dn,P4r),e(Pr,B4r),e(Pr,$6e),e($6e,u4),e(u4,k6e),e(k6e,I4r),e(u4,q4r),e(u4,TU),e(TU,N4r),e(u4,j4r),e(Pr,D4r),M(b4,Pr,null),b(f,tje,u),b(f,uc,u),e(uc,v4),e(v4,S6e),M(e8,S6e,null),e(uc,G4r),e(uc,R6e),e(R6e,O4r),b(f,aje,u),b(f,lr,u),M(o8,lr,null),e(lr,V4r),e(lr,bc),e(bc,X4r),e(bc,MU),e(MU,z4r),e(bc,W4r),e(bc,EU),e(EU,Q4r),e(bc,H4r),e(lr,U4r),e(lr,r8),e(r8,J4r),e(r8,P6e),e(P6e,Y4r),e(r8,K4r),e(lr,Z4r),e(lr,qt),M(t8,qt,null),e(qt,eEr),e(qt,B6e),e(B6e,oEr),e(qt,rEr),e(qt,vc),e(vc,tEr),e(vc,I6e),e(I6e,aEr),e(vc,nEr),e(vc,CU),e(CU,sEr),e(vc,lEr),e(qt,iEr),M(F4,qt,null),e(lr,dEr),e(lr,Br),M(a8,Br,null),e(Br,cEr),e(Br,q6e),e(q6e,fEr),e(Br,mEr),e(Br,cn),e(cn,gEr),e(cn,N6e),e(N6e,hEr),e(cn,pEr),e(cn,j6e),e(j6e,_Er),e(cn,uEr),e(cn,D6e),e(D6e,bEr),e(cn,vEr),e(Br,FEr),e(Br,de),e(de,T4),e(T4,G6e),e(G6e,TEr),e(T4,MEr),e(T4,wU),e(wU,EEr),e(T4,CEr),e(de,wEr),e(de,M4),e(M4,O6e),e(O6e,AEr),e(M4,yEr),e(M4,AU),e(AU,LEr),e(M4,xEr),e(de,$Er),e(de,E4),e(E4,V6e),e(V6e,kEr),e(E4,SEr),e(E4,yU),e(yU,REr),e(E4,PEr),e(de,BEr),e(de,C4),e(C4,X6e),e(X6e,IEr),e(C4,qEr),e(C4,LU),e(LU,NEr),e(C4,jEr),e(de,DEr),e(de,w4),e(w4,z6e),e(z6e,GEr),e(w4,OEr),e(w4,xU),e(xU,VEr),e(w4,XEr),e(de,zEr),e(de,A4),e(A4,W6e),e(W6e,WEr),e(A4,QEr),e(A4,$U),e($U,HEr),e(A4,UEr),e(de,JEr),e(de,y4),e(y4,Q6e),e(Q6e,YEr),e(y4,KEr),e(y4,kU),e(kU,ZEr),e(y4,e5r),e(de,o5r),e(de,L4),e(L4,H6e),e(H6e,r5r),e(L4,t5r),e(L4,SU),e(SU,a5r),e(L4,n5r),e(de,s5r),e(de,x4),e(x4,U6e),e(U6e,l5r),e(x4,i5r),e(x4,RU),e(RU,d5r),e(x4,c5r),e(de,f5r),e(de,$4),e($4,J6e),e(J6e,m5r),e($4,g5r),e($4,PU),e(PU,h5r),e($4,p5r),e(de,_5r),e(de,k4),e(k4,Y6e),e(Y6e,u5r),e(k4,b5r),e(k4,BU),e(BU,v5r),e(k4,F5r),e(de,T5r),e(de,S4),e(S4,K6e),e(K6e,M5r),e(S4,E5r),e(S4,IU),e(IU,C5r),e(S4,w5r),e(de,A5r),e(de,R4),e(R4,Z6e),e(Z6e,y5r),e(R4,L5r),e(R4,qU),e(qU,x5r),e(R4,$5r),e(de,k5r),e(de,P4),e(P4,eTe),e(eTe,S5r),e(P4,R5r),e(P4,NU),e(NU,P5r),e(P4,B5r),e(de,I5r),e(de,B4),e(B4,oTe),e(oTe,q5r),e(B4,N5r),e(B4,jU),e(jU,j5r),e(B4,D5r),e(de,G5r),e(de,I4),e(I4,rTe),e(rTe,O5r),e(I4,V5r),e(I4,DU),e(DU,X5r),e(I4,z5r),e(de,W5r),e(de,q4),e(q4,tTe),e(tTe,Q5r),e(q4,H5r),e(q4,GU),e(GU,U5r),e(q4,J5r),e(de,Y5r),e(de,N4),e(N4,aTe),e(aTe,K5r),e(N4,Z5r),e(N4,OU),e(OU,eCr),e(N4,oCr),e(de,rCr),e(de,j4),e(j4,nTe),e(nTe,tCr),e(j4,aCr),e(j4,VU),e(VU,nCr),e(j4,sCr),e(de,lCr),e(de,D4),e(D4,sTe),e(sTe,iCr),e(D4,dCr),e(D4,XU),e(XU,cCr),e(D4,fCr),e(Br,mCr),M(G4,Br,null),b(f,nje,u),b(f,Fc,u),e(Fc,O4),e(O4,lTe),M(n8,lTe,null),e(Fc,gCr),e(Fc,iTe),e(iTe,hCr),b(f,sje,u),b(f,ir,u),M(s8,ir,null),e(ir,pCr),e(ir,Tc),e(Tc,_Cr),e(Tc,zU),e(zU,uCr),e(Tc,bCr),e(Tc,WU),e(WU,vCr),e(Tc,FCr),e(ir,TCr),e(ir,l8),e(l8,MCr),e(l8,dTe),e(dTe,ECr),e(l8,CCr),e(ir,wCr),e(ir,Nt),M(i8,Nt,null),e(Nt,ACr),e(Nt,cTe),e(cTe,yCr),e(Nt,LCr),e(Nt,Mc),e(Mc,xCr),e(Mc,fTe),e(fTe,$Cr),e(Mc,kCr),e(Mc,QU),e(QU,SCr),e(Mc,RCr),e(Nt,PCr),M(V4,Nt,null),e(ir,BCr),e(ir,Ir),M(d8,Ir,null),e(Ir,ICr),e(Ir,mTe),e(mTe,qCr),e(Ir,NCr),e(Ir,fn),e(fn,jCr),e(fn,gTe),e(gTe,DCr),e(fn,GCr),e(fn,hTe),e(hTe,OCr),e(fn,VCr),e(fn,pTe),e(pTe,XCr),e(fn,zCr),e(Ir,WCr),e(Ir,ce),e(ce,X4),e(X4,_Te),e(_Te,QCr),e(X4,HCr),e(X4,HU),e(HU,UCr),e(X4,JCr),e(ce,YCr),e(ce,z4),e(z4,uTe),e(uTe,KCr),e(z4,ZCr),e(z4,UU),e(UU,e3r),e(z4,o3r),e(ce,r3r),e(ce,W4),e(W4,bTe),e(bTe,t3r),e(W4,a3r),e(W4,JU),e(JU,n3r),e(W4,s3r),e(ce,l3r),e(ce,Q4),e(Q4,vTe),e(vTe,i3r),e(Q4,d3r),e(Q4,YU),e(YU,c3r),e(Q4,f3r),e(ce,m3r),e(ce,H4),e(H4,FTe),e(FTe,g3r),e(H4,h3r),e(H4,KU),e(KU,p3r),e(H4,_3r),e(ce,u3r),e(ce,U4),e(U4,TTe),e(TTe,b3r),e(U4,v3r),e(U4,ZU),e(ZU,F3r),e(U4,T3r),e(ce,M3r),e(ce,J4),e(J4,MTe),e(MTe,E3r),e(J4,C3r),e(J4,eJ),e(eJ,w3r),e(J4,A3r),e(ce,y3r),e(ce,Y4),e(Y4,ETe),e(ETe,L3r),e(Y4,x3r),e(Y4,oJ),e(oJ,$3r),e(Y4,k3r),e(ce,S3r),e(ce,K4),e(K4,CTe),e(CTe,R3r),e(K4,P3r),e(K4,rJ),e(rJ,B3r),e(K4,I3r),e(ce,q3r),e(ce,Z4),e(Z4,wTe),e(wTe,N3r),e(Z4,j3r),e(Z4,tJ),e(tJ,D3r),e(Z4,G3r),e(ce,O3r),e(ce,eE),e(eE,ATe),e(ATe,V3r),e(eE,X3r),e(eE,aJ),e(aJ,z3r),e(eE,W3r),e(ce,Q3r),e(ce,oE),e(oE,yTe),e(yTe,H3r),e(oE,U3r),e(oE,nJ),e(nJ,J3r),e(oE,Y3r),e(ce,K3r),e(ce,rE),e(rE,LTe),e(LTe,Z3r),e(rE,ewr),e(rE,sJ),e(sJ,owr),e(rE,rwr),e(ce,twr),e(ce,tE),e(tE,xTe),e(xTe,awr),e(tE,nwr),e(tE,lJ),e(lJ,swr),e(tE,lwr),e(ce,iwr),e(ce,aE),e(aE,$Te),e($Te,dwr),e(aE,cwr),e(aE,iJ),e(iJ,fwr),e(aE,mwr),e(ce,gwr),e(ce,nE),e(nE,kTe),e(kTe,hwr),e(nE,pwr),e(nE,dJ),e(dJ,_wr),e(nE,uwr),e(ce,bwr),e(ce,sE),e(sE,STe),e(STe,vwr),e(sE,Fwr),e(sE,cJ),e(cJ,Twr),e(sE,Mwr),e(ce,Ewr),e(ce,lE),e(lE,RTe),e(RTe,Cwr),e(lE,wwr),e(lE,fJ),e(fJ,Awr),e(lE,ywr),e(ce,Lwr),e(ce,iE),e(iE,PTe),e(PTe,xwr),e(iE,$wr),e(iE,mJ),e(mJ,kwr),e(iE,Swr),e(ce,Rwr),e(ce,dE),e(dE,BTe),e(BTe,Pwr),e(dE,Bwr),e(dE,gJ),e(gJ,Iwr),e(dE,qwr),e(Ir,Nwr),M(cE,Ir,null),b(f,lje,u),b(f,Ec,u),e(Ec,fE),e(fE,ITe),M(c8,ITe,null),e(Ec,jwr),e(Ec,qTe),e(qTe,Dwr),b(f,ije,u),b(f,dr,u),M(f8,dr,null),e(dr,Gwr),e(dr,Cc),e(Cc,Owr),e(Cc,hJ),e(hJ,Vwr),e(Cc,Xwr),e(Cc,pJ),e(pJ,zwr),e(Cc,Wwr),e(dr,Qwr),e(dr,m8),e(m8,Hwr),e(m8,NTe),e(NTe,Uwr),e(m8,Jwr),e(dr,Ywr),e(dr,jt),M(g8,jt,null),e(jt,Kwr),e(jt,jTe),e(jTe,Zwr),e(jt,e0r),e(jt,wc),e(wc,o0r),e(wc,DTe),e(DTe,r0r),e(wc,t0r),e(wc,_J),e(_J,a0r),e(wc,n0r),e(jt,s0r),M(mE,jt,null),e(dr,l0r),e(dr,qr),M(h8,qr,null),e(qr,i0r),e(qr,GTe),e(GTe,d0r),e(qr,c0r),e(qr,mn),e(mn,f0r),e(mn,OTe),e(OTe,m0r),e(mn,g0r),e(mn,VTe),e(VTe,h0r),e(mn,p0r),e(mn,XTe),e(XTe,_0r),e(mn,u0r),e(qr,b0r),e(qr,zTe),e(zTe,gE),e(gE,WTe),e(WTe,v0r),e(gE,F0r),e(gE,uJ),e(uJ,T0r),e(gE,M0r),e(qr,E0r),M(hE,qr,null),b(f,dje,u),b(f,Ac,u),e(Ac,pE),e(pE,QTe),M(p8,QTe,null),e(Ac,C0r),e(Ac,HTe),e(HTe,w0r),b(f,cje,u),b(f,cr,u),M(_8,cr,null),e(cr,A0r),e(cr,yc),e(yc,y0r),e(yc,bJ),e(bJ,L0r),e(yc,x0r),e(yc,vJ),e(vJ,$0r),e(yc,k0r),e(cr,S0r),e(cr,u8),e(u8,R0r),e(u8,UTe),e(UTe,P0r),e(u8,B0r),e(cr,I0r),e(cr,Dt),M(b8,Dt,null),e(Dt,q0r),e(Dt,JTe),e(JTe,N0r),e(Dt,j0r),e(Dt,Lc),e(Lc,D0r),e(Lc,YTe),e(YTe,G0r),e(Lc,O0r),e(Lc,FJ),e(FJ,V0r),e(Lc,X0r),e(Dt,z0r),M(_E,Dt,null),e(cr,W0r),e(cr,Nr),M(v8,Nr,null),e(Nr,Q0r),e(Nr,KTe),e(KTe,H0r),e(Nr,U0r),e(Nr,gn),e(gn,J0r),e(gn,ZTe),e(ZTe,Y0r),e(gn,K0r),e(gn,e7e),e(e7e,Z0r),e(gn,eAr),e(gn,o7e),e(o7e,oAr),e(gn,rAr),e(Nr,tAr),e(Nr,r7e),e(r7e,uE),e(uE,t7e),e(t7e,aAr),e(uE,nAr),e(uE,TJ),e(TJ,sAr),e(uE,lAr),e(Nr,iAr),M(bE,Nr,null),b(f,fje,u),b(f,xc,u),e(xc,vE),e(vE,a7e),M(F8,a7e,null),e(xc,dAr),e(xc,n7e),e(n7e,cAr),b(f,mje,u),b(f,fr,u),M(T8,fr,null),e(fr,fAr),e(fr,$c),e($c,mAr),e($c,MJ),e(MJ,gAr),e($c,hAr),e($c,EJ),e(EJ,pAr),e($c,_Ar),e(fr,uAr),e(fr,M8),e(M8,bAr),e(M8,s7e),e(s7e,vAr),e(M8,FAr),e(fr,TAr),e(fr,Gt),M(E8,Gt,null),e(Gt,MAr),e(Gt,l7e),e(l7e,EAr),e(Gt,CAr),e(Gt,kc),e(kc,wAr),e(kc,i7e),e(i7e,AAr),e(kc,yAr),e(kc,CJ),e(CJ,LAr),e(kc,xAr),e(Gt,$Ar),M(FE,Gt,null),e(fr,kAr),e(fr,jr),M(C8,jr,null),e(jr,SAr),e(jr,d7e),e(d7e,RAr),e(jr,PAr),e(jr,hn),e(hn,BAr),e(hn,c7e),e(c7e,IAr),e(hn,qAr),e(hn,f7e),e(f7e,NAr),e(hn,jAr),e(hn,m7e),e(m7e,DAr),e(hn,GAr),e(jr,OAr),e(jr,oe),e(oe,TE),e(TE,g7e),e(g7e,VAr),e(TE,XAr),e(TE,wJ),e(wJ,zAr),e(TE,WAr),e(oe,QAr),e(oe,ME),e(ME,h7e),e(h7e,HAr),e(ME,UAr),e(ME,AJ),e(AJ,JAr),e(ME,YAr),e(oe,KAr),e(oe,EE),e(EE,p7e),e(p7e,ZAr),e(EE,eyr),e(EE,yJ),e(yJ,oyr),e(EE,ryr),e(oe,tyr),e(oe,CE),e(CE,_7e),e(_7e,ayr),e(CE,nyr),e(CE,LJ),e(LJ,syr),e(CE,lyr),e(oe,iyr),e(oe,wE),e(wE,u7e),e(u7e,dyr),e(wE,cyr),e(wE,xJ),e(xJ,fyr),e(wE,myr),e(oe,gyr),e(oe,AE),e(AE,b7e),e(b7e,hyr),e(AE,pyr),e(AE,$J),e($J,_yr),e(AE,uyr),e(oe,byr),e(oe,yE),e(yE,v7e),e(v7e,vyr),e(yE,Fyr),e(yE,kJ),e(kJ,Tyr),e(yE,Myr),e(oe,Eyr),e(oe,LE),e(LE,F7e),e(F7e,Cyr),e(LE,wyr),e(LE,SJ),e(SJ,Ayr),e(LE,yyr),e(oe,Lyr),e(oe,xE),e(xE,T7e),e(T7e,xyr),e(xE,$yr),e(xE,RJ),e(RJ,kyr),e(xE,Syr),e(oe,Ryr),e(oe,$E),e($E,M7e),e(M7e,Pyr),e($E,Byr),e($E,PJ),e(PJ,Iyr),e($E,qyr),e(oe,Nyr),e(oe,kE),e(kE,E7e),e(E7e,jyr),e(kE,Dyr),e(kE,BJ),e(BJ,Gyr),e(kE,Oyr),e(oe,Vyr),e(oe,SE),e(SE,C7e),e(C7e,Xyr),e(SE,zyr),e(SE,IJ),e(IJ,Wyr),e(SE,Qyr),e(oe,Hyr),e(oe,RE),e(RE,w7e),e(w7e,Uyr),e(RE,Jyr),e(RE,qJ),e(qJ,Yyr),e(RE,Kyr),e(oe,Zyr),e(oe,PE),e(PE,A7e),e(A7e,eLr),e(PE,oLr),e(PE,NJ),e(NJ,rLr),e(PE,tLr),e(oe,aLr),e(oe,BE),e(BE,y7e),e(y7e,nLr),e(BE,sLr),e(BE,jJ),e(jJ,lLr),e(BE,iLr),e(oe,dLr),e(oe,IE),e(IE,L7e),e(L7e,cLr),e(IE,fLr),e(IE,DJ),e(DJ,mLr),e(IE,gLr),e(oe,hLr),e(oe,qE),e(qE,x7e),e(x7e,pLr),e(qE,_Lr),e(qE,GJ),e(GJ,uLr),e(qE,bLr),e(oe,vLr),e(oe,NE),e(NE,$7e),e($7e,FLr),e(NE,TLr),e(NE,OJ),e(OJ,MLr),e(NE,ELr),e(oe,CLr),e(oe,jE),e(jE,k7e),e(k7e,wLr),e(jE,ALr),e(jE,VJ),e(VJ,yLr),e(jE,LLr),e(oe,xLr),e(oe,DE),e(DE,S7e),e(S7e,$Lr),e(DE,kLr),e(DE,XJ),e(XJ,SLr),e(DE,RLr),e(oe,PLr),e(oe,GE),e(GE,R7e),e(R7e,BLr),e(GE,ILr),e(GE,zJ),e(zJ,qLr),e(GE,NLr),e(oe,jLr),e(oe,OE),e(OE,P7e),e(P7e,DLr),e(OE,GLr),e(OE,WJ),e(WJ,OLr),e(OE,VLr),e(oe,XLr),e(oe,VE),e(VE,B7e),e(B7e,zLr),e(VE,WLr),e(VE,QJ),e(QJ,QLr),e(VE,HLr),e(oe,ULr),e(oe,XE),e(XE,I7e),e(I7e,JLr),e(XE,YLr),e(XE,HJ),e(HJ,KLr),e(XE,ZLr),e(oe,e8r),e(oe,zE),e(zE,q7e),e(q7e,o8r),e(zE,r8r),e(zE,UJ),e(UJ,t8r),e(zE,a8r),e(oe,n8r),e(oe,WE),e(WE,N7e),e(N7e,s8r),e(WE,l8r),e(WE,JJ),e(JJ,i8r),e(WE,d8r),e(jr,c8r),M(QE,jr,null),b(f,gje,u),b(f,Sc,u),e(Sc,HE),e(HE,j7e),M(w8,j7e,null),e(Sc,f8r),e(Sc,D7e),e(D7e,m8r),b(f,hje,u),b(f,mr,u),M(A8,mr,null),e(mr,g8r),e(mr,Rc),e(Rc,h8r),e(Rc,YJ),e(YJ,p8r),e(Rc,_8r),e(Rc,KJ),e(KJ,u8r),e(Rc,b8r),e(mr,v8r),e(mr,y8),e(y8,F8r),e(y8,G7e),e(G7e,T8r),e(y8,M8r),e(mr,E8r),e(mr,Ot),M(L8,Ot,null),e(Ot,C8r),e(Ot,O7e),e(O7e,w8r),e(Ot,A8r),e(Ot,Pc),e(Pc,y8r),e(Pc,V7e),e(V7e,L8r),e(Pc,x8r),e(Pc,ZJ),e(ZJ,$8r),e(Pc,k8r),e(Ot,S8r),M(UE,Ot,null),e(mr,R8r),e(mr,Dr),M(x8,Dr,null),e(Dr,P8r),e(Dr,X7e),e(X7e,B8r),e(Dr,I8r),e(Dr,pn),e(pn,q8r),e(pn,z7e),e(z7e,N8r),e(pn,j8r),e(pn,W7e),e(W7e,D8r),e(pn,G8r),e(pn,Q7e),e(Q7e,O8r),e(pn,V8r),e(Dr,X8r),e(Dr,Pe),e(Pe,JE),e(JE,H7e),e(H7e,z8r),e(JE,W8r),e(JE,eY),e(eY,Q8r),e(JE,H8r),e(Pe,U8r),e(Pe,YE),e(YE,U7e),e(U7e,J8r),e(YE,Y8r),e(YE,oY),e(oY,K8r),e(YE,Z8r),e(Pe,exr),e(Pe,KE),e(KE,J7e),e(J7e,oxr),e(KE,rxr),e(KE,rY),e(rY,txr),e(KE,axr),e(Pe,nxr),e(Pe,ZE),e(ZE,Y7e),e(Y7e,sxr),e(ZE,lxr),e(ZE,tY),e(tY,ixr),e(ZE,dxr),e(Pe,cxr),e(Pe,e5),e(e5,K7e),e(K7e,fxr),e(e5,mxr),e(e5,aY),e(aY,gxr),e(e5,hxr),e(Pe,pxr),e(Pe,o5),e(o5,Z7e),e(Z7e,_xr),e(o5,uxr),e(o5,nY),e(nY,bxr),e(o5,vxr),e(Pe,Fxr),e(Pe,r5),e(r5,e9e),e(e9e,Txr),e(r5,Mxr),e(r5,sY),e(sY,Exr),e(r5,Cxr),e(Pe,wxr),e(Pe,t5),e(t5,o9e),e(o9e,Axr),e(t5,yxr),e(t5,lY),e(lY,Lxr),e(t5,xxr),e(Pe,$xr),e(Pe,a5),e(a5,r9e),e(r9e,kxr),e(a5,Sxr),e(a5,iY),e(iY,Rxr),e(a5,Pxr),e(Dr,Bxr),M(n5,Dr,null),b(f,pje,u),b(f,Bc,u),e(Bc,s5),e(s5,t9e),M($8,t9e,null),e(Bc,Ixr),e(Bc,a9e),e(a9e,qxr),b(f,_je,u),b(f,gr,u),M(k8,gr,null),e(gr,Nxr),e(gr,Ic),e(Ic,jxr),e(Ic,dY),e(dY,Dxr),e(Ic,Gxr),e(Ic,cY),e(cY,Oxr),e(Ic,Vxr),e(gr,Xxr),e(gr,S8),e(S8,zxr),e(S8,n9e),e(n9e,Wxr),e(S8,Qxr),e(gr,Hxr),e(gr,Vt),M(R8,Vt,null),e(Vt,Uxr),e(Vt,s9e),e(s9e,Jxr),e(Vt,Yxr),e(Vt,qc),e(qc,Kxr),e(qc,l9e),e(l9e,Zxr),e(qc,e$r),e(qc,fY),e(fY,o$r),e(qc,r$r),e(Vt,t$r),M(l5,Vt,null),e(gr,a$r),e(gr,Gr),M(P8,Gr,null),e(Gr,n$r),e(Gr,i9e),e(i9e,s$r),e(Gr,l$r),e(Gr,_n),e(_n,i$r),e(_n,d9e),e(d9e,d$r),e(_n,c$r),e(_n,c9e),e(c9e,f$r),e(_n,m$r),e(_n,f9e),e(f9e,g$r),e(_n,h$r),e(Gr,p$r),e(Gr,Te),e(Te,i5),e(i5,m9e),e(m9e,_$r),e(i5,u$r),e(i5,mY),e(mY,b$r),e(i5,v$r),e(Te,F$r),e(Te,d5),e(d5,g9e),e(g9e,T$r),e(d5,M$r),e(d5,gY),e(gY,E$r),e(d5,C$r),e(Te,w$r),e(Te,c5),e(c5,h9e),e(h9e,A$r),e(c5,y$r),e(c5,hY),e(hY,L$r),e(c5,x$r),e(Te,$$r),e(Te,f5),e(f5,p9e),e(p9e,k$r),e(f5,S$r),e(f5,pY),e(pY,R$r),e(f5,P$r),e(Te,B$r),e(Te,m5),e(m5,_9e),e(_9e,I$r),e(m5,q$r),e(m5,_Y),e(_Y,N$r),e(m5,j$r),e(Te,D$r),e(Te,g5),e(g5,u9e),e(u9e,G$r),e(g5,O$r),e(g5,uY),e(uY,V$r),e(g5,X$r),e(Te,z$r),e(Te,h5),e(h5,b9e),e(b9e,W$r),e(h5,Q$r),e(h5,bY),e(bY,H$r),e(h5,U$r),e(Te,J$r),e(Te,p5),e(p5,v9e),e(v9e,Y$r),e(p5,K$r),e(p5,vY),e(vY,Z$r),e(p5,ekr),e(Te,okr),e(Te,_5),e(_5,F9e),e(F9e,rkr),e(_5,tkr),e(_5,FY),e(FY,akr),e(_5,nkr),e(Te,skr),e(Te,u5),e(u5,T9e),e(T9e,lkr),e(u5,ikr),e(u5,TY),e(TY,dkr),e(u5,ckr),e(Te,fkr),e(Te,b5),e(b5,M9e),e(M9e,mkr),e(b5,gkr),e(b5,MY),e(MY,hkr),e(b5,pkr),e(Te,_kr),e(Te,v5),e(v5,E9e),e(E9e,ukr),e(v5,bkr),e(v5,EY),e(EY,vkr),e(v5,Fkr),e(Te,Tkr),e(Te,F5),e(F5,C9e),e(C9e,Mkr),e(F5,Ekr),e(F5,CY),e(CY,Ckr),e(F5,wkr),e(Gr,Akr),M(T5,Gr,null),b(f,uje,u),b(f,Nc,u),e(Nc,M5),e(M5,w9e),M(B8,w9e,null),e(Nc,ykr),e(Nc,A9e),e(A9e,Lkr),b(f,bje,u),b(f,hr,u),M(I8,hr,null),e(hr,xkr),e(hr,jc),e(jc,$kr),e(jc,wY),e(wY,kkr),e(jc,Skr),e(jc,AY),e(AY,Rkr),e(jc,Pkr),e(hr,Bkr),e(hr,q8),e(q8,Ikr),e(q8,y9e),e(y9e,qkr),e(q8,Nkr),e(hr,jkr),e(hr,Xt),M(N8,Xt,null),e(Xt,Dkr),e(Xt,L9e),e(L9e,Gkr),e(Xt,Okr),e(Xt,Dc),e(Dc,Vkr),e(Dc,x9e),e(x9e,Xkr),e(Dc,zkr),e(Dc,yY),e(yY,Wkr),e(Dc,Qkr),e(Xt,Hkr),M(E5,Xt,null),e(hr,Ukr),e(hr,Or),M(j8,Or,null),e(Or,Jkr),e(Or,$9e),e($9e,Ykr),e(Or,Kkr),e(Or,un),e(un,Zkr),e(un,k9e),e(k9e,eSr),e(un,oSr),e(un,S9e),e(S9e,rSr),e(un,tSr),e(un,R9e),e(R9e,aSr),e(un,nSr),e(Or,sSr),e(Or,Le),e(Le,C5),e(C5,P9e),e(P9e,lSr),e(C5,iSr),e(C5,LY),e(LY,dSr),e(C5,cSr),e(Le,fSr),e(Le,w5),e(w5,B9e),e(B9e,mSr),e(w5,gSr),e(w5,xY),e(xY,hSr),e(w5,pSr),e(Le,_Sr),e(Le,A5),e(A5,I9e),e(I9e,uSr),e(A5,bSr),e(A5,$Y),e($Y,vSr),e(A5,FSr),e(Le,TSr),e(Le,y5),e(y5,q9e),e(q9e,MSr),e(y5,ESr),e(y5,kY),e(kY,CSr),e(y5,wSr),e(Le,ASr),e(Le,L5),e(L5,N9e),e(N9e,ySr),e(L5,LSr),e(L5,SY),e(SY,xSr),e(L5,$Sr),e(Le,kSr),e(Le,x5),e(x5,j9e),e(j9e,SSr),e(x5,RSr),e(x5,RY),e(RY,PSr),e(x5,BSr),e(Le,ISr),e(Le,$5),e($5,D9e),e(D9e,qSr),e($5,NSr),e($5,PY),e(PY,jSr),e($5,DSr),e(Le,GSr),e(Le,k5),e(k5,G9e),e(G9e,OSr),e(k5,VSr),e(k5,BY),e(BY,XSr),e(k5,zSr),e(Le,WSr),e(Le,S5),e(S5,O9e),e(O9e,QSr),e(S5,HSr),e(S5,IY),e(IY,USr),e(S5,JSr),e(Le,YSr),e(Le,R5),e(R5,V9e),e(V9e,KSr),e(R5,ZSr),e(R5,qY),e(qY,eRr),e(R5,oRr),e(Or,rRr),M(P5,Or,null),b(f,vje,u),b(f,Gc,u),e(Gc,B5),e(B5,X9e),M(D8,X9e,null),e(Gc,tRr),e(Gc,z9e),e(z9e,aRr),b(f,Fje,u),b(f,pr,u),M(G8,pr,null),e(pr,nRr),e(pr,Oc),e(Oc,sRr),e(Oc,NY),e(NY,lRr),e(Oc,iRr),e(Oc,jY),e(jY,dRr),e(Oc,cRr),e(pr,fRr),e(pr,O8),e(O8,mRr),e(O8,W9e),e(W9e,gRr),e(O8,hRr),e(pr,pRr),e(pr,zt),M(V8,zt,null),e(zt,_Rr),e(zt,Q9e),e(Q9e,uRr),e(zt,bRr),e(zt,Vc),e(Vc,vRr),e(Vc,H9e),e(H9e,FRr),e(Vc,TRr),e(Vc,DY),e(DY,MRr),e(Vc,ERr),e(zt,CRr),M(I5,zt,null),e(pr,wRr),e(pr,Vr),M(X8,Vr,null),e(Vr,ARr),e(Vr,U9e),e(U9e,yRr),e(Vr,LRr),e(Vr,bn),e(bn,xRr),e(bn,J9e),e(J9e,$Rr),e(bn,kRr),e(bn,Y9e),e(Y9e,SRr),e(bn,RRr),e(bn,K9e),e(K9e,PRr),e(bn,BRr),e(Vr,IRr),e(Vr,xe),e(xe,q5),e(q5,Z9e),e(Z9e,qRr),e(q5,NRr),e(q5,GY),e(GY,jRr),e(q5,DRr),e(xe,GRr),e(xe,N5),e(N5,eMe),e(eMe,ORr),e(N5,VRr),e(N5,OY),e(OY,XRr),e(N5,zRr),e(xe,WRr),e(xe,j5),e(j5,oMe),e(oMe,QRr),e(j5,HRr),e(j5,VY),e(VY,URr),e(j5,JRr),e(xe,YRr),e(xe,D5),e(D5,rMe),e(rMe,KRr),e(D5,ZRr),e(D5,XY),e(XY,ePr),e(D5,oPr),e(xe,rPr),e(xe,G5),e(G5,tMe),e(tMe,tPr),e(G5,aPr),e(G5,zY),e(zY,nPr),e(G5,sPr),e(xe,lPr),e(xe,O5),e(O5,aMe),e(aMe,iPr),e(O5,dPr),e(O5,WY),e(WY,cPr),e(O5,fPr),e(xe,mPr),e(xe,V5),e(V5,nMe),e(nMe,gPr),e(V5,hPr),e(V5,QY),e(QY,pPr),e(V5,_Pr),e(xe,uPr),e(xe,X5),e(X5,sMe),e(sMe,bPr),e(X5,vPr),e(X5,HY),e(HY,FPr),e(X5,TPr),e(xe,MPr),e(xe,z5),e(z5,lMe),e(lMe,EPr),e(z5,CPr),e(z5,UY),e(UY,wPr),e(z5,APr),e(xe,yPr),e(xe,W5),e(W5,iMe),e(iMe,LPr),e(W5,xPr),e(W5,JY),e(JY,$Pr),e(W5,kPr),e(Vr,SPr),M(Q5,Vr,null),b(f,Tje,u),b(f,Xc,u),e(Xc,H5),e(H5,dMe),M(z8,dMe,null),e(Xc,RPr),e(Xc,cMe),e(cMe,PPr),b(f,Mje,u),b(f,_r,u),M(W8,_r,null),e(_r,BPr),e(_r,zc),e(zc,IPr),e(zc,YY),e(YY,qPr),e(zc,NPr),e(zc,KY),e(KY,jPr),e(zc,DPr),e(_r,GPr),e(_r,Q8),e(Q8,OPr),e(Q8,fMe),e(fMe,VPr),e(Q8,XPr),e(_r,zPr),e(_r,Wt),M(H8,Wt,null),e(Wt,WPr),e(Wt,mMe),e(mMe,QPr),e(Wt,HPr),e(Wt,Wc),e(Wc,UPr),e(Wc,gMe),e(gMe,JPr),e(Wc,YPr),e(Wc,ZY),e(ZY,KPr),e(Wc,ZPr),e(Wt,eBr),M(U5,Wt,null),e(_r,oBr),e(_r,Xr),M(U8,Xr,null),e(Xr,rBr),e(Xr,hMe),e(hMe,tBr),e(Xr,aBr),e(Xr,vn),e(vn,nBr),e(vn,pMe),e(pMe,sBr),e(vn,lBr),e(vn,_Me),e(_Me,iBr),e(vn,dBr),e(vn,uMe),e(uMe,cBr),e(vn,fBr),e(Xr,mBr),e(Xr,$e),e($e,J5),e(J5,bMe),e(bMe,gBr),e(J5,hBr),e(J5,eK),e(eK,pBr),e(J5,_Br),e($e,uBr),e($e,Y5),e(Y5,vMe),e(vMe,bBr),e(Y5,vBr),e(Y5,oK),e(oK,FBr),e(Y5,TBr),e($e,MBr),e($e,K5),e(K5,FMe),e(FMe,EBr),e(K5,CBr),e(K5,rK),e(rK,wBr),e(K5,ABr),e($e,yBr),e($e,Z5),e(Z5,TMe),e(TMe,LBr),e(Z5,xBr),e(Z5,tK),e(tK,$Br),e(Z5,kBr),e($e,SBr),e($e,eC),e(eC,MMe),e(MMe,RBr),e(eC,PBr),e(eC,aK),e(aK,BBr),e(eC,IBr),e($e,qBr),e($e,oC),e(oC,EMe),e(EMe,NBr),e(oC,jBr),e(oC,nK),e(nK,DBr),e(oC,GBr),e($e,OBr),e($e,rC),e(rC,CMe),e(CMe,VBr),e(rC,XBr),e(rC,sK),e(sK,zBr),e(rC,WBr),e($e,QBr),e($e,tC),e(tC,wMe),e(wMe,HBr),e(tC,UBr),e(tC,lK),e(lK,JBr),e(tC,YBr),e($e,KBr),e($e,aC),e(aC,AMe),e(AMe,ZBr),e(aC,eIr),e(aC,iK),e(iK,oIr),e(aC,rIr),e($e,tIr),e($e,nC),e(nC,yMe),e(yMe,aIr),e(nC,nIr),e(nC,dK),e(dK,sIr),e(nC,lIr),e(Xr,iIr),M(sC,Xr,null),b(f,Eje,u),b(f,Qc,u),e(Qc,lC),e(lC,LMe),M(J8,LMe,null),e(Qc,dIr),e(Qc,xMe),e(xMe,cIr),b(f,Cje,u),b(f,ur,u),M(Y8,ur,null),e(ur,fIr),e(ur,Hc),e(Hc,mIr),e(Hc,cK),e(cK,gIr),e(Hc,hIr),e(Hc,fK),e(fK,pIr),e(Hc,_Ir),e(ur,uIr),e(ur,K8),e(K8,bIr),e(K8,$Me),e($Me,vIr),e(K8,FIr),e(ur,TIr),e(ur,Qt),M(Z8,Qt,null),e(Qt,MIr),e(Qt,kMe),e(kMe,EIr),e(Qt,CIr),e(Qt,Uc),e(Uc,wIr),e(Uc,SMe),e(SMe,AIr),e(Uc,yIr),e(Uc,mK),e(mK,LIr),e(Uc,xIr),e(Qt,$Ir),M(iC,Qt,null),e(ur,kIr),e(ur,zr),M(ex,zr,null),e(zr,SIr),e(zr,RMe),e(RMe,RIr),e(zr,PIr),e(zr,Fn),e(Fn,BIr),e(Fn,PMe),e(PMe,IIr),e(Fn,qIr),e(Fn,BMe),e(BMe,NIr),e(Fn,jIr),e(Fn,IMe),e(IMe,DIr),e(Fn,GIr),e(zr,OIr),e(zr,ke),e(ke,dC),e(dC,qMe),e(qMe,VIr),e(dC,XIr),e(dC,gK),e(gK,zIr),e(dC,WIr),e(ke,QIr),e(ke,cC),e(cC,NMe),e(NMe,HIr),e(cC,UIr),e(cC,hK),e(hK,JIr),e(cC,YIr),e(ke,KIr),e(ke,fC),e(fC,jMe),e(jMe,ZIr),e(fC,eqr),e(fC,pK),e(pK,oqr),e(fC,rqr),e(ke,tqr),e(ke,mC),e(mC,DMe),e(DMe,aqr),e(mC,nqr),e(mC,_K),e(_K,sqr),e(mC,lqr),e(ke,iqr),e(ke,gC),e(gC,GMe),e(GMe,dqr),e(gC,cqr),e(gC,uK),e(uK,fqr),e(gC,mqr),e(ke,gqr),e(ke,hC),e(hC,OMe),e(OMe,hqr),e(hC,pqr),e(hC,bK),e(bK,_qr),e(hC,uqr),e(ke,bqr),e(ke,pC),e(pC,VMe),e(VMe,vqr),e(pC,Fqr),e(pC,vK),e(vK,Tqr),e(pC,Mqr),e(ke,Eqr),e(ke,_C),e(_C,XMe),e(XMe,Cqr),e(_C,wqr),e(_C,FK),e(FK,Aqr),e(_C,yqr),e(ke,Lqr),e(ke,uC),e(uC,zMe),e(zMe,xqr),e(uC,$qr),e(uC,TK),e(TK,kqr),e(uC,Sqr),e(ke,Rqr),e(ke,bC),e(bC,WMe),e(WMe,Pqr),e(bC,Bqr),e(bC,MK),e(MK,Iqr),e(bC,qqr),e(zr,Nqr),M(vC,zr,null),b(f,wje,u),b(f,Jc,u),e(Jc,FC),e(FC,QMe),M(ox,QMe,null),e(Jc,jqr),e(Jc,HMe),e(HMe,Dqr),b(f,Aje,u),b(f,br,u),M(rx,br,null),e(br,Gqr),e(br,Yc),e(Yc,Oqr),e(Yc,EK),e(EK,Vqr),e(Yc,Xqr),e(Yc,CK),e(CK,zqr),e(Yc,Wqr),e(br,Qqr),e(br,tx),e(tx,Hqr),e(tx,UMe),e(UMe,Uqr),e(tx,Jqr),e(br,Yqr),e(br,Ht),M(ax,Ht,null),e(Ht,Kqr),e(Ht,JMe),e(JMe,Zqr),e(Ht,eNr),e(Ht,Kc),e(Kc,oNr),e(Kc,YMe),e(YMe,rNr),e(Kc,tNr),e(Kc,wK),e(wK,aNr),e(Kc,nNr),e(Ht,sNr),M(TC,Ht,null),e(br,lNr),e(br,Wr),M(nx,Wr,null),e(Wr,iNr),e(Wr,KMe),e(KMe,dNr),e(Wr,cNr),e(Wr,Tn),e(Tn,fNr),e(Tn,ZMe),e(ZMe,mNr),e(Tn,gNr),e(Tn,e4e),e(e4e,hNr),e(Tn,pNr),e(Tn,o4e),e(o4e,_Nr),e(Tn,uNr),e(Wr,bNr),e(Wr,Ge),e(Ge,MC),e(MC,r4e),e(r4e,vNr),e(MC,FNr),e(MC,AK),e(AK,TNr),e(MC,MNr),e(Ge,ENr),e(Ge,EC),e(EC,t4e),e(t4e,CNr),e(EC,wNr),e(EC,yK),e(yK,ANr),e(EC,yNr),e(Ge,LNr),e(Ge,CC),e(CC,a4e),e(a4e,xNr),e(CC,$Nr),e(CC,LK),e(LK,kNr),e(CC,SNr),e(Ge,RNr),e(Ge,wC),e(wC,n4e),e(n4e,PNr),e(wC,BNr),e(wC,xK),e(xK,INr),e(wC,qNr),e(Ge,NNr),e(Ge,AC),e(AC,s4e),e(s4e,jNr),e(AC,DNr),e(AC,$K),e($K,GNr),e(AC,ONr),e(Ge,VNr),e(Ge,yC),e(yC,l4e),e(l4e,XNr),e(yC,zNr),e(yC,kK),e(kK,WNr),e(yC,QNr),e(Ge,HNr),e(Ge,LC),e(LC,i4e),e(i4e,UNr),e(LC,JNr),e(LC,SK),e(SK,YNr),e(LC,KNr),e(Ge,ZNr),e(Ge,xC),e(xC,d4e),e(d4e,ejr),e(xC,ojr),e(xC,RK),e(RK,rjr),e(xC,tjr),e(Wr,ajr),M($C,Wr,null),b(f,yje,u),b(f,Zc,u),e(Zc,kC),e(kC,c4e),M(sx,c4e,null),e(Zc,njr),e(Zc,f4e),e(f4e,sjr),b(f,Lje,u),b(f,vr,u),M(lx,vr,null),e(vr,ljr),e(vr,ef),e(ef,ijr),e(ef,PK),e(PK,djr),e(ef,cjr),e(ef,BK),e(BK,fjr),e(ef,mjr),e(vr,gjr),e(vr,ix),e(ix,hjr),e(ix,m4e),e(m4e,pjr),e(ix,_jr),e(vr,ujr),e(vr,Ut),M(dx,Ut,null),e(Ut,bjr),e(Ut,g4e),e(g4e,vjr),e(Ut,Fjr),e(Ut,of),e(of,Tjr),e(of,h4e),e(h4e,Mjr),e(of,Ejr),e(of,IK),e(IK,Cjr),e(of,wjr),e(Ut,Ajr),M(SC,Ut,null),e(vr,yjr),e(vr,Qr),M(cx,Qr,null),e(Qr,Ljr),e(Qr,p4e),e(p4e,xjr),e(Qr,$jr),e(Qr,Mn),e(Mn,kjr),e(Mn,_4e),e(_4e,Sjr),e(Mn,Rjr),e(Mn,u4e),e(u4e,Pjr),e(Mn,Bjr),e(Mn,b4e),e(b4e,Ijr),e(Mn,qjr),e(Qr,Njr),e(Qr,Oe),e(Oe,RC),e(RC,v4e),e(v4e,jjr),e(RC,Djr),e(RC,qK),e(qK,Gjr),e(RC,Ojr),e(Oe,Vjr),e(Oe,PC),e(PC,F4e),e(F4e,Xjr),e(PC,zjr),e(PC,NK),e(NK,Wjr),e(PC,Qjr),e(Oe,Hjr),e(Oe,BC),e(BC,T4e),e(T4e,Ujr),e(BC,Jjr),e(BC,jK),e(jK,Yjr),e(BC,Kjr),e(Oe,Zjr),e(Oe,IC),e(IC,M4e),e(M4e,eDr),e(IC,oDr),e(IC,DK),e(DK,rDr),e(IC,tDr),e(Oe,aDr),e(Oe,qC),e(qC,E4e),e(E4e,nDr),e(qC,sDr),e(qC,GK),e(GK,lDr),e(qC,iDr),e(Oe,dDr),e(Oe,NC),e(NC,C4e),e(C4e,cDr),e(NC,fDr),e(NC,OK),e(OK,mDr),e(NC,gDr),e(Oe,hDr),e(Oe,jC),e(jC,w4e),e(w4e,pDr),e(jC,_Dr),e(jC,VK),e(VK,uDr),e(jC,bDr),e(Oe,vDr),e(Oe,DC),e(DC,A4e),e(A4e,FDr),e(DC,TDr),e(DC,XK),e(XK,MDr),e(DC,EDr),e(Qr,CDr),M(GC,Qr,null),b(f,xje,u),b(f,rf,u),e(rf,OC),e(OC,y4e),M(fx,y4e,null),e(rf,wDr),e(rf,L4e),e(L4e,ADr),b(f,$je,u),b(f,Fr,u),M(mx,Fr,null),e(Fr,yDr),e(Fr,tf),e(tf,LDr),e(tf,zK),e(zK,xDr),e(tf,$Dr),e(tf,WK),e(WK,kDr),e(tf,SDr),e(Fr,RDr),e(Fr,gx),e(gx,PDr),e(gx,x4e),e(x4e,BDr),e(gx,IDr),e(Fr,qDr),e(Fr,Jt),M(hx,Jt,null),e(Jt,NDr),e(Jt,$4e),e($4e,jDr),e(Jt,DDr),e(Jt,af),e(af,GDr),e(af,k4e),e(k4e,ODr),e(af,VDr),e(af,QK),e(QK,XDr),e(af,zDr),e(Jt,WDr),M(VC,Jt,null),e(Fr,QDr),e(Fr,Hr),M(px,Hr,null),e(Hr,HDr),e(Hr,S4e),e(S4e,UDr),e(Hr,JDr),e(Hr,En),e(En,YDr),e(En,R4e),e(R4e,KDr),e(En,ZDr),e(En,P4e),e(P4e,eGr),e(En,oGr),e(En,B4e),e(B4e,rGr),e(En,tGr),e(Hr,aGr),e(Hr,I4e),e(I4e,XC),e(XC,q4e),e(q4e,nGr),e(XC,sGr),e(XC,HK),e(HK,lGr),e(XC,iGr),e(Hr,dGr),M(zC,Hr,null),b(f,kje,u),b(f,nf,u),e(nf,WC),e(WC,N4e),M(_x,N4e,null),e(nf,cGr),e(nf,j4e),e(j4e,fGr),b(f,Sje,u),b(f,Tr,u),M(ux,Tr,null),e(Tr,mGr),e(Tr,sf),e(sf,gGr),e(sf,UK),e(UK,hGr),e(sf,pGr),e(sf,JK),e(JK,_Gr),e(sf,uGr),e(Tr,bGr),e(Tr,bx),e(bx,vGr),e(bx,D4e),e(D4e,FGr),e(bx,TGr),e(Tr,MGr),e(Tr,Yt),M(vx,Yt,null),e(Yt,EGr),e(Yt,G4e),e(G4e,CGr),e(Yt,wGr),e(Yt,lf),e(lf,AGr),e(lf,O4e),e(O4e,yGr),e(lf,LGr),e(lf,YK),e(YK,xGr),e(lf,$Gr),e(Yt,kGr),M(QC,Yt,null),e(Tr,SGr),e(Tr,Ur),M(Fx,Ur,null),e(Ur,RGr),e(Ur,V4e),e(V4e,PGr),e(Ur,BGr),e(Ur,Cn),e(Cn,IGr),e(Cn,X4e),e(X4e,qGr),e(Cn,NGr),e(Cn,z4e),e(z4e,jGr),e(Cn,DGr),e(Cn,W4e),e(W4e,GGr),e(Cn,OGr),e(Ur,VGr),e(Ur,Tx),e(Tx,HC),e(HC,Q4e),e(Q4e,XGr),e(HC,zGr),e(HC,KK),e(KK,WGr),e(HC,QGr),e(Tx,HGr),e(Tx,UC),e(UC,H4e),e(H4e,UGr),e(UC,JGr),e(UC,ZK),e(ZK,YGr),e(UC,KGr),e(Ur,ZGr),M(JC,Ur,null),b(f,Rje,u),b(f,df,u),e(df,YC),e(YC,U4e),M(Mx,U4e,null),e(df,eOr),e(df,J4e),e(J4e,oOr),b(f,Pje,u),b(f,Mr,u),M(Ex,Mr,null),e(Mr,rOr),e(Mr,cf),e(cf,tOr),e(cf,eZ),e(eZ,aOr),e(cf,nOr),e(cf,oZ),e(oZ,sOr),e(cf,lOr),e(Mr,iOr),e(Mr,Cx),e(Cx,dOr),e(Cx,Y4e),e(Y4e,cOr),e(Cx,fOr),e(Mr,mOr),e(Mr,Kt),M(wx,Kt,null),e(Kt,gOr),e(Kt,K4e),e(K4e,hOr),e(Kt,pOr),e(Kt,ff),e(ff,_Or),e(ff,Z4e),e(Z4e,uOr),e(ff,bOr),e(ff,rZ),e(rZ,vOr),e(ff,FOr),e(Kt,TOr),M(KC,Kt,null),e(Mr,MOr),e(Mr,Jr),M(Ax,Jr,null),e(Jr,EOr),e(Jr,eEe),e(eEe,COr),e(Jr,wOr),e(Jr,wn),e(wn,AOr),e(wn,oEe),e(oEe,yOr),e(wn,LOr),e(wn,rEe),e(rEe,xOr),e(wn,$Or),e(wn,tEe),e(tEe,kOr),e(wn,SOr),e(Jr,ROr),e(Jr,aEe),e(aEe,ZC),e(ZC,nEe),e(nEe,POr),e(ZC,BOr),e(ZC,tZ),e(tZ,IOr),e(ZC,qOr),e(Jr,NOr),M(e3,Jr,null),Bje=!0},p(f,[u]){const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),Ff.$set(yx);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),Mg.$set(sEe);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),rh.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),Sh.$set(iEe);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),Rh.$set(Lx);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),Kh.$set(dEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Zh.$set(An);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),rp.$set(cEe);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),J_.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),K_.$set(mEe);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),Vu.$set(xx);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),zu.$set(gEe);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),x2.$set($x);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),k2.$set(hEe);const kx={};u&2&&(kx.$$scope={dirty:u,ctx:f}),h1.$set(kx);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),_1.$set(pEe);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),B1.$set(_Ee);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),q1.$set(uEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),kb.$set(mf);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),Rb.$set(bEe);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),cv.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),mv.$set(FEe);const Sx={};u&2&&(Sx.$$scope={dirty:u,ctx:f}),vv.$set(Sx);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),Tv.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),rF.$set(MEe);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),aF.$set(EEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),zF.$set(et);const Rx={};u&2&&(Rx.$$scope={dirty:u,ctx:f}),QF.$set(Rx);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),JF.$set(CEe);const Px={};u&2&&(Px.$$scope={dirty:u,ctx:f}),KF.$set(Px);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),m6.$set(wEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),h6.$set(ot);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),u6.$set(AEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),v6.$set(gf);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),$6.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),S6.$set(LEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),j6.$set(y);const o3={};u&2&&(o3.$$scope={dirty:u,ctx:f}),G6.$set(o3);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),K6.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),eT.$set($Ee);const r3={};u&2&&(r3.$$scope={dirty:u,ctx:f}),aT.$set(r3);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),sT.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),gT.$set(SEe);const t3={};u&2&&(t3.$$scope={dirty:u,ctx:f}),pT.$set(t3);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),FT.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),MT.$set(PEe);const a3={};u&2&&(a3.$$scope={dirty:u,ctx:f}),AT.$set(a3);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),LT.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),kT.$set(IEe);const n3={};u&2&&(n3.$$scope={dirty:u,ctx:f}),RT.$set(n3);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),jT.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),GT.$set(NEe);const s3={};u&2&&(s3.$$scope={dirty:u,ctx:f}),XT.$set(s3);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),WT.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),N7.$set(DEe);const l3={};u&2&&(l3.$$scope={dirty:u,ctx:f}),D7.$set(l3);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),c9.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),m9.$set(OEe);const i3={};u&2&&(i3.$$scope={dirty:u,ctx:f}),w9.$set(i3);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),y9.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),S9.$set(XEe);const d3={};u&2&&(d3.$$scope={dirty:u,ctx:f}),P9.$set(d3);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),oM.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),tM.$set(WEe);const c3={};u&2&&(c3.$$scope={dirty:u,ctx:f}),hM.$set(c3);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),_M.$set(QEe);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),VM.$set(HEe);const f3={};u&2&&(f3.$$scope={dirty:u,ctx:f}),zM.$set(f3);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),d4.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),f4.$set(JEe);const m3={};u&2&&(m3.$$scope={dirty:u,ctx:f}),h4.$set(m3);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),_4.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),b4.$set(KEe);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),F4.$set(g3);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),G4.$set(ZEe);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),V4.$set(e5e);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),cE.$set(h3);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),mE.$set(o5e);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),hE.$set(r5e);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),_E.$set(p3);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),bE.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),FE.$set(a5e);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),QE.$set(_3);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),UE.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),n5.$set(s5e);const u3={};u&2&&(u3.$$scope={dirty:u,ctx:f}),l5.$set(u3);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),T5.$set(l5e);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),E5.$set(i5e);const b3={};u&2&&(b3.$$scope={dirty:u,ctx:f}),P5.$set(b3);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),I5.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),Q5.$set(c5e);const v3={};u&2&&(v3.$$scope={dirty:u,ctx:f}),U5.$set(v3);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),sC.$set(f5e);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),iC.$set(m5e);const F3={};u&2&&(F3.$$scope={dirty:u,ctx:f}),vC.$set(F3);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),TC.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),$C.$set(h5e);const T3={};u&2&&(T3.$$scope={dirty:u,ctx:f}),SC.$set(T3);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),GC.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),VC.$set(_5e);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),zC.$set(M3);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),QC.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),JC.$set(b5e);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),KC.$set(E3);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),e3.$set(v5e)},i(f){Bje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(Ff.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(L0.$$.fragment,f),E(Mg.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(P0.$$.fragment,f),E(rh.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(D0.$$.fragment,f),E(Sh.$$.fragment,f),E(Rh.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(W0.$$.fragment,f),E(Kh.$$.fragment,f),E(Zh.$$.fragment,f),E(Q0.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(rp.$$.fragment,f),E(K0.$$.fragment,f),E(J_.$$.fragment,f),E(Z0.$$.fragment,f),E(eA.$$.fragment,f),E(rA.$$.fragment,f),E(K_.$$.fragment,f),E(tA.$$.fragment,f),E(Vu.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(zu.$$.fragment,f),E(iA.$$.fragment,f),E(x2.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(k2.$$.fragment,f),E(gA.$$.fragment,f),E(h1.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(_1.$$.fragment,f),E(bA.$$.fragment,f),E(B1.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(q1.$$.fragment,f),E(EA.$$.fragment,f),E(kb.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(Rb.$$.fragment,f),E(LA.$$.fragment,f),E(cv.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(mv.$$.fragment,f),E(RA.$$.fragment,f),E(vv.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(Tv.$$.fragment,f),E(NA.$$.fragment,f),E(rF.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(aF.$$.fragment,f),E(VA.$$.fragment,f),E(zF.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(QF.$$.fragment,f),E(HA.$$.fragment,f),E(JF.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(KF.$$.fragment,f),E(ZA.$$.fragment,f),E(m6.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(h6.$$.fragment,f),E(ay.$$.fragment,f),E(u6.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(v6.$$.fragment,f),E(dy.$$.fragment,f),E($6.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(S6.$$.fragment,f),E(hy.$$.fragment,f),E(j6.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(G6.$$.fragment,f),E(vy.$$.fragment,f),E(K6.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(eT.$$.fragment,f),E(Cy.$$.fragment,f),E(aT.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(sT.$$.fragment,f),E($y.$$.fragment,f),E(gT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(pT.$$.fragment,f),E(By.$$.fragment,f),E(FT.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(MT.$$.fragment,f),E(Dy.$$.fragment,f),E(AT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(LT.$$.fragment,f),E(Wy.$$.fragment,f),E(kT.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(RT.$$.fragment,f),E(Yy.$$.fragment,f),E(jT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(GT.$$.fragment,f),E(rL.$$.fragment,f),E(XT.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(WT.$$.fragment,f),E(lL.$$.fragment,f),E(N7.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(D7.$$.fragment,f),E(mL.$$.fragment,f),E(c9.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(m9.$$.fragment,f),E(uL.$$.fragment,f),E(w9.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(y9.$$.fragment,f),E(ML.$$.fragment,f),E(S9.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(P9.$$.fragment,f),E(yL.$$.fragment,f),E(oM.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(tM.$$.fragment,f),E(SL.$$.fragment,f),E(hM.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(_M.$$.fragment,f),E(qL.$$.fragment,f),E(VM.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(zM.$$.fragment,f),E(OL.$$.fragment,f),E(d4.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(f4.$$.fragment,f),E(QL.$$.fragment,f),E(h4.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(_4.$$.fragment,f),E(ZL.$$.fragment,f),E(b4.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(F4.$$.fragment,f),E(a8.$$.fragment,f),E(G4.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(V4.$$.fragment,f),E(d8.$$.fragment,f),E(cE.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(mE.$$.fragment,f),E(h8.$$.fragment,f),E(hE.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(_E.$$.fragment,f),E(v8.$$.fragment,f),E(bE.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(FE.$$.fragment,f),E(C8.$$.fragment,f),E(QE.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(UE.$$.fragment,f),E(x8.$$.fragment,f),E(n5.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(l5.$$.fragment,f),E(P8.$$.fragment,f),E(T5.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(E5.$$.fragment,f),E(j8.$$.fragment,f),E(P5.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(I5.$$.fragment,f),E(X8.$$.fragment,f),E(Q5.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(U5.$$.fragment,f),E(U8.$$.fragment,f),E(sC.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(iC.$$.fragment,f),E(ex.$$.fragment,f),E(vC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(TC.$$.fragment,f),E(nx.$$.fragment,f),E($C.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(SC.$$.fragment,f),E(cx.$$.fragment,f),E(GC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(VC.$$.fragment,f),E(px.$$.fragment,f),E(zC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(QC.$$.fragment,f),E(Fx.$$.fragment,f),E(JC.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(KC.$$.fragment,f),E(Ax.$$.fragment,f),E(e3.$$.fragment,f),Bje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(Ff.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(L0.$$.fragment,f),C(Mg.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(P0.$$.fragment,f),C(rh.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(D0.$$.fragment,f),C(Sh.$$.fragment,f),C(Rh.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(W0.$$.fragment,f),C(Kh.$$.fragment,f),C(Zh.$$.fragment,f),C(Q0.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(rp.$$.fragment,f),C(K0.$$.fragment,f),C(J_.$$.fragment,f),C(Z0.$$.fragment,f),C(eA.$$.fragment,f),C(rA.$$.fragment,f),C(K_.$$.fragment,f),C(tA.$$.fragment,f),C(Vu.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(zu.$$.fragment,f),C(iA.$$.fragment,f),C(x2.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(k2.$$.fragment,f),C(gA.$$.fragment,f),C(h1.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(_1.$$.fragment,f),C(bA.$$.fragment,f),C(B1.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(q1.$$.fragment,f),C(EA.$$.fragment,f),C(kb.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(Rb.$$.fragment,f),C(LA.$$.fragment,f),C(cv.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(mv.$$.fragment,f),C(RA.$$.fragment,f),C(vv.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(Tv.$$.fragment,f),C(NA.$$.fragment,f),C(rF.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(aF.$$.fragment,f),C(VA.$$.fragment,f),C(zF.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(QF.$$.fragment,f),C(HA.$$.fragment,f),C(JF.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(KF.$$.fragment,f),C(ZA.$$.fragment,f),C(m6.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(h6.$$.fragment,f),C(ay.$$.fragment,f),C(u6.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(v6.$$.fragment,f),C(dy.$$.fragment,f),C($6.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(S6.$$.fragment,f),C(hy.$$.fragment,f),C(j6.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(G6.$$.fragment,f),C(vy.$$.fragment,f),C(K6.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(eT.$$.fragment,f),C(Cy.$$.fragment,f),C(aT.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(sT.$$.fragment,f),C($y.$$.fragment,f),C(gT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(pT.$$.fragment,f),C(By.$$.fragment,f),C(FT.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(MT.$$.fragment,f),C(Dy.$$.fragment,f),C(AT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(LT.$$.fragment,f),C(Wy.$$.fragment,f),C(kT.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(RT.$$.fragment,f),C(Yy.$$.fragment,f),C(jT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(GT.$$.fragment,f),C(rL.$$.fragment,f),C(XT.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(WT.$$.fragment,f),C(lL.$$.fragment,f),C(N7.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(D7.$$.fragment,f),C(mL.$$.fragment,f),C(c9.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(m9.$$.fragment,f),C(uL.$$.fragment,f),C(w9.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(y9.$$.fragment,f),C(ML.$$.fragment,f),C(S9.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(P9.$$.fragment,f),C(yL.$$.fragment,f),C(oM.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(tM.$$.fragment,f),C(SL.$$.fragment,f),C(hM.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(_M.$$.fragment,f),C(qL.$$.fragment,f),C(VM.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(zM.$$.fragment,f),C(OL.$$.fragment,f),C(d4.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(f4.$$.fragment,f),C(QL.$$.fragment,f),C(h4.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(_4.$$.fragment,f),C(ZL.$$.fragment,f),C(b4.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(F4.$$.fragment,f),C(a8.$$.fragment,f),C(G4.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(V4.$$.fragment,f),C(d8.$$.fragment,f),C(cE.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(mE.$$.fragment,f),C(h8.$$.fragment,f),C(hE.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(_E.$$.fragment,f),C(v8.$$.fragment,f),C(bE.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(FE.$$.fragment,f),C(C8.$$.fragment,f),C(QE.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(UE.$$.fragment,f),C(x8.$$.fragment,f),C(n5.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(l5.$$.fragment,f),C(P8.$$.fragment,f),C(T5.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(E5.$$.fragment,f),C(j8.$$.fragment,f),C(P5.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(I5.$$.fragment,f),C(X8.$$.fragment,f),C(Q5.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(U5.$$.fragment,f),C(U8.$$.fragment,f),C(sC.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(iC.$$.fragment,f),C(ex.$$.fragment,f),C(vC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(TC.$$.fragment,f),C(nx.$$.fragment,f),C($C.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(SC.$$.fragment,f),C(cx.$$.fragment,f),C(GC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(VC.$$.fragment,f),C(px.$$.fragment,f),C(zC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(QC.$$.fragment,f),C(Fx.$$.fragment,f),C(JC.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(KC.$$.fragment,f),C(Ax.$$.fragment,f),C(e3.$$.fragment,f),Bje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Sqe),f&&t(bi),w(M0),f&&t(Rqe),f&&t(kn),f&&t(Pqe),w(E0,f),f&&t(Bqe),f&&t(z$),f&&t(Iqe),w(Ff,f),f&&t(qqe),f&&t(vi),w(C0),f&&t(Nqe),f&&t(Co),w(w0),w(L0),w(Mg),w(x0),f&&t(jqe),f&&t(Ti),w($0),f&&t(Dqe),f&&t(wo),w(k0),w(P0),w(rh),w(B0),f&&t(Gqe),f&&t(Mi),w(I0),f&&t(Oqe),f&&t(Ao),w(q0),w(D0),w(Sh),w(Rh),w(G0),f&&t(Vqe),f&&t(Ei),w(O0),f&&t(Xqe),f&&t(yo),w(V0),w(W0),w(Kh),w(Zh),w(Q0),f&&t(zqe),f&&t(wi),w(H0),f&&t(Wqe),f&&t(Lo),w(U0),w(Y0),w(rp),w(K0),w(J_),f&&t(Qqe),f&&t(Li),w(Z0),f&&t(Hqe),f&&t(xo),w(eA),w(rA),w(K_),w(tA),w(Vu),f&&t(Uqe),f&&t(ki),w(aA),f&&t(Jqe),f&&t($o),w(nA),w(lA),w(zu),w(iA),w(x2),f&&t(Yqe),f&&t(Pi),w(dA),f&&t(Kqe),f&&t(ko),w(cA),w(mA),w(k2),w(gA),w(h1),f&&t(Zqe),f&&t(qi),w(hA),f&&t(eNe),f&&t(So),w(pA),w(uA),w(_1),w(bA),w(B1),f&&t(oNe),f&&t(Di),w(vA),f&&t(rNe),f&&t(Ro),w(FA),w(MA),w(q1),w(EA),w(kb),f&&t(tNe),f&&t(Vi),w(CA),f&&t(aNe),f&&t(Po),w(wA),w(yA),w(Rb),w(LA),w(cv),f&&t(nNe),f&&t(Wi),w(xA),f&&t(sNe),f&&t(Bo),w($A),w(SA),w(mv),w(RA),w(vv),f&&t(lNe),f&&t(Ui),w(PA),f&&t(iNe),f&&t(Io),w(BA),w(qA),w(Tv),w(NA),w(rF),f&&t(dNe),f&&t(Ki),w(jA),f&&t(cNe),f&&t(qo),w(DA),w(OA),w(aF),w(VA),w(zF),f&&t(fNe),f&&t(od),w(XA),f&&t(mNe),f&&t(No),w(zA),w(QA),w(QF),w(HA),w(JF),f&&t(gNe),f&&t(ad),w(UA),f&&t(hNe),f&&t(jo),w(JA),w(KA),w(KF),w(ZA),w(m6),f&&t(pNe),f&&t(ld),w(ey),f&&t(_Ne),f&&t(Do),w(oy),w(ty),w(h6),w(ay),w(u6),f&&t(uNe),f&&t(cd),w(ny),f&&t(bNe),f&&t(Go),w(sy),w(iy),w(v6),w(dy),w($6),f&&t(vNe),f&&t(gd),w(cy),f&&t(FNe),f&&t(Oo),w(fy),w(gy),w(S6),w(hy),w(j6),f&&t(TNe),f&&t(_d),w(py),f&&t(MNe),f&&t(Vo),w(_y),w(by),w(G6),w(vy),w(K6),f&&t(ENe),f&&t(vd),w(Fy),f&&t(CNe),f&&t(Xo),w(Ty),w(Ey),w(eT),w(Cy),w(aT),f&&t(wNe),f&&t(Md),w(Ay),f&&t(ANe),f&&t(zo),w(yy),w(xy),w(sT),w($y),w(gT),f&&t(yNe),f&&t(wd),w(ky),f&&t(LNe),f&&t(Wo),w(Sy),w(Py),w(pT),w(By),w(FT),f&&t(xNe),f&&t(xd),w(Iy),f&&t($Ne),f&&t(Qo),w(qy),w(jy),w(MT),w(Dy),w(AT),f&&t(kNe),f&&t(Sd),w(Oy),f&&t(SNe),f&&t(Ho),w(Vy),w(zy),w(LT),w(Wy),w(kT),f&&t(RNe),f&&t(Bd),w(Qy),f&&t(PNe),f&&t(Uo),w(Hy),w(Jy),w(RT),w(Yy),w(jT),f&&t(BNe),f&&t(Nd),w(Ky),f&&t(INe),f&&t(Jo),w(Zy),w(oL),w(GT),w(rL),w(XT),f&&t(qNe),f&&t(Gd),w(tL),f&&t(NNe),f&&t(Yo),w(aL),w(sL),w(WT),w(lL),w(N7),f&&t(jNe),f&&t(Xd),w(iL),f&&t(DNe),f&&t(Ko),w(dL),w(fL),w(D7),w(mL),w(c9),f&&t(GNe),f&&t(Qd),w(gL),f&&t(ONe),f&&t(Zo),w(hL),w(_L),w(m9),w(uL),w(w9),f&&t(VNe),f&&t(Jd),w(bL),f&&t(XNe),f&&t(er),w(vL),w(TL),w(y9),w(ML),w(S9),f&&t(zNe),f&&t(Zd),w(EL),f&&t(WNe),f&&t(or),w(CL),w(AL),w(P9),w(yL),w(oM),f&&t(QNe),f&&t(rc),w(LL),f&&t(HNe),f&&t(rr),w(xL),w(kL),w(tM),w(SL),w(hM),f&&t(UNe),f&&t(nc),w(RL),f&&t(JNe),f&&t(tr),w(PL),w(IL),w(_M),w(qL),w(VM),f&&t(YNe),f&&t(ic),w(NL),f&&t(KNe),f&&t(ar),w(jL),w(GL),w(zM),w(OL),w(d4),f&&t(ZNe),f&&t(fc),w(VL),f&&t(eje),f&&t(nr),w(XL),w(WL),w(f4),w(QL),w(h4),f&&t(oje),f&&t(hc),w(UL),f&&t(rje),f&&t(sr),w(JL),w(KL),w(_4),w(ZL),w(b4),f&&t(tje),f&&t(uc),w(e8),f&&t(aje),f&&t(lr),w(o8),w(t8),w(F4),w(a8),w(G4),f&&t(nje),f&&t(Fc),w(n8),f&&t(sje),f&&t(ir),w(s8),w(i8),w(V4),w(d8),w(cE),f&&t(lje),f&&t(Ec),w(c8),f&&t(ije),f&&t(dr),w(f8),w(g8),w(mE),w(h8),w(hE),f&&t(dje),f&&t(Ac),w(p8),f&&t(cje),f&&t(cr),w(_8),w(b8),w(_E),w(v8),w(bE),f&&t(fje),f&&t(xc),w(F8),f&&t(mje),f&&t(fr),w(T8),w(E8),w(FE),w(C8),w(QE),f&&t(gje),f&&t(Sc),w(w8),f&&t(hje),f&&t(mr),w(A8),w(L8),w(UE),w(x8),w(n5),f&&t(pje),f&&t(Bc),w($8),f&&t(_je),f&&t(gr),w(k8),w(R8),w(l5),w(P8),w(T5),f&&t(uje),f&&t(Nc),w(B8),f&&t(bje),f&&t(hr),w(I8),w(N8),w(E5),w(j8),w(P5),f&&t(vje),f&&t(Gc),w(D8),f&&t(Fje),f&&t(pr),w(G8),w(V8),w(I5),w(X8),w(Q5),f&&t(Tje),f&&t(Xc),w(z8),f&&t(Mje),f&&t(_r),w(W8),w(H8),w(U5),w(U8),w(sC),f&&t(Eje),f&&t(Qc),w(J8),f&&t(Cje),f&&t(ur),w(Y8),w(Z8),w(iC),w(ex),w(vC),f&&t(wje),f&&t(Jc),w(ox),f&&t(Aje),f&&t(br),w(rx),w(ax),w(TC),w(nx),w($C),f&&t(yje),f&&t(Zc),w(sx),f&&t(Lje),f&&t(vr),w(lx),w(dx),w(SC),w(cx),w(GC),f&&t(xje),f&&t(rf),w(fx),f&&t($je),f&&t(Fr),w(mx),w(hx),w(VC),w(px),w(zC),f&&t(kje),f&&t(nf),w(_x),f&&t(Sje),f&&t(Tr),w(ux),w(vx),w(QC),w(Fx),w(JC),f&&t(Rje),f&&t(df),w(Mx),f&&t(Pje),f&&t(Mr),w(Ex),w(wx),w(KC),w(Ax),w(e3)}}}const ikt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dkt(L){return dxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _kt extends nxt{constructor(g){super();sxt(this,g,dkt,lkt,lxt,{})}}export{_kt as default,ikt as metadata};
