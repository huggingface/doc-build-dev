import{S as ILt,i as qLt,s as NLt,e as a,k as l,w as F,t as o,M as jLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as DLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as $Gr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function GLt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,f0,_f,De,We,hi,yn,m0,Ln,xn,g0,pi,$n,h0,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),f0=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),m0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),g0=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),h0=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var R$=s(p);m=r(R$,"NewModelConfig"),R$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var P$=s(fi);pf=r(P$,"model_type"),P$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var B$=s(mi);gi=r(B$,'"new-model"'),B$.forEach(t),f0=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),m0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var I$=s(Ln);xn=r(I$,"PreTrainedModel"),I$.forEach(t),g0=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),h0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var q$=s(_i);uf=r(q$,"NewModelConfig"),q$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,f0),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,m0),e(De,Ln),e(Ln,xn),e(De,g0),e(De,pi),e(pi,$n),e(De,h0),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function OLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function zLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,f0,_f,De,We,hi,yn,m0,Ln,xn,g0,pi,$n,h0,_i,uf,Ca,Qe,Ae,R$,ui,P$,B$,Eo,wa,I$,bf,q$,pGe,aqe,bi,vf,Iee,p0,_Ge,qee,uGe,nqe,kn,bGe,Nee,vGe,FGe,jee,TGe,MGe,sqe,_0,lqe,N$,EGe,iqe,Ff,dqe,vi,Tf,Dee,u0,CGe,Gee,wGe,cqe,Co,b0,AGe,v0,yGe,j$,LGe,xGe,$Ge,F0,kGe,Oee,SGe,RGe,PGe,Er,T0,BGe,Vee,IGe,qGe,Fi,NGe,Xee,jGe,DGe,zee,GGe,OGe,VGe,A,Mf,Wee,XGe,zGe,D$,WGe,QGe,HGe,Ef,Qee,UGe,JGe,G$,YGe,KGe,ZGe,Cf,Hee,eOe,oOe,O$,rOe,tOe,aOe,wf,Uee,nOe,sOe,V$,lOe,iOe,dOe,Af,Jee,cOe,fOe,X$,mOe,gOe,hOe,yf,Yee,pOe,_Oe,z$,uOe,bOe,vOe,Lf,Kee,FOe,TOe,W$,MOe,EOe,COe,xf,Zee,wOe,AOe,Q$,yOe,LOe,xOe,$f,eoe,$Oe,kOe,H$,SOe,ROe,POe,kf,ooe,BOe,IOe,U$,qOe,NOe,jOe,Sf,roe,DOe,GOe,J$,OOe,VOe,XOe,Rf,toe,zOe,WOe,Y$,QOe,HOe,UOe,Pf,aoe,JOe,YOe,K$,KOe,ZOe,eVe,Bf,noe,oVe,rVe,Z$,tVe,aVe,nVe,If,soe,sVe,lVe,ek,iVe,dVe,cVe,qf,loe,fVe,mVe,ok,gVe,hVe,pVe,Nf,ioe,_Ve,uVe,rk,bVe,vVe,FVe,jf,doe,TVe,MVe,tk,EVe,CVe,wVe,Df,coe,AVe,yVe,ak,LVe,xVe,$Ve,Gf,foe,kVe,SVe,nk,RVe,PVe,BVe,Of,moe,IVe,qVe,sk,NVe,jVe,DVe,Vf,goe,GVe,OVe,lk,VVe,XVe,zVe,Xf,hoe,WVe,QVe,ik,HVe,UVe,JVe,zf,poe,YVe,KVe,dk,ZVe,eXe,oXe,Wf,_oe,rXe,tXe,ck,aXe,nXe,sXe,Qf,uoe,lXe,iXe,fk,dXe,cXe,fXe,Hf,boe,mXe,gXe,mk,hXe,pXe,_Xe,Uf,voe,uXe,bXe,gk,vXe,FXe,TXe,Jf,Foe,MXe,EXe,hk,CXe,wXe,AXe,Yf,Toe,yXe,LXe,pk,xXe,$Xe,kXe,Kf,Moe,SXe,RXe,_k,PXe,BXe,IXe,Zf,Eoe,qXe,NXe,uk,jXe,DXe,GXe,em,Coe,OXe,VXe,bk,XXe,zXe,WXe,om,woe,QXe,HXe,vk,UXe,JXe,YXe,rm,Aoe,KXe,ZXe,Fk,eze,oze,rze,tm,yoe,tze,aze,Tk,nze,sze,lze,am,Loe,ize,dze,Mk,cze,fze,mze,nm,xoe,gze,hze,Ek,pze,_ze,uze,sm,$oe,bze,vze,Ck,Fze,Tze,Mze,lm,koe,Eze,Cze,wk,wze,Aze,yze,im,Soe,Lze,xze,Ak,$ze,kze,Sze,dm,Roe,Rze,Pze,yk,Bze,Ize,qze,cm,Poe,Nze,jze,Lk,Dze,Gze,Oze,fm,Boe,Vze,Xze,xk,zze,Wze,Qze,mm,Ioe,Hze,Uze,$k,Jze,Yze,Kze,gm,qoe,Zze,eWe,kk,oWe,rWe,tWe,hm,Noe,aWe,nWe,Sk,sWe,lWe,iWe,pm,joe,dWe,cWe,Rk,fWe,mWe,gWe,_m,Doe,hWe,pWe,Pk,_We,uWe,bWe,um,Goe,vWe,FWe,Bk,TWe,MWe,EWe,bm,Ooe,CWe,wWe,Ik,AWe,yWe,LWe,vm,Voe,xWe,$We,qk,kWe,SWe,RWe,Fm,Xoe,PWe,BWe,Nk,IWe,qWe,NWe,Tm,zoe,jWe,DWe,jk,GWe,OWe,VWe,Mm,Woe,XWe,zWe,Dk,WWe,QWe,HWe,Em,Qoe,UWe,JWe,Gk,YWe,KWe,ZWe,Cm,Hoe,eQe,oQe,Ok,rQe,tQe,aQe,wm,Uoe,nQe,sQe,Vk,lQe,iQe,dQe,Am,Joe,cQe,fQe,Xk,mQe,gQe,hQe,ym,Yoe,pQe,_Qe,zk,uQe,bQe,vQe,Lm,Koe,FQe,TQe,Wk,MQe,EQe,CQe,xm,Zoe,wQe,AQe,Qk,yQe,LQe,xQe,$m,ere,$Qe,kQe,Hk,SQe,RQe,PQe,km,ore,BQe,IQe,Uk,qQe,NQe,jQe,Sm,rre,DQe,GQe,Jk,OQe,VQe,XQe,Rm,tre,zQe,WQe,Yk,QQe,HQe,UQe,Pm,are,JQe,YQe,Kk,KQe,ZQe,eHe,Bm,nre,oHe,rHe,Zk,tHe,aHe,nHe,Im,sre,sHe,lHe,eS,iHe,dHe,cHe,qm,lre,fHe,mHe,oS,gHe,hHe,pHe,Nm,ire,_He,uHe,rS,bHe,vHe,FHe,jm,dre,THe,MHe,tS,EHe,CHe,wHe,Dm,cre,AHe,yHe,aS,LHe,xHe,$He,Gm,fre,kHe,SHe,nS,RHe,PHe,BHe,Om,mre,IHe,qHe,sS,NHe,jHe,DHe,Vm,gre,GHe,OHe,lS,VHe,XHe,zHe,Xm,hre,WHe,QHe,iS,HHe,UHe,JHe,zm,pre,YHe,KHe,dS,ZHe,eUe,oUe,Wm,_re,rUe,tUe,cS,aUe,nUe,sUe,Qm,ure,lUe,iUe,fS,dUe,cUe,fUe,Hm,bre,mUe,gUe,mS,hUe,pUe,_Ue,Um,vre,uUe,bUe,gS,vUe,FUe,TUe,Jm,Fre,MUe,EUe,hS,CUe,wUe,AUe,Ym,Tre,yUe,LUe,pS,xUe,$Ue,kUe,Km,Mre,SUe,RUe,_S,PUe,BUe,IUe,Zm,Ere,qUe,NUe,uS,jUe,DUe,GUe,eg,Cre,OUe,VUe,bS,XUe,zUe,WUe,og,wre,QUe,HUe,vS,UUe,JUe,YUe,rg,Are,KUe,ZUe,FS,eJe,oJe,rJe,tg,yre,tJe,aJe,TS,nJe,sJe,lJe,ag,Lre,iJe,dJe,MS,cJe,fJe,mJe,ng,xre,gJe,hJe,ES,pJe,_Je,uJe,sg,$re,bJe,vJe,CS,FJe,TJe,MJe,lg,kre,EJe,CJe,wS,wJe,AJe,yJe,ig,Sre,LJe,xJe,AS,$Je,kJe,SJe,dg,Rre,RJe,PJe,yS,BJe,IJe,qJe,cg,Pre,NJe,jJe,LS,DJe,GJe,OJe,fg,Bre,VJe,XJe,xS,zJe,WJe,QJe,mg,Ire,HJe,UJe,$S,JJe,YJe,KJe,gg,qre,ZJe,eYe,kS,oYe,rYe,tYe,hg,Nre,aYe,nYe,SS,sYe,lYe,iYe,pg,jre,dYe,cYe,RS,fYe,mYe,gYe,_g,Dre,hYe,pYe,PS,_Ye,uYe,bYe,ug,Gre,vYe,FYe,BS,TYe,MYe,EYe,bg,Ore,CYe,wYe,IS,AYe,yYe,LYe,vg,Vre,xYe,$Ye,qS,kYe,SYe,RYe,Fg,PYe,Tg,M0,BYe,Xre,IYe,fqe,Ti,Mg,zre,E0,qYe,Wre,NYe,mqe,wo,C0,jYe,w0,DYe,NS,GYe,OYe,VYe,A0,XYe,Qre,zYe,WYe,QYe,Cr,y0,HYe,Hre,UYe,JYe,Aa,YYe,Ure,KYe,ZYe,Jre,eKe,oKe,Yre,rKe,tKe,aKe,k,Sn,Kre,nKe,sKe,jS,lKe,iKe,DS,dKe,cKe,fKe,Rn,Zre,mKe,gKe,GS,hKe,pKe,OS,_Ke,uKe,bKe,Pn,ete,vKe,FKe,VS,TKe,MKe,XS,EKe,CKe,wKe,Eg,ote,AKe,yKe,zS,LKe,xKe,$Ke,Bn,rte,kKe,SKe,WS,RKe,PKe,QS,BKe,IKe,qKe,Cg,tte,NKe,jKe,HS,DKe,GKe,OKe,wg,ate,VKe,XKe,US,zKe,WKe,QKe,Ag,nte,HKe,UKe,JS,JKe,YKe,KKe,In,ste,ZKe,eZe,YS,oZe,rZe,KS,tZe,aZe,nZe,qn,lte,sZe,lZe,ZS,iZe,dZe,eR,cZe,fZe,mZe,Nn,ite,gZe,hZe,oR,pZe,_Ze,rR,uZe,bZe,vZe,yg,dte,FZe,TZe,tR,MZe,EZe,CZe,Lg,cte,wZe,AZe,aR,yZe,LZe,xZe,jn,fte,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,xg,mte,qZe,NZe,lR,jZe,DZe,GZe,Dn,gte,OZe,VZe,iR,XZe,zZe,dR,WZe,QZe,HZe,Gn,hte,UZe,JZe,cR,YZe,KZe,fR,ZZe,eeo,oeo,On,pte,reo,teo,mR,aeo,neo,gR,seo,leo,ieo,$g,_te,deo,ceo,hR,feo,meo,geo,Vn,ute,heo,peo,pR,_eo,ueo,_R,beo,veo,Feo,Xn,bte,Teo,Meo,uR,Eeo,Ceo,bR,weo,Aeo,yeo,zn,vte,Leo,xeo,vR,$eo,keo,FR,Seo,Reo,Peo,Wn,Fte,Beo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,Qn,Tte,Oeo,Veo,ER,Xeo,zeo,CR,Weo,Qeo,Heo,Hn,Mte,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,kg,Ete,roo,too,yR,aoo,noo,soo,Un,Cte,loo,ioo,LR,doo,coo,xR,foo,moo,goo,Sg,wte,hoo,poo,$R,_oo,uoo,boo,Jn,Ate,voo,Foo,kR,Too,Moo,SR,Eoo,Coo,woo,Yn,yte,Aoo,yoo,RR,Loo,xoo,PR,$oo,koo,Soo,Kn,Lte,Roo,Poo,BR,Boo,Ioo,IR,qoo,Noo,joo,Zn,xte,Doo,Goo,qR,Ooo,Voo,NR,Xoo,zoo,Woo,es,$te,Qoo,Hoo,jR,Uoo,Joo,DR,Yoo,Koo,Zoo,Rg,kte,ero,oro,GR,rro,tro,aro,os,Ste,nro,sro,OR,lro,iro,VR,dro,cro,fro,rs,Rte,mro,gro,XR,hro,pro,zR,_ro,uro,bro,ts,Pte,vro,Fro,WR,Tro,Mro,QR,Ero,Cro,wro,as,Bte,Aro,yro,HR,Lro,xro,UR,$ro,kro,Sro,ns,Ite,Rro,Pro,JR,Bro,Iro,YR,qro,Nro,jro,ss,qte,Dro,Gro,KR,Oro,Vro,ZR,Xro,zro,Wro,ls,Nte,Qro,Hro,eP,Uro,Jro,oP,Yro,Kro,Zro,Pg,jte,eto,oto,rP,rto,tto,ato,is,Dte,nto,sto,tP,lto,ito,aP,dto,cto,fto,Bg,Gte,mto,gto,nP,hto,pto,_to,Ig,Ote,uto,bto,sP,vto,Fto,Tto,ds,Vte,Mto,Eto,lP,Cto,wto,iP,Ato,yto,Lto,cs,Xte,xto,$to,dP,kto,Sto,cP,Rto,Pto,Bto,fs,zte,Ito,qto,fP,Nto,jto,mP,Dto,Gto,Oto,qg,Wte,Vto,Xto,gP,zto,Wto,Qto,ms,Qte,Hto,Uto,hP,Jto,Yto,pP,Kto,Zto,eao,gs,Hte,oao,rao,_P,tao,aao,uP,nao,sao,lao,hs,Ute,iao,dao,bP,cao,fao,vP,mao,gao,hao,ps,Jte,pao,_ao,FP,uao,bao,TP,vao,Fao,Tao,_s,Yte,Mao,Eao,MP,Cao,wao,EP,Aao,yao,Lao,Ng,Kte,xao,$ao,CP,kao,Sao,Rao,us,Zte,Pao,Bao,wP,Iao,qao,AP,Nao,jao,Dao,jg,eae,Gao,Oao,yP,Vao,Xao,zao,Dg,oae,Wao,Qao,LP,Hao,Uao,Jao,Gg,rae,Yao,Kao,xP,Zao,eno,ono,Og,tae,rno,tno,$P,ano,nno,sno,bs,aae,lno,ino,kP,dno,cno,SP,fno,mno,gno,Vg,nae,hno,pno,RP,_no,uno,bno,vs,sae,vno,Fno,PP,Tno,Mno,BP,Eno,Cno,wno,Fs,lae,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,Ts,iae,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,Ms,dae,Dno,Gno,DP,Ono,Vno,GP,Xno,zno,Wno,Es,cae,Qno,Hno,OP,Uno,Jno,VP,Yno,Kno,Zno,Cs,fae,eso,oso,XP,rso,tso,zP,aso,nso,sso,Xg,mae,lso,iso,WP,dso,cso,fso,zg,gae,mso,gso,QP,hso,pso,_so,ws,hae,uso,bso,HP,vso,Fso,UP,Tso,Mso,Eso,As,pae,Cso,wso,JP,Aso,yso,YP,Lso,xso,$so,ys,_ae,kso,Sso,KP,Rso,Pso,ZP,Bso,Iso,qso,Wg,uae,Nso,jso,eB,Dso,Gso,Oso,Qg,bae,Vso,Xso,oB,zso,Wso,Qso,Hg,vae,Hso,Uso,rB,Jso,Yso,Kso,Ls,Fae,Zso,elo,tB,olo,rlo,aB,tlo,alo,nlo,Ug,Tae,slo,llo,nB,ilo,dlo,clo,Jg,Mae,flo,mlo,sB,glo,hlo,plo,Yg,Eae,_lo,ulo,lB,blo,vlo,Flo,xs,Cae,Tlo,Mlo,iB,Elo,Clo,dB,wlo,Alo,ylo,Kg,wae,Llo,xlo,cB,$lo,klo,Slo,Zg,Aae,Rlo,Plo,fB,Blo,Ilo,qlo,$s,yae,Nlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,ks,Lae,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Ss,xae,Klo,Zlo,_B,eio,oio,uB,rio,tio,aio,Rs,$ae,nio,sio,bB,lio,iio,vB,dio,cio,fio,eh,mio,oh,L0,gio,kae,hio,gqe,Mi,rh,Sae,x0,pio,Rae,_io,hqe,Ao,$0,uio,k0,bio,FB,vio,Fio,Tio,S0,Mio,Pae,Eio,Cio,wio,He,R0,Aio,Bae,yio,Lio,ya,xio,Iae,$io,kio,qae,Sio,Rio,Nae,Pio,Bio,Iio,Z,th,jae,qio,Nio,TB,jio,Dio,Gio,ah,Dae,Oio,Vio,MB,Xio,zio,Wio,nh,Gae,Qio,Hio,EB,Uio,Jio,Yio,sh,Oae,Kio,Zio,CB,edo,odo,rdo,lh,Vae,tdo,ado,wB,ndo,sdo,ldo,ih,Xae,ido,ddo,AB,cdo,fdo,mdo,dh,zae,gdo,hdo,yB,pdo,_do,udo,ch,Wae,bdo,vdo,LB,Fdo,Tdo,Mdo,fh,Qae,Edo,Cdo,xB,wdo,Ado,ydo,mh,Hae,Ldo,xdo,$B,$do,kdo,Sdo,gh,Uae,Rdo,Pdo,kB,Bdo,Ido,qdo,hh,Jae,Ndo,jdo,SB,Ddo,Gdo,Odo,ph,Yae,Vdo,Xdo,RB,zdo,Wdo,Qdo,_h,Kae,Hdo,Udo,PB,Jdo,Ydo,Kdo,uh,Zae,Zdo,eco,BB,oco,rco,tco,bh,ene,aco,nco,IB,sco,lco,ico,vh,one,dco,cco,qB,fco,mco,gco,Fh,rne,hco,pco,NB,_co,uco,bco,Th,tne,vco,Fco,jB,Tco,Mco,Eco,Mh,ane,Cco,wco,DB,Aco,yco,Lco,Eh,nne,xco,$co,GB,kco,Sco,Rco,Ch,sne,Pco,Bco,OB,Ico,qco,Nco,wh,lne,jco,Dco,VB,Gco,Oco,Vco,Ah,ine,Xco,zco,XB,Wco,Qco,Hco,yh,dne,Uco,Jco,zB,Yco,Kco,Zco,Lh,cne,efo,ofo,WB,rfo,tfo,afo,xh,nfo,$h,sfo,kh,P0,lfo,fne,ifo,pqe,Ei,Sh,mne,B0,dfo,gne,cfo,_qe,yo,I0,ffo,q0,mfo,QB,gfo,hfo,pfo,N0,_fo,hne,ufo,bfo,vfo,Ue,j0,Ffo,pne,Tfo,Mfo,Ci,Efo,_ne,Cfo,wfo,une,Afo,yfo,Lfo,_e,Rh,bne,xfo,$fo,HB,kfo,Sfo,Rfo,Ph,vne,Pfo,Bfo,Fne,Ifo,qfo,Nfo,Bh,Tne,jfo,Dfo,UB,Gfo,Ofo,Vfo,Ih,Mne,Xfo,zfo,JB,Wfo,Qfo,Hfo,qh,Ene,Ufo,Jfo,YB,Yfo,Kfo,Zfo,Nh,Cne,emo,omo,KB,rmo,tmo,amo,jh,wne,nmo,smo,ZB,lmo,imo,dmo,Dh,Ane,cmo,fmo,eI,mmo,gmo,hmo,Gh,yne,pmo,_mo,oI,umo,bmo,vmo,Oh,Lne,Fmo,Tmo,rI,Mmo,Emo,Cmo,Vh,xne,wmo,Amo,tI,ymo,Lmo,xmo,Xh,$ne,$mo,kmo,aI,Smo,Rmo,Pmo,zh,kne,Bmo,Imo,nI,qmo,Nmo,jmo,Wh,Sne,Dmo,Gmo,sI,Omo,Vmo,Xmo,Qh,Rne,zmo,Wmo,lI,Qmo,Hmo,Umo,Hh,Pne,Jmo,Ymo,iI,Kmo,Zmo,ego,Uh,ogo,Jh,rgo,Yh,D0,tgo,Bne,ago,uqe,wi,Kh,Ine,G0,ngo,qne,sgo,bqe,Lo,O0,lgo,Ai,igo,dI,dgo,cgo,cI,fgo,mgo,ggo,V0,hgo,Nne,pgo,_go,ugo,tt,X0,bgo,jne,vgo,Fgo,yi,Tgo,Dne,Mgo,Ego,fI,Cgo,wgo,Ago,Zh,ygo,Je,z0,Lgo,Gne,xgo,$go,La,kgo,One,Sgo,Rgo,Vne,Pgo,Bgo,Xne,Igo,qgo,Ngo,x,ep,zne,jgo,Dgo,mI,Ggo,Ogo,Vgo,op,Wne,Xgo,zgo,gI,Wgo,Qgo,Hgo,rp,Qne,Ugo,Jgo,hI,Ygo,Kgo,Zgo,tp,Hne,eho,oho,pI,rho,tho,aho,ap,Une,nho,sho,_I,lho,iho,dho,np,Jne,cho,fho,uI,mho,gho,hho,sp,Yne,pho,_ho,bI,uho,bho,vho,lp,Kne,Fho,Tho,vI,Mho,Eho,Cho,ip,Zne,who,Aho,FI,yho,Lho,xho,dp,ese,$ho,kho,TI,Sho,Rho,Pho,cp,ose,Bho,Iho,MI,qho,Nho,jho,fp,rse,Dho,Gho,EI,Oho,Vho,Xho,mp,tse,zho,Who,CI,Qho,Hho,Uho,gp,ase,Jho,Yho,wI,Kho,Zho,epo,hp,nse,opo,rpo,AI,tpo,apo,npo,pp,sse,spo,lpo,yI,ipo,dpo,cpo,_p,lse,fpo,mpo,LI,gpo,hpo,ppo,up,ise,_po,upo,xI,bpo,vpo,Fpo,bp,dse,Tpo,Mpo,$I,Epo,Cpo,wpo,vp,cse,Apo,ypo,kI,Lpo,xpo,$po,Fp,fse,kpo,Spo,SI,Rpo,Ppo,Bpo,Tp,mse,Ipo,qpo,RI,Npo,jpo,Dpo,Mp,gse,Gpo,Opo,PI,Vpo,Xpo,zpo,Ep,hse,Wpo,Qpo,BI,Hpo,Upo,Jpo,Cp,pse,Ypo,Kpo,II,Zpo,e_o,o_o,wp,_se,r_o,t_o,qI,a_o,n_o,s_o,Ap,use,l_o,i_o,NI,d_o,c_o,f_o,yp,bse,m_o,g_o,jI,h_o,p_o,__o,Lp,vse,u_o,b_o,DI,v_o,F_o,T_o,xp,Fse,M_o,E_o,GI,C_o,w_o,A_o,$p,Tse,y_o,L_o,OI,x_o,$_o,k_o,Ps,Mse,S_o,R_o,VI,P_o,B_o,XI,I_o,q_o,N_o,kp,Ese,j_o,D_o,zI,G_o,O_o,V_o,Sp,Cse,X_o,z_o,WI,W_o,Q_o,H_o,Rp,wse,U_o,J_o,QI,Y_o,K_o,Z_o,Pp,Ase,euo,ouo,HI,ruo,tuo,auo,Bp,yse,nuo,suo,UI,luo,iuo,duo,Ip,Lse,cuo,fuo,JI,muo,guo,huo,qp,xse,puo,_uo,YI,uuo,buo,vuo,Np,$se,Fuo,Tuo,KI,Muo,Euo,Cuo,jp,kse,wuo,Auo,ZI,yuo,Luo,xuo,Dp,Sse,$uo,kuo,eq,Suo,Ruo,Puo,Gp,Rse,Buo,Iuo,oq,quo,Nuo,juo,Op,Pse,Duo,Guo,rq,Ouo,Vuo,Xuo,Vp,Bse,zuo,Wuo,tq,Quo,Huo,Uuo,Xp,Ise,Juo,Yuo,aq,Kuo,Zuo,e2o,zp,qse,o2o,r2o,nq,t2o,a2o,n2o,Wp,Nse,s2o,l2o,sq,i2o,d2o,c2o,Qp,jse,f2o,m2o,lq,g2o,h2o,p2o,Hp,Dse,_2o,u2o,iq,b2o,v2o,F2o,Up,Gse,T2o,M2o,dq,E2o,C2o,w2o,Jp,Ose,A2o,y2o,cq,L2o,x2o,$2o,Yp,Vse,k2o,S2o,fq,R2o,P2o,B2o,Kp,Xse,I2o,q2o,mq,N2o,j2o,D2o,Zp,zse,G2o,O2o,gq,V2o,X2o,z2o,e_,Wse,W2o,Q2o,hq,H2o,U2o,J2o,o_,Qse,Y2o,K2o,pq,Z2o,e1o,o1o,r_,Hse,r1o,t1o,_q,a1o,n1o,s1o,t_,Use,l1o,i1o,uq,d1o,c1o,f1o,a_,Jse,m1o,g1o,bq,h1o,p1o,_1o,n_,Yse,u1o,b1o,vq,v1o,F1o,T1o,s_,Kse,M1o,E1o,Fq,C1o,w1o,A1o,l_,Zse,y1o,L1o,Tq,x1o,$1o,k1o,i_,ele,S1o,R1o,Mq,P1o,B1o,I1o,d_,ole,q1o,N1o,Eq,j1o,D1o,G1o,c_,rle,O1o,V1o,Cq,X1o,z1o,W1o,f_,tle,Q1o,H1o,wq,U1o,J1o,Y1o,m_,ale,K1o,Z1o,Aq,ebo,obo,rbo,g_,nle,tbo,abo,yq,nbo,sbo,lbo,h_,sle,ibo,dbo,Lq,cbo,fbo,mbo,p_,lle,gbo,hbo,xq,pbo,_bo,ubo,__,ile,bbo,vbo,$q,Fbo,Tbo,Mbo,u_,dle,Ebo,Cbo,kq,wbo,Abo,ybo,b_,cle,Lbo,xbo,Sq,$bo,kbo,Sbo,v_,fle,Rbo,Pbo,Rq,Bbo,Ibo,qbo,F_,mle,Nbo,jbo,Pq,Dbo,Gbo,Obo,T_,gle,Vbo,Xbo,Bq,zbo,Wbo,Qbo,M_,hle,Hbo,Ubo,Iq,Jbo,Ybo,Kbo,E_,ple,Zbo,evo,qq,ovo,rvo,tvo,C_,_le,avo,nvo,Nq,svo,lvo,ivo,w_,ule,dvo,cvo,jq,fvo,mvo,gvo,A_,ble,hvo,pvo,Dq,_vo,uvo,bvo,y_,vle,vvo,Fvo,Gq,Tvo,Mvo,Evo,L_,Fle,Cvo,wvo,Oq,Avo,yvo,Lvo,x_,Tle,xvo,$vo,Vq,kvo,Svo,Rvo,$_,Mle,Pvo,Bvo,Xq,Ivo,qvo,Nvo,k_,Ele,jvo,Dvo,zq,Gvo,Ovo,Vvo,S_,Cle,Xvo,zvo,Wq,Wvo,Qvo,Hvo,R_,wle,Uvo,Jvo,Qq,Yvo,Kvo,Zvo,P_,Ale,eFo,oFo,Hq,rFo,tFo,aFo,B_,yle,nFo,sFo,Uq,lFo,iFo,dFo,I_,Lle,cFo,fFo,Jq,mFo,gFo,hFo,q_,xle,pFo,_Fo,Yq,uFo,bFo,vFo,N_,$le,FFo,TFo,Kq,MFo,EFo,CFo,j_,kle,wFo,AFo,Zq,yFo,LFo,xFo,D_,Sle,$Fo,kFo,eN,SFo,RFo,PFo,G_,Rle,BFo,IFo,oN,qFo,NFo,jFo,O_,Ple,DFo,GFo,rN,OFo,VFo,XFo,V_,Ble,zFo,WFo,tN,QFo,HFo,UFo,X_,JFo,Ile,YFo,KFo,qle,ZFo,e6o,z_,vqe,Li,W_,Nle,W0,o6o,jle,r6o,Fqe,xo,Q0,t6o,xi,a6o,aN,n6o,s6o,nN,l6o,i6o,d6o,H0,c6o,Dle,f6o,m6o,g6o,at,U0,h6o,Gle,p6o,_6o,$i,u6o,Ole,b6o,v6o,sN,F6o,T6o,M6o,Q_,E6o,Ye,J0,C6o,Vle,w6o,A6o,xa,y6o,Xle,L6o,x6o,zle,$6o,k6o,Wle,S6o,R6o,P6o,G,H_,Qle,B6o,I6o,lN,q6o,N6o,j6o,U_,Hle,D6o,G6o,iN,O6o,V6o,X6o,J_,Ule,z6o,W6o,dN,Q6o,H6o,U6o,Y_,Jle,J6o,Y6o,cN,K6o,Z6o,eTo,K_,Yle,oTo,rTo,fN,tTo,aTo,nTo,Z_,Kle,sTo,lTo,mN,iTo,dTo,cTo,eu,Zle,fTo,mTo,gN,gTo,hTo,pTo,ou,eie,_To,uTo,hN,bTo,vTo,FTo,ru,oie,TTo,MTo,pN,ETo,CTo,wTo,tu,rie,ATo,yTo,_N,LTo,xTo,$To,au,tie,kTo,STo,uN,RTo,PTo,BTo,nu,aie,ITo,qTo,bN,NTo,jTo,DTo,su,nie,GTo,OTo,vN,VTo,XTo,zTo,lu,sie,WTo,QTo,FN,HTo,UTo,JTo,iu,lie,YTo,KTo,TN,ZTo,e7o,o7o,du,iie,r7o,t7o,MN,a7o,n7o,s7o,cu,die,l7o,i7o,EN,d7o,c7o,f7o,fu,cie,m7o,g7o,CN,h7o,p7o,_7o,mu,fie,u7o,b7o,wN,v7o,F7o,T7o,gu,mie,M7o,E7o,AN,C7o,w7o,A7o,hu,gie,y7o,L7o,yN,x7o,$7o,k7o,pu,hie,S7o,R7o,LN,P7o,B7o,I7o,_u,pie,q7o,N7o,xN,j7o,D7o,G7o,uu,_ie,O7o,V7o,$N,X7o,z7o,W7o,bu,uie,Q7o,H7o,kN,U7o,J7o,Y7o,vu,bie,K7o,Z7o,SN,e9o,o9o,r9o,Fu,vie,t9o,a9o,RN,n9o,s9o,l9o,Tu,Fie,i9o,d9o,PN,c9o,f9o,m9o,Mu,Tie,g9o,h9o,BN,p9o,_9o,u9o,Eu,Mie,b9o,v9o,IN,F9o,T9o,M9o,Cu,Eie,E9o,C9o,qN,w9o,A9o,y9o,wu,Cie,L9o,x9o,NN,$9o,k9o,S9o,Au,wie,R9o,P9o,jN,B9o,I9o,q9o,yu,Aie,N9o,j9o,DN,D9o,G9o,O9o,Lu,yie,V9o,X9o,GN,z9o,W9o,Q9o,xu,Lie,H9o,U9o,ON,J9o,Y9o,K9o,$u,xie,Z9o,eMo,VN,oMo,rMo,tMo,ku,$ie,aMo,nMo,XN,sMo,lMo,iMo,Su,kie,dMo,cMo,zN,fMo,mMo,gMo,Ru,Sie,hMo,pMo,WN,_Mo,uMo,bMo,Pu,Rie,vMo,FMo,QN,TMo,MMo,EMo,Bu,Pie,CMo,wMo,HN,AMo,yMo,LMo,Iu,xMo,Bie,$Mo,kMo,Iie,SMo,RMo,qu,Tqe,ki,Nu,qie,Y0,PMo,Nie,BMo,Mqe,$o,K0,IMo,Si,qMo,UN,NMo,jMo,JN,DMo,GMo,OMo,Z0,VMo,jie,XMo,zMo,WMo,nt,eA,QMo,Die,HMo,UMo,Ri,JMo,Gie,YMo,KMo,YN,ZMo,e4o,o4o,ju,r4o,Ke,oA,t4o,Oie,a4o,n4o,$a,s4o,Vie,l4o,i4o,Xie,d4o,c4o,zie,f4o,m4o,g4o,z,Du,Wie,h4o,p4o,KN,_4o,u4o,b4o,Gu,Qie,v4o,F4o,ZN,T4o,M4o,E4o,Ou,Hie,C4o,w4o,ej,A4o,y4o,L4o,Vu,Uie,x4o,$4o,oj,k4o,S4o,R4o,Xu,Jie,P4o,B4o,rj,I4o,q4o,N4o,zu,Yie,j4o,D4o,tj,G4o,O4o,V4o,Wu,Kie,X4o,z4o,aj,W4o,Q4o,H4o,Qu,Zie,U4o,J4o,nj,Y4o,K4o,Z4o,Hu,ede,eEo,oEo,sj,rEo,tEo,aEo,Uu,ode,nEo,sEo,lj,lEo,iEo,dEo,Ju,rde,cEo,fEo,ij,mEo,gEo,hEo,Yu,tde,pEo,_Eo,dj,uEo,bEo,vEo,Ku,ade,FEo,TEo,cj,MEo,EEo,CEo,Zu,nde,wEo,AEo,fj,yEo,LEo,xEo,e2,sde,$Eo,kEo,mj,SEo,REo,PEo,o2,lde,BEo,IEo,gj,qEo,NEo,jEo,r2,ide,DEo,GEo,hj,OEo,VEo,XEo,t2,dde,zEo,WEo,pj,QEo,HEo,UEo,a2,cde,JEo,YEo,_j,KEo,ZEo,e5o,n2,fde,o5o,r5o,uj,t5o,a5o,n5o,s2,mde,s5o,l5o,bj,i5o,d5o,c5o,l2,gde,f5o,m5o,vj,g5o,h5o,p5o,i2,hde,_5o,u5o,Fj,b5o,v5o,F5o,d2,pde,T5o,M5o,Tj,E5o,C5o,w5o,c2,_de,A5o,y5o,Mj,L5o,x5o,$5o,f2,ude,k5o,S5o,Ej,R5o,P5o,B5o,m2,bde,I5o,q5o,Cj,N5o,j5o,D5o,g2,vde,G5o,O5o,wj,V5o,X5o,z5o,h2,Fde,W5o,Q5o,Aj,H5o,U5o,J5o,p2,Tde,Y5o,K5o,yj,Z5o,eCo,oCo,_2,Mde,rCo,tCo,Lj,aCo,nCo,sCo,u2,Ede,lCo,iCo,xj,dCo,cCo,fCo,b2,Cde,mCo,gCo,$j,hCo,pCo,_Co,v2,wde,uCo,bCo,kj,vCo,FCo,TCo,F2,Ade,MCo,ECo,Sj,CCo,wCo,ACo,T2,yde,yCo,LCo,Rj,xCo,$Co,kCo,M2,SCo,Lde,RCo,PCo,xde,BCo,ICo,E2,Eqe,Pi,C2,$de,rA,qCo,kde,NCo,Cqe,ko,tA,jCo,Bi,DCo,Pj,GCo,OCo,Bj,VCo,XCo,zCo,aA,WCo,Sde,QCo,HCo,UCo,st,nA,JCo,Rde,YCo,KCo,Ii,ZCo,Pde,e3o,o3o,Ij,r3o,t3o,a3o,w2,n3o,Ze,sA,s3o,Bde,l3o,i3o,ka,d3o,Ide,c3o,f3o,qde,m3o,g3o,Nde,h3o,p3o,_3o,W,A2,jde,u3o,b3o,qj,v3o,F3o,T3o,y2,Dde,M3o,E3o,Nj,C3o,w3o,A3o,L2,Gde,y3o,L3o,jj,x3o,$3o,k3o,x2,Ode,S3o,R3o,Dj,P3o,B3o,I3o,$2,Vde,q3o,N3o,Gj,j3o,D3o,G3o,k2,Xde,O3o,V3o,Oj,X3o,z3o,W3o,S2,zde,Q3o,H3o,Vj,U3o,J3o,Y3o,R2,Wde,K3o,Z3o,Xj,ewo,owo,rwo,P2,Qde,two,awo,zj,nwo,swo,lwo,B2,Hde,iwo,dwo,Wj,cwo,fwo,mwo,I2,Ude,gwo,hwo,Qj,pwo,_wo,uwo,q2,Jde,bwo,vwo,Hj,Fwo,Two,Mwo,N2,Yde,Ewo,Cwo,Uj,wwo,Awo,ywo,j2,Kde,Lwo,xwo,Jj,$wo,kwo,Swo,D2,Zde,Rwo,Pwo,Yj,Bwo,Iwo,qwo,G2,ece,Nwo,jwo,Kj,Dwo,Gwo,Owo,O2,oce,Vwo,Xwo,Zj,zwo,Wwo,Qwo,V2,rce,Hwo,Uwo,eD,Jwo,Ywo,Kwo,X2,tce,Zwo,e0o,oD,o0o,r0o,t0o,z2,ace,a0o,n0o,rD,s0o,l0o,i0o,W2,nce,d0o,c0o,tD,f0o,m0o,g0o,Q2,sce,h0o,p0o,aD,_0o,u0o,b0o,H2,lce,v0o,F0o,nD,T0o,M0o,E0o,U2,ice,C0o,w0o,sD,A0o,y0o,L0o,J2,dce,x0o,$0o,lD,k0o,S0o,R0o,Y2,cce,P0o,B0o,iD,I0o,q0o,N0o,K2,fce,j0o,D0o,dD,G0o,O0o,V0o,Z2,mce,X0o,z0o,cD,W0o,Q0o,H0o,e1,gce,U0o,J0o,fD,Y0o,K0o,Z0o,o1,hce,eAo,oAo,mD,rAo,tAo,aAo,r1,pce,nAo,sAo,_ce,lAo,iAo,dAo,t1,uce,cAo,fAo,gD,mAo,gAo,hAo,a1,bce,pAo,_Ao,hD,uAo,bAo,vAo,n1,vce,FAo,TAo,pD,MAo,EAo,CAo,s1,Fce,wAo,AAo,_D,yAo,LAo,xAo,l1,$Ao,Tce,kAo,SAo,Mce,RAo,PAo,i1,wqe,qi,d1,Ece,lA,BAo,Cce,IAo,Aqe,So,iA,qAo,Ni,NAo,uD,jAo,DAo,bD,GAo,OAo,VAo,dA,XAo,wce,zAo,WAo,QAo,lt,cA,HAo,Ace,UAo,JAo,ji,YAo,yce,KAo,ZAo,vD,eyo,oyo,ryo,c1,tyo,eo,fA,ayo,Lce,nyo,syo,Sa,lyo,xce,iyo,dyo,$ce,cyo,fyo,kce,myo,gyo,hyo,he,f1,Sce,pyo,_yo,FD,uyo,byo,vyo,m1,Rce,Fyo,Tyo,TD,Myo,Eyo,Cyo,g1,Pce,wyo,Ayo,MD,yyo,Lyo,xyo,h1,Bce,$yo,kyo,ED,Syo,Ryo,Pyo,p1,Ice,Byo,Iyo,CD,qyo,Nyo,jyo,_1,qce,Dyo,Gyo,wD,Oyo,Vyo,Xyo,u1,Nce,zyo,Wyo,AD,Qyo,Hyo,Uyo,b1,jce,Jyo,Yyo,yD,Kyo,Zyo,eLo,v1,Dce,oLo,rLo,LD,tLo,aLo,nLo,F1,Gce,sLo,lLo,xD,iLo,dLo,cLo,T1,Oce,fLo,mLo,$D,gLo,hLo,pLo,M1,Vce,_Lo,uLo,kD,bLo,vLo,FLo,E1,Xce,TLo,MLo,SD,ELo,CLo,wLo,C1,zce,ALo,yLo,RD,LLo,xLo,$Lo,w1,Wce,kLo,SLo,PD,RLo,PLo,BLo,A1,Qce,ILo,qLo,BD,NLo,jLo,DLo,y1,Hce,GLo,OLo,ID,VLo,XLo,zLo,L1,WLo,Uce,QLo,HLo,Jce,ULo,JLo,x1,yqe,Di,$1,Yce,mA,YLo,Kce,KLo,Lqe,Ro,gA,ZLo,Gi,e8o,qD,o8o,r8o,ND,t8o,a8o,n8o,hA,s8o,Zce,l8o,i8o,d8o,it,pA,c8o,efe,f8o,m8o,Oi,g8o,ofe,h8o,p8o,jD,_8o,u8o,b8o,k1,v8o,oo,_A,F8o,rfe,T8o,M8o,Ra,E8o,tfe,C8o,w8o,afe,A8o,y8o,nfe,L8o,x8o,$8o,q,S1,sfe,k8o,S8o,DD,R8o,P8o,B8o,R1,lfe,I8o,q8o,GD,N8o,j8o,D8o,P1,ife,G8o,O8o,OD,V8o,X8o,z8o,B1,dfe,W8o,Q8o,VD,H8o,U8o,J8o,I1,cfe,Y8o,K8o,XD,Z8o,exo,oxo,q1,ffe,rxo,txo,zD,axo,nxo,sxo,N1,mfe,lxo,ixo,WD,dxo,cxo,fxo,j1,gfe,mxo,gxo,QD,hxo,pxo,_xo,D1,hfe,uxo,bxo,HD,vxo,Fxo,Txo,G1,pfe,Mxo,Exo,UD,Cxo,wxo,Axo,O1,_fe,yxo,Lxo,JD,xxo,$xo,kxo,V1,ufe,Sxo,Rxo,YD,Pxo,Bxo,Ixo,X1,bfe,qxo,Nxo,KD,jxo,Dxo,Gxo,z1,vfe,Oxo,Vxo,ZD,Xxo,zxo,Wxo,W1,Ffe,Qxo,Hxo,eG,Uxo,Jxo,Yxo,Q1,Tfe,Kxo,Zxo,oG,e$o,o$o,r$o,H1,Mfe,t$o,a$o,rG,n$o,s$o,l$o,U1,Efe,i$o,d$o,tG,c$o,f$o,m$o,J1,Cfe,g$o,h$o,aG,p$o,_$o,u$o,Y1,wfe,b$o,v$o,nG,F$o,T$o,M$o,K1,Afe,E$o,C$o,sG,w$o,A$o,y$o,Z1,yfe,L$o,x$o,lG,$$o,k$o,S$o,eb,Lfe,R$o,P$o,iG,B$o,I$o,q$o,ob,xfe,N$o,j$o,dG,D$o,G$o,O$o,rb,$fe,V$o,X$o,cG,z$o,W$o,Q$o,tb,kfe,H$o,U$o,fG,J$o,Y$o,K$o,ab,Sfe,Z$o,eko,mG,oko,rko,tko,nb,Rfe,ako,nko,gG,sko,lko,iko,sb,Pfe,dko,cko,hG,fko,mko,gko,lb,Bfe,hko,pko,pG,_ko,uko,bko,ib,Ife,vko,Fko,_G,Tko,Mko,Eko,db,qfe,Cko,wko,uG,Ako,yko,Lko,cb,Nfe,xko,$ko,bG,kko,Sko,Rko,fb,jfe,Pko,Bko,vG,Iko,qko,Nko,mb,Dfe,jko,Dko,FG,Gko,Oko,Vko,gb,Gfe,Xko,zko,TG,Wko,Qko,Hko,hb,Ofe,Uko,Jko,MG,Yko,Kko,Zko,pb,Vfe,eSo,oSo,EG,rSo,tSo,aSo,_b,Xfe,nSo,sSo,CG,lSo,iSo,dSo,ub,zfe,cSo,fSo,wG,mSo,gSo,hSo,bb,Wfe,pSo,_So,AG,uSo,bSo,vSo,vb,Qfe,FSo,TSo,yG,MSo,ESo,CSo,Fb,Hfe,wSo,ASo,LG,ySo,LSo,xSo,Tb,Ufe,$So,kSo,xG,SSo,RSo,PSo,Mb,Jfe,BSo,ISo,$G,qSo,NSo,jSo,Eb,Yfe,DSo,GSo,kG,OSo,VSo,XSo,Cb,zSo,Kfe,WSo,QSo,Zfe,HSo,USo,wb,xqe,Vi,Ab,eme,uA,JSo,ome,YSo,$qe,Po,bA,KSo,Xi,ZSo,SG,eRo,oRo,RG,rRo,tRo,aRo,vA,nRo,rme,sRo,lRo,iRo,dt,FA,dRo,tme,cRo,fRo,zi,mRo,ame,gRo,hRo,PG,pRo,_Ro,uRo,yb,bRo,ro,TA,vRo,nme,FRo,TRo,Pa,MRo,sme,ERo,CRo,lme,wRo,ARo,ime,yRo,LRo,xRo,Y,Lb,dme,$Ro,kRo,BG,SRo,RRo,PRo,xb,cme,BRo,IRo,IG,qRo,NRo,jRo,$b,fme,DRo,GRo,qG,ORo,VRo,XRo,kb,mme,zRo,WRo,NG,QRo,HRo,URo,Sb,gme,JRo,YRo,jG,KRo,ZRo,ePo,Rb,hme,oPo,rPo,DG,tPo,aPo,nPo,Pb,pme,sPo,lPo,GG,iPo,dPo,cPo,Bb,_me,fPo,mPo,OG,gPo,hPo,pPo,Ib,ume,_Po,uPo,VG,bPo,vPo,FPo,qb,bme,TPo,MPo,XG,EPo,CPo,wPo,Nb,vme,APo,yPo,zG,LPo,xPo,$Po,jb,Fme,kPo,SPo,WG,RPo,PPo,BPo,Db,Tme,IPo,qPo,QG,NPo,jPo,DPo,Gb,Mme,GPo,OPo,HG,VPo,XPo,zPo,Ob,Eme,WPo,QPo,UG,HPo,UPo,JPo,Vb,Cme,YPo,KPo,JG,ZPo,eBo,oBo,Xb,wme,rBo,tBo,YG,aBo,nBo,sBo,zb,Ame,lBo,iBo,KG,dBo,cBo,fBo,Wb,yme,mBo,gBo,ZG,hBo,pBo,_Bo,Qb,Lme,uBo,bBo,eO,vBo,FBo,TBo,Hb,xme,MBo,EBo,oO,CBo,wBo,ABo,Ub,$me,yBo,LBo,rO,xBo,$Bo,kBo,Jb,kme,SBo,RBo,tO,PBo,BBo,IBo,Yb,Sme,qBo,NBo,aO,jBo,DBo,GBo,Kb,Rme,OBo,VBo,nO,XBo,zBo,WBo,Zb,Pme,QBo,HBo,sO,UBo,JBo,YBo,ev,Bme,KBo,ZBo,lO,eIo,oIo,rIo,ov,Ime,tIo,aIo,iO,nIo,sIo,lIo,rv,qme,iIo,dIo,dO,cIo,fIo,mIo,tv,gIo,Nme,hIo,pIo,jme,_Io,uIo,av,kqe,Wi,nv,Dme,MA,bIo,Gme,vIo,Sqe,Bo,EA,FIo,Qi,TIo,cO,MIo,EIo,fO,CIo,wIo,AIo,CA,yIo,Ome,LIo,xIo,$Io,ct,wA,kIo,Vme,SIo,RIo,Hi,PIo,Xme,BIo,IIo,mO,qIo,NIo,jIo,sv,DIo,to,AA,GIo,zme,OIo,VIo,Ba,XIo,Wme,zIo,WIo,Qme,QIo,HIo,Hme,UIo,JIo,YIo,Yr,lv,Ume,KIo,ZIo,gO,eqo,oqo,rqo,iv,Jme,tqo,aqo,hO,nqo,sqo,lqo,dv,Yme,iqo,dqo,pO,cqo,fqo,mqo,cv,Kme,gqo,hqo,_O,pqo,_qo,uqo,fv,Zme,bqo,vqo,uO,Fqo,Tqo,Mqo,mv,Eqo,ege,Cqo,wqo,oge,Aqo,yqo,gv,Rqe,Ui,hv,rge,yA,Lqo,tge,xqo,Pqe,Io,LA,$qo,Ji,kqo,bO,Sqo,Rqo,vO,Pqo,Bqo,Iqo,xA,qqo,age,Nqo,jqo,Dqo,ft,$A,Gqo,nge,Oqo,Vqo,Yi,Xqo,sge,zqo,Wqo,FO,Qqo,Hqo,Uqo,pv,Jqo,ao,kA,Yqo,lge,Kqo,Zqo,Ia,eNo,ige,oNo,rNo,dge,tNo,aNo,cge,nNo,sNo,lNo,U,_v,fge,iNo,dNo,TO,cNo,fNo,mNo,uv,mge,gNo,hNo,MO,pNo,_No,uNo,bv,gge,bNo,vNo,EO,FNo,TNo,MNo,vv,hge,ENo,CNo,CO,wNo,ANo,yNo,Fv,pge,LNo,xNo,wO,$No,kNo,SNo,Tv,_ge,RNo,PNo,AO,BNo,INo,qNo,Mv,uge,NNo,jNo,yO,DNo,GNo,ONo,Ev,bge,VNo,XNo,LO,zNo,WNo,QNo,Cv,vge,HNo,UNo,xO,JNo,YNo,KNo,wv,Fge,ZNo,ejo,$O,ojo,rjo,tjo,Av,Tge,ajo,njo,kO,sjo,ljo,ijo,yv,Mge,djo,cjo,SO,fjo,mjo,gjo,Lv,Ege,hjo,pjo,RO,_jo,ujo,bjo,xv,Cge,vjo,Fjo,PO,Tjo,Mjo,Ejo,$v,wge,Cjo,wjo,BO,Ajo,yjo,Ljo,kv,Age,xjo,$jo,IO,kjo,Sjo,Rjo,Sv,yge,Pjo,Bjo,qO,Ijo,qjo,Njo,Rv,Lge,jjo,Djo,NO,Gjo,Ojo,Vjo,Pv,xge,Xjo,zjo,jO,Wjo,Qjo,Hjo,Bv,$ge,Ujo,Jjo,DO,Yjo,Kjo,Zjo,Iv,kge,eDo,oDo,GO,rDo,tDo,aDo,qv,Sge,nDo,sDo,OO,lDo,iDo,dDo,Nv,Rge,cDo,fDo,VO,mDo,gDo,hDo,jv,Pge,pDo,_Do,XO,uDo,bDo,vDo,Dv,Bge,FDo,TDo,zO,MDo,EDo,CDo,Gv,Ige,wDo,ADo,WO,yDo,LDo,xDo,Ov,qge,$Do,kDo,QO,SDo,RDo,PDo,Vv,Nge,BDo,IDo,HO,qDo,NDo,jDo,Xv,jge,DDo,GDo,UO,ODo,VDo,XDo,zv,Dge,zDo,WDo,JO,QDo,HDo,UDo,Wv,Gge,JDo,YDo,YO,KDo,ZDo,eGo,Qv,Oge,oGo,rGo,KO,tGo,aGo,nGo,Hv,Vge,sGo,lGo,ZO,iGo,dGo,cGo,Uv,fGo,Xge,mGo,gGo,zge,hGo,pGo,Jv,Bqe,Ki,Yv,Wge,SA,_Go,Qge,uGo,Iqe,qo,RA,bGo,Zi,vGo,eV,FGo,TGo,oV,MGo,EGo,CGo,PA,wGo,Hge,AGo,yGo,LGo,mt,BA,xGo,Uge,$Go,kGo,ed,SGo,Jge,RGo,PGo,rV,BGo,IGo,qGo,Kv,NGo,no,IA,jGo,Yge,DGo,GGo,qa,OGo,Kge,VGo,XGo,Zge,zGo,WGo,ehe,QGo,HGo,UGo,V,Zv,ohe,JGo,YGo,tV,KGo,ZGo,eOo,eF,rhe,oOo,rOo,aV,tOo,aOo,nOo,oF,the,sOo,lOo,nV,iOo,dOo,cOo,rF,ahe,fOo,mOo,sV,gOo,hOo,pOo,tF,nhe,_Oo,uOo,lV,bOo,vOo,FOo,aF,she,TOo,MOo,iV,EOo,COo,wOo,nF,lhe,AOo,yOo,dV,LOo,xOo,$Oo,sF,ihe,kOo,SOo,cV,ROo,POo,BOo,lF,dhe,IOo,qOo,fV,NOo,jOo,DOo,iF,che,GOo,OOo,mV,VOo,XOo,zOo,dF,fhe,WOo,QOo,gV,HOo,UOo,JOo,cF,mhe,YOo,KOo,hV,ZOo,eVo,oVo,fF,ghe,rVo,tVo,pV,aVo,nVo,sVo,mF,hhe,lVo,iVo,_V,dVo,cVo,fVo,gF,phe,mVo,gVo,uV,hVo,pVo,_Vo,hF,_he,uVo,bVo,bV,vVo,FVo,TVo,pF,uhe,MVo,EVo,vV,CVo,wVo,AVo,_F,bhe,yVo,LVo,FV,xVo,$Vo,kVo,uF,vhe,SVo,RVo,TV,PVo,BVo,IVo,bF,Fhe,qVo,NVo,MV,jVo,DVo,GVo,vF,The,OVo,VVo,EV,XVo,zVo,WVo,FF,Mhe,QVo,HVo,CV,UVo,JVo,YVo,TF,Ehe,KVo,ZVo,wV,eXo,oXo,rXo,MF,Che,tXo,aXo,AV,nXo,sXo,lXo,EF,whe,iXo,dXo,yV,cXo,fXo,mXo,CF,Ahe,gXo,hXo,LV,pXo,_Xo,uXo,wF,yhe,bXo,vXo,xV,FXo,TXo,MXo,AF,Lhe,EXo,CXo,$V,wXo,AXo,yXo,yF,xhe,LXo,xXo,kV,$Xo,kXo,SXo,LF,$he,RXo,PXo,SV,BXo,IXo,qXo,xF,khe,NXo,jXo,RV,DXo,GXo,OXo,$F,She,VXo,XXo,PV,zXo,WXo,QXo,kF,Rhe,HXo,UXo,BV,JXo,YXo,KXo,SF,Phe,ZXo,ezo,IV,ozo,rzo,tzo,RF,Bhe,azo,nzo,qV,szo,lzo,izo,PF,Ihe,dzo,czo,NV,fzo,mzo,gzo,BF,qhe,hzo,pzo,jV,_zo,uzo,bzo,IF,Nhe,vzo,Fzo,DV,Tzo,Mzo,Ezo,qF,jhe,Czo,wzo,GV,Azo,yzo,Lzo,NF,xzo,Dhe,$zo,kzo,Ghe,Szo,Rzo,jF,qqe,od,DF,Ohe,qA,Pzo,Vhe,Bzo,Nqe,No,NA,Izo,rd,qzo,OV,Nzo,jzo,VV,Dzo,Gzo,Ozo,jA,Vzo,Xhe,Xzo,zzo,Wzo,gt,DA,Qzo,zhe,Hzo,Uzo,td,Jzo,Whe,Yzo,Kzo,XV,Zzo,eWo,oWo,GF,rWo,so,GA,tWo,Qhe,aWo,nWo,Na,sWo,Hhe,lWo,iWo,Uhe,dWo,cWo,Jhe,fWo,mWo,gWo,Yhe,OF,Khe,hWo,pWo,zV,_Wo,uWo,bWo,VF,vWo,Zhe,FWo,TWo,epe,MWo,EWo,XF,jqe,ad,zF,ope,OA,CWo,rpe,wWo,Dqe,jo,VA,AWo,nd,yWo,WV,LWo,xWo,QV,$Wo,kWo,SWo,XA,RWo,tpe,PWo,BWo,IWo,ht,zA,qWo,ape,NWo,jWo,sd,DWo,npe,GWo,OWo,HV,VWo,XWo,zWo,WF,WWo,lo,WA,QWo,spe,HWo,UWo,ja,JWo,lpe,YWo,KWo,ipe,ZWo,eQo,dpe,oQo,rQo,tQo,Fe,QF,cpe,aQo,nQo,UV,sQo,lQo,iQo,HF,fpe,dQo,cQo,JV,fQo,mQo,gQo,UF,mpe,hQo,pQo,YV,_Qo,uQo,bQo,Bs,gpe,vQo,FQo,KV,TQo,MQo,ZV,EQo,CQo,wQo,JF,hpe,AQo,yQo,eX,LQo,xQo,$Qo,pt,ppe,kQo,SQo,oX,RQo,PQo,rX,BQo,IQo,tX,qQo,NQo,jQo,YF,_pe,DQo,GQo,aX,OQo,VQo,XQo,KF,upe,zQo,WQo,nX,QQo,HQo,UQo,ZF,bpe,JQo,YQo,sX,KQo,ZQo,eHo,e6,vpe,oHo,rHo,lX,tHo,aHo,nHo,o6,Fpe,sHo,lHo,iX,iHo,dHo,cHo,r6,Tpe,fHo,mHo,dX,gHo,hHo,pHo,t6,Mpe,_Ho,uHo,cX,bHo,vHo,FHo,a6,THo,Epe,MHo,EHo,Cpe,CHo,wHo,n6,Gqe,ld,s6,wpe,QA,AHo,Ape,yHo,Oqe,Do,HA,LHo,id,xHo,fX,$Ho,kHo,mX,SHo,RHo,PHo,UA,BHo,ype,IHo,qHo,NHo,_t,JA,jHo,Lpe,DHo,GHo,dd,OHo,xpe,VHo,XHo,gX,zHo,WHo,QHo,l6,HHo,io,YA,UHo,$pe,JHo,YHo,Da,KHo,kpe,ZHo,eUo,Spe,oUo,rUo,Rpe,tUo,aUo,nUo,Ppe,i6,Bpe,sUo,lUo,hX,iUo,dUo,cUo,d6,fUo,Ipe,mUo,gUo,qpe,hUo,pUo,c6,Vqe,cd,f6,Npe,KA,_Uo,jpe,uUo,Xqe,Go,ZA,bUo,fd,vUo,pX,FUo,TUo,_X,MUo,EUo,CUo,ey,wUo,Dpe,AUo,yUo,LUo,ut,oy,xUo,Gpe,$Uo,kUo,md,SUo,Ope,RUo,PUo,uX,BUo,IUo,qUo,m6,NUo,co,ry,jUo,Vpe,DUo,GUo,Ga,OUo,Xpe,VUo,XUo,zpe,zUo,WUo,Wpe,QUo,HUo,UUo,Se,g6,Qpe,JUo,YUo,bX,KUo,ZUo,eJo,h6,Hpe,oJo,rJo,vX,tJo,aJo,nJo,p6,Upe,sJo,lJo,FX,iJo,dJo,cJo,_6,Jpe,fJo,mJo,TX,gJo,hJo,pJo,u6,Ype,_Jo,uJo,MX,bJo,vJo,FJo,b6,Kpe,TJo,MJo,EX,EJo,CJo,wJo,v6,Zpe,AJo,yJo,CX,LJo,xJo,$Jo,F6,e_e,kJo,SJo,wX,RJo,PJo,BJo,T6,o_e,IJo,qJo,AX,NJo,jJo,DJo,M6,GJo,r_e,OJo,VJo,t_e,XJo,zJo,E6,zqe,gd,C6,a_e,ty,WJo,n_e,QJo,Wqe,Oo,ay,HJo,hd,UJo,yX,JJo,YJo,LX,KJo,ZJo,eYo,ny,oYo,s_e,rYo,tYo,aYo,bt,sy,nYo,l_e,sYo,lYo,pd,iYo,i_e,dYo,cYo,xX,fYo,mYo,gYo,w6,hYo,fo,ly,pYo,d_e,_Yo,uYo,Oa,bYo,c_e,vYo,FYo,f_e,TYo,MYo,m_e,EYo,CYo,wYo,Kr,A6,g_e,AYo,yYo,$X,LYo,xYo,$Yo,y6,h_e,kYo,SYo,kX,RYo,PYo,BYo,L6,p_e,IYo,qYo,SX,NYo,jYo,DYo,x6,__e,GYo,OYo,RX,VYo,XYo,zYo,$6,u_e,WYo,QYo,PX,HYo,UYo,JYo,k6,YYo,b_e,KYo,ZYo,v_e,eKo,oKo,S6,Qqe,_d,R6,F_e,iy,rKo,T_e,tKo,Hqe,Vo,dy,aKo,ud,nKo,BX,sKo,lKo,IX,iKo,dKo,cKo,cy,fKo,M_e,mKo,gKo,hKo,vt,fy,pKo,E_e,_Ko,uKo,bd,bKo,C_e,vKo,FKo,qX,TKo,MKo,EKo,P6,CKo,mo,my,wKo,w_e,AKo,yKo,Va,LKo,A_e,xKo,$Ko,y_e,kKo,SKo,L_e,RKo,PKo,BKo,Re,B6,x_e,IKo,qKo,NX,NKo,jKo,DKo,I6,$_e,GKo,OKo,jX,VKo,XKo,zKo,q6,k_e,WKo,QKo,DX,HKo,UKo,JKo,N6,S_e,YKo,KKo,GX,ZKo,eZo,oZo,j6,R_e,rZo,tZo,OX,aZo,nZo,sZo,D6,P_e,lZo,iZo,VX,dZo,cZo,fZo,G6,B_e,mZo,gZo,XX,hZo,pZo,_Zo,O6,I_e,uZo,bZo,zX,vZo,FZo,TZo,V6,q_e,MZo,EZo,WX,CZo,wZo,AZo,X6,yZo,N_e,LZo,xZo,j_e,$Zo,kZo,z6,Uqe,vd,W6,D_e,gy,SZo,G_e,RZo,Jqe,Xo,hy,PZo,Fd,BZo,QX,IZo,qZo,HX,NZo,jZo,DZo,py,GZo,O_e,OZo,VZo,XZo,Ft,_y,zZo,V_e,WZo,QZo,Td,HZo,X_e,UZo,JZo,UX,YZo,KZo,ZZo,Q6,eer,go,uy,oer,z_e,rer,ter,Xa,aer,W_e,ner,ser,Q_e,ler,ier,H_e,der,cer,fer,by,H6,U_e,mer,ger,JX,her,per,_er,U6,J_e,uer,ber,YX,ver,Fer,Ter,J6,Mer,Y_e,Eer,Cer,K_e,wer,Aer,Y6,Yqe,Md,K6,Z_e,vy,yer,eue,Ler,Kqe,zo,Fy,xer,Ed,$er,KX,ker,Ser,ZX,Rer,Per,Ber,Ty,Ier,oue,qer,Ner,jer,Tt,My,Der,rue,Ger,Oer,Cd,Ver,tue,Xer,zer,ez,Wer,Qer,Her,Z6,Uer,ho,Ey,Jer,aue,Yer,Ker,za,Zer,nue,eor,oor,sue,ror,tor,lue,aor,nor,sor,Zr,eT,iue,lor,ior,oz,dor,cor,mor,oT,due,gor,hor,rz,por,_or,uor,rT,cue,bor,vor,tz,For,Tor,Mor,tT,fue,Eor,Cor,az,wor,Aor,yor,aT,mue,Lor,xor,nz,$or,kor,Sor,nT,Ror,gue,Por,Bor,hue,Ior,qor,sT,Zqe,wd,lT,pue,Cy,Nor,_ue,jor,eNe,Wo,wy,Dor,Ad,Gor,sz,Oor,Vor,lz,Xor,zor,Wor,Ay,Qor,uue,Hor,Uor,Jor,Mt,yy,Yor,bue,Kor,Zor,yd,err,vue,orr,rrr,iz,trr,arr,nrr,iT,srr,po,Ly,lrr,Fue,irr,drr,Wa,crr,Tue,frr,mrr,Mue,grr,hrr,Eue,prr,_rr,urr,Ld,dT,Cue,brr,vrr,dz,Frr,Trr,Mrr,cT,wue,Err,Crr,cz,wrr,Arr,yrr,fT,Aue,Lrr,xrr,fz,$rr,krr,Srr,mT,Rrr,yue,Prr,Brr,Lue,Irr,qrr,gT,oNe,xd,hT,xue,xy,Nrr,$ue,jrr,rNe,Qo,$y,Drr,$d,Grr,mz,Orr,Vrr,gz,Xrr,zrr,Wrr,ky,Qrr,kue,Hrr,Urr,Jrr,Et,Sy,Yrr,Sue,Krr,Zrr,kd,etr,Rue,otr,rtr,hz,ttr,atr,ntr,pT,str,_o,Ry,ltr,Pue,itr,dtr,Qa,ctr,Bue,ftr,mtr,Iue,gtr,htr,que,ptr,_tr,utr,Py,_T,Nue,btr,vtr,pz,Ftr,Ttr,Mtr,uT,jue,Etr,Ctr,_z,wtr,Atr,ytr,bT,Ltr,Due,xtr,$tr,Gue,ktr,Str,vT,tNe,Sd,FT,Oue,By,Rtr,Vue,Ptr,aNe,Ho,Iy,Btr,Rd,Itr,uz,qtr,Ntr,bz,jtr,Dtr,Gtr,qy,Otr,Xue,Vtr,Xtr,ztr,Ct,Ny,Wtr,zue,Qtr,Htr,Pd,Utr,Wue,Jtr,Ytr,vz,Ktr,Ztr,ear,TT,oar,uo,jy,rar,Que,tar,aar,Ha,nar,Hue,sar,lar,Uue,iar,dar,Jue,car,far,mar,Yue,MT,Kue,gar,har,Fz,par,_ar,uar,ET,bar,Zue,Far,Tar,e2e,Mar,Ear,CT,nNe,Bd,wT,o2e,Dy,Car,r2e,war,sNe,Uo,Gy,Aar,Id,yar,Tz,Lar,xar,Mz,$ar,kar,Sar,Oy,Rar,t2e,Par,Bar,Iar,wt,Vy,qar,a2e,Nar,jar,qd,Dar,n2e,Gar,Oar,Ez,Var,Xar,zar,AT,War,bo,Xy,Qar,s2e,Har,Uar,Ua,Jar,l2e,Yar,Kar,i2e,Zar,enr,d2e,onr,rnr,tnr,Ja,yT,c2e,anr,nnr,Cz,snr,lnr,inr,LT,f2e,dnr,cnr,wz,fnr,mnr,gnr,xT,m2e,hnr,pnr,Az,_nr,unr,bnr,$T,g2e,vnr,Fnr,yz,Tnr,Mnr,Enr,kT,Cnr,h2e,wnr,Anr,p2e,ynr,Lnr,ST,lNe,Nd,RT,_2e,zy,xnr,u2e,$nr,iNe,Jo,Wy,knr,jd,Snr,Lz,Rnr,Pnr,xz,Bnr,Inr,qnr,Qy,Nnr,b2e,jnr,Dnr,Gnr,At,Hy,Onr,v2e,Vnr,Xnr,Dd,znr,F2e,Wnr,Qnr,$z,Hnr,Unr,Jnr,PT,Ynr,vo,Uy,Knr,T2e,Znr,esr,Ya,osr,M2e,rsr,tsr,E2e,asr,nsr,C2e,ssr,lsr,isr,w2e,BT,A2e,dsr,csr,kz,fsr,msr,gsr,IT,hsr,y2e,psr,_sr,L2e,usr,bsr,qT,dNe,Gd,NT,x2e,Jy,vsr,$2e,Fsr,cNe,Yo,Yy,Tsr,Od,Msr,Sz,Esr,Csr,Rz,wsr,Asr,ysr,Ky,Lsr,k2e,xsr,$sr,ksr,yt,Zy,Ssr,S2e,Rsr,Psr,Vd,Bsr,R2e,Isr,qsr,Pz,Nsr,jsr,Dsr,jT,Gsr,wr,eL,Osr,P2e,Vsr,Xsr,Ka,zsr,B2e,Wsr,Qsr,I2e,Hsr,Usr,q2e,Jsr,Ysr,Ksr,N,DT,N2e,Zsr,elr,Bz,olr,rlr,tlr,GT,j2e,alr,nlr,Iz,slr,llr,ilr,OT,D2e,dlr,clr,qz,flr,mlr,glr,VT,G2e,hlr,plr,Nz,_lr,ulr,blr,XT,O2e,vlr,Flr,jz,Tlr,Mlr,Elr,zT,V2e,Clr,wlr,Dz,Alr,ylr,Llr,WT,X2e,xlr,$lr,Gz,klr,Slr,Rlr,QT,z2e,Plr,Blr,Oz,Ilr,qlr,Nlr,HT,W2e,jlr,Dlr,Vz,Glr,Olr,Vlr,UT,Q2e,Xlr,zlr,Xz,Wlr,Qlr,Hlr,JT,H2e,Ulr,Jlr,zz,Ylr,Klr,Zlr,YT,U2e,eir,oir,Wz,rir,tir,air,KT,J2e,nir,sir,Qz,lir,iir,dir,ZT,Y2e,cir,fir,Hz,mir,gir,hir,e7,K2e,pir,_ir,Uz,uir,bir,vir,o7,Z2e,Fir,Tir,Jz,Mir,Eir,Cir,r7,e1e,wir,Air,Yz,yir,Lir,xir,Is,o1e,$ir,kir,Kz,Sir,Rir,Zz,Pir,Bir,Iir,t7,r1e,qir,Nir,eW,jir,Dir,Gir,a7,t1e,Oir,Vir,oW,Xir,zir,Wir,n7,a1e,Qir,Hir,rW,Uir,Jir,Yir,s7,n1e,Kir,Zir,tW,edr,odr,rdr,l7,s1e,tdr,adr,aW,ndr,sdr,ldr,i7,l1e,idr,ddr,nW,cdr,fdr,mdr,d7,i1e,gdr,hdr,sW,pdr,_dr,udr,c7,d1e,bdr,vdr,lW,Fdr,Tdr,Mdr,f7,c1e,Edr,Cdr,iW,wdr,Adr,ydr,m7,f1e,Ldr,xdr,dW,$dr,kdr,Sdr,g7,m1e,Rdr,Pdr,cW,Bdr,Idr,qdr,h7,g1e,Ndr,jdr,fW,Ddr,Gdr,Odr,p7,h1e,Vdr,Xdr,mW,zdr,Wdr,Qdr,_7,p1e,Hdr,Udr,gW,Jdr,Ydr,Kdr,u7,_1e,Zdr,ecr,hW,ocr,rcr,tcr,b7,u1e,acr,ncr,pW,scr,lcr,icr,v7,b1e,dcr,ccr,_W,fcr,mcr,gcr,F7,v1e,hcr,pcr,uW,_cr,ucr,bcr,T7,F1e,vcr,Fcr,bW,Tcr,Mcr,Ecr,M7,T1e,Ccr,wcr,vW,Acr,ycr,Lcr,E7,M1e,xcr,$cr,FW,kcr,Scr,Rcr,C7,E1e,Pcr,Bcr,TW,Icr,qcr,Ncr,w7,C1e,jcr,Dcr,MW,Gcr,Ocr,Vcr,A7,w1e,Xcr,zcr,EW,Wcr,Qcr,Hcr,y7,A1e,Ucr,Jcr,CW,Ycr,Kcr,Zcr,L7,y1e,efr,ofr,wW,rfr,tfr,afr,x7,L1e,nfr,sfr,AW,lfr,ifr,dfr,$7,x1e,cfr,ffr,yW,mfr,gfr,hfr,k7,fNe,Xd,S7,$1e,oL,pfr,k1e,_fr,mNe,Ko,rL,ufr,zd,bfr,LW,vfr,Ffr,xW,Tfr,Mfr,Efr,tL,Cfr,S1e,wfr,Afr,yfr,Lt,aL,Lfr,R1e,xfr,$fr,Wd,kfr,P1e,Sfr,Rfr,$W,Pfr,Bfr,Ifr,R7,qfr,Ar,nL,Nfr,B1e,jfr,Dfr,Za,Gfr,I1e,Ofr,Vfr,q1e,Xfr,zfr,N1e,Wfr,Qfr,Hfr,se,P7,j1e,Ufr,Jfr,kW,Yfr,Kfr,Zfr,B7,D1e,emr,omr,SW,rmr,tmr,amr,I7,G1e,nmr,smr,RW,lmr,imr,dmr,q7,O1e,cmr,fmr,PW,mmr,gmr,hmr,N7,V1e,pmr,_mr,BW,umr,bmr,vmr,j7,X1e,Fmr,Tmr,IW,Mmr,Emr,Cmr,D7,z1e,wmr,Amr,qW,ymr,Lmr,xmr,G7,W1e,$mr,kmr,NW,Smr,Rmr,Pmr,O7,Q1e,Bmr,Imr,jW,qmr,Nmr,jmr,V7,H1e,Dmr,Gmr,DW,Omr,Vmr,Xmr,X7,U1e,zmr,Wmr,GW,Qmr,Hmr,Umr,z7,J1e,Jmr,Ymr,OW,Kmr,Zmr,egr,W7,Y1e,ogr,rgr,VW,tgr,agr,ngr,Q7,K1e,sgr,lgr,XW,igr,dgr,cgr,H7,Z1e,fgr,mgr,zW,ggr,hgr,pgr,U7,ebe,_gr,ugr,WW,bgr,vgr,Fgr,J7,obe,Tgr,Mgr,QW,Egr,Cgr,wgr,Y7,rbe,Agr,ygr,HW,Lgr,xgr,$gr,K7,tbe,kgr,Sgr,UW,Rgr,Pgr,Bgr,Z7,abe,Igr,qgr,JW,Ngr,jgr,Dgr,e9,nbe,Ggr,Ogr,YW,Vgr,Xgr,zgr,o9,sbe,Wgr,Qgr,KW,Hgr,Ugr,Jgr,r9,lbe,Ygr,Kgr,ZW,Zgr,ehr,ohr,t9,gNe,Qd,a9,ibe,sL,rhr,dbe,thr,hNe,Zo,lL,ahr,Hd,nhr,eQ,shr,lhr,oQ,ihr,dhr,chr,iL,fhr,cbe,mhr,ghr,hhr,xt,dL,phr,fbe,_hr,uhr,Ud,bhr,mbe,vhr,Fhr,rQ,Thr,Mhr,Ehr,n9,Chr,yr,cL,whr,gbe,Ahr,yhr,en,Lhr,hbe,xhr,$hr,pbe,khr,Shr,_be,Rhr,Phr,Bhr,Me,s9,ube,Ihr,qhr,tQ,Nhr,jhr,Dhr,l9,bbe,Ghr,Ohr,aQ,Vhr,Xhr,zhr,i9,vbe,Whr,Qhr,nQ,Hhr,Uhr,Jhr,d9,Fbe,Yhr,Khr,sQ,Zhr,epr,opr,c9,Tbe,rpr,tpr,lQ,apr,npr,spr,f9,Mbe,lpr,ipr,iQ,dpr,cpr,fpr,m9,Ebe,mpr,gpr,dQ,hpr,ppr,_pr,g9,Cbe,upr,bpr,cQ,vpr,Fpr,Tpr,h9,wbe,Mpr,Epr,fQ,Cpr,wpr,Apr,p9,Abe,ypr,Lpr,mQ,xpr,$pr,kpr,_9,ybe,Spr,Rpr,gQ,Ppr,Bpr,Ipr,u9,Lbe,qpr,Npr,hQ,jpr,Dpr,Gpr,b9,pNe,Jd,v9,xbe,fL,Opr,$be,Vpr,_Ne,er,mL,Xpr,Yd,zpr,pQ,Wpr,Qpr,_Q,Hpr,Upr,Jpr,gL,Ypr,kbe,Kpr,Zpr,e_r,$t,hL,o_r,Sbe,r_r,t_r,Kd,a_r,Rbe,n_r,s_r,uQ,l_r,i_r,d_r,F9,c_r,Lr,pL,f_r,Pbe,m_r,g_r,on,h_r,Bbe,p_r,__r,Ibe,u_r,b_r,qbe,v_r,F_r,T_r,rn,T9,Nbe,M_r,E_r,bQ,C_r,w_r,A_r,M9,jbe,y_r,L_r,vQ,x_r,$_r,k_r,E9,Dbe,S_r,R_r,FQ,P_r,B_r,I_r,C9,Gbe,q_r,N_r,TQ,j_r,D_r,G_r,w9,uNe,Zd,A9,Obe,_L,O_r,Vbe,V_r,bNe,or,uL,X_r,ec,z_r,MQ,W_r,Q_r,EQ,H_r,U_r,J_r,bL,Y_r,Xbe,K_r,Z_r,eur,kt,vL,our,zbe,rur,tur,oc,aur,Wbe,nur,sur,CQ,lur,iur,dur,y9,cur,xr,FL,fur,Qbe,mur,gur,tn,hur,Hbe,pur,_ur,Ube,uur,bur,Jbe,vur,Fur,Tur,ie,L9,Ybe,Mur,Eur,wQ,Cur,wur,Aur,x9,Kbe,yur,Lur,AQ,xur,$ur,kur,$9,Zbe,Sur,Rur,yQ,Pur,Bur,Iur,k9,eve,qur,Nur,LQ,jur,Dur,Gur,S9,ove,Our,Vur,xQ,Xur,zur,Wur,R9,rve,Qur,Hur,$Q,Uur,Jur,Yur,P9,tve,Kur,Zur,kQ,e2r,o2r,r2r,B9,ave,t2r,a2r,SQ,n2r,s2r,l2r,I9,nve,i2r,d2r,RQ,c2r,f2r,m2r,q9,sve,g2r,h2r,PQ,p2r,_2r,u2r,N9,lve,b2r,v2r,BQ,F2r,T2r,M2r,j9,ive,E2r,C2r,IQ,w2r,A2r,y2r,D9,dve,L2r,x2r,qQ,$2r,k2r,S2r,G9,cve,R2r,P2r,NQ,B2r,I2r,q2r,O9,fve,N2r,j2r,jQ,D2r,G2r,O2r,V9,mve,V2r,X2r,DQ,z2r,W2r,Q2r,X9,gve,H2r,U2r,GQ,J2r,Y2r,K2r,z9,hve,Z2r,e1r,OQ,o1r,r1r,t1r,W9,pve,a1r,n1r,VQ,s1r,l1r,i1r,Q9,_ve,d1r,c1r,XQ,f1r,m1r,g1r,H9,vNe,rc,U9,uve,TL,h1r,bve,p1r,FNe,rr,ML,_1r,tc,u1r,zQ,b1r,v1r,WQ,F1r,T1r,M1r,EL,E1r,vve,C1r,w1r,A1r,St,CL,y1r,Fve,L1r,x1r,ac,$1r,Tve,k1r,S1r,QQ,R1r,P1r,B1r,J9,I1r,$r,wL,q1r,Mve,N1r,j1r,an,D1r,Eve,G1r,O1r,Cve,V1r,X1r,wve,z1r,W1r,Q1r,ye,Y9,Ave,H1r,U1r,HQ,J1r,Y1r,K1r,K9,yve,Z1r,ebr,UQ,obr,rbr,tbr,Z9,Lve,abr,nbr,JQ,sbr,lbr,ibr,eM,xve,dbr,cbr,YQ,fbr,mbr,gbr,oM,$ve,hbr,pbr,KQ,_br,ubr,bbr,rM,kve,vbr,Fbr,ZQ,Tbr,Mbr,Ebr,tM,Sve,Cbr,wbr,eH,Abr,ybr,Lbr,aM,Rve,xbr,$br,oH,kbr,Sbr,Rbr,nM,Pve,Pbr,Bbr,rH,Ibr,qbr,Nbr,sM,Bve,jbr,Dbr,tH,Gbr,Obr,Vbr,lM,TNe,nc,iM,Ive,AL,Xbr,qve,zbr,MNe,tr,yL,Wbr,sc,Qbr,aH,Hbr,Ubr,nH,Jbr,Ybr,Kbr,LL,Zbr,Nve,evr,ovr,rvr,Rt,xL,tvr,jve,avr,nvr,lc,svr,Dve,lvr,ivr,sH,dvr,cvr,fvr,dM,mvr,kr,$L,gvr,Gve,hvr,pvr,nn,_vr,Ove,uvr,bvr,Vve,vvr,Fvr,Xve,Tvr,Mvr,Evr,ee,cM,zve,Cvr,wvr,lH,Avr,yvr,Lvr,fM,Wve,xvr,$vr,iH,kvr,Svr,Rvr,mM,Qve,Pvr,Bvr,dH,Ivr,qvr,Nvr,gM,Hve,jvr,Dvr,cH,Gvr,Ovr,Vvr,hM,Uve,Xvr,zvr,fH,Wvr,Qvr,Hvr,pM,Jve,Uvr,Jvr,mH,Yvr,Kvr,Zvr,_M,Yve,eFr,oFr,gH,rFr,tFr,aFr,uM,Kve,nFr,sFr,hH,lFr,iFr,dFr,bM,Zve,cFr,fFr,pH,mFr,gFr,hFr,vM,eFe,pFr,_Fr,_H,uFr,bFr,vFr,FM,oFe,FFr,TFr,uH,MFr,EFr,CFr,TM,rFe,wFr,AFr,bH,yFr,LFr,xFr,MM,tFe,$Fr,kFr,vH,SFr,RFr,PFr,EM,aFe,BFr,IFr,FH,qFr,NFr,jFr,CM,nFe,DFr,GFr,TH,OFr,VFr,XFr,wM,sFe,zFr,WFr,MH,QFr,HFr,UFr,AM,lFe,JFr,YFr,EH,KFr,ZFr,e6r,yM,iFe,o6r,r6r,CH,t6r,a6r,n6r,LM,dFe,s6r,l6r,wH,i6r,d6r,c6r,xM,cFe,f6r,m6r,AH,g6r,h6r,p6r,$M,fFe,_6r,u6r,yH,b6r,v6r,F6r,kM,mFe,T6r,M6r,LH,E6r,C6r,w6r,SM,gFe,A6r,y6r,xH,L6r,x6r,$6r,RM,hFe,k6r,S6r,$H,R6r,P6r,B6r,PM,pFe,I6r,q6r,kH,N6r,j6r,D6r,BM,_Fe,G6r,O6r,SH,V6r,X6r,z6r,IM,ENe,ic,qM,uFe,kL,W6r,bFe,Q6r,CNe,ar,SL,H6r,dc,U6r,RH,J6r,Y6r,PH,K6r,Z6r,eTr,RL,oTr,vFe,rTr,tTr,aTr,Pt,PL,nTr,FFe,sTr,lTr,cc,iTr,TFe,dTr,cTr,BH,fTr,mTr,gTr,NM,hTr,Sr,BL,pTr,MFe,_Tr,uTr,sn,bTr,EFe,vTr,FTr,CFe,TTr,MTr,wFe,ETr,CTr,wTr,pe,jM,AFe,ATr,yTr,IH,LTr,xTr,$Tr,DM,yFe,kTr,STr,qH,RTr,PTr,BTr,GM,LFe,ITr,qTr,NH,NTr,jTr,DTr,OM,xFe,GTr,OTr,jH,VTr,XTr,zTr,VM,$Fe,WTr,QTr,DH,HTr,UTr,JTr,XM,kFe,YTr,KTr,GH,ZTr,e7r,o7r,zM,SFe,r7r,t7r,OH,a7r,n7r,s7r,WM,RFe,l7r,i7r,VH,d7r,c7r,f7r,QM,PFe,m7r,g7r,XH,h7r,p7r,_7r,HM,BFe,u7r,b7r,zH,v7r,F7r,T7r,UM,IFe,M7r,E7r,WH,C7r,w7r,A7r,JM,qFe,y7r,L7r,QH,x7r,$7r,k7r,YM,NFe,S7r,R7r,HH,P7r,B7r,I7r,KM,jFe,q7r,N7r,UH,j7r,D7r,G7r,ZM,DFe,O7r,V7r,JH,X7r,z7r,W7r,e4,GFe,Q7r,H7r,YH,U7r,J7r,Y7r,o4,OFe,K7r,Z7r,KH,e9r,o9r,r9r,r4,wNe,fc,t4,VFe,IL,t9r,XFe,a9r,ANe,nr,qL,n9r,mc,s9r,ZH,l9r,i9r,eU,d9r,c9r,f9r,NL,m9r,zFe,g9r,h9r,p9r,Bt,jL,_9r,WFe,u9r,b9r,gc,v9r,QFe,F9r,T9r,oU,M9r,E9r,C9r,a4,w9r,Rr,DL,A9r,HFe,y9r,L9r,ln,x9r,UFe,$9r,k9r,JFe,S9r,R9r,YFe,P9r,B9r,I9r,GL,n4,KFe,q9r,N9r,rU,j9r,D9r,G9r,s4,ZFe,O9r,V9r,tU,X9r,z9r,W9r,l4,yNe,hc,i4,e6e,OL,Q9r,o6e,H9r,LNe,sr,VL,U9r,pc,J9r,aU,Y9r,K9r,nU,Z9r,eMr,oMr,XL,rMr,r6e,tMr,aMr,nMr,It,zL,sMr,t6e,lMr,iMr,_c,dMr,a6e,cMr,fMr,sU,mMr,gMr,hMr,d4,pMr,Pr,WL,_Mr,n6e,uMr,bMr,dn,vMr,s6e,FMr,TMr,l6e,MMr,EMr,i6e,CMr,wMr,AMr,d6e,c4,c6e,yMr,LMr,lU,xMr,$Mr,kMr,f4,xNe,uc,m4,f6e,QL,SMr,m6e,RMr,$Ne,lr,HL,PMr,bc,BMr,iU,IMr,qMr,dU,NMr,jMr,DMr,UL,GMr,g6e,OMr,VMr,XMr,qt,JL,zMr,h6e,WMr,QMr,vc,HMr,p6e,UMr,JMr,cU,YMr,KMr,ZMr,g4,e4r,Br,YL,o4r,_6e,r4r,t4r,cn,a4r,u6e,n4r,s4r,b6e,l4r,i4r,v6e,d4r,c4r,f4r,de,h4,F6e,m4r,g4r,fU,h4r,p4r,_4r,p4,T6e,u4r,b4r,mU,v4r,F4r,T4r,_4,M6e,M4r,E4r,gU,C4r,w4r,A4r,u4,E6e,y4r,L4r,hU,x4r,$4r,k4r,b4,C6e,S4r,R4r,pU,P4r,B4r,I4r,v4,w6e,q4r,N4r,_U,j4r,D4r,G4r,F4,A6e,O4r,V4r,uU,X4r,z4r,W4r,T4,y6e,Q4r,H4r,bU,U4r,J4r,Y4r,M4,L6e,K4r,Z4r,vU,eEr,oEr,rEr,E4,x6e,tEr,aEr,FU,nEr,sEr,lEr,C4,$6e,iEr,dEr,TU,cEr,fEr,mEr,w4,k6e,gEr,hEr,MU,pEr,_Er,uEr,A4,S6e,bEr,vEr,EU,FEr,TEr,MEr,y4,R6e,EEr,CEr,CU,wEr,AEr,yEr,L4,P6e,LEr,xEr,wU,$Er,kEr,SEr,x4,B6e,REr,PEr,AU,BEr,IEr,qEr,$4,I6e,NEr,jEr,yU,DEr,GEr,OEr,k4,q6e,VEr,XEr,LU,zEr,WEr,QEr,S4,N6e,HEr,UEr,xU,JEr,YEr,KEr,R4,j6e,ZEr,e5r,$U,o5r,r5r,t5r,P4,kNe,Fc,B4,D6e,KL,a5r,G6e,n5r,SNe,ir,ZL,s5r,Tc,l5r,kU,i5r,d5r,SU,c5r,f5r,m5r,e8,g5r,O6e,h5r,p5r,_5r,Nt,o8,u5r,V6e,b5r,v5r,Mc,F5r,X6e,T5r,M5r,RU,E5r,C5r,w5r,I4,A5r,Ir,r8,y5r,z6e,L5r,x5r,fn,$5r,W6e,k5r,S5r,Q6e,R5r,P5r,H6e,B5r,I5r,q5r,ce,q4,U6e,N5r,j5r,PU,D5r,G5r,O5r,N4,J6e,V5r,X5r,BU,z5r,W5r,Q5r,j4,Y6e,H5r,U5r,IU,J5r,Y5r,K5r,D4,K6e,Z5r,eCr,qU,oCr,rCr,tCr,G4,Z6e,aCr,nCr,NU,sCr,lCr,iCr,O4,eTe,dCr,cCr,jU,fCr,mCr,gCr,V4,oTe,hCr,pCr,DU,_Cr,uCr,bCr,X4,rTe,vCr,FCr,GU,TCr,MCr,ECr,z4,tTe,CCr,wCr,OU,ACr,yCr,LCr,W4,aTe,xCr,$Cr,VU,kCr,SCr,RCr,Q4,nTe,PCr,BCr,XU,ICr,qCr,NCr,H4,sTe,jCr,DCr,zU,GCr,OCr,VCr,U4,lTe,XCr,zCr,WU,WCr,QCr,HCr,J4,iTe,UCr,JCr,QU,YCr,KCr,ZCr,Y4,dTe,e3r,o3r,HU,r3r,t3r,a3r,K4,cTe,n3r,s3r,UU,l3r,i3r,d3r,Z4,fTe,c3r,f3r,JU,m3r,g3r,h3r,eE,mTe,p3r,_3r,YU,u3r,b3r,v3r,oE,gTe,F3r,T3r,KU,M3r,E3r,C3r,rE,hTe,w3r,A3r,ZU,y3r,L3r,x3r,tE,RNe,Ec,aE,pTe,t8,$3r,_Te,k3r,PNe,dr,a8,S3r,Cc,R3r,eJ,P3r,B3r,oJ,I3r,q3r,N3r,n8,j3r,uTe,D3r,G3r,O3r,jt,s8,V3r,bTe,X3r,z3r,wc,W3r,vTe,Q3r,H3r,rJ,U3r,J3r,Y3r,nE,K3r,qr,l8,Z3r,FTe,ewr,owr,mn,rwr,TTe,twr,awr,MTe,nwr,swr,ETe,lwr,iwr,dwr,CTe,sE,wTe,cwr,fwr,tJ,mwr,gwr,hwr,lE,BNe,Ac,iE,ATe,i8,pwr,yTe,_wr,INe,cr,d8,uwr,yc,bwr,aJ,vwr,Fwr,nJ,Twr,Mwr,Ewr,c8,Cwr,LTe,wwr,Awr,ywr,Dt,f8,Lwr,xTe,xwr,$wr,Lc,kwr,$Te,Swr,Rwr,sJ,Pwr,Bwr,Iwr,dE,qwr,Nr,m8,Nwr,kTe,jwr,Dwr,gn,Gwr,STe,Owr,Vwr,RTe,Xwr,zwr,PTe,Wwr,Qwr,Hwr,BTe,cE,ITe,Uwr,Jwr,lJ,Ywr,Kwr,Zwr,fE,qNe,xc,mE,qTe,g8,e0r,NTe,o0r,NNe,fr,h8,r0r,$c,t0r,iJ,a0r,n0r,dJ,s0r,l0r,i0r,p8,d0r,jTe,c0r,f0r,m0r,Gt,_8,g0r,DTe,h0r,p0r,kc,_0r,GTe,u0r,b0r,cJ,v0r,F0r,T0r,gE,M0r,jr,u8,E0r,OTe,C0r,w0r,hn,A0r,VTe,y0r,L0r,XTe,x0r,$0r,zTe,k0r,S0r,R0r,oe,hE,WTe,P0r,B0r,fJ,I0r,q0r,N0r,pE,QTe,j0r,D0r,mJ,G0r,O0r,V0r,_E,HTe,X0r,z0r,gJ,W0r,Q0r,H0r,uE,UTe,U0r,J0r,hJ,Y0r,K0r,Z0r,bE,JTe,eAr,oAr,pJ,rAr,tAr,aAr,vE,YTe,nAr,sAr,_J,lAr,iAr,dAr,FE,KTe,cAr,fAr,uJ,mAr,gAr,hAr,TE,ZTe,pAr,_Ar,bJ,uAr,bAr,vAr,ME,e7e,FAr,TAr,vJ,MAr,EAr,CAr,EE,o7e,wAr,AAr,FJ,yAr,LAr,xAr,CE,r7e,$Ar,kAr,TJ,SAr,RAr,PAr,wE,t7e,BAr,IAr,MJ,qAr,NAr,jAr,AE,a7e,DAr,GAr,EJ,OAr,VAr,XAr,yE,n7e,zAr,WAr,CJ,QAr,HAr,UAr,LE,s7e,JAr,YAr,wJ,KAr,ZAr,eyr,xE,l7e,oyr,ryr,AJ,tyr,ayr,nyr,$E,i7e,syr,lyr,yJ,iyr,dyr,cyr,kE,d7e,fyr,myr,LJ,gyr,hyr,pyr,SE,c7e,_yr,uyr,xJ,byr,vyr,Fyr,RE,f7e,Tyr,Myr,$J,Eyr,Cyr,wyr,PE,m7e,Ayr,yyr,kJ,Lyr,xyr,$yr,BE,g7e,kyr,Syr,SJ,Ryr,Pyr,Byr,IE,h7e,Iyr,qyr,RJ,Nyr,jyr,Dyr,qE,p7e,Gyr,Oyr,PJ,Vyr,Xyr,zyr,NE,_7e,Wyr,Qyr,BJ,Hyr,Uyr,Jyr,jE,u7e,Yyr,Kyr,IJ,Zyr,eLr,oLr,DE,jNe,Sc,GE,b7e,b8,rLr,v7e,tLr,DNe,mr,v8,aLr,Rc,nLr,qJ,sLr,lLr,NJ,iLr,dLr,cLr,F8,fLr,F7e,mLr,gLr,hLr,Ot,T8,pLr,T7e,_Lr,uLr,Pc,bLr,M7e,vLr,FLr,jJ,TLr,MLr,ELr,OE,CLr,Dr,M8,wLr,E7e,ALr,yLr,pn,LLr,C7e,xLr,$Lr,w7e,kLr,SLr,A7e,RLr,PLr,BLr,Pe,VE,y7e,ILr,qLr,DJ,NLr,jLr,DLr,XE,L7e,GLr,OLr,GJ,VLr,XLr,zLr,zE,x7e,WLr,QLr,OJ,HLr,ULr,JLr,WE,$7e,YLr,KLr,VJ,ZLr,e8r,o8r,QE,k7e,r8r,t8r,XJ,a8r,n8r,s8r,HE,S7e,l8r,i8r,zJ,d8r,c8r,f8r,UE,R7e,m8r,g8r,WJ,h8r,p8r,_8r,JE,P7e,u8r,b8r,QJ,v8r,F8r,T8r,YE,B7e,M8r,E8r,HJ,C8r,w8r,A8r,KE,GNe,Bc,ZE,I7e,E8,y8r,q7e,L8r,ONe,gr,C8,x8r,Ic,$8r,UJ,k8r,S8r,JJ,R8r,P8r,B8r,w8,I8r,N7e,q8r,N8r,j8r,Vt,A8,D8r,j7e,G8r,O8r,qc,V8r,D7e,X8r,z8r,YJ,W8r,Q8r,H8r,e5,U8r,Gr,y8,J8r,G7e,Y8r,K8r,_n,Z8r,O7e,exr,oxr,V7e,rxr,txr,X7e,axr,nxr,sxr,Te,o5,z7e,lxr,ixr,KJ,dxr,cxr,fxr,r5,W7e,mxr,gxr,ZJ,hxr,pxr,_xr,t5,Q7e,uxr,bxr,eY,vxr,Fxr,Txr,a5,H7e,Mxr,Exr,oY,Cxr,wxr,Axr,n5,U7e,yxr,Lxr,rY,xxr,$xr,kxr,s5,J7e,Sxr,Rxr,tY,Pxr,Bxr,Ixr,l5,Y7e,qxr,Nxr,aY,jxr,Dxr,Gxr,i5,K7e,Oxr,Vxr,nY,Xxr,zxr,Wxr,d5,Z7e,Qxr,Hxr,sY,Uxr,Jxr,Yxr,c5,e9e,Kxr,Zxr,lY,e$r,o$r,r$r,f5,o9e,t$r,a$r,iY,n$r,s$r,l$r,m5,r9e,i$r,d$r,dY,c$r,f$r,m$r,g5,t9e,g$r,h$r,cY,p$r,_$r,u$r,h5,VNe,Nc,p5,a9e,L8,b$r,n9e,v$r,XNe,hr,x8,F$r,jc,T$r,fY,M$r,E$r,mY,C$r,w$r,A$r,$8,y$r,s9e,L$r,x$r,$$r,Xt,k8,k$r,l9e,S$r,R$r,Dc,P$r,i9e,B$r,I$r,gY,q$r,N$r,j$r,_5,D$r,Or,S8,G$r,d9e,O$r,V$r,un,X$r,c9e,z$r,W$r,f9e,Q$r,H$r,m9e,U$r,J$r,Y$r,Le,u5,g9e,K$r,Z$r,hY,ekr,okr,rkr,b5,h9e,tkr,akr,pY,nkr,skr,lkr,v5,p9e,ikr,dkr,_Y,ckr,fkr,mkr,F5,_9e,gkr,hkr,uY,pkr,_kr,ukr,T5,u9e,bkr,vkr,bY,Fkr,Tkr,Mkr,M5,b9e,Ekr,Ckr,vY,wkr,Akr,ykr,E5,v9e,Lkr,xkr,FY,$kr,kkr,Skr,C5,F9e,Rkr,Pkr,TY,Bkr,Ikr,qkr,w5,T9e,Nkr,jkr,MY,Dkr,Gkr,Okr,A5,M9e,Vkr,Xkr,EY,zkr,Wkr,Qkr,y5,zNe,Gc,L5,E9e,R8,Hkr,C9e,Ukr,WNe,pr,P8,Jkr,Oc,Ykr,CY,Kkr,Zkr,wY,eSr,oSr,rSr,B8,tSr,w9e,aSr,nSr,sSr,zt,I8,lSr,A9e,iSr,dSr,Vc,cSr,y9e,fSr,mSr,AY,gSr,hSr,pSr,x5,_Sr,Vr,q8,uSr,L9e,bSr,vSr,bn,FSr,x9e,TSr,MSr,$9e,ESr,CSr,k9e,wSr,ASr,ySr,xe,$5,S9e,LSr,xSr,yY,$Sr,kSr,SSr,k5,R9e,RSr,PSr,LY,BSr,ISr,qSr,S5,P9e,NSr,jSr,xY,DSr,GSr,OSr,R5,B9e,VSr,XSr,$Y,zSr,WSr,QSr,P5,I9e,HSr,USr,kY,JSr,YSr,KSr,B5,q9e,ZSr,eRr,SY,oRr,rRr,tRr,I5,N9e,aRr,nRr,RY,sRr,lRr,iRr,q5,j9e,dRr,cRr,PY,fRr,mRr,gRr,N5,D9e,hRr,pRr,BY,_Rr,uRr,bRr,j5,G9e,vRr,FRr,IY,TRr,MRr,ERr,D5,QNe,Xc,G5,O9e,N8,CRr,V9e,wRr,HNe,_r,j8,ARr,zc,yRr,qY,LRr,xRr,NY,$Rr,kRr,SRr,D8,RRr,X9e,PRr,BRr,IRr,Wt,G8,qRr,z9e,NRr,jRr,Wc,DRr,W9e,GRr,ORr,jY,VRr,XRr,zRr,O5,WRr,Xr,O8,QRr,Q9e,HRr,URr,vn,JRr,H9e,YRr,KRr,U9e,ZRr,ePr,J9e,oPr,rPr,tPr,$e,V5,Y9e,aPr,nPr,DY,sPr,lPr,iPr,X5,K9e,dPr,cPr,GY,fPr,mPr,gPr,z5,Z9e,hPr,pPr,OY,_Pr,uPr,bPr,W5,eMe,vPr,FPr,VY,TPr,MPr,EPr,Q5,oMe,CPr,wPr,XY,APr,yPr,LPr,H5,rMe,xPr,$Pr,zY,kPr,SPr,RPr,U5,tMe,PPr,BPr,WY,IPr,qPr,NPr,J5,aMe,jPr,DPr,QY,GPr,OPr,VPr,Y5,nMe,XPr,zPr,HY,WPr,QPr,HPr,K5,sMe,UPr,JPr,UY,YPr,KPr,ZPr,Z5,UNe,Qc,eC,lMe,V8,eBr,iMe,oBr,JNe,ur,X8,rBr,Hc,tBr,JY,aBr,nBr,YY,sBr,lBr,iBr,z8,dBr,dMe,cBr,fBr,mBr,Qt,W8,gBr,cMe,hBr,pBr,Uc,_Br,fMe,uBr,bBr,KY,vBr,FBr,TBr,oC,MBr,zr,Q8,EBr,mMe,CBr,wBr,Fn,ABr,gMe,yBr,LBr,hMe,xBr,$Br,pMe,kBr,SBr,RBr,ke,rC,_Me,PBr,BBr,ZY,IBr,qBr,NBr,tC,uMe,jBr,DBr,eK,GBr,OBr,VBr,aC,bMe,XBr,zBr,oK,WBr,QBr,HBr,nC,vMe,UBr,JBr,rK,YBr,KBr,ZBr,sC,FMe,eIr,oIr,tK,rIr,tIr,aIr,lC,TMe,nIr,sIr,aK,lIr,iIr,dIr,iC,MMe,cIr,fIr,nK,mIr,gIr,hIr,dC,EMe,pIr,_Ir,sK,uIr,bIr,vIr,cC,CMe,FIr,TIr,lK,MIr,EIr,CIr,fC,wMe,wIr,AIr,iK,yIr,LIr,xIr,mC,YNe,Jc,gC,AMe,H8,$Ir,yMe,kIr,KNe,br,U8,SIr,Yc,RIr,dK,PIr,BIr,cK,IIr,qIr,NIr,J8,jIr,LMe,DIr,GIr,OIr,Ht,Y8,VIr,xMe,XIr,zIr,Kc,WIr,$Me,QIr,HIr,fK,UIr,JIr,YIr,hC,KIr,Wr,K8,ZIr,kMe,eqr,oqr,Tn,rqr,SMe,tqr,aqr,RMe,nqr,sqr,PMe,lqr,iqr,dqr,Ge,pC,BMe,cqr,fqr,mK,mqr,gqr,hqr,_C,IMe,pqr,_qr,gK,uqr,bqr,vqr,uC,qMe,Fqr,Tqr,hK,Mqr,Eqr,Cqr,bC,NMe,wqr,Aqr,pK,yqr,Lqr,xqr,vC,jMe,$qr,kqr,_K,Sqr,Rqr,Pqr,FC,DMe,Bqr,Iqr,uK,qqr,Nqr,jqr,TC,GMe,Dqr,Gqr,bK,Oqr,Vqr,Xqr,MC,OMe,zqr,Wqr,vK,Qqr,Hqr,Uqr,EC,ZNe,Zc,CC,VMe,Z8,Jqr,XMe,Yqr,eje,vr,ex,Kqr,ef,Zqr,FK,eNr,oNr,TK,rNr,tNr,aNr,ox,nNr,zMe,sNr,lNr,iNr,Ut,rx,dNr,WMe,cNr,fNr,of,mNr,QMe,gNr,hNr,MK,pNr,_Nr,uNr,wC,bNr,Qr,tx,vNr,HMe,FNr,TNr,Mn,MNr,UMe,ENr,CNr,JMe,wNr,ANr,YMe,yNr,LNr,xNr,Oe,AC,KMe,$Nr,kNr,EK,SNr,RNr,PNr,yC,ZMe,BNr,INr,CK,qNr,NNr,jNr,LC,e4e,DNr,GNr,wK,ONr,VNr,XNr,xC,o4e,zNr,WNr,AK,QNr,HNr,UNr,$C,r4e,JNr,YNr,yK,KNr,ZNr,ejr,kC,t4e,ojr,rjr,LK,tjr,ajr,njr,SC,a4e,sjr,ljr,xK,ijr,djr,cjr,RC,n4e,fjr,mjr,$K,gjr,hjr,pjr,PC,oje,rf,BC,s4e,ax,_jr,l4e,ujr,rje,Fr,nx,bjr,tf,vjr,kK,Fjr,Tjr,SK,Mjr,Ejr,Cjr,sx,wjr,i4e,Ajr,yjr,Ljr,Jt,lx,xjr,d4e,$jr,kjr,af,Sjr,c4e,Rjr,Pjr,RK,Bjr,Ijr,qjr,IC,Njr,Hr,ix,jjr,f4e,Djr,Gjr,En,Ojr,m4e,Vjr,Xjr,g4e,zjr,Wjr,h4e,Qjr,Hjr,Ujr,p4e,qC,_4e,Jjr,Yjr,PK,Kjr,Zjr,eDr,NC,tje,nf,jC,u4e,dx,oDr,b4e,rDr,aje,Tr,cx,tDr,sf,aDr,BK,nDr,sDr,IK,lDr,iDr,dDr,fx,cDr,v4e,fDr,mDr,gDr,Yt,mx,hDr,F4e,pDr,_Dr,lf,uDr,T4e,bDr,vDr,qK,FDr,TDr,MDr,DC,EDr,Ur,gx,CDr,M4e,wDr,ADr,Cn,yDr,E4e,LDr,xDr,C4e,$Dr,kDr,w4e,SDr,RDr,PDr,hx,GC,A4e,BDr,IDr,NK,qDr,NDr,jDr,OC,y4e,DDr,GDr,jK,ODr,VDr,XDr,VC,nje,df,XC,L4e,px,zDr,x4e,WDr,sje,Mr,_x,QDr,cf,HDr,DK,UDr,JDr,GK,YDr,KDr,ZDr,ux,eGr,$4e,oGr,rGr,tGr,Kt,bx,aGr,k4e,nGr,sGr,ff,lGr,S4e,iGr,dGr,OK,cGr,fGr,mGr,zC,gGr,Jr,vx,hGr,R4e,pGr,_Gr,wn,uGr,P4e,bGr,vGr,B4e,FGr,TGr,I4e,MGr,EGr,CGr,q4e,WC,N4e,wGr,AGr,VK,yGr,LGr,xGr,QC,lje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p0=new re({}),_0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new $Gr({props:{warning:!0,$$slots:{default:[GLt]},$$scope:{ctx:L}}}),u0=new re({}),b0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L576"}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L599"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),M0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L722"}}),E0=new re({}),C0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L395"}}),y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L409"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),L0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L605"}}),x0=new re({}),$0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),xh=new $Gr({props:{$$slots:{default:[XLt]},$$scope:{ctx:L}}}),$h=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),B0=new re({}),I0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L87"}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L101"}}),Uh=new $Gr({props:{$$slots:{default:[WLt]},$$scope:{ctx:L}}}),Jh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L254"}}),G0=new re({}),O0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L729"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),W0=new re({}),Q0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L736"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),qu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),Y0=new re({}),K0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L751"}}),eA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ju=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),rA=new re({}),tA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L758"}}),nA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),sA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),lA=new re({}),iA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L765"}}),cA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),mA=new re({}),gA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L774"}}),pA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),uA=new re({}),bA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L808"}}),FA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),MA=new re({}),EA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L815"}}),wA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),yA=new re({}),LA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L801"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),SA=new re({}),RA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L783"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),qA=new re({}),NA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L790"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),OA=new re({}),VA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L824"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L863"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L870"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L893"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L877"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L884"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L902"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L909"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L856"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L831"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L838"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L847"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),oL=new re({}),rL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),t9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),sL=new re({}),lL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),n9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),fL=new re({}),mL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),w9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),_L=new re({}),uL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),H9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),TL=new re({}),ML=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),J9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),AL=new re({}),yL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),IL=new re({}),qL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),OL=new re({}),VL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),_8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),T8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),A8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),k8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),I8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),N8=new re({}),j8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),G8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),Z8=new re({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),ax=new re({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),dx=new re({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),px=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),f0=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),m0=o("AutoConfig"),Ln=o(", "),xn=a("a"),g0=o("AutoModel"),pi=o(`, and
`),$n=a("a"),h0=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),R$=o("will create a model that is an instance of "),ui=a("a"),P$=o("BertModel"),B$=o("."),Eo=l(),wa=a("p"),I$=o("There is one class of "),bf=a("code"),q$=o("AutoModel"),pGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aqe=l(),bi=a("h2"),vf=a("a"),Iee=a("span"),F(p0.$$.fragment),_Ge=l(),qee=a("span"),uGe=o("Extending the Auto Classes"),nqe=l(),kn=a("p"),bGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nee=a("code"),vGe=o("NewModel"),FGe=o(", make sure you have a "),jee=a("code"),TGe=o("NewModelConfig"),MGe=o(` then you can add those to the auto
classes like this:`),sqe=l(),F(_0.$$.fragment),lqe=l(),N$=a("p"),EGe=o("You will then be able to use the auto classes like you would usually do!"),iqe=l(),F(Ff.$$.fragment),dqe=l(),vi=a("h2"),Tf=a("a"),Dee=a("span"),F(u0.$$.fragment),CGe=l(),Gee=a("span"),wGe=o("AutoConfig"),cqe=l(),Co=a("div"),F(b0.$$.fragment),AGe=l(),v0=a("p"),yGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j$=a("a"),LGe=o("from_pretrained()"),xGe=o(" class method."),$Ge=l(),F0=a("p"),kGe=o("This class cannot be instantiated directly using "),Oee=a("code"),SGe=o("__init__()"),RGe=o(" (throws an error)."),PGe=l(),Er=a("div"),F(T0.$$.fragment),BGe=l(),Vee=a("p"),IGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),qGe=l(),Fi=a("p"),NGe=o("The configuration class to instantiate is selected based on the "),Xee=a("code"),jGe=o("model_type"),DGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zee=a("code"),GGe=o("pretrained_model_name_or_path"),OGe=o(":"),VGe=l(),A=a("ul"),Mf=a("li"),Wee=a("strong"),XGe=o("albert"),zGe=o(" \u2014 "),D$=a("a"),WGe=o("AlbertConfig"),QGe=o(" (ALBERT model)"),HGe=l(),Ef=a("li"),Qee=a("strong"),UGe=o("bart"),JGe=o(" \u2014 "),G$=a("a"),YGe=o("BartConfig"),KGe=o(" (BART model)"),ZGe=l(),Cf=a("li"),Hee=a("strong"),eOe=o("beit"),oOe=o(" \u2014 "),O$=a("a"),rOe=o("BeitConfig"),tOe=o(" (BEiT model)"),aOe=l(),wf=a("li"),Uee=a("strong"),nOe=o("bert"),sOe=o(" \u2014 "),V$=a("a"),lOe=o("BertConfig"),iOe=o(" (BERT model)"),dOe=l(),Af=a("li"),Jee=a("strong"),cOe=o("bert-generation"),fOe=o(" \u2014 "),X$=a("a"),mOe=o("BertGenerationConfig"),gOe=o(" (Bert Generation model)"),hOe=l(),yf=a("li"),Yee=a("strong"),pOe=o("big_bird"),_Oe=o(" \u2014 "),z$=a("a"),uOe=o("BigBirdConfig"),bOe=o(" (BigBird model)"),vOe=l(),Lf=a("li"),Kee=a("strong"),FOe=o("bigbird_pegasus"),TOe=o(" \u2014 "),W$=a("a"),MOe=o("BigBirdPegasusConfig"),EOe=o(" (BigBirdPegasus model)"),COe=l(),xf=a("li"),Zee=a("strong"),wOe=o("blenderbot"),AOe=o(" \u2014 "),Q$=a("a"),yOe=o("BlenderbotConfig"),LOe=o(" (Blenderbot model)"),xOe=l(),$f=a("li"),eoe=a("strong"),$Oe=o("blenderbot-small"),kOe=o(" \u2014 "),H$=a("a"),SOe=o("BlenderbotSmallConfig"),ROe=o(" (BlenderbotSmall model)"),POe=l(),kf=a("li"),ooe=a("strong"),BOe=o("camembert"),IOe=o(" \u2014 "),U$=a("a"),qOe=o("CamembertConfig"),NOe=o(" (CamemBERT model)"),jOe=l(),Sf=a("li"),roe=a("strong"),DOe=o("canine"),GOe=o(" \u2014 "),J$=a("a"),OOe=o("CanineConfig"),VOe=o(" (Canine model)"),XOe=l(),Rf=a("li"),toe=a("strong"),zOe=o("clip"),WOe=o(" \u2014 "),Y$=a("a"),QOe=o("CLIPConfig"),HOe=o(" (CLIP model)"),UOe=l(),Pf=a("li"),aoe=a("strong"),JOe=o("convbert"),YOe=o(" \u2014 "),K$=a("a"),KOe=o("ConvBertConfig"),ZOe=o(" (ConvBERT model)"),eVe=l(),Bf=a("li"),noe=a("strong"),oVe=o("convnext"),rVe=o(" \u2014 "),Z$=a("a"),tVe=o("ConvNextConfig"),aVe=o(" (ConvNext model)"),nVe=l(),If=a("li"),soe=a("strong"),sVe=o("ctrl"),lVe=o(" \u2014 "),ek=a("a"),iVe=o("CTRLConfig"),dVe=o(" (CTRL model)"),cVe=l(),qf=a("li"),loe=a("strong"),fVe=o("data2vec-audio"),mVe=o(" \u2014 "),ok=a("a"),gVe=o("Data2VecAudioConfig"),hVe=o(" (Data2VecAudio model)"),pVe=l(),Nf=a("li"),ioe=a("strong"),_Ve=o("data2vec-text"),uVe=o(" \u2014 "),rk=a("a"),bVe=o("Data2VecTextConfig"),vVe=o(" (Data2VecText model)"),FVe=l(),jf=a("li"),doe=a("strong"),TVe=o("data2vec-vision"),MVe=o(" \u2014 "),tk=a("a"),EVe=o("Data2VecVisionConfig"),CVe=o(" (Data2VecVision model)"),wVe=l(),Df=a("li"),coe=a("strong"),AVe=o("deberta"),yVe=o(" \u2014 "),ak=a("a"),LVe=o("DebertaConfig"),xVe=o(" (DeBERTa model)"),$Ve=l(),Gf=a("li"),foe=a("strong"),kVe=o("deberta-v2"),SVe=o(" \u2014 "),nk=a("a"),RVe=o("DebertaV2Config"),PVe=o(" (DeBERTa-v2 model)"),BVe=l(),Of=a("li"),moe=a("strong"),IVe=o("decision_transformer"),qVe=o(" \u2014 "),sk=a("a"),NVe=o("DecisionTransformerConfig"),jVe=o(" (Decision Transformer model)"),DVe=l(),Vf=a("li"),goe=a("strong"),GVe=o("deit"),OVe=o(" \u2014 "),lk=a("a"),VVe=o("DeiTConfig"),XVe=o(" (DeiT model)"),zVe=l(),Xf=a("li"),hoe=a("strong"),WVe=o("detr"),QVe=o(" \u2014 "),ik=a("a"),HVe=o("DetrConfig"),UVe=o(" (DETR model)"),JVe=l(),zf=a("li"),poe=a("strong"),YVe=o("distilbert"),KVe=o(" \u2014 "),dk=a("a"),ZVe=o("DistilBertConfig"),eXe=o(" (DistilBERT model)"),oXe=l(),Wf=a("li"),_oe=a("strong"),rXe=o("dpr"),tXe=o(" \u2014 "),ck=a("a"),aXe=o("DPRConfig"),nXe=o(" (DPR model)"),sXe=l(),Qf=a("li"),uoe=a("strong"),lXe=o("dpt"),iXe=o(" \u2014 "),fk=a("a"),dXe=o("DPTConfig"),cXe=o(" (DPT model)"),fXe=l(),Hf=a("li"),boe=a("strong"),mXe=o("electra"),gXe=o(" \u2014 "),mk=a("a"),hXe=o("ElectraConfig"),pXe=o(" (ELECTRA model)"),_Xe=l(),Uf=a("li"),voe=a("strong"),uXe=o("encoder-decoder"),bXe=o(" \u2014 "),gk=a("a"),vXe=o("EncoderDecoderConfig"),FXe=o(" (Encoder decoder model)"),TXe=l(),Jf=a("li"),Foe=a("strong"),MXe=o("flaubert"),EXe=o(" \u2014 "),hk=a("a"),CXe=o("FlaubertConfig"),wXe=o(" (FlauBERT model)"),AXe=l(),Yf=a("li"),Toe=a("strong"),yXe=o("flava"),LXe=o(" \u2014 "),pk=a("a"),xXe=o("FlavaConfig"),$Xe=o(" (Flava model)"),kXe=l(),Kf=a("li"),Moe=a("strong"),SXe=o("fnet"),RXe=o(" \u2014 "),_k=a("a"),PXe=o("FNetConfig"),BXe=o(" (FNet model)"),IXe=l(),Zf=a("li"),Eoe=a("strong"),qXe=o("fsmt"),NXe=o(" \u2014 "),uk=a("a"),jXe=o("FSMTConfig"),DXe=o(" (FairSeq Machine-Translation model)"),GXe=l(),em=a("li"),Coe=a("strong"),OXe=o("funnel"),VXe=o(" \u2014 "),bk=a("a"),XXe=o("FunnelConfig"),zXe=o(" (Funnel Transformer model)"),WXe=l(),om=a("li"),woe=a("strong"),QXe=o("glpn"),HXe=o(" \u2014 "),vk=a("a"),UXe=o("GLPNConfig"),JXe=o(" (GLPN model)"),YXe=l(),rm=a("li"),Aoe=a("strong"),KXe=o("gpt2"),ZXe=o(" \u2014 "),Fk=a("a"),eze=o("GPT2Config"),oze=o(" (OpenAI GPT-2 model)"),rze=l(),tm=a("li"),yoe=a("strong"),tze=o("gpt_neo"),aze=o(" \u2014 "),Tk=a("a"),nze=o("GPTNeoConfig"),sze=o(" (GPT Neo model)"),lze=l(),am=a("li"),Loe=a("strong"),ize=o("gptj"),dze=o(" \u2014 "),Mk=a("a"),cze=o("GPTJConfig"),fze=o(" (GPT-J model)"),mze=l(),nm=a("li"),xoe=a("strong"),gze=o("hubert"),hze=o(" \u2014 "),Ek=a("a"),pze=o("HubertConfig"),_ze=o(" (Hubert model)"),uze=l(),sm=a("li"),$oe=a("strong"),bze=o("ibert"),vze=o(" \u2014 "),Ck=a("a"),Fze=o("IBertConfig"),Tze=o(" (I-BERT model)"),Mze=l(),lm=a("li"),koe=a("strong"),Eze=o("imagegpt"),Cze=o(" \u2014 "),wk=a("a"),wze=o("ImageGPTConfig"),Aze=o(" (ImageGPT model)"),yze=l(),im=a("li"),Soe=a("strong"),Lze=o("layoutlm"),xze=o(" \u2014 "),Ak=a("a"),$ze=o("LayoutLMConfig"),kze=o(" (LayoutLM model)"),Sze=l(),dm=a("li"),Roe=a("strong"),Rze=o("layoutlmv2"),Pze=o(" \u2014 "),yk=a("a"),Bze=o("LayoutLMv2Config"),Ize=o(" (LayoutLMv2 model)"),qze=l(),cm=a("li"),Poe=a("strong"),Nze=o("led"),jze=o(" \u2014 "),Lk=a("a"),Dze=o("LEDConfig"),Gze=o(" (LED model)"),Oze=l(),fm=a("li"),Boe=a("strong"),Vze=o("longformer"),Xze=o(" \u2014 "),xk=a("a"),zze=o("LongformerConfig"),Wze=o(" (Longformer model)"),Qze=l(),mm=a("li"),Ioe=a("strong"),Hze=o("longt5"),Uze=o(" \u2014 "),$k=a("a"),Jze=o("LongT5Config"),Yze=o(" (LongT5 model)"),Kze=l(),gm=a("li"),qoe=a("strong"),Zze=o("luke"),eWe=o(" \u2014 "),kk=a("a"),oWe=o("LukeConfig"),rWe=o(" (LUKE model)"),tWe=l(),hm=a("li"),Noe=a("strong"),aWe=o("lxmert"),nWe=o(" \u2014 "),Sk=a("a"),sWe=o("LxmertConfig"),lWe=o(" (LXMERT model)"),iWe=l(),pm=a("li"),joe=a("strong"),dWe=o("m2m_100"),cWe=o(" \u2014 "),Rk=a("a"),fWe=o("M2M100Config"),mWe=o(" (M2M100 model)"),gWe=l(),_m=a("li"),Doe=a("strong"),hWe=o("marian"),pWe=o(" \u2014 "),Pk=a("a"),_We=o("MarianConfig"),uWe=o(" (Marian model)"),bWe=l(),um=a("li"),Goe=a("strong"),vWe=o("maskformer"),FWe=o(" \u2014 "),Bk=a("a"),TWe=o("MaskFormerConfig"),MWe=o(" (MaskFormer model)"),EWe=l(),bm=a("li"),Ooe=a("strong"),CWe=o("mbart"),wWe=o(" \u2014 "),Ik=a("a"),AWe=o("MBartConfig"),yWe=o(" (mBART model)"),LWe=l(),vm=a("li"),Voe=a("strong"),xWe=o("megatron-bert"),$We=o(" \u2014 "),qk=a("a"),kWe=o("MegatronBertConfig"),SWe=o(" (MegatronBert model)"),RWe=l(),Fm=a("li"),Xoe=a("strong"),PWe=o("mobilebert"),BWe=o(" \u2014 "),Nk=a("a"),IWe=o("MobileBertConfig"),qWe=o(" (MobileBERT model)"),NWe=l(),Tm=a("li"),zoe=a("strong"),jWe=o("mpnet"),DWe=o(" \u2014 "),jk=a("a"),GWe=o("MPNetConfig"),OWe=o(" (MPNet model)"),VWe=l(),Mm=a("li"),Woe=a("strong"),XWe=o("mt5"),zWe=o(" \u2014 "),Dk=a("a"),WWe=o("MT5Config"),QWe=o(" (mT5 model)"),HWe=l(),Em=a("li"),Qoe=a("strong"),UWe=o("nystromformer"),JWe=o(" \u2014 "),Gk=a("a"),YWe=o("NystromformerConfig"),KWe=o(" (Nystromformer model)"),ZWe=l(),Cm=a("li"),Hoe=a("strong"),eQe=o("openai-gpt"),oQe=o(" \u2014 "),Ok=a("a"),rQe=o("OpenAIGPTConfig"),tQe=o(" (OpenAI GPT model)"),aQe=l(),wm=a("li"),Uoe=a("strong"),nQe=o("opt"),sQe=o(" \u2014 "),Vk=a("a"),lQe=o("OPTConfig"),iQe=o(" (OPT model)"),dQe=l(),Am=a("li"),Joe=a("strong"),cQe=o("pegasus"),fQe=o(" \u2014 "),Xk=a("a"),mQe=o("PegasusConfig"),gQe=o(" (Pegasus model)"),hQe=l(),ym=a("li"),Yoe=a("strong"),pQe=o("perceiver"),_Qe=o(" \u2014 "),zk=a("a"),uQe=o("PerceiverConfig"),bQe=o(" (Perceiver model)"),vQe=l(),Lm=a("li"),Koe=a("strong"),FQe=o("plbart"),TQe=o(" \u2014 "),Wk=a("a"),MQe=o("PLBartConfig"),EQe=o(" (PLBart model)"),CQe=l(),xm=a("li"),Zoe=a("strong"),wQe=o("poolformer"),AQe=o(" \u2014 "),Qk=a("a"),yQe=o("PoolFormerConfig"),LQe=o(" (PoolFormer model)"),xQe=l(),$m=a("li"),ere=a("strong"),$Qe=o("prophetnet"),kQe=o(" \u2014 "),Hk=a("a"),SQe=o("ProphetNetConfig"),RQe=o(" (ProphetNet model)"),PQe=l(),km=a("li"),ore=a("strong"),BQe=o("qdqbert"),IQe=o(" \u2014 "),Uk=a("a"),qQe=o("QDQBertConfig"),NQe=o(" (QDQBert model)"),jQe=l(),Sm=a("li"),rre=a("strong"),DQe=o("rag"),GQe=o(" \u2014 "),Jk=a("a"),OQe=o("RagConfig"),VQe=o(" (RAG model)"),XQe=l(),Rm=a("li"),tre=a("strong"),zQe=o("realm"),WQe=o(" \u2014 "),Yk=a("a"),QQe=o("RealmConfig"),HQe=o(" (Realm model)"),UQe=l(),Pm=a("li"),are=a("strong"),JQe=o("reformer"),YQe=o(" \u2014 "),Kk=a("a"),KQe=o("ReformerConfig"),ZQe=o(" (Reformer model)"),eHe=l(),Bm=a("li"),nre=a("strong"),oHe=o("regnet"),rHe=o(" \u2014 "),Zk=a("a"),tHe=o("RegNetConfig"),aHe=o(" (RegNet model)"),nHe=l(),Im=a("li"),sre=a("strong"),sHe=o("rembert"),lHe=o(" \u2014 "),eS=a("a"),iHe=o("RemBertConfig"),dHe=o(" (RemBERT model)"),cHe=l(),qm=a("li"),lre=a("strong"),fHe=o("resnet"),mHe=o(" \u2014 "),oS=a("a"),gHe=o("ResNetConfig"),hHe=o(" (ResNet model)"),pHe=l(),Nm=a("li"),ire=a("strong"),_He=o("retribert"),uHe=o(" \u2014 "),rS=a("a"),bHe=o("RetriBertConfig"),vHe=o(" (RetriBERT model)"),FHe=l(),jm=a("li"),dre=a("strong"),THe=o("roberta"),MHe=o(" \u2014 "),tS=a("a"),EHe=o("RobertaConfig"),CHe=o(" (RoBERTa model)"),wHe=l(),Dm=a("li"),cre=a("strong"),AHe=o("roformer"),yHe=o(" \u2014 "),aS=a("a"),LHe=o("RoFormerConfig"),xHe=o(" (RoFormer model)"),$He=l(),Gm=a("li"),fre=a("strong"),kHe=o("segformer"),SHe=o(" \u2014 "),nS=a("a"),RHe=o("SegformerConfig"),PHe=o(" (SegFormer model)"),BHe=l(),Om=a("li"),mre=a("strong"),IHe=o("sew"),qHe=o(" \u2014 "),sS=a("a"),NHe=o("SEWConfig"),jHe=o(" (SEW model)"),DHe=l(),Vm=a("li"),gre=a("strong"),GHe=o("sew-d"),OHe=o(" \u2014 "),lS=a("a"),VHe=o("SEWDConfig"),XHe=o(" (SEW-D model)"),zHe=l(),Xm=a("li"),hre=a("strong"),WHe=o("speech-encoder-decoder"),QHe=o(" \u2014 "),iS=a("a"),HHe=o("SpeechEncoderDecoderConfig"),UHe=o(" (Speech Encoder decoder model)"),JHe=l(),zm=a("li"),pre=a("strong"),YHe=o("speech_to_text"),KHe=o(" \u2014 "),dS=a("a"),ZHe=o("Speech2TextConfig"),eUe=o(" (Speech2Text model)"),oUe=l(),Wm=a("li"),_re=a("strong"),rUe=o("speech_to_text_2"),tUe=o(" \u2014 "),cS=a("a"),aUe=o("Speech2Text2Config"),nUe=o(" (Speech2Text2 model)"),sUe=l(),Qm=a("li"),ure=a("strong"),lUe=o("splinter"),iUe=o(" \u2014 "),fS=a("a"),dUe=o("SplinterConfig"),cUe=o(" (Splinter model)"),fUe=l(),Hm=a("li"),bre=a("strong"),mUe=o("squeezebert"),gUe=o(" \u2014 "),mS=a("a"),hUe=o("SqueezeBertConfig"),pUe=o(" (SqueezeBERT model)"),_Ue=l(),Um=a("li"),vre=a("strong"),uUe=o("swin"),bUe=o(" \u2014 "),gS=a("a"),vUe=o("SwinConfig"),FUe=o(" (Swin model)"),TUe=l(),Jm=a("li"),Fre=a("strong"),MUe=o("t5"),EUe=o(" \u2014 "),hS=a("a"),CUe=o("T5Config"),wUe=o(" (T5 model)"),AUe=l(),Ym=a("li"),Tre=a("strong"),yUe=o("tapas"),LUe=o(" \u2014 "),pS=a("a"),xUe=o("TapasConfig"),$Ue=o(" (TAPAS model)"),kUe=l(),Km=a("li"),Mre=a("strong"),SUe=o("transfo-xl"),RUe=o(" \u2014 "),_S=a("a"),PUe=o("TransfoXLConfig"),BUe=o(" (Transformer-XL model)"),IUe=l(),Zm=a("li"),Ere=a("strong"),qUe=o("trocr"),NUe=o(" \u2014 "),uS=a("a"),jUe=o("TrOCRConfig"),DUe=o(" (TrOCR model)"),GUe=l(),eg=a("li"),Cre=a("strong"),OUe=o("unispeech"),VUe=o(" \u2014 "),bS=a("a"),XUe=o("UniSpeechConfig"),zUe=o(" (UniSpeech model)"),WUe=l(),og=a("li"),wre=a("strong"),QUe=o("unispeech-sat"),HUe=o(" \u2014 "),vS=a("a"),UUe=o("UniSpeechSatConfig"),JUe=o(" (UniSpeechSat model)"),YUe=l(),rg=a("li"),Are=a("strong"),KUe=o("van"),ZUe=o(" \u2014 "),FS=a("a"),eJe=o("VanConfig"),oJe=o(" (VAN model)"),rJe=l(),tg=a("li"),yre=a("strong"),tJe=o("vilt"),aJe=o(" \u2014 "),TS=a("a"),nJe=o("ViltConfig"),sJe=o(" (ViLT model)"),lJe=l(),ag=a("li"),Lre=a("strong"),iJe=o("vision-encoder-decoder"),dJe=o(" \u2014 "),MS=a("a"),cJe=o("VisionEncoderDecoderConfig"),fJe=o(" (Vision Encoder decoder model)"),mJe=l(),ng=a("li"),xre=a("strong"),gJe=o("vision-text-dual-encoder"),hJe=o(" \u2014 "),ES=a("a"),pJe=o("VisionTextDualEncoderConfig"),_Je=o(" (VisionTextDualEncoder model)"),uJe=l(),sg=a("li"),$re=a("strong"),bJe=o("visual_bert"),vJe=o(" \u2014 "),CS=a("a"),FJe=o("VisualBertConfig"),TJe=o(" (VisualBert model)"),MJe=l(),lg=a("li"),kre=a("strong"),EJe=o("vit"),CJe=o(" \u2014 "),wS=a("a"),wJe=o("ViTConfig"),AJe=o(" (ViT model)"),yJe=l(),ig=a("li"),Sre=a("strong"),LJe=o("vit_mae"),xJe=o(" \u2014 "),AS=a("a"),$Je=o("ViTMAEConfig"),kJe=o(" (ViTMAE model)"),SJe=l(),dg=a("li"),Rre=a("strong"),RJe=o("wav2vec2"),PJe=o(" \u2014 "),yS=a("a"),BJe=o("Wav2Vec2Config"),IJe=o(" (Wav2Vec2 model)"),qJe=l(),cg=a("li"),Pre=a("strong"),NJe=o("wav2vec2-conformer"),jJe=o(" \u2014 "),LS=a("a"),DJe=o("Wav2Vec2ConformerConfig"),GJe=o(" (Wav2Vec2-Conformer model)"),OJe=l(),fg=a("li"),Bre=a("strong"),VJe=o("wavlm"),XJe=o(" \u2014 "),xS=a("a"),zJe=o("WavLMConfig"),WJe=o(" (WavLM model)"),QJe=l(),mg=a("li"),Ire=a("strong"),HJe=o("xglm"),UJe=o(" \u2014 "),$S=a("a"),JJe=o("XGLMConfig"),YJe=o(" (XGLM model)"),KJe=l(),gg=a("li"),qre=a("strong"),ZJe=o("xlm"),eYe=o(" \u2014 "),kS=a("a"),oYe=o("XLMConfig"),rYe=o(" (XLM model)"),tYe=l(),hg=a("li"),Nre=a("strong"),aYe=o("xlm-prophetnet"),nYe=o(" \u2014 "),SS=a("a"),sYe=o("XLMProphetNetConfig"),lYe=o(" (XLMProphetNet model)"),iYe=l(),pg=a("li"),jre=a("strong"),dYe=o("xlm-roberta"),cYe=o(" \u2014 "),RS=a("a"),fYe=o("XLMRobertaConfig"),mYe=o(" (XLM-RoBERTa model)"),gYe=l(),_g=a("li"),Dre=a("strong"),hYe=o("xlm-roberta-xl"),pYe=o(" \u2014 "),PS=a("a"),_Ye=o("XLMRobertaXLConfig"),uYe=o(" (XLM-RoBERTa-XL model)"),bYe=l(),ug=a("li"),Gre=a("strong"),vYe=o("xlnet"),FYe=o(" \u2014 "),BS=a("a"),TYe=o("XLNetConfig"),MYe=o(" (XLNet model)"),EYe=l(),bg=a("li"),Ore=a("strong"),CYe=o("yolos"),wYe=o(" \u2014 "),IS=a("a"),AYe=o("YolosConfig"),yYe=o(" (YOLOS model)"),LYe=l(),vg=a("li"),Vre=a("strong"),xYe=o("yoso"),$Ye=o(" \u2014 "),qS=a("a"),kYe=o("YosoConfig"),SYe=o(" (YOSO model)"),RYe=l(),F(Fg.$$.fragment),PYe=l(),Tg=a("div"),F(M0.$$.fragment),BYe=l(),Xre=a("p"),IYe=o("Register a new configuration for this class."),fqe=l(),Ti=a("h2"),Mg=a("a"),zre=a("span"),F(E0.$$.fragment),qYe=l(),Wre=a("span"),NYe=o("AutoTokenizer"),mqe=l(),wo=a("div"),F(C0.$$.fragment),jYe=l(),w0=a("p"),DYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=a("a"),GYe=o("AutoTokenizer.from_pretrained()"),OYe=o(" class method."),VYe=l(),A0=a("p"),XYe=o("This class cannot be instantiated directly using "),Qre=a("code"),zYe=o("__init__()"),WYe=o(" (throws an error)."),QYe=l(),Cr=a("div"),F(y0.$$.fragment),HYe=l(),Hre=a("p"),UYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JYe=l(),Aa=a("p"),YYe=o("The tokenizer class to instantiate is selected based on the "),Ure=a("code"),KYe=o("model_type"),ZYe=o(` property of the config object (either
passed as an argument or loaded from `),Jre=a("code"),eKe=o("pretrained_model_name_or_path"),oKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yre=a("code"),rKe=o("pretrained_model_name_or_path"),tKe=o(":"),aKe=l(),k=a("ul"),Sn=a("li"),Kre=a("strong"),nKe=o("albert"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("AlbertTokenizer"),iKe=o(" or "),DS=a("a"),dKe=o("AlbertTokenizerFast"),cKe=o(" (ALBERT model)"),fKe=l(),Rn=a("li"),Zre=a("strong"),mKe=o("bart"),gKe=o(" \u2014 "),GS=a("a"),hKe=o("BartTokenizer"),pKe=o(" or "),OS=a("a"),_Ke=o("BartTokenizerFast"),uKe=o(" (BART model)"),bKe=l(),Pn=a("li"),ete=a("strong"),vKe=o("barthez"),FKe=o(" \u2014 "),VS=a("a"),TKe=o("BarthezTokenizer"),MKe=o(" or "),XS=a("a"),EKe=o("BarthezTokenizerFast"),CKe=o(" (BARThez model)"),wKe=l(),Eg=a("li"),ote=a("strong"),AKe=o("bartpho"),yKe=o(" \u2014 "),zS=a("a"),LKe=o("BartphoTokenizer"),xKe=o(" (BARTpho model)"),$Ke=l(),Bn=a("li"),rte=a("strong"),kKe=o("bert"),SKe=o(" \u2014 "),WS=a("a"),RKe=o("BertTokenizer"),PKe=o(" or "),QS=a("a"),BKe=o("BertTokenizerFast"),IKe=o(" (BERT model)"),qKe=l(),Cg=a("li"),tte=a("strong"),NKe=o("bert-generation"),jKe=o(" \u2014 "),HS=a("a"),DKe=o("BertGenerationTokenizer"),GKe=o(" (Bert Generation model)"),OKe=l(),wg=a("li"),ate=a("strong"),VKe=o("bert-japanese"),XKe=o(" \u2014 "),US=a("a"),zKe=o("BertJapaneseTokenizer"),WKe=o(" (BertJapanese model)"),QKe=l(),Ag=a("li"),nte=a("strong"),HKe=o("bertweet"),UKe=o(" \u2014 "),JS=a("a"),JKe=o("BertweetTokenizer"),YKe=o(" (Bertweet model)"),KKe=l(),In=a("li"),ste=a("strong"),ZKe=o("big_bird"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("BigBirdTokenizer"),rZe=o(" or "),KS=a("a"),tZe=o("BigBirdTokenizerFast"),aZe=o(" (BigBird model)"),nZe=l(),qn=a("li"),lte=a("strong"),sZe=o("bigbird_pegasus"),lZe=o(" \u2014 "),ZS=a("a"),iZe=o("PegasusTokenizer"),dZe=o(" or "),eR=a("a"),cZe=o("PegasusTokenizerFast"),fZe=o(" (BigBirdPegasus model)"),mZe=l(),Nn=a("li"),ite=a("strong"),gZe=o("blenderbot"),hZe=o(" \u2014 "),oR=a("a"),pZe=o("BlenderbotTokenizer"),_Ze=o(" or "),rR=a("a"),uZe=o("BlenderbotTokenizerFast"),bZe=o(" (Blenderbot model)"),vZe=l(),yg=a("li"),dte=a("strong"),FZe=o("blenderbot-small"),TZe=o(" \u2014 "),tR=a("a"),MZe=o("BlenderbotSmallTokenizer"),EZe=o(" (BlenderbotSmall model)"),CZe=l(),Lg=a("li"),cte=a("strong"),wZe=o("byt5"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("ByT5Tokenizer"),LZe=o(" (ByT5 model)"),xZe=l(),jn=a("li"),fte=a("strong"),$Ze=o("camembert"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("CamembertTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("CamembertTokenizerFast"),BZe=o(" (CamemBERT model)"),IZe=l(),xg=a("li"),mte=a("strong"),qZe=o("canine"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("CanineTokenizer"),DZe=o(" (Canine model)"),GZe=l(),Dn=a("li"),gte=a("strong"),OZe=o("clip"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("CLIPTokenizer"),zZe=o(" or "),dR=a("a"),WZe=o("CLIPTokenizerFast"),QZe=o(" (CLIP model)"),HZe=l(),Gn=a("li"),hte=a("strong"),UZe=o("convbert"),JZe=o(" \u2014 "),cR=a("a"),YZe=o("ConvBertTokenizer"),KZe=o(" or "),fR=a("a"),ZZe=o("ConvBertTokenizerFast"),eeo=o(" (ConvBERT model)"),oeo=l(),On=a("li"),pte=a("strong"),reo=o("cpm"),teo=o(" \u2014 "),mR=a("a"),aeo=o("CpmTokenizer"),neo=o(" or "),gR=a("a"),seo=o("CpmTokenizerFast"),leo=o(" (CPM model)"),ieo=l(),$g=a("li"),_te=a("strong"),deo=o("ctrl"),ceo=o(" \u2014 "),hR=a("a"),feo=o("CTRLTokenizer"),meo=o(" (CTRL model)"),geo=l(),Vn=a("li"),ute=a("strong"),heo=o("data2vec-text"),peo=o(" \u2014 "),pR=a("a"),_eo=o("RobertaTokenizer"),ueo=o(" or "),_R=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (Data2VecText model)"),Feo=l(),Xn=a("li"),bte=a("strong"),Teo=o("deberta"),Meo=o(" \u2014 "),uR=a("a"),Eeo=o("DebertaTokenizer"),Ceo=o(" or "),bR=a("a"),weo=o("DebertaTokenizerFast"),Aeo=o(" (DeBERTa model)"),yeo=l(),zn=a("li"),vte=a("strong"),Leo=o("deberta-v2"),xeo=o(" \u2014 "),vR=a("a"),$eo=o("DebertaV2Tokenizer"),keo=o(" or "),FR=a("a"),Seo=o("DebertaV2TokenizerFast"),Reo=o(" (DeBERTa-v2 model)"),Peo=l(),Wn=a("li"),Fte=a("strong"),Beo=o("distilbert"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("DistilBertTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("DistilBertTokenizerFast"),Deo=o(" (DistilBERT model)"),Geo=l(),Qn=a("li"),Tte=a("strong"),Oeo=o("dpr"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("DPRQuestionEncoderTokenizer"),zeo=o(" or "),CR=a("a"),Weo=o("DPRQuestionEncoderTokenizerFast"),Qeo=o(" (DPR model)"),Heo=l(),Hn=a("li"),Mte=a("strong"),Ueo=o("electra"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("ElectraTokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("ElectraTokenizerFast"),eoo=o(" (ELECTRA model)"),ooo=l(),kg=a("li"),Ete=a("strong"),roo=o("flaubert"),too=o(" \u2014 "),yR=a("a"),aoo=o("FlaubertTokenizer"),noo=o(" (FlauBERT model)"),soo=l(),Un=a("li"),Cte=a("strong"),loo=o("fnet"),ioo=o(" \u2014 "),LR=a("a"),doo=o("FNetTokenizer"),coo=o(" or "),xR=a("a"),foo=o("FNetTokenizerFast"),moo=o(" (FNet model)"),goo=l(),Sg=a("li"),wte=a("strong"),hoo=o("fsmt"),poo=o(" \u2014 "),$R=a("a"),_oo=o("FSMTTokenizer"),uoo=o(" (FairSeq Machine-Translation model)"),boo=l(),Jn=a("li"),Ate=a("strong"),voo=o("funnel"),Foo=o(" \u2014 "),kR=a("a"),Too=o("FunnelTokenizer"),Moo=o(" or "),SR=a("a"),Eoo=o("FunnelTokenizerFast"),Coo=o(" (Funnel Transformer model)"),woo=l(),Yn=a("li"),yte=a("strong"),Aoo=o("gpt2"),yoo=o(" \u2014 "),RR=a("a"),Loo=o("GPT2Tokenizer"),xoo=o(" or "),PR=a("a"),$oo=o("GPT2TokenizerFast"),koo=o(" (OpenAI GPT-2 model)"),Soo=l(),Kn=a("li"),Lte=a("strong"),Roo=o("gpt_neo"),Poo=o(" \u2014 "),BR=a("a"),Boo=o("GPT2Tokenizer"),Ioo=o(" or "),IR=a("a"),qoo=o("GPT2TokenizerFast"),Noo=o(" (GPT Neo model)"),joo=l(),Zn=a("li"),xte=a("strong"),Doo=o("gptj"),Goo=o(" \u2014 "),qR=a("a"),Ooo=o("GPT2Tokenizer"),Voo=o(" or "),NR=a("a"),Xoo=o("GPT2TokenizerFast"),zoo=o(" (GPT-J model)"),Woo=l(),es=a("li"),$te=a("strong"),Qoo=o("herbert"),Hoo=o(" \u2014 "),jR=a("a"),Uoo=o("HerbertTokenizer"),Joo=o(" or "),DR=a("a"),Yoo=o("HerbertTokenizerFast"),Koo=o(" (HerBERT model)"),Zoo=l(),Rg=a("li"),kte=a("strong"),ero=o("hubert"),oro=o(" \u2014 "),GR=a("a"),rro=o("Wav2Vec2CTCTokenizer"),tro=o(" (Hubert model)"),aro=l(),os=a("li"),Ste=a("strong"),nro=o("ibert"),sro=o(" \u2014 "),OR=a("a"),lro=o("RobertaTokenizer"),iro=o(" or "),VR=a("a"),dro=o("RobertaTokenizerFast"),cro=o(" (I-BERT model)"),fro=l(),rs=a("li"),Rte=a("strong"),mro=o("layoutlm"),gro=o(" \u2014 "),XR=a("a"),hro=o("LayoutLMTokenizer"),pro=o(" or "),zR=a("a"),_ro=o("LayoutLMTokenizerFast"),uro=o(" (LayoutLM model)"),bro=l(),ts=a("li"),Pte=a("strong"),vro=o("layoutlmv2"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("LayoutLMv2Tokenizer"),Mro=o(" or "),QR=a("a"),Ero=o("LayoutLMv2TokenizerFast"),Cro=o(" (LayoutLMv2 model)"),wro=l(),as=a("li"),Bte=a("strong"),Aro=o("layoutxlm"),yro=o(" \u2014 "),HR=a("a"),Lro=o("LayoutXLMTokenizer"),xro=o(" or "),UR=a("a"),$ro=o("LayoutXLMTokenizerFast"),kro=o(" (LayoutXLM model)"),Sro=l(),ns=a("li"),Ite=a("strong"),Rro=o("led"),Pro=o(" \u2014 "),JR=a("a"),Bro=o("LEDTokenizer"),Iro=o(" or "),YR=a("a"),qro=o("LEDTokenizerFast"),Nro=o(" (LED model)"),jro=l(),ss=a("li"),qte=a("strong"),Dro=o("longformer"),Gro=o(" \u2014 "),KR=a("a"),Oro=o("LongformerTokenizer"),Vro=o(" or "),ZR=a("a"),Xro=o("LongformerTokenizerFast"),zro=o(" (Longformer model)"),Wro=l(),ls=a("li"),Nte=a("strong"),Qro=o("longt5"),Hro=o(" \u2014 "),eP=a("a"),Uro=o("T5Tokenizer"),Jro=o(" or "),oP=a("a"),Yro=o("T5TokenizerFast"),Kro=o(" (LongT5 model)"),Zro=l(),Pg=a("li"),jte=a("strong"),eto=o("luke"),oto=o(" \u2014 "),rP=a("a"),rto=o("LukeTokenizer"),tto=o(" (LUKE model)"),ato=l(),is=a("li"),Dte=a("strong"),nto=o("lxmert"),sto=o(" \u2014 "),tP=a("a"),lto=o("LxmertTokenizer"),ito=o(" or "),aP=a("a"),dto=o("LxmertTokenizerFast"),cto=o(" (LXMERT model)"),fto=l(),Bg=a("li"),Gte=a("strong"),mto=o("m2m_100"),gto=o(" \u2014 "),nP=a("a"),hto=o("M2M100Tokenizer"),pto=o(" (M2M100 model)"),_to=l(),Ig=a("li"),Ote=a("strong"),uto=o("marian"),bto=o(" \u2014 "),sP=a("a"),vto=o("MarianTokenizer"),Fto=o(" (Marian model)"),Tto=l(),ds=a("li"),Vte=a("strong"),Mto=o("mbart"),Eto=o(" \u2014 "),lP=a("a"),Cto=o("MBartTokenizer"),wto=o(" or "),iP=a("a"),Ato=o("MBartTokenizerFast"),yto=o(" (mBART model)"),Lto=l(),cs=a("li"),Xte=a("strong"),xto=o("mbart50"),$to=o(" \u2014 "),dP=a("a"),kto=o("MBart50Tokenizer"),Sto=o(" or "),cP=a("a"),Rto=o("MBart50TokenizerFast"),Pto=o(" (mBART-50 model)"),Bto=l(),fs=a("li"),zte=a("strong"),Ito=o("megatron-bert"),qto=o(" \u2014 "),fP=a("a"),Nto=o("BertTokenizer"),jto=o(" or "),mP=a("a"),Dto=o("BertTokenizerFast"),Gto=o(" (MegatronBert model)"),Oto=l(),qg=a("li"),Wte=a("strong"),Vto=o("mluke"),Xto=o(" \u2014 "),gP=a("a"),zto=o("MLukeTokenizer"),Wto=o(" (mLUKE model)"),Qto=l(),ms=a("li"),Qte=a("strong"),Hto=o("mobilebert"),Uto=o(" \u2014 "),hP=a("a"),Jto=o("MobileBertTokenizer"),Yto=o(" or "),pP=a("a"),Kto=o("MobileBertTokenizerFast"),Zto=o(" (MobileBERT model)"),eao=l(),gs=a("li"),Hte=a("strong"),oao=o("mpnet"),rao=o(" \u2014 "),_P=a("a"),tao=o("MPNetTokenizer"),aao=o(" or "),uP=a("a"),nao=o("MPNetTokenizerFast"),sao=o(" (MPNet model)"),lao=l(),hs=a("li"),Ute=a("strong"),iao=o("mt5"),dao=o(" \u2014 "),bP=a("a"),cao=o("MT5Tokenizer"),fao=o(" or "),vP=a("a"),mao=o("MT5TokenizerFast"),gao=o(" (mT5 model)"),hao=l(),ps=a("li"),Jte=a("strong"),pao=o("nystromformer"),_ao=o(" \u2014 "),FP=a("a"),uao=o("AlbertTokenizer"),bao=o(" or "),TP=a("a"),vao=o("AlbertTokenizerFast"),Fao=o(" (Nystromformer model)"),Tao=l(),_s=a("li"),Yte=a("strong"),Mao=o("openai-gpt"),Eao=o(" \u2014 "),MP=a("a"),Cao=o("OpenAIGPTTokenizer"),wao=o(" or "),EP=a("a"),Aao=o("OpenAIGPTTokenizerFast"),yao=o(" (OpenAI GPT model)"),Lao=l(),Ng=a("li"),Kte=a("strong"),xao=o("opt"),$ao=o(" \u2014 "),CP=a("a"),kao=o("GPT2Tokenizer"),Sao=o(" (OPT model)"),Rao=l(),us=a("li"),Zte=a("strong"),Pao=o("pegasus"),Bao=o(" \u2014 "),wP=a("a"),Iao=o("PegasusTokenizer"),qao=o(" or "),AP=a("a"),Nao=o("PegasusTokenizerFast"),jao=o(" (Pegasus model)"),Dao=l(),jg=a("li"),eae=a("strong"),Gao=o("perceiver"),Oao=o(" \u2014 "),yP=a("a"),Vao=o("PerceiverTokenizer"),Xao=o(" (Perceiver model)"),zao=l(),Dg=a("li"),oae=a("strong"),Wao=o("phobert"),Qao=o(" \u2014 "),LP=a("a"),Hao=o("PhobertTokenizer"),Uao=o(" (PhoBERT model)"),Jao=l(),Gg=a("li"),rae=a("strong"),Yao=o("plbart"),Kao=o(" \u2014 "),xP=a("a"),Zao=o("PLBartTokenizer"),eno=o(" (PLBart model)"),ono=l(),Og=a("li"),tae=a("strong"),rno=o("prophetnet"),tno=o(" \u2014 "),$P=a("a"),ano=o("ProphetNetTokenizer"),nno=o(" (ProphetNet model)"),sno=l(),bs=a("li"),aae=a("strong"),lno=o("qdqbert"),ino=o(" \u2014 "),kP=a("a"),dno=o("BertTokenizer"),cno=o(" or "),SP=a("a"),fno=o("BertTokenizerFast"),mno=o(" (QDQBert model)"),gno=l(),Vg=a("li"),nae=a("strong"),hno=o("rag"),pno=o(" \u2014 "),RP=a("a"),_no=o("RagTokenizer"),uno=o(" (RAG model)"),bno=l(),vs=a("li"),sae=a("strong"),vno=o("realm"),Fno=o(" \u2014 "),PP=a("a"),Tno=o("RealmTokenizer"),Mno=o(" or "),BP=a("a"),Eno=o("RealmTokenizerFast"),Cno=o(" (Realm model)"),wno=l(),Fs=a("li"),lae=a("strong"),Ano=o("reformer"),yno=o(" \u2014 "),IP=a("a"),Lno=o("ReformerTokenizer"),xno=o(" or "),qP=a("a"),$no=o("ReformerTokenizerFast"),kno=o(" (Reformer model)"),Sno=l(),Ts=a("li"),iae=a("strong"),Rno=o("rembert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("RemBertTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("RemBertTokenizerFast"),Nno=o(" (RemBERT model)"),jno=l(),Ms=a("li"),dae=a("strong"),Dno=o("retribert"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("RetriBertTokenizer"),Vno=o(" or "),GP=a("a"),Xno=o("RetriBertTokenizerFast"),zno=o(" (RetriBERT model)"),Wno=l(),Es=a("li"),cae=a("strong"),Qno=o("roberta"),Hno=o(" \u2014 "),OP=a("a"),Uno=o("RobertaTokenizer"),Jno=o(" or "),VP=a("a"),Yno=o("RobertaTokenizerFast"),Kno=o(" (RoBERTa model)"),Zno=l(),Cs=a("li"),fae=a("strong"),eso=o("roformer"),oso=o(" \u2014 "),XP=a("a"),rso=o("RoFormerTokenizer"),tso=o(" or "),zP=a("a"),aso=o("RoFormerTokenizerFast"),nso=o(" (RoFormer model)"),sso=l(),Xg=a("li"),mae=a("strong"),lso=o("speech_to_text"),iso=o(" \u2014 "),WP=a("a"),dso=o("Speech2TextTokenizer"),cso=o(" (Speech2Text model)"),fso=l(),zg=a("li"),gae=a("strong"),mso=o("speech_to_text_2"),gso=o(" \u2014 "),QP=a("a"),hso=o("Speech2Text2Tokenizer"),pso=o(" (Speech2Text2 model)"),_so=l(),ws=a("li"),hae=a("strong"),uso=o("splinter"),bso=o(" \u2014 "),HP=a("a"),vso=o("SplinterTokenizer"),Fso=o(" or "),UP=a("a"),Tso=o("SplinterTokenizerFast"),Mso=o(" (Splinter model)"),Eso=l(),As=a("li"),pae=a("strong"),Cso=o("squeezebert"),wso=o(" \u2014 "),JP=a("a"),Aso=o("SqueezeBertTokenizer"),yso=o(" or "),YP=a("a"),Lso=o("SqueezeBertTokenizerFast"),xso=o(" (SqueezeBERT model)"),$so=l(),ys=a("li"),_ae=a("strong"),kso=o("t5"),Sso=o(" \u2014 "),KP=a("a"),Rso=o("T5Tokenizer"),Pso=o(" or "),ZP=a("a"),Bso=o("T5TokenizerFast"),Iso=o(" (T5 model)"),qso=l(),Wg=a("li"),uae=a("strong"),Nso=o("tapas"),jso=o(" \u2014 "),eB=a("a"),Dso=o("TapasTokenizer"),Gso=o(" (TAPAS model)"),Oso=l(),Qg=a("li"),bae=a("strong"),Vso=o("tapex"),Xso=o(" \u2014 "),oB=a("a"),zso=o("TapexTokenizer"),Wso=o(" (TAPEX model)"),Qso=l(),Hg=a("li"),vae=a("strong"),Hso=o("transfo-xl"),Uso=o(" \u2014 "),rB=a("a"),Jso=o("TransfoXLTokenizer"),Yso=o(" (Transformer-XL model)"),Kso=l(),Ls=a("li"),Fae=a("strong"),Zso=o("visual_bert"),elo=o(" \u2014 "),tB=a("a"),olo=o("BertTokenizer"),rlo=o(" or "),aB=a("a"),tlo=o("BertTokenizerFast"),alo=o(" (VisualBert model)"),nlo=l(),Ug=a("li"),Tae=a("strong"),slo=o("wav2vec2"),llo=o(" \u2014 "),nB=a("a"),ilo=o("Wav2Vec2CTCTokenizer"),dlo=o(" (Wav2Vec2 model)"),clo=l(),Jg=a("li"),Mae=a("strong"),flo=o("wav2vec2-conformer"),mlo=o(" \u2014 "),sB=a("a"),glo=o("Wav2Vec2CTCTokenizer"),hlo=o(" (Wav2Vec2-Conformer model)"),plo=l(),Yg=a("li"),Eae=a("strong"),_lo=o("wav2vec2_phoneme"),ulo=o(" \u2014 "),lB=a("a"),blo=o("Wav2Vec2PhonemeCTCTokenizer"),vlo=o(" (Wav2Vec2Phoneme model)"),Flo=l(),xs=a("li"),Cae=a("strong"),Tlo=o("xglm"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("XGLMTokenizer"),Clo=o(" or "),dB=a("a"),wlo=o("XGLMTokenizerFast"),Alo=o(" (XGLM model)"),ylo=l(),Kg=a("li"),wae=a("strong"),Llo=o("xlm"),xlo=o(" \u2014 "),cB=a("a"),$lo=o("XLMTokenizer"),klo=o(" (XLM model)"),Slo=l(),Zg=a("li"),Aae=a("strong"),Rlo=o("xlm-prophetnet"),Plo=o(" \u2014 "),fB=a("a"),Blo=o("XLMProphetNetTokenizer"),Ilo=o(" (XLMProphetNet model)"),qlo=l(),$s=a("li"),yae=a("strong"),Nlo=o("xlm-roberta"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("XLMRobertaTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("XLMRobertaTokenizerFast"),Vlo=o(" (XLM-RoBERTa model)"),Xlo=l(),ks=a("li"),Lae=a("strong"),zlo=o("xlm-roberta-xl"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("RobertaTokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("RobertaTokenizerFast"),Jlo=o(" (XLM-RoBERTa-XL model)"),Ylo=l(),Ss=a("li"),xae=a("strong"),Klo=o("xlnet"),Zlo=o(" \u2014 "),_B=a("a"),eio=o("XLNetTokenizer"),oio=o(" or "),uB=a("a"),rio=o("XLNetTokenizerFast"),tio=o(" (XLNet model)"),aio=l(),Rs=a("li"),$ae=a("strong"),nio=o("yoso"),sio=o(" \u2014 "),bB=a("a"),lio=o("AlbertTokenizer"),iio=o(" or "),vB=a("a"),dio=o("AlbertTokenizerFast"),cio=o(" (YOSO model)"),fio=l(),F(eh.$$.fragment),mio=l(),oh=a("div"),F(L0.$$.fragment),gio=l(),kae=a("p"),hio=o("Register a new tokenizer in this mapping."),gqe=l(),Mi=a("h2"),rh=a("a"),Sae=a("span"),F(x0.$$.fragment),pio=l(),Rae=a("span"),_io=o("AutoFeatureExtractor"),hqe=l(),Ao=a("div"),F($0.$$.fragment),uio=l(),k0=a("p"),bio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=a("a"),vio=o("AutoFeatureExtractor.from_pretrained()"),Fio=o(" class method."),Tio=l(),S0=a("p"),Mio=o("This class cannot be instantiated directly using "),Pae=a("code"),Eio=o("__init__()"),Cio=o(" (throws an error)."),wio=l(),He=a("div"),F(R0.$$.fragment),Aio=l(),Bae=a("p"),yio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lio=l(),ya=a("p"),xio=o("The feature extractor class to instantiate is selected based on the "),Iae=a("code"),$io=o("model_type"),kio=o(` property of the config object
(either passed as an argument or loaded from `),qae=a("code"),Sio=o("pretrained_model_name_or_path"),Rio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nae=a("code"),Pio=o("pretrained_model_name_or_path"),Bio=o(":"),Iio=l(),Z=a("ul"),th=a("li"),jae=a("strong"),qio=o("beit"),Nio=o(" \u2014 "),TB=a("a"),jio=o("BeitFeatureExtractor"),Dio=o(" (BEiT model)"),Gio=l(),ah=a("li"),Dae=a("strong"),Oio=o("clip"),Vio=o(" \u2014 "),MB=a("a"),Xio=o("CLIPFeatureExtractor"),zio=o(" (CLIP model)"),Wio=l(),nh=a("li"),Gae=a("strong"),Qio=o("convnext"),Hio=o(" \u2014 "),EB=a("a"),Uio=o("ConvNextFeatureExtractor"),Jio=o(" (ConvNext model)"),Yio=l(),sh=a("li"),Oae=a("strong"),Kio=o("data2vec-audio"),Zio=o(" \u2014 "),CB=a("a"),edo=o("Wav2Vec2FeatureExtractor"),odo=o(" (Data2VecAudio model)"),rdo=l(),lh=a("li"),Vae=a("strong"),tdo=o("data2vec-vision"),ado=o(" \u2014 "),wB=a("a"),ndo=o("BeitFeatureExtractor"),sdo=o(" (Data2VecVision model)"),ldo=l(),ih=a("li"),Xae=a("strong"),ido=o("deit"),ddo=o(" \u2014 "),AB=a("a"),cdo=o("DeiTFeatureExtractor"),fdo=o(" (DeiT model)"),mdo=l(),dh=a("li"),zae=a("strong"),gdo=o("detr"),hdo=o(" \u2014 "),yB=a("a"),pdo=o("DetrFeatureExtractor"),_do=o(" (DETR model)"),udo=l(),ch=a("li"),Wae=a("strong"),bdo=o("dpt"),vdo=o(" \u2014 "),LB=a("a"),Fdo=o("DPTFeatureExtractor"),Tdo=o(" (DPT model)"),Mdo=l(),fh=a("li"),Qae=a("strong"),Edo=o("flava"),Cdo=o(" \u2014 "),xB=a("a"),wdo=o("FlavaFeatureExtractor"),Ado=o(" (Flava model)"),ydo=l(),mh=a("li"),Hae=a("strong"),Ldo=o("glpn"),xdo=o(" \u2014 "),$B=a("a"),$do=o("GLPNFeatureExtractor"),kdo=o(" (GLPN model)"),Sdo=l(),gh=a("li"),Uae=a("strong"),Rdo=o("hubert"),Pdo=o(" \u2014 "),kB=a("a"),Bdo=o("Wav2Vec2FeatureExtractor"),Ido=o(" (Hubert model)"),qdo=l(),hh=a("li"),Jae=a("strong"),Ndo=o("layoutlmv2"),jdo=o(" \u2014 "),SB=a("a"),Ddo=o("LayoutLMv2FeatureExtractor"),Gdo=o(" (LayoutLMv2 model)"),Odo=l(),ph=a("li"),Yae=a("strong"),Vdo=o("maskformer"),Xdo=o(" \u2014 "),RB=a("a"),zdo=o("MaskFormerFeatureExtractor"),Wdo=o(" (MaskFormer model)"),Qdo=l(),_h=a("li"),Kae=a("strong"),Hdo=o("perceiver"),Udo=o(" \u2014 "),PB=a("a"),Jdo=o("PerceiverFeatureExtractor"),Ydo=o(" (Perceiver model)"),Kdo=l(),uh=a("li"),Zae=a("strong"),Zdo=o("poolformer"),eco=o(" \u2014 "),BB=a("a"),oco=o("PoolFormerFeatureExtractor"),rco=o(" (PoolFormer model)"),tco=l(),bh=a("li"),ene=a("strong"),aco=o("regnet"),nco=o(" \u2014 "),IB=a("a"),sco=o("ConvNextFeatureExtractor"),lco=o(" (RegNet model)"),ico=l(),vh=a("li"),one=a("strong"),dco=o("resnet"),cco=o(" \u2014 "),qB=a("a"),fco=o("ConvNextFeatureExtractor"),mco=o(" (ResNet model)"),gco=l(),Fh=a("li"),rne=a("strong"),hco=o("segformer"),pco=o(" \u2014 "),NB=a("a"),_co=o("SegformerFeatureExtractor"),uco=o(" (SegFormer model)"),bco=l(),Th=a("li"),tne=a("strong"),vco=o("speech_to_text"),Fco=o(" \u2014 "),jB=a("a"),Tco=o("Speech2TextFeatureExtractor"),Mco=o(" (Speech2Text model)"),Eco=l(),Mh=a("li"),ane=a("strong"),Cco=o("swin"),wco=o(" \u2014 "),DB=a("a"),Aco=o("ViTFeatureExtractor"),yco=o(" (Swin model)"),Lco=l(),Eh=a("li"),nne=a("strong"),xco=o("van"),$co=o(" \u2014 "),GB=a("a"),kco=o("ConvNextFeatureExtractor"),Sco=o(" (VAN model)"),Rco=l(),Ch=a("li"),sne=a("strong"),Pco=o("vit"),Bco=o(" \u2014 "),OB=a("a"),Ico=o("ViTFeatureExtractor"),qco=o(" (ViT model)"),Nco=l(),wh=a("li"),lne=a("strong"),jco=o("vit_mae"),Dco=o(" \u2014 "),VB=a("a"),Gco=o("ViTFeatureExtractor"),Oco=o(" (ViTMAE model)"),Vco=l(),Ah=a("li"),ine=a("strong"),Xco=o("wav2vec2"),zco=o(" \u2014 "),XB=a("a"),Wco=o("Wav2Vec2FeatureExtractor"),Qco=o(" (Wav2Vec2 model)"),Hco=l(),yh=a("li"),dne=a("strong"),Uco=o("wav2vec2-conformer"),Jco=o(" \u2014 "),zB=a("a"),Yco=o("Wav2Vec2FeatureExtractor"),Kco=o(" (Wav2Vec2-Conformer model)"),Zco=l(),Lh=a("li"),cne=a("strong"),efo=o("yolos"),ofo=o(" \u2014 "),WB=a("a"),rfo=o("YolosFeatureExtractor"),tfo=o(" (YOLOS model)"),afo=l(),F(xh.$$.fragment),nfo=l(),F($h.$$.fragment),sfo=l(),kh=a("div"),F(P0.$$.fragment),lfo=l(),fne=a("p"),ifo=o("Register a new feature extractor for this class."),pqe=l(),Ei=a("h2"),Sh=a("a"),mne=a("span"),F(B0.$$.fragment),dfo=l(),gne=a("span"),cfo=o("AutoProcessor"),_qe=l(),yo=a("div"),F(I0.$$.fragment),ffo=l(),q0=a("p"),mfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=a("a"),gfo=o("AutoProcessor.from_pretrained()"),hfo=o(" class method."),pfo=l(),N0=a("p"),_fo=o("This class cannot be instantiated directly using "),hne=a("code"),ufo=o("__init__()"),bfo=o(" (throws an error)."),vfo=l(),Ue=a("div"),F(j0.$$.fragment),Ffo=l(),pne=a("p"),Tfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mfo=l(),Ci=a("p"),Efo=o("The processor class to instantiate is selected based on the "),_ne=a("code"),Cfo=o("model_type"),wfo=o(` property of the config object (either
passed as an argument or loaded from `),une=a("code"),Afo=o("pretrained_model_name_or_path"),yfo=o(" if possible):"),Lfo=l(),_e=a("ul"),Rh=a("li"),bne=a("strong"),xfo=o("clip"),$fo=o(" \u2014 "),HB=a("a"),kfo=o("CLIPProcessor"),Sfo=o(" (CLIP model)"),Rfo=l(),Ph=a("li"),vne=a("strong"),Pfo=o("flava"),Bfo=o(" \u2014 "),Fne=a("code"),Ifo=o("FLAVAProcessor"),qfo=o(" (Flava model)"),Nfo=l(),Bh=a("li"),Tne=a("strong"),jfo=o("layoutlmv2"),Dfo=o(" \u2014 "),UB=a("a"),Gfo=o("LayoutLMv2Processor"),Ofo=o(" (LayoutLMv2 model)"),Vfo=l(),Ih=a("li"),Mne=a("strong"),Xfo=o("layoutxlm"),zfo=o(" \u2014 "),JB=a("a"),Wfo=o("LayoutXLMProcessor"),Qfo=o(" (LayoutXLM model)"),Hfo=l(),qh=a("li"),Ene=a("strong"),Ufo=o("sew"),Jfo=o(" \u2014 "),YB=a("a"),Yfo=o("Wav2Vec2Processor"),Kfo=o(" (SEW model)"),Zfo=l(),Nh=a("li"),Cne=a("strong"),emo=o("sew-d"),omo=o(" \u2014 "),KB=a("a"),rmo=o("Wav2Vec2Processor"),tmo=o(" (SEW-D model)"),amo=l(),jh=a("li"),wne=a("strong"),nmo=o("speech_to_text"),smo=o(" \u2014 "),ZB=a("a"),lmo=o("Speech2TextProcessor"),imo=o(" (Speech2Text model)"),dmo=l(),Dh=a("li"),Ane=a("strong"),cmo=o("speech_to_text_2"),fmo=o(" \u2014 "),eI=a("a"),mmo=o("Speech2Text2Processor"),gmo=o(" (Speech2Text2 model)"),hmo=l(),Gh=a("li"),yne=a("strong"),pmo=o("trocr"),_mo=o(" \u2014 "),oI=a("a"),umo=o("TrOCRProcessor"),bmo=o(" (TrOCR model)"),vmo=l(),Oh=a("li"),Lne=a("strong"),Fmo=o("unispeech"),Tmo=o(" \u2014 "),rI=a("a"),Mmo=o("Wav2Vec2Processor"),Emo=o(" (UniSpeech model)"),Cmo=l(),Vh=a("li"),xne=a("strong"),wmo=o("unispeech-sat"),Amo=o(" \u2014 "),tI=a("a"),ymo=o("Wav2Vec2Processor"),Lmo=o(" (UniSpeechSat model)"),xmo=l(),Xh=a("li"),$ne=a("strong"),$mo=o("vilt"),kmo=o(" \u2014 "),aI=a("a"),Smo=o("ViltProcessor"),Rmo=o(" (ViLT model)"),Pmo=l(),zh=a("li"),kne=a("strong"),Bmo=o("vision-text-dual-encoder"),Imo=o(" \u2014 "),nI=a("a"),qmo=o("VisionTextDualEncoderProcessor"),Nmo=o(" (VisionTextDualEncoder model)"),jmo=l(),Wh=a("li"),Sne=a("strong"),Dmo=o("wav2vec2"),Gmo=o(" \u2014 "),sI=a("a"),Omo=o("Wav2Vec2Processor"),Vmo=o(" (Wav2Vec2 model)"),Xmo=l(),Qh=a("li"),Rne=a("strong"),zmo=o("wav2vec2-conformer"),Wmo=o(" \u2014 "),lI=a("a"),Qmo=o("Wav2Vec2Processor"),Hmo=o(" (Wav2Vec2-Conformer model)"),Umo=l(),Hh=a("li"),Pne=a("strong"),Jmo=o("wavlm"),Ymo=o(" \u2014 "),iI=a("a"),Kmo=o("Wav2Vec2Processor"),Zmo=o(" (WavLM model)"),ego=l(),F(Uh.$$.fragment),ogo=l(),F(Jh.$$.fragment),rgo=l(),Yh=a("div"),F(D0.$$.fragment),tgo=l(),Bne=a("p"),ago=o("Register a new processor for this class."),uqe=l(),wi=a("h2"),Kh=a("a"),Ine=a("span"),F(G0.$$.fragment),ngo=l(),qne=a("span"),sgo=o("AutoModel"),bqe=l(),Lo=a("div"),F(O0.$$.fragment),lgo=l(),Ai=a("p"),igo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=a("a"),dgo=o("from_pretrained()"),cgo=o(" class method or the "),cI=a("a"),fgo=o("from_config()"),mgo=o(` class
method.`),ggo=l(),V0=a("p"),hgo=o("This class cannot be instantiated directly using "),Nne=a("code"),pgo=o("__init__()"),_go=o(" (throws an error)."),ugo=l(),tt=a("div"),F(X0.$$.fragment),bgo=l(),jne=a("p"),vgo=o("Instantiates one of the base model classes of the library from a configuration."),Fgo=l(),yi=a("p"),Tgo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),Mgo=o("not"),Ego=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=a("a"),Cgo=o("from_pretrained()"),wgo=o(" to load the model weights."),Ago=l(),F(Zh.$$.fragment),ygo=l(),Je=a("div"),F(z0.$$.fragment),Lgo=l(),Gne=a("p"),xgo=o("Instantiate one of the base model classes of the library from a pretrained model."),$go=l(),La=a("p"),kgo=o("The model class to instantiate is selected based on the "),One=a("code"),Sgo=o("model_type"),Rgo=o(` property of the config object (either
passed as an argument or loaded from `),Vne=a("code"),Pgo=o("pretrained_model_name_or_path"),Bgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xne=a("code"),Igo=o("pretrained_model_name_or_path"),qgo=o(":"),Ngo=l(),x=a("ul"),ep=a("li"),zne=a("strong"),jgo=o("albert"),Dgo=o(" \u2014 "),mI=a("a"),Ggo=o("AlbertModel"),Ogo=o(" (ALBERT model)"),Vgo=l(),op=a("li"),Wne=a("strong"),Xgo=o("bart"),zgo=o(" \u2014 "),gI=a("a"),Wgo=o("BartModel"),Qgo=o(" (BART model)"),Hgo=l(),rp=a("li"),Qne=a("strong"),Ugo=o("beit"),Jgo=o(" \u2014 "),hI=a("a"),Ygo=o("BeitModel"),Kgo=o(" (BEiT model)"),Zgo=l(),tp=a("li"),Hne=a("strong"),eho=o("bert"),oho=o(" \u2014 "),pI=a("a"),rho=o("BertModel"),tho=o(" (BERT model)"),aho=l(),ap=a("li"),Une=a("strong"),nho=o("bert-generation"),sho=o(" \u2014 "),_I=a("a"),lho=o("BertGenerationEncoder"),iho=o(" (Bert Generation model)"),dho=l(),np=a("li"),Jne=a("strong"),cho=o("big_bird"),fho=o(" \u2014 "),uI=a("a"),mho=o("BigBirdModel"),gho=o(" (BigBird model)"),hho=l(),sp=a("li"),Yne=a("strong"),pho=o("bigbird_pegasus"),_ho=o(" \u2014 "),bI=a("a"),uho=o("BigBirdPegasusModel"),bho=o(" (BigBirdPegasus model)"),vho=l(),lp=a("li"),Kne=a("strong"),Fho=o("blenderbot"),Tho=o(" \u2014 "),vI=a("a"),Mho=o("BlenderbotModel"),Eho=o(" (Blenderbot model)"),Cho=l(),ip=a("li"),Zne=a("strong"),who=o("blenderbot-small"),Aho=o(" \u2014 "),FI=a("a"),yho=o("BlenderbotSmallModel"),Lho=o(" (BlenderbotSmall model)"),xho=l(),dp=a("li"),ese=a("strong"),$ho=o("camembert"),kho=o(" \u2014 "),TI=a("a"),Sho=o("CamembertModel"),Rho=o(" (CamemBERT model)"),Pho=l(),cp=a("li"),ose=a("strong"),Bho=o("canine"),Iho=o(" \u2014 "),MI=a("a"),qho=o("CanineModel"),Nho=o(" (Canine model)"),jho=l(),fp=a("li"),rse=a("strong"),Dho=o("clip"),Gho=o(" \u2014 "),EI=a("a"),Oho=o("CLIPModel"),Vho=o(" (CLIP model)"),Xho=l(),mp=a("li"),tse=a("strong"),zho=o("convbert"),Who=o(" \u2014 "),CI=a("a"),Qho=o("ConvBertModel"),Hho=o(" (ConvBERT model)"),Uho=l(),gp=a("li"),ase=a("strong"),Jho=o("convnext"),Yho=o(" \u2014 "),wI=a("a"),Kho=o("ConvNextModel"),Zho=o(" (ConvNext model)"),epo=l(),hp=a("li"),nse=a("strong"),opo=o("ctrl"),rpo=o(" \u2014 "),AI=a("a"),tpo=o("CTRLModel"),apo=o(" (CTRL model)"),npo=l(),pp=a("li"),sse=a("strong"),spo=o("data2vec-audio"),lpo=o(" \u2014 "),yI=a("a"),ipo=o("Data2VecAudioModel"),dpo=o(" (Data2VecAudio model)"),cpo=l(),_p=a("li"),lse=a("strong"),fpo=o("data2vec-text"),mpo=o(" \u2014 "),LI=a("a"),gpo=o("Data2VecTextModel"),hpo=o(" (Data2VecText model)"),ppo=l(),up=a("li"),ise=a("strong"),_po=o("data2vec-vision"),upo=o(" \u2014 "),xI=a("a"),bpo=o("Data2VecVisionModel"),vpo=o(" (Data2VecVision model)"),Fpo=l(),bp=a("li"),dse=a("strong"),Tpo=o("deberta"),Mpo=o(" \u2014 "),$I=a("a"),Epo=o("DebertaModel"),Cpo=o(" (DeBERTa model)"),wpo=l(),vp=a("li"),cse=a("strong"),Apo=o("deberta-v2"),ypo=o(" \u2014 "),kI=a("a"),Lpo=o("DebertaV2Model"),xpo=o(" (DeBERTa-v2 model)"),$po=l(),Fp=a("li"),fse=a("strong"),kpo=o("decision_transformer"),Spo=o(" \u2014 "),SI=a("a"),Rpo=o("DecisionTransformerModel"),Ppo=o(" (Decision Transformer model)"),Bpo=l(),Tp=a("li"),mse=a("strong"),Ipo=o("deit"),qpo=o(" \u2014 "),RI=a("a"),Npo=o("DeiTModel"),jpo=o(" (DeiT model)"),Dpo=l(),Mp=a("li"),gse=a("strong"),Gpo=o("detr"),Opo=o(" \u2014 "),PI=a("a"),Vpo=o("DetrModel"),Xpo=o(" (DETR model)"),zpo=l(),Ep=a("li"),hse=a("strong"),Wpo=o("distilbert"),Qpo=o(" \u2014 "),BI=a("a"),Hpo=o("DistilBertModel"),Upo=o(" (DistilBERT model)"),Jpo=l(),Cp=a("li"),pse=a("strong"),Ypo=o("dpr"),Kpo=o(" \u2014 "),II=a("a"),Zpo=o("DPRQuestionEncoder"),e_o=o(" (DPR model)"),o_o=l(),wp=a("li"),_se=a("strong"),r_o=o("dpt"),t_o=o(" \u2014 "),qI=a("a"),a_o=o("DPTModel"),n_o=o(" (DPT model)"),s_o=l(),Ap=a("li"),use=a("strong"),l_o=o("electra"),i_o=o(" \u2014 "),NI=a("a"),d_o=o("ElectraModel"),c_o=o(" (ELECTRA model)"),f_o=l(),yp=a("li"),bse=a("strong"),m_o=o("flaubert"),g_o=o(" \u2014 "),jI=a("a"),h_o=o("FlaubertModel"),p_o=o(" (FlauBERT model)"),__o=l(),Lp=a("li"),vse=a("strong"),u_o=o("flava"),b_o=o(" \u2014 "),DI=a("a"),v_o=o("FlavaModel"),F_o=o(" (Flava model)"),T_o=l(),xp=a("li"),Fse=a("strong"),M_o=o("fnet"),E_o=o(" \u2014 "),GI=a("a"),C_o=o("FNetModel"),w_o=o(" (FNet model)"),A_o=l(),$p=a("li"),Tse=a("strong"),y_o=o("fsmt"),L_o=o(" \u2014 "),OI=a("a"),x_o=o("FSMTModel"),$_o=o(" (FairSeq Machine-Translation model)"),k_o=l(),Ps=a("li"),Mse=a("strong"),S_o=o("funnel"),R_o=o(" \u2014 "),VI=a("a"),P_o=o("FunnelModel"),B_o=o(" or "),XI=a("a"),I_o=o("FunnelBaseModel"),q_o=o(" (Funnel Transformer model)"),N_o=l(),kp=a("li"),Ese=a("strong"),j_o=o("glpn"),D_o=o(" \u2014 "),zI=a("a"),G_o=o("GLPNModel"),O_o=o(" (GLPN model)"),V_o=l(),Sp=a("li"),Cse=a("strong"),X_o=o("gpt2"),z_o=o(" \u2014 "),WI=a("a"),W_o=o("GPT2Model"),Q_o=o(" (OpenAI GPT-2 model)"),H_o=l(),Rp=a("li"),wse=a("strong"),U_o=o("gpt_neo"),J_o=o(" \u2014 "),QI=a("a"),Y_o=o("GPTNeoModel"),K_o=o(" (GPT Neo model)"),Z_o=l(),Pp=a("li"),Ase=a("strong"),euo=o("gptj"),ouo=o(" \u2014 "),HI=a("a"),ruo=o("GPTJModel"),tuo=o(" (GPT-J model)"),auo=l(),Bp=a("li"),yse=a("strong"),nuo=o("hubert"),suo=o(" \u2014 "),UI=a("a"),luo=o("HubertModel"),iuo=o(" (Hubert model)"),duo=l(),Ip=a("li"),Lse=a("strong"),cuo=o("ibert"),fuo=o(" \u2014 "),JI=a("a"),muo=o("IBertModel"),guo=o(" (I-BERT model)"),huo=l(),qp=a("li"),xse=a("strong"),puo=o("imagegpt"),_uo=o(" \u2014 "),YI=a("a"),uuo=o("ImageGPTModel"),buo=o(" (ImageGPT model)"),vuo=l(),Np=a("li"),$se=a("strong"),Fuo=o("layoutlm"),Tuo=o(" \u2014 "),KI=a("a"),Muo=o("LayoutLMModel"),Euo=o(" (LayoutLM model)"),Cuo=l(),jp=a("li"),kse=a("strong"),wuo=o("layoutlmv2"),Auo=o(" \u2014 "),ZI=a("a"),yuo=o("LayoutLMv2Model"),Luo=o(" (LayoutLMv2 model)"),xuo=l(),Dp=a("li"),Sse=a("strong"),$uo=o("led"),kuo=o(" \u2014 "),eq=a("a"),Suo=o("LEDModel"),Ruo=o(" (LED model)"),Puo=l(),Gp=a("li"),Rse=a("strong"),Buo=o("longformer"),Iuo=o(" \u2014 "),oq=a("a"),quo=o("LongformerModel"),Nuo=o(" (Longformer model)"),juo=l(),Op=a("li"),Pse=a("strong"),Duo=o("longt5"),Guo=o(" \u2014 "),rq=a("a"),Ouo=o("LongT5Model"),Vuo=o(" (LongT5 model)"),Xuo=l(),Vp=a("li"),Bse=a("strong"),zuo=o("luke"),Wuo=o(" \u2014 "),tq=a("a"),Quo=o("LukeModel"),Huo=o(" (LUKE model)"),Uuo=l(),Xp=a("li"),Ise=a("strong"),Juo=o("lxmert"),Yuo=o(" \u2014 "),aq=a("a"),Kuo=o("LxmertModel"),Zuo=o(" (LXMERT model)"),e2o=l(),zp=a("li"),qse=a("strong"),o2o=o("m2m_100"),r2o=o(" \u2014 "),nq=a("a"),t2o=o("M2M100Model"),a2o=o(" (M2M100 model)"),n2o=l(),Wp=a("li"),Nse=a("strong"),s2o=o("marian"),l2o=o(" \u2014 "),sq=a("a"),i2o=o("MarianModel"),d2o=o(" (Marian model)"),c2o=l(),Qp=a("li"),jse=a("strong"),f2o=o("maskformer"),m2o=o(" \u2014 "),lq=a("a"),g2o=o("MaskFormerModel"),h2o=o(" (MaskFormer model)"),p2o=l(),Hp=a("li"),Dse=a("strong"),_2o=o("mbart"),u2o=o(" \u2014 "),iq=a("a"),b2o=o("MBartModel"),v2o=o(" (mBART model)"),F2o=l(),Up=a("li"),Gse=a("strong"),T2o=o("megatron-bert"),M2o=o(" \u2014 "),dq=a("a"),E2o=o("MegatronBertModel"),C2o=o(" (MegatronBert model)"),w2o=l(),Jp=a("li"),Ose=a("strong"),A2o=o("mobilebert"),y2o=o(" \u2014 "),cq=a("a"),L2o=o("MobileBertModel"),x2o=o(" (MobileBERT model)"),$2o=l(),Yp=a("li"),Vse=a("strong"),k2o=o("mpnet"),S2o=o(" \u2014 "),fq=a("a"),R2o=o("MPNetModel"),P2o=o(" (MPNet model)"),B2o=l(),Kp=a("li"),Xse=a("strong"),I2o=o("mt5"),q2o=o(" \u2014 "),mq=a("a"),N2o=o("MT5Model"),j2o=o(" (mT5 model)"),D2o=l(),Zp=a("li"),zse=a("strong"),G2o=o("nystromformer"),O2o=o(" \u2014 "),gq=a("a"),V2o=o("NystromformerModel"),X2o=o(" (Nystromformer model)"),z2o=l(),e_=a("li"),Wse=a("strong"),W2o=o("openai-gpt"),Q2o=o(" \u2014 "),hq=a("a"),H2o=o("OpenAIGPTModel"),U2o=o(" (OpenAI GPT model)"),J2o=l(),o_=a("li"),Qse=a("strong"),Y2o=o("opt"),K2o=o(" \u2014 "),pq=a("a"),Z2o=o("OPTModel"),e1o=o(" (OPT model)"),o1o=l(),r_=a("li"),Hse=a("strong"),r1o=o("pegasus"),t1o=o(" \u2014 "),_q=a("a"),a1o=o("PegasusModel"),n1o=o(" (Pegasus model)"),s1o=l(),t_=a("li"),Use=a("strong"),l1o=o("perceiver"),i1o=o(" \u2014 "),uq=a("a"),d1o=o("PerceiverModel"),c1o=o(" (Perceiver model)"),f1o=l(),a_=a("li"),Jse=a("strong"),m1o=o("plbart"),g1o=o(" \u2014 "),bq=a("a"),h1o=o("PLBartModel"),p1o=o(" (PLBart model)"),_1o=l(),n_=a("li"),Yse=a("strong"),u1o=o("poolformer"),b1o=o(" \u2014 "),vq=a("a"),v1o=o("PoolFormerModel"),F1o=o(" (PoolFormer model)"),T1o=l(),s_=a("li"),Kse=a("strong"),M1o=o("prophetnet"),E1o=o(" \u2014 "),Fq=a("a"),C1o=o("ProphetNetModel"),w1o=o(" (ProphetNet model)"),A1o=l(),l_=a("li"),Zse=a("strong"),y1o=o("qdqbert"),L1o=o(" \u2014 "),Tq=a("a"),x1o=o("QDQBertModel"),$1o=o(" (QDQBert model)"),k1o=l(),i_=a("li"),ele=a("strong"),S1o=o("reformer"),R1o=o(" \u2014 "),Mq=a("a"),P1o=o("ReformerModel"),B1o=o(" (Reformer model)"),I1o=l(),d_=a("li"),ole=a("strong"),q1o=o("regnet"),N1o=o(" \u2014 "),Eq=a("a"),j1o=o("RegNetModel"),D1o=o(" (RegNet model)"),G1o=l(),c_=a("li"),rle=a("strong"),O1o=o("rembert"),V1o=o(" \u2014 "),Cq=a("a"),X1o=o("RemBertModel"),z1o=o(" (RemBERT model)"),W1o=l(),f_=a("li"),tle=a("strong"),Q1o=o("resnet"),H1o=o(" \u2014 "),wq=a("a"),U1o=o("ResNetModel"),J1o=o(" (ResNet model)"),Y1o=l(),m_=a("li"),ale=a("strong"),K1o=o("retribert"),Z1o=o(" \u2014 "),Aq=a("a"),ebo=o("RetriBertModel"),obo=o(" (RetriBERT model)"),rbo=l(),g_=a("li"),nle=a("strong"),tbo=o("roberta"),abo=o(" \u2014 "),yq=a("a"),nbo=o("RobertaModel"),sbo=o(" (RoBERTa model)"),lbo=l(),h_=a("li"),sle=a("strong"),ibo=o("roformer"),dbo=o(" \u2014 "),Lq=a("a"),cbo=o("RoFormerModel"),fbo=o(" (RoFormer model)"),mbo=l(),p_=a("li"),lle=a("strong"),gbo=o("segformer"),hbo=o(" \u2014 "),xq=a("a"),pbo=o("SegformerModel"),_bo=o(" (SegFormer model)"),ubo=l(),__=a("li"),ile=a("strong"),bbo=o("sew"),vbo=o(" \u2014 "),$q=a("a"),Fbo=o("SEWModel"),Tbo=o(" (SEW model)"),Mbo=l(),u_=a("li"),dle=a("strong"),Ebo=o("sew-d"),Cbo=o(" \u2014 "),kq=a("a"),wbo=o("SEWDModel"),Abo=o(" (SEW-D model)"),ybo=l(),b_=a("li"),cle=a("strong"),Lbo=o("speech_to_text"),xbo=o(" \u2014 "),Sq=a("a"),$bo=o("Speech2TextModel"),kbo=o(" (Speech2Text model)"),Sbo=l(),v_=a("li"),fle=a("strong"),Rbo=o("splinter"),Pbo=o(" \u2014 "),Rq=a("a"),Bbo=o("SplinterModel"),Ibo=o(" (Splinter model)"),qbo=l(),F_=a("li"),mle=a("strong"),Nbo=o("squeezebert"),jbo=o(" \u2014 "),Pq=a("a"),Dbo=o("SqueezeBertModel"),Gbo=o(" (SqueezeBERT model)"),Obo=l(),T_=a("li"),gle=a("strong"),Vbo=o("swin"),Xbo=o(" \u2014 "),Bq=a("a"),zbo=o("SwinModel"),Wbo=o(" (Swin model)"),Qbo=l(),M_=a("li"),hle=a("strong"),Hbo=o("t5"),Ubo=o(" \u2014 "),Iq=a("a"),Jbo=o("T5Model"),Ybo=o(" (T5 model)"),Kbo=l(),E_=a("li"),ple=a("strong"),Zbo=o("tapas"),evo=o(" \u2014 "),qq=a("a"),ovo=o("TapasModel"),rvo=o(" (TAPAS model)"),tvo=l(),C_=a("li"),_le=a("strong"),avo=o("transfo-xl"),nvo=o(" \u2014 "),Nq=a("a"),svo=o("TransfoXLModel"),lvo=o(" (Transformer-XL model)"),ivo=l(),w_=a("li"),ule=a("strong"),dvo=o("unispeech"),cvo=o(" \u2014 "),jq=a("a"),fvo=o("UniSpeechModel"),mvo=o(" (UniSpeech model)"),gvo=l(),A_=a("li"),ble=a("strong"),hvo=o("unispeech-sat"),pvo=o(" \u2014 "),Dq=a("a"),_vo=o("UniSpeechSatModel"),uvo=o(" (UniSpeechSat model)"),bvo=l(),y_=a("li"),vle=a("strong"),vvo=o("van"),Fvo=o(" \u2014 "),Gq=a("a"),Tvo=o("VanModel"),Mvo=o(" (VAN model)"),Evo=l(),L_=a("li"),Fle=a("strong"),Cvo=o("vilt"),wvo=o(" \u2014 "),Oq=a("a"),Avo=o("ViltModel"),yvo=o(" (ViLT model)"),Lvo=l(),x_=a("li"),Tle=a("strong"),xvo=o("vision-text-dual-encoder"),$vo=o(" \u2014 "),Vq=a("a"),kvo=o("VisionTextDualEncoderModel"),Svo=o(" (VisionTextDualEncoder model)"),Rvo=l(),$_=a("li"),Mle=a("strong"),Pvo=o("visual_bert"),Bvo=o(" \u2014 "),Xq=a("a"),Ivo=o("VisualBertModel"),qvo=o(" (VisualBert model)"),Nvo=l(),k_=a("li"),Ele=a("strong"),jvo=o("vit"),Dvo=o(" \u2014 "),zq=a("a"),Gvo=o("ViTModel"),Ovo=o(" (ViT model)"),Vvo=l(),S_=a("li"),Cle=a("strong"),Xvo=o("vit_mae"),zvo=o(" \u2014 "),Wq=a("a"),Wvo=o("ViTMAEModel"),Qvo=o(" (ViTMAE model)"),Hvo=l(),R_=a("li"),wle=a("strong"),Uvo=o("wav2vec2"),Jvo=o(" \u2014 "),Qq=a("a"),Yvo=o("Wav2Vec2Model"),Kvo=o(" (Wav2Vec2 model)"),Zvo=l(),P_=a("li"),Ale=a("strong"),eFo=o("wav2vec2-conformer"),oFo=o(" \u2014 "),Hq=a("a"),rFo=o("Wav2Vec2ConformerModel"),tFo=o(" (Wav2Vec2-Conformer model)"),aFo=l(),B_=a("li"),yle=a("strong"),nFo=o("wavlm"),sFo=o(" \u2014 "),Uq=a("a"),lFo=o("WavLMModel"),iFo=o(" (WavLM model)"),dFo=l(),I_=a("li"),Lle=a("strong"),cFo=o("xglm"),fFo=o(" \u2014 "),Jq=a("a"),mFo=o("XGLMModel"),gFo=o(" (XGLM model)"),hFo=l(),q_=a("li"),xle=a("strong"),pFo=o("xlm"),_Fo=o(" \u2014 "),Yq=a("a"),uFo=o("XLMModel"),bFo=o(" (XLM model)"),vFo=l(),N_=a("li"),$le=a("strong"),FFo=o("xlm-prophetnet"),TFo=o(" \u2014 "),Kq=a("a"),MFo=o("XLMProphetNetModel"),EFo=o(" (XLMProphetNet model)"),CFo=l(),j_=a("li"),kle=a("strong"),wFo=o("xlm-roberta"),AFo=o(" \u2014 "),Zq=a("a"),yFo=o("XLMRobertaModel"),LFo=o(" (XLM-RoBERTa model)"),xFo=l(),D_=a("li"),Sle=a("strong"),$Fo=o("xlm-roberta-xl"),kFo=o(" \u2014 "),eN=a("a"),SFo=o("XLMRobertaXLModel"),RFo=o(" (XLM-RoBERTa-XL model)"),PFo=l(),G_=a("li"),Rle=a("strong"),BFo=o("xlnet"),IFo=o(" \u2014 "),oN=a("a"),qFo=o("XLNetModel"),NFo=o(" (XLNet model)"),jFo=l(),O_=a("li"),Ple=a("strong"),DFo=o("yolos"),GFo=o(" \u2014 "),rN=a("a"),OFo=o("YolosModel"),VFo=o(" (YOLOS model)"),XFo=l(),V_=a("li"),Ble=a("strong"),zFo=o("yoso"),WFo=o(" \u2014 "),tN=a("a"),QFo=o("YosoModel"),HFo=o(" (YOSO model)"),UFo=l(),X_=a("p"),JFo=o("The model is set in evaluation mode by default using "),Ile=a("code"),YFo=o("model.eval()"),KFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),ZFo=o("model.train()"),e6o=l(),F(z_.$$.fragment),vqe=l(),Li=a("h2"),W_=a("a"),Nle=a("span"),F(W0.$$.fragment),o6o=l(),jle=a("span"),r6o=o("AutoModelForPreTraining"),Fqe=l(),xo=a("div"),F(Q0.$$.fragment),t6o=l(),xi=a("p"),a6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aN=a("a"),n6o=o("from_pretrained()"),s6o=o(" class method or the "),nN=a("a"),l6o=o("from_config()"),i6o=o(` class
method.`),d6o=l(),H0=a("p"),c6o=o("This class cannot be instantiated directly using "),Dle=a("code"),f6o=o("__init__()"),m6o=o(" (throws an error)."),g6o=l(),at=a("div"),F(U0.$$.fragment),h6o=l(),Gle=a("p"),p6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_6o=l(),$i=a("p"),u6o=o(`Note:
Loading a model from its configuration file does `),Ole=a("strong"),b6o=o("not"),v6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),F6o=o("from_pretrained()"),T6o=o(" to load the model weights."),M6o=l(),F(Q_.$$.fragment),E6o=l(),Ye=a("div"),F(J0.$$.fragment),C6o=l(),Vle=a("p"),w6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A6o=l(),xa=a("p"),y6o=o("The model class to instantiate is selected based on the "),Xle=a("code"),L6o=o("model_type"),x6o=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),$6o=o("pretrained_model_name_or_path"),k6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),S6o=o("pretrained_model_name_or_path"),R6o=o(":"),P6o=l(),G=a("ul"),H_=a("li"),Qle=a("strong"),B6o=o("albert"),I6o=o(" \u2014 "),lN=a("a"),q6o=o("AlbertForPreTraining"),N6o=o(" (ALBERT model)"),j6o=l(),U_=a("li"),Hle=a("strong"),D6o=o("bart"),G6o=o(" \u2014 "),iN=a("a"),O6o=o("BartForConditionalGeneration"),V6o=o(" (BART model)"),X6o=l(),J_=a("li"),Ule=a("strong"),z6o=o("bert"),W6o=o(" \u2014 "),dN=a("a"),Q6o=o("BertForPreTraining"),H6o=o(" (BERT model)"),U6o=l(),Y_=a("li"),Jle=a("strong"),J6o=o("big_bird"),Y6o=o(" \u2014 "),cN=a("a"),K6o=o("BigBirdForPreTraining"),Z6o=o(" (BigBird model)"),eTo=l(),K_=a("li"),Yle=a("strong"),oTo=o("camembert"),rTo=o(" \u2014 "),fN=a("a"),tTo=o("CamembertForMaskedLM"),aTo=o(" (CamemBERT model)"),nTo=l(),Z_=a("li"),Kle=a("strong"),sTo=o("ctrl"),lTo=o(" \u2014 "),mN=a("a"),iTo=o("CTRLLMHeadModel"),dTo=o(" (CTRL model)"),cTo=l(),eu=a("li"),Zle=a("strong"),fTo=o("data2vec-text"),mTo=o(" \u2014 "),gN=a("a"),gTo=o("Data2VecTextForMaskedLM"),hTo=o(" (Data2VecText model)"),pTo=l(),ou=a("li"),eie=a("strong"),_To=o("deberta"),uTo=o(" \u2014 "),hN=a("a"),bTo=o("DebertaForMaskedLM"),vTo=o(" (DeBERTa model)"),FTo=l(),ru=a("li"),oie=a("strong"),TTo=o("deberta-v2"),MTo=o(" \u2014 "),pN=a("a"),ETo=o("DebertaV2ForMaskedLM"),CTo=o(" (DeBERTa-v2 model)"),wTo=l(),tu=a("li"),rie=a("strong"),ATo=o("distilbert"),yTo=o(" \u2014 "),_N=a("a"),LTo=o("DistilBertForMaskedLM"),xTo=o(" (DistilBERT model)"),$To=l(),au=a("li"),tie=a("strong"),kTo=o("electra"),STo=o(" \u2014 "),uN=a("a"),RTo=o("ElectraForPreTraining"),PTo=o(" (ELECTRA model)"),BTo=l(),nu=a("li"),aie=a("strong"),ITo=o("flaubert"),qTo=o(" \u2014 "),bN=a("a"),NTo=o("FlaubertWithLMHeadModel"),jTo=o(" (FlauBERT model)"),DTo=l(),su=a("li"),nie=a("strong"),GTo=o("flava"),OTo=o(" \u2014 "),vN=a("a"),VTo=o("FlavaForPreTraining"),XTo=o(" (Flava model)"),zTo=l(),lu=a("li"),sie=a("strong"),WTo=o("fnet"),QTo=o(" \u2014 "),FN=a("a"),HTo=o("FNetForPreTraining"),UTo=o(" (FNet model)"),JTo=l(),iu=a("li"),lie=a("strong"),YTo=o("fsmt"),KTo=o(" \u2014 "),TN=a("a"),ZTo=o("FSMTForConditionalGeneration"),e7o=o(" (FairSeq Machine-Translation model)"),o7o=l(),du=a("li"),iie=a("strong"),r7o=o("funnel"),t7o=o(" \u2014 "),MN=a("a"),a7o=o("FunnelForPreTraining"),n7o=o(" (Funnel Transformer model)"),s7o=l(),cu=a("li"),die=a("strong"),l7o=o("gpt2"),i7o=o(" \u2014 "),EN=a("a"),d7o=o("GPT2LMHeadModel"),c7o=o(" (OpenAI GPT-2 model)"),f7o=l(),fu=a("li"),cie=a("strong"),m7o=o("ibert"),g7o=o(" \u2014 "),CN=a("a"),h7o=o("IBertForMaskedLM"),p7o=o(" (I-BERT model)"),_7o=l(),mu=a("li"),fie=a("strong"),u7o=o("layoutlm"),b7o=o(" \u2014 "),wN=a("a"),v7o=o("LayoutLMForMaskedLM"),F7o=o(" (LayoutLM model)"),T7o=l(),gu=a("li"),mie=a("strong"),M7o=o("longformer"),E7o=o(" \u2014 "),AN=a("a"),C7o=o("LongformerForMaskedLM"),w7o=o(" (Longformer model)"),A7o=l(),hu=a("li"),gie=a("strong"),y7o=o("longt5"),L7o=o(" \u2014 "),yN=a("a"),x7o=o("LongT5ForConditionalGeneration"),$7o=o(" (LongT5 model)"),k7o=l(),pu=a("li"),hie=a("strong"),S7o=o("lxmert"),R7o=o(" \u2014 "),LN=a("a"),P7o=o("LxmertForPreTraining"),B7o=o(" (LXMERT model)"),I7o=l(),_u=a("li"),pie=a("strong"),q7o=o("megatron-bert"),N7o=o(" \u2014 "),xN=a("a"),j7o=o("MegatronBertForPreTraining"),D7o=o(" (MegatronBert model)"),G7o=l(),uu=a("li"),_ie=a("strong"),O7o=o("mobilebert"),V7o=o(" \u2014 "),$N=a("a"),X7o=o("MobileBertForPreTraining"),z7o=o(" (MobileBERT model)"),W7o=l(),bu=a("li"),uie=a("strong"),Q7o=o("mpnet"),H7o=o(" \u2014 "),kN=a("a"),U7o=o("MPNetForMaskedLM"),J7o=o(" (MPNet model)"),Y7o=l(),vu=a("li"),bie=a("strong"),K7o=o("openai-gpt"),Z7o=o(" \u2014 "),SN=a("a"),e9o=o("OpenAIGPTLMHeadModel"),o9o=o(" (OpenAI GPT model)"),r9o=l(),Fu=a("li"),vie=a("strong"),t9o=o("retribert"),a9o=o(" \u2014 "),RN=a("a"),n9o=o("RetriBertModel"),s9o=o(" (RetriBERT model)"),l9o=l(),Tu=a("li"),Fie=a("strong"),i9o=o("roberta"),d9o=o(" \u2014 "),PN=a("a"),c9o=o("RobertaForMaskedLM"),f9o=o(" (RoBERTa model)"),m9o=l(),Mu=a("li"),Tie=a("strong"),g9o=o("squeezebert"),h9o=o(" \u2014 "),BN=a("a"),p9o=o("SqueezeBertForMaskedLM"),_9o=o(" (SqueezeBERT model)"),u9o=l(),Eu=a("li"),Mie=a("strong"),b9o=o("t5"),v9o=o(" \u2014 "),IN=a("a"),F9o=o("T5ForConditionalGeneration"),T9o=o(" (T5 model)"),M9o=l(),Cu=a("li"),Eie=a("strong"),E9o=o("tapas"),C9o=o(" \u2014 "),qN=a("a"),w9o=o("TapasForMaskedLM"),A9o=o(" (TAPAS model)"),y9o=l(),wu=a("li"),Cie=a("strong"),L9o=o("transfo-xl"),x9o=o(" \u2014 "),NN=a("a"),$9o=o("TransfoXLLMHeadModel"),k9o=o(" (Transformer-XL model)"),S9o=l(),Au=a("li"),wie=a("strong"),R9o=o("unispeech"),P9o=o(" \u2014 "),jN=a("a"),B9o=o("UniSpeechForPreTraining"),I9o=o(" (UniSpeech model)"),q9o=l(),yu=a("li"),Aie=a("strong"),N9o=o("unispeech-sat"),j9o=o(" \u2014 "),DN=a("a"),D9o=o("UniSpeechSatForPreTraining"),G9o=o(" (UniSpeechSat model)"),O9o=l(),Lu=a("li"),yie=a("strong"),V9o=o("visual_bert"),X9o=o(" \u2014 "),GN=a("a"),z9o=o("VisualBertForPreTraining"),W9o=o(" (VisualBert model)"),Q9o=l(),xu=a("li"),Lie=a("strong"),H9o=o("vit_mae"),U9o=o(" \u2014 "),ON=a("a"),J9o=o("ViTMAEForPreTraining"),Y9o=o(" (ViTMAE model)"),K9o=l(),$u=a("li"),xie=a("strong"),Z9o=o("wav2vec2"),eMo=o(" \u2014 "),VN=a("a"),oMo=o("Wav2Vec2ForPreTraining"),rMo=o(" (Wav2Vec2 model)"),tMo=l(),ku=a("li"),$ie=a("strong"),aMo=o("wav2vec2-conformer"),nMo=o(" \u2014 "),XN=a("a"),sMo=o("Wav2Vec2ConformerForPreTraining"),lMo=o(" (Wav2Vec2-Conformer model)"),iMo=l(),Su=a("li"),kie=a("strong"),dMo=o("xlm"),cMo=o(" \u2014 "),zN=a("a"),fMo=o("XLMWithLMHeadModel"),mMo=o(" (XLM model)"),gMo=l(),Ru=a("li"),Sie=a("strong"),hMo=o("xlm-roberta"),pMo=o(" \u2014 "),WN=a("a"),_Mo=o("XLMRobertaForMaskedLM"),uMo=o(" (XLM-RoBERTa model)"),bMo=l(),Pu=a("li"),Rie=a("strong"),vMo=o("xlm-roberta-xl"),FMo=o(" \u2014 "),QN=a("a"),TMo=o("XLMRobertaXLForMaskedLM"),MMo=o(" (XLM-RoBERTa-XL model)"),EMo=l(),Bu=a("li"),Pie=a("strong"),CMo=o("xlnet"),wMo=o(" \u2014 "),HN=a("a"),AMo=o("XLNetLMHeadModel"),yMo=o(" (XLNet model)"),LMo=l(),Iu=a("p"),xMo=o("The model is set in evaluation mode by default using "),Bie=a("code"),$Mo=o("model.eval()"),kMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=a("code"),SMo=o("model.train()"),RMo=l(),F(qu.$$.fragment),Tqe=l(),ki=a("h2"),Nu=a("a"),qie=a("span"),F(Y0.$$.fragment),PMo=l(),Nie=a("span"),BMo=o("AutoModelForCausalLM"),Mqe=l(),$o=a("div"),F(K0.$$.fragment),IMo=l(),Si=a("p"),qMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UN=a("a"),NMo=o("from_pretrained()"),jMo=o(" class method or the "),JN=a("a"),DMo=o("from_config()"),GMo=o(` class
method.`),OMo=l(),Z0=a("p"),VMo=o("This class cannot be instantiated directly using "),jie=a("code"),XMo=o("__init__()"),zMo=o(" (throws an error)."),WMo=l(),nt=a("div"),F(eA.$$.fragment),QMo=l(),Die=a("p"),HMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UMo=l(),Ri=a("p"),JMo=o(`Note:
Loading a model from its configuration file does `),Gie=a("strong"),YMo=o("not"),KMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=a("a"),ZMo=o("from_pretrained()"),e4o=o(" to load the model weights."),o4o=l(),F(ju.$$.fragment),r4o=l(),Ke=a("div"),F(oA.$$.fragment),t4o=l(),Oie=a("p"),a4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n4o=l(),$a=a("p"),s4o=o("The model class to instantiate is selected based on the "),Vie=a("code"),l4o=o("model_type"),i4o=o(` property of the config object (either
passed as an argument or loaded from `),Xie=a("code"),d4o=o("pretrained_model_name_or_path"),c4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=a("code"),f4o=o("pretrained_model_name_or_path"),m4o=o(":"),g4o=l(),z=a("ul"),Du=a("li"),Wie=a("strong"),h4o=o("bart"),p4o=o(" \u2014 "),KN=a("a"),_4o=o("BartForCausalLM"),u4o=o(" (BART model)"),b4o=l(),Gu=a("li"),Qie=a("strong"),v4o=o("bert"),F4o=o(" \u2014 "),ZN=a("a"),T4o=o("BertLMHeadModel"),M4o=o(" (BERT model)"),E4o=l(),Ou=a("li"),Hie=a("strong"),C4o=o("bert-generation"),w4o=o(" \u2014 "),ej=a("a"),A4o=o("BertGenerationDecoder"),y4o=o(" (Bert Generation model)"),L4o=l(),Vu=a("li"),Uie=a("strong"),x4o=o("big_bird"),$4o=o(" \u2014 "),oj=a("a"),k4o=o("BigBirdForCausalLM"),S4o=o(" (BigBird model)"),R4o=l(),Xu=a("li"),Jie=a("strong"),P4o=o("bigbird_pegasus"),B4o=o(" \u2014 "),rj=a("a"),I4o=o("BigBirdPegasusForCausalLM"),q4o=o(" (BigBirdPegasus model)"),N4o=l(),zu=a("li"),Yie=a("strong"),j4o=o("blenderbot"),D4o=o(" \u2014 "),tj=a("a"),G4o=o("BlenderbotForCausalLM"),O4o=o(" (Blenderbot model)"),V4o=l(),Wu=a("li"),Kie=a("strong"),X4o=o("blenderbot-small"),z4o=o(" \u2014 "),aj=a("a"),W4o=o("BlenderbotSmallForCausalLM"),Q4o=o(" (BlenderbotSmall model)"),H4o=l(),Qu=a("li"),Zie=a("strong"),U4o=o("camembert"),J4o=o(" \u2014 "),nj=a("a"),Y4o=o("CamembertForCausalLM"),K4o=o(" (CamemBERT model)"),Z4o=l(),Hu=a("li"),ede=a("strong"),eEo=o("ctrl"),oEo=o(" \u2014 "),sj=a("a"),rEo=o("CTRLLMHeadModel"),tEo=o(" (CTRL model)"),aEo=l(),Uu=a("li"),ode=a("strong"),nEo=o("data2vec-text"),sEo=o(" \u2014 "),lj=a("a"),lEo=o("Data2VecTextForCausalLM"),iEo=o(" (Data2VecText model)"),dEo=l(),Ju=a("li"),rde=a("strong"),cEo=o("electra"),fEo=o(" \u2014 "),ij=a("a"),mEo=o("ElectraForCausalLM"),gEo=o(" (ELECTRA model)"),hEo=l(),Yu=a("li"),tde=a("strong"),pEo=o("gpt2"),_Eo=o(" \u2014 "),dj=a("a"),uEo=o("GPT2LMHeadModel"),bEo=o(" (OpenAI GPT-2 model)"),vEo=l(),Ku=a("li"),ade=a("strong"),FEo=o("gpt_neo"),TEo=o(" \u2014 "),cj=a("a"),MEo=o("GPTNeoForCausalLM"),EEo=o(" (GPT Neo model)"),CEo=l(),Zu=a("li"),nde=a("strong"),wEo=o("gptj"),AEo=o(" \u2014 "),fj=a("a"),yEo=o("GPTJForCausalLM"),LEo=o(" (GPT-J model)"),xEo=l(),e2=a("li"),sde=a("strong"),$Eo=o("marian"),kEo=o(" \u2014 "),mj=a("a"),SEo=o("MarianForCausalLM"),REo=o(" (Marian model)"),PEo=l(),o2=a("li"),lde=a("strong"),BEo=o("mbart"),IEo=o(" \u2014 "),gj=a("a"),qEo=o("MBartForCausalLM"),NEo=o(" (mBART model)"),jEo=l(),r2=a("li"),ide=a("strong"),DEo=o("megatron-bert"),GEo=o(" \u2014 "),hj=a("a"),OEo=o("MegatronBertForCausalLM"),VEo=o(" (MegatronBert model)"),XEo=l(),t2=a("li"),dde=a("strong"),zEo=o("openai-gpt"),WEo=o(" \u2014 "),pj=a("a"),QEo=o("OpenAIGPTLMHeadModel"),HEo=o(" (OpenAI GPT model)"),UEo=l(),a2=a("li"),cde=a("strong"),JEo=o("opt"),YEo=o(" \u2014 "),_j=a("a"),KEo=o("OPTForCausalLM"),ZEo=o(" (OPT model)"),e5o=l(),n2=a("li"),fde=a("strong"),o5o=o("pegasus"),r5o=o(" \u2014 "),uj=a("a"),t5o=o("PegasusForCausalLM"),a5o=o(" (Pegasus model)"),n5o=l(),s2=a("li"),mde=a("strong"),s5o=o("plbart"),l5o=o(" \u2014 "),bj=a("a"),i5o=o("PLBartForCausalLM"),d5o=o(" (PLBart model)"),c5o=l(),l2=a("li"),gde=a("strong"),f5o=o("prophetnet"),m5o=o(" \u2014 "),vj=a("a"),g5o=o("ProphetNetForCausalLM"),h5o=o(" (ProphetNet model)"),p5o=l(),i2=a("li"),hde=a("strong"),_5o=o("qdqbert"),u5o=o(" \u2014 "),Fj=a("a"),b5o=o("QDQBertLMHeadModel"),v5o=o(" (QDQBert model)"),F5o=l(),d2=a("li"),pde=a("strong"),T5o=o("reformer"),M5o=o(" \u2014 "),Tj=a("a"),E5o=o("ReformerModelWithLMHead"),C5o=o(" (Reformer model)"),w5o=l(),c2=a("li"),_de=a("strong"),A5o=o("rembert"),y5o=o(" \u2014 "),Mj=a("a"),L5o=o("RemBertForCausalLM"),x5o=o(" (RemBERT model)"),$5o=l(),f2=a("li"),ude=a("strong"),k5o=o("roberta"),S5o=o(" \u2014 "),Ej=a("a"),R5o=o("RobertaForCausalLM"),P5o=o(" (RoBERTa model)"),B5o=l(),m2=a("li"),bde=a("strong"),I5o=o("roformer"),q5o=o(" \u2014 "),Cj=a("a"),N5o=o("RoFormerForCausalLM"),j5o=o(" (RoFormer model)"),D5o=l(),g2=a("li"),vde=a("strong"),G5o=o("speech_to_text_2"),O5o=o(" \u2014 "),wj=a("a"),V5o=o("Speech2Text2ForCausalLM"),X5o=o(" (Speech2Text2 model)"),z5o=l(),h2=a("li"),Fde=a("strong"),W5o=o("transfo-xl"),Q5o=o(" \u2014 "),Aj=a("a"),H5o=o("TransfoXLLMHeadModel"),U5o=o(" (Transformer-XL model)"),J5o=l(),p2=a("li"),Tde=a("strong"),Y5o=o("trocr"),K5o=o(" \u2014 "),yj=a("a"),Z5o=o("TrOCRForCausalLM"),eCo=o(" (TrOCR model)"),oCo=l(),_2=a("li"),Mde=a("strong"),rCo=o("xglm"),tCo=o(" \u2014 "),Lj=a("a"),aCo=o("XGLMForCausalLM"),nCo=o(" (XGLM model)"),sCo=l(),u2=a("li"),Ede=a("strong"),lCo=o("xlm"),iCo=o(" \u2014 "),xj=a("a"),dCo=o("XLMWithLMHeadModel"),cCo=o(" (XLM model)"),fCo=l(),b2=a("li"),Cde=a("strong"),mCo=o("xlm-prophetnet"),gCo=o(" \u2014 "),$j=a("a"),hCo=o("XLMProphetNetForCausalLM"),pCo=o(" (XLMProphetNet model)"),_Co=l(),v2=a("li"),wde=a("strong"),uCo=o("xlm-roberta"),bCo=o(" \u2014 "),kj=a("a"),vCo=o("XLMRobertaForCausalLM"),FCo=o(" (XLM-RoBERTa model)"),TCo=l(),F2=a("li"),Ade=a("strong"),MCo=o("xlm-roberta-xl"),ECo=o(" \u2014 "),Sj=a("a"),CCo=o("XLMRobertaXLForCausalLM"),wCo=o(" (XLM-RoBERTa-XL model)"),ACo=l(),T2=a("li"),yde=a("strong"),yCo=o("xlnet"),LCo=o(" \u2014 "),Rj=a("a"),xCo=o("XLNetLMHeadModel"),$Co=o(" (XLNet model)"),kCo=l(),M2=a("p"),SCo=o("The model is set in evaluation mode by default using "),Lde=a("code"),RCo=o("model.eval()"),PCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),BCo=o("model.train()"),ICo=l(),F(E2.$$.fragment),Eqe=l(),Pi=a("h2"),C2=a("a"),$de=a("span"),F(rA.$$.fragment),qCo=l(),kde=a("span"),NCo=o("AutoModelForMaskedLM"),Cqe=l(),ko=a("div"),F(tA.$$.fragment),jCo=l(),Bi=a("p"),DCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Pj=a("a"),GCo=o("from_pretrained()"),OCo=o(" class method or the "),Bj=a("a"),VCo=o("from_config()"),XCo=o(` class
method.`),zCo=l(),aA=a("p"),WCo=o("This class cannot be instantiated directly using "),Sde=a("code"),QCo=o("__init__()"),HCo=o(" (throws an error)."),UCo=l(),st=a("div"),F(nA.$$.fragment),JCo=l(),Rde=a("p"),YCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KCo=l(),Ii=a("p"),ZCo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),e3o=o("not"),o3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),r3o=o("from_pretrained()"),t3o=o(" to load the model weights."),a3o=l(),F(w2.$$.fragment),n3o=l(),Ze=a("div"),F(sA.$$.fragment),s3o=l(),Bde=a("p"),l3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i3o=l(),ka=a("p"),d3o=o("The model class to instantiate is selected based on the "),Ide=a("code"),c3o=o("model_type"),f3o=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),m3o=o("pretrained_model_name_or_path"),g3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=a("code"),h3o=o("pretrained_model_name_or_path"),p3o=o(":"),_3o=l(),W=a("ul"),A2=a("li"),jde=a("strong"),u3o=o("albert"),b3o=o(" \u2014 "),qj=a("a"),v3o=o("AlbertForMaskedLM"),F3o=o(" (ALBERT model)"),T3o=l(),y2=a("li"),Dde=a("strong"),M3o=o("bart"),E3o=o(" \u2014 "),Nj=a("a"),C3o=o("BartForConditionalGeneration"),w3o=o(" (BART model)"),A3o=l(),L2=a("li"),Gde=a("strong"),y3o=o("bert"),L3o=o(" \u2014 "),jj=a("a"),x3o=o("BertForMaskedLM"),$3o=o(" (BERT model)"),k3o=l(),x2=a("li"),Ode=a("strong"),S3o=o("big_bird"),R3o=o(" \u2014 "),Dj=a("a"),P3o=o("BigBirdForMaskedLM"),B3o=o(" (BigBird model)"),I3o=l(),$2=a("li"),Vde=a("strong"),q3o=o("camembert"),N3o=o(" \u2014 "),Gj=a("a"),j3o=o("CamembertForMaskedLM"),D3o=o(" (CamemBERT model)"),G3o=l(),k2=a("li"),Xde=a("strong"),O3o=o("convbert"),V3o=o(" \u2014 "),Oj=a("a"),X3o=o("ConvBertForMaskedLM"),z3o=o(" (ConvBERT model)"),W3o=l(),S2=a("li"),zde=a("strong"),Q3o=o("data2vec-text"),H3o=o(" \u2014 "),Vj=a("a"),U3o=o("Data2VecTextForMaskedLM"),J3o=o(" (Data2VecText model)"),Y3o=l(),R2=a("li"),Wde=a("strong"),K3o=o("deberta"),Z3o=o(" \u2014 "),Xj=a("a"),ewo=o("DebertaForMaskedLM"),owo=o(" (DeBERTa model)"),rwo=l(),P2=a("li"),Qde=a("strong"),two=o("deberta-v2"),awo=o(" \u2014 "),zj=a("a"),nwo=o("DebertaV2ForMaskedLM"),swo=o(" (DeBERTa-v2 model)"),lwo=l(),B2=a("li"),Hde=a("strong"),iwo=o("distilbert"),dwo=o(" \u2014 "),Wj=a("a"),cwo=o("DistilBertForMaskedLM"),fwo=o(" (DistilBERT model)"),mwo=l(),I2=a("li"),Ude=a("strong"),gwo=o("electra"),hwo=o(" \u2014 "),Qj=a("a"),pwo=o("ElectraForMaskedLM"),_wo=o(" (ELECTRA model)"),uwo=l(),q2=a("li"),Jde=a("strong"),bwo=o("flaubert"),vwo=o(" \u2014 "),Hj=a("a"),Fwo=o("FlaubertWithLMHeadModel"),Two=o(" (FlauBERT model)"),Mwo=l(),N2=a("li"),Yde=a("strong"),Ewo=o("fnet"),Cwo=o(" \u2014 "),Uj=a("a"),wwo=o("FNetForMaskedLM"),Awo=o(" (FNet model)"),ywo=l(),j2=a("li"),Kde=a("strong"),Lwo=o("funnel"),xwo=o(" \u2014 "),Jj=a("a"),$wo=o("FunnelForMaskedLM"),kwo=o(" (Funnel Transformer model)"),Swo=l(),D2=a("li"),Zde=a("strong"),Rwo=o("ibert"),Pwo=o(" \u2014 "),Yj=a("a"),Bwo=o("IBertForMaskedLM"),Iwo=o(" (I-BERT model)"),qwo=l(),G2=a("li"),ece=a("strong"),Nwo=o("layoutlm"),jwo=o(" \u2014 "),Kj=a("a"),Dwo=o("LayoutLMForMaskedLM"),Gwo=o(" (LayoutLM model)"),Owo=l(),O2=a("li"),oce=a("strong"),Vwo=o("longformer"),Xwo=o(" \u2014 "),Zj=a("a"),zwo=o("LongformerForMaskedLM"),Wwo=o(" (Longformer model)"),Qwo=l(),V2=a("li"),rce=a("strong"),Hwo=o("mbart"),Uwo=o(" \u2014 "),eD=a("a"),Jwo=o("MBartForConditionalGeneration"),Ywo=o(" (mBART model)"),Kwo=l(),X2=a("li"),tce=a("strong"),Zwo=o("megatron-bert"),e0o=o(" \u2014 "),oD=a("a"),o0o=o("MegatronBertForMaskedLM"),r0o=o(" (MegatronBert model)"),t0o=l(),z2=a("li"),ace=a("strong"),a0o=o("mobilebert"),n0o=o(" \u2014 "),rD=a("a"),s0o=o("MobileBertForMaskedLM"),l0o=o(" (MobileBERT model)"),i0o=l(),W2=a("li"),nce=a("strong"),d0o=o("mpnet"),c0o=o(" \u2014 "),tD=a("a"),f0o=o("MPNetForMaskedLM"),m0o=o(" (MPNet model)"),g0o=l(),Q2=a("li"),sce=a("strong"),h0o=o("nystromformer"),p0o=o(" \u2014 "),aD=a("a"),_0o=o("NystromformerForMaskedLM"),u0o=o(" (Nystromformer model)"),b0o=l(),H2=a("li"),lce=a("strong"),v0o=o("perceiver"),F0o=o(" \u2014 "),nD=a("a"),T0o=o("PerceiverForMaskedLM"),M0o=o(" (Perceiver model)"),E0o=l(),U2=a("li"),ice=a("strong"),C0o=o("qdqbert"),w0o=o(" \u2014 "),sD=a("a"),A0o=o("QDQBertForMaskedLM"),y0o=o(" (QDQBert model)"),L0o=l(),J2=a("li"),dce=a("strong"),x0o=o("reformer"),$0o=o(" \u2014 "),lD=a("a"),k0o=o("ReformerForMaskedLM"),S0o=o(" (Reformer model)"),R0o=l(),Y2=a("li"),cce=a("strong"),P0o=o("rembert"),B0o=o(" \u2014 "),iD=a("a"),I0o=o("RemBertForMaskedLM"),q0o=o(" (RemBERT model)"),N0o=l(),K2=a("li"),fce=a("strong"),j0o=o("roberta"),D0o=o(" \u2014 "),dD=a("a"),G0o=o("RobertaForMaskedLM"),O0o=o(" (RoBERTa model)"),V0o=l(),Z2=a("li"),mce=a("strong"),X0o=o("roformer"),z0o=o(" \u2014 "),cD=a("a"),W0o=o("RoFormerForMaskedLM"),Q0o=o(" (RoFormer model)"),H0o=l(),e1=a("li"),gce=a("strong"),U0o=o("squeezebert"),J0o=o(" \u2014 "),fD=a("a"),Y0o=o("SqueezeBertForMaskedLM"),K0o=o(" (SqueezeBERT model)"),Z0o=l(),o1=a("li"),hce=a("strong"),eAo=o("tapas"),oAo=o(" \u2014 "),mD=a("a"),rAo=o("TapasForMaskedLM"),tAo=o(" (TAPAS model)"),aAo=l(),r1=a("li"),pce=a("strong"),nAo=o("wav2vec2"),sAo=o(" \u2014 "),_ce=a("code"),lAo=o("Wav2Vec2ForMaskedLM"),iAo=o(" (Wav2Vec2 model)"),dAo=l(),t1=a("li"),uce=a("strong"),cAo=o("xlm"),fAo=o(" \u2014 "),gD=a("a"),mAo=o("XLMWithLMHeadModel"),gAo=o(" (XLM model)"),hAo=l(),a1=a("li"),bce=a("strong"),pAo=o("xlm-roberta"),_Ao=o(" \u2014 "),hD=a("a"),uAo=o("XLMRobertaForMaskedLM"),bAo=o(" (XLM-RoBERTa model)"),vAo=l(),n1=a("li"),vce=a("strong"),FAo=o("xlm-roberta-xl"),TAo=o(" \u2014 "),pD=a("a"),MAo=o("XLMRobertaXLForMaskedLM"),EAo=o(" (XLM-RoBERTa-XL model)"),CAo=l(),s1=a("li"),Fce=a("strong"),wAo=o("yoso"),AAo=o(" \u2014 "),_D=a("a"),yAo=o("YosoForMaskedLM"),LAo=o(" (YOSO model)"),xAo=l(),l1=a("p"),$Ao=o("The model is set in evaluation mode by default using "),Tce=a("code"),kAo=o("model.eval()"),SAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),RAo=o("model.train()"),PAo=l(),F(i1.$$.fragment),wqe=l(),qi=a("h2"),d1=a("a"),Ece=a("span"),F(lA.$$.fragment),BAo=l(),Cce=a("span"),IAo=o("AutoModelForSeq2SeqLM"),Aqe=l(),So=a("div"),F(iA.$$.fragment),qAo=l(),Ni=a("p"),NAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uD=a("a"),jAo=o("from_pretrained()"),DAo=o(" class method or the "),bD=a("a"),GAo=o("from_config()"),OAo=o(` class
method.`),VAo=l(),dA=a("p"),XAo=o("This class cannot be instantiated directly using "),wce=a("code"),zAo=o("__init__()"),WAo=o(" (throws an error)."),QAo=l(),lt=a("div"),F(cA.$$.fragment),HAo=l(),Ace=a("p"),UAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JAo=l(),ji=a("p"),YAo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),KAo=o("not"),ZAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),eyo=o("from_pretrained()"),oyo=o(" to load the model weights."),ryo=l(),F(c1.$$.fragment),tyo=l(),eo=a("div"),F(fA.$$.fragment),ayo=l(),Lce=a("p"),nyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),syo=l(),Sa=a("p"),lyo=o("The model class to instantiate is selected based on the "),xce=a("code"),iyo=o("model_type"),dyo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),cyo=o("pretrained_model_name_or_path"),fyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),myo=o("pretrained_model_name_or_path"),gyo=o(":"),hyo=l(),he=a("ul"),f1=a("li"),Sce=a("strong"),pyo=o("bart"),_yo=o(" \u2014 "),FD=a("a"),uyo=o("BartForConditionalGeneration"),byo=o(" (BART model)"),vyo=l(),m1=a("li"),Rce=a("strong"),Fyo=o("bigbird_pegasus"),Tyo=o(" \u2014 "),TD=a("a"),Myo=o("BigBirdPegasusForConditionalGeneration"),Eyo=o(" (BigBirdPegasus model)"),Cyo=l(),g1=a("li"),Pce=a("strong"),wyo=o("blenderbot"),Ayo=o(" \u2014 "),MD=a("a"),yyo=o("BlenderbotForConditionalGeneration"),Lyo=o(" (Blenderbot model)"),xyo=l(),h1=a("li"),Bce=a("strong"),$yo=o("blenderbot-small"),kyo=o(" \u2014 "),ED=a("a"),Syo=o("BlenderbotSmallForConditionalGeneration"),Ryo=o(" (BlenderbotSmall model)"),Pyo=l(),p1=a("li"),Ice=a("strong"),Byo=o("encoder-decoder"),Iyo=o(" \u2014 "),CD=a("a"),qyo=o("EncoderDecoderModel"),Nyo=o(" (Encoder decoder model)"),jyo=l(),_1=a("li"),qce=a("strong"),Dyo=o("fsmt"),Gyo=o(" \u2014 "),wD=a("a"),Oyo=o("FSMTForConditionalGeneration"),Vyo=o(" (FairSeq Machine-Translation model)"),Xyo=l(),u1=a("li"),Nce=a("strong"),zyo=o("led"),Wyo=o(" \u2014 "),AD=a("a"),Qyo=o("LEDForConditionalGeneration"),Hyo=o(" (LED model)"),Uyo=l(),b1=a("li"),jce=a("strong"),Jyo=o("longt5"),Yyo=o(" \u2014 "),yD=a("a"),Kyo=o("LongT5ForConditionalGeneration"),Zyo=o(" (LongT5 model)"),eLo=l(),v1=a("li"),Dce=a("strong"),oLo=o("m2m_100"),rLo=o(" \u2014 "),LD=a("a"),tLo=o("M2M100ForConditionalGeneration"),aLo=o(" (M2M100 model)"),nLo=l(),F1=a("li"),Gce=a("strong"),sLo=o("marian"),lLo=o(" \u2014 "),xD=a("a"),iLo=o("MarianMTModel"),dLo=o(" (Marian model)"),cLo=l(),T1=a("li"),Oce=a("strong"),fLo=o("mbart"),mLo=o(" \u2014 "),$D=a("a"),gLo=o("MBartForConditionalGeneration"),hLo=o(" (mBART model)"),pLo=l(),M1=a("li"),Vce=a("strong"),_Lo=o("mt5"),uLo=o(" \u2014 "),kD=a("a"),bLo=o("MT5ForConditionalGeneration"),vLo=o(" (mT5 model)"),FLo=l(),E1=a("li"),Xce=a("strong"),TLo=o("pegasus"),MLo=o(" \u2014 "),SD=a("a"),ELo=o("PegasusForConditionalGeneration"),CLo=o(" (Pegasus model)"),wLo=l(),C1=a("li"),zce=a("strong"),ALo=o("plbart"),yLo=o(" \u2014 "),RD=a("a"),LLo=o("PLBartForConditionalGeneration"),xLo=o(" (PLBart model)"),$Lo=l(),w1=a("li"),Wce=a("strong"),kLo=o("prophetnet"),SLo=o(" \u2014 "),PD=a("a"),RLo=o("ProphetNetForConditionalGeneration"),PLo=o(" (ProphetNet model)"),BLo=l(),A1=a("li"),Qce=a("strong"),ILo=o("t5"),qLo=o(" \u2014 "),BD=a("a"),NLo=o("T5ForConditionalGeneration"),jLo=o(" (T5 model)"),DLo=l(),y1=a("li"),Hce=a("strong"),GLo=o("xlm-prophetnet"),OLo=o(" \u2014 "),ID=a("a"),VLo=o("XLMProphetNetForConditionalGeneration"),XLo=o(" (XLMProphetNet model)"),zLo=l(),L1=a("p"),WLo=o("The model is set in evaluation mode by default using "),Uce=a("code"),QLo=o("model.eval()"),HLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=a("code"),ULo=o("model.train()"),JLo=l(),F(x1.$$.fragment),yqe=l(),Di=a("h2"),$1=a("a"),Yce=a("span"),F(mA.$$.fragment),YLo=l(),Kce=a("span"),KLo=o("AutoModelForSequenceClassification"),Lqe=l(),Ro=a("div"),F(gA.$$.fragment),ZLo=l(),Gi=a("p"),e8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=a("a"),o8o=o("from_pretrained()"),r8o=o(" class method or the "),ND=a("a"),t8o=o("from_config()"),a8o=o(` class
method.`),n8o=l(),hA=a("p"),s8o=o("This class cannot be instantiated directly using "),Zce=a("code"),l8o=o("__init__()"),i8o=o(" (throws an error)."),d8o=l(),it=a("div"),F(pA.$$.fragment),c8o=l(),efe=a("p"),f8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m8o=l(),Oi=a("p"),g8o=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),h8o=o("not"),p8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),_8o=o("from_pretrained()"),u8o=o(" to load the model weights."),b8o=l(),F(k1.$$.fragment),v8o=l(),oo=a("div"),F(_A.$$.fragment),F8o=l(),rfe=a("p"),T8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M8o=l(),Ra=a("p"),E8o=o("The model class to instantiate is selected based on the "),tfe=a("code"),C8o=o("model_type"),w8o=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),A8o=o("pretrained_model_name_or_path"),y8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),L8o=o("pretrained_model_name_or_path"),x8o=o(":"),$8o=l(),q=a("ul"),S1=a("li"),sfe=a("strong"),k8o=o("albert"),S8o=o(" \u2014 "),DD=a("a"),R8o=o("AlbertForSequenceClassification"),P8o=o(" (ALBERT model)"),B8o=l(),R1=a("li"),lfe=a("strong"),I8o=o("bart"),q8o=o(" \u2014 "),GD=a("a"),N8o=o("BartForSequenceClassification"),j8o=o(" (BART model)"),D8o=l(),P1=a("li"),ife=a("strong"),G8o=o("bert"),O8o=o(" \u2014 "),OD=a("a"),V8o=o("BertForSequenceClassification"),X8o=o(" (BERT model)"),z8o=l(),B1=a("li"),dfe=a("strong"),W8o=o("big_bird"),Q8o=o(" \u2014 "),VD=a("a"),H8o=o("BigBirdForSequenceClassification"),U8o=o(" (BigBird model)"),J8o=l(),I1=a("li"),cfe=a("strong"),Y8o=o("bigbird_pegasus"),K8o=o(" \u2014 "),XD=a("a"),Z8o=o("BigBirdPegasusForSequenceClassification"),exo=o(" (BigBirdPegasus model)"),oxo=l(),q1=a("li"),ffe=a("strong"),rxo=o("camembert"),txo=o(" \u2014 "),zD=a("a"),axo=o("CamembertForSequenceClassification"),nxo=o(" (CamemBERT model)"),sxo=l(),N1=a("li"),mfe=a("strong"),lxo=o("canine"),ixo=o(" \u2014 "),WD=a("a"),dxo=o("CanineForSequenceClassification"),cxo=o(" (Canine model)"),fxo=l(),j1=a("li"),gfe=a("strong"),mxo=o("convbert"),gxo=o(" \u2014 "),QD=a("a"),hxo=o("ConvBertForSequenceClassification"),pxo=o(" (ConvBERT model)"),_xo=l(),D1=a("li"),hfe=a("strong"),uxo=o("ctrl"),bxo=o(" \u2014 "),HD=a("a"),vxo=o("CTRLForSequenceClassification"),Fxo=o(" (CTRL model)"),Txo=l(),G1=a("li"),pfe=a("strong"),Mxo=o("data2vec-text"),Exo=o(" \u2014 "),UD=a("a"),Cxo=o("Data2VecTextForSequenceClassification"),wxo=o(" (Data2VecText model)"),Axo=l(),O1=a("li"),_fe=a("strong"),yxo=o("deberta"),Lxo=o(" \u2014 "),JD=a("a"),xxo=o("DebertaForSequenceClassification"),$xo=o(" (DeBERTa model)"),kxo=l(),V1=a("li"),ufe=a("strong"),Sxo=o("deberta-v2"),Rxo=o(" \u2014 "),YD=a("a"),Pxo=o("DebertaV2ForSequenceClassification"),Bxo=o(" (DeBERTa-v2 model)"),Ixo=l(),X1=a("li"),bfe=a("strong"),qxo=o("distilbert"),Nxo=o(" \u2014 "),KD=a("a"),jxo=o("DistilBertForSequenceClassification"),Dxo=o(" (DistilBERT model)"),Gxo=l(),z1=a("li"),vfe=a("strong"),Oxo=o("electra"),Vxo=o(" \u2014 "),ZD=a("a"),Xxo=o("ElectraForSequenceClassification"),zxo=o(" (ELECTRA model)"),Wxo=l(),W1=a("li"),Ffe=a("strong"),Qxo=o("flaubert"),Hxo=o(" \u2014 "),eG=a("a"),Uxo=o("FlaubertForSequenceClassification"),Jxo=o(" (FlauBERT model)"),Yxo=l(),Q1=a("li"),Tfe=a("strong"),Kxo=o("fnet"),Zxo=o(" \u2014 "),oG=a("a"),e$o=o("FNetForSequenceClassification"),o$o=o(" (FNet model)"),r$o=l(),H1=a("li"),Mfe=a("strong"),t$o=o("funnel"),a$o=o(" \u2014 "),rG=a("a"),n$o=o("FunnelForSequenceClassification"),s$o=o(" (Funnel Transformer model)"),l$o=l(),U1=a("li"),Efe=a("strong"),i$o=o("gpt2"),d$o=o(" \u2014 "),tG=a("a"),c$o=o("GPT2ForSequenceClassification"),f$o=o(" (OpenAI GPT-2 model)"),m$o=l(),J1=a("li"),Cfe=a("strong"),g$o=o("gpt_neo"),h$o=o(" \u2014 "),aG=a("a"),p$o=o("GPTNeoForSequenceClassification"),_$o=o(" (GPT Neo model)"),u$o=l(),Y1=a("li"),wfe=a("strong"),b$o=o("gptj"),v$o=o(" \u2014 "),nG=a("a"),F$o=o("GPTJForSequenceClassification"),T$o=o(" (GPT-J model)"),M$o=l(),K1=a("li"),Afe=a("strong"),E$o=o("ibert"),C$o=o(" \u2014 "),sG=a("a"),w$o=o("IBertForSequenceClassification"),A$o=o(" (I-BERT model)"),y$o=l(),Z1=a("li"),yfe=a("strong"),L$o=o("layoutlm"),x$o=o(" \u2014 "),lG=a("a"),$$o=o("LayoutLMForSequenceClassification"),k$o=o(" (LayoutLM model)"),S$o=l(),eb=a("li"),Lfe=a("strong"),R$o=o("layoutlmv2"),P$o=o(" \u2014 "),iG=a("a"),B$o=o("LayoutLMv2ForSequenceClassification"),I$o=o(" (LayoutLMv2 model)"),q$o=l(),ob=a("li"),xfe=a("strong"),N$o=o("led"),j$o=o(" \u2014 "),dG=a("a"),D$o=o("LEDForSequenceClassification"),G$o=o(" (LED model)"),O$o=l(),rb=a("li"),$fe=a("strong"),V$o=o("longformer"),X$o=o(" \u2014 "),cG=a("a"),z$o=o("LongformerForSequenceClassification"),W$o=o(" (Longformer model)"),Q$o=l(),tb=a("li"),kfe=a("strong"),H$o=o("mbart"),U$o=o(" \u2014 "),fG=a("a"),J$o=o("MBartForSequenceClassification"),Y$o=o(" (mBART model)"),K$o=l(),ab=a("li"),Sfe=a("strong"),Z$o=o("megatron-bert"),eko=o(" \u2014 "),mG=a("a"),oko=o("MegatronBertForSequenceClassification"),rko=o(" (MegatronBert model)"),tko=l(),nb=a("li"),Rfe=a("strong"),ako=o("mobilebert"),nko=o(" \u2014 "),gG=a("a"),sko=o("MobileBertForSequenceClassification"),lko=o(" (MobileBERT model)"),iko=l(),sb=a("li"),Pfe=a("strong"),dko=o("mpnet"),cko=o(" \u2014 "),hG=a("a"),fko=o("MPNetForSequenceClassification"),mko=o(" (MPNet model)"),gko=l(),lb=a("li"),Bfe=a("strong"),hko=o("nystromformer"),pko=o(" \u2014 "),pG=a("a"),_ko=o("NystromformerForSequenceClassification"),uko=o(" (Nystromformer model)"),bko=l(),ib=a("li"),Ife=a("strong"),vko=o("openai-gpt"),Fko=o(" \u2014 "),_G=a("a"),Tko=o("OpenAIGPTForSequenceClassification"),Mko=o(" (OpenAI GPT model)"),Eko=l(),db=a("li"),qfe=a("strong"),Cko=o("perceiver"),wko=o(" \u2014 "),uG=a("a"),Ako=o("PerceiverForSequenceClassification"),yko=o(" (Perceiver model)"),Lko=l(),cb=a("li"),Nfe=a("strong"),xko=o("plbart"),$ko=o(" \u2014 "),bG=a("a"),kko=o("PLBartForSequenceClassification"),Sko=o(" (PLBart model)"),Rko=l(),fb=a("li"),jfe=a("strong"),Pko=o("qdqbert"),Bko=o(" \u2014 "),vG=a("a"),Iko=o("QDQBertForSequenceClassification"),qko=o(" (QDQBert model)"),Nko=l(),mb=a("li"),Dfe=a("strong"),jko=o("reformer"),Dko=o(" \u2014 "),FG=a("a"),Gko=o("ReformerForSequenceClassification"),Oko=o(" (Reformer model)"),Vko=l(),gb=a("li"),Gfe=a("strong"),Xko=o("rembert"),zko=o(" \u2014 "),TG=a("a"),Wko=o("RemBertForSequenceClassification"),Qko=o(" (RemBERT model)"),Hko=l(),hb=a("li"),Ofe=a("strong"),Uko=o("roberta"),Jko=o(" \u2014 "),MG=a("a"),Yko=o("RobertaForSequenceClassification"),Kko=o(" (RoBERTa model)"),Zko=l(),pb=a("li"),Vfe=a("strong"),eSo=o("roformer"),oSo=o(" \u2014 "),EG=a("a"),rSo=o("RoFormerForSequenceClassification"),tSo=o(" (RoFormer model)"),aSo=l(),_b=a("li"),Xfe=a("strong"),nSo=o("squeezebert"),sSo=o(" \u2014 "),CG=a("a"),lSo=o("SqueezeBertForSequenceClassification"),iSo=o(" (SqueezeBERT model)"),dSo=l(),ub=a("li"),zfe=a("strong"),cSo=o("tapas"),fSo=o(" \u2014 "),wG=a("a"),mSo=o("TapasForSequenceClassification"),gSo=o(" (TAPAS model)"),hSo=l(),bb=a("li"),Wfe=a("strong"),pSo=o("transfo-xl"),_So=o(" \u2014 "),AG=a("a"),uSo=o("TransfoXLForSequenceClassification"),bSo=o(" (Transformer-XL model)"),vSo=l(),vb=a("li"),Qfe=a("strong"),FSo=o("xlm"),TSo=o(" \u2014 "),yG=a("a"),MSo=o("XLMForSequenceClassification"),ESo=o(" (XLM model)"),CSo=l(),Fb=a("li"),Hfe=a("strong"),wSo=o("xlm-roberta"),ASo=o(" \u2014 "),LG=a("a"),ySo=o("XLMRobertaForSequenceClassification"),LSo=o(" (XLM-RoBERTa model)"),xSo=l(),Tb=a("li"),Ufe=a("strong"),$So=o("xlm-roberta-xl"),kSo=o(" \u2014 "),xG=a("a"),SSo=o("XLMRobertaXLForSequenceClassification"),RSo=o(" (XLM-RoBERTa-XL model)"),PSo=l(),Mb=a("li"),Jfe=a("strong"),BSo=o("xlnet"),ISo=o(" \u2014 "),$G=a("a"),qSo=o("XLNetForSequenceClassification"),NSo=o(" (XLNet model)"),jSo=l(),Eb=a("li"),Yfe=a("strong"),DSo=o("yoso"),GSo=o(" \u2014 "),kG=a("a"),OSo=o("YosoForSequenceClassification"),VSo=o(" (YOSO model)"),XSo=l(),Cb=a("p"),zSo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),WSo=o("model.eval()"),QSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),HSo=o("model.train()"),USo=l(),F(wb.$$.fragment),xqe=l(),Vi=a("h2"),Ab=a("a"),eme=a("span"),F(uA.$$.fragment),JSo=l(),ome=a("span"),YSo=o("AutoModelForMultipleChoice"),$qe=l(),Po=a("div"),F(bA.$$.fragment),KSo=l(),Xi=a("p"),ZSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=a("a"),eRo=o("from_pretrained()"),oRo=o(" class method or the "),RG=a("a"),rRo=o("from_config()"),tRo=o(` class
method.`),aRo=l(),vA=a("p"),nRo=o("This class cannot be instantiated directly using "),rme=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),dt=a("div"),F(FA.$$.fragment),dRo=l(),tme=a("p"),cRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fRo=l(),zi=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),pRo=o("from_pretrained()"),_Ro=o(" to load the model weights."),uRo=l(),F(yb.$$.fragment),bRo=l(),ro=a("div"),F(TA.$$.fragment),vRo=l(),nme=a("p"),FRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TRo=l(),Pa=a("p"),MRo=o("The model class to instantiate is selected based on the "),sme=a("code"),ERo=o("model_type"),CRo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),yRo=o("pretrained_model_name_or_path"),LRo=o(":"),xRo=l(),Y=a("ul"),Lb=a("li"),dme=a("strong"),$Ro=o("albert"),kRo=o(" \u2014 "),BG=a("a"),SRo=o("AlbertForMultipleChoice"),RRo=o(" (ALBERT model)"),PRo=l(),xb=a("li"),cme=a("strong"),BRo=o("bert"),IRo=o(" \u2014 "),IG=a("a"),qRo=o("BertForMultipleChoice"),NRo=o(" (BERT model)"),jRo=l(),$b=a("li"),fme=a("strong"),DRo=o("big_bird"),GRo=o(" \u2014 "),qG=a("a"),ORo=o("BigBirdForMultipleChoice"),VRo=o(" (BigBird model)"),XRo=l(),kb=a("li"),mme=a("strong"),zRo=o("camembert"),WRo=o(" \u2014 "),NG=a("a"),QRo=o("CamembertForMultipleChoice"),HRo=o(" (CamemBERT model)"),URo=l(),Sb=a("li"),gme=a("strong"),JRo=o("canine"),YRo=o(" \u2014 "),jG=a("a"),KRo=o("CanineForMultipleChoice"),ZRo=o(" (Canine model)"),ePo=l(),Rb=a("li"),hme=a("strong"),oPo=o("convbert"),rPo=o(" \u2014 "),DG=a("a"),tPo=o("ConvBertForMultipleChoice"),aPo=o(" (ConvBERT model)"),nPo=l(),Pb=a("li"),pme=a("strong"),sPo=o("data2vec-text"),lPo=o(" \u2014 "),GG=a("a"),iPo=o("Data2VecTextForMultipleChoice"),dPo=o(" (Data2VecText model)"),cPo=l(),Bb=a("li"),_me=a("strong"),fPo=o("deberta-v2"),mPo=o(" \u2014 "),OG=a("a"),gPo=o("DebertaV2ForMultipleChoice"),hPo=o(" (DeBERTa-v2 model)"),pPo=l(),Ib=a("li"),ume=a("strong"),_Po=o("distilbert"),uPo=o(" \u2014 "),VG=a("a"),bPo=o("DistilBertForMultipleChoice"),vPo=o(" (DistilBERT model)"),FPo=l(),qb=a("li"),bme=a("strong"),TPo=o("electra"),MPo=o(" \u2014 "),XG=a("a"),EPo=o("ElectraForMultipleChoice"),CPo=o(" (ELECTRA model)"),wPo=l(),Nb=a("li"),vme=a("strong"),APo=o("flaubert"),yPo=o(" \u2014 "),zG=a("a"),LPo=o("FlaubertForMultipleChoice"),xPo=o(" (FlauBERT model)"),$Po=l(),jb=a("li"),Fme=a("strong"),kPo=o("fnet"),SPo=o(" \u2014 "),WG=a("a"),RPo=o("FNetForMultipleChoice"),PPo=o(" (FNet model)"),BPo=l(),Db=a("li"),Tme=a("strong"),IPo=o("funnel"),qPo=o(" \u2014 "),QG=a("a"),NPo=o("FunnelForMultipleChoice"),jPo=o(" (Funnel Transformer model)"),DPo=l(),Gb=a("li"),Mme=a("strong"),GPo=o("ibert"),OPo=o(" \u2014 "),HG=a("a"),VPo=o("IBertForMultipleChoice"),XPo=o(" (I-BERT model)"),zPo=l(),Ob=a("li"),Eme=a("strong"),WPo=o("longformer"),QPo=o(" \u2014 "),UG=a("a"),HPo=o("LongformerForMultipleChoice"),UPo=o(" (Longformer model)"),JPo=l(),Vb=a("li"),Cme=a("strong"),YPo=o("megatron-bert"),KPo=o(" \u2014 "),JG=a("a"),ZPo=o("MegatronBertForMultipleChoice"),eBo=o(" (MegatronBert model)"),oBo=l(),Xb=a("li"),wme=a("strong"),rBo=o("mobilebert"),tBo=o(" \u2014 "),YG=a("a"),aBo=o("MobileBertForMultipleChoice"),nBo=o(" (MobileBERT model)"),sBo=l(),zb=a("li"),Ame=a("strong"),lBo=o("mpnet"),iBo=o(" \u2014 "),KG=a("a"),dBo=o("MPNetForMultipleChoice"),cBo=o(" (MPNet model)"),fBo=l(),Wb=a("li"),yme=a("strong"),mBo=o("nystromformer"),gBo=o(" \u2014 "),ZG=a("a"),hBo=o("NystromformerForMultipleChoice"),pBo=o(" (Nystromformer model)"),_Bo=l(),Qb=a("li"),Lme=a("strong"),uBo=o("qdqbert"),bBo=o(" \u2014 "),eO=a("a"),vBo=o("QDQBertForMultipleChoice"),FBo=o(" (QDQBert model)"),TBo=l(),Hb=a("li"),xme=a("strong"),MBo=o("rembert"),EBo=o(" \u2014 "),oO=a("a"),CBo=o("RemBertForMultipleChoice"),wBo=o(" (RemBERT model)"),ABo=l(),Ub=a("li"),$me=a("strong"),yBo=o("roberta"),LBo=o(" \u2014 "),rO=a("a"),xBo=o("RobertaForMultipleChoice"),$Bo=o(" (RoBERTa model)"),kBo=l(),Jb=a("li"),kme=a("strong"),SBo=o("roformer"),RBo=o(" \u2014 "),tO=a("a"),PBo=o("RoFormerForMultipleChoice"),BBo=o(" (RoFormer model)"),IBo=l(),Yb=a("li"),Sme=a("strong"),qBo=o("squeezebert"),NBo=o(" \u2014 "),aO=a("a"),jBo=o("SqueezeBertForMultipleChoice"),DBo=o(" (SqueezeBERT model)"),GBo=l(),Kb=a("li"),Rme=a("strong"),OBo=o("xlm"),VBo=o(" \u2014 "),nO=a("a"),XBo=o("XLMForMultipleChoice"),zBo=o(" (XLM model)"),WBo=l(),Zb=a("li"),Pme=a("strong"),QBo=o("xlm-roberta"),HBo=o(" \u2014 "),sO=a("a"),UBo=o("XLMRobertaForMultipleChoice"),JBo=o(" (XLM-RoBERTa model)"),YBo=l(),ev=a("li"),Bme=a("strong"),KBo=o("xlm-roberta-xl"),ZBo=o(" \u2014 "),lO=a("a"),eIo=o("XLMRobertaXLForMultipleChoice"),oIo=o(" (XLM-RoBERTa-XL model)"),rIo=l(),ov=a("li"),Ime=a("strong"),tIo=o("xlnet"),aIo=o(" \u2014 "),iO=a("a"),nIo=o("XLNetForMultipleChoice"),sIo=o(" (XLNet model)"),lIo=l(),rv=a("li"),qme=a("strong"),iIo=o("yoso"),dIo=o(" \u2014 "),dO=a("a"),cIo=o("YosoForMultipleChoice"),fIo=o(" (YOSO model)"),mIo=l(),tv=a("p"),gIo=o("The model is set in evaluation mode by default using "),Nme=a("code"),hIo=o("model.eval()"),pIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),_Io=o("model.train()"),uIo=l(),F(av.$$.fragment),kqe=l(),Wi=a("h2"),nv=a("a"),Dme=a("span"),F(MA.$$.fragment),bIo=l(),Gme=a("span"),vIo=o("AutoModelForNextSentencePrediction"),Sqe=l(),Bo=a("div"),F(EA.$$.fragment),FIo=l(),Qi=a("p"),TIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=a("a"),MIo=o("from_pretrained()"),EIo=o(" class method or the "),fO=a("a"),CIo=o("from_config()"),wIo=o(` class
method.`),AIo=l(),CA=a("p"),yIo=o("This class cannot be instantiated directly using "),Ome=a("code"),LIo=o("__init__()"),xIo=o(" (throws an error)."),$Io=l(),ct=a("div"),F(wA.$$.fragment),kIo=l(),Vme=a("p"),SIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RIo=l(),Hi=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),BIo=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),qIo=o("from_pretrained()"),NIo=o(" to load the model weights."),jIo=l(),F(sv.$$.fragment),DIo=l(),to=a("div"),F(AA.$$.fragment),GIo=l(),zme=a("p"),OIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VIo=l(),Ba=a("p"),XIo=o("The model class to instantiate is selected based on the "),Wme=a("code"),zIo=o("model_type"),WIo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),QIo=o("pretrained_model_name_or_path"),HIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(":"),YIo=l(),Yr=a("ul"),lv=a("li"),Ume=a("strong"),KIo=o("bert"),ZIo=o(" \u2014 "),gO=a("a"),eqo=o("BertForNextSentencePrediction"),oqo=o(" (BERT model)"),rqo=l(),iv=a("li"),Jme=a("strong"),tqo=o("fnet"),aqo=o(" \u2014 "),hO=a("a"),nqo=o("FNetForNextSentencePrediction"),sqo=o(" (FNet model)"),lqo=l(),dv=a("li"),Yme=a("strong"),iqo=o("megatron-bert"),dqo=o(" \u2014 "),pO=a("a"),cqo=o("MegatronBertForNextSentencePrediction"),fqo=o(" (MegatronBert model)"),mqo=l(),cv=a("li"),Kme=a("strong"),gqo=o("mobilebert"),hqo=o(" \u2014 "),_O=a("a"),pqo=o("MobileBertForNextSentencePrediction"),_qo=o(" (MobileBERT model)"),uqo=l(),fv=a("li"),Zme=a("strong"),bqo=o("qdqbert"),vqo=o(" \u2014 "),uO=a("a"),Fqo=o("QDQBertForNextSentencePrediction"),Tqo=o(" (QDQBert model)"),Mqo=l(),mv=a("p"),Eqo=o("The model is set in evaluation mode by default using "),ege=a("code"),Cqo=o("model.eval()"),wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),Aqo=o("model.train()"),yqo=l(),F(gv.$$.fragment),Rqe=l(),Ui=a("h2"),hv=a("a"),rge=a("span"),F(yA.$$.fragment),Lqo=l(),tge=a("span"),xqo=o("AutoModelForTokenClassification"),Pqe=l(),Io=a("div"),F(LA.$$.fragment),$qo=l(),Ji=a("p"),kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" class method or the "),vO=a("a"),Pqo=o("from_config()"),Bqo=o(` class
method.`),Iqo=l(),xA=a("p"),qqo=o("This class cannot be instantiated directly using "),age=a("code"),Nqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),ft=a("div"),F($A.$$.fragment),Gqo=l(),nge=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vqo=l(),Yi=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),zqo=o("not"),Wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" to load the model weights."),Uqo=l(),F(pv.$$.fragment),Jqo=l(),ao=a("div"),F(kA.$$.fragment),Yqo=l(),lge=a("p"),Kqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zqo=l(),Ia=a("p"),eNo=o("The model class to instantiate is selected based on the "),ige=a("code"),oNo=o("model_type"),rNo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),tNo=o("pretrained_model_name_or_path"),aNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(":"),lNo=l(),U=a("ul"),_v=a("li"),fge=a("strong"),iNo=o("albert"),dNo=o(" \u2014 "),TO=a("a"),cNo=o("AlbertForTokenClassification"),fNo=o(" (ALBERT model)"),mNo=l(),uv=a("li"),mge=a("strong"),gNo=o("bert"),hNo=o(" \u2014 "),MO=a("a"),pNo=o("BertForTokenClassification"),_No=o(" (BERT model)"),uNo=l(),bv=a("li"),gge=a("strong"),bNo=o("big_bird"),vNo=o(" \u2014 "),EO=a("a"),FNo=o("BigBirdForTokenClassification"),TNo=o(" (BigBird model)"),MNo=l(),vv=a("li"),hge=a("strong"),ENo=o("camembert"),CNo=o(" \u2014 "),CO=a("a"),wNo=o("CamembertForTokenClassification"),ANo=o(" (CamemBERT model)"),yNo=l(),Fv=a("li"),pge=a("strong"),LNo=o("canine"),xNo=o(" \u2014 "),wO=a("a"),$No=o("CanineForTokenClassification"),kNo=o(" (Canine model)"),SNo=l(),Tv=a("li"),_ge=a("strong"),RNo=o("convbert"),PNo=o(" \u2014 "),AO=a("a"),BNo=o("ConvBertForTokenClassification"),INo=o(" (ConvBERT model)"),qNo=l(),Mv=a("li"),uge=a("strong"),NNo=o("data2vec-text"),jNo=o(" \u2014 "),yO=a("a"),DNo=o("Data2VecTextForTokenClassification"),GNo=o(" (Data2VecText model)"),ONo=l(),Ev=a("li"),bge=a("strong"),VNo=o("deberta"),XNo=o(" \u2014 "),LO=a("a"),zNo=o("DebertaForTokenClassification"),WNo=o(" (DeBERTa model)"),QNo=l(),Cv=a("li"),vge=a("strong"),HNo=o("deberta-v2"),UNo=o(" \u2014 "),xO=a("a"),JNo=o("DebertaV2ForTokenClassification"),YNo=o(" (DeBERTa-v2 model)"),KNo=l(),wv=a("li"),Fge=a("strong"),ZNo=o("distilbert"),ejo=o(" \u2014 "),$O=a("a"),ojo=o("DistilBertForTokenClassification"),rjo=o(" (DistilBERT model)"),tjo=l(),Av=a("li"),Tge=a("strong"),ajo=o("electra"),njo=o(" \u2014 "),kO=a("a"),sjo=o("ElectraForTokenClassification"),ljo=o(" (ELECTRA model)"),ijo=l(),yv=a("li"),Mge=a("strong"),djo=o("flaubert"),cjo=o(" \u2014 "),SO=a("a"),fjo=o("FlaubertForTokenClassification"),mjo=o(" (FlauBERT model)"),gjo=l(),Lv=a("li"),Ege=a("strong"),hjo=o("fnet"),pjo=o(" \u2014 "),RO=a("a"),_jo=o("FNetForTokenClassification"),ujo=o(" (FNet model)"),bjo=l(),xv=a("li"),Cge=a("strong"),vjo=o("funnel"),Fjo=o(" \u2014 "),PO=a("a"),Tjo=o("FunnelForTokenClassification"),Mjo=o(" (Funnel Transformer model)"),Ejo=l(),$v=a("li"),wge=a("strong"),Cjo=o("gpt2"),wjo=o(" \u2014 "),BO=a("a"),Ajo=o("GPT2ForTokenClassification"),yjo=o(" (OpenAI GPT-2 model)"),Ljo=l(),kv=a("li"),Age=a("strong"),xjo=o("ibert"),$jo=o(" \u2014 "),IO=a("a"),kjo=o("IBertForTokenClassification"),Sjo=o(" (I-BERT model)"),Rjo=l(),Sv=a("li"),yge=a("strong"),Pjo=o("layoutlm"),Bjo=o(" \u2014 "),qO=a("a"),Ijo=o("LayoutLMForTokenClassification"),qjo=o(" (LayoutLM model)"),Njo=l(),Rv=a("li"),Lge=a("strong"),jjo=o("layoutlmv2"),Djo=o(" \u2014 "),NO=a("a"),Gjo=o("LayoutLMv2ForTokenClassification"),Ojo=o(" (LayoutLMv2 model)"),Vjo=l(),Pv=a("li"),xge=a("strong"),Xjo=o("longformer"),zjo=o(" \u2014 "),jO=a("a"),Wjo=o("LongformerForTokenClassification"),Qjo=o(" (Longformer model)"),Hjo=l(),Bv=a("li"),$ge=a("strong"),Ujo=o("megatron-bert"),Jjo=o(" \u2014 "),DO=a("a"),Yjo=o("MegatronBertForTokenClassification"),Kjo=o(" (MegatronBert model)"),Zjo=l(),Iv=a("li"),kge=a("strong"),eDo=o("mobilebert"),oDo=o(" \u2014 "),GO=a("a"),rDo=o("MobileBertForTokenClassification"),tDo=o(" (MobileBERT model)"),aDo=l(),qv=a("li"),Sge=a("strong"),nDo=o("mpnet"),sDo=o(" \u2014 "),OO=a("a"),lDo=o("MPNetForTokenClassification"),iDo=o(" (MPNet model)"),dDo=l(),Nv=a("li"),Rge=a("strong"),cDo=o("nystromformer"),fDo=o(" \u2014 "),VO=a("a"),mDo=o("NystromformerForTokenClassification"),gDo=o(" (Nystromformer model)"),hDo=l(),jv=a("li"),Pge=a("strong"),pDo=o("qdqbert"),_Do=o(" \u2014 "),XO=a("a"),uDo=o("QDQBertForTokenClassification"),bDo=o(" (QDQBert model)"),vDo=l(),Dv=a("li"),Bge=a("strong"),FDo=o("rembert"),TDo=o(" \u2014 "),zO=a("a"),MDo=o("RemBertForTokenClassification"),EDo=o(" (RemBERT model)"),CDo=l(),Gv=a("li"),Ige=a("strong"),wDo=o("roberta"),ADo=o(" \u2014 "),WO=a("a"),yDo=o("RobertaForTokenClassification"),LDo=o(" (RoBERTa model)"),xDo=l(),Ov=a("li"),qge=a("strong"),$Do=o("roformer"),kDo=o(" \u2014 "),QO=a("a"),SDo=o("RoFormerForTokenClassification"),RDo=o(" (RoFormer model)"),PDo=l(),Vv=a("li"),Nge=a("strong"),BDo=o("squeezebert"),IDo=o(" \u2014 "),HO=a("a"),qDo=o("SqueezeBertForTokenClassification"),NDo=o(" (SqueezeBERT model)"),jDo=l(),Xv=a("li"),jge=a("strong"),DDo=o("xlm"),GDo=o(" \u2014 "),UO=a("a"),ODo=o("XLMForTokenClassification"),VDo=o(" (XLM model)"),XDo=l(),zv=a("li"),Dge=a("strong"),zDo=o("xlm-roberta"),WDo=o(" \u2014 "),JO=a("a"),QDo=o("XLMRobertaForTokenClassification"),HDo=o(" (XLM-RoBERTa model)"),UDo=l(),Wv=a("li"),Gge=a("strong"),JDo=o("xlm-roberta-xl"),YDo=o(" \u2014 "),YO=a("a"),KDo=o("XLMRobertaXLForTokenClassification"),ZDo=o(" (XLM-RoBERTa-XL model)"),eGo=l(),Qv=a("li"),Oge=a("strong"),oGo=o("xlnet"),rGo=o(" \u2014 "),KO=a("a"),tGo=o("XLNetForTokenClassification"),aGo=o(" (XLNet model)"),nGo=l(),Hv=a("li"),Vge=a("strong"),sGo=o("yoso"),lGo=o(" \u2014 "),ZO=a("a"),iGo=o("YosoForTokenClassification"),dGo=o(" (YOSO model)"),cGo=l(),Uv=a("p"),fGo=o("The model is set in evaluation mode by default using "),Xge=a("code"),mGo=o("model.eval()"),gGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),hGo=o("model.train()"),pGo=l(),F(Jv.$$.fragment),Bqe=l(),Ki=a("h2"),Yv=a("a"),Wge=a("span"),F(SA.$$.fragment),_Go=l(),Qge=a("span"),uGo=o("AutoModelForQuestionAnswering"),Iqe=l(),qo=a("div"),F(RA.$$.fragment),bGo=l(),Zi=a("p"),vGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=a("a"),FGo=o("from_pretrained()"),TGo=o(" class method or the "),oV=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),PA=a("p"),wGo=o("This class cannot be instantiated directly using "),Hge=a("code"),AGo=o("__init__()"),yGo=o(" (throws an error)."),LGo=l(),mt=a("div"),F(BA.$$.fragment),xGo=l(),Uge=a("p"),$Go=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kGo=l(),ed=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),RGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),BGo=o("from_pretrained()"),IGo=o(" to load the model weights."),qGo=l(),F(Kv.$$.fragment),NGo=l(),no=a("div"),F(IA.$$.fragment),jGo=l(),Yge=a("p"),DGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GGo=l(),qa=a("p"),OGo=o("The model class to instantiate is selected based on the "),Kge=a("code"),VGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),zGo=o("pretrained_model_name_or_path"),WGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),QGo=o("pretrained_model_name_or_path"),HGo=o(":"),UGo=l(),V=a("ul"),Zv=a("li"),ohe=a("strong"),JGo=o("albert"),YGo=o(" \u2014 "),tV=a("a"),KGo=o("AlbertForQuestionAnswering"),ZGo=o(" (ALBERT model)"),eOo=l(),eF=a("li"),rhe=a("strong"),oOo=o("bart"),rOo=o(" \u2014 "),aV=a("a"),tOo=o("BartForQuestionAnswering"),aOo=o(" (BART model)"),nOo=l(),oF=a("li"),the=a("strong"),sOo=o("bert"),lOo=o(" \u2014 "),nV=a("a"),iOo=o("BertForQuestionAnswering"),dOo=o(" (BERT model)"),cOo=l(),rF=a("li"),ahe=a("strong"),fOo=o("big_bird"),mOo=o(" \u2014 "),sV=a("a"),gOo=o("BigBirdForQuestionAnswering"),hOo=o(" (BigBird model)"),pOo=l(),tF=a("li"),nhe=a("strong"),_Oo=o("bigbird_pegasus"),uOo=o(" \u2014 "),lV=a("a"),bOo=o("BigBirdPegasusForQuestionAnswering"),vOo=o(" (BigBirdPegasus model)"),FOo=l(),aF=a("li"),she=a("strong"),TOo=o("camembert"),MOo=o(" \u2014 "),iV=a("a"),EOo=o("CamembertForQuestionAnswering"),COo=o(" (CamemBERT model)"),wOo=l(),nF=a("li"),lhe=a("strong"),AOo=o("canine"),yOo=o(" \u2014 "),dV=a("a"),LOo=o("CanineForQuestionAnswering"),xOo=o(" (Canine model)"),$Oo=l(),sF=a("li"),ihe=a("strong"),kOo=o("convbert"),SOo=o(" \u2014 "),cV=a("a"),ROo=o("ConvBertForQuestionAnswering"),POo=o(" (ConvBERT model)"),BOo=l(),lF=a("li"),dhe=a("strong"),IOo=o("data2vec-text"),qOo=o(" \u2014 "),fV=a("a"),NOo=o("Data2VecTextForQuestionAnswering"),jOo=o(" (Data2VecText model)"),DOo=l(),iF=a("li"),che=a("strong"),GOo=o("deberta"),OOo=o(" \u2014 "),mV=a("a"),VOo=o("DebertaForQuestionAnswering"),XOo=o(" (DeBERTa model)"),zOo=l(),dF=a("li"),fhe=a("strong"),WOo=o("deberta-v2"),QOo=o(" \u2014 "),gV=a("a"),HOo=o("DebertaV2ForQuestionAnswering"),UOo=o(" (DeBERTa-v2 model)"),JOo=l(),cF=a("li"),mhe=a("strong"),YOo=o("distilbert"),KOo=o(" \u2014 "),hV=a("a"),ZOo=o("DistilBertForQuestionAnswering"),eVo=o(" (DistilBERT model)"),oVo=l(),fF=a("li"),ghe=a("strong"),rVo=o("electra"),tVo=o(" \u2014 "),pV=a("a"),aVo=o("ElectraForQuestionAnswering"),nVo=o(" (ELECTRA model)"),sVo=l(),mF=a("li"),hhe=a("strong"),lVo=o("flaubert"),iVo=o(" \u2014 "),_V=a("a"),dVo=o("FlaubertForQuestionAnsweringSimple"),cVo=o(" (FlauBERT model)"),fVo=l(),gF=a("li"),phe=a("strong"),mVo=o("fnet"),gVo=o(" \u2014 "),uV=a("a"),hVo=o("FNetForQuestionAnswering"),pVo=o(" (FNet model)"),_Vo=l(),hF=a("li"),_he=a("strong"),uVo=o("funnel"),bVo=o(" \u2014 "),bV=a("a"),vVo=o("FunnelForQuestionAnswering"),FVo=o(" (Funnel Transformer model)"),TVo=l(),pF=a("li"),uhe=a("strong"),MVo=o("gptj"),EVo=o(" \u2014 "),vV=a("a"),CVo=o("GPTJForQuestionAnswering"),wVo=o(" (GPT-J model)"),AVo=l(),_F=a("li"),bhe=a("strong"),yVo=o("ibert"),LVo=o(" \u2014 "),FV=a("a"),xVo=o("IBertForQuestionAnswering"),$Vo=o(" (I-BERT model)"),kVo=l(),uF=a("li"),vhe=a("strong"),SVo=o("layoutlmv2"),RVo=o(" \u2014 "),TV=a("a"),PVo=o("LayoutLMv2ForQuestionAnswering"),BVo=o(" (LayoutLMv2 model)"),IVo=l(),bF=a("li"),Fhe=a("strong"),qVo=o("led"),NVo=o(" \u2014 "),MV=a("a"),jVo=o("LEDForQuestionAnswering"),DVo=o(" (LED model)"),GVo=l(),vF=a("li"),The=a("strong"),OVo=o("longformer"),VVo=o(" \u2014 "),EV=a("a"),XVo=o("LongformerForQuestionAnswering"),zVo=o(" (Longformer model)"),WVo=l(),FF=a("li"),Mhe=a("strong"),QVo=o("lxmert"),HVo=o(" \u2014 "),CV=a("a"),UVo=o("LxmertForQuestionAnswering"),JVo=o(" (LXMERT model)"),YVo=l(),TF=a("li"),Ehe=a("strong"),KVo=o("mbart"),ZVo=o(" \u2014 "),wV=a("a"),eXo=o("MBartForQuestionAnswering"),oXo=o(" (mBART model)"),rXo=l(),MF=a("li"),Che=a("strong"),tXo=o("megatron-bert"),aXo=o(" \u2014 "),AV=a("a"),nXo=o("MegatronBertForQuestionAnswering"),sXo=o(" (MegatronBert model)"),lXo=l(),EF=a("li"),whe=a("strong"),iXo=o("mobilebert"),dXo=o(" \u2014 "),yV=a("a"),cXo=o("MobileBertForQuestionAnswering"),fXo=o(" (MobileBERT model)"),mXo=l(),CF=a("li"),Ahe=a("strong"),gXo=o("mpnet"),hXo=o(" \u2014 "),LV=a("a"),pXo=o("MPNetForQuestionAnswering"),_Xo=o(" (MPNet model)"),uXo=l(),wF=a("li"),yhe=a("strong"),bXo=o("nystromformer"),vXo=o(" \u2014 "),xV=a("a"),FXo=o("NystromformerForQuestionAnswering"),TXo=o(" (Nystromformer model)"),MXo=l(),AF=a("li"),Lhe=a("strong"),EXo=o("qdqbert"),CXo=o(" \u2014 "),$V=a("a"),wXo=o("QDQBertForQuestionAnswering"),AXo=o(" (QDQBert model)"),yXo=l(),yF=a("li"),xhe=a("strong"),LXo=o("reformer"),xXo=o(" \u2014 "),kV=a("a"),$Xo=o("ReformerForQuestionAnswering"),kXo=o(" (Reformer model)"),SXo=l(),LF=a("li"),$he=a("strong"),RXo=o("rembert"),PXo=o(" \u2014 "),SV=a("a"),BXo=o("RemBertForQuestionAnswering"),IXo=o(" (RemBERT model)"),qXo=l(),xF=a("li"),khe=a("strong"),NXo=o("roberta"),jXo=o(" \u2014 "),RV=a("a"),DXo=o("RobertaForQuestionAnswering"),GXo=o(" (RoBERTa model)"),OXo=l(),$F=a("li"),She=a("strong"),VXo=o("roformer"),XXo=o(" \u2014 "),PV=a("a"),zXo=o("RoFormerForQuestionAnswering"),WXo=o(" (RoFormer model)"),QXo=l(),kF=a("li"),Rhe=a("strong"),HXo=o("splinter"),UXo=o(" \u2014 "),BV=a("a"),JXo=o("SplinterForQuestionAnswering"),YXo=o(" (Splinter model)"),KXo=l(),SF=a("li"),Phe=a("strong"),ZXo=o("squeezebert"),ezo=o(" \u2014 "),IV=a("a"),ozo=o("SqueezeBertForQuestionAnswering"),rzo=o(" (SqueezeBERT model)"),tzo=l(),RF=a("li"),Bhe=a("strong"),azo=o("xlm"),nzo=o(" \u2014 "),qV=a("a"),szo=o("XLMForQuestionAnsweringSimple"),lzo=o(" (XLM model)"),izo=l(),PF=a("li"),Ihe=a("strong"),dzo=o("xlm-roberta"),czo=o(" \u2014 "),NV=a("a"),fzo=o("XLMRobertaForQuestionAnswering"),mzo=o(" (XLM-RoBERTa model)"),gzo=l(),BF=a("li"),qhe=a("strong"),hzo=o("xlm-roberta-xl"),pzo=o(" \u2014 "),jV=a("a"),_zo=o("XLMRobertaXLForQuestionAnswering"),uzo=o(" (XLM-RoBERTa-XL model)"),bzo=l(),IF=a("li"),Nhe=a("strong"),vzo=o("xlnet"),Fzo=o(" \u2014 "),DV=a("a"),Tzo=o("XLNetForQuestionAnsweringSimple"),Mzo=o(" (XLNet model)"),Ezo=l(),qF=a("li"),jhe=a("strong"),Czo=o("yoso"),wzo=o(" \u2014 "),GV=a("a"),Azo=o("YosoForQuestionAnswering"),yzo=o(" (YOSO model)"),Lzo=l(),NF=a("p"),xzo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),$zo=o("model.eval()"),kzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),Szo=o("model.train()"),Rzo=l(),F(jF.$$.fragment),qqe=l(),od=a("h2"),DF=a("a"),Ohe=a("span"),F(qA.$$.fragment),Pzo=l(),Vhe=a("span"),Bzo=o("AutoModelForTableQuestionAnswering"),Nqe=l(),No=a("div"),F(NA.$$.fragment),Izo=l(),rd=a("p"),qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=a("a"),Nzo=o("from_pretrained()"),jzo=o(" class method or the "),VV=a("a"),Dzo=o("from_config()"),Gzo=o(` class
method.`),Ozo=l(),jA=a("p"),Vzo=o("This class cannot be instantiated directly using "),Xhe=a("code"),Xzo=o("__init__()"),zzo=o(" (throws an error)."),Wzo=l(),gt=a("div"),F(DA.$$.fragment),Qzo=l(),zhe=a("p"),Hzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Uzo=l(),td=a("p"),Jzo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),Yzo=o("not"),Kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),Zzo=o("from_pretrained()"),eWo=o(" to load the model weights."),oWo=l(),F(GF.$$.fragment),rWo=l(),so=a("div"),F(GA.$$.fragment),tWo=l(),Qhe=a("p"),aWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nWo=l(),Na=a("p"),sWo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),lWo=o("model_type"),iWo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),fWo=o("pretrained_model_name_or_path"),mWo=o(":"),gWo=l(),Yhe=a("ul"),OF=a("li"),Khe=a("strong"),hWo=o("tapas"),pWo=o(" \u2014 "),zV=a("a"),_Wo=o("TapasForQuestionAnswering"),uWo=o(" (TAPAS model)"),bWo=l(),VF=a("p"),vWo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),FWo=o("model.eval()"),TWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),MWo=o("model.train()"),EWo=l(),F(XF.$$.fragment),jqe=l(),ad=a("h2"),zF=a("a"),ope=a("span"),F(OA.$$.fragment),CWo=l(),rpe=a("span"),wWo=o("AutoModelForImageClassification"),Dqe=l(),jo=a("div"),F(VA.$$.fragment),AWo=l(),nd=a("p"),yWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),LWo=o("from_pretrained()"),xWo=o(" class method or the "),QV=a("a"),$Wo=o("from_config()"),kWo=o(` class
method.`),SWo=l(),XA=a("p"),RWo=o("This class cannot be instantiated directly using "),tpe=a("code"),PWo=o("__init__()"),BWo=o(" (throws an error)."),IWo=l(),ht=a("div"),F(zA.$$.fragment),qWo=l(),ape=a("p"),NWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jWo=l(),sd=a("p"),DWo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),GWo=o("not"),OWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),VWo=o("from_pretrained()"),XWo=o(" to load the model weights."),zWo=l(),F(WF.$$.fragment),WWo=l(),lo=a("div"),F(WA.$$.fragment),QWo=l(),spe=a("p"),HWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UWo=l(),ja=a("p"),JWo=o("The model class to instantiate is selected based on the "),lpe=a("code"),YWo=o("model_type"),KWo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),ZWo=o("pretrained_model_name_or_path"),eQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(":"),tQo=l(),Fe=a("ul"),QF=a("li"),cpe=a("strong"),aQo=o("beit"),nQo=o(" \u2014 "),UV=a("a"),sQo=o("BeitForImageClassification"),lQo=o(" (BEiT model)"),iQo=l(),HF=a("li"),fpe=a("strong"),dQo=o("convnext"),cQo=o(" \u2014 "),JV=a("a"),fQo=o("ConvNextForImageClassification"),mQo=o(" (ConvNext model)"),gQo=l(),UF=a("li"),mpe=a("strong"),hQo=o("data2vec-vision"),pQo=o(" \u2014 "),YV=a("a"),_Qo=o("Data2VecVisionForImageClassification"),uQo=o(" (Data2VecVision model)"),bQo=l(),Bs=a("li"),gpe=a("strong"),vQo=o("deit"),FQo=o(" \u2014 "),KV=a("a"),TQo=o("DeiTForImageClassification"),MQo=o(" or "),ZV=a("a"),EQo=o("DeiTForImageClassificationWithTeacher"),CQo=o(" (DeiT model)"),wQo=l(),JF=a("li"),hpe=a("strong"),AQo=o("imagegpt"),yQo=o(" \u2014 "),eX=a("a"),LQo=o("ImageGPTForImageClassification"),xQo=o(" (ImageGPT model)"),$Qo=l(),pt=a("li"),ppe=a("strong"),kQo=o("perceiver"),SQo=o(" \u2014 "),oX=a("a"),RQo=o("PerceiverForImageClassificationLearned"),PQo=o(" or "),rX=a("a"),BQo=o("PerceiverForImageClassificationFourier"),IQo=o(" or "),tX=a("a"),qQo=o("PerceiverForImageClassificationConvProcessing"),NQo=o(" (Perceiver model)"),jQo=l(),YF=a("li"),_pe=a("strong"),DQo=o("poolformer"),GQo=o(" \u2014 "),aX=a("a"),OQo=o("PoolFormerForImageClassification"),VQo=o(" (PoolFormer model)"),XQo=l(),KF=a("li"),upe=a("strong"),zQo=o("regnet"),WQo=o(" \u2014 "),nX=a("a"),QQo=o("RegNetForImageClassification"),HQo=o(" (RegNet model)"),UQo=l(),ZF=a("li"),bpe=a("strong"),JQo=o("resnet"),YQo=o(" \u2014 "),sX=a("a"),KQo=o("ResNetForImageClassification"),ZQo=o(" (ResNet model)"),eHo=l(),e6=a("li"),vpe=a("strong"),oHo=o("segformer"),rHo=o(" \u2014 "),lX=a("a"),tHo=o("SegformerForImageClassification"),aHo=o(" (SegFormer model)"),nHo=l(),o6=a("li"),Fpe=a("strong"),sHo=o("swin"),lHo=o(" \u2014 "),iX=a("a"),iHo=o("SwinForImageClassification"),dHo=o(" (Swin model)"),cHo=l(),r6=a("li"),Tpe=a("strong"),fHo=o("van"),mHo=o(" \u2014 "),dX=a("a"),gHo=o("VanForImageClassification"),hHo=o(" (VAN model)"),pHo=l(),t6=a("li"),Mpe=a("strong"),_Ho=o("vit"),uHo=o(" \u2014 "),cX=a("a"),bHo=o("ViTForImageClassification"),vHo=o(" (ViT model)"),FHo=l(),a6=a("p"),THo=o("The model is set in evaluation mode by default using "),Epe=a("code"),MHo=o("model.eval()"),EHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),CHo=o("model.train()"),wHo=l(),F(n6.$$.fragment),Gqe=l(),ld=a("h2"),s6=a("a"),wpe=a("span"),F(QA.$$.fragment),AHo=l(),Ape=a("span"),yHo=o("AutoModelForVision2Seq"),Oqe=l(),Do=a("div"),F(HA.$$.fragment),LHo=l(),id=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fX=a("a"),$Ho=o("from_pretrained()"),kHo=o(" class method or the "),mX=a("a"),SHo=o("from_config()"),RHo=o(` class
method.`),PHo=l(),UA=a("p"),BHo=o("This class cannot be instantiated directly using "),ype=a("code"),IHo=o("__init__()"),qHo=o(" (throws an error)."),NHo=l(),_t=a("div"),F(JA.$$.fragment),jHo=l(),Lpe=a("p"),DHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GHo=l(),dd=a("p"),OHo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),VHo=o("not"),XHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),zHo=o("from_pretrained()"),WHo=o(" to load the model weights."),QHo=l(),F(l6.$$.fragment),HHo=l(),io=a("div"),F(YA.$$.fragment),UHo=l(),$pe=a("p"),JHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YHo=l(),Da=a("p"),KHo=o("The model class to instantiate is selected based on the "),kpe=a("code"),ZHo=o("model_type"),eUo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),oUo=o("pretrained_model_name_or_path"),rUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(":"),nUo=l(),Ppe=a("ul"),i6=a("li"),Bpe=a("strong"),sUo=o("vision-encoder-decoder"),lUo=o(" \u2014 "),hX=a("a"),iUo=o("VisionEncoderDecoderModel"),dUo=o(" (Vision Encoder decoder model)"),cUo=l(),d6=a("p"),fUo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),mUo=o("model.eval()"),gUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),hUo=o("model.train()"),pUo=l(),F(c6.$$.fragment),Vqe=l(),cd=a("h2"),f6=a("a"),Npe=a("span"),F(KA.$$.fragment),_Uo=l(),jpe=a("span"),uUo=o("AutoModelForAudioClassification"),Xqe=l(),Go=a("div"),F(ZA.$$.fragment),bUo=l(),fd=a("p"),vUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pX=a("a"),FUo=o("from_pretrained()"),TUo=o(" class method or the "),_X=a("a"),MUo=o("from_config()"),EUo=o(` class
method.`),CUo=l(),ey=a("p"),wUo=o("This class cannot be instantiated directly using "),Dpe=a("code"),AUo=o("__init__()"),yUo=o(" (throws an error)."),LUo=l(),ut=a("div"),F(oy.$$.fragment),xUo=l(),Gpe=a("p"),$Uo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kUo=l(),md=a("p"),SUo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),RUo=o("not"),PUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),BUo=o("from_pretrained()"),IUo=o(" to load the model weights."),qUo=l(),F(m6.$$.fragment),NUo=l(),co=a("div"),F(ry.$$.fragment),jUo=l(),Vpe=a("p"),DUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),GUo=l(),Ga=a("p"),OUo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),VUo=o("model_type"),XUo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),zUo=o("pretrained_model_name_or_path"),WUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),QUo=o("pretrained_model_name_or_path"),HUo=o(":"),UUo=l(),Se=a("ul"),g6=a("li"),Qpe=a("strong"),JUo=o("data2vec-audio"),YUo=o(" \u2014 "),bX=a("a"),KUo=o("Data2VecAudioForSequenceClassification"),ZUo=o(" (Data2VecAudio model)"),eJo=l(),h6=a("li"),Hpe=a("strong"),oJo=o("hubert"),rJo=o(" \u2014 "),vX=a("a"),tJo=o("HubertForSequenceClassification"),aJo=o(" (Hubert model)"),nJo=l(),p6=a("li"),Upe=a("strong"),sJo=o("sew"),lJo=o(" \u2014 "),FX=a("a"),iJo=o("SEWForSequenceClassification"),dJo=o(" (SEW model)"),cJo=l(),_6=a("li"),Jpe=a("strong"),fJo=o("sew-d"),mJo=o(" \u2014 "),TX=a("a"),gJo=o("SEWDForSequenceClassification"),hJo=o(" (SEW-D model)"),pJo=l(),u6=a("li"),Ype=a("strong"),_Jo=o("unispeech"),uJo=o(" \u2014 "),MX=a("a"),bJo=o("UniSpeechForSequenceClassification"),vJo=o(" (UniSpeech model)"),FJo=l(),b6=a("li"),Kpe=a("strong"),TJo=o("unispeech-sat"),MJo=o(" \u2014 "),EX=a("a"),EJo=o("UniSpeechSatForSequenceClassification"),CJo=o(" (UniSpeechSat model)"),wJo=l(),v6=a("li"),Zpe=a("strong"),AJo=o("wav2vec2"),yJo=o(" \u2014 "),CX=a("a"),LJo=o("Wav2Vec2ForSequenceClassification"),xJo=o(" (Wav2Vec2 model)"),$Jo=l(),F6=a("li"),e_e=a("strong"),kJo=o("wav2vec2-conformer"),SJo=o(" \u2014 "),wX=a("a"),RJo=o("Wav2Vec2ConformerForSequenceClassification"),PJo=o(" (Wav2Vec2-Conformer model)"),BJo=l(),T6=a("li"),o_e=a("strong"),IJo=o("wavlm"),qJo=o(" \u2014 "),AX=a("a"),NJo=o("WavLMForSequenceClassification"),jJo=o(" (WavLM model)"),DJo=l(),M6=a("p"),GJo=o("The model is set in evaluation mode by default using "),r_e=a("code"),OJo=o("model.eval()"),VJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),XJo=o("model.train()"),zJo=l(),F(E6.$$.fragment),zqe=l(),gd=a("h2"),C6=a("a"),a_e=a("span"),F(ty.$$.fragment),WJo=l(),n_e=a("span"),QJo=o("AutoModelForAudioFrameClassification"),Wqe=l(),Oo=a("div"),F(ay.$$.fragment),HJo=l(),hd=a("p"),UJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yX=a("a"),JJo=o("from_pretrained()"),YJo=o(" class method or the "),LX=a("a"),KJo=o("from_config()"),ZJo=o(` class
method.`),eYo=l(),ny=a("p"),oYo=o("This class cannot be instantiated directly using "),s_e=a("code"),rYo=o("__init__()"),tYo=o(" (throws an error)."),aYo=l(),bt=a("div"),F(sy.$$.fragment),nYo=l(),l_e=a("p"),sYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),lYo=l(),pd=a("p"),iYo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),dYo=o("not"),cYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),fYo=o("from_pretrained()"),mYo=o(" to load the model weights."),gYo=l(),F(w6.$$.fragment),hYo=l(),fo=a("div"),F(ly.$$.fragment),pYo=l(),d_e=a("p"),_Yo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uYo=l(),Oa=a("p"),bYo=o("The model class to instantiate is selected based on the "),c_e=a("code"),vYo=o("model_type"),FYo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(":"),wYo=l(),Kr=a("ul"),A6=a("li"),g_e=a("strong"),AYo=o("data2vec-audio"),yYo=o(" \u2014 "),$X=a("a"),LYo=o("Data2VecAudioForAudioFrameClassification"),xYo=o(" (Data2VecAudio model)"),$Yo=l(),y6=a("li"),h_e=a("strong"),kYo=o("unispeech-sat"),SYo=o(" \u2014 "),kX=a("a"),RYo=o("UniSpeechSatForAudioFrameClassification"),PYo=o(" (UniSpeechSat model)"),BYo=l(),L6=a("li"),p_e=a("strong"),IYo=o("wav2vec2"),qYo=o(" \u2014 "),SX=a("a"),NYo=o("Wav2Vec2ForAudioFrameClassification"),jYo=o(" (Wav2Vec2 model)"),DYo=l(),x6=a("li"),__e=a("strong"),GYo=o("wav2vec2-conformer"),OYo=o(" \u2014 "),RX=a("a"),VYo=o("Wav2Vec2ConformerForAudioFrameClassification"),XYo=o(" (Wav2Vec2-Conformer model)"),zYo=l(),$6=a("li"),u_e=a("strong"),WYo=o("wavlm"),QYo=o(" \u2014 "),PX=a("a"),HYo=o("WavLMForAudioFrameClassification"),UYo=o(" (WavLM model)"),JYo=l(),k6=a("p"),YYo=o("The model is set in evaluation mode by default using "),b_e=a("code"),KYo=o("model.eval()"),ZYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),eKo=o("model.train()"),oKo=l(),F(S6.$$.fragment),Qqe=l(),_d=a("h2"),R6=a("a"),F_e=a("span"),F(iy.$$.fragment),rKo=l(),T_e=a("span"),tKo=o("AutoModelForCTC"),Hqe=l(),Vo=a("div"),F(dy.$$.fragment),aKo=l(),ud=a("p"),nKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BX=a("a"),sKo=o("from_pretrained()"),lKo=o(" class method or the "),IX=a("a"),iKo=o("from_config()"),dKo=o(` class
method.`),cKo=l(),cy=a("p"),fKo=o("This class cannot be instantiated directly using "),M_e=a("code"),mKo=o("__init__()"),gKo=o(" (throws an error)."),hKo=l(),vt=a("div"),F(fy.$$.fragment),pKo=l(),E_e=a("p"),_Ko=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uKo=l(),bd=a("p"),bKo=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),vKo=o("not"),FKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),TKo=o("from_pretrained()"),MKo=o(" to load the model weights."),EKo=l(),F(P6.$$.fragment),CKo=l(),mo=a("div"),F(my.$$.fragment),wKo=l(),w_e=a("p"),AKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yKo=l(),Va=a("p"),LKo=o("The model class to instantiate is selected based on the "),A_e=a("code"),xKo=o("model_type"),$Ko=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),RKo=o("pretrained_model_name_or_path"),PKo=o(":"),BKo=l(),Re=a("ul"),B6=a("li"),x_e=a("strong"),IKo=o("data2vec-audio"),qKo=o(" \u2014 "),NX=a("a"),NKo=o("Data2VecAudioForCTC"),jKo=o(" (Data2VecAudio model)"),DKo=l(),I6=a("li"),$_e=a("strong"),GKo=o("hubert"),OKo=o(" \u2014 "),jX=a("a"),VKo=o("HubertForCTC"),XKo=o(" (Hubert model)"),zKo=l(),q6=a("li"),k_e=a("strong"),WKo=o("sew"),QKo=o(" \u2014 "),DX=a("a"),HKo=o("SEWForCTC"),UKo=o(" (SEW model)"),JKo=l(),N6=a("li"),S_e=a("strong"),YKo=o("sew-d"),KKo=o(" \u2014 "),GX=a("a"),ZKo=o("SEWDForCTC"),eZo=o(" (SEW-D model)"),oZo=l(),j6=a("li"),R_e=a("strong"),rZo=o("unispeech"),tZo=o(" \u2014 "),OX=a("a"),aZo=o("UniSpeechForCTC"),nZo=o(" (UniSpeech model)"),sZo=l(),D6=a("li"),P_e=a("strong"),lZo=o("unispeech-sat"),iZo=o(" \u2014 "),VX=a("a"),dZo=o("UniSpeechSatForCTC"),cZo=o(" (UniSpeechSat model)"),fZo=l(),G6=a("li"),B_e=a("strong"),mZo=o("wav2vec2"),gZo=o(" \u2014 "),XX=a("a"),hZo=o("Wav2Vec2ForCTC"),pZo=o(" (Wav2Vec2 model)"),_Zo=l(),O6=a("li"),I_e=a("strong"),uZo=o("wav2vec2-conformer"),bZo=o(" \u2014 "),zX=a("a"),vZo=o("Wav2Vec2ConformerForCTC"),FZo=o(" (Wav2Vec2-Conformer model)"),TZo=l(),V6=a("li"),q_e=a("strong"),MZo=o("wavlm"),EZo=o(" \u2014 "),WX=a("a"),CZo=o("WavLMForCTC"),wZo=o(" (WavLM model)"),AZo=l(),X6=a("p"),yZo=o("The model is set in evaluation mode by default using "),N_e=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),$Zo=o("model.train()"),kZo=l(),F(z6.$$.fragment),Uqe=l(),vd=a("h2"),W6=a("a"),D_e=a("span"),F(gy.$$.fragment),SZo=l(),G_e=a("span"),RZo=o("AutoModelForSpeechSeq2Seq"),Jqe=l(),Xo=a("div"),F(hy.$$.fragment),PZo=l(),Fd=a("p"),BZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QX=a("a"),IZo=o("from_pretrained()"),qZo=o(" class method or the "),HX=a("a"),NZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),py=a("p"),GZo=o("This class cannot be instantiated directly using "),O_e=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),Ft=a("div"),F(_y.$$.fragment),zZo=l(),V_e=a("p"),WZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),QZo=l(),Td=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(Q6.$$.fragment),eer=l(),go=a("div"),F(uy.$$.fragment),oer=l(),z_e=a("p"),rer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ter=l(),Xa=a("p"),aer=o("The model class to instantiate is selected based on the "),W_e=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),by=a("ul"),H6=a("li"),U_e=a("strong"),mer=o("speech-encoder-decoder"),ger=o(" \u2014 "),JX=a("a"),her=o("SpeechEncoderDecoderModel"),per=o(" (Speech Encoder decoder model)"),_er=l(),U6=a("li"),J_e=a("strong"),uer=o("speech_to_text"),ber=o(" \u2014 "),YX=a("a"),ver=o("Speech2TextForConditionalGeneration"),Fer=o(" (Speech2Text model)"),Ter=l(),J6=a("p"),Mer=o("The model is set in evaluation mode by default using "),Y_e=a("code"),Eer=o("model.eval()"),Cer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),wer=o("model.train()"),Aer=l(),F(Y6.$$.fragment),Yqe=l(),Md=a("h2"),K6=a("a"),Z_e=a("span"),F(vy.$$.fragment),yer=l(),eue=a("span"),Ler=o("AutoModelForAudioXVector"),Kqe=l(),zo=a("div"),F(Fy.$$.fragment),xer=l(),Ed=a("p"),$er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KX=a("a"),ker=o("from_pretrained()"),Ser=o(" class method or the "),ZX=a("a"),Rer=o("from_config()"),Per=o(` class
method.`),Ber=l(),Ty=a("p"),Ier=o("This class cannot be instantiated directly using "),oue=a("code"),qer=o("__init__()"),Ner=o(" (throws an error)."),jer=l(),Tt=a("div"),F(My.$$.fragment),Der=l(),rue=a("p"),Ger=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Oer=l(),Cd=a("p"),Ver=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),Xer=o("not"),zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),Wer=o("from_pretrained()"),Qer=o(" to load the model weights."),Her=l(),F(Z6.$$.fragment),Uer=l(),ho=a("div"),F(Ey.$$.fragment),Jer=l(),aue=a("p"),Yer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ker=l(),za=a("p"),Zer=o("The model class to instantiate is selected based on the "),nue=a("code"),eor=o("model_type"),oor=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(":"),sor=l(),Zr=a("ul"),eT=a("li"),iue=a("strong"),lor=o("data2vec-audio"),ior=o(" \u2014 "),oz=a("a"),dor=o("Data2VecAudioForXVector"),cor=o(" (Data2VecAudio model)"),mor=l(),oT=a("li"),due=a("strong"),gor=o("unispeech-sat"),hor=o(" \u2014 "),rz=a("a"),por=o("UniSpeechSatForXVector"),_or=o(" (UniSpeechSat model)"),uor=l(),rT=a("li"),cue=a("strong"),bor=o("wav2vec2"),vor=o(" \u2014 "),tz=a("a"),For=o("Wav2Vec2ForXVector"),Tor=o(" (Wav2Vec2 model)"),Mor=l(),tT=a("li"),fue=a("strong"),Eor=o("wav2vec2-conformer"),Cor=o(" \u2014 "),az=a("a"),wor=o("Wav2Vec2ConformerForXVector"),Aor=o(" (Wav2Vec2-Conformer model)"),yor=l(),aT=a("li"),mue=a("strong"),Lor=o("wavlm"),xor=o(" \u2014 "),nz=a("a"),$or=o("WavLMForXVector"),kor=o(" (WavLM model)"),Sor=l(),nT=a("p"),Ror=o("The model is set in evaluation mode by default using "),gue=a("code"),Por=o("model.eval()"),Bor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),Ior=o("model.train()"),qor=l(),F(sT.$$.fragment),Zqe=l(),wd=a("h2"),lT=a("a"),pue=a("span"),F(Cy.$$.fragment),Nor=l(),_ue=a("span"),jor=o("AutoModelForMaskedImageModeling"),eNe=l(),Wo=a("div"),F(wy.$$.fragment),Dor=l(),Ad=a("p"),Gor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sz=a("a"),Oor=o("from_pretrained()"),Vor=o(" class method or the "),lz=a("a"),Xor=o("from_config()"),zor=o(` class
method.`),Wor=l(),Ay=a("p"),Qor=o("This class cannot be instantiated directly using "),uue=a("code"),Hor=o("__init__()"),Uor=o(" (throws an error)."),Jor=l(),Mt=a("div"),F(yy.$$.fragment),Yor=l(),bue=a("p"),Kor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zor=l(),yd=a("p"),err=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),orr=o("not"),rrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),trr=o("from_pretrained()"),arr=o(" to load the model weights."),nrr=l(),F(iT.$$.fragment),srr=l(),po=a("div"),F(Ly.$$.fragment),lrr=l(),Fue=a("p"),irr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),drr=l(),Wa=a("p"),crr=o("The model class to instantiate is selected based on the "),Tue=a("code"),frr=o("model_type"),mrr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(":"),urr=l(),Ld=a("ul"),dT=a("li"),Cue=a("strong"),brr=o("deit"),vrr=o(" \u2014 "),dz=a("a"),Frr=o("DeiTForMaskedImageModeling"),Trr=o(" (DeiT model)"),Mrr=l(),cT=a("li"),wue=a("strong"),Err=o("swin"),Crr=o(" \u2014 "),cz=a("a"),wrr=o("SwinForMaskedImageModeling"),Arr=o(" (Swin model)"),yrr=l(),fT=a("li"),Aue=a("strong"),Lrr=o("vit"),xrr=o(" \u2014 "),fz=a("a"),$rr=o("ViTForMaskedImageModeling"),krr=o(" (ViT model)"),Srr=l(),mT=a("p"),Rrr=o("The model is set in evaluation mode by default using "),yue=a("code"),Prr=o("model.eval()"),Brr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),Irr=o("model.train()"),qrr=l(),F(gT.$$.fragment),oNe=l(),xd=a("h2"),hT=a("a"),xue=a("span"),F(xy.$$.fragment),Nrr=l(),$ue=a("span"),jrr=o("AutoModelForObjectDetection"),rNe=l(),Qo=a("div"),F($y.$$.fragment),Drr=l(),$d=a("p"),Grr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mz=a("a"),Orr=o("from_pretrained()"),Vrr=o(" class method or the "),gz=a("a"),Xrr=o("from_config()"),zrr=o(` class
method.`),Wrr=l(),ky=a("p"),Qrr=o("This class cannot be instantiated directly using "),kue=a("code"),Hrr=o("__init__()"),Urr=o(" (throws an error)."),Jrr=l(),Et=a("div"),F(Sy.$$.fragment),Yrr=l(),Sue=a("p"),Krr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zrr=l(),kd=a("p"),etr=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),otr=o("not"),rtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),ttr=o("from_pretrained()"),atr=o(" to load the model weights."),ntr=l(),F(pT.$$.fragment),str=l(),_o=a("div"),F(Ry.$$.fragment),ltr=l(),Pue=a("p"),itr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dtr=l(),Qa=a("p"),ctr=o("The model class to instantiate is selected based on the "),Bue=a("code"),ftr=o("model_type"),mtr=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),ptr=o("pretrained_model_name_or_path"),_tr=o(":"),utr=l(),Py=a("ul"),_T=a("li"),Nue=a("strong"),btr=o("detr"),vtr=o(" \u2014 "),pz=a("a"),Ftr=o("DetrForObjectDetection"),Ttr=o(" (DETR model)"),Mtr=l(),uT=a("li"),jue=a("strong"),Etr=o("yolos"),Ctr=o(" \u2014 "),_z=a("a"),wtr=o("YolosForObjectDetection"),Atr=o(" (YOLOS model)"),ytr=l(),bT=a("p"),Ltr=o("The model is set in evaluation mode by default using "),Due=a("code"),xtr=o("model.eval()"),$tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),ktr=o("model.train()"),Str=l(),F(vT.$$.fragment),tNe=l(),Sd=a("h2"),FT=a("a"),Oue=a("span"),F(By.$$.fragment),Rtr=l(),Vue=a("span"),Ptr=o("AutoModelForImageSegmentation"),aNe=l(),Ho=a("div"),F(Iy.$$.fragment),Btr=l(),Rd=a("p"),Itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uz=a("a"),qtr=o("from_pretrained()"),Ntr=o(" class method or the "),bz=a("a"),jtr=o("from_config()"),Dtr=o(` class
method.`),Gtr=l(),qy=a("p"),Otr=o("This class cannot be instantiated directly using "),Xue=a("code"),Vtr=o("__init__()"),Xtr=o(" (throws an error)."),ztr=l(),Ct=a("div"),F(Ny.$$.fragment),Wtr=l(),zue=a("p"),Qtr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Htr=l(),Pd=a("p"),Utr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),Jtr=o("not"),Ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" to load the model weights."),ear=l(),F(TT.$$.fragment),oar=l(),uo=a("div"),F(jy.$$.fragment),rar=l(),Que=a("p"),tar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),aar=l(),Ha=a("p"),nar=o("The model class to instantiate is selected based on the "),Hue=a("code"),sar=o("model_type"),lar=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),iar=o("pretrained_model_name_or_path"),dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),car=o("pretrained_model_name_or_path"),far=o(":"),mar=l(),Yue=a("ul"),MT=a("li"),Kue=a("strong"),gar=o("detr"),har=o(" \u2014 "),Fz=a("a"),par=o("DetrForSegmentation"),_ar=o(" (DETR model)"),uar=l(),ET=a("p"),bar=o("The model is set in evaluation mode by default using "),Zue=a("code"),Far=o("model.eval()"),Tar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Mar=o("model.train()"),Ear=l(),F(CT.$$.fragment),nNe=l(),Bd=a("h2"),wT=a("a"),o2e=a("span"),F(Dy.$$.fragment),Car=l(),r2e=a("span"),war=o("AutoModelForSemanticSegmentation"),sNe=l(),Uo=a("div"),F(Gy.$$.fragment),Aar=l(),Id=a("p"),yar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Tz=a("a"),Lar=o("from_pretrained()"),xar=o(" class method or the "),Mz=a("a"),$ar=o("from_config()"),kar=o(` class
method.`),Sar=l(),Oy=a("p"),Rar=o("This class cannot be instantiated directly using "),t2e=a("code"),Par=o("__init__()"),Bar=o(" (throws an error)."),Iar=l(),wt=a("div"),F(Vy.$$.fragment),qar=l(),a2e=a("p"),Nar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jar=l(),qd=a("p"),Dar=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Gar=o("not"),Oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Var=o("from_pretrained()"),Xar=o(" to load the model weights."),zar=l(),F(AT.$$.fragment),War=l(),bo=a("div"),F(Xy.$$.fragment),Qar=l(),s2e=a("p"),Har=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uar=l(),Ua=a("p"),Jar=o("The model class to instantiate is selected based on the "),l2e=a("code"),Yar=o("model_type"),Kar=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),Zar=o("pretrained_model_name_or_path"),enr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),onr=o("pretrained_model_name_or_path"),rnr=o(":"),tnr=l(),Ja=a("ul"),yT=a("li"),c2e=a("strong"),anr=o("beit"),nnr=o(" \u2014 "),Cz=a("a"),snr=o("BeitForSemanticSegmentation"),lnr=o(" (BEiT model)"),inr=l(),LT=a("li"),f2e=a("strong"),dnr=o("data2vec-vision"),cnr=o(" \u2014 "),wz=a("a"),fnr=o("Data2VecVisionForSemanticSegmentation"),mnr=o(" (Data2VecVision model)"),gnr=l(),xT=a("li"),m2e=a("strong"),hnr=o("dpt"),pnr=o(" \u2014 "),Az=a("a"),_nr=o("DPTForSemanticSegmentation"),unr=o(" (DPT model)"),bnr=l(),$T=a("li"),g2e=a("strong"),vnr=o("segformer"),Fnr=o(" \u2014 "),yz=a("a"),Tnr=o("SegformerForSemanticSegmentation"),Mnr=o(" (SegFormer model)"),Enr=l(),kT=a("p"),Cnr=o("The model is set in evaluation mode by default using "),h2e=a("code"),wnr=o("model.eval()"),Anr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),ynr=o("model.train()"),Lnr=l(),F(ST.$$.fragment),lNe=l(),Nd=a("h2"),RT=a("a"),_2e=a("span"),F(zy.$$.fragment),xnr=l(),u2e=a("span"),$nr=o("AutoModelForInstanceSegmentation"),iNe=l(),Jo=a("div"),F(Wy.$$.fragment),knr=l(),jd=a("p"),Snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Lz=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" class method or the "),xz=a("a"),Bnr=o("from_config()"),Inr=o(` class
method.`),qnr=l(),Qy=a("p"),Nnr=o("This class cannot be instantiated directly using "),b2e=a("code"),jnr=o("__init__()"),Dnr=o(" (throws an error)."),Gnr=l(),At=a("div"),F(Hy.$$.fragment),Onr=l(),v2e=a("p"),Vnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xnr=l(),Dd=a("p"),znr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Wnr=o("not"),Qnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),Hnr=o("from_pretrained()"),Unr=o(" to load the model weights."),Jnr=l(),F(PT.$$.fragment),Ynr=l(),vo=a("div"),F(Uy.$$.fragment),Knr=l(),T2e=a("p"),Znr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),esr=l(),Ya=a("p"),osr=o("The model class to instantiate is selected based on the "),M2e=a("code"),rsr=o("model_type"),tsr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),ssr=o("pretrained_model_name_or_path"),lsr=o(":"),isr=l(),w2e=a("ul"),BT=a("li"),A2e=a("strong"),dsr=o("maskformer"),csr=o(" \u2014 "),kz=a("a"),fsr=o("MaskFormerForInstanceSegmentation"),msr=o(" (MaskFormer model)"),gsr=l(),IT=a("p"),hsr=o("The model is set in evaluation mode by default using "),y2e=a("code"),psr=o("model.eval()"),_sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),usr=o("model.train()"),bsr=l(),F(qT.$$.fragment),dNe=l(),Gd=a("h2"),NT=a("a"),x2e=a("span"),F(Jy.$$.fragment),vsr=l(),$2e=a("span"),Fsr=o("TFAutoModel"),cNe=l(),Yo=a("div"),F(Yy.$$.fragment),Tsr=l(),Od=a("p"),Msr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Sz=a("a"),Esr=o("from_pretrained()"),Csr=o(" class method or the "),Rz=a("a"),wsr=o("from_config()"),Asr=o(` class
method.`),ysr=l(),Ky=a("p"),Lsr=o("This class cannot be instantiated directly using "),k2e=a("code"),xsr=o("__init__()"),$sr=o(" (throws an error)."),ksr=l(),yt=a("div"),F(Zy.$$.fragment),Ssr=l(),S2e=a("p"),Rsr=o("Instantiates one of the base model classes of the library from a configuration."),Psr=l(),Vd=a("p"),Bsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Isr=o("not"),qsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),Nsr=o("from_pretrained()"),jsr=o(" to load the model weights."),Dsr=l(),F(jT.$$.fragment),Gsr=l(),wr=a("div"),F(eL.$$.fragment),Osr=l(),P2e=a("p"),Vsr=o("Instantiate one of the base model classes of the library from a pretrained model."),Xsr=l(),Ka=a("p"),zsr=o("The model class to instantiate is selected based on the "),B2e=a("code"),Wsr=o("model_type"),Qsr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Hsr=o("pretrained_model_name_or_path"),Usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),Jsr=o("pretrained_model_name_or_path"),Ysr=o(":"),Ksr=l(),N=a("ul"),DT=a("li"),N2e=a("strong"),Zsr=o("albert"),elr=o(" \u2014 "),Bz=a("a"),olr=o("TFAlbertModel"),rlr=o(" (ALBERT model)"),tlr=l(),GT=a("li"),j2e=a("strong"),alr=o("bart"),nlr=o(" \u2014 "),Iz=a("a"),slr=o("TFBartModel"),llr=o(" (BART model)"),ilr=l(),OT=a("li"),D2e=a("strong"),dlr=o("bert"),clr=o(" \u2014 "),qz=a("a"),flr=o("TFBertModel"),mlr=o(" (BERT model)"),glr=l(),VT=a("li"),G2e=a("strong"),hlr=o("blenderbot"),plr=o(" \u2014 "),Nz=a("a"),_lr=o("TFBlenderbotModel"),ulr=o(" (Blenderbot model)"),blr=l(),XT=a("li"),O2e=a("strong"),vlr=o("blenderbot-small"),Flr=o(" \u2014 "),jz=a("a"),Tlr=o("TFBlenderbotSmallModel"),Mlr=o(" (BlenderbotSmall model)"),Elr=l(),zT=a("li"),V2e=a("strong"),Clr=o("camembert"),wlr=o(" \u2014 "),Dz=a("a"),Alr=o("TFCamembertModel"),ylr=o(" (CamemBERT model)"),Llr=l(),WT=a("li"),X2e=a("strong"),xlr=o("clip"),$lr=o(" \u2014 "),Gz=a("a"),klr=o("TFCLIPModel"),Slr=o(" (CLIP model)"),Rlr=l(),QT=a("li"),z2e=a("strong"),Plr=o("convbert"),Blr=o(" \u2014 "),Oz=a("a"),Ilr=o("TFConvBertModel"),qlr=o(" (ConvBERT model)"),Nlr=l(),HT=a("li"),W2e=a("strong"),jlr=o("convnext"),Dlr=o(" \u2014 "),Vz=a("a"),Glr=o("TFConvNextModel"),Olr=o(" (ConvNext model)"),Vlr=l(),UT=a("li"),Q2e=a("strong"),Xlr=o("ctrl"),zlr=o(" \u2014 "),Xz=a("a"),Wlr=o("TFCTRLModel"),Qlr=o(" (CTRL model)"),Hlr=l(),JT=a("li"),H2e=a("strong"),Ulr=o("data2vec-vision"),Jlr=o(" \u2014 "),zz=a("a"),Ylr=o("TFData2VecVisionModel"),Klr=o(" (Data2VecVision model)"),Zlr=l(),YT=a("li"),U2e=a("strong"),eir=o("deberta"),oir=o(" \u2014 "),Wz=a("a"),rir=o("TFDebertaModel"),tir=o(" (DeBERTa model)"),air=l(),KT=a("li"),J2e=a("strong"),nir=o("deberta-v2"),sir=o(" \u2014 "),Qz=a("a"),lir=o("TFDebertaV2Model"),iir=o(" (DeBERTa-v2 model)"),dir=l(),ZT=a("li"),Y2e=a("strong"),cir=o("distilbert"),fir=o(" \u2014 "),Hz=a("a"),mir=o("TFDistilBertModel"),gir=o(" (DistilBERT model)"),hir=l(),e7=a("li"),K2e=a("strong"),pir=o("dpr"),_ir=o(" \u2014 "),Uz=a("a"),uir=o("TFDPRQuestionEncoder"),bir=o(" (DPR model)"),vir=l(),o7=a("li"),Z2e=a("strong"),Fir=o("electra"),Tir=o(" \u2014 "),Jz=a("a"),Mir=o("TFElectraModel"),Eir=o(" (ELECTRA model)"),Cir=l(),r7=a("li"),e1e=a("strong"),wir=o("flaubert"),Air=o(" \u2014 "),Yz=a("a"),yir=o("TFFlaubertModel"),Lir=o(" (FlauBERT model)"),xir=l(),Is=a("li"),o1e=a("strong"),$ir=o("funnel"),kir=o(" \u2014 "),Kz=a("a"),Sir=o("TFFunnelModel"),Rir=o(" or "),Zz=a("a"),Pir=o("TFFunnelBaseModel"),Bir=o(" (Funnel Transformer model)"),Iir=l(),t7=a("li"),r1e=a("strong"),qir=o("gpt2"),Nir=o(" \u2014 "),eW=a("a"),jir=o("TFGPT2Model"),Dir=o(" (OpenAI GPT-2 model)"),Gir=l(),a7=a("li"),t1e=a("strong"),Oir=o("gptj"),Vir=o(" \u2014 "),oW=a("a"),Xir=o("TFGPTJModel"),zir=o(" (GPT-J model)"),Wir=l(),n7=a("li"),a1e=a("strong"),Qir=o("hubert"),Hir=o(" \u2014 "),rW=a("a"),Uir=o("TFHubertModel"),Jir=o(" (Hubert model)"),Yir=l(),s7=a("li"),n1e=a("strong"),Kir=o("layoutlm"),Zir=o(" \u2014 "),tW=a("a"),edr=o("TFLayoutLMModel"),odr=o(" (LayoutLM model)"),rdr=l(),l7=a("li"),s1e=a("strong"),tdr=o("led"),adr=o(" \u2014 "),aW=a("a"),ndr=o("TFLEDModel"),sdr=o(" (LED model)"),ldr=l(),i7=a("li"),l1e=a("strong"),idr=o("longformer"),ddr=o(" \u2014 "),nW=a("a"),cdr=o("TFLongformerModel"),fdr=o(" (Longformer model)"),mdr=l(),d7=a("li"),i1e=a("strong"),gdr=o("lxmert"),hdr=o(" \u2014 "),sW=a("a"),pdr=o("TFLxmertModel"),_dr=o(" (LXMERT model)"),udr=l(),c7=a("li"),d1e=a("strong"),bdr=o("marian"),vdr=o(" \u2014 "),lW=a("a"),Fdr=o("TFMarianModel"),Tdr=o(" (Marian model)"),Mdr=l(),f7=a("li"),c1e=a("strong"),Edr=o("mbart"),Cdr=o(" \u2014 "),iW=a("a"),wdr=o("TFMBartModel"),Adr=o(" (mBART model)"),ydr=l(),m7=a("li"),f1e=a("strong"),Ldr=o("mobilebert"),xdr=o(" \u2014 "),dW=a("a"),$dr=o("TFMobileBertModel"),kdr=o(" (MobileBERT model)"),Sdr=l(),g7=a("li"),m1e=a("strong"),Rdr=o("mpnet"),Pdr=o(" \u2014 "),cW=a("a"),Bdr=o("TFMPNetModel"),Idr=o(" (MPNet model)"),qdr=l(),h7=a("li"),g1e=a("strong"),Ndr=o("mt5"),jdr=o(" \u2014 "),fW=a("a"),Ddr=o("TFMT5Model"),Gdr=o(" (mT5 model)"),Odr=l(),p7=a("li"),h1e=a("strong"),Vdr=o("openai-gpt"),Xdr=o(" \u2014 "),mW=a("a"),zdr=o("TFOpenAIGPTModel"),Wdr=o(" (OpenAI GPT model)"),Qdr=l(),_7=a("li"),p1e=a("strong"),Hdr=o("pegasus"),Udr=o(" \u2014 "),gW=a("a"),Jdr=o("TFPegasusModel"),Ydr=o(" (Pegasus model)"),Kdr=l(),u7=a("li"),_1e=a("strong"),Zdr=o("rembert"),ecr=o(" \u2014 "),hW=a("a"),ocr=o("TFRemBertModel"),rcr=o(" (RemBERT model)"),tcr=l(),b7=a("li"),u1e=a("strong"),acr=o("roberta"),ncr=o(" \u2014 "),pW=a("a"),scr=o("TFRobertaModel"),lcr=o(" (RoBERTa model)"),icr=l(),v7=a("li"),b1e=a("strong"),dcr=o("roformer"),ccr=o(" \u2014 "),_W=a("a"),fcr=o("TFRoFormerModel"),mcr=o(" (RoFormer model)"),gcr=l(),F7=a("li"),v1e=a("strong"),hcr=o("speech_to_text"),pcr=o(" \u2014 "),uW=a("a"),_cr=o("TFSpeech2TextModel"),ucr=o(" (Speech2Text model)"),bcr=l(),T7=a("li"),F1e=a("strong"),vcr=o("swin"),Fcr=o(" \u2014 "),bW=a("a"),Tcr=o("TFSwinModel"),Mcr=o(" (Swin model)"),Ecr=l(),M7=a("li"),T1e=a("strong"),Ccr=o("t5"),wcr=o(" \u2014 "),vW=a("a"),Acr=o("TFT5Model"),ycr=o(" (T5 model)"),Lcr=l(),E7=a("li"),M1e=a("strong"),xcr=o("tapas"),$cr=o(" \u2014 "),FW=a("a"),kcr=o("TFTapasModel"),Scr=o(" (TAPAS model)"),Rcr=l(),C7=a("li"),E1e=a("strong"),Pcr=o("transfo-xl"),Bcr=o(" \u2014 "),TW=a("a"),Icr=o("TFTransfoXLModel"),qcr=o(" (Transformer-XL model)"),Ncr=l(),w7=a("li"),C1e=a("strong"),jcr=o("vit"),Dcr=o(" \u2014 "),MW=a("a"),Gcr=o("TFViTModel"),Ocr=o(" (ViT model)"),Vcr=l(),A7=a("li"),w1e=a("strong"),Xcr=o("vit_mae"),zcr=o(" \u2014 "),EW=a("a"),Wcr=o("TFViTMAEModel"),Qcr=o(" (ViTMAE model)"),Hcr=l(),y7=a("li"),A1e=a("strong"),Ucr=o("wav2vec2"),Jcr=o(" \u2014 "),CW=a("a"),Ycr=o("TFWav2Vec2Model"),Kcr=o(" (Wav2Vec2 model)"),Zcr=l(),L7=a("li"),y1e=a("strong"),efr=o("xlm"),ofr=o(" \u2014 "),wW=a("a"),rfr=o("TFXLMModel"),tfr=o(" (XLM model)"),afr=l(),x7=a("li"),L1e=a("strong"),nfr=o("xlm-roberta"),sfr=o(" \u2014 "),AW=a("a"),lfr=o("TFXLMRobertaModel"),ifr=o(" (XLM-RoBERTa model)"),dfr=l(),$7=a("li"),x1e=a("strong"),cfr=o("xlnet"),ffr=o(" \u2014 "),yW=a("a"),mfr=o("TFXLNetModel"),gfr=o(" (XLNet model)"),hfr=l(),F(k7.$$.fragment),fNe=l(),Xd=a("h2"),S7=a("a"),$1e=a("span"),F(oL.$$.fragment),pfr=l(),k1e=a("span"),_fr=o("TFAutoModelForPreTraining"),mNe=l(),Ko=a("div"),F(rL.$$.fragment),ufr=l(),zd=a("p"),bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LW=a("a"),vfr=o("from_pretrained()"),Ffr=o(" class method or the "),xW=a("a"),Tfr=o("from_config()"),Mfr=o(` class
method.`),Efr=l(),tL=a("p"),Cfr=o("This class cannot be instantiated directly using "),S1e=a("code"),wfr=o("__init__()"),Afr=o(" (throws an error)."),yfr=l(),Lt=a("div"),F(aL.$$.fragment),Lfr=l(),R1e=a("p"),xfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$fr=l(),Wd=a("p"),kfr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Sfr=o("not"),Rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Pfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Ifr=l(),F(R7.$$.fragment),qfr=l(),Ar=a("div"),F(nL.$$.fragment),Nfr=l(),B1e=a("p"),jfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dfr=l(),Za=a("p"),Gfr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Ofr=o("model_type"),Vfr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Xfr=o("pretrained_model_name_or_path"),zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Wfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Hfr=l(),se=a("ul"),P7=a("li"),j1e=a("strong"),Ufr=o("albert"),Jfr=o(" \u2014 "),kW=a("a"),Yfr=o("TFAlbertForPreTraining"),Kfr=o(" (ALBERT model)"),Zfr=l(),B7=a("li"),D1e=a("strong"),emr=o("bart"),omr=o(" \u2014 "),SW=a("a"),rmr=o("TFBartForConditionalGeneration"),tmr=o(" (BART model)"),amr=l(),I7=a("li"),G1e=a("strong"),nmr=o("bert"),smr=o(" \u2014 "),RW=a("a"),lmr=o("TFBertForPreTraining"),imr=o(" (BERT model)"),dmr=l(),q7=a("li"),O1e=a("strong"),cmr=o("camembert"),fmr=o(" \u2014 "),PW=a("a"),mmr=o("TFCamembertForMaskedLM"),gmr=o(" (CamemBERT model)"),hmr=l(),N7=a("li"),V1e=a("strong"),pmr=o("ctrl"),_mr=o(" \u2014 "),BW=a("a"),umr=o("TFCTRLLMHeadModel"),bmr=o(" (CTRL model)"),vmr=l(),j7=a("li"),X1e=a("strong"),Fmr=o("distilbert"),Tmr=o(" \u2014 "),IW=a("a"),Mmr=o("TFDistilBertForMaskedLM"),Emr=o(" (DistilBERT model)"),Cmr=l(),D7=a("li"),z1e=a("strong"),wmr=o("electra"),Amr=o(" \u2014 "),qW=a("a"),ymr=o("TFElectraForPreTraining"),Lmr=o(" (ELECTRA model)"),xmr=l(),G7=a("li"),W1e=a("strong"),$mr=o("flaubert"),kmr=o(" \u2014 "),NW=a("a"),Smr=o("TFFlaubertWithLMHeadModel"),Rmr=o(" (FlauBERT model)"),Pmr=l(),O7=a("li"),Q1e=a("strong"),Bmr=o("funnel"),Imr=o(" \u2014 "),jW=a("a"),qmr=o("TFFunnelForPreTraining"),Nmr=o(" (Funnel Transformer model)"),jmr=l(),V7=a("li"),H1e=a("strong"),Dmr=o("gpt2"),Gmr=o(" \u2014 "),DW=a("a"),Omr=o("TFGPT2LMHeadModel"),Vmr=o(" (OpenAI GPT-2 model)"),Xmr=l(),X7=a("li"),U1e=a("strong"),zmr=o("layoutlm"),Wmr=o(" \u2014 "),GW=a("a"),Qmr=o("TFLayoutLMForMaskedLM"),Hmr=o(" (LayoutLM model)"),Umr=l(),z7=a("li"),J1e=a("strong"),Jmr=o("lxmert"),Ymr=o(" \u2014 "),OW=a("a"),Kmr=o("TFLxmertForPreTraining"),Zmr=o(" (LXMERT model)"),egr=l(),W7=a("li"),Y1e=a("strong"),ogr=o("mobilebert"),rgr=o(" \u2014 "),VW=a("a"),tgr=o("TFMobileBertForPreTraining"),agr=o(" (MobileBERT model)"),ngr=l(),Q7=a("li"),K1e=a("strong"),sgr=o("mpnet"),lgr=o(" \u2014 "),XW=a("a"),igr=o("TFMPNetForMaskedLM"),dgr=o(" (MPNet model)"),cgr=l(),H7=a("li"),Z1e=a("strong"),fgr=o("openai-gpt"),mgr=o(" \u2014 "),zW=a("a"),ggr=o("TFOpenAIGPTLMHeadModel"),hgr=o(" (OpenAI GPT model)"),pgr=l(),U7=a("li"),ebe=a("strong"),_gr=o("roberta"),ugr=o(" \u2014 "),WW=a("a"),bgr=o("TFRobertaForMaskedLM"),vgr=o(" (RoBERTa model)"),Fgr=l(),J7=a("li"),obe=a("strong"),Tgr=o("t5"),Mgr=o(" \u2014 "),QW=a("a"),Egr=o("TFT5ForConditionalGeneration"),Cgr=o(" (T5 model)"),wgr=l(),Y7=a("li"),rbe=a("strong"),Agr=o("tapas"),ygr=o(" \u2014 "),HW=a("a"),Lgr=o("TFTapasForMaskedLM"),xgr=o(" (TAPAS model)"),$gr=l(),K7=a("li"),tbe=a("strong"),kgr=o("transfo-xl"),Sgr=o(" \u2014 "),UW=a("a"),Rgr=o("TFTransfoXLLMHeadModel"),Pgr=o(" (Transformer-XL model)"),Bgr=l(),Z7=a("li"),abe=a("strong"),Igr=o("vit_mae"),qgr=o(" \u2014 "),JW=a("a"),Ngr=o("TFViTMAEForPreTraining"),jgr=o(" (ViTMAE model)"),Dgr=l(),e9=a("li"),nbe=a("strong"),Ggr=o("xlm"),Ogr=o(" \u2014 "),YW=a("a"),Vgr=o("TFXLMWithLMHeadModel"),Xgr=o(" (XLM model)"),zgr=l(),o9=a("li"),sbe=a("strong"),Wgr=o("xlm-roberta"),Qgr=o(" \u2014 "),KW=a("a"),Hgr=o("TFXLMRobertaForMaskedLM"),Ugr=o(" (XLM-RoBERTa model)"),Jgr=l(),r9=a("li"),lbe=a("strong"),Ygr=o("xlnet"),Kgr=o(" \u2014 "),ZW=a("a"),Zgr=o("TFXLNetLMHeadModel"),ehr=o(" (XLNet model)"),ohr=l(),F(t9.$$.fragment),gNe=l(),Qd=a("h2"),a9=a("a"),ibe=a("span"),F(sL.$$.fragment),rhr=l(),dbe=a("span"),thr=o("TFAutoModelForCausalLM"),hNe=l(),Zo=a("div"),F(lL.$$.fragment),ahr=l(),Hd=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eQ=a("a"),shr=o("from_pretrained()"),lhr=o(" class method or the "),oQ=a("a"),ihr=o("from_config()"),dhr=o(` class
method.`),chr=l(),iL=a("p"),fhr=o("This class cannot be instantiated directly using "),cbe=a("code"),mhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),xt=a("div"),F(dL.$$.fragment),phr=l(),fbe=a("p"),_hr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uhr=l(),Ud=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),vhr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),Thr=o("from_pretrained()"),Mhr=o(" to load the model weights."),Ehr=l(),F(n9.$$.fragment),Chr=l(),yr=a("div"),F(cL.$$.fragment),whr=l(),gbe=a("p"),Ahr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yhr=l(),en=a("p"),Lhr=o("The model class to instantiate is selected based on the "),hbe=a("code"),xhr=o("model_type"),$hr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(":"),Bhr=l(),Me=a("ul"),s9=a("li"),ube=a("strong"),Ihr=o("bert"),qhr=o(" \u2014 "),tQ=a("a"),Nhr=o("TFBertLMHeadModel"),jhr=o(" (BERT model)"),Dhr=l(),l9=a("li"),bbe=a("strong"),Ghr=o("camembert"),Ohr=o(" \u2014 "),aQ=a("a"),Vhr=o("TFCamembertForCausalLM"),Xhr=o(" (CamemBERT model)"),zhr=l(),i9=a("li"),vbe=a("strong"),Whr=o("ctrl"),Qhr=o(" \u2014 "),nQ=a("a"),Hhr=o("TFCTRLLMHeadModel"),Uhr=o(" (CTRL model)"),Jhr=l(),d9=a("li"),Fbe=a("strong"),Yhr=o("gpt2"),Khr=o(" \u2014 "),sQ=a("a"),Zhr=o("TFGPT2LMHeadModel"),epr=o(" (OpenAI GPT-2 model)"),opr=l(),c9=a("li"),Tbe=a("strong"),rpr=o("gptj"),tpr=o(" \u2014 "),lQ=a("a"),apr=o("TFGPTJForCausalLM"),npr=o(" (GPT-J model)"),spr=l(),f9=a("li"),Mbe=a("strong"),lpr=o("openai-gpt"),ipr=o(" \u2014 "),iQ=a("a"),dpr=o("TFOpenAIGPTLMHeadModel"),cpr=o(" (OpenAI GPT model)"),fpr=l(),m9=a("li"),Ebe=a("strong"),mpr=o("rembert"),gpr=o(" \u2014 "),dQ=a("a"),hpr=o("TFRemBertForCausalLM"),ppr=o(" (RemBERT model)"),_pr=l(),g9=a("li"),Cbe=a("strong"),upr=o("roberta"),bpr=o(" \u2014 "),cQ=a("a"),vpr=o("TFRobertaForCausalLM"),Fpr=o(" (RoBERTa model)"),Tpr=l(),h9=a("li"),wbe=a("strong"),Mpr=o("roformer"),Epr=o(" \u2014 "),fQ=a("a"),Cpr=o("TFRoFormerForCausalLM"),wpr=o(" (RoFormer model)"),Apr=l(),p9=a("li"),Abe=a("strong"),ypr=o("transfo-xl"),Lpr=o(" \u2014 "),mQ=a("a"),xpr=o("TFTransfoXLLMHeadModel"),$pr=o(" (Transformer-XL model)"),kpr=l(),_9=a("li"),ybe=a("strong"),Spr=o("xlm"),Rpr=o(" \u2014 "),gQ=a("a"),Ppr=o("TFXLMWithLMHeadModel"),Bpr=o(" (XLM model)"),Ipr=l(),u9=a("li"),Lbe=a("strong"),qpr=o("xlnet"),Npr=o(" \u2014 "),hQ=a("a"),jpr=o("TFXLNetLMHeadModel"),Dpr=o(" (XLNet model)"),Gpr=l(),F(b9.$$.fragment),pNe=l(),Jd=a("h2"),v9=a("a"),xbe=a("span"),F(fL.$$.fragment),Opr=l(),$be=a("span"),Vpr=o("TFAutoModelForImageClassification"),_Ne=l(),er=a("div"),F(mL.$$.fragment),Xpr=l(),Yd=a("p"),zpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" class method or the "),_Q=a("a"),Hpr=o("from_config()"),Upr=o(` class
method.`),Jpr=l(),gL=a("p"),Ypr=o("This class cannot be instantiated directly using "),kbe=a("code"),Kpr=o("__init__()"),Zpr=o(" (throws an error)."),e_r=l(),$t=a("div"),F(hL.$$.fragment),o_r=l(),Sbe=a("p"),r_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t_r=l(),Kd=a("p"),a_r=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),n_r=o("not"),s_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),l_r=o("from_pretrained()"),i_r=o(" to load the model weights."),d_r=l(),F(F9.$$.fragment),c_r=l(),Lr=a("div"),F(pL.$$.fragment),f_r=l(),Pbe=a("p"),m_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),g_r=l(),on=a("p"),h_r=o("The model class to instantiate is selected based on the "),Bbe=a("code"),p_r=o("model_type"),__r=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),u_r=o("pretrained_model_name_or_path"),b_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(":"),T_r=l(),rn=a("ul"),T9=a("li"),Nbe=a("strong"),M_r=o("convnext"),E_r=o(" \u2014 "),bQ=a("a"),C_r=o("TFConvNextForImageClassification"),w_r=o(" (ConvNext model)"),A_r=l(),M9=a("li"),jbe=a("strong"),y_r=o("data2vec-vision"),L_r=o(" \u2014 "),vQ=a("a"),x_r=o("TFData2VecVisionForImageClassification"),$_r=o(" (Data2VecVision model)"),k_r=l(),E9=a("li"),Dbe=a("strong"),S_r=o("swin"),R_r=o(" \u2014 "),FQ=a("a"),P_r=o("TFSwinForImageClassification"),B_r=o(" (Swin model)"),I_r=l(),C9=a("li"),Gbe=a("strong"),q_r=o("vit"),N_r=o(" \u2014 "),TQ=a("a"),j_r=o("TFViTForImageClassification"),D_r=o(" (ViT model)"),G_r=l(),F(w9.$$.fragment),uNe=l(),Zd=a("h2"),A9=a("a"),Obe=a("span"),F(_L.$$.fragment),O_r=l(),Vbe=a("span"),V_r=o("TFAutoModelForMaskedLM"),bNe=l(),or=a("div"),F(uL.$$.fragment),X_r=l(),ec=a("p"),z_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MQ=a("a"),W_r=o("from_pretrained()"),Q_r=o(" class method or the "),EQ=a("a"),H_r=o("from_config()"),U_r=o(` class
method.`),J_r=l(),bL=a("p"),Y_r=o("This class cannot be instantiated directly using "),Xbe=a("code"),K_r=o("__init__()"),Z_r=o(" (throws an error)."),eur=l(),kt=a("div"),F(vL.$$.fragment),our=l(),zbe=a("p"),rur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tur=l(),oc=a("p"),aur=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),nur=o("not"),sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),lur=o("from_pretrained()"),iur=o(" to load the model weights."),dur=l(),F(y9.$$.fragment),cur=l(),xr=a("div"),F(FL.$$.fragment),fur=l(),Qbe=a("p"),mur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gur=l(),tn=a("p"),hur=o("The model class to instantiate is selected based on the "),Hbe=a("code"),pur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),uur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(":"),Tur=l(),ie=a("ul"),L9=a("li"),Ybe=a("strong"),Mur=o("albert"),Eur=o(" \u2014 "),wQ=a("a"),Cur=o("TFAlbertForMaskedLM"),wur=o(" (ALBERT model)"),Aur=l(),x9=a("li"),Kbe=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),AQ=a("a"),xur=o("TFBertForMaskedLM"),$ur=o(" (BERT model)"),kur=l(),$9=a("li"),Zbe=a("strong"),Sur=o("camembert"),Rur=o(" \u2014 "),yQ=a("a"),Pur=o("TFCamembertForMaskedLM"),Bur=o(" (CamemBERT model)"),Iur=l(),k9=a("li"),eve=a("strong"),qur=o("convbert"),Nur=o(" \u2014 "),LQ=a("a"),jur=o("TFConvBertForMaskedLM"),Dur=o(" (ConvBERT model)"),Gur=l(),S9=a("li"),ove=a("strong"),Our=o("deberta"),Vur=o(" \u2014 "),xQ=a("a"),Xur=o("TFDebertaForMaskedLM"),zur=o(" (DeBERTa model)"),Wur=l(),R9=a("li"),rve=a("strong"),Qur=o("deberta-v2"),Hur=o(" \u2014 "),$Q=a("a"),Uur=o("TFDebertaV2ForMaskedLM"),Jur=o(" (DeBERTa-v2 model)"),Yur=l(),P9=a("li"),tve=a("strong"),Kur=o("distilbert"),Zur=o(" \u2014 "),kQ=a("a"),e2r=o("TFDistilBertForMaskedLM"),o2r=o(" (DistilBERT model)"),r2r=l(),B9=a("li"),ave=a("strong"),t2r=o("electra"),a2r=o(" \u2014 "),SQ=a("a"),n2r=o("TFElectraForMaskedLM"),s2r=o(" (ELECTRA model)"),l2r=l(),I9=a("li"),nve=a("strong"),i2r=o("flaubert"),d2r=o(" \u2014 "),RQ=a("a"),c2r=o("TFFlaubertWithLMHeadModel"),f2r=o(" (FlauBERT model)"),m2r=l(),q9=a("li"),sve=a("strong"),g2r=o("funnel"),h2r=o(" \u2014 "),PQ=a("a"),p2r=o("TFFunnelForMaskedLM"),_2r=o(" (Funnel Transformer model)"),u2r=l(),N9=a("li"),lve=a("strong"),b2r=o("layoutlm"),v2r=o(" \u2014 "),BQ=a("a"),F2r=o("TFLayoutLMForMaskedLM"),T2r=o(" (LayoutLM model)"),M2r=l(),j9=a("li"),ive=a("strong"),E2r=o("longformer"),C2r=o(" \u2014 "),IQ=a("a"),w2r=o("TFLongformerForMaskedLM"),A2r=o(" (Longformer model)"),y2r=l(),D9=a("li"),dve=a("strong"),L2r=o("mobilebert"),x2r=o(" \u2014 "),qQ=a("a"),$2r=o("TFMobileBertForMaskedLM"),k2r=o(" (MobileBERT model)"),S2r=l(),G9=a("li"),cve=a("strong"),R2r=o("mpnet"),P2r=o(" \u2014 "),NQ=a("a"),B2r=o("TFMPNetForMaskedLM"),I2r=o(" (MPNet model)"),q2r=l(),O9=a("li"),fve=a("strong"),N2r=o("rembert"),j2r=o(" \u2014 "),jQ=a("a"),D2r=o("TFRemBertForMaskedLM"),G2r=o(" (RemBERT model)"),O2r=l(),V9=a("li"),mve=a("strong"),V2r=o("roberta"),X2r=o(" \u2014 "),DQ=a("a"),z2r=o("TFRobertaForMaskedLM"),W2r=o(" (RoBERTa model)"),Q2r=l(),X9=a("li"),gve=a("strong"),H2r=o("roformer"),U2r=o(" \u2014 "),GQ=a("a"),J2r=o("TFRoFormerForMaskedLM"),Y2r=o(" (RoFormer model)"),K2r=l(),z9=a("li"),hve=a("strong"),Z2r=o("tapas"),e1r=o(" \u2014 "),OQ=a("a"),o1r=o("TFTapasForMaskedLM"),r1r=o(" (TAPAS model)"),t1r=l(),W9=a("li"),pve=a("strong"),a1r=o("xlm"),n1r=o(" \u2014 "),VQ=a("a"),s1r=o("TFXLMWithLMHeadModel"),l1r=o(" (XLM model)"),i1r=l(),Q9=a("li"),_ve=a("strong"),d1r=o("xlm-roberta"),c1r=o(" \u2014 "),XQ=a("a"),f1r=o("TFXLMRobertaForMaskedLM"),m1r=o(" (XLM-RoBERTa model)"),g1r=l(),F(H9.$$.fragment),vNe=l(),rc=a("h2"),U9=a("a"),uve=a("span"),F(TL.$$.fragment),h1r=l(),bve=a("span"),p1r=o("TFAutoModelForSeq2SeqLM"),FNe=l(),rr=a("div"),F(ML.$$.fragment),_1r=l(),tc=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zQ=a("a"),b1r=o("from_pretrained()"),v1r=o(" class method or the "),WQ=a("a"),F1r=o("from_config()"),T1r=o(` class
method.`),M1r=l(),EL=a("p"),E1r=o("This class cannot be instantiated directly using "),vve=a("code"),C1r=o("__init__()"),w1r=o(" (throws an error)."),A1r=l(),St=a("div"),F(CL.$$.fragment),y1r=l(),Fve=a("p"),L1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x1r=l(),ac=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),k1r=o("not"),S1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),R1r=o("from_pretrained()"),P1r=o(" to load the model weights."),B1r=l(),F(J9.$$.fragment),I1r=l(),$r=a("div"),F(wL.$$.fragment),q1r=l(),Mve=a("p"),N1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j1r=l(),an=a("p"),D1r=o("The model class to instantiate is selected based on the "),Eve=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),z1r=o("pretrained_model_name_or_path"),W1r=o(":"),Q1r=l(),ye=a("ul"),Y9=a("li"),Ave=a("strong"),H1r=o("bart"),U1r=o(" \u2014 "),HQ=a("a"),J1r=o("TFBartForConditionalGeneration"),Y1r=o(" (BART model)"),K1r=l(),K9=a("li"),yve=a("strong"),Z1r=o("blenderbot"),ebr=o(" \u2014 "),UQ=a("a"),obr=o("TFBlenderbotForConditionalGeneration"),rbr=o(" (Blenderbot model)"),tbr=l(),Z9=a("li"),Lve=a("strong"),abr=o("blenderbot-small"),nbr=o(" \u2014 "),JQ=a("a"),sbr=o("TFBlenderbotSmallForConditionalGeneration"),lbr=o(" (BlenderbotSmall model)"),ibr=l(),eM=a("li"),xve=a("strong"),dbr=o("encoder-decoder"),cbr=o(" \u2014 "),YQ=a("a"),fbr=o("TFEncoderDecoderModel"),mbr=o(" (Encoder decoder model)"),gbr=l(),oM=a("li"),$ve=a("strong"),hbr=o("led"),pbr=o(" \u2014 "),KQ=a("a"),_br=o("TFLEDForConditionalGeneration"),ubr=o(" (LED model)"),bbr=l(),rM=a("li"),kve=a("strong"),vbr=o("marian"),Fbr=o(" \u2014 "),ZQ=a("a"),Tbr=o("TFMarianMTModel"),Mbr=o(" (Marian model)"),Ebr=l(),tM=a("li"),Sve=a("strong"),Cbr=o("mbart"),wbr=o(" \u2014 "),eH=a("a"),Abr=o("TFMBartForConditionalGeneration"),ybr=o(" (mBART model)"),Lbr=l(),aM=a("li"),Rve=a("strong"),xbr=o("mt5"),$br=o(" \u2014 "),oH=a("a"),kbr=o("TFMT5ForConditionalGeneration"),Sbr=o(" (mT5 model)"),Rbr=l(),nM=a("li"),Pve=a("strong"),Pbr=o("pegasus"),Bbr=o(" \u2014 "),rH=a("a"),Ibr=o("TFPegasusForConditionalGeneration"),qbr=o(" (Pegasus model)"),Nbr=l(),sM=a("li"),Bve=a("strong"),jbr=o("t5"),Dbr=o(" \u2014 "),tH=a("a"),Gbr=o("TFT5ForConditionalGeneration"),Obr=o(" (T5 model)"),Vbr=l(),F(lM.$$.fragment),TNe=l(),nc=a("h2"),iM=a("a"),Ive=a("span"),F(AL.$$.fragment),Xbr=l(),qve=a("span"),zbr=o("TFAutoModelForSequenceClassification"),MNe=l(),tr=a("div"),F(yL.$$.fragment),Wbr=l(),sc=a("p"),Qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aH=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" class method or the "),nH=a("a"),Jbr=o("from_config()"),Ybr=o(` class
method.`),Kbr=l(),LL=a("p"),Zbr=o("This class cannot be instantiated directly using "),Nve=a("code"),evr=o("__init__()"),ovr=o(" (throws an error)."),rvr=l(),Rt=a("div"),F(xL.$$.fragment),tvr=l(),jve=a("p"),avr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nvr=l(),lc=a("p"),svr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),lvr=o("not"),ivr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),dvr=o("from_pretrained()"),cvr=o(" to load the model weights."),fvr=l(),F(dM.$$.fragment),mvr=l(),kr=a("div"),F($L.$$.fragment),gvr=l(),Gve=a("p"),hvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pvr=l(),nn=a("p"),_vr=o("The model class to instantiate is selected based on the "),Ove=a("code"),uvr=o("model_type"),bvr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),vvr=o("pretrained_model_name_or_path"),Fvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),Tvr=o("pretrained_model_name_or_path"),Mvr=o(":"),Evr=l(),ee=a("ul"),cM=a("li"),zve=a("strong"),Cvr=o("albert"),wvr=o(" \u2014 "),lH=a("a"),Avr=o("TFAlbertForSequenceClassification"),yvr=o(" (ALBERT model)"),Lvr=l(),fM=a("li"),Wve=a("strong"),xvr=o("bert"),$vr=o(" \u2014 "),iH=a("a"),kvr=o("TFBertForSequenceClassification"),Svr=o(" (BERT model)"),Rvr=l(),mM=a("li"),Qve=a("strong"),Pvr=o("camembert"),Bvr=o(" \u2014 "),dH=a("a"),Ivr=o("TFCamembertForSequenceClassification"),qvr=o(" (CamemBERT model)"),Nvr=l(),gM=a("li"),Hve=a("strong"),jvr=o("convbert"),Dvr=o(" \u2014 "),cH=a("a"),Gvr=o("TFConvBertForSequenceClassification"),Ovr=o(" (ConvBERT model)"),Vvr=l(),hM=a("li"),Uve=a("strong"),Xvr=o("ctrl"),zvr=o(" \u2014 "),fH=a("a"),Wvr=o("TFCTRLForSequenceClassification"),Qvr=o(" (CTRL model)"),Hvr=l(),pM=a("li"),Jve=a("strong"),Uvr=o("deberta"),Jvr=o(" \u2014 "),mH=a("a"),Yvr=o("TFDebertaForSequenceClassification"),Kvr=o(" (DeBERTa model)"),Zvr=l(),_M=a("li"),Yve=a("strong"),eFr=o("deberta-v2"),oFr=o(" \u2014 "),gH=a("a"),rFr=o("TFDebertaV2ForSequenceClassification"),tFr=o(" (DeBERTa-v2 model)"),aFr=l(),uM=a("li"),Kve=a("strong"),nFr=o("distilbert"),sFr=o(" \u2014 "),hH=a("a"),lFr=o("TFDistilBertForSequenceClassification"),iFr=o(" (DistilBERT model)"),dFr=l(),bM=a("li"),Zve=a("strong"),cFr=o("electra"),fFr=o(" \u2014 "),pH=a("a"),mFr=o("TFElectraForSequenceClassification"),gFr=o(" (ELECTRA model)"),hFr=l(),vM=a("li"),eFe=a("strong"),pFr=o("flaubert"),_Fr=o(" \u2014 "),_H=a("a"),uFr=o("TFFlaubertForSequenceClassification"),bFr=o(" (FlauBERT model)"),vFr=l(),FM=a("li"),oFe=a("strong"),FFr=o("funnel"),TFr=o(" \u2014 "),uH=a("a"),MFr=o("TFFunnelForSequenceClassification"),EFr=o(" (Funnel Transformer model)"),CFr=l(),TM=a("li"),rFe=a("strong"),wFr=o("gpt2"),AFr=o(" \u2014 "),bH=a("a"),yFr=o("TFGPT2ForSequenceClassification"),LFr=o(" (OpenAI GPT-2 model)"),xFr=l(),MM=a("li"),tFe=a("strong"),$Fr=o("gptj"),kFr=o(" \u2014 "),vH=a("a"),SFr=o("TFGPTJForSequenceClassification"),RFr=o(" (GPT-J model)"),PFr=l(),EM=a("li"),aFe=a("strong"),BFr=o("layoutlm"),IFr=o(" \u2014 "),FH=a("a"),qFr=o("TFLayoutLMForSequenceClassification"),NFr=o(" (LayoutLM model)"),jFr=l(),CM=a("li"),nFe=a("strong"),DFr=o("longformer"),GFr=o(" \u2014 "),TH=a("a"),OFr=o("TFLongformerForSequenceClassification"),VFr=o(" (Longformer model)"),XFr=l(),wM=a("li"),sFe=a("strong"),zFr=o("mobilebert"),WFr=o(" \u2014 "),MH=a("a"),QFr=o("TFMobileBertForSequenceClassification"),HFr=o(" (MobileBERT model)"),UFr=l(),AM=a("li"),lFe=a("strong"),JFr=o("mpnet"),YFr=o(" \u2014 "),EH=a("a"),KFr=o("TFMPNetForSequenceClassification"),ZFr=o(" (MPNet model)"),e6r=l(),yM=a("li"),iFe=a("strong"),o6r=o("openai-gpt"),r6r=o(" \u2014 "),CH=a("a"),t6r=o("TFOpenAIGPTForSequenceClassification"),a6r=o(" (OpenAI GPT model)"),n6r=l(),LM=a("li"),dFe=a("strong"),s6r=o("rembert"),l6r=o(" \u2014 "),wH=a("a"),i6r=o("TFRemBertForSequenceClassification"),d6r=o(" (RemBERT model)"),c6r=l(),xM=a("li"),cFe=a("strong"),f6r=o("roberta"),m6r=o(" \u2014 "),AH=a("a"),g6r=o("TFRobertaForSequenceClassification"),h6r=o(" (RoBERTa model)"),p6r=l(),$M=a("li"),fFe=a("strong"),_6r=o("roformer"),u6r=o(" \u2014 "),yH=a("a"),b6r=o("TFRoFormerForSequenceClassification"),v6r=o(" (RoFormer model)"),F6r=l(),kM=a("li"),mFe=a("strong"),T6r=o("tapas"),M6r=o(" \u2014 "),LH=a("a"),E6r=o("TFTapasForSequenceClassification"),C6r=o(" (TAPAS model)"),w6r=l(),SM=a("li"),gFe=a("strong"),A6r=o("transfo-xl"),y6r=o(" \u2014 "),xH=a("a"),L6r=o("TFTransfoXLForSequenceClassification"),x6r=o(" (Transformer-XL model)"),$6r=l(),RM=a("li"),hFe=a("strong"),k6r=o("xlm"),S6r=o(" \u2014 "),$H=a("a"),R6r=o("TFXLMForSequenceClassification"),P6r=o(" (XLM model)"),B6r=l(),PM=a("li"),pFe=a("strong"),I6r=o("xlm-roberta"),q6r=o(" \u2014 "),kH=a("a"),N6r=o("TFXLMRobertaForSequenceClassification"),j6r=o(" (XLM-RoBERTa model)"),D6r=l(),BM=a("li"),_Fe=a("strong"),G6r=o("xlnet"),O6r=o(" \u2014 "),SH=a("a"),V6r=o("TFXLNetForSequenceClassification"),X6r=o(" (XLNet model)"),z6r=l(),F(IM.$$.fragment),ENe=l(),ic=a("h2"),qM=a("a"),uFe=a("span"),F(kL.$$.fragment),W6r=l(),bFe=a("span"),Q6r=o("TFAutoModelForMultipleChoice"),CNe=l(),ar=a("div"),F(SL.$$.fragment),H6r=l(),dc=a("p"),U6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RH=a("a"),J6r=o("from_pretrained()"),Y6r=o(" class method or the "),PH=a("a"),K6r=o("from_config()"),Z6r=o(` class
method.`),eTr=l(),RL=a("p"),oTr=o("This class cannot be instantiated directly using "),vFe=a("code"),rTr=o("__init__()"),tTr=o(" (throws an error)."),aTr=l(),Pt=a("div"),F(PL.$$.fragment),nTr=l(),FFe=a("p"),sTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lTr=l(),cc=a("p"),iTr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),dTr=o("not"),cTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),fTr=o("from_pretrained()"),mTr=o(" to load the model weights."),gTr=l(),F(NM.$$.fragment),hTr=l(),Sr=a("div"),F(BL.$$.fragment),pTr=l(),MFe=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uTr=l(),sn=a("p"),bTr=o("The model class to instantiate is selected based on the "),EFe=a("code"),vTr=o("model_type"),FTr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(":"),wTr=l(),pe=a("ul"),jM=a("li"),AFe=a("strong"),ATr=o("albert"),yTr=o(" \u2014 "),IH=a("a"),LTr=o("TFAlbertForMultipleChoice"),xTr=o(" (ALBERT model)"),$Tr=l(),DM=a("li"),yFe=a("strong"),kTr=o("bert"),STr=o(" \u2014 "),qH=a("a"),RTr=o("TFBertForMultipleChoice"),PTr=o(" (BERT model)"),BTr=l(),GM=a("li"),LFe=a("strong"),ITr=o("camembert"),qTr=o(" \u2014 "),NH=a("a"),NTr=o("TFCamembertForMultipleChoice"),jTr=o(" (CamemBERT model)"),DTr=l(),OM=a("li"),xFe=a("strong"),GTr=o("convbert"),OTr=o(" \u2014 "),jH=a("a"),VTr=o("TFConvBertForMultipleChoice"),XTr=o(" (ConvBERT model)"),zTr=l(),VM=a("li"),$Fe=a("strong"),WTr=o("distilbert"),QTr=o(" \u2014 "),DH=a("a"),HTr=o("TFDistilBertForMultipleChoice"),UTr=o(" (DistilBERT model)"),JTr=l(),XM=a("li"),kFe=a("strong"),YTr=o("electra"),KTr=o(" \u2014 "),GH=a("a"),ZTr=o("TFElectraForMultipleChoice"),e7r=o(" (ELECTRA model)"),o7r=l(),zM=a("li"),SFe=a("strong"),r7r=o("flaubert"),t7r=o(" \u2014 "),OH=a("a"),a7r=o("TFFlaubertForMultipleChoice"),n7r=o(" (FlauBERT model)"),s7r=l(),WM=a("li"),RFe=a("strong"),l7r=o("funnel"),i7r=o(" \u2014 "),VH=a("a"),d7r=o("TFFunnelForMultipleChoice"),c7r=o(" (Funnel Transformer model)"),f7r=l(),QM=a("li"),PFe=a("strong"),m7r=o("longformer"),g7r=o(" \u2014 "),XH=a("a"),h7r=o("TFLongformerForMultipleChoice"),p7r=o(" (Longformer model)"),_7r=l(),HM=a("li"),BFe=a("strong"),u7r=o("mobilebert"),b7r=o(" \u2014 "),zH=a("a"),v7r=o("TFMobileBertForMultipleChoice"),F7r=o(" (MobileBERT model)"),T7r=l(),UM=a("li"),IFe=a("strong"),M7r=o("mpnet"),E7r=o(" \u2014 "),WH=a("a"),C7r=o("TFMPNetForMultipleChoice"),w7r=o(" (MPNet model)"),A7r=l(),JM=a("li"),qFe=a("strong"),y7r=o("rembert"),L7r=o(" \u2014 "),QH=a("a"),x7r=o("TFRemBertForMultipleChoice"),$7r=o(" (RemBERT model)"),k7r=l(),YM=a("li"),NFe=a("strong"),S7r=o("roberta"),R7r=o(" \u2014 "),HH=a("a"),P7r=o("TFRobertaForMultipleChoice"),B7r=o(" (RoBERTa model)"),I7r=l(),KM=a("li"),jFe=a("strong"),q7r=o("roformer"),N7r=o(" \u2014 "),UH=a("a"),j7r=o("TFRoFormerForMultipleChoice"),D7r=o(" (RoFormer model)"),G7r=l(),ZM=a("li"),DFe=a("strong"),O7r=o("xlm"),V7r=o(" \u2014 "),JH=a("a"),X7r=o("TFXLMForMultipleChoice"),z7r=o(" (XLM model)"),W7r=l(),e4=a("li"),GFe=a("strong"),Q7r=o("xlm-roberta"),H7r=o(" \u2014 "),YH=a("a"),U7r=o("TFXLMRobertaForMultipleChoice"),J7r=o(" (XLM-RoBERTa model)"),Y7r=l(),o4=a("li"),OFe=a("strong"),K7r=o("xlnet"),Z7r=o(" \u2014 "),KH=a("a"),e9r=o("TFXLNetForMultipleChoice"),o9r=o(" (XLNet model)"),r9r=l(),F(r4.$$.fragment),wNe=l(),fc=a("h2"),t4=a("a"),VFe=a("span"),F(IL.$$.fragment),t9r=l(),XFe=a("span"),a9r=o("TFAutoModelForNextSentencePrediction"),ANe=l(),nr=a("div"),F(qL.$$.fragment),n9r=l(),mc=a("p"),s9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=a("a"),l9r=o("from_pretrained()"),i9r=o(" class method or the "),eU=a("a"),d9r=o("from_config()"),c9r=o(` class
method.`),f9r=l(),NL=a("p"),m9r=o("This class cannot be instantiated directly using "),zFe=a("code"),g9r=o("__init__()"),h9r=o(" (throws an error)."),p9r=l(),Bt=a("div"),F(jL.$$.fragment),_9r=l(),WFe=a("p"),u9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b9r=l(),gc=a("p"),v9r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),F9r=o("not"),T9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),M9r=o("from_pretrained()"),E9r=o(" to load the model weights."),C9r=l(),F(a4.$$.fragment),w9r=l(),Rr=a("div"),F(DL.$$.fragment),A9r=l(),HFe=a("p"),y9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),L9r=l(),ln=a("p"),x9r=o("The model class to instantiate is selected based on the "),UFe=a("code"),$9r=o("model_type"),k9r=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),S9r=o("pretrained_model_name_or_path"),R9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),P9r=o("pretrained_model_name_or_path"),B9r=o(":"),I9r=l(),GL=a("ul"),n4=a("li"),KFe=a("strong"),q9r=o("bert"),N9r=o(" \u2014 "),rU=a("a"),j9r=o("TFBertForNextSentencePrediction"),D9r=o(" (BERT model)"),G9r=l(),s4=a("li"),ZFe=a("strong"),O9r=o("mobilebert"),V9r=o(" \u2014 "),tU=a("a"),X9r=o("TFMobileBertForNextSentencePrediction"),z9r=o(" (MobileBERT model)"),W9r=l(),F(l4.$$.fragment),yNe=l(),hc=a("h2"),i4=a("a"),e6e=a("span"),F(OL.$$.fragment),Q9r=l(),o6e=a("span"),H9r=o("TFAutoModelForTableQuestionAnswering"),LNe=l(),sr=a("div"),F(VL.$$.fragment),U9r=l(),pc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aU=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),nU=a("a"),Z9r=o("from_config()"),eMr=o(` class
method.`),oMr=l(),XL=a("p"),rMr=o("This class cannot be instantiated directly using "),r6e=a("code"),tMr=o("__init__()"),aMr=o(" (throws an error)."),nMr=l(),It=a("div"),F(zL.$$.fragment),sMr=l(),t6e=a("p"),lMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iMr=l(),_c=a("p"),dMr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),cMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),mMr=o("from_pretrained()"),gMr=o(" to load the model weights."),hMr=l(),F(d4.$$.fragment),pMr=l(),Pr=a("div"),F(WL.$$.fragment),_Mr=l(),n6e=a("p"),uMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bMr=l(),dn=a("p"),vMr=o("The model class to instantiate is selected based on the "),s6e=a("code"),FMr=o("model_type"),TMr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(":"),AMr=l(),d6e=a("ul"),c4=a("li"),c6e=a("strong"),yMr=o("tapas"),LMr=o(" \u2014 "),lU=a("a"),xMr=o("TFTapasForQuestionAnswering"),$Mr=o(" (TAPAS model)"),kMr=l(),F(f4.$$.fragment),xNe=l(),uc=a("h2"),m4=a("a"),f6e=a("span"),F(QL.$$.fragment),SMr=l(),m6e=a("span"),RMr=o("TFAutoModelForTokenClassification"),$Ne=l(),lr=a("div"),F(HL.$$.fragment),PMr=l(),bc=a("p"),BMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iU=a("a"),IMr=o("from_pretrained()"),qMr=o(" class method or the "),dU=a("a"),NMr=o("from_config()"),jMr=o(` class
method.`),DMr=l(),UL=a("p"),GMr=o("This class cannot be instantiated directly using "),g6e=a("code"),OMr=o("__init__()"),VMr=o(" (throws an error)."),XMr=l(),qt=a("div"),F(JL.$$.fragment),zMr=l(),h6e=a("p"),WMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QMr=l(),vc=a("p"),HMr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),UMr=o("not"),JMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),YMr=o("from_pretrained()"),KMr=o(" to load the model weights."),ZMr=l(),F(g4.$$.fragment),e4r=l(),Br=a("div"),F(YL.$$.fragment),o4r=l(),_6e=a("p"),r4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t4r=l(),cn=a("p"),a4r=o("The model class to instantiate is selected based on the "),u6e=a("code"),n4r=o("model_type"),s4r=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(":"),f4r=l(),de=a("ul"),h4=a("li"),F6e=a("strong"),m4r=o("albert"),g4r=o(" \u2014 "),fU=a("a"),h4r=o("TFAlbertForTokenClassification"),p4r=o(" (ALBERT model)"),_4r=l(),p4=a("li"),T6e=a("strong"),u4r=o("bert"),b4r=o(" \u2014 "),mU=a("a"),v4r=o("TFBertForTokenClassification"),F4r=o(" (BERT model)"),T4r=l(),_4=a("li"),M6e=a("strong"),M4r=o("camembert"),E4r=o(" \u2014 "),gU=a("a"),C4r=o("TFCamembertForTokenClassification"),w4r=o(" (CamemBERT model)"),A4r=l(),u4=a("li"),E6e=a("strong"),y4r=o("convbert"),L4r=o(" \u2014 "),hU=a("a"),x4r=o("TFConvBertForTokenClassification"),$4r=o(" (ConvBERT model)"),k4r=l(),b4=a("li"),C6e=a("strong"),S4r=o("deberta"),R4r=o(" \u2014 "),pU=a("a"),P4r=o("TFDebertaForTokenClassification"),B4r=o(" (DeBERTa model)"),I4r=l(),v4=a("li"),w6e=a("strong"),q4r=o("deberta-v2"),N4r=o(" \u2014 "),_U=a("a"),j4r=o("TFDebertaV2ForTokenClassification"),D4r=o(" (DeBERTa-v2 model)"),G4r=l(),F4=a("li"),A6e=a("strong"),O4r=o("distilbert"),V4r=o(" \u2014 "),uU=a("a"),X4r=o("TFDistilBertForTokenClassification"),z4r=o(" (DistilBERT model)"),W4r=l(),T4=a("li"),y6e=a("strong"),Q4r=o("electra"),H4r=o(" \u2014 "),bU=a("a"),U4r=o("TFElectraForTokenClassification"),J4r=o(" (ELECTRA model)"),Y4r=l(),M4=a("li"),L6e=a("strong"),K4r=o("flaubert"),Z4r=o(" \u2014 "),vU=a("a"),eEr=o("TFFlaubertForTokenClassification"),oEr=o(" (FlauBERT model)"),rEr=l(),E4=a("li"),x6e=a("strong"),tEr=o("funnel"),aEr=o(" \u2014 "),FU=a("a"),nEr=o("TFFunnelForTokenClassification"),sEr=o(" (Funnel Transformer model)"),lEr=l(),C4=a("li"),$6e=a("strong"),iEr=o("layoutlm"),dEr=o(" \u2014 "),TU=a("a"),cEr=o("TFLayoutLMForTokenClassification"),fEr=o(" (LayoutLM model)"),mEr=l(),w4=a("li"),k6e=a("strong"),gEr=o("longformer"),hEr=o(" \u2014 "),MU=a("a"),pEr=o("TFLongformerForTokenClassification"),_Er=o(" (Longformer model)"),uEr=l(),A4=a("li"),S6e=a("strong"),bEr=o("mobilebert"),vEr=o(" \u2014 "),EU=a("a"),FEr=o("TFMobileBertForTokenClassification"),TEr=o(" (MobileBERT model)"),MEr=l(),y4=a("li"),R6e=a("strong"),EEr=o("mpnet"),CEr=o(" \u2014 "),CU=a("a"),wEr=o("TFMPNetForTokenClassification"),AEr=o(" (MPNet model)"),yEr=l(),L4=a("li"),P6e=a("strong"),LEr=o("rembert"),xEr=o(" \u2014 "),wU=a("a"),$Er=o("TFRemBertForTokenClassification"),kEr=o(" (RemBERT model)"),SEr=l(),x4=a("li"),B6e=a("strong"),REr=o("roberta"),PEr=o(" \u2014 "),AU=a("a"),BEr=o("TFRobertaForTokenClassification"),IEr=o(" (RoBERTa model)"),qEr=l(),$4=a("li"),I6e=a("strong"),NEr=o("roformer"),jEr=o(" \u2014 "),yU=a("a"),DEr=o("TFRoFormerForTokenClassification"),GEr=o(" (RoFormer model)"),OEr=l(),k4=a("li"),q6e=a("strong"),VEr=o("xlm"),XEr=o(" \u2014 "),LU=a("a"),zEr=o("TFXLMForTokenClassification"),WEr=o(" (XLM model)"),QEr=l(),S4=a("li"),N6e=a("strong"),HEr=o("xlm-roberta"),UEr=o(" \u2014 "),xU=a("a"),JEr=o("TFXLMRobertaForTokenClassification"),YEr=o(" (XLM-RoBERTa model)"),KEr=l(),R4=a("li"),j6e=a("strong"),ZEr=o("xlnet"),e5r=o(" \u2014 "),$U=a("a"),o5r=o("TFXLNetForTokenClassification"),r5r=o(" (XLNet model)"),t5r=l(),F(P4.$$.fragment),kNe=l(),Fc=a("h2"),B4=a("a"),D6e=a("span"),F(KL.$$.fragment),a5r=l(),G6e=a("span"),n5r=o("TFAutoModelForQuestionAnswering"),SNe=l(),ir=a("div"),F(ZL.$$.fragment),s5r=l(),Tc=a("p"),l5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kU=a("a"),i5r=o("from_pretrained()"),d5r=o(" class method or the "),SU=a("a"),c5r=o("from_config()"),f5r=o(` class
method.`),m5r=l(),e8=a("p"),g5r=o("This class cannot be instantiated directly using "),O6e=a("code"),h5r=o("__init__()"),p5r=o(" (throws an error)."),_5r=l(),Nt=a("div"),F(o8.$$.fragment),u5r=l(),V6e=a("p"),b5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v5r=l(),Mc=a("p"),F5r=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),T5r=o("not"),M5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),E5r=o("from_pretrained()"),C5r=o(" to load the model weights."),w5r=l(),F(I4.$$.fragment),A5r=l(),Ir=a("div"),F(r8.$$.fragment),y5r=l(),z6e=a("p"),L5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x5r=l(),fn=a("p"),$5r=o("The model class to instantiate is selected based on the "),W6e=a("code"),k5r=o("model_type"),S5r=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),B5r=o("pretrained_model_name_or_path"),I5r=o(":"),q5r=l(),ce=a("ul"),q4=a("li"),U6e=a("strong"),N5r=o("albert"),j5r=o(" \u2014 "),PU=a("a"),D5r=o("TFAlbertForQuestionAnswering"),G5r=o(" (ALBERT model)"),O5r=l(),N4=a("li"),J6e=a("strong"),V5r=o("bert"),X5r=o(" \u2014 "),BU=a("a"),z5r=o("TFBertForQuestionAnswering"),W5r=o(" (BERT model)"),Q5r=l(),j4=a("li"),Y6e=a("strong"),H5r=o("camembert"),U5r=o(" \u2014 "),IU=a("a"),J5r=o("TFCamembertForQuestionAnswering"),Y5r=o(" (CamemBERT model)"),K5r=l(),D4=a("li"),K6e=a("strong"),Z5r=o("convbert"),eCr=o(" \u2014 "),qU=a("a"),oCr=o("TFConvBertForQuestionAnswering"),rCr=o(" (ConvBERT model)"),tCr=l(),G4=a("li"),Z6e=a("strong"),aCr=o("deberta"),nCr=o(" \u2014 "),NU=a("a"),sCr=o("TFDebertaForQuestionAnswering"),lCr=o(" (DeBERTa model)"),iCr=l(),O4=a("li"),eTe=a("strong"),dCr=o("deberta-v2"),cCr=o(" \u2014 "),jU=a("a"),fCr=o("TFDebertaV2ForQuestionAnswering"),mCr=o(" (DeBERTa-v2 model)"),gCr=l(),V4=a("li"),oTe=a("strong"),hCr=o("distilbert"),pCr=o(" \u2014 "),DU=a("a"),_Cr=o("TFDistilBertForQuestionAnswering"),uCr=o(" (DistilBERT model)"),bCr=l(),X4=a("li"),rTe=a("strong"),vCr=o("electra"),FCr=o(" \u2014 "),GU=a("a"),TCr=o("TFElectraForQuestionAnswering"),MCr=o(" (ELECTRA model)"),ECr=l(),z4=a("li"),tTe=a("strong"),CCr=o("flaubert"),wCr=o(" \u2014 "),OU=a("a"),ACr=o("TFFlaubertForQuestionAnsweringSimple"),yCr=o(" (FlauBERT model)"),LCr=l(),W4=a("li"),aTe=a("strong"),xCr=o("funnel"),$Cr=o(" \u2014 "),VU=a("a"),kCr=o("TFFunnelForQuestionAnswering"),SCr=o(" (Funnel Transformer model)"),RCr=l(),Q4=a("li"),nTe=a("strong"),PCr=o("gptj"),BCr=o(" \u2014 "),XU=a("a"),ICr=o("TFGPTJForQuestionAnswering"),qCr=o(" (GPT-J model)"),NCr=l(),H4=a("li"),sTe=a("strong"),jCr=o("longformer"),DCr=o(" \u2014 "),zU=a("a"),GCr=o("TFLongformerForQuestionAnswering"),OCr=o(" (Longformer model)"),VCr=l(),U4=a("li"),lTe=a("strong"),XCr=o("mobilebert"),zCr=o(" \u2014 "),WU=a("a"),WCr=o("TFMobileBertForQuestionAnswering"),QCr=o(" (MobileBERT model)"),HCr=l(),J4=a("li"),iTe=a("strong"),UCr=o("mpnet"),JCr=o(" \u2014 "),QU=a("a"),YCr=o("TFMPNetForQuestionAnswering"),KCr=o(" (MPNet model)"),ZCr=l(),Y4=a("li"),dTe=a("strong"),e3r=o("rembert"),o3r=o(" \u2014 "),HU=a("a"),r3r=o("TFRemBertForQuestionAnswering"),t3r=o(" (RemBERT model)"),a3r=l(),K4=a("li"),cTe=a("strong"),n3r=o("roberta"),s3r=o(" \u2014 "),UU=a("a"),l3r=o("TFRobertaForQuestionAnswering"),i3r=o(" (RoBERTa model)"),d3r=l(),Z4=a("li"),fTe=a("strong"),c3r=o("roformer"),f3r=o(" \u2014 "),JU=a("a"),m3r=o("TFRoFormerForQuestionAnswering"),g3r=o(" (RoFormer model)"),h3r=l(),eE=a("li"),mTe=a("strong"),p3r=o("xlm"),_3r=o(" \u2014 "),YU=a("a"),u3r=o("TFXLMForQuestionAnsweringSimple"),b3r=o(" (XLM model)"),v3r=l(),oE=a("li"),gTe=a("strong"),F3r=o("xlm-roberta"),T3r=o(" \u2014 "),KU=a("a"),M3r=o("TFXLMRobertaForQuestionAnswering"),E3r=o(" (XLM-RoBERTa model)"),C3r=l(),rE=a("li"),hTe=a("strong"),w3r=o("xlnet"),A3r=o(" \u2014 "),ZU=a("a"),y3r=o("TFXLNetForQuestionAnsweringSimple"),L3r=o(" (XLNet model)"),x3r=l(),F(tE.$$.fragment),RNe=l(),Ec=a("h2"),aE=a("a"),pTe=a("span"),F(t8.$$.fragment),$3r=l(),_Te=a("span"),k3r=o("TFAutoModelForVision2Seq"),PNe=l(),dr=a("div"),F(a8.$$.fragment),S3r=l(),Cc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eJ=a("a"),P3r=o("from_pretrained()"),B3r=o(" class method or the "),oJ=a("a"),I3r=o("from_config()"),q3r=o(` class
method.`),N3r=l(),n8=a("p"),j3r=o("This class cannot be instantiated directly using "),uTe=a("code"),D3r=o("__init__()"),G3r=o(" (throws an error)."),O3r=l(),jt=a("div"),F(s8.$$.fragment),V3r=l(),bTe=a("p"),X3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z3r=l(),wc=a("p"),W3r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),Q3r=o("not"),H3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),U3r=o("from_pretrained()"),J3r=o(" to load the model weights."),Y3r=l(),F(nE.$$.fragment),K3r=l(),qr=a("div"),F(l8.$$.fragment),Z3r=l(),FTe=a("p"),ewr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),owr=l(),mn=a("p"),rwr=o("The model class to instantiate is selected based on the "),TTe=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),CTe=a("ul"),sE=a("li"),wTe=a("strong"),cwr=o("vision-encoder-decoder"),fwr=o(" \u2014 "),tJ=a("a"),mwr=o("TFVisionEncoderDecoderModel"),gwr=o(" (Vision Encoder decoder model)"),hwr=l(),F(lE.$$.fragment),BNe=l(),Ac=a("h2"),iE=a("a"),ATe=a("span"),F(i8.$$.fragment),pwr=l(),yTe=a("span"),_wr=o("TFAutoModelForSpeechSeq2Seq"),INe=l(),cr=a("div"),F(d8.$$.fragment),uwr=l(),yc=a("p"),bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aJ=a("a"),vwr=o("from_pretrained()"),Fwr=o(" class method or the "),nJ=a("a"),Twr=o("from_config()"),Mwr=o(` class
method.`),Ewr=l(),c8=a("p"),Cwr=o("This class cannot be instantiated directly using "),LTe=a("code"),wwr=o("__init__()"),Awr=o(" (throws an error)."),ywr=l(),Dt=a("div"),F(f8.$$.fragment),Lwr=l(),xTe=a("p"),xwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$wr=l(),Lc=a("p"),kwr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),Swr=o("not"),Rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),Pwr=o("from_pretrained()"),Bwr=o(" to load the model weights."),Iwr=l(),F(dE.$$.fragment),qwr=l(),Nr=a("div"),F(m8.$$.fragment),Nwr=l(),kTe=a("p"),jwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dwr=l(),gn=a("p"),Gwr=o("The model class to instantiate is selected based on the "),STe=a("code"),Owr=o("model_type"),Vwr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),Xwr=o("pretrained_model_name_or_path"),zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),Wwr=o("pretrained_model_name_or_path"),Qwr=o(":"),Hwr=l(),BTe=a("ul"),cE=a("li"),ITe=a("strong"),Uwr=o("speech_to_text"),Jwr=o(" \u2014 "),lJ=a("a"),Ywr=o("TFSpeech2TextForConditionalGeneration"),Kwr=o(" (Speech2Text model)"),Zwr=l(),F(fE.$$.fragment),qNe=l(),xc=a("h2"),mE=a("a"),qTe=a("span"),F(g8.$$.fragment),e0r=l(),NTe=a("span"),o0r=o("FlaxAutoModel"),NNe=l(),fr=a("div"),F(h8.$$.fragment),r0r=l(),$c=a("p"),t0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iJ=a("a"),a0r=o("from_pretrained()"),n0r=o(" class method or the "),dJ=a("a"),s0r=o("from_config()"),l0r=o(` class
method.`),i0r=l(),p8=a("p"),d0r=o("This class cannot be instantiated directly using "),jTe=a("code"),c0r=o("__init__()"),f0r=o(" (throws an error)."),m0r=l(),Gt=a("div"),F(_8.$$.fragment),g0r=l(),DTe=a("p"),h0r=o("Instantiates one of the base model classes of the library from a configuration."),p0r=l(),kc=a("p"),_0r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),u0r=o("not"),b0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),v0r=o("from_pretrained()"),F0r=o(" to load the model weights."),T0r=l(),F(gE.$$.fragment),M0r=l(),jr=a("div"),F(u8.$$.fragment),E0r=l(),OTe=a("p"),C0r=o("Instantiate one of the base model classes of the library from a pretrained model."),w0r=l(),hn=a("p"),A0r=o("The model class to instantiate is selected based on the "),VTe=a("code"),y0r=o("model_type"),L0r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),x0r=o("pretrained_model_name_or_path"),$0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),k0r=o("pretrained_model_name_or_path"),S0r=o(":"),R0r=l(),oe=a("ul"),hE=a("li"),WTe=a("strong"),P0r=o("albert"),B0r=o(" \u2014 "),fJ=a("a"),I0r=o("FlaxAlbertModel"),q0r=o(" (ALBERT model)"),N0r=l(),pE=a("li"),QTe=a("strong"),j0r=o("bart"),D0r=o(" \u2014 "),mJ=a("a"),G0r=o("FlaxBartModel"),O0r=o(" (BART model)"),V0r=l(),_E=a("li"),HTe=a("strong"),X0r=o("beit"),z0r=o(" \u2014 "),gJ=a("a"),W0r=o("FlaxBeitModel"),Q0r=o(" (BEiT model)"),H0r=l(),uE=a("li"),UTe=a("strong"),U0r=o("bert"),J0r=o(" \u2014 "),hJ=a("a"),Y0r=o("FlaxBertModel"),K0r=o(" (BERT model)"),Z0r=l(),bE=a("li"),JTe=a("strong"),eAr=o("big_bird"),oAr=o(" \u2014 "),pJ=a("a"),rAr=o("FlaxBigBirdModel"),tAr=o(" (BigBird model)"),aAr=l(),vE=a("li"),YTe=a("strong"),nAr=o("blenderbot"),sAr=o(" \u2014 "),_J=a("a"),lAr=o("FlaxBlenderbotModel"),iAr=o(" (Blenderbot model)"),dAr=l(),FE=a("li"),KTe=a("strong"),cAr=o("blenderbot-small"),fAr=o(" \u2014 "),uJ=a("a"),mAr=o("FlaxBlenderbotSmallModel"),gAr=o(" (BlenderbotSmall model)"),hAr=l(),TE=a("li"),ZTe=a("strong"),pAr=o("clip"),_Ar=o(" \u2014 "),bJ=a("a"),uAr=o("FlaxCLIPModel"),bAr=o(" (CLIP model)"),vAr=l(),ME=a("li"),e7e=a("strong"),FAr=o("distilbert"),TAr=o(" \u2014 "),vJ=a("a"),MAr=o("FlaxDistilBertModel"),EAr=o(" (DistilBERT model)"),CAr=l(),EE=a("li"),o7e=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),FJ=a("a"),yAr=o("FlaxElectraModel"),LAr=o(" (ELECTRA model)"),xAr=l(),CE=a("li"),r7e=a("strong"),$Ar=o("gpt2"),kAr=o(" \u2014 "),TJ=a("a"),SAr=o("FlaxGPT2Model"),RAr=o(" (OpenAI GPT-2 model)"),PAr=l(),wE=a("li"),t7e=a("strong"),BAr=o("gpt_neo"),IAr=o(" \u2014 "),MJ=a("a"),qAr=o("FlaxGPTNeoModel"),NAr=o(" (GPT Neo model)"),jAr=l(),AE=a("li"),a7e=a("strong"),DAr=o("gptj"),GAr=o(" \u2014 "),EJ=a("a"),OAr=o("FlaxGPTJModel"),VAr=o(" (GPT-J model)"),XAr=l(),yE=a("li"),n7e=a("strong"),zAr=o("longt5"),WAr=o(" \u2014 "),CJ=a("a"),QAr=o("FlaxLongT5Model"),HAr=o(" (LongT5 model)"),UAr=l(),LE=a("li"),s7e=a("strong"),JAr=o("marian"),YAr=o(" \u2014 "),wJ=a("a"),KAr=o("FlaxMarianModel"),ZAr=o(" (Marian model)"),eyr=l(),xE=a("li"),l7e=a("strong"),oyr=o("mbart"),ryr=o(" \u2014 "),AJ=a("a"),tyr=o("FlaxMBartModel"),ayr=o(" (mBART model)"),nyr=l(),$E=a("li"),i7e=a("strong"),syr=o("mt5"),lyr=o(" \u2014 "),yJ=a("a"),iyr=o("FlaxMT5Model"),dyr=o(" (mT5 model)"),cyr=l(),kE=a("li"),d7e=a("strong"),fyr=o("pegasus"),myr=o(" \u2014 "),LJ=a("a"),gyr=o("FlaxPegasusModel"),hyr=o(" (Pegasus model)"),pyr=l(),SE=a("li"),c7e=a("strong"),_yr=o("roberta"),uyr=o(" \u2014 "),xJ=a("a"),byr=o("FlaxRobertaModel"),vyr=o(" (RoBERTa model)"),Fyr=l(),RE=a("li"),f7e=a("strong"),Tyr=o("roformer"),Myr=o(" \u2014 "),$J=a("a"),Eyr=o("FlaxRoFormerModel"),Cyr=o(" (RoFormer model)"),wyr=l(),PE=a("li"),m7e=a("strong"),Ayr=o("t5"),yyr=o(" \u2014 "),kJ=a("a"),Lyr=o("FlaxT5Model"),xyr=o(" (T5 model)"),$yr=l(),BE=a("li"),g7e=a("strong"),kyr=o("vision-text-dual-encoder"),Syr=o(" \u2014 "),SJ=a("a"),Ryr=o("FlaxVisionTextDualEncoderModel"),Pyr=o(" (VisionTextDualEncoder model)"),Byr=l(),IE=a("li"),h7e=a("strong"),Iyr=o("vit"),qyr=o(" \u2014 "),RJ=a("a"),Nyr=o("FlaxViTModel"),jyr=o(" (ViT model)"),Dyr=l(),qE=a("li"),p7e=a("strong"),Gyr=o("wav2vec2"),Oyr=o(" \u2014 "),PJ=a("a"),Vyr=o("FlaxWav2Vec2Model"),Xyr=o(" (Wav2Vec2 model)"),zyr=l(),NE=a("li"),_7e=a("strong"),Wyr=o("xglm"),Qyr=o(" \u2014 "),BJ=a("a"),Hyr=o("FlaxXGLMModel"),Uyr=o(" (XGLM model)"),Jyr=l(),jE=a("li"),u7e=a("strong"),Yyr=o("xlm-roberta"),Kyr=o(" \u2014 "),IJ=a("a"),Zyr=o("FlaxXLMRobertaModel"),eLr=o(" (XLM-RoBERTa model)"),oLr=l(),F(DE.$$.fragment),jNe=l(),Sc=a("h2"),GE=a("a"),b7e=a("span"),F(b8.$$.fragment),rLr=l(),v7e=a("span"),tLr=o("FlaxAutoModelForCausalLM"),DNe=l(),mr=a("div"),F(v8.$$.fragment),aLr=l(),Rc=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),NJ=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),F8=a("p"),fLr=o("This class cannot be instantiated directly using "),F7e=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),Ot=a("div"),F(T8.$$.fragment),pLr=l(),T7e=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uLr=l(),Pc=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(OE.$$.fragment),CLr=l(),Dr=a("div"),F(M8.$$.fragment),wLr=l(),E7e=a("p"),ALr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yLr=l(),pn=a("p"),LLr=o("The model class to instantiate is selected based on the "),C7e=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),RLr=o("pretrained_model_name_or_path"),PLr=o(":"),BLr=l(),Pe=a("ul"),VE=a("li"),y7e=a("strong"),ILr=o("bart"),qLr=o(" \u2014 "),DJ=a("a"),NLr=o("FlaxBartForCausalLM"),jLr=o(" (BART model)"),DLr=l(),XE=a("li"),L7e=a("strong"),GLr=o("bert"),OLr=o(" \u2014 "),GJ=a("a"),VLr=o("FlaxBertForCausalLM"),XLr=o(" (BERT model)"),zLr=l(),zE=a("li"),x7e=a("strong"),WLr=o("big_bird"),QLr=o(" \u2014 "),OJ=a("a"),HLr=o("FlaxBigBirdForCausalLM"),ULr=o(" (BigBird model)"),JLr=l(),WE=a("li"),$7e=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),VJ=a("a"),ZLr=o("FlaxElectraForCausalLM"),e8r=o(" (ELECTRA model)"),o8r=l(),QE=a("li"),k7e=a("strong"),r8r=o("gpt2"),t8r=o(" \u2014 "),XJ=a("a"),a8r=o("FlaxGPT2LMHeadModel"),n8r=o(" (OpenAI GPT-2 model)"),s8r=l(),HE=a("li"),S7e=a("strong"),l8r=o("gpt_neo"),i8r=o(" \u2014 "),zJ=a("a"),d8r=o("FlaxGPTNeoForCausalLM"),c8r=o(" (GPT Neo model)"),f8r=l(),UE=a("li"),R7e=a("strong"),m8r=o("gptj"),g8r=o(" \u2014 "),WJ=a("a"),h8r=o("FlaxGPTJForCausalLM"),p8r=o(" (GPT-J model)"),_8r=l(),JE=a("li"),P7e=a("strong"),u8r=o("roberta"),b8r=o(" \u2014 "),QJ=a("a"),v8r=o("FlaxRobertaForCausalLM"),F8r=o(" (RoBERTa model)"),T8r=l(),YE=a("li"),B7e=a("strong"),M8r=o("xglm"),E8r=o(" \u2014 "),HJ=a("a"),C8r=o("FlaxXGLMForCausalLM"),w8r=o(" (XGLM model)"),A8r=l(),F(KE.$$.fragment),GNe=l(),Bc=a("h2"),ZE=a("a"),I7e=a("span"),F(E8.$$.fragment),y8r=l(),q7e=a("span"),L8r=o("FlaxAutoModelForPreTraining"),ONe=l(),gr=a("div"),F(C8.$$.fragment),x8r=l(),Ic=a("p"),$8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=a("a"),k8r=o("from_pretrained()"),S8r=o(" class method or the "),JJ=a("a"),R8r=o("from_config()"),P8r=o(` class
method.`),B8r=l(),w8=a("p"),I8r=o("This class cannot be instantiated directly using "),N7e=a("code"),q8r=o("__init__()"),N8r=o(" (throws an error)."),j8r=l(),Vt=a("div"),F(A8.$$.fragment),D8r=l(),j7e=a("p"),G8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O8r=l(),qc=a("p"),V8r=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),X8r=o("not"),z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),W8r=o("from_pretrained()"),Q8r=o(" to load the model weights."),H8r=l(),F(e5.$$.fragment),U8r=l(),Gr=a("div"),F(y8.$$.fragment),J8r=l(),G7e=a("p"),Y8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K8r=l(),_n=a("p"),Z8r=o("The model class to instantiate is selected based on the "),O7e=a("code"),exr=o("model_type"),oxr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(":"),sxr=l(),Te=a("ul"),o5=a("li"),z7e=a("strong"),lxr=o("albert"),ixr=o(" \u2014 "),KJ=a("a"),dxr=o("FlaxAlbertForPreTraining"),cxr=o(" (ALBERT model)"),fxr=l(),r5=a("li"),W7e=a("strong"),mxr=o("bart"),gxr=o(" \u2014 "),ZJ=a("a"),hxr=o("FlaxBartForConditionalGeneration"),pxr=o(" (BART model)"),_xr=l(),t5=a("li"),Q7e=a("strong"),uxr=o("bert"),bxr=o(" \u2014 "),eY=a("a"),vxr=o("FlaxBertForPreTraining"),Fxr=o(" (BERT model)"),Txr=l(),a5=a("li"),H7e=a("strong"),Mxr=o("big_bird"),Exr=o(" \u2014 "),oY=a("a"),Cxr=o("FlaxBigBirdForPreTraining"),wxr=o(" (BigBird model)"),Axr=l(),n5=a("li"),U7e=a("strong"),yxr=o("electra"),Lxr=o(" \u2014 "),rY=a("a"),xxr=o("FlaxElectraForPreTraining"),$xr=o(" (ELECTRA model)"),kxr=l(),s5=a("li"),J7e=a("strong"),Sxr=o("longt5"),Rxr=o(" \u2014 "),tY=a("a"),Pxr=o("FlaxLongT5ForConditionalGeneration"),Bxr=o(" (LongT5 model)"),Ixr=l(),l5=a("li"),Y7e=a("strong"),qxr=o("mbart"),Nxr=o(" \u2014 "),aY=a("a"),jxr=o("FlaxMBartForConditionalGeneration"),Dxr=o(" (mBART model)"),Gxr=l(),i5=a("li"),K7e=a("strong"),Oxr=o("mt5"),Vxr=o(" \u2014 "),nY=a("a"),Xxr=o("FlaxMT5ForConditionalGeneration"),zxr=o(" (mT5 model)"),Wxr=l(),d5=a("li"),Z7e=a("strong"),Qxr=o("roberta"),Hxr=o(" \u2014 "),sY=a("a"),Uxr=o("FlaxRobertaForMaskedLM"),Jxr=o(" (RoBERTa model)"),Yxr=l(),c5=a("li"),e9e=a("strong"),Kxr=o("roformer"),Zxr=o(" \u2014 "),lY=a("a"),e$r=o("FlaxRoFormerForMaskedLM"),o$r=o(" (RoFormer model)"),r$r=l(),f5=a("li"),o9e=a("strong"),t$r=o("t5"),a$r=o(" \u2014 "),iY=a("a"),n$r=o("FlaxT5ForConditionalGeneration"),s$r=o(" (T5 model)"),l$r=l(),m5=a("li"),r9e=a("strong"),i$r=o("wav2vec2"),d$r=o(" \u2014 "),dY=a("a"),c$r=o("FlaxWav2Vec2ForPreTraining"),f$r=o(" (Wav2Vec2 model)"),m$r=l(),g5=a("li"),t9e=a("strong"),g$r=o("xlm-roberta"),h$r=o(" \u2014 "),cY=a("a"),p$r=o("FlaxXLMRobertaForMaskedLM"),_$r=o(" (XLM-RoBERTa model)"),u$r=l(),F(h5.$$.fragment),VNe=l(),Nc=a("h2"),p5=a("a"),a9e=a("span"),F(L8.$$.fragment),b$r=l(),n9e=a("span"),v$r=o("FlaxAutoModelForMaskedLM"),XNe=l(),hr=a("div"),F(x8.$$.fragment),F$r=l(),jc=a("p"),T$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fY=a("a"),M$r=o("from_pretrained()"),E$r=o(" class method or the "),mY=a("a"),C$r=o("from_config()"),w$r=o(` class
method.`),A$r=l(),$8=a("p"),y$r=o("This class cannot be instantiated directly using "),s9e=a("code"),L$r=o("__init__()"),x$r=o(" (throws an error)."),$$r=l(),Xt=a("div"),F(k8.$$.fragment),k$r=l(),l9e=a("p"),S$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R$r=l(),Dc=a("p"),P$r=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),B$r=o("not"),I$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),q$r=o("from_pretrained()"),N$r=o(" to load the model weights."),j$r=l(),F(_5.$$.fragment),D$r=l(),Or=a("div"),F(S8.$$.fragment),G$r=l(),d9e=a("p"),O$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V$r=l(),un=a("p"),X$r=o("The model class to instantiate is selected based on the "),c9e=a("code"),z$r=o("model_type"),W$r=o(` property of the config object (either
passed as an argument or loaded from `),f9e=a("code"),Q$r=o("pretrained_model_name_or_path"),H$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=a("code"),U$r=o("pretrained_model_name_or_path"),J$r=o(":"),Y$r=l(),Le=a("ul"),u5=a("li"),g9e=a("strong"),K$r=o("albert"),Z$r=o(" \u2014 "),hY=a("a"),ekr=o("FlaxAlbertForMaskedLM"),okr=o(" (ALBERT model)"),rkr=l(),b5=a("li"),h9e=a("strong"),tkr=o("bart"),akr=o(" \u2014 "),pY=a("a"),nkr=o("FlaxBartForConditionalGeneration"),skr=o(" (BART model)"),lkr=l(),v5=a("li"),p9e=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),_Y=a("a"),ckr=o("FlaxBertForMaskedLM"),fkr=o(" (BERT model)"),mkr=l(),F5=a("li"),_9e=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),uY=a("a"),pkr=o("FlaxBigBirdForMaskedLM"),_kr=o(" (BigBird model)"),ukr=l(),T5=a("li"),u9e=a("strong"),bkr=o("distilbert"),vkr=o(" \u2014 "),bY=a("a"),Fkr=o("FlaxDistilBertForMaskedLM"),Tkr=o(" (DistilBERT model)"),Mkr=l(),M5=a("li"),b9e=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),vY=a("a"),wkr=o("FlaxElectraForMaskedLM"),Akr=o(" (ELECTRA model)"),ykr=l(),E5=a("li"),v9e=a("strong"),Lkr=o("mbart"),xkr=o(" \u2014 "),FY=a("a"),$kr=o("FlaxMBartForConditionalGeneration"),kkr=o(" (mBART model)"),Skr=l(),C5=a("li"),F9e=a("strong"),Rkr=o("roberta"),Pkr=o(" \u2014 "),TY=a("a"),Bkr=o("FlaxRobertaForMaskedLM"),Ikr=o(" (RoBERTa model)"),qkr=l(),w5=a("li"),T9e=a("strong"),Nkr=o("roformer"),jkr=o(" \u2014 "),MY=a("a"),Dkr=o("FlaxRoFormerForMaskedLM"),Gkr=o(" (RoFormer model)"),Okr=l(),A5=a("li"),M9e=a("strong"),Vkr=o("xlm-roberta"),Xkr=o(" \u2014 "),EY=a("a"),zkr=o("FlaxXLMRobertaForMaskedLM"),Wkr=o(" (XLM-RoBERTa model)"),Qkr=l(),F(y5.$$.fragment),zNe=l(),Gc=a("h2"),L5=a("a"),E9e=a("span"),F(R8.$$.fragment),Hkr=l(),C9e=a("span"),Ukr=o("FlaxAutoModelForSeq2SeqLM"),WNe=l(),pr=a("div"),F(P8.$$.fragment),Jkr=l(),Oc=a("p"),Ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CY=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" class method or the "),wY=a("a"),eSr=o("from_config()"),oSr=o(` class
method.`),rSr=l(),B8=a("p"),tSr=o("This class cannot be instantiated directly using "),w9e=a("code"),aSr=o("__init__()"),nSr=o(" (throws an error)."),sSr=l(),zt=a("div"),F(I8.$$.fragment),lSr=l(),A9e=a("p"),iSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dSr=l(),Vc=a("p"),cSr=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),fSr=o("not"),mSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),gSr=o("from_pretrained()"),hSr=o(" to load the model weights."),pSr=l(),F(x5.$$.fragment),_Sr=l(),Vr=a("div"),F(q8.$$.fragment),uSr=l(),L9e=a("p"),bSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vSr=l(),bn=a("p"),FSr=o("The model class to instantiate is selected based on the "),x9e=a("code"),TSr=o("model_type"),MSr=o(` property of the config object (either
passed as an argument or loaded from `),$9e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(":"),ySr=l(),xe=a("ul"),$5=a("li"),S9e=a("strong"),LSr=o("bart"),xSr=o(" \u2014 "),yY=a("a"),$Sr=o("FlaxBartForConditionalGeneration"),kSr=o(" (BART model)"),SSr=l(),k5=a("li"),R9e=a("strong"),RSr=o("blenderbot"),PSr=o(" \u2014 "),LY=a("a"),BSr=o("FlaxBlenderbotForConditionalGeneration"),ISr=o(" (Blenderbot model)"),qSr=l(),S5=a("li"),P9e=a("strong"),NSr=o("blenderbot-small"),jSr=o(" \u2014 "),xY=a("a"),DSr=o("FlaxBlenderbotSmallForConditionalGeneration"),GSr=o(" (BlenderbotSmall model)"),OSr=l(),R5=a("li"),B9e=a("strong"),VSr=o("encoder-decoder"),XSr=o(" \u2014 "),$Y=a("a"),zSr=o("FlaxEncoderDecoderModel"),WSr=o(" (Encoder decoder model)"),QSr=l(),P5=a("li"),I9e=a("strong"),HSr=o("longt5"),USr=o(" \u2014 "),kY=a("a"),JSr=o("FlaxLongT5ForConditionalGeneration"),YSr=o(" (LongT5 model)"),KSr=l(),B5=a("li"),q9e=a("strong"),ZSr=o("marian"),eRr=o(" \u2014 "),SY=a("a"),oRr=o("FlaxMarianMTModel"),rRr=o(" (Marian model)"),tRr=l(),I5=a("li"),N9e=a("strong"),aRr=o("mbart"),nRr=o(" \u2014 "),RY=a("a"),sRr=o("FlaxMBartForConditionalGeneration"),lRr=o(" (mBART model)"),iRr=l(),q5=a("li"),j9e=a("strong"),dRr=o("mt5"),cRr=o(" \u2014 "),PY=a("a"),fRr=o("FlaxMT5ForConditionalGeneration"),mRr=o(" (mT5 model)"),gRr=l(),N5=a("li"),D9e=a("strong"),hRr=o("pegasus"),pRr=o(" \u2014 "),BY=a("a"),_Rr=o("FlaxPegasusForConditionalGeneration"),uRr=o(" (Pegasus model)"),bRr=l(),j5=a("li"),G9e=a("strong"),vRr=o("t5"),FRr=o(" \u2014 "),IY=a("a"),TRr=o("FlaxT5ForConditionalGeneration"),MRr=o(" (T5 model)"),ERr=l(),F(D5.$$.fragment),QNe=l(),Xc=a("h2"),G5=a("a"),O9e=a("span"),F(N8.$$.fragment),CRr=l(),V9e=a("span"),wRr=o("FlaxAutoModelForSequenceClassification"),HNe=l(),_r=a("div"),F(j8.$$.fragment),ARr=l(),zc=a("p"),yRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=a("a"),LRr=o("from_pretrained()"),xRr=o(" class method or the "),NY=a("a"),$Rr=o("from_config()"),kRr=o(` class
method.`),SRr=l(),D8=a("p"),RRr=o("This class cannot be instantiated directly using "),X9e=a("code"),PRr=o("__init__()"),BRr=o(" (throws an error)."),IRr=l(),Wt=a("div"),F(G8.$$.fragment),qRr=l(),z9e=a("p"),NRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jRr=l(),Wc=a("p"),DRr=o(`Note:
Loading a model from its configuration file does `),W9e=a("strong"),GRr=o("not"),ORr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),VRr=o("from_pretrained()"),XRr=o(" to load the model weights."),zRr=l(),F(O5.$$.fragment),WRr=l(),Xr=a("div"),F(O8.$$.fragment),QRr=l(),Q9e=a("p"),HRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),URr=l(),vn=a("p"),JRr=o("The model class to instantiate is selected based on the "),H9e=a("code"),YRr=o("model_type"),KRr=o(` property of the config object (either
passed as an argument or loaded from `),U9e=a("code"),ZRr=o("pretrained_model_name_or_path"),ePr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(":"),tPr=l(),$e=a("ul"),V5=a("li"),Y9e=a("strong"),aPr=o("albert"),nPr=o(" \u2014 "),DY=a("a"),sPr=o("FlaxAlbertForSequenceClassification"),lPr=o(" (ALBERT model)"),iPr=l(),X5=a("li"),K9e=a("strong"),dPr=o("bart"),cPr=o(" \u2014 "),GY=a("a"),fPr=o("FlaxBartForSequenceClassification"),mPr=o(" (BART model)"),gPr=l(),z5=a("li"),Z9e=a("strong"),hPr=o("bert"),pPr=o(" \u2014 "),OY=a("a"),_Pr=o("FlaxBertForSequenceClassification"),uPr=o(" (BERT model)"),bPr=l(),W5=a("li"),eMe=a("strong"),vPr=o("big_bird"),FPr=o(" \u2014 "),VY=a("a"),TPr=o("FlaxBigBirdForSequenceClassification"),MPr=o(" (BigBird model)"),EPr=l(),Q5=a("li"),oMe=a("strong"),CPr=o("distilbert"),wPr=o(" \u2014 "),XY=a("a"),APr=o("FlaxDistilBertForSequenceClassification"),yPr=o(" (DistilBERT model)"),LPr=l(),H5=a("li"),rMe=a("strong"),xPr=o("electra"),$Pr=o(" \u2014 "),zY=a("a"),kPr=o("FlaxElectraForSequenceClassification"),SPr=o(" (ELECTRA model)"),RPr=l(),U5=a("li"),tMe=a("strong"),PPr=o("mbart"),BPr=o(" \u2014 "),WY=a("a"),IPr=o("FlaxMBartForSequenceClassification"),qPr=o(" (mBART model)"),NPr=l(),J5=a("li"),aMe=a("strong"),jPr=o("roberta"),DPr=o(" \u2014 "),QY=a("a"),GPr=o("FlaxRobertaForSequenceClassification"),OPr=o(" (RoBERTa model)"),VPr=l(),Y5=a("li"),nMe=a("strong"),XPr=o("roformer"),zPr=o(" \u2014 "),HY=a("a"),WPr=o("FlaxRoFormerForSequenceClassification"),QPr=o(" (RoFormer model)"),HPr=l(),K5=a("li"),sMe=a("strong"),UPr=o("xlm-roberta"),JPr=o(" \u2014 "),UY=a("a"),YPr=o("FlaxXLMRobertaForSequenceClassification"),KPr=o(" (XLM-RoBERTa model)"),ZPr=l(),F(Z5.$$.fragment),UNe=l(),Qc=a("h2"),eC=a("a"),lMe=a("span"),F(V8.$$.fragment),eBr=l(),iMe=a("span"),oBr=o("FlaxAutoModelForQuestionAnswering"),JNe=l(),ur=a("div"),F(X8.$$.fragment),rBr=l(),Hc=a("p"),tBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=a("a"),aBr=o("from_pretrained()"),nBr=o(" class method or the "),YY=a("a"),sBr=o("from_config()"),lBr=o(` class
method.`),iBr=l(),z8=a("p"),dBr=o("This class cannot be instantiated directly using "),dMe=a("code"),cBr=o("__init__()"),fBr=o(" (throws an error)."),mBr=l(),Qt=a("div"),F(W8.$$.fragment),gBr=l(),cMe=a("p"),hBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pBr=l(),Uc=a("p"),_Br=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),uBr=o("not"),bBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),vBr=o("from_pretrained()"),FBr=o(" to load the model weights."),TBr=l(),F(oC.$$.fragment),MBr=l(),zr=a("div"),F(Q8.$$.fragment),EBr=l(),mMe=a("p"),CBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wBr=l(),Fn=a("p"),ABr=o("The model class to instantiate is selected based on the "),gMe=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(":"),RBr=l(),ke=a("ul"),rC=a("li"),_Me=a("strong"),PBr=o("albert"),BBr=o(" \u2014 "),ZY=a("a"),IBr=o("FlaxAlbertForQuestionAnswering"),qBr=o(" (ALBERT model)"),NBr=l(),tC=a("li"),uMe=a("strong"),jBr=o("bart"),DBr=o(" \u2014 "),eK=a("a"),GBr=o("FlaxBartForQuestionAnswering"),OBr=o(" (BART model)"),VBr=l(),aC=a("li"),bMe=a("strong"),XBr=o("bert"),zBr=o(" \u2014 "),oK=a("a"),WBr=o("FlaxBertForQuestionAnswering"),QBr=o(" (BERT model)"),HBr=l(),nC=a("li"),vMe=a("strong"),UBr=o("big_bird"),JBr=o(" \u2014 "),rK=a("a"),YBr=o("FlaxBigBirdForQuestionAnswering"),KBr=o(" (BigBird model)"),ZBr=l(),sC=a("li"),FMe=a("strong"),eIr=o("distilbert"),oIr=o(" \u2014 "),tK=a("a"),rIr=o("FlaxDistilBertForQuestionAnswering"),tIr=o(" (DistilBERT model)"),aIr=l(),lC=a("li"),TMe=a("strong"),nIr=o("electra"),sIr=o(" \u2014 "),aK=a("a"),lIr=o("FlaxElectraForQuestionAnswering"),iIr=o(" (ELECTRA model)"),dIr=l(),iC=a("li"),MMe=a("strong"),cIr=o("mbart"),fIr=o(" \u2014 "),nK=a("a"),mIr=o("FlaxMBartForQuestionAnswering"),gIr=o(" (mBART model)"),hIr=l(),dC=a("li"),EMe=a("strong"),pIr=o("roberta"),_Ir=o(" \u2014 "),sK=a("a"),uIr=o("FlaxRobertaForQuestionAnswering"),bIr=o(" (RoBERTa model)"),vIr=l(),cC=a("li"),CMe=a("strong"),FIr=o("roformer"),TIr=o(" \u2014 "),lK=a("a"),MIr=o("FlaxRoFormerForQuestionAnswering"),EIr=o(" (RoFormer model)"),CIr=l(),fC=a("li"),wMe=a("strong"),wIr=o("xlm-roberta"),AIr=o(" \u2014 "),iK=a("a"),yIr=o("FlaxXLMRobertaForQuestionAnswering"),LIr=o(" (XLM-RoBERTa model)"),xIr=l(),F(mC.$$.fragment),YNe=l(),Jc=a("h2"),gC=a("a"),AMe=a("span"),F(H8.$$.fragment),$Ir=l(),yMe=a("span"),kIr=o("FlaxAutoModelForTokenClassification"),KNe=l(),br=a("div"),F(U8.$$.fragment),SIr=l(),Yc=a("p"),RIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dK=a("a"),PIr=o("from_pretrained()"),BIr=o(" class method or the "),cK=a("a"),IIr=o("from_config()"),qIr=o(` class
method.`),NIr=l(),J8=a("p"),jIr=o("This class cannot be instantiated directly using "),LMe=a("code"),DIr=o("__init__()"),GIr=o(" (throws an error)."),OIr=l(),Ht=a("div"),F(Y8.$$.fragment),VIr=l(),xMe=a("p"),XIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zIr=l(),Kc=a("p"),WIr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),QIr=o("not"),HIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),UIr=o("from_pretrained()"),JIr=o(" to load the model weights."),YIr=l(),F(hC.$$.fragment),KIr=l(),Wr=a("div"),F(K8.$$.fragment),ZIr=l(),kMe=a("p"),eqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oqr=l(),Tn=a("p"),rqr=o("The model class to instantiate is selected based on the "),SMe=a("code"),tqr=o("model_type"),aqr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),nqr=o("pretrained_model_name_or_path"),sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),lqr=o("pretrained_model_name_or_path"),iqr=o(":"),dqr=l(),Ge=a("ul"),pC=a("li"),BMe=a("strong"),cqr=o("albert"),fqr=o(" \u2014 "),mK=a("a"),mqr=o("FlaxAlbertForTokenClassification"),gqr=o(" (ALBERT model)"),hqr=l(),_C=a("li"),IMe=a("strong"),pqr=o("bert"),_qr=o(" \u2014 "),gK=a("a"),uqr=o("FlaxBertForTokenClassification"),bqr=o(" (BERT model)"),vqr=l(),uC=a("li"),qMe=a("strong"),Fqr=o("big_bird"),Tqr=o(" \u2014 "),hK=a("a"),Mqr=o("FlaxBigBirdForTokenClassification"),Eqr=o(" (BigBird model)"),Cqr=l(),bC=a("li"),NMe=a("strong"),wqr=o("distilbert"),Aqr=o(" \u2014 "),pK=a("a"),yqr=o("FlaxDistilBertForTokenClassification"),Lqr=o(" (DistilBERT model)"),xqr=l(),vC=a("li"),jMe=a("strong"),$qr=o("electra"),kqr=o(" \u2014 "),_K=a("a"),Sqr=o("FlaxElectraForTokenClassification"),Rqr=o(" (ELECTRA model)"),Pqr=l(),FC=a("li"),DMe=a("strong"),Bqr=o("roberta"),Iqr=o(" \u2014 "),uK=a("a"),qqr=o("FlaxRobertaForTokenClassification"),Nqr=o(" (RoBERTa model)"),jqr=l(),TC=a("li"),GMe=a("strong"),Dqr=o("roformer"),Gqr=o(" \u2014 "),bK=a("a"),Oqr=o("FlaxRoFormerForTokenClassification"),Vqr=o(" (RoFormer model)"),Xqr=l(),MC=a("li"),OMe=a("strong"),zqr=o("xlm-roberta"),Wqr=o(" \u2014 "),vK=a("a"),Qqr=o("FlaxXLMRobertaForTokenClassification"),Hqr=o(" (XLM-RoBERTa model)"),Uqr=l(),F(EC.$$.fragment),ZNe=l(),Zc=a("h2"),CC=a("a"),VMe=a("span"),F(Z8.$$.fragment),Jqr=l(),XMe=a("span"),Yqr=o("FlaxAutoModelForMultipleChoice"),eje=l(),vr=a("div"),F(ex.$$.fragment),Kqr=l(),ef=a("p"),Zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FK=a("a"),eNr=o("from_pretrained()"),oNr=o(" class method or the "),TK=a("a"),rNr=o("from_config()"),tNr=o(` class
method.`),aNr=l(),ox=a("p"),nNr=o("This class cannot be instantiated directly using "),zMe=a("code"),sNr=o("__init__()"),lNr=o(" (throws an error)."),iNr=l(),Ut=a("div"),F(rx.$$.fragment),dNr=l(),WMe=a("p"),cNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fNr=l(),of=a("p"),mNr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),gNr=o("not"),hNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),pNr=o("from_pretrained()"),_Nr=o(" to load the model weights."),uNr=l(),F(wC.$$.fragment),bNr=l(),Qr=a("div"),F(tx.$$.fragment),vNr=l(),HMe=a("p"),FNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TNr=l(),Mn=a("p"),MNr=o("The model class to instantiate is selected based on the "),UMe=a("code"),ENr=o("model_type"),CNr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),wNr=o("pretrained_model_name_or_path"),ANr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),yNr=o("pretrained_model_name_or_path"),LNr=o(":"),xNr=l(),Oe=a("ul"),AC=a("li"),KMe=a("strong"),$Nr=o("albert"),kNr=o(" \u2014 "),EK=a("a"),SNr=o("FlaxAlbertForMultipleChoice"),RNr=o(" (ALBERT model)"),PNr=l(),yC=a("li"),ZMe=a("strong"),BNr=o("bert"),INr=o(" \u2014 "),CK=a("a"),qNr=o("FlaxBertForMultipleChoice"),NNr=o(" (BERT model)"),jNr=l(),LC=a("li"),e4e=a("strong"),DNr=o("big_bird"),GNr=o(" \u2014 "),wK=a("a"),ONr=o("FlaxBigBirdForMultipleChoice"),VNr=o(" (BigBird model)"),XNr=l(),xC=a("li"),o4e=a("strong"),zNr=o("distilbert"),WNr=o(" \u2014 "),AK=a("a"),QNr=o("FlaxDistilBertForMultipleChoice"),HNr=o(" (DistilBERT model)"),UNr=l(),$C=a("li"),r4e=a("strong"),JNr=o("electra"),YNr=o(" \u2014 "),yK=a("a"),KNr=o("FlaxElectraForMultipleChoice"),ZNr=o(" (ELECTRA model)"),ejr=l(),kC=a("li"),t4e=a("strong"),ojr=o("roberta"),rjr=o(" \u2014 "),LK=a("a"),tjr=o("FlaxRobertaForMultipleChoice"),ajr=o(" (RoBERTa model)"),njr=l(),SC=a("li"),a4e=a("strong"),sjr=o("roformer"),ljr=o(" \u2014 "),xK=a("a"),ijr=o("FlaxRoFormerForMultipleChoice"),djr=o(" (RoFormer model)"),cjr=l(),RC=a("li"),n4e=a("strong"),fjr=o("xlm-roberta"),mjr=o(" \u2014 "),$K=a("a"),gjr=o("FlaxXLMRobertaForMultipleChoice"),hjr=o(" (XLM-RoBERTa model)"),pjr=l(),F(PC.$$.fragment),oje=l(),rf=a("h2"),BC=a("a"),s4e=a("span"),F(ax.$$.fragment),_jr=l(),l4e=a("span"),ujr=o("FlaxAutoModelForNextSentencePrediction"),rje=l(),Fr=a("div"),F(nx.$$.fragment),bjr=l(),tf=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),SK=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),sx=a("p"),wjr=o("This class cannot be instantiated directly using "),i4e=a("code"),Ajr=o("__init__()"),yjr=o(" (throws an error)."),Ljr=l(),Jt=a("div"),F(lx.$$.fragment),xjr=l(),d4e=a("p"),$jr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kjr=l(),af=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),qjr=l(),F(IC.$$.fragment),Njr=l(),Hr=a("div"),F(ix.$$.fragment),jjr=l(),f4e=a("p"),Djr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gjr=l(),En=a("p"),Ojr=o("The model class to instantiate is selected based on the "),m4e=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),p4e=a("ul"),qC=a("li"),_4e=a("strong"),Jjr=o("bert"),Yjr=o(" \u2014 "),PK=a("a"),Kjr=o("FlaxBertForNextSentencePrediction"),Zjr=o(" (BERT model)"),eDr=l(),F(NC.$$.fragment),tje=l(),nf=a("h2"),jC=a("a"),u4e=a("span"),F(dx.$$.fragment),oDr=l(),b4e=a("span"),rDr=o("FlaxAutoModelForImageClassification"),aje=l(),Tr=a("div"),F(cx.$$.fragment),tDr=l(),sf=a("p"),aDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BK=a("a"),nDr=o("from_pretrained()"),sDr=o(" class method or the "),IK=a("a"),lDr=o("from_config()"),iDr=o(` class
method.`),dDr=l(),fx=a("p"),cDr=o("This class cannot be instantiated directly using "),v4e=a("code"),fDr=o("__init__()"),mDr=o(" (throws an error)."),gDr=l(),Yt=a("div"),F(mx.$$.fragment),hDr=l(),F4e=a("p"),pDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Dr=l(),lf=a("p"),uDr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),bDr=o("not"),vDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),FDr=o("from_pretrained()"),TDr=o(" to load the model weights."),MDr=l(),F(DC.$$.fragment),EDr=l(),Ur=a("div"),F(gx.$$.fragment),CDr=l(),M4e=a("p"),wDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ADr=l(),Cn=a("p"),yDr=o("The model class to instantiate is selected based on the "),E4e=a("code"),LDr=o("model_type"),xDr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(":"),PDr=l(),hx=a("ul"),GC=a("li"),A4e=a("strong"),BDr=o("beit"),IDr=o(" \u2014 "),NK=a("a"),qDr=o("FlaxBeitForImageClassification"),NDr=o(" (BEiT model)"),jDr=l(),OC=a("li"),y4e=a("strong"),DDr=o("vit"),GDr=o(" \u2014 "),jK=a("a"),ODr=o("FlaxViTForImageClassification"),VDr=o(" (ViT model)"),XDr=l(),F(VC.$$.fragment),nje=l(),df=a("h2"),XC=a("a"),L4e=a("span"),F(px.$$.fragment),zDr=l(),x4e=a("span"),WDr=o("FlaxAutoModelForVision2Seq"),sje=l(),Mr=a("div"),F(_x.$$.fragment),QDr=l(),cf=a("p"),HDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=a("a"),UDr=o("from_pretrained()"),JDr=o(" class method or the "),GK=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),ux=a("p"),eGr=o("This class cannot be instantiated directly using "),$4e=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Kt=a("div"),F(bx.$$.fragment),aGr=l(),k4e=a("p"),nGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sGr=l(),ff=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(zC.$$.fragment),gGr=l(),Jr=a("div"),F(vx.$$.fragment),hGr=l(),R4e=a("p"),pGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Gr=l(),wn=a("p"),uGr=o("The model class to instantiate is selected based on the "),P4e=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),q4e=a("ul"),WC=a("li"),N4e=a("strong"),wGr=o("vision-encoder-decoder"),AGr=o(" \u2014 "),VK=a("a"),yGr=o("FlaxVisionEncoderDecoderModel"),LGr=o(" (Vision Encoder decoder model)"),xGr=l(),F(QC.$$.fragment),this.h()},l(f){const u=jLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fx=s(p);m=n(Fx,"A",{id:!0,class:!0,href:!0});var j4e=s(m);_=n(j4e,"SPAN",{});var D4e=s(_);T(d.$$.fragment,D4e),D4e.forEach(t),j4e.forEach(t),h=i(Fx),Mo=n(Fx,"SPAN",{});var G4e=s(Mo);fi=r(G4e,"Auto Classes"),G4e.forEach(t),Fx.forEach(t),pf=i(f),rt=n(f,"P",{});var Tx=s(rt);mi=r(Tx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Tx,"CODE",{});var O4e=s(gi);f0=r(O4e,"from_pretrained()"),O4e.forEach(t),_f=r(Tx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var V4e=s(yn);m0=r(V4e,"AutoConfig"),V4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var X4e=s(xn);g0=r(X4e,"AutoModel"),X4e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var z4e=s($n);h0=r(z4e,"AutoTokenizer"),z4e.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Mx=s(Ae);R$=r(Mx,"will create a model that is an instance of "),ui=n(Mx,"A",{href:!0});var W4e=s(ui);P$=r(W4e,"BertModel"),W4e.forEach(t),B$=r(Mx,"."),Mx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ex=s(wa);I$=r(Ex,"There is one class of "),bf=n(Ex,"CODE",{});var Q4e=s(bf);q$=r(Q4e,"AutoModel"),Q4e.forEach(t),pGe=r(Ex," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ex.forEach(t),aqe=i(f),bi=n(f,"H2",{class:!0});var Cx=s(bi);vf=n(Cx,"A",{id:!0,class:!0,href:!0});var H4e=s(vf);Iee=n(H4e,"SPAN",{});var U4e=s(Iee);T(p0.$$.fragment,U4e),U4e.forEach(t),H4e.forEach(t),_Ge=i(Cx),qee=n(Cx,"SPAN",{});var J4e=s(qee);uGe=r(J4e,"Extending the Auto Classes"),J4e.forEach(t),Cx.forEach(t),nqe=i(f),kn=n(f,"P",{});var mf=s(kn);bGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nee=n(mf,"CODE",{});var Y4e=s(Nee);vGe=r(Y4e,"NewModel"),Y4e.forEach(t),FGe=r(mf,", make sure you have a "),jee=n(mf,"CODE",{});var K4e=s(jee);TGe=r(K4e,"NewModelConfig"),K4e.forEach(t),MGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),sqe=i(f),T(_0.$$.fragment,f),lqe=i(f),N$=n(f,"P",{});var Z4e=s(N$);EGe=r(Z4e,"You will then be able to use the auto classes like you would usually do!"),Z4e.forEach(t),iqe=i(f),T(Ff.$$.fragment,f),dqe=i(f),vi=n(f,"H2",{class:!0});var wx=s(vi);Tf=n(wx,"A",{id:!0,class:!0,href:!0});var eEe=s(Tf);Dee=n(eEe,"SPAN",{});var oEe=s(Dee);T(u0.$$.fragment,oEe),oEe.forEach(t),eEe.forEach(t),CGe=i(wx),Gee=n(wx,"SPAN",{});var rEe=s(Gee);wGe=r(rEe,"AutoConfig"),rEe.forEach(t),wx.forEach(t),cqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(b0.$$.fragment,et),AGe=i(et),v0=n(et,"P",{});var Ax=s(v0);yGe=r(Ax,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j$=n(Ax,"A",{href:!0});var tEe=s(j$);LGe=r(tEe,"from_pretrained()"),tEe.forEach(t),xGe=r(Ax," class method."),Ax.forEach(t),$Ge=i(et),F0=n(et,"P",{});var yx=s(F0);kGe=r(yx,"This class cannot be instantiated directly using "),Oee=n(yx,"CODE",{});var aEe=s(Oee);SGe=r(aEe,"__init__()"),aEe.forEach(t),RGe=r(yx," (throws an error)."),yx.forEach(t),PGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(T0.$$.fragment,ot),BGe=i(ot),Vee=n(ot,"P",{});var nEe=s(Vee);IGe=r(nEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),nEe.forEach(t),qGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);NGe=r(gf,"The configuration class to instantiate is selected based on the "),Xee=n(gf,"CODE",{});var sEe=s(Xee);jGe=r(sEe,"model_type"),sEe.forEach(t),DGe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zee=n(gf,"CODE",{});var lEe=s(zee);GGe=r(lEe,"pretrained_model_name_or_path"),lEe.forEach(t),OGe=r(gf,":"),gf.forEach(t),VGe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var HC=s(Mf);Wee=n(HC,"STRONG",{});var iEe=s(Wee);XGe=r(iEe,"albert"),iEe.forEach(t),zGe=r(HC," \u2014 "),D$=n(HC,"A",{href:!0});var dEe=s(D$);WGe=r(dEe,"AlbertConfig"),dEe.forEach(t),QGe=r(HC," (ALBERT model)"),HC.forEach(t),HGe=i(y),Ef=n(y,"LI",{});var UC=s(Ef);Qee=n(UC,"STRONG",{});var cEe=s(Qee);UGe=r(cEe,"bart"),cEe.forEach(t),JGe=r(UC," \u2014 "),G$=n(UC,"A",{href:!0});var fEe=s(G$);YGe=r(fEe,"BartConfig"),fEe.forEach(t),KGe=r(UC," (BART model)"),UC.forEach(t),ZGe=i(y),Cf=n(y,"LI",{});var JC=s(Cf);Hee=n(JC,"STRONG",{});var mEe=s(Hee);eOe=r(mEe,"beit"),mEe.forEach(t),oOe=r(JC," \u2014 "),O$=n(JC,"A",{href:!0});var gEe=s(O$);rOe=r(gEe,"BeitConfig"),gEe.forEach(t),tOe=r(JC," (BEiT model)"),JC.forEach(t),aOe=i(y),wf=n(y,"LI",{});var YC=s(wf);Uee=n(YC,"STRONG",{});var hEe=s(Uee);nOe=r(hEe,"bert"),hEe.forEach(t),sOe=r(YC," \u2014 "),V$=n(YC,"A",{href:!0});var pEe=s(V$);lOe=r(pEe,"BertConfig"),pEe.forEach(t),iOe=r(YC," (BERT model)"),YC.forEach(t),dOe=i(y),Af=n(y,"LI",{});var KC=s(Af);Jee=n(KC,"STRONG",{});var _Ee=s(Jee);cOe=r(_Ee,"bert-generation"),_Ee.forEach(t),fOe=r(KC," \u2014 "),X$=n(KC,"A",{href:!0});var uEe=s(X$);mOe=r(uEe,"BertGenerationConfig"),uEe.forEach(t),gOe=r(KC," (Bert Generation model)"),KC.forEach(t),hOe=i(y),yf=n(y,"LI",{});var ZC=s(yf);Yee=n(ZC,"STRONG",{});var bEe=s(Yee);pOe=r(bEe,"big_bird"),bEe.forEach(t),_Oe=r(ZC," \u2014 "),z$=n(ZC,"A",{href:!0});var vEe=s(z$);uOe=r(vEe,"BigBirdConfig"),vEe.forEach(t),bOe=r(ZC," (BigBird model)"),ZC.forEach(t),vOe=i(y),Lf=n(y,"LI",{});var e3=s(Lf);Kee=n(e3,"STRONG",{});var FEe=s(Kee);FOe=r(FEe,"bigbird_pegasus"),FEe.forEach(t),TOe=r(e3," \u2014 "),W$=n(e3,"A",{href:!0});var TEe=s(W$);MOe=r(TEe,"BigBirdPegasusConfig"),TEe.forEach(t),EOe=r(e3," (BigBirdPegasus model)"),e3.forEach(t),COe=i(y),xf=n(y,"LI",{});var o3=s(xf);Zee=n(o3,"STRONG",{});var MEe=s(Zee);wOe=r(MEe,"blenderbot"),MEe.forEach(t),AOe=r(o3," \u2014 "),Q$=n(o3,"A",{href:!0});var EEe=s(Q$);yOe=r(EEe,"BlenderbotConfig"),EEe.forEach(t),LOe=r(o3," (Blenderbot model)"),o3.forEach(t),xOe=i(y),$f=n(y,"LI",{});var r3=s($f);eoe=n(r3,"STRONG",{});var CEe=s(eoe);$Oe=r(CEe,"blenderbot-small"),CEe.forEach(t),kOe=r(r3," \u2014 "),H$=n(r3,"A",{href:!0});var wEe=s(H$);SOe=r(wEe,"BlenderbotSmallConfig"),wEe.forEach(t),ROe=r(r3," (BlenderbotSmall model)"),r3.forEach(t),POe=i(y),kf=n(y,"LI",{});var t3=s(kf);ooe=n(t3,"STRONG",{});var AEe=s(ooe);BOe=r(AEe,"camembert"),AEe.forEach(t),IOe=r(t3," \u2014 "),U$=n(t3,"A",{href:!0});var yEe=s(U$);qOe=r(yEe,"CamembertConfig"),yEe.forEach(t),NOe=r(t3," (CamemBERT model)"),t3.forEach(t),jOe=i(y),Sf=n(y,"LI",{});var a3=s(Sf);roe=n(a3,"STRONG",{});var LEe=s(roe);DOe=r(LEe,"canine"),LEe.forEach(t),GOe=r(a3," \u2014 "),J$=n(a3,"A",{href:!0});var xEe=s(J$);OOe=r(xEe,"CanineConfig"),xEe.forEach(t),VOe=r(a3," (Canine model)"),a3.forEach(t),XOe=i(y),Rf=n(y,"LI",{});var n3=s(Rf);toe=n(n3,"STRONG",{});var $Ee=s(toe);zOe=r($Ee,"clip"),$Ee.forEach(t),WOe=r(n3," \u2014 "),Y$=n(n3,"A",{href:!0});var kEe=s(Y$);QOe=r(kEe,"CLIPConfig"),kEe.forEach(t),HOe=r(n3," (CLIP model)"),n3.forEach(t),UOe=i(y),Pf=n(y,"LI",{});var s3=s(Pf);aoe=n(s3,"STRONG",{});var SEe=s(aoe);JOe=r(SEe,"convbert"),SEe.forEach(t),YOe=r(s3," \u2014 "),K$=n(s3,"A",{href:!0});var REe=s(K$);KOe=r(REe,"ConvBertConfig"),REe.forEach(t),ZOe=r(s3," (ConvBERT model)"),s3.forEach(t),eVe=i(y),Bf=n(y,"LI",{});var l3=s(Bf);noe=n(l3,"STRONG",{});var PEe=s(noe);oVe=r(PEe,"convnext"),PEe.forEach(t),rVe=r(l3," \u2014 "),Z$=n(l3,"A",{href:!0});var BEe=s(Z$);tVe=r(BEe,"ConvNextConfig"),BEe.forEach(t),aVe=r(l3," (ConvNext model)"),l3.forEach(t),nVe=i(y),If=n(y,"LI",{});var i3=s(If);soe=n(i3,"STRONG",{});var IEe=s(soe);sVe=r(IEe,"ctrl"),IEe.forEach(t),lVe=r(i3," \u2014 "),ek=n(i3,"A",{href:!0});var qEe=s(ek);iVe=r(qEe,"CTRLConfig"),qEe.forEach(t),dVe=r(i3," (CTRL model)"),i3.forEach(t),cVe=i(y),qf=n(y,"LI",{});var d3=s(qf);loe=n(d3,"STRONG",{});var NEe=s(loe);fVe=r(NEe,"data2vec-audio"),NEe.forEach(t),mVe=r(d3," \u2014 "),ok=n(d3,"A",{href:!0});var jEe=s(ok);gVe=r(jEe,"Data2VecAudioConfig"),jEe.forEach(t),hVe=r(d3," (Data2VecAudio model)"),d3.forEach(t),pVe=i(y),Nf=n(y,"LI",{});var c3=s(Nf);ioe=n(c3,"STRONG",{});var DEe=s(ioe);_Ve=r(DEe,"data2vec-text"),DEe.forEach(t),uVe=r(c3," \u2014 "),rk=n(c3,"A",{href:!0});var GEe=s(rk);bVe=r(GEe,"Data2VecTextConfig"),GEe.forEach(t),vVe=r(c3," (Data2VecText model)"),c3.forEach(t),FVe=i(y),jf=n(y,"LI",{});var f3=s(jf);doe=n(f3,"STRONG",{});var OEe=s(doe);TVe=r(OEe,"data2vec-vision"),OEe.forEach(t),MVe=r(f3," \u2014 "),tk=n(f3,"A",{href:!0});var VEe=s(tk);EVe=r(VEe,"Data2VecVisionConfig"),VEe.forEach(t),CVe=r(f3," (Data2VecVision model)"),f3.forEach(t),wVe=i(y),Df=n(y,"LI",{});var m3=s(Df);coe=n(m3,"STRONG",{});var XEe=s(coe);AVe=r(XEe,"deberta"),XEe.forEach(t),yVe=r(m3," \u2014 "),ak=n(m3,"A",{href:!0});var zEe=s(ak);LVe=r(zEe,"DebertaConfig"),zEe.forEach(t),xVe=r(m3," (DeBERTa model)"),m3.forEach(t),$Ve=i(y),Gf=n(y,"LI",{});var g3=s(Gf);foe=n(g3,"STRONG",{});var WEe=s(foe);kVe=r(WEe,"deberta-v2"),WEe.forEach(t),SVe=r(g3," \u2014 "),nk=n(g3,"A",{href:!0});var QEe=s(nk);RVe=r(QEe,"DebertaV2Config"),QEe.forEach(t),PVe=r(g3," (DeBERTa-v2 model)"),g3.forEach(t),BVe=i(y),Of=n(y,"LI",{});var h3=s(Of);moe=n(h3,"STRONG",{});var HEe=s(moe);IVe=r(HEe,"decision_transformer"),HEe.forEach(t),qVe=r(h3," \u2014 "),sk=n(h3,"A",{href:!0});var UEe=s(sk);NVe=r(UEe,"DecisionTransformerConfig"),UEe.forEach(t),jVe=r(h3," (Decision Transformer model)"),h3.forEach(t),DVe=i(y),Vf=n(y,"LI",{});var p3=s(Vf);goe=n(p3,"STRONG",{});var JEe=s(goe);GVe=r(JEe,"deit"),JEe.forEach(t),OVe=r(p3," \u2014 "),lk=n(p3,"A",{href:!0});var YEe=s(lk);VVe=r(YEe,"DeiTConfig"),YEe.forEach(t),XVe=r(p3," (DeiT model)"),p3.forEach(t),zVe=i(y),Xf=n(y,"LI",{});var _3=s(Xf);hoe=n(_3,"STRONG",{});var KEe=s(hoe);WVe=r(KEe,"detr"),KEe.forEach(t),QVe=r(_3," \u2014 "),ik=n(_3,"A",{href:!0});var kGr=s(ik);HVe=r(kGr,"DetrConfig"),kGr.forEach(t),UVe=r(_3," (DETR model)"),_3.forEach(t),JVe=i(y),zf=n(y,"LI",{});var ZEe=s(zf);poe=n(ZEe,"STRONG",{});var SGr=s(poe);YVe=r(SGr,"distilbert"),SGr.forEach(t),KVe=r(ZEe," \u2014 "),dk=n(ZEe,"A",{href:!0});var RGr=s(dk);ZVe=r(RGr,"DistilBertConfig"),RGr.forEach(t),eXe=r(ZEe," (DistilBERT model)"),ZEe.forEach(t),oXe=i(y),Wf=n(y,"LI",{});var e5e=s(Wf);_oe=n(e5e,"STRONG",{});var PGr=s(_oe);rXe=r(PGr,"dpr"),PGr.forEach(t),tXe=r(e5e," \u2014 "),ck=n(e5e,"A",{href:!0});var BGr=s(ck);aXe=r(BGr,"DPRConfig"),BGr.forEach(t),nXe=r(e5e," (DPR model)"),e5e.forEach(t),sXe=i(y),Qf=n(y,"LI",{});var o5e=s(Qf);uoe=n(o5e,"STRONG",{});var IGr=s(uoe);lXe=r(IGr,"dpt"),IGr.forEach(t),iXe=r(o5e," \u2014 "),fk=n(o5e,"A",{href:!0});var qGr=s(fk);dXe=r(qGr,"DPTConfig"),qGr.forEach(t),cXe=r(o5e," (DPT model)"),o5e.forEach(t),fXe=i(y),Hf=n(y,"LI",{});var r5e=s(Hf);boe=n(r5e,"STRONG",{});var NGr=s(boe);mXe=r(NGr,"electra"),NGr.forEach(t),gXe=r(r5e," \u2014 "),mk=n(r5e,"A",{href:!0});var jGr=s(mk);hXe=r(jGr,"ElectraConfig"),jGr.forEach(t),pXe=r(r5e," (ELECTRA model)"),r5e.forEach(t),_Xe=i(y),Uf=n(y,"LI",{});var t5e=s(Uf);voe=n(t5e,"STRONG",{});var DGr=s(voe);uXe=r(DGr,"encoder-decoder"),DGr.forEach(t),bXe=r(t5e," \u2014 "),gk=n(t5e,"A",{href:!0});var GGr=s(gk);vXe=r(GGr,"EncoderDecoderConfig"),GGr.forEach(t),FXe=r(t5e," (Encoder decoder model)"),t5e.forEach(t),TXe=i(y),Jf=n(y,"LI",{});var a5e=s(Jf);Foe=n(a5e,"STRONG",{});var OGr=s(Foe);MXe=r(OGr,"flaubert"),OGr.forEach(t),EXe=r(a5e," \u2014 "),hk=n(a5e,"A",{href:!0});var VGr=s(hk);CXe=r(VGr,"FlaubertConfig"),VGr.forEach(t),wXe=r(a5e," (FlauBERT model)"),a5e.forEach(t),AXe=i(y),Yf=n(y,"LI",{});var n5e=s(Yf);Toe=n(n5e,"STRONG",{});var XGr=s(Toe);yXe=r(XGr,"flava"),XGr.forEach(t),LXe=r(n5e," \u2014 "),pk=n(n5e,"A",{href:!0});var zGr=s(pk);xXe=r(zGr,"FlavaConfig"),zGr.forEach(t),$Xe=r(n5e," (Flava model)"),n5e.forEach(t),kXe=i(y),Kf=n(y,"LI",{});var s5e=s(Kf);Moe=n(s5e,"STRONG",{});var WGr=s(Moe);SXe=r(WGr,"fnet"),WGr.forEach(t),RXe=r(s5e," \u2014 "),_k=n(s5e,"A",{href:!0});var QGr=s(_k);PXe=r(QGr,"FNetConfig"),QGr.forEach(t),BXe=r(s5e," (FNet model)"),s5e.forEach(t),IXe=i(y),Zf=n(y,"LI",{});var l5e=s(Zf);Eoe=n(l5e,"STRONG",{});var HGr=s(Eoe);qXe=r(HGr,"fsmt"),HGr.forEach(t),NXe=r(l5e," \u2014 "),uk=n(l5e,"A",{href:!0});var UGr=s(uk);jXe=r(UGr,"FSMTConfig"),UGr.forEach(t),DXe=r(l5e," (FairSeq Machine-Translation model)"),l5e.forEach(t),GXe=i(y),em=n(y,"LI",{});var i5e=s(em);Coe=n(i5e,"STRONG",{});var JGr=s(Coe);OXe=r(JGr,"funnel"),JGr.forEach(t),VXe=r(i5e," \u2014 "),bk=n(i5e,"A",{href:!0});var YGr=s(bk);XXe=r(YGr,"FunnelConfig"),YGr.forEach(t),zXe=r(i5e," (Funnel Transformer model)"),i5e.forEach(t),WXe=i(y),om=n(y,"LI",{});var d5e=s(om);woe=n(d5e,"STRONG",{});var KGr=s(woe);QXe=r(KGr,"glpn"),KGr.forEach(t),HXe=r(d5e," \u2014 "),vk=n(d5e,"A",{href:!0});var ZGr=s(vk);UXe=r(ZGr,"GLPNConfig"),ZGr.forEach(t),JXe=r(d5e," (GLPN model)"),d5e.forEach(t),YXe=i(y),rm=n(y,"LI",{});var c5e=s(rm);Aoe=n(c5e,"STRONG",{});var eOr=s(Aoe);KXe=r(eOr,"gpt2"),eOr.forEach(t),ZXe=r(c5e," \u2014 "),Fk=n(c5e,"A",{href:!0});var oOr=s(Fk);eze=r(oOr,"GPT2Config"),oOr.forEach(t),oze=r(c5e," (OpenAI GPT-2 model)"),c5e.forEach(t),rze=i(y),tm=n(y,"LI",{});var f5e=s(tm);yoe=n(f5e,"STRONG",{});var rOr=s(yoe);tze=r(rOr,"gpt_neo"),rOr.forEach(t),aze=r(f5e," \u2014 "),Tk=n(f5e,"A",{href:!0});var tOr=s(Tk);nze=r(tOr,"GPTNeoConfig"),tOr.forEach(t),sze=r(f5e," (GPT Neo model)"),f5e.forEach(t),lze=i(y),am=n(y,"LI",{});var m5e=s(am);Loe=n(m5e,"STRONG",{});var aOr=s(Loe);ize=r(aOr,"gptj"),aOr.forEach(t),dze=r(m5e," \u2014 "),Mk=n(m5e,"A",{href:!0});var nOr=s(Mk);cze=r(nOr,"GPTJConfig"),nOr.forEach(t),fze=r(m5e," (GPT-J model)"),m5e.forEach(t),mze=i(y),nm=n(y,"LI",{});var g5e=s(nm);xoe=n(g5e,"STRONG",{});var sOr=s(xoe);gze=r(sOr,"hubert"),sOr.forEach(t),hze=r(g5e," \u2014 "),Ek=n(g5e,"A",{href:!0});var lOr=s(Ek);pze=r(lOr,"HubertConfig"),lOr.forEach(t),_ze=r(g5e," (Hubert model)"),g5e.forEach(t),uze=i(y),sm=n(y,"LI",{});var h5e=s(sm);$oe=n(h5e,"STRONG",{});var iOr=s($oe);bze=r(iOr,"ibert"),iOr.forEach(t),vze=r(h5e," \u2014 "),Ck=n(h5e,"A",{href:!0});var dOr=s(Ck);Fze=r(dOr,"IBertConfig"),dOr.forEach(t),Tze=r(h5e," (I-BERT model)"),h5e.forEach(t),Mze=i(y),lm=n(y,"LI",{});var p5e=s(lm);koe=n(p5e,"STRONG",{});var cOr=s(koe);Eze=r(cOr,"imagegpt"),cOr.forEach(t),Cze=r(p5e," \u2014 "),wk=n(p5e,"A",{href:!0});var fOr=s(wk);wze=r(fOr,"ImageGPTConfig"),fOr.forEach(t),Aze=r(p5e," (ImageGPT model)"),p5e.forEach(t),yze=i(y),im=n(y,"LI",{});var _5e=s(im);Soe=n(_5e,"STRONG",{});var mOr=s(Soe);Lze=r(mOr,"layoutlm"),mOr.forEach(t),xze=r(_5e," \u2014 "),Ak=n(_5e,"A",{href:!0});var gOr=s(Ak);$ze=r(gOr,"LayoutLMConfig"),gOr.forEach(t),kze=r(_5e," (LayoutLM model)"),_5e.forEach(t),Sze=i(y),dm=n(y,"LI",{});var u5e=s(dm);Roe=n(u5e,"STRONG",{});var hOr=s(Roe);Rze=r(hOr,"layoutlmv2"),hOr.forEach(t),Pze=r(u5e," \u2014 "),yk=n(u5e,"A",{href:!0});var pOr=s(yk);Bze=r(pOr,"LayoutLMv2Config"),pOr.forEach(t),Ize=r(u5e," (LayoutLMv2 model)"),u5e.forEach(t),qze=i(y),cm=n(y,"LI",{});var b5e=s(cm);Poe=n(b5e,"STRONG",{});var _Or=s(Poe);Nze=r(_Or,"led"),_Or.forEach(t),jze=r(b5e," \u2014 "),Lk=n(b5e,"A",{href:!0});var uOr=s(Lk);Dze=r(uOr,"LEDConfig"),uOr.forEach(t),Gze=r(b5e," (LED model)"),b5e.forEach(t),Oze=i(y),fm=n(y,"LI",{});var v5e=s(fm);Boe=n(v5e,"STRONG",{});var bOr=s(Boe);Vze=r(bOr,"longformer"),bOr.forEach(t),Xze=r(v5e," \u2014 "),xk=n(v5e,"A",{href:!0});var vOr=s(xk);zze=r(vOr,"LongformerConfig"),vOr.forEach(t),Wze=r(v5e," (Longformer model)"),v5e.forEach(t),Qze=i(y),mm=n(y,"LI",{});var F5e=s(mm);Ioe=n(F5e,"STRONG",{});var FOr=s(Ioe);Hze=r(FOr,"longt5"),FOr.forEach(t),Uze=r(F5e," \u2014 "),$k=n(F5e,"A",{href:!0});var TOr=s($k);Jze=r(TOr,"LongT5Config"),TOr.forEach(t),Yze=r(F5e," (LongT5 model)"),F5e.forEach(t),Kze=i(y),gm=n(y,"LI",{});var T5e=s(gm);qoe=n(T5e,"STRONG",{});var MOr=s(qoe);Zze=r(MOr,"luke"),MOr.forEach(t),eWe=r(T5e," \u2014 "),kk=n(T5e,"A",{href:!0});var EOr=s(kk);oWe=r(EOr,"LukeConfig"),EOr.forEach(t),rWe=r(T5e," (LUKE model)"),T5e.forEach(t),tWe=i(y),hm=n(y,"LI",{});var M5e=s(hm);Noe=n(M5e,"STRONG",{});var COr=s(Noe);aWe=r(COr,"lxmert"),COr.forEach(t),nWe=r(M5e," \u2014 "),Sk=n(M5e,"A",{href:!0});var wOr=s(Sk);sWe=r(wOr,"LxmertConfig"),wOr.forEach(t),lWe=r(M5e," (LXMERT model)"),M5e.forEach(t),iWe=i(y),pm=n(y,"LI",{});var E5e=s(pm);joe=n(E5e,"STRONG",{});var AOr=s(joe);dWe=r(AOr,"m2m_100"),AOr.forEach(t),cWe=r(E5e," \u2014 "),Rk=n(E5e,"A",{href:!0});var yOr=s(Rk);fWe=r(yOr,"M2M100Config"),yOr.forEach(t),mWe=r(E5e," (M2M100 model)"),E5e.forEach(t),gWe=i(y),_m=n(y,"LI",{});var C5e=s(_m);Doe=n(C5e,"STRONG",{});var LOr=s(Doe);hWe=r(LOr,"marian"),LOr.forEach(t),pWe=r(C5e," \u2014 "),Pk=n(C5e,"A",{href:!0});var xOr=s(Pk);_We=r(xOr,"MarianConfig"),xOr.forEach(t),uWe=r(C5e," (Marian model)"),C5e.forEach(t),bWe=i(y),um=n(y,"LI",{});var w5e=s(um);Goe=n(w5e,"STRONG",{});var $Or=s(Goe);vWe=r($Or,"maskformer"),$Or.forEach(t),FWe=r(w5e," \u2014 "),Bk=n(w5e,"A",{href:!0});var kOr=s(Bk);TWe=r(kOr,"MaskFormerConfig"),kOr.forEach(t),MWe=r(w5e," (MaskFormer model)"),w5e.forEach(t),EWe=i(y),bm=n(y,"LI",{});var A5e=s(bm);Ooe=n(A5e,"STRONG",{});var SOr=s(Ooe);CWe=r(SOr,"mbart"),SOr.forEach(t),wWe=r(A5e," \u2014 "),Ik=n(A5e,"A",{href:!0});var ROr=s(Ik);AWe=r(ROr,"MBartConfig"),ROr.forEach(t),yWe=r(A5e," (mBART model)"),A5e.forEach(t),LWe=i(y),vm=n(y,"LI",{});var y5e=s(vm);Voe=n(y5e,"STRONG",{});var POr=s(Voe);xWe=r(POr,"megatron-bert"),POr.forEach(t),$We=r(y5e," \u2014 "),qk=n(y5e,"A",{href:!0});var BOr=s(qk);kWe=r(BOr,"MegatronBertConfig"),BOr.forEach(t),SWe=r(y5e," (MegatronBert model)"),y5e.forEach(t),RWe=i(y),Fm=n(y,"LI",{});var L5e=s(Fm);Xoe=n(L5e,"STRONG",{});var IOr=s(Xoe);PWe=r(IOr,"mobilebert"),IOr.forEach(t),BWe=r(L5e," \u2014 "),Nk=n(L5e,"A",{href:!0});var qOr=s(Nk);IWe=r(qOr,"MobileBertConfig"),qOr.forEach(t),qWe=r(L5e," (MobileBERT model)"),L5e.forEach(t),NWe=i(y),Tm=n(y,"LI",{});var x5e=s(Tm);zoe=n(x5e,"STRONG",{});var NOr=s(zoe);jWe=r(NOr,"mpnet"),NOr.forEach(t),DWe=r(x5e," \u2014 "),jk=n(x5e,"A",{href:!0});var jOr=s(jk);GWe=r(jOr,"MPNetConfig"),jOr.forEach(t),OWe=r(x5e," (MPNet model)"),x5e.forEach(t),VWe=i(y),Mm=n(y,"LI",{});var $5e=s(Mm);Woe=n($5e,"STRONG",{});var DOr=s(Woe);XWe=r(DOr,"mt5"),DOr.forEach(t),zWe=r($5e," \u2014 "),Dk=n($5e,"A",{href:!0});var GOr=s(Dk);WWe=r(GOr,"MT5Config"),GOr.forEach(t),QWe=r($5e," (mT5 model)"),$5e.forEach(t),HWe=i(y),Em=n(y,"LI",{});var k5e=s(Em);Qoe=n(k5e,"STRONG",{});var OOr=s(Qoe);UWe=r(OOr,"nystromformer"),OOr.forEach(t),JWe=r(k5e," \u2014 "),Gk=n(k5e,"A",{href:!0});var VOr=s(Gk);YWe=r(VOr,"NystromformerConfig"),VOr.forEach(t),KWe=r(k5e," (Nystromformer model)"),k5e.forEach(t),ZWe=i(y),Cm=n(y,"LI",{});var S5e=s(Cm);Hoe=n(S5e,"STRONG",{});var XOr=s(Hoe);eQe=r(XOr,"openai-gpt"),XOr.forEach(t),oQe=r(S5e," \u2014 "),Ok=n(S5e,"A",{href:!0});var zOr=s(Ok);rQe=r(zOr,"OpenAIGPTConfig"),zOr.forEach(t),tQe=r(S5e," (OpenAI GPT model)"),S5e.forEach(t),aQe=i(y),wm=n(y,"LI",{});var R5e=s(wm);Uoe=n(R5e,"STRONG",{});var WOr=s(Uoe);nQe=r(WOr,"opt"),WOr.forEach(t),sQe=r(R5e," \u2014 "),Vk=n(R5e,"A",{href:!0});var QOr=s(Vk);lQe=r(QOr,"OPTConfig"),QOr.forEach(t),iQe=r(R5e," (OPT model)"),R5e.forEach(t),dQe=i(y),Am=n(y,"LI",{});var P5e=s(Am);Joe=n(P5e,"STRONG",{});var HOr=s(Joe);cQe=r(HOr,"pegasus"),HOr.forEach(t),fQe=r(P5e," \u2014 "),Xk=n(P5e,"A",{href:!0});var UOr=s(Xk);mQe=r(UOr,"PegasusConfig"),UOr.forEach(t),gQe=r(P5e," (Pegasus model)"),P5e.forEach(t),hQe=i(y),ym=n(y,"LI",{});var B5e=s(ym);Yoe=n(B5e,"STRONG",{});var JOr=s(Yoe);pQe=r(JOr,"perceiver"),JOr.forEach(t),_Qe=r(B5e," \u2014 "),zk=n(B5e,"A",{href:!0});var YOr=s(zk);uQe=r(YOr,"PerceiverConfig"),YOr.forEach(t),bQe=r(B5e," (Perceiver model)"),B5e.forEach(t),vQe=i(y),Lm=n(y,"LI",{});var I5e=s(Lm);Koe=n(I5e,"STRONG",{});var KOr=s(Koe);FQe=r(KOr,"plbart"),KOr.forEach(t),TQe=r(I5e," \u2014 "),Wk=n(I5e,"A",{href:!0});var ZOr=s(Wk);MQe=r(ZOr,"PLBartConfig"),ZOr.forEach(t),EQe=r(I5e," (PLBart model)"),I5e.forEach(t),CQe=i(y),xm=n(y,"LI",{});var q5e=s(xm);Zoe=n(q5e,"STRONG",{});var eVr=s(Zoe);wQe=r(eVr,"poolformer"),eVr.forEach(t),AQe=r(q5e," \u2014 "),Qk=n(q5e,"A",{href:!0});var oVr=s(Qk);yQe=r(oVr,"PoolFormerConfig"),oVr.forEach(t),LQe=r(q5e," (PoolFormer model)"),q5e.forEach(t),xQe=i(y),$m=n(y,"LI",{});var N5e=s($m);ere=n(N5e,"STRONG",{});var rVr=s(ere);$Qe=r(rVr,"prophetnet"),rVr.forEach(t),kQe=r(N5e," \u2014 "),Hk=n(N5e,"A",{href:!0});var tVr=s(Hk);SQe=r(tVr,"ProphetNetConfig"),tVr.forEach(t),RQe=r(N5e," (ProphetNet model)"),N5e.forEach(t),PQe=i(y),km=n(y,"LI",{});var j5e=s(km);ore=n(j5e,"STRONG",{});var aVr=s(ore);BQe=r(aVr,"qdqbert"),aVr.forEach(t),IQe=r(j5e," \u2014 "),Uk=n(j5e,"A",{href:!0});var nVr=s(Uk);qQe=r(nVr,"QDQBertConfig"),nVr.forEach(t),NQe=r(j5e," (QDQBert model)"),j5e.forEach(t),jQe=i(y),Sm=n(y,"LI",{});var D5e=s(Sm);rre=n(D5e,"STRONG",{});var sVr=s(rre);DQe=r(sVr,"rag"),sVr.forEach(t),GQe=r(D5e," \u2014 "),Jk=n(D5e,"A",{href:!0});var lVr=s(Jk);OQe=r(lVr,"RagConfig"),lVr.forEach(t),VQe=r(D5e," (RAG model)"),D5e.forEach(t),XQe=i(y),Rm=n(y,"LI",{});var G5e=s(Rm);tre=n(G5e,"STRONG",{});var iVr=s(tre);zQe=r(iVr,"realm"),iVr.forEach(t),WQe=r(G5e," \u2014 "),Yk=n(G5e,"A",{href:!0});var dVr=s(Yk);QQe=r(dVr,"RealmConfig"),dVr.forEach(t),HQe=r(G5e," (Realm model)"),G5e.forEach(t),UQe=i(y),Pm=n(y,"LI",{});var O5e=s(Pm);are=n(O5e,"STRONG",{});var cVr=s(are);JQe=r(cVr,"reformer"),cVr.forEach(t),YQe=r(O5e," \u2014 "),Kk=n(O5e,"A",{href:!0});var fVr=s(Kk);KQe=r(fVr,"ReformerConfig"),fVr.forEach(t),ZQe=r(O5e," (Reformer model)"),O5e.forEach(t),eHe=i(y),Bm=n(y,"LI",{});var V5e=s(Bm);nre=n(V5e,"STRONG",{});var mVr=s(nre);oHe=r(mVr,"regnet"),mVr.forEach(t),rHe=r(V5e," \u2014 "),Zk=n(V5e,"A",{href:!0});var gVr=s(Zk);tHe=r(gVr,"RegNetConfig"),gVr.forEach(t),aHe=r(V5e," (RegNet model)"),V5e.forEach(t),nHe=i(y),Im=n(y,"LI",{});var X5e=s(Im);sre=n(X5e,"STRONG",{});var hVr=s(sre);sHe=r(hVr,"rembert"),hVr.forEach(t),lHe=r(X5e," \u2014 "),eS=n(X5e,"A",{href:!0});var pVr=s(eS);iHe=r(pVr,"RemBertConfig"),pVr.forEach(t),dHe=r(X5e," (RemBERT model)"),X5e.forEach(t),cHe=i(y),qm=n(y,"LI",{});var z5e=s(qm);lre=n(z5e,"STRONG",{});var _Vr=s(lre);fHe=r(_Vr,"resnet"),_Vr.forEach(t),mHe=r(z5e," \u2014 "),oS=n(z5e,"A",{href:!0});var uVr=s(oS);gHe=r(uVr,"ResNetConfig"),uVr.forEach(t),hHe=r(z5e," (ResNet model)"),z5e.forEach(t),pHe=i(y),Nm=n(y,"LI",{});var W5e=s(Nm);ire=n(W5e,"STRONG",{});var bVr=s(ire);_He=r(bVr,"retribert"),bVr.forEach(t),uHe=r(W5e," \u2014 "),rS=n(W5e,"A",{href:!0});var vVr=s(rS);bHe=r(vVr,"RetriBertConfig"),vVr.forEach(t),vHe=r(W5e," (RetriBERT model)"),W5e.forEach(t),FHe=i(y),jm=n(y,"LI",{});var Q5e=s(jm);dre=n(Q5e,"STRONG",{});var FVr=s(dre);THe=r(FVr,"roberta"),FVr.forEach(t),MHe=r(Q5e," \u2014 "),tS=n(Q5e,"A",{href:!0});var TVr=s(tS);EHe=r(TVr,"RobertaConfig"),TVr.forEach(t),CHe=r(Q5e," (RoBERTa model)"),Q5e.forEach(t),wHe=i(y),Dm=n(y,"LI",{});var H5e=s(Dm);cre=n(H5e,"STRONG",{});var MVr=s(cre);AHe=r(MVr,"roformer"),MVr.forEach(t),yHe=r(H5e," \u2014 "),aS=n(H5e,"A",{href:!0});var EVr=s(aS);LHe=r(EVr,"RoFormerConfig"),EVr.forEach(t),xHe=r(H5e," (RoFormer model)"),H5e.forEach(t),$He=i(y),Gm=n(y,"LI",{});var U5e=s(Gm);fre=n(U5e,"STRONG",{});var CVr=s(fre);kHe=r(CVr,"segformer"),CVr.forEach(t),SHe=r(U5e," \u2014 "),nS=n(U5e,"A",{href:!0});var wVr=s(nS);RHe=r(wVr,"SegformerConfig"),wVr.forEach(t),PHe=r(U5e," (SegFormer model)"),U5e.forEach(t),BHe=i(y),Om=n(y,"LI",{});var J5e=s(Om);mre=n(J5e,"STRONG",{});var AVr=s(mre);IHe=r(AVr,"sew"),AVr.forEach(t),qHe=r(J5e," \u2014 "),sS=n(J5e,"A",{href:!0});var yVr=s(sS);NHe=r(yVr,"SEWConfig"),yVr.forEach(t),jHe=r(J5e," (SEW model)"),J5e.forEach(t),DHe=i(y),Vm=n(y,"LI",{});var Y5e=s(Vm);gre=n(Y5e,"STRONG",{});var LVr=s(gre);GHe=r(LVr,"sew-d"),LVr.forEach(t),OHe=r(Y5e," \u2014 "),lS=n(Y5e,"A",{href:!0});var xVr=s(lS);VHe=r(xVr,"SEWDConfig"),xVr.forEach(t),XHe=r(Y5e," (SEW-D model)"),Y5e.forEach(t),zHe=i(y),Xm=n(y,"LI",{});var K5e=s(Xm);hre=n(K5e,"STRONG",{});var $Vr=s(hre);WHe=r($Vr,"speech-encoder-decoder"),$Vr.forEach(t),QHe=r(K5e," \u2014 "),iS=n(K5e,"A",{href:!0});var kVr=s(iS);HHe=r(kVr,"SpeechEncoderDecoderConfig"),kVr.forEach(t),UHe=r(K5e," (Speech Encoder decoder model)"),K5e.forEach(t),JHe=i(y),zm=n(y,"LI",{});var Z5e=s(zm);pre=n(Z5e,"STRONG",{});var SVr=s(pre);YHe=r(SVr,"speech_to_text"),SVr.forEach(t),KHe=r(Z5e," \u2014 "),dS=n(Z5e,"A",{href:!0});var RVr=s(dS);ZHe=r(RVr,"Speech2TextConfig"),RVr.forEach(t),eUe=r(Z5e," (Speech2Text model)"),Z5e.forEach(t),oUe=i(y),Wm=n(y,"LI",{});var eCe=s(Wm);_re=n(eCe,"STRONG",{});var PVr=s(_re);rUe=r(PVr,"speech_to_text_2"),PVr.forEach(t),tUe=r(eCe," \u2014 "),cS=n(eCe,"A",{href:!0});var BVr=s(cS);aUe=r(BVr,"Speech2Text2Config"),BVr.forEach(t),nUe=r(eCe," (Speech2Text2 model)"),eCe.forEach(t),sUe=i(y),Qm=n(y,"LI",{});var oCe=s(Qm);ure=n(oCe,"STRONG",{});var IVr=s(ure);lUe=r(IVr,"splinter"),IVr.forEach(t),iUe=r(oCe," \u2014 "),fS=n(oCe,"A",{href:!0});var qVr=s(fS);dUe=r(qVr,"SplinterConfig"),qVr.forEach(t),cUe=r(oCe," (Splinter model)"),oCe.forEach(t),fUe=i(y),Hm=n(y,"LI",{});var rCe=s(Hm);bre=n(rCe,"STRONG",{});var NVr=s(bre);mUe=r(NVr,"squeezebert"),NVr.forEach(t),gUe=r(rCe," \u2014 "),mS=n(rCe,"A",{href:!0});var jVr=s(mS);hUe=r(jVr,"SqueezeBertConfig"),jVr.forEach(t),pUe=r(rCe," (SqueezeBERT model)"),rCe.forEach(t),_Ue=i(y),Um=n(y,"LI",{});var tCe=s(Um);vre=n(tCe,"STRONG",{});var DVr=s(vre);uUe=r(DVr,"swin"),DVr.forEach(t),bUe=r(tCe," \u2014 "),gS=n(tCe,"A",{href:!0});var GVr=s(gS);vUe=r(GVr,"SwinConfig"),GVr.forEach(t),FUe=r(tCe," (Swin model)"),tCe.forEach(t),TUe=i(y),Jm=n(y,"LI",{});var aCe=s(Jm);Fre=n(aCe,"STRONG",{});var OVr=s(Fre);MUe=r(OVr,"t5"),OVr.forEach(t),EUe=r(aCe," \u2014 "),hS=n(aCe,"A",{href:!0});var VVr=s(hS);CUe=r(VVr,"T5Config"),VVr.forEach(t),wUe=r(aCe," (T5 model)"),aCe.forEach(t),AUe=i(y),Ym=n(y,"LI",{});var nCe=s(Ym);Tre=n(nCe,"STRONG",{});var XVr=s(Tre);yUe=r(XVr,"tapas"),XVr.forEach(t),LUe=r(nCe," \u2014 "),pS=n(nCe,"A",{href:!0});var zVr=s(pS);xUe=r(zVr,"TapasConfig"),zVr.forEach(t),$Ue=r(nCe," (TAPAS model)"),nCe.forEach(t),kUe=i(y),Km=n(y,"LI",{});var sCe=s(Km);Mre=n(sCe,"STRONG",{});var WVr=s(Mre);SUe=r(WVr,"transfo-xl"),WVr.forEach(t),RUe=r(sCe," \u2014 "),_S=n(sCe,"A",{href:!0});var QVr=s(_S);PUe=r(QVr,"TransfoXLConfig"),QVr.forEach(t),BUe=r(sCe," (Transformer-XL model)"),sCe.forEach(t),IUe=i(y),Zm=n(y,"LI",{});var lCe=s(Zm);Ere=n(lCe,"STRONG",{});var HVr=s(Ere);qUe=r(HVr,"trocr"),HVr.forEach(t),NUe=r(lCe," \u2014 "),uS=n(lCe,"A",{href:!0});var UVr=s(uS);jUe=r(UVr,"TrOCRConfig"),UVr.forEach(t),DUe=r(lCe," (TrOCR model)"),lCe.forEach(t),GUe=i(y),eg=n(y,"LI",{});var iCe=s(eg);Cre=n(iCe,"STRONG",{});var JVr=s(Cre);OUe=r(JVr,"unispeech"),JVr.forEach(t),VUe=r(iCe," \u2014 "),bS=n(iCe,"A",{href:!0});var YVr=s(bS);XUe=r(YVr,"UniSpeechConfig"),YVr.forEach(t),zUe=r(iCe," (UniSpeech model)"),iCe.forEach(t),WUe=i(y),og=n(y,"LI",{});var dCe=s(og);wre=n(dCe,"STRONG",{});var KVr=s(wre);QUe=r(KVr,"unispeech-sat"),KVr.forEach(t),HUe=r(dCe," \u2014 "),vS=n(dCe,"A",{href:!0});var ZVr=s(vS);UUe=r(ZVr,"UniSpeechSatConfig"),ZVr.forEach(t),JUe=r(dCe," (UniSpeechSat model)"),dCe.forEach(t),YUe=i(y),rg=n(y,"LI",{});var cCe=s(rg);Are=n(cCe,"STRONG",{});var eXr=s(Are);KUe=r(eXr,"van"),eXr.forEach(t),ZUe=r(cCe," \u2014 "),FS=n(cCe,"A",{href:!0});var oXr=s(FS);eJe=r(oXr,"VanConfig"),oXr.forEach(t),oJe=r(cCe," (VAN model)"),cCe.forEach(t),rJe=i(y),tg=n(y,"LI",{});var fCe=s(tg);yre=n(fCe,"STRONG",{});var rXr=s(yre);tJe=r(rXr,"vilt"),rXr.forEach(t),aJe=r(fCe," \u2014 "),TS=n(fCe,"A",{href:!0});var tXr=s(TS);nJe=r(tXr,"ViltConfig"),tXr.forEach(t),sJe=r(fCe," (ViLT model)"),fCe.forEach(t),lJe=i(y),ag=n(y,"LI",{});var mCe=s(ag);Lre=n(mCe,"STRONG",{});var aXr=s(Lre);iJe=r(aXr,"vision-encoder-decoder"),aXr.forEach(t),dJe=r(mCe," \u2014 "),MS=n(mCe,"A",{href:!0});var nXr=s(MS);cJe=r(nXr,"VisionEncoderDecoderConfig"),nXr.forEach(t),fJe=r(mCe," (Vision Encoder decoder model)"),mCe.forEach(t),mJe=i(y),ng=n(y,"LI",{});var gCe=s(ng);xre=n(gCe,"STRONG",{});var sXr=s(xre);gJe=r(sXr,"vision-text-dual-encoder"),sXr.forEach(t),hJe=r(gCe," \u2014 "),ES=n(gCe,"A",{href:!0});var lXr=s(ES);pJe=r(lXr,"VisionTextDualEncoderConfig"),lXr.forEach(t),_Je=r(gCe," (VisionTextDualEncoder model)"),gCe.forEach(t),uJe=i(y),sg=n(y,"LI",{});var hCe=s(sg);$re=n(hCe,"STRONG",{});var iXr=s($re);bJe=r(iXr,"visual_bert"),iXr.forEach(t),vJe=r(hCe," \u2014 "),CS=n(hCe,"A",{href:!0});var dXr=s(CS);FJe=r(dXr,"VisualBertConfig"),dXr.forEach(t),TJe=r(hCe," (VisualBert model)"),hCe.forEach(t),MJe=i(y),lg=n(y,"LI",{});var pCe=s(lg);kre=n(pCe,"STRONG",{});var cXr=s(kre);EJe=r(cXr,"vit"),cXr.forEach(t),CJe=r(pCe," \u2014 "),wS=n(pCe,"A",{href:!0});var fXr=s(wS);wJe=r(fXr,"ViTConfig"),fXr.forEach(t),AJe=r(pCe," (ViT model)"),pCe.forEach(t),yJe=i(y),ig=n(y,"LI",{});var _Ce=s(ig);Sre=n(_Ce,"STRONG",{});var mXr=s(Sre);LJe=r(mXr,"vit_mae"),mXr.forEach(t),xJe=r(_Ce," \u2014 "),AS=n(_Ce,"A",{href:!0});var gXr=s(AS);$Je=r(gXr,"ViTMAEConfig"),gXr.forEach(t),kJe=r(_Ce," (ViTMAE model)"),_Ce.forEach(t),SJe=i(y),dg=n(y,"LI",{});var uCe=s(dg);Rre=n(uCe,"STRONG",{});var hXr=s(Rre);RJe=r(hXr,"wav2vec2"),hXr.forEach(t),PJe=r(uCe," \u2014 "),yS=n(uCe,"A",{href:!0});var pXr=s(yS);BJe=r(pXr,"Wav2Vec2Config"),pXr.forEach(t),IJe=r(uCe," (Wav2Vec2 model)"),uCe.forEach(t),qJe=i(y),cg=n(y,"LI",{});var bCe=s(cg);Pre=n(bCe,"STRONG",{});var _Xr=s(Pre);NJe=r(_Xr,"wav2vec2-conformer"),_Xr.forEach(t),jJe=r(bCe," \u2014 "),LS=n(bCe,"A",{href:!0});var uXr=s(LS);DJe=r(uXr,"Wav2Vec2ConformerConfig"),uXr.forEach(t),GJe=r(bCe," (Wav2Vec2-Conformer model)"),bCe.forEach(t),OJe=i(y),fg=n(y,"LI",{});var vCe=s(fg);Bre=n(vCe,"STRONG",{});var bXr=s(Bre);VJe=r(bXr,"wavlm"),bXr.forEach(t),XJe=r(vCe," \u2014 "),xS=n(vCe,"A",{href:!0});var vXr=s(xS);zJe=r(vXr,"WavLMConfig"),vXr.forEach(t),WJe=r(vCe," (WavLM model)"),vCe.forEach(t),QJe=i(y),mg=n(y,"LI",{});var FCe=s(mg);Ire=n(FCe,"STRONG",{});var FXr=s(Ire);HJe=r(FXr,"xglm"),FXr.forEach(t),UJe=r(FCe," \u2014 "),$S=n(FCe,"A",{href:!0});var TXr=s($S);JJe=r(TXr,"XGLMConfig"),TXr.forEach(t),YJe=r(FCe," (XGLM model)"),FCe.forEach(t),KJe=i(y),gg=n(y,"LI",{});var TCe=s(gg);qre=n(TCe,"STRONG",{});var MXr=s(qre);ZJe=r(MXr,"xlm"),MXr.forEach(t),eYe=r(TCe," \u2014 "),kS=n(TCe,"A",{href:!0});var EXr=s(kS);oYe=r(EXr,"XLMConfig"),EXr.forEach(t),rYe=r(TCe," (XLM model)"),TCe.forEach(t),tYe=i(y),hg=n(y,"LI",{});var MCe=s(hg);Nre=n(MCe,"STRONG",{});var CXr=s(Nre);aYe=r(CXr,"xlm-prophetnet"),CXr.forEach(t),nYe=r(MCe," \u2014 "),SS=n(MCe,"A",{href:!0});var wXr=s(SS);sYe=r(wXr,"XLMProphetNetConfig"),wXr.forEach(t),lYe=r(MCe," (XLMProphetNet model)"),MCe.forEach(t),iYe=i(y),pg=n(y,"LI",{});var ECe=s(pg);jre=n(ECe,"STRONG",{});var AXr=s(jre);dYe=r(AXr,"xlm-roberta"),AXr.forEach(t),cYe=r(ECe," \u2014 "),RS=n(ECe,"A",{href:!0});var yXr=s(RS);fYe=r(yXr,"XLMRobertaConfig"),yXr.forEach(t),mYe=r(ECe," (XLM-RoBERTa model)"),ECe.forEach(t),gYe=i(y),_g=n(y,"LI",{});var CCe=s(_g);Dre=n(CCe,"STRONG",{});var LXr=s(Dre);hYe=r(LXr,"xlm-roberta-xl"),LXr.forEach(t),pYe=r(CCe," \u2014 "),PS=n(CCe,"A",{href:!0});var xXr=s(PS);_Ye=r(xXr,"XLMRobertaXLConfig"),xXr.forEach(t),uYe=r(CCe," (XLM-RoBERTa-XL model)"),CCe.forEach(t),bYe=i(y),ug=n(y,"LI",{});var wCe=s(ug);Gre=n(wCe,"STRONG",{});var $Xr=s(Gre);vYe=r($Xr,"xlnet"),$Xr.forEach(t),FYe=r(wCe," \u2014 "),BS=n(wCe,"A",{href:!0});var kXr=s(BS);TYe=r(kXr,"XLNetConfig"),kXr.forEach(t),MYe=r(wCe," (XLNet model)"),wCe.forEach(t),EYe=i(y),bg=n(y,"LI",{});var ACe=s(bg);Ore=n(ACe,"STRONG",{});var SXr=s(Ore);CYe=r(SXr,"yolos"),SXr.forEach(t),wYe=r(ACe," \u2014 "),IS=n(ACe,"A",{href:!0});var RXr=s(IS);AYe=r(RXr,"YolosConfig"),RXr.forEach(t),yYe=r(ACe," (YOLOS model)"),ACe.forEach(t),LYe=i(y),vg=n(y,"LI",{});var yCe=s(vg);Vre=n(yCe,"STRONG",{});var PXr=s(Vre);xYe=r(PXr,"yoso"),PXr.forEach(t),$Ye=r(yCe," \u2014 "),qS=n(yCe,"A",{href:!0});var BXr=s(qS);kYe=r(BXr,"YosoConfig"),BXr.forEach(t),SYe=r(yCe," (YOSO model)"),yCe.forEach(t),y.forEach(t),RYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),PYe=i(et),Tg=n(et,"DIV",{class:!0});var ije=s(Tg);T(M0.$$.fragment,ije),BYe=i(ije),Xre=n(ije,"P",{});var IXr=s(Xre);IYe=r(IXr,"Register a new configuration for this class."),IXr.forEach(t),ije.forEach(t),et.forEach(t),fqe=i(f),Ti=n(f,"H2",{class:!0});var dje=s(Ti);Mg=n(dje,"A",{id:!0,class:!0,href:!0});var qXr=s(Mg);zre=n(qXr,"SPAN",{});var NXr=s(zre);T(E0.$$.fragment,NXr),NXr.forEach(t),qXr.forEach(t),qYe=i(dje),Wre=n(dje,"SPAN",{});var jXr=s(Wre);NYe=r(jXr,"AutoTokenizer"),jXr.forEach(t),dje.forEach(t),mqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(C0.$$.fragment,qs),jYe=i(qs),w0=n(qs,"P",{});var cje=s(w0);DYe=r(cje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=n(cje,"A",{href:!0});var DXr=s(NS);GYe=r(DXr,"AutoTokenizer.from_pretrained()"),DXr.forEach(t),OYe=r(cje," class method."),cje.forEach(t),VYe=i(qs),A0=n(qs,"P",{});var fje=s(A0);XYe=r(fje,"This class cannot be instantiated directly using "),Qre=n(fje,"CODE",{});var GXr=s(Qre);zYe=r(GXr,"__init__()"),GXr.forEach(t),WYe=r(fje," (throws an error)."),fje.forEach(t),QYe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(y0.$$.fragment,Ns),HYe=i(Ns),Hre=n(Ns,"P",{});var OXr=s(Hre);UYe=r(OXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),OXr.forEach(t),JYe=i(Ns),Aa=n(Ns,"P",{});var u3=s(Aa);YYe=r(u3,"The tokenizer class to instantiate is selected based on the "),Ure=n(u3,"CODE",{});var VXr=s(Ure);KYe=r(VXr,"model_type"),VXr.forEach(t),ZYe=r(u3,` property of the config object (either
passed as an argument or loaded from `),Jre=n(u3,"CODE",{});var XXr=s(Jre);eKe=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),oKe=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yre=n(u3,"CODE",{});var zXr=s(Yre);rKe=r(zXr,"pretrained_model_name_or_path"),zXr.forEach(t),tKe=r(u3,":"),u3.forEach(t),aKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Lx=s(Sn);Kre=n(Lx,"STRONG",{});var WXr=s(Kre);nKe=r(WXr,"albert"),WXr.forEach(t),sKe=r(Lx," \u2014 "),jS=n(Lx,"A",{href:!0});var QXr=s(jS);lKe=r(QXr,"AlbertTokenizer"),QXr.forEach(t),iKe=r(Lx," or "),DS=n(Lx,"A",{href:!0});var HXr=s(DS);dKe=r(HXr,"AlbertTokenizerFast"),HXr.forEach(t),cKe=r(Lx," (ALBERT model)"),Lx.forEach(t),fKe=i(S),Rn=n(S,"LI",{});var xx=s(Rn);Zre=n(xx,"STRONG",{});var UXr=s(Zre);mKe=r(UXr,"bart"),UXr.forEach(t),gKe=r(xx," \u2014 "),GS=n(xx,"A",{href:!0});var JXr=s(GS);hKe=r(JXr,"BartTokenizer"),JXr.forEach(t),pKe=r(xx," or "),OS=n(xx,"A",{href:!0});var YXr=s(OS);_Ke=r(YXr,"BartTokenizerFast"),YXr.forEach(t),uKe=r(xx," (BART model)"),xx.forEach(t),bKe=i(S),Pn=n(S,"LI",{});var $x=s(Pn);ete=n($x,"STRONG",{});var KXr=s(ete);vKe=r(KXr,"barthez"),KXr.forEach(t),FKe=r($x," \u2014 "),VS=n($x,"A",{href:!0});var ZXr=s(VS);TKe=r(ZXr,"BarthezTokenizer"),ZXr.forEach(t),MKe=r($x," or "),XS=n($x,"A",{href:!0});var ezr=s(XS);EKe=r(ezr,"BarthezTokenizerFast"),ezr.forEach(t),CKe=r($x," (BARThez model)"),$x.forEach(t),wKe=i(S),Eg=n(S,"LI",{});var LCe=s(Eg);ote=n(LCe,"STRONG",{});var ozr=s(ote);AKe=r(ozr,"bartpho"),ozr.forEach(t),yKe=r(LCe," \u2014 "),zS=n(LCe,"A",{href:!0});var rzr=s(zS);LKe=r(rzr,"BartphoTokenizer"),rzr.forEach(t),xKe=r(LCe," (BARTpho model)"),LCe.forEach(t),$Ke=i(S),Bn=n(S,"LI",{});var kx=s(Bn);rte=n(kx,"STRONG",{});var tzr=s(rte);kKe=r(tzr,"bert"),tzr.forEach(t),SKe=r(kx," \u2014 "),WS=n(kx,"A",{href:!0});var azr=s(WS);RKe=r(azr,"BertTokenizer"),azr.forEach(t),PKe=r(kx," or "),QS=n(kx,"A",{href:!0});var nzr=s(QS);BKe=r(nzr,"BertTokenizerFast"),nzr.forEach(t),IKe=r(kx," (BERT model)"),kx.forEach(t),qKe=i(S),Cg=n(S,"LI",{});var xCe=s(Cg);tte=n(xCe,"STRONG",{});var szr=s(tte);NKe=r(szr,"bert-generation"),szr.forEach(t),jKe=r(xCe," \u2014 "),HS=n(xCe,"A",{href:!0});var lzr=s(HS);DKe=r(lzr,"BertGenerationTokenizer"),lzr.forEach(t),GKe=r(xCe," (Bert Generation model)"),xCe.forEach(t),OKe=i(S),wg=n(S,"LI",{});var $Ce=s(wg);ate=n($Ce,"STRONG",{});var izr=s(ate);VKe=r(izr,"bert-japanese"),izr.forEach(t),XKe=r($Ce," \u2014 "),US=n($Ce,"A",{href:!0});var dzr=s(US);zKe=r(dzr,"BertJapaneseTokenizer"),dzr.forEach(t),WKe=r($Ce," (BertJapanese model)"),$Ce.forEach(t),QKe=i(S),Ag=n(S,"LI",{});var kCe=s(Ag);nte=n(kCe,"STRONG",{});var czr=s(nte);HKe=r(czr,"bertweet"),czr.forEach(t),UKe=r(kCe," \u2014 "),JS=n(kCe,"A",{href:!0});var fzr=s(JS);JKe=r(fzr,"BertweetTokenizer"),fzr.forEach(t),YKe=r(kCe," (Bertweet model)"),kCe.forEach(t),KKe=i(S),In=n(S,"LI",{});var Sx=s(In);ste=n(Sx,"STRONG",{});var mzr=s(ste);ZKe=r(mzr,"big_bird"),mzr.forEach(t),eZe=r(Sx," \u2014 "),YS=n(Sx,"A",{href:!0});var gzr=s(YS);oZe=r(gzr,"BigBirdTokenizer"),gzr.forEach(t),rZe=r(Sx," or "),KS=n(Sx,"A",{href:!0});var hzr=s(KS);tZe=r(hzr,"BigBirdTokenizerFast"),hzr.forEach(t),aZe=r(Sx," (BigBird model)"),Sx.forEach(t),nZe=i(S),qn=n(S,"LI",{});var Rx=s(qn);lte=n(Rx,"STRONG",{});var pzr=s(lte);sZe=r(pzr,"bigbird_pegasus"),pzr.forEach(t),lZe=r(Rx," \u2014 "),ZS=n(Rx,"A",{href:!0});var _zr=s(ZS);iZe=r(_zr,"PegasusTokenizer"),_zr.forEach(t),dZe=r(Rx," or "),eR=n(Rx,"A",{href:!0});var uzr=s(eR);cZe=r(uzr,"PegasusTokenizerFast"),uzr.forEach(t),fZe=r(Rx," (BigBirdPegasus model)"),Rx.forEach(t),mZe=i(S),Nn=n(S,"LI",{});var Px=s(Nn);ite=n(Px,"STRONG",{});var bzr=s(ite);gZe=r(bzr,"blenderbot"),bzr.forEach(t),hZe=r(Px," \u2014 "),oR=n(Px,"A",{href:!0});var vzr=s(oR);pZe=r(vzr,"BlenderbotTokenizer"),vzr.forEach(t),_Ze=r(Px," or "),rR=n(Px,"A",{href:!0});var Fzr=s(rR);uZe=r(Fzr,"BlenderbotTokenizerFast"),Fzr.forEach(t),bZe=r(Px," (Blenderbot model)"),Px.forEach(t),vZe=i(S),yg=n(S,"LI",{});var SCe=s(yg);dte=n(SCe,"STRONG",{});var Tzr=s(dte);FZe=r(Tzr,"blenderbot-small"),Tzr.forEach(t),TZe=r(SCe," \u2014 "),tR=n(SCe,"A",{href:!0});var Mzr=s(tR);MZe=r(Mzr,"BlenderbotSmallTokenizer"),Mzr.forEach(t),EZe=r(SCe," (BlenderbotSmall model)"),SCe.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var RCe=s(Lg);cte=n(RCe,"STRONG",{});var Ezr=s(cte);wZe=r(Ezr,"byt5"),Ezr.forEach(t),AZe=r(RCe," \u2014 "),aR=n(RCe,"A",{href:!0});var Czr=s(aR);yZe=r(Czr,"ByT5Tokenizer"),Czr.forEach(t),LZe=r(RCe," (ByT5 model)"),RCe.forEach(t),xZe=i(S),jn=n(S,"LI",{});var Bx=s(jn);fte=n(Bx,"STRONG",{});var wzr=s(fte);$Ze=r(wzr,"camembert"),wzr.forEach(t),kZe=r(Bx," \u2014 "),nR=n(Bx,"A",{href:!0});var Azr=s(nR);SZe=r(Azr,"CamembertTokenizer"),Azr.forEach(t),RZe=r(Bx," or "),sR=n(Bx,"A",{href:!0});var yzr=s(sR);PZe=r(yzr,"CamembertTokenizerFast"),yzr.forEach(t),BZe=r(Bx," (CamemBERT model)"),Bx.forEach(t),IZe=i(S),xg=n(S,"LI",{});var PCe=s(xg);mte=n(PCe,"STRONG",{});var Lzr=s(mte);qZe=r(Lzr,"canine"),Lzr.forEach(t),NZe=r(PCe," \u2014 "),lR=n(PCe,"A",{href:!0});var xzr=s(lR);jZe=r(xzr,"CanineTokenizer"),xzr.forEach(t),DZe=r(PCe," (Canine model)"),PCe.forEach(t),GZe=i(S),Dn=n(S,"LI",{});var Ix=s(Dn);gte=n(Ix,"STRONG",{});var $zr=s(gte);OZe=r($zr,"clip"),$zr.forEach(t),VZe=r(Ix," \u2014 "),iR=n(Ix,"A",{href:!0});var kzr=s(iR);XZe=r(kzr,"CLIPTokenizer"),kzr.forEach(t),zZe=r(Ix," or "),dR=n(Ix,"A",{href:!0});var Szr=s(dR);WZe=r(Szr,"CLIPTokenizerFast"),Szr.forEach(t),QZe=r(Ix," (CLIP model)"),Ix.forEach(t),HZe=i(S),Gn=n(S,"LI",{});var qx=s(Gn);hte=n(qx,"STRONG",{});var Rzr=s(hte);UZe=r(Rzr,"convbert"),Rzr.forEach(t),JZe=r(qx," \u2014 "),cR=n(qx,"A",{href:!0});var Pzr=s(cR);YZe=r(Pzr,"ConvBertTokenizer"),Pzr.forEach(t),KZe=r(qx," or "),fR=n(qx,"A",{href:!0});var Bzr=s(fR);ZZe=r(Bzr,"ConvBertTokenizerFast"),Bzr.forEach(t),eeo=r(qx," (ConvBERT model)"),qx.forEach(t),oeo=i(S),On=n(S,"LI",{});var Nx=s(On);pte=n(Nx,"STRONG",{});var Izr=s(pte);reo=r(Izr,"cpm"),Izr.forEach(t),teo=r(Nx," \u2014 "),mR=n(Nx,"A",{href:!0});var qzr=s(mR);aeo=r(qzr,"CpmTokenizer"),qzr.forEach(t),neo=r(Nx," or "),gR=n(Nx,"A",{href:!0});var Nzr=s(gR);seo=r(Nzr,"CpmTokenizerFast"),Nzr.forEach(t),leo=r(Nx," (CPM model)"),Nx.forEach(t),ieo=i(S),$g=n(S,"LI",{});var BCe=s($g);_te=n(BCe,"STRONG",{});var jzr=s(_te);deo=r(jzr,"ctrl"),jzr.forEach(t),ceo=r(BCe," \u2014 "),hR=n(BCe,"A",{href:!0});var Dzr=s(hR);feo=r(Dzr,"CTRLTokenizer"),Dzr.forEach(t),meo=r(BCe," (CTRL model)"),BCe.forEach(t),geo=i(S),Vn=n(S,"LI",{});var jx=s(Vn);ute=n(jx,"STRONG",{});var Gzr=s(ute);heo=r(Gzr,"data2vec-text"),Gzr.forEach(t),peo=r(jx," \u2014 "),pR=n(jx,"A",{href:!0});var Ozr=s(pR);_eo=r(Ozr,"RobertaTokenizer"),Ozr.forEach(t),ueo=r(jx," or "),_R=n(jx,"A",{href:!0});var Vzr=s(_R);beo=r(Vzr,"RobertaTokenizerFast"),Vzr.forEach(t),veo=r(jx," (Data2VecText model)"),jx.forEach(t),Feo=i(S),Xn=n(S,"LI",{});var Dx=s(Xn);bte=n(Dx,"STRONG",{});var Xzr=s(bte);Teo=r(Xzr,"deberta"),Xzr.forEach(t),Meo=r(Dx," \u2014 "),uR=n(Dx,"A",{href:!0});var zzr=s(uR);Eeo=r(zzr,"DebertaTokenizer"),zzr.forEach(t),Ceo=r(Dx," or "),bR=n(Dx,"A",{href:!0});var Wzr=s(bR);weo=r(Wzr,"DebertaTokenizerFast"),Wzr.forEach(t),Aeo=r(Dx," (DeBERTa model)"),Dx.forEach(t),yeo=i(S),zn=n(S,"LI",{});var Gx=s(zn);vte=n(Gx,"STRONG",{});var Qzr=s(vte);Leo=r(Qzr,"deberta-v2"),Qzr.forEach(t),xeo=r(Gx," \u2014 "),vR=n(Gx,"A",{href:!0});var Hzr=s(vR);$eo=r(Hzr,"DebertaV2Tokenizer"),Hzr.forEach(t),keo=r(Gx," or "),FR=n(Gx,"A",{href:!0});var Uzr=s(FR);Seo=r(Uzr,"DebertaV2TokenizerFast"),Uzr.forEach(t),Reo=r(Gx," (DeBERTa-v2 model)"),Gx.forEach(t),Peo=i(S),Wn=n(S,"LI",{});var Ox=s(Wn);Fte=n(Ox,"STRONG",{});var Jzr=s(Fte);Beo=r(Jzr,"distilbert"),Jzr.forEach(t),Ieo=r(Ox," \u2014 "),TR=n(Ox,"A",{href:!0});var Yzr=s(TR);qeo=r(Yzr,"DistilBertTokenizer"),Yzr.forEach(t),Neo=r(Ox," or "),MR=n(Ox,"A",{href:!0});var Kzr=s(MR);jeo=r(Kzr,"DistilBertTokenizerFast"),Kzr.forEach(t),Deo=r(Ox," (DistilBERT model)"),Ox.forEach(t),Geo=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);Tte=n(Vx,"STRONG",{});var Zzr=s(Tte);Oeo=r(Zzr,"dpr"),Zzr.forEach(t),Veo=r(Vx," \u2014 "),ER=n(Vx,"A",{href:!0});var eWr=s(ER);Xeo=r(eWr,"DPRQuestionEncoderTokenizer"),eWr.forEach(t),zeo=r(Vx," or "),CR=n(Vx,"A",{href:!0});var oWr=s(CR);Weo=r(oWr,"DPRQuestionEncoderTokenizerFast"),oWr.forEach(t),Qeo=r(Vx," (DPR model)"),Vx.forEach(t),Heo=i(S),Hn=n(S,"LI",{});var Xx=s(Hn);Mte=n(Xx,"STRONG",{});var rWr=s(Mte);Ueo=r(rWr,"electra"),rWr.forEach(t),Jeo=r(Xx," \u2014 "),wR=n(Xx,"A",{href:!0});var tWr=s(wR);Yeo=r(tWr,"ElectraTokenizer"),tWr.forEach(t),Keo=r(Xx," or "),AR=n(Xx,"A",{href:!0});var aWr=s(AR);Zeo=r(aWr,"ElectraTokenizerFast"),aWr.forEach(t),eoo=r(Xx," (ELECTRA model)"),Xx.forEach(t),ooo=i(S),kg=n(S,"LI",{});var ICe=s(kg);Ete=n(ICe,"STRONG",{});var nWr=s(Ete);roo=r(nWr,"flaubert"),nWr.forEach(t),too=r(ICe," \u2014 "),yR=n(ICe,"A",{href:!0});var sWr=s(yR);aoo=r(sWr,"FlaubertTokenizer"),sWr.forEach(t),noo=r(ICe," (FlauBERT model)"),ICe.forEach(t),soo=i(S),Un=n(S,"LI",{});var zx=s(Un);Cte=n(zx,"STRONG",{});var lWr=s(Cte);loo=r(lWr,"fnet"),lWr.forEach(t),ioo=r(zx," \u2014 "),LR=n(zx,"A",{href:!0});var iWr=s(LR);doo=r(iWr,"FNetTokenizer"),iWr.forEach(t),coo=r(zx," or "),xR=n(zx,"A",{href:!0});var dWr=s(xR);foo=r(dWr,"FNetTokenizerFast"),dWr.forEach(t),moo=r(zx," (FNet model)"),zx.forEach(t),goo=i(S),Sg=n(S,"LI",{});var qCe=s(Sg);wte=n(qCe,"STRONG",{});var cWr=s(wte);hoo=r(cWr,"fsmt"),cWr.forEach(t),poo=r(qCe," \u2014 "),$R=n(qCe,"A",{href:!0});var fWr=s($R);_oo=r(fWr,"FSMTTokenizer"),fWr.forEach(t),uoo=r(qCe," (FairSeq Machine-Translation model)"),qCe.forEach(t),boo=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);Ate=n(Wx,"STRONG",{});var mWr=s(Ate);voo=r(mWr,"funnel"),mWr.forEach(t),Foo=r(Wx," \u2014 "),kR=n(Wx,"A",{href:!0});var gWr=s(kR);Too=r(gWr,"FunnelTokenizer"),gWr.forEach(t),Moo=r(Wx," or "),SR=n(Wx,"A",{href:!0});var hWr=s(SR);Eoo=r(hWr,"FunnelTokenizerFast"),hWr.forEach(t),Coo=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),woo=i(S),Yn=n(S,"LI",{});var Qx=s(Yn);yte=n(Qx,"STRONG",{});var pWr=s(yte);Aoo=r(pWr,"gpt2"),pWr.forEach(t),yoo=r(Qx," \u2014 "),RR=n(Qx,"A",{href:!0});var _Wr=s(RR);Loo=r(_Wr,"GPT2Tokenizer"),_Wr.forEach(t),xoo=r(Qx," or "),PR=n(Qx,"A",{href:!0});var uWr=s(PR);$oo=r(uWr,"GPT2TokenizerFast"),uWr.forEach(t),koo=r(Qx," (OpenAI GPT-2 model)"),Qx.forEach(t),Soo=i(S),Kn=n(S,"LI",{});var Hx=s(Kn);Lte=n(Hx,"STRONG",{});var bWr=s(Lte);Roo=r(bWr,"gpt_neo"),bWr.forEach(t),Poo=r(Hx," \u2014 "),BR=n(Hx,"A",{href:!0});var vWr=s(BR);Boo=r(vWr,"GPT2Tokenizer"),vWr.forEach(t),Ioo=r(Hx," or "),IR=n(Hx,"A",{href:!0});var FWr=s(IR);qoo=r(FWr,"GPT2TokenizerFast"),FWr.forEach(t),Noo=r(Hx," (GPT Neo model)"),Hx.forEach(t),joo=i(S),Zn=n(S,"LI",{});var Ux=s(Zn);xte=n(Ux,"STRONG",{});var TWr=s(xte);Doo=r(TWr,"gptj"),TWr.forEach(t),Goo=r(Ux," \u2014 "),qR=n(Ux,"A",{href:!0});var MWr=s(qR);Ooo=r(MWr,"GPT2Tokenizer"),MWr.forEach(t),Voo=r(Ux," or "),NR=n(Ux,"A",{href:!0});var EWr=s(NR);Xoo=r(EWr,"GPT2TokenizerFast"),EWr.forEach(t),zoo=r(Ux," (GPT-J model)"),Ux.forEach(t),Woo=i(S),es=n(S,"LI",{});var Jx=s(es);$te=n(Jx,"STRONG",{});var CWr=s($te);Qoo=r(CWr,"herbert"),CWr.forEach(t),Hoo=r(Jx," \u2014 "),jR=n(Jx,"A",{href:!0});var wWr=s(jR);Uoo=r(wWr,"HerbertTokenizer"),wWr.forEach(t),Joo=r(Jx," or "),DR=n(Jx,"A",{href:!0});var AWr=s(DR);Yoo=r(AWr,"HerbertTokenizerFast"),AWr.forEach(t),Koo=r(Jx," (HerBERT model)"),Jx.forEach(t),Zoo=i(S),Rg=n(S,"LI",{});var NCe=s(Rg);kte=n(NCe,"STRONG",{});var yWr=s(kte);ero=r(yWr,"hubert"),yWr.forEach(t),oro=r(NCe," \u2014 "),GR=n(NCe,"A",{href:!0});var LWr=s(GR);rro=r(LWr,"Wav2Vec2CTCTokenizer"),LWr.forEach(t),tro=r(NCe," (Hubert model)"),NCe.forEach(t),aro=i(S),os=n(S,"LI",{});var Yx=s(os);Ste=n(Yx,"STRONG",{});var xWr=s(Ste);nro=r(xWr,"ibert"),xWr.forEach(t),sro=r(Yx," \u2014 "),OR=n(Yx,"A",{href:!0});var $Wr=s(OR);lro=r($Wr,"RobertaTokenizer"),$Wr.forEach(t),iro=r(Yx," or "),VR=n(Yx,"A",{href:!0});var kWr=s(VR);dro=r(kWr,"RobertaTokenizerFast"),kWr.forEach(t),cro=r(Yx," (I-BERT model)"),Yx.forEach(t),fro=i(S),rs=n(S,"LI",{});var Kx=s(rs);Rte=n(Kx,"STRONG",{});var SWr=s(Rte);mro=r(SWr,"layoutlm"),SWr.forEach(t),gro=r(Kx," \u2014 "),XR=n(Kx,"A",{href:!0});var RWr=s(XR);hro=r(RWr,"LayoutLMTokenizer"),RWr.forEach(t),pro=r(Kx," or "),zR=n(Kx,"A",{href:!0});var PWr=s(zR);_ro=r(PWr,"LayoutLMTokenizerFast"),PWr.forEach(t),uro=r(Kx," (LayoutLM model)"),Kx.forEach(t),bro=i(S),ts=n(S,"LI",{});var Zx=s(ts);Pte=n(Zx,"STRONG",{});var BWr=s(Pte);vro=r(BWr,"layoutlmv2"),BWr.forEach(t),Fro=r(Zx," \u2014 "),WR=n(Zx,"A",{href:!0});var IWr=s(WR);Tro=r(IWr,"LayoutLMv2Tokenizer"),IWr.forEach(t),Mro=r(Zx," or "),QR=n(Zx,"A",{href:!0});var qWr=s(QR);Ero=r(qWr,"LayoutLMv2TokenizerFast"),qWr.forEach(t),Cro=r(Zx," (LayoutLMv2 model)"),Zx.forEach(t),wro=i(S),as=n(S,"LI",{});var e$=s(as);Bte=n(e$,"STRONG",{});var NWr=s(Bte);Aro=r(NWr,"layoutxlm"),NWr.forEach(t),yro=r(e$," \u2014 "),HR=n(e$,"A",{href:!0});var jWr=s(HR);Lro=r(jWr,"LayoutXLMTokenizer"),jWr.forEach(t),xro=r(e$," or "),UR=n(e$,"A",{href:!0});var DWr=s(UR);$ro=r(DWr,"LayoutXLMTokenizerFast"),DWr.forEach(t),kro=r(e$," (LayoutXLM model)"),e$.forEach(t),Sro=i(S),ns=n(S,"LI",{});var o$=s(ns);Ite=n(o$,"STRONG",{});var GWr=s(Ite);Rro=r(GWr,"led"),GWr.forEach(t),Pro=r(o$," \u2014 "),JR=n(o$,"A",{href:!0});var OWr=s(JR);Bro=r(OWr,"LEDTokenizer"),OWr.forEach(t),Iro=r(o$," or "),YR=n(o$,"A",{href:!0});var VWr=s(YR);qro=r(VWr,"LEDTokenizerFast"),VWr.forEach(t),Nro=r(o$," (LED model)"),o$.forEach(t),jro=i(S),ss=n(S,"LI",{});var r$=s(ss);qte=n(r$,"STRONG",{});var XWr=s(qte);Dro=r(XWr,"longformer"),XWr.forEach(t),Gro=r(r$," \u2014 "),KR=n(r$,"A",{href:!0});var zWr=s(KR);Oro=r(zWr,"LongformerTokenizer"),zWr.forEach(t),Vro=r(r$," or "),ZR=n(r$,"A",{href:!0});var WWr=s(ZR);Xro=r(WWr,"LongformerTokenizerFast"),WWr.forEach(t),zro=r(r$," (Longformer model)"),r$.forEach(t),Wro=i(S),ls=n(S,"LI",{});var t$=s(ls);Nte=n(t$,"STRONG",{});var QWr=s(Nte);Qro=r(QWr,"longt5"),QWr.forEach(t),Hro=r(t$," \u2014 "),eP=n(t$,"A",{href:!0});var HWr=s(eP);Uro=r(HWr,"T5Tokenizer"),HWr.forEach(t),Jro=r(t$," or "),oP=n(t$,"A",{href:!0});var UWr=s(oP);Yro=r(UWr,"T5TokenizerFast"),UWr.forEach(t),Kro=r(t$," (LongT5 model)"),t$.forEach(t),Zro=i(S),Pg=n(S,"LI",{});var jCe=s(Pg);jte=n(jCe,"STRONG",{});var JWr=s(jte);eto=r(JWr,"luke"),JWr.forEach(t),oto=r(jCe," \u2014 "),rP=n(jCe,"A",{href:!0});var YWr=s(rP);rto=r(YWr,"LukeTokenizer"),YWr.forEach(t),tto=r(jCe," (LUKE model)"),jCe.forEach(t),ato=i(S),is=n(S,"LI",{});var a$=s(is);Dte=n(a$,"STRONG",{});var KWr=s(Dte);nto=r(KWr,"lxmert"),KWr.forEach(t),sto=r(a$," \u2014 "),tP=n(a$,"A",{href:!0});var ZWr=s(tP);lto=r(ZWr,"LxmertTokenizer"),ZWr.forEach(t),ito=r(a$," or "),aP=n(a$,"A",{href:!0});var eQr=s(aP);dto=r(eQr,"LxmertTokenizerFast"),eQr.forEach(t),cto=r(a$," (LXMERT model)"),a$.forEach(t),fto=i(S),Bg=n(S,"LI",{});var DCe=s(Bg);Gte=n(DCe,"STRONG",{});var oQr=s(Gte);mto=r(oQr,"m2m_100"),oQr.forEach(t),gto=r(DCe," \u2014 "),nP=n(DCe,"A",{href:!0});var rQr=s(nP);hto=r(rQr,"M2M100Tokenizer"),rQr.forEach(t),pto=r(DCe," (M2M100 model)"),DCe.forEach(t),_to=i(S),Ig=n(S,"LI",{});var GCe=s(Ig);Ote=n(GCe,"STRONG",{});var tQr=s(Ote);uto=r(tQr,"marian"),tQr.forEach(t),bto=r(GCe," \u2014 "),sP=n(GCe,"A",{href:!0});var aQr=s(sP);vto=r(aQr,"MarianTokenizer"),aQr.forEach(t),Fto=r(GCe," (Marian model)"),GCe.forEach(t),Tto=i(S),ds=n(S,"LI",{});var n$=s(ds);Vte=n(n$,"STRONG",{});var nQr=s(Vte);Mto=r(nQr,"mbart"),nQr.forEach(t),Eto=r(n$," \u2014 "),lP=n(n$,"A",{href:!0});var sQr=s(lP);Cto=r(sQr,"MBartTokenizer"),sQr.forEach(t),wto=r(n$," or "),iP=n(n$,"A",{href:!0});var lQr=s(iP);Ato=r(lQr,"MBartTokenizerFast"),lQr.forEach(t),yto=r(n$," (mBART model)"),n$.forEach(t),Lto=i(S),cs=n(S,"LI",{});var s$=s(cs);Xte=n(s$,"STRONG",{});var iQr=s(Xte);xto=r(iQr,"mbart50"),iQr.forEach(t),$to=r(s$," \u2014 "),dP=n(s$,"A",{href:!0});var dQr=s(dP);kto=r(dQr,"MBart50Tokenizer"),dQr.forEach(t),Sto=r(s$," or "),cP=n(s$,"A",{href:!0});var cQr=s(cP);Rto=r(cQr,"MBart50TokenizerFast"),cQr.forEach(t),Pto=r(s$," (mBART-50 model)"),s$.forEach(t),Bto=i(S),fs=n(S,"LI",{});var l$=s(fs);zte=n(l$,"STRONG",{});var fQr=s(zte);Ito=r(fQr,"megatron-bert"),fQr.forEach(t),qto=r(l$," \u2014 "),fP=n(l$,"A",{href:!0});var mQr=s(fP);Nto=r(mQr,"BertTokenizer"),mQr.forEach(t),jto=r(l$," or "),mP=n(l$,"A",{href:!0});var gQr=s(mP);Dto=r(gQr,"BertTokenizerFast"),gQr.forEach(t),Gto=r(l$," (MegatronBert model)"),l$.forEach(t),Oto=i(S),qg=n(S,"LI",{});var OCe=s(qg);Wte=n(OCe,"STRONG",{});var hQr=s(Wte);Vto=r(hQr,"mluke"),hQr.forEach(t),Xto=r(OCe," \u2014 "),gP=n(OCe,"A",{href:!0});var pQr=s(gP);zto=r(pQr,"MLukeTokenizer"),pQr.forEach(t),Wto=r(OCe," (mLUKE model)"),OCe.forEach(t),Qto=i(S),ms=n(S,"LI",{});var i$=s(ms);Qte=n(i$,"STRONG",{});var _Qr=s(Qte);Hto=r(_Qr,"mobilebert"),_Qr.forEach(t),Uto=r(i$," \u2014 "),hP=n(i$,"A",{href:!0});var uQr=s(hP);Jto=r(uQr,"MobileBertTokenizer"),uQr.forEach(t),Yto=r(i$," or "),pP=n(i$,"A",{href:!0});var bQr=s(pP);Kto=r(bQr,"MobileBertTokenizerFast"),bQr.forEach(t),Zto=r(i$," (MobileBERT model)"),i$.forEach(t),eao=i(S),gs=n(S,"LI",{});var d$=s(gs);Hte=n(d$,"STRONG",{});var vQr=s(Hte);oao=r(vQr,"mpnet"),vQr.forEach(t),rao=r(d$," \u2014 "),_P=n(d$,"A",{href:!0});var FQr=s(_P);tao=r(FQr,"MPNetTokenizer"),FQr.forEach(t),aao=r(d$," or "),uP=n(d$,"A",{href:!0});var TQr=s(uP);nao=r(TQr,"MPNetTokenizerFast"),TQr.forEach(t),sao=r(d$," (MPNet model)"),d$.forEach(t),lao=i(S),hs=n(S,"LI",{});var c$=s(hs);Ute=n(c$,"STRONG",{});var MQr=s(Ute);iao=r(MQr,"mt5"),MQr.forEach(t),dao=r(c$," \u2014 "),bP=n(c$,"A",{href:!0});var EQr=s(bP);cao=r(EQr,"MT5Tokenizer"),EQr.forEach(t),fao=r(c$," or "),vP=n(c$,"A",{href:!0});var CQr=s(vP);mao=r(CQr,"MT5TokenizerFast"),CQr.forEach(t),gao=r(c$," (mT5 model)"),c$.forEach(t),hao=i(S),ps=n(S,"LI",{});var f$=s(ps);Jte=n(f$,"STRONG",{});var wQr=s(Jte);pao=r(wQr,"nystromformer"),wQr.forEach(t),_ao=r(f$," \u2014 "),FP=n(f$,"A",{href:!0});var AQr=s(FP);uao=r(AQr,"AlbertTokenizer"),AQr.forEach(t),bao=r(f$," or "),TP=n(f$,"A",{href:!0});var yQr=s(TP);vao=r(yQr,"AlbertTokenizerFast"),yQr.forEach(t),Fao=r(f$," (Nystromformer model)"),f$.forEach(t),Tao=i(S),_s=n(S,"LI",{});var m$=s(_s);Yte=n(m$,"STRONG",{});var LQr=s(Yte);Mao=r(LQr,"openai-gpt"),LQr.forEach(t),Eao=r(m$," \u2014 "),MP=n(m$,"A",{href:!0});var xQr=s(MP);Cao=r(xQr,"OpenAIGPTTokenizer"),xQr.forEach(t),wao=r(m$," or "),EP=n(m$,"A",{href:!0});var $Qr=s(EP);Aao=r($Qr,"OpenAIGPTTokenizerFast"),$Qr.forEach(t),yao=r(m$," (OpenAI GPT model)"),m$.forEach(t),Lao=i(S),Ng=n(S,"LI",{});var VCe=s(Ng);Kte=n(VCe,"STRONG",{});var kQr=s(Kte);xao=r(kQr,"opt"),kQr.forEach(t),$ao=r(VCe," \u2014 "),CP=n(VCe,"A",{href:!0});var SQr=s(CP);kao=r(SQr,"GPT2Tokenizer"),SQr.forEach(t),Sao=r(VCe," (OPT model)"),VCe.forEach(t),Rao=i(S),us=n(S,"LI",{});var g$=s(us);Zte=n(g$,"STRONG",{});var RQr=s(Zte);Pao=r(RQr,"pegasus"),RQr.forEach(t),Bao=r(g$," \u2014 "),wP=n(g$,"A",{href:!0});var PQr=s(wP);Iao=r(PQr,"PegasusTokenizer"),PQr.forEach(t),qao=r(g$," or "),AP=n(g$,"A",{href:!0});var BQr=s(AP);Nao=r(BQr,"PegasusTokenizerFast"),BQr.forEach(t),jao=r(g$," (Pegasus model)"),g$.forEach(t),Dao=i(S),jg=n(S,"LI",{});var XCe=s(jg);eae=n(XCe,"STRONG",{});var IQr=s(eae);Gao=r(IQr,"perceiver"),IQr.forEach(t),Oao=r(XCe," \u2014 "),yP=n(XCe,"A",{href:!0});var qQr=s(yP);Vao=r(qQr,"PerceiverTokenizer"),qQr.forEach(t),Xao=r(XCe," (Perceiver model)"),XCe.forEach(t),zao=i(S),Dg=n(S,"LI",{});var zCe=s(Dg);oae=n(zCe,"STRONG",{});var NQr=s(oae);Wao=r(NQr,"phobert"),NQr.forEach(t),Qao=r(zCe," \u2014 "),LP=n(zCe,"A",{href:!0});var jQr=s(LP);Hao=r(jQr,"PhobertTokenizer"),jQr.forEach(t),Uao=r(zCe," (PhoBERT model)"),zCe.forEach(t),Jao=i(S),Gg=n(S,"LI",{});var WCe=s(Gg);rae=n(WCe,"STRONG",{});var DQr=s(rae);Yao=r(DQr,"plbart"),DQr.forEach(t),Kao=r(WCe," \u2014 "),xP=n(WCe,"A",{href:!0});var GQr=s(xP);Zao=r(GQr,"PLBartTokenizer"),GQr.forEach(t),eno=r(WCe," (PLBart model)"),WCe.forEach(t),ono=i(S),Og=n(S,"LI",{});var QCe=s(Og);tae=n(QCe,"STRONG",{});var OQr=s(tae);rno=r(OQr,"prophetnet"),OQr.forEach(t),tno=r(QCe," \u2014 "),$P=n(QCe,"A",{href:!0});var VQr=s($P);ano=r(VQr,"ProphetNetTokenizer"),VQr.forEach(t),nno=r(QCe," (ProphetNet model)"),QCe.forEach(t),sno=i(S),bs=n(S,"LI",{});var h$=s(bs);aae=n(h$,"STRONG",{});var XQr=s(aae);lno=r(XQr,"qdqbert"),XQr.forEach(t),ino=r(h$," \u2014 "),kP=n(h$,"A",{href:!0});var zQr=s(kP);dno=r(zQr,"BertTokenizer"),zQr.forEach(t),cno=r(h$," or "),SP=n(h$,"A",{href:!0});var WQr=s(SP);fno=r(WQr,"BertTokenizerFast"),WQr.forEach(t),mno=r(h$," (QDQBert model)"),h$.forEach(t),gno=i(S),Vg=n(S,"LI",{});var HCe=s(Vg);nae=n(HCe,"STRONG",{});var QQr=s(nae);hno=r(QQr,"rag"),QQr.forEach(t),pno=r(HCe," \u2014 "),RP=n(HCe,"A",{href:!0});var HQr=s(RP);_no=r(HQr,"RagTokenizer"),HQr.forEach(t),uno=r(HCe," (RAG model)"),HCe.forEach(t),bno=i(S),vs=n(S,"LI",{});var p$=s(vs);sae=n(p$,"STRONG",{});var UQr=s(sae);vno=r(UQr,"realm"),UQr.forEach(t),Fno=r(p$," \u2014 "),PP=n(p$,"A",{href:!0});var JQr=s(PP);Tno=r(JQr,"RealmTokenizer"),JQr.forEach(t),Mno=r(p$," or "),BP=n(p$,"A",{href:!0});var YQr=s(BP);Eno=r(YQr,"RealmTokenizerFast"),YQr.forEach(t),Cno=r(p$," (Realm model)"),p$.forEach(t),wno=i(S),Fs=n(S,"LI",{});var _$=s(Fs);lae=n(_$,"STRONG",{});var KQr=s(lae);Ano=r(KQr,"reformer"),KQr.forEach(t),yno=r(_$," \u2014 "),IP=n(_$,"A",{href:!0});var ZQr=s(IP);Lno=r(ZQr,"ReformerTokenizer"),ZQr.forEach(t),xno=r(_$," or "),qP=n(_$,"A",{href:!0});var eHr=s(qP);$no=r(eHr,"ReformerTokenizerFast"),eHr.forEach(t),kno=r(_$," (Reformer model)"),_$.forEach(t),Sno=i(S),Ts=n(S,"LI",{});var u$=s(Ts);iae=n(u$,"STRONG",{});var oHr=s(iae);Rno=r(oHr,"rembert"),oHr.forEach(t),Pno=r(u$," \u2014 "),NP=n(u$,"A",{href:!0});var rHr=s(NP);Bno=r(rHr,"RemBertTokenizer"),rHr.forEach(t),Ino=r(u$," or "),jP=n(u$,"A",{href:!0});var tHr=s(jP);qno=r(tHr,"RemBertTokenizerFast"),tHr.forEach(t),Nno=r(u$," (RemBERT model)"),u$.forEach(t),jno=i(S),Ms=n(S,"LI",{});var b$=s(Ms);dae=n(b$,"STRONG",{});var aHr=s(dae);Dno=r(aHr,"retribert"),aHr.forEach(t),Gno=r(b$," \u2014 "),DP=n(b$,"A",{href:!0});var nHr=s(DP);Ono=r(nHr,"RetriBertTokenizer"),nHr.forEach(t),Vno=r(b$," or "),GP=n(b$,"A",{href:!0});var sHr=s(GP);Xno=r(sHr,"RetriBertTokenizerFast"),sHr.forEach(t),zno=r(b$," (RetriBERT model)"),b$.forEach(t),Wno=i(S),Es=n(S,"LI",{});var v$=s(Es);cae=n(v$,"STRONG",{});var lHr=s(cae);Qno=r(lHr,"roberta"),lHr.forEach(t),Hno=r(v$," \u2014 "),OP=n(v$,"A",{href:!0});var iHr=s(OP);Uno=r(iHr,"RobertaTokenizer"),iHr.forEach(t),Jno=r(v$," or "),VP=n(v$,"A",{href:!0});var dHr=s(VP);Yno=r(dHr,"RobertaTokenizerFast"),dHr.forEach(t),Kno=r(v$," (RoBERTa model)"),v$.forEach(t),Zno=i(S),Cs=n(S,"LI",{});var F$=s(Cs);fae=n(F$,"STRONG",{});var cHr=s(fae);eso=r(cHr,"roformer"),cHr.forEach(t),oso=r(F$," \u2014 "),XP=n(F$,"A",{href:!0});var fHr=s(XP);rso=r(fHr,"RoFormerTokenizer"),fHr.forEach(t),tso=r(F$," or "),zP=n(F$,"A",{href:!0});var mHr=s(zP);aso=r(mHr,"RoFormerTokenizerFast"),mHr.forEach(t),nso=r(F$," (RoFormer model)"),F$.forEach(t),sso=i(S),Xg=n(S,"LI",{});var UCe=s(Xg);mae=n(UCe,"STRONG",{});var gHr=s(mae);lso=r(gHr,"speech_to_text"),gHr.forEach(t),iso=r(UCe," \u2014 "),WP=n(UCe,"A",{href:!0});var hHr=s(WP);dso=r(hHr,"Speech2TextTokenizer"),hHr.forEach(t),cso=r(UCe," (Speech2Text model)"),UCe.forEach(t),fso=i(S),zg=n(S,"LI",{});var JCe=s(zg);gae=n(JCe,"STRONG",{});var pHr=s(gae);mso=r(pHr,"speech_to_text_2"),pHr.forEach(t),gso=r(JCe," \u2014 "),QP=n(JCe,"A",{href:!0});var _Hr=s(QP);hso=r(_Hr,"Speech2Text2Tokenizer"),_Hr.forEach(t),pso=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),_so=i(S),ws=n(S,"LI",{});var T$=s(ws);hae=n(T$,"STRONG",{});var uHr=s(hae);uso=r(uHr,"splinter"),uHr.forEach(t),bso=r(T$," \u2014 "),HP=n(T$,"A",{href:!0});var bHr=s(HP);vso=r(bHr,"SplinterTokenizer"),bHr.forEach(t),Fso=r(T$," or "),UP=n(T$,"A",{href:!0});var vHr=s(UP);Tso=r(vHr,"SplinterTokenizerFast"),vHr.forEach(t),Mso=r(T$," (Splinter model)"),T$.forEach(t),Eso=i(S),As=n(S,"LI",{});var M$=s(As);pae=n(M$,"STRONG",{});var FHr=s(pae);Cso=r(FHr,"squeezebert"),FHr.forEach(t),wso=r(M$," \u2014 "),JP=n(M$,"A",{href:!0});var THr=s(JP);Aso=r(THr,"SqueezeBertTokenizer"),THr.forEach(t),yso=r(M$," or "),YP=n(M$,"A",{href:!0});var MHr=s(YP);Lso=r(MHr,"SqueezeBertTokenizerFast"),MHr.forEach(t),xso=r(M$," (SqueezeBERT model)"),M$.forEach(t),$so=i(S),ys=n(S,"LI",{});var E$=s(ys);_ae=n(E$,"STRONG",{});var EHr=s(_ae);kso=r(EHr,"t5"),EHr.forEach(t),Sso=r(E$," \u2014 "),KP=n(E$,"A",{href:!0});var CHr=s(KP);Rso=r(CHr,"T5Tokenizer"),CHr.forEach(t),Pso=r(E$," or "),ZP=n(E$,"A",{href:!0});var wHr=s(ZP);Bso=r(wHr,"T5TokenizerFast"),wHr.forEach(t),Iso=r(E$," (T5 model)"),E$.forEach(t),qso=i(S),Wg=n(S,"LI",{});var YCe=s(Wg);uae=n(YCe,"STRONG",{});var AHr=s(uae);Nso=r(AHr,"tapas"),AHr.forEach(t),jso=r(YCe," \u2014 "),eB=n(YCe,"A",{href:!0});var yHr=s(eB);Dso=r(yHr,"TapasTokenizer"),yHr.forEach(t),Gso=r(YCe," (TAPAS model)"),YCe.forEach(t),Oso=i(S),Qg=n(S,"LI",{});var KCe=s(Qg);bae=n(KCe,"STRONG",{});var LHr=s(bae);Vso=r(LHr,"tapex"),LHr.forEach(t),Xso=r(KCe," \u2014 "),oB=n(KCe,"A",{href:!0});var xHr=s(oB);zso=r(xHr,"TapexTokenizer"),xHr.forEach(t),Wso=r(KCe," (TAPEX model)"),KCe.forEach(t),Qso=i(S),Hg=n(S,"LI",{});var ZCe=s(Hg);vae=n(ZCe,"STRONG",{});var $Hr=s(vae);Hso=r($Hr,"transfo-xl"),$Hr.forEach(t),Uso=r(ZCe," \u2014 "),rB=n(ZCe,"A",{href:!0});var kHr=s(rB);Jso=r(kHr,"TransfoXLTokenizer"),kHr.forEach(t),Yso=r(ZCe," (Transformer-XL model)"),ZCe.forEach(t),Kso=i(S),Ls=n(S,"LI",{});var C$=s(Ls);Fae=n(C$,"STRONG",{});var SHr=s(Fae);Zso=r(SHr,"visual_bert"),SHr.forEach(t),elo=r(C$," \u2014 "),tB=n(C$,"A",{href:!0});var RHr=s(tB);olo=r(RHr,"BertTokenizer"),RHr.forEach(t),rlo=r(C$," or "),aB=n(C$,"A",{href:!0});var PHr=s(aB);tlo=r(PHr,"BertTokenizerFast"),PHr.forEach(t),alo=r(C$," (VisualBert model)"),C$.forEach(t),nlo=i(S),Ug=n(S,"LI",{});var e3e=s(Ug);Tae=n(e3e,"STRONG",{});var BHr=s(Tae);slo=r(BHr,"wav2vec2"),BHr.forEach(t),llo=r(e3e," \u2014 "),nB=n(e3e,"A",{href:!0});var IHr=s(nB);ilo=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),dlo=r(e3e," (Wav2Vec2 model)"),e3e.forEach(t),clo=i(S),Jg=n(S,"LI",{});var o3e=s(Jg);Mae=n(o3e,"STRONG",{});var qHr=s(Mae);flo=r(qHr,"wav2vec2-conformer"),qHr.forEach(t),mlo=r(o3e," \u2014 "),sB=n(o3e,"A",{href:!0});var NHr=s(sB);glo=r(NHr,"Wav2Vec2CTCTokenizer"),NHr.forEach(t),hlo=r(o3e," (Wav2Vec2-Conformer model)"),o3e.forEach(t),plo=i(S),Yg=n(S,"LI",{});var r3e=s(Yg);Eae=n(r3e,"STRONG",{});var jHr=s(Eae);_lo=r(jHr,"wav2vec2_phoneme"),jHr.forEach(t),ulo=r(r3e," \u2014 "),lB=n(r3e,"A",{href:!0});var DHr=s(lB);blo=r(DHr,"Wav2Vec2PhonemeCTCTokenizer"),DHr.forEach(t),vlo=r(r3e," (Wav2Vec2Phoneme model)"),r3e.forEach(t),Flo=i(S),xs=n(S,"LI",{});var w$=s(xs);Cae=n(w$,"STRONG",{});var GHr=s(Cae);Tlo=r(GHr,"xglm"),GHr.forEach(t),Mlo=r(w$," \u2014 "),iB=n(w$,"A",{href:!0});var OHr=s(iB);Elo=r(OHr,"XGLMTokenizer"),OHr.forEach(t),Clo=r(w$," or "),dB=n(w$,"A",{href:!0});var VHr=s(dB);wlo=r(VHr,"XGLMTokenizerFast"),VHr.forEach(t),Alo=r(w$," (XGLM model)"),w$.forEach(t),ylo=i(S),Kg=n(S,"LI",{});var t3e=s(Kg);wae=n(t3e,"STRONG",{});var XHr=s(wae);Llo=r(XHr,"xlm"),XHr.forEach(t),xlo=r(t3e," \u2014 "),cB=n(t3e,"A",{href:!0});var zHr=s(cB);$lo=r(zHr,"XLMTokenizer"),zHr.forEach(t),klo=r(t3e," (XLM model)"),t3e.forEach(t),Slo=i(S),Zg=n(S,"LI",{});var a3e=s(Zg);Aae=n(a3e,"STRONG",{});var WHr=s(Aae);Rlo=r(WHr,"xlm-prophetnet"),WHr.forEach(t),Plo=r(a3e," \u2014 "),fB=n(a3e,"A",{href:!0});var QHr=s(fB);Blo=r(QHr,"XLMProphetNetTokenizer"),QHr.forEach(t),Ilo=r(a3e," (XLMProphetNet model)"),a3e.forEach(t),qlo=i(S),$s=n(S,"LI",{});var A$=s($s);yae=n(A$,"STRONG",{});var HHr=s(yae);Nlo=r(HHr,"xlm-roberta"),HHr.forEach(t),jlo=r(A$," \u2014 "),mB=n(A$,"A",{href:!0});var UHr=s(mB);Dlo=r(UHr,"XLMRobertaTokenizer"),UHr.forEach(t),Glo=r(A$," or "),gB=n(A$,"A",{href:!0});var JHr=s(gB);Olo=r(JHr,"XLMRobertaTokenizerFast"),JHr.forEach(t),Vlo=r(A$," (XLM-RoBERTa model)"),A$.forEach(t),Xlo=i(S),ks=n(S,"LI",{});var y$=s(ks);Lae=n(y$,"STRONG",{});var YHr=s(Lae);zlo=r(YHr,"xlm-roberta-xl"),YHr.forEach(t),Wlo=r(y$," \u2014 "),hB=n(y$,"A",{href:!0});var KHr=s(hB);Qlo=r(KHr,"RobertaTokenizer"),KHr.forEach(t),Hlo=r(y$," or "),pB=n(y$,"A",{href:!0});var ZHr=s(pB);Ulo=r(ZHr,"RobertaTokenizerFast"),ZHr.forEach(t),Jlo=r(y$," (XLM-RoBERTa-XL model)"),y$.forEach(t),Ylo=i(S),Ss=n(S,"LI",{});var L$=s(Ss);xae=n(L$,"STRONG",{});var eUr=s(xae);Klo=r(eUr,"xlnet"),eUr.forEach(t),Zlo=r(L$," \u2014 "),_B=n(L$,"A",{href:!0});var oUr=s(_B);eio=r(oUr,"XLNetTokenizer"),oUr.forEach(t),oio=r(L$," or "),uB=n(L$,"A",{href:!0});var rUr=s(uB);rio=r(rUr,"XLNetTokenizerFast"),rUr.forEach(t),tio=r(L$," (XLNet model)"),L$.forEach(t),aio=i(S),Rs=n(S,"LI",{});var x$=s(Rs);$ae=n(x$,"STRONG",{});var tUr=s($ae);nio=r(tUr,"yoso"),tUr.forEach(t),sio=r(x$," \u2014 "),bB=n(x$,"A",{href:!0});var aUr=s(bB);lio=r(aUr,"AlbertTokenizer"),aUr.forEach(t),iio=r(x$," or "),vB=n(x$,"A",{href:!0});var nUr=s(vB);dio=r(nUr,"AlbertTokenizerFast"),nUr.forEach(t),cio=r(x$," (YOSO model)"),x$.forEach(t),S.forEach(t),fio=i(Ns),T(eh.$$.fragment,Ns),Ns.forEach(t),mio=i(qs),oh=n(qs,"DIV",{class:!0});var mje=s(oh);T(L0.$$.fragment,mje),gio=i(mje),kae=n(mje,"P",{});var sUr=s(kae);hio=r(sUr,"Register a new tokenizer in this mapping."),sUr.forEach(t),mje.forEach(t),qs.forEach(t),gqe=i(f),Mi=n(f,"H2",{class:!0});var gje=s(Mi);rh=n(gje,"A",{id:!0,class:!0,href:!0});var lUr=s(rh);Sae=n(lUr,"SPAN",{});var iUr=s(Sae);T(x0.$$.fragment,iUr),iUr.forEach(t),lUr.forEach(t),pio=i(gje),Rae=n(gje,"SPAN",{});var dUr=s(Rae);_io=r(dUr,"AutoFeatureExtractor"),dUr.forEach(t),gje.forEach(t),hqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T($0.$$.fragment,js),uio=i(js),k0=n(js,"P",{});var hje=s(k0);bio=r(hje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=n(hje,"A",{href:!0});var cUr=s(FB);vio=r(cUr,"AutoFeatureExtractor.from_pretrained()"),cUr.forEach(t),Fio=r(hje," class method."),hje.forEach(t),Tio=i(js),S0=n(js,"P",{});var pje=s(S0);Mio=r(pje,"This class cannot be instantiated directly using "),Pae=n(pje,"CODE",{});var fUr=s(Pae);Eio=r(fUr,"__init__()"),fUr.forEach(t),Cio=r(pje," (throws an error)."),pje.forEach(t),wio=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(R0.$$.fragment,Zt),Aio=i(Zt),Bae=n(Zt,"P",{});var mUr=s(Bae);yio=r(mUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mUr.forEach(t),Lio=i(Zt),ya=n(Zt,"P",{});var b3=s(ya);xio=r(b3,"The feature extractor class to instantiate is selected based on the "),Iae=n(b3,"CODE",{});var gUr=s(Iae);$io=r(gUr,"model_type"),gUr.forEach(t),kio=r(b3,` property of the config object
(either passed as an argument or loaded from `),qae=n(b3,"CODE",{});var hUr=s(qae);Sio=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),Rio=r(b3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nae=n(b3,"CODE",{});var pUr=s(Nae);Pio=r(pUr,"pretrained_model_name_or_path"),pUr.forEach(t),Bio=r(b3,":"),b3.forEach(t),Iio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);th=n(te,"LI",{});var n3e=s(th);jae=n(n3e,"STRONG",{});var _Ur=s(jae);qio=r(_Ur,"beit"),_Ur.forEach(t),Nio=r(n3e," \u2014 "),TB=n(n3e,"A",{href:!0});var uUr=s(TB);jio=r(uUr,"BeitFeatureExtractor"),uUr.forEach(t),Dio=r(n3e," (BEiT model)"),n3e.forEach(t),Gio=i(te),ah=n(te,"LI",{});var s3e=s(ah);Dae=n(s3e,"STRONG",{});var bUr=s(Dae);Oio=r(bUr,"clip"),bUr.forEach(t),Vio=r(s3e," \u2014 "),MB=n(s3e,"A",{href:!0});var vUr=s(MB);Xio=r(vUr,"CLIPFeatureExtractor"),vUr.forEach(t),zio=r(s3e," (CLIP model)"),s3e.forEach(t),Wio=i(te),nh=n(te,"LI",{});var l3e=s(nh);Gae=n(l3e,"STRONG",{});var FUr=s(Gae);Qio=r(FUr,"convnext"),FUr.forEach(t),Hio=r(l3e," \u2014 "),EB=n(l3e,"A",{href:!0});var TUr=s(EB);Uio=r(TUr,"ConvNextFeatureExtractor"),TUr.forEach(t),Jio=r(l3e," (ConvNext model)"),l3e.forEach(t),Yio=i(te),sh=n(te,"LI",{});var i3e=s(sh);Oae=n(i3e,"STRONG",{});var MUr=s(Oae);Kio=r(MUr,"data2vec-audio"),MUr.forEach(t),Zio=r(i3e," \u2014 "),CB=n(i3e,"A",{href:!0});var EUr=s(CB);edo=r(EUr,"Wav2Vec2FeatureExtractor"),EUr.forEach(t),odo=r(i3e," (Data2VecAudio model)"),i3e.forEach(t),rdo=i(te),lh=n(te,"LI",{});var d3e=s(lh);Vae=n(d3e,"STRONG",{});var CUr=s(Vae);tdo=r(CUr,"data2vec-vision"),CUr.forEach(t),ado=r(d3e," \u2014 "),wB=n(d3e,"A",{href:!0});var wUr=s(wB);ndo=r(wUr,"BeitFeatureExtractor"),wUr.forEach(t),sdo=r(d3e," (Data2VecVision model)"),d3e.forEach(t),ldo=i(te),ih=n(te,"LI",{});var c3e=s(ih);Xae=n(c3e,"STRONG",{});var AUr=s(Xae);ido=r(AUr,"deit"),AUr.forEach(t),ddo=r(c3e," \u2014 "),AB=n(c3e,"A",{href:!0});var yUr=s(AB);cdo=r(yUr,"DeiTFeatureExtractor"),yUr.forEach(t),fdo=r(c3e," (DeiT model)"),c3e.forEach(t),mdo=i(te),dh=n(te,"LI",{});var f3e=s(dh);zae=n(f3e,"STRONG",{});var LUr=s(zae);gdo=r(LUr,"detr"),LUr.forEach(t),hdo=r(f3e," \u2014 "),yB=n(f3e,"A",{href:!0});var xUr=s(yB);pdo=r(xUr,"DetrFeatureExtractor"),xUr.forEach(t),_do=r(f3e," (DETR model)"),f3e.forEach(t),udo=i(te),ch=n(te,"LI",{});var m3e=s(ch);Wae=n(m3e,"STRONG",{});var $Ur=s(Wae);bdo=r($Ur,"dpt"),$Ur.forEach(t),vdo=r(m3e," \u2014 "),LB=n(m3e,"A",{href:!0});var kUr=s(LB);Fdo=r(kUr,"DPTFeatureExtractor"),kUr.forEach(t),Tdo=r(m3e," (DPT model)"),m3e.forEach(t),Mdo=i(te),fh=n(te,"LI",{});var g3e=s(fh);Qae=n(g3e,"STRONG",{});var SUr=s(Qae);Edo=r(SUr,"flava"),SUr.forEach(t),Cdo=r(g3e," \u2014 "),xB=n(g3e,"A",{href:!0});var RUr=s(xB);wdo=r(RUr,"FlavaFeatureExtractor"),RUr.forEach(t),Ado=r(g3e," (Flava model)"),g3e.forEach(t),ydo=i(te),mh=n(te,"LI",{});var h3e=s(mh);Hae=n(h3e,"STRONG",{});var PUr=s(Hae);Ldo=r(PUr,"glpn"),PUr.forEach(t),xdo=r(h3e," \u2014 "),$B=n(h3e,"A",{href:!0});var BUr=s($B);$do=r(BUr,"GLPNFeatureExtractor"),BUr.forEach(t),kdo=r(h3e," (GLPN model)"),h3e.forEach(t),Sdo=i(te),gh=n(te,"LI",{});var p3e=s(gh);Uae=n(p3e,"STRONG",{});var IUr=s(Uae);Rdo=r(IUr,"hubert"),IUr.forEach(t),Pdo=r(p3e," \u2014 "),kB=n(p3e,"A",{href:!0});var qUr=s(kB);Bdo=r(qUr,"Wav2Vec2FeatureExtractor"),qUr.forEach(t),Ido=r(p3e," (Hubert model)"),p3e.forEach(t),qdo=i(te),hh=n(te,"LI",{});var _3e=s(hh);Jae=n(_3e,"STRONG",{});var NUr=s(Jae);Ndo=r(NUr,"layoutlmv2"),NUr.forEach(t),jdo=r(_3e," \u2014 "),SB=n(_3e,"A",{href:!0});var jUr=s(SB);Ddo=r(jUr,"LayoutLMv2FeatureExtractor"),jUr.forEach(t),Gdo=r(_3e," (LayoutLMv2 model)"),_3e.forEach(t),Odo=i(te),ph=n(te,"LI",{});var u3e=s(ph);Yae=n(u3e,"STRONG",{});var DUr=s(Yae);Vdo=r(DUr,"maskformer"),DUr.forEach(t),Xdo=r(u3e," \u2014 "),RB=n(u3e,"A",{href:!0});var GUr=s(RB);zdo=r(GUr,"MaskFormerFeatureExtractor"),GUr.forEach(t),Wdo=r(u3e," (MaskFormer model)"),u3e.forEach(t),Qdo=i(te),_h=n(te,"LI",{});var b3e=s(_h);Kae=n(b3e,"STRONG",{});var OUr=s(Kae);Hdo=r(OUr,"perceiver"),OUr.forEach(t),Udo=r(b3e," \u2014 "),PB=n(b3e,"A",{href:!0});var VUr=s(PB);Jdo=r(VUr,"PerceiverFeatureExtractor"),VUr.forEach(t),Ydo=r(b3e," (Perceiver model)"),b3e.forEach(t),Kdo=i(te),uh=n(te,"LI",{});var v3e=s(uh);Zae=n(v3e,"STRONG",{});var XUr=s(Zae);Zdo=r(XUr,"poolformer"),XUr.forEach(t),eco=r(v3e," \u2014 "),BB=n(v3e,"A",{href:!0});var zUr=s(BB);oco=r(zUr,"PoolFormerFeatureExtractor"),zUr.forEach(t),rco=r(v3e," (PoolFormer model)"),v3e.forEach(t),tco=i(te),bh=n(te,"LI",{});var F3e=s(bh);ene=n(F3e,"STRONG",{});var WUr=s(ene);aco=r(WUr,"regnet"),WUr.forEach(t),nco=r(F3e," \u2014 "),IB=n(F3e,"A",{href:!0});var QUr=s(IB);sco=r(QUr,"ConvNextFeatureExtractor"),QUr.forEach(t),lco=r(F3e," (RegNet model)"),F3e.forEach(t),ico=i(te),vh=n(te,"LI",{});var T3e=s(vh);one=n(T3e,"STRONG",{});var HUr=s(one);dco=r(HUr,"resnet"),HUr.forEach(t),cco=r(T3e," \u2014 "),qB=n(T3e,"A",{href:!0});var UUr=s(qB);fco=r(UUr,"ConvNextFeatureExtractor"),UUr.forEach(t),mco=r(T3e," (ResNet model)"),T3e.forEach(t),gco=i(te),Fh=n(te,"LI",{});var M3e=s(Fh);rne=n(M3e,"STRONG",{});var JUr=s(rne);hco=r(JUr,"segformer"),JUr.forEach(t),pco=r(M3e," \u2014 "),NB=n(M3e,"A",{href:!0});var YUr=s(NB);_co=r(YUr,"SegformerFeatureExtractor"),YUr.forEach(t),uco=r(M3e," (SegFormer model)"),M3e.forEach(t),bco=i(te),Th=n(te,"LI",{});var E3e=s(Th);tne=n(E3e,"STRONG",{});var KUr=s(tne);vco=r(KUr,"speech_to_text"),KUr.forEach(t),Fco=r(E3e," \u2014 "),jB=n(E3e,"A",{href:!0});var ZUr=s(jB);Tco=r(ZUr,"Speech2TextFeatureExtractor"),ZUr.forEach(t),Mco=r(E3e," (Speech2Text model)"),E3e.forEach(t),Eco=i(te),Mh=n(te,"LI",{});var C3e=s(Mh);ane=n(C3e,"STRONG",{});var eJr=s(ane);Cco=r(eJr,"swin"),eJr.forEach(t),wco=r(C3e," \u2014 "),DB=n(C3e,"A",{href:!0});var oJr=s(DB);Aco=r(oJr,"ViTFeatureExtractor"),oJr.forEach(t),yco=r(C3e," (Swin model)"),C3e.forEach(t),Lco=i(te),Eh=n(te,"LI",{});var w3e=s(Eh);nne=n(w3e,"STRONG",{});var rJr=s(nne);xco=r(rJr,"van"),rJr.forEach(t),$co=r(w3e," \u2014 "),GB=n(w3e,"A",{href:!0});var tJr=s(GB);kco=r(tJr,"ConvNextFeatureExtractor"),tJr.forEach(t),Sco=r(w3e," (VAN model)"),w3e.forEach(t),Rco=i(te),Ch=n(te,"LI",{});var A3e=s(Ch);sne=n(A3e,"STRONG",{});var aJr=s(sne);Pco=r(aJr,"vit"),aJr.forEach(t),Bco=r(A3e," \u2014 "),OB=n(A3e,"A",{href:!0});var nJr=s(OB);Ico=r(nJr,"ViTFeatureExtractor"),nJr.forEach(t),qco=r(A3e," (ViT model)"),A3e.forEach(t),Nco=i(te),wh=n(te,"LI",{});var y3e=s(wh);lne=n(y3e,"STRONG",{});var sJr=s(lne);jco=r(sJr,"vit_mae"),sJr.forEach(t),Dco=r(y3e," \u2014 "),VB=n(y3e,"A",{href:!0});var lJr=s(VB);Gco=r(lJr,"ViTFeatureExtractor"),lJr.forEach(t),Oco=r(y3e," (ViTMAE model)"),y3e.forEach(t),Vco=i(te),Ah=n(te,"LI",{});var L3e=s(Ah);ine=n(L3e,"STRONG",{});var iJr=s(ine);Xco=r(iJr,"wav2vec2"),iJr.forEach(t),zco=r(L3e," \u2014 "),XB=n(L3e,"A",{href:!0});var dJr=s(XB);Wco=r(dJr,"Wav2Vec2FeatureExtractor"),dJr.forEach(t),Qco=r(L3e," (Wav2Vec2 model)"),L3e.forEach(t),Hco=i(te),yh=n(te,"LI",{});var x3e=s(yh);dne=n(x3e,"STRONG",{});var cJr=s(dne);Uco=r(cJr,"wav2vec2-conformer"),cJr.forEach(t),Jco=r(x3e," \u2014 "),zB=n(x3e,"A",{href:!0});var fJr=s(zB);Yco=r(fJr,"Wav2Vec2FeatureExtractor"),fJr.forEach(t),Kco=r(x3e," (Wav2Vec2-Conformer model)"),x3e.forEach(t),Zco=i(te),Lh=n(te,"LI",{});var $3e=s(Lh);cne=n($3e,"STRONG",{});var mJr=s(cne);efo=r(mJr,"yolos"),mJr.forEach(t),ofo=r($3e," \u2014 "),WB=n($3e,"A",{href:!0});var gJr=s(WB);rfo=r(gJr,"YolosFeatureExtractor"),gJr.forEach(t),tfo=r($3e," (YOLOS model)"),$3e.forEach(t),te.forEach(t),afo=i(Zt),T(xh.$$.fragment,Zt),nfo=i(Zt),T($h.$$.fragment,Zt),Zt.forEach(t),sfo=i(js),kh=n(js,"DIV",{class:!0});var _je=s(kh);T(P0.$$.fragment,_je),lfo=i(_je),fne=n(_je,"P",{});var hJr=s(fne);ifo=r(hJr,"Register a new feature extractor for this class."),hJr.forEach(t),_je.forEach(t),js.forEach(t),pqe=i(f),Ei=n(f,"H2",{class:!0});var uje=s(Ei);Sh=n(uje,"A",{id:!0,class:!0,href:!0});var pJr=s(Sh);mne=n(pJr,"SPAN",{});var _Jr=s(mne);T(B0.$$.fragment,_Jr),_Jr.forEach(t),pJr.forEach(t),dfo=i(uje),gne=n(uje,"SPAN",{});var uJr=s(gne);cfo=r(uJr,"AutoProcessor"),uJr.forEach(t),uje.forEach(t),_qe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(I0.$$.fragment,Ds),ffo=i(Ds),q0=n(Ds,"P",{});var bje=s(q0);mfo=r(bje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=n(bje,"A",{href:!0});var bJr=s(QB);gfo=r(bJr,"AutoProcessor.from_pretrained()"),bJr.forEach(t),hfo=r(bje," class method."),bje.forEach(t),pfo=i(Ds),N0=n(Ds,"P",{});var vje=s(N0);_fo=r(vje,"This class cannot be instantiated directly using "),hne=n(vje,"CODE",{});var vJr=s(hne);ufo=r(vJr,"__init__()"),vJr.forEach(t),bfo=r(vje," (throws an error)."),vje.forEach(t),vfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(j0.$$.fragment,ea),Ffo=i(ea),pne=n(ea,"P",{});var FJr=s(pne);Tfo=r(FJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FJr.forEach(t),Mfo=i(ea),Ci=n(ea,"P",{});var XK=s(Ci);Efo=r(XK,"The processor class to instantiate is selected based on the "),_ne=n(XK,"CODE",{});var TJr=s(_ne);Cfo=r(TJr,"model_type"),TJr.forEach(t),wfo=r(XK,` property of the config object (either
passed as an argument or loaded from `),une=n(XK,"CODE",{});var MJr=s(une);Afo=r(MJr,"pretrained_model_name_or_path"),MJr.forEach(t),yfo=r(XK," if possible):"),XK.forEach(t),Lfo=i(ea),_e=n(ea,"UL",{});var ve=s(_e);Rh=n(ve,"LI",{});var k3e=s(Rh);bne=n(k3e,"STRONG",{});var EJr=s(bne);xfo=r(EJr,"clip"),EJr.forEach(t),$fo=r(k3e," \u2014 "),HB=n(k3e,"A",{href:!0});var CJr=s(HB);kfo=r(CJr,"CLIPProcessor"),CJr.forEach(t),Sfo=r(k3e," (CLIP model)"),k3e.forEach(t),Rfo=i(ve),Ph=n(ve,"LI",{});var S3e=s(Ph);vne=n(S3e,"STRONG",{});var wJr=s(vne);Pfo=r(wJr,"flava"),wJr.forEach(t),Bfo=r(S3e," \u2014 "),Fne=n(S3e,"CODE",{});var AJr=s(Fne);Ifo=r(AJr,"FLAVAProcessor"),AJr.forEach(t),qfo=r(S3e," (Flava model)"),S3e.forEach(t),Nfo=i(ve),Bh=n(ve,"LI",{});var R3e=s(Bh);Tne=n(R3e,"STRONG",{});var yJr=s(Tne);jfo=r(yJr,"layoutlmv2"),yJr.forEach(t),Dfo=r(R3e," \u2014 "),UB=n(R3e,"A",{href:!0});var LJr=s(UB);Gfo=r(LJr,"LayoutLMv2Processor"),LJr.forEach(t),Ofo=r(R3e," (LayoutLMv2 model)"),R3e.forEach(t),Vfo=i(ve),Ih=n(ve,"LI",{});var P3e=s(Ih);Mne=n(P3e,"STRONG",{});var xJr=s(Mne);Xfo=r(xJr,"layoutxlm"),xJr.forEach(t),zfo=r(P3e," \u2014 "),JB=n(P3e,"A",{href:!0});var $Jr=s(JB);Wfo=r($Jr,"LayoutXLMProcessor"),$Jr.forEach(t),Qfo=r(P3e," (LayoutXLM model)"),P3e.forEach(t),Hfo=i(ve),qh=n(ve,"LI",{});var B3e=s(qh);Ene=n(B3e,"STRONG",{});var kJr=s(Ene);Ufo=r(kJr,"sew"),kJr.forEach(t),Jfo=r(B3e," \u2014 "),YB=n(B3e,"A",{href:!0});var SJr=s(YB);Yfo=r(SJr,"Wav2Vec2Processor"),SJr.forEach(t),Kfo=r(B3e," (SEW model)"),B3e.forEach(t),Zfo=i(ve),Nh=n(ve,"LI",{});var I3e=s(Nh);Cne=n(I3e,"STRONG",{});var RJr=s(Cne);emo=r(RJr,"sew-d"),RJr.forEach(t),omo=r(I3e," \u2014 "),KB=n(I3e,"A",{href:!0});var PJr=s(KB);rmo=r(PJr,"Wav2Vec2Processor"),PJr.forEach(t),tmo=r(I3e," (SEW-D model)"),I3e.forEach(t),amo=i(ve),jh=n(ve,"LI",{});var q3e=s(jh);wne=n(q3e,"STRONG",{});var BJr=s(wne);nmo=r(BJr,"speech_to_text"),BJr.forEach(t),smo=r(q3e," \u2014 "),ZB=n(q3e,"A",{href:!0});var IJr=s(ZB);lmo=r(IJr,"Speech2TextProcessor"),IJr.forEach(t),imo=r(q3e," (Speech2Text model)"),q3e.forEach(t),dmo=i(ve),Dh=n(ve,"LI",{});var N3e=s(Dh);Ane=n(N3e,"STRONG",{});var qJr=s(Ane);cmo=r(qJr,"speech_to_text_2"),qJr.forEach(t),fmo=r(N3e," \u2014 "),eI=n(N3e,"A",{href:!0});var NJr=s(eI);mmo=r(NJr,"Speech2Text2Processor"),NJr.forEach(t),gmo=r(N3e," (Speech2Text2 model)"),N3e.forEach(t),hmo=i(ve),Gh=n(ve,"LI",{});var j3e=s(Gh);yne=n(j3e,"STRONG",{});var jJr=s(yne);pmo=r(jJr,"trocr"),jJr.forEach(t),_mo=r(j3e," \u2014 "),oI=n(j3e,"A",{href:!0});var DJr=s(oI);umo=r(DJr,"TrOCRProcessor"),DJr.forEach(t),bmo=r(j3e," (TrOCR model)"),j3e.forEach(t),vmo=i(ve),Oh=n(ve,"LI",{});var D3e=s(Oh);Lne=n(D3e,"STRONG",{});var GJr=s(Lne);Fmo=r(GJr,"unispeech"),GJr.forEach(t),Tmo=r(D3e," \u2014 "),rI=n(D3e,"A",{href:!0});var OJr=s(rI);Mmo=r(OJr,"Wav2Vec2Processor"),OJr.forEach(t),Emo=r(D3e," (UniSpeech model)"),D3e.forEach(t),Cmo=i(ve),Vh=n(ve,"LI",{});var G3e=s(Vh);xne=n(G3e,"STRONG",{});var VJr=s(xne);wmo=r(VJr,"unispeech-sat"),VJr.forEach(t),Amo=r(G3e," \u2014 "),tI=n(G3e,"A",{href:!0});var XJr=s(tI);ymo=r(XJr,"Wav2Vec2Processor"),XJr.forEach(t),Lmo=r(G3e," (UniSpeechSat model)"),G3e.forEach(t),xmo=i(ve),Xh=n(ve,"LI",{});var O3e=s(Xh);$ne=n(O3e,"STRONG",{});var zJr=s($ne);$mo=r(zJr,"vilt"),zJr.forEach(t),kmo=r(O3e," \u2014 "),aI=n(O3e,"A",{href:!0});var WJr=s(aI);Smo=r(WJr,"ViltProcessor"),WJr.forEach(t),Rmo=r(O3e," (ViLT model)"),O3e.forEach(t),Pmo=i(ve),zh=n(ve,"LI",{});var V3e=s(zh);kne=n(V3e,"STRONG",{});var QJr=s(kne);Bmo=r(QJr,"vision-text-dual-encoder"),QJr.forEach(t),Imo=r(V3e," \u2014 "),nI=n(V3e,"A",{href:!0});var HJr=s(nI);qmo=r(HJr,"VisionTextDualEncoderProcessor"),HJr.forEach(t),Nmo=r(V3e," (VisionTextDualEncoder model)"),V3e.forEach(t),jmo=i(ve),Wh=n(ve,"LI",{});var X3e=s(Wh);Sne=n(X3e,"STRONG",{});var UJr=s(Sne);Dmo=r(UJr,"wav2vec2"),UJr.forEach(t),Gmo=r(X3e," \u2014 "),sI=n(X3e,"A",{href:!0});var JJr=s(sI);Omo=r(JJr,"Wav2Vec2Processor"),JJr.forEach(t),Vmo=r(X3e," (Wav2Vec2 model)"),X3e.forEach(t),Xmo=i(ve),Qh=n(ve,"LI",{});var z3e=s(Qh);Rne=n(z3e,"STRONG",{});var YJr=s(Rne);zmo=r(YJr,"wav2vec2-conformer"),YJr.forEach(t),Wmo=r(z3e," \u2014 "),lI=n(z3e,"A",{href:!0});var KJr=s(lI);Qmo=r(KJr,"Wav2Vec2Processor"),KJr.forEach(t),Hmo=r(z3e," (Wav2Vec2-Conformer model)"),z3e.forEach(t),Umo=i(ve),Hh=n(ve,"LI",{});var W3e=s(Hh);Pne=n(W3e,"STRONG",{});var ZJr=s(Pne);Jmo=r(ZJr,"wavlm"),ZJr.forEach(t),Ymo=r(W3e," \u2014 "),iI=n(W3e,"A",{href:!0});var eYr=s(iI);Kmo=r(eYr,"Wav2Vec2Processor"),eYr.forEach(t),Zmo=r(W3e," (WavLM model)"),W3e.forEach(t),ve.forEach(t),ego=i(ea),T(Uh.$$.fragment,ea),ogo=i(ea),T(Jh.$$.fragment,ea),ea.forEach(t),rgo=i(Ds),Yh=n(Ds,"DIV",{class:!0});var Fje=s(Yh);T(D0.$$.fragment,Fje),tgo=i(Fje),Bne=n(Fje,"P",{});var oYr=s(Bne);ago=r(oYr,"Register a new processor for this class."),oYr.forEach(t),Fje.forEach(t),Ds.forEach(t),uqe=i(f),wi=n(f,"H2",{class:!0});var Tje=s(wi);Kh=n(Tje,"A",{id:!0,class:!0,href:!0});var rYr=s(Kh);Ine=n(rYr,"SPAN",{});var tYr=s(Ine);T(G0.$$.fragment,tYr),tYr.forEach(t),rYr.forEach(t),ngo=i(Tje),qne=n(Tje,"SPAN",{});var aYr=s(qne);sgo=r(aYr,"AutoModel"),aYr.forEach(t),Tje.forEach(t),bqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(O0.$$.fragment,Gs),lgo=i(Gs),Ai=n(Gs,"P",{});var zK=s(Ai);igo=r(zK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dI=n(zK,"A",{href:!0});var nYr=s(dI);dgo=r(nYr,"from_pretrained()"),nYr.forEach(t),cgo=r(zK," class method or the "),cI=n(zK,"A",{href:!0});var sYr=s(cI);fgo=r(sYr,"from_config()"),sYr.forEach(t),mgo=r(zK,` class
method.`),zK.forEach(t),ggo=i(Gs),V0=n(Gs,"P",{});var Mje=s(V0);hgo=r(Mje,"This class cannot be instantiated directly using "),Nne=n(Mje,"CODE",{});var lYr=s(Nne);pgo=r(lYr,"__init__()"),lYr.forEach(t),_go=r(Mje," (throws an error)."),Mje.forEach(t),ugo=i(Gs),tt=n(Gs,"DIV",{class:!0});var v3=s(tt);T(X0.$$.fragment,v3),bgo=i(v3),jne=n(v3,"P",{});var iYr=s(jne);vgo=r(iYr,"Instantiates one of the base model classes of the library from a configuration."),iYr.forEach(t),Fgo=i(v3),yi=n(v3,"P",{});var WK=s(yi);Tgo=r(WK,`Note:
Loading a model from its configuration file does `),Dne=n(WK,"STRONG",{});var dYr=s(Dne);Mgo=r(dYr,"not"),dYr.forEach(t),Ego=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=n(WK,"A",{href:!0});var cYr=s(fI);Cgo=r(cYr,"from_pretrained()"),cYr.forEach(t),wgo=r(WK," to load the model weights."),WK.forEach(t),Ago=i(v3),T(Zh.$$.fragment,v3),v3.forEach(t),ygo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(z0.$$.fragment,oa),Lgo=i(oa),Gne=n(oa,"P",{});var fYr=s(Gne);xgo=r(fYr,"Instantiate one of the base model classes of the library from a pretrained model."),fYr.forEach(t),$go=i(oa),La=n(oa,"P",{});var F3=s(La);kgo=r(F3,"The model class to instantiate is selected based on the "),One=n(F3,"CODE",{});var mYr=s(One);Sgo=r(mYr,"model_type"),mYr.forEach(t),Rgo=r(F3,` property of the config object (either
passed as an argument or loaded from `),Vne=n(F3,"CODE",{});var gYr=s(Vne);Pgo=r(gYr,"pretrained_model_name_or_path"),gYr.forEach(t),Bgo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xne=n(F3,"CODE",{});var hYr=s(Xne);Igo=r(hYr,"pretrained_model_name_or_path"),hYr.forEach(t),qgo=r(F3,":"),F3.forEach(t),Ngo=i(oa),x=n(oa,"UL",{});var $=s(x);ep=n($,"LI",{});var Q3e=s(ep);zne=n(Q3e,"STRONG",{});var pYr=s(zne);jgo=r(pYr,"albert"),pYr.forEach(t),Dgo=r(Q3e," \u2014 "),mI=n(Q3e,"A",{href:!0});var _Yr=s(mI);Ggo=r(_Yr,"AlbertModel"),_Yr.forEach(t),Ogo=r(Q3e," (ALBERT model)"),Q3e.forEach(t),Vgo=i($),op=n($,"LI",{});var H3e=s(op);Wne=n(H3e,"STRONG",{});var uYr=s(Wne);Xgo=r(uYr,"bart"),uYr.forEach(t),zgo=r(H3e," \u2014 "),gI=n(H3e,"A",{href:!0});var bYr=s(gI);Wgo=r(bYr,"BartModel"),bYr.forEach(t),Qgo=r(H3e," (BART model)"),H3e.forEach(t),Hgo=i($),rp=n($,"LI",{});var U3e=s(rp);Qne=n(U3e,"STRONG",{});var vYr=s(Qne);Ugo=r(vYr,"beit"),vYr.forEach(t),Jgo=r(U3e," \u2014 "),hI=n(U3e,"A",{href:!0});var FYr=s(hI);Ygo=r(FYr,"BeitModel"),FYr.forEach(t),Kgo=r(U3e," (BEiT model)"),U3e.forEach(t),Zgo=i($),tp=n($,"LI",{});var J3e=s(tp);Hne=n(J3e,"STRONG",{});var TYr=s(Hne);eho=r(TYr,"bert"),TYr.forEach(t),oho=r(J3e," \u2014 "),pI=n(J3e,"A",{href:!0});var MYr=s(pI);rho=r(MYr,"BertModel"),MYr.forEach(t),tho=r(J3e," (BERT model)"),J3e.forEach(t),aho=i($),ap=n($,"LI",{});var Y3e=s(ap);Une=n(Y3e,"STRONG",{});var EYr=s(Une);nho=r(EYr,"bert-generation"),EYr.forEach(t),sho=r(Y3e," \u2014 "),_I=n(Y3e,"A",{href:!0});var CYr=s(_I);lho=r(CYr,"BertGenerationEncoder"),CYr.forEach(t),iho=r(Y3e," (Bert Generation model)"),Y3e.forEach(t),dho=i($),np=n($,"LI",{});var K3e=s(np);Jne=n(K3e,"STRONG",{});var wYr=s(Jne);cho=r(wYr,"big_bird"),wYr.forEach(t),fho=r(K3e," \u2014 "),uI=n(K3e,"A",{href:!0});var AYr=s(uI);mho=r(AYr,"BigBirdModel"),AYr.forEach(t),gho=r(K3e," (BigBird model)"),K3e.forEach(t),hho=i($),sp=n($,"LI",{});var Z3e=s(sp);Yne=n(Z3e,"STRONG",{});var yYr=s(Yne);pho=r(yYr,"bigbird_pegasus"),yYr.forEach(t),_ho=r(Z3e," \u2014 "),bI=n(Z3e,"A",{href:!0});var LYr=s(bI);uho=r(LYr,"BigBirdPegasusModel"),LYr.forEach(t),bho=r(Z3e," (BigBirdPegasus model)"),Z3e.forEach(t),vho=i($),lp=n($,"LI",{});var ewe=s(lp);Kne=n(ewe,"STRONG",{});var xYr=s(Kne);Fho=r(xYr,"blenderbot"),xYr.forEach(t),Tho=r(ewe," \u2014 "),vI=n(ewe,"A",{href:!0});var $Yr=s(vI);Mho=r($Yr,"BlenderbotModel"),$Yr.forEach(t),Eho=r(ewe," (Blenderbot model)"),ewe.forEach(t),Cho=i($),ip=n($,"LI",{});var owe=s(ip);Zne=n(owe,"STRONG",{});var kYr=s(Zne);who=r(kYr,"blenderbot-small"),kYr.forEach(t),Aho=r(owe," \u2014 "),FI=n(owe,"A",{href:!0});var SYr=s(FI);yho=r(SYr,"BlenderbotSmallModel"),SYr.forEach(t),Lho=r(owe," (BlenderbotSmall model)"),owe.forEach(t),xho=i($),dp=n($,"LI",{});var rwe=s(dp);ese=n(rwe,"STRONG",{});var RYr=s(ese);$ho=r(RYr,"camembert"),RYr.forEach(t),kho=r(rwe," \u2014 "),TI=n(rwe,"A",{href:!0});var PYr=s(TI);Sho=r(PYr,"CamembertModel"),PYr.forEach(t),Rho=r(rwe," (CamemBERT model)"),rwe.forEach(t),Pho=i($),cp=n($,"LI",{});var twe=s(cp);ose=n(twe,"STRONG",{});var BYr=s(ose);Bho=r(BYr,"canine"),BYr.forEach(t),Iho=r(twe," \u2014 "),MI=n(twe,"A",{href:!0});var IYr=s(MI);qho=r(IYr,"CanineModel"),IYr.forEach(t),Nho=r(twe," (Canine model)"),twe.forEach(t),jho=i($),fp=n($,"LI",{});var awe=s(fp);rse=n(awe,"STRONG",{});var qYr=s(rse);Dho=r(qYr,"clip"),qYr.forEach(t),Gho=r(awe," \u2014 "),EI=n(awe,"A",{href:!0});var NYr=s(EI);Oho=r(NYr,"CLIPModel"),NYr.forEach(t),Vho=r(awe," (CLIP model)"),awe.forEach(t),Xho=i($),mp=n($,"LI",{});var nwe=s(mp);tse=n(nwe,"STRONG",{});var jYr=s(tse);zho=r(jYr,"convbert"),jYr.forEach(t),Who=r(nwe," \u2014 "),CI=n(nwe,"A",{href:!0});var DYr=s(CI);Qho=r(DYr,"ConvBertModel"),DYr.forEach(t),Hho=r(nwe," (ConvBERT model)"),nwe.forEach(t),Uho=i($),gp=n($,"LI",{});var swe=s(gp);ase=n(swe,"STRONG",{});var GYr=s(ase);Jho=r(GYr,"convnext"),GYr.forEach(t),Yho=r(swe," \u2014 "),wI=n(swe,"A",{href:!0});var OYr=s(wI);Kho=r(OYr,"ConvNextModel"),OYr.forEach(t),Zho=r(swe," (ConvNext model)"),swe.forEach(t),epo=i($),hp=n($,"LI",{});var lwe=s(hp);nse=n(lwe,"STRONG",{});var VYr=s(nse);opo=r(VYr,"ctrl"),VYr.forEach(t),rpo=r(lwe," \u2014 "),AI=n(lwe,"A",{href:!0});var XYr=s(AI);tpo=r(XYr,"CTRLModel"),XYr.forEach(t),apo=r(lwe," (CTRL model)"),lwe.forEach(t),npo=i($),pp=n($,"LI",{});var iwe=s(pp);sse=n(iwe,"STRONG",{});var zYr=s(sse);spo=r(zYr,"data2vec-audio"),zYr.forEach(t),lpo=r(iwe," \u2014 "),yI=n(iwe,"A",{href:!0});var WYr=s(yI);ipo=r(WYr,"Data2VecAudioModel"),WYr.forEach(t),dpo=r(iwe," (Data2VecAudio model)"),iwe.forEach(t),cpo=i($),_p=n($,"LI",{});var dwe=s(_p);lse=n(dwe,"STRONG",{});var QYr=s(lse);fpo=r(QYr,"data2vec-text"),QYr.forEach(t),mpo=r(dwe," \u2014 "),LI=n(dwe,"A",{href:!0});var HYr=s(LI);gpo=r(HYr,"Data2VecTextModel"),HYr.forEach(t),hpo=r(dwe," (Data2VecText model)"),dwe.forEach(t),ppo=i($),up=n($,"LI",{});var cwe=s(up);ise=n(cwe,"STRONG",{});var UYr=s(ise);_po=r(UYr,"data2vec-vision"),UYr.forEach(t),upo=r(cwe," \u2014 "),xI=n(cwe,"A",{href:!0});var JYr=s(xI);bpo=r(JYr,"Data2VecVisionModel"),JYr.forEach(t),vpo=r(cwe," (Data2VecVision model)"),cwe.forEach(t),Fpo=i($),bp=n($,"LI",{});var fwe=s(bp);dse=n(fwe,"STRONG",{});var YYr=s(dse);Tpo=r(YYr,"deberta"),YYr.forEach(t),Mpo=r(fwe," \u2014 "),$I=n(fwe,"A",{href:!0});var KYr=s($I);Epo=r(KYr,"DebertaModel"),KYr.forEach(t),Cpo=r(fwe," (DeBERTa model)"),fwe.forEach(t),wpo=i($),vp=n($,"LI",{});var mwe=s(vp);cse=n(mwe,"STRONG",{});var ZYr=s(cse);Apo=r(ZYr,"deberta-v2"),ZYr.forEach(t),ypo=r(mwe," \u2014 "),kI=n(mwe,"A",{href:!0});var eKr=s(kI);Lpo=r(eKr,"DebertaV2Model"),eKr.forEach(t),xpo=r(mwe," (DeBERTa-v2 model)"),mwe.forEach(t),$po=i($),Fp=n($,"LI",{});var gwe=s(Fp);fse=n(gwe,"STRONG",{});var oKr=s(fse);kpo=r(oKr,"decision_transformer"),oKr.forEach(t),Spo=r(gwe," \u2014 "),SI=n(gwe,"A",{href:!0});var rKr=s(SI);Rpo=r(rKr,"DecisionTransformerModel"),rKr.forEach(t),Ppo=r(gwe," (Decision Transformer model)"),gwe.forEach(t),Bpo=i($),Tp=n($,"LI",{});var hwe=s(Tp);mse=n(hwe,"STRONG",{});var tKr=s(mse);Ipo=r(tKr,"deit"),tKr.forEach(t),qpo=r(hwe," \u2014 "),RI=n(hwe,"A",{href:!0});var aKr=s(RI);Npo=r(aKr,"DeiTModel"),aKr.forEach(t),jpo=r(hwe," (DeiT model)"),hwe.forEach(t),Dpo=i($),Mp=n($,"LI",{});var pwe=s(Mp);gse=n(pwe,"STRONG",{});var nKr=s(gse);Gpo=r(nKr,"detr"),nKr.forEach(t),Opo=r(pwe," \u2014 "),PI=n(pwe,"A",{href:!0});var sKr=s(PI);Vpo=r(sKr,"DetrModel"),sKr.forEach(t),Xpo=r(pwe," (DETR model)"),pwe.forEach(t),zpo=i($),Ep=n($,"LI",{});var _we=s(Ep);hse=n(_we,"STRONG",{});var lKr=s(hse);Wpo=r(lKr,"distilbert"),lKr.forEach(t),Qpo=r(_we," \u2014 "),BI=n(_we,"A",{href:!0});var iKr=s(BI);Hpo=r(iKr,"DistilBertModel"),iKr.forEach(t),Upo=r(_we," (DistilBERT model)"),_we.forEach(t),Jpo=i($),Cp=n($,"LI",{});var uwe=s(Cp);pse=n(uwe,"STRONG",{});var dKr=s(pse);Ypo=r(dKr,"dpr"),dKr.forEach(t),Kpo=r(uwe," \u2014 "),II=n(uwe,"A",{href:!0});var cKr=s(II);Zpo=r(cKr,"DPRQuestionEncoder"),cKr.forEach(t),e_o=r(uwe," (DPR model)"),uwe.forEach(t),o_o=i($),wp=n($,"LI",{});var bwe=s(wp);_se=n(bwe,"STRONG",{});var fKr=s(_se);r_o=r(fKr,"dpt"),fKr.forEach(t),t_o=r(bwe," \u2014 "),qI=n(bwe,"A",{href:!0});var mKr=s(qI);a_o=r(mKr,"DPTModel"),mKr.forEach(t),n_o=r(bwe," (DPT model)"),bwe.forEach(t),s_o=i($),Ap=n($,"LI",{});var vwe=s(Ap);use=n(vwe,"STRONG",{});var gKr=s(use);l_o=r(gKr,"electra"),gKr.forEach(t),i_o=r(vwe," \u2014 "),NI=n(vwe,"A",{href:!0});var hKr=s(NI);d_o=r(hKr,"ElectraModel"),hKr.forEach(t),c_o=r(vwe," (ELECTRA model)"),vwe.forEach(t),f_o=i($),yp=n($,"LI",{});var Fwe=s(yp);bse=n(Fwe,"STRONG",{});var pKr=s(bse);m_o=r(pKr,"flaubert"),pKr.forEach(t),g_o=r(Fwe," \u2014 "),jI=n(Fwe,"A",{href:!0});var _Kr=s(jI);h_o=r(_Kr,"FlaubertModel"),_Kr.forEach(t),p_o=r(Fwe," (FlauBERT model)"),Fwe.forEach(t),__o=i($),Lp=n($,"LI",{});var Twe=s(Lp);vse=n(Twe,"STRONG",{});var uKr=s(vse);u_o=r(uKr,"flava"),uKr.forEach(t),b_o=r(Twe," \u2014 "),DI=n(Twe,"A",{href:!0});var bKr=s(DI);v_o=r(bKr,"FlavaModel"),bKr.forEach(t),F_o=r(Twe," (Flava model)"),Twe.forEach(t),T_o=i($),xp=n($,"LI",{});var Mwe=s(xp);Fse=n(Mwe,"STRONG",{});var vKr=s(Fse);M_o=r(vKr,"fnet"),vKr.forEach(t),E_o=r(Mwe," \u2014 "),GI=n(Mwe,"A",{href:!0});var FKr=s(GI);C_o=r(FKr,"FNetModel"),FKr.forEach(t),w_o=r(Mwe," (FNet model)"),Mwe.forEach(t),A_o=i($),$p=n($,"LI",{});var Ewe=s($p);Tse=n(Ewe,"STRONG",{});var TKr=s(Tse);y_o=r(TKr,"fsmt"),TKr.forEach(t),L_o=r(Ewe," \u2014 "),OI=n(Ewe,"A",{href:!0});var MKr=s(OI);x_o=r(MKr,"FSMTModel"),MKr.forEach(t),$_o=r(Ewe," (FairSeq Machine-Translation model)"),Ewe.forEach(t),k_o=i($),Ps=n($,"LI",{});var $$=s(Ps);Mse=n($$,"STRONG",{});var EKr=s(Mse);S_o=r(EKr,"funnel"),EKr.forEach(t),R_o=r($$," \u2014 "),VI=n($$,"A",{href:!0});var CKr=s(VI);P_o=r(CKr,"FunnelModel"),CKr.forEach(t),B_o=r($$," or "),XI=n($$,"A",{href:!0});var wKr=s(XI);I_o=r(wKr,"FunnelBaseModel"),wKr.forEach(t),q_o=r($$," (Funnel Transformer model)"),$$.forEach(t),N_o=i($),kp=n($,"LI",{});var Cwe=s(kp);Ese=n(Cwe,"STRONG",{});var AKr=s(Ese);j_o=r(AKr,"glpn"),AKr.forEach(t),D_o=r(Cwe," \u2014 "),zI=n(Cwe,"A",{href:!0});var yKr=s(zI);G_o=r(yKr,"GLPNModel"),yKr.forEach(t),O_o=r(Cwe," (GLPN model)"),Cwe.forEach(t),V_o=i($),Sp=n($,"LI",{});var wwe=s(Sp);Cse=n(wwe,"STRONG",{});var LKr=s(Cse);X_o=r(LKr,"gpt2"),LKr.forEach(t),z_o=r(wwe," \u2014 "),WI=n(wwe,"A",{href:!0});var xKr=s(WI);W_o=r(xKr,"GPT2Model"),xKr.forEach(t),Q_o=r(wwe," (OpenAI GPT-2 model)"),wwe.forEach(t),H_o=i($),Rp=n($,"LI",{});var Awe=s(Rp);wse=n(Awe,"STRONG",{});var $Kr=s(wse);U_o=r($Kr,"gpt_neo"),$Kr.forEach(t),J_o=r(Awe," \u2014 "),QI=n(Awe,"A",{href:!0});var kKr=s(QI);Y_o=r(kKr,"GPTNeoModel"),kKr.forEach(t),K_o=r(Awe," (GPT Neo model)"),Awe.forEach(t),Z_o=i($),Pp=n($,"LI",{});var ywe=s(Pp);Ase=n(ywe,"STRONG",{});var SKr=s(Ase);euo=r(SKr,"gptj"),SKr.forEach(t),ouo=r(ywe," \u2014 "),HI=n(ywe,"A",{href:!0});var RKr=s(HI);ruo=r(RKr,"GPTJModel"),RKr.forEach(t),tuo=r(ywe," (GPT-J model)"),ywe.forEach(t),auo=i($),Bp=n($,"LI",{});var Lwe=s(Bp);yse=n(Lwe,"STRONG",{});var PKr=s(yse);nuo=r(PKr,"hubert"),PKr.forEach(t),suo=r(Lwe," \u2014 "),UI=n(Lwe,"A",{href:!0});var BKr=s(UI);luo=r(BKr,"HubertModel"),BKr.forEach(t),iuo=r(Lwe," (Hubert model)"),Lwe.forEach(t),duo=i($),Ip=n($,"LI",{});var xwe=s(Ip);Lse=n(xwe,"STRONG",{});var IKr=s(Lse);cuo=r(IKr,"ibert"),IKr.forEach(t),fuo=r(xwe," \u2014 "),JI=n(xwe,"A",{href:!0});var qKr=s(JI);muo=r(qKr,"IBertModel"),qKr.forEach(t),guo=r(xwe," (I-BERT model)"),xwe.forEach(t),huo=i($),qp=n($,"LI",{});var $we=s(qp);xse=n($we,"STRONG",{});var NKr=s(xse);puo=r(NKr,"imagegpt"),NKr.forEach(t),_uo=r($we," \u2014 "),YI=n($we,"A",{href:!0});var jKr=s(YI);uuo=r(jKr,"ImageGPTModel"),jKr.forEach(t),buo=r($we," (ImageGPT model)"),$we.forEach(t),vuo=i($),Np=n($,"LI",{});var kwe=s(Np);$se=n(kwe,"STRONG",{});var DKr=s($se);Fuo=r(DKr,"layoutlm"),DKr.forEach(t),Tuo=r(kwe," \u2014 "),KI=n(kwe,"A",{href:!0});var GKr=s(KI);Muo=r(GKr,"LayoutLMModel"),GKr.forEach(t),Euo=r(kwe," (LayoutLM model)"),kwe.forEach(t),Cuo=i($),jp=n($,"LI",{});var Swe=s(jp);kse=n(Swe,"STRONG",{});var OKr=s(kse);wuo=r(OKr,"layoutlmv2"),OKr.forEach(t),Auo=r(Swe," \u2014 "),ZI=n(Swe,"A",{href:!0});var VKr=s(ZI);yuo=r(VKr,"LayoutLMv2Model"),VKr.forEach(t),Luo=r(Swe," (LayoutLMv2 model)"),Swe.forEach(t),xuo=i($),Dp=n($,"LI",{});var Rwe=s(Dp);Sse=n(Rwe,"STRONG",{});var XKr=s(Sse);$uo=r(XKr,"led"),XKr.forEach(t),kuo=r(Rwe," \u2014 "),eq=n(Rwe,"A",{href:!0});var zKr=s(eq);Suo=r(zKr,"LEDModel"),zKr.forEach(t),Ruo=r(Rwe," (LED model)"),Rwe.forEach(t),Puo=i($),Gp=n($,"LI",{});var Pwe=s(Gp);Rse=n(Pwe,"STRONG",{});var WKr=s(Rse);Buo=r(WKr,"longformer"),WKr.forEach(t),Iuo=r(Pwe," \u2014 "),oq=n(Pwe,"A",{href:!0});var QKr=s(oq);quo=r(QKr,"LongformerModel"),QKr.forEach(t),Nuo=r(Pwe," (Longformer model)"),Pwe.forEach(t),juo=i($),Op=n($,"LI",{});var Bwe=s(Op);Pse=n(Bwe,"STRONG",{});var HKr=s(Pse);Duo=r(HKr,"longt5"),HKr.forEach(t),Guo=r(Bwe," \u2014 "),rq=n(Bwe,"A",{href:!0});var UKr=s(rq);Ouo=r(UKr,"LongT5Model"),UKr.forEach(t),Vuo=r(Bwe," (LongT5 model)"),Bwe.forEach(t),Xuo=i($),Vp=n($,"LI",{});var Iwe=s(Vp);Bse=n(Iwe,"STRONG",{});var JKr=s(Bse);zuo=r(JKr,"luke"),JKr.forEach(t),Wuo=r(Iwe," \u2014 "),tq=n(Iwe,"A",{href:!0});var YKr=s(tq);Quo=r(YKr,"LukeModel"),YKr.forEach(t),Huo=r(Iwe," (LUKE model)"),Iwe.forEach(t),Uuo=i($),Xp=n($,"LI",{});var qwe=s(Xp);Ise=n(qwe,"STRONG",{});var KKr=s(Ise);Juo=r(KKr,"lxmert"),KKr.forEach(t),Yuo=r(qwe," \u2014 "),aq=n(qwe,"A",{href:!0});var ZKr=s(aq);Kuo=r(ZKr,"LxmertModel"),ZKr.forEach(t),Zuo=r(qwe," (LXMERT model)"),qwe.forEach(t),e2o=i($),zp=n($,"LI",{});var Nwe=s(zp);qse=n(Nwe,"STRONG",{});var eZr=s(qse);o2o=r(eZr,"m2m_100"),eZr.forEach(t),r2o=r(Nwe," \u2014 "),nq=n(Nwe,"A",{href:!0});var oZr=s(nq);t2o=r(oZr,"M2M100Model"),oZr.forEach(t),a2o=r(Nwe," (M2M100 model)"),Nwe.forEach(t),n2o=i($),Wp=n($,"LI",{});var jwe=s(Wp);Nse=n(jwe,"STRONG",{});var rZr=s(Nse);s2o=r(rZr,"marian"),rZr.forEach(t),l2o=r(jwe," \u2014 "),sq=n(jwe,"A",{href:!0});var tZr=s(sq);i2o=r(tZr,"MarianModel"),tZr.forEach(t),d2o=r(jwe," (Marian model)"),jwe.forEach(t),c2o=i($),Qp=n($,"LI",{});var Dwe=s(Qp);jse=n(Dwe,"STRONG",{});var aZr=s(jse);f2o=r(aZr,"maskformer"),aZr.forEach(t),m2o=r(Dwe," \u2014 "),lq=n(Dwe,"A",{href:!0});var nZr=s(lq);g2o=r(nZr,"MaskFormerModel"),nZr.forEach(t),h2o=r(Dwe," (MaskFormer model)"),Dwe.forEach(t),p2o=i($),Hp=n($,"LI",{});var Gwe=s(Hp);Dse=n(Gwe,"STRONG",{});var sZr=s(Dse);_2o=r(sZr,"mbart"),sZr.forEach(t),u2o=r(Gwe," \u2014 "),iq=n(Gwe,"A",{href:!0});var lZr=s(iq);b2o=r(lZr,"MBartModel"),lZr.forEach(t),v2o=r(Gwe," (mBART model)"),Gwe.forEach(t),F2o=i($),Up=n($,"LI",{});var Owe=s(Up);Gse=n(Owe,"STRONG",{});var iZr=s(Gse);T2o=r(iZr,"megatron-bert"),iZr.forEach(t),M2o=r(Owe," \u2014 "),dq=n(Owe,"A",{href:!0});var dZr=s(dq);E2o=r(dZr,"MegatronBertModel"),dZr.forEach(t),C2o=r(Owe," (MegatronBert model)"),Owe.forEach(t),w2o=i($),Jp=n($,"LI",{});var Vwe=s(Jp);Ose=n(Vwe,"STRONG",{});var cZr=s(Ose);A2o=r(cZr,"mobilebert"),cZr.forEach(t),y2o=r(Vwe," \u2014 "),cq=n(Vwe,"A",{href:!0});var fZr=s(cq);L2o=r(fZr,"MobileBertModel"),fZr.forEach(t),x2o=r(Vwe," (MobileBERT model)"),Vwe.forEach(t),$2o=i($),Yp=n($,"LI",{});var Xwe=s(Yp);Vse=n(Xwe,"STRONG",{});var mZr=s(Vse);k2o=r(mZr,"mpnet"),mZr.forEach(t),S2o=r(Xwe," \u2014 "),fq=n(Xwe,"A",{href:!0});var gZr=s(fq);R2o=r(gZr,"MPNetModel"),gZr.forEach(t),P2o=r(Xwe," (MPNet model)"),Xwe.forEach(t),B2o=i($),Kp=n($,"LI",{});var zwe=s(Kp);Xse=n(zwe,"STRONG",{});var hZr=s(Xse);I2o=r(hZr,"mt5"),hZr.forEach(t),q2o=r(zwe," \u2014 "),mq=n(zwe,"A",{href:!0});var pZr=s(mq);N2o=r(pZr,"MT5Model"),pZr.forEach(t),j2o=r(zwe," (mT5 model)"),zwe.forEach(t),D2o=i($),Zp=n($,"LI",{});var Wwe=s(Zp);zse=n(Wwe,"STRONG",{});var _Zr=s(zse);G2o=r(_Zr,"nystromformer"),_Zr.forEach(t),O2o=r(Wwe," \u2014 "),gq=n(Wwe,"A",{href:!0});var uZr=s(gq);V2o=r(uZr,"NystromformerModel"),uZr.forEach(t),X2o=r(Wwe," (Nystromformer model)"),Wwe.forEach(t),z2o=i($),e_=n($,"LI",{});var Qwe=s(e_);Wse=n(Qwe,"STRONG",{});var bZr=s(Wse);W2o=r(bZr,"openai-gpt"),bZr.forEach(t),Q2o=r(Qwe," \u2014 "),hq=n(Qwe,"A",{href:!0});var vZr=s(hq);H2o=r(vZr,"OpenAIGPTModel"),vZr.forEach(t),U2o=r(Qwe," (OpenAI GPT model)"),Qwe.forEach(t),J2o=i($),o_=n($,"LI",{});var Hwe=s(o_);Qse=n(Hwe,"STRONG",{});var FZr=s(Qse);Y2o=r(FZr,"opt"),FZr.forEach(t),K2o=r(Hwe," \u2014 "),pq=n(Hwe,"A",{href:!0});var TZr=s(pq);Z2o=r(TZr,"OPTModel"),TZr.forEach(t),e1o=r(Hwe," (OPT model)"),Hwe.forEach(t),o1o=i($),r_=n($,"LI",{});var Uwe=s(r_);Hse=n(Uwe,"STRONG",{});var MZr=s(Hse);r1o=r(MZr,"pegasus"),MZr.forEach(t),t1o=r(Uwe," \u2014 "),_q=n(Uwe,"A",{href:!0});var EZr=s(_q);a1o=r(EZr,"PegasusModel"),EZr.forEach(t),n1o=r(Uwe," (Pegasus model)"),Uwe.forEach(t),s1o=i($),t_=n($,"LI",{});var Jwe=s(t_);Use=n(Jwe,"STRONG",{});var CZr=s(Use);l1o=r(CZr,"perceiver"),CZr.forEach(t),i1o=r(Jwe," \u2014 "),uq=n(Jwe,"A",{href:!0});var wZr=s(uq);d1o=r(wZr,"PerceiverModel"),wZr.forEach(t),c1o=r(Jwe," (Perceiver model)"),Jwe.forEach(t),f1o=i($),a_=n($,"LI",{});var Ywe=s(a_);Jse=n(Ywe,"STRONG",{});var AZr=s(Jse);m1o=r(AZr,"plbart"),AZr.forEach(t),g1o=r(Ywe," \u2014 "),bq=n(Ywe,"A",{href:!0});var yZr=s(bq);h1o=r(yZr,"PLBartModel"),yZr.forEach(t),p1o=r(Ywe," (PLBart model)"),Ywe.forEach(t),_1o=i($),n_=n($,"LI",{});var Kwe=s(n_);Yse=n(Kwe,"STRONG",{});var LZr=s(Yse);u1o=r(LZr,"poolformer"),LZr.forEach(t),b1o=r(Kwe," \u2014 "),vq=n(Kwe,"A",{href:!0});var xZr=s(vq);v1o=r(xZr,"PoolFormerModel"),xZr.forEach(t),F1o=r(Kwe," (PoolFormer model)"),Kwe.forEach(t),T1o=i($),s_=n($,"LI",{});var Zwe=s(s_);Kse=n(Zwe,"STRONG",{});var $Zr=s(Kse);M1o=r($Zr,"prophetnet"),$Zr.forEach(t),E1o=r(Zwe," \u2014 "),Fq=n(Zwe,"A",{href:!0});var kZr=s(Fq);C1o=r(kZr,"ProphetNetModel"),kZr.forEach(t),w1o=r(Zwe," (ProphetNet model)"),Zwe.forEach(t),A1o=i($),l_=n($,"LI",{});var e0e=s(l_);Zse=n(e0e,"STRONG",{});var SZr=s(Zse);y1o=r(SZr,"qdqbert"),SZr.forEach(t),L1o=r(e0e," \u2014 "),Tq=n(e0e,"A",{href:!0});var RZr=s(Tq);x1o=r(RZr,"QDQBertModel"),RZr.forEach(t),$1o=r(e0e," (QDQBert model)"),e0e.forEach(t),k1o=i($),i_=n($,"LI",{});var o0e=s(i_);ele=n(o0e,"STRONG",{});var PZr=s(ele);S1o=r(PZr,"reformer"),PZr.forEach(t),R1o=r(o0e," \u2014 "),Mq=n(o0e,"A",{href:!0});var BZr=s(Mq);P1o=r(BZr,"ReformerModel"),BZr.forEach(t),B1o=r(o0e," (Reformer model)"),o0e.forEach(t),I1o=i($),d_=n($,"LI",{});var r0e=s(d_);ole=n(r0e,"STRONG",{});var IZr=s(ole);q1o=r(IZr,"regnet"),IZr.forEach(t),N1o=r(r0e," \u2014 "),Eq=n(r0e,"A",{href:!0});var qZr=s(Eq);j1o=r(qZr,"RegNetModel"),qZr.forEach(t),D1o=r(r0e," (RegNet model)"),r0e.forEach(t),G1o=i($),c_=n($,"LI",{});var t0e=s(c_);rle=n(t0e,"STRONG",{});var NZr=s(rle);O1o=r(NZr,"rembert"),NZr.forEach(t),V1o=r(t0e," \u2014 "),Cq=n(t0e,"A",{href:!0});var jZr=s(Cq);X1o=r(jZr,"RemBertModel"),jZr.forEach(t),z1o=r(t0e," (RemBERT model)"),t0e.forEach(t),W1o=i($),f_=n($,"LI",{});var a0e=s(f_);tle=n(a0e,"STRONG",{});var DZr=s(tle);Q1o=r(DZr,"resnet"),DZr.forEach(t),H1o=r(a0e," \u2014 "),wq=n(a0e,"A",{href:!0});var GZr=s(wq);U1o=r(GZr,"ResNetModel"),GZr.forEach(t),J1o=r(a0e," (ResNet model)"),a0e.forEach(t),Y1o=i($),m_=n($,"LI",{});var n0e=s(m_);ale=n(n0e,"STRONG",{});var OZr=s(ale);K1o=r(OZr,"retribert"),OZr.forEach(t),Z1o=r(n0e," \u2014 "),Aq=n(n0e,"A",{href:!0});var VZr=s(Aq);ebo=r(VZr,"RetriBertModel"),VZr.forEach(t),obo=r(n0e," (RetriBERT model)"),n0e.forEach(t),rbo=i($),g_=n($,"LI",{});var s0e=s(g_);nle=n(s0e,"STRONG",{});var XZr=s(nle);tbo=r(XZr,"roberta"),XZr.forEach(t),abo=r(s0e," \u2014 "),yq=n(s0e,"A",{href:!0});var zZr=s(yq);nbo=r(zZr,"RobertaModel"),zZr.forEach(t),sbo=r(s0e," (RoBERTa model)"),s0e.forEach(t),lbo=i($),h_=n($,"LI",{});var l0e=s(h_);sle=n(l0e,"STRONG",{});var WZr=s(sle);ibo=r(WZr,"roformer"),WZr.forEach(t),dbo=r(l0e," \u2014 "),Lq=n(l0e,"A",{href:!0});var QZr=s(Lq);cbo=r(QZr,"RoFormerModel"),QZr.forEach(t),fbo=r(l0e," (RoFormer model)"),l0e.forEach(t),mbo=i($),p_=n($,"LI",{});var i0e=s(p_);lle=n(i0e,"STRONG",{});var HZr=s(lle);gbo=r(HZr,"segformer"),HZr.forEach(t),hbo=r(i0e," \u2014 "),xq=n(i0e,"A",{href:!0});var UZr=s(xq);pbo=r(UZr,"SegformerModel"),UZr.forEach(t),_bo=r(i0e," (SegFormer model)"),i0e.forEach(t),ubo=i($),__=n($,"LI",{});var d0e=s(__);ile=n(d0e,"STRONG",{});var JZr=s(ile);bbo=r(JZr,"sew"),JZr.forEach(t),vbo=r(d0e," \u2014 "),$q=n(d0e,"A",{href:!0});var YZr=s($q);Fbo=r(YZr,"SEWModel"),YZr.forEach(t),Tbo=r(d0e," (SEW model)"),d0e.forEach(t),Mbo=i($),u_=n($,"LI",{});var c0e=s(u_);dle=n(c0e,"STRONG",{});var KZr=s(dle);Ebo=r(KZr,"sew-d"),KZr.forEach(t),Cbo=r(c0e," \u2014 "),kq=n(c0e,"A",{href:!0});var ZZr=s(kq);wbo=r(ZZr,"SEWDModel"),ZZr.forEach(t),Abo=r(c0e," (SEW-D model)"),c0e.forEach(t),ybo=i($),b_=n($,"LI",{});var f0e=s(b_);cle=n(f0e,"STRONG",{});var eet=s(cle);Lbo=r(eet,"speech_to_text"),eet.forEach(t),xbo=r(f0e," \u2014 "),Sq=n(f0e,"A",{href:!0});var oet=s(Sq);$bo=r(oet,"Speech2TextModel"),oet.forEach(t),kbo=r(f0e," (Speech2Text model)"),f0e.forEach(t),Sbo=i($),v_=n($,"LI",{});var m0e=s(v_);fle=n(m0e,"STRONG",{});var ret=s(fle);Rbo=r(ret,"splinter"),ret.forEach(t),Pbo=r(m0e," \u2014 "),Rq=n(m0e,"A",{href:!0});var tet=s(Rq);Bbo=r(tet,"SplinterModel"),tet.forEach(t),Ibo=r(m0e," (Splinter model)"),m0e.forEach(t),qbo=i($),F_=n($,"LI",{});var g0e=s(F_);mle=n(g0e,"STRONG",{});var aet=s(mle);Nbo=r(aet,"squeezebert"),aet.forEach(t),jbo=r(g0e," \u2014 "),Pq=n(g0e,"A",{href:!0});var net=s(Pq);Dbo=r(net,"SqueezeBertModel"),net.forEach(t),Gbo=r(g0e," (SqueezeBERT model)"),g0e.forEach(t),Obo=i($),T_=n($,"LI",{});var h0e=s(T_);gle=n(h0e,"STRONG",{});var set=s(gle);Vbo=r(set,"swin"),set.forEach(t),Xbo=r(h0e," \u2014 "),Bq=n(h0e,"A",{href:!0});var iet=s(Bq);zbo=r(iet,"SwinModel"),iet.forEach(t),Wbo=r(h0e," (Swin model)"),h0e.forEach(t),Qbo=i($),M_=n($,"LI",{});var p0e=s(M_);hle=n(p0e,"STRONG",{});var det=s(hle);Hbo=r(det,"t5"),det.forEach(t),Ubo=r(p0e," \u2014 "),Iq=n(p0e,"A",{href:!0});var cet=s(Iq);Jbo=r(cet,"T5Model"),cet.forEach(t),Ybo=r(p0e," (T5 model)"),p0e.forEach(t),Kbo=i($),E_=n($,"LI",{});var _0e=s(E_);ple=n(_0e,"STRONG",{});var fet=s(ple);Zbo=r(fet,"tapas"),fet.forEach(t),evo=r(_0e," \u2014 "),qq=n(_0e,"A",{href:!0});var met=s(qq);ovo=r(met,"TapasModel"),met.forEach(t),rvo=r(_0e," (TAPAS model)"),_0e.forEach(t),tvo=i($),C_=n($,"LI",{});var u0e=s(C_);_le=n(u0e,"STRONG",{});var get=s(_le);avo=r(get,"transfo-xl"),get.forEach(t),nvo=r(u0e," \u2014 "),Nq=n(u0e,"A",{href:!0});var het=s(Nq);svo=r(het,"TransfoXLModel"),het.forEach(t),lvo=r(u0e," (Transformer-XL model)"),u0e.forEach(t),ivo=i($),w_=n($,"LI",{});var b0e=s(w_);ule=n(b0e,"STRONG",{});var pet=s(ule);dvo=r(pet,"unispeech"),pet.forEach(t),cvo=r(b0e," \u2014 "),jq=n(b0e,"A",{href:!0});var _et=s(jq);fvo=r(_et,"UniSpeechModel"),_et.forEach(t),mvo=r(b0e," (UniSpeech model)"),b0e.forEach(t),gvo=i($),A_=n($,"LI",{});var v0e=s(A_);ble=n(v0e,"STRONG",{});var uet=s(ble);hvo=r(uet,"unispeech-sat"),uet.forEach(t),pvo=r(v0e," \u2014 "),Dq=n(v0e,"A",{href:!0});var bet=s(Dq);_vo=r(bet,"UniSpeechSatModel"),bet.forEach(t),uvo=r(v0e," (UniSpeechSat model)"),v0e.forEach(t),bvo=i($),y_=n($,"LI",{});var F0e=s(y_);vle=n(F0e,"STRONG",{});var vet=s(vle);vvo=r(vet,"van"),vet.forEach(t),Fvo=r(F0e," \u2014 "),Gq=n(F0e,"A",{href:!0});var Fet=s(Gq);Tvo=r(Fet,"VanModel"),Fet.forEach(t),Mvo=r(F0e," (VAN model)"),F0e.forEach(t),Evo=i($),L_=n($,"LI",{});var T0e=s(L_);Fle=n(T0e,"STRONG",{});var Tet=s(Fle);Cvo=r(Tet,"vilt"),Tet.forEach(t),wvo=r(T0e," \u2014 "),Oq=n(T0e,"A",{href:!0});var Met=s(Oq);Avo=r(Met,"ViltModel"),Met.forEach(t),yvo=r(T0e," (ViLT model)"),T0e.forEach(t),Lvo=i($),x_=n($,"LI",{});var M0e=s(x_);Tle=n(M0e,"STRONG",{});var Eet=s(Tle);xvo=r(Eet,"vision-text-dual-encoder"),Eet.forEach(t),$vo=r(M0e," \u2014 "),Vq=n(M0e,"A",{href:!0});var Cet=s(Vq);kvo=r(Cet,"VisionTextDualEncoderModel"),Cet.forEach(t),Svo=r(M0e," (VisionTextDualEncoder model)"),M0e.forEach(t),Rvo=i($),$_=n($,"LI",{});var E0e=s($_);Mle=n(E0e,"STRONG",{});var wet=s(Mle);Pvo=r(wet,"visual_bert"),wet.forEach(t),Bvo=r(E0e," \u2014 "),Xq=n(E0e,"A",{href:!0});var Aet=s(Xq);Ivo=r(Aet,"VisualBertModel"),Aet.forEach(t),qvo=r(E0e," (VisualBert model)"),E0e.forEach(t),Nvo=i($),k_=n($,"LI",{});var C0e=s(k_);Ele=n(C0e,"STRONG",{});var yet=s(Ele);jvo=r(yet,"vit"),yet.forEach(t),Dvo=r(C0e," \u2014 "),zq=n(C0e,"A",{href:!0});var Let=s(zq);Gvo=r(Let,"ViTModel"),Let.forEach(t),Ovo=r(C0e," (ViT model)"),C0e.forEach(t),Vvo=i($),S_=n($,"LI",{});var w0e=s(S_);Cle=n(w0e,"STRONG",{});var xet=s(Cle);Xvo=r(xet,"vit_mae"),xet.forEach(t),zvo=r(w0e," \u2014 "),Wq=n(w0e,"A",{href:!0});var $et=s(Wq);Wvo=r($et,"ViTMAEModel"),$et.forEach(t),Qvo=r(w0e," (ViTMAE model)"),w0e.forEach(t),Hvo=i($),R_=n($,"LI",{});var A0e=s(R_);wle=n(A0e,"STRONG",{});var ket=s(wle);Uvo=r(ket,"wav2vec2"),ket.forEach(t),Jvo=r(A0e," \u2014 "),Qq=n(A0e,"A",{href:!0});var Set=s(Qq);Yvo=r(Set,"Wav2Vec2Model"),Set.forEach(t),Kvo=r(A0e," (Wav2Vec2 model)"),A0e.forEach(t),Zvo=i($),P_=n($,"LI",{});var y0e=s(P_);Ale=n(y0e,"STRONG",{});var Ret=s(Ale);eFo=r(Ret,"wav2vec2-conformer"),Ret.forEach(t),oFo=r(y0e," \u2014 "),Hq=n(y0e,"A",{href:!0});var Pet=s(Hq);rFo=r(Pet,"Wav2Vec2ConformerModel"),Pet.forEach(t),tFo=r(y0e," (Wav2Vec2-Conformer model)"),y0e.forEach(t),aFo=i($),B_=n($,"LI",{});var L0e=s(B_);yle=n(L0e,"STRONG",{});var Bet=s(yle);nFo=r(Bet,"wavlm"),Bet.forEach(t),sFo=r(L0e," \u2014 "),Uq=n(L0e,"A",{href:!0});var Iet=s(Uq);lFo=r(Iet,"WavLMModel"),Iet.forEach(t),iFo=r(L0e," (WavLM model)"),L0e.forEach(t),dFo=i($),I_=n($,"LI",{});var x0e=s(I_);Lle=n(x0e,"STRONG",{});var qet=s(Lle);cFo=r(qet,"xglm"),qet.forEach(t),fFo=r(x0e," \u2014 "),Jq=n(x0e,"A",{href:!0});var Net=s(Jq);mFo=r(Net,"XGLMModel"),Net.forEach(t),gFo=r(x0e," (XGLM model)"),x0e.forEach(t),hFo=i($),q_=n($,"LI",{});var $0e=s(q_);xle=n($0e,"STRONG",{});var jet=s(xle);pFo=r(jet,"xlm"),jet.forEach(t),_Fo=r($0e," \u2014 "),Yq=n($0e,"A",{href:!0});var Det=s(Yq);uFo=r(Det,"XLMModel"),Det.forEach(t),bFo=r($0e," (XLM model)"),$0e.forEach(t),vFo=i($),N_=n($,"LI",{});var k0e=s(N_);$le=n(k0e,"STRONG",{});var Get=s($le);FFo=r(Get,"xlm-prophetnet"),Get.forEach(t),TFo=r(k0e," \u2014 "),Kq=n(k0e,"A",{href:!0});var Oet=s(Kq);MFo=r(Oet,"XLMProphetNetModel"),Oet.forEach(t),EFo=r(k0e," (XLMProphetNet model)"),k0e.forEach(t),CFo=i($),j_=n($,"LI",{});var S0e=s(j_);kle=n(S0e,"STRONG",{});var Vet=s(kle);wFo=r(Vet,"xlm-roberta"),Vet.forEach(t),AFo=r(S0e," \u2014 "),Zq=n(S0e,"A",{href:!0});var Xet=s(Zq);yFo=r(Xet,"XLMRobertaModel"),Xet.forEach(t),LFo=r(S0e," (XLM-RoBERTa model)"),S0e.forEach(t),xFo=i($),D_=n($,"LI",{});var R0e=s(D_);Sle=n(R0e,"STRONG",{});var zet=s(Sle);$Fo=r(zet,"xlm-roberta-xl"),zet.forEach(t),kFo=r(R0e," \u2014 "),eN=n(R0e,"A",{href:!0});var Wet=s(eN);SFo=r(Wet,"XLMRobertaXLModel"),Wet.forEach(t),RFo=r(R0e," (XLM-RoBERTa-XL model)"),R0e.forEach(t),PFo=i($),G_=n($,"LI",{});var P0e=s(G_);Rle=n(P0e,"STRONG",{});var Qet=s(Rle);BFo=r(Qet,"xlnet"),Qet.forEach(t),IFo=r(P0e," \u2014 "),oN=n(P0e,"A",{href:!0});var Het=s(oN);qFo=r(Het,"XLNetModel"),Het.forEach(t),NFo=r(P0e," (XLNet model)"),P0e.forEach(t),jFo=i($),O_=n($,"LI",{});var B0e=s(O_);Ple=n(B0e,"STRONG",{});var Uet=s(Ple);DFo=r(Uet,"yolos"),Uet.forEach(t),GFo=r(B0e," \u2014 "),rN=n(B0e,"A",{href:!0});var Jet=s(rN);OFo=r(Jet,"YolosModel"),Jet.forEach(t),VFo=r(B0e," (YOLOS model)"),B0e.forEach(t),XFo=i($),V_=n($,"LI",{});var I0e=s(V_);Ble=n(I0e,"STRONG",{});var Yet=s(Ble);zFo=r(Yet,"yoso"),Yet.forEach(t),WFo=r(I0e," \u2014 "),tN=n(I0e,"A",{href:!0});var Ket=s(tN);QFo=r(Ket,"YosoModel"),Ket.forEach(t),HFo=r(I0e," (YOSO model)"),I0e.forEach(t),$.forEach(t),UFo=i(oa),X_=n(oa,"P",{});var q0e=s(X_);JFo=r(q0e,"The model is set in evaluation mode by default using "),Ile=n(q0e,"CODE",{});var Zet=s(Ile);YFo=r(Zet,"model.eval()"),Zet.forEach(t),KFo=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(q0e,"CODE",{});var eot=s(qle);ZFo=r(eot,"model.train()"),eot.forEach(t),q0e.forEach(t),e6o=i(oa),T(z_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),vqe=i(f),Li=n(f,"H2",{class:!0});var Eje=s(Li);W_=n(Eje,"A",{id:!0,class:!0,href:!0});var oot=s(W_);Nle=n(oot,"SPAN",{});var rot=s(Nle);T(W0.$$.fragment,rot),rot.forEach(t),oot.forEach(t),o6o=i(Eje),jle=n(Eje,"SPAN",{});var tot=s(jle);r6o=r(tot,"AutoModelForPreTraining"),tot.forEach(t),Eje.forEach(t),Fqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(Q0.$$.fragment,Os),t6o=i(Os),xi=n(Os,"P",{});var QK=s(xi);a6o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aN=n(QK,"A",{href:!0});var aot=s(aN);n6o=r(aot,"from_pretrained()"),aot.forEach(t),s6o=r(QK," class method or the "),nN=n(QK,"A",{href:!0});var not=s(nN);l6o=r(not,"from_config()"),not.forEach(t),i6o=r(QK,` class
method.`),QK.forEach(t),d6o=i(Os),H0=n(Os,"P",{});var Cje=s(H0);c6o=r(Cje,"This class cannot be instantiated directly using "),Dle=n(Cje,"CODE",{});var sot=s(Dle);f6o=r(sot,"__init__()"),sot.forEach(t),m6o=r(Cje," (throws an error)."),Cje.forEach(t),g6o=i(Os),at=n(Os,"DIV",{class:!0});var T3=s(at);T(U0.$$.fragment,T3),h6o=i(T3),Gle=n(T3,"P",{});var lot=s(Gle);p6o=r(lot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lot.forEach(t),_6o=i(T3),$i=n(T3,"P",{});var HK=s($i);u6o=r(HK,`Note:
Loading a model from its configuration file does `),Ole=n(HK,"STRONG",{});var iot=s(Ole);b6o=r(iot,"not"),iot.forEach(t),v6o=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(HK,"A",{href:!0});var dot=s(sN);F6o=r(dot,"from_pretrained()"),dot.forEach(t),T6o=r(HK," to load the model weights."),HK.forEach(t),M6o=i(T3),T(Q_.$$.fragment,T3),T3.forEach(t),E6o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(J0.$$.fragment,ra),C6o=i(ra),Vle=n(ra,"P",{});var cot=s(Vle);w6o=r(cot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cot.forEach(t),A6o=i(ra),xa=n(ra,"P",{});var M3=s(xa);y6o=r(M3,"The model class to instantiate is selected based on the "),Xle=n(M3,"CODE",{});var fot=s(Xle);L6o=r(fot,"model_type"),fot.forEach(t),x6o=r(M3,` property of the config object (either
passed as an argument or loaded from `),zle=n(M3,"CODE",{});var mot=s(zle);$6o=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),k6o=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(M3,"CODE",{});var got=s(Wle);S6o=r(got,"pretrained_model_name_or_path"),got.forEach(t),R6o=r(M3,":"),M3.forEach(t),P6o=i(ra),G=n(ra,"UL",{});var O=s(G);H_=n(O,"LI",{});var N0e=s(H_);Qle=n(N0e,"STRONG",{});var hot=s(Qle);B6o=r(hot,"albert"),hot.forEach(t),I6o=r(N0e," \u2014 "),lN=n(N0e,"A",{href:!0});var pot=s(lN);q6o=r(pot,"AlbertForPreTraining"),pot.forEach(t),N6o=r(N0e," (ALBERT model)"),N0e.forEach(t),j6o=i(O),U_=n(O,"LI",{});var j0e=s(U_);Hle=n(j0e,"STRONG",{});var _ot=s(Hle);D6o=r(_ot,"bart"),_ot.forEach(t),G6o=r(j0e," \u2014 "),iN=n(j0e,"A",{href:!0});var uot=s(iN);O6o=r(uot,"BartForConditionalGeneration"),uot.forEach(t),V6o=r(j0e," (BART model)"),j0e.forEach(t),X6o=i(O),J_=n(O,"LI",{});var D0e=s(J_);Ule=n(D0e,"STRONG",{});var bot=s(Ule);z6o=r(bot,"bert"),bot.forEach(t),W6o=r(D0e," \u2014 "),dN=n(D0e,"A",{href:!0});var vot=s(dN);Q6o=r(vot,"BertForPreTraining"),vot.forEach(t),H6o=r(D0e," (BERT model)"),D0e.forEach(t),U6o=i(O),Y_=n(O,"LI",{});var G0e=s(Y_);Jle=n(G0e,"STRONG",{});var Fot=s(Jle);J6o=r(Fot,"big_bird"),Fot.forEach(t),Y6o=r(G0e," \u2014 "),cN=n(G0e,"A",{href:!0});var Tot=s(cN);K6o=r(Tot,"BigBirdForPreTraining"),Tot.forEach(t),Z6o=r(G0e," (BigBird model)"),G0e.forEach(t),eTo=i(O),K_=n(O,"LI",{});var O0e=s(K_);Yle=n(O0e,"STRONG",{});var Mot=s(Yle);oTo=r(Mot,"camembert"),Mot.forEach(t),rTo=r(O0e," \u2014 "),fN=n(O0e,"A",{href:!0});var Eot=s(fN);tTo=r(Eot,"CamembertForMaskedLM"),Eot.forEach(t),aTo=r(O0e," (CamemBERT model)"),O0e.forEach(t),nTo=i(O),Z_=n(O,"LI",{});var V0e=s(Z_);Kle=n(V0e,"STRONG",{});var Cot=s(Kle);sTo=r(Cot,"ctrl"),Cot.forEach(t),lTo=r(V0e," \u2014 "),mN=n(V0e,"A",{href:!0});var wot=s(mN);iTo=r(wot,"CTRLLMHeadModel"),wot.forEach(t),dTo=r(V0e," (CTRL model)"),V0e.forEach(t),cTo=i(O),eu=n(O,"LI",{});var X0e=s(eu);Zle=n(X0e,"STRONG",{});var Aot=s(Zle);fTo=r(Aot,"data2vec-text"),Aot.forEach(t),mTo=r(X0e," \u2014 "),gN=n(X0e,"A",{href:!0});var yot=s(gN);gTo=r(yot,"Data2VecTextForMaskedLM"),yot.forEach(t),hTo=r(X0e," (Data2VecText model)"),X0e.forEach(t),pTo=i(O),ou=n(O,"LI",{});var z0e=s(ou);eie=n(z0e,"STRONG",{});var Lot=s(eie);_To=r(Lot,"deberta"),Lot.forEach(t),uTo=r(z0e," \u2014 "),hN=n(z0e,"A",{href:!0});var xot=s(hN);bTo=r(xot,"DebertaForMaskedLM"),xot.forEach(t),vTo=r(z0e," (DeBERTa model)"),z0e.forEach(t),FTo=i(O),ru=n(O,"LI",{});var W0e=s(ru);oie=n(W0e,"STRONG",{});var $ot=s(oie);TTo=r($ot,"deberta-v2"),$ot.forEach(t),MTo=r(W0e," \u2014 "),pN=n(W0e,"A",{href:!0});var kot=s(pN);ETo=r(kot,"DebertaV2ForMaskedLM"),kot.forEach(t),CTo=r(W0e," (DeBERTa-v2 model)"),W0e.forEach(t),wTo=i(O),tu=n(O,"LI",{});var Q0e=s(tu);rie=n(Q0e,"STRONG",{});var Sot=s(rie);ATo=r(Sot,"distilbert"),Sot.forEach(t),yTo=r(Q0e," \u2014 "),_N=n(Q0e,"A",{href:!0});var Rot=s(_N);LTo=r(Rot,"DistilBertForMaskedLM"),Rot.forEach(t),xTo=r(Q0e," (DistilBERT model)"),Q0e.forEach(t),$To=i(O),au=n(O,"LI",{});var H0e=s(au);tie=n(H0e,"STRONG",{});var Pot=s(tie);kTo=r(Pot,"electra"),Pot.forEach(t),STo=r(H0e," \u2014 "),uN=n(H0e,"A",{href:!0});var Bot=s(uN);RTo=r(Bot,"ElectraForPreTraining"),Bot.forEach(t),PTo=r(H0e," (ELECTRA model)"),H0e.forEach(t),BTo=i(O),nu=n(O,"LI",{});var U0e=s(nu);aie=n(U0e,"STRONG",{});var Iot=s(aie);ITo=r(Iot,"flaubert"),Iot.forEach(t),qTo=r(U0e," \u2014 "),bN=n(U0e,"A",{href:!0});var qot=s(bN);NTo=r(qot,"FlaubertWithLMHeadModel"),qot.forEach(t),jTo=r(U0e," (FlauBERT model)"),U0e.forEach(t),DTo=i(O),su=n(O,"LI",{});var J0e=s(su);nie=n(J0e,"STRONG",{});var Not=s(nie);GTo=r(Not,"flava"),Not.forEach(t),OTo=r(J0e," \u2014 "),vN=n(J0e,"A",{href:!0});var jot=s(vN);VTo=r(jot,"FlavaForPreTraining"),jot.forEach(t),XTo=r(J0e," (Flava model)"),J0e.forEach(t),zTo=i(O),lu=n(O,"LI",{});var Y0e=s(lu);sie=n(Y0e,"STRONG",{});var Dot=s(sie);WTo=r(Dot,"fnet"),Dot.forEach(t),QTo=r(Y0e," \u2014 "),FN=n(Y0e,"A",{href:!0});var Got=s(FN);HTo=r(Got,"FNetForPreTraining"),Got.forEach(t),UTo=r(Y0e," (FNet model)"),Y0e.forEach(t),JTo=i(O),iu=n(O,"LI",{});var K0e=s(iu);lie=n(K0e,"STRONG",{});var Oot=s(lie);YTo=r(Oot,"fsmt"),Oot.forEach(t),KTo=r(K0e," \u2014 "),TN=n(K0e,"A",{href:!0});var Vot=s(TN);ZTo=r(Vot,"FSMTForConditionalGeneration"),Vot.forEach(t),e7o=r(K0e," (FairSeq Machine-Translation model)"),K0e.forEach(t),o7o=i(O),du=n(O,"LI",{});var Z0e=s(du);iie=n(Z0e,"STRONG",{});var Xot=s(iie);r7o=r(Xot,"funnel"),Xot.forEach(t),t7o=r(Z0e," \u2014 "),MN=n(Z0e,"A",{href:!0});var zot=s(MN);a7o=r(zot,"FunnelForPreTraining"),zot.forEach(t),n7o=r(Z0e," (Funnel Transformer model)"),Z0e.forEach(t),s7o=i(O),cu=n(O,"LI",{});var eAe=s(cu);die=n(eAe,"STRONG",{});var Wot=s(die);l7o=r(Wot,"gpt2"),Wot.forEach(t),i7o=r(eAe," \u2014 "),EN=n(eAe,"A",{href:!0});var Qot=s(EN);d7o=r(Qot,"GPT2LMHeadModel"),Qot.forEach(t),c7o=r(eAe," (OpenAI GPT-2 model)"),eAe.forEach(t),f7o=i(O),fu=n(O,"LI",{});var oAe=s(fu);cie=n(oAe,"STRONG",{});var Hot=s(cie);m7o=r(Hot,"ibert"),Hot.forEach(t),g7o=r(oAe," \u2014 "),CN=n(oAe,"A",{href:!0});var Uot=s(CN);h7o=r(Uot,"IBertForMaskedLM"),Uot.forEach(t),p7o=r(oAe," (I-BERT model)"),oAe.forEach(t),_7o=i(O),mu=n(O,"LI",{});var rAe=s(mu);fie=n(rAe,"STRONG",{});var Jot=s(fie);u7o=r(Jot,"layoutlm"),Jot.forEach(t),b7o=r(rAe," \u2014 "),wN=n(rAe,"A",{href:!0});var Yot=s(wN);v7o=r(Yot,"LayoutLMForMaskedLM"),Yot.forEach(t),F7o=r(rAe," (LayoutLM model)"),rAe.forEach(t),T7o=i(O),gu=n(O,"LI",{});var tAe=s(gu);mie=n(tAe,"STRONG",{});var Kot=s(mie);M7o=r(Kot,"longformer"),Kot.forEach(t),E7o=r(tAe," \u2014 "),AN=n(tAe,"A",{href:!0});var Zot=s(AN);C7o=r(Zot,"LongformerForMaskedLM"),Zot.forEach(t),w7o=r(tAe," (Longformer model)"),tAe.forEach(t),A7o=i(O),hu=n(O,"LI",{});var aAe=s(hu);gie=n(aAe,"STRONG",{});var ert=s(gie);y7o=r(ert,"longt5"),ert.forEach(t),L7o=r(aAe," \u2014 "),yN=n(aAe,"A",{href:!0});var ort=s(yN);x7o=r(ort,"LongT5ForConditionalGeneration"),ort.forEach(t),$7o=r(aAe," (LongT5 model)"),aAe.forEach(t),k7o=i(O),pu=n(O,"LI",{});var nAe=s(pu);hie=n(nAe,"STRONG",{});var rrt=s(hie);S7o=r(rrt,"lxmert"),rrt.forEach(t),R7o=r(nAe," \u2014 "),LN=n(nAe,"A",{href:!0});var trt=s(LN);P7o=r(trt,"LxmertForPreTraining"),trt.forEach(t),B7o=r(nAe," (LXMERT model)"),nAe.forEach(t),I7o=i(O),_u=n(O,"LI",{});var sAe=s(_u);pie=n(sAe,"STRONG",{});var art=s(pie);q7o=r(art,"megatron-bert"),art.forEach(t),N7o=r(sAe," \u2014 "),xN=n(sAe,"A",{href:!0});var nrt=s(xN);j7o=r(nrt,"MegatronBertForPreTraining"),nrt.forEach(t),D7o=r(sAe," (MegatronBert model)"),sAe.forEach(t),G7o=i(O),uu=n(O,"LI",{});var lAe=s(uu);_ie=n(lAe,"STRONG",{});var srt=s(_ie);O7o=r(srt,"mobilebert"),srt.forEach(t),V7o=r(lAe," \u2014 "),$N=n(lAe,"A",{href:!0});var lrt=s($N);X7o=r(lrt,"MobileBertForPreTraining"),lrt.forEach(t),z7o=r(lAe," (MobileBERT model)"),lAe.forEach(t),W7o=i(O),bu=n(O,"LI",{});var iAe=s(bu);uie=n(iAe,"STRONG",{});var irt=s(uie);Q7o=r(irt,"mpnet"),irt.forEach(t),H7o=r(iAe," \u2014 "),kN=n(iAe,"A",{href:!0});var drt=s(kN);U7o=r(drt,"MPNetForMaskedLM"),drt.forEach(t),J7o=r(iAe," (MPNet model)"),iAe.forEach(t),Y7o=i(O),vu=n(O,"LI",{});var dAe=s(vu);bie=n(dAe,"STRONG",{});var crt=s(bie);K7o=r(crt,"openai-gpt"),crt.forEach(t),Z7o=r(dAe," \u2014 "),SN=n(dAe,"A",{href:!0});var frt=s(SN);e9o=r(frt,"OpenAIGPTLMHeadModel"),frt.forEach(t),o9o=r(dAe," (OpenAI GPT model)"),dAe.forEach(t),r9o=i(O),Fu=n(O,"LI",{});var cAe=s(Fu);vie=n(cAe,"STRONG",{});var mrt=s(vie);t9o=r(mrt,"retribert"),mrt.forEach(t),a9o=r(cAe," \u2014 "),RN=n(cAe,"A",{href:!0});var grt=s(RN);n9o=r(grt,"RetriBertModel"),grt.forEach(t),s9o=r(cAe," (RetriBERT model)"),cAe.forEach(t),l9o=i(O),Tu=n(O,"LI",{});var fAe=s(Tu);Fie=n(fAe,"STRONG",{});var hrt=s(Fie);i9o=r(hrt,"roberta"),hrt.forEach(t),d9o=r(fAe," \u2014 "),PN=n(fAe,"A",{href:!0});var prt=s(PN);c9o=r(prt,"RobertaForMaskedLM"),prt.forEach(t),f9o=r(fAe," (RoBERTa model)"),fAe.forEach(t),m9o=i(O),Mu=n(O,"LI",{});var mAe=s(Mu);Tie=n(mAe,"STRONG",{});var _rt=s(Tie);g9o=r(_rt,"squeezebert"),_rt.forEach(t),h9o=r(mAe," \u2014 "),BN=n(mAe,"A",{href:!0});var urt=s(BN);p9o=r(urt,"SqueezeBertForMaskedLM"),urt.forEach(t),_9o=r(mAe," (SqueezeBERT model)"),mAe.forEach(t),u9o=i(O),Eu=n(O,"LI",{});var gAe=s(Eu);Mie=n(gAe,"STRONG",{});var brt=s(Mie);b9o=r(brt,"t5"),brt.forEach(t),v9o=r(gAe," \u2014 "),IN=n(gAe,"A",{href:!0});var vrt=s(IN);F9o=r(vrt,"T5ForConditionalGeneration"),vrt.forEach(t),T9o=r(gAe," (T5 model)"),gAe.forEach(t),M9o=i(O),Cu=n(O,"LI",{});var hAe=s(Cu);Eie=n(hAe,"STRONG",{});var Frt=s(Eie);E9o=r(Frt,"tapas"),Frt.forEach(t),C9o=r(hAe," \u2014 "),qN=n(hAe,"A",{href:!0});var Trt=s(qN);w9o=r(Trt,"TapasForMaskedLM"),Trt.forEach(t),A9o=r(hAe," (TAPAS model)"),hAe.forEach(t),y9o=i(O),wu=n(O,"LI",{});var pAe=s(wu);Cie=n(pAe,"STRONG",{});var Mrt=s(Cie);L9o=r(Mrt,"transfo-xl"),Mrt.forEach(t),x9o=r(pAe," \u2014 "),NN=n(pAe,"A",{href:!0});var Ert=s(NN);$9o=r(Ert,"TransfoXLLMHeadModel"),Ert.forEach(t),k9o=r(pAe," (Transformer-XL model)"),pAe.forEach(t),S9o=i(O),Au=n(O,"LI",{});var _Ae=s(Au);wie=n(_Ae,"STRONG",{});var Crt=s(wie);R9o=r(Crt,"unispeech"),Crt.forEach(t),P9o=r(_Ae," \u2014 "),jN=n(_Ae,"A",{href:!0});var wrt=s(jN);B9o=r(wrt,"UniSpeechForPreTraining"),wrt.forEach(t),I9o=r(_Ae," (UniSpeech model)"),_Ae.forEach(t),q9o=i(O),yu=n(O,"LI",{});var uAe=s(yu);Aie=n(uAe,"STRONG",{});var Art=s(Aie);N9o=r(Art,"unispeech-sat"),Art.forEach(t),j9o=r(uAe," \u2014 "),DN=n(uAe,"A",{href:!0});var yrt=s(DN);D9o=r(yrt,"UniSpeechSatForPreTraining"),yrt.forEach(t),G9o=r(uAe," (UniSpeechSat model)"),uAe.forEach(t),O9o=i(O),Lu=n(O,"LI",{});var bAe=s(Lu);yie=n(bAe,"STRONG",{});var Lrt=s(yie);V9o=r(Lrt,"visual_bert"),Lrt.forEach(t),X9o=r(bAe," \u2014 "),GN=n(bAe,"A",{href:!0});var xrt=s(GN);z9o=r(xrt,"VisualBertForPreTraining"),xrt.forEach(t),W9o=r(bAe," (VisualBert model)"),bAe.forEach(t),Q9o=i(O),xu=n(O,"LI",{});var vAe=s(xu);Lie=n(vAe,"STRONG",{});var $rt=s(Lie);H9o=r($rt,"vit_mae"),$rt.forEach(t),U9o=r(vAe," \u2014 "),ON=n(vAe,"A",{href:!0});var krt=s(ON);J9o=r(krt,"ViTMAEForPreTraining"),krt.forEach(t),Y9o=r(vAe," (ViTMAE model)"),vAe.forEach(t),K9o=i(O),$u=n(O,"LI",{});var FAe=s($u);xie=n(FAe,"STRONG",{});var Srt=s(xie);Z9o=r(Srt,"wav2vec2"),Srt.forEach(t),eMo=r(FAe," \u2014 "),VN=n(FAe,"A",{href:!0});var Rrt=s(VN);oMo=r(Rrt,"Wav2Vec2ForPreTraining"),Rrt.forEach(t),rMo=r(FAe," (Wav2Vec2 model)"),FAe.forEach(t),tMo=i(O),ku=n(O,"LI",{});var TAe=s(ku);$ie=n(TAe,"STRONG",{});var Prt=s($ie);aMo=r(Prt,"wav2vec2-conformer"),Prt.forEach(t),nMo=r(TAe," \u2014 "),XN=n(TAe,"A",{href:!0});var Brt=s(XN);sMo=r(Brt,"Wav2Vec2ConformerForPreTraining"),Brt.forEach(t),lMo=r(TAe," (Wav2Vec2-Conformer model)"),TAe.forEach(t),iMo=i(O),Su=n(O,"LI",{});var MAe=s(Su);kie=n(MAe,"STRONG",{});var Irt=s(kie);dMo=r(Irt,"xlm"),Irt.forEach(t),cMo=r(MAe," \u2014 "),zN=n(MAe,"A",{href:!0});var qrt=s(zN);fMo=r(qrt,"XLMWithLMHeadModel"),qrt.forEach(t),mMo=r(MAe," (XLM model)"),MAe.forEach(t),gMo=i(O),Ru=n(O,"LI",{});var EAe=s(Ru);Sie=n(EAe,"STRONG",{});var Nrt=s(Sie);hMo=r(Nrt,"xlm-roberta"),Nrt.forEach(t),pMo=r(EAe," \u2014 "),WN=n(EAe,"A",{href:!0});var jrt=s(WN);_Mo=r(jrt,"XLMRobertaForMaskedLM"),jrt.forEach(t),uMo=r(EAe," (XLM-RoBERTa model)"),EAe.forEach(t),bMo=i(O),Pu=n(O,"LI",{});var CAe=s(Pu);Rie=n(CAe,"STRONG",{});var Drt=s(Rie);vMo=r(Drt,"xlm-roberta-xl"),Drt.forEach(t),FMo=r(CAe," \u2014 "),QN=n(CAe,"A",{href:!0});var Grt=s(QN);TMo=r(Grt,"XLMRobertaXLForMaskedLM"),Grt.forEach(t),MMo=r(CAe," (XLM-RoBERTa-XL model)"),CAe.forEach(t),EMo=i(O),Bu=n(O,"LI",{});var wAe=s(Bu);Pie=n(wAe,"STRONG",{});var Ort=s(Pie);CMo=r(Ort,"xlnet"),Ort.forEach(t),wMo=r(wAe," \u2014 "),HN=n(wAe,"A",{href:!0});var Vrt=s(HN);AMo=r(Vrt,"XLNetLMHeadModel"),Vrt.forEach(t),yMo=r(wAe," (XLNet model)"),wAe.forEach(t),O.forEach(t),LMo=i(ra),Iu=n(ra,"P",{});var AAe=s(Iu);xMo=r(AAe,"The model is set in evaluation mode by default using "),Bie=n(AAe,"CODE",{});var Xrt=s(Bie);$Mo=r(Xrt,"model.eval()"),Xrt.forEach(t),kMo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=n(AAe,"CODE",{});var zrt=s(Iie);SMo=r(zrt,"model.train()"),zrt.forEach(t),AAe.forEach(t),RMo=i(ra),T(qu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Tqe=i(f),ki=n(f,"H2",{class:!0});var wje=s(ki);Nu=n(wje,"A",{id:!0,class:!0,href:!0});var Wrt=s(Nu);qie=n(Wrt,"SPAN",{});var Qrt=s(qie);T(Y0.$$.fragment,Qrt),Qrt.forEach(t),Wrt.forEach(t),PMo=i(wje),Nie=n(wje,"SPAN",{});var Hrt=s(Nie);BMo=r(Hrt,"AutoModelForCausalLM"),Hrt.forEach(t),wje.forEach(t),Mqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(K0.$$.fragment,Vs),IMo=i(Vs),Si=n(Vs,"P",{});var UK=s(Si);qMo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UN=n(UK,"A",{href:!0});var Urt=s(UN);NMo=r(Urt,"from_pretrained()"),Urt.forEach(t),jMo=r(UK," class method or the "),JN=n(UK,"A",{href:!0});var Jrt=s(JN);DMo=r(Jrt,"from_config()"),Jrt.forEach(t),GMo=r(UK,` class
method.`),UK.forEach(t),OMo=i(Vs),Z0=n(Vs,"P",{});var Aje=s(Z0);VMo=r(Aje,"This class cannot be instantiated directly using "),jie=n(Aje,"CODE",{});var Yrt=s(jie);XMo=r(Yrt,"__init__()"),Yrt.forEach(t),zMo=r(Aje," (throws an error)."),Aje.forEach(t),WMo=i(Vs),nt=n(Vs,"DIV",{class:!0});var E3=s(nt);T(eA.$$.fragment,E3),QMo=i(E3),Die=n(E3,"P",{});var Krt=s(Die);HMo=r(Krt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Krt.forEach(t),UMo=i(E3),Ri=n(E3,"P",{});var JK=s(Ri);JMo=r(JK,`Note:
Loading a model from its configuration file does `),Gie=n(JK,"STRONG",{});var Zrt=s(Gie);YMo=r(Zrt,"not"),Zrt.forEach(t),KMo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=n(JK,"A",{href:!0});var ett=s(YN);ZMo=r(ett,"from_pretrained()"),ett.forEach(t),e4o=r(JK," to load the model weights."),JK.forEach(t),o4o=i(E3),T(ju.$$.fragment,E3),E3.forEach(t),r4o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(oA.$$.fragment,ta),t4o=i(ta),Oie=n(ta,"P",{});var ott=s(Oie);a4o=r(ott,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ott.forEach(t),n4o=i(ta),$a=n(ta,"P",{});var C3=s($a);s4o=r(C3,"The model class to instantiate is selected based on the "),Vie=n(C3,"CODE",{});var rtt=s(Vie);l4o=r(rtt,"model_type"),rtt.forEach(t),i4o=r(C3,` property of the config object (either
passed as an argument or loaded from `),Xie=n(C3,"CODE",{});var ttt=s(Xie);d4o=r(ttt,"pretrained_model_name_or_path"),ttt.forEach(t),c4o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=n(C3,"CODE",{});var att=s(zie);f4o=r(att,"pretrained_model_name_or_path"),att.forEach(t),m4o=r(C3,":"),C3.forEach(t),g4o=i(ta),z=n(ta,"UL",{});var Q=s(z);Du=n(Q,"LI",{});var yAe=s(Du);Wie=n(yAe,"STRONG",{});var ntt=s(Wie);h4o=r(ntt,"bart"),ntt.forEach(t),p4o=r(yAe," \u2014 "),KN=n(yAe,"A",{href:!0});var stt=s(KN);_4o=r(stt,"BartForCausalLM"),stt.forEach(t),u4o=r(yAe," (BART model)"),yAe.forEach(t),b4o=i(Q),Gu=n(Q,"LI",{});var LAe=s(Gu);Qie=n(LAe,"STRONG",{});var ltt=s(Qie);v4o=r(ltt,"bert"),ltt.forEach(t),F4o=r(LAe," \u2014 "),ZN=n(LAe,"A",{href:!0});var itt=s(ZN);T4o=r(itt,"BertLMHeadModel"),itt.forEach(t),M4o=r(LAe," (BERT model)"),LAe.forEach(t),E4o=i(Q),Ou=n(Q,"LI",{});var xAe=s(Ou);Hie=n(xAe,"STRONG",{});var dtt=s(Hie);C4o=r(dtt,"bert-generation"),dtt.forEach(t),w4o=r(xAe," \u2014 "),ej=n(xAe,"A",{href:!0});var ctt=s(ej);A4o=r(ctt,"BertGenerationDecoder"),ctt.forEach(t),y4o=r(xAe," (Bert Generation model)"),xAe.forEach(t),L4o=i(Q),Vu=n(Q,"LI",{});var $Ae=s(Vu);Uie=n($Ae,"STRONG",{});var ftt=s(Uie);x4o=r(ftt,"big_bird"),ftt.forEach(t),$4o=r($Ae," \u2014 "),oj=n($Ae,"A",{href:!0});var mtt=s(oj);k4o=r(mtt,"BigBirdForCausalLM"),mtt.forEach(t),S4o=r($Ae," (BigBird model)"),$Ae.forEach(t),R4o=i(Q),Xu=n(Q,"LI",{});var kAe=s(Xu);Jie=n(kAe,"STRONG",{});var gtt=s(Jie);P4o=r(gtt,"bigbird_pegasus"),gtt.forEach(t),B4o=r(kAe," \u2014 "),rj=n(kAe,"A",{href:!0});var htt=s(rj);I4o=r(htt,"BigBirdPegasusForCausalLM"),htt.forEach(t),q4o=r(kAe," (BigBirdPegasus model)"),kAe.forEach(t),N4o=i(Q),zu=n(Q,"LI",{});var SAe=s(zu);Yie=n(SAe,"STRONG",{});var ptt=s(Yie);j4o=r(ptt,"blenderbot"),ptt.forEach(t),D4o=r(SAe," \u2014 "),tj=n(SAe,"A",{href:!0});var _tt=s(tj);G4o=r(_tt,"BlenderbotForCausalLM"),_tt.forEach(t),O4o=r(SAe," (Blenderbot model)"),SAe.forEach(t),V4o=i(Q),Wu=n(Q,"LI",{});var RAe=s(Wu);Kie=n(RAe,"STRONG",{});var utt=s(Kie);X4o=r(utt,"blenderbot-small"),utt.forEach(t),z4o=r(RAe," \u2014 "),aj=n(RAe,"A",{href:!0});var btt=s(aj);W4o=r(btt,"BlenderbotSmallForCausalLM"),btt.forEach(t),Q4o=r(RAe," (BlenderbotSmall model)"),RAe.forEach(t),H4o=i(Q),Qu=n(Q,"LI",{});var PAe=s(Qu);Zie=n(PAe,"STRONG",{});var vtt=s(Zie);U4o=r(vtt,"camembert"),vtt.forEach(t),J4o=r(PAe," \u2014 "),nj=n(PAe,"A",{href:!0});var Ftt=s(nj);Y4o=r(Ftt,"CamembertForCausalLM"),Ftt.forEach(t),K4o=r(PAe," (CamemBERT model)"),PAe.forEach(t),Z4o=i(Q),Hu=n(Q,"LI",{});var BAe=s(Hu);ede=n(BAe,"STRONG",{});var Ttt=s(ede);eEo=r(Ttt,"ctrl"),Ttt.forEach(t),oEo=r(BAe," \u2014 "),sj=n(BAe,"A",{href:!0});var Mtt=s(sj);rEo=r(Mtt,"CTRLLMHeadModel"),Mtt.forEach(t),tEo=r(BAe," (CTRL model)"),BAe.forEach(t),aEo=i(Q),Uu=n(Q,"LI",{});var IAe=s(Uu);ode=n(IAe,"STRONG",{});var Ett=s(ode);nEo=r(Ett,"data2vec-text"),Ett.forEach(t),sEo=r(IAe," \u2014 "),lj=n(IAe,"A",{href:!0});var Ctt=s(lj);lEo=r(Ctt,"Data2VecTextForCausalLM"),Ctt.forEach(t),iEo=r(IAe," (Data2VecText model)"),IAe.forEach(t),dEo=i(Q),Ju=n(Q,"LI",{});var qAe=s(Ju);rde=n(qAe,"STRONG",{});var wtt=s(rde);cEo=r(wtt,"electra"),wtt.forEach(t),fEo=r(qAe," \u2014 "),ij=n(qAe,"A",{href:!0});var Att=s(ij);mEo=r(Att,"ElectraForCausalLM"),Att.forEach(t),gEo=r(qAe," (ELECTRA model)"),qAe.forEach(t),hEo=i(Q),Yu=n(Q,"LI",{});var NAe=s(Yu);tde=n(NAe,"STRONG",{});var ytt=s(tde);pEo=r(ytt,"gpt2"),ytt.forEach(t),_Eo=r(NAe," \u2014 "),dj=n(NAe,"A",{href:!0});var Ltt=s(dj);uEo=r(Ltt,"GPT2LMHeadModel"),Ltt.forEach(t),bEo=r(NAe," (OpenAI GPT-2 model)"),NAe.forEach(t),vEo=i(Q),Ku=n(Q,"LI",{});var jAe=s(Ku);ade=n(jAe,"STRONG",{});var xtt=s(ade);FEo=r(xtt,"gpt_neo"),xtt.forEach(t),TEo=r(jAe," \u2014 "),cj=n(jAe,"A",{href:!0});var $tt=s(cj);MEo=r($tt,"GPTNeoForCausalLM"),$tt.forEach(t),EEo=r(jAe," (GPT Neo model)"),jAe.forEach(t),CEo=i(Q),Zu=n(Q,"LI",{});var DAe=s(Zu);nde=n(DAe,"STRONG",{});var ktt=s(nde);wEo=r(ktt,"gptj"),ktt.forEach(t),AEo=r(DAe," \u2014 "),fj=n(DAe,"A",{href:!0});var Stt=s(fj);yEo=r(Stt,"GPTJForCausalLM"),Stt.forEach(t),LEo=r(DAe," (GPT-J model)"),DAe.forEach(t),xEo=i(Q),e2=n(Q,"LI",{});var GAe=s(e2);sde=n(GAe,"STRONG",{});var Rtt=s(sde);$Eo=r(Rtt,"marian"),Rtt.forEach(t),kEo=r(GAe," \u2014 "),mj=n(GAe,"A",{href:!0});var Ptt=s(mj);SEo=r(Ptt,"MarianForCausalLM"),Ptt.forEach(t),REo=r(GAe," (Marian model)"),GAe.forEach(t),PEo=i(Q),o2=n(Q,"LI",{});var OAe=s(o2);lde=n(OAe,"STRONG",{});var Btt=s(lde);BEo=r(Btt,"mbart"),Btt.forEach(t),IEo=r(OAe," \u2014 "),gj=n(OAe,"A",{href:!0});var Itt=s(gj);qEo=r(Itt,"MBartForCausalLM"),Itt.forEach(t),NEo=r(OAe," (mBART model)"),OAe.forEach(t),jEo=i(Q),r2=n(Q,"LI",{});var VAe=s(r2);ide=n(VAe,"STRONG",{});var qtt=s(ide);DEo=r(qtt,"megatron-bert"),qtt.forEach(t),GEo=r(VAe," \u2014 "),hj=n(VAe,"A",{href:!0});var Ntt=s(hj);OEo=r(Ntt,"MegatronBertForCausalLM"),Ntt.forEach(t),VEo=r(VAe," (MegatronBert model)"),VAe.forEach(t),XEo=i(Q),t2=n(Q,"LI",{});var XAe=s(t2);dde=n(XAe,"STRONG",{});var jtt=s(dde);zEo=r(jtt,"openai-gpt"),jtt.forEach(t),WEo=r(XAe," \u2014 "),pj=n(XAe,"A",{href:!0});var Dtt=s(pj);QEo=r(Dtt,"OpenAIGPTLMHeadModel"),Dtt.forEach(t),HEo=r(XAe," (OpenAI GPT model)"),XAe.forEach(t),UEo=i(Q),a2=n(Q,"LI",{});var zAe=s(a2);cde=n(zAe,"STRONG",{});var Gtt=s(cde);JEo=r(Gtt,"opt"),Gtt.forEach(t),YEo=r(zAe," \u2014 "),_j=n(zAe,"A",{href:!0});var Ott=s(_j);KEo=r(Ott,"OPTForCausalLM"),Ott.forEach(t),ZEo=r(zAe," (OPT model)"),zAe.forEach(t),e5o=i(Q),n2=n(Q,"LI",{});var WAe=s(n2);fde=n(WAe,"STRONG",{});var Vtt=s(fde);o5o=r(Vtt,"pegasus"),Vtt.forEach(t),r5o=r(WAe," \u2014 "),uj=n(WAe,"A",{href:!0});var Xtt=s(uj);t5o=r(Xtt,"PegasusForCausalLM"),Xtt.forEach(t),a5o=r(WAe," (Pegasus model)"),WAe.forEach(t),n5o=i(Q),s2=n(Q,"LI",{});var QAe=s(s2);mde=n(QAe,"STRONG",{});var ztt=s(mde);s5o=r(ztt,"plbart"),ztt.forEach(t),l5o=r(QAe," \u2014 "),bj=n(QAe,"A",{href:!0});var Wtt=s(bj);i5o=r(Wtt,"PLBartForCausalLM"),Wtt.forEach(t),d5o=r(QAe," (PLBart model)"),QAe.forEach(t),c5o=i(Q),l2=n(Q,"LI",{});var HAe=s(l2);gde=n(HAe,"STRONG",{});var Qtt=s(gde);f5o=r(Qtt,"prophetnet"),Qtt.forEach(t),m5o=r(HAe," \u2014 "),vj=n(HAe,"A",{href:!0});var Htt=s(vj);g5o=r(Htt,"ProphetNetForCausalLM"),Htt.forEach(t),h5o=r(HAe," (ProphetNet model)"),HAe.forEach(t),p5o=i(Q),i2=n(Q,"LI",{});var UAe=s(i2);hde=n(UAe,"STRONG",{});var Utt=s(hde);_5o=r(Utt,"qdqbert"),Utt.forEach(t),u5o=r(UAe," \u2014 "),Fj=n(UAe,"A",{href:!0});var Jtt=s(Fj);b5o=r(Jtt,"QDQBertLMHeadModel"),Jtt.forEach(t),v5o=r(UAe," (QDQBert model)"),UAe.forEach(t),F5o=i(Q),d2=n(Q,"LI",{});var JAe=s(d2);pde=n(JAe,"STRONG",{});var Ytt=s(pde);T5o=r(Ytt,"reformer"),Ytt.forEach(t),M5o=r(JAe," \u2014 "),Tj=n(JAe,"A",{href:!0});var Ktt=s(Tj);E5o=r(Ktt,"ReformerModelWithLMHead"),Ktt.forEach(t),C5o=r(JAe," (Reformer model)"),JAe.forEach(t),w5o=i(Q),c2=n(Q,"LI",{});var YAe=s(c2);_de=n(YAe,"STRONG",{});var Ztt=s(_de);A5o=r(Ztt,"rembert"),Ztt.forEach(t),y5o=r(YAe," \u2014 "),Mj=n(YAe,"A",{href:!0});var eat=s(Mj);L5o=r(eat,"RemBertForCausalLM"),eat.forEach(t),x5o=r(YAe," (RemBERT model)"),YAe.forEach(t),$5o=i(Q),f2=n(Q,"LI",{});var KAe=s(f2);ude=n(KAe,"STRONG",{});var oat=s(ude);k5o=r(oat,"roberta"),oat.forEach(t),S5o=r(KAe," \u2014 "),Ej=n(KAe,"A",{href:!0});var rat=s(Ej);R5o=r(rat,"RobertaForCausalLM"),rat.forEach(t),P5o=r(KAe," (RoBERTa model)"),KAe.forEach(t),B5o=i(Q),m2=n(Q,"LI",{});var ZAe=s(m2);bde=n(ZAe,"STRONG",{});var tat=s(bde);I5o=r(tat,"roformer"),tat.forEach(t),q5o=r(ZAe," \u2014 "),Cj=n(ZAe,"A",{href:!0});var aat=s(Cj);N5o=r(aat,"RoFormerForCausalLM"),aat.forEach(t),j5o=r(ZAe," (RoFormer model)"),ZAe.forEach(t),D5o=i(Q),g2=n(Q,"LI",{});var eye=s(g2);vde=n(eye,"STRONG",{});var nat=s(vde);G5o=r(nat,"speech_to_text_2"),nat.forEach(t),O5o=r(eye," \u2014 "),wj=n(eye,"A",{href:!0});var sat=s(wj);V5o=r(sat,"Speech2Text2ForCausalLM"),sat.forEach(t),X5o=r(eye," (Speech2Text2 model)"),eye.forEach(t),z5o=i(Q),h2=n(Q,"LI",{});var oye=s(h2);Fde=n(oye,"STRONG",{});var lat=s(Fde);W5o=r(lat,"transfo-xl"),lat.forEach(t),Q5o=r(oye," \u2014 "),Aj=n(oye,"A",{href:!0});var iat=s(Aj);H5o=r(iat,"TransfoXLLMHeadModel"),iat.forEach(t),U5o=r(oye," (Transformer-XL model)"),oye.forEach(t),J5o=i(Q),p2=n(Q,"LI",{});var rye=s(p2);Tde=n(rye,"STRONG",{});var dat=s(Tde);Y5o=r(dat,"trocr"),dat.forEach(t),K5o=r(rye," \u2014 "),yj=n(rye,"A",{href:!0});var cat=s(yj);Z5o=r(cat,"TrOCRForCausalLM"),cat.forEach(t),eCo=r(rye," (TrOCR model)"),rye.forEach(t),oCo=i(Q),_2=n(Q,"LI",{});var tye=s(_2);Mde=n(tye,"STRONG",{});var fat=s(Mde);rCo=r(fat,"xglm"),fat.forEach(t),tCo=r(tye," \u2014 "),Lj=n(tye,"A",{href:!0});var mat=s(Lj);aCo=r(mat,"XGLMForCausalLM"),mat.forEach(t),nCo=r(tye," (XGLM model)"),tye.forEach(t),sCo=i(Q),u2=n(Q,"LI",{});var aye=s(u2);Ede=n(aye,"STRONG",{});var gat=s(Ede);lCo=r(gat,"xlm"),gat.forEach(t),iCo=r(aye," \u2014 "),xj=n(aye,"A",{href:!0});var hat=s(xj);dCo=r(hat,"XLMWithLMHeadModel"),hat.forEach(t),cCo=r(aye," (XLM model)"),aye.forEach(t),fCo=i(Q),b2=n(Q,"LI",{});var nye=s(b2);Cde=n(nye,"STRONG",{});var pat=s(Cde);mCo=r(pat,"xlm-prophetnet"),pat.forEach(t),gCo=r(nye," \u2014 "),$j=n(nye,"A",{href:!0});var _at=s($j);hCo=r(_at,"XLMProphetNetForCausalLM"),_at.forEach(t),pCo=r(nye," (XLMProphetNet model)"),nye.forEach(t),_Co=i(Q),v2=n(Q,"LI",{});var sye=s(v2);wde=n(sye,"STRONG",{});var uat=s(wde);uCo=r(uat,"xlm-roberta"),uat.forEach(t),bCo=r(sye," \u2014 "),kj=n(sye,"A",{href:!0});var bat=s(kj);vCo=r(bat,"XLMRobertaForCausalLM"),bat.forEach(t),FCo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),TCo=i(Q),F2=n(Q,"LI",{});var lye=s(F2);Ade=n(lye,"STRONG",{});var vat=s(Ade);MCo=r(vat,"xlm-roberta-xl"),vat.forEach(t),ECo=r(lye," \u2014 "),Sj=n(lye,"A",{href:!0});var Fat=s(Sj);CCo=r(Fat,"XLMRobertaXLForCausalLM"),Fat.forEach(t),wCo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),ACo=i(Q),T2=n(Q,"LI",{});var iye=s(T2);yde=n(iye,"STRONG",{});var Tat=s(yde);yCo=r(Tat,"xlnet"),Tat.forEach(t),LCo=r(iye," \u2014 "),Rj=n(iye,"A",{href:!0});var Mat=s(Rj);xCo=r(Mat,"XLNetLMHeadModel"),Mat.forEach(t),$Co=r(iye," (XLNet model)"),iye.forEach(t),Q.forEach(t),kCo=i(ta),M2=n(ta,"P",{});var dye=s(M2);SCo=r(dye,"The model is set in evaluation mode by default using "),Lde=n(dye,"CODE",{});var Eat=s(Lde);RCo=r(Eat,"model.eval()"),Eat.forEach(t),PCo=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=n(dye,"CODE",{});var Cat=s(xde);BCo=r(Cat,"model.train()"),Cat.forEach(t),dye.forEach(t),ICo=i(ta),T(E2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Eqe=i(f),Pi=n(f,"H2",{class:!0});var yje=s(Pi);C2=n(yje,"A",{id:!0,class:!0,href:!0});var wat=s(C2);$de=n(wat,"SPAN",{});var Aat=s($de);T(rA.$$.fragment,Aat),Aat.forEach(t),wat.forEach(t),qCo=i(yje),kde=n(yje,"SPAN",{});var yat=s(kde);NCo=r(yat,"AutoModelForMaskedLM"),yat.forEach(t),yje.forEach(t),Cqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(tA.$$.fragment,Xs),jCo=i(Xs),Bi=n(Xs,"P",{});var YK=s(Bi);DCo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Pj=n(YK,"A",{href:!0});var Lat=s(Pj);GCo=r(Lat,"from_pretrained()"),Lat.forEach(t),OCo=r(YK," class method or the "),Bj=n(YK,"A",{href:!0});var xat=s(Bj);VCo=r(xat,"from_config()"),xat.forEach(t),XCo=r(YK,` class
method.`),YK.forEach(t),zCo=i(Xs),aA=n(Xs,"P",{});var Lje=s(aA);WCo=r(Lje,"This class cannot be instantiated directly using "),Sde=n(Lje,"CODE",{});var $at=s(Sde);QCo=r($at,"__init__()"),$at.forEach(t),HCo=r(Lje," (throws an error)."),Lje.forEach(t),UCo=i(Xs),st=n(Xs,"DIV",{class:!0});var w3=s(st);T(nA.$$.fragment,w3),JCo=i(w3),Rde=n(w3,"P",{});var kat=s(Rde);YCo=r(kat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kat.forEach(t),KCo=i(w3),Ii=n(w3,"P",{});var KK=s(Ii);ZCo=r(KK,`Note:
Loading a model from its configuration file does `),Pde=n(KK,"STRONG",{});var Sat=s(Pde);e3o=r(Sat,"not"),Sat.forEach(t),o3o=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(KK,"A",{href:!0});var Rat=s(Ij);r3o=r(Rat,"from_pretrained()"),Rat.forEach(t),t3o=r(KK," to load the model weights."),KK.forEach(t),a3o=i(w3),T(w2.$$.fragment,w3),w3.forEach(t),n3o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(sA.$$.fragment,aa),s3o=i(aa),Bde=n(aa,"P",{});var Pat=s(Bde);l3o=r(Pat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pat.forEach(t),i3o=i(aa),ka=n(aa,"P",{});var A3=s(ka);d3o=r(A3,"The model class to instantiate is selected based on the "),Ide=n(A3,"CODE",{});var Bat=s(Ide);c3o=r(Bat,"model_type"),Bat.forEach(t),f3o=r(A3,` property of the config object (either
passed as an argument or loaded from `),qde=n(A3,"CODE",{});var Iat=s(qde);m3o=r(Iat,"pretrained_model_name_or_path"),Iat.forEach(t),g3o=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=n(A3,"CODE",{});var qat=s(Nde);h3o=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),p3o=r(A3,":"),A3.forEach(t),_3o=i(aa),W=n(aa,"UL",{});var H=s(W);A2=n(H,"LI",{});var cye=s(A2);jde=n(cye,"STRONG",{});var Nat=s(jde);u3o=r(Nat,"albert"),Nat.forEach(t),b3o=r(cye," \u2014 "),qj=n(cye,"A",{href:!0});var jat=s(qj);v3o=r(jat,"AlbertForMaskedLM"),jat.forEach(t),F3o=r(cye," (ALBERT model)"),cye.forEach(t),T3o=i(H),y2=n(H,"LI",{});var fye=s(y2);Dde=n(fye,"STRONG",{});var Dat=s(Dde);M3o=r(Dat,"bart"),Dat.forEach(t),E3o=r(fye," \u2014 "),Nj=n(fye,"A",{href:!0});var Gat=s(Nj);C3o=r(Gat,"BartForConditionalGeneration"),Gat.forEach(t),w3o=r(fye," (BART model)"),fye.forEach(t),A3o=i(H),L2=n(H,"LI",{});var mye=s(L2);Gde=n(mye,"STRONG",{});var Oat=s(Gde);y3o=r(Oat,"bert"),Oat.forEach(t),L3o=r(mye," \u2014 "),jj=n(mye,"A",{href:!0});var Vat=s(jj);x3o=r(Vat,"BertForMaskedLM"),Vat.forEach(t),$3o=r(mye," (BERT model)"),mye.forEach(t),k3o=i(H),x2=n(H,"LI",{});var gye=s(x2);Ode=n(gye,"STRONG",{});var Xat=s(Ode);S3o=r(Xat,"big_bird"),Xat.forEach(t),R3o=r(gye," \u2014 "),Dj=n(gye,"A",{href:!0});var zat=s(Dj);P3o=r(zat,"BigBirdForMaskedLM"),zat.forEach(t),B3o=r(gye," (BigBird model)"),gye.forEach(t),I3o=i(H),$2=n(H,"LI",{});var hye=s($2);Vde=n(hye,"STRONG",{});var Wat=s(Vde);q3o=r(Wat,"camembert"),Wat.forEach(t),N3o=r(hye," \u2014 "),Gj=n(hye,"A",{href:!0});var Qat=s(Gj);j3o=r(Qat,"CamembertForMaskedLM"),Qat.forEach(t),D3o=r(hye," (CamemBERT model)"),hye.forEach(t),G3o=i(H),k2=n(H,"LI",{});var pye=s(k2);Xde=n(pye,"STRONG",{});var Hat=s(Xde);O3o=r(Hat,"convbert"),Hat.forEach(t),V3o=r(pye," \u2014 "),Oj=n(pye,"A",{href:!0});var Uat=s(Oj);X3o=r(Uat,"ConvBertForMaskedLM"),Uat.forEach(t),z3o=r(pye," (ConvBERT model)"),pye.forEach(t),W3o=i(H),S2=n(H,"LI",{});var _ye=s(S2);zde=n(_ye,"STRONG",{});var Jat=s(zde);Q3o=r(Jat,"data2vec-text"),Jat.forEach(t),H3o=r(_ye," \u2014 "),Vj=n(_ye,"A",{href:!0});var Yat=s(Vj);U3o=r(Yat,"Data2VecTextForMaskedLM"),Yat.forEach(t),J3o=r(_ye," (Data2VecText model)"),_ye.forEach(t),Y3o=i(H),R2=n(H,"LI",{});var uye=s(R2);Wde=n(uye,"STRONG",{});var Kat=s(Wde);K3o=r(Kat,"deberta"),Kat.forEach(t),Z3o=r(uye," \u2014 "),Xj=n(uye,"A",{href:!0});var Zat=s(Xj);ewo=r(Zat,"DebertaForMaskedLM"),Zat.forEach(t),owo=r(uye," (DeBERTa model)"),uye.forEach(t),rwo=i(H),P2=n(H,"LI",{});var bye=s(P2);Qde=n(bye,"STRONG",{});var ent=s(Qde);two=r(ent,"deberta-v2"),ent.forEach(t),awo=r(bye," \u2014 "),zj=n(bye,"A",{href:!0});var ont=s(zj);nwo=r(ont,"DebertaV2ForMaskedLM"),ont.forEach(t),swo=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),lwo=i(H),B2=n(H,"LI",{});var vye=s(B2);Hde=n(vye,"STRONG",{});var rnt=s(Hde);iwo=r(rnt,"distilbert"),rnt.forEach(t),dwo=r(vye," \u2014 "),Wj=n(vye,"A",{href:!0});var tnt=s(Wj);cwo=r(tnt,"DistilBertForMaskedLM"),tnt.forEach(t),fwo=r(vye," (DistilBERT model)"),vye.forEach(t),mwo=i(H),I2=n(H,"LI",{});var Fye=s(I2);Ude=n(Fye,"STRONG",{});var ant=s(Ude);gwo=r(ant,"electra"),ant.forEach(t),hwo=r(Fye," \u2014 "),Qj=n(Fye,"A",{href:!0});var nnt=s(Qj);pwo=r(nnt,"ElectraForMaskedLM"),nnt.forEach(t),_wo=r(Fye," (ELECTRA model)"),Fye.forEach(t),uwo=i(H),q2=n(H,"LI",{});var Tye=s(q2);Jde=n(Tye,"STRONG",{});var snt=s(Jde);bwo=r(snt,"flaubert"),snt.forEach(t),vwo=r(Tye," \u2014 "),Hj=n(Tye,"A",{href:!0});var lnt=s(Hj);Fwo=r(lnt,"FlaubertWithLMHeadModel"),lnt.forEach(t),Two=r(Tye," (FlauBERT model)"),Tye.forEach(t),Mwo=i(H),N2=n(H,"LI",{});var Mye=s(N2);Yde=n(Mye,"STRONG",{});var int=s(Yde);Ewo=r(int,"fnet"),int.forEach(t),Cwo=r(Mye," \u2014 "),Uj=n(Mye,"A",{href:!0});var dnt=s(Uj);wwo=r(dnt,"FNetForMaskedLM"),dnt.forEach(t),Awo=r(Mye," (FNet model)"),Mye.forEach(t),ywo=i(H),j2=n(H,"LI",{});var Eye=s(j2);Kde=n(Eye,"STRONG",{});var cnt=s(Kde);Lwo=r(cnt,"funnel"),cnt.forEach(t),xwo=r(Eye," \u2014 "),Jj=n(Eye,"A",{href:!0});var fnt=s(Jj);$wo=r(fnt,"FunnelForMaskedLM"),fnt.forEach(t),kwo=r(Eye," (Funnel Transformer model)"),Eye.forEach(t),Swo=i(H),D2=n(H,"LI",{});var Cye=s(D2);Zde=n(Cye,"STRONG",{});var mnt=s(Zde);Rwo=r(mnt,"ibert"),mnt.forEach(t),Pwo=r(Cye," \u2014 "),Yj=n(Cye,"A",{href:!0});var gnt=s(Yj);Bwo=r(gnt,"IBertForMaskedLM"),gnt.forEach(t),Iwo=r(Cye," (I-BERT model)"),Cye.forEach(t),qwo=i(H),G2=n(H,"LI",{});var wye=s(G2);ece=n(wye,"STRONG",{});var hnt=s(ece);Nwo=r(hnt,"layoutlm"),hnt.forEach(t),jwo=r(wye," \u2014 "),Kj=n(wye,"A",{href:!0});var pnt=s(Kj);Dwo=r(pnt,"LayoutLMForMaskedLM"),pnt.forEach(t),Gwo=r(wye," (LayoutLM model)"),wye.forEach(t),Owo=i(H),O2=n(H,"LI",{});var Aye=s(O2);oce=n(Aye,"STRONG",{});var _nt=s(oce);Vwo=r(_nt,"longformer"),_nt.forEach(t),Xwo=r(Aye," \u2014 "),Zj=n(Aye,"A",{href:!0});var unt=s(Zj);zwo=r(unt,"LongformerForMaskedLM"),unt.forEach(t),Wwo=r(Aye," (Longformer model)"),Aye.forEach(t),Qwo=i(H),V2=n(H,"LI",{});var yye=s(V2);rce=n(yye,"STRONG",{});var bnt=s(rce);Hwo=r(bnt,"mbart"),bnt.forEach(t),Uwo=r(yye," \u2014 "),eD=n(yye,"A",{href:!0});var vnt=s(eD);Jwo=r(vnt,"MBartForConditionalGeneration"),vnt.forEach(t),Ywo=r(yye," (mBART model)"),yye.forEach(t),Kwo=i(H),X2=n(H,"LI",{});var Lye=s(X2);tce=n(Lye,"STRONG",{});var Fnt=s(tce);Zwo=r(Fnt,"megatron-bert"),Fnt.forEach(t),e0o=r(Lye," \u2014 "),oD=n(Lye,"A",{href:!0});var Tnt=s(oD);o0o=r(Tnt,"MegatronBertForMaskedLM"),Tnt.forEach(t),r0o=r(Lye," (MegatronBert model)"),Lye.forEach(t),t0o=i(H),z2=n(H,"LI",{});var xye=s(z2);ace=n(xye,"STRONG",{});var Mnt=s(ace);a0o=r(Mnt,"mobilebert"),Mnt.forEach(t),n0o=r(xye," \u2014 "),rD=n(xye,"A",{href:!0});var Ent=s(rD);s0o=r(Ent,"MobileBertForMaskedLM"),Ent.forEach(t),l0o=r(xye," (MobileBERT model)"),xye.forEach(t),i0o=i(H),W2=n(H,"LI",{});var $ye=s(W2);nce=n($ye,"STRONG",{});var Cnt=s(nce);d0o=r(Cnt,"mpnet"),Cnt.forEach(t),c0o=r($ye," \u2014 "),tD=n($ye,"A",{href:!0});var wnt=s(tD);f0o=r(wnt,"MPNetForMaskedLM"),wnt.forEach(t),m0o=r($ye," (MPNet model)"),$ye.forEach(t),g0o=i(H),Q2=n(H,"LI",{});var kye=s(Q2);sce=n(kye,"STRONG",{});var Ant=s(sce);h0o=r(Ant,"nystromformer"),Ant.forEach(t),p0o=r(kye," \u2014 "),aD=n(kye,"A",{href:!0});var ynt=s(aD);_0o=r(ynt,"NystromformerForMaskedLM"),ynt.forEach(t),u0o=r(kye," (Nystromformer model)"),kye.forEach(t),b0o=i(H),H2=n(H,"LI",{});var Sye=s(H2);lce=n(Sye,"STRONG",{});var Lnt=s(lce);v0o=r(Lnt,"perceiver"),Lnt.forEach(t),F0o=r(Sye," \u2014 "),nD=n(Sye,"A",{href:!0});var xnt=s(nD);T0o=r(xnt,"PerceiverForMaskedLM"),xnt.forEach(t),M0o=r(Sye," (Perceiver model)"),Sye.forEach(t),E0o=i(H),U2=n(H,"LI",{});var Rye=s(U2);ice=n(Rye,"STRONG",{});var $nt=s(ice);C0o=r($nt,"qdqbert"),$nt.forEach(t),w0o=r(Rye," \u2014 "),sD=n(Rye,"A",{href:!0});var knt=s(sD);A0o=r(knt,"QDQBertForMaskedLM"),knt.forEach(t),y0o=r(Rye," (QDQBert model)"),Rye.forEach(t),L0o=i(H),J2=n(H,"LI",{});var Pye=s(J2);dce=n(Pye,"STRONG",{});var Snt=s(dce);x0o=r(Snt,"reformer"),Snt.forEach(t),$0o=r(Pye," \u2014 "),lD=n(Pye,"A",{href:!0});var Rnt=s(lD);k0o=r(Rnt,"ReformerForMaskedLM"),Rnt.forEach(t),S0o=r(Pye," (Reformer model)"),Pye.forEach(t),R0o=i(H),Y2=n(H,"LI",{});var Bye=s(Y2);cce=n(Bye,"STRONG",{});var Pnt=s(cce);P0o=r(Pnt,"rembert"),Pnt.forEach(t),B0o=r(Bye," \u2014 "),iD=n(Bye,"A",{href:!0});var Bnt=s(iD);I0o=r(Bnt,"RemBertForMaskedLM"),Bnt.forEach(t),q0o=r(Bye," (RemBERT model)"),Bye.forEach(t),N0o=i(H),K2=n(H,"LI",{});var Iye=s(K2);fce=n(Iye,"STRONG",{});var Int=s(fce);j0o=r(Int,"roberta"),Int.forEach(t),D0o=r(Iye," \u2014 "),dD=n(Iye,"A",{href:!0});var qnt=s(dD);G0o=r(qnt,"RobertaForMaskedLM"),qnt.forEach(t),O0o=r(Iye," (RoBERTa model)"),Iye.forEach(t),V0o=i(H),Z2=n(H,"LI",{});var qye=s(Z2);mce=n(qye,"STRONG",{});var Nnt=s(mce);X0o=r(Nnt,"roformer"),Nnt.forEach(t),z0o=r(qye," \u2014 "),cD=n(qye,"A",{href:!0});var jnt=s(cD);W0o=r(jnt,"RoFormerForMaskedLM"),jnt.forEach(t),Q0o=r(qye," (RoFormer model)"),qye.forEach(t),H0o=i(H),e1=n(H,"LI",{});var Nye=s(e1);gce=n(Nye,"STRONG",{});var Dnt=s(gce);U0o=r(Dnt,"squeezebert"),Dnt.forEach(t),J0o=r(Nye," \u2014 "),fD=n(Nye,"A",{href:!0});var Gnt=s(fD);Y0o=r(Gnt,"SqueezeBertForMaskedLM"),Gnt.forEach(t),K0o=r(Nye," (SqueezeBERT model)"),Nye.forEach(t),Z0o=i(H),o1=n(H,"LI",{});var jye=s(o1);hce=n(jye,"STRONG",{});var Ont=s(hce);eAo=r(Ont,"tapas"),Ont.forEach(t),oAo=r(jye," \u2014 "),mD=n(jye,"A",{href:!0});var Vnt=s(mD);rAo=r(Vnt,"TapasForMaskedLM"),Vnt.forEach(t),tAo=r(jye," (TAPAS model)"),jye.forEach(t),aAo=i(H),r1=n(H,"LI",{});var Dye=s(r1);pce=n(Dye,"STRONG",{});var Xnt=s(pce);nAo=r(Xnt,"wav2vec2"),Xnt.forEach(t),sAo=r(Dye," \u2014 "),_ce=n(Dye,"CODE",{});var znt=s(_ce);lAo=r(znt,"Wav2Vec2ForMaskedLM"),znt.forEach(t),iAo=r(Dye," (Wav2Vec2 model)"),Dye.forEach(t),dAo=i(H),t1=n(H,"LI",{});var Gye=s(t1);uce=n(Gye,"STRONG",{});var Wnt=s(uce);cAo=r(Wnt,"xlm"),Wnt.forEach(t),fAo=r(Gye," \u2014 "),gD=n(Gye,"A",{href:!0});var Qnt=s(gD);mAo=r(Qnt,"XLMWithLMHeadModel"),Qnt.forEach(t),gAo=r(Gye," (XLM model)"),Gye.forEach(t),hAo=i(H),a1=n(H,"LI",{});var Oye=s(a1);bce=n(Oye,"STRONG",{});var Hnt=s(bce);pAo=r(Hnt,"xlm-roberta"),Hnt.forEach(t),_Ao=r(Oye," \u2014 "),hD=n(Oye,"A",{href:!0});var Unt=s(hD);uAo=r(Unt,"XLMRobertaForMaskedLM"),Unt.forEach(t),bAo=r(Oye," (XLM-RoBERTa model)"),Oye.forEach(t),vAo=i(H),n1=n(H,"LI",{});var Vye=s(n1);vce=n(Vye,"STRONG",{});var Jnt=s(vce);FAo=r(Jnt,"xlm-roberta-xl"),Jnt.forEach(t),TAo=r(Vye," \u2014 "),pD=n(Vye,"A",{href:!0});var Ynt=s(pD);MAo=r(Ynt,"XLMRobertaXLForMaskedLM"),Ynt.forEach(t),EAo=r(Vye," (XLM-RoBERTa-XL model)"),Vye.forEach(t),CAo=i(H),s1=n(H,"LI",{});var Xye=s(s1);Fce=n(Xye,"STRONG",{});var Knt=s(Fce);wAo=r(Knt,"yoso"),Knt.forEach(t),AAo=r(Xye," \u2014 "),_D=n(Xye,"A",{href:!0});var Znt=s(_D);yAo=r(Znt,"YosoForMaskedLM"),Znt.forEach(t),LAo=r(Xye," (YOSO model)"),Xye.forEach(t),H.forEach(t),xAo=i(aa),l1=n(aa,"P",{});var zye=s(l1);$Ao=r(zye,"The model is set in evaluation mode by default using "),Tce=n(zye,"CODE",{});var est=s(Tce);kAo=r(est,"model.eval()"),est.forEach(t),SAo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(zye,"CODE",{});var ost=s(Mce);RAo=r(ost,"model.train()"),ost.forEach(t),zye.forEach(t),PAo=i(aa),T(i1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),wqe=i(f),qi=n(f,"H2",{class:!0});var xje=s(qi);d1=n(xje,"A",{id:!0,class:!0,href:!0});var rst=s(d1);Ece=n(rst,"SPAN",{});var tst=s(Ece);T(lA.$$.fragment,tst),tst.forEach(t),rst.forEach(t),BAo=i(xje),Cce=n(xje,"SPAN",{});var ast=s(Cce);IAo=r(ast,"AutoModelForSeq2SeqLM"),ast.forEach(t),xje.forEach(t),Aqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(iA.$$.fragment,zs),qAo=i(zs),Ni=n(zs,"P",{});var ZK=s(Ni);NAo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uD=n(ZK,"A",{href:!0});var nst=s(uD);jAo=r(nst,"from_pretrained()"),nst.forEach(t),DAo=r(ZK," class method or the "),bD=n(ZK,"A",{href:!0});var sst=s(bD);GAo=r(sst,"from_config()"),sst.forEach(t),OAo=r(ZK,` class
method.`),ZK.forEach(t),VAo=i(zs),dA=n(zs,"P",{});var $je=s(dA);XAo=r($je,"This class cannot be instantiated directly using "),wce=n($je,"CODE",{});var lst=s(wce);zAo=r(lst,"__init__()"),lst.forEach(t),WAo=r($je," (throws an error)."),$je.forEach(t),QAo=i(zs),lt=n(zs,"DIV",{class:!0});var y3=s(lt);T(cA.$$.fragment,y3),HAo=i(y3),Ace=n(y3,"P",{});var ist=s(Ace);UAo=r(ist,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ist.forEach(t),JAo=i(y3),ji=n(y3,"P",{});var eZ=s(ji);YAo=r(eZ,`Note:
Loading a model from its configuration file does `),yce=n(eZ,"STRONG",{});var dst=s(yce);KAo=r(dst,"not"),dst.forEach(t),ZAo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(eZ,"A",{href:!0});var cst=s(vD);eyo=r(cst,"from_pretrained()"),cst.forEach(t),oyo=r(eZ," to load the model weights."),eZ.forEach(t),ryo=i(y3),T(c1.$$.fragment,y3),y3.forEach(t),tyo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(fA.$$.fragment,na),ayo=i(na),Lce=n(na,"P",{});var fst=s(Lce);nyo=r(fst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fst.forEach(t),syo=i(na),Sa=n(na,"P",{});var L3=s(Sa);lyo=r(L3,"The model class to instantiate is selected based on the "),xce=n(L3,"CODE",{});var mst=s(xce);iyo=r(mst,"model_type"),mst.forEach(t),dyo=r(L3,` property of the config object (either
passed as an argument or loaded from `),$ce=n(L3,"CODE",{});var gst=s($ce);cyo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),fyo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(L3,"CODE",{});var hst=s(kce);myo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),gyo=r(L3,":"),L3.forEach(t),hyo=i(na),he=n(na,"UL",{});var ue=s(he);f1=n(ue,"LI",{});var Wye=s(f1);Sce=n(Wye,"STRONG",{});var pst=s(Sce);pyo=r(pst,"bart"),pst.forEach(t),_yo=r(Wye," \u2014 "),FD=n(Wye,"A",{href:!0});var _st=s(FD);uyo=r(_st,"BartForConditionalGeneration"),_st.forEach(t),byo=r(Wye," (BART model)"),Wye.forEach(t),vyo=i(ue),m1=n(ue,"LI",{});var Qye=s(m1);Rce=n(Qye,"STRONG",{});var ust=s(Rce);Fyo=r(ust,"bigbird_pegasus"),ust.forEach(t),Tyo=r(Qye," \u2014 "),TD=n(Qye,"A",{href:!0});var bst=s(TD);Myo=r(bst,"BigBirdPegasusForConditionalGeneration"),bst.forEach(t),Eyo=r(Qye," (BigBirdPegasus model)"),Qye.forEach(t),Cyo=i(ue),g1=n(ue,"LI",{});var Hye=s(g1);Pce=n(Hye,"STRONG",{});var vst=s(Pce);wyo=r(vst,"blenderbot"),vst.forEach(t),Ayo=r(Hye," \u2014 "),MD=n(Hye,"A",{href:!0});var Fst=s(MD);yyo=r(Fst,"BlenderbotForConditionalGeneration"),Fst.forEach(t),Lyo=r(Hye," (Blenderbot model)"),Hye.forEach(t),xyo=i(ue),h1=n(ue,"LI",{});var Uye=s(h1);Bce=n(Uye,"STRONG",{});var Tst=s(Bce);$yo=r(Tst,"blenderbot-small"),Tst.forEach(t),kyo=r(Uye," \u2014 "),ED=n(Uye,"A",{href:!0});var Mst=s(ED);Syo=r(Mst,"BlenderbotSmallForConditionalGeneration"),Mst.forEach(t),Ryo=r(Uye," (BlenderbotSmall model)"),Uye.forEach(t),Pyo=i(ue),p1=n(ue,"LI",{});var Jye=s(p1);Ice=n(Jye,"STRONG",{});var Est=s(Ice);Byo=r(Est,"encoder-decoder"),Est.forEach(t),Iyo=r(Jye," \u2014 "),CD=n(Jye,"A",{href:!0});var Cst=s(CD);qyo=r(Cst,"EncoderDecoderModel"),Cst.forEach(t),Nyo=r(Jye," (Encoder decoder model)"),Jye.forEach(t),jyo=i(ue),_1=n(ue,"LI",{});var Yye=s(_1);qce=n(Yye,"STRONG",{});var wst=s(qce);Dyo=r(wst,"fsmt"),wst.forEach(t),Gyo=r(Yye," \u2014 "),wD=n(Yye,"A",{href:!0});var Ast=s(wD);Oyo=r(Ast,"FSMTForConditionalGeneration"),Ast.forEach(t),Vyo=r(Yye," (FairSeq Machine-Translation model)"),Yye.forEach(t),Xyo=i(ue),u1=n(ue,"LI",{});var Kye=s(u1);Nce=n(Kye,"STRONG",{});var yst=s(Nce);zyo=r(yst,"led"),yst.forEach(t),Wyo=r(Kye," \u2014 "),AD=n(Kye,"A",{href:!0});var Lst=s(AD);Qyo=r(Lst,"LEDForConditionalGeneration"),Lst.forEach(t),Hyo=r(Kye," (LED model)"),Kye.forEach(t),Uyo=i(ue),b1=n(ue,"LI",{});var Zye=s(b1);jce=n(Zye,"STRONG",{});var xst=s(jce);Jyo=r(xst,"longt5"),xst.forEach(t),Yyo=r(Zye," \u2014 "),yD=n(Zye,"A",{href:!0});var $st=s(yD);Kyo=r($st,"LongT5ForConditionalGeneration"),$st.forEach(t),Zyo=r(Zye," (LongT5 model)"),Zye.forEach(t),eLo=i(ue),v1=n(ue,"LI",{});var eLe=s(v1);Dce=n(eLe,"STRONG",{});var kst=s(Dce);oLo=r(kst,"m2m_100"),kst.forEach(t),rLo=r(eLe," \u2014 "),LD=n(eLe,"A",{href:!0});var Sst=s(LD);tLo=r(Sst,"M2M100ForConditionalGeneration"),Sst.forEach(t),aLo=r(eLe," (M2M100 model)"),eLe.forEach(t),nLo=i(ue),F1=n(ue,"LI",{});var oLe=s(F1);Gce=n(oLe,"STRONG",{});var Rst=s(Gce);sLo=r(Rst,"marian"),Rst.forEach(t),lLo=r(oLe," \u2014 "),xD=n(oLe,"A",{href:!0});var Pst=s(xD);iLo=r(Pst,"MarianMTModel"),Pst.forEach(t),dLo=r(oLe," (Marian model)"),oLe.forEach(t),cLo=i(ue),T1=n(ue,"LI",{});var rLe=s(T1);Oce=n(rLe,"STRONG",{});var Bst=s(Oce);fLo=r(Bst,"mbart"),Bst.forEach(t),mLo=r(rLe," \u2014 "),$D=n(rLe,"A",{href:!0});var Ist=s($D);gLo=r(Ist,"MBartForConditionalGeneration"),Ist.forEach(t),hLo=r(rLe," (mBART model)"),rLe.forEach(t),pLo=i(ue),M1=n(ue,"LI",{});var tLe=s(M1);Vce=n(tLe,"STRONG",{});var qst=s(Vce);_Lo=r(qst,"mt5"),qst.forEach(t),uLo=r(tLe," \u2014 "),kD=n(tLe,"A",{href:!0});var Nst=s(kD);bLo=r(Nst,"MT5ForConditionalGeneration"),Nst.forEach(t),vLo=r(tLe," (mT5 model)"),tLe.forEach(t),FLo=i(ue),E1=n(ue,"LI",{});var aLe=s(E1);Xce=n(aLe,"STRONG",{});var jst=s(Xce);TLo=r(jst,"pegasus"),jst.forEach(t),MLo=r(aLe," \u2014 "),SD=n(aLe,"A",{href:!0});var Dst=s(SD);ELo=r(Dst,"PegasusForConditionalGeneration"),Dst.forEach(t),CLo=r(aLe," (Pegasus model)"),aLe.forEach(t),wLo=i(ue),C1=n(ue,"LI",{});var nLe=s(C1);zce=n(nLe,"STRONG",{});var Gst=s(zce);ALo=r(Gst,"plbart"),Gst.forEach(t),yLo=r(nLe," \u2014 "),RD=n(nLe,"A",{href:!0});var Ost=s(RD);LLo=r(Ost,"PLBartForConditionalGeneration"),Ost.forEach(t),xLo=r(nLe," (PLBart model)"),nLe.forEach(t),$Lo=i(ue),w1=n(ue,"LI",{});var sLe=s(w1);Wce=n(sLe,"STRONG",{});var Vst=s(Wce);kLo=r(Vst,"prophetnet"),Vst.forEach(t),SLo=r(sLe," \u2014 "),PD=n(sLe,"A",{href:!0});var Xst=s(PD);RLo=r(Xst,"ProphetNetForConditionalGeneration"),Xst.forEach(t),PLo=r(sLe," (ProphetNet model)"),sLe.forEach(t),BLo=i(ue),A1=n(ue,"LI",{});var lLe=s(A1);Qce=n(lLe,"STRONG",{});var zst=s(Qce);ILo=r(zst,"t5"),zst.forEach(t),qLo=r(lLe," \u2014 "),BD=n(lLe,"A",{href:!0});var Wst=s(BD);NLo=r(Wst,"T5ForConditionalGeneration"),Wst.forEach(t),jLo=r(lLe," (T5 model)"),lLe.forEach(t),DLo=i(ue),y1=n(ue,"LI",{});var iLe=s(y1);Hce=n(iLe,"STRONG",{});var Qst=s(Hce);GLo=r(Qst,"xlm-prophetnet"),Qst.forEach(t),OLo=r(iLe," \u2014 "),ID=n(iLe,"A",{href:!0});var Hst=s(ID);VLo=r(Hst,"XLMProphetNetForConditionalGeneration"),Hst.forEach(t),XLo=r(iLe," (XLMProphetNet model)"),iLe.forEach(t),ue.forEach(t),zLo=i(na),L1=n(na,"P",{});var dLe=s(L1);WLo=r(dLe,"The model is set in evaluation mode by default using "),Uce=n(dLe,"CODE",{});var Ust=s(Uce);QLo=r(Ust,"model.eval()"),Ust.forEach(t),HLo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=n(dLe,"CODE",{});var Jst=s(Jce);ULo=r(Jst,"model.train()"),Jst.forEach(t),dLe.forEach(t),JLo=i(na),T(x1.$$.fragment,na),na.forEach(t),zs.forEach(t),yqe=i(f),Di=n(f,"H2",{class:!0});var kje=s(Di);$1=n(kje,"A",{id:!0,class:!0,href:!0});var Yst=s($1);Yce=n(Yst,"SPAN",{});var Kst=s(Yce);T(mA.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),YLo=i(kje),Kce=n(kje,"SPAN",{});var Zst=s(Kce);KLo=r(Zst,"AutoModelForSequenceClassification"),Zst.forEach(t),kje.forEach(t),Lqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(gA.$$.fragment,Ws),ZLo=i(Ws),Gi=n(Ws,"P",{});var oZ=s(Gi);e8o=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=n(oZ,"A",{href:!0});var elt=s(qD);o8o=r(elt,"from_pretrained()"),elt.forEach(t),r8o=r(oZ," class method or the "),ND=n(oZ,"A",{href:!0});var olt=s(ND);t8o=r(olt,"from_config()"),olt.forEach(t),a8o=r(oZ,` class
method.`),oZ.forEach(t),n8o=i(Ws),hA=n(Ws,"P",{});var Sje=s(hA);s8o=r(Sje,"This class cannot be instantiated directly using "),Zce=n(Sje,"CODE",{});var rlt=s(Zce);l8o=r(rlt,"__init__()"),rlt.forEach(t),i8o=r(Sje," (throws an error)."),Sje.forEach(t),d8o=i(Ws),it=n(Ws,"DIV",{class:!0});var x3=s(it);T(pA.$$.fragment,x3),c8o=i(x3),efe=n(x3,"P",{});var tlt=s(efe);f8o=r(tlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tlt.forEach(t),m8o=i(x3),Oi=n(x3,"P",{});var rZ=s(Oi);g8o=r(rZ,`Note:
Loading a model from its configuration file does `),ofe=n(rZ,"STRONG",{});var alt=s(ofe);h8o=r(alt,"not"),alt.forEach(t),p8o=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(rZ,"A",{href:!0});var nlt=s(jD);_8o=r(nlt,"from_pretrained()"),nlt.forEach(t),u8o=r(rZ," to load the model weights."),rZ.forEach(t),b8o=i(x3),T(k1.$$.fragment,x3),x3.forEach(t),v8o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(_A.$$.fragment,sa),F8o=i(sa),rfe=n(sa,"P",{});var slt=s(rfe);T8o=r(slt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),slt.forEach(t),M8o=i(sa),Ra=n(sa,"P",{});var $3=s(Ra);E8o=r($3,"The model class to instantiate is selected based on the "),tfe=n($3,"CODE",{});var llt=s(tfe);C8o=r(llt,"model_type"),llt.forEach(t),w8o=r($3,` property of the config object (either
passed as an argument or loaded from `),afe=n($3,"CODE",{});var ilt=s(afe);A8o=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),y8o=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n($3,"CODE",{});var dlt=s(nfe);L8o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),x8o=r($3,":"),$3.forEach(t),$8o=i(sa),q=n(sa,"UL",{});var j=s(q);S1=n(j,"LI",{});var cLe=s(S1);sfe=n(cLe,"STRONG",{});var clt=s(sfe);k8o=r(clt,"albert"),clt.forEach(t),S8o=r(cLe," \u2014 "),DD=n(cLe,"A",{href:!0});var flt=s(DD);R8o=r(flt,"AlbertForSequenceClassification"),flt.forEach(t),P8o=r(cLe," (ALBERT model)"),cLe.forEach(t),B8o=i(j),R1=n(j,"LI",{});var fLe=s(R1);lfe=n(fLe,"STRONG",{});var mlt=s(lfe);I8o=r(mlt,"bart"),mlt.forEach(t),q8o=r(fLe," \u2014 "),GD=n(fLe,"A",{href:!0});var glt=s(GD);N8o=r(glt,"BartForSequenceClassification"),glt.forEach(t),j8o=r(fLe," (BART model)"),fLe.forEach(t),D8o=i(j),P1=n(j,"LI",{});var mLe=s(P1);ife=n(mLe,"STRONG",{});var hlt=s(ife);G8o=r(hlt,"bert"),hlt.forEach(t),O8o=r(mLe," \u2014 "),OD=n(mLe,"A",{href:!0});var plt=s(OD);V8o=r(plt,"BertForSequenceClassification"),plt.forEach(t),X8o=r(mLe," (BERT model)"),mLe.forEach(t),z8o=i(j),B1=n(j,"LI",{});var gLe=s(B1);dfe=n(gLe,"STRONG",{});var _lt=s(dfe);W8o=r(_lt,"big_bird"),_lt.forEach(t),Q8o=r(gLe," \u2014 "),VD=n(gLe,"A",{href:!0});var ult=s(VD);H8o=r(ult,"BigBirdForSequenceClassification"),ult.forEach(t),U8o=r(gLe," (BigBird model)"),gLe.forEach(t),J8o=i(j),I1=n(j,"LI",{});var hLe=s(I1);cfe=n(hLe,"STRONG",{});var blt=s(cfe);Y8o=r(blt,"bigbird_pegasus"),blt.forEach(t),K8o=r(hLe," \u2014 "),XD=n(hLe,"A",{href:!0});var vlt=s(XD);Z8o=r(vlt,"BigBirdPegasusForSequenceClassification"),vlt.forEach(t),exo=r(hLe," (BigBirdPegasus model)"),hLe.forEach(t),oxo=i(j),q1=n(j,"LI",{});var pLe=s(q1);ffe=n(pLe,"STRONG",{});var Flt=s(ffe);rxo=r(Flt,"camembert"),Flt.forEach(t),txo=r(pLe," \u2014 "),zD=n(pLe,"A",{href:!0});var Tlt=s(zD);axo=r(Tlt,"CamembertForSequenceClassification"),Tlt.forEach(t),nxo=r(pLe," (CamemBERT model)"),pLe.forEach(t),sxo=i(j),N1=n(j,"LI",{});var _Le=s(N1);mfe=n(_Le,"STRONG",{});var Mlt=s(mfe);lxo=r(Mlt,"canine"),Mlt.forEach(t),ixo=r(_Le," \u2014 "),WD=n(_Le,"A",{href:!0});var Elt=s(WD);dxo=r(Elt,"CanineForSequenceClassification"),Elt.forEach(t),cxo=r(_Le," (Canine model)"),_Le.forEach(t),fxo=i(j),j1=n(j,"LI",{});var uLe=s(j1);gfe=n(uLe,"STRONG",{});var Clt=s(gfe);mxo=r(Clt,"convbert"),Clt.forEach(t),gxo=r(uLe," \u2014 "),QD=n(uLe,"A",{href:!0});var wlt=s(QD);hxo=r(wlt,"ConvBertForSequenceClassification"),wlt.forEach(t),pxo=r(uLe," (ConvBERT model)"),uLe.forEach(t),_xo=i(j),D1=n(j,"LI",{});var bLe=s(D1);hfe=n(bLe,"STRONG",{});var Alt=s(hfe);uxo=r(Alt,"ctrl"),Alt.forEach(t),bxo=r(bLe," \u2014 "),HD=n(bLe,"A",{href:!0});var ylt=s(HD);vxo=r(ylt,"CTRLForSequenceClassification"),ylt.forEach(t),Fxo=r(bLe," (CTRL model)"),bLe.forEach(t),Txo=i(j),G1=n(j,"LI",{});var vLe=s(G1);pfe=n(vLe,"STRONG",{});var Llt=s(pfe);Mxo=r(Llt,"data2vec-text"),Llt.forEach(t),Exo=r(vLe," \u2014 "),UD=n(vLe,"A",{href:!0});var xlt=s(UD);Cxo=r(xlt,"Data2VecTextForSequenceClassification"),xlt.forEach(t),wxo=r(vLe," (Data2VecText model)"),vLe.forEach(t),Axo=i(j),O1=n(j,"LI",{});var FLe=s(O1);_fe=n(FLe,"STRONG",{});var $lt=s(_fe);yxo=r($lt,"deberta"),$lt.forEach(t),Lxo=r(FLe," \u2014 "),JD=n(FLe,"A",{href:!0});var klt=s(JD);xxo=r(klt,"DebertaForSequenceClassification"),klt.forEach(t),$xo=r(FLe," (DeBERTa model)"),FLe.forEach(t),kxo=i(j),V1=n(j,"LI",{});var TLe=s(V1);ufe=n(TLe,"STRONG",{});var Slt=s(ufe);Sxo=r(Slt,"deberta-v2"),Slt.forEach(t),Rxo=r(TLe," \u2014 "),YD=n(TLe,"A",{href:!0});var Rlt=s(YD);Pxo=r(Rlt,"DebertaV2ForSequenceClassification"),Rlt.forEach(t),Bxo=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),Ixo=i(j),X1=n(j,"LI",{});var MLe=s(X1);bfe=n(MLe,"STRONG",{});var Plt=s(bfe);qxo=r(Plt,"distilbert"),Plt.forEach(t),Nxo=r(MLe," \u2014 "),KD=n(MLe,"A",{href:!0});var Blt=s(KD);jxo=r(Blt,"DistilBertForSequenceClassification"),Blt.forEach(t),Dxo=r(MLe," (DistilBERT model)"),MLe.forEach(t),Gxo=i(j),z1=n(j,"LI",{});var ELe=s(z1);vfe=n(ELe,"STRONG",{});var Ilt=s(vfe);Oxo=r(Ilt,"electra"),Ilt.forEach(t),Vxo=r(ELe," \u2014 "),ZD=n(ELe,"A",{href:!0});var qlt=s(ZD);Xxo=r(qlt,"ElectraForSequenceClassification"),qlt.forEach(t),zxo=r(ELe," (ELECTRA model)"),ELe.forEach(t),Wxo=i(j),W1=n(j,"LI",{});var CLe=s(W1);Ffe=n(CLe,"STRONG",{});var Nlt=s(Ffe);Qxo=r(Nlt,"flaubert"),Nlt.forEach(t),Hxo=r(CLe," \u2014 "),eG=n(CLe,"A",{href:!0});var jlt=s(eG);Uxo=r(jlt,"FlaubertForSequenceClassification"),jlt.forEach(t),Jxo=r(CLe," (FlauBERT model)"),CLe.forEach(t),Yxo=i(j),Q1=n(j,"LI",{});var wLe=s(Q1);Tfe=n(wLe,"STRONG",{});var Dlt=s(Tfe);Kxo=r(Dlt,"fnet"),Dlt.forEach(t),Zxo=r(wLe," \u2014 "),oG=n(wLe,"A",{href:!0});var Glt=s(oG);e$o=r(Glt,"FNetForSequenceClassification"),Glt.forEach(t),o$o=r(wLe," (FNet model)"),wLe.forEach(t),r$o=i(j),H1=n(j,"LI",{});var ALe=s(H1);Mfe=n(ALe,"STRONG",{});var Olt=s(Mfe);t$o=r(Olt,"funnel"),Olt.forEach(t),a$o=r(ALe," \u2014 "),rG=n(ALe,"A",{href:!0});var Vlt=s(rG);n$o=r(Vlt,"FunnelForSequenceClassification"),Vlt.forEach(t),s$o=r(ALe," (Funnel Transformer model)"),ALe.forEach(t),l$o=i(j),U1=n(j,"LI",{});var yLe=s(U1);Efe=n(yLe,"STRONG",{});var Xlt=s(Efe);i$o=r(Xlt,"gpt2"),Xlt.forEach(t),d$o=r(yLe," \u2014 "),tG=n(yLe,"A",{href:!0});var zlt=s(tG);c$o=r(zlt,"GPT2ForSequenceClassification"),zlt.forEach(t),f$o=r(yLe," (OpenAI GPT-2 model)"),yLe.forEach(t),m$o=i(j),J1=n(j,"LI",{});var LLe=s(J1);Cfe=n(LLe,"STRONG",{});var Wlt=s(Cfe);g$o=r(Wlt,"gpt_neo"),Wlt.forEach(t),h$o=r(LLe," \u2014 "),aG=n(LLe,"A",{href:!0});var Qlt=s(aG);p$o=r(Qlt,"GPTNeoForSequenceClassification"),Qlt.forEach(t),_$o=r(LLe," (GPT Neo model)"),LLe.forEach(t),u$o=i(j),Y1=n(j,"LI",{});var xLe=s(Y1);wfe=n(xLe,"STRONG",{});var Hlt=s(wfe);b$o=r(Hlt,"gptj"),Hlt.forEach(t),v$o=r(xLe," \u2014 "),nG=n(xLe,"A",{href:!0});var Ult=s(nG);F$o=r(Ult,"GPTJForSequenceClassification"),Ult.forEach(t),T$o=r(xLe," (GPT-J model)"),xLe.forEach(t),M$o=i(j),K1=n(j,"LI",{});var $Le=s(K1);Afe=n($Le,"STRONG",{});var Jlt=s(Afe);E$o=r(Jlt,"ibert"),Jlt.forEach(t),C$o=r($Le," \u2014 "),sG=n($Le,"A",{href:!0});var Ylt=s(sG);w$o=r(Ylt,"IBertForSequenceClassification"),Ylt.forEach(t),A$o=r($Le," (I-BERT model)"),$Le.forEach(t),y$o=i(j),Z1=n(j,"LI",{});var kLe=s(Z1);yfe=n(kLe,"STRONG",{});var Klt=s(yfe);L$o=r(Klt,"layoutlm"),Klt.forEach(t),x$o=r(kLe," \u2014 "),lG=n(kLe,"A",{href:!0});var Zlt=s(lG);$$o=r(Zlt,"LayoutLMForSequenceClassification"),Zlt.forEach(t),k$o=r(kLe," (LayoutLM model)"),kLe.forEach(t),S$o=i(j),eb=n(j,"LI",{});var SLe=s(eb);Lfe=n(SLe,"STRONG",{});var eit=s(Lfe);R$o=r(eit,"layoutlmv2"),eit.forEach(t),P$o=r(SLe," \u2014 "),iG=n(SLe,"A",{href:!0});var oit=s(iG);B$o=r(oit,"LayoutLMv2ForSequenceClassification"),oit.forEach(t),I$o=r(SLe," (LayoutLMv2 model)"),SLe.forEach(t),q$o=i(j),ob=n(j,"LI",{});var RLe=s(ob);xfe=n(RLe,"STRONG",{});var rit=s(xfe);N$o=r(rit,"led"),rit.forEach(t),j$o=r(RLe," \u2014 "),dG=n(RLe,"A",{href:!0});var tit=s(dG);D$o=r(tit,"LEDForSequenceClassification"),tit.forEach(t),G$o=r(RLe," (LED model)"),RLe.forEach(t),O$o=i(j),rb=n(j,"LI",{});var PLe=s(rb);$fe=n(PLe,"STRONG",{});var ait=s($fe);V$o=r(ait,"longformer"),ait.forEach(t),X$o=r(PLe," \u2014 "),cG=n(PLe,"A",{href:!0});var nit=s(cG);z$o=r(nit,"LongformerForSequenceClassification"),nit.forEach(t),W$o=r(PLe," (Longformer model)"),PLe.forEach(t),Q$o=i(j),tb=n(j,"LI",{});var BLe=s(tb);kfe=n(BLe,"STRONG",{});var sit=s(kfe);H$o=r(sit,"mbart"),sit.forEach(t),U$o=r(BLe," \u2014 "),fG=n(BLe,"A",{href:!0});var lit=s(fG);J$o=r(lit,"MBartForSequenceClassification"),lit.forEach(t),Y$o=r(BLe," (mBART model)"),BLe.forEach(t),K$o=i(j),ab=n(j,"LI",{});var ILe=s(ab);Sfe=n(ILe,"STRONG",{});var iit=s(Sfe);Z$o=r(iit,"megatron-bert"),iit.forEach(t),eko=r(ILe," \u2014 "),mG=n(ILe,"A",{href:!0});var dit=s(mG);oko=r(dit,"MegatronBertForSequenceClassification"),dit.forEach(t),rko=r(ILe," (MegatronBert model)"),ILe.forEach(t),tko=i(j),nb=n(j,"LI",{});var qLe=s(nb);Rfe=n(qLe,"STRONG",{});var cit=s(Rfe);ako=r(cit,"mobilebert"),cit.forEach(t),nko=r(qLe," \u2014 "),gG=n(qLe,"A",{href:!0});var fit=s(gG);sko=r(fit,"MobileBertForSequenceClassification"),fit.forEach(t),lko=r(qLe," (MobileBERT model)"),qLe.forEach(t),iko=i(j),sb=n(j,"LI",{});var NLe=s(sb);Pfe=n(NLe,"STRONG",{});var mit=s(Pfe);dko=r(mit,"mpnet"),mit.forEach(t),cko=r(NLe," \u2014 "),hG=n(NLe,"A",{href:!0});var git=s(hG);fko=r(git,"MPNetForSequenceClassification"),git.forEach(t),mko=r(NLe," (MPNet model)"),NLe.forEach(t),gko=i(j),lb=n(j,"LI",{});var jLe=s(lb);Bfe=n(jLe,"STRONG",{});var hit=s(Bfe);hko=r(hit,"nystromformer"),hit.forEach(t),pko=r(jLe," \u2014 "),pG=n(jLe,"A",{href:!0});var pit=s(pG);_ko=r(pit,"NystromformerForSequenceClassification"),pit.forEach(t),uko=r(jLe," (Nystromformer model)"),jLe.forEach(t),bko=i(j),ib=n(j,"LI",{});var DLe=s(ib);Ife=n(DLe,"STRONG",{});var _it=s(Ife);vko=r(_it,"openai-gpt"),_it.forEach(t),Fko=r(DLe," \u2014 "),_G=n(DLe,"A",{href:!0});var uit=s(_G);Tko=r(uit,"OpenAIGPTForSequenceClassification"),uit.forEach(t),Mko=r(DLe," (OpenAI GPT model)"),DLe.forEach(t),Eko=i(j),db=n(j,"LI",{});var GLe=s(db);qfe=n(GLe,"STRONG",{});var bit=s(qfe);Cko=r(bit,"perceiver"),bit.forEach(t),wko=r(GLe," \u2014 "),uG=n(GLe,"A",{href:!0});var vit=s(uG);Ako=r(vit,"PerceiverForSequenceClassification"),vit.forEach(t),yko=r(GLe," (Perceiver model)"),GLe.forEach(t),Lko=i(j),cb=n(j,"LI",{});var OLe=s(cb);Nfe=n(OLe,"STRONG",{});var Fit=s(Nfe);xko=r(Fit,"plbart"),Fit.forEach(t),$ko=r(OLe," \u2014 "),bG=n(OLe,"A",{href:!0});var Tit=s(bG);kko=r(Tit,"PLBartForSequenceClassification"),Tit.forEach(t),Sko=r(OLe," (PLBart model)"),OLe.forEach(t),Rko=i(j),fb=n(j,"LI",{});var VLe=s(fb);jfe=n(VLe,"STRONG",{});var Mit=s(jfe);Pko=r(Mit,"qdqbert"),Mit.forEach(t),Bko=r(VLe," \u2014 "),vG=n(VLe,"A",{href:!0});var Eit=s(vG);Iko=r(Eit,"QDQBertForSequenceClassification"),Eit.forEach(t),qko=r(VLe," (QDQBert model)"),VLe.forEach(t),Nko=i(j),mb=n(j,"LI",{});var XLe=s(mb);Dfe=n(XLe,"STRONG",{});var Cit=s(Dfe);jko=r(Cit,"reformer"),Cit.forEach(t),Dko=r(XLe," \u2014 "),FG=n(XLe,"A",{href:!0});var wit=s(FG);Gko=r(wit,"ReformerForSequenceClassification"),wit.forEach(t),Oko=r(XLe," (Reformer model)"),XLe.forEach(t),Vko=i(j),gb=n(j,"LI",{});var zLe=s(gb);Gfe=n(zLe,"STRONG",{});var Ait=s(Gfe);Xko=r(Ait,"rembert"),Ait.forEach(t),zko=r(zLe," \u2014 "),TG=n(zLe,"A",{href:!0});var yit=s(TG);Wko=r(yit,"RemBertForSequenceClassification"),yit.forEach(t),Qko=r(zLe," (RemBERT model)"),zLe.forEach(t),Hko=i(j),hb=n(j,"LI",{});var WLe=s(hb);Ofe=n(WLe,"STRONG",{});var Lit=s(Ofe);Uko=r(Lit,"roberta"),Lit.forEach(t),Jko=r(WLe," \u2014 "),MG=n(WLe,"A",{href:!0});var xit=s(MG);Yko=r(xit,"RobertaForSequenceClassification"),xit.forEach(t),Kko=r(WLe," (RoBERTa model)"),WLe.forEach(t),Zko=i(j),pb=n(j,"LI",{});var QLe=s(pb);Vfe=n(QLe,"STRONG",{});var $it=s(Vfe);eSo=r($it,"roformer"),$it.forEach(t),oSo=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var kit=s(EG);rSo=r(kit,"RoFormerForSequenceClassification"),kit.forEach(t),tSo=r(QLe," (RoFormer model)"),QLe.forEach(t),aSo=i(j),_b=n(j,"LI",{});var HLe=s(_b);Xfe=n(HLe,"STRONG",{});var Sit=s(Xfe);nSo=r(Sit,"squeezebert"),Sit.forEach(t),sSo=r(HLe," \u2014 "),CG=n(HLe,"A",{href:!0});var Rit=s(CG);lSo=r(Rit,"SqueezeBertForSequenceClassification"),Rit.forEach(t),iSo=r(HLe," (SqueezeBERT model)"),HLe.forEach(t),dSo=i(j),ub=n(j,"LI",{});var ULe=s(ub);zfe=n(ULe,"STRONG",{});var Pit=s(zfe);cSo=r(Pit,"tapas"),Pit.forEach(t),fSo=r(ULe," \u2014 "),wG=n(ULe,"A",{href:!0});var Bit=s(wG);mSo=r(Bit,"TapasForSequenceClassification"),Bit.forEach(t),gSo=r(ULe," (TAPAS model)"),ULe.forEach(t),hSo=i(j),bb=n(j,"LI",{});var JLe=s(bb);Wfe=n(JLe,"STRONG",{});var Iit=s(Wfe);pSo=r(Iit,"transfo-xl"),Iit.forEach(t),_So=r(JLe," \u2014 "),AG=n(JLe,"A",{href:!0});var qit=s(AG);uSo=r(qit,"TransfoXLForSequenceClassification"),qit.forEach(t),bSo=r(JLe," (Transformer-XL model)"),JLe.forEach(t),vSo=i(j),vb=n(j,"LI",{});var YLe=s(vb);Qfe=n(YLe,"STRONG",{});var Nit=s(Qfe);FSo=r(Nit,"xlm"),Nit.forEach(t),TSo=r(YLe," \u2014 "),yG=n(YLe,"A",{href:!0});var jit=s(yG);MSo=r(jit,"XLMForSequenceClassification"),jit.forEach(t),ESo=r(YLe," (XLM model)"),YLe.forEach(t),CSo=i(j),Fb=n(j,"LI",{});var KLe=s(Fb);Hfe=n(KLe,"STRONG",{});var Dit=s(Hfe);wSo=r(Dit,"xlm-roberta"),Dit.forEach(t),ASo=r(KLe," \u2014 "),LG=n(KLe,"A",{href:!0});var Git=s(LG);ySo=r(Git,"XLMRobertaForSequenceClassification"),Git.forEach(t),LSo=r(KLe," (XLM-RoBERTa model)"),KLe.forEach(t),xSo=i(j),Tb=n(j,"LI",{});var ZLe=s(Tb);Ufe=n(ZLe,"STRONG",{});var Oit=s(Ufe);$So=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),kSo=r(ZLe," \u2014 "),xG=n(ZLe,"A",{href:!0});var Vit=s(xG);SSo=r(Vit,"XLMRobertaXLForSequenceClassification"),Vit.forEach(t),RSo=r(ZLe," (XLM-RoBERTa-XL model)"),ZLe.forEach(t),PSo=i(j),Mb=n(j,"LI",{});var e8e=s(Mb);Jfe=n(e8e,"STRONG",{});var Xit=s(Jfe);BSo=r(Xit,"xlnet"),Xit.forEach(t),ISo=r(e8e," \u2014 "),$G=n(e8e,"A",{href:!0});var zit=s($G);qSo=r(zit,"XLNetForSequenceClassification"),zit.forEach(t),NSo=r(e8e," (XLNet model)"),e8e.forEach(t),jSo=i(j),Eb=n(j,"LI",{});var o8e=s(Eb);Yfe=n(o8e,"STRONG",{});var Wit=s(Yfe);DSo=r(Wit,"yoso"),Wit.forEach(t),GSo=r(o8e," \u2014 "),kG=n(o8e,"A",{href:!0});var Qit=s(kG);OSo=r(Qit,"YosoForSequenceClassification"),Qit.forEach(t),VSo=r(o8e," (YOSO model)"),o8e.forEach(t),j.forEach(t),XSo=i(sa),Cb=n(sa,"P",{});var r8e=s(Cb);zSo=r(r8e,"The model is set in evaluation mode by default using "),Kfe=n(r8e,"CODE",{});var Hit=s(Kfe);WSo=r(Hit,"model.eval()"),Hit.forEach(t),QSo=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(r8e,"CODE",{});var Uit=s(Zfe);HSo=r(Uit,"model.train()"),Uit.forEach(t),r8e.forEach(t),USo=i(sa),T(wb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),xqe=i(f),Vi=n(f,"H2",{class:!0});var Rje=s(Vi);Ab=n(Rje,"A",{id:!0,class:!0,href:!0});var Jit=s(Ab);eme=n(Jit,"SPAN",{});var Yit=s(eme);T(uA.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),JSo=i(Rje),ome=n(Rje,"SPAN",{});var Kit=s(ome);YSo=r(Kit,"AutoModelForMultipleChoice"),Kit.forEach(t),Rje.forEach(t),$qe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(bA.$$.fragment,Qs),KSo=i(Qs),Xi=n(Qs,"P",{});var tZ=s(Xi);ZSo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SG=n(tZ,"A",{href:!0});var Zit=s(SG);eRo=r(Zit,"from_pretrained()"),Zit.forEach(t),oRo=r(tZ," class method or the "),RG=n(tZ,"A",{href:!0});var edt=s(RG);rRo=r(edt,"from_config()"),edt.forEach(t),tRo=r(tZ,` class
method.`),tZ.forEach(t),aRo=i(Qs),vA=n(Qs,"P",{});var Pje=s(vA);nRo=r(Pje,"This class cannot be instantiated directly using "),rme=n(Pje,"CODE",{});var odt=s(rme);sRo=r(odt,"__init__()"),odt.forEach(t),lRo=r(Pje," (throws an error)."),Pje.forEach(t),iRo=i(Qs),dt=n(Qs,"DIV",{class:!0});var k3=s(dt);T(FA.$$.fragment,k3),dRo=i(k3),tme=n(k3,"P",{});var rdt=s(tme);cRo=r(rdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rdt.forEach(t),fRo=i(k3),zi=n(k3,"P",{});var aZ=s(zi);mRo=r(aZ,`Note:
Loading a model from its configuration file does `),ame=n(aZ,"STRONG",{});var tdt=s(ame);gRo=r(tdt,"not"),tdt.forEach(t),hRo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(aZ,"A",{href:!0});var adt=s(PG);pRo=r(adt,"from_pretrained()"),adt.forEach(t),_Ro=r(aZ," to load the model weights."),aZ.forEach(t),uRo=i(k3),T(yb.$$.fragment,k3),k3.forEach(t),bRo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(TA.$$.fragment,la),vRo=i(la),nme=n(la,"P",{});var ndt=s(nme);FRo=r(ndt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ndt.forEach(t),TRo=i(la),Pa=n(la,"P",{});var S3=s(Pa);MRo=r(S3,"The model class to instantiate is selected based on the "),sme=n(S3,"CODE",{});var sdt=s(sme);ERo=r(sdt,"model_type"),sdt.forEach(t),CRo=r(S3,` property of the config object (either
passed as an argument or loaded from `),lme=n(S3,"CODE",{});var ldt=s(lme);wRo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),ARo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(S3,"CODE",{});var idt=s(ime);yRo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),LRo=r(S3,":"),S3.forEach(t),xRo=i(la),Y=n(la,"UL",{});var K=s(Y);Lb=n(K,"LI",{});var t8e=s(Lb);dme=n(t8e,"STRONG",{});var ddt=s(dme);$Ro=r(ddt,"albert"),ddt.forEach(t),kRo=r(t8e," \u2014 "),BG=n(t8e,"A",{href:!0});var cdt=s(BG);SRo=r(cdt,"AlbertForMultipleChoice"),cdt.forEach(t),RRo=r(t8e," (ALBERT model)"),t8e.forEach(t),PRo=i(K),xb=n(K,"LI",{});var a8e=s(xb);cme=n(a8e,"STRONG",{});var fdt=s(cme);BRo=r(fdt,"bert"),fdt.forEach(t),IRo=r(a8e," \u2014 "),IG=n(a8e,"A",{href:!0});var mdt=s(IG);qRo=r(mdt,"BertForMultipleChoice"),mdt.forEach(t),NRo=r(a8e," (BERT model)"),a8e.forEach(t),jRo=i(K),$b=n(K,"LI",{});var n8e=s($b);fme=n(n8e,"STRONG",{});var gdt=s(fme);DRo=r(gdt,"big_bird"),gdt.forEach(t),GRo=r(n8e," \u2014 "),qG=n(n8e,"A",{href:!0});var hdt=s(qG);ORo=r(hdt,"BigBirdForMultipleChoice"),hdt.forEach(t),VRo=r(n8e," (BigBird model)"),n8e.forEach(t),XRo=i(K),kb=n(K,"LI",{});var s8e=s(kb);mme=n(s8e,"STRONG",{});var pdt=s(mme);zRo=r(pdt,"camembert"),pdt.forEach(t),WRo=r(s8e," \u2014 "),NG=n(s8e,"A",{href:!0});var _dt=s(NG);QRo=r(_dt,"CamembertForMultipleChoice"),_dt.forEach(t),HRo=r(s8e," (CamemBERT model)"),s8e.forEach(t),URo=i(K),Sb=n(K,"LI",{});var l8e=s(Sb);gme=n(l8e,"STRONG",{});var udt=s(gme);JRo=r(udt,"canine"),udt.forEach(t),YRo=r(l8e," \u2014 "),jG=n(l8e,"A",{href:!0});var bdt=s(jG);KRo=r(bdt,"CanineForMultipleChoice"),bdt.forEach(t),ZRo=r(l8e," (Canine model)"),l8e.forEach(t),ePo=i(K),Rb=n(K,"LI",{});var i8e=s(Rb);hme=n(i8e,"STRONG",{});var vdt=s(hme);oPo=r(vdt,"convbert"),vdt.forEach(t),rPo=r(i8e," \u2014 "),DG=n(i8e,"A",{href:!0});var Fdt=s(DG);tPo=r(Fdt,"ConvBertForMultipleChoice"),Fdt.forEach(t),aPo=r(i8e," (ConvBERT model)"),i8e.forEach(t),nPo=i(K),Pb=n(K,"LI",{});var d8e=s(Pb);pme=n(d8e,"STRONG",{});var Tdt=s(pme);sPo=r(Tdt,"data2vec-text"),Tdt.forEach(t),lPo=r(d8e," \u2014 "),GG=n(d8e,"A",{href:!0});var Mdt=s(GG);iPo=r(Mdt,"Data2VecTextForMultipleChoice"),Mdt.forEach(t),dPo=r(d8e," (Data2VecText model)"),d8e.forEach(t),cPo=i(K),Bb=n(K,"LI",{});var c8e=s(Bb);_me=n(c8e,"STRONG",{});var Edt=s(_me);fPo=r(Edt,"deberta-v2"),Edt.forEach(t),mPo=r(c8e," \u2014 "),OG=n(c8e,"A",{href:!0});var Cdt=s(OG);gPo=r(Cdt,"DebertaV2ForMultipleChoice"),Cdt.forEach(t),hPo=r(c8e," (DeBERTa-v2 model)"),c8e.forEach(t),pPo=i(K),Ib=n(K,"LI",{});var f8e=s(Ib);ume=n(f8e,"STRONG",{});var wdt=s(ume);_Po=r(wdt,"distilbert"),wdt.forEach(t),uPo=r(f8e," \u2014 "),VG=n(f8e,"A",{href:!0});var Adt=s(VG);bPo=r(Adt,"DistilBertForMultipleChoice"),Adt.forEach(t),vPo=r(f8e," (DistilBERT model)"),f8e.forEach(t),FPo=i(K),qb=n(K,"LI",{});var m8e=s(qb);bme=n(m8e,"STRONG",{});var ydt=s(bme);TPo=r(ydt,"electra"),ydt.forEach(t),MPo=r(m8e," \u2014 "),XG=n(m8e,"A",{href:!0});var Ldt=s(XG);EPo=r(Ldt,"ElectraForMultipleChoice"),Ldt.forEach(t),CPo=r(m8e," (ELECTRA model)"),m8e.forEach(t),wPo=i(K),Nb=n(K,"LI",{});var g8e=s(Nb);vme=n(g8e,"STRONG",{});var xdt=s(vme);APo=r(xdt,"flaubert"),xdt.forEach(t),yPo=r(g8e," \u2014 "),zG=n(g8e,"A",{href:!0});var $dt=s(zG);LPo=r($dt,"FlaubertForMultipleChoice"),$dt.forEach(t),xPo=r(g8e," (FlauBERT model)"),g8e.forEach(t),$Po=i(K),jb=n(K,"LI",{});var h8e=s(jb);Fme=n(h8e,"STRONG",{});var kdt=s(Fme);kPo=r(kdt,"fnet"),kdt.forEach(t),SPo=r(h8e," \u2014 "),WG=n(h8e,"A",{href:!0});var Sdt=s(WG);RPo=r(Sdt,"FNetForMultipleChoice"),Sdt.forEach(t),PPo=r(h8e," (FNet model)"),h8e.forEach(t),BPo=i(K),Db=n(K,"LI",{});var p8e=s(Db);Tme=n(p8e,"STRONG",{});var Rdt=s(Tme);IPo=r(Rdt,"funnel"),Rdt.forEach(t),qPo=r(p8e," \u2014 "),QG=n(p8e,"A",{href:!0});var Pdt=s(QG);NPo=r(Pdt,"FunnelForMultipleChoice"),Pdt.forEach(t),jPo=r(p8e," (Funnel Transformer model)"),p8e.forEach(t),DPo=i(K),Gb=n(K,"LI",{});var _8e=s(Gb);Mme=n(_8e,"STRONG",{});var Bdt=s(Mme);GPo=r(Bdt,"ibert"),Bdt.forEach(t),OPo=r(_8e," \u2014 "),HG=n(_8e,"A",{href:!0});var Idt=s(HG);VPo=r(Idt,"IBertForMultipleChoice"),Idt.forEach(t),XPo=r(_8e," (I-BERT model)"),_8e.forEach(t),zPo=i(K),Ob=n(K,"LI",{});var u8e=s(Ob);Eme=n(u8e,"STRONG",{});var qdt=s(Eme);WPo=r(qdt,"longformer"),qdt.forEach(t),QPo=r(u8e," \u2014 "),UG=n(u8e,"A",{href:!0});var Ndt=s(UG);HPo=r(Ndt,"LongformerForMultipleChoice"),Ndt.forEach(t),UPo=r(u8e," (Longformer model)"),u8e.forEach(t),JPo=i(K),Vb=n(K,"LI",{});var b8e=s(Vb);Cme=n(b8e,"STRONG",{});var jdt=s(Cme);YPo=r(jdt,"megatron-bert"),jdt.forEach(t),KPo=r(b8e," \u2014 "),JG=n(b8e,"A",{href:!0});var Ddt=s(JG);ZPo=r(Ddt,"MegatronBertForMultipleChoice"),Ddt.forEach(t),eBo=r(b8e," (MegatronBert model)"),b8e.forEach(t),oBo=i(K),Xb=n(K,"LI",{});var v8e=s(Xb);wme=n(v8e,"STRONG",{});var Gdt=s(wme);rBo=r(Gdt,"mobilebert"),Gdt.forEach(t),tBo=r(v8e," \u2014 "),YG=n(v8e,"A",{href:!0});var Odt=s(YG);aBo=r(Odt,"MobileBertForMultipleChoice"),Odt.forEach(t),nBo=r(v8e," (MobileBERT model)"),v8e.forEach(t),sBo=i(K),zb=n(K,"LI",{});var F8e=s(zb);Ame=n(F8e,"STRONG",{});var Vdt=s(Ame);lBo=r(Vdt,"mpnet"),Vdt.forEach(t),iBo=r(F8e," \u2014 "),KG=n(F8e,"A",{href:!0});var Xdt=s(KG);dBo=r(Xdt,"MPNetForMultipleChoice"),Xdt.forEach(t),cBo=r(F8e," (MPNet model)"),F8e.forEach(t),fBo=i(K),Wb=n(K,"LI",{});var T8e=s(Wb);yme=n(T8e,"STRONG",{});var zdt=s(yme);mBo=r(zdt,"nystromformer"),zdt.forEach(t),gBo=r(T8e," \u2014 "),ZG=n(T8e,"A",{href:!0});var Wdt=s(ZG);hBo=r(Wdt,"NystromformerForMultipleChoice"),Wdt.forEach(t),pBo=r(T8e," (Nystromformer model)"),T8e.forEach(t),_Bo=i(K),Qb=n(K,"LI",{});var M8e=s(Qb);Lme=n(M8e,"STRONG",{});var Qdt=s(Lme);uBo=r(Qdt,"qdqbert"),Qdt.forEach(t),bBo=r(M8e," \u2014 "),eO=n(M8e,"A",{href:!0});var Hdt=s(eO);vBo=r(Hdt,"QDQBertForMultipleChoice"),Hdt.forEach(t),FBo=r(M8e," (QDQBert model)"),M8e.forEach(t),TBo=i(K),Hb=n(K,"LI",{});var E8e=s(Hb);xme=n(E8e,"STRONG",{});var Udt=s(xme);MBo=r(Udt,"rembert"),Udt.forEach(t),EBo=r(E8e," \u2014 "),oO=n(E8e,"A",{href:!0});var Jdt=s(oO);CBo=r(Jdt,"RemBertForMultipleChoice"),Jdt.forEach(t),wBo=r(E8e," (RemBERT model)"),E8e.forEach(t),ABo=i(K),Ub=n(K,"LI",{});var C8e=s(Ub);$me=n(C8e,"STRONG",{});var Ydt=s($me);yBo=r(Ydt,"roberta"),Ydt.forEach(t),LBo=r(C8e," \u2014 "),rO=n(C8e,"A",{href:!0});var Kdt=s(rO);xBo=r(Kdt,"RobertaForMultipleChoice"),Kdt.forEach(t),$Bo=r(C8e," (RoBERTa model)"),C8e.forEach(t),kBo=i(K),Jb=n(K,"LI",{});var w8e=s(Jb);kme=n(w8e,"STRONG",{});var Zdt=s(kme);SBo=r(Zdt,"roformer"),Zdt.forEach(t),RBo=r(w8e," \u2014 "),tO=n(w8e,"A",{href:!0});var ect=s(tO);PBo=r(ect,"RoFormerForMultipleChoice"),ect.forEach(t),BBo=r(w8e," (RoFormer model)"),w8e.forEach(t),IBo=i(K),Yb=n(K,"LI",{});var A8e=s(Yb);Sme=n(A8e,"STRONG",{});var oct=s(Sme);qBo=r(oct,"squeezebert"),oct.forEach(t),NBo=r(A8e," \u2014 "),aO=n(A8e,"A",{href:!0});var rct=s(aO);jBo=r(rct,"SqueezeBertForMultipleChoice"),rct.forEach(t),DBo=r(A8e," (SqueezeBERT model)"),A8e.forEach(t),GBo=i(K),Kb=n(K,"LI",{});var y8e=s(Kb);Rme=n(y8e,"STRONG",{});var tct=s(Rme);OBo=r(tct,"xlm"),tct.forEach(t),VBo=r(y8e," \u2014 "),nO=n(y8e,"A",{href:!0});var act=s(nO);XBo=r(act,"XLMForMultipleChoice"),act.forEach(t),zBo=r(y8e," (XLM model)"),y8e.forEach(t),WBo=i(K),Zb=n(K,"LI",{});var L8e=s(Zb);Pme=n(L8e,"STRONG",{});var nct=s(Pme);QBo=r(nct,"xlm-roberta"),nct.forEach(t),HBo=r(L8e," \u2014 "),sO=n(L8e,"A",{href:!0});var sct=s(sO);UBo=r(sct,"XLMRobertaForMultipleChoice"),sct.forEach(t),JBo=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),YBo=i(K),ev=n(K,"LI",{});var x8e=s(ev);Bme=n(x8e,"STRONG",{});var lct=s(Bme);KBo=r(lct,"xlm-roberta-xl"),lct.forEach(t),ZBo=r(x8e," \u2014 "),lO=n(x8e,"A",{href:!0});var ict=s(lO);eIo=r(ict,"XLMRobertaXLForMultipleChoice"),ict.forEach(t),oIo=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),rIo=i(K),ov=n(K,"LI",{});var $8e=s(ov);Ime=n($8e,"STRONG",{});var dct=s(Ime);tIo=r(dct,"xlnet"),dct.forEach(t),aIo=r($8e," \u2014 "),iO=n($8e,"A",{href:!0});var cct=s(iO);nIo=r(cct,"XLNetForMultipleChoice"),cct.forEach(t),sIo=r($8e," (XLNet model)"),$8e.forEach(t),lIo=i(K),rv=n(K,"LI",{});var k8e=s(rv);qme=n(k8e,"STRONG",{});var fct=s(qme);iIo=r(fct,"yoso"),fct.forEach(t),dIo=r(k8e," \u2014 "),dO=n(k8e,"A",{href:!0});var mct=s(dO);cIo=r(mct,"YosoForMultipleChoice"),mct.forEach(t),fIo=r(k8e," (YOSO model)"),k8e.forEach(t),K.forEach(t),mIo=i(la),tv=n(la,"P",{});var S8e=s(tv);gIo=r(S8e,"The model is set in evaluation mode by default using "),Nme=n(S8e,"CODE",{});var gct=s(Nme);hIo=r(gct,"model.eval()"),gct.forEach(t),pIo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(S8e,"CODE",{});var hct=s(jme);_Io=r(hct,"model.train()"),hct.forEach(t),S8e.forEach(t),uIo=i(la),T(av.$$.fragment,la),la.forEach(t),Qs.forEach(t),kqe=i(f),Wi=n(f,"H2",{class:!0});var Bje=s(Wi);nv=n(Bje,"A",{id:!0,class:!0,href:!0});var pct=s(nv);Dme=n(pct,"SPAN",{});var _ct=s(Dme);T(MA.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),bIo=i(Bje),Gme=n(Bje,"SPAN",{});var uct=s(Gme);vIo=r(uct,"AutoModelForNextSentencePrediction"),uct.forEach(t),Bje.forEach(t),Sqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(EA.$$.fragment,Hs),FIo=i(Hs),Qi=n(Hs,"P",{});var nZ=s(Qi);TIo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cO=n(nZ,"A",{href:!0});var bct=s(cO);MIo=r(bct,"from_pretrained()"),bct.forEach(t),EIo=r(nZ," class method or the "),fO=n(nZ,"A",{href:!0});var vct=s(fO);CIo=r(vct,"from_config()"),vct.forEach(t),wIo=r(nZ,` class
method.`),nZ.forEach(t),AIo=i(Hs),CA=n(Hs,"P",{});var Ije=s(CA);yIo=r(Ije,"This class cannot be instantiated directly using "),Ome=n(Ije,"CODE",{});var Fct=s(Ome);LIo=r(Fct,"__init__()"),Fct.forEach(t),xIo=r(Ije," (throws an error)."),Ije.forEach(t),$Io=i(Hs),ct=n(Hs,"DIV",{class:!0});var R3=s(ct);T(wA.$$.fragment,R3),kIo=i(R3),Vme=n(R3,"P",{});var Tct=s(Vme);SIo=r(Tct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tct.forEach(t),RIo=i(R3),Hi=n(R3,"P",{});var sZ=s(Hi);PIo=r(sZ,`Note:
Loading a model from its configuration file does `),Xme=n(sZ,"STRONG",{});var Mct=s(Xme);BIo=r(Mct,"not"),Mct.forEach(t),IIo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(sZ,"A",{href:!0});var Ect=s(mO);qIo=r(Ect,"from_pretrained()"),Ect.forEach(t),NIo=r(sZ," to load the model weights."),sZ.forEach(t),jIo=i(R3),T(sv.$$.fragment,R3),R3.forEach(t),DIo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(AA.$$.fragment,ia),GIo=i(ia),zme=n(ia,"P",{});var Cct=s(zme);OIo=r(Cct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cct.forEach(t),VIo=i(ia),Ba=n(ia,"P",{});var P3=s(Ba);XIo=r(P3,"The model class to instantiate is selected based on the "),Wme=n(P3,"CODE",{});var wct=s(Wme);zIo=r(wct,"model_type"),wct.forEach(t),WIo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Qme=n(P3,"CODE",{});var Act=s(Qme);QIo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),HIo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(P3,"CODE",{});var yct=s(Hme);UIo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),JIo=r(P3,":"),P3.forEach(t),YIo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);lv=n(Us,"LI",{});var R8e=s(lv);Ume=n(R8e,"STRONG",{});var Lct=s(Ume);KIo=r(Lct,"bert"),Lct.forEach(t),ZIo=r(R8e," \u2014 "),gO=n(R8e,"A",{href:!0});var xct=s(gO);eqo=r(xct,"BertForNextSentencePrediction"),xct.forEach(t),oqo=r(R8e," (BERT model)"),R8e.forEach(t),rqo=i(Us),iv=n(Us,"LI",{});var P8e=s(iv);Jme=n(P8e,"STRONG",{});var $ct=s(Jme);tqo=r($ct,"fnet"),$ct.forEach(t),aqo=r(P8e," \u2014 "),hO=n(P8e,"A",{href:!0});var kct=s(hO);nqo=r(kct,"FNetForNextSentencePrediction"),kct.forEach(t),sqo=r(P8e," (FNet model)"),P8e.forEach(t),lqo=i(Us),dv=n(Us,"LI",{});var B8e=s(dv);Yme=n(B8e,"STRONG",{});var Sct=s(Yme);iqo=r(Sct,"megatron-bert"),Sct.forEach(t),dqo=r(B8e," \u2014 "),pO=n(B8e,"A",{href:!0});var Rct=s(pO);cqo=r(Rct,"MegatronBertForNextSentencePrediction"),Rct.forEach(t),fqo=r(B8e," (MegatronBert model)"),B8e.forEach(t),mqo=i(Us),cv=n(Us,"LI",{});var I8e=s(cv);Kme=n(I8e,"STRONG",{});var Pct=s(Kme);gqo=r(Pct,"mobilebert"),Pct.forEach(t),hqo=r(I8e," \u2014 "),_O=n(I8e,"A",{href:!0});var Bct=s(_O);pqo=r(Bct,"MobileBertForNextSentencePrediction"),Bct.forEach(t),_qo=r(I8e," (MobileBERT model)"),I8e.forEach(t),uqo=i(Us),fv=n(Us,"LI",{});var q8e=s(fv);Zme=n(q8e,"STRONG",{});var Ict=s(Zme);bqo=r(Ict,"qdqbert"),Ict.forEach(t),vqo=r(q8e," \u2014 "),uO=n(q8e,"A",{href:!0});var qct=s(uO);Fqo=r(qct,"QDQBertForNextSentencePrediction"),qct.forEach(t),Tqo=r(q8e," (QDQBert model)"),q8e.forEach(t),Us.forEach(t),Mqo=i(ia),mv=n(ia,"P",{});var N8e=s(mv);Eqo=r(N8e,"The model is set in evaluation mode by default using "),ege=n(N8e,"CODE",{});var Nct=s(ege);Cqo=r(Nct,"model.eval()"),Nct.forEach(t),wqo=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(N8e,"CODE",{});var jct=s(oge);Aqo=r(jct,"model.train()"),jct.forEach(t),N8e.forEach(t),yqo=i(ia),T(gv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Rqe=i(f),Ui=n(f,"H2",{class:!0});var qje=s(Ui);hv=n(qje,"A",{id:!0,class:!0,href:!0});var Dct=s(hv);rge=n(Dct,"SPAN",{});var Gct=s(rge);T(yA.$$.fragment,Gct),Gct.forEach(t),Dct.forEach(t),Lqo=i(qje),tge=n(qje,"SPAN",{});var Oct=s(tge);xqo=r(Oct,"AutoModelForTokenClassification"),Oct.forEach(t),qje.forEach(t),Pqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(LA.$$.fragment,Js),$qo=i(Js),Ji=n(Js,"P",{});var lZ=s(Ji);kqo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bO=n(lZ,"A",{href:!0});var Vct=s(bO);Sqo=r(Vct,"from_pretrained()"),Vct.forEach(t),Rqo=r(lZ," class method or the "),vO=n(lZ,"A",{href:!0});var Xct=s(vO);Pqo=r(Xct,"from_config()"),Xct.forEach(t),Bqo=r(lZ,` class
method.`),lZ.forEach(t),Iqo=i(Js),xA=n(Js,"P",{});var Nje=s(xA);qqo=r(Nje,"This class cannot be instantiated directly using "),age=n(Nje,"CODE",{});var zct=s(age);Nqo=r(zct,"__init__()"),zct.forEach(t),jqo=r(Nje," (throws an error)."),Nje.forEach(t),Dqo=i(Js),ft=n(Js,"DIV",{class:!0});var B3=s(ft);T($A.$$.fragment,B3),Gqo=i(B3),nge=n(B3,"P",{});var Wct=s(nge);Oqo=r(Wct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wct.forEach(t),Vqo=i(B3),Yi=n(B3,"P",{});var iZ=s(Yi);Xqo=r(iZ,`Note:
Loading a model from its configuration file does `),sge=n(iZ,"STRONG",{});var Qct=s(sge);zqo=r(Qct,"not"),Qct.forEach(t),Wqo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(iZ,"A",{href:!0});var Hct=s(FO);Qqo=r(Hct,"from_pretrained()"),Hct.forEach(t),Hqo=r(iZ," to load the model weights."),iZ.forEach(t),Uqo=i(B3),T(pv.$$.fragment,B3),B3.forEach(t),Jqo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(kA.$$.fragment,da),Yqo=i(da),lge=n(da,"P",{});var Uct=s(lge);Kqo=r(Uct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uct.forEach(t),Zqo=i(da),Ia=n(da,"P",{});var I3=s(Ia);eNo=r(I3,"The model class to instantiate is selected based on the "),ige=n(I3,"CODE",{});var Jct=s(ige);oNo=r(Jct,"model_type"),Jct.forEach(t),rNo=r(I3,` property of the config object (either
passed as an argument or loaded from `),dge=n(I3,"CODE",{});var Yct=s(dge);tNo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),aNo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(I3,"CODE",{});var Kct=s(cge);nNo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),sNo=r(I3,":"),I3.forEach(t),lNo=i(da),U=n(da,"UL",{});var J=s(U);_v=n(J,"LI",{});var j8e=s(_v);fge=n(j8e,"STRONG",{});var Zct=s(fge);iNo=r(Zct,"albert"),Zct.forEach(t),dNo=r(j8e," \u2014 "),TO=n(j8e,"A",{href:!0});var eft=s(TO);cNo=r(eft,"AlbertForTokenClassification"),eft.forEach(t),fNo=r(j8e," (ALBERT model)"),j8e.forEach(t),mNo=i(J),uv=n(J,"LI",{});var D8e=s(uv);mge=n(D8e,"STRONG",{});var oft=s(mge);gNo=r(oft,"bert"),oft.forEach(t),hNo=r(D8e," \u2014 "),MO=n(D8e,"A",{href:!0});var rft=s(MO);pNo=r(rft,"BertForTokenClassification"),rft.forEach(t),_No=r(D8e," (BERT model)"),D8e.forEach(t),uNo=i(J),bv=n(J,"LI",{});var G8e=s(bv);gge=n(G8e,"STRONG",{});var tft=s(gge);bNo=r(tft,"big_bird"),tft.forEach(t),vNo=r(G8e," \u2014 "),EO=n(G8e,"A",{href:!0});var aft=s(EO);FNo=r(aft,"BigBirdForTokenClassification"),aft.forEach(t),TNo=r(G8e," (BigBird model)"),G8e.forEach(t),MNo=i(J),vv=n(J,"LI",{});var O8e=s(vv);hge=n(O8e,"STRONG",{});var nft=s(hge);ENo=r(nft,"camembert"),nft.forEach(t),CNo=r(O8e," \u2014 "),CO=n(O8e,"A",{href:!0});var sft=s(CO);wNo=r(sft,"CamembertForTokenClassification"),sft.forEach(t),ANo=r(O8e," (CamemBERT model)"),O8e.forEach(t),yNo=i(J),Fv=n(J,"LI",{});var V8e=s(Fv);pge=n(V8e,"STRONG",{});var lft=s(pge);LNo=r(lft,"canine"),lft.forEach(t),xNo=r(V8e," \u2014 "),wO=n(V8e,"A",{href:!0});var ift=s(wO);$No=r(ift,"CanineForTokenClassification"),ift.forEach(t),kNo=r(V8e," (Canine model)"),V8e.forEach(t),SNo=i(J),Tv=n(J,"LI",{});var X8e=s(Tv);_ge=n(X8e,"STRONG",{});var dft=s(_ge);RNo=r(dft,"convbert"),dft.forEach(t),PNo=r(X8e," \u2014 "),AO=n(X8e,"A",{href:!0});var cft=s(AO);BNo=r(cft,"ConvBertForTokenClassification"),cft.forEach(t),INo=r(X8e," (ConvBERT model)"),X8e.forEach(t),qNo=i(J),Mv=n(J,"LI",{});var z8e=s(Mv);uge=n(z8e,"STRONG",{});var fft=s(uge);NNo=r(fft,"data2vec-text"),fft.forEach(t),jNo=r(z8e," \u2014 "),yO=n(z8e,"A",{href:!0});var mft=s(yO);DNo=r(mft,"Data2VecTextForTokenClassification"),mft.forEach(t),GNo=r(z8e," (Data2VecText model)"),z8e.forEach(t),ONo=i(J),Ev=n(J,"LI",{});var W8e=s(Ev);bge=n(W8e,"STRONG",{});var gft=s(bge);VNo=r(gft,"deberta"),gft.forEach(t),XNo=r(W8e," \u2014 "),LO=n(W8e,"A",{href:!0});var hft=s(LO);zNo=r(hft,"DebertaForTokenClassification"),hft.forEach(t),WNo=r(W8e," (DeBERTa model)"),W8e.forEach(t),QNo=i(J),Cv=n(J,"LI",{});var Q8e=s(Cv);vge=n(Q8e,"STRONG",{});var pft=s(vge);HNo=r(pft,"deberta-v2"),pft.forEach(t),UNo=r(Q8e," \u2014 "),xO=n(Q8e,"A",{href:!0});var _ft=s(xO);JNo=r(_ft,"DebertaV2ForTokenClassification"),_ft.forEach(t),YNo=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),KNo=i(J),wv=n(J,"LI",{});var H8e=s(wv);Fge=n(H8e,"STRONG",{});var uft=s(Fge);ZNo=r(uft,"distilbert"),uft.forEach(t),ejo=r(H8e," \u2014 "),$O=n(H8e,"A",{href:!0});var bft=s($O);ojo=r(bft,"DistilBertForTokenClassification"),bft.forEach(t),rjo=r(H8e," (DistilBERT model)"),H8e.forEach(t),tjo=i(J),Av=n(J,"LI",{});var U8e=s(Av);Tge=n(U8e,"STRONG",{});var vft=s(Tge);ajo=r(vft,"electra"),vft.forEach(t),njo=r(U8e," \u2014 "),kO=n(U8e,"A",{href:!0});var Fft=s(kO);sjo=r(Fft,"ElectraForTokenClassification"),Fft.forEach(t),ljo=r(U8e," (ELECTRA model)"),U8e.forEach(t),ijo=i(J),yv=n(J,"LI",{});var J8e=s(yv);Mge=n(J8e,"STRONG",{});var Tft=s(Mge);djo=r(Tft,"flaubert"),Tft.forEach(t),cjo=r(J8e," \u2014 "),SO=n(J8e,"A",{href:!0});var Mft=s(SO);fjo=r(Mft,"FlaubertForTokenClassification"),Mft.forEach(t),mjo=r(J8e," (FlauBERT model)"),J8e.forEach(t),gjo=i(J),Lv=n(J,"LI",{});var Y8e=s(Lv);Ege=n(Y8e,"STRONG",{});var Eft=s(Ege);hjo=r(Eft,"fnet"),Eft.forEach(t),pjo=r(Y8e," \u2014 "),RO=n(Y8e,"A",{href:!0});var Cft=s(RO);_jo=r(Cft,"FNetForTokenClassification"),Cft.forEach(t),ujo=r(Y8e," (FNet model)"),Y8e.forEach(t),bjo=i(J),xv=n(J,"LI",{});var K8e=s(xv);Cge=n(K8e,"STRONG",{});var wft=s(Cge);vjo=r(wft,"funnel"),wft.forEach(t),Fjo=r(K8e," \u2014 "),PO=n(K8e,"A",{href:!0});var Aft=s(PO);Tjo=r(Aft,"FunnelForTokenClassification"),Aft.forEach(t),Mjo=r(K8e," (Funnel Transformer model)"),K8e.forEach(t),Ejo=i(J),$v=n(J,"LI",{});var Z8e=s($v);wge=n(Z8e,"STRONG",{});var yft=s(wge);Cjo=r(yft,"gpt2"),yft.forEach(t),wjo=r(Z8e," \u2014 "),BO=n(Z8e,"A",{href:!0});var Lft=s(BO);Ajo=r(Lft,"GPT2ForTokenClassification"),Lft.forEach(t),yjo=r(Z8e," (OpenAI GPT-2 model)"),Z8e.forEach(t),Ljo=i(J),kv=n(J,"LI",{});var exe=s(kv);Age=n(exe,"STRONG",{});var xft=s(Age);xjo=r(xft,"ibert"),xft.forEach(t),$jo=r(exe," \u2014 "),IO=n(exe,"A",{href:!0});var $ft=s(IO);kjo=r($ft,"IBertForTokenClassification"),$ft.forEach(t),Sjo=r(exe," (I-BERT model)"),exe.forEach(t),Rjo=i(J),Sv=n(J,"LI",{});var oxe=s(Sv);yge=n(oxe,"STRONG",{});var kft=s(yge);Pjo=r(kft,"layoutlm"),kft.forEach(t),Bjo=r(oxe," \u2014 "),qO=n(oxe,"A",{href:!0});var Sft=s(qO);Ijo=r(Sft,"LayoutLMForTokenClassification"),Sft.forEach(t),qjo=r(oxe," (LayoutLM model)"),oxe.forEach(t),Njo=i(J),Rv=n(J,"LI",{});var rxe=s(Rv);Lge=n(rxe,"STRONG",{});var Rft=s(Lge);jjo=r(Rft,"layoutlmv2"),Rft.forEach(t),Djo=r(rxe," \u2014 "),NO=n(rxe,"A",{href:!0});var Pft=s(NO);Gjo=r(Pft,"LayoutLMv2ForTokenClassification"),Pft.forEach(t),Ojo=r(rxe," (LayoutLMv2 model)"),rxe.forEach(t),Vjo=i(J),Pv=n(J,"LI",{});var txe=s(Pv);xge=n(txe,"STRONG",{});var Bft=s(xge);Xjo=r(Bft,"longformer"),Bft.forEach(t),zjo=r(txe," \u2014 "),jO=n(txe,"A",{href:!0});var Ift=s(jO);Wjo=r(Ift,"LongformerForTokenClassification"),Ift.forEach(t),Qjo=r(txe," (Longformer model)"),txe.forEach(t),Hjo=i(J),Bv=n(J,"LI",{});var axe=s(Bv);$ge=n(axe,"STRONG",{});var qft=s($ge);Ujo=r(qft,"megatron-bert"),qft.forEach(t),Jjo=r(axe," \u2014 "),DO=n(axe,"A",{href:!0});var Nft=s(DO);Yjo=r(Nft,"MegatronBertForTokenClassification"),Nft.forEach(t),Kjo=r(axe," (MegatronBert model)"),axe.forEach(t),Zjo=i(J),Iv=n(J,"LI",{});var nxe=s(Iv);kge=n(nxe,"STRONG",{});var jft=s(kge);eDo=r(jft,"mobilebert"),jft.forEach(t),oDo=r(nxe," \u2014 "),GO=n(nxe,"A",{href:!0});var Dft=s(GO);rDo=r(Dft,"MobileBertForTokenClassification"),Dft.forEach(t),tDo=r(nxe," (MobileBERT model)"),nxe.forEach(t),aDo=i(J),qv=n(J,"LI",{});var sxe=s(qv);Sge=n(sxe,"STRONG",{});var Gft=s(Sge);nDo=r(Gft,"mpnet"),Gft.forEach(t),sDo=r(sxe," \u2014 "),OO=n(sxe,"A",{href:!0});var Oft=s(OO);lDo=r(Oft,"MPNetForTokenClassification"),Oft.forEach(t),iDo=r(sxe," (MPNet model)"),sxe.forEach(t),dDo=i(J),Nv=n(J,"LI",{});var lxe=s(Nv);Rge=n(lxe,"STRONG",{});var Vft=s(Rge);cDo=r(Vft,"nystromformer"),Vft.forEach(t),fDo=r(lxe," \u2014 "),VO=n(lxe,"A",{href:!0});var Xft=s(VO);mDo=r(Xft,"NystromformerForTokenClassification"),Xft.forEach(t),gDo=r(lxe," (Nystromformer model)"),lxe.forEach(t),hDo=i(J),jv=n(J,"LI",{});var ixe=s(jv);Pge=n(ixe,"STRONG",{});var zft=s(Pge);pDo=r(zft,"qdqbert"),zft.forEach(t),_Do=r(ixe," \u2014 "),XO=n(ixe,"A",{href:!0});var Wft=s(XO);uDo=r(Wft,"QDQBertForTokenClassification"),Wft.forEach(t),bDo=r(ixe," (QDQBert model)"),ixe.forEach(t),vDo=i(J),Dv=n(J,"LI",{});var dxe=s(Dv);Bge=n(dxe,"STRONG",{});var Qft=s(Bge);FDo=r(Qft,"rembert"),Qft.forEach(t),TDo=r(dxe," \u2014 "),zO=n(dxe,"A",{href:!0});var Hft=s(zO);MDo=r(Hft,"RemBertForTokenClassification"),Hft.forEach(t),EDo=r(dxe," (RemBERT model)"),dxe.forEach(t),CDo=i(J),Gv=n(J,"LI",{});var cxe=s(Gv);Ige=n(cxe,"STRONG",{});var Uft=s(Ige);wDo=r(Uft,"roberta"),Uft.forEach(t),ADo=r(cxe," \u2014 "),WO=n(cxe,"A",{href:!0});var Jft=s(WO);yDo=r(Jft,"RobertaForTokenClassification"),Jft.forEach(t),LDo=r(cxe," (RoBERTa model)"),cxe.forEach(t),xDo=i(J),Ov=n(J,"LI",{});var fxe=s(Ov);qge=n(fxe,"STRONG",{});var Yft=s(qge);$Do=r(Yft,"roformer"),Yft.forEach(t),kDo=r(fxe," \u2014 "),QO=n(fxe,"A",{href:!0});var Kft=s(QO);SDo=r(Kft,"RoFormerForTokenClassification"),Kft.forEach(t),RDo=r(fxe," (RoFormer model)"),fxe.forEach(t),PDo=i(J),Vv=n(J,"LI",{});var mxe=s(Vv);Nge=n(mxe,"STRONG",{});var Zft=s(Nge);BDo=r(Zft,"squeezebert"),Zft.forEach(t),IDo=r(mxe," \u2014 "),HO=n(mxe,"A",{href:!0});var emt=s(HO);qDo=r(emt,"SqueezeBertForTokenClassification"),emt.forEach(t),NDo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),jDo=i(J),Xv=n(J,"LI",{});var gxe=s(Xv);jge=n(gxe,"STRONG",{});var omt=s(jge);DDo=r(omt,"xlm"),omt.forEach(t),GDo=r(gxe," \u2014 "),UO=n(gxe,"A",{href:!0});var rmt=s(UO);ODo=r(rmt,"XLMForTokenClassification"),rmt.forEach(t),VDo=r(gxe," (XLM model)"),gxe.forEach(t),XDo=i(J),zv=n(J,"LI",{});var hxe=s(zv);Dge=n(hxe,"STRONG",{});var tmt=s(Dge);zDo=r(tmt,"xlm-roberta"),tmt.forEach(t),WDo=r(hxe," \u2014 "),JO=n(hxe,"A",{href:!0});var amt=s(JO);QDo=r(amt,"XLMRobertaForTokenClassification"),amt.forEach(t),HDo=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),UDo=i(J),Wv=n(J,"LI",{});var pxe=s(Wv);Gge=n(pxe,"STRONG",{});var nmt=s(Gge);JDo=r(nmt,"xlm-roberta-xl"),nmt.forEach(t),YDo=r(pxe," \u2014 "),YO=n(pxe,"A",{href:!0});var smt=s(YO);KDo=r(smt,"XLMRobertaXLForTokenClassification"),smt.forEach(t),ZDo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),eGo=i(J),Qv=n(J,"LI",{});var _xe=s(Qv);Oge=n(_xe,"STRONG",{});var lmt=s(Oge);oGo=r(lmt,"xlnet"),lmt.forEach(t),rGo=r(_xe," \u2014 "),KO=n(_xe,"A",{href:!0});var imt=s(KO);tGo=r(imt,"XLNetForTokenClassification"),imt.forEach(t),aGo=r(_xe," (XLNet model)"),_xe.forEach(t),nGo=i(J),Hv=n(J,"LI",{});var uxe=s(Hv);Vge=n(uxe,"STRONG",{});var dmt=s(Vge);sGo=r(dmt,"yoso"),dmt.forEach(t),lGo=r(uxe," \u2014 "),ZO=n(uxe,"A",{href:!0});var cmt=s(ZO);iGo=r(cmt,"YosoForTokenClassification"),cmt.forEach(t),dGo=r(uxe," (YOSO model)"),uxe.forEach(t),J.forEach(t),cGo=i(da),Uv=n(da,"P",{});var bxe=s(Uv);fGo=r(bxe,"The model is set in evaluation mode by default using "),Xge=n(bxe,"CODE",{});var fmt=s(Xge);mGo=r(fmt,"model.eval()"),fmt.forEach(t),gGo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(bxe,"CODE",{});var mmt=s(zge);hGo=r(mmt,"model.train()"),mmt.forEach(t),bxe.forEach(t),pGo=i(da),T(Jv.$$.fragment,da),da.forEach(t),Js.forEach(t),Bqe=i(f),Ki=n(f,"H2",{class:!0});var jje=s(Ki);Yv=n(jje,"A",{id:!0,class:!0,href:!0});var gmt=s(Yv);Wge=n(gmt,"SPAN",{});var hmt=s(Wge);T(SA.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),_Go=i(jje),Qge=n(jje,"SPAN",{});var pmt=s(Qge);uGo=r(pmt,"AutoModelForQuestionAnswering"),pmt.forEach(t),jje.forEach(t),Iqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(RA.$$.fragment,Ys),bGo=i(Ys),Zi=n(Ys,"P",{});var dZ=s(Zi);vGo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eV=n(dZ,"A",{href:!0});var _mt=s(eV);FGo=r(_mt,"from_pretrained()"),_mt.forEach(t),TGo=r(dZ," class method or the "),oV=n(dZ,"A",{href:!0});var umt=s(oV);MGo=r(umt,"from_config()"),umt.forEach(t),EGo=r(dZ,` class
method.`),dZ.forEach(t),CGo=i(Ys),PA=n(Ys,"P",{});var Dje=s(PA);wGo=r(Dje,"This class cannot be instantiated directly using "),Hge=n(Dje,"CODE",{});var bmt=s(Hge);AGo=r(bmt,"__init__()"),bmt.forEach(t),yGo=r(Dje," (throws an error)."),Dje.forEach(t),LGo=i(Ys),mt=n(Ys,"DIV",{class:!0});var q3=s(mt);T(BA.$$.fragment,q3),xGo=i(q3),Uge=n(q3,"P",{});var vmt=s(Uge);$Go=r(vmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vmt.forEach(t),kGo=i(q3),ed=n(q3,"P",{});var cZ=s(ed);SGo=r(cZ,`Note:
Loading a model from its configuration file does `),Jge=n(cZ,"STRONG",{});var Fmt=s(Jge);RGo=r(Fmt,"not"),Fmt.forEach(t),PGo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(cZ,"A",{href:!0});var Tmt=s(rV);BGo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),IGo=r(cZ," to load the model weights."),cZ.forEach(t),qGo=i(q3),T(Kv.$$.fragment,q3),q3.forEach(t),NGo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(IA.$$.fragment,ca),jGo=i(ca),Yge=n(ca,"P",{});var Mmt=s(Yge);DGo=r(Mmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mmt.forEach(t),GGo=i(ca),qa=n(ca,"P",{});var N3=s(qa);OGo=r(N3,"The model class to instantiate is selected based on the "),Kge=n(N3,"CODE",{});var Emt=s(Kge);VGo=r(Emt,"model_type"),Emt.forEach(t),XGo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Zge=n(N3,"CODE",{});var Cmt=s(Zge);zGo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),WGo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(N3,"CODE",{});var wmt=s(ehe);QGo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),HGo=r(N3,":"),N3.forEach(t),UGo=i(ca),V=n(ca,"UL",{});var X=s(V);Zv=n(X,"LI",{});var vxe=s(Zv);ohe=n(vxe,"STRONG",{});var Amt=s(ohe);JGo=r(Amt,"albert"),Amt.forEach(t),YGo=r(vxe," \u2014 "),tV=n(vxe,"A",{href:!0});var ymt=s(tV);KGo=r(ymt,"AlbertForQuestionAnswering"),ymt.forEach(t),ZGo=r(vxe," (ALBERT model)"),vxe.forEach(t),eOo=i(X),eF=n(X,"LI",{});var Fxe=s(eF);rhe=n(Fxe,"STRONG",{});var Lmt=s(rhe);oOo=r(Lmt,"bart"),Lmt.forEach(t),rOo=r(Fxe," \u2014 "),aV=n(Fxe,"A",{href:!0});var xmt=s(aV);tOo=r(xmt,"BartForQuestionAnswering"),xmt.forEach(t),aOo=r(Fxe," (BART model)"),Fxe.forEach(t),nOo=i(X),oF=n(X,"LI",{});var Txe=s(oF);the=n(Txe,"STRONG",{});var $mt=s(the);sOo=r($mt,"bert"),$mt.forEach(t),lOo=r(Txe," \u2014 "),nV=n(Txe,"A",{href:!0});var kmt=s(nV);iOo=r(kmt,"BertForQuestionAnswering"),kmt.forEach(t),dOo=r(Txe," (BERT model)"),Txe.forEach(t),cOo=i(X),rF=n(X,"LI",{});var Mxe=s(rF);ahe=n(Mxe,"STRONG",{});var Smt=s(ahe);fOo=r(Smt,"big_bird"),Smt.forEach(t),mOo=r(Mxe," \u2014 "),sV=n(Mxe,"A",{href:!0});var Rmt=s(sV);gOo=r(Rmt,"BigBirdForQuestionAnswering"),Rmt.forEach(t),hOo=r(Mxe," (BigBird model)"),Mxe.forEach(t),pOo=i(X),tF=n(X,"LI",{});var Exe=s(tF);nhe=n(Exe,"STRONG",{});var Pmt=s(nhe);_Oo=r(Pmt,"bigbird_pegasus"),Pmt.forEach(t),uOo=r(Exe," \u2014 "),lV=n(Exe,"A",{href:!0});var Bmt=s(lV);bOo=r(Bmt,"BigBirdPegasusForQuestionAnswering"),Bmt.forEach(t),vOo=r(Exe," (BigBirdPegasus model)"),Exe.forEach(t),FOo=i(X),aF=n(X,"LI",{});var Cxe=s(aF);she=n(Cxe,"STRONG",{});var Imt=s(she);TOo=r(Imt,"camembert"),Imt.forEach(t),MOo=r(Cxe," \u2014 "),iV=n(Cxe,"A",{href:!0});var qmt=s(iV);EOo=r(qmt,"CamembertForQuestionAnswering"),qmt.forEach(t),COo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),wOo=i(X),nF=n(X,"LI",{});var wxe=s(nF);lhe=n(wxe,"STRONG",{});var Nmt=s(lhe);AOo=r(Nmt,"canine"),Nmt.forEach(t),yOo=r(wxe," \u2014 "),dV=n(wxe,"A",{href:!0});var jmt=s(dV);LOo=r(jmt,"CanineForQuestionAnswering"),jmt.forEach(t),xOo=r(wxe," (Canine model)"),wxe.forEach(t),$Oo=i(X),sF=n(X,"LI",{});var Axe=s(sF);ihe=n(Axe,"STRONG",{});var Dmt=s(ihe);kOo=r(Dmt,"convbert"),Dmt.forEach(t),SOo=r(Axe," \u2014 "),cV=n(Axe,"A",{href:!0});var Gmt=s(cV);ROo=r(Gmt,"ConvBertForQuestionAnswering"),Gmt.forEach(t),POo=r(Axe," (ConvBERT model)"),Axe.forEach(t),BOo=i(X),lF=n(X,"LI",{});var yxe=s(lF);dhe=n(yxe,"STRONG",{});var Omt=s(dhe);IOo=r(Omt,"data2vec-text"),Omt.forEach(t),qOo=r(yxe," \u2014 "),fV=n(yxe,"A",{href:!0});var Vmt=s(fV);NOo=r(Vmt,"Data2VecTextForQuestionAnswering"),Vmt.forEach(t),jOo=r(yxe," (Data2VecText model)"),yxe.forEach(t),DOo=i(X),iF=n(X,"LI",{});var Lxe=s(iF);che=n(Lxe,"STRONG",{});var Xmt=s(che);GOo=r(Xmt,"deberta"),Xmt.forEach(t),OOo=r(Lxe," \u2014 "),mV=n(Lxe,"A",{href:!0});var zmt=s(mV);VOo=r(zmt,"DebertaForQuestionAnswering"),zmt.forEach(t),XOo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),zOo=i(X),dF=n(X,"LI",{});var xxe=s(dF);fhe=n(xxe,"STRONG",{});var Wmt=s(fhe);WOo=r(Wmt,"deberta-v2"),Wmt.forEach(t),QOo=r(xxe," \u2014 "),gV=n(xxe,"A",{href:!0});var Qmt=s(gV);HOo=r(Qmt,"DebertaV2ForQuestionAnswering"),Qmt.forEach(t),UOo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),JOo=i(X),cF=n(X,"LI",{});var $xe=s(cF);mhe=n($xe,"STRONG",{});var Hmt=s(mhe);YOo=r(Hmt,"distilbert"),Hmt.forEach(t),KOo=r($xe," \u2014 "),hV=n($xe,"A",{href:!0});var Umt=s(hV);ZOo=r(Umt,"DistilBertForQuestionAnswering"),Umt.forEach(t),eVo=r($xe," (DistilBERT model)"),$xe.forEach(t),oVo=i(X),fF=n(X,"LI",{});var kxe=s(fF);ghe=n(kxe,"STRONG",{});var Jmt=s(ghe);rVo=r(Jmt,"electra"),Jmt.forEach(t),tVo=r(kxe," \u2014 "),pV=n(kxe,"A",{href:!0});var Ymt=s(pV);aVo=r(Ymt,"ElectraForQuestionAnswering"),Ymt.forEach(t),nVo=r(kxe," (ELECTRA model)"),kxe.forEach(t),sVo=i(X),mF=n(X,"LI",{});var Sxe=s(mF);hhe=n(Sxe,"STRONG",{});var Kmt=s(hhe);lVo=r(Kmt,"flaubert"),Kmt.forEach(t),iVo=r(Sxe," \u2014 "),_V=n(Sxe,"A",{href:!0});var Zmt=s(_V);dVo=r(Zmt,"FlaubertForQuestionAnsweringSimple"),Zmt.forEach(t),cVo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),fVo=i(X),gF=n(X,"LI",{});var Rxe=s(gF);phe=n(Rxe,"STRONG",{});var egt=s(phe);mVo=r(egt,"fnet"),egt.forEach(t),gVo=r(Rxe," \u2014 "),uV=n(Rxe,"A",{href:!0});var ogt=s(uV);hVo=r(ogt,"FNetForQuestionAnswering"),ogt.forEach(t),pVo=r(Rxe," (FNet model)"),Rxe.forEach(t),_Vo=i(X),hF=n(X,"LI",{});var Pxe=s(hF);_he=n(Pxe,"STRONG",{});var rgt=s(_he);uVo=r(rgt,"funnel"),rgt.forEach(t),bVo=r(Pxe," \u2014 "),bV=n(Pxe,"A",{href:!0});var tgt=s(bV);vVo=r(tgt,"FunnelForQuestionAnswering"),tgt.forEach(t),FVo=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),TVo=i(X),pF=n(X,"LI",{});var Bxe=s(pF);uhe=n(Bxe,"STRONG",{});var agt=s(uhe);MVo=r(agt,"gptj"),agt.forEach(t),EVo=r(Bxe," \u2014 "),vV=n(Bxe,"A",{href:!0});var ngt=s(vV);CVo=r(ngt,"GPTJForQuestionAnswering"),ngt.forEach(t),wVo=r(Bxe," (GPT-J model)"),Bxe.forEach(t),AVo=i(X),_F=n(X,"LI",{});var Ixe=s(_F);bhe=n(Ixe,"STRONG",{});var sgt=s(bhe);yVo=r(sgt,"ibert"),sgt.forEach(t),LVo=r(Ixe," \u2014 "),FV=n(Ixe,"A",{href:!0});var lgt=s(FV);xVo=r(lgt,"IBertForQuestionAnswering"),lgt.forEach(t),$Vo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),kVo=i(X),uF=n(X,"LI",{});var qxe=s(uF);vhe=n(qxe,"STRONG",{});var igt=s(vhe);SVo=r(igt,"layoutlmv2"),igt.forEach(t),RVo=r(qxe," \u2014 "),TV=n(qxe,"A",{href:!0});var dgt=s(TV);PVo=r(dgt,"LayoutLMv2ForQuestionAnswering"),dgt.forEach(t),BVo=r(qxe," (LayoutLMv2 model)"),qxe.forEach(t),IVo=i(X),bF=n(X,"LI",{});var Nxe=s(bF);Fhe=n(Nxe,"STRONG",{});var cgt=s(Fhe);qVo=r(cgt,"led"),cgt.forEach(t),NVo=r(Nxe," \u2014 "),MV=n(Nxe,"A",{href:!0});var fgt=s(MV);jVo=r(fgt,"LEDForQuestionAnswering"),fgt.forEach(t),DVo=r(Nxe," (LED model)"),Nxe.forEach(t),GVo=i(X),vF=n(X,"LI",{});var jxe=s(vF);The=n(jxe,"STRONG",{});var mgt=s(The);OVo=r(mgt,"longformer"),mgt.forEach(t),VVo=r(jxe," \u2014 "),EV=n(jxe,"A",{href:!0});var ggt=s(EV);XVo=r(ggt,"LongformerForQuestionAnswering"),ggt.forEach(t),zVo=r(jxe," (Longformer model)"),jxe.forEach(t),WVo=i(X),FF=n(X,"LI",{});var Dxe=s(FF);Mhe=n(Dxe,"STRONG",{});var hgt=s(Mhe);QVo=r(hgt,"lxmert"),hgt.forEach(t),HVo=r(Dxe," \u2014 "),CV=n(Dxe,"A",{href:!0});var pgt=s(CV);UVo=r(pgt,"LxmertForQuestionAnswering"),pgt.forEach(t),JVo=r(Dxe," (LXMERT model)"),Dxe.forEach(t),YVo=i(X),TF=n(X,"LI",{});var Gxe=s(TF);Ehe=n(Gxe,"STRONG",{});var _gt=s(Ehe);KVo=r(_gt,"mbart"),_gt.forEach(t),ZVo=r(Gxe," \u2014 "),wV=n(Gxe,"A",{href:!0});var ugt=s(wV);eXo=r(ugt,"MBartForQuestionAnswering"),ugt.forEach(t),oXo=r(Gxe," (mBART model)"),Gxe.forEach(t),rXo=i(X),MF=n(X,"LI",{});var Oxe=s(MF);Che=n(Oxe,"STRONG",{});var bgt=s(Che);tXo=r(bgt,"megatron-bert"),bgt.forEach(t),aXo=r(Oxe," \u2014 "),AV=n(Oxe,"A",{href:!0});var vgt=s(AV);nXo=r(vgt,"MegatronBertForQuestionAnswering"),vgt.forEach(t),sXo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),lXo=i(X),EF=n(X,"LI",{});var Vxe=s(EF);whe=n(Vxe,"STRONG",{});var Fgt=s(whe);iXo=r(Fgt,"mobilebert"),Fgt.forEach(t),dXo=r(Vxe," \u2014 "),yV=n(Vxe,"A",{href:!0});var Tgt=s(yV);cXo=r(Tgt,"MobileBertForQuestionAnswering"),Tgt.forEach(t),fXo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),mXo=i(X),CF=n(X,"LI",{});var Xxe=s(CF);Ahe=n(Xxe,"STRONG",{});var Mgt=s(Ahe);gXo=r(Mgt,"mpnet"),Mgt.forEach(t),hXo=r(Xxe," \u2014 "),LV=n(Xxe,"A",{href:!0});var Egt=s(LV);pXo=r(Egt,"MPNetForQuestionAnswering"),Egt.forEach(t),_Xo=r(Xxe," (MPNet model)"),Xxe.forEach(t),uXo=i(X),wF=n(X,"LI",{});var zxe=s(wF);yhe=n(zxe,"STRONG",{});var Cgt=s(yhe);bXo=r(Cgt,"nystromformer"),Cgt.forEach(t),vXo=r(zxe," \u2014 "),xV=n(zxe,"A",{href:!0});var wgt=s(xV);FXo=r(wgt,"NystromformerForQuestionAnswering"),wgt.forEach(t),TXo=r(zxe," (Nystromformer model)"),zxe.forEach(t),MXo=i(X),AF=n(X,"LI",{});var Wxe=s(AF);Lhe=n(Wxe,"STRONG",{});var Agt=s(Lhe);EXo=r(Agt,"qdqbert"),Agt.forEach(t),CXo=r(Wxe," \u2014 "),$V=n(Wxe,"A",{href:!0});var ygt=s($V);wXo=r(ygt,"QDQBertForQuestionAnswering"),ygt.forEach(t),AXo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),yXo=i(X),yF=n(X,"LI",{});var Qxe=s(yF);xhe=n(Qxe,"STRONG",{});var Lgt=s(xhe);LXo=r(Lgt,"reformer"),Lgt.forEach(t),xXo=r(Qxe," \u2014 "),kV=n(Qxe,"A",{href:!0});var xgt=s(kV);$Xo=r(xgt,"ReformerForQuestionAnswering"),xgt.forEach(t),kXo=r(Qxe," (Reformer model)"),Qxe.forEach(t),SXo=i(X),LF=n(X,"LI",{});var Hxe=s(LF);$he=n(Hxe,"STRONG",{});var $gt=s($he);RXo=r($gt,"rembert"),$gt.forEach(t),PXo=r(Hxe," \u2014 "),SV=n(Hxe,"A",{href:!0});var kgt=s(SV);BXo=r(kgt,"RemBertForQuestionAnswering"),kgt.forEach(t),IXo=r(Hxe," (RemBERT model)"),Hxe.forEach(t),qXo=i(X),xF=n(X,"LI",{});var Uxe=s(xF);khe=n(Uxe,"STRONG",{});var Sgt=s(khe);NXo=r(Sgt,"roberta"),Sgt.forEach(t),jXo=r(Uxe," \u2014 "),RV=n(Uxe,"A",{href:!0});var Rgt=s(RV);DXo=r(Rgt,"RobertaForQuestionAnswering"),Rgt.forEach(t),GXo=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),OXo=i(X),$F=n(X,"LI",{});var Jxe=s($F);She=n(Jxe,"STRONG",{});var Pgt=s(She);VXo=r(Pgt,"roformer"),Pgt.forEach(t),XXo=r(Jxe," \u2014 "),PV=n(Jxe,"A",{href:!0});var Bgt=s(PV);zXo=r(Bgt,"RoFormerForQuestionAnswering"),Bgt.forEach(t),WXo=r(Jxe," (RoFormer model)"),Jxe.forEach(t),QXo=i(X),kF=n(X,"LI",{});var Yxe=s(kF);Rhe=n(Yxe,"STRONG",{});var Igt=s(Rhe);HXo=r(Igt,"splinter"),Igt.forEach(t),UXo=r(Yxe," \u2014 "),BV=n(Yxe,"A",{href:!0});var qgt=s(BV);JXo=r(qgt,"SplinterForQuestionAnswering"),qgt.forEach(t),YXo=r(Yxe," (Splinter model)"),Yxe.forEach(t),KXo=i(X),SF=n(X,"LI",{});var Kxe=s(SF);Phe=n(Kxe,"STRONG",{});var Ngt=s(Phe);ZXo=r(Ngt,"squeezebert"),Ngt.forEach(t),ezo=r(Kxe," \u2014 "),IV=n(Kxe,"A",{href:!0});var jgt=s(IV);ozo=r(jgt,"SqueezeBertForQuestionAnswering"),jgt.forEach(t),rzo=r(Kxe," (SqueezeBERT model)"),Kxe.forEach(t),tzo=i(X),RF=n(X,"LI",{});var Zxe=s(RF);Bhe=n(Zxe,"STRONG",{});var Dgt=s(Bhe);azo=r(Dgt,"xlm"),Dgt.forEach(t),nzo=r(Zxe," \u2014 "),qV=n(Zxe,"A",{href:!0});var Ggt=s(qV);szo=r(Ggt,"XLMForQuestionAnsweringSimple"),Ggt.forEach(t),lzo=r(Zxe," (XLM model)"),Zxe.forEach(t),izo=i(X),PF=n(X,"LI",{});var e$e=s(PF);Ihe=n(e$e,"STRONG",{});var Ogt=s(Ihe);dzo=r(Ogt,"xlm-roberta"),Ogt.forEach(t),czo=r(e$e," \u2014 "),NV=n(e$e,"A",{href:!0});var Vgt=s(NV);fzo=r(Vgt,"XLMRobertaForQuestionAnswering"),Vgt.forEach(t),mzo=r(e$e," (XLM-RoBERTa model)"),e$e.forEach(t),gzo=i(X),BF=n(X,"LI",{});var o$e=s(BF);qhe=n(o$e,"STRONG",{});var Xgt=s(qhe);hzo=r(Xgt,"xlm-roberta-xl"),Xgt.forEach(t),pzo=r(o$e," \u2014 "),jV=n(o$e,"A",{href:!0});var zgt=s(jV);_zo=r(zgt,"XLMRobertaXLForQuestionAnswering"),zgt.forEach(t),uzo=r(o$e," (XLM-RoBERTa-XL model)"),o$e.forEach(t),bzo=i(X),IF=n(X,"LI",{});var r$e=s(IF);Nhe=n(r$e,"STRONG",{});var Wgt=s(Nhe);vzo=r(Wgt,"xlnet"),Wgt.forEach(t),Fzo=r(r$e," \u2014 "),DV=n(r$e,"A",{href:!0});var Qgt=s(DV);Tzo=r(Qgt,"XLNetForQuestionAnsweringSimple"),Qgt.forEach(t),Mzo=r(r$e," (XLNet model)"),r$e.forEach(t),Ezo=i(X),qF=n(X,"LI",{});var t$e=s(qF);jhe=n(t$e,"STRONG",{});var Hgt=s(jhe);Czo=r(Hgt,"yoso"),Hgt.forEach(t),wzo=r(t$e," \u2014 "),GV=n(t$e,"A",{href:!0});var Ugt=s(GV);Azo=r(Ugt,"YosoForQuestionAnswering"),Ugt.forEach(t),yzo=r(t$e," (YOSO model)"),t$e.forEach(t),X.forEach(t),Lzo=i(ca),NF=n(ca,"P",{});var a$e=s(NF);xzo=r(a$e,"The model is set in evaluation mode by default using "),Dhe=n(a$e,"CODE",{});var Jgt=s(Dhe);$zo=r(Jgt,"model.eval()"),Jgt.forEach(t),kzo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(a$e,"CODE",{});var Ygt=s(Ghe);Szo=r(Ygt,"model.train()"),Ygt.forEach(t),a$e.forEach(t),Rzo=i(ca),T(jF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),qqe=i(f),od=n(f,"H2",{class:!0});var Gje=s(od);DF=n(Gje,"A",{id:!0,class:!0,href:!0});var Kgt=s(DF);Ohe=n(Kgt,"SPAN",{});var Zgt=s(Ohe);T(qA.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),Pzo=i(Gje),Vhe=n(Gje,"SPAN",{});var eht=s(Vhe);Bzo=r(eht,"AutoModelForTableQuestionAnswering"),eht.forEach(t),Gje.forEach(t),Nqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(NA.$$.fragment,Ks),Izo=i(Ks),rd=n(Ks,"P",{});var fZ=s(rd);qzo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OV=n(fZ,"A",{href:!0});var oht=s(OV);Nzo=r(oht,"from_pretrained()"),oht.forEach(t),jzo=r(fZ," class method or the "),VV=n(fZ,"A",{href:!0});var rht=s(VV);Dzo=r(rht,"from_config()"),rht.forEach(t),Gzo=r(fZ,` class
method.`),fZ.forEach(t),Ozo=i(Ks),jA=n(Ks,"P",{});var Oje=s(jA);Vzo=r(Oje,"This class cannot be instantiated directly using "),Xhe=n(Oje,"CODE",{});var tht=s(Xhe);Xzo=r(tht,"__init__()"),tht.forEach(t),zzo=r(Oje," (throws an error)."),Oje.forEach(t),Wzo=i(Ks),gt=n(Ks,"DIV",{class:!0});var j3=s(gt);T(DA.$$.fragment,j3),Qzo=i(j3),zhe=n(j3,"P",{});var aht=s(zhe);Hzo=r(aht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aht.forEach(t),Uzo=i(j3),td=n(j3,"P",{});var mZ=s(td);Jzo=r(mZ,`Note:
Loading a model from its configuration file does `),Whe=n(mZ,"STRONG",{});var nht=s(Whe);Yzo=r(nht,"not"),nht.forEach(t),Kzo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(mZ,"A",{href:!0});var sht=s(XV);Zzo=r(sht,"from_pretrained()"),sht.forEach(t),eWo=r(mZ," to load the model weights."),mZ.forEach(t),oWo=i(j3),T(GF.$$.fragment,j3),j3.forEach(t),rWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(GA.$$.fragment,fa),tWo=i(fa),Qhe=n(fa,"P",{});var lht=s(Qhe);aWo=r(lht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lht.forEach(t),nWo=i(fa),Na=n(fa,"P",{});var D3=s(Na);sWo=r(D3,"The model class to instantiate is selected based on the "),Hhe=n(D3,"CODE",{});var iht=s(Hhe);lWo=r(iht,"model_type"),iht.forEach(t),iWo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(D3,"CODE",{});var dht=s(Uhe);dWo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),cWo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(D3,"CODE",{});var cht=s(Jhe);fWo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),mWo=r(D3,":"),D3.forEach(t),gWo=i(fa),Yhe=n(fa,"UL",{});var fht=s(Yhe);OF=n(fht,"LI",{});var n$e=s(OF);Khe=n(n$e,"STRONG",{});var mht=s(Khe);hWo=r(mht,"tapas"),mht.forEach(t),pWo=r(n$e," \u2014 "),zV=n(n$e,"A",{href:!0});var ght=s(zV);_Wo=r(ght,"TapasForQuestionAnswering"),ght.forEach(t),uWo=r(n$e," (TAPAS model)"),n$e.forEach(t),fht.forEach(t),bWo=i(fa),VF=n(fa,"P",{});var s$e=s(VF);vWo=r(s$e,"The model is set in evaluation mode by default using "),Zhe=n(s$e,"CODE",{});var hht=s(Zhe);FWo=r(hht,"model.eval()"),hht.forEach(t),TWo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(s$e,"CODE",{});var pht=s(epe);MWo=r(pht,"model.train()"),pht.forEach(t),s$e.forEach(t),EWo=i(fa),T(XF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),jqe=i(f),ad=n(f,"H2",{class:!0});var Vje=s(ad);zF=n(Vje,"A",{id:!0,class:!0,href:!0});var _ht=s(zF);ope=n(_ht,"SPAN",{});var uht=s(ope);T(OA.$$.fragment,uht),uht.forEach(t),_ht.forEach(t),CWo=i(Vje),rpe=n(Vje,"SPAN",{});var bht=s(rpe);wWo=r(bht,"AutoModelForImageClassification"),bht.forEach(t),Vje.forEach(t),Dqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(VA.$$.fragment,Zs),AWo=i(Zs),nd=n(Zs,"P",{});var gZ=s(nd);yWo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(gZ,"A",{href:!0});var vht=s(WV);LWo=r(vht,"from_pretrained()"),vht.forEach(t),xWo=r(gZ," class method or the "),QV=n(gZ,"A",{href:!0});var Fht=s(QV);$Wo=r(Fht,"from_config()"),Fht.forEach(t),kWo=r(gZ,` class
method.`),gZ.forEach(t),SWo=i(Zs),XA=n(Zs,"P",{});var Xje=s(XA);RWo=r(Xje,"This class cannot be instantiated directly using "),tpe=n(Xje,"CODE",{});var Tht=s(tpe);PWo=r(Tht,"__init__()"),Tht.forEach(t),BWo=r(Xje," (throws an error)."),Xje.forEach(t),IWo=i(Zs),ht=n(Zs,"DIV",{class:!0});var G3=s(ht);T(zA.$$.fragment,G3),qWo=i(G3),ape=n(G3,"P",{});var Mht=s(ape);NWo=r(Mht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mht.forEach(t),jWo=i(G3),sd=n(G3,"P",{});var hZ=s(sd);DWo=r(hZ,`Note:
Loading a model from its configuration file does `),npe=n(hZ,"STRONG",{});var Eht=s(npe);GWo=r(Eht,"not"),Eht.forEach(t),OWo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(hZ,"A",{href:!0});var Cht=s(HV);VWo=r(Cht,"from_pretrained()"),Cht.forEach(t),XWo=r(hZ," to load the model weights."),hZ.forEach(t),zWo=i(G3),T(WF.$$.fragment,G3),G3.forEach(t),WWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(WA.$$.fragment,ma),QWo=i(ma),spe=n(ma,"P",{});var wht=s(spe);HWo=r(wht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wht.forEach(t),UWo=i(ma),ja=n(ma,"P",{});var O3=s(ja);JWo=r(O3,"The model class to instantiate is selected based on the "),lpe=n(O3,"CODE",{});var Aht=s(lpe);YWo=r(Aht,"model_type"),Aht.forEach(t),KWo=r(O3,` property of the config object (either
passed as an argument or loaded from `),ipe=n(O3,"CODE",{});var yht=s(ipe);ZWo=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),eQo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(O3,"CODE",{});var Lht=s(dpe);oQo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),rQo=r(O3,":"),O3.forEach(t),tQo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);QF=n(Ee,"LI",{});var l$e=s(QF);cpe=n(l$e,"STRONG",{});var xht=s(cpe);aQo=r(xht,"beit"),xht.forEach(t),nQo=r(l$e," \u2014 "),UV=n(l$e,"A",{href:!0});var $ht=s(UV);sQo=r($ht,"BeitForImageClassification"),$ht.forEach(t),lQo=r(l$e," (BEiT model)"),l$e.forEach(t),iQo=i(Ee),HF=n(Ee,"LI",{});var i$e=s(HF);fpe=n(i$e,"STRONG",{});var kht=s(fpe);dQo=r(kht,"convnext"),kht.forEach(t),cQo=r(i$e," \u2014 "),JV=n(i$e,"A",{href:!0});var Sht=s(JV);fQo=r(Sht,"ConvNextForImageClassification"),Sht.forEach(t),mQo=r(i$e," (ConvNext model)"),i$e.forEach(t),gQo=i(Ee),UF=n(Ee,"LI",{});var d$e=s(UF);mpe=n(d$e,"STRONG",{});var Rht=s(mpe);hQo=r(Rht,"data2vec-vision"),Rht.forEach(t),pQo=r(d$e," \u2014 "),YV=n(d$e,"A",{href:!0});var Pht=s(YV);_Qo=r(Pht,"Data2VecVisionForImageClassification"),Pht.forEach(t),uQo=r(d$e," (Data2VecVision model)"),d$e.forEach(t),bQo=i(Ee),Bs=n(Ee,"LI",{});var k$=s(Bs);gpe=n(k$,"STRONG",{});var Bht=s(gpe);vQo=r(Bht,"deit"),Bht.forEach(t),FQo=r(k$," \u2014 "),KV=n(k$,"A",{href:!0});var Iht=s(KV);TQo=r(Iht,"DeiTForImageClassification"),Iht.forEach(t),MQo=r(k$," or "),ZV=n(k$,"A",{href:!0});var qht=s(ZV);EQo=r(qht,"DeiTForImageClassificationWithTeacher"),qht.forEach(t),CQo=r(k$," (DeiT model)"),k$.forEach(t),wQo=i(Ee),JF=n(Ee,"LI",{});var c$e=s(JF);hpe=n(c$e,"STRONG",{});var Nht=s(hpe);AQo=r(Nht,"imagegpt"),Nht.forEach(t),yQo=r(c$e," \u2014 "),eX=n(c$e,"A",{href:!0});var jht=s(eX);LQo=r(jht,"ImageGPTForImageClassification"),jht.forEach(t),xQo=r(c$e," (ImageGPT model)"),c$e.forEach(t),$Qo=i(Ee),pt=n(Ee,"LI",{});var hf=s(pt);ppe=n(hf,"STRONG",{});var Dht=s(ppe);kQo=r(Dht,"perceiver"),Dht.forEach(t),SQo=r(hf," \u2014 "),oX=n(hf,"A",{href:!0});var Ght=s(oX);RQo=r(Ght,"PerceiverForImageClassificationLearned"),Ght.forEach(t),PQo=r(hf," or "),rX=n(hf,"A",{href:!0});var Oht=s(rX);BQo=r(Oht,"PerceiverForImageClassificationFourier"),Oht.forEach(t),IQo=r(hf," or "),tX=n(hf,"A",{href:!0});var Vht=s(tX);qQo=r(Vht,"PerceiverForImageClassificationConvProcessing"),Vht.forEach(t),NQo=r(hf," (Perceiver model)"),hf.forEach(t),jQo=i(Ee),YF=n(Ee,"LI",{});var f$e=s(YF);_pe=n(f$e,"STRONG",{});var Xht=s(_pe);DQo=r(Xht,"poolformer"),Xht.forEach(t),GQo=r(f$e," \u2014 "),aX=n(f$e,"A",{href:!0});var zht=s(aX);OQo=r(zht,"PoolFormerForImageClassification"),zht.forEach(t),VQo=r(f$e," (PoolFormer model)"),f$e.forEach(t),XQo=i(Ee),KF=n(Ee,"LI",{});var m$e=s(KF);upe=n(m$e,"STRONG",{});var Wht=s(upe);zQo=r(Wht,"regnet"),Wht.forEach(t),WQo=r(m$e," \u2014 "),nX=n(m$e,"A",{href:!0});var Qht=s(nX);QQo=r(Qht,"RegNetForImageClassification"),Qht.forEach(t),HQo=r(m$e," (RegNet model)"),m$e.forEach(t),UQo=i(Ee),ZF=n(Ee,"LI",{});var g$e=s(ZF);bpe=n(g$e,"STRONG",{});var Hht=s(bpe);JQo=r(Hht,"resnet"),Hht.forEach(t),YQo=r(g$e," \u2014 "),sX=n(g$e,"A",{href:!0});var Uht=s(sX);KQo=r(Uht,"ResNetForImageClassification"),Uht.forEach(t),ZQo=r(g$e," (ResNet model)"),g$e.forEach(t),eHo=i(Ee),e6=n(Ee,"LI",{});var h$e=s(e6);vpe=n(h$e,"STRONG",{});var Jht=s(vpe);oHo=r(Jht,"segformer"),Jht.forEach(t),rHo=r(h$e," \u2014 "),lX=n(h$e,"A",{href:!0});var Yht=s(lX);tHo=r(Yht,"SegformerForImageClassification"),Yht.forEach(t),aHo=r(h$e," (SegFormer model)"),h$e.forEach(t),nHo=i(Ee),o6=n(Ee,"LI",{});var p$e=s(o6);Fpe=n(p$e,"STRONG",{});var Kht=s(Fpe);sHo=r(Kht,"swin"),Kht.forEach(t),lHo=r(p$e," \u2014 "),iX=n(p$e,"A",{href:!0});var Zht=s(iX);iHo=r(Zht,"SwinForImageClassification"),Zht.forEach(t),dHo=r(p$e," (Swin model)"),p$e.forEach(t),cHo=i(Ee),r6=n(Ee,"LI",{});var _$e=s(r6);Tpe=n(_$e,"STRONG",{});var ept=s(Tpe);fHo=r(ept,"van"),ept.forEach(t),mHo=r(_$e," \u2014 "),dX=n(_$e,"A",{href:!0});var opt=s(dX);gHo=r(opt,"VanForImageClassification"),opt.forEach(t),hHo=r(_$e," (VAN model)"),_$e.forEach(t),pHo=i(Ee),t6=n(Ee,"LI",{});var u$e=s(t6);Mpe=n(u$e,"STRONG",{});var rpt=s(Mpe);_Ho=r(rpt,"vit"),rpt.forEach(t),uHo=r(u$e," \u2014 "),cX=n(u$e,"A",{href:!0});var tpt=s(cX);bHo=r(tpt,"ViTForImageClassification"),tpt.forEach(t),vHo=r(u$e," (ViT model)"),u$e.forEach(t),Ee.forEach(t),FHo=i(ma),a6=n(ma,"P",{});var b$e=s(a6);THo=r(b$e,"The model is set in evaluation mode by default using "),Epe=n(b$e,"CODE",{});var apt=s(Epe);MHo=r(apt,"model.eval()"),apt.forEach(t),EHo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(b$e,"CODE",{});var npt=s(Cpe);CHo=r(npt,"model.train()"),npt.forEach(t),b$e.forEach(t),wHo=i(ma),T(n6.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Gqe=i(f),ld=n(f,"H2",{class:!0});var zje=s(ld);s6=n(zje,"A",{id:!0,class:!0,href:!0});var spt=s(s6);wpe=n(spt,"SPAN",{});var lpt=s(wpe);T(QA.$$.fragment,lpt),lpt.forEach(t),spt.forEach(t),AHo=i(zje),Ape=n(zje,"SPAN",{});var ipt=s(Ape);yHo=r(ipt,"AutoModelForVision2Seq"),ipt.forEach(t),zje.forEach(t),Oqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(HA.$$.fragment,el),LHo=i(el),id=n(el,"P",{});var pZ=s(id);xHo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fX=n(pZ,"A",{href:!0});var dpt=s(fX);$Ho=r(dpt,"from_pretrained()"),dpt.forEach(t),kHo=r(pZ," class method or the "),mX=n(pZ,"A",{href:!0});var cpt=s(mX);SHo=r(cpt,"from_config()"),cpt.forEach(t),RHo=r(pZ,` class
method.`),pZ.forEach(t),PHo=i(el),UA=n(el,"P",{});var Wje=s(UA);BHo=r(Wje,"This class cannot be instantiated directly using "),ype=n(Wje,"CODE",{});var fpt=s(ype);IHo=r(fpt,"__init__()"),fpt.forEach(t),qHo=r(Wje," (throws an error)."),Wje.forEach(t),NHo=i(el),_t=n(el,"DIV",{class:!0});var V3=s(_t);T(JA.$$.fragment,V3),jHo=i(V3),Lpe=n(V3,"P",{});var mpt=s(Lpe);DHo=r(mpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mpt.forEach(t),GHo=i(V3),dd=n(V3,"P",{});var _Z=s(dd);OHo=r(_Z,`Note:
Loading a model from its configuration file does `),xpe=n(_Z,"STRONG",{});var gpt=s(xpe);VHo=r(gpt,"not"),gpt.forEach(t),XHo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(_Z,"A",{href:!0});var hpt=s(gX);zHo=r(hpt,"from_pretrained()"),hpt.forEach(t),WHo=r(_Z," to load the model weights."),_Z.forEach(t),QHo=i(V3),T(l6.$$.fragment,V3),V3.forEach(t),HHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(YA.$$.fragment,ga),UHo=i(ga),$pe=n(ga,"P",{});var ppt=s($pe);JHo=r(ppt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ppt.forEach(t),YHo=i(ga),Da=n(ga,"P",{});var X3=s(Da);KHo=r(X3,"The model class to instantiate is selected based on the "),kpe=n(X3,"CODE",{});var _pt=s(kpe);ZHo=r(_pt,"model_type"),_pt.forEach(t),eUo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Spe=n(X3,"CODE",{});var upt=s(Spe);oUo=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),rUo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(X3,"CODE",{});var bpt=s(Rpe);tUo=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),aUo=r(X3,":"),X3.forEach(t),nUo=i(ga),Ppe=n(ga,"UL",{});var vpt=s(Ppe);i6=n(vpt,"LI",{});var v$e=s(i6);Bpe=n(v$e,"STRONG",{});var Fpt=s(Bpe);sUo=r(Fpt,"vision-encoder-decoder"),Fpt.forEach(t),lUo=r(v$e," \u2014 "),hX=n(v$e,"A",{href:!0});var Tpt=s(hX);iUo=r(Tpt,"VisionEncoderDecoderModel"),Tpt.forEach(t),dUo=r(v$e," (Vision Encoder decoder model)"),v$e.forEach(t),vpt.forEach(t),cUo=i(ga),d6=n(ga,"P",{});var F$e=s(d6);fUo=r(F$e,"The model is set in evaluation mode by default using "),Ipe=n(F$e,"CODE",{});var Mpt=s(Ipe);mUo=r(Mpt,"model.eval()"),Mpt.forEach(t),gUo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(F$e,"CODE",{});var Ept=s(qpe);hUo=r(Ept,"model.train()"),Ept.forEach(t),F$e.forEach(t),pUo=i(ga),T(c6.$$.fragment,ga),ga.forEach(t),el.forEach(t),Vqe=i(f),cd=n(f,"H2",{class:!0});var Qje=s(cd);f6=n(Qje,"A",{id:!0,class:!0,href:!0});var Cpt=s(f6);Npe=n(Cpt,"SPAN",{});var wpt=s(Npe);T(KA.$$.fragment,wpt),wpt.forEach(t),Cpt.forEach(t),_Uo=i(Qje),jpe=n(Qje,"SPAN",{});var Apt=s(jpe);uUo=r(Apt,"AutoModelForAudioClassification"),Apt.forEach(t),Qje.forEach(t),Xqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(ZA.$$.fragment,ol),bUo=i(ol),fd=n(ol,"P",{});var uZ=s(fd);vUo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pX=n(uZ,"A",{href:!0});var ypt=s(pX);FUo=r(ypt,"from_pretrained()"),ypt.forEach(t),TUo=r(uZ," class method or the "),_X=n(uZ,"A",{href:!0});var Lpt=s(_X);MUo=r(Lpt,"from_config()"),Lpt.forEach(t),EUo=r(uZ,` class
method.`),uZ.forEach(t),CUo=i(ol),ey=n(ol,"P",{});var Hje=s(ey);wUo=r(Hje,"This class cannot be instantiated directly using "),Dpe=n(Hje,"CODE",{});var xpt=s(Dpe);AUo=r(xpt,"__init__()"),xpt.forEach(t),yUo=r(Hje," (throws an error)."),Hje.forEach(t),LUo=i(ol),ut=n(ol,"DIV",{class:!0});var z3=s(ut);T(oy.$$.fragment,z3),xUo=i(z3),Gpe=n(z3,"P",{});var $pt=s(Gpe);$Uo=r($pt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$pt.forEach(t),kUo=i(z3),md=n(z3,"P",{});var bZ=s(md);SUo=r(bZ,`Note:
Loading a model from its configuration file does `),Ope=n(bZ,"STRONG",{});var kpt=s(Ope);RUo=r(kpt,"not"),kpt.forEach(t),PUo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(bZ,"A",{href:!0});var Spt=s(uX);BUo=r(Spt,"from_pretrained()"),Spt.forEach(t),IUo=r(bZ," to load the model weights."),bZ.forEach(t),qUo=i(z3),T(m6.$$.fragment,z3),z3.forEach(t),NUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(ry.$$.fragment,ha),jUo=i(ha),Vpe=n(ha,"P",{});var Rpt=s(Vpe);DUo=r(Rpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rpt.forEach(t),GUo=i(ha),Ga=n(ha,"P",{});var W3=s(Ga);OUo=r(W3,"The model class to instantiate is selected based on the "),Xpe=n(W3,"CODE",{});var Ppt=s(Xpe);VUo=r(Ppt,"model_type"),Ppt.forEach(t),XUo=r(W3,` property of the config object (either
passed as an argument or loaded from `),zpe=n(W3,"CODE",{});var Bpt=s(zpe);zUo=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),WUo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(W3,"CODE",{});var Ipt=s(Wpe);QUo=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),HUo=r(W3,":"),W3.forEach(t),UUo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);g6=n(Ve,"LI",{});var T$e=s(g6);Qpe=n(T$e,"STRONG",{});var qpt=s(Qpe);JUo=r(qpt,"data2vec-audio"),qpt.forEach(t),YUo=r(T$e," \u2014 "),bX=n(T$e,"A",{href:!0});var Npt=s(bX);KUo=r(Npt,"Data2VecAudioForSequenceClassification"),Npt.forEach(t),ZUo=r(T$e," (Data2VecAudio model)"),T$e.forEach(t),eJo=i(Ve),h6=n(Ve,"LI",{});var M$e=s(h6);Hpe=n(M$e,"STRONG",{});var jpt=s(Hpe);oJo=r(jpt,"hubert"),jpt.forEach(t),rJo=r(M$e," \u2014 "),vX=n(M$e,"A",{href:!0});var Dpt=s(vX);tJo=r(Dpt,"HubertForSequenceClassification"),Dpt.forEach(t),aJo=r(M$e," (Hubert model)"),M$e.forEach(t),nJo=i(Ve),p6=n(Ve,"LI",{});var E$e=s(p6);Upe=n(E$e,"STRONG",{});var Gpt=s(Upe);sJo=r(Gpt,"sew"),Gpt.forEach(t),lJo=r(E$e," \u2014 "),FX=n(E$e,"A",{href:!0});var Opt=s(FX);iJo=r(Opt,"SEWForSequenceClassification"),Opt.forEach(t),dJo=r(E$e," (SEW model)"),E$e.forEach(t),cJo=i(Ve),_6=n(Ve,"LI",{});var C$e=s(_6);Jpe=n(C$e,"STRONG",{});var Vpt=s(Jpe);fJo=r(Vpt,"sew-d"),Vpt.forEach(t),mJo=r(C$e," \u2014 "),TX=n(C$e,"A",{href:!0});var Xpt=s(TX);gJo=r(Xpt,"SEWDForSequenceClassification"),Xpt.forEach(t),hJo=r(C$e," (SEW-D model)"),C$e.forEach(t),pJo=i(Ve),u6=n(Ve,"LI",{});var w$e=s(u6);Ype=n(w$e,"STRONG",{});var zpt=s(Ype);_Jo=r(zpt,"unispeech"),zpt.forEach(t),uJo=r(w$e," \u2014 "),MX=n(w$e,"A",{href:!0});var Wpt=s(MX);bJo=r(Wpt,"UniSpeechForSequenceClassification"),Wpt.forEach(t),vJo=r(w$e," (UniSpeech model)"),w$e.forEach(t),FJo=i(Ve),b6=n(Ve,"LI",{});var A$e=s(b6);Kpe=n(A$e,"STRONG",{});var Qpt=s(Kpe);TJo=r(Qpt,"unispeech-sat"),Qpt.forEach(t),MJo=r(A$e," \u2014 "),EX=n(A$e,"A",{href:!0});var Hpt=s(EX);EJo=r(Hpt,"UniSpeechSatForSequenceClassification"),Hpt.forEach(t),CJo=r(A$e," (UniSpeechSat model)"),A$e.forEach(t),wJo=i(Ve),v6=n(Ve,"LI",{});var y$e=s(v6);Zpe=n(y$e,"STRONG",{});var Upt=s(Zpe);AJo=r(Upt,"wav2vec2"),Upt.forEach(t),yJo=r(y$e," \u2014 "),CX=n(y$e,"A",{href:!0});var Jpt=s(CX);LJo=r(Jpt,"Wav2Vec2ForSequenceClassification"),Jpt.forEach(t),xJo=r(y$e," (Wav2Vec2 model)"),y$e.forEach(t),$Jo=i(Ve),F6=n(Ve,"LI",{});var L$e=s(F6);e_e=n(L$e,"STRONG",{});var Ypt=s(e_e);kJo=r(Ypt,"wav2vec2-conformer"),Ypt.forEach(t),SJo=r(L$e," \u2014 "),wX=n(L$e,"A",{href:!0});var Kpt=s(wX);RJo=r(Kpt,"Wav2Vec2ConformerForSequenceClassification"),Kpt.forEach(t),PJo=r(L$e," (Wav2Vec2-Conformer model)"),L$e.forEach(t),BJo=i(Ve),T6=n(Ve,"LI",{});var x$e=s(T6);o_e=n(x$e,"STRONG",{});var Zpt=s(o_e);IJo=r(Zpt,"wavlm"),Zpt.forEach(t),qJo=r(x$e," \u2014 "),AX=n(x$e,"A",{href:!0});var e_t=s(AX);NJo=r(e_t,"WavLMForSequenceClassification"),e_t.forEach(t),jJo=r(x$e," (WavLM model)"),x$e.forEach(t),Ve.forEach(t),DJo=i(ha),M6=n(ha,"P",{});var $$e=s(M6);GJo=r($$e,"The model is set in evaluation mode by default using "),r_e=n($$e,"CODE",{});var o_t=s(r_e);OJo=r(o_t,"model.eval()"),o_t.forEach(t),VJo=r($$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n($$e,"CODE",{});var r_t=s(t_e);XJo=r(r_t,"model.train()"),r_t.forEach(t),$$e.forEach(t),zJo=i(ha),T(E6.$$.fragment,ha),ha.forEach(t),ol.forEach(t),zqe=i(f),gd=n(f,"H2",{class:!0});var Uje=s(gd);C6=n(Uje,"A",{id:!0,class:!0,href:!0});var t_t=s(C6);a_e=n(t_t,"SPAN",{});var a_t=s(a_e);T(ty.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),WJo=i(Uje),n_e=n(Uje,"SPAN",{});var n_t=s(n_e);QJo=r(n_t,"AutoModelForAudioFrameClassification"),n_t.forEach(t),Uje.forEach(t),Wqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(ay.$$.fragment,rl),HJo=i(rl),hd=n(rl,"P",{});var vZ=s(hd);UJo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yX=n(vZ,"A",{href:!0});var s_t=s(yX);JJo=r(s_t,"from_pretrained()"),s_t.forEach(t),YJo=r(vZ," class method or the "),LX=n(vZ,"A",{href:!0});var l_t=s(LX);KJo=r(l_t,"from_config()"),l_t.forEach(t),ZJo=r(vZ,` class
method.`),vZ.forEach(t),eYo=i(rl),ny=n(rl,"P",{});var Jje=s(ny);oYo=r(Jje,"This class cannot be instantiated directly using "),s_e=n(Jje,"CODE",{});var i_t=s(s_e);rYo=r(i_t,"__init__()"),i_t.forEach(t),tYo=r(Jje," (throws an error)."),Jje.forEach(t),aYo=i(rl),bt=n(rl,"DIV",{class:!0});var Q3=s(bt);T(sy.$$.fragment,Q3),nYo=i(Q3),l_e=n(Q3,"P",{});var d_t=s(l_e);sYo=r(d_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),d_t.forEach(t),lYo=i(Q3),pd=n(Q3,"P",{});var FZ=s(pd);iYo=r(FZ,`Note:
Loading a model from its configuration file does `),i_e=n(FZ,"STRONG",{});var c_t=s(i_e);dYo=r(c_t,"not"),c_t.forEach(t),cYo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(FZ,"A",{href:!0});var f_t=s(xX);fYo=r(f_t,"from_pretrained()"),f_t.forEach(t),mYo=r(FZ," to load the model weights."),FZ.forEach(t),gYo=i(Q3),T(w6.$$.fragment,Q3),Q3.forEach(t),hYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(ly.$$.fragment,pa),pYo=i(pa),d_e=n(pa,"P",{});var m_t=s(d_e);_Yo=r(m_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),m_t.forEach(t),uYo=i(pa),Oa=n(pa,"P",{});var H3=s(Oa);bYo=r(H3,"The model class to instantiate is selected based on the "),c_e=n(H3,"CODE",{});var g_t=s(c_e);vYo=r(g_t,"model_type"),g_t.forEach(t),FYo=r(H3,` property of the config object (either
passed as an argument or loaded from `),f_e=n(H3,"CODE",{});var h_t=s(f_e);TYo=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),MYo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(H3,"CODE",{});var p_t=s(m_e);EYo=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),CYo=r(H3,":"),H3.forEach(t),wYo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);A6=n(tl,"LI",{});var k$e=s(A6);g_e=n(k$e,"STRONG",{});var __t=s(g_e);AYo=r(__t,"data2vec-audio"),__t.forEach(t),yYo=r(k$e," \u2014 "),$X=n(k$e,"A",{href:!0});var u_t=s($X);LYo=r(u_t,"Data2VecAudioForAudioFrameClassification"),u_t.forEach(t),xYo=r(k$e," (Data2VecAudio model)"),k$e.forEach(t),$Yo=i(tl),y6=n(tl,"LI",{});var S$e=s(y6);h_e=n(S$e,"STRONG",{});var b_t=s(h_e);kYo=r(b_t,"unispeech-sat"),b_t.forEach(t),SYo=r(S$e," \u2014 "),kX=n(S$e,"A",{href:!0});var v_t=s(kX);RYo=r(v_t,"UniSpeechSatForAudioFrameClassification"),v_t.forEach(t),PYo=r(S$e," (UniSpeechSat model)"),S$e.forEach(t),BYo=i(tl),L6=n(tl,"LI",{});var R$e=s(L6);p_e=n(R$e,"STRONG",{});var F_t=s(p_e);IYo=r(F_t,"wav2vec2"),F_t.forEach(t),qYo=r(R$e," \u2014 "),SX=n(R$e,"A",{href:!0});var T_t=s(SX);NYo=r(T_t,"Wav2Vec2ForAudioFrameClassification"),T_t.forEach(t),jYo=r(R$e," (Wav2Vec2 model)"),R$e.forEach(t),DYo=i(tl),x6=n(tl,"LI",{});var P$e=s(x6);__e=n(P$e,"STRONG",{});var M_t=s(__e);GYo=r(M_t,"wav2vec2-conformer"),M_t.forEach(t),OYo=r(P$e," \u2014 "),RX=n(P$e,"A",{href:!0});var E_t=s(RX);VYo=r(E_t,"Wav2Vec2ConformerForAudioFrameClassification"),E_t.forEach(t),XYo=r(P$e," (Wav2Vec2-Conformer model)"),P$e.forEach(t),zYo=i(tl),$6=n(tl,"LI",{});var B$e=s($6);u_e=n(B$e,"STRONG",{});var C_t=s(u_e);WYo=r(C_t,"wavlm"),C_t.forEach(t),QYo=r(B$e," \u2014 "),PX=n(B$e,"A",{href:!0});var w_t=s(PX);HYo=r(w_t,"WavLMForAudioFrameClassification"),w_t.forEach(t),UYo=r(B$e," (WavLM model)"),B$e.forEach(t),tl.forEach(t),JYo=i(pa),k6=n(pa,"P",{});var I$e=s(k6);YYo=r(I$e,"The model is set in evaluation mode by default using "),b_e=n(I$e,"CODE",{});var A_t=s(b_e);KYo=r(A_t,"model.eval()"),A_t.forEach(t),ZYo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(I$e,"CODE",{});var y_t=s(v_e);eKo=r(y_t,"model.train()"),y_t.forEach(t),I$e.forEach(t),oKo=i(pa),T(S6.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Qqe=i(f),_d=n(f,"H2",{class:!0});var Yje=s(_d);R6=n(Yje,"A",{id:!0,class:!0,href:!0});var L_t=s(R6);F_e=n(L_t,"SPAN",{});var x_t=s(F_e);T(iy.$$.fragment,x_t),x_t.forEach(t),L_t.forEach(t),rKo=i(Yje),T_e=n(Yje,"SPAN",{});var $_t=s(T_e);tKo=r($_t,"AutoModelForCTC"),$_t.forEach(t),Yje.forEach(t),Hqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(dy.$$.fragment,al),aKo=i(al),ud=n(al,"P",{});var TZ=s(ud);nKo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BX=n(TZ,"A",{href:!0});var k_t=s(BX);sKo=r(k_t,"from_pretrained()"),k_t.forEach(t),lKo=r(TZ," class method or the "),IX=n(TZ,"A",{href:!0});var S_t=s(IX);iKo=r(S_t,"from_config()"),S_t.forEach(t),dKo=r(TZ,` class
method.`),TZ.forEach(t),cKo=i(al),cy=n(al,"P",{});var Kje=s(cy);fKo=r(Kje,"This class cannot be instantiated directly using "),M_e=n(Kje,"CODE",{});var R_t=s(M_e);mKo=r(R_t,"__init__()"),R_t.forEach(t),gKo=r(Kje," (throws an error)."),Kje.forEach(t),hKo=i(al),vt=n(al,"DIV",{class:!0});var U3=s(vt);T(fy.$$.fragment,U3),pKo=i(U3),E_e=n(U3,"P",{});var P_t=s(E_e);_Ko=r(P_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),P_t.forEach(t),uKo=i(U3),bd=n(U3,"P",{});var MZ=s(bd);bKo=r(MZ,`Note:
Loading a model from its configuration file does `),C_e=n(MZ,"STRONG",{});var B_t=s(C_e);vKo=r(B_t,"not"),B_t.forEach(t),FKo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(MZ,"A",{href:!0});var I_t=s(qX);TKo=r(I_t,"from_pretrained()"),I_t.forEach(t),MKo=r(MZ," to load the model weights."),MZ.forEach(t),EKo=i(U3),T(P6.$$.fragment,U3),U3.forEach(t),CKo=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(my.$$.fragment,_a),wKo=i(_a),w_e=n(_a,"P",{});var q_t=s(w_e);AKo=r(q_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),q_t.forEach(t),yKo=i(_a),Va=n(_a,"P",{});var J3=s(Va);LKo=r(J3,"The model class to instantiate is selected based on the "),A_e=n(J3,"CODE",{});var N_t=s(A_e);xKo=r(N_t,"model_type"),N_t.forEach(t),$Ko=r(J3,` property of the config object (either
passed as an argument or loaded from `),y_e=n(J3,"CODE",{});var j_t=s(y_e);kKo=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),SKo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(J3,"CODE",{});var D_t=s(L_e);RKo=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),PKo=r(J3,":"),J3.forEach(t),BKo=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);B6=n(Xe,"LI",{});var q$e=s(B6);x_e=n(q$e,"STRONG",{});var G_t=s(x_e);IKo=r(G_t,"data2vec-audio"),G_t.forEach(t),qKo=r(q$e," \u2014 "),NX=n(q$e,"A",{href:!0});var O_t=s(NX);NKo=r(O_t,"Data2VecAudioForCTC"),O_t.forEach(t),jKo=r(q$e," (Data2VecAudio model)"),q$e.forEach(t),DKo=i(Xe),I6=n(Xe,"LI",{});var N$e=s(I6);$_e=n(N$e,"STRONG",{});var V_t=s($_e);GKo=r(V_t,"hubert"),V_t.forEach(t),OKo=r(N$e," \u2014 "),jX=n(N$e,"A",{href:!0});var X_t=s(jX);VKo=r(X_t,"HubertForCTC"),X_t.forEach(t),XKo=r(N$e," (Hubert model)"),N$e.forEach(t),zKo=i(Xe),q6=n(Xe,"LI",{});var j$e=s(q6);k_e=n(j$e,"STRONG",{});var z_t=s(k_e);WKo=r(z_t,"sew"),z_t.forEach(t),QKo=r(j$e," \u2014 "),DX=n(j$e,"A",{href:!0});var W_t=s(DX);HKo=r(W_t,"SEWForCTC"),W_t.forEach(t),UKo=r(j$e," (SEW model)"),j$e.forEach(t),JKo=i(Xe),N6=n(Xe,"LI",{});var D$e=s(N6);S_e=n(D$e,"STRONG",{});var Q_t=s(S_e);YKo=r(Q_t,"sew-d"),Q_t.forEach(t),KKo=r(D$e," \u2014 "),GX=n(D$e,"A",{href:!0});var H_t=s(GX);ZKo=r(H_t,"SEWDForCTC"),H_t.forEach(t),eZo=r(D$e," (SEW-D model)"),D$e.forEach(t),oZo=i(Xe),j6=n(Xe,"LI",{});var G$e=s(j6);R_e=n(G$e,"STRONG",{});var U_t=s(R_e);rZo=r(U_t,"unispeech"),U_t.forEach(t),tZo=r(G$e," \u2014 "),OX=n(G$e,"A",{href:!0});var J_t=s(OX);aZo=r(J_t,"UniSpeechForCTC"),J_t.forEach(t),nZo=r(G$e," (UniSpeech model)"),G$e.forEach(t),sZo=i(Xe),D6=n(Xe,"LI",{});var O$e=s(D6);P_e=n(O$e,"STRONG",{});var Y_t=s(P_e);lZo=r(Y_t,"unispeech-sat"),Y_t.forEach(t),iZo=r(O$e," \u2014 "),VX=n(O$e,"A",{href:!0});var K_t=s(VX);dZo=r(K_t,"UniSpeechSatForCTC"),K_t.forEach(t),cZo=r(O$e," (UniSpeechSat model)"),O$e.forEach(t),fZo=i(Xe),G6=n(Xe,"LI",{});var V$e=s(G6);B_e=n(V$e,"STRONG",{});var Z_t=s(B_e);mZo=r(Z_t,"wav2vec2"),Z_t.forEach(t),gZo=r(V$e," \u2014 "),XX=n(V$e,"A",{href:!0});var eut=s(XX);hZo=r(eut,"Wav2Vec2ForCTC"),eut.forEach(t),pZo=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),_Zo=i(Xe),O6=n(Xe,"LI",{});var X$e=s(O6);I_e=n(X$e,"STRONG",{});var out=s(I_e);uZo=r(out,"wav2vec2-conformer"),out.forEach(t),bZo=r(X$e," \u2014 "),zX=n(X$e,"A",{href:!0});var rut=s(zX);vZo=r(rut,"Wav2Vec2ConformerForCTC"),rut.forEach(t),FZo=r(X$e," (Wav2Vec2-Conformer model)"),X$e.forEach(t),TZo=i(Xe),V6=n(Xe,"LI",{});var z$e=s(V6);q_e=n(z$e,"STRONG",{});var tut=s(q_e);MZo=r(tut,"wavlm"),tut.forEach(t),EZo=r(z$e," \u2014 "),WX=n(z$e,"A",{href:!0});var aut=s(WX);CZo=r(aut,"WavLMForCTC"),aut.forEach(t),wZo=r(z$e," (WavLM model)"),z$e.forEach(t),Xe.forEach(t),AZo=i(_a),X6=n(_a,"P",{});var W$e=s(X6);yZo=r(W$e,"The model is set in evaluation mode by default using "),N_e=n(W$e,"CODE",{});var nut=s(N_e);LZo=r(nut,"model.eval()"),nut.forEach(t),xZo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(W$e,"CODE",{});var sut=s(j_e);$Zo=r(sut,"model.train()"),sut.forEach(t),W$e.forEach(t),kZo=i(_a),T(z6.$$.fragment,_a),_a.forEach(t),al.forEach(t),Uqe=i(f),vd=n(f,"H2",{class:!0});var Zje=s(vd);W6=n(Zje,"A",{id:!0,class:!0,href:!0});var lut=s(W6);D_e=n(lut,"SPAN",{});var iut=s(D_e);T(gy.$$.fragment,iut),iut.forEach(t),lut.forEach(t),SZo=i(Zje),G_e=n(Zje,"SPAN",{});var dut=s(G_e);RZo=r(dut,"AutoModelForSpeechSeq2Seq"),dut.forEach(t),Zje.forEach(t),Jqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(hy.$$.fragment,nl),PZo=i(nl),Fd=n(nl,"P",{});var EZ=s(Fd);BZo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QX=n(EZ,"A",{href:!0});var cut=s(QX);IZo=r(cut,"from_pretrained()"),cut.forEach(t),qZo=r(EZ," class method or the "),HX=n(EZ,"A",{href:!0});var fut=s(HX);NZo=r(fut,"from_config()"),fut.forEach(t),jZo=r(EZ,` class
method.`),EZ.forEach(t),DZo=i(nl),py=n(nl,"P",{});var eDe=s(py);GZo=r(eDe,"This class cannot be instantiated directly using "),O_e=n(eDe,"CODE",{});var mut=s(O_e);OZo=r(mut,"__init__()"),mut.forEach(t),VZo=r(eDe," (throws an error)."),eDe.forEach(t),XZo=i(nl),Ft=n(nl,"DIV",{class:!0});var Y3=s(Ft);T(_y.$$.fragment,Y3),zZo=i(Y3),V_e=n(Y3,"P",{});var gut=s(V_e);WZo=r(gut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gut.forEach(t),QZo=i(Y3),Td=n(Y3,"P",{});var CZ=s(Td);HZo=r(CZ,`Note:
Loading a model from its configuration file does `),X_e=n(CZ,"STRONG",{});var hut=s(X_e);UZo=r(hut,"not"),hut.forEach(t),JZo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(CZ,"A",{href:!0});var put=s(UX);YZo=r(put,"from_pretrained()"),put.forEach(t),KZo=r(CZ," to load the model weights."),CZ.forEach(t),ZZo=i(Y3),T(Q6.$$.fragment,Y3),Y3.forEach(t),eer=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(uy.$$.fragment,ua),oer=i(ua),z_e=n(ua,"P",{});var _ut=s(z_e);rer=r(_ut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_ut.forEach(t),ter=i(ua),Xa=n(ua,"P",{});var K3=s(Xa);aer=r(K3,"The model class to instantiate is selected based on the "),W_e=n(K3,"CODE",{});var uut=s(W_e);ner=r(uut,"model_type"),uut.forEach(t),ser=r(K3,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(K3,"CODE",{});var but=s(Q_e);ler=r(but,"pretrained_model_name_or_path"),but.forEach(t),ier=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(K3,"CODE",{});var vut=s(H_e);der=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),cer=r(K3,":"),K3.forEach(t),fer=i(ua),by=n(ua,"UL",{});var oDe=s(by);H6=n(oDe,"LI",{});var Q$e=s(H6);U_e=n(Q$e,"STRONG",{});var Fut=s(U_e);mer=r(Fut,"speech-encoder-decoder"),Fut.forEach(t),ger=r(Q$e," \u2014 "),JX=n(Q$e,"A",{href:!0});var Tut=s(JX);her=r(Tut,"SpeechEncoderDecoderModel"),Tut.forEach(t),per=r(Q$e," (Speech Encoder decoder model)"),Q$e.forEach(t),_er=i(oDe),U6=n(oDe,"LI",{});var H$e=s(U6);J_e=n(H$e,"STRONG",{});var Mut=s(J_e);uer=r(Mut,"speech_to_text"),Mut.forEach(t),ber=r(H$e," \u2014 "),YX=n(H$e,"A",{href:!0});var Eut=s(YX);ver=r(Eut,"Speech2TextForConditionalGeneration"),Eut.forEach(t),Fer=r(H$e," (Speech2Text model)"),H$e.forEach(t),oDe.forEach(t),Ter=i(ua),J6=n(ua,"P",{});var U$e=s(J6);Mer=r(U$e,"The model is set in evaluation mode by default using "),Y_e=n(U$e,"CODE",{});var Cut=s(Y_e);Eer=r(Cut,"model.eval()"),Cut.forEach(t),Cer=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(U$e,"CODE",{});var wut=s(K_e);wer=r(wut,"model.train()"),wut.forEach(t),U$e.forEach(t),Aer=i(ua),T(Y6.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Yqe=i(f),Md=n(f,"H2",{class:!0});var rDe=s(Md);K6=n(rDe,"A",{id:!0,class:!0,href:!0});var Aut=s(K6);Z_e=n(Aut,"SPAN",{});var yut=s(Z_e);T(vy.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),yer=i(rDe),eue=n(rDe,"SPAN",{});var Lut=s(eue);Ler=r(Lut,"AutoModelForAudioXVector"),Lut.forEach(t),rDe.forEach(t),Kqe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(Fy.$$.fragment,sl),xer=i(sl),Ed=n(sl,"P",{});var wZ=s(Ed);$er=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KX=n(wZ,"A",{href:!0});var xut=s(KX);ker=r(xut,"from_pretrained()"),xut.forEach(t),Ser=r(wZ," class method or the "),ZX=n(wZ,"A",{href:!0});var $ut=s(ZX);Rer=r($ut,"from_config()"),$ut.forEach(t),Per=r(wZ,` class
method.`),wZ.forEach(t),Ber=i(sl),Ty=n(sl,"P",{});var tDe=s(Ty);Ier=r(tDe,"This class cannot be instantiated directly using "),oue=n(tDe,"CODE",{});var kut=s(oue);qer=r(kut,"__init__()"),kut.forEach(t),Ner=r(tDe," (throws an error)."),tDe.forEach(t),jer=i(sl),Tt=n(sl,"DIV",{class:!0});var Z3=s(Tt);T(My.$$.fragment,Z3),Der=i(Z3),rue=n(Z3,"P",{});var Sut=s(rue);Ger=r(Sut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Sut.forEach(t),Oer=i(Z3),Cd=n(Z3,"P",{});var AZ=s(Cd);Ver=r(AZ,`Note:
Loading a model from its configuration file does `),tue=n(AZ,"STRONG",{});var Rut=s(tue);Xer=r(Rut,"not"),Rut.forEach(t),zer=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(AZ,"A",{href:!0});var Put=s(ez);Wer=r(Put,"from_pretrained()"),Put.forEach(t),Qer=r(AZ," to load the model weights."),AZ.forEach(t),Her=i(Z3),T(Z6.$$.fragment,Z3),Z3.forEach(t),Uer=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(Ey.$$.fragment,ba),Jer=i(ba),aue=n(ba,"P",{});var But=s(aue);Yer=r(But,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),But.forEach(t),Ker=i(ba),za=n(ba,"P",{});var ew=s(za);Zer=r(ew,"The model class to instantiate is selected based on the "),nue=n(ew,"CODE",{});var Iut=s(nue);eor=r(Iut,"model_type"),Iut.forEach(t),oor=r(ew,` property of the config object (either
passed as an argument or loaded from `),sue=n(ew,"CODE",{});var qut=s(sue);ror=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),tor=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(ew,"CODE",{});var Nut=s(lue);aor=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),nor=r(ew,":"),ew.forEach(t),sor=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);eT=n(ll,"LI",{});var J$e=s(eT);iue=n(J$e,"STRONG",{});var jut=s(iue);lor=r(jut,"data2vec-audio"),jut.forEach(t),ior=r(J$e," \u2014 "),oz=n(J$e,"A",{href:!0});var Dut=s(oz);dor=r(Dut,"Data2VecAudioForXVector"),Dut.forEach(t),cor=r(J$e," (Data2VecAudio model)"),J$e.forEach(t),mor=i(ll),oT=n(ll,"LI",{});var Y$e=s(oT);due=n(Y$e,"STRONG",{});var Gut=s(due);gor=r(Gut,"unispeech-sat"),Gut.forEach(t),hor=r(Y$e," \u2014 "),rz=n(Y$e,"A",{href:!0});var Out=s(rz);por=r(Out,"UniSpeechSatForXVector"),Out.forEach(t),_or=r(Y$e," (UniSpeechSat model)"),Y$e.forEach(t),uor=i(ll),rT=n(ll,"LI",{});var K$e=s(rT);cue=n(K$e,"STRONG",{});var Vut=s(cue);bor=r(Vut,"wav2vec2"),Vut.forEach(t),vor=r(K$e," \u2014 "),tz=n(K$e,"A",{href:!0});var Xut=s(tz);For=r(Xut,"Wav2Vec2ForXVector"),Xut.forEach(t),Tor=r(K$e," (Wav2Vec2 model)"),K$e.forEach(t),Mor=i(ll),tT=n(ll,"LI",{});var Z$e=s(tT);fue=n(Z$e,"STRONG",{});var zut=s(fue);Eor=r(zut,"wav2vec2-conformer"),zut.forEach(t),Cor=r(Z$e," \u2014 "),az=n(Z$e,"A",{href:!0});var Wut=s(az);wor=r(Wut,"Wav2Vec2ConformerForXVector"),Wut.forEach(t),Aor=r(Z$e," (Wav2Vec2-Conformer model)"),Z$e.forEach(t),yor=i(ll),aT=n(ll,"LI",{});var eke=s(aT);mue=n(eke,"STRONG",{});var Qut=s(mue);Lor=r(Qut,"wavlm"),Qut.forEach(t),xor=r(eke," \u2014 "),nz=n(eke,"A",{href:!0});var Hut=s(nz);$or=r(Hut,"WavLMForXVector"),Hut.forEach(t),kor=r(eke," (WavLM model)"),eke.forEach(t),ll.forEach(t),Sor=i(ba),nT=n(ba,"P",{});var oke=s(nT);Ror=r(oke,"The model is set in evaluation mode by default using "),gue=n(oke,"CODE",{});var Uut=s(gue);Por=r(Uut,"model.eval()"),Uut.forEach(t),Bor=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(oke,"CODE",{});var Jut=s(hue);Ior=r(Jut,"model.train()"),Jut.forEach(t),oke.forEach(t),qor=i(ba),T(sT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Zqe=i(f),wd=n(f,"H2",{class:!0});var aDe=s(wd);lT=n(aDe,"A",{id:!0,class:!0,href:!0});var Yut=s(lT);pue=n(Yut,"SPAN",{});var Kut=s(pue);T(Cy.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),Nor=i(aDe),_ue=n(aDe,"SPAN",{});var Zut=s(_ue);jor=r(Zut,"AutoModelForMaskedImageModeling"),Zut.forEach(t),aDe.forEach(t),eNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(wy.$$.fragment,il),Dor=i(il),Ad=n(il,"P",{});var yZ=s(Ad);Gor=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sz=n(yZ,"A",{href:!0});var e2t=s(sz);Oor=r(e2t,"from_pretrained()"),e2t.forEach(t),Vor=r(yZ," class method or the "),lz=n(yZ,"A",{href:!0});var o2t=s(lz);Xor=r(o2t,"from_config()"),o2t.forEach(t),zor=r(yZ,` class
method.`),yZ.forEach(t),Wor=i(il),Ay=n(il,"P",{});var nDe=s(Ay);Qor=r(nDe,"This class cannot be instantiated directly using "),uue=n(nDe,"CODE",{});var r2t=s(uue);Hor=r(r2t,"__init__()"),r2t.forEach(t),Uor=r(nDe," (throws an error)."),nDe.forEach(t),Jor=i(il),Mt=n(il,"DIV",{class:!0});var ow=s(Mt);T(yy.$$.fragment,ow),Yor=i(ow),bue=n(ow,"P",{});var t2t=s(bue);Kor=r(t2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),t2t.forEach(t),Zor=i(ow),yd=n(ow,"P",{});var LZ=s(yd);err=r(LZ,`Note:
Loading a model from its configuration file does `),vue=n(LZ,"STRONG",{});var a2t=s(vue);orr=r(a2t,"not"),a2t.forEach(t),rrr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(LZ,"A",{href:!0});var n2t=s(iz);trr=r(n2t,"from_pretrained()"),n2t.forEach(t),arr=r(LZ," to load the model weights."),LZ.forEach(t),nrr=i(ow),T(iT.$$.fragment,ow),ow.forEach(t),srr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(Ly.$$.fragment,va),lrr=i(va),Fue=n(va,"P",{});var s2t=s(Fue);irr=r(s2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),s2t.forEach(t),drr=i(va),Wa=n(va,"P",{});var rw=s(Wa);crr=r(rw,"The model class to instantiate is selected based on the "),Tue=n(rw,"CODE",{});var l2t=s(Tue);frr=r(l2t,"model_type"),l2t.forEach(t),mrr=r(rw,` property of the config object (either
passed as an argument or loaded from `),Mue=n(rw,"CODE",{});var i2t=s(Mue);grr=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),hrr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(rw,"CODE",{});var d2t=s(Eue);prr=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),_rr=r(rw,":"),rw.forEach(t),urr=i(va),Ld=n(va,"UL",{});var xZ=s(Ld);dT=n(xZ,"LI",{});var rke=s(dT);Cue=n(rke,"STRONG",{});var c2t=s(Cue);brr=r(c2t,"deit"),c2t.forEach(t),vrr=r(rke," \u2014 "),dz=n(rke,"A",{href:!0});var f2t=s(dz);Frr=r(f2t,"DeiTForMaskedImageModeling"),f2t.forEach(t),Trr=r(rke," (DeiT model)"),rke.forEach(t),Mrr=i(xZ),cT=n(xZ,"LI",{});var tke=s(cT);wue=n(tke,"STRONG",{});var m2t=s(wue);Err=r(m2t,"swin"),m2t.forEach(t),Crr=r(tke," \u2014 "),cz=n(tke,"A",{href:!0});var g2t=s(cz);wrr=r(g2t,"SwinForMaskedImageModeling"),g2t.forEach(t),Arr=r(tke," (Swin model)"),tke.forEach(t),yrr=i(xZ),fT=n(xZ,"LI",{});var ake=s(fT);Aue=n(ake,"STRONG",{});var h2t=s(Aue);Lrr=r(h2t,"vit"),h2t.forEach(t),xrr=r(ake," \u2014 "),fz=n(ake,"A",{href:!0});var p2t=s(fz);$rr=r(p2t,"ViTForMaskedImageModeling"),p2t.forEach(t),krr=r(ake," (ViT model)"),ake.forEach(t),xZ.forEach(t),Srr=i(va),mT=n(va,"P",{});var nke=s(mT);Rrr=r(nke,"The model is set in evaluation mode by default using "),yue=n(nke,"CODE",{});var _2t=s(yue);Prr=r(_2t,"model.eval()"),_2t.forEach(t),Brr=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(nke,"CODE",{});var u2t=s(Lue);Irr=r(u2t,"model.train()"),u2t.forEach(t),nke.forEach(t),qrr=i(va),T(gT.$$.fragment,va),va.forEach(t),il.forEach(t),oNe=i(f),xd=n(f,"H2",{class:!0});var sDe=s(xd);hT=n(sDe,"A",{id:!0,class:!0,href:!0});var b2t=s(hT);xue=n(b2t,"SPAN",{});var v2t=s(xue);T(xy.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),Nrr=i(sDe),$ue=n(sDe,"SPAN",{});var F2t=s($ue);jrr=r(F2t,"AutoModelForObjectDetection"),F2t.forEach(t),sDe.forEach(t),rNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T($y.$$.fragment,dl),Drr=i(dl),$d=n(dl,"P",{});var $Z=s($d);Grr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mz=n($Z,"A",{href:!0});var T2t=s(mz);Orr=r(T2t,"from_pretrained()"),T2t.forEach(t),Vrr=r($Z," class method or the "),gz=n($Z,"A",{href:!0});var M2t=s(gz);Xrr=r(M2t,"from_config()"),M2t.forEach(t),zrr=r($Z,` class
method.`),$Z.forEach(t),Wrr=i(dl),ky=n(dl,"P",{});var lDe=s(ky);Qrr=r(lDe,"This class cannot be instantiated directly using "),kue=n(lDe,"CODE",{});var E2t=s(kue);Hrr=r(E2t,"__init__()"),E2t.forEach(t),Urr=r(lDe," (throws an error)."),lDe.forEach(t),Jrr=i(dl),Et=n(dl,"DIV",{class:!0});var tw=s(Et);T(Sy.$$.fragment,tw),Yrr=i(tw),Sue=n(tw,"P",{});var C2t=s(Sue);Krr=r(C2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),C2t.forEach(t),Zrr=i(tw),kd=n(tw,"P",{});var kZ=s(kd);etr=r(kZ,`Note:
Loading a model from its configuration file does `),Rue=n(kZ,"STRONG",{});var w2t=s(Rue);otr=r(w2t,"not"),w2t.forEach(t),rtr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(kZ,"A",{href:!0});var A2t=s(hz);ttr=r(A2t,"from_pretrained()"),A2t.forEach(t),atr=r(kZ," to load the model weights."),kZ.forEach(t),ntr=i(tw),T(pT.$$.fragment,tw),tw.forEach(t),str=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(Ry.$$.fragment,Fa),ltr=i(Fa),Pue=n(Fa,"P",{});var y2t=s(Pue);itr=r(y2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),y2t.forEach(t),dtr=i(Fa),Qa=n(Fa,"P",{});var aw=s(Qa);ctr=r(aw,"The model class to instantiate is selected based on the "),Bue=n(aw,"CODE",{});var L2t=s(Bue);ftr=r(L2t,"model_type"),L2t.forEach(t),mtr=r(aw,` property of the config object (either
passed as an argument or loaded from `),Iue=n(aw,"CODE",{});var x2t=s(Iue);gtr=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),htr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(aw,"CODE",{});var $2t=s(que);ptr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),_tr=r(aw,":"),aw.forEach(t),utr=i(Fa),Py=n(Fa,"UL",{});var iDe=s(Py);_T=n(iDe,"LI",{});var ske=s(_T);Nue=n(ske,"STRONG",{});var k2t=s(Nue);btr=r(k2t,"detr"),k2t.forEach(t),vtr=r(ske," \u2014 "),pz=n(ske,"A",{href:!0});var S2t=s(pz);Ftr=r(S2t,"DetrForObjectDetection"),S2t.forEach(t),Ttr=r(ske," (DETR model)"),ske.forEach(t),Mtr=i(iDe),uT=n(iDe,"LI",{});var lke=s(uT);jue=n(lke,"STRONG",{});var R2t=s(jue);Etr=r(R2t,"yolos"),R2t.forEach(t),Ctr=r(lke," \u2014 "),_z=n(lke,"A",{href:!0});var P2t=s(_z);wtr=r(P2t,"YolosForObjectDetection"),P2t.forEach(t),Atr=r(lke," (YOLOS model)"),lke.forEach(t),iDe.forEach(t),ytr=i(Fa),bT=n(Fa,"P",{});var ike=s(bT);Ltr=r(ike,"The model is set in evaluation mode by default using "),Due=n(ike,"CODE",{});var B2t=s(Due);xtr=r(B2t,"model.eval()"),B2t.forEach(t),$tr=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(ike,"CODE",{});var I2t=s(Gue);ktr=r(I2t,"model.train()"),I2t.forEach(t),ike.forEach(t),Str=i(Fa),T(vT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),tNe=i(f),Sd=n(f,"H2",{class:!0});var dDe=s(Sd);FT=n(dDe,"A",{id:!0,class:!0,href:!0});var q2t=s(FT);Oue=n(q2t,"SPAN",{});var N2t=s(Oue);T(By.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),Rtr=i(dDe),Vue=n(dDe,"SPAN",{});var j2t=s(Vue);Ptr=r(j2t,"AutoModelForImageSegmentation"),j2t.forEach(t),dDe.forEach(t),aNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Iy.$$.fragment,cl),Btr=i(cl),Rd=n(cl,"P",{});var SZ=s(Rd);Itr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uz=n(SZ,"A",{href:!0});var D2t=s(uz);qtr=r(D2t,"from_pretrained()"),D2t.forEach(t),Ntr=r(SZ," class method or the "),bz=n(SZ,"A",{href:!0});var G2t=s(bz);jtr=r(G2t,"from_config()"),G2t.forEach(t),Dtr=r(SZ,` class
method.`),SZ.forEach(t),Gtr=i(cl),qy=n(cl,"P",{});var cDe=s(qy);Otr=r(cDe,"This class cannot be instantiated directly using "),Xue=n(cDe,"CODE",{});var O2t=s(Xue);Vtr=r(O2t,"__init__()"),O2t.forEach(t),Xtr=r(cDe," (throws an error)."),cDe.forEach(t),ztr=i(cl),Ct=n(cl,"DIV",{class:!0});var nw=s(Ct);T(Ny.$$.fragment,nw),Wtr=i(nw),zue=n(nw,"P",{});var V2t=s(zue);Qtr=r(V2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),V2t.forEach(t),Htr=i(nw),Pd=n(nw,"P",{});var RZ=s(Pd);Utr=r(RZ,`Note:
Loading a model from its configuration file does `),Wue=n(RZ,"STRONG",{});var X2t=s(Wue);Jtr=r(X2t,"not"),X2t.forEach(t),Ytr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(RZ,"A",{href:!0});var z2t=s(vz);Ktr=r(z2t,"from_pretrained()"),z2t.forEach(t),Ztr=r(RZ," to load the model weights."),RZ.forEach(t),ear=i(nw),T(TT.$$.fragment,nw),nw.forEach(t),oar=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(jy.$$.fragment,Ta),rar=i(Ta),Que=n(Ta,"P",{});var W2t=s(Que);tar=r(W2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),W2t.forEach(t),aar=i(Ta),Ha=n(Ta,"P",{});var sw=s(Ha);nar=r(sw,"The model class to instantiate is selected based on the "),Hue=n(sw,"CODE",{});var Q2t=s(Hue);sar=r(Q2t,"model_type"),Q2t.forEach(t),lar=r(sw,` property of the config object (either
passed as an argument or loaded from `),Uue=n(sw,"CODE",{});var H2t=s(Uue);iar=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),dar=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(sw,"CODE",{});var U2t=s(Jue);car=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),far=r(sw,":"),sw.forEach(t),mar=i(Ta),Yue=n(Ta,"UL",{});var J2t=s(Yue);MT=n(J2t,"LI",{});var dke=s(MT);Kue=n(dke,"STRONG",{});var Y2t=s(Kue);gar=r(Y2t,"detr"),Y2t.forEach(t),har=r(dke," \u2014 "),Fz=n(dke,"A",{href:!0});var K2t=s(Fz);par=r(K2t,"DetrForSegmentation"),K2t.forEach(t),_ar=r(dke," (DETR model)"),dke.forEach(t),J2t.forEach(t),uar=i(Ta),ET=n(Ta,"P",{});var cke=s(ET);bar=r(cke,"The model is set in evaluation mode by default using "),Zue=n(cke,"CODE",{});var Z2t=s(Zue);Far=r(Z2t,"model.eval()"),Z2t.forEach(t),Tar=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(cke,"CODE",{});var e1t=s(e2e);Mar=r(e1t,"model.train()"),e1t.forEach(t),cke.forEach(t),Ear=i(Ta),T(CT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),nNe=i(f),Bd=n(f,"H2",{class:!0});var fDe=s(Bd);wT=n(fDe,"A",{id:!0,class:!0,href:!0});var o1t=s(wT);o2e=n(o1t,"SPAN",{});var r1t=s(o2e);T(Dy.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),Car=i(fDe),r2e=n(fDe,"SPAN",{});var t1t=s(r2e);war=r(t1t,"AutoModelForSemanticSegmentation"),t1t.forEach(t),fDe.forEach(t),sNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Gy.$$.fragment,fl),Aar=i(fl),Id=n(fl,"P",{});var PZ=s(Id);yar=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Tz=n(PZ,"A",{href:!0});var a1t=s(Tz);Lar=r(a1t,"from_pretrained()"),a1t.forEach(t),xar=r(PZ," class method or the "),Mz=n(PZ,"A",{href:!0});var n1t=s(Mz);$ar=r(n1t,"from_config()"),n1t.forEach(t),kar=r(PZ,` class
method.`),PZ.forEach(t),Sar=i(fl),Oy=n(fl,"P",{});var mDe=s(Oy);Rar=r(mDe,"This class cannot be instantiated directly using "),t2e=n(mDe,"CODE",{});var s1t=s(t2e);Par=r(s1t,"__init__()"),s1t.forEach(t),Bar=r(mDe," (throws an error)."),mDe.forEach(t),Iar=i(fl),wt=n(fl,"DIV",{class:!0});var lw=s(wt);T(Vy.$$.fragment,lw),qar=i(lw),a2e=n(lw,"P",{});var l1t=s(a2e);Nar=r(l1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),l1t.forEach(t),jar=i(lw),qd=n(lw,"P",{});var BZ=s(qd);Dar=r(BZ,`Note:
Loading a model from its configuration file does `),n2e=n(BZ,"STRONG",{});var i1t=s(n2e);Gar=r(i1t,"not"),i1t.forEach(t),Oar=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(BZ,"A",{href:!0});var d1t=s(Ez);Var=r(d1t,"from_pretrained()"),d1t.forEach(t),Xar=r(BZ," to load the model weights."),BZ.forEach(t),zar=i(lw),T(AT.$$.fragment,lw),lw.forEach(t),War=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(Xy.$$.fragment,Ma),Qar=i(Ma),s2e=n(Ma,"P",{});var c1t=s(s2e);Har=r(c1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),c1t.forEach(t),Uar=i(Ma),Ua=n(Ma,"P",{});var iw=s(Ua);Jar=r(iw,"The model class to instantiate is selected based on the "),l2e=n(iw,"CODE",{});var f1t=s(l2e);Yar=r(f1t,"model_type"),f1t.forEach(t),Kar=r(iw,` property of the config object (either
passed as an argument or loaded from `),i2e=n(iw,"CODE",{});var m1t=s(i2e);Zar=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),enr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(iw,"CODE",{});var g1t=s(d2e);onr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),rnr=r(iw,":"),iw.forEach(t),tnr=i(Ma),Ja=n(Ma,"UL",{});var dw=s(Ja);yT=n(dw,"LI",{});var fke=s(yT);c2e=n(fke,"STRONG",{});var h1t=s(c2e);anr=r(h1t,"beit"),h1t.forEach(t),nnr=r(fke," \u2014 "),Cz=n(fke,"A",{href:!0});var p1t=s(Cz);snr=r(p1t,"BeitForSemanticSegmentation"),p1t.forEach(t),lnr=r(fke," (BEiT model)"),fke.forEach(t),inr=i(dw),LT=n(dw,"LI",{});var mke=s(LT);f2e=n(mke,"STRONG",{});var _1t=s(f2e);dnr=r(_1t,"data2vec-vision"),_1t.forEach(t),cnr=r(mke," \u2014 "),wz=n(mke,"A",{href:!0});var u1t=s(wz);fnr=r(u1t,"Data2VecVisionForSemanticSegmentation"),u1t.forEach(t),mnr=r(mke," (Data2VecVision model)"),mke.forEach(t),gnr=i(dw),xT=n(dw,"LI",{});var gke=s(xT);m2e=n(gke,"STRONG",{});var b1t=s(m2e);hnr=r(b1t,"dpt"),b1t.forEach(t),pnr=r(gke," \u2014 "),Az=n(gke,"A",{href:!0});var v1t=s(Az);_nr=r(v1t,"DPTForSemanticSegmentation"),v1t.forEach(t),unr=r(gke," (DPT model)"),gke.forEach(t),bnr=i(dw),$T=n(dw,"LI",{});var hke=s($T);g2e=n(hke,"STRONG",{});var F1t=s(g2e);vnr=r(F1t,"segformer"),F1t.forEach(t),Fnr=r(hke," \u2014 "),yz=n(hke,"A",{href:!0});var T1t=s(yz);Tnr=r(T1t,"SegformerForSemanticSegmentation"),T1t.forEach(t),Mnr=r(hke," (SegFormer model)"),hke.forEach(t),dw.forEach(t),Enr=i(Ma),kT=n(Ma,"P",{});var pke=s(kT);Cnr=r(pke,"The model is set in evaluation mode by default using "),h2e=n(pke,"CODE",{});var M1t=s(h2e);wnr=r(M1t,"model.eval()"),M1t.forEach(t),Anr=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(pke,"CODE",{});var E1t=s(p2e);ynr=r(E1t,"model.train()"),E1t.forEach(t),pke.forEach(t),Lnr=i(Ma),T(ST.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),lNe=i(f),Nd=n(f,"H2",{class:!0});var gDe=s(Nd);RT=n(gDe,"A",{id:!0,class:!0,href:!0});var C1t=s(RT);_2e=n(C1t,"SPAN",{});var w1t=s(_2e);T(zy.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),xnr=i(gDe),u2e=n(gDe,"SPAN",{});var A1t=s(u2e);$nr=r(A1t,"AutoModelForInstanceSegmentation"),A1t.forEach(t),gDe.forEach(t),iNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(Wy.$$.fragment,ml),knr=i(ml),jd=n(ml,"P",{});var IZ=s(jd);Snr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Lz=n(IZ,"A",{href:!0});var y1t=s(Lz);Rnr=r(y1t,"from_pretrained()"),y1t.forEach(t),Pnr=r(IZ," class method or the "),xz=n(IZ,"A",{href:!0});var L1t=s(xz);Bnr=r(L1t,"from_config()"),L1t.forEach(t),Inr=r(IZ,` class
method.`),IZ.forEach(t),qnr=i(ml),Qy=n(ml,"P",{});var hDe=s(Qy);Nnr=r(hDe,"This class cannot be instantiated directly using "),b2e=n(hDe,"CODE",{});var x1t=s(b2e);jnr=r(x1t,"__init__()"),x1t.forEach(t),Dnr=r(hDe," (throws an error)."),hDe.forEach(t),Gnr=i(ml),At=n(ml,"DIV",{class:!0});var cw=s(At);T(Hy.$$.fragment,cw),Onr=i(cw),v2e=n(cw,"P",{});var $1t=s(v2e);Vnr=r($1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$1t.forEach(t),Xnr=i(cw),Dd=n(cw,"P",{});var qZ=s(Dd);znr=r(qZ,`Note:
Loading a model from its configuration file does `),F2e=n(qZ,"STRONG",{});var k1t=s(F2e);Wnr=r(k1t,"not"),k1t.forEach(t),Qnr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(qZ,"A",{href:!0});var S1t=s($z);Hnr=r(S1t,"from_pretrained()"),S1t.forEach(t),Unr=r(qZ," to load the model weights."),qZ.forEach(t),Jnr=i(cw),T(PT.$$.fragment,cw),cw.forEach(t),Ynr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(Uy.$$.fragment,Ea),Knr=i(Ea),T2e=n(Ea,"P",{});var R1t=s(T2e);Znr=r(R1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),R1t.forEach(t),esr=i(Ea),Ya=n(Ea,"P",{});var fw=s(Ya);osr=r(fw,"The model class to instantiate is selected based on the "),M2e=n(fw,"CODE",{});var P1t=s(M2e);rsr=r(P1t,"model_type"),P1t.forEach(t),tsr=r(fw,` property of the config object (either
passed as an argument or loaded from `),E2e=n(fw,"CODE",{});var B1t=s(E2e);asr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),nsr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(fw,"CODE",{});var I1t=s(C2e);ssr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),lsr=r(fw,":"),fw.forEach(t),isr=i(Ea),w2e=n(Ea,"UL",{});var q1t=s(w2e);BT=n(q1t,"LI",{});var _ke=s(BT);A2e=n(_ke,"STRONG",{});var N1t=s(A2e);dsr=r(N1t,"maskformer"),N1t.forEach(t),csr=r(_ke," \u2014 "),kz=n(_ke,"A",{href:!0});var j1t=s(kz);fsr=r(j1t,"MaskFormerForInstanceSegmentation"),j1t.forEach(t),msr=r(_ke," (MaskFormer model)"),_ke.forEach(t),q1t.forEach(t),gsr=i(Ea),IT=n(Ea,"P",{});var uke=s(IT);hsr=r(uke,"The model is set in evaluation mode by default using "),y2e=n(uke,"CODE",{});var D1t=s(y2e);psr=r(D1t,"model.eval()"),D1t.forEach(t),_sr=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(uke,"CODE",{});var G1t=s(L2e);usr=r(G1t,"model.train()"),G1t.forEach(t),uke.forEach(t),bsr=i(Ea),T(qT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),dNe=i(f),Gd=n(f,"H2",{class:!0});var pDe=s(Gd);NT=n(pDe,"A",{id:!0,class:!0,href:!0});var O1t=s(NT);x2e=n(O1t,"SPAN",{});var V1t=s(x2e);T(Jy.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),vsr=i(pDe),$2e=n(pDe,"SPAN",{});var X1t=s($2e);Fsr=r(X1t,"TFAutoModel"),X1t.forEach(t),pDe.forEach(t),cNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(Yy.$$.fragment,gl),Tsr=i(gl),Od=n(gl,"P",{});var NZ=s(Od);Msr=r(NZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Sz=n(NZ,"A",{href:!0});var z1t=s(Sz);Esr=r(z1t,"from_pretrained()"),z1t.forEach(t),Csr=r(NZ," class method or the "),Rz=n(NZ,"A",{href:!0});var W1t=s(Rz);wsr=r(W1t,"from_config()"),W1t.forEach(t),Asr=r(NZ,` class
method.`),NZ.forEach(t),ysr=i(gl),Ky=n(gl,"P",{});var _De=s(Ky);Lsr=r(_De,"This class cannot be instantiated directly using "),k2e=n(_De,"CODE",{});var Q1t=s(k2e);xsr=r(Q1t,"__init__()"),Q1t.forEach(t),$sr=r(_De," (throws an error)."),_De.forEach(t),ksr=i(gl),yt=n(gl,"DIV",{class:!0});var mw=s(yt);T(Zy.$$.fragment,mw),Ssr=i(mw),S2e=n(mw,"P",{});var H1t=s(S2e);Rsr=r(H1t,"Instantiates one of the base model classes of the library from a configuration."),H1t.forEach(t),Psr=i(mw),Vd=n(mw,"P",{});var jZ=s(Vd);Bsr=r(jZ,`Note:
Loading a model from its configuration file does `),R2e=n(jZ,"STRONG",{});var U1t=s(R2e);Isr=r(U1t,"not"),U1t.forEach(t),qsr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(jZ,"A",{href:!0});var J1t=s(Pz);Nsr=r(J1t,"from_pretrained()"),J1t.forEach(t),jsr=r(jZ," to load the model weights."),jZ.forEach(t),Dsr=i(mw),T(jT.$$.fragment,mw),mw.forEach(t),Gsr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(eL.$$.fragment,hl),Osr=i(hl),P2e=n(hl,"P",{});var Y1t=s(P2e);Vsr=r(Y1t,"Instantiate one of the base model classes of the library from a pretrained model."),Y1t.forEach(t),Xsr=i(hl),Ka=n(hl,"P",{});var gw=s(Ka);zsr=r(gw,"The model class to instantiate is selected based on the "),B2e=n(gw,"CODE",{});var K1t=s(B2e);Wsr=r(K1t,"model_type"),K1t.forEach(t),Qsr=r(gw,` property of the config object (either
passed as an argument or loaded from `),I2e=n(gw,"CODE",{});var Z1t=s(I2e);Hsr=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),Usr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(gw,"CODE",{});var ebt=s(q2e);Jsr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),Ysr=r(gw,":"),gw.forEach(t),Ksr=i(hl),N=n(hl,"UL",{});var D=s(N);DT=n(D,"LI",{});var bke=s(DT);N2e=n(bke,"STRONG",{});var obt=s(N2e);Zsr=r(obt,"albert"),obt.forEach(t),elr=r(bke," \u2014 "),Bz=n(bke,"A",{href:!0});var rbt=s(Bz);olr=r(rbt,"TFAlbertModel"),rbt.forEach(t),rlr=r(bke," (ALBERT model)"),bke.forEach(t),tlr=i(D),GT=n(D,"LI",{});var vke=s(GT);j2e=n(vke,"STRONG",{});var tbt=s(j2e);alr=r(tbt,"bart"),tbt.forEach(t),nlr=r(vke," \u2014 "),Iz=n(vke,"A",{href:!0});var abt=s(Iz);slr=r(abt,"TFBartModel"),abt.forEach(t),llr=r(vke," (BART model)"),vke.forEach(t),ilr=i(D),OT=n(D,"LI",{});var Fke=s(OT);D2e=n(Fke,"STRONG",{});var nbt=s(D2e);dlr=r(nbt,"bert"),nbt.forEach(t),clr=r(Fke," \u2014 "),qz=n(Fke,"A",{href:!0});var sbt=s(qz);flr=r(sbt,"TFBertModel"),sbt.forEach(t),mlr=r(Fke," (BERT model)"),Fke.forEach(t),glr=i(D),VT=n(D,"LI",{});var Tke=s(VT);G2e=n(Tke,"STRONG",{});var lbt=s(G2e);hlr=r(lbt,"blenderbot"),lbt.forEach(t),plr=r(Tke," \u2014 "),Nz=n(Tke,"A",{href:!0});var ibt=s(Nz);_lr=r(ibt,"TFBlenderbotModel"),ibt.forEach(t),ulr=r(Tke," (Blenderbot model)"),Tke.forEach(t),blr=i(D),XT=n(D,"LI",{});var Mke=s(XT);O2e=n(Mke,"STRONG",{});var dbt=s(O2e);vlr=r(dbt,"blenderbot-small"),dbt.forEach(t),Flr=r(Mke," \u2014 "),jz=n(Mke,"A",{href:!0});var cbt=s(jz);Tlr=r(cbt,"TFBlenderbotSmallModel"),cbt.forEach(t),Mlr=r(Mke," (BlenderbotSmall model)"),Mke.forEach(t),Elr=i(D),zT=n(D,"LI",{});var Eke=s(zT);V2e=n(Eke,"STRONG",{});var fbt=s(V2e);Clr=r(fbt,"camembert"),fbt.forEach(t),wlr=r(Eke," \u2014 "),Dz=n(Eke,"A",{href:!0});var mbt=s(Dz);Alr=r(mbt,"TFCamembertModel"),mbt.forEach(t),ylr=r(Eke," (CamemBERT model)"),Eke.forEach(t),Llr=i(D),WT=n(D,"LI",{});var Cke=s(WT);X2e=n(Cke,"STRONG",{});var gbt=s(X2e);xlr=r(gbt,"clip"),gbt.forEach(t),$lr=r(Cke," \u2014 "),Gz=n(Cke,"A",{href:!0});var hbt=s(Gz);klr=r(hbt,"TFCLIPModel"),hbt.forEach(t),Slr=r(Cke," (CLIP model)"),Cke.forEach(t),Rlr=i(D),QT=n(D,"LI",{});var wke=s(QT);z2e=n(wke,"STRONG",{});var pbt=s(z2e);Plr=r(pbt,"convbert"),pbt.forEach(t),Blr=r(wke," \u2014 "),Oz=n(wke,"A",{href:!0});var _bt=s(Oz);Ilr=r(_bt,"TFConvBertModel"),_bt.forEach(t),qlr=r(wke," (ConvBERT model)"),wke.forEach(t),Nlr=i(D),HT=n(D,"LI",{});var Ake=s(HT);W2e=n(Ake,"STRONG",{});var ubt=s(W2e);jlr=r(ubt,"convnext"),ubt.forEach(t),Dlr=r(Ake," \u2014 "),Vz=n(Ake,"A",{href:!0});var bbt=s(Vz);Glr=r(bbt,"TFConvNextModel"),bbt.forEach(t),Olr=r(Ake," (ConvNext model)"),Ake.forEach(t),Vlr=i(D),UT=n(D,"LI",{});var yke=s(UT);Q2e=n(yke,"STRONG",{});var vbt=s(Q2e);Xlr=r(vbt,"ctrl"),vbt.forEach(t),zlr=r(yke," \u2014 "),Xz=n(yke,"A",{href:!0});var Fbt=s(Xz);Wlr=r(Fbt,"TFCTRLModel"),Fbt.forEach(t),Qlr=r(yke," (CTRL model)"),yke.forEach(t),Hlr=i(D),JT=n(D,"LI",{});var Lke=s(JT);H2e=n(Lke,"STRONG",{});var Tbt=s(H2e);Ulr=r(Tbt,"data2vec-vision"),Tbt.forEach(t),Jlr=r(Lke," \u2014 "),zz=n(Lke,"A",{href:!0});var Mbt=s(zz);Ylr=r(Mbt,"TFData2VecVisionModel"),Mbt.forEach(t),Klr=r(Lke," (Data2VecVision model)"),Lke.forEach(t),Zlr=i(D),YT=n(D,"LI",{});var xke=s(YT);U2e=n(xke,"STRONG",{});var Ebt=s(U2e);eir=r(Ebt,"deberta"),Ebt.forEach(t),oir=r(xke," \u2014 "),Wz=n(xke,"A",{href:!0});var Cbt=s(Wz);rir=r(Cbt,"TFDebertaModel"),Cbt.forEach(t),tir=r(xke," (DeBERTa model)"),xke.forEach(t),air=i(D),KT=n(D,"LI",{});var $ke=s(KT);J2e=n($ke,"STRONG",{});var wbt=s(J2e);nir=r(wbt,"deberta-v2"),wbt.forEach(t),sir=r($ke," \u2014 "),Qz=n($ke,"A",{href:!0});var Abt=s(Qz);lir=r(Abt,"TFDebertaV2Model"),Abt.forEach(t),iir=r($ke," (DeBERTa-v2 model)"),$ke.forEach(t),dir=i(D),ZT=n(D,"LI",{});var kke=s(ZT);Y2e=n(kke,"STRONG",{});var ybt=s(Y2e);cir=r(ybt,"distilbert"),ybt.forEach(t),fir=r(kke," \u2014 "),Hz=n(kke,"A",{href:!0});var Lbt=s(Hz);mir=r(Lbt,"TFDistilBertModel"),Lbt.forEach(t),gir=r(kke," (DistilBERT model)"),kke.forEach(t),hir=i(D),e7=n(D,"LI",{});var Ske=s(e7);K2e=n(Ske,"STRONG",{});var xbt=s(K2e);pir=r(xbt,"dpr"),xbt.forEach(t),_ir=r(Ske," \u2014 "),Uz=n(Ske,"A",{href:!0});var $bt=s(Uz);uir=r($bt,"TFDPRQuestionEncoder"),$bt.forEach(t),bir=r(Ske," (DPR model)"),Ske.forEach(t),vir=i(D),o7=n(D,"LI",{});var Rke=s(o7);Z2e=n(Rke,"STRONG",{});var kbt=s(Z2e);Fir=r(kbt,"electra"),kbt.forEach(t),Tir=r(Rke," \u2014 "),Jz=n(Rke,"A",{href:!0});var Sbt=s(Jz);Mir=r(Sbt,"TFElectraModel"),Sbt.forEach(t),Eir=r(Rke," (ELECTRA model)"),Rke.forEach(t),Cir=i(D),r7=n(D,"LI",{});var Pke=s(r7);e1e=n(Pke,"STRONG",{});var Rbt=s(e1e);wir=r(Rbt,"flaubert"),Rbt.forEach(t),Air=r(Pke," \u2014 "),Yz=n(Pke,"A",{href:!0});var Pbt=s(Yz);yir=r(Pbt,"TFFlaubertModel"),Pbt.forEach(t),Lir=r(Pke," (FlauBERT model)"),Pke.forEach(t),xir=i(D),Is=n(D,"LI",{});var S$=s(Is);o1e=n(S$,"STRONG",{});var Bbt=s(o1e);$ir=r(Bbt,"funnel"),Bbt.forEach(t),kir=r(S$," \u2014 "),Kz=n(S$,"A",{href:!0});var Ibt=s(Kz);Sir=r(Ibt,"TFFunnelModel"),Ibt.forEach(t),Rir=r(S$," or "),Zz=n(S$,"A",{href:!0});var qbt=s(Zz);Pir=r(qbt,"TFFunnelBaseModel"),qbt.forEach(t),Bir=r(S$," (Funnel Transformer model)"),S$.forEach(t),Iir=i(D),t7=n(D,"LI",{});var Bke=s(t7);r1e=n(Bke,"STRONG",{});var Nbt=s(r1e);qir=r(Nbt,"gpt2"),Nbt.forEach(t),Nir=r(Bke," \u2014 "),eW=n(Bke,"A",{href:!0});var jbt=s(eW);jir=r(jbt,"TFGPT2Model"),jbt.forEach(t),Dir=r(Bke," (OpenAI GPT-2 model)"),Bke.forEach(t),Gir=i(D),a7=n(D,"LI",{});var Ike=s(a7);t1e=n(Ike,"STRONG",{});var Dbt=s(t1e);Oir=r(Dbt,"gptj"),Dbt.forEach(t),Vir=r(Ike," \u2014 "),oW=n(Ike,"A",{href:!0});var Gbt=s(oW);Xir=r(Gbt,"TFGPTJModel"),Gbt.forEach(t),zir=r(Ike," (GPT-J model)"),Ike.forEach(t),Wir=i(D),n7=n(D,"LI",{});var qke=s(n7);a1e=n(qke,"STRONG",{});var Obt=s(a1e);Qir=r(Obt,"hubert"),Obt.forEach(t),Hir=r(qke," \u2014 "),rW=n(qke,"A",{href:!0});var Vbt=s(rW);Uir=r(Vbt,"TFHubertModel"),Vbt.forEach(t),Jir=r(qke," (Hubert model)"),qke.forEach(t),Yir=i(D),s7=n(D,"LI",{});var Nke=s(s7);n1e=n(Nke,"STRONG",{});var Xbt=s(n1e);Kir=r(Xbt,"layoutlm"),Xbt.forEach(t),Zir=r(Nke," \u2014 "),tW=n(Nke,"A",{href:!0});var zbt=s(tW);edr=r(zbt,"TFLayoutLMModel"),zbt.forEach(t),odr=r(Nke," (LayoutLM model)"),Nke.forEach(t),rdr=i(D),l7=n(D,"LI",{});var jke=s(l7);s1e=n(jke,"STRONG",{});var Wbt=s(s1e);tdr=r(Wbt,"led"),Wbt.forEach(t),adr=r(jke," \u2014 "),aW=n(jke,"A",{href:!0});var Qbt=s(aW);ndr=r(Qbt,"TFLEDModel"),Qbt.forEach(t),sdr=r(jke," (LED model)"),jke.forEach(t),ldr=i(D),i7=n(D,"LI",{});var Dke=s(i7);l1e=n(Dke,"STRONG",{});var Hbt=s(l1e);idr=r(Hbt,"longformer"),Hbt.forEach(t),ddr=r(Dke," \u2014 "),nW=n(Dke,"A",{href:!0});var Ubt=s(nW);cdr=r(Ubt,"TFLongformerModel"),Ubt.forEach(t),fdr=r(Dke," (Longformer model)"),Dke.forEach(t),mdr=i(D),d7=n(D,"LI",{});var Gke=s(d7);i1e=n(Gke,"STRONG",{});var Jbt=s(i1e);gdr=r(Jbt,"lxmert"),Jbt.forEach(t),hdr=r(Gke," \u2014 "),sW=n(Gke,"A",{href:!0});var Ybt=s(sW);pdr=r(Ybt,"TFLxmertModel"),Ybt.forEach(t),_dr=r(Gke," (LXMERT model)"),Gke.forEach(t),udr=i(D),c7=n(D,"LI",{});var Oke=s(c7);d1e=n(Oke,"STRONG",{});var Kbt=s(d1e);bdr=r(Kbt,"marian"),Kbt.forEach(t),vdr=r(Oke," \u2014 "),lW=n(Oke,"A",{href:!0});var Zbt=s(lW);Fdr=r(Zbt,"TFMarianModel"),Zbt.forEach(t),Tdr=r(Oke," (Marian model)"),Oke.forEach(t),Mdr=i(D),f7=n(D,"LI",{});var Vke=s(f7);c1e=n(Vke,"STRONG",{});var evt=s(c1e);Edr=r(evt,"mbart"),evt.forEach(t),Cdr=r(Vke," \u2014 "),iW=n(Vke,"A",{href:!0});var ovt=s(iW);wdr=r(ovt,"TFMBartModel"),ovt.forEach(t),Adr=r(Vke," (mBART model)"),Vke.forEach(t),ydr=i(D),m7=n(D,"LI",{});var Xke=s(m7);f1e=n(Xke,"STRONG",{});var rvt=s(f1e);Ldr=r(rvt,"mobilebert"),rvt.forEach(t),xdr=r(Xke," \u2014 "),dW=n(Xke,"A",{href:!0});var tvt=s(dW);$dr=r(tvt,"TFMobileBertModel"),tvt.forEach(t),kdr=r(Xke," (MobileBERT model)"),Xke.forEach(t),Sdr=i(D),g7=n(D,"LI",{});var zke=s(g7);m1e=n(zke,"STRONG",{});var avt=s(m1e);Rdr=r(avt,"mpnet"),avt.forEach(t),Pdr=r(zke," \u2014 "),cW=n(zke,"A",{href:!0});var nvt=s(cW);Bdr=r(nvt,"TFMPNetModel"),nvt.forEach(t),Idr=r(zke," (MPNet model)"),zke.forEach(t),qdr=i(D),h7=n(D,"LI",{});var Wke=s(h7);g1e=n(Wke,"STRONG",{});var svt=s(g1e);Ndr=r(svt,"mt5"),svt.forEach(t),jdr=r(Wke," \u2014 "),fW=n(Wke,"A",{href:!0});var lvt=s(fW);Ddr=r(lvt,"TFMT5Model"),lvt.forEach(t),Gdr=r(Wke," (mT5 model)"),Wke.forEach(t),Odr=i(D),p7=n(D,"LI",{});var Qke=s(p7);h1e=n(Qke,"STRONG",{});var ivt=s(h1e);Vdr=r(ivt,"openai-gpt"),ivt.forEach(t),Xdr=r(Qke," \u2014 "),mW=n(Qke,"A",{href:!0});var dvt=s(mW);zdr=r(dvt,"TFOpenAIGPTModel"),dvt.forEach(t),Wdr=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),Qdr=i(D),_7=n(D,"LI",{});var Hke=s(_7);p1e=n(Hke,"STRONG",{});var cvt=s(p1e);Hdr=r(cvt,"pegasus"),cvt.forEach(t),Udr=r(Hke," \u2014 "),gW=n(Hke,"A",{href:!0});var fvt=s(gW);Jdr=r(fvt,"TFPegasusModel"),fvt.forEach(t),Ydr=r(Hke," (Pegasus model)"),Hke.forEach(t),Kdr=i(D),u7=n(D,"LI",{});var Uke=s(u7);_1e=n(Uke,"STRONG",{});var mvt=s(_1e);Zdr=r(mvt,"rembert"),mvt.forEach(t),ecr=r(Uke," \u2014 "),hW=n(Uke,"A",{href:!0});var gvt=s(hW);ocr=r(gvt,"TFRemBertModel"),gvt.forEach(t),rcr=r(Uke," (RemBERT model)"),Uke.forEach(t),tcr=i(D),b7=n(D,"LI",{});var Jke=s(b7);u1e=n(Jke,"STRONG",{});var hvt=s(u1e);acr=r(hvt,"roberta"),hvt.forEach(t),ncr=r(Jke," \u2014 "),pW=n(Jke,"A",{href:!0});var pvt=s(pW);scr=r(pvt,"TFRobertaModel"),pvt.forEach(t),lcr=r(Jke," (RoBERTa model)"),Jke.forEach(t),icr=i(D),v7=n(D,"LI",{});var Yke=s(v7);b1e=n(Yke,"STRONG",{});var _vt=s(b1e);dcr=r(_vt,"roformer"),_vt.forEach(t),ccr=r(Yke," \u2014 "),_W=n(Yke,"A",{href:!0});var uvt=s(_W);fcr=r(uvt,"TFRoFormerModel"),uvt.forEach(t),mcr=r(Yke," (RoFormer model)"),Yke.forEach(t),gcr=i(D),F7=n(D,"LI",{});var Kke=s(F7);v1e=n(Kke,"STRONG",{});var bvt=s(v1e);hcr=r(bvt,"speech_to_text"),bvt.forEach(t),pcr=r(Kke," \u2014 "),uW=n(Kke,"A",{href:!0});var vvt=s(uW);_cr=r(vvt,"TFSpeech2TextModel"),vvt.forEach(t),ucr=r(Kke," (Speech2Text model)"),Kke.forEach(t),bcr=i(D),T7=n(D,"LI",{});var Zke=s(T7);F1e=n(Zke,"STRONG",{});var Fvt=s(F1e);vcr=r(Fvt,"swin"),Fvt.forEach(t),Fcr=r(Zke," \u2014 "),bW=n(Zke,"A",{href:!0});var Tvt=s(bW);Tcr=r(Tvt,"TFSwinModel"),Tvt.forEach(t),Mcr=r(Zke," (Swin model)"),Zke.forEach(t),Ecr=i(D),M7=n(D,"LI",{});var eSe=s(M7);T1e=n(eSe,"STRONG",{});var Mvt=s(T1e);Ccr=r(Mvt,"t5"),Mvt.forEach(t),wcr=r(eSe," \u2014 "),vW=n(eSe,"A",{href:!0});var Evt=s(vW);Acr=r(Evt,"TFT5Model"),Evt.forEach(t),ycr=r(eSe," (T5 model)"),eSe.forEach(t),Lcr=i(D),E7=n(D,"LI",{});var oSe=s(E7);M1e=n(oSe,"STRONG",{});var Cvt=s(M1e);xcr=r(Cvt,"tapas"),Cvt.forEach(t),$cr=r(oSe," \u2014 "),FW=n(oSe,"A",{href:!0});var wvt=s(FW);kcr=r(wvt,"TFTapasModel"),wvt.forEach(t),Scr=r(oSe," (TAPAS model)"),oSe.forEach(t),Rcr=i(D),C7=n(D,"LI",{});var rSe=s(C7);E1e=n(rSe,"STRONG",{});var Avt=s(E1e);Pcr=r(Avt,"transfo-xl"),Avt.forEach(t),Bcr=r(rSe," \u2014 "),TW=n(rSe,"A",{href:!0});var yvt=s(TW);Icr=r(yvt,"TFTransfoXLModel"),yvt.forEach(t),qcr=r(rSe," (Transformer-XL model)"),rSe.forEach(t),Ncr=i(D),w7=n(D,"LI",{});var tSe=s(w7);C1e=n(tSe,"STRONG",{});var Lvt=s(C1e);jcr=r(Lvt,"vit"),Lvt.forEach(t),Dcr=r(tSe," \u2014 "),MW=n(tSe,"A",{href:!0});var xvt=s(MW);Gcr=r(xvt,"TFViTModel"),xvt.forEach(t),Ocr=r(tSe," (ViT model)"),tSe.forEach(t),Vcr=i(D),A7=n(D,"LI",{});var aSe=s(A7);w1e=n(aSe,"STRONG",{});var $vt=s(w1e);Xcr=r($vt,"vit_mae"),$vt.forEach(t),zcr=r(aSe," \u2014 "),EW=n(aSe,"A",{href:!0});var kvt=s(EW);Wcr=r(kvt,"TFViTMAEModel"),kvt.forEach(t),Qcr=r(aSe," (ViTMAE model)"),aSe.forEach(t),Hcr=i(D),y7=n(D,"LI",{});var nSe=s(y7);A1e=n(nSe,"STRONG",{});var Svt=s(A1e);Ucr=r(Svt,"wav2vec2"),Svt.forEach(t),Jcr=r(nSe," \u2014 "),CW=n(nSe,"A",{href:!0});var Rvt=s(CW);Ycr=r(Rvt,"TFWav2Vec2Model"),Rvt.forEach(t),Kcr=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),Zcr=i(D),L7=n(D,"LI",{});var sSe=s(L7);y1e=n(sSe,"STRONG",{});var Pvt=s(y1e);efr=r(Pvt,"xlm"),Pvt.forEach(t),ofr=r(sSe," \u2014 "),wW=n(sSe,"A",{href:!0});var Bvt=s(wW);rfr=r(Bvt,"TFXLMModel"),Bvt.forEach(t),tfr=r(sSe," (XLM model)"),sSe.forEach(t),afr=i(D),x7=n(D,"LI",{});var lSe=s(x7);L1e=n(lSe,"STRONG",{});var Ivt=s(L1e);nfr=r(Ivt,"xlm-roberta"),Ivt.forEach(t),sfr=r(lSe," \u2014 "),AW=n(lSe,"A",{href:!0});var qvt=s(AW);lfr=r(qvt,"TFXLMRobertaModel"),qvt.forEach(t),ifr=r(lSe," (XLM-RoBERTa model)"),lSe.forEach(t),dfr=i(D),$7=n(D,"LI",{});var iSe=s($7);x1e=n(iSe,"STRONG",{});var Nvt=s(x1e);cfr=r(Nvt,"xlnet"),Nvt.forEach(t),ffr=r(iSe," \u2014 "),yW=n(iSe,"A",{href:!0});var jvt=s(yW);mfr=r(jvt,"TFXLNetModel"),jvt.forEach(t),gfr=r(iSe," (XLNet model)"),iSe.forEach(t),D.forEach(t),hfr=i(hl),T(k7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),fNe=i(f),Xd=n(f,"H2",{class:!0});var uDe=s(Xd);S7=n(uDe,"A",{id:!0,class:!0,href:!0});var Dvt=s(S7);$1e=n(Dvt,"SPAN",{});var Gvt=s($1e);T(oL.$$.fragment,Gvt),Gvt.forEach(t),Dvt.forEach(t),pfr=i(uDe),k1e=n(uDe,"SPAN",{});var Ovt=s(k1e);_fr=r(Ovt,"TFAutoModelForPreTraining"),Ovt.forEach(t),uDe.forEach(t),mNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(rL.$$.fragment,pl),ufr=i(pl),zd=n(pl,"P",{});var DZ=s(zd);bfr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LW=n(DZ,"A",{href:!0});var Vvt=s(LW);vfr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),Ffr=r(DZ," class method or the "),xW=n(DZ,"A",{href:!0});var Xvt=s(xW);Tfr=r(Xvt,"from_config()"),Xvt.forEach(t),Mfr=r(DZ,` class
method.`),DZ.forEach(t),Efr=i(pl),tL=n(pl,"P",{});var bDe=s(tL);Cfr=r(bDe,"This class cannot be instantiated directly using "),S1e=n(bDe,"CODE",{});var zvt=s(S1e);wfr=r(zvt,"__init__()"),zvt.forEach(t),Afr=r(bDe," (throws an error)."),bDe.forEach(t),yfr=i(pl),Lt=n(pl,"DIV",{class:!0});var hw=s(Lt);T(aL.$$.fragment,hw),Lfr=i(hw),R1e=n(hw,"P",{});var Wvt=s(R1e);xfr=r(Wvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wvt.forEach(t),$fr=i(hw),Wd=n(hw,"P",{});var GZ=s(Wd);kfr=r(GZ,`Note:
Loading a model from its configuration file does `),P1e=n(GZ,"STRONG",{});var Qvt=s(P1e);Sfr=r(Qvt,"not"),Qvt.forEach(t),Rfr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(GZ,"A",{href:!0});var Hvt=s($W);Pfr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Bfr=r(GZ," to load the model weights."),GZ.forEach(t),Ifr=i(hw),T(R7.$$.fragment,hw),hw.forEach(t),qfr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(nL.$$.fragment,_l),Nfr=i(_l),B1e=n(_l,"P",{});var Uvt=s(B1e);jfr=r(Uvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uvt.forEach(t),Dfr=i(_l),Za=n(_l,"P",{});var pw=s(Za);Gfr=r(pw,"The model class to instantiate is selected based on the "),I1e=n(pw,"CODE",{});var Jvt=s(I1e);Ofr=r(Jvt,"model_type"),Jvt.forEach(t),Vfr=r(pw,` property of the config object (either
passed as an argument or loaded from `),q1e=n(pw,"CODE",{});var Yvt=s(q1e);Xfr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),zfr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(pw,"CODE",{});var Kvt=s(N1e);Wfr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),Qfr=r(pw,":"),pw.forEach(t),Hfr=i(_l),se=n(_l,"UL",{});var le=s(se);P7=n(le,"LI",{});var dSe=s(P7);j1e=n(dSe,"STRONG",{});var Zvt=s(j1e);Ufr=r(Zvt,"albert"),Zvt.forEach(t),Jfr=r(dSe," \u2014 "),kW=n(dSe,"A",{href:!0});var eFt=s(kW);Yfr=r(eFt,"TFAlbertForPreTraining"),eFt.forEach(t),Kfr=r(dSe," (ALBERT model)"),dSe.forEach(t),Zfr=i(le),B7=n(le,"LI",{});var cSe=s(B7);D1e=n(cSe,"STRONG",{});var oFt=s(D1e);emr=r(oFt,"bart"),oFt.forEach(t),omr=r(cSe," \u2014 "),SW=n(cSe,"A",{href:!0});var rFt=s(SW);rmr=r(rFt,"TFBartForConditionalGeneration"),rFt.forEach(t),tmr=r(cSe," (BART model)"),cSe.forEach(t),amr=i(le),I7=n(le,"LI",{});var fSe=s(I7);G1e=n(fSe,"STRONG",{});var tFt=s(G1e);nmr=r(tFt,"bert"),tFt.forEach(t),smr=r(fSe," \u2014 "),RW=n(fSe,"A",{href:!0});var aFt=s(RW);lmr=r(aFt,"TFBertForPreTraining"),aFt.forEach(t),imr=r(fSe," (BERT model)"),fSe.forEach(t),dmr=i(le),q7=n(le,"LI",{});var mSe=s(q7);O1e=n(mSe,"STRONG",{});var nFt=s(O1e);cmr=r(nFt,"camembert"),nFt.forEach(t),fmr=r(mSe," \u2014 "),PW=n(mSe,"A",{href:!0});var sFt=s(PW);mmr=r(sFt,"TFCamembertForMaskedLM"),sFt.forEach(t),gmr=r(mSe," (CamemBERT model)"),mSe.forEach(t),hmr=i(le),N7=n(le,"LI",{});var gSe=s(N7);V1e=n(gSe,"STRONG",{});var lFt=s(V1e);pmr=r(lFt,"ctrl"),lFt.forEach(t),_mr=r(gSe," \u2014 "),BW=n(gSe,"A",{href:!0});var iFt=s(BW);umr=r(iFt,"TFCTRLLMHeadModel"),iFt.forEach(t),bmr=r(gSe," (CTRL model)"),gSe.forEach(t),vmr=i(le),j7=n(le,"LI",{});var hSe=s(j7);X1e=n(hSe,"STRONG",{});var dFt=s(X1e);Fmr=r(dFt,"distilbert"),dFt.forEach(t),Tmr=r(hSe," \u2014 "),IW=n(hSe,"A",{href:!0});var cFt=s(IW);Mmr=r(cFt,"TFDistilBertForMaskedLM"),cFt.forEach(t),Emr=r(hSe," (DistilBERT model)"),hSe.forEach(t),Cmr=i(le),D7=n(le,"LI",{});var pSe=s(D7);z1e=n(pSe,"STRONG",{});var fFt=s(z1e);wmr=r(fFt,"electra"),fFt.forEach(t),Amr=r(pSe," \u2014 "),qW=n(pSe,"A",{href:!0});var mFt=s(qW);ymr=r(mFt,"TFElectraForPreTraining"),mFt.forEach(t),Lmr=r(pSe," (ELECTRA model)"),pSe.forEach(t),xmr=i(le),G7=n(le,"LI",{});var _Se=s(G7);W1e=n(_Se,"STRONG",{});var gFt=s(W1e);$mr=r(gFt,"flaubert"),gFt.forEach(t),kmr=r(_Se," \u2014 "),NW=n(_Se,"A",{href:!0});var hFt=s(NW);Smr=r(hFt,"TFFlaubertWithLMHeadModel"),hFt.forEach(t),Rmr=r(_Se," (FlauBERT model)"),_Se.forEach(t),Pmr=i(le),O7=n(le,"LI",{});var uSe=s(O7);Q1e=n(uSe,"STRONG",{});var pFt=s(Q1e);Bmr=r(pFt,"funnel"),pFt.forEach(t),Imr=r(uSe," \u2014 "),jW=n(uSe,"A",{href:!0});var _Ft=s(jW);qmr=r(_Ft,"TFFunnelForPreTraining"),_Ft.forEach(t),Nmr=r(uSe," (Funnel Transformer model)"),uSe.forEach(t),jmr=i(le),V7=n(le,"LI",{});var bSe=s(V7);H1e=n(bSe,"STRONG",{});var uFt=s(H1e);Dmr=r(uFt,"gpt2"),uFt.forEach(t),Gmr=r(bSe," \u2014 "),DW=n(bSe,"A",{href:!0});var bFt=s(DW);Omr=r(bFt,"TFGPT2LMHeadModel"),bFt.forEach(t),Vmr=r(bSe," (OpenAI GPT-2 model)"),bSe.forEach(t),Xmr=i(le),X7=n(le,"LI",{});var vSe=s(X7);U1e=n(vSe,"STRONG",{});var vFt=s(U1e);zmr=r(vFt,"layoutlm"),vFt.forEach(t),Wmr=r(vSe," \u2014 "),GW=n(vSe,"A",{href:!0});var FFt=s(GW);Qmr=r(FFt,"TFLayoutLMForMaskedLM"),FFt.forEach(t),Hmr=r(vSe," (LayoutLM model)"),vSe.forEach(t),Umr=i(le),z7=n(le,"LI",{});var FSe=s(z7);J1e=n(FSe,"STRONG",{});var TFt=s(J1e);Jmr=r(TFt,"lxmert"),TFt.forEach(t),Ymr=r(FSe," \u2014 "),OW=n(FSe,"A",{href:!0});var MFt=s(OW);Kmr=r(MFt,"TFLxmertForPreTraining"),MFt.forEach(t),Zmr=r(FSe," (LXMERT model)"),FSe.forEach(t),egr=i(le),W7=n(le,"LI",{});var TSe=s(W7);Y1e=n(TSe,"STRONG",{});var EFt=s(Y1e);ogr=r(EFt,"mobilebert"),EFt.forEach(t),rgr=r(TSe," \u2014 "),VW=n(TSe,"A",{href:!0});var CFt=s(VW);tgr=r(CFt,"TFMobileBertForPreTraining"),CFt.forEach(t),agr=r(TSe," (MobileBERT model)"),TSe.forEach(t),ngr=i(le),Q7=n(le,"LI",{});var MSe=s(Q7);K1e=n(MSe,"STRONG",{});var wFt=s(K1e);sgr=r(wFt,"mpnet"),wFt.forEach(t),lgr=r(MSe," \u2014 "),XW=n(MSe,"A",{href:!0});var AFt=s(XW);igr=r(AFt,"TFMPNetForMaskedLM"),AFt.forEach(t),dgr=r(MSe," (MPNet model)"),MSe.forEach(t),cgr=i(le),H7=n(le,"LI",{});var ESe=s(H7);Z1e=n(ESe,"STRONG",{});var yFt=s(Z1e);fgr=r(yFt,"openai-gpt"),yFt.forEach(t),mgr=r(ESe," \u2014 "),zW=n(ESe,"A",{href:!0});var LFt=s(zW);ggr=r(LFt,"TFOpenAIGPTLMHeadModel"),LFt.forEach(t),hgr=r(ESe," (OpenAI GPT model)"),ESe.forEach(t),pgr=i(le),U7=n(le,"LI",{});var CSe=s(U7);ebe=n(CSe,"STRONG",{});var xFt=s(ebe);_gr=r(xFt,"roberta"),xFt.forEach(t),ugr=r(CSe," \u2014 "),WW=n(CSe,"A",{href:!0});var $Ft=s(WW);bgr=r($Ft,"TFRobertaForMaskedLM"),$Ft.forEach(t),vgr=r(CSe," (RoBERTa model)"),CSe.forEach(t),Fgr=i(le),J7=n(le,"LI",{});var wSe=s(J7);obe=n(wSe,"STRONG",{});var kFt=s(obe);Tgr=r(kFt,"t5"),kFt.forEach(t),Mgr=r(wSe," \u2014 "),QW=n(wSe,"A",{href:!0});var SFt=s(QW);Egr=r(SFt,"TFT5ForConditionalGeneration"),SFt.forEach(t),Cgr=r(wSe," (T5 model)"),wSe.forEach(t),wgr=i(le),Y7=n(le,"LI",{});var ASe=s(Y7);rbe=n(ASe,"STRONG",{});var RFt=s(rbe);Agr=r(RFt,"tapas"),RFt.forEach(t),ygr=r(ASe," \u2014 "),HW=n(ASe,"A",{href:!0});var PFt=s(HW);Lgr=r(PFt,"TFTapasForMaskedLM"),PFt.forEach(t),xgr=r(ASe," (TAPAS model)"),ASe.forEach(t),$gr=i(le),K7=n(le,"LI",{});var ySe=s(K7);tbe=n(ySe,"STRONG",{});var BFt=s(tbe);kgr=r(BFt,"transfo-xl"),BFt.forEach(t),Sgr=r(ySe," \u2014 "),UW=n(ySe,"A",{href:!0});var IFt=s(UW);Rgr=r(IFt,"TFTransfoXLLMHeadModel"),IFt.forEach(t),Pgr=r(ySe," (Transformer-XL model)"),ySe.forEach(t),Bgr=i(le),Z7=n(le,"LI",{});var LSe=s(Z7);abe=n(LSe,"STRONG",{});var qFt=s(abe);Igr=r(qFt,"vit_mae"),qFt.forEach(t),qgr=r(LSe," \u2014 "),JW=n(LSe,"A",{href:!0});var NFt=s(JW);Ngr=r(NFt,"TFViTMAEForPreTraining"),NFt.forEach(t),jgr=r(LSe," (ViTMAE model)"),LSe.forEach(t),Dgr=i(le),e9=n(le,"LI",{});var xSe=s(e9);nbe=n(xSe,"STRONG",{});var jFt=s(nbe);Ggr=r(jFt,"xlm"),jFt.forEach(t),Ogr=r(xSe," \u2014 "),YW=n(xSe,"A",{href:!0});var DFt=s(YW);Vgr=r(DFt,"TFXLMWithLMHeadModel"),DFt.forEach(t),Xgr=r(xSe," (XLM model)"),xSe.forEach(t),zgr=i(le),o9=n(le,"LI",{});var $Se=s(o9);sbe=n($Se,"STRONG",{});var GFt=s(sbe);Wgr=r(GFt,"xlm-roberta"),GFt.forEach(t),Qgr=r($Se," \u2014 "),KW=n($Se,"A",{href:!0});var OFt=s(KW);Hgr=r(OFt,"TFXLMRobertaForMaskedLM"),OFt.forEach(t),Ugr=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),Jgr=i(le),r9=n(le,"LI",{});var kSe=s(r9);lbe=n(kSe,"STRONG",{});var VFt=s(lbe);Ygr=r(VFt,"xlnet"),VFt.forEach(t),Kgr=r(kSe," \u2014 "),ZW=n(kSe,"A",{href:!0});var XFt=s(ZW);Zgr=r(XFt,"TFXLNetLMHeadModel"),XFt.forEach(t),ehr=r(kSe," (XLNet model)"),kSe.forEach(t),le.forEach(t),ohr=i(_l),T(t9.$$.fragment,_l),_l.forEach(t),pl.forEach(t),gNe=i(f),Qd=n(f,"H2",{class:!0});var vDe=s(Qd);a9=n(vDe,"A",{id:!0,class:!0,href:!0});var zFt=s(a9);ibe=n(zFt,"SPAN",{});var WFt=s(ibe);T(sL.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),rhr=i(vDe),dbe=n(vDe,"SPAN",{});var QFt=s(dbe);thr=r(QFt,"TFAutoModelForCausalLM"),QFt.forEach(t),vDe.forEach(t),hNe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(lL.$$.fragment,ul),ahr=i(ul),Hd=n(ul,"P",{});var OZ=s(Hd);nhr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eQ=n(OZ,"A",{href:!0});var HFt=s(eQ);shr=r(HFt,"from_pretrained()"),HFt.forEach(t),lhr=r(OZ," class method or the "),oQ=n(OZ,"A",{href:!0});var UFt=s(oQ);ihr=r(UFt,"from_config()"),UFt.forEach(t),dhr=r(OZ,` class
method.`),OZ.forEach(t),chr=i(ul),iL=n(ul,"P",{});var FDe=s(iL);fhr=r(FDe,"This class cannot be instantiated directly using "),cbe=n(FDe,"CODE",{});var JFt=s(cbe);mhr=r(JFt,"__init__()"),JFt.forEach(t),ghr=r(FDe," (throws an error)."),FDe.forEach(t),hhr=i(ul),xt=n(ul,"DIV",{class:!0});var _w=s(xt);T(dL.$$.fragment,_w),phr=i(_w),fbe=n(_w,"P",{});var YFt=s(fbe);_hr=r(YFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YFt.forEach(t),uhr=i(_w),Ud=n(_w,"P",{});var VZ=s(Ud);bhr=r(VZ,`Note:
Loading a model from its configuration file does `),mbe=n(VZ,"STRONG",{});var KFt=s(mbe);vhr=r(KFt,"not"),KFt.forEach(t),Fhr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(VZ,"A",{href:!0});var ZFt=s(rQ);Thr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),Mhr=r(VZ," to load the model weights."),VZ.forEach(t),Ehr=i(_w),T(n9.$$.fragment,_w),_w.forEach(t),Chr=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(cL.$$.fragment,bl),whr=i(bl),gbe=n(bl,"P",{});var e6t=s(gbe);Ahr=r(e6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e6t.forEach(t),yhr=i(bl),en=n(bl,"P",{});var uw=s(en);Lhr=r(uw,"The model class to instantiate is selected based on the "),hbe=n(uw,"CODE",{});var o6t=s(hbe);xhr=r(o6t,"model_type"),o6t.forEach(t),$hr=r(uw,` property of the config object (either
passed as an argument or loaded from `),pbe=n(uw,"CODE",{});var r6t=s(pbe);khr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Shr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(uw,"CODE",{});var t6t=s(_be);Rhr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Phr=r(uw,":"),uw.forEach(t),Bhr=i(bl),Me=n(bl,"UL",{});var we=s(Me);s9=n(we,"LI",{});var SSe=s(s9);ube=n(SSe,"STRONG",{});var a6t=s(ube);Ihr=r(a6t,"bert"),a6t.forEach(t),qhr=r(SSe," \u2014 "),tQ=n(SSe,"A",{href:!0});var n6t=s(tQ);Nhr=r(n6t,"TFBertLMHeadModel"),n6t.forEach(t),jhr=r(SSe," (BERT model)"),SSe.forEach(t),Dhr=i(we),l9=n(we,"LI",{});var RSe=s(l9);bbe=n(RSe,"STRONG",{});var s6t=s(bbe);Ghr=r(s6t,"camembert"),s6t.forEach(t),Ohr=r(RSe," \u2014 "),aQ=n(RSe,"A",{href:!0});var l6t=s(aQ);Vhr=r(l6t,"TFCamembertForCausalLM"),l6t.forEach(t),Xhr=r(RSe," (CamemBERT model)"),RSe.forEach(t),zhr=i(we),i9=n(we,"LI",{});var PSe=s(i9);vbe=n(PSe,"STRONG",{});var i6t=s(vbe);Whr=r(i6t,"ctrl"),i6t.forEach(t),Qhr=r(PSe," \u2014 "),nQ=n(PSe,"A",{href:!0});var d6t=s(nQ);Hhr=r(d6t,"TFCTRLLMHeadModel"),d6t.forEach(t),Uhr=r(PSe," (CTRL model)"),PSe.forEach(t),Jhr=i(we),d9=n(we,"LI",{});var BSe=s(d9);Fbe=n(BSe,"STRONG",{});var c6t=s(Fbe);Yhr=r(c6t,"gpt2"),c6t.forEach(t),Khr=r(BSe," \u2014 "),sQ=n(BSe,"A",{href:!0});var f6t=s(sQ);Zhr=r(f6t,"TFGPT2LMHeadModel"),f6t.forEach(t),epr=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),opr=i(we),c9=n(we,"LI",{});var ISe=s(c9);Tbe=n(ISe,"STRONG",{});var m6t=s(Tbe);rpr=r(m6t,"gptj"),m6t.forEach(t),tpr=r(ISe," \u2014 "),lQ=n(ISe,"A",{href:!0});var g6t=s(lQ);apr=r(g6t,"TFGPTJForCausalLM"),g6t.forEach(t),npr=r(ISe," (GPT-J model)"),ISe.forEach(t),spr=i(we),f9=n(we,"LI",{});var qSe=s(f9);Mbe=n(qSe,"STRONG",{});var h6t=s(Mbe);lpr=r(h6t,"openai-gpt"),h6t.forEach(t),ipr=r(qSe," \u2014 "),iQ=n(qSe,"A",{href:!0});var p6t=s(iQ);dpr=r(p6t,"TFOpenAIGPTLMHeadModel"),p6t.forEach(t),cpr=r(qSe," (OpenAI GPT model)"),qSe.forEach(t),fpr=i(we),m9=n(we,"LI",{});var NSe=s(m9);Ebe=n(NSe,"STRONG",{});var _6t=s(Ebe);mpr=r(_6t,"rembert"),_6t.forEach(t),gpr=r(NSe," \u2014 "),dQ=n(NSe,"A",{href:!0});var u6t=s(dQ);hpr=r(u6t,"TFRemBertForCausalLM"),u6t.forEach(t),ppr=r(NSe," (RemBERT model)"),NSe.forEach(t),_pr=i(we),g9=n(we,"LI",{});var jSe=s(g9);Cbe=n(jSe,"STRONG",{});var b6t=s(Cbe);upr=r(b6t,"roberta"),b6t.forEach(t),bpr=r(jSe," \u2014 "),cQ=n(jSe,"A",{href:!0});var v6t=s(cQ);vpr=r(v6t,"TFRobertaForCausalLM"),v6t.forEach(t),Fpr=r(jSe," (RoBERTa model)"),jSe.forEach(t),Tpr=i(we),h9=n(we,"LI",{});var DSe=s(h9);wbe=n(DSe,"STRONG",{});var F6t=s(wbe);Mpr=r(F6t,"roformer"),F6t.forEach(t),Epr=r(DSe," \u2014 "),fQ=n(DSe,"A",{href:!0});var T6t=s(fQ);Cpr=r(T6t,"TFRoFormerForCausalLM"),T6t.forEach(t),wpr=r(DSe," (RoFormer model)"),DSe.forEach(t),Apr=i(we),p9=n(we,"LI",{});var GSe=s(p9);Abe=n(GSe,"STRONG",{});var M6t=s(Abe);ypr=r(M6t,"transfo-xl"),M6t.forEach(t),Lpr=r(GSe," \u2014 "),mQ=n(GSe,"A",{href:!0});var E6t=s(mQ);xpr=r(E6t,"TFTransfoXLLMHeadModel"),E6t.forEach(t),$pr=r(GSe," (Transformer-XL model)"),GSe.forEach(t),kpr=i(we),_9=n(we,"LI",{});var OSe=s(_9);ybe=n(OSe,"STRONG",{});var C6t=s(ybe);Spr=r(C6t,"xlm"),C6t.forEach(t),Rpr=r(OSe," \u2014 "),gQ=n(OSe,"A",{href:!0});var w6t=s(gQ);Ppr=r(w6t,"TFXLMWithLMHeadModel"),w6t.forEach(t),Bpr=r(OSe," (XLM model)"),OSe.forEach(t),Ipr=i(we),u9=n(we,"LI",{});var VSe=s(u9);Lbe=n(VSe,"STRONG",{});var A6t=s(Lbe);qpr=r(A6t,"xlnet"),A6t.forEach(t),Npr=r(VSe," \u2014 "),hQ=n(VSe,"A",{href:!0});var y6t=s(hQ);jpr=r(y6t,"TFXLNetLMHeadModel"),y6t.forEach(t),Dpr=r(VSe," (XLNet model)"),VSe.forEach(t),we.forEach(t),Gpr=i(bl),T(b9.$$.fragment,bl),bl.forEach(t),ul.forEach(t),pNe=i(f),Jd=n(f,"H2",{class:!0});var TDe=s(Jd);v9=n(TDe,"A",{id:!0,class:!0,href:!0});var L6t=s(v9);xbe=n(L6t,"SPAN",{});var x6t=s(xbe);T(fL.$$.fragment,x6t),x6t.forEach(t),L6t.forEach(t),Opr=i(TDe),$be=n(TDe,"SPAN",{});var $6t=s($be);Vpr=r($6t,"TFAutoModelForImageClassification"),$6t.forEach(t),TDe.forEach(t),_Ne=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(mL.$$.fragment,vl),Xpr=i(vl),Yd=n(vl,"P",{});var XZ=s(Yd);zpr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pQ=n(XZ,"A",{href:!0});var k6t=s(pQ);Wpr=r(k6t,"from_pretrained()"),k6t.forEach(t),Qpr=r(XZ," class method or the "),_Q=n(XZ,"A",{href:!0});var S6t=s(_Q);Hpr=r(S6t,"from_config()"),S6t.forEach(t),Upr=r(XZ,` class
method.`),XZ.forEach(t),Jpr=i(vl),gL=n(vl,"P",{});var MDe=s(gL);Ypr=r(MDe,"This class cannot be instantiated directly using "),kbe=n(MDe,"CODE",{});var R6t=s(kbe);Kpr=r(R6t,"__init__()"),R6t.forEach(t),Zpr=r(MDe," (throws an error)."),MDe.forEach(t),e_r=i(vl),$t=n(vl,"DIV",{class:!0});var bw=s($t);T(hL.$$.fragment,bw),o_r=i(bw),Sbe=n(bw,"P",{});var P6t=s(Sbe);r_r=r(P6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P6t.forEach(t),t_r=i(bw),Kd=n(bw,"P",{});var zZ=s(Kd);a_r=r(zZ,`Note:
Loading a model from its configuration file does `),Rbe=n(zZ,"STRONG",{});var B6t=s(Rbe);n_r=r(B6t,"not"),B6t.forEach(t),s_r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(zZ,"A",{href:!0});var I6t=s(uQ);l_r=r(I6t,"from_pretrained()"),I6t.forEach(t),i_r=r(zZ," to load the model weights."),zZ.forEach(t),d_r=i(bw),T(F9.$$.fragment,bw),bw.forEach(t),c_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(pL.$$.fragment,Fl),f_r=i(Fl),Pbe=n(Fl,"P",{});var q6t=s(Pbe);m_r=r(q6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q6t.forEach(t),g_r=i(Fl),on=n(Fl,"P",{});var vw=s(on);h_r=r(vw,"The model class to instantiate is selected based on the "),Bbe=n(vw,"CODE",{});var N6t=s(Bbe);p_r=r(N6t,"model_type"),N6t.forEach(t),__r=r(vw,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(vw,"CODE",{});var j6t=s(Ibe);u_r=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),b_r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(vw,"CODE",{});var D6t=s(qbe);v_r=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),F_r=r(vw,":"),vw.forEach(t),T_r=i(Fl),rn=n(Fl,"UL",{});var Fw=s(rn);T9=n(Fw,"LI",{});var XSe=s(T9);Nbe=n(XSe,"STRONG",{});var G6t=s(Nbe);M_r=r(G6t,"convnext"),G6t.forEach(t),E_r=r(XSe," \u2014 "),bQ=n(XSe,"A",{href:!0});var O6t=s(bQ);C_r=r(O6t,"TFConvNextForImageClassification"),O6t.forEach(t),w_r=r(XSe," (ConvNext model)"),XSe.forEach(t),A_r=i(Fw),M9=n(Fw,"LI",{});var zSe=s(M9);jbe=n(zSe,"STRONG",{});var V6t=s(jbe);y_r=r(V6t,"data2vec-vision"),V6t.forEach(t),L_r=r(zSe," \u2014 "),vQ=n(zSe,"A",{href:!0});var X6t=s(vQ);x_r=r(X6t,"TFData2VecVisionForImageClassification"),X6t.forEach(t),$_r=r(zSe," (Data2VecVision model)"),zSe.forEach(t),k_r=i(Fw),E9=n(Fw,"LI",{});var WSe=s(E9);Dbe=n(WSe,"STRONG",{});var z6t=s(Dbe);S_r=r(z6t,"swin"),z6t.forEach(t),R_r=r(WSe," \u2014 "),FQ=n(WSe,"A",{href:!0});var W6t=s(FQ);P_r=r(W6t,"TFSwinForImageClassification"),W6t.forEach(t),B_r=r(WSe," (Swin model)"),WSe.forEach(t),I_r=i(Fw),C9=n(Fw,"LI",{});var QSe=s(C9);Gbe=n(QSe,"STRONG",{});var Q6t=s(Gbe);q_r=r(Q6t,"vit"),Q6t.forEach(t),N_r=r(QSe," \u2014 "),TQ=n(QSe,"A",{href:!0});var H6t=s(TQ);j_r=r(H6t,"TFViTForImageClassification"),H6t.forEach(t),D_r=r(QSe," (ViT model)"),QSe.forEach(t),Fw.forEach(t),G_r=i(Fl),T(w9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),uNe=i(f),Zd=n(f,"H2",{class:!0});var EDe=s(Zd);A9=n(EDe,"A",{id:!0,class:!0,href:!0});var U6t=s(A9);Obe=n(U6t,"SPAN",{});var J6t=s(Obe);T(_L.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),O_r=i(EDe),Vbe=n(EDe,"SPAN",{});var Y6t=s(Vbe);V_r=r(Y6t,"TFAutoModelForMaskedLM"),Y6t.forEach(t),EDe.forEach(t),bNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(uL.$$.fragment,Tl),X_r=i(Tl),ec=n(Tl,"P",{});var WZ=s(ec);z_r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MQ=n(WZ,"A",{href:!0});var K6t=s(MQ);W_r=r(K6t,"from_pretrained()"),K6t.forEach(t),Q_r=r(WZ," class method or the "),EQ=n(WZ,"A",{href:!0});var Z6t=s(EQ);H_r=r(Z6t,"from_config()"),Z6t.forEach(t),U_r=r(WZ,` class
method.`),WZ.forEach(t),J_r=i(Tl),bL=n(Tl,"P",{});var CDe=s(bL);Y_r=r(CDe,"This class cannot be instantiated directly using "),Xbe=n(CDe,"CODE",{});var eTt=s(Xbe);K_r=r(eTt,"__init__()"),eTt.forEach(t),Z_r=r(CDe," (throws an error)."),CDe.forEach(t),eur=i(Tl),kt=n(Tl,"DIV",{class:!0});var Tw=s(kt);T(vL.$$.fragment,Tw),our=i(Tw),zbe=n(Tw,"P",{});var oTt=s(zbe);rur=r(oTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oTt.forEach(t),tur=i(Tw),oc=n(Tw,"P",{});var QZ=s(oc);aur=r(QZ,`Note:
Loading a model from its configuration file does `),Wbe=n(QZ,"STRONG",{});var rTt=s(Wbe);nur=r(rTt,"not"),rTt.forEach(t),sur=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(QZ,"A",{href:!0});var tTt=s(CQ);lur=r(tTt,"from_pretrained()"),tTt.forEach(t),iur=r(QZ," to load the model weights."),QZ.forEach(t),dur=i(Tw),T(y9.$$.fragment,Tw),Tw.forEach(t),cur=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(FL.$$.fragment,Ml),fur=i(Ml),Qbe=n(Ml,"P",{});var aTt=s(Qbe);mur=r(aTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aTt.forEach(t),gur=i(Ml),tn=n(Ml,"P",{});var Mw=s(tn);hur=r(Mw,"The model class to instantiate is selected based on the "),Hbe=n(Mw,"CODE",{});var nTt=s(Hbe);pur=r(nTt,"model_type"),nTt.forEach(t),_ur=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Ube=n(Mw,"CODE",{});var sTt=s(Ube);uur=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),bur=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(Mw,"CODE",{});var lTt=s(Jbe);vur=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),Fur=r(Mw,":"),Mw.forEach(t),Tur=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);L9=n(fe,"LI",{});var HSe=s(L9);Ybe=n(HSe,"STRONG",{});var iTt=s(Ybe);Mur=r(iTt,"albert"),iTt.forEach(t),Eur=r(HSe," \u2014 "),wQ=n(HSe,"A",{href:!0});var dTt=s(wQ);Cur=r(dTt,"TFAlbertForMaskedLM"),dTt.forEach(t),wur=r(HSe," (ALBERT model)"),HSe.forEach(t),Aur=i(fe),x9=n(fe,"LI",{});var USe=s(x9);Kbe=n(USe,"STRONG",{});var cTt=s(Kbe);yur=r(cTt,"bert"),cTt.forEach(t),Lur=r(USe," \u2014 "),AQ=n(USe,"A",{href:!0});var fTt=s(AQ);xur=r(fTt,"TFBertForMaskedLM"),fTt.forEach(t),$ur=r(USe," (BERT model)"),USe.forEach(t),kur=i(fe),$9=n(fe,"LI",{});var JSe=s($9);Zbe=n(JSe,"STRONG",{});var mTt=s(Zbe);Sur=r(mTt,"camembert"),mTt.forEach(t),Rur=r(JSe," \u2014 "),yQ=n(JSe,"A",{href:!0});var gTt=s(yQ);Pur=r(gTt,"TFCamembertForMaskedLM"),gTt.forEach(t),Bur=r(JSe," (CamemBERT model)"),JSe.forEach(t),Iur=i(fe),k9=n(fe,"LI",{});var YSe=s(k9);eve=n(YSe,"STRONG",{});var hTt=s(eve);qur=r(hTt,"convbert"),hTt.forEach(t),Nur=r(YSe," \u2014 "),LQ=n(YSe,"A",{href:!0});var pTt=s(LQ);jur=r(pTt,"TFConvBertForMaskedLM"),pTt.forEach(t),Dur=r(YSe," (ConvBERT model)"),YSe.forEach(t),Gur=i(fe),S9=n(fe,"LI",{});var KSe=s(S9);ove=n(KSe,"STRONG",{});var _Tt=s(ove);Our=r(_Tt,"deberta"),_Tt.forEach(t),Vur=r(KSe," \u2014 "),xQ=n(KSe,"A",{href:!0});var uTt=s(xQ);Xur=r(uTt,"TFDebertaForMaskedLM"),uTt.forEach(t),zur=r(KSe," (DeBERTa model)"),KSe.forEach(t),Wur=i(fe),R9=n(fe,"LI",{});var ZSe=s(R9);rve=n(ZSe,"STRONG",{});var bTt=s(rve);Qur=r(bTt,"deberta-v2"),bTt.forEach(t),Hur=r(ZSe," \u2014 "),$Q=n(ZSe,"A",{href:!0});var vTt=s($Q);Uur=r(vTt,"TFDebertaV2ForMaskedLM"),vTt.forEach(t),Jur=r(ZSe," (DeBERTa-v2 model)"),ZSe.forEach(t),Yur=i(fe),P9=n(fe,"LI",{});var eRe=s(P9);tve=n(eRe,"STRONG",{});var FTt=s(tve);Kur=r(FTt,"distilbert"),FTt.forEach(t),Zur=r(eRe," \u2014 "),kQ=n(eRe,"A",{href:!0});var TTt=s(kQ);e2r=r(TTt,"TFDistilBertForMaskedLM"),TTt.forEach(t),o2r=r(eRe," (DistilBERT model)"),eRe.forEach(t),r2r=i(fe),B9=n(fe,"LI",{});var oRe=s(B9);ave=n(oRe,"STRONG",{});var MTt=s(ave);t2r=r(MTt,"electra"),MTt.forEach(t),a2r=r(oRe," \u2014 "),SQ=n(oRe,"A",{href:!0});var ETt=s(SQ);n2r=r(ETt,"TFElectraForMaskedLM"),ETt.forEach(t),s2r=r(oRe," (ELECTRA model)"),oRe.forEach(t),l2r=i(fe),I9=n(fe,"LI",{});var rRe=s(I9);nve=n(rRe,"STRONG",{});var CTt=s(nve);i2r=r(CTt,"flaubert"),CTt.forEach(t),d2r=r(rRe," \u2014 "),RQ=n(rRe,"A",{href:!0});var wTt=s(RQ);c2r=r(wTt,"TFFlaubertWithLMHeadModel"),wTt.forEach(t),f2r=r(rRe," (FlauBERT model)"),rRe.forEach(t),m2r=i(fe),q9=n(fe,"LI",{});var tRe=s(q9);sve=n(tRe,"STRONG",{});var ATt=s(sve);g2r=r(ATt,"funnel"),ATt.forEach(t),h2r=r(tRe," \u2014 "),PQ=n(tRe,"A",{href:!0});var yTt=s(PQ);p2r=r(yTt,"TFFunnelForMaskedLM"),yTt.forEach(t),_2r=r(tRe," (Funnel Transformer model)"),tRe.forEach(t),u2r=i(fe),N9=n(fe,"LI",{});var aRe=s(N9);lve=n(aRe,"STRONG",{});var LTt=s(lve);b2r=r(LTt,"layoutlm"),LTt.forEach(t),v2r=r(aRe," \u2014 "),BQ=n(aRe,"A",{href:!0});var xTt=s(BQ);F2r=r(xTt,"TFLayoutLMForMaskedLM"),xTt.forEach(t),T2r=r(aRe," (LayoutLM model)"),aRe.forEach(t),M2r=i(fe),j9=n(fe,"LI",{});var nRe=s(j9);ive=n(nRe,"STRONG",{});var $Tt=s(ive);E2r=r($Tt,"longformer"),$Tt.forEach(t),C2r=r(nRe," \u2014 "),IQ=n(nRe,"A",{href:!0});var kTt=s(IQ);w2r=r(kTt,"TFLongformerForMaskedLM"),kTt.forEach(t),A2r=r(nRe," (Longformer model)"),nRe.forEach(t),y2r=i(fe),D9=n(fe,"LI",{});var sRe=s(D9);dve=n(sRe,"STRONG",{});var STt=s(dve);L2r=r(STt,"mobilebert"),STt.forEach(t),x2r=r(sRe," \u2014 "),qQ=n(sRe,"A",{href:!0});var RTt=s(qQ);$2r=r(RTt,"TFMobileBertForMaskedLM"),RTt.forEach(t),k2r=r(sRe," (MobileBERT model)"),sRe.forEach(t),S2r=i(fe),G9=n(fe,"LI",{});var lRe=s(G9);cve=n(lRe,"STRONG",{});var PTt=s(cve);R2r=r(PTt,"mpnet"),PTt.forEach(t),P2r=r(lRe," \u2014 "),NQ=n(lRe,"A",{href:!0});var BTt=s(NQ);B2r=r(BTt,"TFMPNetForMaskedLM"),BTt.forEach(t),I2r=r(lRe," (MPNet model)"),lRe.forEach(t),q2r=i(fe),O9=n(fe,"LI",{});var iRe=s(O9);fve=n(iRe,"STRONG",{});var ITt=s(fve);N2r=r(ITt,"rembert"),ITt.forEach(t),j2r=r(iRe," \u2014 "),jQ=n(iRe,"A",{href:!0});var qTt=s(jQ);D2r=r(qTt,"TFRemBertForMaskedLM"),qTt.forEach(t),G2r=r(iRe," (RemBERT model)"),iRe.forEach(t),O2r=i(fe),V9=n(fe,"LI",{});var dRe=s(V9);mve=n(dRe,"STRONG",{});var NTt=s(mve);V2r=r(NTt,"roberta"),NTt.forEach(t),X2r=r(dRe," \u2014 "),DQ=n(dRe,"A",{href:!0});var jTt=s(DQ);z2r=r(jTt,"TFRobertaForMaskedLM"),jTt.forEach(t),W2r=r(dRe," (RoBERTa model)"),dRe.forEach(t),Q2r=i(fe),X9=n(fe,"LI",{});var cRe=s(X9);gve=n(cRe,"STRONG",{});var DTt=s(gve);H2r=r(DTt,"roformer"),DTt.forEach(t),U2r=r(cRe," \u2014 "),GQ=n(cRe,"A",{href:!0});var GTt=s(GQ);J2r=r(GTt,"TFRoFormerForMaskedLM"),GTt.forEach(t),Y2r=r(cRe," (RoFormer model)"),cRe.forEach(t),K2r=i(fe),z9=n(fe,"LI",{});var fRe=s(z9);hve=n(fRe,"STRONG",{});var OTt=s(hve);Z2r=r(OTt,"tapas"),OTt.forEach(t),e1r=r(fRe," \u2014 "),OQ=n(fRe,"A",{href:!0});var VTt=s(OQ);o1r=r(VTt,"TFTapasForMaskedLM"),VTt.forEach(t),r1r=r(fRe," (TAPAS model)"),fRe.forEach(t),t1r=i(fe),W9=n(fe,"LI",{});var mRe=s(W9);pve=n(mRe,"STRONG",{});var XTt=s(pve);a1r=r(XTt,"xlm"),XTt.forEach(t),n1r=r(mRe," \u2014 "),VQ=n(mRe,"A",{href:!0});var zTt=s(VQ);s1r=r(zTt,"TFXLMWithLMHeadModel"),zTt.forEach(t),l1r=r(mRe," (XLM model)"),mRe.forEach(t),i1r=i(fe),Q9=n(fe,"LI",{});var gRe=s(Q9);_ve=n(gRe,"STRONG",{});var WTt=s(_ve);d1r=r(WTt,"xlm-roberta"),WTt.forEach(t),c1r=r(gRe," \u2014 "),XQ=n(gRe,"A",{href:!0});var QTt=s(XQ);f1r=r(QTt,"TFXLMRobertaForMaskedLM"),QTt.forEach(t),m1r=r(gRe," (XLM-RoBERTa model)"),gRe.forEach(t),fe.forEach(t),g1r=i(Ml),T(H9.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),vNe=i(f),rc=n(f,"H2",{class:!0});var wDe=s(rc);U9=n(wDe,"A",{id:!0,class:!0,href:!0});var HTt=s(U9);uve=n(HTt,"SPAN",{});var UTt=s(uve);T(TL.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),h1r=i(wDe),bve=n(wDe,"SPAN",{});var JTt=s(bve);p1r=r(JTt,"TFAutoModelForSeq2SeqLM"),JTt.forEach(t),wDe.forEach(t),FNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(ML.$$.fragment,El),_1r=i(El),tc=n(El,"P",{});var HZ=s(tc);u1r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zQ=n(HZ,"A",{href:!0});var YTt=s(zQ);b1r=r(YTt,"from_pretrained()"),YTt.forEach(t),v1r=r(HZ," class method or the "),WQ=n(HZ,"A",{href:!0});var KTt=s(WQ);F1r=r(KTt,"from_config()"),KTt.forEach(t),T1r=r(HZ,` class
method.`),HZ.forEach(t),M1r=i(El),EL=n(El,"P",{});var ADe=s(EL);E1r=r(ADe,"This class cannot be instantiated directly using "),vve=n(ADe,"CODE",{});var ZTt=s(vve);C1r=r(ZTt,"__init__()"),ZTt.forEach(t),w1r=r(ADe," (throws an error)."),ADe.forEach(t),A1r=i(El),St=n(El,"DIV",{class:!0});var Ew=s(St);T(CL.$$.fragment,Ew),y1r=i(Ew),Fve=n(Ew,"P",{});var e7t=s(Fve);L1r=r(e7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e7t.forEach(t),x1r=i(Ew),ac=n(Ew,"P",{});var UZ=s(ac);$1r=r(UZ,`Note:
Loading a model from its configuration file does `),Tve=n(UZ,"STRONG",{});var o7t=s(Tve);k1r=r(o7t,"not"),o7t.forEach(t),S1r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(UZ,"A",{href:!0});var r7t=s(QQ);R1r=r(r7t,"from_pretrained()"),r7t.forEach(t),P1r=r(UZ," to load the model weights."),UZ.forEach(t),B1r=i(Ew),T(J9.$$.fragment,Ew),Ew.forEach(t),I1r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(wL.$$.fragment,Cl),q1r=i(Cl),Mve=n(Cl,"P",{});var t7t=s(Mve);N1r=r(t7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t7t.forEach(t),j1r=i(Cl),an=n(Cl,"P",{});var Cw=s(an);D1r=r(Cw,"The model class to instantiate is selected based on the "),Eve=n(Cw,"CODE",{});var a7t=s(Eve);G1r=r(a7t,"model_type"),a7t.forEach(t),O1r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Cve=n(Cw,"CODE",{});var n7t=s(Cve);V1r=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),X1r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(Cw,"CODE",{});var s7t=s(wve);z1r=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),W1r=r(Cw,":"),Cw.forEach(t),Q1r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);Y9=n(Be,"LI",{});var hRe=s(Y9);Ave=n(hRe,"STRONG",{});var l7t=s(Ave);H1r=r(l7t,"bart"),l7t.forEach(t),U1r=r(hRe," \u2014 "),HQ=n(hRe,"A",{href:!0});var i7t=s(HQ);J1r=r(i7t,"TFBartForConditionalGeneration"),i7t.forEach(t),Y1r=r(hRe," (BART model)"),hRe.forEach(t),K1r=i(Be),K9=n(Be,"LI",{});var pRe=s(K9);yve=n(pRe,"STRONG",{});var d7t=s(yve);Z1r=r(d7t,"blenderbot"),d7t.forEach(t),ebr=r(pRe," \u2014 "),UQ=n(pRe,"A",{href:!0});var c7t=s(UQ);obr=r(c7t,"TFBlenderbotForConditionalGeneration"),c7t.forEach(t),rbr=r(pRe," (Blenderbot model)"),pRe.forEach(t),tbr=i(Be),Z9=n(Be,"LI",{});var _Re=s(Z9);Lve=n(_Re,"STRONG",{});var f7t=s(Lve);abr=r(f7t,"blenderbot-small"),f7t.forEach(t),nbr=r(_Re," \u2014 "),JQ=n(_Re,"A",{href:!0});var m7t=s(JQ);sbr=r(m7t,"TFBlenderbotSmallForConditionalGeneration"),m7t.forEach(t),lbr=r(_Re," (BlenderbotSmall model)"),_Re.forEach(t),ibr=i(Be),eM=n(Be,"LI",{});var uRe=s(eM);xve=n(uRe,"STRONG",{});var g7t=s(xve);dbr=r(g7t,"encoder-decoder"),g7t.forEach(t),cbr=r(uRe," \u2014 "),YQ=n(uRe,"A",{href:!0});var h7t=s(YQ);fbr=r(h7t,"TFEncoderDecoderModel"),h7t.forEach(t),mbr=r(uRe," (Encoder decoder model)"),uRe.forEach(t),gbr=i(Be),oM=n(Be,"LI",{});var bRe=s(oM);$ve=n(bRe,"STRONG",{});var p7t=s($ve);hbr=r(p7t,"led"),p7t.forEach(t),pbr=r(bRe," \u2014 "),KQ=n(bRe,"A",{href:!0});var _7t=s(KQ);_br=r(_7t,"TFLEDForConditionalGeneration"),_7t.forEach(t),ubr=r(bRe," (LED model)"),bRe.forEach(t),bbr=i(Be),rM=n(Be,"LI",{});var vRe=s(rM);kve=n(vRe,"STRONG",{});var u7t=s(kve);vbr=r(u7t,"marian"),u7t.forEach(t),Fbr=r(vRe," \u2014 "),ZQ=n(vRe,"A",{href:!0});var b7t=s(ZQ);Tbr=r(b7t,"TFMarianMTModel"),b7t.forEach(t),Mbr=r(vRe," (Marian model)"),vRe.forEach(t),Ebr=i(Be),tM=n(Be,"LI",{});var FRe=s(tM);Sve=n(FRe,"STRONG",{});var v7t=s(Sve);Cbr=r(v7t,"mbart"),v7t.forEach(t),wbr=r(FRe," \u2014 "),eH=n(FRe,"A",{href:!0});var F7t=s(eH);Abr=r(F7t,"TFMBartForConditionalGeneration"),F7t.forEach(t),ybr=r(FRe," (mBART model)"),FRe.forEach(t),Lbr=i(Be),aM=n(Be,"LI",{});var TRe=s(aM);Rve=n(TRe,"STRONG",{});var T7t=s(Rve);xbr=r(T7t,"mt5"),T7t.forEach(t),$br=r(TRe," \u2014 "),oH=n(TRe,"A",{href:!0});var M7t=s(oH);kbr=r(M7t,"TFMT5ForConditionalGeneration"),M7t.forEach(t),Sbr=r(TRe," (mT5 model)"),TRe.forEach(t),Rbr=i(Be),nM=n(Be,"LI",{});var MRe=s(nM);Pve=n(MRe,"STRONG",{});var E7t=s(Pve);Pbr=r(E7t,"pegasus"),E7t.forEach(t),Bbr=r(MRe," \u2014 "),rH=n(MRe,"A",{href:!0});var C7t=s(rH);Ibr=r(C7t,"TFPegasusForConditionalGeneration"),C7t.forEach(t),qbr=r(MRe," (Pegasus model)"),MRe.forEach(t),Nbr=i(Be),sM=n(Be,"LI",{});var ERe=s(sM);Bve=n(ERe,"STRONG",{});var w7t=s(Bve);jbr=r(w7t,"t5"),w7t.forEach(t),Dbr=r(ERe," \u2014 "),tH=n(ERe,"A",{href:!0});var A7t=s(tH);Gbr=r(A7t,"TFT5ForConditionalGeneration"),A7t.forEach(t),Obr=r(ERe," (T5 model)"),ERe.forEach(t),Be.forEach(t),Vbr=i(Cl),T(lM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),TNe=i(f),nc=n(f,"H2",{class:!0});var yDe=s(nc);iM=n(yDe,"A",{id:!0,class:!0,href:!0});var y7t=s(iM);Ive=n(y7t,"SPAN",{});var L7t=s(Ive);T(AL.$$.fragment,L7t),L7t.forEach(t),y7t.forEach(t),Xbr=i(yDe),qve=n(yDe,"SPAN",{});var x7t=s(qve);zbr=r(x7t,"TFAutoModelForSequenceClassification"),x7t.forEach(t),yDe.forEach(t),MNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(yL.$$.fragment,wl),Wbr=i(wl),sc=n(wl,"P",{});var JZ=s(sc);Qbr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aH=n(JZ,"A",{href:!0});var $7t=s(aH);Hbr=r($7t,"from_pretrained()"),$7t.forEach(t),Ubr=r(JZ," class method or the "),nH=n(JZ,"A",{href:!0});var k7t=s(nH);Jbr=r(k7t,"from_config()"),k7t.forEach(t),Ybr=r(JZ,` class
method.`),JZ.forEach(t),Kbr=i(wl),LL=n(wl,"P",{});var LDe=s(LL);Zbr=r(LDe,"This class cannot be instantiated directly using "),Nve=n(LDe,"CODE",{});var S7t=s(Nve);evr=r(S7t,"__init__()"),S7t.forEach(t),ovr=r(LDe," (throws an error)."),LDe.forEach(t),rvr=i(wl),Rt=n(wl,"DIV",{class:!0});var ww=s(Rt);T(xL.$$.fragment,ww),tvr=i(ww),jve=n(ww,"P",{});var R7t=s(jve);avr=r(R7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R7t.forEach(t),nvr=i(ww),lc=n(ww,"P",{});var YZ=s(lc);svr=r(YZ,`Note:
Loading a model from its configuration file does `),Dve=n(YZ,"STRONG",{});var P7t=s(Dve);lvr=r(P7t,"not"),P7t.forEach(t),ivr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(YZ,"A",{href:!0});var B7t=s(sH);dvr=r(B7t,"from_pretrained()"),B7t.forEach(t),cvr=r(YZ," to load the model weights."),YZ.forEach(t),fvr=i(ww),T(dM.$$.fragment,ww),ww.forEach(t),mvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T($L.$$.fragment,Al),gvr=i(Al),Gve=n(Al,"P",{});var I7t=s(Gve);hvr=r(I7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I7t.forEach(t),pvr=i(Al),nn=n(Al,"P",{});var Aw=s(nn);_vr=r(Aw,"The model class to instantiate is selected based on the "),Ove=n(Aw,"CODE",{});var q7t=s(Ove);uvr=r(q7t,"model_type"),q7t.forEach(t),bvr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Vve=n(Aw,"CODE",{});var N7t=s(Vve);vvr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),Fvr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(Aw,"CODE",{});var j7t=s(Xve);Tvr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),Mvr=r(Aw,":"),Aw.forEach(t),Evr=i(Al),ee=n(Al,"UL",{});var ae=s(ee);cM=n(ae,"LI",{});var CRe=s(cM);zve=n(CRe,"STRONG",{});var D7t=s(zve);Cvr=r(D7t,"albert"),D7t.forEach(t),wvr=r(CRe," \u2014 "),lH=n(CRe,"A",{href:!0});var G7t=s(lH);Avr=r(G7t,"TFAlbertForSequenceClassification"),G7t.forEach(t),yvr=r(CRe," (ALBERT model)"),CRe.forEach(t),Lvr=i(ae),fM=n(ae,"LI",{});var wRe=s(fM);Wve=n(wRe,"STRONG",{});var O7t=s(Wve);xvr=r(O7t,"bert"),O7t.forEach(t),$vr=r(wRe," \u2014 "),iH=n(wRe,"A",{href:!0});var V7t=s(iH);kvr=r(V7t,"TFBertForSequenceClassification"),V7t.forEach(t),Svr=r(wRe," (BERT model)"),wRe.forEach(t),Rvr=i(ae),mM=n(ae,"LI",{});var ARe=s(mM);Qve=n(ARe,"STRONG",{});var X7t=s(Qve);Pvr=r(X7t,"camembert"),X7t.forEach(t),Bvr=r(ARe," \u2014 "),dH=n(ARe,"A",{href:!0});var z7t=s(dH);Ivr=r(z7t,"TFCamembertForSequenceClassification"),z7t.forEach(t),qvr=r(ARe," (CamemBERT model)"),ARe.forEach(t),Nvr=i(ae),gM=n(ae,"LI",{});var yRe=s(gM);Hve=n(yRe,"STRONG",{});var W7t=s(Hve);jvr=r(W7t,"convbert"),W7t.forEach(t),Dvr=r(yRe," \u2014 "),cH=n(yRe,"A",{href:!0});var Q7t=s(cH);Gvr=r(Q7t,"TFConvBertForSequenceClassification"),Q7t.forEach(t),Ovr=r(yRe," (ConvBERT model)"),yRe.forEach(t),Vvr=i(ae),hM=n(ae,"LI",{});var LRe=s(hM);Uve=n(LRe,"STRONG",{});var H7t=s(Uve);Xvr=r(H7t,"ctrl"),H7t.forEach(t),zvr=r(LRe," \u2014 "),fH=n(LRe,"A",{href:!0});var U7t=s(fH);Wvr=r(U7t,"TFCTRLForSequenceClassification"),U7t.forEach(t),Qvr=r(LRe," (CTRL model)"),LRe.forEach(t),Hvr=i(ae),pM=n(ae,"LI",{});var xRe=s(pM);Jve=n(xRe,"STRONG",{});var J7t=s(Jve);Uvr=r(J7t,"deberta"),J7t.forEach(t),Jvr=r(xRe," \u2014 "),mH=n(xRe,"A",{href:!0});var Y7t=s(mH);Yvr=r(Y7t,"TFDebertaForSequenceClassification"),Y7t.forEach(t),Kvr=r(xRe," (DeBERTa model)"),xRe.forEach(t),Zvr=i(ae),_M=n(ae,"LI",{});var $Re=s(_M);Yve=n($Re,"STRONG",{});var K7t=s(Yve);eFr=r(K7t,"deberta-v2"),K7t.forEach(t),oFr=r($Re," \u2014 "),gH=n($Re,"A",{href:!0});var Z7t=s(gH);rFr=r(Z7t,"TFDebertaV2ForSequenceClassification"),Z7t.forEach(t),tFr=r($Re," (DeBERTa-v2 model)"),$Re.forEach(t),aFr=i(ae),uM=n(ae,"LI",{});var kRe=s(uM);Kve=n(kRe,"STRONG",{});var e9t=s(Kve);nFr=r(e9t,"distilbert"),e9t.forEach(t),sFr=r(kRe," \u2014 "),hH=n(kRe,"A",{href:!0});var o9t=s(hH);lFr=r(o9t,"TFDistilBertForSequenceClassification"),o9t.forEach(t),iFr=r(kRe," (DistilBERT model)"),kRe.forEach(t),dFr=i(ae),bM=n(ae,"LI",{});var SRe=s(bM);Zve=n(SRe,"STRONG",{});var r9t=s(Zve);cFr=r(r9t,"electra"),r9t.forEach(t),fFr=r(SRe," \u2014 "),pH=n(SRe,"A",{href:!0});var t9t=s(pH);mFr=r(t9t,"TFElectraForSequenceClassification"),t9t.forEach(t),gFr=r(SRe," (ELECTRA model)"),SRe.forEach(t),hFr=i(ae),vM=n(ae,"LI",{});var RRe=s(vM);eFe=n(RRe,"STRONG",{});var a9t=s(eFe);pFr=r(a9t,"flaubert"),a9t.forEach(t),_Fr=r(RRe," \u2014 "),_H=n(RRe,"A",{href:!0});var n9t=s(_H);uFr=r(n9t,"TFFlaubertForSequenceClassification"),n9t.forEach(t),bFr=r(RRe," (FlauBERT model)"),RRe.forEach(t),vFr=i(ae),FM=n(ae,"LI",{});var PRe=s(FM);oFe=n(PRe,"STRONG",{});var s9t=s(oFe);FFr=r(s9t,"funnel"),s9t.forEach(t),TFr=r(PRe," \u2014 "),uH=n(PRe,"A",{href:!0});var l9t=s(uH);MFr=r(l9t,"TFFunnelForSequenceClassification"),l9t.forEach(t),EFr=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),CFr=i(ae),TM=n(ae,"LI",{});var BRe=s(TM);rFe=n(BRe,"STRONG",{});var i9t=s(rFe);wFr=r(i9t,"gpt2"),i9t.forEach(t),AFr=r(BRe," \u2014 "),bH=n(BRe,"A",{href:!0});var d9t=s(bH);yFr=r(d9t,"TFGPT2ForSequenceClassification"),d9t.forEach(t),LFr=r(BRe," (OpenAI GPT-2 model)"),BRe.forEach(t),xFr=i(ae),MM=n(ae,"LI",{});var IRe=s(MM);tFe=n(IRe,"STRONG",{});var c9t=s(tFe);$Fr=r(c9t,"gptj"),c9t.forEach(t),kFr=r(IRe," \u2014 "),vH=n(IRe,"A",{href:!0});var f9t=s(vH);SFr=r(f9t,"TFGPTJForSequenceClassification"),f9t.forEach(t),RFr=r(IRe," (GPT-J model)"),IRe.forEach(t),PFr=i(ae),EM=n(ae,"LI",{});var qRe=s(EM);aFe=n(qRe,"STRONG",{});var m9t=s(aFe);BFr=r(m9t,"layoutlm"),m9t.forEach(t),IFr=r(qRe," \u2014 "),FH=n(qRe,"A",{href:!0});var g9t=s(FH);qFr=r(g9t,"TFLayoutLMForSequenceClassification"),g9t.forEach(t),NFr=r(qRe," (LayoutLM model)"),qRe.forEach(t),jFr=i(ae),CM=n(ae,"LI",{});var NRe=s(CM);nFe=n(NRe,"STRONG",{});var h9t=s(nFe);DFr=r(h9t,"longformer"),h9t.forEach(t),GFr=r(NRe," \u2014 "),TH=n(NRe,"A",{href:!0});var p9t=s(TH);OFr=r(p9t,"TFLongformerForSequenceClassification"),p9t.forEach(t),VFr=r(NRe," (Longformer model)"),NRe.forEach(t),XFr=i(ae),wM=n(ae,"LI",{});var jRe=s(wM);sFe=n(jRe,"STRONG",{});var _9t=s(sFe);zFr=r(_9t,"mobilebert"),_9t.forEach(t),WFr=r(jRe," \u2014 "),MH=n(jRe,"A",{href:!0});var u9t=s(MH);QFr=r(u9t,"TFMobileBertForSequenceClassification"),u9t.forEach(t),HFr=r(jRe," (MobileBERT model)"),jRe.forEach(t),UFr=i(ae),AM=n(ae,"LI",{});var DRe=s(AM);lFe=n(DRe,"STRONG",{});var b9t=s(lFe);JFr=r(b9t,"mpnet"),b9t.forEach(t),YFr=r(DRe," \u2014 "),EH=n(DRe,"A",{href:!0});var v9t=s(EH);KFr=r(v9t,"TFMPNetForSequenceClassification"),v9t.forEach(t),ZFr=r(DRe," (MPNet model)"),DRe.forEach(t),e6r=i(ae),yM=n(ae,"LI",{});var GRe=s(yM);iFe=n(GRe,"STRONG",{});var F9t=s(iFe);o6r=r(F9t,"openai-gpt"),F9t.forEach(t),r6r=r(GRe," \u2014 "),CH=n(GRe,"A",{href:!0});var T9t=s(CH);t6r=r(T9t,"TFOpenAIGPTForSequenceClassification"),T9t.forEach(t),a6r=r(GRe," (OpenAI GPT model)"),GRe.forEach(t),n6r=i(ae),LM=n(ae,"LI",{});var ORe=s(LM);dFe=n(ORe,"STRONG",{});var M9t=s(dFe);s6r=r(M9t,"rembert"),M9t.forEach(t),l6r=r(ORe," \u2014 "),wH=n(ORe,"A",{href:!0});var E9t=s(wH);i6r=r(E9t,"TFRemBertForSequenceClassification"),E9t.forEach(t),d6r=r(ORe," (RemBERT model)"),ORe.forEach(t),c6r=i(ae),xM=n(ae,"LI",{});var VRe=s(xM);cFe=n(VRe,"STRONG",{});var C9t=s(cFe);f6r=r(C9t,"roberta"),C9t.forEach(t),m6r=r(VRe," \u2014 "),AH=n(VRe,"A",{href:!0});var w9t=s(AH);g6r=r(w9t,"TFRobertaForSequenceClassification"),w9t.forEach(t),h6r=r(VRe," (RoBERTa model)"),VRe.forEach(t),p6r=i(ae),$M=n(ae,"LI",{});var XRe=s($M);fFe=n(XRe,"STRONG",{});var A9t=s(fFe);_6r=r(A9t,"roformer"),A9t.forEach(t),u6r=r(XRe," \u2014 "),yH=n(XRe,"A",{href:!0});var y9t=s(yH);b6r=r(y9t,"TFRoFormerForSequenceClassification"),y9t.forEach(t),v6r=r(XRe," (RoFormer model)"),XRe.forEach(t),F6r=i(ae),kM=n(ae,"LI",{});var zRe=s(kM);mFe=n(zRe,"STRONG",{});var L9t=s(mFe);T6r=r(L9t,"tapas"),L9t.forEach(t),M6r=r(zRe," \u2014 "),LH=n(zRe,"A",{href:!0});var x9t=s(LH);E6r=r(x9t,"TFTapasForSequenceClassification"),x9t.forEach(t),C6r=r(zRe," (TAPAS model)"),zRe.forEach(t),w6r=i(ae),SM=n(ae,"LI",{});var WRe=s(SM);gFe=n(WRe,"STRONG",{});var $9t=s(gFe);A6r=r($9t,"transfo-xl"),$9t.forEach(t),y6r=r(WRe," \u2014 "),xH=n(WRe,"A",{href:!0});var k9t=s(xH);L6r=r(k9t,"TFTransfoXLForSequenceClassification"),k9t.forEach(t),x6r=r(WRe," (Transformer-XL model)"),WRe.forEach(t),$6r=i(ae),RM=n(ae,"LI",{});var QRe=s(RM);hFe=n(QRe,"STRONG",{});var S9t=s(hFe);k6r=r(S9t,"xlm"),S9t.forEach(t),S6r=r(QRe," \u2014 "),$H=n(QRe,"A",{href:!0});var R9t=s($H);R6r=r(R9t,"TFXLMForSequenceClassification"),R9t.forEach(t),P6r=r(QRe," (XLM model)"),QRe.forEach(t),B6r=i(ae),PM=n(ae,"LI",{});var HRe=s(PM);pFe=n(HRe,"STRONG",{});var P9t=s(pFe);I6r=r(P9t,"xlm-roberta"),P9t.forEach(t),q6r=r(HRe," \u2014 "),kH=n(HRe,"A",{href:!0});var B9t=s(kH);N6r=r(B9t,"TFXLMRobertaForSequenceClassification"),B9t.forEach(t),j6r=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),D6r=i(ae),BM=n(ae,"LI",{});var URe=s(BM);_Fe=n(URe,"STRONG",{});var I9t=s(_Fe);G6r=r(I9t,"xlnet"),I9t.forEach(t),O6r=r(URe," \u2014 "),SH=n(URe,"A",{href:!0});var q9t=s(SH);V6r=r(q9t,"TFXLNetForSequenceClassification"),q9t.forEach(t),X6r=r(URe," (XLNet model)"),URe.forEach(t),ae.forEach(t),z6r=i(Al),T(IM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),ENe=i(f),ic=n(f,"H2",{class:!0});var xDe=s(ic);qM=n(xDe,"A",{id:!0,class:!0,href:!0});var N9t=s(qM);uFe=n(N9t,"SPAN",{});var j9t=s(uFe);T(kL.$$.fragment,j9t),j9t.forEach(t),N9t.forEach(t),W6r=i(xDe),bFe=n(xDe,"SPAN",{});var D9t=s(bFe);Q6r=r(D9t,"TFAutoModelForMultipleChoice"),D9t.forEach(t),xDe.forEach(t),CNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(SL.$$.fragment,yl),H6r=i(yl),dc=n(yl,"P",{});var KZ=s(dc);U6r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RH=n(KZ,"A",{href:!0});var G9t=s(RH);J6r=r(G9t,"from_pretrained()"),G9t.forEach(t),Y6r=r(KZ," class method or the "),PH=n(KZ,"A",{href:!0});var O9t=s(PH);K6r=r(O9t,"from_config()"),O9t.forEach(t),Z6r=r(KZ,` class
method.`),KZ.forEach(t),eTr=i(yl),RL=n(yl,"P",{});var $De=s(RL);oTr=r($De,"This class cannot be instantiated directly using "),vFe=n($De,"CODE",{});var V9t=s(vFe);rTr=r(V9t,"__init__()"),V9t.forEach(t),tTr=r($De," (throws an error)."),$De.forEach(t),aTr=i(yl),Pt=n(yl,"DIV",{class:!0});var yw=s(Pt);T(PL.$$.fragment,yw),nTr=i(yw),FFe=n(yw,"P",{});var X9t=s(FFe);sTr=r(X9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X9t.forEach(t),lTr=i(yw),cc=n(yw,"P",{});var ZZ=s(cc);iTr=r(ZZ,`Note:
Loading a model from its configuration file does `),TFe=n(ZZ,"STRONG",{});var z9t=s(TFe);dTr=r(z9t,"not"),z9t.forEach(t),cTr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(ZZ,"A",{href:!0});var W9t=s(BH);fTr=r(W9t,"from_pretrained()"),W9t.forEach(t),mTr=r(ZZ," to load the model weights."),ZZ.forEach(t),gTr=i(yw),T(NM.$$.fragment,yw),yw.forEach(t),hTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(BL.$$.fragment,Ll),pTr=i(Ll),MFe=n(Ll,"P",{});var Q9t=s(MFe);_Tr=r(Q9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q9t.forEach(t),uTr=i(Ll),sn=n(Ll,"P",{});var Lw=s(sn);bTr=r(Lw,"The model class to instantiate is selected based on the "),EFe=n(Lw,"CODE",{});var H9t=s(EFe);vTr=r(H9t,"model_type"),H9t.forEach(t),FTr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),CFe=n(Lw,"CODE",{});var U9t=s(CFe);TTr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),MTr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(Lw,"CODE",{});var J9t=s(wFe);ETr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),CTr=r(Lw,":"),Lw.forEach(t),wTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);jM=n(be,"LI",{});var JRe=s(jM);AFe=n(JRe,"STRONG",{});var Y9t=s(AFe);ATr=r(Y9t,"albert"),Y9t.forEach(t),yTr=r(JRe," \u2014 "),IH=n(JRe,"A",{href:!0});var K9t=s(IH);LTr=r(K9t,"TFAlbertForMultipleChoice"),K9t.forEach(t),xTr=r(JRe," (ALBERT model)"),JRe.forEach(t),$Tr=i(be),DM=n(be,"LI",{});var YRe=s(DM);yFe=n(YRe,"STRONG",{});var Z9t=s(yFe);kTr=r(Z9t,"bert"),Z9t.forEach(t),STr=r(YRe," \u2014 "),qH=n(YRe,"A",{href:!0});var eMt=s(qH);RTr=r(eMt,"TFBertForMultipleChoice"),eMt.forEach(t),PTr=r(YRe," (BERT model)"),YRe.forEach(t),BTr=i(be),GM=n(be,"LI",{});var KRe=s(GM);LFe=n(KRe,"STRONG",{});var oMt=s(LFe);ITr=r(oMt,"camembert"),oMt.forEach(t),qTr=r(KRe," \u2014 "),NH=n(KRe,"A",{href:!0});var rMt=s(NH);NTr=r(rMt,"TFCamembertForMultipleChoice"),rMt.forEach(t),jTr=r(KRe," (CamemBERT model)"),KRe.forEach(t),DTr=i(be),OM=n(be,"LI",{});var ZRe=s(OM);xFe=n(ZRe,"STRONG",{});var tMt=s(xFe);GTr=r(tMt,"convbert"),tMt.forEach(t),OTr=r(ZRe," \u2014 "),jH=n(ZRe,"A",{href:!0});var aMt=s(jH);VTr=r(aMt,"TFConvBertForMultipleChoice"),aMt.forEach(t),XTr=r(ZRe," (ConvBERT model)"),ZRe.forEach(t),zTr=i(be),VM=n(be,"LI",{});var ePe=s(VM);$Fe=n(ePe,"STRONG",{});var nMt=s($Fe);WTr=r(nMt,"distilbert"),nMt.forEach(t),QTr=r(ePe," \u2014 "),DH=n(ePe,"A",{href:!0});var sMt=s(DH);HTr=r(sMt,"TFDistilBertForMultipleChoice"),sMt.forEach(t),UTr=r(ePe," (DistilBERT model)"),ePe.forEach(t),JTr=i(be),XM=n(be,"LI",{});var oPe=s(XM);kFe=n(oPe,"STRONG",{});var lMt=s(kFe);YTr=r(lMt,"electra"),lMt.forEach(t),KTr=r(oPe," \u2014 "),GH=n(oPe,"A",{href:!0});var iMt=s(GH);ZTr=r(iMt,"TFElectraForMultipleChoice"),iMt.forEach(t),e7r=r(oPe," (ELECTRA model)"),oPe.forEach(t),o7r=i(be),zM=n(be,"LI",{});var rPe=s(zM);SFe=n(rPe,"STRONG",{});var dMt=s(SFe);r7r=r(dMt,"flaubert"),dMt.forEach(t),t7r=r(rPe," \u2014 "),OH=n(rPe,"A",{href:!0});var cMt=s(OH);a7r=r(cMt,"TFFlaubertForMultipleChoice"),cMt.forEach(t),n7r=r(rPe," (FlauBERT model)"),rPe.forEach(t),s7r=i(be),WM=n(be,"LI",{});var tPe=s(WM);RFe=n(tPe,"STRONG",{});var fMt=s(RFe);l7r=r(fMt,"funnel"),fMt.forEach(t),i7r=r(tPe," \u2014 "),VH=n(tPe,"A",{href:!0});var mMt=s(VH);d7r=r(mMt,"TFFunnelForMultipleChoice"),mMt.forEach(t),c7r=r(tPe," (Funnel Transformer model)"),tPe.forEach(t),f7r=i(be),QM=n(be,"LI",{});var aPe=s(QM);PFe=n(aPe,"STRONG",{});var gMt=s(PFe);m7r=r(gMt,"longformer"),gMt.forEach(t),g7r=r(aPe," \u2014 "),XH=n(aPe,"A",{href:!0});var hMt=s(XH);h7r=r(hMt,"TFLongformerForMultipleChoice"),hMt.forEach(t),p7r=r(aPe," (Longformer model)"),aPe.forEach(t),_7r=i(be),HM=n(be,"LI",{});var nPe=s(HM);BFe=n(nPe,"STRONG",{});var pMt=s(BFe);u7r=r(pMt,"mobilebert"),pMt.forEach(t),b7r=r(nPe," \u2014 "),zH=n(nPe,"A",{href:!0});var _Mt=s(zH);v7r=r(_Mt,"TFMobileBertForMultipleChoice"),_Mt.forEach(t),F7r=r(nPe," (MobileBERT model)"),nPe.forEach(t),T7r=i(be),UM=n(be,"LI",{});var sPe=s(UM);IFe=n(sPe,"STRONG",{});var uMt=s(IFe);M7r=r(uMt,"mpnet"),uMt.forEach(t),E7r=r(sPe," \u2014 "),WH=n(sPe,"A",{href:!0});var bMt=s(WH);C7r=r(bMt,"TFMPNetForMultipleChoice"),bMt.forEach(t),w7r=r(sPe," (MPNet model)"),sPe.forEach(t),A7r=i(be),JM=n(be,"LI",{});var lPe=s(JM);qFe=n(lPe,"STRONG",{});var vMt=s(qFe);y7r=r(vMt,"rembert"),vMt.forEach(t),L7r=r(lPe," \u2014 "),QH=n(lPe,"A",{href:!0});var FMt=s(QH);x7r=r(FMt,"TFRemBertForMultipleChoice"),FMt.forEach(t),$7r=r(lPe," (RemBERT model)"),lPe.forEach(t),k7r=i(be),YM=n(be,"LI",{});var iPe=s(YM);NFe=n(iPe,"STRONG",{});var TMt=s(NFe);S7r=r(TMt,"roberta"),TMt.forEach(t),R7r=r(iPe," \u2014 "),HH=n(iPe,"A",{href:!0});var MMt=s(HH);P7r=r(MMt,"TFRobertaForMultipleChoice"),MMt.forEach(t),B7r=r(iPe," (RoBERTa model)"),iPe.forEach(t),I7r=i(be),KM=n(be,"LI",{});var dPe=s(KM);jFe=n(dPe,"STRONG",{});var EMt=s(jFe);q7r=r(EMt,"roformer"),EMt.forEach(t),N7r=r(dPe," \u2014 "),UH=n(dPe,"A",{href:!0});var CMt=s(UH);j7r=r(CMt,"TFRoFormerForMultipleChoice"),CMt.forEach(t),D7r=r(dPe," (RoFormer model)"),dPe.forEach(t),G7r=i(be),ZM=n(be,"LI",{});var cPe=s(ZM);DFe=n(cPe,"STRONG",{});var wMt=s(DFe);O7r=r(wMt,"xlm"),wMt.forEach(t),V7r=r(cPe," \u2014 "),JH=n(cPe,"A",{href:!0});var AMt=s(JH);X7r=r(AMt,"TFXLMForMultipleChoice"),AMt.forEach(t),z7r=r(cPe," (XLM model)"),cPe.forEach(t),W7r=i(be),e4=n(be,"LI",{});var fPe=s(e4);GFe=n(fPe,"STRONG",{});var yMt=s(GFe);Q7r=r(yMt,"xlm-roberta"),yMt.forEach(t),H7r=r(fPe," \u2014 "),YH=n(fPe,"A",{href:!0});var LMt=s(YH);U7r=r(LMt,"TFXLMRobertaForMultipleChoice"),LMt.forEach(t),J7r=r(fPe," (XLM-RoBERTa model)"),fPe.forEach(t),Y7r=i(be),o4=n(be,"LI",{});var mPe=s(o4);OFe=n(mPe,"STRONG",{});var xMt=s(OFe);K7r=r(xMt,"xlnet"),xMt.forEach(t),Z7r=r(mPe," \u2014 "),KH=n(mPe,"A",{href:!0});var $Mt=s(KH);e9r=r($Mt,"TFXLNetForMultipleChoice"),$Mt.forEach(t),o9r=r(mPe," (XLNet model)"),mPe.forEach(t),be.forEach(t),r9r=i(Ll),T(r4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),wNe=i(f),fc=n(f,"H2",{class:!0});var kDe=s(fc);t4=n(kDe,"A",{id:!0,class:!0,href:!0});var kMt=s(t4);VFe=n(kMt,"SPAN",{});var SMt=s(VFe);T(IL.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),t9r=i(kDe),XFe=n(kDe,"SPAN",{});var RMt=s(XFe);a9r=r(RMt,"TFAutoModelForNextSentencePrediction"),RMt.forEach(t),kDe.forEach(t),ANe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(qL.$$.fragment,xl),n9r=i(xl),mc=n(xl,"P",{});var eee=s(mc);s9r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZH=n(eee,"A",{href:!0});var PMt=s(ZH);l9r=r(PMt,"from_pretrained()"),PMt.forEach(t),i9r=r(eee," class method or the "),eU=n(eee,"A",{href:!0});var BMt=s(eU);d9r=r(BMt,"from_config()"),BMt.forEach(t),c9r=r(eee,` class
method.`),eee.forEach(t),f9r=i(xl),NL=n(xl,"P",{});var SDe=s(NL);m9r=r(SDe,"This class cannot be instantiated directly using "),zFe=n(SDe,"CODE",{});var IMt=s(zFe);g9r=r(IMt,"__init__()"),IMt.forEach(t),h9r=r(SDe," (throws an error)."),SDe.forEach(t),p9r=i(xl),Bt=n(xl,"DIV",{class:!0});var xw=s(Bt);T(jL.$$.fragment,xw),_9r=i(xw),WFe=n(xw,"P",{});var qMt=s(WFe);u9r=r(qMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qMt.forEach(t),b9r=i(xw),gc=n(xw,"P",{});var oee=s(gc);v9r=r(oee,`Note:
Loading a model from its configuration file does `),QFe=n(oee,"STRONG",{});var NMt=s(QFe);F9r=r(NMt,"not"),NMt.forEach(t),T9r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(oee,"A",{href:!0});var jMt=s(oU);M9r=r(jMt,"from_pretrained()"),jMt.forEach(t),E9r=r(oee," to load the model weights."),oee.forEach(t),C9r=i(xw),T(a4.$$.fragment,xw),xw.forEach(t),w9r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(DL.$$.fragment,$l),A9r=i($l),HFe=n($l,"P",{});var DMt=s(HFe);y9r=r(DMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DMt.forEach(t),L9r=i($l),ln=n($l,"P",{});var $w=s(ln);x9r=r($w,"The model class to instantiate is selected based on the "),UFe=n($w,"CODE",{});var GMt=s(UFe);$9r=r(GMt,"model_type"),GMt.forEach(t),k9r=r($w,` property of the config object (either
passed as an argument or loaded from `),JFe=n($w,"CODE",{});var OMt=s(JFe);S9r=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),R9r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n($w,"CODE",{});var VMt=s(YFe);P9r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),B9r=r($w,":"),$w.forEach(t),I9r=i($l),GL=n($l,"UL",{});var RDe=s(GL);n4=n(RDe,"LI",{});var gPe=s(n4);KFe=n(gPe,"STRONG",{});var XMt=s(KFe);q9r=r(XMt,"bert"),XMt.forEach(t),N9r=r(gPe," \u2014 "),rU=n(gPe,"A",{href:!0});var zMt=s(rU);j9r=r(zMt,"TFBertForNextSentencePrediction"),zMt.forEach(t),D9r=r(gPe," (BERT model)"),gPe.forEach(t),G9r=i(RDe),s4=n(RDe,"LI",{});var hPe=s(s4);ZFe=n(hPe,"STRONG",{});var WMt=s(ZFe);O9r=r(WMt,"mobilebert"),WMt.forEach(t),V9r=r(hPe," \u2014 "),tU=n(hPe,"A",{href:!0});var QMt=s(tU);X9r=r(QMt,"TFMobileBertForNextSentencePrediction"),QMt.forEach(t),z9r=r(hPe," (MobileBERT model)"),hPe.forEach(t),RDe.forEach(t),W9r=i($l),T(l4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),yNe=i(f),hc=n(f,"H2",{class:!0});var PDe=s(hc);i4=n(PDe,"A",{id:!0,class:!0,href:!0});var HMt=s(i4);e6e=n(HMt,"SPAN",{});var UMt=s(e6e);T(OL.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),Q9r=i(PDe),o6e=n(PDe,"SPAN",{});var JMt=s(o6e);H9r=r(JMt,"TFAutoModelForTableQuestionAnswering"),JMt.forEach(t),PDe.forEach(t),LNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(VL.$$.fragment,kl),U9r=i(kl),pc=n(kl,"P",{});var ree=s(pc);J9r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aU=n(ree,"A",{href:!0});var YMt=s(aU);Y9r=r(YMt,"from_pretrained()"),YMt.forEach(t),K9r=r(ree," class method or the "),nU=n(ree,"A",{href:!0});var KMt=s(nU);Z9r=r(KMt,"from_config()"),KMt.forEach(t),eMr=r(ree,` class
method.`),ree.forEach(t),oMr=i(kl),XL=n(kl,"P",{});var BDe=s(XL);rMr=r(BDe,"This class cannot be instantiated directly using "),r6e=n(BDe,"CODE",{});var ZMt=s(r6e);tMr=r(ZMt,"__init__()"),ZMt.forEach(t),aMr=r(BDe," (throws an error)."),BDe.forEach(t),nMr=i(kl),It=n(kl,"DIV",{class:!0});var kw=s(It);T(zL.$$.fragment,kw),sMr=i(kw),t6e=n(kw,"P",{});var e4t=s(t6e);lMr=r(e4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),e4t.forEach(t),iMr=i(kw),_c=n(kw,"P",{});var tee=s(_c);dMr=r(tee,`Note:
Loading a model from its configuration file does `),a6e=n(tee,"STRONG",{});var o4t=s(a6e);cMr=r(o4t,"not"),o4t.forEach(t),fMr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(tee,"A",{href:!0});var r4t=s(sU);mMr=r(r4t,"from_pretrained()"),r4t.forEach(t),gMr=r(tee," to load the model weights."),tee.forEach(t),hMr=i(kw),T(d4.$$.fragment,kw),kw.forEach(t),pMr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(WL.$$.fragment,Sl),_Mr=i(Sl),n6e=n(Sl,"P",{});var t4t=s(n6e);uMr=r(t4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t4t.forEach(t),bMr=i(Sl),dn=n(Sl,"P",{});var Sw=s(dn);vMr=r(Sw,"The model class to instantiate is selected based on the "),s6e=n(Sw,"CODE",{});var a4t=s(s6e);FMr=r(a4t,"model_type"),a4t.forEach(t),TMr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),l6e=n(Sw,"CODE",{});var n4t=s(l6e);MMr=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),EMr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(Sw,"CODE",{});var s4t=s(i6e);CMr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),wMr=r(Sw,":"),Sw.forEach(t),AMr=i(Sl),d6e=n(Sl,"UL",{});var l4t=s(d6e);c4=n(l4t,"LI",{});var pPe=s(c4);c6e=n(pPe,"STRONG",{});var i4t=s(c6e);yMr=r(i4t,"tapas"),i4t.forEach(t),LMr=r(pPe," \u2014 "),lU=n(pPe,"A",{href:!0});var d4t=s(lU);xMr=r(d4t,"TFTapasForQuestionAnswering"),d4t.forEach(t),$Mr=r(pPe," (TAPAS model)"),pPe.forEach(t),l4t.forEach(t),kMr=i(Sl),T(f4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),xNe=i(f),uc=n(f,"H2",{class:!0});var IDe=s(uc);m4=n(IDe,"A",{id:!0,class:!0,href:!0});var c4t=s(m4);f6e=n(c4t,"SPAN",{});var f4t=s(f6e);T(QL.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),SMr=i(IDe),m6e=n(IDe,"SPAN",{});var m4t=s(m6e);RMr=r(m4t,"TFAutoModelForTokenClassification"),m4t.forEach(t),IDe.forEach(t),$Ne=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(HL.$$.fragment,Rl),PMr=i(Rl),bc=n(Rl,"P",{});var aee=s(bc);BMr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iU=n(aee,"A",{href:!0});var g4t=s(iU);IMr=r(g4t,"from_pretrained()"),g4t.forEach(t),qMr=r(aee," class method or the "),dU=n(aee,"A",{href:!0});var h4t=s(dU);NMr=r(h4t,"from_config()"),h4t.forEach(t),jMr=r(aee,` class
method.`),aee.forEach(t),DMr=i(Rl),UL=n(Rl,"P",{});var qDe=s(UL);GMr=r(qDe,"This class cannot be instantiated directly using "),g6e=n(qDe,"CODE",{});var p4t=s(g6e);OMr=r(p4t,"__init__()"),p4t.forEach(t),VMr=r(qDe," (throws an error)."),qDe.forEach(t),XMr=i(Rl),qt=n(Rl,"DIV",{class:!0});var Rw=s(qt);T(JL.$$.fragment,Rw),zMr=i(Rw),h6e=n(Rw,"P",{});var _4t=s(h6e);WMr=r(_4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_4t.forEach(t),QMr=i(Rw),vc=n(Rw,"P",{});var nee=s(vc);HMr=r(nee,`Note:
Loading a model from its configuration file does `),p6e=n(nee,"STRONG",{});var u4t=s(p6e);UMr=r(u4t,"not"),u4t.forEach(t),JMr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(nee,"A",{href:!0});var b4t=s(cU);YMr=r(b4t,"from_pretrained()"),b4t.forEach(t),KMr=r(nee," to load the model weights."),nee.forEach(t),ZMr=i(Rw),T(g4.$$.fragment,Rw),Rw.forEach(t),e4r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(YL.$$.fragment,Pl),o4r=i(Pl),_6e=n(Pl,"P",{});var v4t=s(_6e);r4r=r(v4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v4t.forEach(t),t4r=i(Pl),cn=n(Pl,"P",{});var Pw=s(cn);a4r=r(Pw,"The model class to instantiate is selected based on the "),u6e=n(Pw,"CODE",{});var F4t=s(u6e);n4r=r(F4t,"model_type"),F4t.forEach(t),s4r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),b6e=n(Pw,"CODE",{});var T4t=s(b6e);l4r=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),i4r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(Pw,"CODE",{});var M4t=s(v6e);d4r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),c4r=r(Pw,":"),Pw.forEach(t),f4r=i(Pl),de=n(Pl,"UL",{});var me=s(de);h4=n(me,"LI",{});var _Pe=s(h4);F6e=n(_Pe,"STRONG",{});var E4t=s(F6e);m4r=r(E4t,"albert"),E4t.forEach(t),g4r=r(_Pe," \u2014 "),fU=n(_Pe,"A",{href:!0});var C4t=s(fU);h4r=r(C4t,"TFAlbertForTokenClassification"),C4t.forEach(t),p4r=r(_Pe," (ALBERT model)"),_Pe.forEach(t),_4r=i(me),p4=n(me,"LI",{});var uPe=s(p4);T6e=n(uPe,"STRONG",{});var w4t=s(T6e);u4r=r(w4t,"bert"),w4t.forEach(t),b4r=r(uPe," \u2014 "),mU=n(uPe,"A",{href:!0});var A4t=s(mU);v4r=r(A4t,"TFBertForTokenClassification"),A4t.forEach(t),F4r=r(uPe," (BERT model)"),uPe.forEach(t),T4r=i(me),_4=n(me,"LI",{});var bPe=s(_4);M6e=n(bPe,"STRONG",{});var y4t=s(M6e);M4r=r(y4t,"camembert"),y4t.forEach(t),E4r=r(bPe," \u2014 "),gU=n(bPe,"A",{href:!0});var L4t=s(gU);C4r=r(L4t,"TFCamembertForTokenClassification"),L4t.forEach(t),w4r=r(bPe," (CamemBERT model)"),bPe.forEach(t),A4r=i(me),u4=n(me,"LI",{});var vPe=s(u4);E6e=n(vPe,"STRONG",{});var x4t=s(E6e);y4r=r(x4t,"convbert"),x4t.forEach(t),L4r=r(vPe," \u2014 "),hU=n(vPe,"A",{href:!0});var $4t=s(hU);x4r=r($4t,"TFConvBertForTokenClassification"),$4t.forEach(t),$4r=r(vPe," (ConvBERT model)"),vPe.forEach(t),k4r=i(me),b4=n(me,"LI",{});var FPe=s(b4);C6e=n(FPe,"STRONG",{});var k4t=s(C6e);S4r=r(k4t,"deberta"),k4t.forEach(t),R4r=r(FPe," \u2014 "),pU=n(FPe,"A",{href:!0});var S4t=s(pU);P4r=r(S4t,"TFDebertaForTokenClassification"),S4t.forEach(t),B4r=r(FPe," (DeBERTa model)"),FPe.forEach(t),I4r=i(me),v4=n(me,"LI",{});var TPe=s(v4);w6e=n(TPe,"STRONG",{});var R4t=s(w6e);q4r=r(R4t,"deberta-v2"),R4t.forEach(t),N4r=r(TPe," \u2014 "),_U=n(TPe,"A",{href:!0});var P4t=s(_U);j4r=r(P4t,"TFDebertaV2ForTokenClassification"),P4t.forEach(t),D4r=r(TPe," (DeBERTa-v2 model)"),TPe.forEach(t),G4r=i(me),F4=n(me,"LI",{});var MPe=s(F4);A6e=n(MPe,"STRONG",{});var B4t=s(A6e);O4r=r(B4t,"distilbert"),B4t.forEach(t),V4r=r(MPe," \u2014 "),uU=n(MPe,"A",{href:!0});var I4t=s(uU);X4r=r(I4t,"TFDistilBertForTokenClassification"),I4t.forEach(t),z4r=r(MPe," (DistilBERT model)"),MPe.forEach(t),W4r=i(me),T4=n(me,"LI",{});var EPe=s(T4);y6e=n(EPe,"STRONG",{});var q4t=s(y6e);Q4r=r(q4t,"electra"),q4t.forEach(t),H4r=r(EPe," \u2014 "),bU=n(EPe,"A",{href:!0});var N4t=s(bU);U4r=r(N4t,"TFElectraForTokenClassification"),N4t.forEach(t),J4r=r(EPe," (ELECTRA model)"),EPe.forEach(t),Y4r=i(me),M4=n(me,"LI",{});var CPe=s(M4);L6e=n(CPe,"STRONG",{});var j4t=s(L6e);K4r=r(j4t,"flaubert"),j4t.forEach(t),Z4r=r(CPe," \u2014 "),vU=n(CPe,"A",{href:!0});var D4t=s(vU);eEr=r(D4t,"TFFlaubertForTokenClassification"),D4t.forEach(t),oEr=r(CPe," (FlauBERT model)"),CPe.forEach(t),rEr=i(me),E4=n(me,"LI",{});var wPe=s(E4);x6e=n(wPe,"STRONG",{});var G4t=s(x6e);tEr=r(G4t,"funnel"),G4t.forEach(t),aEr=r(wPe," \u2014 "),FU=n(wPe,"A",{href:!0});var O4t=s(FU);nEr=r(O4t,"TFFunnelForTokenClassification"),O4t.forEach(t),sEr=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),lEr=i(me),C4=n(me,"LI",{});var APe=s(C4);$6e=n(APe,"STRONG",{});var V4t=s($6e);iEr=r(V4t,"layoutlm"),V4t.forEach(t),dEr=r(APe," \u2014 "),TU=n(APe,"A",{href:!0});var X4t=s(TU);cEr=r(X4t,"TFLayoutLMForTokenClassification"),X4t.forEach(t),fEr=r(APe," (LayoutLM model)"),APe.forEach(t),mEr=i(me),w4=n(me,"LI",{});var yPe=s(w4);k6e=n(yPe,"STRONG",{});var z4t=s(k6e);gEr=r(z4t,"longformer"),z4t.forEach(t),hEr=r(yPe," \u2014 "),MU=n(yPe,"A",{href:!0});var W4t=s(MU);pEr=r(W4t,"TFLongformerForTokenClassification"),W4t.forEach(t),_Er=r(yPe," (Longformer model)"),yPe.forEach(t),uEr=i(me),A4=n(me,"LI",{});var LPe=s(A4);S6e=n(LPe,"STRONG",{});var Q4t=s(S6e);bEr=r(Q4t,"mobilebert"),Q4t.forEach(t),vEr=r(LPe," \u2014 "),EU=n(LPe,"A",{href:!0});var H4t=s(EU);FEr=r(H4t,"TFMobileBertForTokenClassification"),H4t.forEach(t),TEr=r(LPe," (MobileBERT model)"),LPe.forEach(t),MEr=i(me),y4=n(me,"LI",{});var xPe=s(y4);R6e=n(xPe,"STRONG",{});var U4t=s(R6e);EEr=r(U4t,"mpnet"),U4t.forEach(t),CEr=r(xPe," \u2014 "),CU=n(xPe,"A",{href:!0});var J4t=s(CU);wEr=r(J4t,"TFMPNetForTokenClassification"),J4t.forEach(t),AEr=r(xPe," (MPNet model)"),xPe.forEach(t),yEr=i(me),L4=n(me,"LI",{});var $Pe=s(L4);P6e=n($Pe,"STRONG",{});var Y4t=s(P6e);LEr=r(Y4t,"rembert"),Y4t.forEach(t),xEr=r($Pe," \u2014 "),wU=n($Pe,"A",{href:!0});var K4t=s(wU);$Er=r(K4t,"TFRemBertForTokenClassification"),K4t.forEach(t),kEr=r($Pe," (RemBERT model)"),$Pe.forEach(t),SEr=i(me),x4=n(me,"LI",{});var kPe=s(x4);B6e=n(kPe,"STRONG",{});var Z4t=s(B6e);REr=r(Z4t,"roberta"),Z4t.forEach(t),PEr=r(kPe," \u2014 "),AU=n(kPe,"A",{href:!0});var eEt=s(AU);BEr=r(eEt,"TFRobertaForTokenClassification"),eEt.forEach(t),IEr=r(kPe," (RoBERTa model)"),kPe.forEach(t),qEr=i(me),$4=n(me,"LI",{});var SPe=s($4);I6e=n(SPe,"STRONG",{});var oEt=s(I6e);NEr=r(oEt,"roformer"),oEt.forEach(t),jEr=r(SPe," \u2014 "),yU=n(SPe,"A",{href:!0});var rEt=s(yU);DEr=r(rEt,"TFRoFormerForTokenClassification"),rEt.forEach(t),GEr=r(SPe," (RoFormer model)"),SPe.forEach(t),OEr=i(me),k4=n(me,"LI",{});var RPe=s(k4);q6e=n(RPe,"STRONG",{});var tEt=s(q6e);VEr=r(tEt,"xlm"),tEt.forEach(t),XEr=r(RPe," \u2014 "),LU=n(RPe,"A",{href:!0});var aEt=s(LU);zEr=r(aEt,"TFXLMForTokenClassification"),aEt.forEach(t),WEr=r(RPe," (XLM model)"),RPe.forEach(t),QEr=i(me),S4=n(me,"LI",{});var PPe=s(S4);N6e=n(PPe,"STRONG",{});var nEt=s(N6e);HEr=r(nEt,"xlm-roberta"),nEt.forEach(t),UEr=r(PPe," \u2014 "),xU=n(PPe,"A",{href:!0});var sEt=s(xU);JEr=r(sEt,"TFXLMRobertaForTokenClassification"),sEt.forEach(t),YEr=r(PPe," (XLM-RoBERTa model)"),PPe.forEach(t),KEr=i(me),R4=n(me,"LI",{});var BPe=s(R4);j6e=n(BPe,"STRONG",{});var lEt=s(j6e);ZEr=r(lEt,"xlnet"),lEt.forEach(t),e5r=r(BPe," \u2014 "),$U=n(BPe,"A",{href:!0});var iEt=s($U);o5r=r(iEt,"TFXLNetForTokenClassification"),iEt.forEach(t),r5r=r(BPe," (XLNet model)"),BPe.forEach(t),me.forEach(t),t5r=i(Pl),T(P4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),kNe=i(f),Fc=n(f,"H2",{class:!0});var NDe=s(Fc);B4=n(NDe,"A",{id:!0,class:!0,href:!0});var dEt=s(B4);D6e=n(dEt,"SPAN",{});var cEt=s(D6e);T(KL.$$.fragment,cEt),cEt.forEach(t),dEt.forEach(t),a5r=i(NDe),G6e=n(NDe,"SPAN",{});var fEt=s(G6e);n5r=r(fEt,"TFAutoModelForQuestionAnswering"),fEt.forEach(t),NDe.forEach(t),SNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(ZL.$$.fragment,Bl),s5r=i(Bl),Tc=n(Bl,"P",{});var see=s(Tc);l5r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kU=n(see,"A",{href:!0});var mEt=s(kU);i5r=r(mEt,"from_pretrained()"),mEt.forEach(t),d5r=r(see," class method or the "),SU=n(see,"A",{href:!0});var gEt=s(SU);c5r=r(gEt,"from_config()"),gEt.forEach(t),f5r=r(see,` class
method.`),see.forEach(t),m5r=i(Bl),e8=n(Bl,"P",{});var jDe=s(e8);g5r=r(jDe,"This class cannot be instantiated directly using "),O6e=n(jDe,"CODE",{});var hEt=s(O6e);h5r=r(hEt,"__init__()"),hEt.forEach(t),p5r=r(jDe," (throws an error)."),jDe.forEach(t),_5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Bw=s(Nt);T(o8.$$.fragment,Bw),u5r=i(Bw),V6e=n(Bw,"P",{});var pEt=s(V6e);b5r=r(pEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pEt.forEach(t),v5r=i(Bw),Mc=n(Bw,"P",{});var lee=s(Mc);F5r=r(lee,`Note:
Loading a model from its configuration file does `),X6e=n(lee,"STRONG",{});var _Et=s(X6e);T5r=r(_Et,"not"),_Et.forEach(t),M5r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(lee,"A",{href:!0});var uEt=s(RU);E5r=r(uEt,"from_pretrained()"),uEt.forEach(t),C5r=r(lee," to load the model weights."),lee.forEach(t),w5r=i(Bw),T(I4.$$.fragment,Bw),Bw.forEach(t),A5r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(r8.$$.fragment,Il),y5r=i(Il),z6e=n(Il,"P",{});var bEt=s(z6e);L5r=r(bEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bEt.forEach(t),x5r=i(Il),fn=n(Il,"P",{});var Iw=s(fn);$5r=r(Iw,"The model class to instantiate is selected based on the "),W6e=n(Iw,"CODE",{});var vEt=s(W6e);k5r=r(vEt,"model_type"),vEt.forEach(t),S5r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(Iw,"CODE",{});var FEt=s(Q6e);R5r=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),P5r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(Iw,"CODE",{});var TEt=s(H6e);B5r=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),I5r=r(Iw,":"),Iw.forEach(t),q5r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);q4=n(ge,"LI",{});var IPe=s(q4);U6e=n(IPe,"STRONG",{});var MEt=s(U6e);N5r=r(MEt,"albert"),MEt.forEach(t),j5r=r(IPe," \u2014 "),PU=n(IPe,"A",{href:!0});var EEt=s(PU);D5r=r(EEt,"TFAlbertForQuestionAnswering"),EEt.forEach(t),G5r=r(IPe," (ALBERT model)"),IPe.forEach(t),O5r=i(ge),N4=n(ge,"LI",{});var qPe=s(N4);J6e=n(qPe,"STRONG",{});var CEt=s(J6e);V5r=r(CEt,"bert"),CEt.forEach(t),X5r=r(qPe," \u2014 "),BU=n(qPe,"A",{href:!0});var wEt=s(BU);z5r=r(wEt,"TFBertForQuestionAnswering"),wEt.forEach(t),W5r=r(qPe," (BERT model)"),qPe.forEach(t),Q5r=i(ge),j4=n(ge,"LI",{});var NPe=s(j4);Y6e=n(NPe,"STRONG",{});var AEt=s(Y6e);H5r=r(AEt,"camembert"),AEt.forEach(t),U5r=r(NPe," \u2014 "),IU=n(NPe,"A",{href:!0});var yEt=s(IU);J5r=r(yEt,"TFCamembertForQuestionAnswering"),yEt.forEach(t),Y5r=r(NPe," (CamemBERT model)"),NPe.forEach(t),K5r=i(ge),D4=n(ge,"LI",{});var jPe=s(D4);K6e=n(jPe,"STRONG",{});var LEt=s(K6e);Z5r=r(LEt,"convbert"),LEt.forEach(t),eCr=r(jPe," \u2014 "),qU=n(jPe,"A",{href:!0});var xEt=s(qU);oCr=r(xEt,"TFConvBertForQuestionAnswering"),xEt.forEach(t),rCr=r(jPe," (ConvBERT model)"),jPe.forEach(t),tCr=i(ge),G4=n(ge,"LI",{});var DPe=s(G4);Z6e=n(DPe,"STRONG",{});var $Et=s(Z6e);aCr=r($Et,"deberta"),$Et.forEach(t),nCr=r(DPe," \u2014 "),NU=n(DPe,"A",{href:!0});var kEt=s(NU);sCr=r(kEt,"TFDebertaForQuestionAnswering"),kEt.forEach(t),lCr=r(DPe," (DeBERTa model)"),DPe.forEach(t),iCr=i(ge),O4=n(ge,"LI",{});var GPe=s(O4);eTe=n(GPe,"STRONG",{});var SEt=s(eTe);dCr=r(SEt,"deberta-v2"),SEt.forEach(t),cCr=r(GPe," \u2014 "),jU=n(GPe,"A",{href:!0});var REt=s(jU);fCr=r(REt,"TFDebertaV2ForQuestionAnswering"),REt.forEach(t),mCr=r(GPe," (DeBERTa-v2 model)"),GPe.forEach(t),gCr=i(ge),V4=n(ge,"LI",{});var OPe=s(V4);oTe=n(OPe,"STRONG",{});var PEt=s(oTe);hCr=r(PEt,"distilbert"),PEt.forEach(t),pCr=r(OPe," \u2014 "),DU=n(OPe,"A",{href:!0});var BEt=s(DU);_Cr=r(BEt,"TFDistilBertForQuestionAnswering"),BEt.forEach(t),uCr=r(OPe," (DistilBERT model)"),OPe.forEach(t),bCr=i(ge),X4=n(ge,"LI",{});var VPe=s(X4);rTe=n(VPe,"STRONG",{});var IEt=s(rTe);vCr=r(IEt,"electra"),IEt.forEach(t),FCr=r(VPe," \u2014 "),GU=n(VPe,"A",{href:!0});var qEt=s(GU);TCr=r(qEt,"TFElectraForQuestionAnswering"),qEt.forEach(t),MCr=r(VPe," (ELECTRA model)"),VPe.forEach(t),ECr=i(ge),z4=n(ge,"LI",{});var XPe=s(z4);tTe=n(XPe,"STRONG",{});var NEt=s(tTe);CCr=r(NEt,"flaubert"),NEt.forEach(t),wCr=r(XPe," \u2014 "),OU=n(XPe,"A",{href:!0});var jEt=s(OU);ACr=r(jEt,"TFFlaubertForQuestionAnsweringSimple"),jEt.forEach(t),yCr=r(XPe," (FlauBERT model)"),XPe.forEach(t),LCr=i(ge),W4=n(ge,"LI",{});var zPe=s(W4);aTe=n(zPe,"STRONG",{});var DEt=s(aTe);xCr=r(DEt,"funnel"),DEt.forEach(t),$Cr=r(zPe," \u2014 "),VU=n(zPe,"A",{href:!0});var GEt=s(VU);kCr=r(GEt,"TFFunnelForQuestionAnswering"),GEt.forEach(t),SCr=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),RCr=i(ge),Q4=n(ge,"LI",{});var WPe=s(Q4);nTe=n(WPe,"STRONG",{});var OEt=s(nTe);PCr=r(OEt,"gptj"),OEt.forEach(t),BCr=r(WPe," \u2014 "),XU=n(WPe,"A",{href:!0});var VEt=s(XU);ICr=r(VEt,"TFGPTJForQuestionAnswering"),VEt.forEach(t),qCr=r(WPe," (GPT-J model)"),WPe.forEach(t),NCr=i(ge),H4=n(ge,"LI",{});var QPe=s(H4);sTe=n(QPe,"STRONG",{});var XEt=s(sTe);jCr=r(XEt,"longformer"),XEt.forEach(t),DCr=r(QPe," \u2014 "),zU=n(QPe,"A",{href:!0});var zEt=s(zU);GCr=r(zEt,"TFLongformerForQuestionAnswering"),zEt.forEach(t),OCr=r(QPe," (Longformer model)"),QPe.forEach(t),VCr=i(ge),U4=n(ge,"LI",{});var HPe=s(U4);lTe=n(HPe,"STRONG",{});var WEt=s(lTe);XCr=r(WEt,"mobilebert"),WEt.forEach(t),zCr=r(HPe," \u2014 "),WU=n(HPe,"A",{href:!0});var QEt=s(WU);WCr=r(QEt,"TFMobileBertForQuestionAnswering"),QEt.forEach(t),QCr=r(HPe," (MobileBERT model)"),HPe.forEach(t),HCr=i(ge),J4=n(ge,"LI",{});var UPe=s(J4);iTe=n(UPe,"STRONG",{});var HEt=s(iTe);UCr=r(HEt,"mpnet"),HEt.forEach(t),JCr=r(UPe," \u2014 "),QU=n(UPe,"A",{href:!0});var UEt=s(QU);YCr=r(UEt,"TFMPNetForQuestionAnswering"),UEt.forEach(t),KCr=r(UPe," (MPNet model)"),UPe.forEach(t),ZCr=i(ge),Y4=n(ge,"LI",{});var JPe=s(Y4);dTe=n(JPe,"STRONG",{});var JEt=s(dTe);e3r=r(JEt,"rembert"),JEt.forEach(t),o3r=r(JPe," \u2014 "),HU=n(JPe,"A",{href:!0});var YEt=s(HU);r3r=r(YEt,"TFRemBertForQuestionAnswering"),YEt.forEach(t),t3r=r(JPe," (RemBERT model)"),JPe.forEach(t),a3r=i(ge),K4=n(ge,"LI",{});var YPe=s(K4);cTe=n(YPe,"STRONG",{});var KEt=s(cTe);n3r=r(KEt,"roberta"),KEt.forEach(t),s3r=r(YPe," \u2014 "),UU=n(YPe,"A",{href:!0});var ZEt=s(UU);l3r=r(ZEt,"TFRobertaForQuestionAnswering"),ZEt.forEach(t),i3r=r(YPe," (RoBERTa model)"),YPe.forEach(t),d3r=i(ge),Z4=n(ge,"LI",{});var KPe=s(Z4);fTe=n(KPe,"STRONG",{});var e5t=s(fTe);c3r=r(e5t,"roformer"),e5t.forEach(t),f3r=r(KPe," \u2014 "),JU=n(KPe,"A",{href:!0});var o5t=s(JU);m3r=r(o5t,"TFRoFormerForQuestionAnswering"),o5t.forEach(t),g3r=r(KPe," (RoFormer model)"),KPe.forEach(t),h3r=i(ge),eE=n(ge,"LI",{});var ZPe=s(eE);mTe=n(ZPe,"STRONG",{});var r5t=s(mTe);p3r=r(r5t,"xlm"),r5t.forEach(t),_3r=r(ZPe," \u2014 "),YU=n(ZPe,"A",{href:!0});var t5t=s(YU);u3r=r(t5t,"TFXLMForQuestionAnsweringSimple"),t5t.forEach(t),b3r=r(ZPe," (XLM model)"),ZPe.forEach(t),v3r=i(ge),oE=n(ge,"LI",{});var eBe=s(oE);gTe=n(eBe,"STRONG",{});var a5t=s(gTe);F3r=r(a5t,"xlm-roberta"),a5t.forEach(t),T3r=r(eBe," \u2014 "),KU=n(eBe,"A",{href:!0});var n5t=s(KU);M3r=r(n5t,"TFXLMRobertaForQuestionAnswering"),n5t.forEach(t),E3r=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),C3r=i(ge),rE=n(ge,"LI",{});var oBe=s(rE);hTe=n(oBe,"STRONG",{});var s5t=s(hTe);w3r=r(s5t,"xlnet"),s5t.forEach(t),A3r=r(oBe," \u2014 "),ZU=n(oBe,"A",{href:!0});var l5t=s(ZU);y3r=r(l5t,"TFXLNetForQuestionAnsweringSimple"),l5t.forEach(t),L3r=r(oBe," (XLNet model)"),oBe.forEach(t),ge.forEach(t),x3r=i(Il),T(tE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),RNe=i(f),Ec=n(f,"H2",{class:!0});var DDe=s(Ec);aE=n(DDe,"A",{id:!0,class:!0,href:!0});var i5t=s(aE);pTe=n(i5t,"SPAN",{});var d5t=s(pTe);T(t8.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),$3r=i(DDe),_Te=n(DDe,"SPAN",{});var c5t=s(_Te);k3r=r(c5t,"TFAutoModelForVision2Seq"),c5t.forEach(t),DDe.forEach(t),PNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(a8.$$.fragment,ql),S3r=i(ql),Cc=n(ql,"P",{});var iee=s(Cc);R3r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eJ=n(iee,"A",{href:!0});var f5t=s(eJ);P3r=r(f5t,"from_pretrained()"),f5t.forEach(t),B3r=r(iee," class method or the "),oJ=n(iee,"A",{href:!0});var m5t=s(oJ);I3r=r(m5t,"from_config()"),m5t.forEach(t),q3r=r(iee,` class
method.`),iee.forEach(t),N3r=i(ql),n8=n(ql,"P",{});var GDe=s(n8);j3r=r(GDe,"This class cannot be instantiated directly using "),uTe=n(GDe,"CODE",{});var g5t=s(uTe);D3r=r(g5t,"__init__()"),g5t.forEach(t),G3r=r(GDe," (throws an error)."),GDe.forEach(t),O3r=i(ql),jt=n(ql,"DIV",{class:!0});var qw=s(jt);T(s8.$$.fragment,qw),V3r=i(qw),bTe=n(qw,"P",{});var h5t=s(bTe);X3r=r(h5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),h5t.forEach(t),z3r=i(qw),wc=n(qw,"P",{});var dee=s(wc);W3r=r(dee,`Note:
Loading a model from its configuration file does `),vTe=n(dee,"STRONG",{});var p5t=s(vTe);Q3r=r(p5t,"not"),p5t.forEach(t),H3r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(dee,"A",{href:!0});var _5t=s(rJ);U3r=r(_5t,"from_pretrained()"),_5t.forEach(t),J3r=r(dee," to load the model weights."),dee.forEach(t),Y3r=i(qw),T(nE.$$.fragment,qw),qw.forEach(t),K3r=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(l8.$$.fragment,Nl),Z3r=i(Nl),FTe=n(Nl,"P",{});var u5t=s(FTe);ewr=r(u5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u5t.forEach(t),owr=i(Nl),mn=n(Nl,"P",{});var Nw=s(mn);rwr=r(Nw,"The model class to instantiate is selected based on the "),TTe=n(Nw,"CODE",{});var b5t=s(TTe);twr=r(b5t,"model_type"),b5t.forEach(t),awr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),MTe=n(Nw,"CODE",{});var v5t=s(MTe);nwr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),swr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(Nw,"CODE",{});var F5t=s(ETe);lwr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),iwr=r(Nw,":"),Nw.forEach(t),dwr=i(Nl),CTe=n(Nl,"UL",{});var T5t=s(CTe);sE=n(T5t,"LI",{});var rBe=s(sE);wTe=n(rBe,"STRONG",{});var M5t=s(wTe);cwr=r(M5t,"vision-encoder-decoder"),M5t.forEach(t),fwr=r(rBe," \u2014 "),tJ=n(rBe,"A",{href:!0});var E5t=s(tJ);mwr=r(E5t,"TFVisionEncoderDecoderModel"),E5t.forEach(t),gwr=r(rBe," (Vision Encoder decoder model)"),rBe.forEach(t),T5t.forEach(t),hwr=i(Nl),T(lE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),BNe=i(f),Ac=n(f,"H2",{class:!0});var ODe=s(Ac);iE=n(ODe,"A",{id:!0,class:!0,href:!0});var C5t=s(iE);ATe=n(C5t,"SPAN",{});var w5t=s(ATe);T(i8.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),pwr=i(ODe),yTe=n(ODe,"SPAN",{});var A5t=s(yTe);_wr=r(A5t,"TFAutoModelForSpeechSeq2Seq"),A5t.forEach(t),ODe.forEach(t),INe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(d8.$$.fragment,jl),uwr=i(jl),yc=n(jl,"P",{});var cee=s(yc);bwr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aJ=n(cee,"A",{href:!0});var y5t=s(aJ);vwr=r(y5t,"from_pretrained()"),y5t.forEach(t),Fwr=r(cee," class method or the "),nJ=n(cee,"A",{href:!0});var L5t=s(nJ);Twr=r(L5t,"from_config()"),L5t.forEach(t),Mwr=r(cee,` class
method.`),cee.forEach(t),Ewr=i(jl),c8=n(jl,"P",{});var VDe=s(c8);Cwr=r(VDe,"This class cannot be instantiated directly using "),LTe=n(VDe,"CODE",{});var x5t=s(LTe);wwr=r(x5t,"__init__()"),x5t.forEach(t),Awr=r(VDe," (throws an error)."),VDe.forEach(t),ywr=i(jl),Dt=n(jl,"DIV",{class:!0});var jw=s(Dt);T(f8.$$.fragment,jw),Lwr=i(jw),xTe=n(jw,"P",{});var $5t=s(xTe);xwr=r($5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$5t.forEach(t),$wr=i(jw),Lc=n(jw,"P",{});var fee=s(Lc);kwr=r(fee,`Note:
Loading a model from its configuration file does `),$Te=n(fee,"STRONG",{});var k5t=s($Te);Swr=r(k5t,"not"),k5t.forEach(t),Rwr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(fee,"A",{href:!0});var S5t=s(sJ);Pwr=r(S5t,"from_pretrained()"),S5t.forEach(t),Bwr=r(fee," to load the model weights."),fee.forEach(t),Iwr=i(jw),T(dE.$$.fragment,jw),jw.forEach(t),qwr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(m8.$$.fragment,Dl),Nwr=i(Dl),kTe=n(Dl,"P",{});var R5t=s(kTe);jwr=r(R5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),R5t.forEach(t),Dwr=i(Dl),gn=n(Dl,"P",{});var Dw=s(gn);Gwr=r(Dw,"The model class to instantiate is selected based on the "),STe=n(Dw,"CODE",{});var P5t=s(STe);Owr=r(P5t,"model_type"),P5t.forEach(t),Vwr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),RTe=n(Dw,"CODE",{});var B5t=s(RTe);Xwr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),zwr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(Dw,"CODE",{});var I5t=s(PTe);Wwr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),Qwr=r(Dw,":"),Dw.forEach(t),Hwr=i(Dl),BTe=n(Dl,"UL",{});var q5t=s(BTe);cE=n(q5t,"LI",{});var tBe=s(cE);ITe=n(tBe,"STRONG",{});var N5t=s(ITe);Uwr=r(N5t,"speech_to_text"),N5t.forEach(t),Jwr=r(tBe," \u2014 "),lJ=n(tBe,"A",{href:!0});var j5t=s(lJ);Ywr=r(j5t,"TFSpeech2TextForConditionalGeneration"),j5t.forEach(t),Kwr=r(tBe," (Speech2Text model)"),tBe.forEach(t),q5t.forEach(t),Zwr=i(Dl),T(fE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),qNe=i(f),xc=n(f,"H2",{class:!0});var XDe=s(xc);mE=n(XDe,"A",{id:!0,class:!0,href:!0});var D5t=s(mE);qTe=n(D5t,"SPAN",{});var G5t=s(qTe);T(g8.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),e0r=i(XDe),NTe=n(XDe,"SPAN",{});var O5t=s(NTe);o0r=r(O5t,"FlaxAutoModel"),O5t.forEach(t),XDe.forEach(t),NNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(h8.$$.fragment,Gl),r0r=i(Gl),$c=n(Gl,"P",{});var mee=s($c);t0r=r(mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iJ=n(mee,"A",{href:!0});var V5t=s(iJ);a0r=r(V5t,"from_pretrained()"),V5t.forEach(t),n0r=r(mee," class method or the "),dJ=n(mee,"A",{href:!0});var X5t=s(dJ);s0r=r(X5t,"from_config()"),X5t.forEach(t),l0r=r(mee,` class
method.`),mee.forEach(t),i0r=i(Gl),p8=n(Gl,"P",{});var zDe=s(p8);d0r=r(zDe,"This class cannot be instantiated directly using "),jTe=n(zDe,"CODE",{});var z5t=s(jTe);c0r=r(z5t,"__init__()"),z5t.forEach(t),f0r=r(zDe," (throws an error)."),zDe.forEach(t),m0r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Gw=s(Gt);T(_8.$$.fragment,Gw),g0r=i(Gw),DTe=n(Gw,"P",{});var W5t=s(DTe);h0r=r(W5t,"Instantiates one of the base model classes of the library from a configuration."),W5t.forEach(t),p0r=i(Gw),kc=n(Gw,"P",{});var gee=s(kc);_0r=r(gee,`Note:
Loading a model from its configuration file does `),GTe=n(gee,"STRONG",{});var Q5t=s(GTe);u0r=r(Q5t,"not"),Q5t.forEach(t),b0r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(gee,"A",{href:!0});var H5t=s(cJ);v0r=r(H5t,"from_pretrained()"),H5t.forEach(t),F0r=r(gee," to load the model weights."),gee.forEach(t),T0r=i(Gw),T(gE.$$.fragment,Gw),Gw.forEach(t),M0r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(u8.$$.fragment,Ol),E0r=i(Ol),OTe=n(Ol,"P",{});var U5t=s(OTe);C0r=r(U5t,"Instantiate one of the base model classes of the library from a pretrained model."),U5t.forEach(t),w0r=i(Ol),hn=n(Ol,"P",{});var Ow=s(hn);A0r=r(Ow,"The model class to instantiate is selected based on the "),VTe=n(Ow,"CODE",{});var J5t=s(VTe);y0r=r(J5t,"model_type"),J5t.forEach(t),L0r=r(Ow,` property of the config object (either
passed as an argument or loaded from `),XTe=n(Ow,"CODE",{});var Y5t=s(XTe);x0r=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),$0r=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(Ow,"CODE",{});var K5t=s(zTe);k0r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),S0r=r(Ow,":"),Ow.forEach(t),R0r=i(Ol),oe=n(Ol,"UL",{});var ne=s(oe);hE=n(ne,"LI",{});var aBe=s(hE);WTe=n(aBe,"STRONG",{});var Z5t=s(WTe);P0r=r(Z5t,"albert"),Z5t.forEach(t),B0r=r(aBe," \u2014 "),fJ=n(aBe,"A",{href:!0});var eCt=s(fJ);I0r=r(eCt,"FlaxAlbertModel"),eCt.forEach(t),q0r=r(aBe," (ALBERT model)"),aBe.forEach(t),N0r=i(ne),pE=n(ne,"LI",{});var nBe=s(pE);QTe=n(nBe,"STRONG",{});var oCt=s(QTe);j0r=r(oCt,"bart"),oCt.forEach(t),D0r=r(nBe," \u2014 "),mJ=n(nBe,"A",{href:!0});var rCt=s(mJ);G0r=r(rCt,"FlaxBartModel"),rCt.forEach(t),O0r=r(nBe," (BART model)"),nBe.forEach(t),V0r=i(ne),_E=n(ne,"LI",{});var sBe=s(_E);HTe=n(sBe,"STRONG",{});var tCt=s(HTe);X0r=r(tCt,"beit"),tCt.forEach(t),z0r=r(sBe," \u2014 "),gJ=n(sBe,"A",{href:!0});var aCt=s(gJ);W0r=r(aCt,"FlaxBeitModel"),aCt.forEach(t),Q0r=r(sBe," (BEiT model)"),sBe.forEach(t),H0r=i(ne),uE=n(ne,"LI",{});var lBe=s(uE);UTe=n(lBe,"STRONG",{});var nCt=s(UTe);U0r=r(nCt,"bert"),nCt.forEach(t),J0r=r(lBe," \u2014 "),hJ=n(lBe,"A",{href:!0});var sCt=s(hJ);Y0r=r(sCt,"FlaxBertModel"),sCt.forEach(t),K0r=r(lBe," (BERT model)"),lBe.forEach(t),Z0r=i(ne),bE=n(ne,"LI",{});var iBe=s(bE);JTe=n(iBe,"STRONG",{});var lCt=s(JTe);eAr=r(lCt,"big_bird"),lCt.forEach(t),oAr=r(iBe," \u2014 "),pJ=n(iBe,"A",{href:!0});var iCt=s(pJ);rAr=r(iCt,"FlaxBigBirdModel"),iCt.forEach(t),tAr=r(iBe," (BigBird model)"),iBe.forEach(t),aAr=i(ne),vE=n(ne,"LI",{});var dBe=s(vE);YTe=n(dBe,"STRONG",{});var dCt=s(YTe);nAr=r(dCt,"blenderbot"),dCt.forEach(t),sAr=r(dBe," \u2014 "),_J=n(dBe,"A",{href:!0});var cCt=s(_J);lAr=r(cCt,"FlaxBlenderbotModel"),cCt.forEach(t),iAr=r(dBe," (Blenderbot model)"),dBe.forEach(t),dAr=i(ne),FE=n(ne,"LI",{});var cBe=s(FE);KTe=n(cBe,"STRONG",{});var fCt=s(KTe);cAr=r(fCt,"blenderbot-small"),fCt.forEach(t),fAr=r(cBe," \u2014 "),uJ=n(cBe,"A",{href:!0});var mCt=s(uJ);mAr=r(mCt,"FlaxBlenderbotSmallModel"),mCt.forEach(t),gAr=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),hAr=i(ne),TE=n(ne,"LI",{});var fBe=s(TE);ZTe=n(fBe,"STRONG",{});var gCt=s(ZTe);pAr=r(gCt,"clip"),gCt.forEach(t),_Ar=r(fBe," \u2014 "),bJ=n(fBe,"A",{href:!0});var hCt=s(bJ);uAr=r(hCt,"FlaxCLIPModel"),hCt.forEach(t),bAr=r(fBe," (CLIP model)"),fBe.forEach(t),vAr=i(ne),ME=n(ne,"LI",{});var mBe=s(ME);e7e=n(mBe,"STRONG",{});var pCt=s(e7e);FAr=r(pCt,"distilbert"),pCt.forEach(t),TAr=r(mBe," \u2014 "),vJ=n(mBe,"A",{href:!0});var _Ct=s(vJ);MAr=r(_Ct,"FlaxDistilBertModel"),_Ct.forEach(t),EAr=r(mBe," (DistilBERT model)"),mBe.forEach(t),CAr=i(ne),EE=n(ne,"LI",{});var gBe=s(EE);o7e=n(gBe,"STRONG",{});var uCt=s(o7e);wAr=r(uCt,"electra"),uCt.forEach(t),AAr=r(gBe," \u2014 "),FJ=n(gBe,"A",{href:!0});var bCt=s(FJ);yAr=r(bCt,"FlaxElectraModel"),bCt.forEach(t),LAr=r(gBe," (ELECTRA model)"),gBe.forEach(t),xAr=i(ne),CE=n(ne,"LI",{});var hBe=s(CE);r7e=n(hBe,"STRONG",{});var vCt=s(r7e);$Ar=r(vCt,"gpt2"),vCt.forEach(t),kAr=r(hBe," \u2014 "),TJ=n(hBe,"A",{href:!0});var FCt=s(TJ);SAr=r(FCt,"FlaxGPT2Model"),FCt.forEach(t),RAr=r(hBe," (OpenAI GPT-2 model)"),hBe.forEach(t),PAr=i(ne),wE=n(ne,"LI",{});var pBe=s(wE);t7e=n(pBe,"STRONG",{});var TCt=s(t7e);BAr=r(TCt,"gpt_neo"),TCt.forEach(t),IAr=r(pBe," \u2014 "),MJ=n(pBe,"A",{href:!0});var MCt=s(MJ);qAr=r(MCt,"FlaxGPTNeoModel"),MCt.forEach(t),NAr=r(pBe," (GPT Neo model)"),pBe.forEach(t),jAr=i(ne),AE=n(ne,"LI",{});var _Be=s(AE);a7e=n(_Be,"STRONG",{});var ECt=s(a7e);DAr=r(ECt,"gptj"),ECt.forEach(t),GAr=r(_Be," \u2014 "),EJ=n(_Be,"A",{href:!0});var CCt=s(EJ);OAr=r(CCt,"FlaxGPTJModel"),CCt.forEach(t),VAr=r(_Be," (GPT-J model)"),_Be.forEach(t),XAr=i(ne),yE=n(ne,"LI",{});var uBe=s(yE);n7e=n(uBe,"STRONG",{});var wCt=s(n7e);zAr=r(wCt,"longt5"),wCt.forEach(t),WAr=r(uBe," \u2014 "),CJ=n(uBe,"A",{href:!0});var ACt=s(CJ);QAr=r(ACt,"FlaxLongT5Model"),ACt.forEach(t),HAr=r(uBe," (LongT5 model)"),uBe.forEach(t),UAr=i(ne),LE=n(ne,"LI",{});var bBe=s(LE);s7e=n(bBe,"STRONG",{});var yCt=s(s7e);JAr=r(yCt,"marian"),yCt.forEach(t),YAr=r(bBe," \u2014 "),wJ=n(bBe,"A",{href:!0});var LCt=s(wJ);KAr=r(LCt,"FlaxMarianModel"),LCt.forEach(t),ZAr=r(bBe," (Marian model)"),bBe.forEach(t),eyr=i(ne),xE=n(ne,"LI",{});var vBe=s(xE);l7e=n(vBe,"STRONG",{});var xCt=s(l7e);oyr=r(xCt,"mbart"),xCt.forEach(t),ryr=r(vBe," \u2014 "),AJ=n(vBe,"A",{href:!0});var $Ct=s(AJ);tyr=r($Ct,"FlaxMBartModel"),$Ct.forEach(t),ayr=r(vBe," (mBART model)"),vBe.forEach(t),nyr=i(ne),$E=n(ne,"LI",{});var FBe=s($E);i7e=n(FBe,"STRONG",{});var kCt=s(i7e);syr=r(kCt,"mt5"),kCt.forEach(t),lyr=r(FBe," \u2014 "),yJ=n(FBe,"A",{href:!0});var SCt=s(yJ);iyr=r(SCt,"FlaxMT5Model"),SCt.forEach(t),dyr=r(FBe," (mT5 model)"),FBe.forEach(t),cyr=i(ne),kE=n(ne,"LI",{});var TBe=s(kE);d7e=n(TBe,"STRONG",{});var RCt=s(d7e);fyr=r(RCt,"pegasus"),RCt.forEach(t),myr=r(TBe," \u2014 "),LJ=n(TBe,"A",{href:!0});var PCt=s(LJ);gyr=r(PCt,"FlaxPegasusModel"),PCt.forEach(t),hyr=r(TBe," (Pegasus model)"),TBe.forEach(t),pyr=i(ne),SE=n(ne,"LI",{});var MBe=s(SE);c7e=n(MBe,"STRONG",{});var BCt=s(c7e);_yr=r(BCt,"roberta"),BCt.forEach(t),uyr=r(MBe," \u2014 "),xJ=n(MBe,"A",{href:!0});var ICt=s(xJ);byr=r(ICt,"FlaxRobertaModel"),ICt.forEach(t),vyr=r(MBe," (RoBERTa model)"),MBe.forEach(t),Fyr=i(ne),RE=n(ne,"LI",{});var EBe=s(RE);f7e=n(EBe,"STRONG",{});var qCt=s(f7e);Tyr=r(qCt,"roformer"),qCt.forEach(t),Myr=r(EBe," \u2014 "),$J=n(EBe,"A",{href:!0});var NCt=s($J);Eyr=r(NCt,"FlaxRoFormerModel"),NCt.forEach(t),Cyr=r(EBe," (RoFormer model)"),EBe.forEach(t),wyr=i(ne),PE=n(ne,"LI",{});var CBe=s(PE);m7e=n(CBe,"STRONG",{});var jCt=s(m7e);Ayr=r(jCt,"t5"),jCt.forEach(t),yyr=r(CBe," \u2014 "),kJ=n(CBe,"A",{href:!0});var DCt=s(kJ);Lyr=r(DCt,"FlaxT5Model"),DCt.forEach(t),xyr=r(CBe," (T5 model)"),CBe.forEach(t),$yr=i(ne),BE=n(ne,"LI",{});var wBe=s(BE);g7e=n(wBe,"STRONG",{});var GCt=s(g7e);kyr=r(GCt,"vision-text-dual-encoder"),GCt.forEach(t),Syr=r(wBe," \u2014 "),SJ=n(wBe,"A",{href:!0});var OCt=s(SJ);Ryr=r(OCt,"FlaxVisionTextDualEncoderModel"),OCt.forEach(t),Pyr=r(wBe," (VisionTextDualEncoder model)"),wBe.forEach(t),Byr=i(ne),IE=n(ne,"LI",{});var ABe=s(IE);h7e=n(ABe,"STRONG",{});var VCt=s(h7e);Iyr=r(VCt,"vit"),VCt.forEach(t),qyr=r(ABe," \u2014 "),RJ=n(ABe,"A",{href:!0});var XCt=s(RJ);Nyr=r(XCt,"FlaxViTModel"),XCt.forEach(t),jyr=r(ABe," (ViT model)"),ABe.forEach(t),Dyr=i(ne),qE=n(ne,"LI",{});var yBe=s(qE);p7e=n(yBe,"STRONG",{});var zCt=s(p7e);Gyr=r(zCt,"wav2vec2"),zCt.forEach(t),Oyr=r(yBe," \u2014 "),PJ=n(yBe,"A",{href:!0});var WCt=s(PJ);Vyr=r(WCt,"FlaxWav2Vec2Model"),WCt.forEach(t),Xyr=r(yBe," (Wav2Vec2 model)"),yBe.forEach(t),zyr=i(ne),NE=n(ne,"LI",{});var LBe=s(NE);_7e=n(LBe,"STRONG",{});var QCt=s(_7e);Wyr=r(QCt,"xglm"),QCt.forEach(t),Qyr=r(LBe," \u2014 "),BJ=n(LBe,"A",{href:!0});var HCt=s(BJ);Hyr=r(HCt,"FlaxXGLMModel"),HCt.forEach(t),Uyr=r(LBe," (XGLM model)"),LBe.forEach(t),Jyr=i(ne),jE=n(ne,"LI",{});var xBe=s(jE);u7e=n(xBe,"STRONG",{});var UCt=s(u7e);Yyr=r(UCt,"xlm-roberta"),UCt.forEach(t),Kyr=r(xBe," \u2014 "),IJ=n(xBe,"A",{href:!0});var JCt=s(IJ);Zyr=r(JCt,"FlaxXLMRobertaModel"),JCt.forEach(t),eLr=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),ne.forEach(t),oLr=i(Ol),T(DE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),jNe=i(f),Sc=n(f,"H2",{class:!0});var WDe=s(Sc);GE=n(WDe,"A",{id:!0,class:!0,href:!0});var YCt=s(GE);b7e=n(YCt,"SPAN",{});var KCt=s(b7e);T(b8.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),rLr=i(WDe),v7e=n(WDe,"SPAN",{});var ZCt=s(v7e);tLr=r(ZCt,"FlaxAutoModelForCausalLM"),ZCt.forEach(t),WDe.forEach(t),DNe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(v8.$$.fragment,Vl),aLr=i(Vl),Rc=n(Vl,"P",{});var hee=s(Rc);nLr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=n(hee,"A",{href:!0});var e3t=s(qJ);sLr=r(e3t,"from_pretrained()"),e3t.forEach(t),lLr=r(hee," class method or the "),NJ=n(hee,"A",{href:!0});var o3t=s(NJ);iLr=r(o3t,"from_config()"),o3t.forEach(t),dLr=r(hee,` class
method.`),hee.forEach(t),cLr=i(Vl),F8=n(Vl,"P",{});var QDe=s(F8);fLr=r(QDe,"This class cannot be instantiated directly using "),F7e=n(QDe,"CODE",{});var r3t=s(F7e);mLr=r(r3t,"__init__()"),r3t.forEach(t),gLr=r(QDe," (throws an error)."),QDe.forEach(t),hLr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Vw=s(Ot);T(T8.$$.fragment,Vw),pLr=i(Vw),T7e=n(Vw,"P",{});var t3t=s(T7e);_Lr=r(t3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),t3t.forEach(t),uLr=i(Vw),Pc=n(Vw,"P",{});var pee=s(Pc);bLr=r(pee,`Note:
Loading a model from its configuration file does `),M7e=n(pee,"STRONG",{});var a3t=s(M7e);vLr=r(a3t,"not"),a3t.forEach(t),FLr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(pee,"A",{href:!0});var n3t=s(jJ);TLr=r(n3t,"from_pretrained()"),n3t.forEach(t),MLr=r(pee," to load the model weights."),pee.forEach(t),ELr=i(Vw),T(OE.$$.fragment,Vw),Vw.forEach(t),CLr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(M8.$$.fragment,Xl),wLr=i(Xl),E7e=n(Xl,"P",{});var s3t=s(E7e);ALr=r(s3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s3t.forEach(t),yLr=i(Xl),pn=n(Xl,"P",{});var Xw=s(pn);LLr=r(Xw,"The model class to instantiate is selected based on the "),C7e=n(Xw,"CODE",{});var l3t=s(C7e);xLr=r(l3t,"model_type"),l3t.forEach(t),$Lr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),w7e=n(Xw,"CODE",{});var i3t=s(w7e);kLr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),SLr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(Xw,"CODE",{});var d3t=s(A7e);RLr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),PLr=r(Xw,":"),Xw.forEach(t),BLr=i(Xl),Pe=n(Xl,"UL",{});var ze=s(Pe);VE=n(ze,"LI",{});var $Be=s(VE);y7e=n($Be,"STRONG",{});var c3t=s(y7e);ILr=r(c3t,"bart"),c3t.forEach(t),qLr=r($Be," \u2014 "),DJ=n($Be,"A",{href:!0});var f3t=s(DJ);NLr=r(f3t,"FlaxBartForCausalLM"),f3t.forEach(t),jLr=r($Be," (BART model)"),$Be.forEach(t),DLr=i(ze),XE=n(ze,"LI",{});var kBe=s(XE);L7e=n(kBe,"STRONG",{});var m3t=s(L7e);GLr=r(m3t,"bert"),m3t.forEach(t),OLr=r(kBe," \u2014 "),GJ=n(kBe,"A",{href:!0});var g3t=s(GJ);VLr=r(g3t,"FlaxBertForCausalLM"),g3t.forEach(t),XLr=r(kBe," (BERT model)"),kBe.forEach(t),zLr=i(ze),zE=n(ze,"LI",{});var SBe=s(zE);x7e=n(SBe,"STRONG",{});var h3t=s(x7e);WLr=r(h3t,"big_bird"),h3t.forEach(t),QLr=r(SBe," \u2014 "),OJ=n(SBe,"A",{href:!0});var p3t=s(OJ);HLr=r(p3t,"FlaxBigBirdForCausalLM"),p3t.forEach(t),ULr=r(SBe," (BigBird model)"),SBe.forEach(t),JLr=i(ze),WE=n(ze,"LI",{});var RBe=s(WE);$7e=n(RBe,"STRONG",{});var _3t=s($7e);YLr=r(_3t,"electra"),_3t.forEach(t),KLr=r(RBe," \u2014 "),VJ=n(RBe,"A",{href:!0});var u3t=s(VJ);ZLr=r(u3t,"FlaxElectraForCausalLM"),u3t.forEach(t),e8r=r(RBe," (ELECTRA model)"),RBe.forEach(t),o8r=i(ze),QE=n(ze,"LI",{});var PBe=s(QE);k7e=n(PBe,"STRONG",{});var b3t=s(k7e);r8r=r(b3t,"gpt2"),b3t.forEach(t),t8r=r(PBe," \u2014 "),XJ=n(PBe,"A",{href:!0});var v3t=s(XJ);a8r=r(v3t,"FlaxGPT2LMHeadModel"),v3t.forEach(t),n8r=r(PBe," (OpenAI GPT-2 model)"),PBe.forEach(t),s8r=i(ze),HE=n(ze,"LI",{});var BBe=s(HE);S7e=n(BBe,"STRONG",{});var F3t=s(S7e);l8r=r(F3t,"gpt_neo"),F3t.forEach(t),i8r=r(BBe," \u2014 "),zJ=n(BBe,"A",{href:!0});var T3t=s(zJ);d8r=r(T3t,"FlaxGPTNeoForCausalLM"),T3t.forEach(t),c8r=r(BBe," (GPT Neo model)"),BBe.forEach(t),f8r=i(ze),UE=n(ze,"LI",{});var IBe=s(UE);R7e=n(IBe,"STRONG",{});var M3t=s(R7e);m8r=r(M3t,"gptj"),M3t.forEach(t),g8r=r(IBe," \u2014 "),WJ=n(IBe,"A",{href:!0});var E3t=s(WJ);h8r=r(E3t,"FlaxGPTJForCausalLM"),E3t.forEach(t),p8r=r(IBe," (GPT-J model)"),IBe.forEach(t),_8r=i(ze),JE=n(ze,"LI",{});var qBe=s(JE);P7e=n(qBe,"STRONG",{});var C3t=s(P7e);u8r=r(C3t,"roberta"),C3t.forEach(t),b8r=r(qBe," \u2014 "),QJ=n(qBe,"A",{href:!0});var w3t=s(QJ);v8r=r(w3t,"FlaxRobertaForCausalLM"),w3t.forEach(t),F8r=r(qBe," (RoBERTa model)"),qBe.forEach(t),T8r=i(ze),YE=n(ze,"LI",{});var NBe=s(YE);B7e=n(NBe,"STRONG",{});var A3t=s(B7e);M8r=r(A3t,"xglm"),A3t.forEach(t),E8r=r(NBe," \u2014 "),HJ=n(NBe,"A",{href:!0});var y3t=s(HJ);C8r=r(y3t,"FlaxXGLMForCausalLM"),y3t.forEach(t),w8r=r(NBe," (XGLM model)"),NBe.forEach(t),ze.forEach(t),A8r=i(Xl),T(KE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),GNe=i(f),Bc=n(f,"H2",{class:!0});var HDe=s(Bc);ZE=n(HDe,"A",{id:!0,class:!0,href:!0});var L3t=s(ZE);I7e=n(L3t,"SPAN",{});var x3t=s(I7e);T(E8.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),y8r=i(HDe),q7e=n(HDe,"SPAN",{});var $3t=s(q7e);L8r=r($3t,"FlaxAutoModelForPreTraining"),$3t.forEach(t),HDe.forEach(t),ONe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(C8.$$.fragment,zl),x8r=i(zl),Ic=n(zl,"P",{});var _ee=s(Ic);$8r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=n(_ee,"A",{href:!0});var k3t=s(UJ);k8r=r(k3t,"from_pretrained()"),k3t.forEach(t),S8r=r(_ee," class method or the "),JJ=n(_ee,"A",{href:!0});var S3t=s(JJ);R8r=r(S3t,"from_config()"),S3t.forEach(t),P8r=r(_ee,` class
method.`),_ee.forEach(t),B8r=i(zl),w8=n(zl,"P",{});var UDe=s(w8);I8r=r(UDe,"This class cannot be instantiated directly using "),N7e=n(UDe,"CODE",{});var R3t=s(N7e);q8r=r(R3t,"__init__()"),R3t.forEach(t),N8r=r(UDe," (throws an error)."),UDe.forEach(t),j8r=i(zl),Vt=n(zl,"DIV",{class:!0});var zw=s(Vt);T(A8.$$.fragment,zw),D8r=i(zw),j7e=n(zw,"P",{});var P3t=s(j7e);G8r=r(P3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P3t.forEach(t),O8r=i(zw),qc=n(zw,"P",{});var uee=s(qc);V8r=r(uee,`Note:
Loading a model from its configuration file does `),D7e=n(uee,"STRONG",{});var B3t=s(D7e);X8r=r(B3t,"not"),B3t.forEach(t),z8r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(uee,"A",{href:!0});var I3t=s(YJ);W8r=r(I3t,"from_pretrained()"),I3t.forEach(t),Q8r=r(uee," to load the model weights."),uee.forEach(t),H8r=i(zw),T(e5.$$.fragment,zw),zw.forEach(t),U8r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(y8.$$.fragment,Wl),J8r=i(Wl),G7e=n(Wl,"P",{});var q3t=s(G7e);Y8r=r(q3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q3t.forEach(t),K8r=i(Wl),_n=n(Wl,"P",{});var Ww=s(_n);Z8r=r(Ww,"The model class to instantiate is selected based on the "),O7e=n(Ww,"CODE",{});var N3t=s(O7e);exr=r(N3t,"model_type"),N3t.forEach(t),oxr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),V7e=n(Ww,"CODE",{});var j3t=s(V7e);rxr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),txr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(Ww,"CODE",{});var D3t=s(X7e);axr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),nxr=r(Ww,":"),Ww.forEach(t),sxr=i(Wl),Te=n(Wl,"UL",{});var Ce=s(Te);o5=n(Ce,"LI",{});var jBe=s(o5);z7e=n(jBe,"STRONG",{});var G3t=s(z7e);lxr=r(G3t,"albert"),G3t.forEach(t),ixr=r(jBe," \u2014 "),KJ=n(jBe,"A",{href:!0});var O3t=s(KJ);dxr=r(O3t,"FlaxAlbertForPreTraining"),O3t.forEach(t),cxr=r(jBe," (ALBERT model)"),jBe.forEach(t),fxr=i(Ce),r5=n(Ce,"LI",{});var DBe=s(r5);W7e=n(DBe,"STRONG",{});var V3t=s(W7e);mxr=r(V3t,"bart"),V3t.forEach(t),gxr=r(DBe," \u2014 "),ZJ=n(DBe,"A",{href:!0});var X3t=s(ZJ);hxr=r(X3t,"FlaxBartForConditionalGeneration"),X3t.forEach(t),pxr=r(DBe," (BART model)"),DBe.forEach(t),_xr=i(Ce),t5=n(Ce,"LI",{});var GBe=s(t5);Q7e=n(GBe,"STRONG",{});var z3t=s(Q7e);uxr=r(z3t,"bert"),z3t.forEach(t),bxr=r(GBe," \u2014 "),eY=n(GBe,"A",{href:!0});var W3t=s(eY);vxr=r(W3t,"FlaxBertForPreTraining"),W3t.forEach(t),Fxr=r(GBe," (BERT model)"),GBe.forEach(t),Txr=i(Ce),a5=n(Ce,"LI",{});var OBe=s(a5);H7e=n(OBe,"STRONG",{});var Q3t=s(H7e);Mxr=r(Q3t,"big_bird"),Q3t.forEach(t),Exr=r(OBe," \u2014 "),oY=n(OBe,"A",{href:!0});var H3t=s(oY);Cxr=r(H3t,"FlaxBigBirdForPreTraining"),H3t.forEach(t),wxr=r(OBe," (BigBird model)"),OBe.forEach(t),Axr=i(Ce),n5=n(Ce,"LI",{});var VBe=s(n5);U7e=n(VBe,"STRONG",{});var U3t=s(U7e);yxr=r(U3t,"electra"),U3t.forEach(t),Lxr=r(VBe," \u2014 "),rY=n(VBe,"A",{href:!0});var J3t=s(rY);xxr=r(J3t,"FlaxElectraForPreTraining"),J3t.forEach(t),$xr=r(VBe," (ELECTRA model)"),VBe.forEach(t),kxr=i(Ce),s5=n(Ce,"LI",{});var XBe=s(s5);J7e=n(XBe,"STRONG",{});var Y3t=s(J7e);Sxr=r(Y3t,"longt5"),Y3t.forEach(t),Rxr=r(XBe," \u2014 "),tY=n(XBe,"A",{href:!0});var K3t=s(tY);Pxr=r(K3t,"FlaxLongT5ForConditionalGeneration"),K3t.forEach(t),Bxr=r(XBe," (LongT5 model)"),XBe.forEach(t),Ixr=i(Ce),l5=n(Ce,"LI",{});var zBe=s(l5);Y7e=n(zBe,"STRONG",{});var Z3t=s(Y7e);qxr=r(Z3t,"mbart"),Z3t.forEach(t),Nxr=r(zBe," \u2014 "),aY=n(zBe,"A",{href:!0});var ewt=s(aY);jxr=r(ewt,"FlaxMBartForConditionalGeneration"),ewt.forEach(t),Dxr=r(zBe," (mBART model)"),zBe.forEach(t),Gxr=i(Ce),i5=n(Ce,"LI",{});var WBe=s(i5);K7e=n(WBe,"STRONG",{});var owt=s(K7e);Oxr=r(owt,"mt5"),owt.forEach(t),Vxr=r(WBe," \u2014 "),nY=n(WBe,"A",{href:!0});var rwt=s(nY);Xxr=r(rwt,"FlaxMT5ForConditionalGeneration"),rwt.forEach(t),zxr=r(WBe," (mT5 model)"),WBe.forEach(t),Wxr=i(Ce),d5=n(Ce,"LI",{});var QBe=s(d5);Z7e=n(QBe,"STRONG",{});var twt=s(Z7e);Qxr=r(twt,"roberta"),twt.forEach(t),Hxr=r(QBe," \u2014 "),sY=n(QBe,"A",{href:!0});var awt=s(sY);Uxr=r(awt,"FlaxRobertaForMaskedLM"),awt.forEach(t),Jxr=r(QBe," (RoBERTa model)"),QBe.forEach(t),Yxr=i(Ce),c5=n(Ce,"LI",{});var HBe=s(c5);e9e=n(HBe,"STRONG",{});var nwt=s(e9e);Kxr=r(nwt,"roformer"),nwt.forEach(t),Zxr=r(HBe," \u2014 "),lY=n(HBe,"A",{href:!0});var swt=s(lY);e$r=r(swt,"FlaxRoFormerForMaskedLM"),swt.forEach(t),o$r=r(HBe," (RoFormer model)"),HBe.forEach(t),r$r=i(Ce),f5=n(Ce,"LI",{});var UBe=s(f5);o9e=n(UBe,"STRONG",{});var lwt=s(o9e);t$r=r(lwt,"t5"),lwt.forEach(t),a$r=r(UBe," \u2014 "),iY=n(UBe,"A",{href:!0});var iwt=s(iY);n$r=r(iwt,"FlaxT5ForConditionalGeneration"),iwt.forEach(t),s$r=r(UBe," (T5 model)"),UBe.forEach(t),l$r=i(Ce),m5=n(Ce,"LI",{});var JBe=s(m5);r9e=n(JBe,"STRONG",{});var dwt=s(r9e);i$r=r(dwt,"wav2vec2"),dwt.forEach(t),d$r=r(JBe," \u2014 "),dY=n(JBe,"A",{href:!0});var cwt=s(dY);c$r=r(cwt,"FlaxWav2Vec2ForPreTraining"),cwt.forEach(t),f$r=r(JBe," (Wav2Vec2 model)"),JBe.forEach(t),m$r=i(Ce),g5=n(Ce,"LI",{});var YBe=s(g5);t9e=n(YBe,"STRONG",{});var fwt=s(t9e);g$r=r(fwt,"xlm-roberta"),fwt.forEach(t),h$r=r(YBe," \u2014 "),cY=n(YBe,"A",{href:!0});var mwt=s(cY);p$r=r(mwt,"FlaxXLMRobertaForMaskedLM"),mwt.forEach(t),_$r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Ce.forEach(t),u$r=i(Wl),T(h5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),VNe=i(f),Nc=n(f,"H2",{class:!0});var JDe=s(Nc);p5=n(JDe,"A",{id:!0,class:!0,href:!0});var gwt=s(p5);a9e=n(gwt,"SPAN",{});var hwt=s(a9e);T(L8.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),b$r=i(JDe),n9e=n(JDe,"SPAN",{});var pwt=s(n9e);v$r=r(pwt,"FlaxAutoModelForMaskedLM"),pwt.forEach(t),JDe.forEach(t),XNe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(x8.$$.fragment,Ql),F$r=i(Ql),jc=n(Ql,"P",{});var bee=s(jc);T$r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fY=n(bee,"A",{href:!0});var _wt=s(fY);M$r=r(_wt,"from_pretrained()"),_wt.forEach(t),E$r=r(bee," class method or the "),mY=n(bee,"A",{href:!0});var uwt=s(mY);C$r=r(uwt,"from_config()"),uwt.forEach(t),w$r=r(bee,` class
method.`),bee.forEach(t),A$r=i(Ql),$8=n(Ql,"P",{});var YDe=s($8);y$r=r(YDe,"This class cannot be instantiated directly using "),s9e=n(YDe,"CODE",{});var bwt=s(s9e);L$r=r(bwt,"__init__()"),bwt.forEach(t),x$r=r(YDe," (throws an error)."),YDe.forEach(t),$$r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var Qw=s(Xt);T(k8.$$.fragment,Qw),k$r=i(Qw),l9e=n(Qw,"P",{});var vwt=s(l9e);S$r=r(vwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vwt.forEach(t),R$r=i(Qw),Dc=n(Qw,"P",{});var vee=s(Dc);P$r=r(vee,`Note:
Loading a model from its configuration file does `),i9e=n(vee,"STRONG",{});var Fwt=s(i9e);B$r=r(Fwt,"not"),Fwt.forEach(t),I$r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(vee,"A",{href:!0});var Twt=s(gY);q$r=r(Twt,"from_pretrained()"),Twt.forEach(t),N$r=r(vee," to load the model weights."),vee.forEach(t),j$r=i(Qw),T(_5.$$.fragment,Qw),Qw.forEach(t),D$r=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(S8.$$.fragment,Hl),G$r=i(Hl),d9e=n(Hl,"P",{});var Mwt=s(d9e);O$r=r(Mwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mwt.forEach(t),V$r=i(Hl),un=n(Hl,"P",{});var Hw=s(un);X$r=r(Hw,"The model class to instantiate is selected based on the "),c9e=n(Hw,"CODE",{});var Ewt=s(c9e);z$r=r(Ewt,"model_type"),Ewt.forEach(t),W$r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),f9e=n(Hw,"CODE",{});var Cwt=s(f9e);Q$r=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),H$r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=n(Hw,"CODE",{});var wwt=s(m9e);U$r=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),J$r=r(Hw,":"),Hw.forEach(t),Y$r=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);u5=n(Ie,"LI",{});var KBe=s(u5);g9e=n(KBe,"STRONG",{});var Awt=s(g9e);K$r=r(Awt,"albert"),Awt.forEach(t),Z$r=r(KBe," \u2014 "),hY=n(KBe,"A",{href:!0});var ywt=s(hY);ekr=r(ywt,"FlaxAlbertForMaskedLM"),ywt.forEach(t),okr=r(KBe," (ALBERT model)"),KBe.forEach(t),rkr=i(Ie),b5=n(Ie,"LI",{});var ZBe=s(b5);h9e=n(ZBe,"STRONG",{});var Lwt=s(h9e);tkr=r(Lwt,"bart"),Lwt.forEach(t),akr=r(ZBe," \u2014 "),pY=n(ZBe,"A",{href:!0});var xwt=s(pY);nkr=r(xwt,"FlaxBartForConditionalGeneration"),xwt.forEach(t),skr=r(ZBe," (BART model)"),ZBe.forEach(t),lkr=i(Ie),v5=n(Ie,"LI",{});var eIe=s(v5);p9e=n(eIe,"STRONG",{});var $wt=s(p9e);ikr=r($wt,"bert"),$wt.forEach(t),dkr=r(eIe," \u2014 "),_Y=n(eIe,"A",{href:!0});var kwt=s(_Y);ckr=r(kwt,"FlaxBertForMaskedLM"),kwt.forEach(t),fkr=r(eIe," (BERT model)"),eIe.forEach(t),mkr=i(Ie),F5=n(Ie,"LI",{});var oIe=s(F5);_9e=n(oIe,"STRONG",{});var Swt=s(_9e);gkr=r(Swt,"big_bird"),Swt.forEach(t),hkr=r(oIe," \u2014 "),uY=n(oIe,"A",{href:!0});var Rwt=s(uY);pkr=r(Rwt,"FlaxBigBirdForMaskedLM"),Rwt.forEach(t),_kr=r(oIe," (BigBird model)"),oIe.forEach(t),ukr=i(Ie),T5=n(Ie,"LI",{});var rIe=s(T5);u9e=n(rIe,"STRONG",{});var Pwt=s(u9e);bkr=r(Pwt,"distilbert"),Pwt.forEach(t),vkr=r(rIe," \u2014 "),bY=n(rIe,"A",{href:!0});var Bwt=s(bY);Fkr=r(Bwt,"FlaxDistilBertForMaskedLM"),Bwt.forEach(t),Tkr=r(rIe," (DistilBERT model)"),rIe.forEach(t),Mkr=i(Ie),M5=n(Ie,"LI",{});var tIe=s(M5);b9e=n(tIe,"STRONG",{});var Iwt=s(b9e);Ekr=r(Iwt,"electra"),Iwt.forEach(t),Ckr=r(tIe," \u2014 "),vY=n(tIe,"A",{href:!0});var qwt=s(vY);wkr=r(qwt,"FlaxElectraForMaskedLM"),qwt.forEach(t),Akr=r(tIe," (ELECTRA model)"),tIe.forEach(t),ykr=i(Ie),E5=n(Ie,"LI",{});var aIe=s(E5);v9e=n(aIe,"STRONG",{});var Nwt=s(v9e);Lkr=r(Nwt,"mbart"),Nwt.forEach(t),xkr=r(aIe," \u2014 "),FY=n(aIe,"A",{href:!0});var jwt=s(FY);$kr=r(jwt,"FlaxMBartForConditionalGeneration"),jwt.forEach(t),kkr=r(aIe," (mBART model)"),aIe.forEach(t),Skr=i(Ie),C5=n(Ie,"LI",{});var nIe=s(C5);F9e=n(nIe,"STRONG",{});var Dwt=s(F9e);Rkr=r(Dwt,"roberta"),Dwt.forEach(t),Pkr=r(nIe," \u2014 "),TY=n(nIe,"A",{href:!0});var Gwt=s(TY);Bkr=r(Gwt,"FlaxRobertaForMaskedLM"),Gwt.forEach(t),Ikr=r(nIe," (RoBERTa model)"),nIe.forEach(t),qkr=i(Ie),w5=n(Ie,"LI",{});var sIe=s(w5);T9e=n(sIe,"STRONG",{});var Owt=s(T9e);Nkr=r(Owt,"roformer"),Owt.forEach(t),jkr=r(sIe," \u2014 "),MY=n(sIe,"A",{href:!0});var Vwt=s(MY);Dkr=r(Vwt,"FlaxRoFormerForMaskedLM"),Vwt.forEach(t),Gkr=r(sIe," (RoFormer model)"),sIe.forEach(t),Okr=i(Ie),A5=n(Ie,"LI",{});var lIe=s(A5);M9e=n(lIe,"STRONG",{});var Xwt=s(M9e);Vkr=r(Xwt,"xlm-roberta"),Xwt.forEach(t),Xkr=r(lIe," \u2014 "),EY=n(lIe,"A",{href:!0});var zwt=s(EY);zkr=r(zwt,"FlaxXLMRobertaForMaskedLM"),zwt.forEach(t),Wkr=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),Ie.forEach(t),Qkr=i(Hl),T(y5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),zNe=i(f),Gc=n(f,"H2",{class:!0});var KDe=s(Gc);L5=n(KDe,"A",{id:!0,class:!0,href:!0});var Wwt=s(L5);E9e=n(Wwt,"SPAN",{});var Qwt=s(E9e);T(R8.$$.fragment,Qwt),Qwt.forEach(t),Wwt.forEach(t),Hkr=i(KDe),C9e=n(KDe,"SPAN",{});var Hwt=s(C9e);Ukr=r(Hwt,"FlaxAutoModelForSeq2SeqLM"),Hwt.forEach(t),KDe.forEach(t),WNe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(P8.$$.fragment,Ul),Jkr=i(Ul),Oc=n(Ul,"P",{});var Fee=s(Oc);Ykr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CY=n(Fee,"A",{href:!0});var Uwt=s(CY);Kkr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),Zkr=r(Fee," class method or the "),wY=n(Fee,"A",{href:!0});var Jwt=s(wY);eSr=r(Jwt,"from_config()"),Jwt.forEach(t),oSr=r(Fee,` class
method.`),Fee.forEach(t),rSr=i(Ul),B8=n(Ul,"P",{});var ZDe=s(B8);tSr=r(ZDe,"This class cannot be instantiated directly using "),w9e=n(ZDe,"CODE",{});var Ywt=s(w9e);aSr=r(Ywt,"__init__()"),Ywt.forEach(t),nSr=r(ZDe," (throws an error)."),ZDe.forEach(t),sSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var Uw=s(zt);T(I8.$$.fragment,Uw),lSr=i(Uw),A9e=n(Uw,"P",{});var Kwt=s(A9e);iSr=r(Kwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kwt.forEach(t),dSr=i(Uw),Vc=n(Uw,"P",{});var Tee=s(Vc);cSr=r(Tee,`Note:
Loading a model from its configuration file does `),y9e=n(Tee,"STRONG",{});var Zwt=s(y9e);fSr=r(Zwt,"not"),Zwt.forEach(t),mSr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(Tee,"A",{href:!0});var e0t=s(AY);gSr=r(e0t,"from_pretrained()"),e0t.forEach(t),hSr=r(Tee," to load the model weights."),Tee.forEach(t),pSr=i(Uw),T(x5.$$.fragment,Uw),Uw.forEach(t),_Sr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(q8.$$.fragment,Jl),uSr=i(Jl),L9e=n(Jl,"P",{});var o0t=s(L9e);bSr=r(o0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o0t.forEach(t),vSr=i(Jl),bn=n(Jl,"P",{});var Jw=s(bn);FSr=r(Jw,"The model class to instantiate is selected based on the "),x9e=n(Jw,"CODE",{});var r0t=s(x9e);TSr=r(r0t,"model_type"),r0t.forEach(t),MSr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),$9e=n(Jw,"CODE",{});var t0t=s($9e);ESr=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),CSr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=n(Jw,"CODE",{});var a0t=s(k9e);wSr=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),ASr=r(Jw,":"),Jw.forEach(t),ySr=i(Jl),xe=n(Jl,"UL",{});var qe=s(xe);$5=n(qe,"LI",{});var iIe=s($5);S9e=n(iIe,"STRONG",{});var n0t=s(S9e);LSr=r(n0t,"bart"),n0t.forEach(t),xSr=r(iIe," \u2014 "),yY=n(iIe,"A",{href:!0});var s0t=s(yY);$Sr=r(s0t,"FlaxBartForConditionalGeneration"),s0t.forEach(t),kSr=r(iIe," (BART model)"),iIe.forEach(t),SSr=i(qe),k5=n(qe,"LI",{});var dIe=s(k5);R9e=n(dIe,"STRONG",{});var l0t=s(R9e);RSr=r(l0t,"blenderbot"),l0t.forEach(t),PSr=r(dIe," \u2014 "),LY=n(dIe,"A",{href:!0});var i0t=s(LY);BSr=r(i0t,"FlaxBlenderbotForConditionalGeneration"),i0t.forEach(t),ISr=r(dIe," (Blenderbot model)"),dIe.forEach(t),qSr=i(qe),S5=n(qe,"LI",{});var cIe=s(S5);P9e=n(cIe,"STRONG",{});var d0t=s(P9e);NSr=r(d0t,"blenderbot-small"),d0t.forEach(t),jSr=r(cIe," \u2014 "),xY=n(cIe,"A",{href:!0});var c0t=s(xY);DSr=r(c0t,"FlaxBlenderbotSmallForConditionalGeneration"),c0t.forEach(t),GSr=r(cIe," (BlenderbotSmall model)"),cIe.forEach(t),OSr=i(qe),R5=n(qe,"LI",{});var fIe=s(R5);B9e=n(fIe,"STRONG",{});var f0t=s(B9e);VSr=r(f0t,"encoder-decoder"),f0t.forEach(t),XSr=r(fIe," \u2014 "),$Y=n(fIe,"A",{href:!0});var m0t=s($Y);zSr=r(m0t,"FlaxEncoderDecoderModel"),m0t.forEach(t),WSr=r(fIe," (Encoder decoder model)"),fIe.forEach(t),QSr=i(qe),P5=n(qe,"LI",{});var mIe=s(P5);I9e=n(mIe,"STRONG",{});var g0t=s(I9e);HSr=r(g0t,"longt5"),g0t.forEach(t),USr=r(mIe," \u2014 "),kY=n(mIe,"A",{href:!0});var h0t=s(kY);JSr=r(h0t,"FlaxLongT5ForConditionalGeneration"),h0t.forEach(t),YSr=r(mIe," (LongT5 model)"),mIe.forEach(t),KSr=i(qe),B5=n(qe,"LI",{});var gIe=s(B5);q9e=n(gIe,"STRONG",{});var p0t=s(q9e);ZSr=r(p0t,"marian"),p0t.forEach(t),eRr=r(gIe," \u2014 "),SY=n(gIe,"A",{href:!0});var _0t=s(SY);oRr=r(_0t,"FlaxMarianMTModel"),_0t.forEach(t),rRr=r(gIe," (Marian model)"),gIe.forEach(t),tRr=i(qe),I5=n(qe,"LI",{});var hIe=s(I5);N9e=n(hIe,"STRONG",{});var u0t=s(N9e);aRr=r(u0t,"mbart"),u0t.forEach(t),nRr=r(hIe," \u2014 "),RY=n(hIe,"A",{href:!0});var b0t=s(RY);sRr=r(b0t,"FlaxMBartForConditionalGeneration"),b0t.forEach(t),lRr=r(hIe," (mBART model)"),hIe.forEach(t),iRr=i(qe),q5=n(qe,"LI",{});var pIe=s(q5);j9e=n(pIe,"STRONG",{});var v0t=s(j9e);dRr=r(v0t,"mt5"),v0t.forEach(t),cRr=r(pIe," \u2014 "),PY=n(pIe,"A",{href:!0});var F0t=s(PY);fRr=r(F0t,"FlaxMT5ForConditionalGeneration"),F0t.forEach(t),mRr=r(pIe," (mT5 model)"),pIe.forEach(t),gRr=i(qe),N5=n(qe,"LI",{});var _Ie=s(N5);D9e=n(_Ie,"STRONG",{});var T0t=s(D9e);hRr=r(T0t,"pegasus"),T0t.forEach(t),pRr=r(_Ie," \u2014 "),BY=n(_Ie,"A",{href:!0});var M0t=s(BY);_Rr=r(M0t,"FlaxPegasusForConditionalGeneration"),M0t.forEach(t),uRr=r(_Ie," (Pegasus model)"),_Ie.forEach(t),bRr=i(qe),j5=n(qe,"LI",{});var uIe=s(j5);G9e=n(uIe,"STRONG",{});var E0t=s(G9e);vRr=r(E0t,"t5"),E0t.forEach(t),FRr=r(uIe," \u2014 "),IY=n(uIe,"A",{href:!0});var C0t=s(IY);TRr=r(C0t,"FlaxT5ForConditionalGeneration"),C0t.forEach(t),MRr=r(uIe," (T5 model)"),uIe.forEach(t),qe.forEach(t),ERr=i(Jl),T(D5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),QNe=i(f),Xc=n(f,"H2",{class:!0});var eGe=s(Xc);G5=n(eGe,"A",{id:!0,class:!0,href:!0});var w0t=s(G5);O9e=n(w0t,"SPAN",{});var A0t=s(O9e);T(N8.$$.fragment,A0t),A0t.forEach(t),w0t.forEach(t),CRr=i(eGe),V9e=n(eGe,"SPAN",{});var y0t=s(V9e);wRr=r(y0t,"FlaxAutoModelForSequenceClassification"),y0t.forEach(t),eGe.forEach(t),HNe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(j8.$$.fragment,Yl),ARr=i(Yl),zc=n(Yl,"P",{});var Mee=s(zc);yRr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=n(Mee,"A",{href:!0});var L0t=s(qY);LRr=r(L0t,"from_pretrained()"),L0t.forEach(t),xRr=r(Mee," class method or the "),NY=n(Mee,"A",{href:!0});var x0t=s(NY);$Rr=r(x0t,"from_config()"),x0t.forEach(t),kRr=r(Mee,` class
method.`),Mee.forEach(t),SRr=i(Yl),D8=n(Yl,"P",{});var oGe=s(D8);RRr=r(oGe,"This class cannot be instantiated directly using "),X9e=n(oGe,"CODE",{});var $0t=s(X9e);PRr=r($0t,"__init__()"),$0t.forEach(t),BRr=r(oGe," (throws an error)."),oGe.forEach(t),IRr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var Yw=s(Wt);T(G8.$$.fragment,Yw),qRr=i(Yw),z9e=n(Yw,"P",{});var k0t=s(z9e);NRr=r(k0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k0t.forEach(t),jRr=i(Yw),Wc=n(Yw,"P",{});var Eee=s(Wc);DRr=r(Eee,`Note:
Loading a model from its configuration file does `),W9e=n(Eee,"STRONG",{});var S0t=s(W9e);GRr=r(S0t,"not"),S0t.forEach(t),ORr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(Eee,"A",{href:!0});var R0t=s(jY);VRr=r(R0t,"from_pretrained()"),R0t.forEach(t),XRr=r(Eee," to load the model weights."),Eee.forEach(t),zRr=i(Yw),T(O5.$$.fragment,Yw),Yw.forEach(t),WRr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(O8.$$.fragment,Kl),QRr=i(Kl),Q9e=n(Kl,"P",{});var P0t=s(Q9e);HRr=r(P0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P0t.forEach(t),URr=i(Kl),vn=n(Kl,"P",{});var Kw=s(vn);JRr=r(Kw,"The model class to instantiate is selected based on the "),H9e=n(Kw,"CODE",{});var B0t=s(H9e);YRr=r(B0t,"model_type"),B0t.forEach(t),KRr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),U9e=n(Kw,"CODE",{});var I0t=s(U9e);ZRr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),ePr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=n(Kw,"CODE",{});var q0t=s(J9e);oPr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),rPr=r(Kw,":"),Kw.forEach(t),tPr=i(Kl),$e=n(Kl,"UL",{});var Ne=s($e);V5=n(Ne,"LI",{});var bIe=s(V5);Y9e=n(bIe,"STRONG",{});var N0t=s(Y9e);aPr=r(N0t,"albert"),N0t.forEach(t),nPr=r(bIe," \u2014 "),DY=n(bIe,"A",{href:!0});var j0t=s(DY);sPr=r(j0t,"FlaxAlbertForSequenceClassification"),j0t.forEach(t),lPr=r(bIe," (ALBERT model)"),bIe.forEach(t),iPr=i(Ne),X5=n(Ne,"LI",{});var vIe=s(X5);K9e=n(vIe,"STRONG",{});var D0t=s(K9e);dPr=r(D0t,"bart"),D0t.forEach(t),cPr=r(vIe," \u2014 "),GY=n(vIe,"A",{href:!0});var G0t=s(GY);fPr=r(G0t,"FlaxBartForSequenceClassification"),G0t.forEach(t),mPr=r(vIe," (BART model)"),vIe.forEach(t),gPr=i(Ne),z5=n(Ne,"LI",{});var FIe=s(z5);Z9e=n(FIe,"STRONG",{});var O0t=s(Z9e);hPr=r(O0t,"bert"),O0t.forEach(t),pPr=r(FIe," \u2014 "),OY=n(FIe,"A",{href:!0});var V0t=s(OY);_Pr=r(V0t,"FlaxBertForSequenceClassification"),V0t.forEach(t),uPr=r(FIe," (BERT model)"),FIe.forEach(t),bPr=i(Ne),W5=n(Ne,"LI",{});var TIe=s(W5);eMe=n(TIe,"STRONG",{});var X0t=s(eMe);vPr=r(X0t,"big_bird"),X0t.forEach(t),FPr=r(TIe," \u2014 "),VY=n(TIe,"A",{href:!0});var z0t=s(VY);TPr=r(z0t,"FlaxBigBirdForSequenceClassification"),z0t.forEach(t),MPr=r(TIe," (BigBird model)"),TIe.forEach(t),EPr=i(Ne),Q5=n(Ne,"LI",{});var MIe=s(Q5);oMe=n(MIe,"STRONG",{});var W0t=s(oMe);CPr=r(W0t,"distilbert"),W0t.forEach(t),wPr=r(MIe," \u2014 "),XY=n(MIe,"A",{href:!0});var Q0t=s(XY);APr=r(Q0t,"FlaxDistilBertForSequenceClassification"),Q0t.forEach(t),yPr=r(MIe," (DistilBERT model)"),MIe.forEach(t),LPr=i(Ne),H5=n(Ne,"LI",{});var EIe=s(H5);rMe=n(EIe,"STRONG",{});var H0t=s(rMe);xPr=r(H0t,"electra"),H0t.forEach(t),$Pr=r(EIe," \u2014 "),zY=n(EIe,"A",{href:!0});var U0t=s(zY);kPr=r(U0t,"FlaxElectraForSequenceClassification"),U0t.forEach(t),SPr=r(EIe," (ELECTRA model)"),EIe.forEach(t),RPr=i(Ne),U5=n(Ne,"LI",{});var CIe=s(U5);tMe=n(CIe,"STRONG",{});var J0t=s(tMe);PPr=r(J0t,"mbart"),J0t.forEach(t),BPr=r(CIe," \u2014 "),WY=n(CIe,"A",{href:!0});var Y0t=s(WY);IPr=r(Y0t,"FlaxMBartForSequenceClassification"),Y0t.forEach(t),qPr=r(CIe," (mBART model)"),CIe.forEach(t),NPr=i(Ne),J5=n(Ne,"LI",{});var wIe=s(J5);aMe=n(wIe,"STRONG",{});var K0t=s(aMe);jPr=r(K0t,"roberta"),K0t.forEach(t),DPr=r(wIe," \u2014 "),QY=n(wIe,"A",{href:!0});var Z0t=s(QY);GPr=r(Z0t,"FlaxRobertaForSequenceClassification"),Z0t.forEach(t),OPr=r(wIe," (RoBERTa model)"),wIe.forEach(t),VPr=i(Ne),Y5=n(Ne,"LI",{});var AIe=s(Y5);nMe=n(AIe,"STRONG",{});var eAt=s(nMe);XPr=r(eAt,"roformer"),eAt.forEach(t),zPr=r(AIe," \u2014 "),HY=n(AIe,"A",{href:!0});var oAt=s(HY);WPr=r(oAt,"FlaxRoFormerForSequenceClassification"),oAt.forEach(t),QPr=r(AIe," (RoFormer model)"),AIe.forEach(t),HPr=i(Ne),K5=n(Ne,"LI",{});var yIe=s(K5);sMe=n(yIe,"STRONG",{});var rAt=s(sMe);UPr=r(rAt,"xlm-roberta"),rAt.forEach(t),JPr=r(yIe," \u2014 "),UY=n(yIe,"A",{href:!0});var tAt=s(UY);YPr=r(tAt,"FlaxXLMRobertaForSequenceClassification"),tAt.forEach(t),KPr=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),Ne.forEach(t),ZPr=i(Kl),T(Z5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),UNe=i(f),Qc=n(f,"H2",{class:!0});var rGe=s(Qc);eC=n(rGe,"A",{id:!0,class:!0,href:!0});var aAt=s(eC);lMe=n(aAt,"SPAN",{});var nAt=s(lMe);T(V8.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),eBr=i(rGe),iMe=n(rGe,"SPAN",{});var sAt=s(iMe);oBr=r(sAt,"FlaxAutoModelForQuestionAnswering"),sAt.forEach(t),rGe.forEach(t),JNe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(X8.$$.fragment,Zl),rBr=i(Zl),Hc=n(Zl,"P",{});var Cee=s(Hc);tBr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=n(Cee,"A",{href:!0});var lAt=s(JY);aBr=r(lAt,"from_pretrained()"),lAt.forEach(t),nBr=r(Cee," class method or the "),YY=n(Cee,"A",{href:!0});var iAt=s(YY);sBr=r(iAt,"from_config()"),iAt.forEach(t),lBr=r(Cee,` class
method.`),Cee.forEach(t),iBr=i(Zl),z8=n(Zl,"P",{});var tGe=s(z8);dBr=r(tGe,"This class cannot be instantiated directly using "),dMe=n(tGe,"CODE",{});var dAt=s(dMe);cBr=r(dAt,"__init__()"),dAt.forEach(t),fBr=r(tGe," (throws an error)."),tGe.forEach(t),mBr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var Zw=s(Qt);T(W8.$$.fragment,Zw),gBr=i(Zw),cMe=n(Zw,"P",{});var cAt=s(cMe);hBr=r(cAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cAt.forEach(t),pBr=i(Zw),Uc=n(Zw,"P",{});var wee=s(Uc);_Br=r(wee,`Note:
Loading a model from its configuration file does `),fMe=n(wee,"STRONG",{});var fAt=s(fMe);uBr=r(fAt,"not"),fAt.forEach(t),bBr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(wee,"A",{href:!0});var mAt=s(KY);vBr=r(mAt,"from_pretrained()"),mAt.forEach(t),FBr=r(wee," to load the model weights."),wee.forEach(t),TBr=i(Zw),T(oC.$$.fragment,Zw),Zw.forEach(t),MBr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(Q8.$$.fragment,ei),EBr=i(ei),mMe=n(ei,"P",{});var gAt=s(mMe);CBr=r(gAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gAt.forEach(t),wBr=i(ei),Fn=n(ei,"P",{});var e0=s(Fn);ABr=r(e0,"The model class to instantiate is selected based on the "),gMe=n(e0,"CODE",{});var hAt=s(gMe);yBr=r(hAt,"model_type"),hAt.forEach(t),LBr=r(e0,` property of the config object (either
passed as an argument or loaded from `),hMe=n(e0,"CODE",{});var pAt=s(hMe);xBr=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),$Br=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(e0,"CODE",{});var _At=s(pMe);kBr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),SBr=r(e0,":"),e0.forEach(t),RBr=i(ei),ke=n(ei,"UL",{});var je=s(ke);rC=n(je,"LI",{});var LIe=s(rC);_Me=n(LIe,"STRONG",{});var uAt=s(_Me);PBr=r(uAt,"albert"),uAt.forEach(t),BBr=r(LIe," \u2014 "),ZY=n(LIe,"A",{href:!0});var bAt=s(ZY);IBr=r(bAt,"FlaxAlbertForQuestionAnswering"),bAt.forEach(t),qBr=r(LIe," (ALBERT model)"),LIe.forEach(t),NBr=i(je),tC=n(je,"LI",{});var xIe=s(tC);uMe=n(xIe,"STRONG",{});var vAt=s(uMe);jBr=r(vAt,"bart"),vAt.forEach(t),DBr=r(xIe," \u2014 "),eK=n(xIe,"A",{href:!0});var FAt=s(eK);GBr=r(FAt,"FlaxBartForQuestionAnswering"),FAt.forEach(t),OBr=r(xIe," (BART model)"),xIe.forEach(t),VBr=i(je),aC=n(je,"LI",{});var $Ie=s(aC);bMe=n($Ie,"STRONG",{});var TAt=s(bMe);XBr=r(TAt,"bert"),TAt.forEach(t),zBr=r($Ie," \u2014 "),oK=n($Ie,"A",{href:!0});var MAt=s(oK);WBr=r(MAt,"FlaxBertForQuestionAnswering"),MAt.forEach(t),QBr=r($Ie," (BERT model)"),$Ie.forEach(t),HBr=i(je),nC=n(je,"LI",{});var kIe=s(nC);vMe=n(kIe,"STRONG",{});var EAt=s(vMe);UBr=r(EAt,"big_bird"),EAt.forEach(t),JBr=r(kIe," \u2014 "),rK=n(kIe,"A",{href:!0});var CAt=s(rK);YBr=r(CAt,"FlaxBigBirdForQuestionAnswering"),CAt.forEach(t),KBr=r(kIe," (BigBird model)"),kIe.forEach(t),ZBr=i(je),sC=n(je,"LI",{});var SIe=s(sC);FMe=n(SIe,"STRONG",{});var wAt=s(FMe);eIr=r(wAt,"distilbert"),wAt.forEach(t),oIr=r(SIe," \u2014 "),tK=n(SIe,"A",{href:!0});var AAt=s(tK);rIr=r(AAt,"FlaxDistilBertForQuestionAnswering"),AAt.forEach(t),tIr=r(SIe," (DistilBERT model)"),SIe.forEach(t),aIr=i(je),lC=n(je,"LI",{});var RIe=s(lC);TMe=n(RIe,"STRONG",{});var yAt=s(TMe);nIr=r(yAt,"electra"),yAt.forEach(t),sIr=r(RIe," \u2014 "),aK=n(RIe,"A",{href:!0});var LAt=s(aK);lIr=r(LAt,"FlaxElectraForQuestionAnswering"),LAt.forEach(t),iIr=r(RIe," (ELECTRA model)"),RIe.forEach(t),dIr=i(je),iC=n(je,"LI",{});var PIe=s(iC);MMe=n(PIe,"STRONG",{});var xAt=s(MMe);cIr=r(xAt,"mbart"),xAt.forEach(t),fIr=r(PIe," \u2014 "),nK=n(PIe,"A",{href:!0});var $At=s(nK);mIr=r($At,"FlaxMBartForQuestionAnswering"),$At.forEach(t),gIr=r(PIe," (mBART model)"),PIe.forEach(t),hIr=i(je),dC=n(je,"LI",{});var BIe=s(dC);EMe=n(BIe,"STRONG",{});var kAt=s(EMe);pIr=r(kAt,"roberta"),kAt.forEach(t),_Ir=r(BIe," \u2014 "),sK=n(BIe,"A",{href:!0});var SAt=s(sK);uIr=r(SAt,"FlaxRobertaForQuestionAnswering"),SAt.forEach(t),bIr=r(BIe," (RoBERTa model)"),BIe.forEach(t),vIr=i(je),cC=n(je,"LI",{});var IIe=s(cC);CMe=n(IIe,"STRONG",{});var RAt=s(CMe);FIr=r(RAt,"roformer"),RAt.forEach(t),TIr=r(IIe," \u2014 "),lK=n(IIe,"A",{href:!0});var PAt=s(lK);MIr=r(PAt,"FlaxRoFormerForQuestionAnswering"),PAt.forEach(t),EIr=r(IIe," (RoFormer model)"),IIe.forEach(t),CIr=i(je),fC=n(je,"LI",{});var qIe=s(fC);wMe=n(qIe,"STRONG",{});var BAt=s(wMe);wIr=r(BAt,"xlm-roberta"),BAt.forEach(t),AIr=r(qIe," \u2014 "),iK=n(qIe,"A",{href:!0});var IAt=s(iK);yIr=r(IAt,"FlaxXLMRobertaForQuestionAnswering"),IAt.forEach(t),LIr=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),je.forEach(t),xIr=i(ei),T(mC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),YNe=i(f),Jc=n(f,"H2",{class:!0});var aGe=s(Jc);gC=n(aGe,"A",{id:!0,class:!0,href:!0});var qAt=s(gC);AMe=n(qAt,"SPAN",{});var NAt=s(AMe);T(H8.$$.fragment,NAt),NAt.forEach(t),qAt.forEach(t),$Ir=i(aGe),yMe=n(aGe,"SPAN",{});var jAt=s(yMe);kIr=r(jAt,"FlaxAutoModelForTokenClassification"),jAt.forEach(t),aGe.forEach(t),KNe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(U8.$$.fragment,oi),SIr=i(oi),Yc=n(oi,"P",{});var Aee=s(Yc);RIr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dK=n(Aee,"A",{href:!0});var DAt=s(dK);PIr=r(DAt,"from_pretrained()"),DAt.forEach(t),BIr=r(Aee," class method or the "),cK=n(Aee,"A",{href:!0});var GAt=s(cK);IIr=r(GAt,"from_config()"),GAt.forEach(t),qIr=r(Aee,` class
method.`),Aee.forEach(t),NIr=i(oi),J8=n(oi,"P",{});var nGe=s(J8);jIr=r(nGe,"This class cannot be instantiated directly using "),LMe=n(nGe,"CODE",{});var OAt=s(LMe);DIr=r(OAt,"__init__()"),OAt.forEach(t),GIr=r(nGe," (throws an error)."),nGe.forEach(t),OIr=i(oi),Ht=n(oi,"DIV",{class:!0});var o0=s(Ht);T(Y8.$$.fragment,o0),VIr=i(o0),xMe=n(o0,"P",{});var VAt=s(xMe);XIr=r(VAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VAt.forEach(t),zIr=i(o0),Kc=n(o0,"P",{});var yee=s(Kc);WIr=r(yee,`Note:
Loading a model from its configuration file does `),$Me=n(yee,"STRONG",{});var XAt=s($Me);QIr=r(XAt,"not"),XAt.forEach(t),HIr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(yee,"A",{href:!0});var zAt=s(fK);UIr=r(zAt,"from_pretrained()"),zAt.forEach(t),JIr=r(yee," to load the model weights."),yee.forEach(t),YIr=i(o0),T(hC.$$.fragment,o0),o0.forEach(t),KIr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(K8.$$.fragment,ri),ZIr=i(ri),kMe=n(ri,"P",{});var WAt=s(kMe);eqr=r(WAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WAt.forEach(t),oqr=i(ri),Tn=n(ri,"P",{});var r0=s(Tn);rqr=r(r0,"The model class to instantiate is selected based on the "),SMe=n(r0,"CODE",{});var QAt=s(SMe);tqr=r(QAt,"model_type"),QAt.forEach(t),aqr=r(r0,` property of the config object (either
passed as an argument or loaded from `),RMe=n(r0,"CODE",{});var HAt=s(RMe);nqr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),sqr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(r0,"CODE",{});var UAt=s(PMe);lqr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),iqr=r(r0,":"),r0.forEach(t),dqr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);pC=n(Fo,"LI",{});var NIe=s(pC);BMe=n(NIe,"STRONG",{});var JAt=s(BMe);cqr=r(JAt,"albert"),JAt.forEach(t),fqr=r(NIe," \u2014 "),mK=n(NIe,"A",{href:!0});var YAt=s(mK);mqr=r(YAt,"FlaxAlbertForTokenClassification"),YAt.forEach(t),gqr=r(NIe," (ALBERT model)"),NIe.forEach(t),hqr=i(Fo),_C=n(Fo,"LI",{});var jIe=s(_C);IMe=n(jIe,"STRONG",{});var KAt=s(IMe);pqr=r(KAt,"bert"),KAt.forEach(t),_qr=r(jIe," \u2014 "),gK=n(jIe,"A",{href:!0});var ZAt=s(gK);uqr=r(ZAt,"FlaxBertForTokenClassification"),ZAt.forEach(t),bqr=r(jIe," (BERT model)"),jIe.forEach(t),vqr=i(Fo),uC=n(Fo,"LI",{});var DIe=s(uC);qMe=n(DIe,"STRONG",{});var eyt=s(qMe);Fqr=r(eyt,"big_bird"),eyt.forEach(t),Tqr=r(DIe," \u2014 "),hK=n(DIe,"A",{href:!0});var oyt=s(hK);Mqr=r(oyt,"FlaxBigBirdForTokenClassification"),oyt.forEach(t),Eqr=r(DIe," (BigBird model)"),DIe.forEach(t),Cqr=i(Fo),bC=n(Fo,"LI",{});var GIe=s(bC);NMe=n(GIe,"STRONG",{});var ryt=s(NMe);wqr=r(ryt,"distilbert"),ryt.forEach(t),Aqr=r(GIe," \u2014 "),pK=n(GIe,"A",{href:!0});var tyt=s(pK);yqr=r(tyt,"FlaxDistilBertForTokenClassification"),tyt.forEach(t),Lqr=r(GIe," (DistilBERT model)"),GIe.forEach(t),xqr=i(Fo),vC=n(Fo,"LI",{});var OIe=s(vC);jMe=n(OIe,"STRONG",{});var ayt=s(jMe);$qr=r(ayt,"electra"),ayt.forEach(t),kqr=r(OIe," \u2014 "),_K=n(OIe,"A",{href:!0});var nyt=s(_K);Sqr=r(nyt,"FlaxElectraForTokenClassification"),nyt.forEach(t),Rqr=r(OIe," (ELECTRA model)"),OIe.forEach(t),Pqr=i(Fo),FC=n(Fo,"LI",{});var VIe=s(FC);DMe=n(VIe,"STRONG",{});var syt=s(DMe);Bqr=r(syt,"roberta"),syt.forEach(t),Iqr=r(VIe," \u2014 "),uK=n(VIe,"A",{href:!0});var lyt=s(uK);qqr=r(lyt,"FlaxRobertaForTokenClassification"),lyt.forEach(t),Nqr=r(VIe," (RoBERTa model)"),VIe.forEach(t),jqr=i(Fo),TC=n(Fo,"LI",{});var XIe=s(TC);GMe=n(XIe,"STRONG",{});var iyt=s(GMe);Dqr=r(iyt,"roformer"),iyt.forEach(t),Gqr=r(XIe," \u2014 "),bK=n(XIe,"A",{href:!0});var dyt=s(bK);Oqr=r(dyt,"FlaxRoFormerForTokenClassification"),dyt.forEach(t),Vqr=r(XIe," (RoFormer model)"),XIe.forEach(t),Xqr=i(Fo),MC=n(Fo,"LI",{});var zIe=s(MC);OMe=n(zIe,"STRONG",{});var cyt=s(OMe);zqr=r(cyt,"xlm-roberta"),cyt.forEach(t),Wqr=r(zIe," \u2014 "),vK=n(zIe,"A",{href:!0});var fyt=s(vK);Qqr=r(fyt,"FlaxXLMRobertaForTokenClassification"),fyt.forEach(t),Hqr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),Fo.forEach(t),Uqr=i(ri),T(EC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),ZNe=i(f),Zc=n(f,"H2",{class:!0});var sGe=s(Zc);CC=n(sGe,"A",{id:!0,class:!0,href:!0});var myt=s(CC);VMe=n(myt,"SPAN",{});var gyt=s(VMe);T(Z8.$$.fragment,gyt),gyt.forEach(t),myt.forEach(t),Jqr=i(sGe),XMe=n(sGe,"SPAN",{});var hyt=s(XMe);Yqr=r(hyt,"FlaxAutoModelForMultipleChoice"),hyt.forEach(t),sGe.forEach(t),eje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ex.$$.fragment,ti),Kqr=i(ti),ef=n(ti,"P",{});var Lee=s(ef);Zqr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FK=n(Lee,"A",{href:!0});var pyt=s(FK);eNr=r(pyt,"from_pretrained()"),pyt.forEach(t),oNr=r(Lee," class method or the "),TK=n(Lee,"A",{href:!0});var _yt=s(TK);rNr=r(_yt,"from_config()"),_yt.forEach(t),tNr=r(Lee,` class
method.`),Lee.forEach(t),aNr=i(ti),ox=n(ti,"P",{});var lGe=s(ox);nNr=r(lGe,"This class cannot be instantiated directly using "),zMe=n(lGe,"CODE",{});var uyt=s(zMe);sNr=r(uyt,"__init__()"),uyt.forEach(t),lNr=r(lGe," (throws an error)."),lGe.forEach(t),iNr=i(ti),Ut=n(ti,"DIV",{class:!0});var t0=s(Ut);T(rx.$$.fragment,t0),dNr=i(t0),WMe=n(t0,"P",{});var byt=s(WMe);cNr=r(byt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),byt.forEach(t),fNr=i(t0),of=n(t0,"P",{});var xee=s(of);mNr=r(xee,`Note:
Loading a model from its configuration file does `),QMe=n(xee,"STRONG",{});var vyt=s(QMe);gNr=r(vyt,"not"),vyt.forEach(t),hNr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(xee,"A",{href:!0});var Fyt=s(MK);pNr=r(Fyt,"from_pretrained()"),Fyt.forEach(t),_Nr=r(xee," to load the model weights."),xee.forEach(t),uNr=i(t0),T(wC.$$.fragment,t0),t0.forEach(t),bNr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(tx.$$.fragment,ai),vNr=i(ai),HMe=n(ai,"P",{});var Tyt=s(HMe);FNr=r(Tyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tyt.forEach(t),TNr=i(ai),Mn=n(ai,"P",{});var a0=s(Mn);MNr=r(a0,"The model class to instantiate is selected based on the "),UMe=n(a0,"CODE",{});var Myt=s(UMe);ENr=r(Myt,"model_type"),Myt.forEach(t),CNr=r(a0,` property of the config object (either
passed as an argument or loaded from `),JMe=n(a0,"CODE",{});var Eyt=s(JMe);wNr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),ANr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(a0,"CODE",{});var Cyt=s(YMe);yNr=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),LNr=r(a0,":"),a0.forEach(t),xNr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);AC=n(To,"LI",{});var WIe=s(AC);KMe=n(WIe,"STRONG",{});var wyt=s(KMe);$Nr=r(wyt,"albert"),wyt.forEach(t),kNr=r(WIe," \u2014 "),EK=n(WIe,"A",{href:!0});var Ayt=s(EK);SNr=r(Ayt,"FlaxAlbertForMultipleChoice"),Ayt.forEach(t),RNr=r(WIe," (ALBERT model)"),WIe.forEach(t),PNr=i(To),yC=n(To,"LI",{});var QIe=s(yC);ZMe=n(QIe,"STRONG",{});var yyt=s(ZMe);BNr=r(yyt,"bert"),yyt.forEach(t),INr=r(QIe," \u2014 "),CK=n(QIe,"A",{href:!0});var Lyt=s(CK);qNr=r(Lyt,"FlaxBertForMultipleChoice"),Lyt.forEach(t),NNr=r(QIe," (BERT model)"),QIe.forEach(t),jNr=i(To),LC=n(To,"LI",{});var HIe=s(LC);e4e=n(HIe,"STRONG",{});var xyt=s(e4e);DNr=r(xyt,"big_bird"),xyt.forEach(t),GNr=r(HIe," \u2014 "),wK=n(HIe,"A",{href:!0});var $yt=s(wK);ONr=r($yt,"FlaxBigBirdForMultipleChoice"),$yt.forEach(t),VNr=r(HIe," (BigBird model)"),HIe.forEach(t),XNr=i(To),xC=n(To,"LI",{});var UIe=s(xC);o4e=n(UIe,"STRONG",{});var kyt=s(o4e);zNr=r(kyt,"distilbert"),kyt.forEach(t),WNr=r(UIe," \u2014 "),AK=n(UIe,"A",{href:!0});var Syt=s(AK);QNr=r(Syt,"FlaxDistilBertForMultipleChoice"),Syt.forEach(t),HNr=r(UIe," (DistilBERT model)"),UIe.forEach(t),UNr=i(To),$C=n(To,"LI",{});var JIe=s($C);r4e=n(JIe,"STRONG",{});var Ryt=s(r4e);JNr=r(Ryt,"electra"),Ryt.forEach(t),YNr=r(JIe," \u2014 "),yK=n(JIe,"A",{href:!0});var Pyt=s(yK);KNr=r(Pyt,"FlaxElectraForMultipleChoice"),Pyt.forEach(t),ZNr=r(JIe," (ELECTRA model)"),JIe.forEach(t),ejr=i(To),kC=n(To,"LI",{});var YIe=s(kC);t4e=n(YIe,"STRONG",{});var Byt=s(t4e);ojr=r(Byt,"roberta"),Byt.forEach(t),rjr=r(YIe," \u2014 "),LK=n(YIe,"A",{href:!0});var Iyt=s(LK);tjr=r(Iyt,"FlaxRobertaForMultipleChoice"),Iyt.forEach(t),ajr=r(YIe," (RoBERTa model)"),YIe.forEach(t),njr=i(To),SC=n(To,"LI",{});var KIe=s(SC);a4e=n(KIe,"STRONG",{});var qyt=s(a4e);sjr=r(qyt,"roformer"),qyt.forEach(t),ljr=r(KIe," \u2014 "),xK=n(KIe,"A",{href:!0});var Nyt=s(xK);ijr=r(Nyt,"FlaxRoFormerForMultipleChoice"),Nyt.forEach(t),djr=r(KIe," (RoFormer model)"),KIe.forEach(t),cjr=i(To),RC=n(To,"LI",{});var ZIe=s(RC);n4e=n(ZIe,"STRONG",{});var jyt=s(n4e);fjr=r(jyt,"xlm-roberta"),jyt.forEach(t),mjr=r(ZIe," \u2014 "),$K=n(ZIe,"A",{href:!0});var Dyt=s($K);gjr=r(Dyt,"FlaxXLMRobertaForMultipleChoice"),Dyt.forEach(t),hjr=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),To.forEach(t),pjr=i(ai),T(PC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),oje=i(f),rf=n(f,"H2",{class:!0});var iGe=s(rf);BC=n(iGe,"A",{id:!0,class:!0,href:!0});var Gyt=s(BC);s4e=n(Gyt,"SPAN",{});var Oyt=s(s4e);T(ax.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),_jr=i(iGe),l4e=n(iGe,"SPAN",{});var Vyt=s(l4e);ujr=r(Vyt,"FlaxAutoModelForNextSentencePrediction"),Vyt.forEach(t),iGe.forEach(t),rje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(nx.$$.fragment,ni),bjr=i(ni),tf=n(ni,"P",{});var $ee=s(tf);vjr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n($ee,"A",{href:!0});var Xyt=s(kK);Fjr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Tjr=r($ee," class method or the "),SK=n($ee,"A",{href:!0});var zyt=s(SK);Mjr=r(zyt,"from_config()"),zyt.forEach(t),Ejr=r($ee,` class
method.`),$ee.forEach(t),Cjr=i(ni),sx=n(ni,"P",{});var dGe=s(sx);wjr=r(dGe,"This class cannot be instantiated directly using "),i4e=n(dGe,"CODE",{});var Wyt=s(i4e);Ajr=r(Wyt,"__init__()"),Wyt.forEach(t),yjr=r(dGe," (throws an error)."),dGe.forEach(t),Ljr=i(ni),Jt=n(ni,"DIV",{class:!0});var n0=s(Jt);T(lx.$$.fragment,n0),xjr=i(n0),d4e=n(n0,"P",{});var Qyt=s(d4e);$jr=r(Qyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qyt.forEach(t),kjr=i(n0),af=n(n0,"P",{});var kee=s(af);Sjr=r(kee,`Note:
Loading a model from its configuration file does `),c4e=n(kee,"STRONG",{});var Hyt=s(c4e);Rjr=r(Hyt,"not"),Hyt.forEach(t),Pjr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(kee,"A",{href:!0});var Uyt=s(RK);Bjr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),Ijr=r(kee," to load the model weights."),kee.forEach(t),qjr=i(n0),T(IC.$$.fragment,n0),n0.forEach(t),Njr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(ix.$$.fragment,si),jjr=i(si),f4e=n(si,"P",{});var Jyt=s(f4e);Djr=r(Jyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jyt.forEach(t),Gjr=i(si),En=n(si,"P",{});var s0=s(En);Ojr=r(s0,"The model class to instantiate is selected based on the "),m4e=n(s0,"CODE",{});var Yyt=s(m4e);Vjr=r(Yyt,"model_type"),Yyt.forEach(t),Xjr=r(s0,` property of the config object (either
passed as an argument or loaded from `),g4e=n(s0,"CODE",{});var Kyt=s(g4e);zjr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),Wjr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(s0,"CODE",{});var Zyt=s(h4e);Qjr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),Hjr=r(s0,":"),s0.forEach(t),Ujr=i(si),p4e=n(si,"UL",{});var eLt=s(p4e);qC=n(eLt,"LI",{});var eqe=s(qC);_4e=n(eqe,"STRONG",{});var oLt=s(_4e);Jjr=r(oLt,"bert"),oLt.forEach(t),Yjr=r(eqe," \u2014 "),PK=n(eqe,"A",{href:!0});var rLt=s(PK);Kjr=r(rLt,"FlaxBertForNextSentencePrediction"),rLt.forEach(t),Zjr=r(eqe," (BERT model)"),eqe.forEach(t),eLt.forEach(t),eDr=i(si),T(NC.$$.fragment,si),si.forEach(t),ni.forEach(t),tje=i(f),nf=n(f,"H2",{class:!0});var cGe=s(nf);jC=n(cGe,"A",{id:!0,class:!0,href:!0});var tLt=s(jC);u4e=n(tLt,"SPAN",{});var aLt=s(u4e);T(dx.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),oDr=i(cGe),b4e=n(cGe,"SPAN",{});var nLt=s(b4e);rDr=r(nLt,"FlaxAutoModelForImageClassification"),nLt.forEach(t),cGe.forEach(t),aje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(cx.$$.fragment,li),tDr=i(li),sf=n(li,"P",{});var See=s(sf);aDr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BK=n(See,"A",{href:!0});var sLt=s(BK);nDr=r(sLt,"from_pretrained()"),sLt.forEach(t),sDr=r(See," class method or the "),IK=n(See,"A",{href:!0});var lLt=s(IK);lDr=r(lLt,"from_config()"),lLt.forEach(t),iDr=r(See,` class
method.`),See.forEach(t),dDr=i(li),fx=n(li,"P",{});var fGe=s(fx);cDr=r(fGe,"This class cannot be instantiated directly using "),v4e=n(fGe,"CODE",{});var iLt=s(v4e);fDr=r(iLt,"__init__()"),iLt.forEach(t),mDr=r(fGe," (throws an error)."),fGe.forEach(t),gDr=i(li),Yt=n(li,"DIV",{class:!0});var l0=s(Yt);T(mx.$$.fragment,l0),hDr=i(l0),F4e=n(l0,"P",{});var dLt=s(F4e);pDr=r(dLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dLt.forEach(t),_Dr=i(l0),lf=n(l0,"P",{});var Ree=s(lf);uDr=r(Ree,`Note:
Loading a model from its configuration file does `),T4e=n(Ree,"STRONG",{});var cLt=s(T4e);bDr=r(cLt,"not"),cLt.forEach(t),vDr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Ree,"A",{href:!0});var fLt=s(qK);FDr=r(fLt,"from_pretrained()"),fLt.forEach(t),TDr=r(Ree," to load the model weights."),Ree.forEach(t),MDr=i(l0),T(DC.$$.fragment,l0),l0.forEach(t),EDr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(gx.$$.fragment,ii),CDr=i(ii),M4e=n(ii,"P",{});var mLt=s(M4e);wDr=r(mLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mLt.forEach(t),ADr=i(ii),Cn=n(ii,"P",{});var i0=s(Cn);yDr=r(i0,"The model class to instantiate is selected based on the "),E4e=n(i0,"CODE",{});var gLt=s(E4e);LDr=r(gLt,"model_type"),gLt.forEach(t),xDr=r(i0,` property of the config object (either
passed as an argument or loaded from `),C4e=n(i0,"CODE",{});var hLt=s(C4e);$Dr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),kDr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(i0,"CODE",{});var pLt=s(w4e);SDr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),RDr=r(i0,":"),i0.forEach(t),PDr=i(ii),hx=n(ii,"UL",{});var mGe=s(hx);GC=n(mGe,"LI",{});var oqe=s(GC);A4e=n(oqe,"STRONG",{});var _Lt=s(A4e);BDr=r(_Lt,"beit"),_Lt.forEach(t),IDr=r(oqe," \u2014 "),NK=n(oqe,"A",{href:!0});var uLt=s(NK);qDr=r(uLt,"FlaxBeitForImageClassification"),uLt.forEach(t),NDr=r(oqe," (BEiT model)"),oqe.forEach(t),jDr=i(mGe),OC=n(mGe,"LI",{});var rqe=s(OC);y4e=n(rqe,"STRONG",{});var bLt=s(y4e);DDr=r(bLt,"vit"),bLt.forEach(t),GDr=r(rqe," \u2014 "),jK=n(rqe,"A",{href:!0});var vLt=s(jK);ODr=r(vLt,"FlaxViTForImageClassification"),vLt.forEach(t),VDr=r(rqe," (ViT model)"),rqe.forEach(t),mGe.forEach(t),XDr=i(ii),T(VC.$$.fragment,ii),ii.forEach(t),li.forEach(t),nje=i(f),df=n(f,"H2",{class:!0});var gGe=s(df);XC=n(gGe,"A",{id:!0,class:!0,href:!0});var FLt=s(XC);L4e=n(FLt,"SPAN",{});var TLt=s(L4e);T(px.$$.fragment,TLt),TLt.forEach(t),FLt.forEach(t),zDr=i(gGe),x4e=n(gGe,"SPAN",{});var MLt=s(x4e);WDr=r(MLt,"FlaxAutoModelForVision2Seq"),MLt.forEach(t),gGe.forEach(t),sje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(_x.$$.fragment,di),QDr=i(di),cf=n(di,"P",{});var Pee=s(cf);HDr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=n(Pee,"A",{href:!0});var ELt=s(DK);UDr=r(ELt,"from_pretrained()"),ELt.forEach(t),JDr=r(Pee," class method or the "),GK=n(Pee,"A",{href:!0});var CLt=s(GK);YDr=r(CLt,"from_config()"),CLt.forEach(t),KDr=r(Pee,` class
method.`),Pee.forEach(t),ZDr=i(di),ux=n(di,"P",{});var hGe=s(ux);eGr=r(hGe,"This class cannot be instantiated directly using "),$4e=n(hGe,"CODE",{});var wLt=s($4e);oGr=r(wLt,"__init__()"),wLt.forEach(t),rGr=r(hGe," (throws an error)."),hGe.forEach(t),tGr=i(di),Kt=n(di,"DIV",{class:!0});var d0=s(Kt);T(bx.$$.fragment,d0),aGr=i(d0),k4e=n(d0,"P",{});var ALt=s(k4e);nGr=r(ALt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ALt.forEach(t),sGr=i(d0),ff=n(d0,"P",{});var Bee=s(ff);lGr=r(Bee,`Note:
Loading a model from its configuration file does `),S4e=n(Bee,"STRONG",{});var yLt=s(S4e);iGr=r(yLt,"not"),yLt.forEach(t),dGr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Bee,"A",{href:!0});var LLt=s(OK);cGr=r(LLt,"from_pretrained()"),LLt.forEach(t),fGr=r(Bee," to load the model weights."),Bee.forEach(t),mGr=i(d0),T(zC.$$.fragment,d0),d0.forEach(t),gGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(vx.$$.fragment,ci),hGr=i(ci),R4e=n(ci,"P",{});var xLt=s(R4e);pGr=r(xLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xLt.forEach(t),_Gr=i(ci),wn=n(ci,"P",{});var c0=s(wn);uGr=r(c0,"The model class to instantiate is selected based on the "),P4e=n(c0,"CODE",{});var $Lt=s(P4e);bGr=r($Lt,"model_type"),$Lt.forEach(t),vGr=r(c0,` property of the config object (either
passed as an argument or loaded from `),B4e=n(c0,"CODE",{});var kLt=s(B4e);FGr=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),TGr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(c0,"CODE",{});var SLt=s(I4e);MGr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),EGr=r(c0,":"),c0.forEach(t),CGr=i(ci),q4e=n(ci,"UL",{});var RLt=s(q4e);WC=n(RLt,"LI",{});var tqe=s(WC);N4e=n(tqe,"STRONG",{});var PLt=s(N4e);wGr=r(PLt,"vision-encoder-decoder"),PLt.forEach(t),AGr=r(tqe," \u2014 "),VK=n(tqe,"A",{href:!0});var BLt=s(VK);yGr=r(BLt,"FlaxVisionEncoderDecoderModel"),BLt.forEach(t),LGr=r(tqe," (Vision Encoder decoder model)"),tqe.forEach(t),RLt.forEach(t),xGr=i(ci),T(QC.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(jxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(j$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(D$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(G$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(O$,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(V$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(X$,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(z$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(W$,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Q$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(H$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(U$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(J$,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(Y$,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(K$,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z$,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(ek,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(ok,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ak,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(nk,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoProcessor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"id","transformers.AutoModel"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForPreTraining"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nu,"id","transformers.AutoModelForCausalLM"),c(Nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForMaskedLM"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d1,"id","transformers.AutoModelForSeq2SeqLM"),c(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSequenceClassification"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForMultipleChoice"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForNextSentencePrediction"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForTokenClassification"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForQuestionAnswering"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForTableQuestionAnswering"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForImageClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForVision2Seq"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.AutoModelForAudioClassification"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForAudioFrameClassification"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.AutoModelForCTC"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K6,"id","transformers.AutoModelForAudioXVector"),c(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K6,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForMaskedImageModeling"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForObjectDetection"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForImageSegmentation"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForSemanticSegmentation"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForInstanceSegmentation"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModel"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForPreTraining"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a9,"id","transformers.TFAutoModelForCausalLM"),c(a9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a9,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v9,"id","transformers.TFAutoModelForImageClassification"),c(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v9,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A9,"id","transformers.TFAutoModelForMaskedLM"),c(A9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A9,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForSequenceClassification"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForMultipleChoice"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.TFAutoModelForTokenClassification"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.TFAutoModelForQuestionAnswering"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForVision2Seq"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.FlaxAutoModel"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForCausalLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.FlaxAutoModelForPreTraining"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModelForMaskedLM"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForTokenClassification"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForImageClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForVision2Seq"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,f0),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,m0),e(We,Ln),e(We,xn),e(xn,g0),e(We,pi),e(We,$n),e($n,h0),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,R$),e(Ae,ui),e(ui,P$),e(Ae,B$),b(f,Eo,u),b(f,wa,u),e(wa,I$),e(wa,bf),e(bf,q$),e(wa,pGe),b(f,aqe,u),b(f,bi,u),e(bi,vf),e(vf,Iee),M(p0,Iee,null),e(bi,_Ge),e(bi,qee),e(qee,uGe),b(f,nqe,u),b(f,kn,u),e(kn,bGe),e(kn,Nee),e(Nee,vGe),e(kn,FGe),e(kn,jee),e(jee,TGe),e(kn,MGe),b(f,sqe,u),M(_0,f,u),b(f,lqe,u),b(f,N$,u),e(N$,EGe),b(f,iqe,u),M(Ff,f,u),b(f,dqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Dee),M(u0,Dee,null),e(vi,CGe),e(vi,Gee),e(Gee,wGe),b(f,cqe,u),b(f,Co,u),M(b0,Co,null),e(Co,AGe),e(Co,v0),e(v0,yGe),e(v0,j$),e(j$,LGe),e(v0,xGe),e(Co,$Ge),e(Co,F0),e(F0,kGe),e(F0,Oee),e(Oee,SGe),e(F0,RGe),e(Co,PGe),e(Co,Er),M(T0,Er,null),e(Er,BGe),e(Er,Vee),e(Vee,IGe),e(Er,qGe),e(Er,Fi),e(Fi,NGe),e(Fi,Xee),e(Xee,jGe),e(Fi,DGe),e(Fi,zee),e(zee,GGe),e(Fi,OGe),e(Er,VGe),e(Er,A),e(A,Mf),e(Mf,Wee),e(Wee,XGe),e(Mf,zGe),e(Mf,D$),e(D$,WGe),e(Mf,QGe),e(A,HGe),e(A,Ef),e(Ef,Qee),e(Qee,UGe),e(Ef,JGe),e(Ef,G$),e(G$,YGe),e(Ef,KGe),e(A,ZGe),e(A,Cf),e(Cf,Hee),e(Hee,eOe),e(Cf,oOe),e(Cf,O$),e(O$,rOe),e(Cf,tOe),e(A,aOe),e(A,wf),e(wf,Uee),e(Uee,nOe),e(wf,sOe),e(wf,V$),e(V$,lOe),e(wf,iOe),e(A,dOe),e(A,Af),e(Af,Jee),e(Jee,cOe),e(Af,fOe),e(Af,X$),e(X$,mOe),e(Af,gOe),e(A,hOe),e(A,yf),e(yf,Yee),e(Yee,pOe),e(yf,_Oe),e(yf,z$),e(z$,uOe),e(yf,bOe),e(A,vOe),e(A,Lf),e(Lf,Kee),e(Kee,FOe),e(Lf,TOe),e(Lf,W$),e(W$,MOe),e(Lf,EOe),e(A,COe),e(A,xf),e(xf,Zee),e(Zee,wOe),e(xf,AOe),e(xf,Q$),e(Q$,yOe),e(xf,LOe),e(A,xOe),e(A,$f),e($f,eoe),e(eoe,$Oe),e($f,kOe),e($f,H$),e(H$,SOe),e($f,ROe),e(A,POe),e(A,kf),e(kf,ooe),e(ooe,BOe),e(kf,IOe),e(kf,U$),e(U$,qOe),e(kf,NOe),e(A,jOe),e(A,Sf),e(Sf,roe),e(roe,DOe),e(Sf,GOe),e(Sf,J$),e(J$,OOe),e(Sf,VOe),e(A,XOe),e(A,Rf),e(Rf,toe),e(toe,zOe),e(Rf,WOe),e(Rf,Y$),e(Y$,QOe),e(Rf,HOe),e(A,UOe),e(A,Pf),e(Pf,aoe),e(aoe,JOe),e(Pf,YOe),e(Pf,K$),e(K$,KOe),e(Pf,ZOe),e(A,eVe),e(A,Bf),e(Bf,noe),e(noe,oVe),e(Bf,rVe),e(Bf,Z$),e(Z$,tVe),e(Bf,aVe),e(A,nVe),e(A,If),e(If,soe),e(soe,sVe),e(If,lVe),e(If,ek),e(ek,iVe),e(If,dVe),e(A,cVe),e(A,qf),e(qf,loe),e(loe,fVe),e(qf,mVe),e(qf,ok),e(ok,gVe),e(qf,hVe),e(A,pVe),e(A,Nf),e(Nf,ioe),e(ioe,_Ve),e(Nf,uVe),e(Nf,rk),e(rk,bVe),e(Nf,vVe),e(A,FVe),e(A,jf),e(jf,doe),e(doe,TVe),e(jf,MVe),e(jf,tk),e(tk,EVe),e(jf,CVe),e(A,wVe),e(A,Df),e(Df,coe),e(coe,AVe),e(Df,yVe),e(Df,ak),e(ak,LVe),e(Df,xVe),e(A,$Ve),e(A,Gf),e(Gf,foe),e(foe,kVe),e(Gf,SVe),e(Gf,nk),e(nk,RVe),e(Gf,PVe),e(A,BVe),e(A,Of),e(Of,moe),e(moe,IVe),e(Of,qVe),e(Of,sk),e(sk,NVe),e(Of,jVe),e(A,DVe),e(A,Vf),e(Vf,goe),e(goe,GVe),e(Vf,OVe),e(Vf,lk),e(lk,VVe),e(Vf,XVe),e(A,zVe),e(A,Xf),e(Xf,hoe),e(hoe,WVe),e(Xf,QVe),e(Xf,ik),e(ik,HVe),e(Xf,UVe),e(A,JVe),e(A,zf),e(zf,poe),e(poe,YVe),e(zf,KVe),e(zf,dk),e(dk,ZVe),e(zf,eXe),e(A,oXe),e(A,Wf),e(Wf,_oe),e(_oe,rXe),e(Wf,tXe),e(Wf,ck),e(ck,aXe),e(Wf,nXe),e(A,sXe),e(A,Qf),e(Qf,uoe),e(uoe,lXe),e(Qf,iXe),e(Qf,fk),e(fk,dXe),e(Qf,cXe),e(A,fXe),e(A,Hf),e(Hf,boe),e(boe,mXe),e(Hf,gXe),e(Hf,mk),e(mk,hXe),e(Hf,pXe),e(A,_Xe),e(A,Uf),e(Uf,voe),e(voe,uXe),e(Uf,bXe),e(Uf,gk),e(gk,vXe),e(Uf,FXe),e(A,TXe),e(A,Jf),e(Jf,Foe),e(Foe,MXe),e(Jf,EXe),e(Jf,hk),e(hk,CXe),e(Jf,wXe),e(A,AXe),e(A,Yf),e(Yf,Toe),e(Toe,yXe),e(Yf,LXe),e(Yf,pk),e(pk,xXe),e(Yf,$Xe),e(A,kXe),e(A,Kf),e(Kf,Moe),e(Moe,SXe),e(Kf,RXe),e(Kf,_k),e(_k,PXe),e(Kf,BXe),e(A,IXe),e(A,Zf),e(Zf,Eoe),e(Eoe,qXe),e(Zf,NXe),e(Zf,uk),e(uk,jXe),e(Zf,DXe),e(A,GXe),e(A,em),e(em,Coe),e(Coe,OXe),e(em,VXe),e(em,bk),e(bk,XXe),e(em,zXe),e(A,WXe),e(A,om),e(om,woe),e(woe,QXe),e(om,HXe),e(om,vk),e(vk,UXe),e(om,JXe),e(A,YXe),e(A,rm),e(rm,Aoe),e(Aoe,KXe),e(rm,ZXe),e(rm,Fk),e(Fk,eze),e(rm,oze),e(A,rze),e(A,tm),e(tm,yoe),e(yoe,tze),e(tm,aze),e(tm,Tk),e(Tk,nze),e(tm,sze),e(A,lze),e(A,am),e(am,Loe),e(Loe,ize),e(am,dze),e(am,Mk),e(Mk,cze),e(am,fze),e(A,mze),e(A,nm),e(nm,xoe),e(xoe,gze),e(nm,hze),e(nm,Ek),e(Ek,pze),e(nm,_ze),e(A,uze),e(A,sm),e(sm,$oe),e($oe,bze),e(sm,vze),e(sm,Ck),e(Ck,Fze),e(sm,Tze),e(A,Mze),e(A,lm),e(lm,koe),e(koe,Eze),e(lm,Cze),e(lm,wk),e(wk,wze),e(lm,Aze),e(A,yze),e(A,im),e(im,Soe),e(Soe,Lze),e(im,xze),e(im,Ak),e(Ak,$ze),e(im,kze),e(A,Sze),e(A,dm),e(dm,Roe),e(Roe,Rze),e(dm,Pze),e(dm,yk),e(yk,Bze),e(dm,Ize),e(A,qze),e(A,cm),e(cm,Poe),e(Poe,Nze),e(cm,jze),e(cm,Lk),e(Lk,Dze),e(cm,Gze),e(A,Oze),e(A,fm),e(fm,Boe),e(Boe,Vze),e(fm,Xze),e(fm,xk),e(xk,zze),e(fm,Wze),e(A,Qze),e(A,mm),e(mm,Ioe),e(Ioe,Hze),e(mm,Uze),e(mm,$k),e($k,Jze),e(mm,Yze),e(A,Kze),e(A,gm),e(gm,qoe),e(qoe,Zze),e(gm,eWe),e(gm,kk),e(kk,oWe),e(gm,rWe),e(A,tWe),e(A,hm),e(hm,Noe),e(Noe,aWe),e(hm,nWe),e(hm,Sk),e(Sk,sWe),e(hm,lWe),e(A,iWe),e(A,pm),e(pm,joe),e(joe,dWe),e(pm,cWe),e(pm,Rk),e(Rk,fWe),e(pm,mWe),e(A,gWe),e(A,_m),e(_m,Doe),e(Doe,hWe),e(_m,pWe),e(_m,Pk),e(Pk,_We),e(_m,uWe),e(A,bWe),e(A,um),e(um,Goe),e(Goe,vWe),e(um,FWe),e(um,Bk),e(Bk,TWe),e(um,MWe),e(A,EWe),e(A,bm),e(bm,Ooe),e(Ooe,CWe),e(bm,wWe),e(bm,Ik),e(Ik,AWe),e(bm,yWe),e(A,LWe),e(A,vm),e(vm,Voe),e(Voe,xWe),e(vm,$We),e(vm,qk),e(qk,kWe),e(vm,SWe),e(A,RWe),e(A,Fm),e(Fm,Xoe),e(Xoe,PWe),e(Fm,BWe),e(Fm,Nk),e(Nk,IWe),e(Fm,qWe),e(A,NWe),e(A,Tm),e(Tm,zoe),e(zoe,jWe),e(Tm,DWe),e(Tm,jk),e(jk,GWe),e(Tm,OWe),e(A,VWe),e(A,Mm),e(Mm,Woe),e(Woe,XWe),e(Mm,zWe),e(Mm,Dk),e(Dk,WWe),e(Mm,QWe),e(A,HWe),e(A,Em),e(Em,Qoe),e(Qoe,UWe),e(Em,JWe),e(Em,Gk),e(Gk,YWe),e(Em,KWe),e(A,ZWe),e(A,Cm),e(Cm,Hoe),e(Hoe,eQe),e(Cm,oQe),e(Cm,Ok),e(Ok,rQe),e(Cm,tQe),e(A,aQe),e(A,wm),e(wm,Uoe),e(Uoe,nQe),e(wm,sQe),e(wm,Vk),e(Vk,lQe),e(wm,iQe),e(A,dQe),e(A,Am),e(Am,Joe),e(Joe,cQe),e(Am,fQe),e(Am,Xk),e(Xk,mQe),e(Am,gQe),e(A,hQe),e(A,ym),e(ym,Yoe),e(Yoe,pQe),e(ym,_Qe),e(ym,zk),e(zk,uQe),e(ym,bQe),e(A,vQe),e(A,Lm),e(Lm,Koe),e(Koe,FQe),e(Lm,TQe),e(Lm,Wk),e(Wk,MQe),e(Lm,EQe),e(A,CQe),e(A,xm),e(xm,Zoe),e(Zoe,wQe),e(xm,AQe),e(xm,Qk),e(Qk,yQe),e(xm,LQe),e(A,xQe),e(A,$m),e($m,ere),e(ere,$Qe),e($m,kQe),e($m,Hk),e(Hk,SQe),e($m,RQe),e(A,PQe),e(A,km),e(km,ore),e(ore,BQe),e(km,IQe),e(km,Uk),e(Uk,qQe),e(km,NQe),e(A,jQe),e(A,Sm),e(Sm,rre),e(rre,DQe),e(Sm,GQe),e(Sm,Jk),e(Jk,OQe),e(Sm,VQe),e(A,XQe),e(A,Rm),e(Rm,tre),e(tre,zQe),e(Rm,WQe),e(Rm,Yk),e(Yk,QQe),e(Rm,HQe),e(A,UQe),e(A,Pm),e(Pm,are),e(are,JQe),e(Pm,YQe),e(Pm,Kk),e(Kk,KQe),e(Pm,ZQe),e(A,eHe),e(A,Bm),e(Bm,nre),e(nre,oHe),e(Bm,rHe),e(Bm,Zk),e(Zk,tHe),e(Bm,aHe),e(A,nHe),e(A,Im),e(Im,sre),e(sre,sHe),e(Im,lHe),e(Im,eS),e(eS,iHe),e(Im,dHe),e(A,cHe),e(A,qm),e(qm,lre),e(lre,fHe),e(qm,mHe),e(qm,oS),e(oS,gHe),e(qm,hHe),e(A,pHe),e(A,Nm),e(Nm,ire),e(ire,_He),e(Nm,uHe),e(Nm,rS),e(rS,bHe),e(Nm,vHe),e(A,FHe),e(A,jm),e(jm,dre),e(dre,THe),e(jm,MHe),e(jm,tS),e(tS,EHe),e(jm,CHe),e(A,wHe),e(A,Dm),e(Dm,cre),e(cre,AHe),e(Dm,yHe),e(Dm,aS),e(aS,LHe),e(Dm,xHe),e(A,$He),e(A,Gm),e(Gm,fre),e(fre,kHe),e(Gm,SHe),e(Gm,nS),e(nS,RHe),e(Gm,PHe),e(A,BHe),e(A,Om),e(Om,mre),e(mre,IHe),e(Om,qHe),e(Om,sS),e(sS,NHe),e(Om,jHe),e(A,DHe),e(A,Vm),e(Vm,gre),e(gre,GHe),e(Vm,OHe),e(Vm,lS),e(lS,VHe),e(Vm,XHe),e(A,zHe),e(A,Xm),e(Xm,hre),e(hre,WHe),e(Xm,QHe),e(Xm,iS),e(iS,HHe),e(Xm,UHe),e(A,JHe),e(A,zm),e(zm,pre),e(pre,YHe),e(zm,KHe),e(zm,dS),e(dS,ZHe),e(zm,eUe),e(A,oUe),e(A,Wm),e(Wm,_re),e(_re,rUe),e(Wm,tUe),e(Wm,cS),e(cS,aUe),e(Wm,nUe),e(A,sUe),e(A,Qm),e(Qm,ure),e(ure,lUe),e(Qm,iUe),e(Qm,fS),e(fS,dUe),e(Qm,cUe),e(A,fUe),e(A,Hm),e(Hm,bre),e(bre,mUe),e(Hm,gUe),e(Hm,mS),e(mS,hUe),e(Hm,pUe),e(A,_Ue),e(A,Um),e(Um,vre),e(vre,uUe),e(Um,bUe),e(Um,gS),e(gS,vUe),e(Um,FUe),e(A,TUe),e(A,Jm),e(Jm,Fre),e(Fre,MUe),e(Jm,EUe),e(Jm,hS),e(hS,CUe),e(Jm,wUe),e(A,AUe),e(A,Ym),e(Ym,Tre),e(Tre,yUe),e(Ym,LUe),e(Ym,pS),e(pS,xUe),e(Ym,$Ue),e(A,kUe),e(A,Km),e(Km,Mre),e(Mre,SUe),e(Km,RUe),e(Km,_S),e(_S,PUe),e(Km,BUe),e(A,IUe),e(A,Zm),e(Zm,Ere),e(Ere,qUe),e(Zm,NUe),e(Zm,uS),e(uS,jUe),e(Zm,DUe),e(A,GUe),e(A,eg),e(eg,Cre),e(Cre,OUe),e(eg,VUe),e(eg,bS),e(bS,XUe),e(eg,zUe),e(A,WUe),e(A,og),e(og,wre),e(wre,QUe),e(og,HUe),e(og,vS),e(vS,UUe),e(og,JUe),e(A,YUe),e(A,rg),e(rg,Are),e(Are,KUe),e(rg,ZUe),e(rg,FS),e(FS,eJe),e(rg,oJe),e(A,rJe),e(A,tg),e(tg,yre),e(yre,tJe),e(tg,aJe),e(tg,TS),e(TS,nJe),e(tg,sJe),e(A,lJe),e(A,ag),e(ag,Lre),e(Lre,iJe),e(ag,dJe),e(ag,MS),e(MS,cJe),e(ag,fJe),e(A,mJe),e(A,ng),e(ng,xre),e(xre,gJe),e(ng,hJe),e(ng,ES),e(ES,pJe),e(ng,_Je),e(A,uJe),e(A,sg),e(sg,$re),e($re,bJe),e(sg,vJe),e(sg,CS),e(CS,FJe),e(sg,TJe),e(A,MJe),e(A,lg),e(lg,kre),e(kre,EJe),e(lg,CJe),e(lg,wS),e(wS,wJe),e(lg,AJe),e(A,yJe),e(A,ig),e(ig,Sre),e(Sre,LJe),e(ig,xJe),e(ig,AS),e(AS,$Je),e(ig,kJe),e(A,SJe),e(A,dg),e(dg,Rre),e(Rre,RJe),e(dg,PJe),e(dg,yS),e(yS,BJe),e(dg,IJe),e(A,qJe),e(A,cg),e(cg,Pre),e(Pre,NJe),e(cg,jJe),e(cg,LS),e(LS,DJe),e(cg,GJe),e(A,OJe),e(A,fg),e(fg,Bre),e(Bre,VJe),e(fg,XJe),e(fg,xS),e(xS,zJe),e(fg,WJe),e(A,QJe),e(A,mg),e(mg,Ire),e(Ire,HJe),e(mg,UJe),e(mg,$S),e($S,JJe),e(mg,YJe),e(A,KJe),e(A,gg),e(gg,qre),e(qre,ZJe),e(gg,eYe),e(gg,kS),e(kS,oYe),e(gg,rYe),e(A,tYe),e(A,hg),e(hg,Nre),e(Nre,aYe),e(hg,nYe),e(hg,SS),e(SS,sYe),e(hg,lYe),e(A,iYe),e(A,pg),e(pg,jre),e(jre,dYe),e(pg,cYe),e(pg,RS),e(RS,fYe),e(pg,mYe),e(A,gYe),e(A,_g),e(_g,Dre),e(Dre,hYe),e(_g,pYe),e(_g,PS),e(PS,_Ye),e(_g,uYe),e(A,bYe),e(A,ug),e(ug,Gre),e(Gre,vYe),e(ug,FYe),e(ug,BS),e(BS,TYe),e(ug,MYe),e(A,EYe),e(A,bg),e(bg,Ore),e(Ore,CYe),e(bg,wYe),e(bg,IS),e(IS,AYe),e(bg,yYe),e(A,LYe),e(A,vg),e(vg,Vre),e(Vre,xYe),e(vg,$Ye),e(vg,qS),e(qS,kYe),e(vg,SYe),e(Er,RYe),M(Fg,Er,null),e(Co,PYe),e(Co,Tg),M(M0,Tg,null),e(Tg,BYe),e(Tg,Xre),e(Xre,IYe),b(f,fqe,u),b(f,Ti,u),e(Ti,Mg),e(Mg,zre),M(E0,zre,null),e(Ti,qYe),e(Ti,Wre),e(Wre,NYe),b(f,mqe,u),b(f,wo,u),M(C0,wo,null),e(wo,jYe),e(wo,w0),e(w0,DYe),e(w0,NS),e(NS,GYe),e(w0,OYe),e(wo,VYe),e(wo,A0),e(A0,XYe),e(A0,Qre),e(Qre,zYe),e(A0,WYe),e(wo,QYe),e(wo,Cr),M(y0,Cr,null),e(Cr,HYe),e(Cr,Hre),e(Hre,UYe),e(Cr,JYe),e(Cr,Aa),e(Aa,YYe),e(Aa,Ure),e(Ure,KYe),e(Aa,ZYe),e(Aa,Jre),e(Jre,eKe),e(Aa,oKe),e(Aa,Yre),e(Yre,rKe),e(Aa,tKe),e(Cr,aKe),e(Cr,k),e(k,Sn),e(Sn,Kre),e(Kre,nKe),e(Sn,sKe),e(Sn,jS),e(jS,lKe),e(Sn,iKe),e(Sn,DS),e(DS,dKe),e(Sn,cKe),e(k,fKe),e(k,Rn),e(Rn,Zre),e(Zre,mKe),e(Rn,gKe),e(Rn,GS),e(GS,hKe),e(Rn,pKe),e(Rn,OS),e(OS,_Ke),e(Rn,uKe),e(k,bKe),e(k,Pn),e(Pn,ete),e(ete,vKe),e(Pn,FKe),e(Pn,VS),e(VS,TKe),e(Pn,MKe),e(Pn,XS),e(XS,EKe),e(Pn,CKe),e(k,wKe),e(k,Eg),e(Eg,ote),e(ote,AKe),e(Eg,yKe),e(Eg,zS),e(zS,LKe),e(Eg,xKe),e(k,$Ke),e(k,Bn),e(Bn,rte),e(rte,kKe),e(Bn,SKe),e(Bn,WS),e(WS,RKe),e(Bn,PKe),e(Bn,QS),e(QS,BKe),e(Bn,IKe),e(k,qKe),e(k,Cg),e(Cg,tte),e(tte,NKe),e(Cg,jKe),e(Cg,HS),e(HS,DKe),e(Cg,GKe),e(k,OKe),e(k,wg),e(wg,ate),e(ate,VKe),e(wg,XKe),e(wg,US),e(US,zKe),e(wg,WKe),e(k,QKe),e(k,Ag),e(Ag,nte),e(nte,HKe),e(Ag,UKe),e(Ag,JS),e(JS,JKe),e(Ag,YKe),e(k,KKe),e(k,In),e(In,ste),e(ste,ZKe),e(In,eZe),e(In,YS),e(YS,oZe),e(In,rZe),e(In,KS),e(KS,tZe),e(In,aZe),e(k,nZe),e(k,qn),e(qn,lte),e(lte,sZe),e(qn,lZe),e(qn,ZS),e(ZS,iZe),e(qn,dZe),e(qn,eR),e(eR,cZe),e(qn,fZe),e(k,mZe),e(k,Nn),e(Nn,ite),e(ite,gZe),e(Nn,hZe),e(Nn,oR),e(oR,pZe),e(Nn,_Ze),e(Nn,rR),e(rR,uZe),e(Nn,bZe),e(k,vZe),e(k,yg),e(yg,dte),e(dte,FZe),e(yg,TZe),e(yg,tR),e(tR,MZe),e(yg,EZe),e(k,CZe),e(k,Lg),e(Lg,cte),e(cte,wZe),e(Lg,AZe),e(Lg,aR),e(aR,yZe),e(Lg,LZe),e(k,xZe),e(k,jn),e(jn,fte),e(fte,$Ze),e(jn,kZe),e(jn,nR),e(nR,SZe),e(jn,RZe),e(jn,sR),e(sR,PZe),e(jn,BZe),e(k,IZe),e(k,xg),e(xg,mte),e(mte,qZe),e(xg,NZe),e(xg,lR),e(lR,jZe),e(xg,DZe),e(k,GZe),e(k,Dn),e(Dn,gte),e(gte,OZe),e(Dn,VZe),e(Dn,iR),e(iR,XZe),e(Dn,zZe),e(Dn,dR),e(dR,WZe),e(Dn,QZe),e(k,HZe),e(k,Gn),e(Gn,hte),e(hte,UZe),e(Gn,JZe),e(Gn,cR),e(cR,YZe),e(Gn,KZe),e(Gn,fR),e(fR,ZZe),e(Gn,eeo),e(k,oeo),e(k,On),e(On,pte),e(pte,reo),e(On,teo),e(On,mR),e(mR,aeo),e(On,neo),e(On,gR),e(gR,seo),e(On,leo),e(k,ieo),e(k,$g),e($g,_te),e(_te,deo),e($g,ceo),e($g,hR),e(hR,feo),e($g,meo),e(k,geo),e(k,Vn),e(Vn,ute),e(ute,heo),e(Vn,peo),e(Vn,pR),e(pR,_eo),e(Vn,ueo),e(Vn,_R),e(_R,beo),e(Vn,veo),e(k,Feo),e(k,Xn),e(Xn,bte),e(bte,Teo),e(Xn,Meo),e(Xn,uR),e(uR,Eeo),e(Xn,Ceo),e(Xn,bR),e(bR,weo),e(Xn,Aeo),e(k,yeo),e(k,zn),e(zn,vte),e(vte,Leo),e(zn,xeo),e(zn,vR),e(vR,$eo),e(zn,keo),e(zn,FR),e(FR,Seo),e(zn,Reo),e(k,Peo),e(k,Wn),e(Wn,Fte),e(Fte,Beo),e(Wn,Ieo),e(Wn,TR),e(TR,qeo),e(Wn,Neo),e(Wn,MR),e(MR,jeo),e(Wn,Deo),e(k,Geo),e(k,Qn),e(Qn,Tte),e(Tte,Oeo),e(Qn,Veo),e(Qn,ER),e(ER,Xeo),e(Qn,zeo),e(Qn,CR),e(CR,Weo),e(Qn,Qeo),e(k,Heo),e(k,Hn),e(Hn,Mte),e(Mte,Ueo),e(Hn,Jeo),e(Hn,wR),e(wR,Yeo),e(Hn,Keo),e(Hn,AR),e(AR,Zeo),e(Hn,eoo),e(k,ooo),e(k,kg),e(kg,Ete),e(Ete,roo),e(kg,too),e(kg,yR),e(yR,aoo),e(kg,noo),e(k,soo),e(k,Un),e(Un,Cte),e(Cte,loo),e(Un,ioo),e(Un,LR),e(LR,doo),e(Un,coo),e(Un,xR),e(xR,foo),e(Un,moo),e(k,goo),e(k,Sg),e(Sg,wte),e(wte,hoo),e(Sg,poo),e(Sg,$R),e($R,_oo),e(Sg,uoo),e(k,boo),e(k,Jn),e(Jn,Ate),e(Ate,voo),e(Jn,Foo),e(Jn,kR),e(kR,Too),e(Jn,Moo),e(Jn,SR),e(SR,Eoo),e(Jn,Coo),e(k,woo),e(k,Yn),e(Yn,yte),e(yte,Aoo),e(Yn,yoo),e(Yn,RR),e(RR,Loo),e(Yn,xoo),e(Yn,PR),e(PR,$oo),e(Yn,koo),e(k,Soo),e(k,Kn),e(Kn,Lte),e(Lte,Roo),e(Kn,Poo),e(Kn,BR),e(BR,Boo),e(Kn,Ioo),e(Kn,IR),e(IR,qoo),e(Kn,Noo),e(k,joo),e(k,Zn),e(Zn,xte),e(xte,Doo),e(Zn,Goo),e(Zn,qR),e(qR,Ooo),e(Zn,Voo),e(Zn,NR),e(NR,Xoo),e(Zn,zoo),e(k,Woo),e(k,es),e(es,$te),e($te,Qoo),e(es,Hoo),e(es,jR),e(jR,Uoo),e(es,Joo),e(es,DR),e(DR,Yoo),e(es,Koo),e(k,Zoo),e(k,Rg),e(Rg,kte),e(kte,ero),e(Rg,oro),e(Rg,GR),e(GR,rro),e(Rg,tro),e(k,aro),e(k,os),e(os,Ste),e(Ste,nro),e(os,sro),e(os,OR),e(OR,lro),e(os,iro),e(os,VR),e(VR,dro),e(os,cro),e(k,fro),e(k,rs),e(rs,Rte),e(Rte,mro),e(rs,gro),e(rs,XR),e(XR,hro),e(rs,pro),e(rs,zR),e(zR,_ro),e(rs,uro),e(k,bro),e(k,ts),e(ts,Pte),e(Pte,vro),e(ts,Fro),e(ts,WR),e(WR,Tro),e(ts,Mro),e(ts,QR),e(QR,Ero),e(ts,Cro),e(k,wro),e(k,as),e(as,Bte),e(Bte,Aro),e(as,yro),e(as,HR),e(HR,Lro),e(as,xro),e(as,UR),e(UR,$ro),e(as,kro),e(k,Sro),e(k,ns),e(ns,Ite),e(Ite,Rro),e(ns,Pro),e(ns,JR),e(JR,Bro),e(ns,Iro),e(ns,YR),e(YR,qro),e(ns,Nro),e(k,jro),e(k,ss),e(ss,qte),e(qte,Dro),e(ss,Gro),e(ss,KR),e(KR,Oro),e(ss,Vro),e(ss,ZR),e(ZR,Xro),e(ss,zro),e(k,Wro),e(k,ls),e(ls,Nte),e(Nte,Qro),e(ls,Hro),e(ls,eP),e(eP,Uro),e(ls,Jro),e(ls,oP),e(oP,Yro),e(ls,Kro),e(k,Zro),e(k,Pg),e(Pg,jte),e(jte,eto),e(Pg,oto),e(Pg,rP),e(rP,rto),e(Pg,tto),e(k,ato),e(k,is),e(is,Dte),e(Dte,nto),e(is,sto),e(is,tP),e(tP,lto),e(is,ito),e(is,aP),e(aP,dto),e(is,cto),e(k,fto),e(k,Bg),e(Bg,Gte),e(Gte,mto),e(Bg,gto),e(Bg,nP),e(nP,hto),e(Bg,pto),e(k,_to),e(k,Ig),e(Ig,Ote),e(Ote,uto),e(Ig,bto),e(Ig,sP),e(sP,vto),e(Ig,Fto),e(k,Tto),e(k,ds),e(ds,Vte),e(Vte,Mto),e(ds,Eto),e(ds,lP),e(lP,Cto),e(ds,wto),e(ds,iP),e(iP,Ato),e(ds,yto),e(k,Lto),e(k,cs),e(cs,Xte),e(Xte,xto),e(cs,$to),e(cs,dP),e(dP,kto),e(cs,Sto),e(cs,cP),e(cP,Rto),e(cs,Pto),e(k,Bto),e(k,fs),e(fs,zte),e(zte,Ito),e(fs,qto),e(fs,fP),e(fP,Nto),e(fs,jto),e(fs,mP),e(mP,Dto),e(fs,Gto),e(k,Oto),e(k,qg),e(qg,Wte),e(Wte,Vto),e(qg,Xto),e(qg,gP),e(gP,zto),e(qg,Wto),e(k,Qto),e(k,ms),e(ms,Qte),e(Qte,Hto),e(ms,Uto),e(ms,hP),e(hP,Jto),e(ms,Yto),e(ms,pP),e(pP,Kto),e(ms,Zto),e(k,eao),e(k,gs),e(gs,Hte),e(Hte,oao),e(gs,rao),e(gs,_P),e(_P,tao),e(gs,aao),e(gs,uP),e(uP,nao),e(gs,sao),e(k,lao),e(k,hs),e(hs,Ute),e(Ute,iao),e(hs,dao),e(hs,bP),e(bP,cao),e(hs,fao),e(hs,vP),e(vP,mao),e(hs,gao),e(k,hao),e(k,ps),e(ps,Jte),e(Jte,pao),e(ps,_ao),e(ps,FP),e(FP,uao),e(ps,bao),e(ps,TP),e(TP,vao),e(ps,Fao),e(k,Tao),e(k,_s),e(_s,Yte),e(Yte,Mao),e(_s,Eao),e(_s,MP),e(MP,Cao),e(_s,wao),e(_s,EP),e(EP,Aao),e(_s,yao),e(k,Lao),e(k,Ng),e(Ng,Kte),e(Kte,xao),e(Ng,$ao),e(Ng,CP),e(CP,kao),e(Ng,Sao),e(k,Rao),e(k,us),e(us,Zte),e(Zte,Pao),e(us,Bao),e(us,wP),e(wP,Iao),e(us,qao),e(us,AP),e(AP,Nao),e(us,jao),e(k,Dao),e(k,jg),e(jg,eae),e(eae,Gao),e(jg,Oao),e(jg,yP),e(yP,Vao),e(jg,Xao),e(k,zao),e(k,Dg),e(Dg,oae),e(oae,Wao),e(Dg,Qao),e(Dg,LP),e(LP,Hao),e(Dg,Uao),e(k,Jao),e(k,Gg),e(Gg,rae),e(rae,Yao),e(Gg,Kao),e(Gg,xP),e(xP,Zao),e(Gg,eno),e(k,ono),e(k,Og),e(Og,tae),e(tae,rno),e(Og,tno),e(Og,$P),e($P,ano),e(Og,nno),e(k,sno),e(k,bs),e(bs,aae),e(aae,lno),e(bs,ino),e(bs,kP),e(kP,dno),e(bs,cno),e(bs,SP),e(SP,fno),e(bs,mno),e(k,gno),e(k,Vg),e(Vg,nae),e(nae,hno),e(Vg,pno),e(Vg,RP),e(RP,_no),e(Vg,uno),e(k,bno),e(k,vs),e(vs,sae),e(sae,vno),e(vs,Fno),e(vs,PP),e(PP,Tno),e(vs,Mno),e(vs,BP),e(BP,Eno),e(vs,Cno),e(k,wno),e(k,Fs),e(Fs,lae),e(lae,Ano),e(Fs,yno),e(Fs,IP),e(IP,Lno),e(Fs,xno),e(Fs,qP),e(qP,$no),e(Fs,kno),e(k,Sno),e(k,Ts),e(Ts,iae),e(iae,Rno),e(Ts,Pno),e(Ts,NP),e(NP,Bno),e(Ts,Ino),e(Ts,jP),e(jP,qno),e(Ts,Nno),e(k,jno),e(k,Ms),e(Ms,dae),e(dae,Dno),e(Ms,Gno),e(Ms,DP),e(DP,Ono),e(Ms,Vno),e(Ms,GP),e(GP,Xno),e(Ms,zno),e(k,Wno),e(k,Es),e(Es,cae),e(cae,Qno),e(Es,Hno),e(Es,OP),e(OP,Uno),e(Es,Jno),e(Es,VP),e(VP,Yno),e(Es,Kno),e(k,Zno),e(k,Cs),e(Cs,fae),e(fae,eso),e(Cs,oso),e(Cs,XP),e(XP,rso),e(Cs,tso),e(Cs,zP),e(zP,aso),e(Cs,nso),e(k,sso),e(k,Xg),e(Xg,mae),e(mae,lso),e(Xg,iso),e(Xg,WP),e(WP,dso),e(Xg,cso),e(k,fso),e(k,zg),e(zg,gae),e(gae,mso),e(zg,gso),e(zg,QP),e(QP,hso),e(zg,pso),e(k,_so),e(k,ws),e(ws,hae),e(hae,uso),e(ws,bso),e(ws,HP),e(HP,vso),e(ws,Fso),e(ws,UP),e(UP,Tso),e(ws,Mso),e(k,Eso),e(k,As),e(As,pae),e(pae,Cso),e(As,wso),e(As,JP),e(JP,Aso),e(As,yso),e(As,YP),e(YP,Lso),e(As,xso),e(k,$so),e(k,ys),e(ys,_ae),e(_ae,kso),e(ys,Sso),e(ys,KP),e(KP,Rso),e(ys,Pso),e(ys,ZP),e(ZP,Bso),e(ys,Iso),e(k,qso),e(k,Wg),e(Wg,uae),e(uae,Nso),e(Wg,jso),e(Wg,eB),e(eB,Dso),e(Wg,Gso),e(k,Oso),e(k,Qg),e(Qg,bae),e(bae,Vso),e(Qg,Xso),e(Qg,oB),e(oB,zso),e(Qg,Wso),e(k,Qso),e(k,Hg),e(Hg,vae),e(vae,Hso),e(Hg,Uso),e(Hg,rB),e(rB,Jso),e(Hg,Yso),e(k,Kso),e(k,Ls),e(Ls,Fae),e(Fae,Zso),e(Ls,elo),e(Ls,tB),e(tB,olo),e(Ls,rlo),e(Ls,aB),e(aB,tlo),e(Ls,alo),e(k,nlo),e(k,Ug),e(Ug,Tae),e(Tae,slo),e(Ug,llo),e(Ug,nB),e(nB,ilo),e(Ug,dlo),e(k,clo),e(k,Jg),e(Jg,Mae),e(Mae,flo),e(Jg,mlo),e(Jg,sB),e(sB,glo),e(Jg,hlo),e(k,plo),e(k,Yg),e(Yg,Eae),e(Eae,_lo),e(Yg,ulo),e(Yg,lB),e(lB,blo),e(Yg,vlo),e(k,Flo),e(k,xs),e(xs,Cae),e(Cae,Tlo),e(xs,Mlo),e(xs,iB),e(iB,Elo),e(xs,Clo),e(xs,dB),e(dB,wlo),e(xs,Alo),e(k,ylo),e(k,Kg),e(Kg,wae),e(wae,Llo),e(Kg,xlo),e(Kg,cB),e(cB,$lo),e(Kg,klo),e(k,Slo),e(k,Zg),e(Zg,Aae),e(Aae,Rlo),e(Zg,Plo),e(Zg,fB),e(fB,Blo),e(Zg,Ilo),e(k,qlo),e(k,$s),e($s,yae),e(yae,Nlo),e($s,jlo),e($s,mB),e(mB,Dlo),e($s,Glo),e($s,gB),e(gB,Olo),e($s,Vlo),e(k,Xlo),e(k,ks),e(ks,Lae),e(Lae,zlo),e(ks,Wlo),e(ks,hB),e(hB,Qlo),e(ks,Hlo),e(ks,pB),e(pB,Ulo),e(ks,Jlo),e(k,Ylo),e(k,Ss),e(Ss,xae),e(xae,Klo),e(Ss,Zlo),e(Ss,_B),e(_B,eio),e(Ss,oio),e(Ss,uB),e(uB,rio),e(Ss,tio),e(k,aio),e(k,Rs),e(Rs,$ae),e($ae,nio),e(Rs,sio),e(Rs,bB),e(bB,lio),e(Rs,iio),e(Rs,vB),e(vB,dio),e(Rs,cio),e(Cr,fio),M(eh,Cr,null),e(wo,mio),e(wo,oh),M(L0,oh,null),e(oh,gio),e(oh,kae),e(kae,hio),b(f,gqe,u),b(f,Mi,u),e(Mi,rh),e(rh,Sae),M(x0,Sae,null),e(Mi,pio),e(Mi,Rae),e(Rae,_io),b(f,hqe,u),b(f,Ao,u),M($0,Ao,null),e(Ao,uio),e(Ao,k0),e(k0,bio),e(k0,FB),e(FB,vio),e(k0,Fio),e(Ao,Tio),e(Ao,S0),e(S0,Mio),e(S0,Pae),e(Pae,Eio),e(S0,Cio),e(Ao,wio),e(Ao,He),M(R0,He,null),e(He,Aio),e(He,Bae),e(Bae,yio),e(He,Lio),e(He,ya),e(ya,xio),e(ya,Iae),e(Iae,$io),e(ya,kio),e(ya,qae),e(qae,Sio),e(ya,Rio),e(ya,Nae),e(Nae,Pio),e(ya,Bio),e(He,Iio),e(He,Z),e(Z,th),e(th,jae),e(jae,qio),e(th,Nio),e(th,TB),e(TB,jio),e(th,Dio),e(Z,Gio),e(Z,ah),e(ah,Dae),e(Dae,Oio),e(ah,Vio),e(ah,MB),e(MB,Xio),e(ah,zio),e(Z,Wio),e(Z,nh),e(nh,Gae),e(Gae,Qio),e(nh,Hio),e(nh,EB),e(EB,Uio),e(nh,Jio),e(Z,Yio),e(Z,sh),e(sh,Oae),e(Oae,Kio),e(sh,Zio),e(sh,CB),e(CB,edo),e(sh,odo),e(Z,rdo),e(Z,lh),e(lh,Vae),e(Vae,tdo),e(lh,ado),e(lh,wB),e(wB,ndo),e(lh,sdo),e(Z,ldo),e(Z,ih),e(ih,Xae),e(Xae,ido),e(ih,ddo),e(ih,AB),e(AB,cdo),e(ih,fdo),e(Z,mdo),e(Z,dh),e(dh,zae),e(zae,gdo),e(dh,hdo),e(dh,yB),e(yB,pdo),e(dh,_do),e(Z,udo),e(Z,ch),e(ch,Wae),e(Wae,bdo),e(ch,vdo),e(ch,LB),e(LB,Fdo),e(ch,Tdo),e(Z,Mdo),e(Z,fh),e(fh,Qae),e(Qae,Edo),e(fh,Cdo),e(fh,xB),e(xB,wdo),e(fh,Ado),e(Z,ydo),e(Z,mh),e(mh,Hae),e(Hae,Ldo),e(mh,xdo),e(mh,$B),e($B,$do),e(mh,kdo),e(Z,Sdo),e(Z,gh),e(gh,Uae),e(Uae,Rdo),e(gh,Pdo),e(gh,kB),e(kB,Bdo),e(gh,Ido),e(Z,qdo),e(Z,hh),e(hh,Jae),e(Jae,Ndo),e(hh,jdo),e(hh,SB),e(SB,Ddo),e(hh,Gdo),e(Z,Odo),e(Z,ph),e(ph,Yae),e(Yae,Vdo),e(ph,Xdo),e(ph,RB),e(RB,zdo),e(ph,Wdo),e(Z,Qdo),e(Z,_h),e(_h,Kae),e(Kae,Hdo),e(_h,Udo),e(_h,PB),e(PB,Jdo),e(_h,Ydo),e(Z,Kdo),e(Z,uh),e(uh,Zae),e(Zae,Zdo),e(uh,eco),e(uh,BB),e(BB,oco),e(uh,rco),e(Z,tco),e(Z,bh),e(bh,ene),e(ene,aco),e(bh,nco),e(bh,IB),e(IB,sco),e(bh,lco),e(Z,ico),e(Z,vh),e(vh,one),e(one,dco),e(vh,cco),e(vh,qB),e(qB,fco),e(vh,mco),e(Z,gco),e(Z,Fh),e(Fh,rne),e(rne,hco),e(Fh,pco),e(Fh,NB),e(NB,_co),e(Fh,uco),e(Z,bco),e(Z,Th),e(Th,tne),e(tne,vco),e(Th,Fco),e(Th,jB),e(jB,Tco),e(Th,Mco),e(Z,Eco),e(Z,Mh),e(Mh,ane),e(ane,Cco),e(Mh,wco),e(Mh,DB),e(DB,Aco),e(Mh,yco),e(Z,Lco),e(Z,Eh),e(Eh,nne),e(nne,xco),e(Eh,$co),e(Eh,GB),e(GB,kco),e(Eh,Sco),e(Z,Rco),e(Z,Ch),e(Ch,sne),e(sne,Pco),e(Ch,Bco),e(Ch,OB),e(OB,Ico),e(Ch,qco),e(Z,Nco),e(Z,wh),e(wh,lne),e(lne,jco),e(wh,Dco),e(wh,VB),e(VB,Gco),e(wh,Oco),e(Z,Vco),e(Z,Ah),e(Ah,ine),e(ine,Xco),e(Ah,zco),e(Ah,XB),e(XB,Wco),e(Ah,Qco),e(Z,Hco),e(Z,yh),e(yh,dne),e(dne,Uco),e(yh,Jco),e(yh,zB),e(zB,Yco),e(yh,Kco),e(Z,Zco),e(Z,Lh),e(Lh,cne),e(cne,efo),e(Lh,ofo),e(Lh,WB),e(WB,rfo),e(Lh,tfo),e(He,afo),M(xh,He,null),e(He,nfo),M($h,He,null),e(Ao,sfo),e(Ao,kh),M(P0,kh,null),e(kh,lfo),e(kh,fne),e(fne,ifo),b(f,pqe,u),b(f,Ei,u),e(Ei,Sh),e(Sh,mne),M(B0,mne,null),e(Ei,dfo),e(Ei,gne),e(gne,cfo),b(f,_qe,u),b(f,yo,u),M(I0,yo,null),e(yo,ffo),e(yo,q0),e(q0,mfo),e(q0,QB),e(QB,gfo),e(q0,hfo),e(yo,pfo),e(yo,N0),e(N0,_fo),e(N0,hne),e(hne,ufo),e(N0,bfo),e(yo,vfo),e(yo,Ue),M(j0,Ue,null),e(Ue,Ffo),e(Ue,pne),e(pne,Tfo),e(Ue,Mfo),e(Ue,Ci),e(Ci,Efo),e(Ci,_ne),e(_ne,Cfo),e(Ci,wfo),e(Ci,une),e(une,Afo),e(Ci,yfo),e(Ue,Lfo),e(Ue,_e),e(_e,Rh),e(Rh,bne),e(bne,xfo),e(Rh,$fo),e(Rh,HB),e(HB,kfo),e(Rh,Sfo),e(_e,Rfo),e(_e,Ph),e(Ph,vne),e(vne,Pfo),e(Ph,Bfo),e(Ph,Fne),e(Fne,Ifo),e(Ph,qfo),e(_e,Nfo),e(_e,Bh),e(Bh,Tne),e(Tne,jfo),e(Bh,Dfo),e(Bh,UB),e(UB,Gfo),e(Bh,Ofo),e(_e,Vfo),e(_e,Ih),e(Ih,Mne),e(Mne,Xfo),e(Ih,zfo),e(Ih,JB),e(JB,Wfo),e(Ih,Qfo),e(_e,Hfo),e(_e,qh),e(qh,Ene),e(Ene,Ufo),e(qh,Jfo),e(qh,YB),e(YB,Yfo),e(qh,Kfo),e(_e,Zfo),e(_e,Nh),e(Nh,Cne),e(Cne,emo),e(Nh,omo),e(Nh,KB),e(KB,rmo),e(Nh,tmo),e(_e,amo),e(_e,jh),e(jh,wne),e(wne,nmo),e(jh,smo),e(jh,ZB),e(ZB,lmo),e(jh,imo),e(_e,dmo),e(_e,Dh),e(Dh,Ane),e(Ane,cmo),e(Dh,fmo),e(Dh,eI),e(eI,mmo),e(Dh,gmo),e(_e,hmo),e(_e,Gh),e(Gh,yne),e(yne,pmo),e(Gh,_mo),e(Gh,oI),e(oI,umo),e(Gh,bmo),e(_e,vmo),e(_e,Oh),e(Oh,Lne),e(Lne,Fmo),e(Oh,Tmo),e(Oh,rI),e(rI,Mmo),e(Oh,Emo),e(_e,Cmo),e(_e,Vh),e(Vh,xne),e(xne,wmo),e(Vh,Amo),e(Vh,tI),e(tI,ymo),e(Vh,Lmo),e(_e,xmo),e(_e,Xh),e(Xh,$ne),e($ne,$mo),e(Xh,kmo),e(Xh,aI),e(aI,Smo),e(Xh,Rmo),e(_e,Pmo),e(_e,zh),e(zh,kne),e(kne,Bmo),e(zh,Imo),e(zh,nI),e(nI,qmo),e(zh,Nmo),e(_e,jmo),e(_e,Wh),e(Wh,Sne),e(Sne,Dmo),e(Wh,Gmo),e(Wh,sI),e(sI,Omo),e(Wh,Vmo),e(_e,Xmo),e(_e,Qh),e(Qh,Rne),e(Rne,zmo),e(Qh,Wmo),e(Qh,lI),e(lI,Qmo),e(Qh,Hmo),e(_e,Umo),e(_e,Hh),e(Hh,Pne),e(Pne,Jmo),e(Hh,Ymo),e(Hh,iI),e(iI,Kmo),e(Hh,Zmo),e(Ue,ego),M(Uh,Ue,null),e(Ue,ogo),M(Jh,Ue,null),e(yo,rgo),e(yo,Yh),M(D0,Yh,null),e(Yh,tgo),e(Yh,Bne),e(Bne,ago),b(f,uqe,u),b(f,wi,u),e(wi,Kh),e(Kh,Ine),M(G0,Ine,null),e(wi,ngo),e(wi,qne),e(qne,sgo),b(f,bqe,u),b(f,Lo,u),M(O0,Lo,null),e(Lo,lgo),e(Lo,Ai),e(Ai,igo),e(Ai,dI),e(dI,dgo),e(Ai,cgo),e(Ai,cI),e(cI,fgo),e(Ai,mgo),e(Lo,ggo),e(Lo,V0),e(V0,hgo),e(V0,Nne),e(Nne,pgo),e(V0,_go),e(Lo,ugo),e(Lo,tt),M(X0,tt,null),e(tt,bgo),e(tt,jne),e(jne,vgo),e(tt,Fgo),e(tt,yi),e(yi,Tgo),e(yi,Dne),e(Dne,Mgo),e(yi,Ego),e(yi,fI),e(fI,Cgo),e(yi,wgo),e(tt,Ago),M(Zh,tt,null),e(Lo,ygo),e(Lo,Je),M(z0,Je,null),e(Je,Lgo),e(Je,Gne),e(Gne,xgo),e(Je,$go),e(Je,La),e(La,kgo),e(La,One),e(One,Sgo),e(La,Rgo),e(La,Vne),e(Vne,Pgo),e(La,Bgo),e(La,Xne),e(Xne,Igo),e(La,qgo),e(Je,Ngo),e(Je,x),e(x,ep),e(ep,zne),e(zne,jgo),e(ep,Dgo),e(ep,mI),e(mI,Ggo),e(ep,Ogo),e(x,Vgo),e(x,op),e(op,Wne),e(Wne,Xgo),e(op,zgo),e(op,gI),e(gI,Wgo),e(op,Qgo),e(x,Hgo),e(x,rp),e(rp,Qne),e(Qne,Ugo),e(rp,Jgo),e(rp,hI),e(hI,Ygo),e(rp,Kgo),e(x,Zgo),e(x,tp),e(tp,Hne),e(Hne,eho),e(tp,oho),e(tp,pI),e(pI,rho),e(tp,tho),e(x,aho),e(x,ap),e(ap,Une),e(Une,nho),e(ap,sho),e(ap,_I),e(_I,lho),e(ap,iho),e(x,dho),e(x,np),e(np,Jne),e(Jne,cho),e(np,fho),e(np,uI),e(uI,mho),e(np,gho),e(x,hho),e(x,sp),e(sp,Yne),e(Yne,pho),e(sp,_ho),e(sp,bI),e(bI,uho),e(sp,bho),e(x,vho),e(x,lp),e(lp,Kne),e(Kne,Fho),e(lp,Tho),e(lp,vI),e(vI,Mho),e(lp,Eho),e(x,Cho),e(x,ip),e(ip,Zne),e(Zne,who),e(ip,Aho),e(ip,FI),e(FI,yho),e(ip,Lho),e(x,xho),e(x,dp),e(dp,ese),e(ese,$ho),e(dp,kho),e(dp,TI),e(TI,Sho),e(dp,Rho),e(x,Pho),e(x,cp),e(cp,ose),e(ose,Bho),e(cp,Iho),e(cp,MI),e(MI,qho),e(cp,Nho),e(x,jho),e(x,fp),e(fp,rse),e(rse,Dho),e(fp,Gho),e(fp,EI),e(EI,Oho),e(fp,Vho),e(x,Xho),e(x,mp),e(mp,tse),e(tse,zho),e(mp,Who),e(mp,CI),e(CI,Qho),e(mp,Hho),e(x,Uho),e(x,gp),e(gp,ase),e(ase,Jho),e(gp,Yho),e(gp,wI),e(wI,Kho),e(gp,Zho),e(x,epo),e(x,hp),e(hp,nse),e(nse,opo),e(hp,rpo),e(hp,AI),e(AI,tpo),e(hp,apo),e(x,npo),e(x,pp),e(pp,sse),e(sse,spo),e(pp,lpo),e(pp,yI),e(yI,ipo),e(pp,dpo),e(x,cpo),e(x,_p),e(_p,lse),e(lse,fpo),e(_p,mpo),e(_p,LI),e(LI,gpo),e(_p,hpo),e(x,ppo),e(x,up),e(up,ise),e(ise,_po),e(up,upo),e(up,xI),e(xI,bpo),e(up,vpo),e(x,Fpo),e(x,bp),e(bp,dse),e(dse,Tpo),e(bp,Mpo),e(bp,$I),e($I,Epo),e(bp,Cpo),e(x,wpo),e(x,vp),e(vp,cse),e(cse,Apo),e(vp,ypo),e(vp,kI),e(kI,Lpo),e(vp,xpo),e(x,$po),e(x,Fp),e(Fp,fse),e(fse,kpo),e(Fp,Spo),e(Fp,SI),e(SI,Rpo),e(Fp,Ppo),e(x,Bpo),e(x,Tp),e(Tp,mse),e(mse,Ipo),e(Tp,qpo),e(Tp,RI),e(RI,Npo),e(Tp,jpo),e(x,Dpo),e(x,Mp),e(Mp,gse),e(gse,Gpo),e(Mp,Opo),e(Mp,PI),e(PI,Vpo),e(Mp,Xpo),e(x,zpo),e(x,Ep),e(Ep,hse),e(hse,Wpo),e(Ep,Qpo),e(Ep,BI),e(BI,Hpo),e(Ep,Upo),e(x,Jpo),e(x,Cp),e(Cp,pse),e(pse,Ypo),e(Cp,Kpo),e(Cp,II),e(II,Zpo),e(Cp,e_o),e(x,o_o),e(x,wp),e(wp,_se),e(_se,r_o),e(wp,t_o),e(wp,qI),e(qI,a_o),e(wp,n_o),e(x,s_o),e(x,Ap),e(Ap,use),e(use,l_o),e(Ap,i_o),e(Ap,NI),e(NI,d_o),e(Ap,c_o),e(x,f_o),e(x,yp),e(yp,bse),e(bse,m_o),e(yp,g_o),e(yp,jI),e(jI,h_o),e(yp,p_o),e(x,__o),e(x,Lp),e(Lp,vse),e(vse,u_o),e(Lp,b_o),e(Lp,DI),e(DI,v_o),e(Lp,F_o),e(x,T_o),e(x,xp),e(xp,Fse),e(Fse,M_o),e(xp,E_o),e(xp,GI),e(GI,C_o),e(xp,w_o),e(x,A_o),e(x,$p),e($p,Tse),e(Tse,y_o),e($p,L_o),e($p,OI),e(OI,x_o),e($p,$_o),e(x,k_o),e(x,Ps),e(Ps,Mse),e(Mse,S_o),e(Ps,R_o),e(Ps,VI),e(VI,P_o),e(Ps,B_o),e(Ps,XI),e(XI,I_o),e(Ps,q_o),e(x,N_o),e(x,kp),e(kp,Ese),e(Ese,j_o),e(kp,D_o),e(kp,zI),e(zI,G_o),e(kp,O_o),e(x,V_o),e(x,Sp),e(Sp,Cse),e(Cse,X_o),e(Sp,z_o),e(Sp,WI),e(WI,W_o),e(Sp,Q_o),e(x,H_o),e(x,Rp),e(Rp,wse),e(wse,U_o),e(Rp,J_o),e(Rp,QI),e(QI,Y_o),e(Rp,K_o),e(x,Z_o),e(x,Pp),e(Pp,Ase),e(Ase,euo),e(Pp,ouo),e(Pp,HI),e(HI,ruo),e(Pp,tuo),e(x,auo),e(x,Bp),e(Bp,yse),e(yse,nuo),e(Bp,suo),e(Bp,UI),e(UI,luo),e(Bp,iuo),e(x,duo),e(x,Ip),e(Ip,Lse),e(Lse,cuo),e(Ip,fuo),e(Ip,JI),e(JI,muo),e(Ip,guo),e(x,huo),e(x,qp),e(qp,xse),e(xse,puo),e(qp,_uo),e(qp,YI),e(YI,uuo),e(qp,buo),e(x,vuo),e(x,Np),e(Np,$se),e($se,Fuo),e(Np,Tuo),e(Np,KI),e(KI,Muo),e(Np,Euo),e(x,Cuo),e(x,jp),e(jp,kse),e(kse,wuo),e(jp,Auo),e(jp,ZI),e(ZI,yuo),e(jp,Luo),e(x,xuo),e(x,Dp),e(Dp,Sse),e(Sse,$uo),e(Dp,kuo),e(Dp,eq),e(eq,Suo),e(Dp,Ruo),e(x,Puo),e(x,Gp),e(Gp,Rse),e(Rse,Buo),e(Gp,Iuo),e(Gp,oq),e(oq,quo),e(Gp,Nuo),e(x,juo),e(x,Op),e(Op,Pse),e(Pse,Duo),e(Op,Guo),e(Op,rq),e(rq,Ouo),e(Op,Vuo),e(x,Xuo),e(x,Vp),e(Vp,Bse),e(Bse,zuo),e(Vp,Wuo),e(Vp,tq),e(tq,Quo),e(Vp,Huo),e(x,Uuo),e(x,Xp),e(Xp,Ise),e(Ise,Juo),e(Xp,Yuo),e(Xp,aq),e(aq,Kuo),e(Xp,Zuo),e(x,e2o),e(x,zp),e(zp,qse),e(qse,o2o),e(zp,r2o),e(zp,nq),e(nq,t2o),e(zp,a2o),e(x,n2o),e(x,Wp),e(Wp,Nse),e(Nse,s2o),e(Wp,l2o),e(Wp,sq),e(sq,i2o),e(Wp,d2o),e(x,c2o),e(x,Qp),e(Qp,jse),e(jse,f2o),e(Qp,m2o),e(Qp,lq),e(lq,g2o),e(Qp,h2o),e(x,p2o),e(x,Hp),e(Hp,Dse),e(Dse,_2o),e(Hp,u2o),e(Hp,iq),e(iq,b2o),e(Hp,v2o),e(x,F2o),e(x,Up),e(Up,Gse),e(Gse,T2o),e(Up,M2o),e(Up,dq),e(dq,E2o),e(Up,C2o),e(x,w2o),e(x,Jp),e(Jp,Ose),e(Ose,A2o),e(Jp,y2o),e(Jp,cq),e(cq,L2o),e(Jp,x2o),e(x,$2o),e(x,Yp),e(Yp,Vse),e(Vse,k2o),e(Yp,S2o),e(Yp,fq),e(fq,R2o),e(Yp,P2o),e(x,B2o),e(x,Kp),e(Kp,Xse),e(Xse,I2o),e(Kp,q2o),e(Kp,mq),e(mq,N2o),e(Kp,j2o),e(x,D2o),e(x,Zp),e(Zp,zse),e(zse,G2o),e(Zp,O2o),e(Zp,gq),e(gq,V2o),e(Zp,X2o),e(x,z2o),e(x,e_),e(e_,Wse),e(Wse,W2o),e(e_,Q2o),e(e_,hq),e(hq,H2o),e(e_,U2o),e(x,J2o),e(x,o_),e(o_,Qse),e(Qse,Y2o),e(o_,K2o),e(o_,pq),e(pq,Z2o),e(o_,e1o),e(x,o1o),e(x,r_),e(r_,Hse),e(Hse,r1o),e(r_,t1o),e(r_,_q),e(_q,a1o),e(r_,n1o),e(x,s1o),e(x,t_),e(t_,Use),e(Use,l1o),e(t_,i1o),e(t_,uq),e(uq,d1o),e(t_,c1o),e(x,f1o),e(x,a_),e(a_,Jse),e(Jse,m1o),e(a_,g1o),e(a_,bq),e(bq,h1o),e(a_,p1o),e(x,_1o),e(x,n_),e(n_,Yse),e(Yse,u1o),e(n_,b1o),e(n_,vq),e(vq,v1o),e(n_,F1o),e(x,T1o),e(x,s_),e(s_,Kse),e(Kse,M1o),e(s_,E1o),e(s_,Fq),e(Fq,C1o),e(s_,w1o),e(x,A1o),e(x,l_),e(l_,Zse),e(Zse,y1o),e(l_,L1o),e(l_,Tq),e(Tq,x1o),e(l_,$1o),e(x,k1o),e(x,i_),e(i_,ele),e(ele,S1o),e(i_,R1o),e(i_,Mq),e(Mq,P1o),e(i_,B1o),e(x,I1o),e(x,d_),e(d_,ole),e(ole,q1o),e(d_,N1o),e(d_,Eq),e(Eq,j1o),e(d_,D1o),e(x,G1o),e(x,c_),e(c_,rle),e(rle,O1o),e(c_,V1o),e(c_,Cq),e(Cq,X1o),e(c_,z1o),e(x,W1o),e(x,f_),e(f_,tle),e(tle,Q1o),e(f_,H1o),e(f_,wq),e(wq,U1o),e(f_,J1o),e(x,Y1o),e(x,m_),e(m_,ale),e(ale,K1o),e(m_,Z1o),e(m_,Aq),e(Aq,ebo),e(m_,obo),e(x,rbo),e(x,g_),e(g_,nle),e(nle,tbo),e(g_,abo),e(g_,yq),e(yq,nbo),e(g_,sbo),e(x,lbo),e(x,h_),e(h_,sle),e(sle,ibo),e(h_,dbo),e(h_,Lq),e(Lq,cbo),e(h_,fbo),e(x,mbo),e(x,p_),e(p_,lle),e(lle,gbo),e(p_,hbo),e(p_,xq),e(xq,pbo),e(p_,_bo),e(x,ubo),e(x,__),e(__,ile),e(ile,bbo),e(__,vbo),e(__,$q),e($q,Fbo),e(__,Tbo),e(x,Mbo),e(x,u_),e(u_,dle),e(dle,Ebo),e(u_,Cbo),e(u_,kq),e(kq,wbo),e(u_,Abo),e(x,ybo),e(x,b_),e(b_,cle),e(cle,Lbo),e(b_,xbo),e(b_,Sq),e(Sq,$bo),e(b_,kbo),e(x,Sbo),e(x,v_),e(v_,fle),e(fle,Rbo),e(v_,Pbo),e(v_,Rq),e(Rq,Bbo),e(v_,Ibo),e(x,qbo),e(x,F_),e(F_,mle),e(mle,Nbo),e(F_,jbo),e(F_,Pq),e(Pq,Dbo),e(F_,Gbo),e(x,Obo),e(x,T_),e(T_,gle),e(gle,Vbo),e(T_,Xbo),e(T_,Bq),e(Bq,zbo),e(T_,Wbo),e(x,Qbo),e(x,M_),e(M_,hle),e(hle,Hbo),e(M_,Ubo),e(M_,Iq),e(Iq,Jbo),e(M_,Ybo),e(x,Kbo),e(x,E_),e(E_,ple),e(ple,Zbo),e(E_,evo),e(E_,qq),e(qq,ovo),e(E_,rvo),e(x,tvo),e(x,C_),e(C_,_le),e(_le,avo),e(C_,nvo),e(C_,Nq),e(Nq,svo),e(C_,lvo),e(x,ivo),e(x,w_),e(w_,ule),e(ule,dvo),e(w_,cvo),e(w_,jq),e(jq,fvo),e(w_,mvo),e(x,gvo),e(x,A_),e(A_,ble),e(ble,hvo),e(A_,pvo),e(A_,Dq),e(Dq,_vo),e(A_,uvo),e(x,bvo),e(x,y_),e(y_,vle),e(vle,vvo),e(y_,Fvo),e(y_,Gq),e(Gq,Tvo),e(y_,Mvo),e(x,Evo),e(x,L_),e(L_,Fle),e(Fle,Cvo),e(L_,wvo),e(L_,Oq),e(Oq,Avo),e(L_,yvo),e(x,Lvo),e(x,x_),e(x_,Tle),e(Tle,xvo),e(x_,$vo),e(x_,Vq),e(Vq,kvo),e(x_,Svo),e(x,Rvo),e(x,$_),e($_,Mle),e(Mle,Pvo),e($_,Bvo),e($_,Xq),e(Xq,Ivo),e($_,qvo),e(x,Nvo),e(x,k_),e(k_,Ele),e(Ele,jvo),e(k_,Dvo),e(k_,zq),e(zq,Gvo),e(k_,Ovo),e(x,Vvo),e(x,S_),e(S_,Cle),e(Cle,Xvo),e(S_,zvo),e(S_,Wq),e(Wq,Wvo),e(S_,Qvo),e(x,Hvo),e(x,R_),e(R_,wle),e(wle,Uvo),e(R_,Jvo),e(R_,Qq),e(Qq,Yvo),e(R_,Kvo),e(x,Zvo),e(x,P_),e(P_,Ale),e(Ale,eFo),e(P_,oFo),e(P_,Hq),e(Hq,rFo),e(P_,tFo),e(x,aFo),e(x,B_),e(B_,yle),e(yle,nFo),e(B_,sFo),e(B_,Uq),e(Uq,lFo),e(B_,iFo),e(x,dFo),e(x,I_),e(I_,Lle),e(Lle,cFo),e(I_,fFo),e(I_,Jq),e(Jq,mFo),e(I_,gFo),e(x,hFo),e(x,q_),e(q_,xle),e(xle,pFo),e(q_,_Fo),e(q_,Yq),e(Yq,uFo),e(q_,bFo),e(x,vFo),e(x,N_),e(N_,$le),e($le,FFo),e(N_,TFo),e(N_,Kq),e(Kq,MFo),e(N_,EFo),e(x,CFo),e(x,j_),e(j_,kle),e(kle,wFo),e(j_,AFo),e(j_,Zq),e(Zq,yFo),e(j_,LFo),e(x,xFo),e(x,D_),e(D_,Sle),e(Sle,$Fo),e(D_,kFo),e(D_,eN),e(eN,SFo),e(D_,RFo),e(x,PFo),e(x,G_),e(G_,Rle),e(Rle,BFo),e(G_,IFo),e(G_,oN),e(oN,qFo),e(G_,NFo),e(x,jFo),e(x,O_),e(O_,Ple),e(Ple,DFo),e(O_,GFo),e(O_,rN),e(rN,OFo),e(O_,VFo),e(x,XFo),e(x,V_),e(V_,Ble),e(Ble,zFo),e(V_,WFo),e(V_,tN),e(tN,QFo),e(V_,HFo),e(Je,UFo),e(Je,X_),e(X_,JFo),e(X_,Ile),e(Ile,YFo),e(X_,KFo),e(X_,qle),e(qle,ZFo),e(Je,e6o),M(z_,Je,null),b(f,vqe,u),b(f,Li,u),e(Li,W_),e(W_,Nle),M(W0,Nle,null),e(Li,o6o),e(Li,jle),e(jle,r6o),b(f,Fqe,u),b(f,xo,u),M(Q0,xo,null),e(xo,t6o),e(xo,xi),e(xi,a6o),e(xi,aN),e(aN,n6o),e(xi,s6o),e(xi,nN),e(nN,l6o),e(xi,i6o),e(xo,d6o),e(xo,H0),e(H0,c6o),e(H0,Dle),e(Dle,f6o),e(H0,m6o),e(xo,g6o),e(xo,at),M(U0,at,null),e(at,h6o),e(at,Gle),e(Gle,p6o),e(at,_6o),e(at,$i),e($i,u6o),e($i,Ole),e(Ole,b6o),e($i,v6o),e($i,sN),e(sN,F6o),e($i,T6o),e(at,M6o),M(Q_,at,null),e(xo,E6o),e(xo,Ye),M(J0,Ye,null),e(Ye,C6o),e(Ye,Vle),e(Vle,w6o),e(Ye,A6o),e(Ye,xa),e(xa,y6o),e(xa,Xle),e(Xle,L6o),e(xa,x6o),e(xa,zle),e(zle,$6o),e(xa,k6o),e(xa,Wle),e(Wle,S6o),e(xa,R6o),e(Ye,P6o),e(Ye,G),e(G,H_),e(H_,Qle),e(Qle,B6o),e(H_,I6o),e(H_,lN),e(lN,q6o),e(H_,N6o),e(G,j6o),e(G,U_),e(U_,Hle),e(Hle,D6o),e(U_,G6o),e(U_,iN),e(iN,O6o),e(U_,V6o),e(G,X6o),e(G,J_),e(J_,Ule),e(Ule,z6o),e(J_,W6o),e(J_,dN),e(dN,Q6o),e(J_,H6o),e(G,U6o),e(G,Y_),e(Y_,Jle),e(Jle,J6o),e(Y_,Y6o),e(Y_,cN),e(cN,K6o),e(Y_,Z6o),e(G,eTo),e(G,K_),e(K_,Yle),e(Yle,oTo),e(K_,rTo),e(K_,fN),e(fN,tTo),e(K_,aTo),e(G,nTo),e(G,Z_),e(Z_,Kle),e(Kle,sTo),e(Z_,lTo),e(Z_,mN),e(mN,iTo),e(Z_,dTo),e(G,cTo),e(G,eu),e(eu,Zle),e(Zle,fTo),e(eu,mTo),e(eu,gN),e(gN,gTo),e(eu,hTo),e(G,pTo),e(G,ou),e(ou,eie),e(eie,_To),e(ou,uTo),e(ou,hN),e(hN,bTo),e(ou,vTo),e(G,FTo),e(G,ru),e(ru,oie),e(oie,TTo),e(ru,MTo),e(ru,pN),e(pN,ETo),e(ru,CTo),e(G,wTo),e(G,tu),e(tu,rie),e(rie,ATo),e(tu,yTo),e(tu,_N),e(_N,LTo),e(tu,xTo),e(G,$To),e(G,au),e(au,tie),e(tie,kTo),e(au,STo),e(au,uN),e(uN,RTo),e(au,PTo),e(G,BTo),e(G,nu),e(nu,aie),e(aie,ITo),e(nu,qTo),e(nu,bN),e(bN,NTo),e(nu,jTo),e(G,DTo),e(G,su),e(su,nie),e(nie,GTo),e(su,OTo),e(su,vN),e(vN,VTo),e(su,XTo),e(G,zTo),e(G,lu),e(lu,sie),e(sie,WTo),e(lu,QTo),e(lu,FN),e(FN,HTo),e(lu,UTo),e(G,JTo),e(G,iu),e(iu,lie),e(lie,YTo),e(iu,KTo),e(iu,TN),e(TN,ZTo),e(iu,e7o),e(G,o7o),e(G,du),e(du,iie),e(iie,r7o),e(du,t7o),e(du,MN),e(MN,a7o),e(du,n7o),e(G,s7o),e(G,cu),e(cu,die),e(die,l7o),e(cu,i7o),e(cu,EN),e(EN,d7o),e(cu,c7o),e(G,f7o),e(G,fu),e(fu,cie),e(cie,m7o),e(fu,g7o),e(fu,CN),e(CN,h7o),e(fu,p7o),e(G,_7o),e(G,mu),e(mu,fie),e(fie,u7o),e(mu,b7o),e(mu,wN),e(wN,v7o),e(mu,F7o),e(G,T7o),e(G,gu),e(gu,mie),e(mie,M7o),e(gu,E7o),e(gu,AN),e(AN,C7o),e(gu,w7o),e(G,A7o),e(G,hu),e(hu,gie),e(gie,y7o),e(hu,L7o),e(hu,yN),e(yN,x7o),e(hu,$7o),e(G,k7o),e(G,pu),e(pu,hie),e(hie,S7o),e(pu,R7o),e(pu,LN),e(LN,P7o),e(pu,B7o),e(G,I7o),e(G,_u),e(_u,pie),e(pie,q7o),e(_u,N7o),e(_u,xN),e(xN,j7o),e(_u,D7o),e(G,G7o),e(G,uu),e(uu,_ie),e(_ie,O7o),e(uu,V7o),e(uu,$N),e($N,X7o),e(uu,z7o),e(G,W7o),e(G,bu),e(bu,uie),e(uie,Q7o),e(bu,H7o),e(bu,kN),e(kN,U7o),e(bu,J7o),e(G,Y7o),e(G,vu),e(vu,bie),e(bie,K7o),e(vu,Z7o),e(vu,SN),e(SN,e9o),e(vu,o9o),e(G,r9o),e(G,Fu),e(Fu,vie),e(vie,t9o),e(Fu,a9o),e(Fu,RN),e(RN,n9o),e(Fu,s9o),e(G,l9o),e(G,Tu),e(Tu,Fie),e(Fie,i9o),e(Tu,d9o),e(Tu,PN),e(PN,c9o),e(Tu,f9o),e(G,m9o),e(G,Mu),e(Mu,Tie),e(Tie,g9o),e(Mu,h9o),e(Mu,BN),e(BN,p9o),e(Mu,_9o),e(G,u9o),e(G,Eu),e(Eu,Mie),e(Mie,b9o),e(Eu,v9o),e(Eu,IN),e(IN,F9o),e(Eu,T9o),e(G,M9o),e(G,Cu),e(Cu,Eie),e(Eie,E9o),e(Cu,C9o),e(Cu,qN),e(qN,w9o),e(Cu,A9o),e(G,y9o),e(G,wu),e(wu,Cie),e(Cie,L9o),e(wu,x9o),e(wu,NN),e(NN,$9o),e(wu,k9o),e(G,S9o),e(G,Au),e(Au,wie),e(wie,R9o),e(Au,P9o),e(Au,jN),e(jN,B9o),e(Au,I9o),e(G,q9o),e(G,yu),e(yu,Aie),e(Aie,N9o),e(yu,j9o),e(yu,DN),e(DN,D9o),e(yu,G9o),e(G,O9o),e(G,Lu),e(Lu,yie),e(yie,V9o),e(Lu,X9o),e(Lu,GN),e(GN,z9o),e(Lu,W9o),e(G,Q9o),e(G,xu),e(xu,Lie),e(Lie,H9o),e(xu,U9o),e(xu,ON),e(ON,J9o),e(xu,Y9o),e(G,K9o),e(G,$u),e($u,xie),e(xie,Z9o),e($u,eMo),e($u,VN),e(VN,oMo),e($u,rMo),e(G,tMo),e(G,ku),e(ku,$ie),e($ie,aMo),e(ku,nMo),e(ku,XN),e(XN,sMo),e(ku,lMo),e(G,iMo),e(G,Su),e(Su,kie),e(kie,dMo),e(Su,cMo),e(Su,zN),e(zN,fMo),e(Su,mMo),e(G,gMo),e(G,Ru),e(Ru,Sie),e(Sie,hMo),e(Ru,pMo),e(Ru,WN),e(WN,_Mo),e(Ru,uMo),e(G,bMo),e(G,Pu),e(Pu,Rie),e(Rie,vMo),e(Pu,FMo),e(Pu,QN),e(QN,TMo),e(Pu,MMo),e(G,EMo),e(G,Bu),e(Bu,Pie),e(Pie,CMo),e(Bu,wMo),e(Bu,HN),e(HN,AMo),e(Bu,yMo),e(Ye,LMo),e(Ye,Iu),e(Iu,xMo),e(Iu,Bie),e(Bie,$Mo),e(Iu,kMo),e(Iu,Iie),e(Iie,SMo),e(Ye,RMo),M(qu,Ye,null),b(f,Tqe,u),b(f,ki,u),e(ki,Nu),e(Nu,qie),M(Y0,qie,null),e(ki,PMo),e(ki,Nie),e(Nie,BMo),b(f,Mqe,u),b(f,$o,u),M(K0,$o,null),e($o,IMo),e($o,Si),e(Si,qMo),e(Si,UN),e(UN,NMo),e(Si,jMo),e(Si,JN),e(JN,DMo),e(Si,GMo),e($o,OMo),e($o,Z0),e(Z0,VMo),e(Z0,jie),e(jie,XMo),e(Z0,zMo),e($o,WMo),e($o,nt),M(eA,nt,null),e(nt,QMo),e(nt,Die),e(Die,HMo),e(nt,UMo),e(nt,Ri),e(Ri,JMo),e(Ri,Gie),e(Gie,YMo),e(Ri,KMo),e(Ri,YN),e(YN,ZMo),e(Ri,e4o),e(nt,o4o),M(ju,nt,null),e($o,r4o),e($o,Ke),M(oA,Ke,null),e(Ke,t4o),e(Ke,Oie),e(Oie,a4o),e(Ke,n4o),e(Ke,$a),e($a,s4o),e($a,Vie),e(Vie,l4o),e($a,i4o),e($a,Xie),e(Xie,d4o),e($a,c4o),e($a,zie),e(zie,f4o),e($a,m4o),e(Ke,g4o),e(Ke,z),e(z,Du),e(Du,Wie),e(Wie,h4o),e(Du,p4o),e(Du,KN),e(KN,_4o),e(Du,u4o),e(z,b4o),e(z,Gu),e(Gu,Qie),e(Qie,v4o),e(Gu,F4o),e(Gu,ZN),e(ZN,T4o),e(Gu,M4o),e(z,E4o),e(z,Ou),e(Ou,Hie),e(Hie,C4o),e(Ou,w4o),e(Ou,ej),e(ej,A4o),e(Ou,y4o),e(z,L4o),e(z,Vu),e(Vu,Uie),e(Uie,x4o),e(Vu,$4o),e(Vu,oj),e(oj,k4o),e(Vu,S4o),e(z,R4o),e(z,Xu),e(Xu,Jie),e(Jie,P4o),e(Xu,B4o),e(Xu,rj),e(rj,I4o),e(Xu,q4o),e(z,N4o),e(z,zu),e(zu,Yie),e(Yie,j4o),e(zu,D4o),e(zu,tj),e(tj,G4o),e(zu,O4o),e(z,V4o),e(z,Wu),e(Wu,Kie),e(Kie,X4o),e(Wu,z4o),e(Wu,aj),e(aj,W4o),e(Wu,Q4o),e(z,H4o),e(z,Qu),e(Qu,Zie),e(Zie,U4o),e(Qu,J4o),e(Qu,nj),e(nj,Y4o),e(Qu,K4o),e(z,Z4o),e(z,Hu),e(Hu,ede),e(ede,eEo),e(Hu,oEo),e(Hu,sj),e(sj,rEo),e(Hu,tEo),e(z,aEo),e(z,Uu),e(Uu,ode),e(ode,nEo),e(Uu,sEo),e(Uu,lj),e(lj,lEo),e(Uu,iEo),e(z,dEo),e(z,Ju),e(Ju,rde),e(rde,cEo),e(Ju,fEo),e(Ju,ij),e(ij,mEo),e(Ju,gEo),e(z,hEo),e(z,Yu),e(Yu,tde),e(tde,pEo),e(Yu,_Eo),e(Yu,dj),e(dj,uEo),e(Yu,bEo),e(z,vEo),e(z,Ku),e(Ku,ade),e(ade,FEo),e(Ku,TEo),e(Ku,cj),e(cj,MEo),e(Ku,EEo),e(z,CEo),e(z,Zu),e(Zu,nde),e(nde,wEo),e(Zu,AEo),e(Zu,fj),e(fj,yEo),e(Zu,LEo),e(z,xEo),e(z,e2),e(e2,sde),e(sde,$Eo),e(e2,kEo),e(e2,mj),e(mj,SEo),e(e2,REo),e(z,PEo),e(z,o2),e(o2,lde),e(lde,BEo),e(o2,IEo),e(o2,gj),e(gj,qEo),e(o2,NEo),e(z,jEo),e(z,r2),e(r2,ide),e(ide,DEo),e(r2,GEo),e(r2,hj),e(hj,OEo),e(r2,VEo),e(z,XEo),e(z,t2),e(t2,dde),e(dde,zEo),e(t2,WEo),e(t2,pj),e(pj,QEo),e(t2,HEo),e(z,UEo),e(z,a2),e(a2,cde),e(cde,JEo),e(a2,YEo),e(a2,_j),e(_j,KEo),e(a2,ZEo),e(z,e5o),e(z,n2),e(n2,fde),e(fde,o5o),e(n2,r5o),e(n2,uj),e(uj,t5o),e(n2,a5o),e(z,n5o),e(z,s2),e(s2,mde),e(mde,s5o),e(s2,l5o),e(s2,bj),e(bj,i5o),e(s2,d5o),e(z,c5o),e(z,l2),e(l2,gde),e(gde,f5o),e(l2,m5o),e(l2,vj),e(vj,g5o),e(l2,h5o),e(z,p5o),e(z,i2),e(i2,hde),e(hde,_5o),e(i2,u5o),e(i2,Fj),e(Fj,b5o),e(i2,v5o),e(z,F5o),e(z,d2),e(d2,pde),e(pde,T5o),e(d2,M5o),e(d2,Tj),e(Tj,E5o),e(d2,C5o),e(z,w5o),e(z,c2),e(c2,_de),e(_de,A5o),e(c2,y5o),e(c2,Mj),e(Mj,L5o),e(c2,x5o),e(z,$5o),e(z,f2),e(f2,ude),e(ude,k5o),e(f2,S5o),e(f2,Ej),e(Ej,R5o),e(f2,P5o),e(z,B5o),e(z,m2),e(m2,bde),e(bde,I5o),e(m2,q5o),e(m2,Cj),e(Cj,N5o),e(m2,j5o),e(z,D5o),e(z,g2),e(g2,vde),e(vde,G5o),e(g2,O5o),e(g2,wj),e(wj,V5o),e(g2,X5o),e(z,z5o),e(z,h2),e(h2,Fde),e(Fde,W5o),e(h2,Q5o),e(h2,Aj),e(Aj,H5o),e(h2,U5o),e(z,J5o),e(z,p2),e(p2,Tde),e(Tde,Y5o),e(p2,K5o),e(p2,yj),e(yj,Z5o),e(p2,eCo),e(z,oCo),e(z,_2),e(_2,Mde),e(Mde,rCo),e(_2,tCo),e(_2,Lj),e(Lj,aCo),e(_2,nCo),e(z,sCo),e(z,u2),e(u2,Ede),e(Ede,lCo),e(u2,iCo),e(u2,xj),e(xj,dCo),e(u2,cCo),e(z,fCo),e(z,b2),e(b2,Cde),e(Cde,mCo),e(b2,gCo),e(b2,$j),e($j,hCo),e(b2,pCo),e(z,_Co),e(z,v2),e(v2,wde),e(wde,uCo),e(v2,bCo),e(v2,kj),e(kj,vCo),e(v2,FCo),e(z,TCo),e(z,F2),e(F2,Ade),e(Ade,MCo),e(F2,ECo),e(F2,Sj),e(Sj,CCo),e(F2,wCo),e(z,ACo),e(z,T2),e(T2,yde),e(yde,yCo),e(T2,LCo),e(T2,Rj),e(Rj,xCo),e(T2,$Co),e(Ke,kCo),e(Ke,M2),e(M2,SCo),e(M2,Lde),e(Lde,RCo),e(M2,PCo),e(M2,xde),e(xde,BCo),e(Ke,ICo),M(E2,Ke,null),b(f,Eqe,u),b(f,Pi,u),e(Pi,C2),e(C2,$de),M(rA,$de,null),e(Pi,qCo),e(Pi,kde),e(kde,NCo),b(f,Cqe,u),b(f,ko,u),M(tA,ko,null),e(ko,jCo),e(ko,Bi),e(Bi,DCo),e(Bi,Pj),e(Pj,GCo),e(Bi,OCo),e(Bi,Bj),e(Bj,VCo),e(Bi,XCo),e(ko,zCo),e(ko,aA),e(aA,WCo),e(aA,Sde),e(Sde,QCo),e(aA,HCo),e(ko,UCo),e(ko,st),M(nA,st,null),e(st,JCo),e(st,Rde),e(Rde,YCo),e(st,KCo),e(st,Ii),e(Ii,ZCo),e(Ii,Pde),e(Pde,e3o),e(Ii,o3o),e(Ii,Ij),e(Ij,r3o),e(Ii,t3o),e(st,a3o),M(w2,st,null),e(ko,n3o),e(ko,Ze),M(sA,Ze,null),e(Ze,s3o),e(Ze,Bde),e(Bde,l3o),e(Ze,i3o),e(Ze,ka),e(ka,d3o),e(ka,Ide),e(Ide,c3o),e(ka,f3o),e(ka,qde),e(qde,m3o),e(ka,g3o),e(ka,Nde),e(Nde,h3o),e(ka,p3o),e(Ze,_3o),e(Ze,W),e(W,A2),e(A2,jde),e(jde,u3o),e(A2,b3o),e(A2,qj),e(qj,v3o),e(A2,F3o),e(W,T3o),e(W,y2),e(y2,Dde),e(Dde,M3o),e(y2,E3o),e(y2,Nj),e(Nj,C3o),e(y2,w3o),e(W,A3o),e(W,L2),e(L2,Gde),e(Gde,y3o),e(L2,L3o),e(L2,jj),e(jj,x3o),e(L2,$3o),e(W,k3o),e(W,x2),e(x2,Ode),e(Ode,S3o),e(x2,R3o),e(x2,Dj),e(Dj,P3o),e(x2,B3o),e(W,I3o),e(W,$2),e($2,Vde),e(Vde,q3o),e($2,N3o),e($2,Gj),e(Gj,j3o),e($2,D3o),e(W,G3o),e(W,k2),e(k2,Xde),e(Xde,O3o),e(k2,V3o),e(k2,Oj),e(Oj,X3o),e(k2,z3o),e(W,W3o),e(W,S2),e(S2,zde),e(zde,Q3o),e(S2,H3o),e(S2,Vj),e(Vj,U3o),e(S2,J3o),e(W,Y3o),e(W,R2),e(R2,Wde),e(Wde,K3o),e(R2,Z3o),e(R2,Xj),e(Xj,ewo),e(R2,owo),e(W,rwo),e(W,P2),e(P2,Qde),e(Qde,two),e(P2,awo),e(P2,zj),e(zj,nwo),e(P2,swo),e(W,lwo),e(W,B2),e(B2,Hde),e(Hde,iwo),e(B2,dwo),e(B2,Wj),e(Wj,cwo),e(B2,fwo),e(W,mwo),e(W,I2),e(I2,Ude),e(Ude,gwo),e(I2,hwo),e(I2,Qj),e(Qj,pwo),e(I2,_wo),e(W,uwo),e(W,q2),e(q2,Jde),e(Jde,bwo),e(q2,vwo),e(q2,Hj),e(Hj,Fwo),e(q2,Two),e(W,Mwo),e(W,N2),e(N2,Yde),e(Yde,Ewo),e(N2,Cwo),e(N2,Uj),e(Uj,wwo),e(N2,Awo),e(W,ywo),e(W,j2),e(j2,Kde),e(Kde,Lwo),e(j2,xwo),e(j2,Jj),e(Jj,$wo),e(j2,kwo),e(W,Swo),e(W,D2),e(D2,Zde),e(Zde,Rwo),e(D2,Pwo),e(D2,Yj),e(Yj,Bwo),e(D2,Iwo),e(W,qwo),e(W,G2),e(G2,ece),e(ece,Nwo),e(G2,jwo),e(G2,Kj),e(Kj,Dwo),e(G2,Gwo),e(W,Owo),e(W,O2),e(O2,oce),e(oce,Vwo),e(O2,Xwo),e(O2,Zj),e(Zj,zwo),e(O2,Wwo),e(W,Qwo),e(W,V2),e(V2,rce),e(rce,Hwo),e(V2,Uwo),e(V2,eD),e(eD,Jwo),e(V2,Ywo),e(W,Kwo),e(W,X2),e(X2,tce),e(tce,Zwo),e(X2,e0o),e(X2,oD),e(oD,o0o),e(X2,r0o),e(W,t0o),e(W,z2),e(z2,ace),e(ace,a0o),e(z2,n0o),e(z2,rD),e(rD,s0o),e(z2,l0o),e(W,i0o),e(W,W2),e(W2,nce),e(nce,d0o),e(W2,c0o),e(W2,tD),e(tD,f0o),e(W2,m0o),e(W,g0o),e(W,Q2),e(Q2,sce),e(sce,h0o),e(Q2,p0o),e(Q2,aD),e(aD,_0o),e(Q2,u0o),e(W,b0o),e(W,H2),e(H2,lce),e(lce,v0o),e(H2,F0o),e(H2,nD),e(nD,T0o),e(H2,M0o),e(W,E0o),e(W,U2),e(U2,ice),e(ice,C0o),e(U2,w0o),e(U2,sD),e(sD,A0o),e(U2,y0o),e(W,L0o),e(W,J2),e(J2,dce),e(dce,x0o),e(J2,$0o),e(J2,lD),e(lD,k0o),e(J2,S0o),e(W,R0o),e(W,Y2),e(Y2,cce),e(cce,P0o),e(Y2,B0o),e(Y2,iD),e(iD,I0o),e(Y2,q0o),e(W,N0o),e(W,K2),e(K2,fce),e(fce,j0o),e(K2,D0o),e(K2,dD),e(dD,G0o),e(K2,O0o),e(W,V0o),e(W,Z2),e(Z2,mce),e(mce,X0o),e(Z2,z0o),e(Z2,cD),e(cD,W0o),e(Z2,Q0o),e(W,H0o),e(W,e1),e(e1,gce),e(gce,U0o),e(e1,J0o),e(e1,fD),e(fD,Y0o),e(e1,K0o),e(W,Z0o),e(W,o1),e(o1,hce),e(hce,eAo),e(o1,oAo),e(o1,mD),e(mD,rAo),e(o1,tAo),e(W,aAo),e(W,r1),e(r1,pce),e(pce,nAo),e(r1,sAo),e(r1,_ce),e(_ce,lAo),e(r1,iAo),e(W,dAo),e(W,t1),e(t1,uce),e(uce,cAo),e(t1,fAo),e(t1,gD),e(gD,mAo),e(t1,gAo),e(W,hAo),e(W,a1),e(a1,bce),e(bce,pAo),e(a1,_Ao),e(a1,hD),e(hD,uAo),e(a1,bAo),e(W,vAo),e(W,n1),e(n1,vce),e(vce,FAo),e(n1,TAo),e(n1,pD),e(pD,MAo),e(n1,EAo),e(W,CAo),e(W,s1),e(s1,Fce),e(Fce,wAo),e(s1,AAo),e(s1,_D),e(_D,yAo),e(s1,LAo),e(Ze,xAo),e(Ze,l1),e(l1,$Ao),e(l1,Tce),e(Tce,kAo),e(l1,SAo),e(l1,Mce),e(Mce,RAo),e(Ze,PAo),M(i1,Ze,null),b(f,wqe,u),b(f,qi,u),e(qi,d1),e(d1,Ece),M(lA,Ece,null),e(qi,BAo),e(qi,Cce),e(Cce,IAo),b(f,Aqe,u),b(f,So,u),M(iA,So,null),e(So,qAo),e(So,Ni),e(Ni,NAo),e(Ni,uD),e(uD,jAo),e(Ni,DAo),e(Ni,bD),e(bD,GAo),e(Ni,OAo),e(So,VAo),e(So,dA),e(dA,XAo),e(dA,wce),e(wce,zAo),e(dA,WAo),e(So,QAo),e(So,lt),M(cA,lt,null),e(lt,HAo),e(lt,Ace),e(Ace,UAo),e(lt,JAo),e(lt,ji),e(ji,YAo),e(ji,yce),e(yce,KAo),e(ji,ZAo),e(ji,vD),e(vD,eyo),e(ji,oyo),e(lt,ryo),M(c1,lt,null),e(So,tyo),e(So,eo),M(fA,eo,null),e(eo,ayo),e(eo,Lce),e(Lce,nyo),e(eo,syo),e(eo,Sa),e(Sa,lyo),e(Sa,xce),e(xce,iyo),e(Sa,dyo),e(Sa,$ce),e($ce,cyo),e(Sa,fyo),e(Sa,kce),e(kce,myo),e(Sa,gyo),e(eo,hyo),e(eo,he),e(he,f1),e(f1,Sce),e(Sce,pyo),e(f1,_yo),e(f1,FD),e(FD,uyo),e(f1,byo),e(he,vyo),e(he,m1),e(m1,Rce),e(Rce,Fyo),e(m1,Tyo),e(m1,TD),e(TD,Myo),e(m1,Eyo),e(he,Cyo),e(he,g1),e(g1,Pce),e(Pce,wyo),e(g1,Ayo),e(g1,MD),e(MD,yyo),e(g1,Lyo),e(he,xyo),e(he,h1),e(h1,Bce),e(Bce,$yo),e(h1,kyo),e(h1,ED),e(ED,Syo),e(h1,Ryo),e(he,Pyo),e(he,p1),e(p1,Ice),e(Ice,Byo),e(p1,Iyo),e(p1,CD),e(CD,qyo),e(p1,Nyo),e(he,jyo),e(he,_1),e(_1,qce),e(qce,Dyo),e(_1,Gyo),e(_1,wD),e(wD,Oyo),e(_1,Vyo),e(he,Xyo),e(he,u1),e(u1,Nce),e(Nce,zyo),e(u1,Wyo),e(u1,AD),e(AD,Qyo),e(u1,Hyo),e(he,Uyo),e(he,b1),e(b1,jce),e(jce,Jyo),e(b1,Yyo),e(b1,yD),e(yD,Kyo),e(b1,Zyo),e(he,eLo),e(he,v1),e(v1,Dce),e(Dce,oLo),e(v1,rLo),e(v1,LD),e(LD,tLo),e(v1,aLo),e(he,nLo),e(he,F1),e(F1,Gce),e(Gce,sLo),e(F1,lLo),e(F1,xD),e(xD,iLo),e(F1,dLo),e(he,cLo),e(he,T1),e(T1,Oce),e(Oce,fLo),e(T1,mLo),e(T1,$D),e($D,gLo),e(T1,hLo),e(he,pLo),e(he,M1),e(M1,Vce),e(Vce,_Lo),e(M1,uLo),e(M1,kD),e(kD,bLo),e(M1,vLo),e(he,FLo),e(he,E1),e(E1,Xce),e(Xce,TLo),e(E1,MLo),e(E1,SD),e(SD,ELo),e(E1,CLo),e(he,wLo),e(he,C1),e(C1,zce),e(zce,ALo),e(C1,yLo),e(C1,RD),e(RD,LLo),e(C1,xLo),e(he,$Lo),e(he,w1),e(w1,Wce),e(Wce,kLo),e(w1,SLo),e(w1,PD),e(PD,RLo),e(w1,PLo),e(he,BLo),e(he,A1),e(A1,Qce),e(Qce,ILo),e(A1,qLo),e(A1,BD),e(BD,NLo),e(A1,jLo),e(he,DLo),e(he,y1),e(y1,Hce),e(Hce,GLo),e(y1,OLo),e(y1,ID),e(ID,VLo),e(y1,XLo),e(eo,zLo),e(eo,L1),e(L1,WLo),e(L1,Uce),e(Uce,QLo),e(L1,HLo),e(L1,Jce),e(Jce,ULo),e(eo,JLo),M(x1,eo,null),b(f,yqe,u),b(f,Di,u),e(Di,$1),e($1,Yce),M(mA,Yce,null),e(Di,YLo),e(Di,Kce),e(Kce,KLo),b(f,Lqe,u),b(f,Ro,u),M(gA,Ro,null),e(Ro,ZLo),e(Ro,Gi),e(Gi,e8o),e(Gi,qD),e(qD,o8o),e(Gi,r8o),e(Gi,ND),e(ND,t8o),e(Gi,a8o),e(Ro,n8o),e(Ro,hA),e(hA,s8o),e(hA,Zce),e(Zce,l8o),e(hA,i8o),e(Ro,d8o),e(Ro,it),M(pA,it,null),e(it,c8o),e(it,efe),e(efe,f8o),e(it,m8o),e(it,Oi),e(Oi,g8o),e(Oi,ofe),e(ofe,h8o),e(Oi,p8o),e(Oi,jD),e(jD,_8o),e(Oi,u8o),e(it,b8o),M(k1,it,null),e(Ro,v8o),e(Ro,oo),M(_A,oo,null),e(oo,F8o),e(oo,rfe),e(rfe,T8o),e(oo,M8o),e(oo,Ra),e(Ra,E8o),e(Ra,tfe),e(tfe,C8o),e(Ra,w8o),e(Ra,afe),e(afe,A8o),e(Ra,y8o),e(Ra,nfe),e(nfe,L8o),e(Ra,x8o),e(oo,$8o),e(oo,q),e(q,S1),e(S1,sfe),e(sfe,k8o),e(S1,S8o),e(S1,DD),e(DD,R8o),e(S1,P8o),e(q,B8o),e(q,R1),e(R1,lfe),e(lfe,I8o),e(R1,q8o),e(R1,GD),e(GD,N8o),e(R1,j8o),e(q,D8o),e(q,P1),e(P1,ife),e(ife,G8o),e(P1,O8o),e(P1,OD),e(OD,V8o),e(P1,X8o),e(q,z8o),e(q,B1),e(B1,dfe),e(dfe,W8o),e(B1,Q8o),e(B1,VD),e(VD,H8o),e(B1,U8o),e(q,J8o),e(q,I1),e(I1,cfe),e(cfe,Y8o),e(I1,K8o),e(I1,XD),e(XD,Z8o),e(I1,exo),e(q,oxo),e(q,q1),e(q1,ffe),e(ffe,rxo),e(q1,txo),e(q1,zD),e(zD,axo),e(q1,nxo),e(q,sxo),e(q,N1),e(N1,mfe),e(mfe,lxo),e(N1,ixo),e(N1,WD),e(WD,dxo),e(N1,cxo),e(q,fxo),e(q,j1),e(j1,gfe),e(gfe,mxo),e(j1,gxo),e(j1,QD),e(QD,hxo),e(j1,pxo),e(q,_xo),e(q,D1),e(D1,hfe),e(hfe,uxo),e(D1,bxo),e(D1,HD),e(HD,vxo),e(D1,Fxo),e(q,Txo),e(q,G1),e(G1,pfe),e(pfe,Mxo),e(G1,Exo),e(G1,UD),e(UD,Cxo),e(G1,wxo),e(q,Axo),e(q,O1),e(O1,_fe),e(_fe,yxo),e(O1,Lxo),e(O1,JD),e(JD,xxo),e(O1,$xo),e(q,kxo),e(q,V1),e(V1,ufe),e(ufe,Sxo),e(V1,Rxo),e(V1,YD),e(YD,Pxo),e(V1,Bxo),e(q,Ixo),e(q,X1),e(X1,bfe),e(bfe,qxo),e(X1,Nxo),e(X1,KD),e(KD,jxo),e(X1,Dxo),e(q,Gxo),e(q,z1),e(z1,vfe),e(vfe,Oxo),e(z1,Vxo),e(z1,ZD),e(ZD,Xxo),e(z1,zxo),e(q,Wxo),e(q,W1),e(W1,Ffe),e(Ffe,Qxo),e(W1,Hxo),e(W1,eG),e(eG,Uxo),e(W1,Jxo),e(q,Yxo),e(q,Q1),e(Q1,Tfe),e(Tfe,Kxo),e(Q1,Zxo),e(Q1,oG),e(oG,e$o),e(Q1,o$o),e(q,r$o),e(q,H1),e(H1,Mfe),e(Mfe,t$o),e(H1,a$o),e(H1,rG),e(rG,n$o),e(H1,s$o),e(q,l$o),e(q,U1),e(U1,Efe),e(Efe,i$o),e(U1,d$o),e(U1,tG),e(tG,c$o),e(U1,f$o),e(q,m$o),e(q,J1),e(J1,Cfe),e(Cfe,g$o),e(J1,h$o),e(J1,aG),e(aG,p$o),e(J1,_$o),e(q,u$o),e(q,Y1),e(Y1,wfe),e(wfe,b$o),e(Y1,v$o),e(Y1,nG),e(nG,F$o),e(Y1,T$o),e(q,M$o),e(q,K1),e(K1,Afe),e(Afe,E$o),e(K1,C$o),e(K1,sG),e(sG,w$o),e(K1,A$o),e(q,y$o),e(q,Z1),e(Z1,yfe),e(yfe,L$o),e(Z1,x$o),e(Z1,lG),e(lG,$$o),e(Z1,k$o),e(q,S$o),e(q,eb),e(eb,Lfe),e(Lfe,R$o),e(eb,P$o),e(eb,iG),e(iG,B$o),e(eb,I$o),e(q,q$o),e(q,ob),e(ob,xfe),e(xfe,N$o),e(ob,j$o),e(ob,dG),e(dG,D$o),e(ob,G$o),e(q,O$o),e(q,rb),e(rb,$fe),e($fe,V$o),e(rb,X$o),e(rb,cG),e(cG,z$o),e(rb,W$o),e(q,Q$o),e(q,tb),e(tb,kfe),e(kfe,H$o),e(tb,U$o),e(tb,fG),e(fG,J$o),e(tb,Y$o),e(q,K$o),e(q,ab),e(ab,Sfe),e(Sfe,Z$o),e(ab,eko),e(ab,mG),e(mG,oko),e(ab,rko),e(q,tko),e(q,nb),e(nb,Rfe),e(Rfe,ako),e(nb,nko),e(nb,gG),e(gG,sko),e(nb,lko),e(q,iko),e(q,sb),e(sb,Pfe),e(Pfe,dko),e(sb,cko),e(sb,hG),e(hG,fko),e(sb,mko),e(q,gko),e(q,lb),e(lb,Bfe),e(Bfe,hko),e(lb,pko),e(lb,pG),e(pG,_ko),e(lb,uko),e(q,bko),e(q,ib),e(ib,Ife),e(Ife,vko),e(ib,Fko),e(ib,_G),e(_G,Tko),e(ib,Mko),e(q,Eko),e(q,db),e(db,qfe),e(qfe,Cko),e(db,wko),e(db,uG),e(uG,Ako),e(db,yko),e(q,Lko),e(q,cb),e(cb,Nfe),e(Nfe,xko),e(cb,$ko),e(cb,bG),e(bG,kko),e(cb,Sko),e(q,Rko),e(q,fb),e(fb,jfe),e(jfe,Pko),e(fb,Bko),e(fb,vG),e(vG,Iko),e(fb,qko),e(q,Nko),e(q,mb),e(mb,Dfe),e(Dfe,jko),e(mb,Dko),e(mb,FG),e(FG,Gko),e(mb,Oko),e(q,Vko),e(q,gb),e(gb,Gfe),e(Gfe,Xko),e(gb,zko),e(gb,TG),e(TG,Wko),e(gb,Qko),e(q,Hko),e(q,hb),e(hb,Ofe),e(Ofe,Uko),e(hb,Jko),e(hb,MG),e(MG,Yko),e(hb,Kko),e(q,Zko),e(q,pb),e(pb,Vfe),e(Vfe,eSo),e(pb,oSo),e(pb,EG),e(EG,rSo),e(pb,tSo),e(q,aSo),e(q,_b),e(_b,Xfe),e(Xfe,nSo),e(_b,sSo),e(_b,CG),e(CG,lSo),e(_b,iSo),e(q,dSo),e(q,ub),e(ub,zfe),e(zfe,cSo),e(ub,fSo),e(ub,wG),e(wG,mSo),e(ub,gSo),e(q,hSo),e(q,bb),e(bb,Wfe),e(Wfe,pSo),e(bb,_So),e(bb,AG),e(AG,uSo),e(bb,bSo),e(q,vSo),e(q,vb),e(vb,Qfe),e(Qfe,FSo),e(vb,TSo),e(vb,yG),e(yG,MSo),e(vb,ESo),e(q,CSo),e(q,Fb),e(Fb,Hfe),e(Hfe,wSo),e(Fb,ASo),e(Fb,LG),e(LG,ySo),e(Fb,LSo),e(q,xSo),e(q,Tb),e(Tb,Ufe),e(Ufe,$So),e(Tb,kSo),e(Tb,xG),e(xG,SSo),e(Tb,RSo),e(q,PSo),e(q,Mb),e(Mb,Jfe),e(Jfe,BSo),e(Mb,ISo),e(Mb,$G),e($G,qSo),e(Mb,NSo),e(q,jSo),e(q,Eb),e(Eb,Yfe),e(Yfe,DSo),e(Eb,GSo),e(Eb,kG),e(kG,OSo),e(Eb,VSo),e(oo,XSo),e(oo,Cb),e(Cb,zSo),e(Cb,Kfe),e(Kfe,WSo),e(Cb,QSo),e(Cb,Zfe),e(Zfe,HSo),e(oo,USo),M(wb,oo,null),b(f,xqe,u),b(f,Vi,u),e(Vi,Ab),e(Ab,eme),M(uA,eme,null),e(Vi,JSo),e(Vi,ome),e(ome,YSo),b(f,$qe,u),b(f,Po,u),M(bA,Po,null),e(Po,KSo),e(Po,Xi),e(Xi,ZSo),e(Xi,SG),e(SG,eRo),e(Xi,oRo),e(Xi,RG),e(RG,rRo),e(Xi,tRo),e(Po,aRo),e(Po,vA),e(vA,nRo),e(vA,rme),e(rme,sRo),e(vA,lRo),e(Po,iRo),e(Po,dt),M(FA,dt,null),e(dt,dRo),e(dt,tme),e(tme,cRo),e(dt,fRo),e(dt,zi),e(zi,mRo),e(zi,ame),e(ame,gRo),e(zi,hRo),e(zi,PG),e(PG,pRo),e(zi,_Ro),e(dt,uRo),M(yb,dt,null),e(Po,bRo),e(Po,ro),M(TA,ro,null),e(ro,vRo),e(ro,nme),e(nme,FRo),e(ro,TRo),e(ro,Pa),e(Pa,MRo),e(Pa,sme),e(sme,ERo),e(Pa,CRo),e(Pa,lme),e(lme,wRo),e(Pa,ARo),e(Pa,ime),e(ime,yRo),e(Pa,LRo),e(ro,xRo),e(ro,Y),e(Y,Lb),e(Lb,dme),e(dme,$Ro),e(Lb,kRo),e(Lb,BG),e(BG,SRo),e(Lb,RRo),e(Y,PRo),e(Y,xb),e(xb,cme),e(cme,BRo),e(xb,IRo),e(xb,IG),e(IG,qRo),e(xb,NRo),e(Y,jRo),e(Y,$b),e($b,fme),e(fme,DRo),e($b,GRo),e($b,qG),e(qG,ORo),e($b,VRo),e(Y,XRo),e(Y,kb),e(kb,mme),e(mme,zRo),e(kb,WRo),e(kb,NG),e(NG,QRo),e(kb,HRo),e(Y,URo),e(Y,Sb),e(Sb,gme),e(gme,JRo),e(Sb,YRo),e(Sb,jG),e(jG,KRo),e(Sb,ZRo),e(Y,ePo),e(Y,Rb),e(Rb,hme),e(hme,oPo),e(Rb,rPo),e(Rb,DG),e(DG,tPo),e(Rb,aPo),e(Y,nPo),e(Y,Pb),e(Pb,pme),e(pme,sPo),e(Pb,lPo),e(Pb,GG),e(GG,iPo),e(Pb,dPo),e(Y,cPo),e(Y,Bb),e(Bb,_me),e(_me,fPo),e(Bb,mPo),e(Bb,OG),e(OG,gPo),e(Bb,hPo),e(Y,pPo),e(Y,Ib),e(Ib,ume),e(ume,_Po),e(Ib,uPo),e(Ib,VG),e(VG,bPo),e(Ib,vPo),e(Y,FPo),e(Y,qb),e(qb,bme),e(bme,TPo),e(qb,MPo),e(qb,XG),e(XG,EPo),e(qb,CPo),e(Y,wPo),e(Y,Nb),e(Nb,vme),e(vme,APo),e(Nb,yPo),e(Nb,zG),e(zG,LPo),e(Nb,xPo),e(Y,$Po),e(Y,jb),e(jb,Fme),e(Fme,kPo),e(jb,SPo),e(jb,WG),e(WG,RPo),e(jb,PPo),e(Y,BPo),e(Y,Db),e(Db,Tme),e(Tme,IPo),e(Db,qPo),e(Db,QG),e(QG,NPo),e(Db,jPo),e(Y,DPo),e(Y,Gb),e(Gb,Mme),e(Mme,GPo),e(Gb,OPo),e(Gb,HG),e(HG,VPo),e(Gb,XPo),e(Y,zPo),e(Y,Ob),e(Ob,Eme),e(Eme,WPo),e(Ob,QPo),e(Ob,UG),e(UG,HPo),e(Ob,UPo),e(Y,JPo),e(Y,Vb),e(Vb,Cme),e(Cme,YPo),e(Vb,KPo),e(Vb,JG),e(JG,ZPo),e(Vb,eBo),e(Y,oBo),e(Y,Xb),e(Xb,wme),e(wme,rBo),e(Xb,tBo),e(Xb,YG),e(YG,aBo),e(Xb,nBo),e(Y,sBo),e(Y,zb),e(zb,Ame),e(Ame,lBo),e(zb,iBo),e(zb,KG),e(KG,dBo),e(zb,cBo),e(Y,fBo),e(Y,Wb),e(Wb,yme),e(yme,mBo),e(Wb,gBo),e(Wb,ZG),e(ZG,hBo),e(Wb,pBo),e(Y,_Bo),e(Y,Qb),e(Qb,Lme),e(Lme,uBo),e(Qb,bBo),e(Qb,eO),e(eO,vBo),e(Qb,FBo),e(Y,TBo),e(Y,Hb),e(Hb,xme),e(xme,MBo),e(Hb,EBo),e(Hb,oO),e(oO,CBo),e(Hb,wBo),e(Y,ABo),e(Y,Ub),e(Ub,$me),e($me,yBo),e(Ub,LBo),e(Ub,rO),e(rO,xBo),e(Ub,$Bo),e(Y,kBo),e(Y,Jb),e(Jb,kme),e(kme,SBo),e(Jb,RBo),e(Jb,tO),e(tO,PBo),e(Jb,BBo),e(Y,IBo),e(Y,Yb),e(Yb,Sme),e(Sme,qBo),e(Yb,NBo),e(Yb,aO),e(aO,jBo),e(Yb,DBo),e(Y,GBo),e(Y,Kb),e(Kb,Rme),e(Rme,OBo),e(Kb,VBo),e(Kb,nO),e(nO,XBo),e(Kb,zBo),e(Y,WBo),e(Y,Zb),e(Zb,Pme),e(Pme,QBo),e(Zb,HBo),e(Zb,sO),e(sO,UBo),e(Zb,JBo),e(Y,YBo),e(Y,ev),e(ev,Bme),e(Bme,KBo),e(ev,ZBo),e(ev,lO),e(lO,eIo),e(ev,oIo),e(Y,rIo),e(Y,ov),e(ov,Ime),e(Ime,tIo),e(ov,aIo),e(ov,iO),e(iO,nIo),e(ov,sIo),e(Y,lIo),e(Y,rv),e(rv,qme),e(qme,iIo),e(rv,dIo),e(rv,dO),e(dO,cIo),e(rv,fIo),e(ro,mIo),e(ro,tv),e(tv,gIo),e(tv,Nme),e(Nme,hIo),e(tv,pIo),e(tv,jme),e(jme,_Io),e(ro,uIo),M(av,ro,null),b(f,kqe,u),b(f,Wi,u),e(Wi,nv),e(nv,Dme),M(MA,Dme,null),e(Wi,bIo),e(Wi,Gme),e(Gme,vIo),b(f,Sqe,u),b(f,Bo,u),M(EA,Bo,null),e(Bo,FIo),e(Bo,Qi),e(Qi,TIo),e(Qi,cO),e(cO,MIo),e(Qi,EIo),e(Qi,fO),e(fO,CIo),e(Qi,wIo),e(Bo,AIo),e(Bo,CA),e(CA,yIo),e(CA,Ome),e(Ome,LIo),e(CA,xIo),e(Bo,$Io),e(Bo,ct),M(wA,ct,null),e(ct,kIo),e(ct,Vme),e(Vme,SIo),e(ct,RIo),e(ct,Hi),e(Hi,PIo),e(Hi,Xme),e(Xme,BIo),e(Hi,IIo),e(Hi,mO),e(mO,qIo),e(Hi,NIo),e(ct,jIo),M(sv,ct,null),e(Bo,DIo),e(Bo,to),M(AA,to,null),e(to,GIo),e(to,zme),e(zme,OIo),e(to,VIo),e(to,Ba),e(Ba,XIo),e(Ba,Wme),e(Wme,zIo),e(Ba,WIo),e(Ba,Qme),e(Qme,QIo),e(Ba,HIo),e(Ba,Hme),e(Hme,UIo),e(Ba,JIo),e(to,YIo),e(to,Yr),e(Yr,lv),e(lv,Ume),e(Ume,KIo),e(lv,ZIo),e(lv,gO),e(gO,eqo),e(lv,oqo),e(Yr,rqo),e(Yr,iv),e(iv,Jme),e(Jme,tqo),e(iv,aqo),e(iv,hO),e(hO,nqo),e(iv,sqo),e(Yr,lqo),e(Yr,dv),e(dv,Yme),e(Yme,iqo),e(dv,dqo),e(dv,pO),e(pO,cqo),e(dv,fqo),e(Yr,mqo),e(Yr,cv),e(cv,Kme),e(Kme,gqo),e(cv,hqo),e(cv,_O),e(_O,pqo),e(cv,_qo),e(Yr,uqo),e(Yr,fv),e(fv,Zme),e(Zme,bqo),e(fv,vqo),e(fv,uO),e(uO,Fqo),e(fv,Tqo),e(to,Mqo),e(to,mv),e(mv,Eqo),e(mv,ege),e(ege,Cqo),e(mv,wqo),e(mv,oge),e(oge,Aqo),e(to,yqo),M(gv,to,null),b(f,Rqe,u),b(f,Ui,u),e(Ui,hv),e(hv,rge),M(yA,rge,null),e(Ui,Lqo),e(Ui,tge),e(tge,xqo),b(f,Pqe,u),b(f,Io,u),M(LA,Io,null),e(Io,$qo),e(Io,Ji),e(Ji,kqo),e(Ji,bO),e(bO,Sqo),e(Ji,Rqo),e(Ji,vO),e(vO,Pqo),e(Ji,Bqo),e(Io,Iqo),e(Io,xA),e(xA,qqo),e(xA,age),e(age,Nqo),e(xA,jqo),e(Io,Dqo),e(Io,ft),M($A,ft,null),e(ft,Gqo),e(ft,nge),e(nge,Oqo),e(ft,Vqo),e(ft,Yi),e(Yi,Xqo),e(Yi,sge),e(sge,zqo),e(Yi,Wqo),e(Yi,FO),e(FO,Qqo),e(Yi,Hqo),e(ft,Uqo),M(pv,ft,null),e(Io,Jqo),e(Io,ao),M(kA,ao,null),e(ao,Yqo),e(ao,lge),e(lge,Kqo),e(ao,Zqo),e(ao,Ia),e(Ia,eNo),e(Ia,ige),e(ige,oNo),e(Ia,rNo),e(Ia,dge),e(dge,tNo),e(Ia,aNo),e(Ia,cge),e(cge,nNo),e(Ia,sNo),e(ao,lNo),e(ao,U),e(U,_v),e(_v,fge),e(fge,iNo),e(_v,dNo),e(_v,TO),e(TO,cNo),e(_v,fNo),e(U,mNo),e(U,uv),e(uv,mge),e(mge,gNo),e(uv,hNo),e(uv,MO),e(MO,pNo),e(uv,_No),e(U,uNo),e(U,bv),e(bv,gge),e(gge,bNo),e(bv,vNo),e(bv,EO),e(EO,FNo),e(bv,TNo),e(U,MNo),e(U,vv),e(vv,hge),e(hge,ENo),e(vv,CNo),e(vv,CO),e(CO,wNo),e(vv,ANo),e(U,yNo),e(U,Fv),e(Fv,pge),e(pge,LNo),e(Fv,xNo),e(Fv,wO),e(wO,$No),e(Fv,kNo),e(U,SNo),e(U,Tv),e(Tv,_ge),e(_ge,RNo),e(Tv,PNo),e(Tv,AO),e(AO,BNo),e(Tv,INo),e(U,qNo),e(U,Mv),e(Mv,uge),e(uge,NNo),e(Mv,jNo),e(Mv,yO),e(yO,DNo),e(Mv,GNo),e(U,ONo),e(U,Ev),e(Ev,bge),e(bge,VNo),e(Ev,XNo),e(Ev,LO),e(LO,zNo),e(Ev,WNo),e(U,QNo),e(U,Cv),e(Cv,vge),e(vge,HNo),e(Cv,UNo),e(Cv,xO),e(xO,JNo),e(Cv,YNo),e(U,KNo),e(U,wv),e(wv,Fge),e(Fge,ZNo),e(wv,ejo),e(wv,$O),e($O,ojo),e(wv,rjo),e(U,tjo),e(U,Av),e(Av,Tge),e(Tge,ajo),e(Av,njo),e(Av,kO),e(kO,sjo),e(Av,ljo),e(U,ijo),e(U,yv),e(yv,Mge),e(Mge,djo),e(yv,cjo),e(yv,SO),e(SO,fjo),e(yv,mjo),e(U,gjo),e(U,Lv),e(Lv,Ege),e(Ege,hjo),e(Lv,pjo),e(Lv,RO),e(RO,_jo),e(Lv,ujo),e(U,bjo),e(U,xv),e(xv,Cge),e(Cge,vjo),e(xv,Fjo),e(xv,PO),e(PO,Tjo),e(xv,Mjo),e(U,Ejo),e(U,$v),e($v,wge),e(wge,Cjo),e($v,wjo),e($v,BO),e(BO,Ajo),e($v,yjo),e(U,Ljo),e(U,kv),e(kv,Age),e(Age,xjo),e(kv,$jo),e(kv,IO),e(IO,kjo),e(kv,Sjo),e(U,Rjo),e(U,Sv),e(Sv,yge),e(yge,Pjo),e(Sv,Bjo),e(Sv,qO),e(qO,Ijo),e(Sv,qjo),e(U,Njo),e(U,Rv),e(Rv,Lge),e(Lge,jjo),e(Rv,Djo),e(Rv,NO),e(NO,Gjo),e(Rv,Ojo),e(U,Vjo),e(U,Pv),e(Pv,xge),e(xge,Xjo),e(Pv,zjo),e(Pv,jO),e(jO,Wjo),e(Pv,Qjo),e(U,Hjo),e(U,Bv),e(Bv,$ge),e($ge,Ujo),e(Bv,Jjo),e(Bv,DO),e(DO,Yjo),e(Bv,Kjo),e(U,Zjo),e(U,Iv),e(Iv,kge),e(kge,eDo),e(Iv,oDo),e(Iv,GO),e(GO,rDo),e(Iv,tDo),e(U,aDo),e(U,qv),e(qv,Sge),e(Sge,nDo),e(qv,sDo),e(qv,OO),e(OO,lDo),e(qv,iDo),e(U,dDo),e(U,Nv),e(Nv,Rge),e(Rge,cDo),e(Nv,fDo),e(Nv,VO),e(VO,mDo),e(Nv,gDo),e(U,hDo),e(U,jv),e(jv,Pge),e(Pge,pDo),e(jv,_Do),e(jv,XO),e(XO,uDo),e(jv,bDo),e(U,vDo),e(U,Dv),e(Dv,Bge),e(Bge,FDo),e(Dv,TDo),e(Dv,zO),e(zO,MDo),e(Dv,EDo),e(U,CDo),e(U,Gv),e(Gv,Ige),e(Ige,wDo),e(Gv,ADo),e(Gv,WO),e(WO,yDo),e(Gv,LDo),e(U,xDo),e(U,Ov),e(Ov,qge),e(qge,$Do),e(Ov,kDo),e(Ov,QO),e(QO,SDo),e(Ov,RDo),e(U,PDo),e(U,Vv),e(Vv,Nge),e(Nge,BDo),e(Vv,IDo),e(Vv,HO),e(HO,qDo),e(Vv,NDo),e(U,jDo),e(U,Xv),e(Xv,jge),e(jge,DDo),e(Xv,GDo),e(Xv,UO),e(UO,ODo),e(Xv,VDo),e(U,XDo),e(U,zv),e(zv,Dge),e(Dge,zDo),e(zv,WDo),e(zv,JO),e(JO,QDo),e(zv,HDo),e(U,UDo),e(U,Wv),e(Wv,Gge),e(Gge,JDo),e(Wv,YDo),e(Wv,YO),e(YO,KDo),e(Wv,ZDo),e(U,eGo),e(U,Qv),e(Qv,Oge),e(Oge,oGo),e(Qv,rGo),e(Qv,KO),e(KO,tGo),e(Qv,aGo),e(U,nGo),e(U,Hv),e(Hv,Vge),e(Vge,sGo),e(Hv,lGo),e(Hv,ZO),e(ZO,iGo),e(Hv,dGo),e(ao,cGo),e(ao,Uv),e(Uv,fGo),e(Uv,Xge),e(Xge,mGo),e(Uv,gGo),e(Uv,zge),e(zge,hGo),e(ao,pGo),M(Jv,ao,null),b(f,Bqe,u),b(f,Ki,u),e(Ki,Yv),e(Yv,Wge),M(SA,Wge,null),e(Ki,_Go),e(Ki,Qge),e(Qge,uGo),b(f,Iqe,u),b(f,qo,u),M(RA,qo,null),e(qo,bGo),e(qo,Zi),e(Zi,vGo),e(Zi,eV),e(eV,FGo),e(Zi,TGo),e(Zi,oV),e(oV,MGo),e(Zi,EGo),e(qo,CGo),e(qo,PA),e(PA,wGo),e(PA,Hge),e(Hge,AGo),e(PA,yGo),e(qo,LGo),e(qo,mt),M(BA,mt,null),e(mt,xGo),e(mt,Uge),e(Uge,$Go),e(mt,kGo),e(mt,ed),e(ed,SGo),e(ed,Jge),e(Jge,RGo),e(ed,PGo),e(ed,rV),e(rV,BGo),e(ed,IGo),e(mt,qGo),M(Kv,mt,null),e(qo,NGo),e(qo,no),M(IA,no,null),e(no,jGo),e(no,Yge),e(Yge,DGo),e(no,GGo),e(no,qa),e(qa,OGo),e(qa,Kge),e(Kge,VGo),e(qa,XGo),e(qa,Zge),e(Zge,zGo),e(qa,WGo),e(qa,ehe),e(ehe,QGo),e(qa,HGo),e(no,UGo),e(no,V),e(V,Zv),e(Zv,ohe),e(ohe,JGo),e(Zv,YGo),e(Zv,tV),e(tV,KGo),e(Zv,ZGo),e(V,eOo),e(V,eF),e(eF,rhe),e(rhe,oOo),e(eF,rOo),e(eF,aV),e(aV,tOo),e(eF,aOo),e(V,nOo),e(V,oF),e(oF,the),e(the,sOo),e(oF,lOo),e(oF,nV),e(nV,iOo),e(oF,dOo),e(V,cOo),e(V,rF),e(rF,ahe),e(ahe,fOo),e(rF,mOo),e(rF,sV),e(sV,gOo),e(rF,hOo),e(V,pOo),e(V,tF),e(tF,nhe),e(nhe,_Oo),e(tF,uOo),e(tF,lV),e(lV,bOo),e(tF,vOo),e(V,FOo),e(V,aF),e(aF,she),e(she,TOo),e(aF,MOo),e(aF,iV),e(iV,EOo),e(aF,COo),e(V,wOo),e(V,nF),e(nF,lhe),e(lhe,AOo),e(nF,yOo),e(nF,dV),e(dV,LOo),e(nF,xOo),e(V,$Oo),e(V,sF),e(sF,ihe),e(ihe,kOo),e(sF,SOo),e(sF,cV),e(cV,ROo),e(sF,POo),e(V,BOo),e(V,lF),e(lF,dhe),e(dhe,IOo),e(lF,qOo),e(lF,fV),e(fV,NOo),e(lF,jOo),e(V,DOo),e(V,iF),e(iF,che),e(che,GOo),e(iF,OOo),e(iF,mV),e(mV,VOo),e(iF,XOo),e(V,zOo),e(V,dF),e(dF,fhe),e(fhe,WOo),e(dF,QOo),e(dF,gV),e(gV,HOo),e(dF,UOo),e(V,JOo),e(V,cF),e(cF,mhe),e(mhe,YOo),e(cF,KOo),e(cF,hV),e(hV,ZOo),e(cF,eVo),e(V,oVo),e(V,fF),e(fF,ghe),e(ghe,rVo),e(fF,tVo),e(fF,pV),e(pV,aVo),e(fF,nVo),e(V,sVo),e(V,mF),e(mF,hhe),e(hhe,lVo),e(mF,iVo),e(mF,_V),e(_V,dVo),e(mF,cVo),e(V,fVo),e(V,gF),e(gF,phe),e(phe,mVo),e(gF,gVo),e(gF,uV),e(uV,hVo),e(gF,pVo),e(V,_Vo),e(V,hF),e(hF,_he),e(_he,uVo),e(hF,bVo),e(hF,bV),e(bV,vVo),e(hF,FVo),e(V,TVo),e(V,pF),e(pF,uhe),e(uhe,MVo),e(pF,EVo),e(pF,vV),e(vV,CVo),e(pF,wVo),e(V,AVo),e(V,_F),e(_F,bhe),e(bhe,yVo),e(_F,LVo),e(_F,FV),e(FV,xVo),e(_F,$Vo),e(V,kVo),e(V,uF),e(uF,vhe),e(vhe,SVo),e(uF,RVo),e(uF,TV),e(TV,PVo),e(uF,BVo),e(V,IVo),e(V,bF),e(bF,Fhe),e(Fhe,qVo),e(bF,NVo),e(bF,MV),e(MV,jVo),e(bF,DVo),e(V,GVo),e(V,vF),e(vF,The),e(The,OVo),e(vF,VVo),e(vF,EV),e(EV,XVo),e(vF,zVo),e(V,WVo),e(V,FF),e(FF,Mhe),e(Mhe,QVo),e(FF,HVo),e(FF,CV),e(CV,UVo),e(FF,JVo),e(V,YVo),e(V,TF),e(TF,Ehe),e(Ehe,KVo),e(TF,ZVo),e(TF,wV),e(wV,eXo),e(TF,oXo),e(V,rXo),e(V,MF),e(MF,Che),e(Che,tXo),e(MF,aXo),e(MF,AV),e(AV,nXo),e(MF,sXo),e(V,lXo),e(V,EF),e(EF,whe),e(whe,iXo),e(EF,dXo),e(EF,yV),e(yV,cXo),e(EF,fXo),e(V,mXo),e(V,CF),e(CF,Ahe),e(Ahe,gXo),e(CF,hXo),e(CF,LV),e(LV,pXo),e(CF,_Xo),e(V,uXo),e(V,wF),e(wF,yhe),e(yhe,bXo),e(wF,vXo),e(wF,xV),e(xV,FXo),e(wF,TXo),e(V,MXo),e(V,AF),e(AF,Lhe),e(Lhe,EXo),e(AF,CXo),e(AF,$V),e($V,wXo),e(AF,AXo),e(V,yXo),e(V,yF),e(yF,xhe),e(xhe,LXo),e(yF,xXo),e(yF,kV),e(kV,$Xo),e(yF,kXo),e(V,SXo),e(V,LF),e(LF,$he),e($he,RXo),e(LF,PXo),e(LF,SV),e(SV,BXo),e(LF,IXo),e(V,qXo),e(V,xF),e(xF,khe),e(khe,NXo),e(xF,jXo),e(xF,RV),e(RV,DXo),e(xF,GXo),e(V,OXo),e(V,$F),e($F,She),e(She,VXo),e($F,XXo),e($F,PV),e(PV,zXo),e($F,WXo),e(V,QXo),e(V,kF),e(kF,Rhe),e(Rhe,HXo),e(kF,UXo),e(kF,BV),e(BV,JXo),e(kF,YXo),e(V,KXo),e(V,SF),e(SF,Phe),e(Phe,ZXo),e(SF,ezo),e(SF,IV),e(IV,ozo),e(SF,rzo),e(V,tzo),e(V,RF),e(RF,Bhe),e(Bhe,azo),e(RF,nzo),e(RF,qV),e(qV,szo),e(RF,lzo),e(V,izo),e(V,PF),e(PF,Ihe),e(Ihe,dzo),e(PF,czo),e(PF,NV),e(NV,fzo),e(PF,mzo),e(V,gzo),e(V,BF),e(BF,qhe),e(qhe,hzo),e(BF,pzo),e(BF,jV),e(jV,_zo),e(BF,uzo),e(V,bzo),e(V,IF),e(IF,Nhe),e(Nhe,vzo),e(IF,Fzo),e(IF,DV),e(DV,Tzo),e(IF,Mzo),e(V,Ezo),e(V,qF),e(qF,jhe),e(jhe,Czo),e(qF,wzo),e(qF,GV),e(GV,Azo),e(qF,yzo),e(no,Lzo),e(no,NF),e(NF,xzo),e(NF,Dhe),e(Dhe,$zo),e(NF,kzo),e(NF,Ghe),e(Ghe,Szo),e(no,Rzo),M(jF,no,null),b(f,qqe,u),b(f,od,u),e(od,DF),e(DF,Ohe),M(qA,Ohe,null),e(od,Pzo),e(od,Vhe),e(Vhe,Bzo),b(f,Nqe,u),b(f,No,u),M(NA,No,null),e(No,Izo),e(No,rd),e(rd,qzo),e(rd,OV),e(OV,Nzo),e(rd,jzo),e(rd,VV),e(VV,Dzo),e(rd,Gzo),e(No,Ozo),e(No,jA),e(jA,Vzo),e(jA,Xhe),e(Xhe,Xzo),e(jA,zzo),e(No,Wzo),e(No,gt),M(DA,gt,null),e(gt,Qzo),e(gt,zhe),e(zhe,Hzo),e(gt,Uzo),e(gt,td),e(td,Jzo),e(td,Whe),e(Whe,Yzo),e(td,Kzo),e(td,XV),e(XV,Zzo),e(td,eWo),e(gt,oWo),M(GF,gt,null),e(No,rWo),e(No,so),M(GA,so,null),e(so,tWo),e(so,Qhe),e(Qhe,aWo),e(so,nWo),e(so,Na),e(Na,sWo),e(Na,Hhe),e(Hhe,lWo),e(Na,iWo),e(Na,Uhe),e(Uhe,dWo),e(Na,cWo),e(Na,Jhe),e(Jhe,fWo),e(Na,mWo),e(so,gWo),e(so,Yhe),e(Yhe,OF),e(OF,Khe),e(Khe,hWo),e(OF,pWo),e(OF,zV),e(zV,_Wo),e(OF,uWo),e(so,bWo),e(so,VF),e(VF,vWo),e(VF,Zhe),e(Zhe,FWo),e(VF,TWo),e(VF,epe),e(epe,MWo),e(so,EWo),M(XF,so,null),b(f,jqe,u),b(f,ad,u),e(ad,zF),e(zF,ope),M(OA,ope,null),e(ad,CWo),e(ad,rpe),e(rpe,wWo),b(f,Dqe,u),b(f,jo,u),M(VA,jo,null),e(jo,AWo),e(jo,nd),e(nd,yWo),e(nd,WV),e(WV,LWo),e(nd,xWo),e(nd,QV),e(QV,$Wo),e(nd,kWo),e(jo,SWo),e(jo,XA),e(XA,RWo),e(XA,tpe),e(tpe,PWo),e(XA,BWo),e(jo,IWo),e(jo,ht),M(zA,ht,null),e(ht,qWo),e(ht,ape),e(ape,NWo),e(ht,jWo),e(ht,sd),e(sd,DWo),e(sd,npe),e(npe,GWo),e(sd,OWo),e(sd,HV),e(HV,VWo),e(sd,XWo),e(ht,zWo),M(WF,ht,null),e(jo,WWo),e(jo,lo),M(WA,lo,null),e(lo,QWo),e(lo,spe),e(spe,HWo),e(lo,UWo),e(lo,ja),e(ja,JWo),e(ja,lpe),e(lpe,YWo),e(ja,KWo),e(ja,ipe),e(ipe,ZWo),e(ja,eQo),e(ja,dpe),e(dpe,oQo),e(ja,rQo),e(lo,tQo),e(lo,Fe),e(Fe,QF),e(QF,cpe),e(cpe,aQo),e(QF,nQo),e(QF,UV),e(UV,sQo),e(QF,lQo),e(Fe,iQo),e(Fe,HF),e(HF,fpe),e(fpe,dQo),e(HF,cQo),e(HF,JV),e(JV,fQo),e(HF,mQo),e(Fe,gQo),e(Fe,UF),e(UF,mpe),e(mpe,hQo),e(UF,pQo),e(UF,YV),e(YV,_Qo),e(UF,uQo),e(Fe,bQo),e(Fe,Bs),e(Bs,gpe),e(gpe,vQo),e(Bs,FQo),e(Bs,KV),e(KV,TQo),e(Bs,MQo),e(Bs,ZV),e(ZV,EQo),e(Bs,CQo),e(Fe,wQo),e(Fe,JF),e(JF,hpe),e(hpe,AQo),e(JF,yQo),e(JF,eX),e(eX,LQo),e(JF,xQo),e(Fe,$Qo),e(Fe,pt),e(pt,ppe),e(ppe,kQo),e(pt,SQo),e(pt,oX),e(oX,RQo),e(pt,PQo),e(pt,rX),e(rX,BQo),e(pt,IQo),e(pt,tX),e(tX,qQo),e(pt,NQo),e(Fe,jQo),e(Fe,YF),e(YF,_pe),e(_pe,DQo),e(YF,GQo),e(YF,aX),e(aX,OQo),e(YF,VQo),e(Fe,XQo),e(Fe,KF),e(KF,upe),e(upe,zQo),e(KF,WQo),e(KF,nX),e(nX,QQo),e(KF,HQo),e(Fe,UQo),e(Fe,ZF),e(ZF,bpe),e(bpe,JQo),e(ZF,YQo),e(ZF,sX),e(sX,KQo),e(ZF,ZQo),e(Fe,eHo),e(Fe,e6),e(e6,vpe),e(vpe,oHo),e(e6,rHo),e(e6,lX),e(lX,tHo),e(e6,aHo),e(Fe,nHo),e(Fe,o6),e(o6,Fpe),e(Fpe,sHo),e(o6,lHo),e(o6,iX),e(iX,iHo),e(o6,dHo),e(Fe,cHo),e(Fe,r6),e(r6,Tpe),e(Tpe,fHo),e(r6,mHo),e(r6,dX),e(dX,gHo),e(r6,hHo),e(Fe,pHo),e(Fe,t6),e(t6,Mpe),e(Mpe,_Ho),e(t6,uHo),e(t6,cX),e(cX,bHo),e(t6,vHo),e(lo,FHo),e(lo,a6),e(a6,THo),e(a6,Epe),e(Epe,MHo),e(a6,EHo),e(a6,Cpe),e(Cpe,CHo),e(lo,wHo),M(n6,lo,null),b(f,Gqe,u),b(f,ld,u),e(ld,s6),e(s6,wpe),M(QA,wpe,null),e(ld,AHo),e(ld,Ape),e(Ape,yHo),b(f,Oqe,u),b(f,Do,u),M(HA,Do,null),e(Do,LHo),e(Do,id),e(id,xHo),e(id,fX),e(fX,$Ho),e(id,kHo),e(id,mX),e(mX,SHo),e(id,RHo),e(Do,PHo),e(Do,UA),e(UA,BHo),e(UA,ype),e(ype,IHo),e(UA,qHo),e(Do,NHo),e(Do,_t),M(JA,_t,null),e(_t,jHo),e(_t,Lpe),e(Lpe,DHo),e(_t,GHo),e(_t,dd),e(dd,OHo),e(dd,xpe),e(xpe,VHo),e(dd,XHo),e(dd,gX),e(gX,zHo),e(dd,WHo),e(_t,QHo),M(l6,_t,null),e(Do,HHo),e(Do,io),M(YA,io,null),e(io,UHo),e(io,$pe),e($pe,JHo),e(io,YHo),e(io,Da),e(Da,KHo),e(Da,kpe),e(kpe,ZHo),e(Da,eUo),e(Da,Spe),e(Spe,oUo),e(Da,rUo),e(Da,Rpe),e(Rpe,tUo),e(Da,aUo),e(io,nUo),e(io,Ppe),e(Ppe,i6),e(i6,Bpe),e(Bpe,sUo),e(i6,lUo),e(i6,hX),e(hX,iUo),e(i6,dUo),e(io,cUo),e(io,d6),e(d6,fUo),e(d6,Ipe),e(Ipe,mUo),e(d6,gUo),e(d6,qpe),e(qpe,hUo),e(io,pUo),M(c6,io,null),b(f,Vqe,u),b(f,cd,u),e(cd,f6),e(f6,Npe),M(KA,Npe,null),e(cd,_Uo),e(cd,jpe),e(jpe,uUo),b(f,Xqe,u),b(f,Go,u),M(ZA,Go,null),e(Go,bUo),e(Go,fd),e(fd,vUo),e(fd,pX),e(pX,FUo),e(fd,TUo),e(fd,_X),e(_X,MUo),e(fd,EUo),e(Go,CUo),e(Go,ey),e(ey,wUo),e(ey,Dpe),e(Dpe,AUo),e(ey,yUo),e(Go,LUo),e(Go,ut),M(oy,ut,null),e(ut,xUo),e(ut,Gpe),e(Gpe,$Uo),e(ut,kUo),e(ut,md),e(md,SUo),e(md,Ope),e(Ope,RUo),e(md,PUo),e(md,uX),e(uX,BUo),e(md,IUo),e(ut,qUo),M(m6,ut,null),e(Go,NUo),e(Go,co),M(ry,co,null),e(co,jUo),e(co,Vpe),e(Vpe,DUo),e(co,GUo),e(co,Ga),e(Ga,OUo),e(Ga,Xpe),e(Xpe,VUo),e(Ga,XUo),e(Ga,zpe),e(zpe,zUo),e(Ga,WUo),e(Ga,Wpe),e(Wpe,QUo),e(Ga,HUo),e(co,UUo),e(co,Se),e(Se,g6),e(g6,Qpe),e(Qpe,JUo),e(g6,YUo),e(g6,bX),e(bX,KUo),e(g6,ZUo),e(Se,eJo),e(Se,h6),e(h6,Hpe),e(Hpe,oJo),e(h6,rJo),e(h6,vX),e(vX,tJo),e(h6,aJo),e(Se,nJo),e(Se,p6),e(p6,Upe),e(Upe,sJo),e(p6,lJo),e(p6,FX),e(FX,iJo),e(p6,dJo),e(Se,cJo),e(Se,_6),e(_6,Jpe),e(Jpe,fJo),e(_6,mJo),e(_6,TX),e(TX,gJo),e(_6,hJo),e(Se,pJo),e(Se,u6),e(u6,Ype),e(Ype,_Jo),e(u6,uJo),e(u6,MX),e(MX,bJo),e(u6,vJo),e(Se,FJo),e(Se,b6),e(b6,Kpe),e(Kpe,TJo),e(b6,MJo),e(b6,EX),e(EX,EJo),e(b6,CJo),e(Se,wJo),e(Se,v6),e(v6,Zpe),e(Zpe,AJo),e(v6,yJo),e(v6,CX),e(CX,LJo),e(v6,xJo),e(Se,$Jo),e(Se,F6),e(F6,e_e),e(e_e,kJo),e(F6,SJo),e(F6,wX),e(wX,RJo),e(F6,PJo),e(Se,BJo),e(Se,T6),e(T6,o_e),e(o_e,IJo),e(T6,qJo),e(T6,AX),e(AX,NJo),e(T6,jJo),e(co,DJo),e(co,M6),e(M6,GJo),e(M6,r_e),e(r_e,OJo),e(M6,VJo),e(M6,t_e),e(t_e,XJo),e(co,zJo),M(E6,co,null),b(f,zqe,u),b(f,gd,u),e(gd,C6),e(C6,a_e),M(ty,a_e,null),e(gd,WJo),e(gd,n_e),e(n_e,QJo),b(f,Wqe,u),b(f,Oo,u),M(ay,Oo,null),e(Oo,HJo),e(Oo,hd),e(hd,UJo),e(hd,yX),e(yX,JJo),e(hd,YJo),e(hd,LX),e(LX,KJo),e(hd,ZJo),e(Oo,eYo),e(Oo,ny),e(ny,oYo),e(ny,s_e),e(s_e,rYo),e(ny,tYo),e(Oo,aYo),e(Oo,bt),M(sy,bt,null),e(bt,nYo),e(bt,l_e),e(l_e,sYo),e(bt,lYo),e(bt,pd),e(pd,iYo),e(pd,i_e),e(i_e,dYo),e(pd,cYo),e(pd,xX),e(xX,fYo),e(pd,mYo),e(bt,gYo),M(w6,bt,null),e(Oo,hYo),e(Oo,fo),M(ly,fo,null),e(fo,pYo),e(fo,d_e),e(d_e,_Yo),e(fo,uYo),e(fo,Oa),e(Oa,bYo),e(Oa,c_e),e(c_e,vYo),e(Oa,FYo),e(Oa,f_e),e(f_e,TYo),e(Oa,MYo),e(Oa,m_e),e(m_e,EYo),e(Oa,CYo),e(fo,wYo),e(fo,Kr),e(Kr,A6),e(A6,g_e),e(g_e,AYo),e(A6,yYo),e(A6,$X),e($X,LYo),e(A6,xYo),e(Kr,$Yo),e(Kr,y6),e(y6,h_e),e(h_e,kYo),e(y6,SYo),e(y6,kX),e(kX,RYo),e(y6,PYo),e(Kr,BYo),e(Kr,L6),e(L6,p_e),e(p_e,IYo),e(L6,qYo),e(L6,SX),e(SX,NYo),e(L6,jYo),e(Kr,DYo),e(Kr,x6),e(x6,__e),e(__e,GYo),e(x6,OYo),e(x6,RX),e(RX,VYo),e(x6,XYo),e(Kr,zYo),e(Kr,$6),e($6,u_e),e(u_e,WYo),e($6,QYo),e($6,PX),e(PX,HYo),e($6,UYo),e(fo,JYo),e(fo,k6),e(k6,YYo),e(k6,b_e),e(b_e,KYo),e(k6,ZYo),e(k6,v_e),e(v_e,eKo),e(fo,oKo),M(S6,fo,null),b(f,Qqe,u),b(f,_d,u),e(_d,R6),e(R6,F_e),M(iy,F_e,null),e(_d,rKo),e(_d,T_e),e(T_e,tKo),b(f,Hqe,u),b(f,Vo,u),M(dy,Vo,null),e(Vo,aKo),e(Vo,ud),e(ud,nKo),e(ud,BX),e(BX,sKo),e(ud,lKo),e(ud,IX),e(IX,iKo),e(ud,dKo),e(Vo,cKo),e(Vo,cy),e(cy,fKo),e(cy,M_e),e(M_e,mKo),e(cy,gKo),e(Vo,hKo),e(Vo,vt),M(fy,vt,null),e(vt,pKo),e(vt,E_e),e(E_e,_Ko),e(vt,uKo),e(vt,bd),e(bd,bKo),e(bd,C_e),e(C_e,vKo),e(bd,FKo),e(bd,qX),e(qX,TKo),e(bd,MKo),e(vt,EKo),M(P6,vt,null),e(Vo,CKo),e(Vo,mo),M(my,mo,null),e(mo,wKo),e(mo,w_e),e(w_e,AKo),e(mo,yKo),e(mo,Va),e(Va,LKo),e(Va,A_e),e(A_e,xKo),e(Va,$Ko),e(Va,y_e),e(y_e,kKo),e(Va,SKo),e(Va,L_e),e(L_e,RKo),e(Va,PKo),e(mo,BKo),e(mo,Re),e(Re,B6),e(B6,x_e),e(x_e,IKo),e(B6,qKo),e(B6,NX),e(NX,NKo),e(B6,jKo),e(Re,DKo),e(Re,I6),e(I6,$_e),e($_e,GKo),e(I6,OKo),e(I6,jX),e(jX,VKo),e(I6,XKo),e(Re,zKo),e(Re,q6),e(q6,k_e),e(k_e,WKo),e(q6,QKo),e(q6,DX),e(DX,HKo),e(q6,UKo),e(Re,JKo),e(Re,N6),e(N6,S_e),e(S_e,YKo),e(N6,KKo),e(N6,GX),e(GX,ZKo),e(N6,eZo),e(Re,oZo),e(Re,j6),e(j6,R_e),e(R_e,rZo),e(j6,tZo),e(j6,OX),e(OX,aZo),e(j6,nZo),e(Re,sZo),e(Re,D6),e(D6,P_e),e(P_e,lZo),e(D6,iZo),e(D6,VX),e(VX,dZo),e(D6,cZo),e(Re,fZo),e(Re,G6),e(G6,B_e),e(B_e,mZo),e(G6,gZo),e(G6,XX),e(XX,hZo),e(G6,pZo),e(Re,_Zo),e(Re,O6),e(O6,I_e),e(I_e,uZo),e(O6,bZo),e(O6,zX),e(zX,vZo),e(O6,FZo),e(Re,TZo),e(Re,V6),e(V6,q_e),e(q_e,MZo),e(V6,EZo),e(V6,WX),e(WX,CZo),e(V6,wZo),e(mo,AZo),e(mo,X6),e(X6,yZo),e(X6,N_e),e(N_e,LZo),e(X6,xZo),e(X6,j_e),e(j_e,$Zo),e(mo,kZo),M(z6,mo,null),b(f,Uqe,u),b(f,vd,u),e(vd,W6),e(W6,D_e),M(gy,D_e,null),e(vd,SZo),e(vd,G_e),e(G_e,RZo),b(f,Jqe,u),b(f,Xo,u),M(hy,Xo,null),e(Xo,PZo),e(Xo,Fd),e(Fd,BZo),e(Fd,QX),e(QX,IZo),e(Fd,qZo),e(Fd,HX),e(HX,NZo),e(Fd,jZo),e(Xo,DZo),e(Xo,py),e(py,GZo),e(py,O_e),e(O_e,OZo),e(py,VZo),e(Xo,XZo),e(Xo,Ft),M(_y,Ft,null),e(Ft,zZo),e(Ft,V_e),e(V_e,WZo),e(Ft,QZo),e(Ft,Td),e(Td,HZo),e(Td,X_e),e(X_e,UZo),e(Td,JZo),e(Td,UX),e(UX,YZo),e(Td,KZo),e(Ft,ZZo),M(Q6,Ft,null),e(Xo,eer),e(Xo,go),M(uy,go,null),e(go,oer),e(go,z_e),e(z_e,rer),e(go,ter),e(go,Xa),e(Xa,aer),e(Xa,W_e),e(W_e,ner),e(Xa,ser),e(Xa,Q_e),e(Q_e,ler),e(Xa,ier),e(Xa,H_e),e(H_e,der),e(Xa,cer),e(go,fer),e(go,by),e(by,H6),e(H6,U_e),e(U_e,mer),e(H6,ger),e(H6,JX),e(JX,her),e(H6,per),e(by,_er),e(by,U6),e(U6,J_e),e(J_e,uer),e(U6,ber),e(U6,YX),e(YX,ver),e(U6,Fer),e(go,Ter),e(go,J6),e(J6,Mer),e(J6,Y_e),e(Y_e,Eer),e(J6,Cer),e(J6,K_e),e(K_e,wer),e(go,Aer),M(Y6,go,null),b(f,Yqe,u),b(f,Md,u),e(Md,K6),e(K6,Z_e),M(vy,Z_e,null),e(Md,yer),e(Md,eue),e(eue,Ler),b(f,Kqe,u),b(f,zo,u),M(Fy,zo,null),e(zo,xer),e(zo,Ed),e(Ed,$er),e(Ed,KX),e(KX,ker),e(Ed,Ser),e(Ed,ZX),e(ZX,Rer),e(Ed,Per),e(zo,Ber),e(zo,Ty),e(Ty,Ier),e(Ty,oue),e(oue,qer),e(Ty,Ner),e(zo,jer),e(zo,Tt),M(My,Tt,null),e(Tt,Der),e(Tt,rue),e(rue,Ger),e(Tt,Oer),e(Tt,Cd),e(Cd,Ver),e(Cd,tue),e(tue,Xer),e(Cd,zer),e(Cd,ez),e(ez,Wer),e(Cd,Qer),e(Tt,Her),M(Z6,Tt,null),e(zo,Uer),e(zo,ho),M(Ey,ho,null),e(ho,Jer),e(ho,aue),e(aue,Yer),e(ho,Ker),e(ho,za),e(za,Zer),e(za,nue),e(nue,eor),e(za,oor),e(za,sue),e(sue,ror),e(za,tor),e(za,lue),e(lue,aor),e(za,nor),e(ho,sor),e(ho,Zr),e(Zr,eT),e(eT,iue),e(iue,lor),e(eT,ior),e(eT,oz),e(oz,dor),e(eT,cor),e(Zr,mor),e(Zr,oT),e(oT,due),e(due,gor),e(oT,hor),e(oT,rz),e(rz,por),e(oT,_or),e(Zr,uor),e(Zr,rT),e(rT,cue),e(cue,bor),e(rT,vor),e(rT,tz),e(tz,For),e(rT,Tor),e(Zr,Mor),e(Zr,tT),e(tT,fue),e(fue,Eor),e(tT,Cor),e(tT,az),e(az,wor),e(tT,Aor),e(Zr,yor),e(Zr,aT),e(aT,mue),e(mue,Lor),e(aT,xor),e(aT,nz),e(nz,$or),e(aT,kor),e(ho,Sor),e(ho,nT),e(nT,Ror),e(nT,gue),e(gue,Por),e(nT,Bor),e(nT,hue),e(hue,Ior),e(ho,qor),M(sT,ho,null),b(f,Zqe,u),b(f,wd,u),e(wd,lT),e(lT,pue),M(Cy,pue,null),e(wd,Nor),e(wd,_ue),e(_ue,jor),b(f,eNe,u),b(f,Wo,u),M(wy,Wo,null),e(Wo,Dor),e(Wo,Ad),e(Ad,Gor),e(Ad,sz),e(sz,Oor),e(Ad,Vor),e(Ad,lz),e(lz,Xor),e(Ad,zor),e(Wo,Wor),e(Wo,Ay),e(Ay,Qor),e(Ay,uue),e(uue,Hor),e(Ay,Uor),e(Wo,Jor),e(Wo,Mt),M(yy,Mt,null),e(Mt,Yor),e(Mt,bue),e(bue,Kor),e(Mt,Zor),e(Mt,yd),e(yd,err),e(yd,vue),e(vue,orr),e(yd,rrr),e(yd,iz),e(iz,trr),e(yd,arr),e(Mt,nrr),M(iT,Mt,null),e(Wo,srr),e(Wo,po),M(Ly,po,null),e(po,lrr),e(po,Fue),e(Fue,irr),e(po,drr),e(po,Wa),e(Wa,crr),e(Wa,Tue),e(Tue,frr),e(Wa,mrr),e(Wa,Mue),e(Mue,grr),e(Wa,hrr),e(Wa,Eue),e(Eue,prr),e(Wa,_rr),e(po,urr),e(po,Ld),e(Ld,dT),e(dT,Cue),e(Cue,brr),e(dT,vrr),e(dT,dz),e(dz,Frr),e(dT,Trr),e(Ld,Mrr),e(Ld,cT),e(cT,wue),e(wue,Err),e(cT,Crr),e(cT,cz),e(cz,wrr),e(cT,Arr),e(Ld,yrr),e(Ld,fT),e(fT,Aue),e(Aue,Lrr),e(fT,xrr),e(fT,fz),e(fz,$rr),e(fT,krr),e(po,Srr),e(po,mT),e(mT,Rrr),e(mT,yue),e(yue,Prr),e(mT,Brr),e(mT,Lue),e(Lue,Irr),e(po,qrr),M(gT,po,null),b(f,oNe,u),b(f,xd,u),e(xd,hT),e(hT,xue),M(xy,xue,null),e(xd,Nrr),e(xd,$ue),e($ue,jrr),b(f,rNe,u),b(f,Qo,u),M($y,Qo,null),e(Qo,Drr),e(Qo,$d),e($d,Grr),e($d,mz),e(mz,Orr),e($d,Vrr),e($d,gz),e(gz,Xrr),e($d,zrr),e(Qo,Wrr),e(Qo,ky),e(ky,Qrr),e(ky,kue),e(kue,Hrr),e(ky,Urr),e(Qo,Jrr),e(Qo,Et),M(Sy,Et,null),e(Et,Yrr),e(Et,Sue),e(Sue,Krr),e(Et,Zrr),e(Et,kd),e(kd,etr),e(kd,Rue),e(Rue,otr),e(kd,rtr),e(kd,hz),e(hz,ttr),e(kd,atr),e(Et,ntr),M(pT,Et,null),e(Qo,str),e(Qo,_o),M(Ry,_o,null),e(_o,ltr),e(_o,Pue),e(Pue,itr),e(_o,dtr),e(_o,Qa),e(Qa,ctr),e(Qa,Bue),e(Bue,ftr),e(Qa,mtr),e(Qa,Iue),e(Iue,gtr),e(Qa,htr),e(Qa,que),e(que,ptr),e(Qa,_tr),e(_o,utr),e(_o,Py),e(Py,_T),e(_T,Nue),e(Nue,btr),e(_T,vtr),e(_T,pz),e(pz,Ftr),e(_T,Ttr),e(Py,Mtr),e(Py,uT),e(uT,jue),e(jue,Etr),e(uT,Ctr),e(uT,_z),e(_z,wtr),e(uT,Atr),e(_o,ytr),e(_o,bT),e(bT,Ltr),e(bT,Due),e(Due,xtr),e(bT,$tr),e(bT,Gue),e(Gue,ktr),e(_o,Str),M(vT,_o,null),b(f,tNe,u),b(f,Sd,u),e(Sd,FT),e(FT,Oue),M(By,Oue,null),e(Sd,Rtr),e(Sd,Vue),e(Vue,Ptr),b(f,aNe,u),b(f,Ho,u),M(Iy,Ho,null),e(Ho,Btr),e(Ho,Rd),e(Rd,Itr),e(Rd,uz),e(uz,qtr),e(Rd,Ntr),e(Rd,bz),e(bz,jtr),e(Rd,Dtr),e(Ho,Gtr),e(Ho,qy),e(qy,Otr),e(qy,Xue),e(Xue,Vtr),e(qy,Xtr),e(Ho,ztr),e(Ho,Ct),M(Ny,Ct,null),e(Ct,Wtr),e(Ct,zue),e(zue,Qtr),e(Ct,Htr),e(Ct,Pd),e(Pd,Utr),e(Pd,Wue),e(Wue,Jtr),e(Pd,Ytr),e(Pd,vz),e(vz,Ktr),e(Pd,Ztr),e(Ct,ear),M(TT,Ct,null),e(Ho,oar),e(Ho,uo),M(jy,uo,null),e(uo,rar),e(uo,Que),e(Que,tar),e(uo,aar),e(uo,Ha),e(Ha,nar),e(Ha,Hue),e(Hue,sar),e(Ha,lar),e(Ha,Uue),e(Uue,iar),e(Ha,dar),e(Ha,Jue),e(Jue,car),e(Ha,far),e(uo,mar),e(uo,Yue),e(Yue,MT),e(MT,Kue),e(Kue,gar),e(MT,har),e(MT,Fz),e(Fz,par),e(MT,_ar),e(uo,uar),e(uo,ET),e(ET,bar),e(ET,Zue),e(Zue,Far),e(ET,Tar),e(ET,e2e),e(e2e,Mar),e(uo,Ear),M(CT,uo,null),b(f,nNe,u),b(f,Bd,u),e(Bd,wT),e(wT,o2e),M(Dy,o2e,null),e(Bd,Car),e(Bd,r2e),e(r2e,war),b(f,sNe,u),b(f,Uo,u),M(Gy,Uo,null),e(Uo,Aar),e(Uo,Id),e(Id,yar),e(Id,Tz),e(Tz,Lar),e(Id,xar),e(Id,Mz),e(Mz,$ar),e(Id,kar),e(Uo,Sar),e(Uo,Oy),e(Oy,Rar),e(Oy,t2e),e(t2e,Par),e(Oy,Bar),e(Uo,Iar),e(Uo,wt),M(Vy,wt,null),e(wt,qar),e(wt,a2e),e(a2e,Nar),e(wt,jar),e(wt,qd),e(qd,Dar),e(qd,n2e),e(n2e,Gar),e(qd,Oar),e(qd,Ez),e(Ez,Var),e(qd,Xar),e(wt,zar),M(AT,wt,null),e(Uo,War),e(Uo,bo),M(Xy,bo,null),e(bo,Qar),e(bo,s2e),e(s2e,Har),e(bo,Uar),e(bo,Ua),e(Ua,Jar),e(Ua,l2e),e(l2e,Yar),e(Ua,Kar),e(Ua,i2e),e(i2e,Zar),e(Ua,enr),e(Ua,d2e),e(d2e,onr),e(Ua,rnr),e(bo,tnr),e(bo,Ja),e(Ja,yT),e(yT,c2e),e(c2e,anr),e(yT,nnr),e(yT,Cz),e(Cz,snr),e(yT,lnr),e(Ja,inr),e(Ja,LT),e(LT,f2e),e(f2e,dnr),e(LT,cnr),e(LT,wz),e(wz,fnr),e(LT,mnr),e(Ja,gnr),e(Ja,xT),e(xT,m2e),e(m2e,hnr),e(xT,pnr),e(xT,Az),e(Az,_nr),e(xT,unr),e(Ja,bnr),e(Ja,$T),e($T,g2e),e(g2e,vnr),e($T,Fnr),e($T,yz),e(yz,Tnr),e($T,Mnr),e(bo,Enr),e(bo,kT),e(kT,Cnr),e(kT,h2e),e(h2e,wnr),e(kT,Anr),e(kT,p2e),e(p2e,ynr),e(bo,Lnr),M(ST,bo,null),b(f,lNe,u),b(f,Nd,u),e(Nd,RT),e(RT,_2e),M(zy,_2e,null),e(Nd,xnr),e(Nd,u2e),e(u2e,$nr),b(f,iNe,u),b(f,Jo,u),M(Wy,Jo,null),e(Jo,knr),e(Jo,jd),e(jd,Snr),e(jd,Lz),e(Lz,Rnr),e(jd,Pnr),e(jd,xz),e(xz,Bnr),e(jd,Inr),e(Jo,qnr),e(Jo,Qy),e(Qy,Nnr),e(Qy,b2e),e(b2e,jnr),e(Qy,Dnr),e(Jo,Gnr),e(Jo,At),M(Hy,At,null),e(At,Onr),e(At,v2e),e(v2e,Vnr),e(At,Xnr),e(At,Dd),e(Dd,znr),e(Dd,F2e),e(F2e,Wnr),e(Dd,Qnr),e(Dd,$z),e($z,Hnr),e(Dd,Unr),e(At,Jnr),M(PT,At,null),e(Jo,Ynr),e(Jo,vo),M(Uy,vo,null),e(vo,Knr),e(vo,T2e),e(T2e,Znr),e(vo,esr),e(vo,Ya),e(Ya,osr),e(Ya,M2e),e(M2e,rsr),e(Ya,tsr),e(Ya,E2e),e(E2e,asr),e(Ya,nsr),e(Ya,C2e),e(C2e,ssr),e(Ya,lsr),e(vo,isr),e(vo,w2e),e(w2e,BT),e(BT,A2e),e(A2e,dsr),e(BT,csr),e(BT,kz),e(kz,fsr),e(BT,msr),e(vo,gsr),e(vo,IT),e(IT,hsr),e(IT,y2e),e(y2e,psr),e(IT,_sr),e(IT,L2e),e(L2e,usr),e(vo,bsr),M(qT,vo,null),b(f,dNe,u),b(f,Gd,u),e(Gd,NT),e(NT,x2e),M(Jy,x2e,null),e(Gd,vsr),e(Gd,$2e),e($2e,Fsr),b(f,cNe,u),b(f,Yo,u),M(Yy,Yo,null),e(Yo,Tsr),e(Yo,Od),e(Od,Msr),e(Od,Sz),e(Sz,Esr),e(Od,Csr),e(Od,Rz),e(Rz,wsr),e(Od,Asr),e(Yo,ysr),e(Yo,Ky),e(Ky,Lsr),e(Ky,k2e),e(k2e,xsr),e(Ky,$sr),e(Yo,ksr),e(Yo,yt),M(Zy,yt,null),e(yt,Ssr),e(yt,S2e),e(S2e,Rsr),e(yt,Psr),e(yt,Vd),e(Vd,Bsr),e(Vd,R2e),e(R2e,Isr),e(Vd,qsr),e(Vd,Pz),e(Pz,Nsr),e(Vd,jsr),e(yt,Dsr),M(jT,yt,null),e(Yo,Gsr),e(Yo,wr),M(eL,wr,null),e(wr,Osr),e(wr,P2e),e(P2e,Vsr),e(wr,Xsr),e(wr,Ka),e(Ka,zsr),e(Ka,B2e),e(B2e,Wsr),e(Ka,Qsr),e(Ka,I2e),e(I2e,Hsr),e(Ka,Usr),e(Ka,q2e),e(q2e,Jsr),e(Ka,Ysr),e(wr,Ksr),e(wr,N),e(N,DT),e(DT,N2e),e(N2e,Zsr),e(DT,elr),e(DT,Bz),e(Bz,olr),e(DT,rlr),e(N,tlr),e(N,GT),e(GT,j2e),e(j2e,alr),e(GT,nlr),e(GT,Iz),e(Iz,slr),e(GT,llr),e(N,ilr),e(N,OT),e(OT,D2e),e(D2e,dlr),e(OT,clr),e(OT,qz),e(qz,flr),e(OT,mlr),e(N,glr),e(N,VT),e(VT,G2e),e(G2e,hlr),e(VT,plr),e(VT,Nz),e(Nz,_lr),e(VT,ulr),e(N,blr),e(N,XT),e(XT,O2e),e(O2e,vlr),e(XT,Flr),e(XT,jz),e(jz,Tlr),e(XT,Mlr),e(N,Elr),e(N,zT),e(zT,V2e),e(V2e,Clr),e(zT,wlr),e(zT,Dz),e(Dz,Alr),e(zT,ylr),e(N,Llr),e(N,WT),e(WT,X2e),e(X2e,xlr),e(WT,$lr),e(WT,Gz),e(Gz,klr),e(WT,Slr),e(N,Rlr),e(N,QT),e(QT,z2e),e(z2e,Plr),e(QT,Blr),e(QT,Oz),e(Oz,Ilr),e(QT,qlr),e(N,Nlr),e(N,HT),e(HT,W2e),e(W2e,jlr),e(HT,Dlr),e(HT,Vz),e(Vz,Glr),e(HT,Olr),e(N,Vlr),e(N,UT),e(UT,Q2e),e(Q2e,Xlr),e(UT,zlr),e(UT,Xz),e(Xz,Wlr),e(UT,Qlr),e(N,Hlr),e(N,JT),e(JT,H2e),e(H2e,Ulr),e(JT,Jlr),e(JT,zz),e(zz,Ylr),e(JT,Klr),e(N,Zlr),e(N,YT),e(YT,U2e),e(U2e,eir),e(YT,oir),e(YT,Wz),e(Wz,rir),e(YT,tir),e(N,air),e(N,KT),e(KT,J2e),e(J2e,nir),e(KT,sir),e(KT,Qz),e(Qz,lir),e(KT,iir),e(N,dir),e(N,ZT),e(ZT,Y2e),e(Y2e,cir),e(ZT,fir),e(ZT,Hz),e(Hz,mir),e(ZT,gir),e(N,hir),e(N,e7),e(e7,K2e),e(K2e,pir),e(e7,_ir),e(e7,Uz),e(Uz,uir),e(e7,bir),e(N,vir),e(N,o7),e(o7,Z2e),e(Z2e,Fir),e(o7,Tir),e(o7,Jz),e(Jz,Mir),e(o7,Eir),e(N,Cir),e(N,r7),e(r7,e1e),e(e1e,wir),e(r7,Air),e(r7,Yz),e(Yz,yir),e(r7,Lir),e(N,xir),e(N,Is),e(Is,o1e),e(o1e,$ir),e(Is,kir),e(Is,Kz),e(Kz,Sir),e(Is,Rir),e(Is,Zz),e(Zz,Pir),e(Is,Bir),e(N,Iir),e(N,t7),e(t7,r1e),e(r1e,qir),e(t7,Nir),e(t7,eW),e(eW,jir),e(t7,Dir),e(N,Gir),e(N,a7),e(a7,t1e),e(t1e,Oir),e(a7,Vir),e(a7,oW),e(oW,Xir),e(a7,zir),e(N,Wir),e(N,n7),e(n7,a1e),e(a1e,Qir),e(n7,Hir),e(n7,rW),e(rW,Uir),e(n7,Jir),e(N,Yir),e(N,s7),e(s7,n1e),e(n1e,Kir),e(s7,Zir),e(s7,tW),e(tW,edr),e(s7,odr),e(N,rdr),e(N,l7),e(l7,s1e),e(s1e,tdr),e(l7,adr),e(l7,aW),e(aW,ndr),e(l7,sdr),e(N,ldr),e(N,i7),e(i7,l1e),e(l1e,idr),e(i7,ddr),e(i7,nW),e(nW,cdr),e(i7,fdr),e(N,mdr),e(N,d7),e(d7,i1e),e(i1e,gdr),e(d7,hdr),e(d7,sW),e(sW,pdr),e(d7,_dr),e(N,udr),e(N,c7),e(c7,d1e),e(d1e,bdr),e(c7,vdr),e(c7,lW),e(lW,Fdr),e(c7,Tdr),e(N,Mdr),e(N,f7),e(f7,c1e),e(c1e,Edr),e(f7,Cdr),e(f7,iW),e(iW,wdr),e(f7,Adr),e(N,ydr),e(N,m7),e(m7,f1e),e(f1e,Ldr),e(m7,xdr),e(m7,dW),e(dW,$dr),e(m7,kdr),e(N,Sdr),e(N,g7),e(g7,m1e),e(m1e,Rdr),e(g7,Pdr),e(g7,cW),e(cW,Bdr),e(g7,Idr),e(N,qdr),e(N,h7),e(h7,g1e),e(g1e,Ndr),e(h7,jdr),e(h7,fW),e(fW,Ddr),e(h7,Gdr),e(N,Odr),e(N,p7),e(p7,h1e),e(h1e,Vdr),e(p7,Xdr),e(p7,mW),e(mW,zdr),e(p7,Wdr),e(N,Qdr),e(N,_7),e(_7,p1e),e(p1e,Hdr),e(_7,Udr),e(_7,gW),e(gW,Jdr),e(_7,Ydr),e(N,Kdr),e(N,u7),e(u7,_1e),e(_1e,Zdr),e(u7,ecr),e(u7,hW),e(hW,ocr),e(u7,rcr),e(N,tcr),e(N,b7),e(b7,u1e),e(u1e,acr),e(b7,ncr),e(b7,pW),e(pW,scr),e(b7,lcr),e(N,icr),e(N,v7),e(v7,b1e),e(b1e,dcr),e(v7,ccr),e(v7,_W),e(_W,fcr),e(v7,mcr),e(N,gcr),e(N,F7),e(F7,v1e),e(v1e,hcr),e(F7,pcr),e(F7,uW),e(uW,_cr),e(F7,ucr),e(N,bcr),e(N,T7),e(T7,F1e),e(F1e,vcr),e(T7,Fcr),e(T7,bW),e(bW,Tcr),e(T7,Mcr),e(N,Ecr),e(N,M7),e(M7,T1e),e(T1e,Ccr),e(M7,wcr),e(M7,vW),e(vW,Acr),e(M7,ycr),e(N,Lcr),e(N,E7),e(E7,M1e),e(M1e,xcr),e(E7,$cr),e(E7,FW),e(FW,kcr),e(E7,Scr),e(N,Rcr),e(N,C7),e(C7,E1e),e(E1e,Pcr),e(C7,Bcr),e(C7,TW),e(TW,Icr),e(C7,qcr),e(N,Ncr),e(N,w7),e(w7,C1e),e(C1e,jcr),e(w7,Dcr),e(w7,MW),e(MW,Gcr),e(w7,Ocr),e(N,Vcr),e(N,A7),e(A7,w1e),e(w1e,Xcr),e(A7,zcr),e(A7,EW),e(EW,Wcr),e(A7,Qcr),e(N,Hcr),e(N,y7),e(y7,A1e),e(A1e,Ucr),e(y7,Jcr),e(y7,CW),e(CW,Ycr),e(y7,Kcr),e(N,Zcr),e(N,L7),e(L7,y1e),e(y1e,efr),e(L7,ofr),e(L7,wW),e(wW,rfr),e(L7,tfr),e(N,afr),e(N,x7),e(x7,L1e),e(L1e,nfr),e(x7,sfr),e(x7,AW),e(AW,lfr),e(x7,ifr),e(N,dfr),e(N,$7),e($7,x1e),e(x1e,cfr),e($7,ffr),e($7,yW),e(yW,mfr),e($7,gfr),e(wr,hfr),M(k7,wr,null),b(f,fNe,u),b(f,Xd,u),e(Xd,S7),e(S7,$1e),M(oL,$1e,null),e(Xd,pfr),e(Xd,k1e),e(k1e,_fr),b(f,mNe,u),b(f,Ko,u),M(rL,Ko,null),e(Ko,ufr),e(Ko,zd),e(zd,bfr),e(zd,LW),e(LW,vfr),e(zd,Ffr),e(zd,xW),e(xW,Tfr),e(zd,Mfr),e(Ko,Efr),e(Ko,tL),e(tL,Cfr),e(tL,S1e),e(S1e,wfr),e(tL,Afr),e(Ko,yfr),e(Ko,Lt),M(aL,Lt,null),e(Lt,Lfr),e(Lt,R1e),e(R1e,xfr),e(Lt,$fr),e(Lt,Wd),e(Wd,kfr),e(Wd,P1e),e(P1e,Sfr),e(Wd,Rfr),e(Wd,$W),e($W,Pfr),e(Wd,Bfr),e(Lt,Ifr),M(R7,Lt,null),e(Ko,qfr),e(Ko,Ar),M(nL,Ar,null),e(Ar,Nfr),e(Ar,B1e),e(B1e,jfr),e(Ar,Dfr),e(Ar,Za),e(Za,Gfr),e(Za,I1e),e(I1e,Ofr),e(Za,Vfr),e(Za,q1e),e(q1e,Xfr),e(Za,zfr),e(Za,N1e),e(N1e,Wfr),e(Za,Qfr),e(Ar,Hfr),e(Ar,se),e(se,P7),e(P7,j1e),e(j1e,Ufr),e(P7,Jfr),e(P7,kW),e(kW,Yfr),e(P7,Kfr),e(se,Zfr),e(se,B7),e(B7,D1e),e(D1e,emr),e(B7,omr),e(B7,SW),e(SW,rmr),e(B7,tmr),e(se,amr),e(se,I7),e(I7,G1e),e(G1e,nmr),e(I7,smr),e(I7,RW),e(RW,lmr),e(I7,imr),e(se,dmr),e(se,q7),e(q7,O1e),e(O1e,cmr),e(q7,fmr),e(q7,PW),e(PW,mmr),e(q7,gmr),e(se,hmr),e(se,N7),e(N7,V1e),e(V1e,pmr),e(N7,_mr),e(N7,BW),e(BW,umr),e(N7,bmr),e(se,vmr),e(se,j7),e(j7,X1e),e(X1e,Fmr),e(j7,Tmr),e(j7,IW),e(IW,Mmr),e(j7,Emr),e(se,Cmr),e(se,D7),e(D7,z1e),e(z1e,wmr),e(D7,Amr),e(D7,qW),e(qW,ymr),e(D7,Lmr),e(se,xmr),e(se,G7),e(G7,W1e),e(W1e,$mr),e(G7,kmr),e(G7,NW),e(NW,Smr),e(G7,Rmr),e(se,Pmr),e(se,O7),e(O7,Q1e),e(Q1e,Bmr),e(O7,Imr),e(O7,jW),e(jW,qmr),e(O7,Nmr),e(se,jmr),e(se,V7),e(V7,H1e),e(H1e,Dmr),e(V7,Gmr),e(V7,DW),e(DW,Omr),e(V7,Vmr),e(se,Xmr),e(se,X7),e(X7,U1e),e(U1e,zmr),e(X7,Wmr),e(X7,GW),e(GW,Qmr),e(X7,Hmr),e(se,Umr),e(se,z7),e(z7,J1e),e(J1e,Jmr),e(z7,Ymr),e(z7,OW),e(OW,Kmr),e(z7,Zmr),e(se,egr),e(se,W7),e(W7,Y1e),e(Y1e,ogr),e(W7,rgr),e(W7,VW),e(VW,tgr),e(W7,agr),e(se,ngr),e(se,Q7),e(Q7,K1e),e(K1e,sgr),e(Q7,lgr),e(Q7,XW),e(XW,igr),e(Q7,dgr),e(se,cgr),e(se,H7),e(H7,Z1e),e(Z1e,fgr),e(H7,mgr),e(H7,zW),e(zW,ggr),e(H7,hgr),e(se,pgr),e(se,U7),e(U7,ebe),e(ebe,_gr),e(U7,ugr),e(U7,WW),e(WW,bgr),e(U7,vgr),e(se,Fgr),e(se,J7),e(J7,obe),e(obe,Tgr),e(J7,Mgr),e(J7,QW),e(QW,Egr),e(J7,Cgr),e(se,wgr),e(se,Y7),e(Y7,rbe),e(rbe,Agr),e(Y7,ygr),e(Y7,HW),e(HW,Lgr),e(Y7,xgr),e(se,$gr),e(se,K7),e(K7,tbe),e(tbe,kgr),e(K7,Sgr),e(K7,UW),e(UW,Rgr),e(K7,Pgr),e(se,Bgr),e(se,Z7),e(Z7,abe),e(abe,Igr),e(Z7,qgr),e(Z7,JW),e(JW,Ngr),e(Z7,jgr),e(se,Dgr),e(se,e9),e(e9,nbe),e(nbe,Ggr),e(e9,Ogr),e(e9,YW),e(YW,Vgr),e(e9,Xgr),e(se,zgr),e(se,o9),e(o9,sbe),e(sbe,Wgr),e(o9,Qgr),e(o9,KW),e(KW,Hgr),e(o9,Ugr),e(se,Jgr),e(se,r9),e(r9,lbe),e(lbe,Ygr),e(r9,Kgr),e(r9,ZW),e(ZW,Zgr),e(r9,ehr),e(Ar,ohr),M(t9,Ar,null),b(f,gNe,u),b(f,Qd,u),e(Qd,a9),e(a9,ibe),M(sL,ibe,null),e(Qd,rhr),e(Qd,dbe),e(dbe,thr),b(f,hNe,u),b(f,Zo,u),M(lL,Zo,null),e(Zo,ahr),e(Zo,Hd),e(Hd,nhr),e(Hd,eQ),e(eQ,shr),e(Hd,lhr),e(Hd,oQ),e(oQ,ihr),e(Hd,dhr),e(Zo,chr),e(Zo,iL),e(iL,fhr),e(iL,cbe),e(cbe,mhr),e(iL,ghr),e(Zo,hhr),e(Zo,xt),M(dL,xt,null),e(xt,phr),e(xt,fbe),e(fbe,_hr),e(xt,uhr),e(xt,Ud),e(Ud,bhr),e(Ud,mbe),e(mbe,vhr),e(Ud,Fhr),e(Ud,rQ),e(rQ,Thr),e(Ud,Mhr),e(xt,Ehr),M(n9,xt,null),e(Zo,Chr),e(Zo,yr),M(cL,yr,null),e(yr,whr),e(yr,gbe),e(gbe,Ahr),e(yr,yhr),e(yr,en),e(en,Lhr),e(en,hbe),e(hbe,xhr),e(en,$hr),e(en,pbe),e(pbe,khr),e(en,Shr),e(en,_be),e(_be,Rhr),e(en,Phr),e(yr,Bhr),e(yr,Me),e(Me,s9),e(s9,ube),e(ube,Ihr),e(s9,qhr),e(s9,tQ),e(tQ,Nhr),e(s9,jhr),e(Me,Dhr),e(Me,l9),e(l9,bbe),e(bbe,Ghr),e(l9,Ohr),e(l9,aQ),e(aQ,Vhr),e(l9,Xhr),e(Me,zhr),e(Me,i9),e(i9,vbe),e(vbe,Whr),e(i9,Qhr),e(i9,nQ),e(nQ,Hhr),e(i9,Uhr),e(Me,Jhr),e(Me,d9),e(d9,Fbe),e(Fbe,Yhr),e(d9,Khr),e(d9,sQ),e(sQ,Zhr),e(d9,epr),e(Me,opr),e(Me,c9),e(c9,Tbe),e(Tbe,rpr),e(c9,tpr),e(c9,lQ),e(lQ,apr),e(c9,npr),e(Me,spr),e(Me,f9),e(f9,Mbe),e(Mbe,lpr),e(f9,ipr),e(f9,iQ),e(iQ,dpr),e(f9,cpr),e(Me,fpr),e(Me,m9),e(m9,Ebe),e(Ebe,mpr),e(m9,gpr),e(m9,dQ),e(dQ,hpr),e(m9,ppr),e(Me,_pr),e(Me,g9),e(g9,Cbe),e(Cbe,upr),e(g9,bpr),e(g9,cQ),e(cQ,vpr),e(g9,Fpr),e(Me,Tpr),e(Me,h9),e(h9,wbe),e(wbe,Mpr),e(h9,Epr),e(h9,fQ),e(fQ,Cpr),e(h9,wpr),e(Me,Apr),e(Me,p9),e(p9,Abe),e(Abe,ypr),e(p9,Lpr),e(p9,mQ),e(mQ,xpr),e(p9,$pr),e(Me,kpr),e(Me,_9),e(_9,ybe),e(ybe,Spr),e(_9,Rpr),e(_9,gQ),e(gQ,Ppr),e(_9,Bpr),e(Me,Ipr),e(Me,u9),e(u9,Lbe),e(Lbe,qpr),e(u9,Npr),e(u9,hQ),e(hQ,jpr),e(u9,Dpr),e(yr,Gpr),M(b9,yr,null),b(f,pNe,u),b(f,Jd,u),e(Jd,v9),e(v9,xbe),M(fL,xbe,null),e(Jd,Opr),e(Jd,$be),e($be,Vpr),b(f,_Ne,u),b(f,er,u),M(mL,er,null),e(er,Xpr),e(er,Yd),e(Yd,zpr),e(Yd,pQ),e(pQ,Wpr),e(Yd,Qpr),e(Yd,_Q),e(_Q,Hpr),e(Yd,Upr),e(er,Jpr),e(er,gL),e(gL,Ypr),e(gL,kbe),e(kbe,Kpr),e(gL,Zpr),e(er,e_r),e(er,$t),M(hL,$t,null),e($t,o_r),e($t,Sbe),e(Sbe,r_r),e($t,t_r),e($t,Kd),e(Kd,a_r),e(Kd,Rbe),e(Rbe,n_r),e(Kd,s_r),e(Kd,uQ),e(uQ,l_r),e(Kd,i_r),e($t,d_r),M(F9,$t,null),e(er,c_r),e(er,Lr),M(pL,Lr,null),e(Lr,f_r),e(Lr,Pbe),e(Pbe,m_r),e(Lr,g_r),e(Lr,on),e(on,h_r),e(on,Bbe),e(Bbe,p_r),e(on,__r),e(on,Ibe),e(Ibe,u_r),e(on,b_r),e(on,qbe),e(qbe,v_r),e(on,F_r),e(Lr,T_r),e(Lr,rn),e(rn,T9),e(T9,Nbe),e(Nbe,M_r),e(T9,E_r),e(T9,bQ),e(bQ,C_r),e(T9,w_r),e(rn,A_r),e(rn,M9),e(M9,jbe),e(jbe,y_r),e(M9,L_r),e(M9,vQ),e(vQ,x_r),e(M9,$_r),e(rn,k_r),e(rn,E9),e(E9,Dbe),e(Dbe,S_r),e(E9,R_r),e(E9,FQ),e(FQ,P_r),e(E9,B_r),e(rn,I_r),e(rn,C9),e(C9,Gbe),e(Gbe,q_r),e(C9,N_r),e(C9,TQ),e(TQ,j_r),e(C9,D_r),e(Lr,G_r),M(w9,Lr,null),b(f,uNe,u),b(f,Zd,u),e(Zd,A9),e(A9,Obe),M(_L,Obe,null),e(Zd,O_r),e(Zd,Vbe),e(Vbe,V_r),b(f,bNe,u),b(f,or,u),M(uL,or,null),e(or,X_r),e(or,ec),e(ec,z_r),e(ec,MQ),e(MQ,W_r),e(ec,Q_r),e(ec,EQ),e(EQ,H_r),e(ec,U_r),e(or,J_r),e(or,bL),e(bL,Y_r),e(bL,Xbe),e(Xbe,K_r),e(bL,Z_r),e(or,eur),e(or,kt),M(vL,kt,null),e(kt,our),e(kt,zbe),e(zbe,rur),e(kt,tur),e(kt,oc),e(oc,aur),e(oc,Wbe),e(Wbe,nur),e(oc,sur),e(oc,CQ),e(CQ,lur),e(oc,iur),e(kt,dur),M(y9,kt,null),e(or,cur),e(or,xr),M(FL,xr,null),e(xr,fur),e(xr,Qbe),e(Qbe,mur),e(xr,gur),e(xr,tn),e(tn,hur),e(tn,Hbe),e(Hbe,pur),e(tn,_ur),e(tn,Ube),e(Ube,uur),e(tn,bur),e(tn,Jbe),e(Jbe,vur),e(tn,Fur),e(xr,Tur),e(xr,ie),e(ie,L9),e(L9,Ybe),e(Ybe,Mur),e(L9,Eur),e(L9,wQ),e(wQ,Cur),e(L9,wur),e(ie,Aur),e(ie,x9),e(x9,Kbe),e(Kbe,yur),e(x9,Lur),e(x9,AQ),e(AQ,xur),e(x9,$ur),e(ie,kur),e(ie,$9),e($9,Zbe),e(Zbe,Sur),e($9,Rur),e($9,yQ),e(yQ,Pur),e($9,Bur),e(ie,Iur),e(ie,k9),e(k9,eve),e(eve,qur),e(k9,Nur),e(k9,LQ),e(LQ,jur),e(k9,Dur),e(ie,Gur),e(ie,S9),e(S9,ove),e(ove,Our),e(S9,Vur),e(S9,xQ),e(xQ,Xur),e(S9,zur),e(ie,Wur),e(ie,R9),e(R9,rve),e(rve,Qur),e(R9,Hur),e(R9,$Q),e($Q,Uur),e(R9,Jur),e(ie,Yur),e(ie,P9),e(P9,tve),e(tve,Kur),e(P9,Zur),e(P9,kQ),e(kQ,e2r),e(P9,o2r),e(ie,r2r),e(ie,B9),e(B9,ave),e(ave,t2r),e(B9,a2r),e(B9,SQ),e(SQ,n2r),e(B9,s2r),e(ie,l2r),e(ie,I9),e(I9,nve),e(nve,i2r),e(I9,d2r),e(I9,RQ),e(RQ,c2r),e(I9,f2r),e(ie,m2r),e(ie,q9),e(q9,sve),e(sve,g2r),e(q9,h2r),e(q9,PQ),e(PQ,p2r),e(q9,_2r),e(ie,u2r),e(ie,N9),e(N9,lve),e(lve,b2r),e(N9,v2r),e(N9,BQ),e(BQ,F2r),e(N9,T2r),e(ie,M2r),e(ie,j9),e(j9,ive),e(ive,E2r),e(j9,C2r),e(j9,IQ),e(IQ,w2r),e(j9,A2r),e(ie,y2r),e(ie,D9),e(D9,dve),e(dve,L2r),e(D9,x2r),e(D9,qQ),e(qQ,$2r),e(D9,k2r),e(ie,S2r),e(ie,G9),e(G9,cve),e(cve,R2r),e(G9,P2r),e(G9,NQ),e(NQ,B2r),e(G9,I2r),e(ie,q2r),e(ie,O9),e(O9,fve),e(fve,N2r),e(O9,j2r),e(O9,jQ),e(jQ,D2r),e(O9,G2r),e(ie,O2r),e(ie,V9),e(V9,mve),e(mve,V2r),e(V9,X2r),e(V9,DQ),e(DQ,z2r),e(V9,W2r),e(ie,Q2r),e(ie,X9),e(X9,gve),e(gve,H2r),e(X9,U2r),e(X9,GQ),e(GQ,J2r),e(X9,Y2r),e(ie,K2r),e(ie,z9),e(z9,hve),e(hve,Z2r),e(z9,e1r),e(z9,OQ),e(OQ,o1r),e(z9,r1r),e(ie,t1r),e(ie,W9),e(W9,pve),e(pve,a1r),e(W9,n1r),e(W9,VQ),e(VQ,s1r),e(W9,l1r),e(ie,i1r),e(ie,Q9),e(Q9,_ve),e(_ve,d1r),e(Q9,c1r),e(Q9,XQ),e(XQ,f1r),e(Q9,m1r),e(xr,g1r),M(H9,xr,null),b(f,vNe,u),b(f,rc,u),e(rc,U9),e(U9,uve),M(TL,uve,null),e(rc,h1r),e(rc,bve),e(bve,p1r),b(f,FNe,u),b(f,rr,u),M(ML,rr,null),e(rr,_1r),e(rr,tc),e(tc,u1r),e(tc,zQ),e(zQ,b1r),e(tc,v1r),e(tc,WQ),e(WQ,F1r),e(tc,T1r),e(rr,M1r),e(rr,EL),e(EL,E1r),e(EL,vve),e(vve,C1r),e(EL,w1r),e(rr,A1r),e(rr,St),M(CL,St,null),e(St,y1r),e(St,Fve),e(Fve,L1r),e(St,x1r),e(St,ac),e(ac,$1r),e(ac,Tve),e(Tve,k1r),e(ac,S1r),e(ac,QQ),e(QQ,R1r),e(ac,P1r),e(St,B1r),M(J9,St,null),e(rr,I1r),e(rr,$r),M(wL,$r,null),e($r,q1r),e($r,Mve),e(Mve,N1r),e($r,j1r),e($r,an),e(an,D1r),e(an,Eve),e(Eve,G1r),e(an,O1r),e(an,Cve),e(Cve,V1r),e(an,X1r),e(an,wve),e(wve,z1r),e(an,W1r),e($r,Q1r),e($r,ye),e(ye,Y9),e(Y9,Ave),e(Ave,H1r),e(Y9,U1r),e(Y9,HQ),e(HQ,J1r),e(Y9,Y1r),e(ye,K1r),e(ye,K9),e(K9,yve),e(yve,Z1r),e(K9,ebr),e(K9,UQ),e(UQ,obr),e(K9,rbr),e(ye,tbr),e(ye,Z9),e(Z9,Lve),e(Lve,abr),e(Z9,nbr),e(Z9,JQ),e(JQ,sbr),e(Z9,lbr),e(ye,ibr),e(ye,eM),e(eM,xve),e(xve,dbr),e(eM,cbr),e(eM,YQ),e(YQ,fbr),e(eM,mbr),e(ye,gbr),e(ye,oM),e(oM,$ve),e($ve,hbr),e(oM,pbr),e(oM,KQ),e(KQ,_br),e(oM,ubr),e(ye,bbr),e(ye,rM),e(rM,kve),e(kve,vbr),e(rM,Fbr),e(rM,ZQ),e(ZQ,Tbr),e(rM,Mbr),e(ye,Ebr),e(ye,tM),e(tM,Sve),e(Sve,Cbr),e(tM,wbr),e(tM,eH),e(eH,Abr),e(tM,ybr),e(ye,Lbr),e(ye,aM),e(aM,Rve),e(Rve,xbr),e(aM,$br),e(aM,oH),e(oH,kbr),e(aM,Sbr),e(ye,Rbr),e(ye,nM),e(nM,Pve),e(Pve,Pbr),e(nM,Bbr),e(nM,rH),e(rH,Ibr),e(nM,qbr),e(ye,Nbr),e(ye,sM),e(sM,Bve),e(Bve,jbr),e(sM,Dbr),e(sM,tH),e(tH,Gbr),e(sM,Obr),e($r,Vbr),M(lM,$r,null),b(f,TNe,u),b(f,nc,u),e(nc,iM),e(iM,Ive),M(AL,Ive,null),e(nc,Xbr),e(nc,qve),e(qve,zbr),b(f,MNe,u),b(f,tr,u),M(yL,tr,null),e(tr,Wbr),e(tr,sc),e(sc,Qbr),e(sc,aH),e(aH,Hbr),e(sc,Ubr),e(sc,nH),e(nH,Jbr),e(sc,Ybr),e(tr,Kbr),e(tr,LL),e(LL,Zbr),e(LL,Nve),e(Nve,evr),e(LL,ovr),e(tr,rvr),e(tr,Rt),M(xL,Rt,null),e(Rt,tvr),e(Rt,jve),e(jve,avr),e(Rt,nvr),e(Rt,lc),e(lc,svr),e(lc,Dve),e(Dve,lvr),e(lc,ivr),e(lc,sH),e(sH,dvr),e(lc,cvr),e(Rt,fvr),M(dM,Rt,null),e(tr,mvr),e(tr,kr),M($L,kr,null),e(kr,gvr),e(kr,Gve),e(Gve,hvr),e(kr,pvr),e(kr,nn),e(nn,_vr),e(nn,Ove),e(Ove,uvr),e(nn,bvr),e(nn,Vve),e(Vve,vvr),e(nn,Fvr),e(nn,Xve),e(Xve,Tvr),e(nn,Mvr),e(kr,Evr),e(kr,ee),e(ee,cM),e(cM,zve),e(zve,Cvr),e(cM,wvr),e(cM,lH),e(lH,Avr),e(cM,yvr),e(ee,Lvr),e(ee,fM),e(fM,Wve),e(Wve,xvr),e(fM,$vr),e(fM,iH),e(iH,kvr),e(fM,Svr),e(ee,Rvr),e(ee,mM),e(mM,Qve),e(Qve,Pvr),e(mM,Bvr),e(mM,dH),e(dH,Ivr),e(mM,qvr),e(ee,Nvr),e(ee,gM),e(gM,Hve),e(Hve,jvr),e(gM,Dvr),e(gM,cH),e(cH,Gvr),e(gM,Ovr),e(ee,Vvr),e(ee,hM),e(hM,Uve),e(Uve,Xvr),e(hM,zvr),e(hM,fH),e(fH,Wvr),e(hM,Qvr),e(ee,Hvr),e(ee,pM),e(pM,Jve),e(Jve,Uvr),e(pM,Jvr),e(pM,mH),e(mH,Yvr),e(pM,Kvr),e(ee,Zvr),e(ee,_M),e(_M,Yve),e(Yve,eFr),e(_M,oFr),e(_M,gH),e(gH,rFr),e(_M,tFr),e(ee,aFr),e(ee,uM),e(uM,Kve),e(Kve,nFr),e(uM,sFr),e(uM,hH),e(hH,lFr),e(uM,iFr),e(ee,dFr),e(ee,bM),e(bM,Zve),e(Zve,cFr),e(bM,fFr),e(bM,pH),e(pH,mFr),e(bM,gFr),e(ee,hFr),e(ee,vM),e(vM,eFe),e(eFe,pFr),e(vM,_Fr),e(vM,_H),e(_H,uFr),e(vM,bFr),e(ee,vFr),e(ee,FM),e(FM,oFe),e(oFe,FFr),e(FM,TFr),e(FM,uH),e(uH,MFr),e(FM,EFr),e(ee,CFr),e(ee,TM),e(TM,rFe),e(rFe,wFr),e(TM,AFr),e(TM,bH),e(bH,yFr),e(TM,LFr),e(ee,xFr),e(ee,MM),e(MM,tFe),e(tFe,$Fr),e(MM,kFr),e(MM,vH),e(vH,SFr),e(MM,RFr),e(ee,PFr),e(ee,EM),e(EM,aFe),e(aFe,BFr),e(EM,IFr),e(EM,FH),e(FH,qFr),e(EM,NFr),e(ee,jFr),e(ee,CM),e(CM,nFe),e(nFe,DFr),e(CM,GFr),e(CM,TH),e(TH,OFr),e(CM,VFr),e(ee,XFr),e(ee,wM),e(wM,sFe),e(sFe,zFr),e(wM,WFr),e(wM,MH),e(MH,QFr),e(wM,HFr),e(ee,UFr),e(ee,AM),e(AM,lFe),e(lFe,JFr),e(AM,YFr),e(AM,EH),e(EH,KFr),e(AM,ZFr),e(ee,e6r),e(ee,yM),e(yM,iFe),e(iFe,o6r),e(yM,r6r),e(yM,CH),e(CH,t6r),e(yM,a6r),e(ee,n6r),e(ee,LM),e(LM,dFe),e(dFe,s6r),e(LM,l6r),e(LM,wH),e(wH,i6r),e(LM,d6r),e(ee,c6r),e(ee,xM),e(xM,cFe),e(cFe,f6r),e(xM,m6r),e(xM,AH),e(AH,g6r),e(xM,h6r),e(ee,p6r),e(ee,$M),e($M,fFe),e(fFe,_6r),e($M,u6r),e($M,yH),e(yH,b6r),e($M,v6r),e(ee,F6r),e(ee,kM),e(kM,mFe),e(mFe,T6r),e(kM,M6r),e(kM,LH),e(LH,E6r),e(kM,C6r),e(ee,w6r),e(ee,SM),e(SM,gFe),e(gFe,A6r),e(SM,y6r),e(SM,xH),e(xH,L6r),e(SM,x6r),e(ee,$6r),e(ee,RM),e(RM,hFe),e(hFe,k6r),e(RM,S6r),e(RM,$H),e($H,R6r),e(RM,P6r),e(ee,B6r),e(ee,PM),e(PM,pFe),e(pFe,I6r),e(PM,q6r),e(PM,kH),e(kH,N6r),e(PM,j6r),e(ee,D6r),e(ee,BM),e(BM,_Fe),e(_Fe,G6r),e(BM,O6r),e(BM,SH),e(SH,V6r),e(BM,X6r),e(kr,z6r),M(IM,kr,null),b(f,ENe,u),b(f,ic,u),e(ic,qM),e(qM,uFe),M(kL,uFe,null),e(ic,W6r),e(ic,bFe),e(bFe,Q6r),b(f,CNe,u),b(f,ar,u),M(SL,ar,null),e(ar,H6r),e(ar,dc),e(dc,U6r),e(dc,RH),e(RH,J6r),e(dc,Y6r),e(dc,PH),e(PH,K6r),e(dc,Z6r),e(ar,eTr),e(ar,RL),e(RL,oTr),e(RL,vFe),e(vFe,rTr),e(RL,tTr),e(ar,aTr),e(ar,Pt),M(PL,Pt,null),e(Pt,nTr),e(Pt,FFe),e(FFe,sTr),e(Pt,lTr),e(Pt,cc),e(cc,iTr),e(cc,TFe),e(TFe,dTr),e(cc,cTr),e(cc,BH),e(BH,fTr),e(cc,mTr),e(Pt,gTr),M(NM,Pt,null),e(ar,hTr),e(ar,Sr),M(BL,Sr,null),e(Sr,pTr),e(Sr,MFe),e(MFe,_Tr),e(Sr,uTr),e(Sr,sn),e(sn,bTr),e(sn,EFe),e(EFe,vTr),e(sn,FTr),e(sn,CFe),e(CFe,TTr),e(sn,MTr),e(sn,wFe),e(wFe,ETr),e(sn,CTr),e(Sr,wTr),e(Sr,pe),e(pe,jM),e(jM,AFe),e(AFe,ATr),e(jM,yTr),e(jM,IH),e(IH,LTr),e(jM,xTr),e(pe,$Tr),e(pe,DM),e(DM,yFe),e(yFe,kTr),e(DM,STr),e(DM,qH),e(qH,RTr),e(DM,PTr),e(pe,BTr),e(pe,GM),e(GM,LFe),e(LFe,ITr),e(GM,qTr),e(GM,NH),e(NH,NTr),e(GM,jTr),e(pe,DTr),e(pe,OM),e(OM,xFe),e(xFe,GTr),e(OM,OTr),e(OM,jH),e(jH,VTr),e(OM,XTr),e(pe,zTr),e(pe,VM),e(VM,$Fe),e($Fe,WTr),e(VM,QTr),e(VM,DH),e(DH,HTr),e(VM,UTr),e(pe,JTr),e(pe,XM),e(XM,kFe),e(kFe,YTr),e(XM,KTr),e(XM,GH),e(GH,ZTr),e(XM,e7r),e(pe,o7r),e(pe,zM),e(zM,SFe),e(SFe,r7r),e(zM,t7r),e(zM,OH),e(OH,a7r),e(zM,n7r),e(pe,s7r),e(pe,WM),e(WM,RFe),e(RFe,l7r),e(WM,i7r),e(WM,VH),e(VH,d7r),e(WM,c7r),e(pe,f7r),e(pe,QM),e(QM,PFe),e(PFe,m7r),e(QM,g7r),e(QM,XH),e(XH,h7r),e(QM,p7r),e(pe,_7r),e(pe,HM),e(HM,BFe),e(BFe,u7r),e(HM,b7r),e(HM,zH),e(zH,v7r),e(HM,F7r),e(pe,T7r),e(pe,UM),e(UM,IFe),e(IFe,M7r),e(UM,E7r),e(UM,WH),e(WH,C7r),e(UM,w7r),e(pe,A7r),e(pe,JM),e(JM,qFe),e(qFe,y7r),e(JM,L7r),e(JM,QH),e(QH,x7r),e(JM,$7r),e(pe,k7r),e(pe,YM),e(YM,NFe),e(NFe,S7r),e(YM,R7r),e(YM,HH),e(HH,P7r),e(YM,B7r),e(pe,I7r),e(pe,KM),e(KM,jFe),e(jFe,q7r),e(KM,N7r),e(KM,UH),e(UH,j7r),e(KM,D7r),e(pe,G7r),e(pe,ZM),e(ZM,DFe),e(DFe,O7r),e(ZM,V7r),e(ZM,JH),e(JH,X7r),e(ZM,z7r),e(pe,W7r),e(pe,e4),e(e4,GFe),e(GFe,Q7r),e(e4,H7r),e(e4,YH),e(YH,U7r),e(e4,J7r),e(pe,Y7r),e(pe,o4),e(o4,OFe),e(OFe,K7r),e(o4,Z7r),e(o4,KH),e(KH,e9r),e(o4,o9r),e(Sr,r9r),M(r4,Sr,null),b(f,wNe,u),b(f,fc,u),e(fc,t4),e(t4,VFe),M(IL,VFe,null),e(fc,t9r),e(fc,XFe),e(XFe,a9r),b(f,ANe,u),b(f,nr,u),M(qL,nr,null),e(nr,n9r),e(nr,mc),e(mc,s9r),e(mc,ZH),e(ZH,l9r),e(mc,i9r),e(mc,eU),e(eU,d9r),e(mc,c9r),e(nr,f9r),e(nr,NL),e(NL,m9r),e(NL,zFe),e(zFe,g9r),e(NL,h9r),e(nr,p9r),e(nr,Bt),M(jL,Bt,null),e(Bt,_9r),e(Bt,WFe),e(WFe,u9r),e(Bt,b9r),e(Bt,gc),e(gc,v9r),e(gc,QFe),e(QFe,F9r),e(gc,T9r),e(gc,oU),e(oU,M9r),e(gc,E9r),e(Bt,C9r),M(a4,Bt,null),e(nr,w9r),e(nr,Rr),M(DL,Rr,null),e(Rr,A9r),e(Rr,HFe),e(HFe,y9r),e(Rr,L9r),e(Rr,ln),e(ln,x9r),e(ln,UFe),e(UFe,$9r),e(ln,k9r),e(ln,JFe),e(JFe,S9r),e(ln,R9r),e(ln,YFe),e(YFe,P9r),e(ln,B9r),e(Rr,I9r),e(Rr,GL),e(GL,n4),e(n4,KFe),e(KFe,q9r),e(n4,N9r),e(n4,rU),e(rU,j9r),e(n4,D9r),e(GL,G9r),e(GL,s4),e(s4,ZFe),e(ZFe,O9r),e(s4,V9r),e(s4,tU),e(tU,X9r),e(s4,z9r),e(Rr,W9r),M(l4,Rr,null),b(f,yNe,u),b(f,hc,u),e(hc,i4),e(i4,e6e),M(OL,e6e,null),e(hc,Q9r),e(hc,o6e),e(o6e,H9r),b(f,LNe,u),b(f,sr,u),M(VL,sr,null),e(sr,U9r),e(sr,pc),e(pc,J9r),e(pc,aU),e(aU,Y9r),e(pc,K9r),e(pc,nU),e(nU,Z9r),e(pc,eMr),e(sr,oMr),e(sr,XL),e(XL,rMr),e(XL,r6e),e(r6e,tMr),e(XL,aMr),e(sr,nMr),e(sr,It),M(zL,It,null),e(It,sMr),e(It,t6e),e(t6e,lMr),e(It,iMr),e(It,_c),e(_c,dMr),e(_c,a6e),e(a6e,cMr),e(_c,fMr),e(_c,sU),e(sU,mMr),e(_c,gMr),e(It,hMr),M(d4,It,null),e(sr,pMr),e(sr,Pr),M(WL,Pr,null),e(Pr,_Mr),e(Pr,n6e),e(n6e,uMr),e(Pr,bMr),e(Pr,dn),e(dn,vMr),e(dn,s6e),e(s6e,FMr),e(dn,TMr),e(dn,l6e),e(l6e,MMr),e(dn,EMr),e(dn,i6e),e(i6e,CMr),e(dn,wMr),e(Pr,AMr),e(Pr,d6e),e(d6e,c4),e(c4,c6e),e(c6e,yMr),e(c4,LMr),e(c4,lU),e(lU,xMr),e(c4,$Mr),e(Pr,kMr),M(f4,Pr,null),b(f,xNe,u),b(f,uc,u),e(uc,m4),e(m4,f6e),M(QL,f6e,null),e(uc,SMr),e(uc,m6e),e(m6e,RMr),b(f,$Ne,u),b(f,lr,u),M(HL,lr,null),e(lr,PMr),e(lr,bc),e(bc,BMr),e(bc,iU),e(iU,IMr),e(bc,qMr),e(bc,dU),e(dU,NMr),e(bc,jMr),e(lr,DMr),e(lr,UL),e(UL,GMr),e(UL,g6e),e(g6e,OMr),e(UL,VMr),e(lr,XMr),e(lr,qt),M(JL,qt,null),e(qt,zMr),e(qt,h6e),e(h6e,WMr),e(qt,QMr),e(qt,vc),e(vc,HMr),e(vc,p6e),e(p6e,UMr),e(vc,JMr),e(vc,cU),e(cU,YMr),e(vc,KMr),e(qt,ZMr),M(g4,qt,null),e(lr,e4r),e(lr,Br),M(YL,Br,null),e(Br,o4r),e(Br,_6e),e(_6e,r4r),e(Br,t4r),e(Br,cn),e(cn,a4r),e(cn,u6e),e(u6e,n4r),e(cn,s4r),e(cn,b6e),e(b6e,l4r),e(cn,i4r),e(cn,v6e),e(v6e,d4r),e(cn,c4r),e(Br,f4r),e(Br,de),e(de,h4),e(h4,F6e),e(F6e,m4r),e(h4,g4r),e(h4,fU),e(fU,h4r),e(h4,p4r),e(de,_4r),e(de,p4),e(p4,T6e),e(T6e,u4r),e(p4,b4r),e(p4,mU),e(mU,v4r),e(p4,F4r),e(de,T4r),e(de,_4),e(_4,M6e),e(M6e,M4r),e(_4,E4r),e(_4,gU),e(gU,C4r),e(_4,w4r),e(de,A4r),e(de,u4),e(u4,E6e),e(E6e,y4r),e(u4,L4r),e(u4,hU),e(hU,x4r),e(u4,$4r),e(de,k4r),e(de,b4),e(b4,C6e),e(C6e,S4r),e(b4,R4r),e(b4,pU),e(pU,P4r),e(b4,B4r),e(de,I4r),e(de,v4),e(v4,w6e),e(w6e,q4r),e(v4,N4r),e(v4,_U),e(_U,j4r),e(v4,D4r),e(de,G4r),e(de,F4),e(F4,A6e),e(A6e,O4r),e(F4,V4r),e(F4,uU),e(uU,X4r),e(F4,z4r),e(de,W4r),e(de,T4),e(T4,y6e),e(y6e,Q4r),e(T4,H4r),e(T4,bU),e(bU,U4r),e(T4,J4r),e(de,Y4r),e(de,M4),e(M4,L6e),e(L6e,K4r),e(M4,Z4r),e(M4,vU),e(vU,eEr),e(M4,oEr),e(de,rEr),e(de,E4),e(E4,x6e),e(x6e,tEr),e(E4,aEr),e(E4,FU),e(FU,nEr),e(E4,sEr),e(de,lEr),e(de,C4),e(C4,$6e),e($6e,iEr),e(C4,dEr),e(C4,TU),e(TU,cEr),e(C4,fEr),e(de,mEr),e(de,w4),e(w4,k6e),e(k6e,gEr),e(w4,hEr),e(w4,MU),e(MU,pEr),e(w4,_Er),e(de,uEr),e(de,A4),e(A4,S6e),e(S6e,bEr),e(A4,vEr),e(A4,EU),e(EU,FEr),e(A4,TEr),e(de,MEr),e(de,y4),e(y4,R6e),e(R6e,EEr),e(y4,CEr),e(y4,CU),e(CU,wEr),e(y4,AEr),e(de,yEr),e(de,L4),e(L4,P6e),e(P6e,LEr),e(L4,xEr),e(L4,wU),e(wU,$Er),e(L4,kEr),e(de,SEr),e(de,x4),e(x4,B6e),e(B6e,REr),e(x4,PEr),e(x4,AU),e(AU,BEr),e(x4,IEr),e(de,qEr),e(de,$4),e($4,I6e),e(I6e,NEr),e($4,jEr),e($4,yU),e(yU,DEr),e($4,GEr),e(de,OEr),e(de,k4),e(k4,q6e),e(q6e,VEr),e(k4,XEr),e(k4,LU),e(LU,zEr),e(k4,WEr),e(de,QEr),e(de,S4),e(S4,N6e),e(N6e,HEr),e(S4,UEr),e(S4,xU),e(xU,JEr),e(S4,YEr),e(de,KEr),e(de,R4),e(R4,j6e),e(j6e,ZEr),e(R4,e5r),e(R4,$U),e($U,o5r),e(R4,r5r),e(Br,t5r),M(P4,Br,null),b(f,kNe,u),b(f,Fc,u),e(Fc,B4),e(B4,D6e),M(KL,D6e,null),e(Fc,a5r),e(Fc,G6e),e(G6e,n5r),b(f,SNe,u),b(f,ir,u),M(ZL,ir,null),e(ir,s5r),e(ir,Tc),e(Tc,l5r),e(Tc,kU),e(kU,i5r),e(Tc,d5r),e(Tc,SU),e(SU,c5r),e(Tc,f5r),e(ir,m5r),e(ir,e8),e(e8,g5r),e(e8,O6e),e(O6e,h5r),e(e8,p5r),e(ir,_5r),e(ir,Nt),M(o8,Nt,null),e(Nt,u5r),e(Nt,V6e),e(V6e,b5r),e(Nt,v5r),e(Nt,Mc),e(Mc,F5r),e(Mc,X6e),e(X6e,T5r),e(Mc,M5r),e(Mc,RU),e(RU,E5r),e(Mc,C5r),e(Nt,w5r),M(I4,Nt,null),e(ir,A5r),e(ir,Ir),M(r8,Ir,null),e(Ir,y5r),e(Ir,z6e),e(z6e,L5r),e(Ir,x5r),e(Ir,fn),e(fn,$5r),e(fn,W6e),e(W6e,k5r),e(fn,S5r),e(fn,Q6e),e(Q6e,R5r),e(fn,P5r),e(fn,H6e),e(H6e,B5r),e(fn,I5r),e(Ir,q5r),e(Ir,ce),e(ce,q4),e(q4,U6e),e(U6e,N5r),e(q4,j5r),e(q4,PU),e(PU,D5r),e(q4,G5r),e(ce,O5r),e(ce,N4),e(N4,J6e),e(J6e,V5r),e(N4,X5r),e(N4,BU),e(BU,z5r),e(N4,W5r),e(ce,Q5r),e(ce,j4),e(j4,Y6e),e(Y6e,H5r),e(j4,U5r),e(j4,IU),e(IU,J5r),e(j4,Y5r),e(ce,K5r),e(ce,D4),e(D4,K6e),e(K6e,Z5r),e(D4,eCr),e(D4,qU),e(qU,oCr),e(D4,rCr),e(ce,tCr),e(ce,G4),e(G4,Z6e),e(Z6e,aCr),e(G4,nCr),e(G4,NU),e(NU,sCr),e(G4,lCr),e(ce,iCr),e(ce,O4),e(O4,eTe),e(eTe,dCr),e(O4,cCr),e(O4,jU),e(jU,fCr),e(O4,mCr),e(ce,gCr),e(ce,V4),e(V4,oTe),e(oTe,hCr),e(V4,pCr),e(V4,DU),e(DU,_Cr),e(V4,uCr),e(ce,bCr),e(ce,X4),e(X4,rTe),e(rTe,vCr),e(X4,FCr),e(X4,GU),e(GU,TCr),e(X4,MCr),e(ce,ECr),e(ce,z4),e(z4,tTe),e(tTe,CCr),e(z4,wCr),e(z4,OU),e(OU,ACr),e(z4,yCr),e(ce,LCr),e(ce,W4),e(W4,aTe),e(aTe,xCr),e(W4,$Cr),e(W4,VU),e(VU,kCr),e(W4,SCr),e(ce,RCr),e(ce,Q4),e(Q4,nTe),e(nTe,PCr),e(Q4,BCr),e(Q4,XU),e(XU,ICr),e(Q4,qCr),e(ce,NCr),e(ce,H4),e(H4,sTe),e(sTe,jCr),e(H4,DCr),e(H4,zU),e(zU,GCr),e(H4,OCr),e(ce,VCr),e(ce,U4),e(U4,lTe),e(lTe,XCr),e(U4,zCr),e(U4,WU),e(WU,WCr),e(U4,QCr),e(ce,HCr),e(ce,J4),e(J4,iTe),e(iTe,UCr),e(J4,JCr),e(J4,QU),e(QU,YCr),e(J4,KCr),e(ce,ZCr),e(ce,Y4),e(Y4,dTe),e(dTe,e3r),e(Y4,o3r),e(Y4,HU),e(HU,r3r),e(Y4,t3r),e(ce,a3r),e(ce,K4),e(K4,cTe),e(cTe,n3r),e(K4,s3r),e(K4,UU),e(UU,l3r),e(K4,i3r),e(ce,d3r),e(ce,Z4),e(Z4,fTe),e(fTe,c3r),e(Z4,f3r),e(Z4,JU),e(JU,m3r),e(Z4,g3r),e(ce,h3r),e(ce,eE),e(eE,mTe),e(mTe,p3r),e(eE,_3r),e(eE,YU),e(YU,u3r),e(eE,b3r),e(ce,v3r),e(ce,oE),e(oE,gTe),e(gTe,F3r),e(oE,T3r),e(oE,KU),e(KU,M3r),e(oE,E3r),e(ce,C3r),e(ce,rE),e(rE,hTe),e(hTe,w3r),e(rE,A3r),e(rE,ZU),e(ZU,y3r),e(rE,L3r),e(Ir,x3r),M(tE,Ir,null),b(f,RNe,u),b(f,Ec,u),e(Ec,aE),e(aE,pTe),M(t8,pTe,null),e(Ec,$3r),e(Ec,_Te),e(_Te,k3r),b(f,PNe,u),b(f,dr,u),M(a8,dr,null),e(dr,S3r),e(dr,Cc),e(Cc,R3r),e(Cc,eJ),e(eJ,P3r),e(Cc,B3r),e(Cc,oJ),e(oJ,I3r),e(Cc,q3r),e(dr,N3r),e(dr,n8),e(n8,j3r),e(n8,uTe),e(uTe,D3r),e(n8,G3r),e(dr,O3r),e(dr,jt),M(s8,jt,null),e(jt,V3r),e(jt,bTe),e(bTe,X3r),e(jt,z3r),e(jt,wc),e(wc,W3r),e(wc,vTe),e(vTe,Q3r),e(wc,H3r),e(wc,rJ),e(rJ,U3r),e(wc,J3r),e(jt,Y3r),M(nE,jt,null),e(dr,K3r),e(dr,qr),M(l8,qr,null),e(qr,Z3r),e(qr,FTe),e(FTe,ewr),e(qr,owr),e(qr,mn),e(mn,rwr),e(mn,TTe),e(TTe,twr),e(mn,awr),e(mn,MTe),e(MTe,nwr),e(mn,swr),e(mn,ETe),e(ETe,lwr),e(mn,iwr),e(qr,dwr),e(qr,CTe),e(CTe,sE),e(sE,wTe),e(wTe,cwr),e(sE,fwr),e(sE,tJ),e(tJ,mwr),e(sE,gwr),e(qr,hwr),M(lE,qr,null),b(f,BNe,u),b(f,Ac,u),e(Ac,iE),e(iE,ATe),M(i8,ATe,null),e(Ac,pwr),e(Ac,yTe),e(yTe,_wr),b(f,INe,u),b(f,cr,u),M(d8,cr,null),e(cr,uwr),e(cr,yc),e(yc,bwr),e(yc,aJ),e(aJ,vwr),e(yc,Fwr),e(yc,nJ),e(nJ,Twr),e(yc,Mwr),e(cr,Ewr),e(cr,c8),e(c8,Cwr),e(c8,LTe),e(LTe,wwr),e(c8,Awr),e(cr,ywr),e(cr,Dt),M(f8,Dt,null),e(Dt,Lwr),e(Dt,xTe),e(xTe,xwr),e(Dt,$wr),e(Dt,Lc),e(Lc,kwr),e(Lc,$Te),e($Te,Swr),e(Lc,Rwr),e(Lc,sJ),e(sJ,Pwr),e(Lc,Bwr),e(Dt,Iwr),M(dE,Dt,null),e(cr,qwr),e(cr,Nr),M(m8,Nr,null),e(Nr,Nwr),e(Nr,kTe),e(kTe,jwr),e(Nr,Dwr),e(Nr,gn),e(gn,Gwr),e(gn,STe),e(STe,Owr),e(gn,Vwr),e(gn,RTe),e(RTe,Xwr),e(gn,zwr),e(gn,PTe),e(PTe,Wwr),e(gn,Qwr),e(Nr,Hwr),e(Nr,BTe),e(BTe,cE),e(cE,ITe),e(ITe,Uwr),e(cE,Jwr),e(cE,lJ),e(lJ,Ywr),e(cE,Kwr),e(Nr,Zwr),M(fE,Nr,null),b(f,qNe,u),b(f,xc,u),e(xc,mE),e(mE,qTe),M(g8,qTe,null),e(xc,e0r),e(xc,NTe),e(NTe,o0r),b(f,NNe,u),b(f,fr,u),M(h8,fr,null),e(fr,r0r),e(fr,$c),e($c,t0r),e($c,iJ),e(iJ,a0r),e($c,n0r),e($c,dJ),e(dJ,s0r),e($c,l0r),e(fr,i0r),e(fr,p8),e(p8,d0r),e(p8,jTe),e(jTe,c0r),e(p8,f0r),e(fr,m0r),e(fr,Gt),M(_8,Gt,null),e(Gt,g0r),e(Gt,DTe),e(DTe,h0r),e(Gt,p0r),e(Gt,kc),e(kc,_0r),e(kc,GTe),e(GTe,u0r),e(kc,b0r),e(kc,cJ),e(cJ,v0r),e(kc,F0r),e(Gt,T0r),M(gE,Gt,null),e(fr,M0r),e(fr,jr),M(u8,jr,null),e(jr,E0r),e(jr,OTe),e(OTe,C0r),e(jr,w0r),e(jr,hn),e(hn,A0r),e(hn,VTe),e(VTe,y0r),e(hn,L0r),e(hn,XTe),e(XTe,x0r),e(hn,$0r),e(hn,zTe),e(zTe,k0r),e(hn,S0r),e(jr,R0r),e(jr,oe),e(oe,hE),e(hE,WTe),e(WTe,P0r),e(hE,B0r),e(hE,fJ),e(fJ,I0r),e(hE,q0r),e(oe,N0r),e(oe,pE),e(pE,QTe),e(QTe,j0r),e(pE,D0r),e(pE,mJ),e(mJ,G0r),e(pE,O0r),e(oe,V0r),e(oe,_E),e(_E,HTe),e(HTe,X0r),e(_E,z0r),e(_E,gJ),e(gJ,W0r),e(_E,Q0r),e(oe,H0r),e(oe,uE),e(uE,UTe),e(UTe,U0r),e(uE,J0r),e(uE,hJ),e(hJ,Y0r),e(uE,K0r),e(oe,Z0r),e(oe,bE),e(bE,JTe),e(JTe,eAr),e(bE,oAr),e(bE,pJ),e(pJ,rAr),e(bE,tAr),e(oe,aAr),e(oe,vE),e(vE,YTe),e(YTe,nAr),e(vE,sAr),e(vE,_J),e(_J,lAr),e(vE,iAr),e(oe,dAr),e(oe,FE),e(FE,KTe),e(KTe,cAr),e(FE,fAr),e(FE,uJ),e(uJ,mAr),e(FE,gAr),e(oe,hAr),e(oe,TE),e(TE,ZTe),e(ZTe,pAr),e(TE,_Ar),e(TE,bJ),e(bJ,uAr),e(TE,bAr),e(oe,vAr),e(oe,ME),e(ME,e7e),e(e7e,FAr),e(ME,TAr),e(ME,vJ),e(vJ,MAr),e(ME,EAr),e(oe,CAr),e(oe,EE),e(EE,o7e),e(o7e,wAr),e(EE,AAr),e(EE,FJ),e(FJ,yAr),e(EE,LAr),e(oe,xAr),e(oe,CE),e(CE,r7e),e(r7e,$Ar),e(CE,kAr),e(CE,TJ),e(TJ,SAr),e(CE,RAr),e(oe,PAr),e(oe,wE),e(wE,t7e),e(t7e,BAr),e(wE,IAr),e(wE,MJ),e(MJ,qAr),e(wE,NAr),e(oe,jAr),e(oe,AE),e(AE,a7e),e(a7e,DAr),e(AE,GAr),e(AE,EJ),e(EJ,OAr),e(AE,VAr),e(oe,XAr),e(oe,yE),e(yE,n7e),e(n7e,zAr),e(yE,WAr),e(yE,CJ),e(CJ,QAr),e(yE,HAr),e(oe,UAr),e(oe,LE),e(LE,s7e),e(s7e,JAr),e(LE,YAr),e(LE,wJ),e(wJ,KAr),e(LE,ZAr),e(oe,eyr),e(oe,xE),e(xE,l7e),e(l7e,oyr),e(xE,ryr),e(xE,AJ),e(AJ,tyr),e(xE,ayr),e(oe,nyr),e(oe,$E),e($E,i7e),e(i7e,syr),e($E,lyr),e($E,yJ),e(yJ,iyr),e($E,dyr),e(oe,cyr),e(oe,kE),e(kE,d7e),e(d7e,fyr),e(kE,myr),e(kE,LJ),e(LJ,gyr),e(kE,hyr),e(oe,pyr),e(oe,SE),e(SE,c7e),e(c7e,_yr),e(SE,uyr),e(SE,xJ),e(xJ,byr),e(SE,vyr),e(oe,Fyr),e(oe,RE),e(RE,f7e),e(f7e,Tyr),e(RE,Myr),e(RE,$J),e($J,Eyr),e(RE,Cyr),e(oe,wyr),e(oe,PE),e(PE,m7e),e(m7e,Ayr),e(PE,yyr),e(PE,kJ),e(kJ,Lyr),e(PE,xyr),e(oe,$yr),e(oe,BE),e(BE,g7e),e(g7e,kyr),e(BE,Syr),e(BE,SJ),e(SJ,Ryr),e(BE,Pyr),e(oe,Byr),e(oe,IE),e(IE,h7e),e(h7e,Iyr),e(IE,qyr),e(IE,RJ),e(RJ,Nyr),e(IE,jyr),e(oe,Dyr),e(oe,qE),e(qE,p7e),e(p7e,Gyr),e(qE,Oyr),e(qE,PJ),e(PJ,Vyr),e(qE,Xyr),e(oe,zyr),e(oe,NE),e(NE,_7e),e(_7e,Wyr),e(NE,Qyr),e(NE,BJ),e(BJ,Hyr),e(NE,Uyr),e(oe,Jyr),e(oe,jE),e(jE,u7e),e(u7e,Yyr),e(jE,Kyr),e(jE,IJ),e(IJ,Zyr),e(jE,eLr),e(jr,oLr),M(DE,jr,null),b(f,jNe,u),b(f,Sc,u),e(Sc,GE),e(GE,b7e),M(b8,b7e,null),e(Sc,rLr),e(Sc,v7e),e(v7e,tLr),b(f,DNe,u),b(f,mr,u),M(v8,mr,null),e(mr,aLr),e(mr,Rc),e(Rc,nLr),e(Rc,qJ),e(qJ,sLr),e(Rc,lLr),e(Rc,NJ),e(NJ,iLr),e(Rc,dLr),e(mr,cLr),e(mr,F8),e(F8,fLr),e(F8,F7e),e(F7e,mLr),e(F8,gLr),e(mr,hLr),e(mr,Ot),M(T8,Ot,null),e(Ot,pLr),e(Ot,T7e),e(T7e,_Lr),e(Ot,uLr),e(Ot,Pc),e(Pc,bLr),e(Pc,M7e),e(M7e,vLr),e(Pc,FLr),e(Pc,jJ),e(jJ,TLr),e(Pc,MLr),e(Ot,ELr),M(OE,Ot,null),e(mr,CLr),e(mr,Dr),M(M8,Dr,null),e(Dr,wLr),e(Dr,E7e),e(E7e,ALr),e(Dr,yLr),e(Dr,pn),e(pn,LLr),e(pn,C7e),e(C7e,xLr),e(pn,$Lr),e(pn,w7e),e(w7e,kLr),e(pn,SLr),e(pn,A7e),e(A7e,RLr),e(pn,PLr),e(Dr,BLr),e(Dr,Pe),e(Pe,VE),e(VE,y7e),e(y7e,ILr),e(VE,qLr),e(VE,DJ),e(DJ,NLr),e(VE,jLr),e(Pe,DLr),e(Pe,XE),e(XE,L7e),e(L7e,GLr),e(XE,OLr),e(XE,GJ),e(GJ,VLr),e(XE,XLr),e(Pe,zLr),e(Pe,zE),e(zE,x7e),e(x7e,WLr),e(zE,QLr),e(zE,OJ),e(OJ,HLr),e(zE,ULr),e(Pe,JLr),e(Pe,WE),e(WE,$7e),e($7e,YLr),e(WE,KLr),e(WE,VJ),e(VJ,ZLr),e(WE,e8r),e(Pe,o8r),e(Pe,QE),e(QE,k7e),e(k7e,r8r),e(QE,t8r),e(QE,XJ),e(XJ,a8r),e(QE,n8r),e(Pe,s8r),e(Pe,HE),e(HE,S7e),e(S7e,l8r),e(HE,i8r),e(HE,zJ),e(zJ,d8r),e(HE,c8r),e(Pe,f8r),e(Pe,UE),e(UE,R7e),e(R7e,m8r),e(UE,g8r),e(UE,WJ),e(WJ,h8r),e(UE,p8r),e(Pe,_8r),e(Pe,JE),e(JE,P7e),e(P7e,u8r),e(JE,b8r),e(JE,QJ),e(QJ,v8r),e(JE,F8r),e(Pe,T8r),e(Pe,YE),e(YE,B7e),e(B7e,M8r),e(YE,E8r),e(YE,HJ),e(HJ,C8r),e(YE,w8r),e(Dr,A8r),M(KE,Dr,null),b(f,GNe,u),b(f,Bc,u),e(Bc,ZE),e(ZE,I7e),M(E8,I7e,null),e(Bc,y8r),e(Bc,q7e),e(q7e,L8r),b(f,ONe,u),b(f,gr,u),M(C8,gr,null),e(gr,x8r),e(gr,Ic),e(Ic,$8r),e(Ic,UJ),e(UJ,k8r),e(Ic,S8r),e(Ic,JJ),e(JJ,R8r),e(Ic,P8r),e(gr,B8r),e(gr,w8),e(w8,I8r),e(w8,N7e),e(N7e,q8r),e(w8,N8r),e(gr,j8r),e(gr,Vt),M(A8,Vt,null),e(Vt,D8r),e(Vt,j7e),e(j7e,G8r),e(Vt,O8r),e(Vt,qc),e(qc,V8r),e(qc,D7e),e(D7e,X8r),e(qc,z8r),e(qc,YJ),e(YJ,W8r),e(qc,Q8r),e(Vt,H8r),M(e5,Vt,null),e(gr,U8r),e(gr,Gr),M(y8,Gr,null),e(Gr,J8r),e(Gr,G7e),e(G7e,Y8r),e(Gr,K8r),e(Gr,_n),e(_n,Z8r),e(_n,O7e),e(O7e,exr),e(_n,oxr),e(_n,V7e),e(V7e,rxr),e(_n,txr),e(_n,X7e),e(X7e,axr),e(_n,nxr),e(Gr,sxr),e(Gr,Te),e(Te,o5),e(o5,z7e),e(z7e,lxr),e(o5,ixr),e(o5,KJ),e(KJ,dxr),e(o5,cxr),e(Te,fxr),e(Te,r5),e(r5,W7e),e(W7e,mxr),e(r5,gxr),e(r5,ZJ),e(ZJ,hxr),e(r5,pxr),e(Te,_xr),e(Te,t5),e(t5,Q7e),e(Q7e,uxr),e(t5,bxr),e(t5,eY),e(eY,vxr),e(t5,Fxr),e(Te,Txr),e(Te,a5),e(a5,H7e),e(H7e,Mxr),e(a5,Exr),e(a5,oY),e(oY,Cxr),e(a5,wxr),e(Te,Axr),e(Te,n5),e(n5,U7e),e(U7e,yxr),e(n5,Lxr),e(n5,rY),e(rY,xxr),e(n5,$xr),e(Te,kxr),e(Te,s5),e(s5,J7e),e(J7e,Sxr),e(s5,Rxr),e(s5,tY),e(tY,Pxr),e(s5,Bxr),e(Te,Ixr),e(Te,l5),e(l5,Y7e),e(Y7e,qxr),e(l5,Nxr),e(l5,aY),e(aY,jxr),e(l5,Dxr),e(Te,Gxr),e(Te,i5),e(i5,K7e),e(K7e,Oxr),e(i5,Vxr),e(i5,nY),e(nY,Xxr),e(i5,zxr),e(Te,Wxr),e(Te,d5),e(d5,Z7e),e(Z7e,Qxr),e(d5,Hxr),e(d5,sY),e(sY,Uxr),e(d5,Jxr),e(Te,Yxr),e(Te,c5),e(c5,e9e),e(e9e,Kxr),e(c5,Zxr),e(c5,lY),e(lY,e$r),e(c5,o$r),e(Te,r$r),e(Te,f5),e(f5,o9e),e(o9e,t$r),e(f5,a$r),e(f5,iY),e(iY,n$r),e(f5,s$r),e(Te,l$r),e(Te,m5),e(m5,r9e),e(r9e,i$r),e(m5,d$r),e(m5,dY),e(dY,c$r),e(m5,f$r),e(Te,m$r),e(Te,g5),e(g5,t9e),e(t9e,g$r),e(g5,h$r),e(g5,cY),e(cY,p$r),e(g5,_$r),e(Gr,u$r),M(h5,Gr,null),b(f,VNe,u),b(f,Nc,u),e(Nc,p5),e(p5,a9e),M(L8,a9e,null),e(Nc,b$r),e(Nc,n9e),e(n9e,v$r),b(f,XNe,u),b(f,hr,u),M(x8,hr,null),e(hr,F$r),e(hr,jc),e(jc,T$r),e(jc,fY),e(fY,M$r),e(jc,E$r),e(jc,mY),e(mY,C$r),e(jc,w$r),e(hr,A$r),e(hr,$8),e($8,y$r),e($8,s9e),e(s9e,L$r),e($8,x$r),e(hr,$$r),e(hr,Xt),M(k8,Xt,null),e(Xt,k$r),e(Xt,l9e),e(l9e,S$r),e(Xt,R$r),e(Xt,Dc),e(Dc,P$r),e(Dc,i9e),e(i9e,B$r),e(Dc,I$r),e(Dc,gY),e(gY,q$r),e(Dc,N$r),e(Xt,j$r),M(_5,Xt,null),e(hr,D$r),e(hr,Or),M(S8,Or,null),e(Or,G$r),e(Or,d9e),e(d9e,O$r),e(Or,V$r),e(Or,un),e(un,X$r),e(un,c9e),e(c9e,z$r),e(un,W$r),e(un,f9e),e(f9e,Q$r),e(un,H$r),e(un,m9e),e(m9e,U$r),e(un,J$r),e(Or,Y$r),e(Or,Le),e(Le,u5),e(u5,g9e),e(g9e,K$r),e(u5,Z$r),e(u5,hY),e(hY,ekr),e(u5,okr),e(Le,rkr),e(Le,b5),e(b5,h9e),e(h9e,tkr),e(b5,akr),e(b5,pY),e(pY,nkr),e(b5,skr),e(Le,lkr),e(Le,v5),e(v5,p9e),e(p9e,ikr),e(v5,dkr),e(v5,_Y),e(_Y,ckr),e(v5,fkr),e(Le,mkr),e(Le,F5),e(F5,_9e),e(_9e,gkr),e(F5,hkr),e(F5,uY),e(uY,pkr),e(F5,_kr),e(Le,ukr),e(Le,T5),e(T5,u9e),e(u9e,bkr),e(T5,vkr),e(T5,bY),e(bY,Fkr),e(T5,Tkr),e(Le,Mkr),e(Le,M5),e(M5,b9e),e(b9e,Ekr),e(M5,Ckr),e(M5,vY),e(vY,wkr),e(M5,Akr),e(Le,ykr),e(Le,E5),e(E5,v9e),e(v9e,Lkr),e(E5,xkr),e(E5,FY),e(FY,$kr),e(E5,kkr),e(Le,Skr),e(Le,C5),e(C5,F9e),e(F9e,Rkr),e(C5,Pkr),e(C5,TY),e(TY,Bkr),e(C5,Ikr),e(Le,qkr),e(Le,w5),e(w5,T9e),e(T9e,Nkr),e(w5,jkr),e(w5,MY),e(MY,Dkr),e(w5,Gkr),e(Le,Okr),e(Le,A5),e(A5,M9e),e(M9e,Vkr),e(A5,Xkr),e(A5,EY),e(EY,zkr),e(A5,Wkr),e(Or,Qkr),M(y5,Or,null),b(f,zNe,u),b(f,Gc,u),e(Gc,L5),e(L5,E9e),M(R8,E9e,null),e(Gc,Hkr),e(Gc,C9e),e(C9e,Ukr),b(f,WNe,u),b(f,pr,u),M(P8,pr,null),e(pr,Jkr),e(pr,Oc),e(Oc,Ykr),e(Oc,CY),e(CY,Kkr),e(Oc,Zkr),e(Oc,wY),e(wY,eSr),e(Oc,oSr),e(pr,rSr),e(pr,B8),e(B8,tSr),e(B8,w9e),e(w9e,aSr),e(B8,nSr),e(pr,sSr),e(pr,zt),M(I8,zt,null),e(zt,lSr),e(zt,A9e),e(A9e,iSr),e(zt,dSr),e(zt,Vc),e(Vc,cSr),e(Vc,y9e),e(y9e,fSr),e(Vc,mSr),e(Vc,AY),e(AY,gSr),e(Vc,hSr),e(zt,pSr),M(x5,zt,null),e(pr,_Sr),e(pr,Vr),M(q8,Vr,null),e(Vr,uSr),e(Vr,L9e),e(L9e,bSr),e(Vr,vSr),e(Vr,bn),e(bn,FSr),e(bn,x9e),e(x9e,TSr),e(bn,MSr),e(bn,$9e),e($9e,ESr),e(bn,CSr),e(bn,k9e),e(k9e,wSr),e(bn,ASr),e(Vr,ySr),e(Vr,xe),e(xe,$5),e($5,S9e),e(S9e,LSr),e($5,xSr),e($5,yY),e(yY,$Sr),e($5,kSr),e(xe,SSr),e(xe,k5),e(k5,R9e),e(R9e,RSr),e(k5,PSr),e(k5,LY),e(LY,BSr),e(k5,ISr),e(xe,qSr),e(xe,S5),e(S5,P9e),e(P9e,NSr),e(S5,jSr),e(S5,xY),e(xY,DSr),e(S5,GSr),e(xe,OSr),e(xe,R5),e(R5,B9e),e(B9e,VSr),e(R5,XSr),e(R5,$Y),e($Y,zSr),e(R5,WSr),e(xe,QSr),e(xe,P5),e(P5,I9e),e(I9e,HSr),e(P5,USr),e(P5,kY),e(kY,JSr),e(P5,YSr),e(xe,KSr),e(xe,B5),e(B5,q9e),e(q9e,ZSr),e(B5,eRr),e(B5,SY),e(SY,oRr),e(B5,rRr),e(xe,tRr),e(xe,I5),e(I5,N9e),e(N9e,aRr),e(I5,nRr),e(I5,RY),e(RY,sRr),e(I5,lRr),e(xe,iRr),e(xe,q5),e(q5,j9e),e(j9e,dRr),e(q5,cRr),e(q5,PY),e(PY,fRr),e(q5,mRr),e(xe,gRr),e(xe,N5),e(N5,D9e),e(D9e,hRr),e(N5,pRr),e(N5,BY),e(BY,_Rr),e(N5,uRr),e(xe,bRr),e(xe,j5),e(j5,G9e),e(G9e,vRr),e(j5,FRr),e(j5,IY),e(IY,TRr),e(j5,MRr),e(Vr,ERr),M(D5,Vr,null),b(f,QNe,u),b(f,Xc,u),e(Xc,G5),e(G5,O9e),M(N8,O9e,null),e(Xc,CRr),e(Xc,V9e),e(V9e,wRr),b(f,HNe,u),b(f,_r,u),M(j8,_r,null),e(_r,ARr),e(_r,zc),e(zc,yRr),e(zc,qY),e(qY,LRr),e(zc,xRr),e(zc,NY),e(NY,$Rr),e(zc,kRr),e(_r,SRr),e(_r,D8),e(D8,RRr),e(D8,X9e),e(X9e,PRr),e(D8,BRr),e(_r,IRr),e(_r,Wt),M(G8,Wt,null),e(Wt,qRr),e(Wt,z9e),e(z9e,NRr),e(Wt,jRr),e(Wt,Wc),e(Wc,DRr),e(Wc,W9e),e(W9e,GRr),e(Wc,ORr),e(Wc,jY),e(jY,VRr),e(Wc,XRr),e(Wt,zRr),M(O5,Wt,null),e(_r,WRr),e(_r,Xr),M(O8,Xr,null),e(Xr,QRr),e(Xr,Q9e),e(Q9e,HRr),e(Xr,URr),e(Xr,vn),e(vn,JRr),e(vn,H9e),e(H9e,YRr),e(vn,KRr),e(vn,U9e),e(U9e,ZRr),e(vn,ePr),e(vn,J9e),e(J9e,oPr),e(vn,rPr),e(Xr,tPr),e(Xr,$e),e($e,V5),e(V5,Y9e),e(Y9e,aPr),e(V5,nPr),e(V5,DY),e(DY,sPr),e(V5,lPr),e($e,iPr),e($e,X5),e(X5,K9e),e(K9e,dPr),e(X5,cPr),e(X5,GY),e(GY,fPr),e(X5,mPr),e($e,gPr),e($e,z5),e(z5,Z9e),e(Z9e,hPr),e(z5,pPr),e(z5,OY),e(OY,_Pr),e(z5,uPr),e($e,bPr),e($e,W5),e(W5,eMe),e(eMe,vPr),e(W5,FPr),e(W5,VY),e(VY,TPr),e(W5,MPr),e($e,EPr),e($e,Q5),e(Q5,oMe),e(oMe,CPr),e(Q5,wPr),e(Q5,XY),e(XY,APr),e(Q5,yPr),e($e,LPr),e($e,H5),e(H5,rMe),e(rMe,xPr),e(H5,$Pr),e(H5,zY),e(zY,kPr),e(H5,SPr),e($e,RPr),e($e,U5),e(U5,tMe),e(tMe,PPr),e(U5,BPr),e(U5,WY),e(WY,IPr),e(U5,qPr),e($e,NPr),e($e,J5),e(J5,aMe),e(aMe,jPr),e(J5,DPr),e(J5,QY),e(QY,GPr),e(J5,OPr),e($e,VPr),e($e,Y5),e(Y5,nMe),e(nMe,XPr),e(Y5,zPr),e(Y5,HY),e(HY,WPr),e(Y5,QPr),e($e,HPr),e($e,K5),e(K5,sMe),e(sMe,UPr),e(K5,JPr),e(K5,UY),e(UY,YPr),e(K5,KPr),e(Xr,ZPr),M(Z5,Xr,null),b(f,UNe,u),b(f,Qc,u),e(Qc,eC),e(eC,lMe),M(V8,lMe,null),e(Qc,eBr),e(Qc,iMe),e(iMe,oBr),b(f,JNe,u),b(f,ur,u),M(X8,ur,null),e(ur,rBr),e(ur,Hc),e(Hc,tBr),e(Hc,JY),e(JY,aBr),e(Hc,nBr),e(Hc,YY),e(YY,sBr),e(Hc,lBr),e(ur,iBr),e(ur,z8),e(z8,dBr),e(z8,dMe),e(dMe,cBr),e(z8,fBr),e(ur,mBr),e(ur,Qt),M(W8,Qt,null),e(Qt,gBr),e(Qt,cMe),e(cMe,hBr),e(Qt,pBr),e(Qt,Uc),e(Uc,_Br),e(Uc,fMe),e(fMe,uBr),e(Uc,bBr),e(Uc,KY),e(KY,vBr),e(Uc,FBr),e(Qt,TBr),M(oC,Qt,null),e(ur,MBr),e(ur,zr),M(Q8,zr,null),e(zr,EBr),e(zr,mMe),e(mMe,CBr),e(zr,wBr),e(zr,Fn),e(Fn,ABr),e(Fn,gMe),e(gMe,yBr),e(Fn,LBr),e(Fn,hMe),e(hMe,xBr),e(Fn,$Br),e(Fn,pMe),e(pMe,kBr),e(Fn,SBr),e(zr,RBr),e(zr,ke),e(ke,rC),e(rC,_Me),e(_Me,PBr),e(rC,BBr),e(rC,ZY),e(ZY,IBr),e(rC,qBr),e(ke,NBr),e(ke,tC),e(tC,uMe),e(uMe,jBr),e(tC,DBr),e(tC,eK),e(eK,GBr),e(tC,OBr),e(ke,VBr),e(ke,aC),e(aC,bMe),e(bMe,XBr),e(aC,zBr),e(aC,oK),e(oK,WBr),e(aC,QBr),e(ke,HBr),e(ke,nC),e(nC,vMe),e(vMe,UBr),e(nC,JBr),e(nC,rK),e(rK,YBr),e(nC,KBr),e(ke,ZBr),e(ke,sC),e(sC,FMe),e(FMe,eIr),e(sC,oIr),e(sC,tK),e(tK,rIr),e(sC,tIr),e(ke,aIr),e(ke,lC),e(lC,TMe),e(TMe,nIr),e(lC,sIr),e(lC,aK),e(aK,lIr),e(lC,iIr),e(ke,dIr),e(ke,iC),e(iC,MMe),e(MMe,cIr),e(iC,fIr),e(iC,nK),e(nK,mIr),e(iC,gIr),e(ke,hIr),e(ke,dC),e(dC,EMe),e(EMe,pIr),e(dC,_Ir),e(dC,sK),e(sK,uIr),e(dC,bIr),e(ke,vIr),e(ke,cC),e(cC,CMe),e(CMe,FIr),e(cC,TIr),e(cC,lK),e(lK,MIr),e(cC,EIr),e(ke,CIr),e(ke,fC),e(fC,wMe),e(wMe,wIr),e(fC,AIr),e(fC,iK),e(iK,yIr),e(fC,LIr),e(zr,xIr),M(mC,zr,null),b(f,YNe,u),b(f,Jc,u),e(Jc,gC),e(gC,AMe),M(H8,AMe,null),e(Jc,$Ir),e(Jc,yMe),e(yMe,kIr),b(f,KNe,u),b(f,br,u),M(U8,br,null),e(br,SIr),e(br,Yc),e(Yc,RIr),e(Yc,dK),e(dK,PIr),e(Yc,BIr),e(Yc,cK),e(cK,IIr),e(Yc,qIr),e(br,NIr),e(br,J8),e(J8,jIr),e(J8,LMe),e(LMe,DIr),e(J8,GIr),e(br,OIr),e(br,Ht),M(Y8,Ht,null),e(Ht,VIr),e(Ht,xMe),e(xMe,XIr),e(Ht,zIr),e(Ht,Kc),e(Kc,WIr),e(Kc,$Me),e($Me,QIr),e(Kc,HIr),e(Kc,fK),e(fK,UIr),e(Kc,JIr),e(Ht,YIr),M(hC,Ht,null),e(br,KIr),e(br,Wr),M(K8,Wr,null),e(Wr,ZIr),e(Wr,kMe),e(kMe,eqr),e(Wr,oqr),e(Wr,Tn),e(Tn,rqr),e(Tn,SMe),e(SMe,tqr),e(Tn,aqr),e(Tn,RMe),e(RMe,nqr),e(Tn,sqr),e(Tn,PMe),e(PMe,lqr),e(Tn,iqr),e(Wr,dqr),e(Wr,Ge),e(Ge,pC),e(pC,BMe),e(BMe,cqr),e(pC,fqr),e(pC,mK),e(mK,mqr),e(pC,gqr),e(Ge,hqr),e(Ge,_C),e(_C,IMe),e(IMe,pqr),e(_C,_qr),e(_C,gK),e(gK,uqr),e(_C,bqr),e(Ge,vqr),e(Ge,uC),e(uC,qMe),e(qMe,Fqr),e(uC,Tqr),e(uC,hK),e(hK,Mqr),e(uC,Eqr),e(Ge,Cqr),e(Ge,bC),e(bC,NMe),e(NMe,wqr),e(bC,Aqr),e(bC,pK),e(pK,yqr),e(bC,Lqr),e(Ge,xqr),e(Ge,vC),e(vC,jMe),e(jMe,$qr),e(vC,kqr),e(vC,_K),e(_K,Sqr),e(vC,Rqr),e(Ge,Pqr),e(Ge,FC),e(FC,DMe),e(DMe,Bqr),e(FC,Iqr),e(FC,uK),e(uK,qqr),e(FC,Nqr),e(Ge,jqr),e(Ge,TC),e(TC,GMe),e(GMe,Dqr),e(TC,Gqr),e(TC,bK),e(bK,Oqr),e(TC,Vqr),e(Ge,Xqr),e(Ge,MC),e(MC,OMe),e(OMe,zqr),e(MC,Wqr),e(MC,vK),e(vK,Qqr),e(MC,Hqr),e(Wr,Uqr),M(EC,Wr,null),b(f,ZNe,u),b(f,Zc,u),e(Zc,CC),e(CC,VMe),M(Z8,VMe,null),e(Zc,Jqr),e(Zc,XMe),e(XMe,Yqr),b(f,eje,u),b(f,vr,u),M(ex,vr,null),e(vr,Kqr),e(vr,ef),e(ef,Zqr),e(ef,FK),e(FK,eNr),e(ef,oNr),e(ef,TK),e(TK,rNr),e(ef,tNr),e(vr,aNr),e(vr,ox),e(ox,nNr),e(ox,zMe),e(zMe,sNr),e(ox,lNr),e(vr,iNr),e(vr,Ut),M(rx,Ut,null),e(Ut,dNr),e(Ut,WMe),e(WMe,cNr),e(Ut,fNr),e(Ut,of),e(of,mNr),e(of,QMe),e(QMe,gNr),e(of,hNr),e(of,MK),e(MK,pNr),e(of,_Nr),e(Ut,uNr),M(wC,Ut,null),e(vr,bNr),e(vr,Qr),M(tx,Qr,null),e(Qr,vNr),e(Qr,HMe),e(HMe,FNr),e(Qr,TNr),e(Qr,Mn),e(Mn,MNr),e(Mn,UMe),e(UMe,ENr),e(Mn,CNr),e(Mn,JMe),e(JMe,wNr),e(Mn,ANr),e(Mn,YMe),e(YMe,yNr),e(Mn,LNr),e(Qr,xNr),e(Qr,Oe),e(Oe,AC),e(AC,KMe),e(KMe,$Nr),e(AC,kNr),e(AC,EK),e(EK,SNr),e(AC,RNr),e(Oe,PNr),e(Oe,yC),e(yC,ZMe),e(ZMe,BNr),e(yC,INr),e(yC,CK),e(CK,qNr),e(yC,NNr),e(Oe,jNr),e(Oe,LC),e(LC,e4e),e(e4e,DNr),e(LC,GNr),e(LC,wK),e(wK,ONr),e(LC,VNr),e(Oe,XNr),e(Oe,xC),e(xC,o4e),e(o4e,zNr),e(xC,WNr),e(xC,AK),e(AK,QNr),e(xC,HNr),e(Oe,UNr),e(Oe,$C),e($C,r4e),e(r4e,JNr),e($C,YNr),e($C,yK),e(yK,KNr),e($C,ZNr),e(Oe,ejr),e(Oe,kC),e(kC,t4e),e(t4e,ojr),e(kC,rjr),e(kC,LK),e(LK,tjr),e(kC,ajr),e(Oe,njr),e(Oe,SC),e(SC,a4e),e(a4e,sjr),e(SC,ljr),e(SC,xK),e(xK,ijr),e(SC,djr),e(Oe,cjr),e(Oe,RC),e(RC,n4e),e(n4e,fjr),e(RC,mjr),e(RC,$K),e($K,gjr),e(RC,hjr),e(Qr,pjr),M(PC,Qr,null),b(f,oje,u),b(f,rf,u),e(rf,BC),e(BC,s4e),M(ax,s4e,null),e(rf,_jr),e(rf,l4e),e(l4e,ujr),b(f,rje,u),b(f,Fr,u),M(nx,Fr,null),e(Fr,bjr),e(Fr,tf),e(tf,vjr),e(tf,kK),e(kK,Fjr),e(tf,Tjr),e(tf,SK),e(SK,Mjr),e(tf,Ejr),e(Fr,Cjr),e(Fr,sx),e(sx,wjr),e(sx,i4e),e(i4e,Ajr),e(sx,yjr),e(Fr,Ljr),e(Fr,Jt),M(lx,Jt,null),e(Jt,xjr),e(Jt,d4e),e(d4e,$jr),e(Jt,kjr),e(Jt,af),e(af,Sjr),e(af,c4e),e(c4e,Rjr),e(af,Pjr),e(af,RK),e(RK,Bjr),e(af,Ijr),e(Jt,qjr),M(IC,Jt,null),e(Fr,Njr),e(Fr,Hr),M(ix,Hr,null),e(Hr,jjr),e(Hr,f4e),e(f4e,Djr),e(Hr,Gjr),e(Hr,En),e(En,Ojr),e(En,m4e),e(m4e,Vjr),e(En,Xjr),e(En,g4e),e(g4e,zjr),e(En,Wjr),e(En,h4e),e(h4e,Qjr),e(En,Hjr),e(Hr,Ujr),e(Hr,p4e),e(p4e,qC),e(qC,_4e),e(_4e,Jjr),e(qC,Yjr),e(qC,PK),e(PK,Kjr),e(qC,Zjr),e(Hr,eDr),M(NC,Hr,null),b(f,tje,u),b(f,nf,u),e(nf,jC),e(jC,u4e),M(dx,u4e,null),e(nf,oDr),e(nf,b4e),e(b4e,rDr),b(f,aje,u),b(f,Tr,u),M(cx,Tr,null),e(Tr,tDr),e(Tr,sf),e(sf,aDr),e(sf,BK),e(BK,nDr),e(sf,sDr),e(sf,IK),e(IK,lDr),e(sf,iDr),e(Tr,dDr),e(Tr,fx),e(fx,cDr),e(fx,v4e),e(v4e,fDr),e(fx,mDr),e(Tr,gDr),e(Tr,Yt),M(mx,Yt,null),e(Yt,hDr),e(Yt,F4e),e(F4e,pDr),e(Yt,_Dr),e(Yt,lf),e(lf,uDr),e(lf,T4e),e(T4e,bDr),e(lf,vDr),e(lf,qK),e(qK,FDr),e(lf,TDr),e(Yt,MDr),M(DC,Yt,null),e(Tr,EDr),e(Tr,Ur),M(gx,Ur,null),e(Ur,CDr),e(Ur,M4e),e(M4e,wDr),e(Ur,ADr),e(Ur,Cn),e(Cn,yDr),e(Cn,E4e),e(E4e,LDr),e(Cn,xDr),e(Cn,C4e),e(C4e,$Dr),e(Cn,kDr),e(Cn,w4e),e(w4e,SDr),e(Cn,RDr),e(Ur,PDr),e(Ur,hx),e(hx,GC),e(GC,A4e),e(A4e,BDr),e(GC,IDr),e(GC,NK),e(NK,qDr),e(GC,NDr),e(hx,jDr),e(hx,OC),e(OC,y4e),e(y4e,DDr),e(OC,GDr),e(OC,jK),e(jK,ODr),e(OC,VDr),e(Ur,XDr),M(VC,Ur,null),b(f,nje,u),b(f,df,u),e(df,XC),e(XC,L4e),M(px,L4e,null),e(df,zDr),e(df,x4e),e(x4e,WDr),b(f,sje,u),b(f,Mr,u),M(_x,Mr,null),e(Mr,QDr),e(Mr,cf),e(cf,HDr),e(cf,DK),e(DK,UDr),e(cf,JDr),e(cf,GK),e(GK,YDr),e(cf,KDr),e(Mr,ZDr),e(Mr,ux),e(ux,eGr),e(ux,$4e),e($4e,oGr),e(ux,rGr),e(Mr,tGr),e(Mr,Kt),M(bx,Kt,null),e(Kt,aGr),e(Kt,k4e),e(k4e,nGr),e(Kt,sGr),e(Kt,ff),e(ff,lGr),e(ff,S4e),e(S4e,iGr),e(ff,dGr),e(ff,OK),e(OK,cGr),e(ff,fGr),e(Kt,mGr),M(zC,Kt,null),e(Mr,gGr),e(Mr,Jr),M(vx,Jr,null),e(Jr,hGr),e(Jr,R4e),e(R4e,pGr),e(Jr,_Gr),e(Jr,wn),e(wn,uGr),e(wn,P4e),e(P4e,bGr),e(wn,vGr),e(wn,B4e),e(B4e,FGr),e(wn,TGr),e(wn,I4e),e(I4e,MGr),e(wn,EGr),e(Jr,CGr),e(Jr,q4e),e(q4e,WC),e(WC,N4e),e(N4e,wGr),e(WC,AGr),e(WC,VK),e(VK,yGr),e(WC,LGr),e(Jr,xGr),M(QC,Jr,null),lje=!0},p(f,[u]){const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),Ff.$set(Fx);const j4e={};u&2&&(j4e.$$scope={dirty:u,ctx:f}),Fg.$set(j4e);const D4e={};u&2&&(D4e.$$scope={dirty:u,ctx:f}),eh.$set(D4e);const G4e={};u&2&&(G4e.$$scope={dirty:u,ctx:f}),xh.$set(G4e);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),$h.$set(Tx);const O4e={};u&2&&(O4e.$$scope={dirty:u,ctx:f}),Uh.$set(O4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Jh.$set(An);const V4e={};u&2&&(V4e.$$scope={dirty:u,ctx:f}),Zh.$set(V4e);const X4e={};u&2&&(X4e.$$scope={dirty:u,ctx:f}),z_.$set(X4e);const z4e={};u&2&&(z4e.$$scope={dirty:u,ctx:f}),Q_.$set(z4e);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),qu.$set(Mx);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),ju.$set(W4e);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),E2.$set(Ex);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),w2.$set(Q4e);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),i1.$set(Cx);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),c1.$set(H4e);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),x1.$set(U4e);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),k1.$set(J4e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),wb.$set(mf);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),yb.$set(Y4e);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),av.$set(K4e);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),sv.$set(Z4e);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),gv.$set(wx);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),pv.$set(eEe);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),Jv.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),Kv.$set(rEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),jF.$set(et);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),GF.$set(Ax);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),XF.$set(tEe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),WF.$set(yx);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),n6.$set(aEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),l6.$set(ot);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),c6.$set(nEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),m6.$set(gf);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),E6.$set(sEe);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),w6.$set(lEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),S6.$set(y);const HC={};u&2&&(HC.$$scope={dirty:u,ctx:f}),P6.$set(HC);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),z6.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),Q6.$set(dEe);const UC={};u&2&&(UC.$$scope={dirty:u,ctx:f}),Y6.$set(UC);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),Z6.$set(cEe);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),sT.$set(fEe);const JC={};u&2&&(JC.$$scope={dirty:u,ctx:f}),iT.$set(JC);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),gT.$set(mEe);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),pT.$set(gEe);const YC={};u&2&&(YC.$$scope={dirty:u,ctx:f}),vT.$set(YC);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),TT.$set(hEe);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),CT.$set(pEe);const KC={};u&2&&(KC.$$scope={dirty:u,ctx:f}),AT.$set(KC);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),ST.$set(_Ee);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),PT.$set(uEe);const ZC={};u&2&&(ZC.$$scope={dirty:u,ctx:f}),qT.$set(ZC);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),jT.$set(bEe);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),k7.$set(vEe);const e3={};u&2&&(e3.$$scope={dirty:u,ctx:f}),R7.$set(e3);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),t9.$set(FEe);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),n9.$set(TEe);const o3={};u&2&&(o3.$$scope={dirty:u,ctx:f}),b9.$set(o3);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),F9.$set(MEe);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),w9.$set(EEe);const r3={};u&2&&(r3.$$scope={dirty:u,ctx:f}),y9.$set(r3);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),H9.$set(CEe);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),J9.$set(wEe);const t3={};u&2&&(t3.$$scope={dirty:u,ctx:f}),lM.$set(t3);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),dM.$set(AEe);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),IM.$set(yEe);const a3={};u&2&&(a3.$$scope={dirty:u,ctx:f}),NM.$set(a3);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),r4.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),a4.$set(xEe);const n3={};u&2&&(n3.$$scope={dirty:u,ctx:f}),l4.$set(n3);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),d4.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),f4.$set(kEe);const s3={};u&2&&(s3.$$scope={dirty:u,ctx:f}),g4.$set(s3);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),P4.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),I4.$set(REe);const l3={};u&2&&(l3.$$scope={dirty:u,ctx:f}),tE.$set(l3);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),nE.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),lE.$set(BEe);const i3={};u&2&&(i3.$$scope={dirty:u,ctx:f}),dE.$set(i3);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),fE.$set(IEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),gE.$set(qEe);const d3={};u&2&&(d3.$$scope={dirty:u,ctx:f}),DE.$set(d3);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),OE.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),KE.$set(jEe);const c3={};u&2&&(c3.$$scope={dirty:u,ctx:f}),e5.$set(c3);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),h5.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),_5.$set(GEe);const f3={};u&2&&(f3.$$scope={dirty:u,ctx:f}),y5.$set(f3);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),x5.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),D5.$set(VEe);const m3={};u&2&&(m3.$$scope={dirty:u,ctx:f}),O5.$set(m3);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),Z5.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),oC.$set(zEe);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),mC.$set(g3);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),hC.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),EC.$set(QEe);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),wC.$set(h3);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),PC.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),IC.$set(UEe);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),NC.$set(p3);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),DC.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),VC.$set(YEe);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),zC.$set(_3);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),QC.$set(KEe)},i(f){lje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(Ff.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(T0.$$.fragment,f),E(Fg.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(y0.$$.fragment,f),E(eh.$$.fragment,f),E(L0.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(R0.$$.fragment,f),E(xh.$$.fragment,f),E($h.$$.fragment,f),E(P0.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(j0.$$.fragment,f),E(Uh.$$.fragment,f),E(Jh.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(Zh.$$.fragment,f),E(z0.$$.fragment,f),E(z_.$$.fragment,f),E(W0.$$.fragment,f),E(Q0.$$.fragment,f),E(U0.$$.fragment,f),E(Q_.$$.fragment,f),E(J0.$$.fragment,f),E(qu.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(eA.$$.fragment,f),E(ju.$$.fragment,f),E(oA.$$.fragment,f),E(E2.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(nA.$$.fragment,f),E(w2.$$.fragment,f),E(sA.$$.fragment,f),E(i1.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(cA.$$.fragment,f),E(c1.$$.fragment,f),E(fA.$$.fragment,f),E(x1.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(pA.$$.fragment,f),E(k1.$$.fragment,f),E(_A.$$.fragment,f),E(wb.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(FA.$$.fragment,f),E(yb.$$.fragment,f),E(TA.$$.fragment,f),E(av.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(wA.$$.fragment,f),E(sv.$$.fragment,f),E(AA.$$.fragment,f),E(gv.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(pv.$$.fragment,f),E(kA.$$.fragment,f),E(Jv.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(Kv.$$.fragment,f),E(IA.$$.fragment,f),E(jF.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E(GF.$$.fragment,f),E(GA.$$.fragment,f),E(XF.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(WF.$$.fragment,f),E(WA.$$.fragment,f),E(n6.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(l6.$$.fragment,f),E(YA.$$.fragment,f),E(c6.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(m6.$$.fragment,f),E(ry.$$.fragment,f),E(E6.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(w6.$$.fragment,f),E(ly.$$.fragment,f),E(S6.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(P6.$$.fragment,f),E(my.$$.fragment,f),E(z6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(Q6.$$.fragment,f),E(uy.$$.fragment,f),E(Y6.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Z6.$$.fragment,f),E(Ey.$$.fragment,f),E(sT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(iT.$$.fragment,f),E(Ly.$$.fragment,f),E(gT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(pT.$$.fragment,f),E(Ry.$$.fragment,f),E(vT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(TT.$$.fragment,f),E(jy.$$.fragment,f),E(CT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(AT.$$.fragment,f),E(Xy.$$.fragment,f),E(ST.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(PT.$$.fragment,f),E(Uy.$$.fragment,f),E(qT.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(jT.$$.fragment,f),E(eL.$$.fragment,f),E(k7.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(R7.$$.fragment,f),E(nL.$$.fragment,f),E(t9.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(n9.$$.fragment,f),E(cL.$$.fragment,f),E(b9.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(F9.$$.fragment,f),E(pL.$$.fragment,f),E(w9.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(y9.$$.fragment,f),E(FL.$$.fragment,f),E(H9.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(J9.$$.fragment,f),E(wL.$$.fragment,f),E(lM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(dM.$$.fragment,f),E($L.$$.fragment,f),E(IM.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(NM.$$.fragment,f),E(BL.$$.fragment,f),E(r4.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(a4.$$.fragment,f),E(DL.$$.fragment,f),E(l4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(d4.$$.fragment,f),E(WL.$$.fragment,f),E(f4.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(g4.$$.fragment,f),E(YL.$$.fragment,f),E(P4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(I4.$$.fragment,f),E(r8.$$.fragment,f),E(tE.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(nE.$$.fragment,f),E(l8.$$.fragment,f),E(lE.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(dE.$$.fragment,f),E(m8.$$.fragment,f),E(fE.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(gE.$$.fragment,f),E(u8.$$.fragment,f),E(DE.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(OE.$$.fragment,f),E(M8.$$.fragment,f),E(KE.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(e5.$$.fragment,f),E(y8.$$.fragment,f),E(h5.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(_5.$$.fragment,f),E(S8.$$.fragment,f),E(y5.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(x5.$$.fragment,f),E(q8.$$.fragment,f),E(D5.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(O5.$$.fragment,f),E(O8.$$.fragment,f),E(Z5.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(oC.$$.fragment,f),E(Q8.$$.fragment,f),E(mC.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(hC.$$.fragment,f),E(K8.$$.fragment,f),E(EC.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(wC.$$.fragment,f),E(tx.$$.fragment,f),E(PC.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(IC.$$.fragment,f),E(ix.$$.fragment,f),E(NC.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(DC.$$.fragment,f),E(gx.$$.fragment,f),E(VC.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(zC.$$.fragment,f),E(vx.$$.fragment,f),E(QC.$$.fragment,f),lje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(Ff.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(T0.$$.fragment,f),C(Fg.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(y0.$$.fragment,f),C(eh.$$.fragment,f),C(L0.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(R0.$$.fragment,f),C(xh.$$.fragment,f),C($h.$$.fragment,f),C(P0.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(j0.$$.fragment,f),C(Uh.$$.fragment,f),C(Jh.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(Zh.$$.fragment,f),C(z0.$$.fragment,f),C(z_.$$.fragment,f),C(W0.$$.fragment,f),C(Q0.$$.fragment,f),C(U0.$$.fragment,f),C(Q_.$$.fragment,f),C(J0.$$.fragment,f),C(qu.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(eA.$$.fragment,f),C(ju.$$.fragment,f),C(oA.$$.fragment,f),C(E2.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(nA.$$.fragment,f),C(w2.$$.fragment,f),C(sA.$$.fragment,f),C(i1.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(cA.$$.fragment,f),C(c1.$$.fragment,f),C(fA.$$.fragment,f),C(x1.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(pA.$$.fragment,f),C(k1.$$.fragment,f),C(_A.$$.fragment,f),C(wb.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(FA.$$.fragment,f),C(yb.$$.fragment,f),C(TA.$$.fragment,f),C(av.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(wA.$$.fragment,f),C(sv.$$.fragment,f),C(AA.$$.fragment,f),C(gv.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(pv.$$.fragment,f),C(kA.$$.fragment,f),C(Jv.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(Kv.$$.fragment,f),C(IA.$$.fragment,f),C(jF.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C(GF.$$.fragment,f),C(GA.$$.fragment,f),C(XF.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(WF.$$.fragment,f),C(WA.$$.fragment,f),C(n6.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(l6.$$.fragment,f),C(YA.$$.fragment,f),C(c6.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(m6.$$.fragment,f),C(ry.$$.fragment,f),C(E6.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(w6.$$.fragment,f),C(ly.$$.fragment,f),C(S6.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(P6.$$.fragment,f),C(my.$$.fragment,f),C(z6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(Q6.$$.fragment,f),C(uy.$$.fragment,f),C(Y6.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Z6.$$.fragment,f),C(Ey.$$.fragment,f),C(sT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(iT.$$.fragment,f),C(Ly.$$.fragment,f),C(gT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(pT.$$.fragment,f),C(Ry.$$.fragment,f),C(vT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(TT.$$.fragment,f),C(jy.$$.fragment,f),C(CT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(AT.$$.fragment,f),C(Xy.$$.fragment,f),C(ST.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(PT.$$.fragment,f),C(Uy.$$.fragment,f),C(qT.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(jT.$$.fragment,f),C(eL.$$.fragment,f),C(k7.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(R7.$$.fragment,f),C(nL.$$.fragment,f),C(t9.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(n9.$$.fragment,f),C(cL.$$.fragment,f),C(b9.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(F9.$$.fragment,f),C(pL.$$.fragment,f),C(w9.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(y9.$$.fragment,f),C(FL.$$.fragment,f),C(H9.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(J9.$$.fragment,f),C(wL.$$.fragment,f),C(lM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(dM.$$.fragment,f),C($L.$$.fragment,f),C(IM.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(NM.$$.fragment,f),C(BL.$$.fragment,f),C(r4.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(a4.$$.fragment,f),C(DL.$$.fragment,f),C(l4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(d4.$$.fragment,f),C(WL.$$.fragment,f),C(f4.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(g4.$$.fragment,f),C(YL.$$.fragment,f),C(P4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(I4.$$.fragment,f),C(r8.$$.fragment,f),C(tE.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(nE.$$.fragment,f),C(l8.$$.fragment,f),C(lE.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(dE.$$.fragment,f),C(m8.$$.fragment,f),C(fE.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(gE.$$.fragment,f),C(u8.$$.fragment,f),C(DE.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(OE.$$.fragment,f),C(M8.$$.fragment,f),C(KE.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(e5.$$.fragment,f),C(y8.$$.fragment,f),C(h5.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(_5.$$.fragment,f),C(S8.$$.fragment,f),C(y5.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(x5.$$.fragment,f),C(q8.$$.fragment,f),C(D5.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(O5.$$.fragment,f),C(O8.$$.fragment,f),C(Z5.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(oC.$$.fragment,f),C(Q8.$$.fragment,f),C(mC.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(hC.$$.fragment,f),C(K8.$$.fragment,f),C(EC.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(wC.$$.fragment,f),C(tx.$$.fragment,f),C(PC.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(IC.$$.fragment,f),C(ix.$$.fragment,f),C(NC.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(DC.$$.fragment,f),C(gx.$$.fragment,f),C(VC.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(zC.$$.fragment,f),C(vx.$$.fragment,f),C(QC.$$.fragment,f),lje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(aqe),f&&t(bi),w(p0),f&&t(nqe),f&&t(kn),f&&t(sqe),w(_0,f),f&&t(lqe),f&&t(N$),f&&t(iqe),w(Ff,f),f&&t(dqe),f&&t(vi),w(u0),f&&t(cqe),f&&t(Co),w(b0),w(T0),w(Fg),w(M0),f&&t(fqe),f&&t(Ti),w(E0),f&&t(mqe),f&&t(wo),w(C0),w(y0),w(eh),w(L0),f&&t(gqe),f&&t(Mi),w(x0),f&&t(hqe),f&&t(Ao),w($0),w(R0),w(xh),w($h),w(P0),f&&t(pqe),f&&t(Ei),w(B0),f&&t(_qe),f&&t(yo),w(I0),w(j0),w(Uh),w(Jh),w(D0),f&&t(uqe),f&&t(wi),w(G0),f&&t(bqe),f&&t(Lo),w(O0),w(X0),w(Zh),w(z0),w(z_),f&&t(vqe),f&&t(Li),w(W0),f&&t(Fqe),f&&t(xo),w(Q0),w(U0),w(Q_),w(J0),w(qu),f&&t(Tqe),f&&t(ki),w(Y0),f&&t(Mqe),f&&t($o),w(K0),w(eA),w(ju),w(oA),w(E2),f&&t(Eqe),f&&t(Pi),w(rA),f&&t(Cqe),f&&t(ko),w(tA),w(nA),w(w2),w(sA),w(i1),f&&t(wqe),f&&t(qi),w(lA),f&&t(Aqe),f&&t(So),w(iA),w(cA),w(c1),w(fA),w(x1),f&&t(yqe),f&&t(Di),w(mA),f&&t(Lqe),f&&t(Ro),w(gA),w(pA),w(k1),w(_A),w(wb),f&&t(xqe),f&&t(Vi),w(uA),f&&t($qe),f&&t(Po),w(bA),w(FA),w(yb),w(TA),w(av),f&&t(kqe),f&&t(Wi),w(MA),f&&t(Sqe),f&&t(Bo),w(EA),w(wA),w(sv),w(AA),w(gv),f&&t(Rqe),f&&t(Ui),w(yA),f&&t(Pqe),f&&t(Io),w(LA),w($A),w(pv),w(kA),w(Jv),f&&t(Bqe),f&&t(Ki),w(SA),f&&t(Iqe),f&&t(qo),w(RA),w(BA),w(Kv),w(IA),w(jF),f&&t(qqe),f&&t(od),w(qA),f&&t(Nqe),f&&t(No),w(NA),w(DA),w(GF),w(GA),w(XF),f&&t(jqe),f&&t(ad),w(OA),f&&t(Dqe),f&&t(jo),w(VA),w(zA),w(WF),w(WA),w(n6),f&&t(Gqe),f&&t(ld),w(QA),f&&t(Oqe),f&&t(Do),w(HA),w(JA),w(l6),w(YA),w(c6),f&&t(Vqe),f&&t(cd),w(KA),f&&t(Xqe),f&&t(Go),w(ZA),w(oy),w(m6),w(ry),w(E6),f&&t(zqe),f&&t(gd),w(ty),f&&t(Wqe),f&&t(Oo),w(ay),w(sy),w(w6),w(ly),w(S6),f&&t(Qqe),f&&t(_d),w(iy),f&&t(Hqe),f&&t(Vo),w(dy),w(fy),w(P6),w(my),w(z6),f&&t(Uqe),f&&t(vd),w(gy),f&&t(Jqe),f&&t(Xo),w(hy),w(_y),w(Q6),w(uy),w(Y6),f&&t(Yqe),f&&t(Md),w(vy),f&&t(Kqe),f&&t(zo),w(Fy),w(My),w(Z6),w(Ey),w(sT),f&&t(Zqe),f&&t(wd),w(Cy),f&&t(eNe),f&&t(Wo),w(wy),w(yy),w(iT),w(Ly),w(gT),f&&t(oNe),f&&t(xd),w(xy),f&&t(rNe),f&&t(Qo),w($y),w(Sy),w(pT),w(Ry),w(vT),f&&t(tNe),f&&t(Sd),w(By),f&&t(aNe),f&&t(Ho),w(Iy),w(Ny),w(TT),w(jy),w(CT),f&&t(nNe),f&&t(Bd),w(Dy),f&&t(sNe),f&&t(Uo),w(Gy),w(Vy),w(AT),w(Xy),w(ST),f&&t(lNe),f&&t(Nd),w(zy),f&&t(iNe),f&&t(Jo),w(Wy),w(Hy),w(PT),w(Uy),w(qT),f&&t(dNe),f&&t(Gd),w(Jy),f&&t(cNe),f&&t(Yo),w(Yy),w(Zy),w(jT),w(eL),w(k7),f&&t(fNe),f&&t(Xd),w(oL),f&&t(mNe),f&&t(Ko),w(rL),w(aL),w(R7),w(nL),w(t9),f&&t(gNe),f&&t(Qd),w(sL),f&&t(hNe),f&&t(Zo),w(lL),w(dL),w(n9),w(cL),w(b9),f&&t(pNe),f&&t(Jd),w(fL),f&&t(_Ne),f&&t(er),w(mL),w(hL),w(F9),w(pL),w(w9),f&&t(uNe),f&&t(Zd),w(_L),f&&t(bNe),f&&t(or),w(uL),w(vL),w(y9),w(FL),w(H9),f&&t(vNe),f&&t(rc),w(TL),f&&t(FNe),f&&t(rr),w(ML),w(CL),w(J9),w(wL),w(lM),f&&t(TNe),f&&t(nc),w(AL),f&&t(MNe),f&&t(tr),w(yL),w(xL),w(dM),w($L),w(IM),f&&t(ENe),f&&t(ic),w(kL),f&&t(CNe),f&&t(ar),w(SL),w(PL),w(NM),w(BL),w(r4),f&&t(wNe),f&&t(fc),w(IL),f&&t(ANe),f&&t(nr),w(qL),w(jL),w(a4),w(DL),w(l4),f&&t(yNe),f&&t(hc),w(OL),f&&t(LNe),f&&t(sr),w(VL),w(zL),w(d4),w(WL),w(f4),f&&t(xNe),f&&t(uc),w(QL),f&&t($Ne),f&&t(lr),w(HL),w(JL),w(g4),w(YL),w(P4),f&&t(kNe),f&&t(Fc),w(KL),f&&t(SNe),f&&t(ir),w(ZL),w(o8),w(I4),w(r8),w(tE),f&&t(RNe),f&&t(Ec),w(t8),f&&t(PNe),f&&t(dr),w(a8),w(s8),w(nE),w(l8),w(lE),f&&t(BNe),f&&t(Ac),w(i8),f&&t(INe),f&&t(cr),w(d8),w(f8),w(dE),w(m8),w(fE),f&&t(qNe),f&&t(xc),w(g8),f&&t(NNe),f&&t(fr),w(h8),w(_8),w(gE),w(u8),w(DE),f&&t(jNe),f&&t(Sc),w(b8),f&&t(DNe),f&&t(mr),w(v8),w(T8),w(OE),w(M8),w(KE),f&&t(GNe),f&&t(Bc),w(E8),f&&t(ONe),f&&t(gr),w(C8),w(A8),w(e5),w(y8),w(h5),f&&t(VNe),f&&t(Nc),w(L8),f&&t(XNe),f&&t(hr),w(x8),w(k8),w(_5),w(S8),w(y5),f&&t(zNe),f&&t(Gc),w(R8),f&&t(WNe),f&&t(pr),w(P8),w(I8),w(x5),w(q8),w(D5),f&&t(QNe),f&&t(Xc),w(N8),f&&t(HNe),f&&t(_r),w(j8),w(G8),w(O5),w(O8),w(Z5),f&&t(UNe),f&&t(Qc),w(V8),f&&t(JNe),f&&t(ur),w(X8),w(W8),w(oC),w(Q8),w(mC),f&&t(YNe),f&&t(Jc),w(H8),f&&t(KNe),f&&t(br),w(U8),w(Y8),w(hC),w(K8),w(EC),f&&t(ZNe),f&&t(Zc),w(Z8),f&&t(eje),f&&t(vr),w(ex),w(rx),w(wC),w(tx),w(PC),f&&t(oje),f&&t(rf),w(ax),f&&t(rje),f&&t(Fr),w(nx),w(lx),w(IC),w(ix),w(NC),f&&t(tje),f&&t(nf),w(dx),f&&t(aje),f&&t(Tr),w(cx),w(mx),w(DC),w(gx),w(VC),f&&t(nje),f&&t(df),w(px),f&&t(sje),f&&t(Mr),w(_x),w(bx),w(zC),w(vx),w(QC)}}}const jxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Dxt(L){return DLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qxt extends ILt{constructor(g){super();qLt(this,g,Dxt,Nxt,NLt,{})}}export{Qxt as default,jxt as metadata};
