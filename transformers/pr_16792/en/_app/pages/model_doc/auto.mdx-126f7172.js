import{S as B0t,i as P0t,s as I0t,e as a,k as l,w as F,t as o,M as q0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as N0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as Hjr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function j0t(L){let g,v,p,m,u,d,h,Mo,di,gf,et,ci,fi,oA,hf,Ne,Xe,mi,yn,rA,Ln,xn,tA,gi,$n,aA,hi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),di=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ci=a("code"),fi=o('"new-model"'),oA=o(")."),hf=l(),Ne=a("p"),Xe=o("Likewise, if your "),mi=a("code"),yn=o("NewModel"),rA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),tA=o(`, make sure its
`),gi=a("code"),$n=o("config_class"),aA=o(` attribute is set to the same class you use when registering the model (here
`),hi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var E$=s(p);m=r(E$,"NewModelConfig"),E$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),di=n(Ae,"CODE",{});var C$=s(di);gf=r(C$,"model_type"),C$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ci=n(Ae,"CODE",{});var w$=s(ci);fi=r(w$,'"new-model"'),w$.forEach(t),oA=r(Ae,")."),Ae.forEach(t),hf=i(ze),Ne=n(ze,"P",{});var Eo=s(Ne);Xe=r(Eo,"Likewise, if your "),mi=n(Eo,"CODE",{});var Ea=s(mi);yn=r(Ea,"NewModel"),Ea.forEach(t),rA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var A$=s(Ln);xn=r(A$,"PreTrainedModel"),A$.forEach(t),tA=r(Eo,`, make sure its
`),gi=n(Eo,"CODE",{});var uf=s(gi);$n=r(uf,"config_class"),uf.forEach(t),aA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),hi=n(Eo,"CODE",{});var y$=s(hi);pf=r(y$,"NewModelConfig"),y$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,di),e(di,gf),e(g,et),e(g,ci),e(ci,fi),e(g,oA),b(ze,hf,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,mi),e(mi,yn),e(Ne,rA),e(Ne,Ln),e(Ln,xn),e(Ne,tA),e(Ne,gi),e(gi,$n),e(Ne,aA),e(Ne,hi),e(hi,pf),e(Ne,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(Ne)}}}function D0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function V0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u,d,h,Mo,di,gf,et,ci,fi,oA,hf,Ne,Xe,mi,yn,rA,Ln,xn,tA,gi,$n,aA,hi,pf,Ma,ze,Ae,E$,pi,C$,w$,Eo,Ea,A$,uf,y$,xDe,bIe,ui,_f,uee,nA,$De,_ee,kDe,vIe,kn,SDe,bee,RDe,BDe,vee,PDe,IDe,FIe,sA,TIe,L$,qDe,MIe,bf,EIe,_i,vf,Fee,lA,NDe,Tee,jDe,CIe,Co,iA,DDe,dA,GDe,x$,ODe,VDe,XDe,cA,zDe,Mee,QDe,WDe,HDe,Er,fA,UDe,Eee,JDe,YDe,bi,KDe,Cee,ZDe,eGe,wee,oGe,rGe,tGe,A,Ff,Aee,aGe,nGe,$$,sGe,lGe,iGe,Tf,yee,dGe,cGe,k$,fGe,mGe,gGe,Mf,Lee,hGe,pGe,S$,uGe,_Ge,bGe,Ef,xee,vGe,FGe,R$,TGe,MGe,EGe,Cf,$ee,CGe,wGe,B$,AGe,yGe,LGe,wf,kee,xGe,$Ge,P$,kGe,SGe,RGe,Af,See,BGe,PGe,I$,IGe,qGe,NGe,yf,Ree,jGe,DGe,q$,GGe,OGe,VGe,Lf,Bee,XGe,zGe,N$,QGe,WGe,HGe,xf,Pee,UGe,JGe,j$,YGe,KGe,ZGe,$f,Iee,eOe,oOe,D$,rOe,tOe,aOe,kf,qee,nOe,sOe,G$,lOe,iOe,dOe,Sf,Nee,cOe,fOe,O$,mOe,gOe,hOe,Rf,jee,pOe,uOe,V$,_Oe,bOe,vOe,Bf,Dee,FOe,TOe,X$,MOe,EOe,COe,Pf,Gee,wOe,AOe,z$,yOe,LOe,xOe,If,Oee,$Oe,kOe,Q$,SOe,ROe,BOe,qf,Vee,POe,IOe,W$,qOe,NOe,jOe,Nf,Xee,DOe,GOe,H$,OOe,VOe,XOe,jf,zee,zOe,QOe,U$,WOe,HOe,UOe,Df,Qee,JOe,YOe,J$,KOe,ZOe,eVe,Gf,Wee,oVe,rVe,Y$,tVe,aVe,nVe,Of,Hee,sVe,lVe,K$,iVe,dVe,cVe,Vf,Uee,fVe,mVe,Z$,gVe,hVe,pVe,Xf,Jee,uVe,_Ve,ek,bVe,vVe,FVe,zf,Yee,TVe,MVe,ok,EVe,CVe,wVe,Qf,Kee,AVe,yVe,rk,LVe,xVe,$Ve,Wf,Zee,kVe,SVe,tk,RVe,BVe,PVe,Hf,eoe,IVe,qVe,ak,NVe,jVe,DVe,Uf,ooe,GVe,OVe,nk,VVe,XVe,zVe,Jf,roe,QVe,WVe,sk,HVe,UVe,JVe,Yf,toe,YVe,KVe,lk,ZVe,eXe,oXe,Kf,aoe,rXe,tXe,ik,aXe,nXe,sXe,Zf,noe,lXe,iXe,dk,dXe,cXe,fXe,em,soe,mXe,gXe,ck,hXe,pXe,uXe,om,loe,_Xe,bXe,fk,vXe,FXe,TXe,rm,ioe,MXe,EXe,mk,CXe,wXe,AXe,tm,doe,yXe,LXe,gk,xXe,$Xe,kXe,am,coe,SXe,RXe,hk,BXe,PXe,IXe,nm,foe,qXe,NXe,pk,jXe,DXe,GXe,sm,moe,OXe,VXe,uk,XXe,zXe,QXe,lm,goe,WXe,HXe,_k,UXe,JXe,YXe,im,hoe,KXe,ZXe,bk,eze,oze,rze,dm,poe,tze,aze,vk,nze,sze,lze,cm,uoe,ize,dze,Fk,cze,fze,mze,fm,_oe,gze,hze,Tk,pze,uze,_ze,mm,boe,bze,vze,Mk,Fze,Tze,Mze,gm,voe,Eze,Cze,Ek,wze,Aze,yze,hm,Foe,Lze,xze,Ck,$ze,kze,Sze,pm,Toe,Rze,Bze,wk,Pze,Ize,qze,um,Moe,Nze,jze,Ak,Dze,Gze,Oze,_m,Eoe,Vze,Xze,yk,zze,Qze,Wze,bm,Coe,Hze,Uze,Lk,Jze,Yze,Kze,vm,woe,Zze,eQe,xk,oQe,rQe,tQe,Fm,Aoe,aQe,nQe,$k,sQe,lQe,iQe,Tm,yoe,dQe,cQe,kk,fQe,mQe,gQe,Mm,Loe,hQe,pQe,Sk,uQe,_Qe,bQe,Em,xoe,vQe,FQe,Rk,TQe,MQe,EQe,Cm,$oe,CQe,wQe,Bk,AQe,yQe,LQe,wm,koe,xQe,$Qe,Pk,kQe,SQe,RQe,Am,Soe,BQe,PQe,Ik,IQe,qQe,NQe,ym,Roe,jQe,DQe,qk,GQe,OQe,VQe,Lm,Boe,XQe,zQe,Nk,QQe,WQe,HQe,xm,Poe,UQe,JQe,jk,YQe,KQe,ZQe,$m,Ioe,eWe,oWe,Dk,rWe,tWe,aWe,km,qoe,nWe,sWe,Gk,lWe,iWe,dWe,Sm,Noe,cWe,fWe,Ok,mWe,gWe,hWe,Rm,joe,pWe,uWe,Vk,_We,bWe,vWe,Bm,Doe,FWe,TWe,Xk,MWe,EWe,CWe,Pm,Goe,wWe,AWe,zk,yWe,LWe,xWe,Im,Ooe,$We,kWe,Qk,SWe,RWe,BWe,qm,Voe,PWe,IWe,Wk,qWe,NWe,jWe,Nm,Xoe,DWe,GWe,Hk,OWe,VWe,XWe,jm,zoe,zWe,QWe,Uk,WWe,HWe,UWe,Dm,Qoe,JWe,YWe,Jk,KWe,ZWe,eHe,Gm,Woe,oHe,rHe,Yk,tHe,aHe,nHe,Om,Hoe,sHe,lHe,Kk,iHe,dHe,cHe,Vm,Uoe,fHe,mHe,Zk,gHe,hHe,pHe,Xm,Joe,uHe,_He,eS,bHe,vHe,FHe,zm,Yoe,THe,MHe,oS,EHe,CHe,wHe,Qm,Koe,AHe,yHe,rS,LHe,xHe,$He,Wm,Zoe,kHe,SHe,tS,RHe,BHe,PHe,Hm,ere,IHe,qHe,aS,NHe,jHe,DHe,Um,ore,GHe,OHe,nS,VHe,XHe,zHe,Jm,rre,QHe,WHe,sS,HHe,UHe,JHe,Ym,tre,YHe,KHe,lS,ZHe,eUe,oUe,Km,are,rUe,tUe,iS,aUe,nUe,sUe,Zm,nre,lUe,iUe,dS,dUe,cUe,fUe,eg,sre,mUe,gUe,cS,hUe,pUe,uUe,og,lre,_Ue,bUe,fS,vUe,FUe,TUe,rg,ire,MUe,EUe,mS,CUe,wUe,AUe,tg,dre,yUe,LUe,gS,xUe,$Ue,kUe,ag,cre,SUe,RUe,hS,BUe,PUe,IUe,ng,fre,qUe,NUe,pS,jUe,DUe,GUe,sg,mre,OUe,VUe,uS,XUe,zUe,QUe,lg,gre,WUe,HUe,_S,UUe,JUe,YUe,ig,hre,KUe,ZUe,bS,eJe,oJe,rJe,dg,pre,tJe,aJe,vS,nJe,sJe,lJe,cg,ure,iJe,dJe,FS,cJe,fJe,mJe,fg,_re,gJe,hJe,TS,pJe,uJe,_Je,mg,bre,bJe,vJe,MS,FJe,TJe,MJe,gg,vre,EJe,CJe,ES,wJe,AJe,yJe,hg,Fre,LJe,xJe,CS,$Je,kJe,SJe,pg,Tre,RJe,BJe,wS,PJe,IJe,qJe,ug,Mre,NJe,jJe,AS,DJe,GJe,OJe,_g,VJe,bg,mA,XJe,Ere,zJe,wIe,vi,vg,Cre,gA,QJe,wre,WJe,AIe,wo,hA,HJe,pA,UJe,yS,JJe,YJe,KJe,uA,ZJe,Are,eYe,oYe,rYe,Cr,_A,tYe,yre,aYe,nYe,Ca,sYe,Lre,lYe,iYe,xre,dYe,cYe,$re,fYe,mYe,gYe,k,Sn,kre,hYe,pYe,LS,uYe,_Ye,xS,bYe,vYe,FYe,Rn,Sre,TYe,MYe,$S,EYe,CYe,kS,wYe,AYe,yYe,Bn,Rre,LYe,xYe,SS,$Ye,kYe,RS,SYe,RYe,BYe,Fg,Bre,PYe,IYe,BS,qYe,NYe,jYe,Pn,Pre,DYe,GYe,PS,OYe,VYe,IS,XYe,zYe,QYe,Tg,Ire,WYe,HYe,qS,UYe,JYe,YYe,Mg,qre,KYe,ZYe,NS,eKe,oKe,rKe,Eg,Nre,tKe,aKe,jS,nKe,sKe,lKe,In,jre,iKe,dKe,DS,cKe,fKe,GS,mKe,gKe,hKe,qn,Dre,pKe,uKe,OS,_Ke,bKe,VS,vKe,FKe,TKe,Nn,Gre,MKe,EKe,XS,CKe,wKe,zS,AKe,yKe,LKe,Cg,Ore,xKe,$Ke,QS,kKe,SKe,RKe,wg,Vre,BKe,PKe,WS,IKe,qKe,NKe,jn,Xre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Ag,zre,QKe,WKe,JS,HKe,UKe,JKe,Dn,Qre,YKe,KKe,YS,ZKe,eZe,KS,oZe,rZe,tZe,Gn,Wre,aZe,nZe,ZS,sZe,lZe,eR,iZe,dZe,cZe,On,Hre,fZe,mZe,oR,gZe,hZe,rR,pZe,uZe,_Ze,yg,Ure,bZe,vZe,tR,FZe,TZe,MZe,Vn,Jre,EZe,CZe,aR,wZe,AZe,nR,yZe,LZe,xZe,Xn,Yre,$Ze,kZe,sR,SZe,RZe,lR,BZe,PZe,IZe,zn,Kre,qZe,NZe,iR,jZe,DZe,dR,GZe,OZe,VZe,Qn,Zre,XZe,zZe,cR,QZe,WZe,fR,HZe,UZe,JZe,Wn,ete,YZe,KZe,mR,ZZe,eeo,gR,oeo,reo,teo,Hn,ote,aeo,neo,hR,seo,leo,pR,ieo,deo,ceo,Lg,rte,feo,meo,uR,geo,heo,peo,Un,tte,ueo,_eo,_R,beo,veo,bR,Feo,Teo,Meo,xg,ate,Eeo,Ceo,vR,weo,Aeo,yeo,Jn,nte,Leo,xeo,FR,$eo,keo,TR,Seo,Reo,Beo,Yn,ste,Peo,Ieo,MR,qeo,Neo,ER,jeo,Deo,Geo,Kn,lte,Oeo,Veo,CR,Xeo,zeo,wR,Qeo,Weo,Heo,Zn,ite,Ueo,Jeo,AR,Yeo,Keo,yR,Zeo,eoo,ooo,es,dte,roo,too,LR,aoo,noo,xR,soo,loo,ioo,$g,cte,doo,coo,$R,foo,moo,goo,os,fte,hoo,poo,kR,uoo,_oo,SR,boo,voo,Foo,rs,mte,Too,Moo,RR,Eoo,Coo,BR,woo,Aoo,yoo,ts,gte,Loo,xoo,PR,$oo,koo,IR,Soo,Roo,Boo,as,hte,Poo,Ioo,qR,qoo,Noo,NR,joo,Doo,Goo,ns,pte,Ooo,Voo,jR,Xoo,zoo,DR,Qoo,Woo,Hoo,ss,ute,Uoo,Joo,GR,Yoo,Koo,OR,Zoo,ero,oro,ls,_te,rro,tro,VR,aro,nro,XR,sro,lro,iro,kg,bte,dro,cro,zR,fro,mro,gro,is,vte,hro,pro,QR,uro,_ro,WR,bro,vro,Fro,Sg,Fte,Tro,Mro,HR,Ero,Cro,wro,Rg,Tte,Aro,yro,UR,Lro,xro,$ro,ds,Mte,kro,Sro,JR,Rro,Bro,YR,Pro,Iro,qro,cs,Ete,Nro,jro,KR,Dro,Gro,ZR,Oro,Vro,Xro,fs,Cte,zro,Qro,eB,Wro,Hro,oB,Uro,Jro,Yro,Bg,wte,Kro,Zro,rB,eto,oto,rto,ms,Ate,tto,ato,tB,nto,sto,aB,lto,ito,dto,gs,yte,cto,fto,nB,mto,gto,sB,hto,pto,uto,hs,Lte,_to,bto,lB,vto,Fto,iB,Tto,Mto,Eto,ps,xte,Cto,wto,dB,Ato,yto,cB,Lto,xto,$to,us,$te,kto,Sto,fB,Rto,Bto,mB,Pto,Ito,qto,Pg,kte,Nto,jto,gB,Dto,Gto,Oto,_s,Ste,Vto,Xto,hB,zto,Qto,pB,Wto,Hto,Uto,Ig,Rte,Jto,Yto,uB,Kto,Zto,eao,qg,Bte,oao,rao,_B,tao,aao,nao,Ng,Pte,sao,lao,bB,iao,dao,cao,jg,Ite,fao,mao,vB,gao,hao,pao,bs,qte,uao,_ao,FB,bao,vao,TB,Fao,Tao,Mao,Dg,Nte,Eao,Cao,MB,wao,Aao,yao,vs,jte,Lao,xao,EB,$ao,kao,CB,Sao,Rao,Bao,Fs,Dte,Pao,Iao,wB,qao,Nao,AB,jao,Dao,Gao,Ts,Gte,Oao,Vao,yB,Xao,zao,LB,Qao,Wao,Hao,Ms,Ote,Uao,Jao,xB,Yao,Kao,$B,Zao,eno,ono,Es,Vte,rno,tno,kB,ano,nno,SB,sno,lno,ino,Cs,Xte,dno,cno,RB,fno,mno,BB,gno,hno,pno,Gg,zte,uno,_no,PB,bno,vno,Fno,Og,Qte,Tno,Mno,IB,Eno,Cno,wno,ws,Wte,Ano,yno,qB,Lno,xno,NB,$no,kno,Sno,As,Hte,Rno,Bno,jB,Pno,Ino,DB,qno,Nno,jno,ys,Ute,Dno,Gno,GB,Ono,Vno,OB,Xno,zno,Qno,Vg,Jte,Wno,Hno,VB,Uno,Jno,Yno,Xg,Yte,Kno,Zno,XB,eso,oso,rso,zg,Kte,tso,aso,zB,nso,sso,lso,Ls,Zte,iso,dso,QB,cso,fso,WB,mso,gso,hso,Qg,eae,pso,uso,HB,_so,bso,vso,Wg,oae,Fso,Tso,UB,Mso,Eso,Cso,xs,rae,wso,Aso,JB,yso,Lso,YB,xso,$so,kso,Hg,tae,Sso,Rso,KB,Bso,Pso,Iso,Ug,aae,qso,Nso,ZB,jso,Dso,Gso,$s,nae,Oso,Vso,eP,Xso,zso,oP,Qso,Wso,Hso,ks,sae,Uso,Jso,rP,Yso,Kso,tP,Zso,elo,olo,Ss,lae,rlo,tlo,aP,alo,nlo,nP,slo,llo,ilo,Rs,iae,dlo,clo,sP,flo,mlo,lP,glo,hlo,plo,Jg,ulo,Yg,bA,_lo,dae,blo,yIe,Fi,Kg,cae,vA,vlo,fae,Flo,LIe,Ao,FA,Tlo,TA,Mlo,iP,Elo,Clo,wlo,MA,Alo,mae,ylo,Llo,xlo,Qe,EA,$lo,gae,klo,Slo,wa,Rlo,hae,Blo,Plo,pae,Ilo,qlo,uae,Nlo,jlo,Dlo,re,Zg,_ae,Glo,Olo,dP,Vlo,Xlo,zlo,eh,bae,Qlo,Wlo,cP,Hlo,Ulo,Jlo,oh,vae,Ylo,Klo,fP,Zlo,eio,oio,rh,Fae,rio,tio,mP,aio,nio,sio,th,Tae,lio,iio,gP,dio,cio,fio,ah,Mae,mio,gio,hP,hio,pio,uio,nh,Eae,_io,bio,pP,vio,Fio,Tio,sh,Cae,Mio,Eio,uP,Cio,wio,Aio,lh,wae,yio,Lio,_P,xio,$io,kio,ih,Aae,Sio,Rio,bP,Bio,Pio,Iio,dh,yae,qio,Nio,vP,jio,Dio,Gio,ch,Lae,Oio,Vio,FP,Xio,zio,Qio,fh,xae,Wio,Hio,TP,Uio,Jio,Yio,mh,$ae,Kio,Zio,MP,edo,odo,rdo,gh,kae,tdo,ado,EP,ndo,sdo,ldo,hh,Sae,ido,ddo,CP,cdo,fdo,mdo,ph,Rae,gdo,hdo,wP,pdo,udo,_do,uh,Bae,bdo,vdo,AP,Fdo,Tdo,Mdo,_h,Pae,Edo,Cdo,yP,wdo,Ado,ydo,bh,Iae,Ldo,xdo,LP,$do,kdo,Sdo,vh,qae,Rdo,Bdo,xP,Pdo,Ido,qdo,Fh,Nae,Ndo,jdo,$P,Ddo,Gdo,Odo,Th,jae,Vdo,Xdo,kP,zdo,Qdo,Wdo,Mh,Dae,Hdo,Udo,SP,Jdo,Ydo,Kdo,Eh,Gae,Zdo,eco,RP,oco,rco,tco,Ch,aco,wh,nco,Ah,CA,sco,Oae,lco,xIe,Ti,yh,Vae,wA,ico,Xae,dco,$Ie,yo,AA,cco,yA,fco,BP,mco,gco,hco,LA,pco,zae,uco,_co,bco,We,xA,vco,Qae,Fco,Tco,Mi,Mco,Wae,Eco,Cco,Hae,wco,Aco,yco,be,Lh,Uae,Lco,xco,PP,$co,kco,Sco,xh,Jae,Rco,Bco,Yae,Pco,Ico,qco,$h,Kae,Nco,jco,IP,Dco,Gco,Oco,kh,Zae,Vco,Xco,qP,zco,Qco,Wco,Sh,ene,Hco,Uco,NP,Jco,Yco,Kco,Rh,one,Zco,efo,jP,ofo,rfo,tfo,Bh,rne,afo,nfo,DP,sfo,lfo,ifo,Ph,tne,dfo,cfo,GP,ffo,mfo,gfo,Ih,ane,hfo,pfo,OP,ufo,_fo,bfo,qh,nne,vfo,Ffo,VP,Tfo,Mfo,Efo,Nh,sne,Cfo,wfo,XP,Afo,yfo,Lfo,jh,lne,xfo,$fo,zP,kfo,Sfo,Rfo,Dh,ine,Bfo,Pfo,QP,Ifo,qfo,Nfo,Gh,dne,jfo,Dfo,WP,Gfo,Ofo,Vfo,Oh,cne,Xfo,zfo,HP,Qfo,Wfo,Hfo,Vh,Ufo,Xh,Jfo,zh,$A,Yfo,fne,Kfo,kIe,Ei,Qh,mne,kA,Zfo,gne,emo,SIe,Lo,SA,omo,Ci,rmo,UP,tmo,amo,JP,nmo,smo,lmo,RA,imo,hne,dmo,cmo,fmo,ot,BA,mmo,pne,gmo,hmo,wi,pmo,une,umo,_mo,YP,bmo,vmo,Fmo,Wh,Tmo,He,PA,Mmo,_ne,Emo,Cmo,Aa,wmo,bne,Amo,ymo,vne,Lmo,xmo,Fne,$mo,kmo,Smo,x,Hh,Tne,Rmo,Bmo,KP,Pmo,Imo,qmo,Uh,Mne,Nmo,jmo,ZP,Dmo,Gmo,Omo,Jh,Ene,Vmo,Xmo,eI,zmo,Qmo,Wmo,Yh,Cne,Hmo,Umo,oI,Jmo,Ymo,Kmo,Kh,wne,Zmo,ego,rI,ogo,rgo,tgo,Zh,Ane,ago,ngo,tI,sgo,lgo,igo,ep,yne,dgo,cgo,aI,fgo,mgo,ggo,op,Lne,hgo,pgo,nI,ugo,_go,bgo,rp,xne,vgo,Fgo,sI,Tgo,Mgo,Ego,tp,$ne,Cgo,wgo,lI,Ago,ygo,Lgo,ap,kne,xgo,$go,iI,kgo,Sgo,Rgo,np,Sne,Bgo,Pgo,dI,Igo,qgo,Ngo,sp,Rne,jgo,Dgo,cI,Ggo,Ogo,Vgo,lp,Bne,Xgo,zgo,fI,Qgo,Wgo,Hgo,ip,Pne,Ugo,Jgo,mI,Ygo,Kgo,Zgo,dp,Ine,eho,oho,gI,rho,tho,aho,cp,qne,nho,sho,hI,lho,iho,dho,fp,Nne,cho,fho,pI,mho,gho,hho,mp,jne,pho,uho,uI,_ho,bho,vho,gp,Dne,Fho,Tho,_I,Mho,Eho,Cho,hp,Gne,who,Aho,bI,yho,Lho,xho,pp,One,$ho,kho,vI,Sho,Rho,Bho,up,Vne,Pho,Iho,FI,qho,Nho,jho,_p,Xne,Dho,Gho,TI,Oho,Vho,Xho,bp,zne,zho,Qho,MI,Who,Hho,Uho,vp,Qne,Jho,Yho,EI,Kho,Zho,epo,Fp,Wne,opo,rpo,CI,tpo,apo,npo,Tp,Hne,spo,lpo,wI,ipo,dpo,cpo,Mp,Une,fpo,mpo,AI,gpo,hpo,ppo,Ep,Jne,upo,_po,yI,bpo,vpo,Fpo,Cp,Yne,Tpo,Mpo,LI,Epo,Cpo,wpo,Bs,Kne,Apo,ypo,xI,Lpo,xpo,$I,$po,kpo,Spo,wp,Zne,Rpo,Bpo,kI,Ppo,Ipo,qpo,Ap,ese,Npo,jpo,SI,Dpo,Gpo,Opo,yp,ose,Vpo,Xpo,RI,zpo,Qpo,Wpo,Lp,rse,Hpo,Upo,BI,Jpo,Ypo,Kpo,xp,tse,Zpo,euo,PI,ouo,ruo,tuo,$p,ase,auo,nuo,II,suo,luo,iuo,kp,nse,duo,cuo,qI,fuo,muo,guo,Sp,sse,huo,puo,NI,uuo,_uo,buo,Rp,lse,vuo,Fuo,jI,Tuo,Muo,Euo,Bp,ise,Cuo,wuo,DI,Auo,yuo,Luo,Pp,dse,xuo,$uo,GI,kuo,Suo,Ruo,Ip,cse,Buo,Puo,OI,Iuo,quo,Nuo,qp,fse,juo,Duo,VI,Guo,Ouo,Vuo,Np,mse,Xuo,zuo,XI,Quo,Wuo,Huo,jp,gse,Uuo,Juo,zI,Yuo,Kuo,Zuo,Dp,hse,e_o,o_o,QI,r_o,t_o,a_o,Gp,pse,n_o,s_o,WI,l_o,i_o,d_o,Op,use,c_o,f_o,HI,m_o,g_o,h_o,Vp,_se,p_o,u_o,UI,__o,b_o,v_o,Xp,bse,F_o,T_o,JI,M_o,E_o,C_o,zp,vse,w_o,A_o,YI,y_o,L_o,x_o,Qp,Fse,$_o,k_o,KI,S_o,R_o,B_o,Wp,Tse,P_o,I_o,ZI,q_o,N_o,j_o,Hp,Mse,D_o,G_o,eq,O_o,V_o,X_o,Up,Ese,z_o,Q_o,oq,W_o,H_o,U_o,Jp,Cse,J_o,Y_o,rq,K_o,Z_o,e2o,Yp,wse,o2o,r2o,tq,t2o,a2o,n2o,Kp,Ase,s2o,l2o,aq,i2o,d2o,c2o,Zp,yse,f2o,m2o,nq,g2o,h2o,p2o,eu,Lse,u2o,_2o,sq,b2o,v2o,F2o,ou,xse,T2o,M2o,lq,E2o,C2o,w2o,ru,$se,A2o,y2o,iq,L2o,x2o,$2o,tu,kse,k2o,S2o,dq,R2o,B2o,P2o,au,Sse,I2o,q2o,cq,N2o,j2o,D2o,nu,Rse,G2o,O2o,fq,V2o,X2o,z2o,su,Bse,Q2o,W2o,mq,H2o,U2o,J2o,lu,Pse,Y2o,K2o,gq,Z2o,e1o,o1o,iu,Ise,r1o,t1o,hq,a1o,n1o,s1o,du,qse,l1o,i1o,pq,d1o,c1o,f1o,cu,Nse,m1o,g1o,uq,h1o,p1o,u1o,fu,jse,_1o,b1o,_q,v1o,F1o,T1o,mu,Dse,M1o,E1o,bq,C1o,w1o,A1o,gu,Gse,y1o,L1o,vq,x1o,$1o,k1o,hu,Ose,S1o,R1o,Fq,B1o,P1o,I1o,pu,Vse,q1o,N1o,Tq,j1o,D1o,G1o,uu,Xse,O1o,V1o,Mq,X1o,z1o,Q1o,_u,zse,W1o,H1o,Eq,U1o,J1o,Y1o,bu,Qse,K1o,Z1o,Cq,ebo,obo,rbo,vu,Wse,tbo,abo,wq,nbo,sbo,lbo,Fu,Hse,ibo,dbo,Aq,cbo,fbo,mbo,Tu,Use,gbo,hbo,yq,pbo,ubo,_bo,Mu,Jse,bbo,vbo,Lq,Fbo,Tbo,Mbo,Eu,Yse,Ebo,Cbo,xq,wbo,Abo,ybo,Cu,Kse,Lbo,xbo,$q,$bo,kbo,Sbo,wu,Zse,Rbo,Bbo,kq,Pbo,Ibo,qbo,Au,ele,Nbo,jbo,Sq,Dbo,Gbo,Obo,yu,ole,Vbo,Xbo,Rq,zbo,Qbo,Wbo,Lu,rle,Hbo,Ubo,Bq,Jbo,Ybo,Kbo,xu,tle,Zbo,evo,Pq,ovo,rvo,tvo,$u,ale,avo,nvo,Iq,svo,lvo,ivo,ku,nle,dvo,cvo,qq,fvo,mvo,gvo,Su,sle,hvo,pvo,Nq,uvo,_vo,bvo,Ru,lle,vvo,Fvo,jq,Tvo,Mvo,Evo,Bu,ile,Cvo,wvo,Dq,Avo,yvo,Lvo,Pu,dle,xvo,$vo,Gq,kvo,Svo,Rvo,Iu,cle,Bvo,Pvo,Oq,Ivo,qvo,Nvo,qu,jvo,fle,Dvo,Gvo,mle,Ovo,Vvo,Nu,RIe,Ai,ju,gle,IA,Xvo,hle,zvo,BIe,xo,qA,Qvo,yi,Wvo,Vq,Hvo,Uvo,Xq,Jvo,Yvo,Kvo,NA,Zvo,ple,eFo,oFo,rFo,rt,jA,tFo,ule,aFo,nFo,Li,sFo,_le,lFo,iFo,zq,dFo,cFo,fFo,Du,mFo,Ue,DA,gFo,ble,hFo,pFo,ya,uFo,vle,_Fo,bFo,Fle,vFo,FFo,Tle,TFo,MFo,EFo,G,Gu,Mle,CFo,wFo,Qq,AFo,yFo,LFo,Ou,Ele,xFo,$Fo,Wq,kFo,SFo,RFo,Vu,Cle,BFo,PFo,Hq,IFo,qFo,NFo,Xu,wle,jFo,DFo,Uq,GFo,OFo,VFo,zu,Ale,XFo,zFo,Jq,QFo,WFo,HFo,Qu,yle,UFo,JFo,Yq,YFo,KFo,ZFo,Wu,Lle,e6o,o6o,Kq,r6o,t6o,a6o,Hu,xle,n6o,s6o,Zq,l6o,i6o,d6o,Uu,$le,c6o,f6o,eN,m6o,g6o,h6o,Ju,kle,p6o,u6o,oN,_6o,b6o,v6o,Yu,Sle,F6o,T6o,rN,M6o,E6o,C6o,Ku,Rle,w6o,A6o,tN,y6o,L6o,x6o,Zu,Ble,$6o,k6o,aN,S6o,R6o,B6o,e_,Ple,P6o,I6o,nN,q6o,N6o,j6o,o_,Ile,D6o,G6o,sN,O6o,V6o,X6o,r_,qle,z6o,Q6o,lN,W6o,H6o,U6o,t_,Nle,J6o,Y6o,iN,K6o,Z6o,eTo,a_,jle,oTo,rTo,dN,tTo,aTo,nTo,n_,Dle,sTo,lTo,cN,iTo,dTo,cTo,s_,Gle,fTo,mTo,fN,gTo,hTo,pTo,l_,Ole,uTo,_To,mN,bTo,vTo,FTo,i_,Vle,TTo,MTo,gN,ETo,CTo,wTo,d_,Xle,ATo,yTo,hN,LTo,xTo,$To,c_,zle,kTo,STo,pN,RTo,BTo,PTo,f_,Qle,ITo,qTo,uN,NTo,jTo,DTo,m_,Wle,GTo,OTo,_N,VTo,XTo,zTo,g_,Hle,QTo,WTo,bN,HTo,UTo,JTo,h_,Ule,YTo,KTo,vN,ZTo,e9o,o9o,p_,Jle,r9o,t9o,FN,a9o,n9o,s9o,u_,Yle,l9o,i9o,TN,d9o,c9o,f9o,__,Kle,m9o,g9o,MN,h9o,p9o,u9o,b_,Zle,_9o,b9o,EN,v9o,F9o,T9o,v_,eie,M9o,E9o,CN,C9o,w9o,A9o,F_,oie,y9o,L9o,wN,x9o,$9o,k9o,T_,rie,S9o,R9o,AN,B9o,P9o,I9o,M_,tie,q9o,N9o,yN,j9o,D9o,G9o,E_,aie,O9o,V9o,LN,X9o,z9o,Q9o,C_,nie,W9o,H9o,xN,U9o,J9o,Y9o,w_,sie,K9o,Z9o,$N,e7o,o7o,r7o,A_,lie,t7o,a7o,kN,n7o,s7o,l7o,y_,iie,i7o,d7o,SN,c7o,f7o,m7o,L_,g7o,die,h7o,p7o,cie,u7o,_7o,x_,PIe,xi,$_,fie,GA,b7o,mie,v7o,IIe,$o,OA,F7o,$i,T7o,RN,M7o,E7o,BN,C7o,w7o,A7o,VA,y7o,gie,L7o,x7o,$7o,tt,XA,k7o,hie,S7o,R7o,ki,B7o,pie,P7o,I7o,PN,q7o,N7o,j7o,k_,D7o,Je,zA,G7o,uie,O7o,V7o,La,X7o,_ie,z7o,Q7o,bie,W7o,H7o,vie,U7o,J7o,Y7o,z,S_,Fie,K7o,Z7o,IN,eMo,oMo,rMo,R_,Tie,tMo,aMo,qN,nMo,sMo,lMo,B_,Mie,iMo,dMo,NN,cMo,fMo,mMo,P_,Eie,gMo,hMo,jN,pMo,uMo,_Mo,I_,Cie,bMo,vMo,DN,FMo,TMo,MMo,q_,wie,EMo,CMo,GN,wMo,AMo,yMo,N_,Aie,LMo,xMo,ON,$Mo,kMo,SMo,j_,yie,RMo,BMo,VN,PMo,IMo,qMo,D_,Lie,NMo,jMo,XN,DMo,GMo,OMo,G_,xie,VMo,XMo,zN,zMo,QMo,WMo,O_,$ie,HMo,UMo,QN,JMo,YMo,KMo,V_,kie,ZMo,e4o,WN,o4o,r4o,t4o,X_,Sie,a4o,n4o,HN,s4o,l4o,i4o,z_,Rie,d4o,c4o,UN,f4o,m4o,g4o,Q_,Bie,h4o,p4o,JN,u4o,_4o,b4o,W_,Pie,v4o,F4o,YN,T4o,M4o,E4o,H_,Iie,C4o,w4o,KN,A4o,y4o,L4o,U_,qie,x4o,$4o,ZN,k4o,S4o,R4o,J_,Nie,B4o,P4o,ej,I4o,q4o,N4o,Y_,jie,j4o,D4o,oj,G4o,O4o,V4o,K_,Die,X4o,z4o,rj,Q4o,W4o,H4o,Z_,Gie,U4o,J4o,tj,Y4o,K4o,Z4o,e2,Oie,eEo,oEo,aj,rEo,tEo,aEo,o2,Vie,nEo,sEo,nj,lEo,iEo,dEo,r2,Xie,cEo,fEo,sj,mEo,gEo,hEo,t2,zie,pEo,uEo,lj,_Eo,bEo,vEo,a2,Qie,FEo,TEo,ij,MEo,EEo,CEo,n2,Wie,wEo,AEo,dj,yEo,LEo,xEo,s2,Hie,$Eo,kEo,cj,SEo,REo,BEo,l2,Uie,PEo,IEo,fj,qEo,NEo,jEo,i2,Jie,DEo,GEo,mj,OEo,VEo,XEo,d2,Yie,zEo,QEo,gj,WEo,HEo,UEo,c2,Kie,JEo,YEo,hj,KEo,ZEo,e5o,f2,Zie,o5o,r5o,pj,t5o,a5o,n5o,m2,ede,s5o,l5o,uj,i5o,d5o,c5o,g2,ode,f5o,m5o,_j,g5o,h5o,p5o,h2,u5o,rde,_5o,b5o,tde,v5o,F5o,p2,qIe,Si,u2,ade,QA,T5o,nde,M5o,NIe,ko,WA,E5o,Ri,C5o,bj,w5o,A5o,vj,y5o,L5o,x5o,HA,$5o,sde,k5o,S5o,R5o,at,UA,B5o,lde,P5o,I5o,Bi,q5o,ide,N5o,j5o,Fj,D5o,G5o,O5o,_2,V5o,Ye,JA,X5o,dde,z5o,Q5o,xa,W5o,cde,H5o,U5o,fde,J5o,Y5o,mde,K5o,Z5o,eCo,Q,b2,gde,oCo,rCo,Tj,tCo,aCo,nCo,v2,hde,sCo,lCo,Mj,iCo,dCo,cCo,F2,pde,fCo,mCo,Ej,gCo,hCo,pCo,T2,ude,uCo,_Co,Cj,bCo,vCo,FCo,M2,_de,TCo,MCo,wj,ECo,CCo,wCo,E2,bde,ACo,yCo,Aj,LCo,xCo,$Co,C2,vde,kCo,SCo,yj,RCo,BCo,PCo,w2,Fde,ICo,qCo,Lj,NCo,jCo,DCo,A2,Tde,GCo,OCo,xj,VCo,XCo,zCo,y2,Mde,QCo,WCo,$j,HCo,UCo,JCo,L2,Ede,YCo,KCo,kj,ZCo,e3o,o3o,x2,Cde,r3o,t3o,Sj,a3o,n3o,s3o,$2,wde,l3o,i3o,Rj,d3o,c3o,f3o,k2,Ade,m3o,g3o,Bj,h3o,p3o,u3o,S2,yde,_3o,b3o,Pj,v3o,F3o,T3o,R2,Lde,M3o,E3o,Ij,C3o,w3o,A3o,B2,xde,y3o,L3o,qj,x3o,$3o,k3o,P2,$de,S3o,R3o,Nj,B3o,P3o,I3o,I2,kde,q3o,N3o,jj,j3o,D3o,G3o,q2,Sde,O3o,V3o,Dj,X3o,z3o,Q3o,N2,Rde,W3o,H3o,Gj,U3o,J3o,Y3o,j2,Bde,K3o,Z3o,Oj,ewo,owo,rwo,D2,Pde,two,awo,Vj,nwo,swo,lwo,G2,Ide,iwo,dwo,Xj,cwo,fwo,mwo,O2,qde,gwo,hwo,zj,pwo,uwo,_wo,V2,Nde,bwo,vwo,Qj,Fwo,Two,Mwo,X2,jde,Ewo,Cwo,Wj,wwo,Awo,ywo,z2,Dde,Lwo,xwo,Hj,$wo,kwo,Swo,Q2,Gde,Rwo,Bwo,Uj,Pwo,Iwo,qwo,W2,Ode,Nwo,jwo,Jj,Dwo,Gwo,Owo,H2,Vde,Vwo,Xwo,Xde,zwo,Qwo,Wwo,U2,zde,Hwo,Uwo,Yj,Jwo,Ywo,Kwo,J2,Qde,Zwo,eAo,Kj,oAo,rAo,tAo,Y2,Wde,aAo,nAo,Zj,sAo,lAo,iAo,K2,Hde,dAo,cAo,eD,fAo,mAo,gAo,Z2,hAo,Ude,pAo,uAo,Jde,_Ao,bAo,e1,jIe,Pi,o1,Yde,YA,vAo,Kde,FAo,DIe,So,KA,TAo,Ii,MAo,oD,EAo,CAo,rD,wAo,AAo,yAo,ZA,LAo,Zde,xAo,$Ao,kAo,nt,e0,SAo,ece,RAo,BAo,qi,PAo,oce,IAo,qAo,tD,NAo,jAo,DAo,r1,GAo,Ke,o0,OAo,rce,VAo,XAo,$a,zAo,tce,QAo,WAo,ace,HAo,UAo,nce,JAo,YAo,KAo,he,t1,sce,ZAo,e0o,aD,o0o,r0o,t0o,a1,lce,a0o,n0o,nD,s0o,l0o,i0o,n1,ice,d0o,c0o,sD,f0o,m0o,g0o,s1,dce,h0o,p0o,lD,u0o,_0o,b0o,l1,cce,v0o,F0o,iD,T0o,M0o,E0o,i1,fce,C0o,w0o,dD,A0o,y0o,L0o,d1,mce,x0o,$0o,cD,k0o,S0o,R0o,c1,gce,B0o,P0o,fD,I0o,q0o,N0o,f1,hce,j0o,D0o,mD,G0o,O0o,V0o,m1,pce,X0o,z0o,gD,Q0o,W0o,H0o,g1,uce,U0o,J0o,hD,Y0o,K0o,Z0o,h1,_ce,eyo,oyo,pD,ryo,tyo,ayo,p1,bce,nyo,syo,uD,lyo,iyo,dyo,u1,vce,cyo,fyo,_D,myo,gyo,hyo,_1,Fce,pyo,uyo,bD,_yo,byo,vyo,b1,Tce,Fyo,Tyo,vD,Myo,Eyo,Cyo,v1,Mce,wyo,Ayo,FD,yyo,Lyo,xyo,F1,$yo,Ece,kyo,Syo,Cce,Ryo,Byo,T1,GIe,Ni,M1,wce,r0,Pyo,Ace,Iyo,OIe,Ro,t0,qyo,ji,Nyo,TD,jyo,Dyo,MD,Gyo,Oyo,Vyo,a0,Xyo,yce,zyo,Qyo,Wyo,st,n0,Hyo,Lce,Uyo,Jyo,Di,Yyo,xce,Kyo,Zyo,ED,eLo,oLo,rLo,E1,tLo,Ze,s0,aLo,$ce,nLo,sLo,ka,lLo,kce,iLo,dLo,Sce,cLo,fLo,Rce,mLo,gLo,hLo,q,C1,Bce,pLo,uLo,CD,_Lo,bLo,vLo,w1,Pce,FLo,TLo,wD,MLo,ELo,CLo,A1,Ice,wLo,ALo,AD,yLo,LLo,xLo,y1,qce,$Lo,kLo,yD,SLo,RLo,BLo,L1,Nce,PLo,ILo,LD,qLo,NLo,jLo,x1,jce,DLo,GLo,xD,OLo,VLo,XLo,$1,Dce,zLo,QLo,$D,WLo,HLo,ULo,k1,Gce,JLo,YLo,kD,KLo,ZLo,e8o,S1,Oce,o8o,r8o,SD,t8o,a8o,n8o,R1,Vce,s8o,l8o,RD,i8o,d8o,c8o,B1,Xce,f8o,m8o,BD,g8o,h8o,p8o,P1,zce,u8o,_8o,PD,b8o,v8o,F8o,I1,Qce,T8o,M8o,ID,E8o,C8o,w8o,q1,Wce,A8o,y8o,qD,L8o,x8o,$8o,N1,Hce,k8o,S8o,ND,R8o,B8o,P8o,j1,Uce,I8o,q8o,jD,N8o,j8o,D8o,D1,Jce,G8o,O8o,DD,V8o,X8o,z8o,G1,Yce,Q8o,W8o,GD,H8o,U8o,J8o,O1,Kce,Y8o,K8o,OD,Z8o,exo,oxo,V1,Zce,rxo,txo,VD,axo,nxo,sxo,X1,efe,lxo,ixo,XD,dxo,cxo,fxo,z1,ofe,mxo,gxo,zD,hxo,pxo,uxo,Q1,rfe,_xo,bxo,QD,vxo,Fxo,Txo,W1,tfe,Mxo,Exo,WD,Cxo,wxo,Axo,H1,afe,yxo,Lxo,HD,xxo,$xo,kxo,U1,nfe,Sxo,Rxo,UD,Bxo,Pxo,Ixo,J1,sfe,qxo,Nxo,JD,jxo,Dxo,Gxo,Y1,lfe,Oxo,Vxo,YD,Xxo,zxo,Qxo,K1,ife,Wxo,Hxo,KD,Uxo,Jxo,Yxo,Z1,dfe,Kxo,Zxo,ZD,e$o,o$o,r$o,eb,cfe,t$o,a$o,eG,n$o,s$o,l$o,ob,ffe,i$o,d$o,oG,c$o,f$o,m$o,rb,mfe,g$o,h$o,rG,p$o,u$o,_$o,tb,gfe,b$o,v$o,tG,F$o,T$o,M$o,ab,hfe,E$o,C$o,aG,w$o,A$o,y$o,nb,pfe,L$o,x$o,nG,$$o,k$o,S$o,sb,ufe,R$o,B$o,sG,P$o,I$o,q$o,lb,_fe,N$o,j$o,lG,D$o,G$o,O$o,ib,bfe,V$o,X$o,iG,z$o,Q$o,W$o,db,vfe,H$o,U$o,dG,J$o,Y$o,K$o,cb,Ffe,Z$o,eko,cG,oko,rko,tko,fb,Tfe,ako,nko,fG,sko,lko,iko,mb,Mfe,dko,cko,mG,fko,mko,gko,gb,Efe,hko,pko,gG,uko,_ko,bko,hb,Cfe,vko,Fko,hG,Tko,Mko,Eko,pb,wfe,Cko,wko,pG,Ako,yko,Lko,ub,xko,Afe,$ko,kko,yfe,Sko,Rko,_b,VIe,Gi,bb,Lfe,l0,Bko,xfe,Pko,XIe,Bo,i0,Iko,Oi,qko,uG,Nko,jko,_G,Dko,Gko,Oko,d0,Vko,$fe,Xko,zko,Qko,lt,c0,Wko,kfe,Hko,Uko,Vi,Jko,Sfe,Yko,Kko,bG,Zko,eSo,oSo,vb,rSo,eo,f0,tSo,Rfe,aSo,nSo,Sa,sSo,Bfe,lSo,iSo,Pfe,dSo,cSo,Ife,fSo,mSo,gSo,Y,Fb,qfe,hSo,pSo,vG,uSo,_So,bSo,Tb,Nfe,vSo,FSo,FG,TSo,MSo,ESo,Mb,jfe,CSo,wSo,TG,ASo,ySo,LSo,Eb,Dfe,xSo,$So,MG,kSo,SSo,RSo,Cb,Gfe,BSo,PSo,EG,ISo,qSo,NSo,wb,Ofe,jSo,DSo,CG,GSo,OSo,VSo,Ab,Vfe,XSo,zSo,wG,QSo,WSo,HSo,yb,Xfe,USo,JSo,AG,YSo,KSo,ZSo,Lb,zfe,eRo,oRo,yG,rRo,tRo,aRo,xb,Qfe,nRo,sRo,LG,lRo,iRo,dRo,$b,Wfe,cRo,fRo,xG,mRo,gRo,hRo,kb,Hfe,pRo,uRo,$G,_Ro,bRo,vRo,Sb,Ufe,FRo,TRo,kG,MRo,ERo,CRo,Rb,Jfe,wRo,ARo,SG,yRo,LRo,xRo,Bb,Yfe,$Ro,kRo,RG,SRo,RRo,BRo,Pb,Kfe,PRo,IRo,BG,qRo,NRo,jRo,Ib,Zfe,DRo,GRo,PG,ORo,VRo,XRo,qb,eme,zRo,QRo,IG,WRo,HRo,URo,Nb,ome,JRo,YRo,qG,KRo,ZRo,eBo,jb,rme,oBo,rBo,NG,tBo,aBo,nBo,Db,tme,sBo,lBo,jG,iBo,dBo,cBo,Gb,ame,fBo,mBo,DG,gBo,hBo,pBo,Ob,nme,uBo,_Bo,GG,bBo,vBo,FBo,Vb,sme,TBo,MBo,OG,EBo,CBo,wBo,Xb,lme,ABo,yBo,VG,LBo,xBo,$Bo,zb,ime,kBo,SBo,XG,RBo,BBo,PBo,Qb,dme,IBo,qBo,zG,NBo,jBo,DBo,Wb,cme,GBo,OBo,QG,VBo,XBo,zBo,Hb,fme,QBo,WBo,WG,HBo,UBo,JBo,Ub,YBo,mme,KBo,ZBo,gme,ePo,oPo,Jb,zIe,Xi,Yb,hme,m0,rPo,pme,tPo,QIe,Po,g0,aPo,zi,nPo,HG,sPo,lPo,UG,iPo,dPo,cPo,h0,fPo,ume,mPo,gPo,hPo,it,p0,pPo,_me,uPo,_Po,Qi,bPo,bme,vPo,FPo,JG,TPo,MPo,EPo,Kb,CPo,oo,u0,wPo,vme,APo,yPo,Ra,LPo,Fme,xPo,$Po,Tme,kPo,SPo,Mme,RPo,BPo,PPo,Yr,Zb,Eme,IPo,qPo,YG,NPo,jPo,DPo,ev,Cme,GPo,OPo,KG,VPo,XPo,zPo,ov,wme,QPo,WPo,ZG,HPo,UPo,JPo,rv,Ame,YPo,KPo,eO,ZPo,eIo,oIo,tv,yme,rIo,tIo,oO,aIo,nIo,sIo,av,lIo,Lme,iIo,dIo,xme,cIo,fIo,nv,WIe,Wi,sv,$me,_0,mIo,kme,gIo,HIe,Io,b0,hIo,Hi,pIo,rO,uIo,_Io,tO,bIo,vIo,FIo,v0,TIo,Sme,MIo,EIo,CIo,dt,F0,wIo,Rme,AIo,yIo,Ui,LIo,Bme,xIo,$Io,aO,kIo,SIo,RIo,lv,BIo,ro,T0,PIo,Pme,IIo,qIo,Ba,NIo,Ime,jIo,DIo,qme,GIo,OIo,Nme,VIo,XIo,zIo,U,iv,jme,QIo,WIo,nO,HIo,UIo,JIo,dv,Dme,YIo,KIo,sO,ZIo,eqo,oqo,cv,Gme,rqo,tqo,lO,aqo,nqo,sqo,fv,Ome,lqo,iqo,iO,dqo,cqo,fqo,mv,Vme,mqo,gqo,dO,hqo,pqo,uqo,gv,Xme,_qo,bqo,cO,vqo,Fqo,Tqo,hv,zme,Mqo,Eqo,fO,Cqo,wqo,Aqo,pv,Qme,yqo,Lqo,mO,xqo,$qo,kqo,uv,Wme,Sqo,Rqo,gO,Bqo,Pqo,Iqo,_v,Hme,qqo,Nqo,hO,jqo,Dqo,Gqo,bv,Ume,Oqo,Vqo,pO,Xqo,zqo,Qqo,vv,Jme,Wqo,Hqo,uO,Uqo,Jqo,Yqo,Fv,Yme,Kqo,Zqo,_O,eNo,oNo,rNo,Tv,Kme,tNo,aNo,bO,nNo,sNo,lNo,Mv,Zme,iNo,dNo,vO,cNo,fNo,mNo,Ev,ege,gNo,hNo,FO,pNo,uNo,_No,Cv,oge,bNo,vNo,TO,FNo,TNo,MNo,wv,rge,ENo,CNo,MO,wNo,ANo,yNo,Av,tge,LNo,xNo,EO,$No,kNo,SNo,yv,age,RNo,BNo,CO,PNo,INo,qNo,Lv,nge,NNo,jNo,wO,DNo,GNo,ONo,xv,sge,VNo,XNo,AO,zNo,QNo,WNo,$v,lge,HNo,UNo,yO,JNo,YNo,KNo,kv,ige,ZNo,ejo,LO,ojo,rjo,tjo,Sv,dge,ajo,njo,xO,sjo,ljo,ijo,Rv,cge,djo,cjo,$O,fjo,mjo,gjo,Bv,fge,hjo,pjo,kO,ujo,_jo,bjo,Pv,mge,vjo,Fjo,SO,Tjo,Mjo,Ejo,Iv,gge,Cjo,wjo,RO,Ajo,yjo,Ljo,qv,hge,xjo,$jo,BO,kjo,Sjo,Rjo,Nv,pge,Bjo,Pjo,PO,Ijo,qjo,Njo,jv,uge,jjo,Djo,IO,Gjo,Ojo,Vjo,Dv,_ge,Xjo,zjo,qO,Qjo,Wjo,Hjo,Gv,Ujo,bge,Jjo,Yjo,vge,Kjo,Zjo,Ov,UIe,Ji,Vv,Fge,M0,eDo,Tge,oDo,JIe,qo,E0,rDo,Yi,tDo,NO,aDo,nDo,jO,sDo,lDo,iDo,C0,dDo,Mge,cDo,fDo,mDo,ct,w0,gDo,Ege,hDo,pDo,Ki,uDo,Cge,_Do,bDo,DO,vDo,FDo,TDo,Xv,MDo,to,A0,EDo,wge,CDo,wDo,Pa,ADo,Age,yDo,LDo,yge,xDo,$Do,Lge,kDo,SDo,RDo,V,zv,xge,BDo,PDo,GO,IDo,qDo,NDo,Qv,$ge,jDo,DDo,OO,GDo,ODo,VDo,Wv,kge,XDo,zDo,VO,QDo,WDo,HDo,Hv,Sge,UDo,JDo,XO,YDo,KDo,ZDo,Uv,Rge,eGo,oGo,zO,rGo,tGo,aGo,Jv,Bge,nGo,sGo,QO,lGo,iGo,dGo,Yv,Pge,cGo,fGo,WO,mGo,gGo,hGo,Kv,Ige,pGo,uGo,HO,_Go,bGo,vGo,Zv,qge,FGo,TGo,UO,MGo,EGo,CGo,eF,Nge,wGo,AGo,JO,yGo,LGo,xGo,oF,jge,$Go,kGo,YO,SGo,RGo,BGo,rF,Dge,PGo,IGo,KO,qGo,NGo,jGo,tF,Gge,DGo,GGo,ZO,OGo,VGo,XGo,aF,Oge,zGo,QGo,eV,WGo,HGo,UGo,nF,Vge,JGo,YGo,oV,KGo,ZGo,eOo,sF,Xge,oOo,rOo,rV,tOo,aOo,nOo,lF,zge,sOo,lOo,tV,iOo,dOo,cOo,iF,Qge,fOo,mOo,aV,gOo,hOo,pOo,dF,Wge,uOo,_Oo,nV,bOo,vOo,FOo,cF,Hge,TOo,MOo,sV,EOo,COo,wOo,fF,Uge,AOo,yOo,lV,LOo,xOo,$Oo,mF,Jge,kOo,SOo,iV,ROo,BOo,POo,gF,Yge,IOo,qOo,dV,NOo,jOo,DOo,hF,Kge,GOo,OOo,cV,VOo,XOo,zOo,pF,Zge,QOo,WOo,fV,HOo,UOo,JOo,uF,ehe,YOo,KOo,mV,ZOo,eVo,oVo,_F,ohe,rVo,tVo,gV,aVo,nVo,sVo,bF,rhe,lVo,iVo,hV,dVo,cVo,fVo,vF,the,mVo,gVo,pV,hVo,pVo,uVo,FF,ahe,_Vo,bVo,uV,vVo,FVo,TVo,TF,nhe,MVo,EVo,_V,CVo,wVo,AVo,MF,she,yVo,LVo,bV,xVo,$Vo,kVo,EF,lhe,SVo,RVo,vV,BVo,PVo,IVo,CF,ihe,qVo,NVo,FV,jVo,DVo,GVo,wF,dhe,OVo,VVo,TV,XVo,zVo,QVo,AF,che,WVo,HVo,MV,UVo,JVo,YVo,yF,fhe,KVo,ZVo,EV,eXo,oXo,rXo,LF,mhe,tXo,aXo,CV,nXo,sXo,lXo,xF,ghe,iXo,dXo,wV,cXo,fXo,mXo,$F,gXo,hhe,hXo,pXo,phe,uXo,_Xo,kF,YIe,Zi,SF,uhe,y0,bXo,_he,vXo,KIe,No,L0,FXo,ed,TXo,AV,MXo,EXo,yV,CXo,wXo,AXo,x0,yXo,bhe,LXo,xXo,$Xo,ft,$0,kXo,vhe,SXo,RXo,od,BXo,Fhe,PXo,IXo,LV,qXo,NXo,jXo,RF,DXo,ao,k0,GXo,The,OXo,VXo,Ia,XXo,Mhe,zXo,QXo,Ehe,WXo,HXo,Che,UXo,JXo,YXo,whe,BF,Ahe,KXo,ZXo,xV,ezo,ozo,rzo,PF,tzo,yhe,azo,nzo,Lhe,szo,lzo,IF,ZIe,rd,qF,xhe,S0,izo,$he,dzo,eqe,jo,R0,czo,td,fzo,$V,mzo,gzo,kV,hzo,pzo,uzo,B0,_zo,khe,bzo,vzo,Fzo,mt,P0,Tzo,She,Mzo,Ezo,ad,Czo,Rhe,wzo,Azo,SV,yzo,Lzo,xzo,NF,$zo,no,I0,kzo,Bhe,Szo,Rzo,qa,Bzo,Phe,Pzo,Izo,Ihe,qzo,Nzo,qhe,jzo,Dzo,Gzo,Fe,jF,Nhe,Ozo,Vzo,RV,Xzo,zzo,Qzo,DF,jhe,Wzo,Hzo,BV,Uzo,Jzo,Yzo,GF,Dhe,Kzo,Zzo,PV,eQo,oQo,rQo,Ps,Ghe,tQo,aQo,IV,nQo,sQo,qV,lQo,iQo,dQo,OF,Ohe,cQo,fQo,NV,mQo,gQo,hQo,gt,Vhe,pQo,uQo,jV,_Qo,bQo,DV,vQo,FQo,GV,TQo,MQo,EQo,VF,Xhe,CQo,wQo,OV,AQo,yQo,LQo,XF,zhe,xQo,$Qo,VV,kQo,SQo,RQo,zF,Qhe,BQo,PQo,XV,IQo,qQo,NQo,QF,Whe,jQo,DQo,zV,GQo,OQo,VQo,WF,Hhe,XQo,zQo,QV,QQo,WQo,HQo,HF,Uhe,UQo,JQo,WV,YQo,KQo,ZQo,UF,Jhe,eWo,oWo,HV,rWo,tWo,aWo,JF,nWo,Yhe,sWo,lWo,Khe,iWo,dWo,YF,oqe,nd,KF,Zhe,q0,cWo,epe,fWo,rqe,Do,N0,mWo,sd,gWo,UV,hWo,pWo,JV,uWo,_Wo,bWo,j0,vWo,ope,FWo,TWo,MWo,ht,D0,EWo,rpe,CWo,wWo,ld,AWo,tpe,yWo,LWo,YV,xWo,$Wo,kWo,ZF,SWo,so,G0,RWo,ape,BWo,PWo,Na,IWo,npe,qWo,NWo,spe,jWo,DWo,lpe,GWo,OWo,VWo,ipe,e6,dpe,XWo,zWo,KV,QWo,WWo,HWo,o6,UWo,cpe,JWo,YWo,fpe,KWo,ZWo,r6,tqe,id,t6,mpe,O0,eHo,gpe,oHo,aqe,Go,V0,rHo,dd,tHo,ZV,aHo,nHo,eX,sHo,lHo,iHo,X0,dHo,hpe,cHo,fHo,mHo,pt,z0,gHo,ppe,hHo,pHo,cd,uHo,upe,_Ho,bHo,oX,vHo,FHo,THo,a6,MHo,lo,Q0,EHo,_pe,CHo,wHo,ja,AHo,bpe,yHo,LHo,vpe,xHo,$Ho,Fpe,kHo,SHo,RHo,je,n6,Tpe,BHo,PHo,rX,IHo,qHo,NHo,s6,Mpe,jHo,DHo,tX,GHo,OHo,VHo,l6,Epe,XHo,zHo,aX,QHo,WHo,HHo,i6,Cpe,UHo,JHo,nX,YHo,KHo,ZHo,d6,wpe,eUo,oUo,sX,rUo,tUo,aUo,c6,Ape,nUo,sUo,lX,lUo,iUo,dUo,f6,ype,cUo,fUo,iX,mUo,gUo,hUo,m6,Lpe,pUo,uUo,dX,_Uo,bUo,vUo,g6,FUo,xpe,TUo,MUo,$pe,EUo,CUo,h6,nqe,fd,p6,kpe,W0,wUo,Spe,AUo,sqe,Oo,H0,yUo,md,LUo,cX,xUo,$Uo,fX,kUo,SUo,RUo,U0,BUo,Rpe,PUo,IUo,qUo,ut,J0,NUo,Bpe,jUo,DUo,gd,GUo,Ppe,OUo,VUo,mX,XUo,zUo,QUo,u6,WUo,io,Y0,HUo,Ipe,UUo,JUo,Da,YUo,qpe,KUo,ZUo,Npe,eJo,oJo,jpe,rJo,tJo,aJo,Ga,_6,Dpe,nJo,sJo,gX,lJo,iJo,dJo,b6,Gpe,cJo,fJo,hX,mJo,gJo,hJo,v6,Ope,pJo,uJo,pX,_Jo,bJo,vJo,F6,Vpe,FJo,TJo,uX,MJo,EJo,CJo,T6,wJo,Xpe,AJo,yJo,zpe,LJo,xJo,M6,lqe,hd,E6,Qpe,K0,$Jo,Wpe,kJo,iqe,Vo,Z0,SJo,pd,RJo,_X,BJo,PJo,bX,IJo,qJo,NJo,ey,jJo,Hpe,DJo,GJo,OJo,_t,oy,VJo,Upe,XJo,zJo,ud,QJo,Jpe,WJo,HJo,vX,UJo,JJo,YJo,C6,KJo,co,ry,ZJo,Ype,eYo,oYo,Oa,rYo,Kpe,tYo,aYo,Zpe,nYo,sYo,eue,lYo,iYo,dYo,De,w6,oue,cYo,fYo,FX,mYo,gYo,hYo,A6,rue,pYo,uYo,TX,_Yo,bYo,vYo,y6,tue,FYo,TYo,MX,MYo,EYo,CYo,L6,aue,wYo,AYo,EX,yYo,LYo,xYo,x6,nue,$Yo,kYo,CX,SYo,RYo,BYo,$6,sue,PYo,IYo,wX,qYo,NYo,jYo,k6,lue,DYo,GYo,AX,OYo,VYo,XYo,S6,iue,zYo,QYo,yX,WYo,HYo,UYo,R6,JYo,due,YYo,KYo,cue,ZYo,eKo,B6,dqe,_d,P6,fue,ty,oKo,mue,rKo,cqe,Xo,ay,tKo,bd,aKo,LX,nKo,sKo,xX,lKo,iKo,dKo,ny,cKo,gue,fKo,mKo,gKo,bt,sy,hKo,hue,pKo,uKo,vd,_Ko,pue,bKo,vKo,$X,FKo,TKo,MKo,I6,EKo,fo,ly,CKo,uue,wKo,AKo,Va,yKo,_ue,LKo,xKo,bue,$Ko,kKo,vue,SKo,RKo,BKo,iy,q6,Fue,PKo,IKo,kX,qKo,NKo,jKo,N6,Tue,DKo,GKo,SX,OKo,VKo,XKo,j6,zKo,Mue,QKo,WKo,Eue,HKo,UKo,D6,fqe,Fd,G6,Cue,dy,JKo,wue,YKo,mqe,zo,cy,KKo,Td,ZKo,RX,eZo,oZo,BX,rZo,tZo,aZo,fy,nZo,Aue,sZo,lZo,iZo,vt,my,dZo,yue,cZo,fZo,Md,mZo,Lue,gZo,hZo,PX,pZo,uZo,_Zo,O6,bZo,mo,gy,vZo,xue,FZo,TZo,Xa,MZo,$ue,EZo,CZo,kue,wZo,AZo,Sue,yZo,LZo,xZo,za,V6,Rue,$Zo,kZo,IX,SZo,RZo,BZo,X6,Bue,PZo,IZo,qX,qZo,NZo,jZo,z6,Pue,DZo,GZo,NX,OZo,VZo,XZo,Q6,Iue,zZo,QZo,jX,WZo,HZo,UZo,W6,JZo,que,YZo,KZo,Nue,ZZo,eer,H6,gqe,Ed,U6,jue,hy,oer,Due,rer,hqe,Qo,py,ter,Cd,aer,DX,ner,ser,GX,ler,ier,der,uy,cer,Gue,fer,mer,ger,Ft,_y,her,Oue,per,uer,wd,_er,Vue,ber,ver,OX,Fer,Ter,Mer,J6,Eer,go,by,Cer,Xue,wer,Aer,Qa,yer,zue,Ler,xer,Que,$er,ker,Wue,Ser,Rer,Ber,Ad,Y6,Hue,Per,Ier,VX,qer,Ner,jer,K6,Uue,Der,Ger,XX,Oer,Ver,Xer,Z6,Jue,zer,Qer,zX,Wer,Her,Uer,eT,Jer,Yue,Yer,Ker,Kue,Zer,eor,oT,pqe,yd,rT,Zue,vy,oor,e_e,ror,uqe,Wo,Fy,tor,Ld,aor,QX,nor,sor,WX,lor,ior,dor,Ty,cor,o_e,mor,gor,hor,Tt,My,por,r_e,uor,_or,xd,bor,t_e,vor,For,HX,Tor,Mor,Eor,tT,Cor,ho,Ey,wor,a_e,Aor,yor,Wa,Lor,n_e,xor,$or,s_e,kor,Sor,l_e,Ror,Bor,Por,Cy,aT,i_e,Ior,qor,UX,Nor,jor,Dor,nT,d_e,Gor,Oor,JX,Vor,Xor,zor,sT,Qor,c_e,Wor,Hor,f_e,Uor,Jor,lT,_qe,$d,iT,m_e,wy,Yor,g_e,Kor,bqe,Ho,Ay,Zor,kd,err,YX,orr,rrr,KX,trr,arr,nrr,yy,srr,h_e,lrr,irr,drr,Mt,Ly,crr,p_e,frr,mrr,Sd,grr,u_e,hrr,prr,ZX,urr,_rr,brr,dT,vrr,po,xy,Frr,__e,Trr,Mrr,Ha,Err,b_e,Crr,wrr,v_e,Arr,yrr,F_e,Lrr,xrr,$rr,T_e,cT,M_e,krr,Srr,ez,Rrr,Brr,Prr,fT,Irr,E_e,qrr,Nrr,C_e,jrr,Drr,mT,vqe,Rd,gT,w_e,$y,Grr,A_e,Orr,Fqe,Uo,ky,Vrr,Bd,Xrr,oz,zrr,Qrr,rz,Wrr,Hrr,Urr,Sy,Jrr,y_e,Yrr,Krr,Zrr,Et,Ry,etr,L_e,otr,rtr,Pd,ttr,x_e,atr,ntr,tz,str,ltr,itr,hT,dtr,uo,By,ctr,$_e,ftr,mtr,Ua,gtr,k_e,htr,ptr,S_e,utr,_tr,R_e,btr,vtr,Ftr,Ja,pT,B_e,Ttr,Mtr,az,Etr,Ctr,wtr,uT,P_e,Atr,ytr,nz,Ltr,xtr,$tr,_T,I_e,ktr,Str,sz,Rtr,Btr,Ptr,bT,q_e,Itr,qtr,lz,Ntr,jtr,Dtr,vT,Gtr,N_e,Otr,Vtr,j_e,Xtr,ztr,FT,Tqe,Id,TT,D_e,Py,Qtr,G_e,Wtr,Mqe,Jo,Iy,Htr,qd,Utr,iz,Jtr,Ytr,dz,Ktr,Ztr,ear,qy,oar,O_e,rar,tar,aar,Ct,Ny,nar,V_e,sar,lar,Nd,iar,X_e,dar,car,cz,far,mar,gar,MT,har,_o,jy,par,z_e,uar,_ar,Ya,bar,Q_e,Far,Tar,W_e,Mar,Ear,H_e,Car,war,Aar,U_e,ET,J_e,yar,Lar,fz,xar,$ar,kar,CT,Sar,Y_e,Rar,Bar,K_e,Par,Iar,wT,Eqe,jd,AT,Z_e,Dy,qar,e2e,Nar,Cqe,Yo,Gy,jar,Dd,Dar,mz,Gar,Oar,gz,Var,Xar,zar,Oy,Qar,o2e,War,Har,Uar,wt,Vy,Jar,r2e,Yar,Kar,Gd,Zar,t2e,enr,onr,hz,rnr,tnr,anr,yT,nnr,wr,Xy,snr,a2e,lnr,inr,Ka,dnr,n2e,cnr,fnr,s2e,mnr,gnr,l2e,hnr,pnr,unr,N,LT,i2e,_nr,bnr,pz,vnr,Fnr,Tnr,xT,d2e,Mnr,Enr,uz,Cnr,wnr,Anr,$T,c2e,ynr,Lnr,_z,xnr,$nr,knr,kT,f2e,Snr,Rnr,bz,Bnr,Pnr,Inr,ST,m2e,qnr,Nnr,vz,jnr,Dnr,Gnr,RT,g2e,Onr,Vnr,Fz,Xnr,znr,Qnr,BT,h2e,Wnr,Hnr,Tz,Unr,Jnr,Ynr,PT,p2e,Knr,Znr,Mz,esr,osr,rsr,IT,u2e,tsr,asr,Ez,nsr,ssr,lsr,qT,_2e,isr,dsr,Cz,csr,fsr,msr,NT,b2e,gsr,hsr,wz,psr,usr,_sr,jT,v2e,bsr,vsr,Az,Fsr,Tsr,Msr,DT,F2e,Esr,Csr,yz,wsr,Asr,ysr,GT,T2e,Lsr,xsr,Lz,$sr,ksr,Ssr,OT,M2e,Rsr,Bsr,xz,Psr,Isr,qsr,VT,E2e,Nsr,jsr,$z,Dsr,Gsr,Osr,XT,C2e,Vsr,Xsr,kz,zsr,Qsr,Wsr,Is,w2e,Hsr,Usr,Sz,Jsr,Ysr,Rz,Ksr,Zsr,elr,zT,A2e,olr,rlr,Bz,tlr,alr,nlr,QT,y2e,slr,llr,Pz,ilr,dlr,clr,WT,L2e,flr,mlr,Iz,glr,hlr,plr,HT,x2e,ulr,_lr,qz,blr,vlr,Flr,UT,$2e,Tlr,Mlr,Nz,Elr,Clr,wlr,JT,k2e,Alr,ylr,jz,Llr,xlr,$lr,YT,S2e,klr,Slr,Dz,Rlr,Blr,Plr,KT,R2e,Ilr,qlr,Gz,Nlr,jlr,Dlr,ZT,B2e,Glr,Olr,Oz,Vlr,Xlr,zlr,e9,P2e,Qlr,Wlr,Vz,Hlr,Ulr,Jlr,o9,I2e,Ylr,Klr,Xz,Zlr,eir,oir,r9,q2e,rir,tir,zz,air,nir,sir,t9,N2e,lir,iir,Qz,dir,cir,fir,a9,j2e,mir,gir,Wz,hir,pir,uir,n9,D2e,_ir,bir,Hz,vir,Fir,Tir,s9,G2e,Mir,Eir,Uz,Cir,wir,Air,l9,O2e,yir,Lir,Jz,xir,$ir,kir,i9,V2e,Sir,Rir,Yz,Bir,Pir,Iir,d9,X2e,qir,Nir,Kz,jir,Dir,Gir,c9,z2e,Oir,Vir,Zz,Xir,zir,Qir,f9,Q2e,Wir,Hir,eQ,Uir,Jir,Yir,m9,W2e,Kir,Zir,oQ,edr,odr,rdr,g9,H2e,tdr,adr,rQ,ndr,sdr,ldr,h9,U2e,idr,ddr,tQ,cdr,fdr,mdr,p9,J2e,gdr,hdr,aQ,pdr,udr,_dr,u9,Y2e,bdr,vdr,nQ,Fdr,Tdr,Mdr,_9,K2e,Edr,Cdr,sQ,wdr,Adr,ydr,b9,Z2e,Ldr,xdr,lQ,$dr,kdr,Sdr,v9,wqe,Od,F9,e1e,zy,Rdr,o1e,Bdr,Aqe,Ko,Qy,Pdr,Vd,Idr,iQ,qdr,Ndr,dQ,jdr,Ddr,Gdr,Wy,Odr,r1e,Vdr,Xdr,zdr,At,Hy,Qdr,t1e,Wdr,Hdr,Xd,Udr,a1e,Jdr,Ydr,cQ,Kdr,Zdr,ecr,T9,ocr,Ar,Uy,rcr,n1e,tcr,acr,Za,ncr,s1e,scr,lcr,l1e,icr,dcr,i1e,ccr,fcr,mcr,se,M9,d1e,gcr,hcr,fQ,pcr,ucr,_cr,E9,c1e,bcr,vcr,mQ,Fcr,Tcr,Mcr,C9,f1e,Ecr,Ccr,gQ,wcr,Acr,ycr,w9,m1e,Lcr,xcr,hQ,$cr,kcr,Scr,A9,g1e,Rcr,Bcr,pQ,Pcr,Icr,qcr,y9,h1e,Ncr,jcr,uQ,Dcr,Gcr,Ocr,L9,p1e,Vcr,Xcr,_Q,zcr,Qcr,Wcr,x9,u1e,Hcr,Ucr,bQ,Jcr,Ycr,Kcr,$9,_1e,Zcr,efr,vQ,ofr,rfr,tfr,k9,b1e,afr,nfr,FQ,sfr,lfr,ifr,S9,v1e,dfr,cfr,TQ,ffr,mfr,gfr,R9,F1e,hfr,pfr,MQ,ufr,_fr,bfr,B9,T1e,vfr,Ffr,EQ,Tfr,Mfr,Efr,P9,M1e,Cfr,wfr,CQ,Afr,yfr,Lfr,I9,E1e,xfr,$fr,wQ,kfr,Sfr,Rfr,q9,C1e,Bfr,Pfr,AQ,Ifr,qfr,Nfr,N9,w1e,jfr,Dfr,yQ,Gfr,Ofr,Vfr,j9,A1e,Xfr,zfr,LQ,Qfr,Wfr,Hfr,D9,y1e,Ufr,Jfr,xQ,Yfr,Kfr,Zfr,G9,L1e,emr,omr,$Q,rmr,tmr,amr,O9,x1e,nmr,smr,kQ,lmr,imr,dmr,V9,$1e,cmr,fmr,SQ,mmr,gmr,hmr,X9,k1e,pmr,umr,RQ,_mr,bmr,vmr,z9,yqe,zd,Q9,S1e,Jy,Fmr,R1e,Tmr,Lqe,Zo,Yy,Mmr,Qd,Emr,BQ,Cmr,wmr,PQ,Amr,ymr,Lmr,Ky,xmr,B1e,$mr,kmr,Smr,yt,Zy,Rmr,P1e,Bmr,Pmr,Wd,Imr,I1e,qmr,Nmr,IQ,jmr,Dmr,Gmr,W9,Omr,yr,eL,Vmr,q1e,Xmr,zmr,en,Qmr,N1e,Wmr,Hmr,j1e,Umr,Jmr,D1e,Ymr,Kmr,Zmr,Me,H9,G1e,egr,ogr,qQ,rgr,tgr,agr,U9,O1e,ngr,sgr,NQ,lgr,igr,dgr,J9,V1e,cgr,fgr,jQ,mgr,ggr,hgr,Y9,X1e,pgr,ugr,DQ,_gr,bgr,vgr,K9,z1e,Fgr,Tgr,GQ,Mgr,Egr,Cgr,Z9,Q1e,wgr,Agr,OQ,ygr,Lgr,xgr,e7,W1e,$gr,kgr,VQ,Sgr,Rgr,Bgr,o7,H1e,Pgr,Igr,XQ,qgr,Ngr,jgr,r7,U1e,Dgr,Ggr,zQ,Ogr,Vgr,Xgr,t7,J1e,zgr,Qgr,QQ,Wgr,Hgr,Ugr,a7,Y1e,Jgr,Ygr,WQ,Kgr,Zgr,ehr,n7,K1e,ohr,rhr,HQ,thr,ahr,nhr,s7,xqe,Hd,l7,Z1e,oL,shr,ebe,lhr,$qe,er,rL,ihr,Ud,dhr,UQ,chr,fhr,JQ,mhr,ghr,hhr,tL,phr,obe,uhr,_hr,bhr,Lt,aL,vhr,rbe,Fhr,Thr,Jd,Mhr,tbe,Ehr,Chr,YQ,whr,Ahr,yhr,i7,Lhr,Lr,nL,xhr,abe,$hr,khr,on,Shr,nbe,Rhr,Bhr,sbe,Phr,Ihr,lbe,qhr,Nhr,jhr,rn,d7,ibe,Dhr,Ghr,KQ,Ohr,Vhr,Xhr,c7,dbe,zhr,Qhr,ZQ,Whr,Hhr,Uhr,f7,cbe,Jhr,Yhr,eW,Khr,Zhr,epr,m7,fbe,opr,rpr,oW,tpr,apr,npr,g7,kqe,Yd,h7,mbe,sL,spr,gbe,lpr,Sqe,or,lL,ipr,Kd,dpr,rW,cpr,fpr,tW,mpr,gpr,hpr,iL,ppr,hbe,upr,_pr,bpr,xt,dL,vpr,pbe,Fpr,Tpr,Zd,Mpr,ube,Epr,Cpr,aW,wpr,Apr,ypr,p7,Lpr,xr,cL,xpr,_be,$pr,kpr,tn,Spr,bbe,Rpr,Bpr,vbe,Ppr,Ipr,Fbe,qpr,Npr,jpr,ie,u7,Tbe,Dpr,Gpr,nW,Opr,Vpr,Xpr,_7,Mbe,zpr,Qpr,sW,Wpr,Hpr,Upr,b7,Ebe,Jpr,Ypr,lW,Kpr,Zpr,eur,v7,Cbe,our,rur,iW,tur,aur,nur,F7,wbe,sur,lur,dW,iur,dur,cur,T7,Abe,fur,mur,cW,gur,hur,pur,M7,ybe,uur,_ur,fW,bur,vur,Fur,E7,Lbe,Tur,Mur,mW,Eur,Cur,wur,C7,xbe,Aur,yur,gW,Lur,xur,$ur,w7,$be,kur,Sur,hW,Rur,Bur,Pur,A7,kbe,Iur,qur,pW,Nur,jur,Dur,y7,Sbe,Gur,Our,uW,Vur,Xur,zur,L7,Rbe,Qur,Wur,_W,Hur,Uur,Jur,x7,Bbe,Yur,Kur,bW,Zur,e_r,o_r,$7,Pbe,r_r,t_r,vW,a_r,n_r,s_r,k7,Ibe,l_r,i_r,FW,d_r,c_r,f_r,S7,qbe,m_r,g_r,TW,h_r,p_r,u_r,R7,Nbe,__r,b_r,MW,v_r,F_r,T_r,B7,jbe,M_r,E_r,EW,C_r,w_r,A_r,P7,Dbe,y_r,L_r,CW,x_r,$_r,k_r,I7,Rqe,ec,q7,Gbe,fL,S_r,Obe,R_r,Bqe,rr,mL,B_r,oc,P_r,wW,I_r,q_r,AW,N_r,j_r,D_r,gL,G_r,Vbe,O_r,V_r,X_r,$t,hL,z_r,Xbe,Q_r,W_r,rc,H_r,zbe,U_r,J_r,yW,Y_r,K_r,Z_r,N7,e2r,$r,pL,o2r,Qbe,r2r,t2r,an,a2r,Wbe,n2r,s2r,Hbe,l2r,i2r,Ube,d2r,c2r,f2r,ye,j7,Jbe,m2r,g2r,LW,h2r,p2r,u2r,D7,Ybe,_2r,b2r,xW,v2r,F2r,T2r,G7,Kbe,M2r,E2r,$W,C2r,w2r,A2r,O7,Zbe,y2r,L2r,kW,x2r,$2r,k2r,V7,eve,S2r,R2r,SW,B2r,P2r,I2r,X7,ove,q2r,N2r,RW,j2r,D2r,G2r,z7,rve,O2r,V2r,BW,X2r,z2r,Q2r,Q7,tve,W2r,H2r,PW,U2r,J2r,Y2r,W7,ave,K2r,Z2r,IW,e1r,o1r,r1r,H7,nve,t1r,a1r,qW,n1r,s1r,l1r,U7,Pqe,tc,J7,sve,uL,i1r,lve,d1r,Iqe,tr,_L,c1r,ac,f1r,NW,m1r,g1r,jW,h1r,p1r,u1r,bL,_1r,ive,b1r,v1r,F1r,kt,vL,T1r,dve,M1r,E1r,nc,C1r,cve,w1r,A1r,DW,y1r,L1r,x1r,Y7,$1r,kr,FL,k1r,fve,S1r,R1r,nn,B1r,mve,P1r,I1r,gve,q1r,N1r,hve,j1r,D1r,G1r,Z,K7,pve,O1r,V1r,GW,X1r,z1r,Q1r,Z7,uve,W1r,H1r,OW,U1r,J1r,Y1r,eM,_ve,K1r,Z1r,VW,ebr,obr,rbr,oM,bve,tbr,abr,XW,nbr,sbr,lbr,rM,vve,ibr,dbr,zW,cbr,fbr,mbr,tM,Fve,gbr,hbr,QW,pbr,ubr,_br,aM,Tve,bbr,vbr,WW,Fbr,Tbr,Mbr,nM,Mve,Ebr,Cbr,HW,wbr,Abr,ybr,sM,Eve,Lbr,xbr,UW,$br,kbr,Sbr,lM,Cve,Rbr,Bbr,JW,Pbr,Ibr,qbr,iM,wve,Nbr,jbr,YW,Dbr,Gbr,Obr,dM,Ave,Vbr,Xbr,KW,zbr,Qbr,Wbr,cM,yve,Hbr,Ubr,ZW,Jbr,Ybr,Kbr,fM,Lve,Zbr,evr,eH,ovr,rvr,tvr,mM,xve,avr,nvr,oH,svr,lvr,ivr,gM,$ve,dvr,cvr,rH,fvr,mvr,gvr,hM,kve,hvr,pvr,tH,uvr,_vr,bvr,pM,Sve,vvr,Fvr,aH,Tvr,Mvr,Evr,uM,Rve,Cvr,wvr,nH,Avr,yvr,Lvr,_M,Bve,xvr,$vr,sH,kvr,Svr,Rvr,bM,Pve,Bvr,Pvr,lH,Ivr,qvr,Nvr,vM,Ive,jvr,Dvr,iH,Gvr,Ovr,Vvr,FM,qve,Xvr,zvr,dH,Qvr,Wvr,Hvr,TM,Nve,Uvr,Jvr,cH,Yvr,Kvr,Zvr,MM,jve,eFr,oFr,fH,rFr,tFr,aFr,EM,Dve,nFr,sFr,mH,lFr,iFr,dFr,CM,qqe,sc,wM,Gve,TL,cFr,Ove,fFr,Nqe,ar,ML,mFr,lc,gFr,gH,hFr,pFr,hH,uFr,_Fr,bFr,EL,vFr,Vve,FFr,TFr,MFr,St,CL,EFr,Xve,CFr,wFr,ic,AFr,zve,yFr,LFr,pH,xFr,$Fr,kFr,AM,SFr,Sr,wL,RFr,Qve,BFr,PFr,sn,IFr,Wve,qFr,NFr,Hve,jFr,DFr,Uve,GFr,OFr,VFr,pe,yM,Jve,XFr,zFr,uH,QFr,WFr,HFr,LM,Yve,UFr,JFr,_H,YFr,KFr,ZFr,xM,Kve,e6r,o6r,bH,r6r,t6r,a6r,$M,Zve,n6r,s6r,vH,l6r,i6r,d6r,kM,eFe,c6r,f6r,FH,m6r,g6r,h6r,SM,oFe,p6r,u6r,TH,_6r,b6r,v6r,RM,rFe,F6r,T6r,MH,M6r,E6r,C6r,BM,tFe,w6r,A6r,EH,y6r,L6r,x6r,PM,aFe,$6r,k6r,CH,S6r,R6r,B6r,IM,nFe,P6r,I6r,wH,q6r,N6r,j6r,qM,sFe,D6r,G6r,AH,O6r,V6r,X6r,NM,lFe,z6r,Q6r,yH,W6r,H6r,U6r,jM,iFe,J6r,Y6r,LH,K6r,Z6r,eTr,DM,dFe,oTr,rTr,xH,tTr,aTr,nTr,GM,cFe,sTr,lTr,$H,iTr,dTr,cTr,OM,fFe,fTr,mTr,kH,gTr,hTr,pTr,VM,mFe,uTr,_Tr,SH,bTr,vTr,FTr,XM,jqe,dc,zM,gFe,AL,TTr,hFe,MTr,Dqe,nr,yL,ETr,cc,CTr,RH,wTr,ATr,BH,yTr,LTr,xTr,LL,$Tr,pFe,kTr,STr,RTr,Rt,xL,BTr,uFe,PTr,ITr,fc,qTr,_Fe,NTr,jTr,PH,DTr,GTr,OTr,QM,VTr,Rr,$L,XTr,bFe,zTr,QTr,ln,WTr,vFe,HTr,UTr,FFe,JTr,YTr,TFe,KTr,ZTr,e9r,kL,WM,MFe,o9r,r9r,IH,t9r,a9r,n9r,HM,EFe,s9r,l9r,qH,i9r,d9r,c9r,UM,Gqe,mc,JM,CFe,SL,f9r,wFe,m9r,Oqe,sr,RL,g9r,gc,h9r,NH,p9r,u9r,jH,_9r,b9r,v9r,BL,F9r,AFe,T9r,M9r,E9r,Bt,PL,C9r,yFe,w9r,A9r,hc,y9r,LFe,L9r,x9r,DH,$9r,k9r,S9r,YM,R9r,Br,IL,B9r,xFe,P9r,I9r,dn,q9r,$Fe,N9r,j9r,kFe,D9r,G9r,SFe,O9r,V9r,X9r,RFe,KM,BFe,z9r,Q9r,GH,W9r,H9r,U9r,ZM,Vqe,pc,e4,PFe,qL,J9r,IFe,Y9r,Xqe,lr,NL,K9r,uc,Z9r,OH,e7r,o7r,VH,r7r,t7r,a7r,jL,n7r,qFe,s7r,l7r,i7r,Pt,DL,d7r,NFe,c7r,f7r,_c,m7r,jFe,g7r,h7r,XH,p7r,u7r,_7r,o4,b7r,Pr,GL,v7r,DFe,F7r,T7r,cn,M7r,GFe,E7r,C7r,OFe,w7r,A7r,VFe,y7r,L7r,x7r,de,r4,XFe,$7r,k7r,zH,S7r,R7r,B7r,t4,zFe,P7r,I7r,QH,q7r,N7r,j7r,a4,QFe,D7r,G7r,WH,O7r,V7r,X7r,n4,WFe,z7r,Q7r,HH,W7r,H7r,U7r,s4,HFe,J7r,Y7r,UH,K7r,Z7r,eMr,l4,UFe,oMr,rMr,JH,tMr,aMr,nMr,i4,JFe,sMr,lMr,YH,iMr,dMr,cMr,d4,YFe,fMr,mMr,KH,gMr,hMr,pMr,c4,KFe,uMr,_Mr,ZH,bMr,vMr,FMr,f4,ZFe,TMr,MMr,eU,EMr,CMr,wMr,m4,e6e,AMr,yMr,oU,LMr,xMr,$Mr,g4,o6e,kMr,SMr,rU,RMr,BMr,PMr,h4,r6e,IMr,qMr,tU,NMr,jMr,DMr,p4,t6e,GMr,OMr,aU,VMr,XMr,zMr,u4,a6e,QMr,WMr,nU,HMr,UMr,JMr,_4,n6e,YMr,KMr,sU,ZMr,e4r,o4r,b4,s6e,r4r,t4r,lU,a4r,n4r,s4r,v4,l6e,l4r,i4r,iU,d4r,c4r,f4r,F4,i6e,m4r,g4r,dU,h4r,p4r,u4r,T4,d6e,_4r,b4r,cU,v4r,F4r,T4r,M4,zqe,bc,E4,c6e,OL,M4r,f6e,E4r,Qqe,ir,VL,C4r,vc,w4r,fU,A4r,y4r,mU,L4r,x4r,$4r,XL,k4r,m6e,S4r,R4r,B4r,It,zL,P4r,g6e,I4r,q4r,Fc,N4r,h6e,j4r,D4r,gU,G4r,O4r,V4r,C4,X4r,Ir,QL,z4r,p6e,Q4r,W4r,fn,H4r,u6e,U4r,J4r,_6e,Y4r,K4r,b6e,Z4r,eEr,oEr,ce,w4,v6e,rEr,tEr,hU,aEr,nEr,sEr,A4,F6e,lEr,iEr,pU,dEr,cEr,fEr,y4,T6e,mEr,gEr,uU,hEr,pEr,uEr,L4,M6e,_Er,bEr,_U,vEr,FEr,TEr,x4,E6e,MEr,EEr,bU,CEr,wEr,AEr,$4,C6e,yEr,LEr,vU,xEr,$Er,kEr,k4,w6e,SEr,REr,FU,BEr,PEr,IEr,S4,A6e,qEr,NEr,TU,jEr,DEr,GEr,R4,y6e,OEr,VEr,MU,XEr,zEr,QEr,B4,L6e,WEr,HEr,EU,UEr,JEr,YEr,P4,x6e,KEr,ZEr,CU,e5r,o5r,r5r,I4,$6e,t5r,a5r,wU,n5r,s5r,l5r,q4,k6e,i5r,d5r,AU,c5r,f5r,m5r,N4,S6e,g5r,h5r,yU,p5r,u5r,_5r,j4,R6e,b5r,v5r,LU,F5r,T5r,M5r,D4,B6e,E5r,C5r,xU,w5r,A5r,y5r,G4,P6e,L5r,x5r,$U,$5r,k5r,S5r,O4,I6e,R5r,B5r,kU,P5r,I5r,q5r,V4,q6e,N5r,j5r,SU,D5r,G5r,O5r,X4,N6e,V5r,X5r,RU,z5r,Q5r,W5r,z4,Wqe,Tc,Q4,j6e,WL,H5r,D6e,U5r,Hqe,dr,HL,J5r,Mc,Y5r,BU,K5r,Z5r,PU,eCr,oCr,rCr,UL,tCr,G6e,aCr,nCr,sCr,qt,JL,lCr,O6e,iCr,dCr,Ec,cCr,V6e,fCr,mCr,IU,gCr,hCr,pCr,W4,uCr,qr,YL,_Cr,X6e,bCr,vCr,mn,FCr,z6e,TCr,MCr,Q6e,ECr,CCr,W6e,wCr,ACr,yCr,H6e,H4,U6e,LCr,xCr,qU,$Cr,kCr,SCr,U4,Uqe,Cc,J4,J6e,KL,RCr,Y6e,BCr,Jqe,cr,ZL,PCr,wc,ICr,NU,qCr,NCr,jU,jCr,DCr,GCr,e8,OCr,K6e,VCr,XCr,zCr,Nt,o8,QCr,Z6e,WCr,HCr,Ac,UCr,eTe,JCr,YCr,DU,KCr,ZCr,e3r,Y4,o3r,Nr,r8,r3r,oTe,t3r,a3r,gn,n3r,rTe,s3r,l3r,tTe,i3r,d3r,aTe,c3r,f3r,m3r,nTe,K4,sTe,g3r,h3r,GU,p3r,u3r,_3r,Z4,Yqe,yc,eE,lTe,t8,b3r,iTe,v3r,Kqe,fr,a8,F3r,Lc,T3r,OU,M3r,E3r,VU,C3r,w3r,A3r,n8,y3r,dTe,L3r,x3r,$3r,jt,s8,k3r,cTe,S3r,R3r,xc,B3r,fTe,P3r,I3r,XU,q3r,N3r,j3r,oE,D3r,jr,l8,G3r,mTe,O3r,V3r,hn,X3r,gTe,z3r,Q3r,hTe,W3r,H3r,pTe,U3r,J3r,Y3r,ee,rE,uTe,K3r,Z3r,zU,ewr,owr,rwr,tE,_Te,twr,awr,QU,nwr,swr,lwr,aE,bTe,iwr,dwr,WU,cwr,fwr,mwr,nE,vTe,gwr,hwr,HU,pwr,uwr,_wr,sE,FTe,bwr,vwr,UU,Fwr,Twr,Mwr,lE,TTe,Ewr,Cwr,JU,wwr,Awr,ywr,iE,MTe,Lwr,xwr,YU,$wr,kwr,Swr,dE,ETe,Rwr,Bwr,KU,Pwr,Iwr,qwr,cE,CTe,Nwr,jwr,ZU,Dwr,Gwr,Owr,fE,wTe,Vwr,Xwr,eJ,zwr,Qwr,Wwr,mE,ATe,Hwr,Uwr,oJ,Jwr,Ywr,Kwr,gE,yTe,Zwr,eAr,rJ,oAr,rAr,tAr,hE,LTe,aAr,nAr,tJ,sAr,lAr,iAr,pE,xTe,dAr,cAr,aJ,fAr,mAr,gAr,uE,$Te,hAr,pAr,nJ,uAr,_Ar,bAr,_E,kTe,vAr,FAr,sJ,TAr,MAr,EAr,bE,STe,CAr,wAr,lJ,AAr,yAr,LAr,vE,RTe,xAr,$Ar,iJ,kAr,SAr,RAr,FE,BTe,BAr,PAr,dJ,IAr,qAr,NAr,TE,PTe,jAr,DAr,cJ,GAr,OAr,VAr,ME,ITe,XAr,zAr,fJ,QAr,WAr,HAr,EE,qTe,UAr,JAr,mJ,YAr,KAr,ZAr,CE,NTe,e0r,o0r,gJ,r0r,t0r,a0r,wE,jTe,n0r,s0r,hJ,l0r,i0r,d0r,AE,DTe,c0r,f0r,pJ,m0r,g0r,h0r,yE,GTe,p0r,u0r,uJ,_0r,b0r,v0r,LE,Zqe,$c,xE,OTe,i8,F0r,VTe,T0r,eNe,mr,d8,M0r,kc,E0r,_J,C0r,w0r,bJ,A0r,y0r,L0r,c8,x0r,XTe,$0r,k0r,S0r,Dt,f8,R0r,zTe,B0r,P0r,Sc,I0r,QTe,q0r,N0r,vJ,j0r,D0r,G0r,$E,O0r,Dr,m8,V0r,WTe,X0r,z0r,pn,Q0r,HTe,W0r,H0r,UTe,U0r,J0r,JTe,Y0r,K0r,Z0r,Se,kE,YTe,eyr,oyr,FJ,ryr,tyr,ayr,SE,KTe,nyr,syr,TJ,lyr,iyr,dyr,RE,ZTe,cyr,fyr,MJ,myr,gyr,hyr,BE,e9e,pyr,uyr,EJ,_yr,byr,vyr,PE,o9e,Fyr,Tyr,CJ,Myr,Eyr,Cyr,IE,r9e,wyr,Ayr,wJ,yyr,Lyr,xyr,qE,t9e,$yr,kyr,AJ,Syr,Ryr,Byr,NE,a9e,Pyr,Iyr,yJ,qyr,Nyr,jyr,jE,n9e,Dyr,Gyr,LJ,Oyr,Vyr,Xyr,DE,oNe,Rc,GE,s9e,g8,zyr,l9e,Qyr,rNe,gr,h8,Wyr,Bc,Hyr,xJ,Uyr,Jyr,$J,Yyr,Kyr,Zyr,p8,eLr,i9e,oLr,rLr,tLr,Gt,u8,aLr,d9e,nLr,sLr,Pc,lLr,c9e,iLr,dLr,kJ,cLr,fLr,mLr,OE,gLr,Gr,_8,hLr,f9e,pLr,uLr,un,_Lr,m9e,bLr,vLr,g9e,FLr,TLr,h9e,MLr,ELr,CLr,Te,VE,p9e,wLr,ALr,SJ,yLr,LLr,xLr,XE,u9e,$Lr,kLr,RJ,SLr,RLr,BLr,zE,_9e,PLr,ILr,BJ,qLr,NLr,jLr,QE,b9e,DLr,GLr,PJ,OLr,VLr,XLr,WE,v9e,zLr,QLr,IJ,WLr,HLr,ULr,HE,F9e,JLr,YLr,qJ,KLr,ZLr,e8r,UE,T9e,o8r,r8r,NJ,t8r,a8r,n8r,JE,M9e,s8r,l8r,jJ,i8r,d8r,c8r,YE,E9e,f8r,m8r,DJ,g8r,h8r,p8r,KE,C9e,u8r,_8r,GJ,b8r,v8r,F8r,ZE,w9e,T8r,M8r,OJ,E8r,C8r,w8r,e5,A9e,A8r,y8r,VJ,L8r,x8r,$8r,o5,y9e,k8r,S8r,XJ,R8r,B8r,P8r,r5,tNe,Ic,t5,L9e,b8,I8r,x9e,q8r,aNe,hr,v8,N8r,qc,j8r,zJ,D8r,G8r,QJ,O8r,V8r,X8r,F8,z8r,$9e,Q8r,W8r,H8r,Ot,T8,U8r,k9e,J8r,Y8r,Nc,K8r,S9e,Z8r,exr,WJ,oxr,rxr,txr,a5,axr,Or,M8,nxr,R9e,sxr,lxr,_n,ixr,B9e,dxr,cxr,P9e,fxr,mxr,I9e,gxr,hxr,pxr,Le,n5,q9e,uxr,_xr,HJ,bxr,vxr,Fxr,s5,N9e,Txr,Mxr,UJ,Exr,Cxr,wxr,l5,j9e,Axr,yxr,JJ,Lxr,xxr,$xr,i5,D9e,kxr,Sxr,YJ,Rxr,Bxr,Pxr,d5,G9e,Ixr,qxr,KJ,Nxr,jxr,Dxr,c5,O9e,Gxr,Oxr,ZJ,Vxr,Xxr,zxr,f5,V9e,Qxr,Wxr,eY,Hxr,Uxr,Jxr,m5,X9e,Yxr,Kxr,oY,Zxr,e$r,o$r,g5,z9e,r$r,t$r,rY,a$r,n$r,s$r,h5,Q9e,l$r,i$r,tY,d$r,c$r,f$r,p5,nNe,jc,u5,W9e,E8,m$r,H9e,g$r,sNe,pr,C8,h$r,Dc,p$r,aY,u$r,_$r,nY,b$r,v$r,F$r,w8,T$r,U9e,M$r,E$r,C$r,Vt,A8,w$r,J9e,A$r,y$r,Gc,L$r,Y9e,x$r,$$r,sY,k$r,S$r,R$r,_5,B$r,Vr,y8,P$r,K9e,I$r,q$r,bn,N$r,Z9e,j$r,D$r,e7e,G$r,O$r,o7e,V$r,X$r,z$r,xe,b5,r7e,Q$r,W$r,lY,H$r,U$r,J$r,v5,t7e,Y$r,K$r,iY,Z$r,ekr,okr,F5,a7e,rkr,tkr,dY,akr,nkr,skr,T5,n7e,lkr,ikr,cY,dkr,ckr,fkr,M5,s7e,mkr,gkr,fY,hkr,pkr,ukr,E5,l7e,_kr,bkr,mY,vkr,Fkr,Tkr,C5,i7e,Mkr,Ekr,gY,Ckr,wkr,Akr,w5,d7e,ykr,Lkr,hY,xkr,$kr,kkr,A5,c7e,Skr,Rkr,pY,Bkr,Pkr,Ikr,y5,f7e,qkr,Nkr,uY,jkr,Dkr,Gkr,L5,lNe,Oc,x5,m7e,L8,Okr,g7e,Vkr,iNe,ur,x8,Xkr,Vc,zkr,_Y,Qkr,Wkr,bY,Hkr,Ukr,Jkr,$8,Ykr,h7e,Kkr,Zkr,eSr,Xt,k8,oSr,p7e,rSr,tSr,Xc,aSr,u7e,nSr,sSr,vY,lSr,iSr,dSr,$5,cSr,Xr,S8,fSr,_7e,mSr,gSr,vn,hSr,b7e,pSr,uSr,v7e,_Sr,bSr,F7e,vSr,FSr,TSr,$e,k5,T7e,MSr,ESr,FY,CSr,wSr,ASr,S5,M7e,ySr,LSr,TY,xSr,$Sr,kSr,R5,E7e,SSr,RSr,MY,BSr,PSr,ISr,B5,C7e,qSr,NSr,EY,jSr,DSr,GSr,P5,w7e,OSr,VSr,CY,XSr,zSr,QSr,I5,A7e,WSr,HSr,wY,USr,JSr,YSr,q5,y7e,KSr,ZSr,AY,eRr,oRr,rRr,N5,L7e,tRr,aRr,yY,nRr,sRr,lRr,j5,x7e,iRr,dRr,LY,cRr,fRr,mRr,D5,$7e,gRr,hRr,xY,pRr,uRr,_Rr,G5,dNe,zc,O5,k7e,R8,bRr,S7e,vRr,cNe,_r,B8,FRr,Qc,TRr,$Y,MRr,ERr,kY,CRr,wRr,ARr,P8,yRr,R7e,LRr,xRr,$Rr,zt,I8,kRr,B7e,SRr,RRr,Wc,BRr,P7e,PRr,IRr,SY,qRr,NRr,jRr,V5,DRr,zr,q8,GRr,I7e,ORr,VRr,Fn,XRr,q7e,zRr,QRr,N7e,WRr,HRr,j7e,URr,JRr,YRr,ke,X5,D7e,KRr,ZRr,RY,eBr,oBr,rBr,z5,G7e,tBr,aBr,BY,nBr,sBr,lBr,Q5,O7e,iBr,dBr,PY,cBr,fBr,mBr,W5,V7e,gBr,hBr,IY,pBr,uBr,_Br,H5,X7e,bBr,vBr,qY,FBr,TBr,MBr,U5,z7e,EBr,CBr,NY,wBr,ABr,yBr,J5,Q7e,LBr,xBr,jY,$Br,kBr,SBr,Y5,W7e,RBr,BBr,DY,PBr,IBr,qBr,K5,H7e,NBr,jBr,GY,DBr,GBr,OBr,Z5,U7e,VBr,XBr,OY,zBr,QBr,WBr,eC,fNe,Hc,oC,J7e,N8,HBr,Y7e,UBr,mNe,br,j8,JBr,Uc,YBr,VY,KBr,ZBr,XY,ePr,oPr,rPr,D8,tPr,K7e,aPr,nPr,sPr,Qt,G8,lPr,Z7e,iPr,dPr,Jc,cPr,eMe,fPr,mPr,zY,gPr,hPr,pPr,rC,uPr,Qr,O8,_Pr,oMe,bPr,vPr,Tn,FPr,rMe,TPr,MPr,tMe,EPr,CPr,aMe,wPr,APr,yPr,Ge,tC,nMe,LPr,xPr,QY,$Pr,kPr,SPr,aC,sMe,RPr,BPr,WY,PPr,IPr,qPr,nC,lMe,NPr,jPr,HY,DPr,GPr,OPr,sC,iMe,VPr,XPr,UY,zPr,QPr,WPr,lC,dMe,HPr,UPr,JY,JPr,YPr,KPr,iC,cMe,ZPr,eIr,YY,oIr,rIr,tIr,dC,fMe,aIr,nIr,KY,sIr,lIr,iIr,cC,mMe,dIr,cIr,ZY,fIr,mIr,gIr,fC,gNe,Yc,mC,gMe,V8,hIr,hMe,pIr,hNe,vr,X8,uIr,Kc,_Ir,eK,bIr,vIr,oK,FIr,TIr,MIr,z8,EIr,pMe,CIr,wIr,AIr,Wt,Q8,yIr,uMe,LIr,xIr,Zc,$Ir,_Me,kIr,SIr,rK,RIr,BIr,PIr,gC,IIr,Wr,W8,qIr,bMe,NIr,jIr,Mn,DIr,vMe,GIr,OIr,FMe,VIr,XIr,TMe,zIr,QIr,WIr,Oe,hC,MMe,HIr,UIr,tK,JIr,YIr,KIr,pC,EMe,ZIr,eqr,aK,oqr,rqr,tqr,uC,CMe,aqr,nqr,nK,sqr,lqr,iqr,_C,wMe,dqr,cqr,sK,fqr,mqr,gqr,bC,AMe,hqr,pqr,lK,uqr,_qr,bqr,vC,yMe,vqr,Fqr,iK,Tqr,Mqr,Eqr,FC,LMe,Cqr,wqr,dK,Aqr,yqr,Lqr,TC,xMe,xqr,$qr,cK,kqr,Sqr,Rqr,MC,pNe,ef,EC,$Me,H8,Bqr,kMe,Pqr,uNe,Fr,U8,Iqr,of,qqr,fK,Nqr,jqr,mK,Dqr,Gqr,Oqr,J8,Vqr,SMe,Xqr,zqr,Qqr,Ht,Y8,Wqr,RMe,Hqr,Uqr,rf,Jqr,BMe,Yqr,Kqr,gK,Zqr,eNr,oNr,CC,rNr,Hr,K8,tNr,PMe,aNr,nNr,En,sNr,IMe,lNr,iNr,qMe,dNr,cNr,NMe,fNr,mNr,gNr,jMe,wC,DMe,hNr,pNr,hK,uNr,_Nr,bNr,AC,_Ne,tf,yC,GMe,Z8,vNr,OMe,FNr,bNe,Tr,ex,TNr,af,MNr,pK,ENr,CNr,uK,wNr,ANr,yNr,ox,LNr,VMe,xNr,$Nr,kNr,Ut,rx,SNr,XMe,RNr,BNr,nf,PNr,zMe,INr,qNr,_K,NNr,jNr,DNr,LC,GNr,Ur,tx,ONr,QMe,VNr,XNr,Cn,zNr,WMe,QNr,WNr,HMe,HNr,UNr,UMe,JNr,YNr,KNr,ax,xC,JMe,ZNr,ejr,bK,ojr,rjr,tjr,$C,YMe,ajr,njr,vK,sjr,ljr,ijr,kC,vNe,sf,SC,KMe,nx,djr,ZMe,cjr,FNe,Mr,sx,fjr,lf,mjr,FK,gjr,hjr,TK,pjr,ujr,_jr,lx,bjr,e4e,vjr,Fjr,Tjr,Jt,ix,Mjr,o4e,Ejr,Cjr,df,wjr,r4e,Ajr,yjr,MK,Ljr,xjr,$jr,RC,kjr,Jr,dx,Sjr,t4e,Rjr,Bjr,wn,Pjr,a4e,Ijr,qjr,n4e,Njr,jjr,s4e,Djr,Gjr,Ojr,l4e,BC,i4e,Vjr,Xjr,EK,zjr,Qjr,Wjr,PC,TNe;return d=new oe({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nA=new oe({}),sA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new Hjr({props:{warning:!0,$$slots:{default:[j0t]},$$scope:{ctx:L}}}),lA=new oe({}),iA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L573"}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L596"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[D0t]},$$scope:{ctx:L}}}),mA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L719"}}),gA=new oe({}),hA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L394"}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L408"}}),Jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:L}}}),bA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L604"}}),vA=new oe({}),FA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Ch=new Hjr({props:{$$slots:{default:[O0t]},$$scope:{ctx:L}}}),wh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),wA=new oe({}),AA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L86"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L100"}}),Vh=new Hjr({props:{$$slots:{default:[X0t]},$$scope:{ctx:L}}}),Xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L253"}}),kA=new oe({}),SA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L723"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Wh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),IA=new oe({}),qA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L730"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Du=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:L}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),GA=new oe({}),OA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L745"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),QA=new oe({}),WA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L752"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),e1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),YA=new oe({}),KA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L759"}}),e0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),r1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),o0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),r0=new oe({}),t0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L768"}}),n0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),s0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),l0=new oe({}),i0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L802"}}),c0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),m0=new oe({}),g0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L809"}}),p0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),_0=new oe({}),b0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L795"}}),F0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),M0=new oe({}),E0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L777"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),y0=new oe({}),L0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L784"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),S0=new oe({}),R0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L818"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),q0=new oe({}),N0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L857"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),O0=new oe({}),V0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L864"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),W0=new oe({}),H0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L887"}}),J0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),K0=new oe({}),Z0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L871"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L878"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L896"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L903"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L850"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L825"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L832"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),Py=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L841"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),v9=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),zy=new oe({}),Qy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),T9=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z9=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W9=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),WL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),s8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),f8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),u8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),T8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),A8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),k8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),R8=new oe({}),B8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),I8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),G8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Z8=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),di=o("Auto Classes"),gf=l(),et=a("p"),ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),oA=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),mi=o("Instantiating one of "),yn=a("a"),rA=o("AutoConfig"),Ln=o(", "),xn=a("a"),tA=o("AutoModel"),gi=o(`, and
`),$n=a("a"),aA=o("AutoTokenizer"),hi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),E$=o("will create a model that is an instance of "),pi=a("a"),C$=o("BertModel"),w$=o("."),Eo=l(),Ea=a("p"),A$=o("There is one class of "),uf=a("code"),y$=o("AutoModel"),xDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bIe=l(),ui=a("h2"),_f=a("a"),uee=a("span"),F(nA.$$.fragment),$De=l(),_ee=a("span"),kDe=o("Extending the Auto Classes"),vIe=l(),kn=a("p"),SDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),bee=a("code"),RDe=o("NewModel"),BDe=o(", make sure you have a "),vee=a("code"),PDe=o("NewModelConfig"),IDe=o(` then you can add those to the auto
classes like this:`),FIe=l(),F(sA.$$.fragment),TIe=l(),L$=a("p"),qDe=o("You will then be able to use the auto classes like you would usually do!"),MIe=l(),F(bf.$$.fragment),EIe=l(),_i=a("h2"),vf=a("a"),Fee=a("span"),F(lA.$$.fragment),NDe=l(),Tee=a("span"),jDe=o("AutoConfig"),CIe=l(),Co=a("div"),F(iA.$$.fragment),DDe=l(),dA=a("p"),GDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x$=a("a"),ODe=o("from_pretrained()"),VDe=o(" class method."),XDe=l(),cA=a("p"),zDe=o("This class cannot be instantiated directly using "),Mee=a("code"),QDe=o("__init__()"),WDe=o(" (throws an error)."),HDe=l(),Er=a("div"),F(fA.$$.fragment),UDe=l(),Eee=a("p"),JDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YDe=l(),bi=a("p"),KDe=o("The configuration class to instantiate is selected based on the "),Cee=a("code"),ZDe=o("model_type"),eGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wee=a("code"),oGe=o("pretrained_model_name_or_path"),rGe=o(":"),tGe=l(),A=a("ul"),Ff=a("li"),Aee=a("strong"),aGe=o("albert"),nGe=o(" \u2014 "),$$=a("a"),sGe=o("AlbertConfig"),lGe=o(" (ALBERT model)"),iGe=l(),Tf=a("li"),yee=a("strong"),dGe=o("bart"),cGe=o(" \u2014 "),k$=a("a"),fGe=o("BartConfig"),mGe=o(" (BART model)"),gGe=l(),Mf=a("li"),Lee=a("strong"),hGe=o("beit"),pGe=o(" \u2014 "),S$=a("a"),uGe=o("BeitConfig"),_Ge=o(" (BEiT model)"),bGe=l(),Ef=a("li"),xee=a("strong"),vGe=o("bert"),FGe=o(" \u2014 "),R$=a("a"),TGe=o("BertConfig"),MGe=o(" (BERT model)"),EGe=l(),Cf=a("li"),$ee=a("strong"),CGe=o("bert-generation"),wGe=o(" \u2014 "),B$=a("a"),AGe=o("BertGenerationConfig"),yGe=o(" (Bert Generation model)"),LGe=l(),wf=a("li"),kee=a("strong"),xGe=o("big_bird"),$Ge=o(" \u2014 "),P$=a("a"),kGe=o("BigBirdConfig"),SGe=o(" (BigBird model)"),RGe=l(),Af=a("li"),See=a("strong"),BGe=o("bigbird_pegasus"),PGe=o(" \u2014 "),I$=a("a"),IGe=o("BigBirdPegasusConfig"),qGe=o(" (BigBirdPegasus model)"),NGe=l(),yf=a("li"),Ree=a("strong"),jGe=o("blenderbot"),DGe=o(" \u2014 "),q$=a("a"),GGe=o("BlenderbotConfig"),OGe=o(" (Blenderbot model)"),VGe=l(),Lf=a("li"),Bee=a("strong"),XGe=o("blenderbot-small"),zGe=o(" \u2014 "),N$=a("a"),QGe=o("BlenderbotSmallConfig"),WGe=o(" (BlenderbotSmall model)"),HGe=l(),xf=a("li"),Pee=a("strong"),UGe=o("camembert"),JGe=o(" \u2014 "),j$=a("a"),YGe=o("CamembertConfig"),KGe=o(" (CamemBERT model)"),ZGe=l(),$f=a("li"),Iee=a("strong"),eOe=o("canine"),oOe=o(" \u2014 "),D$=a("a"),rOe=o("CanineConfig"),tOe=o(" (Canine model)"),aOe=l(),kf=a("li"),qee=a("strong"),nOe=o("clip"),sOe=o(" \u2014 "),G$=a("a"),lOe=o("CLIPConfig"),iOe=o(" (CLIP model)"),dOe=l(),Sf=a("li"),Nee=a("strong"),cOe=o("convbert"),fOe=o(" \u2014 "),O$=a("a"),mOe=o("ConvBertConfig"),gOe=o(" (ConvBERT model)"),hOe=l(),Rf=a("li"),jee=a("strong"),pOe=o("convnext"),uOe=o(" \u2014 "),V$=a("a"),_Oe=o("ConvNextConfig"),bOe=o(" (ConvNext model)"),vOe=l(),Bf=a("li"),Dee=a("strong"),FOe=o("ctrl"),TOe=o(" \u2014 "),X$=a("a"),MOe=o("CTRLConfig"),EOe=o(" (CTRL model)"),COe=l(),Pf=a("li"),Gee=a("strong"),wOe=o("data2vec-audio"),AOe=o(" \u2014 "),z$=a("a"),yOe=o("Data2VecAudioConfig"),LOe=o(" (Data2VecAudio model)"),xOe=l(),If=a("li"),Oee=a("strong"),$Oe=o("data2vec-text"),kOe=o(" \u2014 "),Q$=a("a"),SOe=o("Data2VecTextConfig"),ROe=o(" (Data2VecText model)"),BOe=l(),qf=a("li"),Vee=a("strong"),POe=o("data2vec-vision"),IOe=o(" \u2014 "),W$=a("a"),qOe=o("Data2VecVisionConfig"),NOe=o(" (Data2VecVision model)"),jOe=l(),Nf=a("li"),Xee=a("strong"),DOe=o("deberta"),GOe=o(" \u2014 "),H$=a("a"),OOe=o("DebertaConfig"),VOe=o(" (DeBERTa model)"),XOe=l(),jf=a("li"),zee=a("strong"),zOe=o("deberta-v2"),QOe=o(" \u2014 "),U$=a("a"),WOe=o("DebertaV2Config"),HOe=o(" (DeBERTa-v2 model)"),UOe=l(),Df=a("li"),Qee=a("strong"),JOe=o("decision_transformer"),YOe=o(" \u2014 "),J$=a("a"),KOe=o("DecisionTransformerConfig"),ZOe=o(" (Decision Transformer model)"),eVe=l(),Gf=a("li"),Wee=a("strong"),oVe=o("deit"),rVe=o(" \u2014 "),Y$=a("a"),tVe=o("DeiTConfig"),aVe=o(" (DeiT model)"),nVe=l(),Of=a("li"),Hee=a("strong"),sVe=o("detr"),lVe=o(" \u2014 "),K$=a("a"),iVe=o("DetrConfig"),dVe=o(" (DETR model)"),cVe=l(),Vf=a("li"),Uee=a("strong"),fVe=o("distilbert"),mVe=o(" \u2014 "),Z$=a("a"),gVe=o("DistilBertConfig"),hVe=o(" (DistilBERT model)"),pVe=l(),Xf=a("li"),Jee=a("strong"),uVe=o("dpr"),_Ve=o(" \u2014 "),ek=a("a"),bVe=o("DPRConfig"),vVe=o(" (DPR model)"),FVe=l(),zf=a("li"),Yee=a("strong"),TVe=o("dpt"),MVe=o(" \u2014 "),ok=a("a"),EVe=o("DPTConfig"),CVe=o(" (DPT model)"),wVe=l(),Qf=a("li"),Kee=a("strong"),AVe=o("electra"),yVe=o(" \u2014 "),rk=a("a"),LVe=o("ElectraConfig"),xVe=o(" (ELECTRA model)"),$Ve=l(),Wf=a("li"),Zee=a("strong"),kVe=o("encoder-decoder"),SVe=o(" \u2014 "),tk=a("a"),RVe=o("EncoderDecoderConfig"),BVe=o(" (Encoder decoder model)"),PVe=l(),Hf=a("li"),eoe=a("strong"),IVe=o("flaubert"),qVe=o(" \u2014 "),ak=a("a"),NVe=o("FlaubertConfig"),jVe=o(" (FlauBERT model)"),DVe=l(),Uf=a("li"),ooe=a("strong"),GVe=o("flava"),OVe=o(" \u2014 "),nk=a("a"),VVe=o("FlavaConfig"),XVe=o(" (Flava model)"),zVe=l(),Jf=a("li"),roe=a("strong"),QVe=o("fnet"),WVe=o(" \u2014 "),sk=a("a"),HVe=o("FNetConfig"),UVe=o(" (FNet model)"),JVe=l(),Yf=a("li"),toe=a("strong"),YVe=o("fsmt"),KVe=o(" \u2014 "),lk=a("a"),ZVe=o("FSMTConfig"),eXe=o(" (FairSeq Machine-Translation model)"),oXe=l(),Kf=a("li"),aoe=a("strong"),rXe=o("funnel"),tXe=o(" \u2014 "),ik=a("a"),aXe=o("FunnelConfig"),nXe=o(" (Funnel Transformer model)"),sXe=l(),Zf=a("li"),noe=a("strong"),lXe=o("glpn"),iXe=o(" \u2014 "),dk=a("a"),dXe=o("GLPNConfig"),cXe=o(" (GLPN model)"),fXe=l(),em=a("li"),soe=a("strong"),mXe=o("gpt2"),gXe=o(" \u2014 "),ck=a("a"),hXe=o("GPT2Config"),pXe=o(" (OpenAI GPT-2 model)"),uXe=l(),om=a("li"),loe=a("strong"),_Xe=o("gpt_neo"),bXe=o(" \u2014 "),fk=a("a"),vXe=o("GPTNeoConfig"),FXe=o(" (GPT Neo model)"),TXe=l(),rm=a("li"),ioe=a("strong"),MXe=o("gptj"),EXe=o(" \u2014 "),mk=a("a"),CXe=o("GPTJConfig"),wXe=o(" (GPT-J model)"),AXe=l(),tm=a("li"),doe=a("strong"),yXe=o("hubert"),LXe=o(" \u2014 "),gk=a("a"),xXe=o("HubertConfig"),$Xe=o(" (Hubert model)"),kXe=l(),am=a("li"),coe=a("strong"),SXe=o("ibert"),RXe=o(" \u2014 "),hk=a("a"),BXe=o("IBertConfig"),PXe=o(" (I-BERT model)"),IXe=l(),nm=a("li"),foe=a("strong"),qXe=o("imagegpt"),NXe=o(" \u2014 "),pk=a("a"),jXe=o("ImageGPTConfig"),DXe=o(" (ImageGPT model)"),GXe=l(),sm=a("li"),moe=a("strong"),OXe=o("layoutlm"),VXe=o(" \u2014 "),uk=a("a"),XXe=o("LayoutLMConfig"),zXe=o(" (LayoutLM model)"),QXe=l(),lm=a("li"),goe=a("strong"),WXe=o("layoutlmv2"),HXe=o(" \u2014 "),_k=a("a"),UXe=o("LayoutLMv2Config"),JXe=o(" (LayoutLMv2 model)"),YXe=l(),im=a("li"),hoe=a("strong"),KXe=o("led"),ZXe=o(" \u2014 "),bk=a("a"),eze=o("LEDConfig"),oze=o(" (LED model)"),rze=l(),dm=a("li"),poe=a("strong"),tze=o("longformer"),aze=o(" \u2014 "),vk=a("a"),nze=o("LongformerConfig"),sze=o(" (Longformer model)"),lze=l(),cm=a("li"),uoe=a("strong"),ize=o("longt5"),dze=o(" \u2014 "),Fk=a("a"),cze=o("LongT5Config"),fze=o(" (LongT5 model)"),mze=l(),fm=a("li"),_oe=a("strong"),gze=o("luke"),hze=o(" \u2014 "),Tk=a("a"),pze=o("LukeConfig"),uze=o(" (LUKE model)"),_ze=l(),mm=a("li"),boe=a("strong"),bze=o("lxmert"),vze=o(" \u2014 "),Mk=a("a"),Fze=o("LxmertConfig"),Tze=o(" (LXMERT model)"),Mze=l(),gm=a("li"),voe=a("strong"),Eze=o("m2m_100"),Cze=o(" \u2014 "),Ek=a("a"),wze=o("M2M100Config"),Aze=o(" (M2M100 model)"),yze=l(),hm=a("li"),Foe=a("strong"),Lze=o("marian"),xze=o(" \u2014 "),Ck=a("a"),$ze=o("MarianConfig"),kze=o(" (Marian model)"),Sze=l(),pm=a("li"),Toe=a("strong"),Rze=o("maskformer"),Bze=o(" \u2014 "),wk=a("a"),Pze=o("MaskFormerConfig"),Ize=o(" (MaskFormer model)"),qze=l(),um=a("li"),Moe=a("strong"),Nze=o("mbart"),jze=o(" \u2014 "),Ak=a("a"),Dze=o("MBartConfig"),Gze=o(" (mBART model)"),Oze=l(),_m=a("li"),Eoe=a("strong"),Vze=o("megatron-bert"),Xze=o(" \u2014 "),yk=a("a"),zze=o("MegatronBertConfig"),Qze=o(" (MegatronBert model)"),Wze=l(),bm=a("li"),Coe=a("strong"),Hze=o("mobilebert"),Uze=o(" \u2014 "),Lk=a("a"),Jze=o("MobileBertConfig"),Yze=o(" (MobileBERT model)"),Kze=l(),vm=a("li"),woe=a("strong"),Zze=o("mpnet"),eQe=o(" \u2014 "),xk=a("a"),oQe=o("MPNetConfig"),rQe=o(" (MPNet model)"),tQe=l(),Fm=a("li"),Aoe=a("strong"),aQe=o("mt5"),nQe=o(" \u2014 "),$k=a("a"),sQe=o("MT5Config"),lQe=o(" (mT5 model)"),iQe=l(),Tm=a("li"),yoe=a("strong"),dQe=o("nystromformer"),cQe=o(" \u2014 "),kk=a("a"),fQe=o("NystromformerConfig"),mQe=o(" (Nystromformer model)"),gQe=l(),Mm=a("li"),Loe=a("strong"),hQe=o("openai-gpt"),pQe=o(" \u2014 "),Sk=a("a"),uQe=o("OpenAIGPTConfig"),_Qe=o(" (OpenAI GPT model)"),bQe=l(),Em=a("li"),xoe=a("strong"),vQe=o("opt"),FQe=o(" \u2014 "),Rk=a("a"),TQe=o("OPTConfig"),MQe=o(" (OPT model)"),EQe=l(),Cm=a("li"),$oe=a("strong"),CQe=o("pegasus"),wQe=o(" \u2014 "),Bk=a("a"),AQe=o("PegasusConfig"),yQe=o(" (Pegasus model)"),LQe=l(),wm=a("li"),koe=a("strong"),xQe=o("perceiver"),$Qe=o(" \u2014 "),Pk=a("a"),kQe=o("PerceiverConfig"),SQe=o(" (Perceiver model)"),RQe=l(),Am=a("li"),Soe=a("strong"),BQe=o("plbart"),PQe=o(" \u2014 "),Ik=a("a"),IQe=o("PLBartConfig"),qQe=o(" (PLBart model)"),NQe=l(),ym=a("li"),Roe=a("strong"),jQe=o("poolformer"),DQe=o(" \u2014 "),qk=a("a"),GQe=o("PoolFormerConfig"),OQe=o(" (PoolFormer model)"),VQe=l(),Lm=a("li"),Boe=a("strong"),XQe=o("prophetnet"),zQe=o(" \u2014 "),Nk=a("a"),QQe=o("ProphetNetConfig"),WQe=o(" (ProphetNet model)"),HQe=l(),xm=a("li"),Poe=a("strong"),UQe=o("qdqbert"),JQe=o(" \u2014 "),jk=a("a"),YQe=o("QDQBertConfig"),KQe=o(" (QDQBert model)"),ZQe=l(),$m=a("li"),Ioe=a("strong"),eWe=o("rag"),oWe=o(" \u2014 "),Dk=a("a"),rWe=o("RagConfig"),tWe=o(" (RAG model)"),aWe=l(),km=a("li"),qoe=a("strong"),nWe=o("realm"),sWe=o(" \u2014 "),Gk=a("a"),lWe=o("RealmConfig"),iWe=o(" (Realm model)"),dWe=l(),Sm=a("li"),Noe=a("strong"),cWe=o("reformer"),fWe=o(" \u2014 "),Ok=a("a"),mWe=o("ReformerConfig"),gWe=o(" (Reformer model)"),hWe=l(),Rm=a("li"),joe=a("strong"),pWe=o("regnet"),uWe=o(" \u2014 "),Vk=a("a"),_We=o("RegNetConfig"),bWe=o(" (RegNet model)"),vWe=l(),Bm=a("li"),Doe=a("strong"),FWe=o("rembert"),TWe=o(" \u2014 "),Xk=a("a"),MWe=o("RemBertConfig"),EWe=o(" (RemBERT model)"),CWe=l(),Pm=a("li"),Goe=a("strong"),wWe=o("resnet"),AWe=o(" \u2014 "),zk=a("a"),yWe=o("ResNetConfig"),LWe=o(" (ResNet model)"),xWe=l(),Im=a("li"),Ooe=a("strong"),$We=o("retribert"),kWe=o(" \u2014 "),Qk=a("a"),SWe=o("RetriBertConfig"),RWe=o(" (RetriBERT model)"),BWe=l(),qm=a("li"),Voe=a("strong"),PWe=o("roberta"),IWe=o(" \u2014 "),Wk=a("a"),qWe=o("RobertaConfig"),NWe=o(" (RoBERTa model)"),jWe=l(),Nm=a("li"),Xoe=a("strong"),DWe=o("roformer"),GWe=o(" \u2014 "),Hk=a("a"),OWe=o("RoFormerConfig"),VWe=o(" (RoFormer model)"),XWe=l(),jm=a("li"),zoe=a("strong"),zWe=o("segformer"),QWe=o(" \u2014 "),Uk=a("a"),WWe=o("SegformerConfig"),HWe=o(" (SegFormer model)"),UWe=l(),Dm=a("li"),Qoe=a("strong"),JWe=o("sew"),YWe=o(" \u2014 "),Jk=a("a"),KWe=o("SEWConfig"),ZWe=o(" (SEW model)"),eHe=l(),Gm=a("li"),Woe=a("strong"),oHe=o("sew-d"),rHe=o(" \u2014 "),Yk=a("a"),tHe=o("SEWDConfig"),aHe=o(" (SEW-D model)"),nHe=l(),Om=a("li"),Hoe=a("strong"),sHe=o("speech-encoder-decoder"),lHe=o(" \u2014 "),Kk=a("a"),iHe=o("SpeechEncoderDecoderConfig"),dHe=o(" (Speech Encoder decoder model)"),cHe=l(),Vm=a("li"),Uoe=a("strong"),fHe=o("speech_to_text"),mHe=o(" \u2014 "),Zk=a("a"),gHe=o("Speech2TextConfig"),hHe=o(" (Speech2Text model)"),pHe=l(),Xm=a("li"),Joe=a("strong"),uHe=o("speech_to_text_2"),_He=o(" \u2014 "),eS=a("a"),bHe=o("Speech2Text2Config"),vHe=o(" (Speech2Text2 model)"),FHe=l(),zm=a("li"),Yoe=a("strong"),THe=o("splinter"),MHe=o(" \u2014 "),oS=a("a"),EHe=o("SplinterConfig"),CHe=o(" (Splinter model)"),wHe=l(),Qm=a("li"),Koe=a("strong"),AHe=o("squeezebert"),yHe=o(" \u2014 "),rS=a("a"),LHe=o("SqueezeBertConfig"),xHe=o(" (SqueezeBERT model)"),$He=l(),Wm=a("li"),Zoe=a("strong"),kHe=o("swin"),SHe=o(" \u2014 "),tS=a("a"),RHe=o("SwinConfig"),BHe=o(" (Swin model)"),PHe=l(),Hm=a("li"),ere=a("strong"),IHe=o("t5"),qHe=o(" \u2014 "),aS=a("a"),NHe=o("T5Config"),jHe=o(" (T5 model)"),DHe=l(),Um=a("li"),ore=a("strong"),GHe=o("tapas"),OHe=o(" \u2014 "),nS=a("a"),VHe=o("TapasConfig"),XHe=o(" (TAPAS model)"),zHe=l(),Jm=a("li"),rre=a("strong"),QHe=o("transfo-xl"),WHe=o(" \u2014 "),sS=a("a"),HHe=o("TransfoXLConfig"),UHe=o(" (Transformer-XL model)"),JHe=l(),Ym=a("li"),tre=a("strong"),YHe=o("trocr"),KHe=o(" \u2014 "),lS=a("a"),ZHe=o("TrOCRConfig"),eUe=o(" (TrOCR model)"),oUe=l(),Km=a("li"),are=a("strong"),rUe=o("unispeech"),tUe=o(" \u2014 "),iS=a("a"),aUe=o("UniSpeechConfig"),nUe=o(" (UniSpeech model)"),sUe=l(),Zm=a("li"),nre=a("strong"),lUe=o("unispeech-sat"),iUe=o(" \u2014 "),dS=a("a"),dUe=o("UniSpeechSatConfig"),cUe=o(" (UniSpeechSat model)"),fUe=l(),eg=a("li"),sre=a("strong"),mUe=o("van"),gUe=o(" \u2014 "),cS=a("a"),hUe=o("VanConfig"),pUe=o(" (VAN model)"),uUe=l(),og=a("li"),lre=a("strong"),_Ue=o("vilt"),bUe=o(" \u2014 "),fS=a("a"),vUe=o("ViltConfig"),FUe=o(" (ViLT model)"),TUe=l(),rg=a("li"),ire=a("strong"),MUe=o("vision-encoder-decoder"),EUe=o(" \u2014 "),mS=a("a"),CUe=o("VisionEncoderDecoderConfig"),wUe=o(" (Vision Encoder decoder model)"),AUe=l(),tg=a("li"),dre=a("strong"),yUe=o("vision-text-dual-encoder"),LUe=o(" \u2014 "),gS=a("a"),xUe=o("VisionTextDualEncoderConfig"),$Ue=o(" (VisionTextDualEncoder model)"),kUe=l(),ag=a("li"),cre=a("strong"),SUe=o("visual_bert"),RUe=o(" \u2014 "),hS=a("a"),BUe=o("VisualBertConfig"),PUe=o(" (VisualBert model)"),IUe=l(),ng=a("li"),fre=a("strong"),qUe=o("vit"),NUe=o(" \u2014 "),pS=a("a"),jUe=o("ViTConfig"),DUe=o(" (ViT model)"),GUe=l(),sg=a("li"),mre=a("strong"),OUe=o("vit_mae"),VUe=o(" \u2014 "),uS=a("a"),XUe=o("ViTMAEConfig"),zUe=o(" (ViTMAE model)"),QUe=l(),lg=a("li"),gre=a("strong"),WUe=o("wav2vec2"),HUe=o(" \u2014 "),_S=a("a"),UUe=o("Wav2Vec2Config"),JUe=o(" (Wav2Vec2 model)"),YUe=l(),ig=a("li"),hre=a("strong"),KUe=o("wavlm"),ZUe=o(" \u2014 "),bS=a("a"),eJe=o("WavLMConfig"),oJe=o(" (WavLM model)"),rJe=l(),dg=a("li"),pre=a("strong"),tJe=o("xglm"),aJe=o(" \u2014 "),vS=a("a"),nJe=o("XGLMConfig"),sJe=o(" (XGLM model)"),lJe=l(),cg=a("li"),ure=a("strong"),iJe=o("xlm"),dJe=o(" \u2014 "),FS=a("a"),cJe=o("XLMConfig"),fJe=o(" (XLM model)"),mJe=l(),fg=a("li"),_re=a("strong"),gJe=o("xlm-prophetnet"),hJe=o(" \u2014 "),TS=a("a"),pJe=o("XLMProphetNetConfig"),uJe=o(" (XLMProphetNet model)"),_Je=l(),mg=a("li"),bre=a("strong"),bJe=o("xlm-roberta"),vJe=o(" \u2014 "),MS=a("a"),FJe=o("XLMRobertaConfig"),TJe=o(" (XLM-RoBERTa model)"),MJe=l(),gg=a("li"),vre=a("strong"),EJe=o("xlm-roberta-xl"),CJe=o(" \u2014 "),ES=a("a"),wJe=o("XLMRobertaXLConfig"),AJe=o(" (XLM-RoBERTa-XL model)"),yJe=l(),hg=a("li"),Fre=a("strong"),LJe=o("xlnet"),xJe=o(" \u2014 "),CS=a("a"),$Je=o("XLNetConfig"),kJe=o(" (XLNet model)"),SJe=l(),pg=a("li"),Tre=a("strong"),RJe=o("yolos"),BJe=o(" \u2014 "),wS=a("a"),PJe=o("YolosConfig"),IJe=o(" (YOLOS model)"),qJe=l(),ug=a("li"),Mre=a("strong"),NJe=o("yoso"),jJe=o(" \u2014 "),AS=a("a"),DJe=o("YosoConfig"),GJe=o(" (YOSO model)"),OJe=l(),F(_g.$$.fragment),VJe=l(),bg=a("div"),F(mA.$$.fragment),XJe=l(),Ere=a("p"),zJe=o("Register a new configuration for this class."),wIe=l(),vi=a("h2"),vg=a("a"),Cre=a("span"),F(gA.$$.fragment),QJe=l(),wre=a("span"),WJe=o("AutoTokenizer"),AIe=l(),wo=a("div"),F(hA.$$.fragment),HJe=l(),pA=a("p"),UJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yS=a("a"),JJe=o("AutoTokenizer.from_pretrained()"),YJe=o(" class method."),KJe=l(),uA=a("p"),ZJe=o("This class cannot be instantiated directly using "),Are=a("code"),eYe=o("__init__()"),oYe=o(" (throws an error)."),rYe=l(),Cr=a("div"),F(_A.$$.fragment),tYe=l(),yre=a("p"),aYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nYe=l(),Ca=a("p"),sYe=o("The tokenizer class to instantiate is selected based on the "),Lre=a("code"),lYe=o("model_type"),iYe=o(` property of the config object (either
passed as an argument or loaded from `),xre=a("code"),dYe=o("pretrained_model_name_or_path"),cYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$re=a("code"),fYe=o("pretrained_model_name_or_path"),mYe=o(":"),gYe=l(),k=a("ul"),Sn=a("li"),kre=a("strong"),hYe=o("albert"),pYe=o(" \u2014 "),LS=a("a"),uYe=o("AlbertTokenizer"),_Ye=o(" or "),xS=a("a"),bYe=o("AlbertTokenizerFast"),vYe=o(" (ALBERT model)"),FYe=l(),Rn=a("li"),Sre=a("strong"),TYe=o("bart"),MYe=o(" \u2014 "),$S=a("a"),EYe=o("BartTokenizer"),CYe=o(" or "),kS=a("a"),wYe=o("BartTokenizerFast"),AYe=o(" (BART model)"),yYe=l(),Bn=a("li"),Rre=a("strong"),LYe=o("barthez"),xYe=o(" \u2014 "),SS=a("a"),$Ye=o("BarthezTokenizer"),kYe=o(" or "),RS=a("a"),SYe=o("BarthezTokenizerFast"),RYe=o(" (BARThez model)"),BYe=l(),Fg=a("li"),Bre=a("strong"),PYe=o("bartpho"),IYe=o(" \u2014 "),BS=a("a"),qYe=o("BartphoTokenizer"),NYe=o(" (BARTpho model)"),jYe=l(),Pn=a("li"),Pre=a("strong"),DYe=o("bert"),GYe=o(" \u2014 "),PS=a("a"),OYe=o("BertTokenizer"),VYe=o(" or "),IS=a("a"),XYe=o("BertTokenizerFast"),zYe=o(" (BERT model)"),QYe=l(),Tg=a("li"),Ire=a("strong"),WYe=o("bert-generation"),HYe=o(" \u2014 "),qS=a("a"),UYe=o("BertGenerationTokenizer"),JYe=o(" (Bert Generation model)"),YYe=l(),Mg=a("li"),qre=a("strong"),KYe=o("bert-japanese"),ZYe=o(" \u2014 "),NS=a("a"),eKe=o("BertJapaneseTokenizer"),oKe=o(" (BertJapanese model)"),rKe=l(),Eg=a("li"),Nre=a("strong"),tKe=o("bertweet"),aKe=o(" \u2014 "),jS=a("a"),nKe=o("BertweetTokenizer"),sKe=o(" (Bertweet model)"),lKe=l(),In=a("li"),jre=a("strong"),iKe=o("big_bird"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("BigBirdTokenizer"),fKe=o(" or "),GS=a("a"),mKe=o("BigBirdTokenizerFast"),gKe=o(" (BigBird model)"),hKe=l(),qn=a("li"),Dre=a("strong"),pKe=o("bigbird_pegasus"),uKe=o(" \u2014 "),OS=a("a"),_Ke=o("PegasusTokenizer"),bKe=o(" or "),VS=a("a"),vKe=o("PegasusTokenizerFast"),FKe=o(" (BigBirdPegasus model)"),TKe=l(),Nn=a("li"),Gre=a("strong"),MKe=o("blenderbot"),EKe=o(" \u2014 "),XS=a("a"),CKe=o("BlenderbotTokenizer"),wKe=o(" or "),zS=a("a"),AKe=o("BlenderbotTokenizerFast"),yKe=o(" (Blenderbot model)"),LKe=l(),Cg=a("li"),Ore=a("strong"),xKe=o("blenderbot-small"),$Ke=o(" \u2014 "),QS=a("a"),kKe=o("BlenderbotSmallTokenizer"),SKe=o(" (BlenderbotSmall model)"),RKe=l(),wg=a("li"),Vre=a("strong"),BKe=o("byt5"),PKe=o(" \u2014 "),WS=a("a"),IKe=o("ByT5Tokenizer"),qKe=o(" (ByT5 model)"),NKe=l(),jn=a("li"),Xre=a("strong"),jKe=o("camembert"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("CamembertTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("CamembertTokenizerFast"),XKe=o(" (CamemBERT model)"),zKe=l(),Ag=a("li"),zre=a("strong"),QKe=o("canine"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("CanineTokenizer"),UKe=o(" (Canine model)"),JKe=l(),Dn=a("li"),Qre=a("strong"),YKe=o("clip"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("CLIPTokenizer"),eZe=o(" or "),KS=a("a"),oZe=o("CLIPTokenizerFast"),rZe=o(" (CLIP model)"),tZe=l(),Gn=a("li"),Wre=a("strong"),aZe=o("convbert"),nZe=o(" \u2014 "),ZS=a("a"),sZe=o("ConvBertTokenizer"),lZe=o(" or "),eR=a("a"),iZe=o("ConvBertTokenizerFast"),dZe=o(" (ConvBERT model)"),cZe=l(),On=a("li"),Hre=a("strong"),fZe=o("cpm"),mZe=o(" \u2014 "),oR=a("a"),gZe=o("CpmTokenizer"),hZe=o(" or "),rR=a("a"),pZe=o("CpmTokenizerFast"),uZe=o(" (CPM model)"),_Ze=l(),yg=a("li"),Ure=a("strong"),bZe=o("ctrl"),vZe=o(" \u2014 "),tR=a("a"),FZe=o("CTRLTokenizer"),TZe=o(" (CTRL model)"),MZe=l(),Vn=a("li"),Jre=a("strong"),EZe=o("data2vec-text"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("RobertaTokenizer"),AZe=o(" or "),nR=a("a"),yZe=o("RobertaTokenizerFast"),LZe=o(" (Data2VecText model)"),xZe=l(),Xn=a("li"),Yre=a("strong"),$Ze=o("deberta"),kZe=o(" \u2014 "),sR=a("a"),SZe=o("DebertaTokenizer"),RZe=o(" or "),lR=a("a"),BZe=o("DebertaTokenizerFast"),PZe=o(" (DeBERTa model)"),IZe=l(),zn=a("li"),Kre=a("strong"),qZe=o("deberta-v2"),NZe=o(" \u2014 "),iR=a("a"),jZe=o("DebertaV2Tokenizer"),DZe=o(" or "),dR=a("a"),GZe=o("DebertaV2TokenizerFast"),OZe=o(" (DeBERTa-v2 model)"),VZe=l(),Qn=a("li"),Zre=a("strong"),XZe=o("distilbert"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("DistilBertTokenizer"),WZe=o(" or "),fR=a("a"),HZe=o("DistilBertTokenizerFast"),UZe=o(" (DistilBERT model)"),JZe=l(),Wn=a("li"),ete=a("strong"),YZe=o("dpr"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("DPRQuestionEncoderTokenizer"),eeo=o(" or "),gR=a("a"),oeo=o("DPRQuestionEncoderTokenizerFast"),reo=o(" (DPR model)"),teo=l(),Hn=a("li"),ote=a("strong"),aeo=o("electra"),neo=o(" \u2014 "),hR=a("a"),seo=o("ElectraTokenizer"),leo=o(" or "),pR=a("a"),ieo=o("ElectraTokenizerFast"),deo=o(" (ELECTRA model)"),ceo=l(),Lg=a("li"),rte=a("strong"),feo=o("flaubert"),meo=o(" \u2014 "),uR=a("a"),geo=o("FlaubertTokenizer"),heo=o(" (FlauBERT model)"),peo=l(),Un=a("li"),tte=a("strong"),ueo=o("fnet"),_eo=o(" \u2014 "),_R=a("a"),beo=o("FNetTokenizer"),veo=o(" or "),bR=a("a"),Feo=o("FNetTokenizerFast"),Teo=o(" (FNet model)"),Meo=l(),xg=a("li"),ate=a("strong"),Eeo=o("fsmt"),Ceo=o(" \u2014 "),vR=a("a"),weo=o("FSMTTokenizer"),Aeo=o(" (FairSeq Machine-Translation model)"),yeo=l(),Jn=a("li"),nte=a("strong"),Leo=o("funnel"),xeo=o(" \u2014 "),FR=a("a"),$eo=o("FunnelTokenizer"),keo=o(" or "),TR=a("a"),Seo=o("FunnelTokenizerFast"),Reo=o(" (Funnel Transformer model)"),Beo=l(),Yn=a("li"),ste=a("strong"),Peo=o("gpt2"),Ieo=o(" \u2014 "),MR=a("a"),qeo=o("GPT2Tokenizer"),Neo=o(" or "),ER=a("a"),jeo=o("GPT2TokenizerFast"),Deo=o(" (OpenAI GPT-2 model)"),Geo=l(),Kn=a("li"),lte=a("strong"),Oeo=o("gpt_neo"),Veo=o(" \u2014 "),CR=a("a"),Xeo=o("GPT2Tokenizer"),zeo=o(" or "),wR=a("a"),Qeo=o("GPT2TokenizerFast"),Weo=o(" (GPT Neo model)"),Heo=l(),Zn=a("li"),ite=a("strong"),Ueo=o("gptj"),Jeo=o(" \u2014 "),AR=a("a"),Yeo=o("GPT2Tokenizer"),Keo=o(" or "),yR=a("a"),Zeo=o("GPT2TokenizerFast"),eoo=o(" (GPT-J model)"),ooo=l(),es=a("li"),dte=a("strong"),roo=o("herbert"),too=o(" \u2014 "),LR=a("a"),aoo=o("HerbertTokenizer"),noo=o(" or "),xR=a("a"),soo=o("HerbertTokenizerFast"),loo=o(" (HerBERT model)"),ioo=l(),$g=a("li"),cte=a("strong"),doo=o("hubert"),coo=o(" \u2014 "),$R=a("a"),foo=o("Wav2Vec2CTCTokenizer"),moo=o(" (Hubert model)"),goo=l(),os=a("li"),fte=a("strong"),hoo=o("ibert"),poo=o(" \u2014 "),kR=a("a"),uoo=o("RobertaTokenizer"),_oo=o(" or "),SR=a("a"),boo=o("RobertaTokenizerFast"),voo=o(" (I-BERT model)"),Foo=l(),rs=a("li"),mte=a("strong"),Too=o("layoutlm"),Moo=o(" \u2014 "),RR=a("a"),Eoo=o("LayoutLMTokenizer"),Coo=o(" or "),BR=a("a"),woo=o("LayoutLMTokenizerFast"),Aoo=o(" (LayoutLM model)"),yoo=l(),ts=a("li"),gte=a("strong"),Loo=o("layoutlmv2"),xoo=o(" \u2014 "),PR=a("a"),$oo=o("LayoutLMv2Tokenizer"),koo=o(" or "),IR=a("a"),Soo=o("LayoutLMv2TokenizerFast"),Roo=o(" (LayoutLMv2 model)"),Boo=l(),as=a("li"),hte=a("strong"),Poo=o("layoutxlm"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("LayoutXLMTokenizer"),Noo=o(" or "),NR=a("a"),joo=o("LayoutXLMTokenizerFast"),Doo=o(" (LayoutXLM model)"),Goo=l(),ns=a("li"),pte=a("strong"),Ooo=o("led"),Voo=o(" \u2014 "),jR=a("a"),Xoo=o("LEDTokenizer"),zoo=o(" or "),DR=a("a"),Qoo=o("LEDTokenizerFast"),Woo=o(" (LED model)"),Hoo=l(),ss=a("li"),ute=a("strong"),Uoo=o("longformer"),Joo=o(" \u2014 "),GR=a("a"),Yoo=o("LongformerTokenizer"),Koo=o(" or "),OR=a("a"),Zoo=o("LongformerTokenizerFast"),ero=o(" (Longformer model)"),oro=l(),ls=a("li"),_te=a("strong"),rro=o("longt5"),tro=o(" \u2014 "),VR=a("a"),aro=o("T5Tokenizer"),nro=o(" or "),XR=a("a"),sro=o("T5TokenizerFast"),lro=o(" (LongT5 model)"),iro=l(),kg=a("li"),bte=a("strong"),dro=o("luke"),cro=o(" \u2014 "),zR=a("a"),fro=o("LukeTokenizer"),mro=o(" (LUKE model)"),gro=l(),is=a("li"),vte=a("strong"),hro=o("lxmert"),pro=o(" \u2014 "),QR=a("a"),uro=o("LxmertTokenizer"),_ro=o(" or "),WR=a("a"),bro=o("LxmertTokenizerFast"),vro=o(" (LXMERT model)"),Fro=l(),Sg=a("li"),Fte=a("strong"),Tro=o("m2m_100"),Mro=o(" \u2014 "),HR=a("a"),Ero=o("M2M100Tokenizer"),Cro=o(" (M2M100 model)"),wro=l(),Rg=a("li"),Tte=a("strong"),Aro=o("marian"),yro=o(" \u2014 "),UR=a("a"),Lro=o("MarianTokenizer"),xro=o(" (Marian model)"),$ro=l(),ds=a("li"),Mte=a("strong"),kro=o("mbart"),Sro=o(" \u2014 "),JR=a("a"),Rro=o("MBartTokenizer"),Bro=o(" or "),YR=a("a"),Pro=o("MBartTokenizerFast"),Iro=o(" (mBART model)"),qro=l(),cs=a("li"),Ete=a("strong"),Nro=o("mbart50"),jro=o(" \u2014 "),KR=a("a"),Dro=o("MBart50Tokenizer"),Gro=o(" or "),ZR=a("a"),Oro=o("MBart50TokenizerFast"),Vro=o(" (mBART-50 model)"),Xro=l(),fs=a("li"),Cte=a("strong"),zro=o("megatron-bert"),Qro=o(" \u2014 "),eB=a("a"),Wro=o("BertTokenizer"),Hro=o(" or "),oB=a("a"),Uro=o("BertTokenizerFast"),Jro=o(" (MegatronBert model)"),Yro=l(),Bg=a("li"),wte=a("strong"),Kro=o("mluke"),Zro=o(" \u2014 "),rB=a("a"),eto=o("MLukeTokenizer"),oto=o(" (mLUKE model)"),rto=l(),ms=a("li"),Ate=a("strong"),tto=o("mobilebert"),ato=o(" \u2014 "),tB=a("a"),nto=o("MobileBertTokenizer"),sto=o(" or "),aB=a("a"),lto=o("MobileBertTokenizerFast"),ito=o(" (MobileBERT model)"),dto=l(),gs=a("li"),yte=a("strong"),cto=o("mpnet"),fto=o(" \u2014 "),nB=a("a"),mto=o("MPNetTokenizer"),gto=o(" or "),sB=a("a"),hto=o("MPNetTokenizerFast"),pto=o(" (MPNet model)"),uto=l(),hs=a("li"),Lte=a("strong"),_to=o("mt5"),bto=o(" \u2014 "),lB=a("a"),vto=o("MT5Tokenizer"),Fto=o(" or "),iB=a("a"),Tto=o("MT5TokenizerFast"),Mto=o(" (mT5 model)"),Eto=l(),ps=a("li"),xte=a("strong"),Cto=o("nystromformer"),wto=o(" \u2014 "),dB=a("a"),Ato=o("AlbertTokenizer"),yto=o(" or "),cB=a("a"),Lto=o("AlbertTokenizerFast"),xto=o(" (Nystromformer model)"),$to=l(),us=a("li"),$te=a("strong"),kto=o("openai-gpt"),Sto=o(" \u2014 "),fB=a("a"),Rto=o("OpenAIGPTTokenizer"),Bto=o(" or "),mB=a("a"),Pto=o("OpenAIGPTTokenizerFast"),Ito=o(" (OpenAI GPT model)"),qto=l(),Pg=a("li"),kte=a("strong"),Nto=o("opt"),jto=o(" \u2014 "),gB=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" (OPT model)"),Oto=l(),_s=a("li"),Ste=a("strong"),Vto=o("pegasus"),Xto=o(" \u2014 "),hB=a("a"),zto=o("PegasusTokenizer"),Qto=o(" or "),pB=a("a"),Wto=o("PegasusTokenizerFast"),Hto=o(" (Pegasus model)"),Uto=l(),Ig=a("li"),Rte=a("strong"),Jto=o("perceiver"),Yto=o(" \u2014 "),uB=a("a"),Kto=o("PerceiverTokenizer"),Zto=o(" (Perceiver model)"),eao=l(),qg=a("li"),Bte=a("strong"),oao=o("phobert"),rao=o(" \u2014 "),_B=a("a"),tao=o("PhobertTokenizer"),aao=o(" (PhoBERT model)"),nao=l(),Ng=a("li"),Pte=a("strong"),sao=o("plbart"),lao=o(" \u2014 "),bB=a("a"),iao=o("PLBartTokenizer"),dao=o(" (PLBart model)"),cao=l(),jg=a("li"),Ite=a("strong"),fao=o("prophetnet"),mao=o(" \u2014 "),vB=a("a"),gao=o("ProphetNetTokenizer"),hao=o(" (ProphetNet model)"),pao=l(),bs=a("li"),qte=a("strong"),uao=o("qdqbert"),_ao=o(" \u2014 "),FB=a("a"),bao=o("BertTokenizer"),vao=o(" or "),TB=a("a"),Fao=o("BertTokenizerFast"),Tao=o(" (QDQBert model)"),Mao=l(),Dg=a("li"),Nte=a("strong"),Eao=o("rag"),Cao=o(" \u2014 "),MB=a("a"),wao=o("RagTokenizer"),Aao=o(" (RAG model)"),yao=l(),vs=a("li"),jte=a("strong"),Lao=o("realm"),xao=o(" \u2014 "),EB=a("a"),$ao=o("RealmTokenizer"),kao=o(" or "),CB=a("a"),Sao=o("RealmTokenizerFast"),Rao=o(" (Realm model)"),Bao=l(),Fs=a("li"),Dte=a("strong"),Pao=o("reformer"),Iao=o(" \u2014 "),wB=a("a"),qao=o("ReformerTokenizer"),Nao=o(" or "),AB=a("a"),jao=o("ReformerTokenizerFast"),Dao=o(" (Reformer model)"),Gao=l(),Ts=a("li"),Gte=a("strong"),Oao=o("rembert"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("RemBertTokenizer"),zao=o(" or "),LB=a("a"),Qao=o("RemBertTokenizerFast"),Wao=o(" (RemBERT model)"),Hao=l(),Ms=a("li"),Ote=a("strong"),Uao=o("retribert"),Jao=o(" \u2014 "),xB=a("a"),Yao=o("RetriBertTokenizer"),Kao=o(" or "),$B=a("a"),Zao=o("RetriBertTokenizerFast"),eno=o(" (RetriBERT model)"),ono=l(),Es=a("li"),Vte=a("strong"),rno=o("roberta"),tno=o(" \u2014 "),kB=a("a"),ano=o("RobertaTokenizer"),nno=o(" or "),SB=a("a"),sno=o("RobertaTokenizerFast"),lno=o(" (RoBERTa model)"),ino=l(),Cs=a("li"),Xte=a("strong"),dno=o("roformer"),cno=o(" \u2014 "),RB=a("a"),fno=o("RoFormerTokenizer"),mno=o(" or "),BB=a("a"),gno=o("RoFormerTokenizerFast"),hno=o(" (RoFormer model)"),pno=l(),Gg=a("li"),zte=a("strong"),uno=o("speech_to_text"),_no=o(" \u2014 "),PB=a("a"),bno=o("Speech2TextTokenizer"),vno=o(" (Speech2Text model)"),Fno=l(),Og=a("li"),Qte=a("strong"),Tno=o("speech_to_text_2"),Mno=o(" \u2014 "),IB=a("a"),Eno=o("Speech2Text2Tokenizer"),Cno=o(" (Speech2Text2 model)"),wno=l(),ws=a("li"),Wte=a("strong"),Ano=o("splinter"),yno=o(" \u2014 "),qB=a("a"),Lno=o("SplinterTokenizer"),xno=o(" or "),NB=a("a"),$no=o("SplinterTokenizerFast"),kno=o(" (Splinter model)"),Sno=l(),As=a("li"),Hte=a("strong"),Rno=o("squeezebert"),Bno=o(" \u2014 "),jB=a("a"),Pno=o("SqueezeBertTokenizer"),Ino=o(" or "),DB=a("a"),qno=o("SqueezeBertTokenizerFast"),Nno=o(" (SqueezeBERT model)"),jno=l(),ys=a("li"),Ute=a("strong"),Dno=o("t5"),Gno=o(" \u2014 "),GB=a("a"),Ono=o("T5Tokenizer"),Vno=o(" or "),OB=a("a"),Xno=o("T5TokenizerFast"),zno=o(" (T5 model)"),Qno=l(),Vg=a("li"),Jte=a("strong"),Wno=o("tapas"),Hno=o(" \u2014 "),VB=a("a"),Uno=o("TapasTokenizer"),Jno=o(" (TAPAS model)"),Yno=l(),Xg=a("li"),Yte=a("strong"),Kno=o("tapex"),Zno=o(" \u2014 "),XB=a("a"),eso=o("TapexTokenizer"),oso=o(" (TAPEX model)"),rso=l(),zg=a("li"),Kte=a("strong"),tso=o("transfo-xl"),aso=o(" \u2014 "),zB=a("a"),nso=o("TransfoXLTokenizer"),sso=o(" (Transformer-XL model)"),lso=l(),Ls=a("li"),Zte=a("strong"),iso=o("visual_bert"),dso=o(" \u2014 "),QB=a("a"),cso=o("BertTokenizer"),fso=o(" or "),WB=a("a"),mso=o("BertTokenizerFast"),gso=o(" (VisualBert model)"),hso=l(),Qg=a("li"),eae=a("strong"),pso=o("wav2vec2"),uso=o(" \u2014 "),HB=a("a"),_so=o("Wav2Vec2CTCTokenizer"),bso=o(" (Wav2Vec2 model)"),vso=l(),Wg=a("li"),oae=a("strong"),Fso=o("wav2vec2_phoneme"),Tso=o(" \u2014 "),UB=a("a"),Mso=o("Wav2Vec2PhonemeCTCTokenizer"),Eso=o(" (Wav2Vec2Phoneme model)"),Cso=l(),xs=a("li"),rae=a("strong"),wso=o("xglm"),Aso=o(" \u2014 "),JB=a("a"),yso=o("XGLMTokenizer"),Lso=o(" or "),YB=a("a"),xso=o("XGLMTokenizerFast"),$so=o(" (XGLM model)"),kso=l(),Hg=a("li"),tae=a("strong"),Sso=o("xlm"),Rso=o(" \u2014 "),KB=a("a"),Bso=o("XLMTokenizer"),Pso=o(" (XLM model)"),Iso=l(),Ug=a("li"),aae=a("strong"),qso=o("xlm-prophetnet"),Nso=o(" \u2014 "),ZB=a("a"),jso=o("XLMProphetNetTokenizer"),Dso=o(" (XLMProphetNet model)"),Gso=l(),$s=a("li"),nae=a("strong"),Oso=o("xlm-roberta"),Vso=o(" \u2014 "),eP=a("a"),Xso=o("XLMRobertaTokenizer"),zso=o(" or "),oP=a("a"),Qso=o("XLMRobertaTokenizerFast"),Wso=o(" (XLM-RoBERTa model)"),Hso=l(),ks=a("li"),sae=a("strong"),Uso=o("xlm-roberta-xl"),Jso=o(" \u2014 "),rP=a("a"),Yso=o("RobertaTokenizer"),Kso=o(" or "),tP=a("a"),Zso=o("RobertaTokenizerFast"),elo=o(" (XLM-RoBERTa-XL model)"),olo=l(),Ss=a("li"),lae=a("strong"),rlo=o("xlnet"),tlo=o(" \u2014 "),aP=a("a"),alo=o("XLNetTokenizer"),nlo=o(" or "),nP=a("a"),slo=o("XLNetTokenizerFast"),llo=o(" (XLNet model)"),ilo=l(),Rs=a("li"),iae=a("strong"),dlo=o("yoso"),clo=o(" \u2014 "),sP=a("a"),flo=o("AlbertTokenizer"),mlo=o(" or "),lP=a("a"),glo=o("AlbertTokenizerFast"),hlo=o(" (YOSO model)"),plo=l(),F(Jg.$$.fragment),ulo=l(),Yg=a("div"),F(bA.$$.fragment),_lo=l(),dae=a("p"),blo=o("Register a new tokenizer in this mapping."),yIe=l(),Fi=a("h2"),Kg=a("a"),cae=a("span"),F(vA.$$.fragment),vlo=l(),fae=a("span"),Flo=o("AutoFeatureExtractor"),LIe=l(),Ao=a("div"),F(FA.$$.fragment),Tlo=l(),TA=a("p"),Mlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iP=a("a"),Elo=o("AutoFeatureExtractor.from_pretrained()"),Clo=o(" class method."),wlo=l(),MA=a("p"),Alo=o("This class cannot be instantiated directly using "),mae=a("code"),ylo=o("__init__()"),Llo=o(" (throws an error)."),xlo=l(),Qe=a("div"),F(EA.$$.fragment),$lo=l(),gae=a("p"),klo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Slo=l(),wa=a("p"),Rlo=o("The feature extractor class to instantiate is selected based on the "),hae=a("code"),Blo=o("model_type"),Plo=o(` property of the config object
(either passed as an argument or loaded from `),pae=a("code"),Ilo=o("pretrained_model_name_or_path"),qlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),uae=a("code"),Nlo=o("pretrained_model_name_or_path"),jlo=o(":"),Dlo=l(),re=a("ul"),Zg=a("li"),_ae=a("strong"),Glo=o("beit"),Olo=o(" \u2014 "),dP=a("a"),Vlo=o("BeitFeatureExtractor"),Xlo=o(" (BEiT model)"),zlo=l(),eh=a("li"),bae=a("strong"),Qlo=o("clip"),Wlo=o(" \u2014 "),cP=a("a"),Hlo=o("CLIPFeatureExtractor"),Ulo=o(" (CLIP model)"),Jlo=l(),oh=a("li"),vae=a("strong"),Ylo=o("convnext"),Klo=o(" \u2014 "),fP=a("a"),Zlo=o("ConvNextFeatureExtractor"),eio=o(" (ConvNext model)"),oio=l(),rh=a("li"),Fae=a("strong"),rio=o("data2vec-audio"),tio=o(" \u2014 "),mP=a("a"),aio=o("Wav2Vec2FeatureExtractor"),nio=o(" (Data2VecAudio model)"),sio=l(),th=a("li"),Tae=a("strong"),lio=o("data2vec-vision"),iio=o(" \u2014 "),gP=a("a"),dio=o("BeitFeatureExtractor"),cio=o(" (Data2VecVision model)"),fio=l(),ah=a("li"),Mae=a("strong"),mio=o("deit"),gio=o(" \u2014 "),hP=a("a"),hio=o("DeiTFeatureExtractor"),pio=o(" (DeiT model)"),uio=l(),nh=a("li"),Eae=a("strong"),_io=o("detr"),bio=o(" \u2014 "),pP=a("a"),vio=o("DetrFeatureExtractor"),Fio=o(" (DETR model)"),Tio=l(),sh=a("li"),Cae=a("strong"),Mio=o("dpt"),Eio=o(" \u2014 "),uP=a("a"),Cio=o("DPTFeatureExtractor"),wio=o(" (DPT model)"),Aio=l(),lh=a("li"),wae=a("strong"),yio=o("flava"),Lio=o(" \u2014 "),_P=a("a"),xio=o("FlavaFeatureExtractor"),$io=o(" (Flava model)"),kio=l(),ih=a("li"),Aae=a("strong"),Sio=o("glpn"),Rio=o(" \u2014 "),bP=a("a"),Bio=o("GLPNFeatureExtractor"),Pio=o(" (GLPN model)"),Iio=l(),dh=a("li"),yae=a("strong"),qio=o("hubert"),Nio=o(" \u2014 "),vP=a("a"),jio=o("Wav2Vec2FeatureExtractor"),Dio=o(" (Hubert model)"),Gio=l(),ch=a("li"),Lae=a("strong"),Oio=o("layoutlmv2"),Vio=o(" \u2014 "),FP=a("a"),Xio=o("LayoutLMv2FeatureExtractor"),zio=o(" (LayoutLMv2 model)"),Qio=l(),fh=a("li"),xae=a("strong"),Wio=o("maskformer"),Hio=o(" \u2014 "),TP=a("a"),Uio=o("MaskFormerFeatureExtractor"),Jio=o(" (MaskFormer model)"),Yio=l(),mh=a("li"),$ae=a("strong"),Kio=o("perceiver"),Zio=o(" \u2014 "),MP=a("a"),edo=o("PerceiverFeatureExtractor"),odo=o(" (Perceiver model)"),rdo=l(),gh=a("li"),kae=a("strong"),tdo=o("poolformer"),ado=o(" \u2014 "),EP=a("a"),ndo=o("PoolFormerFeatureExtractor"),sdo=o(" (PoolFormer model)"),ldo=l(),hh=a("li"),Sae=a("strong"),ido=o("regnet"),ddo=o(" \u2014 "),CP=a("a"),cdo=o("ConvNextFeatureExtractor"),fdo=o(" (RegNet model)"),mdo=l(),ph=a("li"),Rae=a("strong"),gdo=o("resnet"),hdo=o(" \u2014 "),wP=a("a"),pdo=o("ConvNextFeatureExtractor"),udo=o(" (ResNet model)"),_do=l(),uh=a("li"),Bae=a("strong"),bdo=o("segformer"),vdo=o(" \u2014 "),AP=a("a"),Fdo=o("SegformerFeatureExtractor"),Tdo=o(" (SegFormer model)"),Mdo=l(),_h=a("li"),Pae=a("strong"),Edo=o("speech_to_text"),Cdo=o(" \u2014 "),yP=a("a"),wdo=o("Speech2TextFeatureExtractor"),Ado=o(" (Speech2Text model)"),ydo=l(),bh=a("li"),Iae=a("strong"),Ldo=o("swin"),xdo=o(" \u2014 "),LP=a("a"),$do=o("ViTFeatureExtractor"),kdo=o(" (Swin model)"),Sdo=l(),vh=a("li"),qae=a("strong"),Rdo=o("van"),Bdo=o(" \u2014 "),xP=a("a"),Pdo=o("ConvNextFeatureExtractor"),Ido=o(" (VAN model)"),qdo=l(),Fh=a("li"),Nae=a("strong"),Ndo=o("vit"),jdo=o(" \u2014 "),$P=a("a"),Ddo=o("ViTFeatureExtractor"),Gdo=o(" (ViT model)"),Odo=l(),Th=a("li"),jae=a("strong"),Vdo=o("vit_mae"),Xdo=o(" \u2014 "),kP=a("a"),zdo=o("ViTFeatureExtractor"),Qdo=o(" (ViTMAE model)"),Wdo=l(),Mh=a("li"),Dae=a("strong"),Hdo=o("wav2vec2"),Udo=o(" \u2014 "),SP=a("a"),Jdo=o("Wav2Vec2FeatureExtractor"),Ydo=o(" (Wav2Vec2 model)"),Kdo=l(),Eh=a("li"),Gae=a("strong"),Zdo=o("yolos"),eco=o(" \u2014 "),RP=a("a"),oco=o("YolosFeatureExtractor"),rco=o(" (YOLOS model)"),tco=l(),F(Ch.$$.fragment),aco=l(),F(wh.$$.fragment),nco=l(),Ah=a("div"),F(CA.$$.fragment),sco=l(),Oae=a("p"),lco=o("Register a new feature extractor for this class."),xIe=l(),Ti=a("h2"),yh=a("a"),Vae=a("span"),F(wA.$$.fragment),ico=l(),Xae=a("span"),dco=o("AutoProcessor"),$Ie=l(),yo=a("div"),F(AA.$$.fragment),cco=l(),yA=a("p"),fco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BP=a("a"),mco=o("AutoProcessor.from_pretrained()"),gco=o(" class method."),hco=l(),LA=a("p"),pco=o("This class cannot be instantiated directly using "),zae=a("code"),uco=o("__init__()"),_co=o(" (throws an error)."),bco=l(),We=a("div"),F(xA.$$.fragment),vco=l(),Qae=a("p"),Fco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tco=l(),Mi=a("p"),Mco=o("The processor class to instantiate is selected based on the "),Wae=a("code"),Eco=o("model_type"),Cco=o(` property of the config object (either
passed as an argument or loaded from `),Hae=a("code"),wco=o("pretrained_model_name_or_path"),Aco=o(" if possible):"),yco=l(),be=a("ul"),Lh=a("li"),Uae=a("strong"),Lco=o("clip"),xco=o(" \u2014 "),PP=a("a"),$co=o("CLIPProcessor"),kco=o(" (CLIP model)"),Sco=l(),xh=a("li"),Jae=a("strong"),Rco=o("flava"),Bco=o(" \u2014 "),Yae=a("code"),Pco=o("FLAVAProcessor"),Ico=o(" (Flava model)"),qco=l(),$h=a("li"),Kae=a("strong"),Nco=o("layoutlmv2"),jco=o(" \u2014 "),IP=a("a"),Dco=o("LayoutLMv2Processor"),Gco=o(" (LayoutLMv2 model)"),Oco=l(),kh=a("li"),Zae=a("strong"),Vco=o("layoutxlm"),Xco=o(" \u2014 "),qP=a("a"),zco=o("LayoutXLMProcessor"),Qco=o(" (LayoutXLM model)"),Wco=l(),Sh=a("li"),ene=a("strong"),Hco=o("sew"),Uco=o(" \u2014 "),NP=a("a"),Jco=o("Wav2Vec2Processor"),Yco=o(" (SEW model)"),Kco=l(),Rh=a("li"),one=a("strong"),Zco=o("sew-d"),efo=o(" \u2014 "),jP=a("a"),ofo=o("Wav2Vec2Processor"),rfo=o(" (SEW-D model)"),tfo=l(),Bh=a("li"),rne=a("strong"),afo=o("speech_to_text"),nfo=o(" \u2014 "),DP=a("a"),sfo=o("Speech2TextProcessor"),lfo=o(" (Speech2Text model)"),ifo=l(),Ph=a("li"),tne=a("strong"),dfo=o("speech_to_text_2"),cfo=o(" \u2014 "),GP=a("a"),ffo=o("Speech2Text2Processor"),mfo=o(" (Speech2Text2 model)"),gfo=l(),Ih=a("li"),ane=a("strong"),hfo=o("trocr"),pfo=o(" \u2014 "),OP=a("a"),ufo=o("TrOCRProcessor"),_fo=o(" (TrOCR model)"),bfo=l(),qh=a("li"),nne=a("strong"),vfo=o("unispeech"),Ffo=o(" \u2014 "),VP=a("a"),Tfo=o("Wav2Vec2Processor"),Mfo=o(" (UniSpeech model)"),Efo=l(),Nh=a("li"),sne=a("strong"),Cfo=o("unispeech-sat"),wfo=o(" \u2014 "),XP=a("a"),Afo=o("Wav2Vec2Processor"),yfo=o(" (UniSpeechSat model)"),Lfo=l(),jh=a("li"),lne=a("strong"),xfo=o("vilt"),$fo=o(" \u2014 "),zP=a("a"),kfo=o("ViltProcessor"),Sfo=o(" (ViLT model)"),Rfo=l(),Dh=a("li"),ine=a("strong"),Bfo=o("vision-text-dual-encoder"),Pfo=o(" \u2014 "),QP=a("a"),Ifo=o("VisionTextDualEncoderProcessor"),qfo=o(" (VisionTextDualEncoder model)"),Nfo=l(),Gh=a("li"),dne=a("strong"),jfo=o("wav2vec2"),Dfo=o(" \u2014 "),WP=a("a"),Gfo=o("Wav2Vec2Processor"),Ofo=o(" (Wav2Vec2 model)"),Vfo=l(),Oh=a("li"),cne=a("strong"),Xfo=o("wavlm"),zfo=o(" \u2014 "),HP=a("a"),Qfo=o("Wav2Vec2Processor"),Wfo=o(" (WavLM model)"),Hfo=l(),F(Vh.$$.fragment),Ufo=l(),F(Xh.$$.fragment),Jfo=l(),zh=a("div"),F($A.$$.fragment),Yfo=l(),fne=a("p"),Kfo=o("Register a new processor for this class."),kIe=l(),Ei=a("h2"),Qh=a("a"),mne=a("span"),F(kA.$$.fragment),Zfo=l(),gne=a("span"),emo=o("AutoModel"),SIe=l(),Lo=a("div"),F(SA.$$.fragment),omo=l(),Ci=a("p"),rmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UP=a("a"),tmo=o("from_pretrained()"),amo=o(" class method or the "),JP=a("a"),nmo=o("from_config()"),smo=o(` class
method.`),lmo=l(),RA=a("p"),imo=o("This class cannot be instantiated directly using "),hne=a("code"),dmo=o("__init__()"),cmo=o(" (throws an error)."),fmo=l(),ot=a("div"),F(BA.$$.fragment),mmo=l(),pne=a("p"),gmo=o("Instantiates one of the base model classes of the library from a configuration."),hmo=l(),wi=a("p"),pmo=o(`Note:
Loading a model from its configuration file does `),une=a("strong"),umo=o("not"),_mo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=a("a"),bmo=o("from_pretrained()"),vmo=o(" to load the model weights."),Fmo=l(),F(Wh.$$.fragment),Tmo=l(),He=a("div"),F(PA.$$.fragment),Mmo=l(),_ne=a("p"),Emo=o("Instantiate one of the base model classes of the library from a pretrained model."),Cmo=l(),Aa=a("p"),wmo=o("The model class to instantiate is selected based on the "),bne=a("code"),Amo=o("model_type"),ymo=o(` property of the config object (either
passed as an argument or loaded from `),vne=a("code"),Lmo=o("pretrained_model_name_or_path"),xmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=a("code"),$mo=o("pretrained_model_name_or_path"),kmo=o(":"),Smo=l(),x=a("ul"),Hh=a("li"),Tne=a("strong"),Rmo=o("albert"),Bmo=o(" \u2014 "),KP=a("a"),Pmo=o("AlbertModel"),Imo=o(" (ALBERT model)"),qmo=l(),Uh=a("li"),Mne=a("strong"),Nmo=o("bart"),jmo=o(" \u2014 "),ZP=a("a"),Dmo=o("BartModel"),Gmo=o(" (BART model)"),Omo=l(),Jh=a("li"),Ene=a("strong"),Vmo=o("beit"),Xmo=o(" \u2014 "),eI=a("a"),zmo=o("BeitModel"),Qmo=o(" (BEiT model)"),Wmo=l(),Yh=a("li"),Cne=a("strong"),Hmo=o("bert"),Umo=o(" \u2014 "),oI=a("a"),Jmo=o("BertModel"),Ymo=o(" (BERT model)"),Kmo=l(),Kh=a("li"),wne=a("strong"),Zmo=o("bert-generation"),ego=o(" \u2014 "),rI=a("a"),ogo=o("BertGenerationEncoder"),rgo=o(" (Bert Generation model)"),tgo=l(),Zh=a("li"),Ane=a("strong"),ago=o("big_bird"),ngo=o(" \u2014 "),tI=a("a"),sgo=o("BigBirdModel"),lgo=o(" (BigBird model)"),igo=l(),ep=a("li"),yne=a("strong"),dgo=o("bigbird_pegasus"),cgo=o(" \u2014 "),aI=a("a"),fgo=o("BigBirdPegasusModel"),mgo=o(" (BigBirdPegasus model)"),ggo=l(),op=a("li"),Lne=a("strong"),hgo=o("blenderbot"),pgo=o(" \u2014 "),nI=a("a"),ugo=o("BlenderbotModel"),_go=o(" (Blenderbot model)"),bgo=l(),rp=a("li"),xne=a("strong"),vgo=o("blenderbot-small"),Fgo=o(" \u2014 "),sI=a("a"),Tgo=o("BlenderbotSmallModel"),Mgo=o(" (BlenderbotSmall model)"),Ego=l(),tp=a("li"),$ne=a("strong"),Cgo=o("camembert"),wgo=o(" \u2014 "),lI=a("a"),Ago=o("CamembertModel"),ygo=o(" (CamemBERT model)"),Lgo=l(),ap=a("li"),kne=a("strong"),xgo=o("canine"),$go=o(" \u2014 "),iI=a("a"),kgo=o("CanineModel"),Sgo=o(" (Canine model)"),Rgo=l(),np=a("li"),Sne=a("strong"),Bgo=o("clip"),Pgo=o(" \u2014 "),dI=a("a"),Igo=o("CLIPModel"),qgo=o(" (CLIP model)"),Ngo=l(),sp=a("li"),Rne=a("strong"),jgo=o("convbert"),Dgo=o(" \u2014 "),cI=a("a"),Ggo=o("ConvBertModel"),Ogo=o(" (ConvBERT model)"),Vgo=l(),lp=a("li"),Bne=a("strong"),Xgo=o("convnext"),zgo=o(" \u2014 "),fI=a("a"),Qgo=o("ConvNextModel"),Wgo=o(" (ConvNext model)"),Hgo=l(),ip=a("li"),Pne=a("strong"),Ugo=o("ctrl"),Jgo=o(" \u2014 "),mI=a("a"),Ygo=o("CTRLModel"),Kgo=o(" (CTRL model)"),Zgo=l(),dp=a("li"),Ine=a("strong"),eho=o("data2vec-audio"),oho=o(" \u2014 "),gI=a("a"),rho=o("Data2VecAudioModel"),tho=o(" (Data2VecAudio model)"),aho=l(),cp=a("li"),qne=a("strong"),nho=o("data2vec-text"),sho=o(" \u2014 "),hI=a("a"),lho=o("Data2VecTextModel"),iho=o(" (Data2VecText model)"),dho=l(),fp=a("li"),Nne=a("strong"),cho=o("data2vec-vision"),fho=o(" \u2014 "),pI=a("a"),mho=o("Data2VecVisionModel"),gho=o(" (Data2VecVision model)"),hho=l(),mp=a("li"),jne=a("strong"),pho=o("deberta"),uho=o(" \u2014 "),uI=a("a"),_ho=o("DebertaModel"),bho=o(" (DeBERTa model)"),vho=l(),gp=a("li"),Dne=a("strong"),Fho=o("deberta-v2"),Tho=o(" \u2014 "),_I=a("a"),Mho=o("DebertaV2Model"),Eho=o(" (DeBERTa-v2 model)"),Cho=l(),hp=a("li"),Gne=a("strong"),who=o("decision_transformer"),Aho=o(" \u2014 "),bI=a("a"),yho=o("DecisionTransformerModel"),Lho=o(" (Decision Transformer model)"),xho=l(),pp=a("li"),One=a("strong"),$ho=o("deit"),kho=o(" \u2014 "),vI=a("a"),Sho=o("DeiTModel"),Rho=o(" (DeiT model)"),Bho=l(),up=a("li"),Vne=a("strong"),Pho=o("detr"),Iho=o(" \u2014 "),FI=a("a"),qho=o("DetrModel"),Nho=o(" (DETR model)"),jho=l(),_p=a("li"),Xne=a("strong"),Dho=o("distilbert"),Gho=o(" \u2014 "),TI=a("a"),Oho=o("DistilBertModel"),Vho=o(" (DistilBERT model)"),Xho=l(),bp=a("li"),zne=a("strong"),zho=o("dpr"),Qho=o(" \u2014 "),MI=a("a"),Who=o("DPRQuestionEncoder"),Hho=o(" (DPR model)"),Uho=l(),vp=a("li"),Qne=a("strong"),Jho=o("dpt"),Yho=o(" \u2014 "),EI=a("a"),Kho=o("DPTModel"),Zho=o(" (DPT model)"),epo=l(),Fp=a("li"),Wne=a("strong"),opo=o("electra"),rpo=o(" \u2014 "),CI=a("a"),tpo=o("ElectraModel"),apo=o(" (ELECTRA model)"),npo=l(),Tp=a("li"),Hne=a("strong"),spo=o("flaubert"),lpo=o(" \u2014 "),wI=a("a"),ipo=o("FlaubertModel"),dpo=o(" (FlauBERT model)"),cpo=l(),Mp=a("li"),Une=a("strong"),fpo=o("flava"),mpo=o(" \u2014 "),AI=a("a"),gpo=o("FlavaModel"),hpo=o(" (Flava model)"),ppo=l(),Ep=a("li"),Jne=a("strong"),upo=o("fnet"),_po=o(" \u2014 "),yI=a("a"),bpo=o("FNetModel"),vpo=o(" (FNet model)"),Fpo=l(),Cp=a("li"),Yne=a("strong"),Tpo=o("fsmt"),Mpo=o(" \u2014 "),LI=a("a"),Epo=o("FSMTModel"),Cpo=o(" (FairSeq Machine-Translation model)"),wpo=l(),Bs=a("li"),Kne=a("strong"),Apo=o("funnel"),ypo=o(" \u2014 "),xI=a("a"),Lpo=o("FunnelModel"),xpo=o(" or "),$I=a("a"),$po=o("FunnelBaseModel"),kpo=o(" (Funnel Transformer model)"),Spo=l(),wp=a("li"),Zne=a("strong"),Rpo=o("glpn"),Bpo=o(" \u2014 "),kI=a("a"),Ppo=o("GLPNModel"),Ipo=o(" (GLPN model)"),qpo=l(),Ap=a("li"),ese=a("strong"),Npo=o("gpt2"),jpo=o(" \u2014 "),SI=a("a"),Dpo=o("GPT2Model"),Gpo=o(" (OpenAI GPT-2 model)"),Opo=l(),yp=a("li"),ose=a("strong"),Vpo=o("gpt_neo"),Xpo=o(" \u2014 "),RI=a("a"),zpo=o("GPTNeoModel"),Qpo=o(" (GPT Neo model)"),Wpo=l(),Lp=a("li"),rse=a("strong"),Hpo=o("gptj"),Upo=o(" \u2014 "),BI=a("a"),Jpo=o("GPTJModel"),Ypo=o(" (GPT-J model)"),Kpo=l(),xp=a("li"),tse=a("strong"),Zpo=o("hubert"),euo=o(" \u2014 "),PI=a("a"),ouo=o("HubertModel"),ruo=o(" (Hubert model)"),tuo=l(),$p=a("li"),ase=a("strong"),auo=o("ibert"),nuo=o(" \u2014 "),II=a("a"),suo=o("IBertModel"),luo=o(" (I-BERT model)"),iuo=l(),kp=a("li"),nse=a("strong"),duo=o("imagegpt"),cuo=o(" \u2014 "),qI=a("a"),fuo=o("ImageGPTModel"),muo=o(" (ImageGPT model)"),guo=l(),Sp=a("li"),sse=a("strong"),huo=o("layoutlm"),puo=o(" \u2014 "),NI=a("a"),uuo=o("LayoutLMModel"),_uo=o(" (LayoutLM model)"),buo=l(),Rp=a("li"),lse=a("strong"),vuo=o("layoutlmv2"),Fuo=o(" \u2014 "),jI=a("a"),Tuo=o("LayoutLMv2Model"),Muo=o(" (LayoutLMv2 model)"),Euo=l(),Bp=a("li"),ise=a("strong"),Cuo=o("led"),wuo=o(" \u2014 "),DI=a("a"),Auo=o("LEDModel"),yuo=o(" (LED model)"),Luo=l(),Pp=a("li"),dse=a("strong"),xuo=o("longformer"),$uo=o(" \u2014 "),GI=a("a"),kuo=o("LongformerModel"),Suo=o(" (Longformer model)"),Ruo=l(),Ip=a("li"),cse=a("strong"),Buo=o("longt5"),Puo=o(" \u2014 "),OI=a("a"),Iuo=o("LongT5Model"),quo=o(" (LongT5 model)"),Nuo=l(),qp=a("li"),fse=a("strong"),juo=o("luke"),Duo=o(" \u2014 "),VI=a("a"),Guo=o("LukeModel"),Ouo=o(" (LUKE model)"),Vuo=l(),Np=a("li"),mse=a("strong"),Xuo=o("lxmert"),zuo=o(" \u2014 "),XI=a("a"),Quo=o("LxmertModel"),Wuo=o(" (LXMERT model)"),Huo=l(),jp=a("li"),gse=a("strong"),Uuo=o("m2m_100"),Juo=o(" \u2014 "),zI=a("a"),Yuo=o("M2M100Model"),Kuo=o(" (M2M100 model)"),Zuo=l(),Dp=a("li"),hse=a("strong"),e_o=o("marian"),o_o=o(" \u2014 "),QI=a("a"),r_o=o("MarianModel"),t_o=o(" (Marian model)"),a_o=l(),Gp=a("li"),pse=a("strong"),n_o=o("maskformer"),s_o=o(" \u2014 "),WI=a("a"),l_o=o("MaskFormerModel"),i_o=o(" (MaskFormer model)"),d_o=l(),Op=a("li"),use=a("strong"),c_o=o("mbart"),f_o=o(" \u2014 "),HI=a("a"),m_o=o("MBartModel"),g_o=o(" (mBART model)"),h_o=l(),Vp=a("li"),_se=a("strong"),p_o=o("megatron-bert"),u_o=o(" \u2014 "),UI=a("a"),__o=o("MegatronBertModel"),b_o=o(" (MegatronBert model)"),v_o=l(),Xp=a("li"),bse=a("strong"),F_o=o("mobilebert"),T_o=o(" \u2014 "),JI=a("a"),M_o=o("MobileBertModel"),E_o=o(" (MobileBERT model)"),C_o=l(),zp=a("li"),vse=a("strong"),w_o=o("mpnet"),A_o=o(" \u2014 "),YI=a("a"),y_o=o("MPNetModel"),L_o=o(" (MPNet model)"),x_o=l(),Qp=a("li"),Fse=a("strong"),$_o=o("mt5"),k_o=o(" \u2014 "),KI=a("a"),S_o=o("MT5Model"),R_o=o(" (mT5 model)"),B_o=l(),Wp=a("li"),Tse=a("strong"),P_o=o("nystromformer"),I_o=o(" \u2014 "),ZI=a("a"),q_o=o("NystromformerModel"),N_o=o(" (Nystromformer model)"),j_o=l(),Hp=a("li"),Mse=a("strong"),D_o=o("openai-gpt"),G_o=o(" \u2014 "),eq=a("a"),O_o=o("OpenAIGPTModel"),V_o=o(" (OpenAI GPT model)"),X_o=l(),Up=a("li"),Ese=a("strong"),z_o=o("opt"),Q_o=o(" \u2014 "),oq=a("a"),W_o=o("OPTModel"),H_o=o(" (OPT model)"),U_o=l(),Jp=a("li"),Cse=a("strong"),J_o=o("pegasus"),Y_o=o(" \u2014 "),rq=a("a"),K_o=o("PegasusModel"),Z_o=o(" (Pegasus model)"),e2o=l(),Yp=a("li"),wse=a("strong"),o2o=o("perceiver"),r2o=o(" \u2014 "),tq=a("a"),t2o=o("PerceiverModel"),a2o=o(" (Perceiver model)"),n2o=l(),Kp=a("li"),Ase=a("strong"),s2o=o("plbart"),l2o=o(" \u2014 "),aq=a("a"),i2o=o("PLBartModel"),d2o=o(" (PLBart model)"),c2o=l(),Zp=a("li"),yse=a("strong"),f2o=o("poolformer"),m2o=o(" \u2014 "),nq=a("a"),g2o=o("PoolFormerModel"),h2o=o(" (PoolFormer model)"),p2o=l(),eu=a("li"),Lse=a("strong"),u2o=o("prophetnet"),_2o=o(" \u2014 "),sq=a("a"),b2o=o("ProphetNetModel"),v2o=o(" (ProphetNet model)"),F2o=l(),ou=a("li"),xse=a("strong"),T2o=o("qdqbert"),M2o=o(" \u2014 "),lq=a("a"),E2o=o("QDQBertModel"),C2o=o(" (QDQBert model)"),w2o=l(),ru=a("li"),$se=a("strong"),A2o=o("reformer"),y2o=o(" \u2014 "),iq=a("a"),L2o=o("ReformerModel"),x2o=o(" (Reformer model)"),$2o=l(),tu=a("li"),kse=a("strong"),k2o=o("regnet"),S2o=o(" \u2014 "),dq=a("a"),R2o=o("RegNetModel"),B2o=o(" (RegNet model)"),P2o=l(),au=a("li"),Sse=a("strong"),I2o=o("rembert"),q2o=o(" \u2014 "),cq=a("a"),N2o=o("RemBertModel"),j2o=o(" (RemBERT model)"),D2o=l(),nu=a("li"),Rse=a("strong"),G2o=o("resnet"),O2o=o(" \u2014 "),fq=a("a"),V2o=o("ResNetModel"),X2o=o(" (ResNet model)"),z2o=l(),su=a("li"),Bse=a("strong"),Q2o=o("retribert"),W2o=o(" \u2014 "),mq=a("a"),H2o=o("RetriBertModel"),U2o=o(" (RetriBERT model)"),J2o=l(),lu=a("li"),Pse=a("strong"),Y2o=o("roberta"),K2o=o(" \u2014 "),gq=a("a"),Z2o=o("RobertaModel"),e1o=o(" (RoBERTa model)"),o1o=l(),iu=a("li"),Ise=a("strong"),r1o=o("roformer"),t1o=o(" \u2014 "),hq=a("a"),a1o=o("RoFormerModel"),n1o=o(" (RoFormer model)"),s1o=l(),du=a("li"),qse=a("strong"),l1o=o("segformer"),i1o=o(" \u2014 "),pq=a("a"),d1o=o("SegformerModel"),c1o=o(" (SegFormer model)"),f1o=l(),cu=a("li"),Nse=a("strong"),m1o=o("sew"),g1o=o(" \u2014 "),uq=a("a"),h1o=o("SEWModel"),p1o=o(" (SEW model)"),u1o=l(),fu=a("li"),jse=a("strong"),_1o=o("sew-d"),b1o=o(" \u2014 "),_q=a("a"),v1o=o("SEWDModel"),F1o=o(" (SEW-D model)"),T1o=l(),mu=a("li"),Dse=a("strong"),M1o=o("speech_to_text"),E1o=o(" \u2014 "),bq=a("a"),C1o=o("Speech2TextModel"),w1o=o(" (Speech2Text model)"),A1o=l(),gu=a("li"),Gse=a("strong"),y1o=o("splinter"),L1o=o(" \u2014 "),vq=a("a"),x1o=o("SplinterModel"),$1o=o(" (Splinter model)"),k1o=l(),hu=a("li"),Ose=a("strong"),S1o=o("squeezebert"),R1o=o(" \u2014 "),Fq=a("a"),B1o=o("SqueezeBertModel"),P1o=o(" (SqueezeBERT model)"),I1o=l(),pu=a("li"),Vse=a("strong"),q1o=o("swin"),N1o=o(" \u2014 "),Tq=a("a"),j1o=o("SwinModel"),D1o=o(" (Swin model)"),G1o=l(),uu=a("li"),Xse=a("strong"),O1o=o("t5"),V1o=o(" \u2014 "),Mq=a("a"),X1o=o("T5Model"),z1o=o(" (T5 model)"),Q1o=l(),_u=a("li"),zse=a("strong"),W1o=o("tapas"),H1o=o(" \u2014 "),Eq=a("a"),U1o=o("TapasModel"),J1o=o(" (TAPAS model)"),Y1o=l(),bu=a("li"),Qse=a("strong"),K1o=o("transfo-xl"),Z1o=o(" \u2014 "),Cq=a("a"),ebo=o("TransfoXLModel"),obo=o(" (Transformer-XL model)"),rbo=l(),vu=a("li"),Wse=a("strong"),tbo=o("unispeech"),abo=o(" \u2014 "),wq=a("a"),nbo=o("UniSpeechModel"),sbo=o(" (UniSpeech model)"),lbo=l(),Fu=a("li"),Hse=a("strong"),ibo=o("unispeech-sat"),dbo=o(" \u2014 "),Aq=a("a"),cbo=o("UniSpeechSatModel"),fbo=o(" (UniSpeechSat model)"),mbo=l(),Tu=a("li"),Use=a("strong"),gbo=o("van"),hbo=o(" \u2014 "),yq=a("a"),pbo=o("VanModel"),ubo=o(" (VAN model)"),_bo=l(),Mu=a("li"),Jse=a("strong"),bbo=o("vilt"),vbo=o(" \u2014 "),Lq=a("a"),Fbo=o("ViltModel"),Tbo=o(" (ViLT model)"),Mbo=l(),Eu=a("li"),Yse=a("strong"),Ebo=o("vision-text-dual-encoder"),Cbo=o(" \u2014 "),xq=a("a"),wbo=o("VisionTextDualEncoderModel"),Abo=o(" (VisionTextDualEncoder model)"),ybo=l(),Cu=a("li"),Kse=a("strong"),Lbo=o("visual_bert"),xbo=o(" \u2014 "),$q=a("a"),$bo=o("VisualBertModel"),kbo=o(" (VisualBert model)"),Sbo=l(),wu=a("li"),Zse=a("strong"),Rbo=o("vit"),Bbo=o(" \u2014 "),kq=a("a"),Pbo=o("ViTModel"),Ibo=o(" (ViT model)"),qbo=l(),Au=a("li"),ele=a("strong"),Nbo=o("vit_mae"),jbo=o(" \u2014 "),Sq=a("a"),Dbo=o("ViTMAEModel"),Gbo=o(" (ViTMAE model)"),Obo=l(),yu=a("li"),ole=a("strong"),Vbo=o("wav2vec2"),Xbo=o(" \u2014 "),Rq=a("a"),zbo=o("Wav2Vec2Model"),Qbo=o(" (Wav2Vec2 model)"),Wbo=l(),Lu=a("li"),rle=a("strong"),Hbo=o("wavlm"),Ubo=o(" \u2014 "),Bq=a("a"),Jbo=o("WavLMModel"),Ybo=o(" (WavLM model)"),Kbo=l(),xu=a("li"),tle=a("strong"),Zbo=o("xglm"),evo=o(" \u2014 "),Pq=a("a"),ovo=o("XGLMModel"),rvo=o(" (XGLM model)"),tvo=l(),$u=a("li"),ale=a("strong"),avo=o("xlm"),nvo=o(" \u2014 "),Iq=a("a"),svo=o("XLMModel"),lvo=o(" (XLM model)"),ivo=l(),ku=a("li"),nle=a("strong"),dvo=o("xlm-prophetnet"),cvo=o(" \u2014 "),qq=a("a"),fvo=o("XLMProphetNetModel"),mvo=o(" (XLMProphetNet model)"),gvo=l(),Su=a("li"),sle=a("strong"),hvo=o("xlm-roberta"),pvo=o(" \u2014 "),Nq=a("a"),uvo=o("XLMRobertaModel"),_vo=o(" (XLM-RoBERTa model)"),bvo=l(),Ru=a("li"),lle=a("strong"),vvo=o("xlm-roberta-xl"),Fvo=o(" \u2014 "),jq=a("a"),Tvo=o("XLMRobertaXLModel"),Mvo=o(" (XLM-RoBERTa-XL model)"),Evo=l(),Bu=a("li"),ile=a("strong"),Cvo=o("xlnet"),wvo=o(" \u2014 "),Dq=a("a"),Avo=o("XLNetModel"),yvo=o(" (XLNet model)"),Lvo=l(),Pu=a("li"),dle=a("strong"),xvo=o("yolos"),$vo=o(" \u2014 "),Gq=a("a"),kvo=o("YolosModel"),Svo=o(" (YOLOS model)"),Rvo=l(),Iu=a("li"),cle=a("strong"),Bvo=o("yoso"),Pvo=o(" \u2014 "),Oq=a("a"),Ivo=o("YosoModel"),qvo=o(" (YOSO model)"),Nvo=l(),qu=a("p"),jvo=o("The model is set in evaluation mode by default using "),fle=a("code"),Dvo=o("model.eval()"),Gvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),Ovo=o("model.train()"),Vvo=l(),F(Nu.$$.fragment),RIe=l(),Ai=a("h2"),ju=a("a"),gle=a("span"),F(IA.$$.fragment),Xvo=l(),hle=a("span"),zvo=o("AutoModelForPreTraining"),BIe=l(),xo=a("div"),F(qA.$$.fragment),Qvo=l(),yi=a("p"),Wvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vq=a("a"),Hvo=o("from_pretrained()"),Uvo=o(" class method or the "),Xq=a("a"),Jvo=o("from_config()"),Yvo=o(` class
method.`),Kvo=l(),NA=a("p"),Zvo=o("This class cannot be instantiated directly using "),ple=a("code"),eFo=o("__init__()"),oFo=o(" (throws an error)."),rFo=l(),rt=a("div"),F(jA.$$.fragment),tFo=l(),ule=a("p"),aFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nFo=l(),Li=a("p"),sFo=o(`Note:
Loading a model from its configuration file does `),_le=a("strong"),lFo=o("not"),iFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zq=a("a"),dFo=o("from_pretrained()"),cFo=o(" to load the model weights."),fFo=l(),F(Du.$$.fragment),mFo=l(),Ue=a("div"),F(DA.$$.fragment),gFo=l(),ble=a("p"),hFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pFo=l(),ya=a("p"),uFo=o("The model class to instantiate is selected based on the "),vle=a("code"),_Fo=o("model_type"),bFo=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),vFo=o("pretrained_model_name_or_path"),FFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),TFo=o("pretrained_model_name_or_path"),MFo=o(":"),EFo=l(),G=a("ul"),Gu=a("li"),Mle=a("strong"),CFo=o("albert"),wFo=o(" \u2014 "),Qq=a("a"),AFo=o("AlbertForPreTraining"),yFo=o(" (ALBERT model)"),LFo=l(),Ou=a("li"),Ele=a("strong"),xFo=o("bart"),$Fo=o(" \u2014 "),Wq=a("a"),kFo=o("BartForConditionalGeneration"),SFo=o(" (BART model)"),RFo=l(),Vu=a("li"),Cle=a("strong"),BFo=o("bert"),PFo=o(" \u2014 "),Hq=a("a"),IFo=o("BertForPreTraining"),qFo=o(" (BERT model)"),NFo=l(),Xu=a("li"),wle=a("strong"),jFo=o("big_bird"),DFo=o(" \u2014 "),Uq=a("a"),GFo=o("BigBirdForPreTraining"),OFo=o(" (BigBird model)"),VFo=l(),zu=a("li"),Ale=a("strong"),XFo=o("camembert"),zFo=o(" \u2014 "),Jq=a("a"),QFo=o("CamembertForMaskedLM"),WFo=o(" (CamemBERT model)"),HFo=l(),Qu=a("li"),yle=a("strong"),UFo=o("ctrl"),JFo=o(" \u2014 "),Yq=a("a"),YFo=o("CTRLLMHeadModel"),KFo=o(" (CTRL model)"),ZFo=l(),Wu=a("li"),Lle=a("strong"),e6o=o("data2vec-text"),o6o=o(" \u2014 "),Kq=a("a"),r6o=o("Data2VecTextForMaskedLM"),t6o=o(" (Data2VecText model)"),a6o=l(),Hu=a("li"),xle=a("strong"),n6o=o("deberta"),s6o=o(" \u2014 "),Zq=a("a"),l6o=o("DebertaForMaskedLM"),i6o=o(" (DeBERTa model)"),d6o=l(),Uu=a("li"),$le=a("strong"),c6o=o("deberta-v2"),f6o=o(" \u2014 "),eN=a("a"),m6o=o("DebertaV2ForMaskedLM"),g6o=o(" (DeBERTa-v2 model)"),h6o=l(),Ju=a("li"),kle=a("strong"),p6o=o("distilbert"),u6o=o(" \u2014 "),oN=a("a"),_6o=o("DistilBertForMaskedLM"),b6o=o(" (DistilBERT model)"),v6o=l(),Yu=a("li"),Sle=a("strong"),F6o=o("electra"),T6o=o(" \u2014 "),rN=a("a"),M6o=o("ElectraForPreTraining"),E6o=o(" (ELECTRA model)"),C6o=l(),Ku=a("li"),Rle=a("strong"),w6o=o("flaubert"),A6o=o(" \u2014 "),tN=a("a"),y6o=o("FlaubertWithLMHeadModel"),L6o=o(" (FlauBERT model)"),x6o=l(),Zu=a("li"),Ble=a("strong"),$6o=o("flava"),k6o=o(" \u2014 "),aN=a("a"),S6o=o("FlavaForPreTraining"),R6o=o(" (Flava model)"),B6o=l(),e_=a("li"),Ple=a("strong"),P6o=o("fnet"),I6o=o(" \u2014 "),nN=a("a"),q6o=o("FNetForPreTraining"),N6o=o(" (FNet model)"),j6o=l(),o_=a("li"),Ile=a("strong"),D6o=o("fsmt"),G6o=o(" \u2014 "),sN=a("a"),O6o=o("FSMTForConditionalGeneration"),V6o=o(" (FairSeq Machine-Translation model)"),X6o=l(),r_=a("li"),qle=a("strong"),z6o=o("funnel"),Q6o=o(" \u2014 "),lN=a("a"),W6o=o("FunnelForPreTraining"),H6o=o(" (Funnel Transformer model)"),U6o=l(),t_=a("li"),Nle=a("strong"),J6o=o("gpt2"),Y6o=o(" \u2014 "),iN=a("a"),K6o=o("GPT2LMHeadModel"),Z6o=o(" (OpenAI GPT-2 model)"),eTo=l(),a_=a("li"),jle=a("strong"),oTo=o("ibert"),rTo=o(" \u2014 "),dN=a("a"),tTo=o("IBertForMaskedLM"),aTo=o(" (I-BERT model)"),nTo=l(),n_=a("li"),Dle=a("strong"),sTo=o("layoutlm"),lTo=o(" \u2014 "),cN=a("a"),iTo=o("LayoutLMForMaskedLM"),dTo=o(" (LayoutLM model)"),cTo=l(),s_=a("li"),Gle=a("strong"),fTo=o("longformer"),mTo=o(" \u2014 "),fN=a("a"),gTo=o("LongformerForMaskedLM"),hTo=o(" (Longformer model)"),pTo=l(),l_=a("li"),Ole=a("strong"),uTo=o("longt5"),_To=o(" \u2014 "),mN=a("a"),bTo=o("LongT5ForConditionalGeneration"),vTo=o(" (LongT5 model)"),FTo=l(),i_=a("li"),Vle=a("strong"),TTo=o("lxmert"),MTo=o(" \u2014 "),gN=a("a"),ETo=o("LxmertForPreTraining"),CTo=o(" (LXMERT model)"),wTo=l(),d_=a("li"),Xle=a("strong"),ATo=o("megatron-bert"),yTo=o(" \u2014 "),hN=a("a"),LTo=o("MegatronBertForPreTraining"),xTo=o(" (MegatronBert model)"),$To=l(),c_=a("li"),zle=a("strong"),kTo=o("mobilebert"),STo=o(" \u2014 "),pN=a("a"),RTo=o("MobileBertForPreTraining"),BTo=o(" (MobileBERT model)"),PTo=l(),f_=a("li"),Qle=a("strong"),ITo=o("mpnet"),qTo=o(" \u2014 "),uN=a("a"),NTo=o("MPNetForMaskedLM"),jTo=o(" (MPNet model)"),DTo=l(),m_=a("li"),Wle=a("strong"),GTo=o("openai-gpt"),OTo=o(" \u2014 "),_N=a("a"),VTo=o("OpenAIGPTLMHeadModel"),XTo=o(" (OpenAI GPT model)"),zTo=l(),g_=a("li"),Hle=a("strong"),QTo=o("retribert"),WTo=o(" \u2014 "),bN=a("a"),HTo=o("RetriBertModel"),UTo=o(" (RetriBERT model)"),JTo=l(),h_=a("li"),Ule=a("strong"),YTo=o("roberta"),KTo=o(" \u2014 "),vN=a("a"),ZTo=o("RobertaForMaskedLM"),e9o=o(" (RoBERTa model)"),o9o=l(),p_=a("li"),Jle=a("strong"),r9o=o("squeezebert"),t9o=o(" \u2014 "),FN=a("a"),a9o=o("SqueezeBertForMaskedLM"),n9o=o(" (SqueezeBERT model)"),s9o=l(),u_=a("li"),Yle=a("strong"),l9o=o("t5"),i9o=o(" \u2014 "),TN=a("a"),d9o=o("T5ForConditionalGeneration"),c9o=o(" (T5 model)"),f9o=l(),__=a("li"),Kle=a("strong"),m9o=o("tapas"),g9o=o(" \u2014 "),MN=a("a"),h9o=o("TapasForMaskedLM"),p9o=o(" (TAPAS model)"),u9o=l(),b_=a("li"),Zle=a("strong"),_9o=o("transfo-xl"),b9o=o(" \u2014 "),EN=a("a"),v9o=o("TransfoXLLMHeadModel"),F9o=o(" (Transformer-XL model)"),T9o=l(),v_=a("li"),eie=a("strong"),M9o=o("unispeech"),E9o=o(" \u2014 "),CN=a("a"),C9o=o("UniSpeechForPreTraining"),w9o=o(" (UniSpeech model)"),A9o=l(),F_=a("li"),oie=a("strong"),y9o=o("unispeech-sat"),L9o=o(" \u2014 "),wN=a("a"),x9o=o("UniSpeechSatForPreTraining"),$9o=o(" (UniSpeechSat model)"),k9o=l(),T_=a("li"),rie=a("strong"),S9o=o("visual_bert"),R9o=o(" \u2014 "),AN=a("a"),B9o=o("VisualBertForPreTraining"),P9o=o(" (VisualBert model)"),I9o=l(),M_=a("li"),tie=a("strong"),q9o=o("vit_mae"),N9o=o(" \u2014 "),yN=a("a"),j9o=o("ViTMAEForPreTraining"),D9o=o(" (ViTMAE model)"),G9o=l(),E_=a("li"),aie=a("strong"),O9o=o("wav2vec2"),V9o=o(" \u2014 "),LN=a("a"),X9o=o("Wav2Vec2ForPreTraining"),z9o=o(" (Wav2Vec2 model)"),Q9o=l(),C_=a("li"),nie=a("strong"),W9o=o("xlm"),H9o=o(" \u2014 "),xN=a("a"),U9o=o("XLMWithLMHeadModel"),J9o=o(" (XLM model)"),Y9o=l(),w_=a("li"),sie=a("strong"),K9o=o("xlm-roberta"),Z9o=o(" \u2014 "),$N=a("a"),e7o=o("XLMRobertaForMaskedLM"),o7o=o(" (XLM-RoBERTa model)"),r7o=l(),A_=a("li"),lie=a("strong"),t7o=o("xlm-roberta-xl"),a7o=o(" \u2014 "),kN=a("a"),n7o=o("XLMRobertaXLForMaskedLM"),s7o=o(" (XLM-RoBERTa-XL model)"),l7o=l(),y_=a("li"),iie=a("strong"),i7o=o("xlnet"),d7o=o(" \u2014 "),SN=a("a"),c7o=o("XLNetLMHeadModel"),f7o=o(" (XLNet model)"),m7o=l(),L_=a("p"),g7o=o("The model is set in evaluation mode by default using "),die=a("code"),h7o=o("model.eval()"),p7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),u7o=o("model.train()"),_7o=l(),F(x_.$$.fragment),PIe=l(),xi=a("h2"),$_=a("a"),fie=a("span"),F(GA.$$.fragment),b7o=l(),mie=a("span"),v7o=o("AutoModelForCausalLM"),IIe=l(),$o=a("div"),F(OA.$$.fragment),F7o=l(),$i=a("p"),T7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RN=a("a"),M7o=o("from_pretrained()"),E7o=o(" class method or the "),BN=a("a"),C7o=o("from_config()"),w7o=o(` class
method.`),A7o=l(),VA=a("p"),y7o=o("This class cannot be instantiated directly using "),gie=a("code"),L7o=o("__init__()"),x7o=o(" (throws an error)."),$7o=l(),tt=a("div"),F(XA.$$.fragment),k7o=l(),hie=a("p"),S7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R7o=l(),ki=a("p"),B7o=o(`Note:
Loading a model from its configuration file does `),pie=a("strong"),P7o=o("not"),I7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=a("a"),q7o=o("from_pretrained()"),N7o=o(" to load the model weights."),j7o=l(),F(k_.$$.fragment),D7o=l(),Je=a("div"),F(zA.$$.fragment),G7o=l(),uie=a("p"),O7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V7o=l(),La=a("p"),X7o=o("The model class to instantiate is selected based on the "),_ie=a("code"),z7o=o("model_type"),Q7o=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),W7o=o("pretrained_model_name_or_path"),H7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),U7o=o("pretrained_model_name_or_path"),J7o=o(":"),Y7o=l(),z=a("ul"),S_=a("li"),Fie=a("strong"),K7o=o("bart"),Z7o=o(" \u2014 "),IN=a("a"),eMo=o("BartForCausalLM"),oMo=o(" (BART model)"),rMo=l(),R_=a("li"),Tie=a("strong"),tMo=o("bert"),aMo=o(" \u2014 "),qN=a("a"),nMo=o("BertLMHeadModel"),sMo=o(" (BERT model)"),lMo=l(),B_=a("li"),Mie=a("strong"),iMo=o("bert-generation"),dMo=o(" \u2014 "),NN=a("a"),cMo=o("BertGenerationDecoder"),fMo=o(" (Bert Generation model)"),mMo=l(),P_=a("li"),Eie=a("strong"),gMo=o("big_bird"),hMo=o(" \u2014 "),jN=a("a"),pMo=o("BigBirdForCausalLM"),uMo=o(" (BigBird model)"),_Mo=l(),I_=a("li"),Cie=a("strong"),bMo=o("bigbird_pegasus"),vMo=o(" \u2014 "),DN=a("a"),FMo=o("BigBirdPegasusForCausalLM"),TMo=o(" (BigBirdPegasus model)"),MMo=l(),q_=a("li"),wie=a("strong"),EMo=o("blenderbot"),CMo=o(" \u2014 "),GN=a("a"),wMo=o("BlenderbotForCausalLM"),AMo=o(" (Blenderbot model)"),yMo=l(),N_=a("li"),Aie=a("strong"),LMo=o("blenderbot-small"),xMo=o(" \u2014 "),ON=a("a"),$Mo=o("BlenderbotSmallForCausalLM"),kMo=o(" (BlenderbotSmall model)"),SMo=l(),j_=a("li"),yie=a("strong"),RMo=o("camembert"),BMo=o(" \u2014 "),VN=a("a"),PMo=o("CamembertForCausalLM"),IMo=o(" (CamemBERT model)"),qMo=l(),D_=a("li"),Lie=a("strong"),NMo=o("ctrl"),jMo=o(" \u2014 "),XN=a("a"),DMo=o("CTRLLMHeadModel"),GMo=o(" (CTRL model)"),OMo=l(),G_=a("li"),xie=a("strong"),VMo=o("data2vec-text"),XMo=o(" \u2014 "),zN=a("a"),zMo=o("Data2VecTextForCausalLM"),QMo=o(" (Data2VecText model)"),WMo=l(),O_=a("li"),$ie=a("strong"),HMo=o("electra"),UMo=o(" \u2014 "),QN=a("a"),JMo=o("ElectraForCausalLM"),YMo=o(" (ELECTRA model)"),KMo=l(),V_=a("li"),kie=a("strong"),ZMo=o("gpt2"),e4o=o(" \u2014 "),WN=a("a"),o4o=o("GPT2LMHeadModel"),r4o=o(" (OpenAI GPT-2 model)"),t4o=l(),X_=a("li"),Sie=a("strong"),a4o=o("gpt_neo"),n4o=o(" \u2014 "),HN=a("a"),s4o=o("GPTNeoForCausalLM"),l4o=o(" (GPT Neo model)"),i4o=l(),z_=a("li"),Rie=a("strong"),d4o=o("gptj"),c4o=o(" \u2014 "),UN=a("a"),f4o=o("GPTJForCausalLM"),m4o=o(" (GPT-J model)"),g4o=l(),Q_=a("li"),Bie=a("strong"),h4o=o("marian"),p4o=o(" \u2014 "),JN=a("a"),u4o=o("MarianForCausalLM"),_4o=o(" (Marian model)"),b4o=l(),W_=a("li"),Pie=a("strong"),v4o=o("mbart"),F4o=o(" \u2014 "),YN=a("a"),T4o=o("MBartForCausalLM"),M4o=o(" (mBART model)"),E4o=l(),H_=a("li"),Iie=a("strong"),C4o=o("megatron-bert"),w4o=o(" \u2014 "),KN=a("a"),A4o=o("MegatronBertForCausalLM"),y4o=o(" (MegatronBert model)"),L4o=l(),U_=a("li"),qie=a("strong"),x4o=o("openai-gpt"),$4o=o(" \u2014 "),ZN=a("a"),k4o=o("OpenAIGPTLMHeadModel"),S4o=o(" (OpenAI GPT model)"),R4o=l(),J_=a("li"),Nie=a("strong"),B4o=o("opt"),P4o=o(" \u2014 "),ej=a("a"),I4o=o("OPTForCausalLM"),q4o=o(" (OPT model)"),N4o=l(),Y_=a("li"),jie=a("strong"),j4o=o("pegasus"),D4o=o(" \u2014 "),oj=a("a"),G4o=o("PegasusForCausalLM"),O4o=o(" (Pegasus model)"),V4o=l(),K_=a("li"),Die=a("strong"),X4o=o("plbart"),z4o=o(" \u2014 "),rj=a("a"),Q4o=o("PLBartForCausalLM"),W4o=o(" (PLBart model)"),H4o=l(),Z_=a("li"),Gie=a("strong"),U4o=o("prophetnet"),J4o=o(" \u2014 "),tj=a("a"),Y4o=o("ProphetNetForCausalLM"),K4o=o(" (ProphetNet model)"),Z4o=l(),e2=a("li"),Oie=a("strong"),eEo=o("qdqbert"),oEo=o(" \u2014 "),aj=a("a"),rEo=o("QDQBertLMHeadModel"),tEo=o(" (QDQBert model)"),aEo=l(),o2=a("li"),Vie=a("strong"),nEo=o("reformer"),sEo=o(" \u2014 "),nj=a("a"),lEo=o("ReformerModelWithLMHead"),iEo=o(" (Reformer model)"),dEo=l(),r2=a("li"),Xie=a("strong"),cEo=o("rembert"),fEo=o(" \u2014 "),sj=a("a"),mEo=o("RemBertForCausalLM"),gEo=o(" (RemBERT model)"),hEo=l(),t2=a("li"),zie=a("strong"),pEo=o("roberta"),uEo=o(" \u2014 "),lj=a("a"),_Eo=o("RobertaForCausalLM"),bEo=o(" (RoBERTa model)"),vEo=l(),a2=a("li"),Qie=a("strong"),FEo=o("roformer"),TEo=o(" \u2014 "),ij=a("a"),MEo=o("RoFormerForCausalLM"),EEo=o(" (RoFormer model)"),CEo=l(),n2=a("li"),Wie=a("strong"),wEo=o("speech_to_text_2"),AEo=o(" \u2014 "),dj=a("a"),yEo=o("Speech2Text2ForCausalLM"),LEo=o(" (Speech2Text2 model)"),xEo=l(),s2=a("li"),Hie=a("strong"),$Eo=o("transfo-xl"),kEo=o(" \u2014 "),cj=a("a"),SEo=o("TransfoXLLMHeadModel"),REo=o(" (Transformer-XL model)"),BEo=l(),l2=a("li"),Uie=a("strong"),PEo=o("trocr"),IEo=o(" \u2014 "),fj=a("a"),qEo=o("TrOCRForCausalLM"),NEo=o(" (TrOCR model)"),jEo=l(),i2=a("li"),Jie=a("strong"),DEo=o("xglm"),GEo=o(" \u2014 "),mj=a("a"),OEo=o("XGLMForCausalLM"),VEo=o(" (XGLM model)"),XEo=l(),d2=a("li"),Yie=a("strong"),zEo=o("xlm"),QEo=o(" \u2014 "),gj=a("a"),WEo=o("XLMWithLMHeadModel"),HEo=o(" (XLM model)"),UEo=l(),c2=a("li"),Kie=a("strong"),JEo=o("xlm-prophetnet"),YEo=o(" \u2014 "),hj=a("a"),KEo=o("XLMProphetNetForCausalLM"),ZEo=o(" (XLMProphetNet model)"),e5o=l(),f2=a("li"),Zie=a("strong"),o5o=o("xlm-roberta"),r5o=o(" \u2014 "),pj=a("a"),t5o=o("XLMRobertaForCausalLM"),a5o=o(" (XLM-RoBERTa model)"),n5o=l(),m2=a("li"),ede=a("strong"),s5o=o("xlm-roberta-xl"),l5o=o(" \u2014 "),uj=a("a"),i5o=o("XLMRobertaXLForCausalLM"),d5o=o(" (XLM-RoBERTa-XL model)"),c5o=l(),g2=a("li"),ode=a("strong"),f5o=o("xlnet"),m5o=o(" \u2014 "),_j=a("a"),g5o=o("XLNetLMHeadModel"),h5o=o(" (XLNet model)"),p5o=l(),h2=a("p"),u5o=o("The model is set in evaluation mode by default using "),rde=a("code"),_5o=o("model.eval()"),b5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),v5o=o("model.train()"),F5o=l(),F(p2.$$.fragment),qIe=l(),Si=a("h2"),u2=a("a"),ade=a("span"),F(QA.$$.fragment),T5o=l(),nde=a("span"),M5o=o("AutoModelForMaskedLM"),NIe=l(),ko=a("div"),F(WA.$$.fragment),E5o=l(),Ri=a("p"),C5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bj=a("a"),w5o=o("from_pretrained()"),A5o=o(" class method or the "),vj=a("a"),y5o=o("from_config()"),L5o=o(` class
method.`),x5o=l(),HA=a("p"),$5o=o("This class cannot be instantiated directly using "),sde=a("code"),k5o=o("__init__()"),S5o=o(" (throws an error)."),R5o=l(),at=a("div"),F(UA.$$.fragment),B5o=l(),lde=a("p"),P5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I5o=l(),Bi=a("p"),q5o=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),N5o=o("not"),j5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),D5o=o("from_pretrained()"),G5o=o(" to load the model weights."),O5o=l(),F(_2.$$.fragment),V5o=l(),Ye=a("div"),F(JA.$$.fragment),X5o=l(),dde=a("p"),z5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q5o=l(),xa=a("p"),W5o=o("The model class to instantiate is selected based on the "),cde=a("code"),H5o=o("model_type"),U5o=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),J5o=o("pretrained_model_name_or_path"),Y5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),K5o=o("pretrained_model_name_or_path"),Z5o=o(":"),eCo=l(),Q=a("ul"),b2=a("li"),gde=a("strong"),oCo=o("albert"),rCo=o(" \u2014 "),Tj=a("a"),tCo=o("AlbertForMaskedLM"),aCo=o(" (ALBERT model)"),nCo=l(),v2=a("li"),hde=a("strong"),sCo=o("bart"),lCo=o(" \u2014 "),Mj=a("a"),iCo=o("BartForConditionalGeneration"),dCo=o(" (BART model)"),cCo=l(),F2=a("li"),pde=a("strong"),fCo=o("bert"),mCo=o(" \u2014 "),Ej=a("a"),gCo=o("BertForMaskedLM"),hCo=o(" (BERT model)"),pCo=l(),T2=a("li"),ude=a("strong"),uCo=o("big_bird"),_Co=o(" \u2014 "),Cj=a("a"),bCo=o("BigBirdForMaskedLM"),vCo=o(" (BigBird model)"),FCo=l(),M2=a("li"),_de=a("strong"),TCo=o("camembert"),MCo=o(" \u2014 "),wj=a("a"),ECo=o("CamembertForMaskedLM"),CCo=o(" (CamemBERT model)"),wCo=l(),E2=a("li"),bde=a("strong"),ACo=o("convbert"),yCo=o(" \u2014 "),Aj=a("a"),LCo=o("ConvBertForMaskedLM"),xCo=o(" (ConvBERT model)"),$Co=l(),C2=a("li"),vde=a("strong"),kCo=o("data2vec-text"),SCo=o(" \u2014 "),yj=a("a"),RCo=o("Data2VecTextForMaskedLM"),BCo=o(" (Data2VecText model)"),PCo=l(),w2=a("li"),Fde=a("strong"),ICo=o("deberta"),qCo=o(" \u2014 "),Lj=a("a"),NCo=o("DebertaForMaskedLM"),jCo=o(" (DeBERTa model)"),DCo=l(),A2=a("li"),Tde=a("strong"),GCo=o("deberta-v2"),OCo=o(" \u2014 "),xj=a("a"),VCo=o("DebertaV2ForMaskedLM"),XCo=o(" (DeBERTa-v2 model)"),zCo=l(),y2=a("li"),Mde=a("strong"),QCo=o("distilbert"),WCo=o(" \u2014 "),$j=a("a"),HCo=o("DistilBertForMaskedLM"),UCo=o(" (DistilBERT model)"),JCo=l(),L2=a("li"),Ede=a("strong"),YCo=o("electra"),KCo=o(" \u2014 "),kj=a("a"),ZCo=o("ElectraForMaskedLM"),e3o=o(" (ELECTRA model)"),o3o=l(),x2=a("li"),Cde=a("strong"),r3o=o("flaubert"),t3o=o(" \u2014 "),Sj=a("a"),a3o=o("FlaubertWithLMHeadModel"),n3o=o(" (FlauBERT model)"),s3o=l(),$2=a("li"),wde=a("strong"),l3o=o("fnet"),i3o=o(" \u2014 "),Rj=a("a"),d3o=o("FNetForMaskedLM"),c3o=o(" (FNet model)"),f3o=l(),k2=a("li"),Ade=a("strong"),m3o=o("funnel"),g3o=o(" \u2014 "),Bj=a("a"),h3o=o("FunnelForMaskedLM"),p3o=o(" (Funnel Transformer model)"),u3o=l(),S2=a("li"),yde=a("strong"),_3o=o("ibert"),b3o=o(" \u2014 "),Pj=a("a"),v3o=o("IBertForMaskedLM"),F3o=o(" (I-BERT model)"),T3o=l(),R2=a("li"),Lde=a("strong"),M3o=o("layoutlm"),E3o=o(" \u2014 "),Ij=a("a"),C3o=o("LayoutLMForMaskedLM"),w3o=o(" (LayoutLM model)"),A3o=l(),B2=a("li"),xde=a("strong"),y3o=o("longformer"),L3o=o(" \u2014 "),qj=a("a"),x3o=o("LongformerForMaskedLM"),$3o=o(" (Longformer model)"),k3o=l(),P2=a("li"),$de=a("strong"),S3o=o("mbart"),R3o=o(" \u2014 "),Nj=a("a"),B3o=o("MBartForConditionalGeneration"),P3o=o(" (mBART model)"),I3o=l(),I2=a("li"),kde=a("strong"),q3o=o("megatron-bert"),N3o=o(" \u2014 "),jj=a("a"),j3o=o("MegatronBertForMaskedLM"),D3o=o(" (MegatronBert model)"),G3o=l(),q2=a("li"),Sde=a("strong"),O3o=o("mobilebert"),V3o=o(" \u2014 "),Dj=a("a"),X3o=o("MobileBertForMaskedLM"),z3o=o(" (MobileBERT model)"),Q3o=l(),N2=a("li"),Rde=a("strong"),W3o=o("mpnet"),H3o=o(" \u2014 "),Gj=a("a"),U3o=o("MPNetForMaskedLM"),J3o=o(" (MPNet model)"),Y3o=l(),j2=a("li"),Bde=a("strong"),K3o=o("nystromformer"),Z3o=o(" \u2014 "),Oj=a("a"),ewo=o("NystromformerForMaskedLM"),owo=o(" (Nystromformer model)"),rwo=l(),D2=a("li"),Pde=a("strong"),two=o("perceiver"),awo=o(" \u2014 "),Vj=a("a"),nwo=o("PerceiverForMaskedLM"),swo=o(" (Perceiver model)"),lwo=l(),G2=a("li"),Ide=a("strong"),iwo=o("qdqbert"),dwo=o(" \u2014 "),Xj=a("a"),cwo=o("QDQBertForMaskedLM"),fwo=o(" (QDQBert model)"),mwo=l(),O2=a("li"),qde=a("strong"),gwo=o("reformer"),hwo=o(" \u2014 "),zj=a("a"),pwo=o("ReformerForMaskedLM"),uwo=o(" (Reformer model)"),_wo=l(),V2=a("li"),Nde=a("strong"),bwo=o("rembert"),vwo=o(" \u2014 "),Qj=a("a"),Fwo=o("RemBertForMaskedLM"),Two=o(" (RemBERT model)"),Mwo=l(),X2=a("li"),jde=a("strong"),Ewo=o("roberta"),Cwo=o(" \u2014 "),Wj=a("a"),wwo=o("RobertaForMaskedLM"),Awo=o(" (RoBERTa model)"),ywo=l(),z2=a("li"),Dde=a("strong"),Lwo=o("roformer"),xwo=o(" \u2014 "),Hj=a("a"),$wo=o("RoFormerForMaskedLM"),kwo=o(" (RoFormer model)"),Swo=l(),Q2=a("li"),Gde=a("strong"),Rwo=o("squeezebert"),Bwo=o(" \u2014 "),Uj=a("a"),Pwo=o("SqueezeBertForMaskedLM"),Iwo=o(" (SqueezeBERT model)"),qwo=l(),W2=a("li"),Ode=a("strong"),Nwo=o("tapas"),jwo=o(" \u2014 "),Jj=a("a"),Dwo=o("TapasForMaskedLM"),Gwo=o(" (TAPAS model)"),Owo=l(),H2=a("li"),Vde=a("strong"),Vwo=o("wav2vec2"),Xwo=o(" \u2014 "),Xde=a("code"),zwo=o("Wav2Vec2ForMaskedLM"),Qwo=o(" (Wav2Vec2 model)"),Wwo=l(),U2=a("li"),zde=a("strong"),Hwo=o("xlm"),Uwo=o(" \u2014 "),Yj=a("a"),Jwo=o("XLMWithLMHeadModel"),Ywo=o(" (XLM model)"),Kwo=l(),J2=a("li"),Qde=a("strong"),Zwo=o("xlm-roberta"),eAo=o(" \u2014 "),Kj=a("a"),oAo=o("XLMRobertaForMaskedLM"),rAo=o(" (XLM-RoBERTa model)"),tAo=l(),Y2=a("li"),Wde=a("strong"),aAo=o("xlm-roberta-xl"),nAo=o(" \u2014 "),Zj=a("a"),sAo=o("XLMRobertaXLForMaskedLM"),lAo=o(" (XLM-RoBERTa-XL model)"),iAo=l(),K2=a("li"),Hde=a("strong"),dAo=o("yoso"),cAo=o(" \u2014 "),eD=a("a"),fAo=o("YosoForMaskedLM"),mAo=o(" (YOSO model)"),gAo=l(),Z2=a("p"),hAo=o("The model is set in evaluation mode by default using "),Ude=a("code"),pAo=o("model.eval()"),uAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),_Ao=o("model.train()"),bAo=l(),F(e1.$$.fragment),jIe=l(),Pi=a("h2"),o1=a("a"),Yde=a("span"),F(YA.$$.fragment),vAo=l(),Kde=a("span"),FAo=o("AutoModelForSeq2SeqLM"),DIe=l(),So=a("div"),F(KA.$$.fragment),TAo=l(),Ii=a("p"),MAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oD=a("a"),EAo=o("from_pretrained()"),CAo=o(" class method or the "),rD=a("a"),wAo=o("from_config()"),AAo=o(` class
method.`),yAo=l(),ZA=a("p"),LAo=o("This class cannot be instantiated directly using "),Zde=a("code"),xAo=o("__init__()"),$Ao=o(" (throws an error)."),kAo=l(),nt=a("div"),F(e0.$$.fragment),SAo=l(),ece=a("p"),RAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BAo=l(),qi=a("p"),PAo=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),IAo=o("not"),qAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=a("a"),NAo=o("from_pretrained()"),jAo=o(" to load the model weights."),DAo=l(),F(r1.$$.fragment),GAo=l(),Ke=a("div"),F(o0.$$.fragment),OAo=l(),rce=a("p"),VAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XAo=l(),$a=a("p"),zAo=o("The model class to instantiate is selected based on the "),tce=a("code"),QAo=o("model_type"),WAo=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),HAo=o("pretrained_model_name_or_path"),UAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),JAo=o("pretrained_model_name_or_path"),YAo=o(":"),KAo=l(),he=a("ul"),t1=a("li"),sce=a("strong"),ZAo=o("bart"),e0o=o(" \u2014 "),aD=a("a"),o0o=o("BartForConditionalGeneration"),r0o=o(" (BART model)"),t0o=l(),a1=a("li"),lce=a("strong"),a0o=o("bigbird_pegasus"),n0o=o(" \u2014 "),nD=a("a"),s0o=o("BigBirdPegasusForConditionalGeneration"),l0o=o(" (BigBirdPegasus model)"),i0o=l(),n1=a("li"),ice=a("strong"),d0o=o("blenderbot"),c0o=o(" \u2014 "),sD=a("a"),f0o=o("BlenderbotForConditionalGeneration"),m0o=o(" (Blenderbot model)"),g0o=l(),s1=a("li"),dce=a("strong"),h0o=o("blenderbot-small"),p0o=o(" \u2014 "),lD=a("a"),u0o=o("BlenderbotSmallForConditionalGeneration"),_0o=o(" (BlenderbotSmall model)"),b0o=l(),l1=a("li"),cce=a("strong"),v0o=o("encoder-decoder"),F0o=o(" \u2014 "),iD=a("a"),T0o=o("EncoderDecoderModel"),M0o=o(" (Encoder decoder model)"),E0o=l(),i1=a("li"),fce=a("strong"),C0o=o("fsmt"),w0o=o(" \u2014 "),dD=a("a"),A0o=o("FSMTForConditionalGeneration"),y0o=o(" (FairSeq Machine-Translation model)"),L0o=l(),d1=a("li"),mce=a("strong"),x0o=o("led"),$0o=o(" \u2014 "),cD=a("a"),k0o=o("LEDForConditionalGeneration"),S0o=o(" (LED model)"),R0o=l(),c1=a("li"),gce=a("strong"),B0o=o("longt5"),P0o=o(" \u2014 "),fD=a("a"),I0o=o("LongT5ForConditionalGeneration"),q0o=o(" (LongT5 model)"),N0o=l(),f1=a("li"),hce=a("strong"),j0o=o("m2m_100"),D0o=o(" \u2014 "),mD=a("a"),G0o=o("M2M100ForConditionalGeneration"),O0o=o(" (M2M100 model)"),V0o=l(),m1=a("li"),pce=a("strong"),X0o=o("marian"),z0o=o(" \u2014 "),gD=a("a"),Q0o=o("MarianMTModel"),W0o=o(" (Marian model)"),H0o=l(),g1=a("li"),uce=a("strong"),U0o=o("mbart"),J0o=o(" \u2014 "),hD=a("a"),Y0o=o("MBartForConditionalGeneration"),K0o=o(" (mBART model)"),Z0o=l(),h1=a("li"),_ce=a("strong"),eyo=o("mt5"),oyo=o(" \u2014 "),pD=a("a"),ryo=o("MT5ForConditionalGeneration"),tyo=o(" (mT5 model)"),ayo=l(),p1=a("li"),bce=a("strong"),nyo=o("pegasus"),syo=o(" \u2014 "),uD=a("a"),lyo=o("PegasusForConditionalGeneration"),iyo=o(" (Pegasus model)"),dyo=l(),u1=a("li"),vce=a("strong"),cyo=o("plbart"),fyo=o(" \u2014 "),_D=a("a"),myo=o("PLBartForConditionalGeneration"),gyo=o(" (PLBart model)"),hyo=l(),_1=a("li"),Fce=a("strong"),pyo=o("prophetnet"),uyo=o(" \u2014 "),bD=a("a"),_yo=o("ProphetNetForConditionalGeneration"),byo=o(" (ProphetNet model)"),vyo=l(),b1=a("li"),Tce=a("strong"),Fyo=o("t5"),Tyo=o(" \u2014 "),vD=a("a"),Myo=o("T5ForConditionalGeneration"),Eyo=o(" (T5 model)"),Cyo=l(),v1=a("li"),Mce=a("strong"),wyo=o("xlm-prophetnet"),Ayo=o(" \u2014 "),FD=a("a"),yyo=o("XLMProphetNetForConditionalGeneration"),Lyo=o(" (XLMProphetNet model)"),xyo=l(),F1=a("p"),$yo=o("The model is set in evaluation mode by default using "),Ece=a("code"),kyo=o("model.eval()"),Syo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),Ryo=o("model.train()"),Byo=l(),F(T1.$$.fragment),GIe=l(),Ni=a("h2"),M1=a("a"),wce=a("span"),F(r0.$$.fragment),Pyo=l(),Ace=a("span"),Iyo=o("AutoModelForSequenceClassification"),OIe=l(),Ro=a("div"),F(t0.$$.fragment),qyo=l(),ji=a("p"),Nyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TD=a("a"),jyo=o("from_pretrained()"),Dyo=o(" class method or the "),MD=a("a"),Gyo=o("from_config()"),Oyo=o(` class
method.`),Vyo=l(),a0=a("p"),Xyo=o("This class cannot be instantiated directly using "),yce=a("code"),zyo=o("__init__()"),Qyo=o(" (throws an error)."),Wyo=l(),st=a("div"),F(n0.$$.fragment),Hyo=l(),Lce=a("p"),Uyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jyo=l(),Di=a("p"),Yyo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),Kyo=o("not"),Zyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),eLo=o("from_pretrained()"),oLo=o(" to load the model weights."),rLo=l(),F(E1.$$.fragment),tLo=l(),Ze=a("div"),F(s0.$$.fragment),aLo=l(),$ce=a("p"),nLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sLo=l(),ka=a("p"),lLo=o("The model class to instantiate is selected based on the "),kce=a("code"),iLo=o("model_type"),dLo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),cLo=o("pretrained_model_name_or_path"),fLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),mLo=o("pretrained_model_name_or_path"),gLo=o(":"),hLo=l(),q=a("ul"),C1=a("li"),Bce=a("strong"),pLo=o("albert"),uLo=o(" \u2014 "),CD=a("a"),_Lo=o("AlbertForSequenceClassification"),bLo=o(" (ALBERT model)"),vLo=l(),w1=a("li"),Pce=a("strong"),FLo=o("bart"),TLo=o(" \u2014 "),wD=a("a"),MLo=o("BartForSequenceClassification"),ELo=o(" (BART model)"),CLo=l(),A1=a("li"),Ice=a("strong"),wLo=o("bert"),ALo=o(" \u2014 "),AD=a("a"),yLo=o("BertForSequenceClassification"),LLo=o(" (BERT model)"),xLo=l(),y1=a("li"),qce=a("strong"),$Lo=o("big_bird"),kLo=o(" \u2014 "),yD=a("a"),SLo=o("BigBirdForSequenceClassification"),RLo=o(" (BigBird model)"),BLo=l(),L1=a("li"),Nce=a("strong"),PLo=o("bigbird_pegasus"),ILo=o(" \u2014 "),LD=a("a"),qLo=o("BigBirdPegasusForSequenceClassification"),NLo=o(" (BigBirdPegasus model)"),jLo=l(),x1=a("li"),jce=a("strong"),DLo=o("camembert"),GLo=o(" \u2014 "),xD=a("a"),OLo=o("CamembertForSequenceClassification"),VLo=o(" (CamemBERT model)"),XLo=l(),$1=a("li"),Dce=a("strong"),zLo=o("canine"),QLo=o(" \u2014 "),$D=a("a"),WLo=o("CanineForSequenceClassification"),HLo=o(" (Canine model)"),ULo=l(),k1=a("li"),Gce=a("strong"),JLo=o("convbert"),YLo=o(" \u2014 "),kD=a("a"),KLo=o("ConvBertForSequenceClassification"),ZLo=o(" (ConvBERT model)"),e8o=l(),S1=a("li"),Oce=a("strong"),o8o=o("ctrl"),r8o=o(" \u2014 "),SD=a("a"),t8o=o("CTRLForSequenceClassification"),a8o=o(" (CTRL model)"),n8o=l(),R1=a("li"),Vce=a("strong"),s8o=o("data2vec-text"),l8o=o(" \u2014 "),RD=a("a"),i8o=o("Data2VecTextForSequenceClassification"),d8o=o(" (Data2VecText model)"),c8o=l(),B1=a("li"),Xce=a("strong"),f8o=o("deberta"),m8o=o(" \u2014 "),BD=a("a"),g8o=o("DebertaForSequenceClassification"),h8o=o(" (DeBERTa model)"),p8o=l(),P1=a("li"),zce=a("strong"),u8o=o("deberta-v2"),_8o=o(" \u2014 "),PD=a("a"),b8o=o("DebertaV2ForSequenceClassification"),v8o=o(" (DeBERTa-v2 model)"),F8o=l(),I1=a("li"),Qce=a("strong"),T8o=o("distilbert"),M8o=o(" \u2014 "),ID=a("a"),E8o=o("DistilBertForSequenceClassification"),C8o=o(" (DistilBERT model)"),w8o=l(),q1=a("li"),Wce=a("strong"),A8o=o("electra"),y8o=o(" \u2014 "),qD=a("a"),L8o=o("ElectraForSequenceClassification"),x8o=o(" (ELECTRA model)"),$8o=l(),N1=a("li"),Hce=a("strong"),k8o=o("flaubert"),S8o=o(" \u2014 "),ND=a("a"),R8o=o("FlaubertForSequenceClassification"),B8o=o(" (FlauBERT model)"),P8o=l(),j1=a("li"),Uce=a("strong"),I8o=o("fnet"),q8o=o(" \u2014 "),jD=a("a"),N8o=o("FNetForSequenceClassification"),j8o=o(" (FNet model)"),D8o=l(),D1=a("li"),Jce=a("strong"),G8o=o("funnel"),O8o=o(" \u2014 "),DD=a("a"),V8o=o("FunnelForSequenceClassification"),X8o=o(" (Funnel Transformer model)"),z8o=l(),G1=a("li"),Yce=a("strong"),Q8o=o("gpt2"),W8o=o(" \u2014 "),GD=a("a"),H8o=o("GPT2ForSequenceClassification"),U8o=o(" (OpenAI GPT-2 model)"),J8o=l(),O1=a("li"),Kce=a("strong"),Y8o=o("gpt_neo"),K8o=o(" \u2014 "),OD=a("a"),Z8o=o("GPTNeoForSequenceClassification"),exo=o(" (GPT Neo model)"),oxo=l(),V1=a("li"),Zce=a("strong"),rxo=o("gptj"),txo=o(" \u2014 "),VD=a("a"),axo=o("GPTJForSequenceClassification"),nxo=o(" (GPT-J model)"),sxo=l(),X1=a("li"),efe=a("strong"),lxo=o("ibert"),ixo=o(" \u2014 "),XD=a("a"),dxo=o("IBertForSequenceClassification"),cxo=o(" (I-BERT model)"),fxo=l(),z1=a("li"),ofe=a("strong"),mxo=o("layoutlm"),gxo=o(" \u2014 "),zD=a("a"),hxo=o("LayoutLMForSequenceClassification"),pxo=o(" (LayoutLM model)"),uxo=l(),Q1=a("li"),rfe=a("strong"),_xo=o("layoutlmv2"),bxo=o(" \u2014 "),QD=a("a"),vxo=o("LayoutLMv2ForSequenceClassification"),Fxo=o(" (LayoutLMv2 model)"),Txo=l(),W1=a("li"),tfe=a("strong"),Mxo=o("led"),Exo=o(" \u2014 "),WD=a("a"),Cxo=o("LEDForSequenceClassification"),wxo=o(" (LED model)"),Axo=l(),H1=a("li"),afe=a("strong"),yxo=o("longformer"),Lxo=o(" \u2014 "),HD=a("a"),xxo=o("LongformerForSequenceClassification"),$xo=o(" (Longformer model)"),kxo=l(),U1=a("li"),nfe=a("strong"),Sxo=o("mbart"),Rxo=o(" \u2014 "),UD=a("a"),Bxo=o("MBartForSequenceClassification"),Pxo=o(" (mBART model)"),Ixo=l(),J1=a("li"),sfe=a("strong"),qxo=o("megatron-bert"),Nxo=o(" \u2014 "),JD=a("a"),jxo=o("MegatronBertForSequenceClassification"),Dxo=o(" (MegatronBert model)"),Gxo=l(),Y1=a("li"),lfe=a("strong"),Oxo=o("mobilebert"),Vxo=o(" \u2014 "),YD=a("a"),Xxo=o("MobileBertForSequenceClassification"),zxo=o(" (MobileBERT model)"),Qxo=l(),K1=a("li"),ife=a("strong"),Wxo=o("mpnet"),Hxo=o(" \u2014 "),KD=a("a"),Uxo=o("MPNetForSequenceClassification"),Jxo=o(" (MPNet model)"),Yxo=l(),Z1=a("li"),dfe=a("strong"),Kxo=o("nystromformer"),Zxo=o(" \u2014 "),ZD=a("a"),e$o=o("NystromformerForSequenceClassification"),o$o=o(" (Nystromformer model)"),r$o=l(),eb=a("li"),cfe=a("strong"),t$o=o("openai-gpt"),a$o=o(" \u2014 "),eG=a("a"),n$o=o("OpenAIGPTForSequenceClassification"),s$o=o(" (OpenAI GPT model)"),l$o=l(),ob=a("li"),ffe=a("strong"),i$o=o("perceiver"),d$o=o(" \u2014 "),oG=a("a"),c$o=o("PerceiverForSequenceClassification"),f$o=o(" (Perceiver model)"),m$o=l(),rb=a("li"),mfe=a("strong"),g$o=o("plbart"),h$o=o(" \u2014 "),rG=a("a"),p$o=o("PLBartForSequenceClassification"),u$o=o(" (PLBart model)"),_$o=l(),tb=a("li"),gfe=a("strong"),b$o=o("qdqbert"),v$o=o(" \u2014 "),tG=a("a"),F$o=o("QDQBertForSequenceClassification"),T$o=o(" (QDQBert model)"),M$o=l(),ab=a("li"),hfe=a("strong"),E$o=o("reformer"),C$o=o(" \u2014 "),aG=a("a"),w$o=o("ReformerForSequenceClassification"),A$o=o(" (Reformer model)"),y$o=l(),nb=a("li"),pfe=a("strong"),L$o=o("rembert"),x$o=o(" \u2014 "),nG=a("a"),$$o=o("RemBertForSequenceClassification"),k$o=o(" (RemBERT model)"),S$o=l(),sb=a("li"),ufe=a("strong"),R$o=o("roberta"),B$o=o(" \u2014 "),sG=a("a"),P$o=o("RobertaForSequenceClassification"),I$o=o(" (RoBERTa model)"),q$o=l(),lb=a("li"),_fe=a("strong"),N$o=o("roformer"),j$o=o(" \u2014 "),lG=a("a"),D$o=o("RoFormerForSequenceClassification"),G$o=o(" (RoFormer model)"),O$o=l(),ib=a("li"),bfe=a("strong"),V$o=o("squeezebert"),X$o=o(" \u2014 "),iG=a("a"),z$o=o("SqueezeBertForSequenceClassification"),Q$o=o(" (SqueezeBERT model)"),W$o=l(),db=a("li"),vfe=a("strong"),H$o=o("tapas"),U$o=o(" \u2014 "),dG=a("a"),J$o=o("TapasForSequenceClassification"),Y$o=o(" (TAPAS model)"),K$o=l(),cb=a("li"),Ffe=a("strong"),Z$o=o("transfo-xl"),eko=o(" \u2014 "),cG=a("a"),oko=o("TransfoXLForSequenceClassification"),rko=o(" (Transformer-XL model)"),tko=l(),fb=a("li"),Tfe=a("strong"),ako=o("xlm"),nko=o(" \u2014 "),fG=a("a"),sko=o("XLMForSequenceClassification"),lko=o(" (XLM model)"),iko=l(),mb=a("li"),Mfe=a("strong"),dko=o("xlm-roberta"),cko=o(" \u2014 "),mG=a("a"),fko=o("XLMRobertaForSequenceClassification"),mko=o(" (XLM-RoBERTa model)"),gko=l(),gb=a("li"),Efe=a("strong"),hko=o("xlm-roberta-xl"),pko=o(" \u2014 "),gG=a("a"),uko=o("XLMRobertaXLForSequenceClassification"),_ko=o(" (XLM-RoBERTa-XL model)"),bko=l(),hb=a("li"),Cfe=a("strong"),vko=o("xlnet"),Fko=o(" \u2014 "),hG=a("a"),Tko=o("XLNetForSequenceClassification"),Mko=o(" (XLNet model)"),Eko=l(),pb=a("li"),wfe=a("strong"),Cko=o("yoso"),wko=o(" \u2014 "),pG=a("a"),Ako=o("YosoForSequenceClassification"),yko=o(" (YOSO model)"),Lko=l(),ub=a("p"),xko=o("The model is set in evaluation mode by default using "),Afe=a("code"),$ko=o("model.eval()"),kko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),Sko=o("model.train()"),Rko=l(),F(_b.$$.fragment),VIe=l(),Gi=a("h2"),bb=a("a"),Lfe=a("span"),F(l0.$$.fragment),Bko=l(),xfe=a("span"),Pko=o("AutoModelForMultipleChoice"),XIe=l(),Bo=a("div"),F(i0.$$.fragment),Iko=l(),Oi=a("p"),qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uG=a("a"),Nko=o("from_pretrained()"),jko=o(" class method or the "),_G=a("a"),Dko=o("from_config()"),Gko=o(` class
method.`),Oko=l(),d0=a("p"),Vko=o("This class cannot be instantiated directly using "),$fe=a("code"),Xko=o("__init__()"),zko=o(" (throws an error)."),Qko=l(),lt=a("div"),F(c0.$$.fragment),Wko=l(),kfe=a("p"),Hko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uko=l(),Vi=a("p"),Jko=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),Yko=o("not"),Kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),Zko=o("from_pretrained()"),eSo=o(" to load the model weights."),oSo=l(),F(vb.$$.fragment),rSo=l(),eo=a("div"),F(f0.$$.fragment),tSo=l(),Rfe=a("p"),aSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nSo=l(),Sa=a("p"),sSo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),lSo=o("model_type"),iSo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),dSo=o("pretrained_model_name_or_path"),cSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),fSo=o("pretrained_model_name_or_path"),mSo=o(":"),gSo=l(),Y=a("ul"),Fb=a("li"),qfe=a("strong"),hSo=o("albert"),pSo=o(" \u2014 "),vG=a("a"),uSo=o("AlbertForMultipleChoice"),_So=o(" (ALBERT model)"),bSo=l(),Tb=a("li"),Nfe=a("strong"),vSo=o("bert"),FSo=o(" \u2014 "),FG=a("a"),TSo=o("BertForMultipleChoice"),MSo=o(" (BERT model)"),ESo=l(),Mb=a("li"),jfe=a("strong"),CSo=o("big_bird"),wSo=o(" \u2014 "),TG=a("a"),ASo=o("BigBirdForMultipleChoice"),ySo=o(" (BigBird model)"),LSo=l(),Eb=a("li"),Dfe=a("strong"),xSo=o("camembert"),$So=o(" \u2014 "),MG=a("a"),kSo=o("CamembertForMultipleChoice"),SSo=o(" (CamemBERT model)"),RSo=l(),Cb=a("li"),Gfe=a("strong"),BSo=o("canine"),PSo=o(" \u2014 "),EG=a("a"),ISo=o("CanineForMultipleChoice"),qSo=o(" (Canine model)"),NSo=l(),wb=a("li"),Ofe=a("strong"),jSo=o("convbert"),DSo=o(" \u2014 "),CG=a("a"),GSo=o("ConvBertForMultipleChoice"),OSo=o(" (ConvBERT model)"),VSo=l(),Ab=a("li"),Vfe=a("strong"),XSo=o("data2vec-text"),zSo=o(" \u2014 "),wG=a("a"),QSo=o("Data2VecTextForMultipleChoice"),WSo=o(" (Data2VecText model)"),HSo=l(),yb=a("li"),Xfe=a("strong"),USo=o("deberta-v2"),JSo=o(" \u2014 "),AG=a("a"),YSo=o("DebertaV2ForMultipleChoice"),KSo=o(" (DeBERTa-v2 model)"),ZSo=l(),Lb=a("li"),zfe=a("strong"),eRo=o("distilbert"),oRo=o(" \u2014 "),yG=a("a"),rRo=o("DistilBertForMultipleChoice"),tRo=o(" (DistilBERT model)"),aRo=l(),xb=a("li"),Qfe=a("strong"),nRo=o("electra"),sRo=o(" \u2014 "),LG=a("a"),lRo=o("ElectraForMultipleChoice"),iRo=o(" (ELECTRA model)"),dRo=l(),$b=a("li"),Wfe=a("strong"),cRo=o("flaubert"),fRo=o(" \u2014 "),xG=a("a"),mRo=o("FlaubertForMultipleChoice"),gRo=o(" (FlauBERT model)"),hRo=l(),kb=a("li"),Hfe=a("strong"),pRo=o("fnet"),uRo=o(" \u2014 "),$G=a("a"),_Ro=o("FNetForMultipleChoice"),bRo=o(" (FNet model)"),vRo=l(),Sb=a("li"),Ufe=a("strong"),FRo=o("funnel"),TRo=o(" \u2014 "),kG=a("a"),MRo=o("FunnelForMultipleChoice"),ERo=o(" (Funnel Transformer model)"),CRo=l(),Rb=a("li"),Jfe=a("strong"),wRo=o("ibert"),ARo=o(" \u2014 "),SG=a("a"),yRo=o("IBertForMultipleChoice"),LRo=o(" (I-BERT model)"),xRo=l(),Bb=a("li"),Yfe=a("strong"),$Ro=o("longformer"),kRo=o(" \u2014 "),RG=a("a"),SRo=o("LongformerForMultipleChoice"),RRo=o(" (Longformer model)"),BRo=l(),Pb=a("li"),Kfe=a("strong"),PRo=o("megatron-bert"),IRo=o(" \u2014 "),BG=a("a"),qRo=o("MegatronBertForMultipleChoice"),NRo=o(" (MegatronBert model)"),jRo=l(),Ib=a("li"),Zfe=a("strong"),DRo=o("mobilebert"),GRo=o(" \u2014 "),PG=a("a"),ORo=o("MobileBertForMultipleChoice"),VRo=o(" (MobileBERT model)"),XRo=l(),qb=a("li"),eme=a("strong"),zRo=o("mpnet"),QRo=o(" \u2014 "),IG=a("a"),WRo=o("MPNetForMultipleChoice"),HRo=o(" (MPNet model)"),URo=l(),Nb=a("li"),ome=a("strong"),JRo=o("nystromformer"),YRo=o(" \u2014 "),qG=a("a"),KRo=o("NystromformerForMultipleChoice"),ZRo=o(" (Nystromformer model)"),eBo=l(),jb=a("li"),rme=a("strong"),oBo=o("qdqbert"),rBo=o(" \u2014 "),NG=a("a"),tBo=o("QDQBertForMultipleChoice"),aBo=o(" (QDQBert model)"),nBo=l(),Db=a("li"),tme=a("strong"),sBo=o("rembert"),lBo=o(" \u2014 "),jG=a("a"),iBo=o("RemBertForMultipleChoice"),dBo=o(" (RemBERT model)"),cBo=l(),Gb=a("li"),ame=a("strong"),fBo=o("roberta"),mBo=o(" \u2014 "),DG=a("a"),gBo=o("RobertaForMultipleChoice"),hBo=o(" (RoBERTa model)"),pBo=l(),Ob=a("li"),nme=a("strong"),uBo=o("roformer"),_Bo=o(" \u2014 "),GG=a("a"),bBo=o("RoFormerForMultipleChoice"),vBo=o(" (RoFormer model)"),FBo=l(),Vb=a("li"),sme=a("strong"),TBo=o("squeezebert"),MBo=o(" \u2014 "),OG=a("a"),EBo=o("SqueezeBertForMultipleChoice"),CBo=o(" (SqueezeBERT model)"),wBo=l(),Xb=a("li"),lme=a("strong"),ABo=o("xlm"),yBo=o(" \u2014 "),VG=a("a"),LBo=o("XLMForMultipleChoice"),xBo=o(" (XLM model)"),$Bo=l(),zb=a("li"),ime=a("strong"),kBo=o("xlm-roberta"),SBo=o(" \u2014 "),XG=a("a"),RBo=o("XLMRobertaForMultipleChoice"),BBo=o(" (XLM-RoBERTa model)"),PBo=l(),Qb=a("li"),dme=a("strong"),IBo=o("xlm-roberta-xl"),qBo=o(" \u2014 "),zG=a("a"),NBo=o("XLMRobertaXLForMultipleChoice"),jBo=o(" (XLM-RoBERTa-XL model)"),DBo=l(),Wb=a("li"),cme=a("strong"),GBo=o("xlnet"),OBo=o(" \u2014 "),QG=a("a"),VBo=o("XLNetForMultipleChoice"),XBo=o(" (XLNet model)"),zBo=l(),Hb=a("li"),fme=a("strong"),QBo=o("yoso"),WBo=o(" \u2014 "),WG=a("a"),HBo=o("YosoForMultipleChoice"),UBo=o(" (YOSO model)"),JBo=l(),Ub=a("p"),YBo=o("The model is set in evaluation mode by default using "),mme=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),ePo=o("model.train()"),oPo=l(),F(Jb.$$.fragment),zIe=l(),Xi=a("h2"),Yb=a("a"),hme=a("span"),F(m0.$$.fragment),rPo=l(),pme=a("span"),tPo=o("AutoModelForNextSentencePrediction"),QIe=l(),Po=a("div"),F(g0.$$.fragment),aPo=l(),zi=a("p"),nPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HG=a("a"),sPo=o("from_pretrained()"),lPo=o(" class method or the "),UG=a("a"),iPo=o("from_config()"),dPo=o(` class
method.`),cPo=l(),h0=a("p"),fPo=o("This class cannot be instantiated directly using "),ume=a("code"),mPo=o("__init__()"),gPo=o(" (throws an error)."),hPo=l(),it=a("div"),F(p0.$$.fragment),pPo=l(),_me=a("p"),uPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Po=l(),Qi=a("p"),bPo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),vPo=o("not"),FPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),TPo=o("from_pretrained()"),MPo=o(" to load the model weights."),EPo=l(),F(Kb.$$.fragment),CPo=l(),oo=a("div"),F(u0.$$.fragment),wPo=l(),vme=a("p"),APo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yPo=l(),Ra=a("p"),LPo=o("The model class to instantiate is selected based on the "),Fme=a("code"),xPo=o("model_type"),$Po=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),kPo=o("pretrained_model_name_or_path"),SPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),RPo=o("pretrained_model_name_or_path"),BPo=o(":"),PPo=l(),Yr=a("ul"),Zb=a("li"),Eme=a("strong"),IPo=o("bert"),qPo=o(" \u2014 "),YG=a("a"),NPo=o("BertForNextSentencePrediction"),jPo=o(" (BERT model)"),DPo=l(),ev=a("li"),Cme=a("strong"),GPo=o("fnet"),OPo=o(" \u2014 "),KG=a("a"),VPo=o("FNetForNextSentencePrediction"),XPo=o(" (FNet model)"),zPo=l(),ov=a("li"),wme=a("strong"),QPo=o("megatron-bert"),WPo=o(" \u2014 "),ZG=a("a"),HPo=o("MegatronBertForNextSentencePrediction"),UPo=o(" (MegatronBert model)"),JPo=l(),rv=a("li"),Ame=a("strong"),YPo=o("mobilebert"),KPo=o(" \u2014 "),eO=a("a"),ZPo=o("MobileBertForNextSentencePrediction"),eIo=o(" (MobileBERT model)"),oIo=l(),tv=a("li"),yme=a("strong"),rIo=o("qdqbert"),tIo=o(" \u2014 "),oO=a("a"),aIo=o("QDQBertForNextSentencePrediction"),nIo=o(" (QDQBert model)"),sIo=l(),av=a("p"),lIo=o("The model is set in evaluation mode by default using "),Lme=a("code"),iIo=o("model.eval()"),dIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),cIo=o("model.train()"),fIo=l(),F(nv.$$.fragment),WIe=l(),Wi=a("h2"),sv=a("a"),$me=a("span"),F(_0.$$.fragment),mIo=l(),kme=a("span"),gIo=o("AutoModelForTokenClassification"),HIe=l(),Io=a("div"),F(b0.$$.fragment),hIo=l(),Hi=a("p"),pIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rO=a("a"),uIo=o("from_pretrained()"),_Io=o(" class method or the "),tO=a("a"),bIo=o("from_config()"),vIo=o(` class
method.`),FIo=l(),v0=a("p"),TIo=o("This class cannot be instantiated directly using "),Sme=a("code"),MIo=o("__init__()"),EIo=o(" (throws an error)."),CIo=l(),dt=a("div"),F(F0.$$.fragment),wIo=l(),Rme=a("p"),AIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yIo=l(),Ui=a("p"),LIo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),xIo=o("not"),$Io=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),kIo=o("from_pretrained()"),SIo=o(" to load the model weights."),RIo=l(),F(lv.$$.fragment),BIo=l(),ro=a("div"),F(T0.$$.fragment),PIo=l(),Pme=a("p"),IIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qIo=l(),Ba=a("p"),NIo=o("The model class to instantiate is selected based on the "),Ime=a("code"),jIo=o("model_type"),DIo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),GIo=o("pretrained_model_name_or_path"),OIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),VIo=o("pretrained_model_name_or_path"),XIo=o(":"),zIo=l(),U=a("ul"),iv=a("li"),jme=a("strong"),QIo=o("albert"),WIo=o(" \u2014 "),nO=a("a"),HIo=o("AlbertForTokenClassification"),UIo=o(" (ALBERT model)"),JIo=l(),dv=a("li"),Dme=a("strong"),YIo=o("bert"),KIo=o(" \u2014 "),sO=a("a"),ZIo=o("BertForTokenClassification"),eqo=o(" (BERT model)"),oqo=l(),cv=a("li"),Gme=a("strong"),rqo=o("big_bird"),tqo=o(" \u2014 "),lO=a("a"),aqo=o("BigBirdForTokenClassification"),nqo=o(" (BigBird model)"),sqo=l(),fv=a("li"),Ome=a("strong"),lqo=o("camembert"),iqo=o(" \u2014 "),iO=a("a"),dqo=o("CamembertForTokenClassification"),cqo=o(" (CamemBERT model)"),fqo=l(),mv=a("li"),Vme=a("strong"),mqo=o("canine"),gqo=o(" \u2014 "),dO=a("a"),hqo=o("CanineForTokenClassification"),pqo=o(" (Canine model)"),uqo=l(),gv=a("li"),Xme=a("strong"),_qo=o("convbert"),bqo=o(" \u2014 "),cO=a("a"),vqo=o("ConvBertForTokenClassification"),Fqo=o(" (ConvBERT model)"),Tqo=l(),hv=a("li"),zme=a("strong"),Mqo=o("data2vec-text"),Eqo=o(" \u2014 "),fO=a("a"),Cqo=o("Data2VecTextForTokenClassification"),wqo=o(" (Data2VecText model)"),Aqo=l(),pv=a("li"),Qme=a("strong"),yqo=o("deberta"),Lqo=o(" \u2014 "),mO=a("a"),xqo=o("DebertaForTokenClassification"),$qo=o(" (DeBERTa model)"),kqo=l(),uv=a("li"),Wme=a("strong"),Sqo=o("deberta-v2"),Rqo=o(" \u2014 "),gO=a("a"),Bqo=o("DebertaV2ForTokenClassification"),Pqo=o(" (DeBERTa-v2 model)"),Iqo=l(),_v=a("li"),Hme=a("strong"),qqo=o("distilbert"),Nqo=o(" \u2014 "),hO=a("a"),jqo=o("DistilBertForTokenClassification"),Dqo=o(" (DistilBERT model)"),Gqo=l(),bv=a("li"),Ume=a("strong"),Oqo=o("electra"),Vqo=o(" \u2014 "),pO=a("a"),Xqo=o("ElectraForTokenClassification"),zqo=o(" (ELECTRA model)"),Qqo=l(),vv=a("li"),Jme=a("strong"),Wqo=o("flaubert"),Hqo=o(" \u2014 "),uO=a("a"),Uqo=o("FlaubertForTokenClassification"),Jqo=o(" (FlauBERT model)"),Yqo=l(),Fv=a("li"),Yme=a("strong"),Kqo=o("fnet"),Zqo=o(" \u2014 "),_O=a("a"),eNo=o("FNetForTokenClassification"),oNo=o(" (FNet model)"),rNo=l(),Tv=a("li"),Kme=a("strong"),tNo=o("funnel"),aNo=o(" \u2014 "),bO=a("a"),nNo=o("FunnelForTokenClassification"),sNo=o(" (Funnel Transformer model)"),lNo=l(),Mv=a("li"),Zme=a("strong"),iNo=o("gpt2"),dNo=o(" \u2014 "),vO=a("a"),cNo=o("GPT2ForTokenClassification"),fNo=o(" (OpenAI GPT-2 model)"),mNo=l(),Ev=a("li"),ege=a("strong"),gNo=o("ibert"),hNo=o(" \u2014 "),FO=a("a"),pNo=o("IBertForTokenClassification"),uNo=o(" (I-BERT model)"),_No=l(),Cv=a("li"),oge=a("strong"),bNo=o("layoutlm"),vNo=o(" \u2014 "),TO=a("a"),FNo=o("LayoutLMForTokenClassification"),TNo=o(" (LayoutLM model)"),MNo=l(),wv=a("li"),rge=a("strong"),ENo=o("layoutlmv2"),CNo=o(" \u2014 "),MO=a("a"),wNo=o("LayoutLMv2ForTokenClassification"),ANo=o(" (LayoutLMv2 model)"),yNo=l(),Av=a("li"),tge=a("strong"),LNo=o("longformer"),xNo=o(" \u2014 "),EO=a("a"),$No=o("LongformerForTokenClassification"),kNo=o(" (Longformer model)"),SNo=l(),yv=a("li"),age=a("strong"),RNo=o("megatron-bert"),BNo=o(" \u2014 "),CO=a("a"),PNo=o("MegatronBertForTokenClassification"),INo=o(" (MegatronBert model)"),qNo=l(),Lv=a("li"),nge=a("strong"),NNo=o("mobilebert"),jNo=o(" \u2014 "),wO=a("a"),DNo=o("MobileBertForTokenClassification"),GNo=o(" (MobileBERT model)"),ONo=l(),xv=a("li"),sge=a("strong"),VNo=o("mpnet"),XNo=o(" \u2014 "),AO=a("a"),zNo=o("MPNetForTokenClassification"),QNo=o(" (MPNet model)"),WNo=l(),$v=a("li"),lge=a("strong"),HNo=o("nystromformer"),UNo=o(" \u2014 "),yO=a("a"),JNo=o("NystromformerForTokenClassification"),YNo=o(" (Nystromformer model)"),KNo=l(),kv=a("li"),ige=a("strong"),ZNo=o("qdqbert"),ejo=o(" \u2014 "),LO=a("a"),ojo=o("QDQBertForTokenClassification"),rjo=o(" (QDQBert model)"),tjo=l(),Sv=a("li"),dge=a("strong"),ajo=o("rembert"),njo=o(" \u2014 "),xO=a("a"),sjo=o("RemBertForTokenClassification"),ljo=o(" (RemBERT model)"),ijo=l(),Rv=a("li"),cge=a("strong"),djo=o("roberta"),cjo=o(" \u2014 "),$O=a("a"),fjo=o("RobertaForTokenClassification"),mjo=o(" (RoBERTa model)"),gjo=l(),Bv=a("li"),fge=a("strong"),hjo=o("roformer"),pjo=o(" \u2014 "),kO=a("a"),ujo=o("RoFormerForTokenClassification"),_jo=o(" (RoFormer model)"),bjo=l(),Pv=a("li"),mge=a("strong"),vjo=o("squeezebert"),Fjo=o(" \u2014 "),SO=a("a"),Tjo=o("SqueezeBertForTokenClassification"),Mjo=o(" (SqueezeBERT model)"),Ejo=l(),Iv=a("li"),gge=a("strong"),Cjo=o("xlm"),wjo=o(" \u2014 "),RO=a("a"),Ajo=o("XLMForTokenClassification"),yjo=o(" (XLM model)"),Ljo=l(),qv=a("li"),hge=a("strong"),xjo=o("xlm-roberta"),$jo=o(" \u2014 "),BO=a("a"),kjo=o("XLMRobertaForTokenClassification"),Sjo=o(" (XLM-RoBERTa model)"),Rjo=l(),Nv=a("li"),pge=a("strong"),Bjo=o("xlm-roberta-xl"),Pjo=o(" \u2014 "),PO=a("a"),Ijo=o("XLMRobertaXLForTokenClassification"),qjo=o(" (XLM-RoBERTa-XL model)"),Njo=l(),jv=a("li"),uge=a("strong"),jjo=o("xlnet"),Djo=o(" \u2014 "),IO=a("a"),Gjo=o("XLNetForTokenClassification"),Ojo=o(" (XLNet model)"),Vjo=l(),Dv=a("li"),_ge=a("strong"),Xjo=o("yoso"),zjo=o(" \u2014 "),qO=a("a"),Qjo=o("YosoForTokenClassification"),Wjo=o(" (YOSO model)"),Hjo=l(),Gv=a("p"),Ujo=o("The model is set in evaluation mode by default using "),bge=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),Kjo=o("model.train()"),Zjo=l(),F(Ov.$$.fragment),UIe=l(),Ji=a("h2"),Vv=a("a"),Fge=a("span"),F(M0.$$.fragment),eDo=l(),Tge=a("span"),oDo=o("AutoModelForQuestionAnswering"),JIe=l(),qo=a("div"),F(E0.$$.fragment),rDo=l(),Yi=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NO=a("a"),aDo=o("from_pretrained()"),nDo=o(" class method or the "),jO=a("a"),sDo=o("from_config()"),lDo=o(` class
method.`),iDo=l(),C0=a("p"),dDo=o("This class cannot be instantiated directly using "),Mge=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),ct=a("div"),F(w0.$$.fragment),gDo=l(),Ege=a("p"),hDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pDo=l(),Ki=a("p"),uDo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),_Do=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),vDo=o("from_pretrained()"),FDo=o(" to load the model weights."),TDo=l(),F(Xv.$$.fragment),MDo=l(),to=a("div"),F(A0.$$.fragment),EDo=l(),wge=a("p"),CDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wDo=l(),Pa=a("p"),ADo=o("The model class to instantiate is selected based on the "),Age=a("code"),yDo=o("model_type"),LDo=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),xDo=o("pretrained_model_name_or_path"),$Do=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),kDo=o("pretrained_model_name_or_path"),SDo=o(":"),RDo=l(),V=a("ul"),zv=a("li"),xge=a("strong"),BDo=o("albert"),PDo=o(" \u2014 "),GO=a("a"),IDo=o("AlbertForQuestionAnswering"),qDo=o(" (ALBERT model)"),NDo=l(),Qv=a("li"),$ge=a("strong"),jDo=o("bart"),DDo=o(" \u2014 "),OO=a("a"),GDo=o("BartForQuestionAnswering"),ODo=o(" (BART model)"),VDo=l(),Wv=a("li"),kge=a("strong"),XDo=o("bert"),zDo=o(" \u2014 "),VO=a("a"),QDo=o("BertForQuestionAnswering"),WDo=o(" (BERT model)"),HDo=l(),Hv=a("li"),Sge=a("strong"),UDo=o("big_bird"),JDo=o(" \u2014 "),XO=a("a"),YDo=o("BigBirdForQuestionAnswering"),KDo=o(" (BigBird model)"),ZDo=l(),Uv=a("li"),Rge=a("strong"),eGo=o("bigbird_pegasus"),oGo=o(" \u2014 "),zO=a("a"),rGo=o("BigBirdPegasusForQuestionAnswering"),tGo=o(" (BigBirdPegasus model)"),aGo=l(),Jv=a("li"),Bge=a("strong"),nGo=o("camembert"),sGo=o(" \u2014 "),QO=a("a"),lGo=o("CamembertForQuestionAnswering"),iGo=o(" (CamemBERT model)"),dGo=l(),Yv=a("li"),Pge=a("strong"),cGo=o("canine"),fGo=o(" \u2014 "),WO=a("a"),mGo=o("CanineForQuestionAnswering"),gGo=o(" (Canine model)"),hGo=l(),Kv=a("li"),Ige=a("strong"),pGo=o("convbert"),uGo=o(" \u2014 "),HO=a("a"),_Go=o("ConvBertForQuestionAnswering"),bGo=o(" (ConvBERT model)"),vGo=l(),Zv=a("li"),qge=a("strong"),FGo=o("data2vec-text"),TGo=o(" \u2014 "),UO=a("a"),MGo=o("Data2VecTextForQuestionAnswering"),EGo=o(" (Data2VecText model)"),CGo=l(),eF=a("li"),Nge=a("strong"),wGo=o("deberta"),AGo=o(" \u2014 "),JO=a("a"),yGo=o("DebertaForQuestionAnswering"),LGo=o(" (DeBERTa model)"),xGo=l(),oF=a("li"),jge=a("strong"),$Go=o("deberta-v2"),kGo=o(" \u2014 "),YO=a("a"),SGo=o("DebertaV2ForQuestionAnswering"),RGo=o(" (DeBERTa-v2 model)"),BGo=l(),rF=a("li"),Dge=a("strong"),PGo=o("distilbert"),IGo=o(" \u2014 "),KO=a("a"),qGo=o("DistilBertForQuestionAnswering"),NGo=o(" (DistilBERT model)"),jGo=l(),tF=a("li"),Gge=a("strong"),DGo=o("electra"),GGo=o(" \u2014 "),ZO=a("a"),OGo=o("ElectraForQuestionAnswering"),VGo=o(" (ELECTRA model)"),XGo=l(),aF=a("li"),Oge=a("strong"),zGo=o("flaubert"),QGo=o(" \u2014 "),eV=a("a"),WGo=o("FlaubertForQuestionAnsweringSimple"),HGo=o(" (FlauBERT model)"),UGo=l(),nF=a("li"),Vge=a("strong"),JGo=o("fnet"),YGo=o(" \u2014 "),oV=a("a"),KGo=o("FNetForQuestionAnswering"),ZGo=o(" (FNet model)"),eOo=l(),sF=a("li"),Xge=a("strong"),oOo=o("funnel"),rOo=o(" \u2014 "),rV=a("a"),tOo=o("FunnelForQuestionAnswering"),aOo=o(" (Funnel Transformer model)"),nOo=l(),lF=a("li"),zge=a("strong"),sOo=o("gptj"),lOo=o(" \u2014 "),tV=a("a"),iOo=o("GPTJForQuestionAnswering"),dOo=o(" (GPT-J model)"),cOo=l(),iF=a("li"),Qge=a("strong"),fOo=o("ibert"),mOo=o(" \u2014 "),aV=a("a"),gOo=o("IBertForQuestionAnswering"),hOo=o(" (I-BERT model)"),pOo=l(),dF=a("li"),Wge=a("strong"),uOo=o("layoutlmv2"),_Oo=o(" \u2014 "),nV=a("a"),bOo=o("LayoutLMv2ForQuestionAnswering"),vOo=o(" (LayoutLMv2 model)"),FOo=l(),cF=a("li"),Hge=a("strong"),TOo=o("led"),MOo=o(" \u2014 "),sV=a("a"),EOo=o("LEDForQuestionAnswering"),COo=o(" (LED model)"),wOo=l(),fF=a("li"),Uge=a("strong"),AOo=o("longformer"),yOo=o(" \u2014 "),lV=a("a"),LOo=o("LongformerForQuestionAnswering"),xOo=o(" (Longformer model)"),$Oo=l(),mF=a("li"),Jge=a("strong"),kOo=o("lxmert"),SOo=o(" \u2014 "),iV=a("a"),ROo=o("LxmertForQuestionAnswering"),BOo=o(" (LXMERT model)"),POo=l(),gF=a("li"),Yge=a("strong"),IOo=o("mbart"),qOo=o(" \u2014 "),dV=a("a"),NOo=o("MBartForQuestionAnswering"),jOo=o(" (mBART model)"),DOo=l(),hF=a("li"),Kge=a("strong"),GOo=o("megatron-bert"),OOo=o(" \u2014 "),cV=a("a"),VOo=o("MegatronBertForQuestionAnswering"),XOo=o(" (MegatronBert model)"),zOo=l(),pF=a("li"),Zge=a("strong"),QOo=o("mobilebert"),WOo=o(" \u2014 "),fV=a("a"),HOo=o("MobileBertForQuestionAnswering"),UOo=o(" (MobileBERT model)"),JOo=l(),uF=a("li"),ehe=a("strong"),YOo=o("mpnet"),KOo=o(" \u2014 "),mV=a("a"),ZOo=o("MPNetForQuestionAnswering"),eVo=o(" (MPNet model)"),oVo=l(),_F=a("li"),ohe=a("strong"),rVo=o("nystromformer"),tVo=o(" \u2014 "),gV=a("a"),aVo=o("NystromformerForQuestionAnswering"),nVo=o(" (Nystromformer model)"),sVo=l(),bF=a("li"),rhe=a("strong"),lVo=o("qdqbert"),iVo=o(" \u2014 "),hV=a("a"),dVo=o("QDQBertForQuestionAnswering"),cVo=o(" (QDQBert model)"),fVo=l(),vF=a("li"),the=a("strong"),mVo=o("reformer"),gVo=o(" \u2014 "),pV=a("a"),hVo=o("ReformerForQuestionAnswering"),pVo=o(" (Reformer model)"),uVo=l(),FF=a("li"),ahe=a("strong"),_Vo=o("rembert"),bVo=o(" \u2014 "),uV=a("a"),vVo=o("RemBertForQuestionAnswering"),FVo=o(" (RemBERT model)"),TVo=l(),TF=a("li"),nhe=a("strong"),MVo=o("roberta"),EVo=o(" \u2014 "),_V=a("a"),CVo=o("RobertaForQuestionAnswering"),wVo=o(" (RoBERTa model)"),AVo=l(),MF=a("li"),she=a("strong"),yVo=o("roformer"),LVo=o(" \u2014 "),bV=a("a"),xVo=o("RoFormerForQuestionAnswering"),$Vo=o(" (RoFormer model)"),kVo=l(),EF=a("li"),lhe=a("strong"),SVo=o("splinter"),RVo=o(" \u2014 "),vV=a("a"),BVo=o("SplinterForQuestionAnswering"),PVo=o(" (Splinter model)"),IVo=l(),CF=a("li"),ihe=a("strong"),qVo=o("squeezebert"),NVo=o(" \u2014 "),FV=a("a"),jVo=o("SqueezeBertForQuestionAnswering"),DVo=o(" (SqueezeBERT model)"),GVo=l(),wF=a("li"),dhe=a("strong"),OVo=o("xlm"),VVo=o(" \u2014 "),TV=a("a"),XVo=o("XLMForQuestionAnsweringSimple"),zVo=o(" (XLM model)"),QVo=l(),AF=a("li"),che=a("strong"),WVo=o("xlm-roberta"),HVo=o(" \u2014 "),MV=a("a"),UVo=o("XLMRobertaForQuestionAnswering"),JVo=o(" (XLM-RoBERTa model)"),YVo=l(),yF=a("li"),fhe=a("strong"),KVo=o("xlm-roberta-xl"),ZVo=o(" \u2014 "),EV=a("a"),eXo=o("XLMRobertaXLForQuestionAnswering"),oXo=o(" (XLM-RoBERTa-XL model)"),rXo=l(),LF=a("li"),mhe=a("strong"),tXo=o("xlnet"),aXo=o(" \u2014 "),CV=a("a"),nXo=o("XLNetForQuestionAnsweringSimple"),sXo=o(" (XLNet model)"),lXo=l(),xF=a("li"),ghe=a("strong"),iXo=o("yoso"),dXo=o(" \u2014 "),wV=a("a"),cXo=o("YosoForQuestionAnswering"),fXo=o(" (YOSO model)"),mXo=l(),$F=a("p"),gXo=o("The model is set in evaluation mode by default using "),hhe=a("code"),hXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),uXo=o("model.train()"),_Xo=l(),F(kF.$$.fragment),YIe=l(),Zi=a("h2"),SF=a("a"),uhe=a("span"),F(y0.$$.fragment),bXo=l(),_he=a("span"),vXo=o("AutoModelForTableQuestionAnswering"),KIe=l(),No=a("div"),F(L0.$$.fragment),FXo=l(),ed=a("p"),TXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AV=a("a"),MXo=o("from_pretrained()"),EXo=o(" class method or the "),yV=a("a"),CXo=o("from_config()"),wXo=o(` class
method.`),AXo=l(),x0=a("p"),yXo=o("This class cannot be instantiated directly using "),bhe=a("code"),LXo=o("__init__()"),xXo=o(" (throws an error)."),$Xo=l(),ft=a("div"),F($0.$$.fragment),kXo=l(),vhe=a("p"),SXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RXo=l(),od=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),PXo=o("not"),IXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),qXo=o("from_pretrained()"),NXo=o(" to load the model weights."),jXo=l(),F(RF.$$.fragment),DXo=l(),ao=a("div"),F(k0.$$.fragment),GXo=l(),The=a("p"),OXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VXo=l(),Ia=a("p"),XXo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),zXo=o("model_type"),QXo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),WXo=o("pretrained_model_name_or_path"),HXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(":"),YXo=l(),whe=a("ul"),BF=a("li"),Ahe=a("strong"),KXo=o("tapas"),ZXo=o(" \u2014 "),xV=a("a"),ezo=o("TapasForQuestionAnswering"),ozo=o(" (TAPAS model)"),rzo=l(),PF=a("p"),tzo=o("The model is set in evaluation mode by default using "),yhe=a("code"),azo=o("model.eval()"),nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),szo=o("model.train()"),lzo=l(),F(IF.$$.fragment),ZIe=l(),rd=a("h2"),qF=a("a"),xhe=a("span"),F(S0.$$.fragment),izo=l(),$he=a("span"),dzo=o("AutoModelForImageClassification"),eqe=l(),jo=a("div"),F(R0.$$.fragment),czo=l(),td=a("p"),fzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=a("a"),mzo=o("from_pretrained()"),gzo=o(" class method or the "),kV=a("a"),hzo=o("from_config()"),pzo=o(` class
method.`),uzo=l(),B0=a("p"),_zo=o("This class cannot be instantiated directly using "),khe=a("code"),bzo=o("__init__()"),vzo=o(" (throws an error)."),Fzo=l(),mt=a("div"),F(P0.$$.fragment),Tzo=l(),She=a("p"),Mzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ezo=l(),ad=a("p"),Czo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),wzo=o("not"),Azo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),yzo=o("from_pretrained()"),Lzo=o(" to load the model weights."),xzo=l(),F(NF.$$.fragment),$zo=l(),no=a("div"),F(I0.$$.fragment),kzo=l(),Bhe=a("p"),Szo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rzo=l(),qa=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Phe=a("code"),Pzo=o("model_type"),Izo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),jzo=o("pretrained_model_name_or_path"),Dzo=o(":"),Gzo=l(),Fe=a("ul"),jF=a("li"),Nhe=a("strong"),Ozo=o("beit"),Vzo=o(" \u2014 "),RV=a("a"),Xzo=o("BeitForImageClassification"),zzo=o(" (BEiT model)"),Qzo=l(),DF=a("li"),jhe=a("strong"),Wzo=o("convnext"),Hzo=o(" \u2014 "),BV=a("a"),Uzo=o("ConvNextForImageClassification"),Jzo=o(" (ConvNext model)"),Yzo=l(),GF=a("li"),Dhe=a("strong"),Kzo=o("data2vec-vision"),Zzo=o(" \u2014 "),PV=a("a"),eQo=o("Data2VecVisionForImageClassification"),oQo=o(" (Data2VecVision model)"),rQo=l(),Ps=a("li"),Ghe=a("strong"),tQo=o("deit"),aQo=o(" \u2014 "),IV=a("a"),nQo=o("DeiTForImageClassification"),sQo=o(" or "),qV=a("a"),lQo=o("DeiTForImageClassificationWithTeacher"),iQo=o(" (DeiT model)"),dQo=l(),OF=a("li"),Ohe=a("strong"),cQo=o("imagegpt"),fQo=o(" \u2014 "),NV=a("a"),mQo=o("ImageGPTForImageClassification"),gQo=o(" (ImageGPT model)"),hQo=l(),gt=a("li"),Vhe=a("strong"),pQo=o("perceiver"),uQo=o(" \u2014 "),jV=a("a"),_Qo=o("PerceiverForImageClassificationLearned"),bQo=o(" or "),DV=a("a"),vQo=o("PerceiverForImageClassificationFourier"),FQo=o(" or "),GV=a("a"),TQo=o("PerceiverForImageClassificationConvProcessing"),MQo=o(" (Perceiver model)"),EQo=l(),VF=a("li"),Xhe=a("strong"),CQo=o("poolformer"),wQo=o(" \u2014 "),OV=a("a"),AQo=o("PoolFormerForImageClassification"),yQo=o(" (PoolFormer model)"),LQo=l(),XF=a("li"),zhe=a("strong"),xQo=o("regnet"),$Qo=o(" \u2014 "),VV=a("a"),kQo=o("RegNetForImageClassification"),SQo=o(" (RegNet model)"),RQo=l(),zF=a("li"),Qhe=a("strong"),BQo=o("resnet"),PQo=o(" \u2014 "),XV=a("a"),IQo=o("ResNetForImageClassification"),qQo=o(" (ResNet model)"),NQo=l(),QF=a("li"),Whe=a("strong"),jQo=o("segformer"),DQo=o(" \u2014 "),zV=a("a"),GQo=o("SegformerForImageClassification"),OQo=o(" (SegFormer model)"),VQo=l(),WF=a("li"),Hhe=a("strong"),XQo=o("swin"),zQo=o(" \u2014 "),QV=a("a"),QQo=o("SwinForImageClassification"),WQo=o(" (Swin model)"),HQo=l(),HF=a("li"),Uhe=a("strong"),UQo=o("van"),JQo=o(" \u2014 "),WV=a("a"),YQo=o("VanForImageClassification"),KQo=o(" (VAN model)"),ZQo=l(),UF=a("li"),Jhe=a("strong"),eWo=o("vit"),oWo=o(" \u2014 "),HV=a("a"),rWo=o("ViTForImageClassification"),tWo=o(" (ViT model)"),aWo=l(),JF=a("p"),nWo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),sWo=o("model.eval()"),lWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),iWo=o("model.train()"),dWo=l(),F(YF.$$.fragment),oqe=l(),nd=a("h2"),KF=a("a"),Zhe=a("span"),F(q0.$$.fragment),cWo=l(),epe=a("span"),fWo=o("AutoModelForVision2Seq"),rqe=l(),Do=a("div"),F(N0.$$.fragment),mWo=l(),sd=a("p"),gWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UV=a("a"),hWo=o("from_pretrained()"),pWo=o(" class method or the "),JV=a("a"),uWo=o("from_config()"),_Wo=o(` class
method.`),bWo=l(),j0=a("p"),vWo=o("This class cannot be instantiated directly using "),ope=a("code"),FWo=o("__init__()"),TWo=o(" (throws an error)."),MWo=l(),ht=a("div"),F(D0.$$.fragment),EWo=l(),rpe=a("p"),CWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wWo=l(),ld=a("p"),AWo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),yWo=o("not"),LWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),xWo=o("from_pretrained()"),$Wo=o(" to load the model weights."),kWo=l(),F(ZF.$$.fragment),SWo=l(),so=a("div"),F(G0.$$.fragment),RWo=l(),ape=a("p"),BWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PWo=l(),Na=a("p"),IWo=o("The model class to instantiate is selected based on the "),npe=a("code"),qWo=o("model_type"),NWo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),jWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),GWo=o("pretrained_model_name_or_path"),OWo=o(":"),VWo=l(),ipe=a("ul"),e6=a("li"),dpe=a("strong"),XWo=o("vision-encoder-decoder"),zWo=o(" \u2014 "),KV=a("a"),QWo=o("VisionEncoderDecoderModel"),WWo=o(" (Vision Encoder decoder model)"),HWo=l(),o6=a("p"),UWo=o("The model is set in evaluation mode by default using "),cpe=a("code"),JWo=o("model.eval()"),YWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),KWo=o("model.train()"),ZWo=l(),F(r6.$$.fragment),tqe=l(),id=a("h2"),t6=a("a"),mpe=a("span"),F(O0.$$.fragment),eHo=l(),gpe=a("span"),oHo=o("AutoModelForAudioClassification"),aqe=l(),Go=a("div"),F(V0.$$.fragment),rHo=l(),dd=a("p"),tHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZV=a("a"),aHo=o("from_pretrained()"),nHo=o(" class method or the "),eX=a("a"),sHo=o("from_config()"),lHo=o(` class
method.`),iHo=l(),X0=a("p"),dHo=o("This class cannot be instantiated directly using "),hpe=a("code"),cHo=o("__init__()"),fHo=o(" (throws an error)."),mHo=l(),pt=a("div"),F(z0.$$.fragment),gHo=l(),ppe=a("p"),hHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pHo=l(),cd=a("p"),uHo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),_Ho=o("not"),bHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),vHo=o("from_pretrained()"),FHo=o(" to load the model weights."),THo=l(),F(a6.$$.fragment),MHo=l(),lo=a("div"),F(Q0.$$.fragment),EHo=l(),_pe=a("p"),CHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wHo=l(),ja=a("p"),AHo=o("The model class to instantiate is selected based on the "),bpe=a("code"),yHo=o("model_type"),LHo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),kHo=o("pretrained_model_name_or_path"),SHo=o(":"),RHo=l(),je=a("ul"),n6=a("li"),Tpe=a("strong"),BHo=o("data2vec-audio"),PHo=o(" \u2014 "),rX=a("a"),IHo=o("Data2VecAudioForSequenceClassification"),qHo=o(" (Data2VecAudio model)"),NHo=l(),s6=a("li"),Mpe=a("strong"),jHo=o("hubert"),DHo=o(" \u2014 "),tX=a("a"),GHo=o("HubertForSequenceClassification"),OHo=o(" (Hubert model)"),VHo=l(),l6=a("li"),Epe=a("strong"),XHo=o("sew"),zHo=o(" \u2014 "),aX=a("a"),QHo=o("SEWForSequenceClassification"),WHo=o(" (SEW model)"),HHo=l(),i6=a("li"),Cpe=a("strong"),UHo=o("sew-d"),JHo=o(" \u2014 "),nX=a("a"),YHo=o("SEWDForSequenceClassification"),KHo=o(" (SEW-D model)"),ZHo=l(),d6=a("li"),wpe=a("strong"),eUo=o("unispeech"),oUo=o(" \u2014 "),sX=a("a"),rUo=o("UniSpeechForSequenceClassification"),tUo=o(" (UniSpeech model)"),aUo=l(),c6=a("li"),Ape=a("strong"),nUo=o("unispeech-sat"),sUo=o(" \u2014 "),lX=a("a"),lUo=o("UniSpeechSatForSequenceClassification"),iUo=o(" (UniSpeechSat model)"),dUo=l(),f6=a("li"),ype=a("strong"),cUo=o("wav2vec2"),fUo=o(" \u2014 "),iX=a("a"),mUo=o("Wav2Vec2ForSequenceClassification"),gUo=o(" (Wav2Vec2 model)"),hUo=l(),m6=a("li"),Lpe=a("strong"),pUo=o("wavlm"),uUo=o(" \u2014 "),dX=a("a"),_Uo=o("WavLMForSequenceClassification"),bUo=o(" (WavLM model)"),vUo=l(),g6=a("p"),FUo=o("The model is set in evaluation mode by default using "),xpe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),EUo=o("model.train()"),CUo=l(),F(h6.$$.fragment),nqe=l(),fd=a("h2"),p6=a("a"),kpe=a("span"),F(W0.$$.fragment),wUo=l(),Spe=a("span"),AUo=o("AutoModelForAudioFrameClassification"),sqe=l(),Oo=a("div"),F(H0.$$.fragment),yUo=l(),md=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cX=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),fX=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),U0=a("p"),BUo=o("This class cannot be instantiated directly using "),Rpe=a("code"),PUo=o("__init__()"),IUo=o(" (throws an error)."),qUo=l(),ut=a("div"),F(J0.$$.fragment),NUo=l(),Bpe=a("p"),jUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),DUo=l(),gd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),QUo=l(),F(u6.$$.fragment),WUo=l(),io=a("div"),F(Y0.$$.fragment),HUo=l(),Ipe=a("p"),UUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JUo=l(),Da=a("p"),YUo=o("The model class to instantiate is selected based on the "),qpe=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),Ga=a("ul"),_6=a("li"),Dpe=a("strong"),nJo=o("data2vec-audio"),sJo=o(" \u2014 "),gX=a("a"),lJo=o("Data2VecAudioForAudioFrameClassification"),iJo=o(" (Data2VecAudio model)"),dJo=l(),b6=a("li"),Gpe=a("strong"),cJo=o("unispeech-sat"),fJo=o(" \u2014 "),hX=a("a"),mJo=o("UniSpeechSatForAudioFrameClassification"),gJo=o(" (UniSpeechSat model)"),hJo=l(),v6=a("li"),Ope=a("strong"),pJo=o("wav2vec2"),uJo=o(" \u2014 "),pX=a("a"),_Jo=o("Wav2Vec2ForAudioFrameClassification"),bJo=o(" (Wav2Vec2 model)"),vJo=l(),F6=a("li"),Vpe=a("strong"),FJo=o("wavlm"),TJo=o(" \u2014 "),uX=a("a"),MJo=o("WavLMForAudioFrameClassification"),EJo=o(" (WavLM model)"),CJo=l(),T6=a("p"),wJo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),LJo=o("model.train()"),xJo=l(),F(M6.$$.fragment),lqe=l(),hd=a("h2"),E6=a("a"),Qpe=a("span"),F(K0.$$.fragment),$Jo=l(),Wpe=a("span"),kJo=o("AutoModelForCTC"),iqe=l(),Vo=a("div"),F(Z0.$$.fragment),SJo=l(),pd=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),bX=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),ey=a("p"),jJo=o("This class cannot be instantiated directly using "),Hpe=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),_t=a("div"),F(oy.$$.fragment),VJo=l(),Upe=a("p"),XJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zJo=l(),ud=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),F(C6.$$.fragment),KJo=l(),co=a("div"),F(ry.$$.fragment),ZJo=l(),Ype=a("p"),eYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oYo=l(),Oa=a("p"),rYo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),De=a("ul"),w6=a("li"),oue=a("strong"),cYo=o("data2vec-audio"),fYo=o(" \u2014 "),FX=a("a"),mYo=o("Data2VecAudioForCTC"),gYo=o(" (Data2VecAudio model)"),hYo=l(),A6=a("li"),rue=a("strong"),pYo=o("hubert"),uYo=o(" \u2014 "),TX=a("a"),_Yo=o("HubertForCTC"),bYo=o(" (Hubert model)"),vYo=l(),y6=a("li"),tue=a("strong"),FYo=o("sew"),TYo=o(" \u2014 "),MX=a("a"),MYo=o("SEWForCTC"),EYo=o(" (SEW model)"),CYo=l(),L6=a("li"),aue=a("strong"),wYo=o("sew-d"),AYo=o(" \u2014 "),EX=a("a"),yYo=o("SEWDForCTC"),LYo=o(" (SEW-D model)"),xYo=l(),x6=a("li"),nue=a("strong"),$Yo=o("unispeech"),kYo=o(" \u2014 "),CX=a("a"),SYo=o("UniSpeechForCTC"),RYo=o(" (UniSpeech model)"),BYo=l(),$6=a("li"),sue=a("strong"),PYo=o("unispeech-sat"),IYo=o(" \u2014 "),wX=a("a"),qYo=o("UniSpeechSatForCTC"),NYo=o(" (UniSpeechSat model)"),jYo=l(),k6=a("li"),lue=a("strong"),DYo=o("wav2vec2"),GYo=o(" \u2014 "),AX=a("a"),OYo=o("Wav2Vec2ForCTC"),VYo=o(" (Wav2Vec2 model)"),XYo=l(),S6=a("li"),iue=a("strong"),zYo=o("wavlm"),QYo=o(" \u2014 "),yX=a("a"),WYo=o("WavLMForCTC"),HYo=o(" (WavLM model)"),UYo=l(),R6=a("p"),JYo=o("The model is set in evaluation mode by default using "),due=a("code"),YYo=o("model.eval()"),KYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),ZYo=o("model.train()"),eKo=l(),F(B6.$$.fragment),dqe=l(),_d=a("h2"),P6=a("a"),fue=a("span"),F(ty.$$.fragment),oKo=l(),mue=a("span"),rKo=o("AutoModelForSpeechSeq2Seq"),cqe=l(),Xo=a("div"),F(ay.$$.fragment),tKo=l(),bd=a("p"),aKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LX=a("a"),nKo=o("from_pretrained()"),sKo=o(" class method or the "),xX=a("a"),lKo=o("from_config()"),iKo=o(` class
method.`),dKo=l(),ny=a("p"),cKo=o("This class cannot be instantiated directly using "),gue=a("code"),fKo=o("__init__()"),mKo=o(" (throws an error)."),gKo=l(),bt=a("div"),F(sy.$$.fragment),hKo=l(),hue=a("p"),pKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uKo=l(),vd=a("p"),_Ko=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),bKo=o("not"),vKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),FKo=o("from_pretrained()"),TKo=o(" to load the model weights."),MKo=l(),F(I6.$$.fragment),EKo=l(),fo=a("div"),F(ly.$$.fragment),CKo=l(),uue=a("p"),wKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),AKo=l(),Va=a("p"),yKo=o("The model class to instantiate is selected based on the "),_ue=a("code"),LKo=o("model_type"),xKo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),$Ko=o("pretrained_model_name_or_path"),kKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),SKo=o("pretrained_model_name_or_path"),RKo=o(":"),BKo=l(),iy=a("ul"),q6=a("li"),Fue=a("strong"),PKo=o("speech-encoder-decoder"),IKo=o(" \u2014 "),kX=a("a"),qKo=o("SpeechEncoderDecoderModel"),NKo=o(" (Speech Encoder decoder model)"),jKo=l(),N6=a("li"),Tue=a("strong"),DKo=o("speech_to_text"),GKo=o(" \u2014 "),SX=a("a"),OKo=o("Speech2TextForConditionalGeneration"),VKo=o(" (Speech2Text model)"),XKo=l(),j6=a("p"),zKo=o("The model is set in evaluation mode by default using "),Mue=a("code"),QKo=o("model.eval()"),WKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),HKo=o("model.train()"),UKo=l(),F(D6.$$.fragment),fqe=l(),Fd=a("h2"),G6=a("a"),Cue=a("span"),F(dy.$$.fragment),JKo=l(),wue=a("span"),YKo=o("AutoModelForAudioXVector"),mqe=l(),zo=a("div"),F(cy.$$.fragment),KKo=l(),Td=a("p"),ZKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RX=a("a"),eZo=o("from_pretrained()"),oZo=o(" class method or the "),BX=a("a"),rZo=o("from_config()"),tZo=o(` class
method.`),aZo=l(),fy=a("p"),nZo=o("This class cannot be instantiated directly using "),Aue=a("code"),sZo=o("__init__()"),lZo=o(" (throws an error)."),iZo=l(),vt=a("div"),F(my.$$.fragment),dZo=l(),yue=a("p"),cZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fZo=l(),Md=a("p"),mZo=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),gZo=o("not"),hZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),pZo=o("from_pretrained()"),uZo=o(" to load the model weights."),_Zo=l(),F(O6.$$.fragment),bZo=l(),mo=a("div"),F(gy.$$.fragment),vZo=l(),xue=a("p"),FZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TZo=l(),Xa=a("p"),MZo=o("The model class to instantiate is selected based on the "),$ue=a("code"),EZo=o("model_type"),CZo=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),yZo=o("pretrained_model_name_or_path"),LZo=o(":"),xZo=l(),za=a("ul"),V6=a("li"),Rue=a("strong"),$Zo=o("data2vec-audio"),kZo=o(" \u2014 "),IX=a("a"),SZo=o("Data2VecAudioForXVector"),RZo=o(" (Data2VecAudio model)"),BZo=l(),X6=a("li"),Bue=a("strong"),PZo=o("unispeech-sat"),IZo=o(" \u2014 "),qX=a("a"),qZo=o("UniSpeechSatForXVector"),NZo=o(" (UniSpeechSat model)"),jZo=l(),z6=a("li"),Pue=a("strong"),DZo=o("wav2vec2"),GZo=o(" \u2014 "),NX=a("a"),OZo=o("Wav2Vec2ForXVector"),VZo=o(" (Wav2Vec2 model)"),XZo=l(),Q6=a("li"),Iue=a("strong"),zZo=o("wavlm"),QZo=o(" \u2014 "),jX=a("a"),WZo=o("WavLMForXVector"),HZo=o(" (WavLM model)"),UZo=l(),W6=a("p"),JZo=o("The model is set in evaluation mode by default using "),que=a("code"),YZo=o("model.eval()"),KZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),ZZo=o("model.train()"),eer=l(),F(H6.$$.fragment),gqe=l(),Ed=a("h2"),U6=a("a"),jue=a("span"),F(hy.$$.fragment),oer=l(),Due=a("span"),rer=o("AutoModelForMaskedImageModeling"),hqe=l(),Qo=a("div"),F(py.$$.fragment),ter=l(),Cd=a("p"),aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DX=a("a"),ner=o("from_pretrained()"),ser=o(" class method or the "),GX=a("a"),ler=o("from_config()"),ier=o(` class
method.`),der=l(),uy=a("p"),cer=o("This class cannot be instantiated directly using "),Gue=a("code"),fer=o("__init__()"),mer=o(" (throws an error)."),ger=l(),Ft=a("div"),F(_y.$$.fragment),her=l(),Oue=a("p"),per=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uer=l(),wd=a("p"),_er=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),ber=o("not"),ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),Fer=o("from_pretrained()"),Ter=o(" to load the model weights."),Mer=l(),F(J6.$$.fragment),Eer=l(),go=a("div"),F(by.$$.fragment),Cer=l(),Xue=a("p"),wer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Aer=l(),Qa=a("p"),yer=o("The model class to instantiate is selected based on the "),zue=a("code"),Ler=o("model_type"),xer=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),$er=o("pretrained_model_name_or_path"),ker=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(":"),Ber=l(),Ad=a("ul"),Y6=a("li"),Hue=a("strong"),Per=o("deit"),Ier=o(" \u2014 "),VX=a("a"),qer=o("DeiTForMaskedImageModeling"),Ner=o(" (DeiT model)"),jer=l(),K6=a("li"),Uue=a("strong"),Der=o("swin"),Ger=o(" \u2014 "),XX=a("a"),Oer=o("SwinForMaskedImageModeling"),Ver=o(" (Swin model)"),Xer=l(),Z6=a("li"),Jue=a("strong"),zer=o("vit"),Qer=o(" \u2014 "),zX=a("a"),Wer=o("ViTForMaskedImageModeling"),Her=o(" (ViT model)"),Uer=l(),eT=a("p"),Jer=o("The model is set in evaluation mode by default using "),Yue=a("code"),Yer=o("model.eval()"),Ker=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),Zer=o("model.train()"),eor=l(),F(oT.$$.fragment),pqe=l(),yd=a("h2"),rT=a("a"),Zue=a("span"),F(vy.$$.fragment),oor=l(),e_e=a("span"),ror=o("AutoModelForObjectDetection"),uqe=l(),Wo=a("div"),F(Fy.$$.fragment),tor=l(),Ld=a("p"),aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QX=a("a"),nor=o("from_pretrained()"),sor=o(" class method or the "),WX=a("a"),lor=o("from_config()"),ior=o(` class
method.`),dor=l(),Ty=a("p"),cor=o("This class cannot be instantiated directly using "),o_e=a("code"),mor=o("__init__()"),gor=o(" (throws an error)."),hor=l(),Tt=a("div"),F(My.$$.fragment),por=l(),r_e=a("p"),uor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_or=l(),xd=a("p"),bor=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),vor=o("not"),For=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),Tor=o("from_pretrained()"),Mor=o(" to load the model weights."),Eor=l(),F(tT.$$.fragment),Cor=l(),ho=a("div"),F(Ey.$$.fragment),wor=l(),a_e=a("p"),Aor=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),yor=l(),Wa=a("p"),Lor=o("The model class to instantiate is selected based on the "),n_e=a("code"),xor=o("model_type"),$or=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),kor=o("pretrained_model_name_or_path"),Sor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),Ror=o("pretrained_model_name_or_path"),Bor=o(":"),Por=l(),Cy=a("ul"),aT=a("li"),i_e=a("strong"),Ior=o("detr"),qor=o(" \u2014 "),UX=a("a"),Nor=o("DetrForObjectDetection"),jor=o(" (DETR model)"),Dor=l(),nT=a("li"),d_e=a("strong"),Gor=o("yolos"),Oor=o(" \u2014 "),JX=a("a"),Vor=o("YolosForObjectDetection"),Xor=o(" (YOLOS model)"),zor=l(),sT=a("p"),Qor=o("The model is set in evaluation mode by default using "),c_e=a("code"),Wor=o("model.eval()"),Hor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),Uor=o("model.train()"),Jor=l(),F(lT.$$.fragment),_qe=l(),$d=a("h2"),iT=a("a"),m_e=a("span"),F(wy.$$.fragment),Yor=l(),g_e=a("span"),Kor=o("AutoModelForImageSegmentation"),bqe=l(),Ho=a("div"),F(Ay.$$.fragment),Zor=l(),kd=a("p"),err=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YX=a("a"),orr=o("from_pretrained()"),rrr=o(" class method or the "),KX=a("a"),trr=o("from_config()"),arr=o(` class
method.`),nrr=l(),yy=a("p"),srr=o("This class cannot be instantiated directly using "),h_e=a("code"),lrr=o("__init__()"),irr=o(" (throws an error)."),drr=l(),Mt=a("div"),F(Ly.$$.fragment),crr=l(),p_e=a("p"),frr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mrr=l(),Sd=a("p"),grr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),hrr=o("not"),prr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),urr=o("from_pretrained()"),_rr=o(" to load the model weights."),brr=l(),F(dT.$$.fragment),vrr=l(),po=a("div"),F(xy.$$.fragment),Frr=l(),__e=a("p"),Trr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Mrr=l(),Ha=a("p"),Err=o("The model class to instantiate is selected based on the "),b_e=a("code"),Crr=o("model_type"),wrr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),Arr=o("pretrained_model_name_or_path"),yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),Lrr=o("pretrained_model_name_or_path"),xrr=o(":"),$rr=l(),T_e=a("ul"),cT=a("li"),M_e=a("strong"),krr=o("detr"),Srr=o(" \u2014 "),ez=a("a"),Rrr=o("DetrForSegmentation"),Brr=o(" (DETR model)"),Prr=l(),fT=a("p"),Irr=o("The model is set in evaluation mode by default using "),E_e=a("code"),qrr=o("model.eval()"),Nrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),jrr=o("model.train()"),Drr=l(),F(mT.$$.fragment),vqe=l(),Rd=a("h2"),gT=a("a"),w_e=a("span"),F($y.$$.fragment),Grr=l(),A_e=a("span"),Orr=o("AutoModelForSemanticSegmentation"),Fqe=l(),Uo=a("div"),F(ky.$$.fragment),Vrr=l(),Bd=a("p"),Xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oz=a("a"),zrr=o("from_pretrained()"),Qrr=o(" class method or the "),rz=a("a"),Wrr=o("from_config()"),Hrr=o(` class
method.`),Urr=l(),Sy=a("p"),Jrr=o("This class cannot be instantiated directly using "),y_e=a("code"),Yrr=o("__init__()"),Krr=o(" (throws an error)."),Zrr=l(),Et=a("div"),F(Ry.$$.fragment),etr=l(),L_e=a("p"),otr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rtr=l(),Pd=a("p"),ttr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),atr=o("not"),ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),str=o("from_pretrained()"),ltr=o(" to load the model weights."),itr=l(),F(hT.$$.fragment),dtr=l(),uo=a("div"),F(By.$$.fragment),ctr=l(),$_e=a("p"),ftr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mtr=l(),Ua=a("p"),gtr=o("The model class to instantiate is selected based on the "),k_e=a("code"),htr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),utr=o("pretrained_model_name_or_path"),_tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(":"),Ftr=l(),Ja=a("ul"),pT=a("li"),B_e=a("strong"),Ttr=o("beit"),Mtr=o(" \u2014 "),az=a("a"),Etr=o("BeitForSemanticSegmentation"),Ctr=o(" (BEiT model)"),wtr=l(),uT=a("li"),P_e=a("strong"),Atr=o("data2vec-vision"),ytr=o(" \u2014 "),nz=a("a"),Ltr=o("Data2VecVisionForSemanticSegmentation"),xtr=o(" (Data2VecVision model)"),$tr=l(),_T=a("li"),I_e=a("strong"),ktr=o("dpt"),Str=o(" \u2014 "),sz=a("a"),Rtr=o("DPTForSemanticSegmentation"),Btr=o(" (DPT model)"),Ptr=l(),bT=a("li"),q_e=a("strong"),Itr=o("segformer"),qtr=o(" \u2014 "),lz=a("a"),Ntr=o("SegformerForSemanticSegmentation"),jtr=o(" (SegFormer model)"),Dtr=l(),vT=a("p"),Gtr=o("The model is set in evaluation mode by default using "),N_e=a("code"),Otr=o("model.eval()"),Vtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),Xtr=o("model.train()"),ztr=l(),F(FT.$$.fragment),Tqe=l(),Id=a("h2"),TT=a("a"),D_e=a("span"),F(Py.$$.fragment),Qtr=l(),G_e=a("span"),Wtr=o("AutoModelForInstanceSegmentation"),Mqe=l(),Jo=a("div"),F(Iy.$$.fragment),Htr=l(),qd=a("p"),Utr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iz=a("a"),Jtr=o("from_pretrained()"),Ytr=o(" class method or the "),dz=a("a"),Ktr=o("from_config()"),Ztr=o(` class
method.`),ear=l(),qy=a("p"),oar=o("This class cannot be instantiated directly using "),O_e=a("code"),rar=o("__init__()"),tar=o(" (throws an error)."),aar=l(),Ct=a("div"),F(Ny.$$.fragment),nar=l(),V_e=a("p"),sar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lar=l(),Nd=a("p"),iar=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),dar=o("not"),car=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),far=o("from_pretrained()"),mar=o(" to load the model weights."),gar=l(),F(MT.$$.fragment),har=l(),_o=a("div"),F(jy.$$.fragment),par=l(),z_e=a("p"),uar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_ar=l(),Ya=a("p"),bar=o("The model class to instantiate is selected based on the "),Q_e=a("code"),Far=o("model_type"),Tar=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),Car=o("pretrained_model_name_or_path"),war=o(":"),Aar=l(),U_e=a("ul"),ET=a("li"),J_e=a("strong"),yar=o("maskformer"),Lar=o(" \u2014 "),fz=a("a"),xar=o("MaskFormerForInstanceSegmentation"),$ar=o(" (MaskFormer model)"),kar=l(),CT=a("p"),Sar=o("The model is set in evaluation mode by default using "),Y_e=a("code"),Rar=o("model.eval()"),Bar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),Par=o("model.train()"),Iar=l(),F(wT.$$.fragment),Eqe=l(),jd=a("h2"),AT=a("a"),Z_e=a("span"),F(Dy.$$.fragment),qar=l(),e2e=a("span"),Nar=o("TFAutoModel"),Cqe=l(),Yo=a("div"),F(Gy.$$.fragment),jar=l(),Dd=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mz=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),gz=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),Oy=a("p"),Qar=o("This class cannot be instantiated directly using "),o2e=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),wt=a("div"),F(Vy.$$.fragment),Jar=l(),r2e=a("p"),Yar=o("Instantiates one of the base model classes of the library from a configuration."),Kar=l(),Gd=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),F(yT.$$.fragment),nnr=l(),wr=a("div"),F(Xy.$$.fragment),snr=l(),a2e=a("p"),lnr=o("Instantiate one of the base model classes of the library from a pretrained model."),inr=l(),Ka=a("p"),dnr=o("The model class to instantiate is selected based on the "),n2e=a("code"),cnr=o("model_type"),fnr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),mnr=o("pretrained_model_name_or_path"),gnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(":"),unr=l(),N=a("ul"),LT=a("li"),i2e=a("strong"),_nr=o("albert"),bnr=o(" \u2014 "),pz=a("a"),vnr=o("TFAlbertModel"),Fnr=o(" (ALBERT model)"),Tnr=l(),xT=a("li"),d2e=a("strong"),Mnr=o("bart"),Enr=o(" \u2014 "),uz=a("a"),Cnr=o("TFBartModel"),wnr=o(" (BART model)"),Anr=l(),$T=a("li"),c2e=a("strong"),ynr=o("bert"),Lnr=o(" \u2014 "),_z=a("a"),xnr=o("TFBertModel"),$nr=o(" (BERT model)"),knr=l(),kT=a("li"),f2e=a("strong"),Snr=o("blenderbot"),Rnr=o(" \u2014 "),bz=a("a"),Bnr=o("TFBlenderbotModel"),Pnr=o(" (Blenderbot model)"),Inr=l(),ST=a("li"),m2e=a("strong"),qnr=o("blenderbot-small"),Nnr=o(" \u2014 "),vz=a("a"),jnr=o("TFBlenderbotSmallModel"),Dnr=o(" (BlenderbotSmall model)"),Gnr=l(),RT=a("li"),g2e=a("strong"),Onr=o("camembert"),Vnr=o(" \u2014 "),Fz=a("a"),Xnr=o("TFCamembertModel"),znr=o(" (CamemBERT model)"),Qnr=l(),BT=a("li"),h2e=a("strong"),Wnr=o("clip"),Hnr=o(" \u2014 "),Tz=a("a"),Unr=o("TFCLIPModel"),Jnr=o(" (CLIP model)"),Ynr=l(),PT=a("li"),p2e=a("strong"),Knr=o("convbert"),Znr=o(" \u2014 "),Mz=a("a"),esr=o("TFConvBertModel"),osr=o(" (ConvBERT model)"),rsr=l(),IT=a("li"),u2e=a("strong"),tsr=o("convnext"),asr=o(" \u2014 "),Ez=a("a"),nsr=o("TFConvNextModel"),ssr=o(" (ConvNext model)"),lsr=l(),qT=a("li"),_2e=a("strong"),isr=o("ctrl"),dsr=o(" \u2014 "),Cz=a("a"),csr=o("TFCTRLModel"),fsr=o(" (CTRL model)"),msr=l(),NT=a("li"),b2e=a("strong"),gsr=o("data2vec-vision"),hsr=o(" \u2014 "),wz=a("a"),psr=o("TFData2VecVisionModel"),usr=o(" (Data2VecVision model)"),_sr=l(),jT=a("li"),v2e=a("strong"),bsr=o("deberta"),vsr=o(" \u2014 "),Az=a("a"),Fsr=o("TFDebertaModel"),Tsr=o(" (DeBERTa model)"),Msr=l(),DT=a("li"),F2e=a("strong"),Esr=o("deberta-v2"),Csr=o(" \u2014 "),yz=a("a"),wsr=o("TFDebertaV2Model"),Asr=o(" (DeBERTa-v2 model)"),ysr=l(),GT=a("li"),T2e=a("strong"),Lsr=o("distilbert"),xsr=o(" \u2014 "),Lz=a("a"),$sr=o("TFDistilBertModel"),ksr=o(" (DistilBERT model)"),Ssr=l(),OT=a("li"),M2e=a("strong"),Rsr=o("dpr"),Bsr=o(" \u2014 "),xz=a("a"),Psr=o("TFDPRQuestionEncoder"),Isr=o(" (DPR model)"),qsr=l(),VT=a("li"),E2e=a("strong"),Nsr=o("electra"),jsr=o(" \u2014 "),$z=a("a"),Dsr=o("TFElectraModel"),Gsr=o(" (ELECTRA model)"),Osr=l(),XT=a("li"),C2e=a("strong"),Vsr=o("flaubert"),Xsr=o(" \u2014 "),kz=a("a"),zsr=o("TFFlaubertModel"),Qsr=o(" (FlauBERT model)"),Wsr=l(),Is=a("li"),w2e=a("strong"),Hsr=o("funnel"),Usr=o(" \u2014 "),Sz=a("a"),Jsr=o("TFFunnelModel"),Ysr=o(" or "),Rz=a("a"),Ksr=o("TFFunnelBaseModel"),Zsr=o(" (Funnel Transformer model)"),elr=l(),zT=a("li"),A2e=a("strong"),olr=o("gpt2"),rlr=o(" \u2014 "),Bz=a("a"),tlr=o("TFGPT2Model"),alr=o(" (OpenAI GPT-2 model)"),nlr=l(),QT=a("li"),y2e=a("strong"),slr=o("gptj"),llr=o(" \u2014 "),Pz=a("a"),ilr=o("TFGPTJModel"),dlr=o(" (GPT-J model)"),clr=l(),WT=a("li"),L2e=a("strong"),flr=o("hubert"),mlr=o(" \u2014 "),Iz=a("a"),glr=o("TFHubertModel"),hlr=o(" (Hubert model)"),plr=l(),HT=a("li"),x2e=a("strong"),ulr=o("layoutlm"),_lr=o(" \u2014 "),qz=a("a"),blr=o("TFLayoutLMModel"),vlr=o(" (LayoutLM model)"),Flr=l(),UT=a("li"),$2e=a("strong"),Tlr=o("led"),Mlr=o(" \u2014 "),Nz=a("a"),Elr=o("TFLEDModel"),Clr=o(" (LED model)"),wlr=l(),JT=a("li"),k2e=a("strong"),Alr=o("longformer"),ylr=o(" \u2014 "),jz=a("a"),Llr=o("TFLongformerModel"),xlr=o(" (Longformer model)"),$lr=l(),YT=a("li"),S2e=a("strong"),klr=o("lxmert"),Slr=o(" \u2014 "),Dz=a("a"),Rlr=o("TFLxmertModel"),Blr=o(" (LXMERT model)"),Plr=l(),KT=a("li"),R2e=a("strong"),Ilr=o("marian"),qlr=o(" \u2014 "),Gz=a("a"),Nlr=o("TFMarianModel"),jlr=o(" (Marian model)"),Dlr=l(),ZT=a("li"),B2e=a("strong"),Glr=o("mbart"),Olr=o(" \u2014 "),Oz=a("a"),Vlr=o("TFMBartModel"),Xlr=o(" (mBART model)"),zlr=l(),e9=a("li"),P2e=a("strong"),Qlr=o("mobilebert"),Wlr=o(" \u2014 "),Vz=a("a"),Hlr=o("TFMobileBertModel"),Ulr=o(" (MobileBERT model)"),Jlr=l(),o9=a("li"),I2e=a("strong"),Ylr=o("mpnet"),Klr=o(" \u2014 "),Xz=a("a"),Zlr=o("TFMPNetModel"),eir=o(" (MPNet model)"),oir=l(),r9=a("li"),q2e=a("strong"),rir=o("mt5"),tir=o(" \u2014 "),zz=a("a"),air=o("TFMT5Model"),nir=o(" (mT5 model)"),sir=l(),t9=a("li"),N2e=a("strong"),lir=o("openai-gpt"),iir=o(" \u2014 "),Qz=a("a"),dir=o("TFOpenAIGPTModel"),cir=o(" (OpenAI GPT model)"),fir=l(),a9=a("li"),j2e=a("strong"),mir=o("pegasus"),gir=o(" \u2014 "),Wz=a("a"),hir=o("TFPegasusModel"),pir=o(" (Pegasus model)"),uir=l(),n9=a("li"),D2e=a("strong"),_ir=o("rembert"),bir=o(" \u2014 "),Hz=a("a"),vir=o("TFRemBertModel"),Fir=o(" (RemBERT model)"),Tir=l(),s9=a("li"),G2e=a("strong"),Mir=o("roberta"),Eir=o(" \u2014 "),Uz=a("a"),Cir=o("TFRobertaModel"),wir=o(" (RoBERTa model)"),Air=l(),l9=a("li"),O2e=a("strong"),yir=o("roformer"),Lir=o(" \u2014 "),Jz=a("a"),xir=o("TFRoFormerModel"),$ir=o(" (RoFormer model)"),kir=l(),i9=a("li"),V2e=a("strong"),Sir=o("speech_to_text"),Rir=o(" \u2014 "),Yz=a("a"),Bir=o("TFSpeech2TextModel"),Pir=o(" (Speech2Text model)"),Iir=l(),d9=a("li"),X2e=a("strong"),qir=o("swin"),Nir=o(" \u2014 "),Kz=a("a"),jir=o("TFSwinModel"),Dir=o(" (Swin model)"),Gir=l(),c9=a("li"),z2e=a("strong"),Oir=o("t5"),Vir=o(" \u2014 "),Zz=a("a"),Xir=o("TFT5Model"),zir=o(" (T5 model)"),Qir=l(),f9=a("li"),Q2e=a("strong"),Wir=o("tapas"),Hir=o(" \u2014 "),eQ=a("a"),Uir=o("TFTapasModel"),Jir=o(" (TAPAS model)"),Yir=l(),m9=a("li"),W2e=a("strong"),Kir=o("transfo-xl"),Zir=o(" \u2014 "),oQ=a("a"),edr=o("TFTransfoXLModel"),odr=o(" (Transformer-XL model)"),rdr=l(),g9=a("li"),H2e=a("strong"),tdr=o("vit"),adr=o(" \u2014 "),rQ=a("a"),ndr=o("TFViTModel"),sdr=o(" (ViT model)"),ldr=l(),h9=a("li"),U2e=a("strong"),idr=o("vit_mae"),ddr=o(" \u2014 "),tQ=a("a"),cdr=o("TFViTMAEModel"),fdr=o(" (ViTMAE model)"),mdr=l(),p9=a("li"),J2e=a("strong"),gdr=o("wav2vec2"),hdr=o(" \u2014 "),aQ=a("a"),pdr=o("TFWav2Vec2Model"),udr=o(" (Wav2Vec2 model)"),_dr=l(),u9=a("li"),Y2e=a("strong"),bdr=o("xlm"),vdr=o(" \u2014 "),nQ=a("a"),Fdr=o("TFXLMModel"),Tdr=o(" (XLM model)"),Mdr=l(),_9=a("li"),K2e=a("strong"),Edr=o("xlm-roberta"),Cdr=o(" \u2014 "),sQ=a("a"),wdr=o("TFXLMRobertaModel"),Adr=o(" (XLM-RoBERTa model)"),ydr=l(),b9=a("li"),Z2e=a("strong"),Ldr=o("xlnet"),xdr=o(" \u2014 "),lQ=a("a"),$dr=o("TFXLNetModel"),kdr=o(" (XLNet model)"),Sdr=l(),F(v9.$$.fragment),wqe=l(),Od=a("h2"),F9=a("a"),e1e=a("span"),F(zy.$$.fragment),Rdr=l(),o1e=a("span"),Bdr=o("TFAutoModelForPreTraining"),Aqe=l(),Ko=a("div"),F(Qy.$$.fragment),Pdr=l(),Vd=a("p"),Idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=a("a"),qdr=o("from_pretrained()"),Ndr=o(" class method or the "),dQ=a("a"),jdr=o("from_config()"),Ddr=o(` class
method.`),Gdr=l(),Wy=a("p"),Odr=o("This class cannot be instantiated directly using "),r1e=a("code"),Vdr=o("__init__()"),Xdr=o(" (throws an error)."),zdr=l(),At=a("div"),F(Hy.$$.fragment),Qdr=l(),t1e=a("p"),Wdr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hdr=l(),Xd=a("p"),Udr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Jdr=o("not"),Ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" to load the model weights."),ecr=l(),F(T9.$$.fragment),ocr=l(),Ar=a("div"),F(Uy.$$.fragment),rcr=l(),n1e=a("p"),tcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),acr=l(),Za=a("p"),ncr=o("The model class to instantiate is selected based on the "),s1e=a("code"),scr=o("model_type"),lcr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),icr=o("pretrained_model_name_or_path"),dcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(":"),mcr=l(),se=a("ul"),M9=a("li"),d1e=a("strong"),gcr=o("albert"),hcr=o(" \u2014 "),fQ=a("a"),pcr=o("TFAlbertForPreTraining"),ucr=o(" (ALBERT model)"),_cr=l(),E9=a("li"),c1e=a("strong"),bcr=o("bart"),vcr=o(" \u2014 "),mQ=a("a"),Fcr=o("TFBartForConditionalGeneration"),Tcr=o(" (BART model)"),Mcr=l(),C9=a("li"),f1e=a("strong"),Ecr=o("bert"),Ccr=o(" \u2014 "),gQ=a("a"),wcr=o("TFBertForPreTraining"),Acr=o(" (BERT model)"),ycr=l(),w9=a("li"),m1e=a("strong"),Lcr=o("camembert"),xcr=o(" \u2014 "),hQ=a("a"),$cr=o("TFCamembertForMaskedLM"),kcr=o(" (CamemBERT model)"),Scr=l(),A9=a("li"),g1e=a("strong"),Rcr=o("ctrl"),Bcr=o(" \u2014 "),pQ=a("a"),Pcr=o("TFCTRLLMHeadModel"),Icr=o(" (CTRL model)"),qcr=l(),y9=a("li"),h1e=a("strong"),Ncr=o("distilbert"),jcr=o(" \u2014 "),uQ=a("a"),Dcr=o("TFDistilBertForMaskedLM"),Gcr=o(" (DistilBERT model)"),Ocr=l(),L9=a("li"),p1e=a("strong"),Vcr=o("electra"),Xcr=o(" \u2014 "),_Q=a("a"),zcr=o("TFElectraForPreTraining"),Qcr=o(" (ELECTRA model)"),Wcr=l(),x9=a("li"),u1e=a("strong"),Hcr=o("flaubert"),Ucr=o(" \u2014 "),bQ=a("a"),Jcr=o("TFFlaubertWithLMHeadModel"),Ycr=o(" (FlauBERT model)"),Kcr=l(),$9=a("li"),_1e=a("strong"),Zcr=o("funnel"),efr=o(" \u2014 "),vQ=a("a"),ofr=o("TFFunnelForPreTraining"),rfr=o(" (Funnel Transformer model)"),tfr=l(),k9=a("li"),b1e=a("strong"),afr=o("gpt2"),nfr=o(" \u2014 "),FQ=a("a"),sfr=o("TFGPT2LMHeadModel"),lfr=o(" (OpenAI GPT-2 model)"),ifr=l(),S9=a("li"),v1e=a("strong"),dfr=o("layoutlm"),cfr=o(" \u2014 "),TQ=a("a"),ffr=o("TFLayoutLMForMaskedLM"),mfr=o(" (LayoutLM model)"),gfr=l(),R9=a("li"),F1e=a("strong"),hfr=o("lxmert"),pfr=o(" \u2014 "),MQ=a("a"),ufr=o("TFLxmertForPreTraining"),_fr=o(" (LXMERT model)"),bfr=l(),B9=a("li"),T1e=a("strong"),vfr=o("mobilebert"),Ffr=o(" \u2014 "),EQ=a("a"),Tfr=o("TFMobileBertForPreTraining"),Mfr=o(" (MobileBERT model)"),Efr=l(),P9=a("li"),M1e=a("strong"),Cfr=o("mpnet"),wfr=o(" \u2014 "),CQ=a("a"),Afr=o("TFMPNetForMaskedLM"),yfr=o(" (MPNet model)"),Lfr=l(),I9=a("li"),E1e=a("strong"),xfr=o("openai-gpt"),$fr=o(" \u2014 "),wQ=a("a"),kfr=o("TFOpenAIGPTLMHeadModel"),Sfr=o(" (OpenAI GPT model)"),Rfr=l(),q9=a("li"),C1e=a("strong"),Bfr=o("roberta"),Pfr=o(" \u2014 "),AQ=a("a"),Ifr=o("TFRobertaForMaskedLM"),qfr=o(" (RoBERTa model)"),Nfr=l(),N9=a("li"),w1e=a("strong"),jfr=o("t5"),Dfr=o(" \u2014 "),yQ=a("a"),Gfr=o("TFT5ForConditionalGeneration"),Ofr=o(" (T5 model)"),Vfr=l(),j9=a("li"),A1e=a("strong"),Xfr=o("tapas"),zfr=o(" \u2014 "),LQ=a("a"),Qfr=o("TFTapasForMaskedLM"),Wfr=o(" (TAPAS model)"),Hfr=l(),D9=a("li"),y1e=a("strong"),Ufr=o("transfo-xl"),Jfr=o(" \u2014 "),xQ=a("a"),Yfr=o("TFTransfoXLLMHeadModel"),Kfr=o(" (Transformer-XL model)"),Zfr=l(),G9=a("li"),L1e=a("strong"),emr=o("vit_mae"),omr=o(" \u2014 "),$Q=a("a"),rmr=o("TFViTMAEForPreTraining"),tmr=o(" (ViTMAE model)"),amr=l(),O9=a("li"),x1e=a("strong"),nmr=o("xlm"),smr=o(" \u2014 "),kQ=a("a"),lmr=o("TFXLMWithLMHeadModel"),imr=o(" (XLM model)"),dmr=l(),V9=a("li"),$1e=a("strong"),cmr=o("xlm-roberta"),fmr=o(" \u2014 "),SQ=a("a"),mmr=o("TFXLMRobertaForMaskedLM"),gmr=o(" (XLM-RoBERTa model)"),hmr=l(),X9=a("li"),k1e=a("strong"),pmr=o("xlnet"),umr=o(" \u2014 "),RQ=a("a"),_mr=o("TFXLNetLMHeadModel"),bmr=o(" (XLNet model)"),vmr=l(),F(z9.$$.fragment),yqe=l(),zd=a("h2"),Q9=a("a"),S1e=a("span"),F(Jy.$$.fragment),Fmr=l(),R1e=a("span"),Tmr=o("TFAutoModelForCausalLM"),Lqe=l(),Zo=a("div"),F(Yy.$$.fragment),Mmr=l(),Qd=a("p"),Emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BQ=a("a"),Cmr=o("from_pretrained()"),wmr=o(" class method or the "),PQ=a("a"),Amr=o("from_config()"),ymr=o(` class
method.`),Lmr=l(),Ky=a("p"),xmr=o("This class cannot be instantiated directly using "),B1e=a("code"),$mr=o("__init__()"),kmr=o(" (throws an error)."),Smr=l(),yt=a("div"),F(Zy.$$.fragment),Rmr=l(),P1e=a("p"),Bmr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pmr=l(),Wd=a("p"),Imr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),qmr=o("not"),Nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),jmr=o("from_pretrained()"),Dmr=o(" to load the model weights."),Gmr=l(),F(W9.$$.fragment),Omr=l(),yr=a("div"),F(eL.$$.fragment),Vmr=l(),q1e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zmr=l(),en=a("p"),Qmr=o("The model class to instantiate is selected based on the "),N1e=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),Me=a("ul"),H9=a("li"),G1e=a("strong"),egr=o("bert"),ogr=o(" \u2014 "),qQ=a("a"),rgr=o("TFBertLMHeadModel"),tgr=o(" (BERT model)"),agr=l(),U9=a("li"),O1e=a("strong"),ngr=o("camembert"),sgr=o(" \u2014 "),NQ=a("a"),lgr=o("TFCamembertForCausalLM"),igr=o(" (CamemBERT model)"),dgr=l(),J9=a("li"),V1e=a("strong"),cgr=o("ctrl"),fgr=o(" \u2014 "),jQ=a("a"),mgr=o("TFCTRLLMHeadModel"),ggr=o(" (CTRL model)"),hgr=l(),Y9=a("li"),X1e=a("strong"),pgr=o("gpt2"),ugr=o(" \u2014 "),DQ=a("a"),_gr=o("TFGPT2LMHeadModel"),bgr=o(" (OpenAI GPT-2 model)"),vgr=l(),K9=a("li"),z1e=a("strong"),Fgr=o("gptj"),Tgr=o(" \u2014 "),GQ=a("a"),Mgr=o("TFGPTJForCausalLM"),Egr=o(" (GPT-J model)"),Cgr=l(),Z9=a("li"),Q1e=a("strong"),wgr=o("openai-gpt"),Agr=o(" \u2014 "),OQ=a("a"),ygr=o("TFOpenAIGPTLMHeadModel"),Lgr=o(" (OpenAI GPT model)"),xgr=l(),e7=a("li"),W1e=a("strong"),$gr=o("rembert"),kgr=o(" \u2014 "),VQ=a("a"),Sgr=o("TFRemBertForCausalLM"),Rgr=o(" (RemBERT model)"),Bgr=l(),o7=a("li"),H1e=a("strong"),Pgr=o("roberta"),Igr=o(" \u2014 "),XQ=a("a"),qgr=o("TFRobertaForCausalLM"),Ngr=o(" (RoBERTa model)"),jgr=l(),r7=a("li"),U1e=a("strong"),Dgr=o("roformer"),Ggr=o(" \u2014 "),zQ=a("a"),Ogr=o("TFRoFormerForCausalLM"),Vgr=o(" (RoFormer model)"),Xgr=l(),t7=a("li"),J1e=a("strong"),zgr=o("transfo-xl"),Qgr=o(" \u2014 "),QQ=a("a"),Wgr=o("TFTransfoXLLMHeadModel"),Hgr=o(" (Transformer-XL model)"),Ugr=l(),a7=a("li"),Y1e=a("strong"),Jgr=o("xlm"),Ygr=o(" \u2014 "),WQ=a("a"),Kgr=o("TFXLMWithLMHeadModel"),Zgr=o(" (XLM model)"),ehr=l(),n7=a("li"),K1e=a("strong"),ohr=o("xlnet"),rhr=o(" \u2014 "),HQ=a("a"),thr=o("TFXLNetLMHeadModel"),ahr=o(" (XLNet model)"),nhr=l(),F(s7.$$.fragment),xqe=l(),Hd=a("h2"),l7=a("a"),Z1e=a("span"),F(oL.$$.fragment),shr=l(),ebe=a("span"),lhr=o("TFAutoModelForImageClassification"),$qe=l(),er=a("div"),F(rL.$$.fragment),ihr=l(),Ud=a("p"),dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UQ=a("a"),chr=o("from_pretrained()"),fhr=o(" class method or the "),JQ=a("a"),mhr=o("from_config()"),ghr=o(` class
method.`),hhr=l(),tL=a("p"),phr=o("This class cannot be instantiated directly using "),obe=a("code"),uhr=o("__init__()"),_hr=o(" (throws an error)."),bhr=l(),Lt=a("div"),F(aL.$$.fragment),vhr=l(),rbe=a("p"),Fhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Thr=l(),Jd=a("p"),Mhr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Ehr=o("not"),Chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" to load the model weights."),yhr=l(),F(i7.$$.fragment),Lhr=l(),Lr=a("div"),F(nL.$$.fragment),xhr=l(),abe=a("p"),$hr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),khr=l(),on=a("p"),Shr=o("The model class to instantiate is selected based on the "),nbe=a("code"),Rhr=o("model_type"),Bhr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),Phr=o("pretrained_model_name_or_path"),Ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),qhr=o("pretrained_model_name_or_path"),Nhr=o(":"),jhr=l(),rn=a("ul"),d7=a("li"),ibe=a("strong"),Dhr=o("convnext"),Ghr=o(" \u2014 "),KQ=a("a"),Ohr=o("TFConvNextForImageClassification"),Vhr=o(" (ConvNext model)"),Xhr=l(),c7=a("li"),dbe=a("strong"),zhr=o("data2vec-vision"),Qhr=o(" \u2014 "),ZQ=a("a"),Whr=o("TFData2VecVisionForImageClassification"),Hhr=o(" (Data2VecVision model)"),Uhr=l(),f7=a("li"),cbe=a("strong"),Jhr=o("swin"),Yhr=o(" \u2014 "),eW=a("a"),Khr=o("TFSwinForImageClassification"),Zhr=o(" (Swin model)"),epr=l(),m7=a("li"),fbe=a("strong"),opr=o("vit"),rpr=o(" \u2014 "),oW=a("a"),tpr=o("TFViTForImageClassification"),apr=o(" (ViT model)"),npr=l(),F(g7.$$.fragment),kqe=l(),Yd=a("h2"),h7=a("a"),mbe=a("span"),F(sL.$$.fragment),spr=l(),gbe=a("span"),lpr=o("TFAutoModelForMaskedLM"),Sqe=l(),or=a("div"),F(lL.$$.fragment),ipr=l(),Kd=a("p"),dpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rW=a("a"),cpr=o("from_pretrained()"),fpr=o(" class method or the "),tW=a("a"),mpr=o("from_config()"),gpr=o(` class
method.`),hpr=l(),iL=a("p"),ppr=o("This class cannot be instantiated directly using "),hbe=a("code"),upr=o("__init__()"),_pr=o(" (throws an error)."),bpr=l(),xt=a("div"),F(dL.$$.fragment),vpr=l(),pbe=a("p"),Fpr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tpr=l(),Zd=a("p"),Mpr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Epr=o("not"),Cpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),wpr=o("from_pretrained()"),Apr=o(" to load the model weights."),ypr=l(),F(p7.$$.fragment),Lpr=l(),xr=a("div"),F(cL.$$.fragment),xpr=l(),_be=a("p"),$pr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kpr=l(),tn=a("p"),Spr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Rpr=o("model_type"),Bpr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Ppr=o("pretrained_model_name_or_path"),Ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(":"),jpr=l(),ie=a("ul"),u7=a("li"),Tbe=a("strong"),Dpr=o("albert"),Gpr=o(" \u2014 "),nW=a("a"),Opr=o("TFAlbertForMaskedLM"),Vpr=o(" (ALBERT model)"),Xpr=l(),_7=a("li"),Mbe=a("strong"),zpr=o("bert"),Qpr=o(" \u2014 "),sW=a("a"),Wpr=o("TFBertForMaskedLM"),Hpr=o(" (BERT model)"),Upr=l(),b7=a("li"),Ebe=a("strong"),Jpr=o("camembert"),Ypr=o(" \u2014 "),lW=a("a"),Kpr=o("TFCamembertForMaskedLM"),Zpr=o(" (CamemBERT model)"),eur=l(),v7=a("li"),Cbe=a("strong"),our=o("convbert"),rur=o(" \u2014 "),iW=a("a"),tur=o("TFConvBertForMaskedLM"),aur=o(" (ConvBERT model)"),nur=l(),F7=a("li"),wbe=a("strong"),sur=o("deberta"),lur=o(" \u2014 "),dW=a("a"),iur=o("TFDebertaForMaskedLM"),dur=o(" (DeBERTa model)"),cur=l(),T7=a("li"),Abe=a("strong"),fur=o("deberta-v2"),mur=o(" \u2014 "),cW=a("a"),gur=o("TFDebertaV2ForMaskedLM"),hur=o(" (DeBERTa-v2 model)"),pur=l(),M7=a("li"),ybe=a("strong"),uur=o("distilbert"),_ur=o(" \u2014 "),fW=a("a"),bur=o("TFDistilBertForMaskedLM"),vur=o(" (DistilBERT model)"),Fur=l(),E7=a("li"),Lbe=a("strong"),Tur=o("electra"),Mur=o(" \u2014 "),mW=a("a"),Eur=o("TFElectraForMaskedLM"),Cur=o(" (ELECTRA model)"),wur=l(),C7=a("li"),xbe=a("strong"),Aur=o("flaubert"),yur=o(" \u2014 "),gW=a("a"),Lur=o("TFFlaubertWithLMHeadModel"),xur=o(" (FlauBERT model)"),$ur=l(),w7=a("li"),$be=a("strong"),kur=o("funnel"),Sur=o(" \u2014 "),hW=a("a"),Rur=o("TFFunnelForMaskedLM"),Bur=o(" (Funnel Transformer model)"),Pur=l(),A7=a("li"),kbe=a("strong"),Iur=o("layoutlm"),qur=o(" \u2014 "),pW=a("a"),Nur=o("TFLayoutLMForMaskedLM"),jur=o(" (LayoutLM model)"),Dur=l(),y7=a("li"),Sbe=a("strong"),Gur=o("longformer"),Our=o(" \u2014 "),uW=a("a"),Vur=o("TFLongformerForMaskedLM"),Xur=o(" (Longformer model)"),zur=l(),L7=a("li"),Rbe=a("strong"),Qur=o("mobilebert"),Wur=o(" \u2014 "),_W=a("a"),Hur=o("TFMobileBertForMaskedLM"),Uur=o(" (MobileBERT model)"),Jur=l(),x7=a("li"),Bbe=a("strong"),Yur=o("mpnet"),Kur=o(" \u2014 "),bW=a("a"),Zur=o("TFMPNetForMaskedLM"),e_r=o(" (MPNet model)"),o_r=l(),$7=a("li"),Pbe=a("strong"),r_r=o("rembert"),t_r=o(" \u2014 "),vW=a("a"),a_r=o("TFRemBertForMaskedLM"),n_r=o(" (RemBERT model)"),s_r=l(),k7=a("li"),Ibe=a("strong"),l_r=o("roberta"),i_r=o(" \u2014 "),FW=a("a"),d_r=o("TFRobertaForMaskedLM"),c_r=o(" (RoBERTa model)"),f_r=l(),S7=a("li"),qbe=a("strong"),m_r=o("roformer"),g_r=o(" \u2014 "),TW=a("a"),h_r=o("TFRoFormerForMaskedLM"),p_r=o(" (RoFormer model)"),u_r=l(),R7=a("li"),Nbe=a("strong"),__r=o("tapas"),b_r=o(" \u2014 "),MW=a("a"),v_r=o("TFTapasForMaskedLM"),F_r=o(" (TAPAS model)"),T_r=l(),B7=a("li"),jbe=a("strong"),M_r=o("xlm"),E_r=o(" \u2014 "),EW=a("a"),C_r=o("TFXLMWithLMHeadModel"),w_r=o(" (XLM model)"),A_r=l(),P7=a("li"),Dbe=a("strong"),y_r=o("xlm-roberta"),L_r=o(" \u2014 "),CW=a("a"),x_r=o("TFXLMRobertaForMaskedLM"),$_r=o(" (XLM-RoBERTa model)"),k_r=l(),F(I7.$$.fragment),Rqe=l(),ec=a("h2"),q7=a("a"),Gbe=a("span"),F(fL.$$.fragment),S_r=l(),Obe=a("span"),R_r=o("TFAutoModelForSeq2SeqLM"),Bqe=l(),rr=a("div"),F(mL.$$.fragment),B_r=l(),oc=a("p"),P_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=a("a"),I_r=o("from_pretrained()"),q_r=o(" class method or the "),AW=a("a"),N_r=o("from_config()"),j_r=o(` class
method.`),D_r=l(),gL=a("p"),G_r=o("This class cannot be instantiated directly using "),Vbe=a("code"),O_r=o("__init__()"),V_r=o(" (throws an error)."),X_r=l(),$t=a("div"),F(hL.$$.fragment),z_r=l(),Xbe=a("p"),Q_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W_r=l(),rc=a("p"),H_r=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),U_r=o("not"),J_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Y_r=o("from_pretrained()"),K_r=o(" to load the model weights."),Z_r=l(),F(N7.$$.fragment),e2r=l(),$r=a("div"),F(pL.$$.fragment),o2r=l(),Qbe=a("p"),r2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t2r=l(),an=a("p"),a2r=o("The model class to instantiate is selected based on the "),Wbe=a("code"),n2r=o("model_type"),s2r=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(":"),f2r=l(),ye=a("ul"),j7=a("li"),Jbe=a("strong"),m2r=o("bart"),g2r=o(" \u2014 "),LW=a("a"),h2r=o("TFBartForConditionalGeneration"),p2r=o(" (BART model)"),u2r=l(),D7=a("li"),Ybe=a("strong"),_2r=o("blenderbot"),b2r=o(" \u2014 "),xW=a("a"),v2r=o("TFBlenderbotForConditionalGeneration"),F2r=o(" (Blenderbot model)"),T2r=l(),G7=a("li"),Kbe=a("strong"),M2r=o("blenderbot-small"),E2r=o(" \u2014 "),$W=a("a"),C2r=o("TFBlenderbotSmallForConditionalGeneration"),w2r=o(" (BlenderbotSmall model)"),A2r=l(),O7=a("li"),Zbe=a("strong"),y2r=o("encoder-decoder"),L2r=o(" \u2014 "),kW=a("a"),x2r=o("TFEncoderDecoderModel"),$2r=o(" (Encoder decoder model)"),k2r=l(),V7=a("li"),eve=a("strong"),S2r=o("led"),R2r=o(" \u2014 "),SW=a("a"),B2r=o("TFLEDForConditionalGeneration"),P2r=o(" (LED model)"),I2r=l(),X7=a("li"),ove=a("strong"),q2r=o("marian"),N2r=o(" \u2014 "),RW=a("a"),j2r=o("TFMarianMTModel"),D2r=o(" (Marian model)"),G2r=l(),z7=a("li"),rve=a("strong"),O2r=o("mbart"),V2r=o(" \u2014 "),BW=a("a"),X2r=o("TFMBartForConditionalGeneration"),z2r=o(" (mBART model)"),Q2r=l(),Q7=a("li"),tve=a("strong"),W2r=o("mt5"),H2r=o(" \u2014 "),PW=a("a"),U2r=o("TFMT5ForConditionalGeneration"),J2r=o(" (mT5 model)"),Y2r=l(),W7=a("li"),ave=a("strong"),K2r=o("pegasus"),Z2r=o(" \u2014 "),IW=a("a"),e1r=o("TFPegasusForConditionalGeneration"),o1r=o(" (Pegasus model)"),r1r=l(),H7=a("li"),nve=a("strong"),t1r=o("t5"),a1r=o(" \u2014 "),qW=a("a"),n1r=o("TFT5ForConditionalGeneration"),s1r=o(" (T5 model)"),l1r=l(),F(U7.$$.fragment),Pqe=l(),tc=a("h2"),J7=a("a"),sve=a("span"),F(uL.$$.fragment),i1r=l(),lve=a("span"),d1r=o("TFAutoModelForSequenceClassification"),Iqe=l(),tr=a("div"),F(_L.$$.fragment),c1r=l(),ac=a("p"),f1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NW=a("a"),m1r=o("from_pretrained()"),g1r=o(" class method or the "),jW=a("a"),h1r=o("from_config()"),p1r=o(` class
method.`),u1r=l(),bL=a("p"),_1r=o("This class cannot be instantiated directly using "),ive=a("code"),b1r=o("__init__()"),v1r=o(" (throws an error)."),F1r=l(),kt=a("div"),F(vL.$$.fragment),T1r=l(),dve=a("p"),M1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E1r=l(),nc=a("p"),C1r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),w1r=o("not"),A1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),y1r=o("from_pretrained()"),L1r=o(" to load the model weights."),x1r=l(),F(Y7.$$.fragment),$1r=l(),kr=a("div"),F(FL.$$.fragment),k1r=l(),fve=a("p"),S1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R1r=l(),nn=a("p"),B1r=o("The model class to instantiate is selected based on the "),mve=a("code"),P1r=o("model_type"),I1r=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),q1r=o("pretrained_model_name_or_path"),N1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),j1r=o("pretrained_model_name_or_path"),D1r=o(":"),G1r=l(),Z=a("ul"),K7=a("li"),pve=a("strong"),O1r=o("albert"),V1r=o(" \u2014 "),GW=a("a"),X1r=o("TFAlbertForSequenceClassification"),z1r=o(" (ALBERT model)"),Q1r=l(),Z7=a("li"),uve=a("strong"),W1r=o("bert"),H1r=o(" \u2014 "),OW=a("a"),U1r=o("TFBertForSequenceClassification"),J1r=o(" (BERT model)"),Y1r=l(),eM=a("li"),_ve=a("strong"),K1r=o("camembert"),Z1r=o(" \u2014 "),VW=a("a"),ebr=o("TFCamembertForSequenceClassification"),obr=o(" (CamemBERT model)"),rbr=l(),oM=a("li"),bve=a("strong"),tbr=o("convbert"),abr=o(" \u2014 "),XW=a("a"),nbr=o("TFConvBertForSequenceClassification"),sbr=o(" (ConvBERT model)"),lbr=l(),rM=a("li"),vve=a("strong"),ibr=o("ctrl"),dbr=o(" \u2014 "),zW=a("a"),cbr=o("TFCTRLForSequenceClassification"),fbr=o(" (CTRL model)"),mbr=l(),tM=a("li"),Fve=a("strong"),gbr=o("deberta"),hbr=o(" \u2014 "),QW=a("a"),pbr=o("TFDebertaForSequenceClassification"),ubr=o(" (DeBERTa model)"),_br=l(),aM=a("li"),Tve=a("strong"),bbr=o("deberta-v2"),vbr=o(" \u2014 "),WW=a("a"),Fbr=o("TFDebertaV2ForSequenceClassification"),Tbr=o(" (DeBERTa-v2 model)"),Mbr=l(),nM=a("li"),Mve=a("strong"),Ebr=o("distilbert"),Cbr=o(" \u2014 "),HW=a("a"),wbr=o("TFDistilBertForSequenceClassification"),Abr=o(" (DistilBERT model)"),ybr=l(),sM=a("li"),Eve=a("strong"),Lbr=o("electra"),xbr=o(" \u2014 "),UW=a("a"),$br=o("TFElectraForSequenceClassification"),kbr=o(" (ELECTRA model)"),Sbr=l(),lM=a("li"),Cve=a("strong"),Rbr=o("flaubert"),Bbr=o(" \u2014 "),JW=a("a"),Pbr=o("TFFlaubertForSequenceClassification"),Ibr=o(" (FlauBERT model)"),qbr=l(),iM=a("li"),wve=a("strong"),Nbr=o("funnel"),jbr=o(" \u2014 "),YW=a("a"),Dbr=o("TFFunnelForSequenceClassification"),Gbr=o(" (Funnel Transformer model)"),Obr=l(),dM=a("li"),Ave=a("strong"),Vbr=o("gpt2"),Xbr=o(" \u2014 "),KW=a("a"),zbr=o("TFGPT2ForSequenceClassification"),Qbr=o(" (OpenAI GPT-2 model)"),Wbr=l(),cM=a("li"),yve=a("strong"),Hbr=o("gptj"),Ubr=o(" \u2014 "),ZW=a("a"),Jbr=o("TFGPTJForSequenceClassification"),Ybr=o(" (GPT-J model)"),Kbr=l(),fM=a("li"),Lve=a("strong"),Zbr=o("layoutlm"),evr=o(" \u2014 "),eH=a("a"),ovr=o("TFLayoutLMForSequenceClassification"),rvr=o(" (LayoutLM model)"),tvr=l(),mM=a("li"),xve=a("strong"),avr=o("longformer"),nvr=o(" \u2014 "),oH=a("a"),svr=o("TFLongformerForSequenceClassification"),lvr=o(" (Longformer model)"),ivr=l(),gM=a("li"),$ve=a("strong"),dvr=o("mobilebert"),cvr=o(" \u2014 "),rH=a("a"),fvr=o("TFMobileBertForSequenceClassification"),mvr=o(" (MobileBERT model)"),gvr=l(),hM=a("li"),kve=a("strong"),hvr=o("mpnet"),pvr=o(" \u2014 "),tH=a("a"),uvr=o("TFMPNetForSequenceClassification"),_vr=o(" (MPNet model)"),bvr=l(),pM=a("li"),Sve=a("strong"),vvr=o("openai-gpt"),Fvr=o(" \u2014 "),aH=a("a"),Tvr=o("TFOpenAIGPTForSequenceClassification"),Mvr=o(" (OpenAI GPT model)"),Evr=l(),uM=a("li"),Rve=a("strong"),Cvr=o("rembert"),wvr=o(" \u2014 "),nH=a("a"),Avr=o("TFRemBertForSequenceClassification"),yvr=o(" (RemBERT model)"),Lvr=l(),_M=a("li"),Bve=a("strong"),xvr=o("roberta"),$vr=o(" \u2014 "),sH=a("a"),kvr=o("TFRobertaForSequenceClassification"),Svr=o(" (RoBERTa model)"),Rvr=l(),bM=a("li"),Pve=a("strong"),Bvr=o("roformer"),Pvr=o(" \u2014 "),lH=a("a"),Ivr=o("TFRoFormerForSequenceClassification"),qvr=o(" (RoFormer model)"),Nvr=l(),vM=a("li"),Ive=a("strong"),jvr=o("tapas"),Dvr=o(" \u2014 "),iH=a("a"),Gvr=o("TFTapasForSequenceClassification"),Ovr=o(" (TAPAS model)"),Vvr=l(),FM=a("li"),qve=a("strong"),Xvr=o("transfo-xl"),zvr=o(" \u2014 "),dH=a("a"),Qvr=o("TFTransfoXLForSequenceClassification"),Wvr=o(" (Transformer-XL model)"),Hvr=l(),TM=a("li"),Nve=a("strong"),Uvr=o("xlm"),Jvr=o(" \u2014 "),cH=a("a"),Yvr=o("TFXLMForSequenceClassification"),Kvr=o(" (XLM model)"),Zvr=l(),MM=a("li"),jve=a("strong"),eFr=o("xlm-roberta"),oFr=o(" \u2014 "),fH=a("a"),rFr=o("TFXLMRobertaForSequenceClassification"),tFr=o(" (XLM-RoBERTa model)"),aFr=l(),EM=a("li"),Dve=a("strong"),nFr=o("xlnet"),sFr=o(" \u2014 "),mH=a("a"),lFr=o("TFXLNetForSequenceClassification"),iFr=o(" (XLNet model)"),dFr=l(),F(CM.$$.fragment),qqe=l(),sc=a("h2"),wM=a("a"),Gve=a("span"),F(TL.$$.fragment),cFr=l(),Ove=a("span"),fFr=o("TFAutoModelForMultipleChoice"),Nqe=l(),ar=a("div"),F(ML.$$.fragment),mFr=l(),lc=a("p"),gFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gH=a("a"),hFr=o("from_pretrained()"),pFr=o(" class method or the "),hH=a("a"),uFr=o("from_config()"),_Fr=o(` class
method.`),bFr=l(),EL=a("p"),vFr=o("This class cannot be instantiated directly using "),Vve=a("code"),FFr=o("__init__()"),TFr=o(" (throws an error)."),MFr=l(),St=a("div"),F(CL.$$.fragment),EFr=l(),Xve=a("p"),CFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wFr=l(),ic=a("p"),AFr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),yFr=o("not"),LFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),xFr=o("from_pretrained()"),$Fr=o(" to load the model weights."),kFr=l(),F(AM.$$.fragment),SFr=l(),Sr=a("div"),F(wL.$$.fragment),RFr=l(),Qve=a("p"),BFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PFr=l(),sn=a("p"),IFr=o("The model class to instantiate is selected based on the "),Wve=a("code"),qFr=o("model_type"),NFr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),jFr=o("pretrained_model_name_or_path"),DFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),GFr=o("pretrained_model_name_or_path"),OFr=o(":"),VFr=l(),pe=a("ul"),yM=a("li"),Jve=a("strong"),XFr=o("albert"),zFr=o(" \u2014 "),uH=a("a"),QFr=o("TFAlbertForMultipleChoice"),WFr=o(" (ALBERT model)"),HFr=l(),LM=a("li"),Yve=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),_H=a("a"),YFr=o("TFBertForMultipleChoice"),KFr=o(" (BERT model)"),ZFr=l(),xM=a("li"),Kve=a("strong"),e6r=o("camembert"),o6r=o(" \u2014 "),bH=a("a"),r6r=o("TFCamembertForMultipleChoice"),t6r=o(" (CamemBERT model)"),a6r=l(),$M=a("li"),Zve=a("strong"),n6r=o("convbert"),s6r=o(" \u2014 "),vH=a("a"),l6r=o("TFConvBertForMultipleChoice"),i6r=o(" (ConvBERT model)"),d6r=l(),kM=a("li"),eFe=a("strong"),c6r=o("distilbert"),f6r=o(" \u2014 "),FH=a("a"),m6r=o("TFDistilBertForMultipleChoice"),g6r=o(" (DistilBERT model)"),h6r=l(),SM=a("li"),oFe=a("strong"),p6r=o("electra"),u6r=o(" \u2014 "),TH=a("a"),_6r=o("TFElectraForMultipleChoice"),b6r=o(" (ELECTRA model)"),v6r=l(),RM=a("li"),rFe=a("strong"),F6r=o("flaubert"),T6r=o(" \u2014 "),MH=a("a"),M6r=o("TFFlaubertForMultipleChoice"),E6r=o(" (FlauBERT model)"),C6r=l(),BM=a("li"),tFe=a("strong"),w6r=o("funnel"),A6r=o(" \u2014 "),EH=a("a"),y6r=o("TFFunnelForMultipleChoice"),L6r=o(" (Funnel Transformer model)"),x6r=l(),PM=a("li"),aFe=a("strong"),$6r=o("longformer"),k6r=o(" \u2014 "),CH=a("a"),S6r=o("TFLongformerForMultipleChoice"),R6r=o(" (Longformer model)"),B6r=l(),IM=a("li"),nFe=a("strong"),P6r=o("mobilebert"),I6r=o(" \u2014 "),wH=a("a"),q6r=o("TFMobileBertForMultipleChoice"),N6r=o(" (MobileBERT model)"),j6r=l(),qM=a("li"),sFe=a("strong"),D6r=o("mpnet"),G6r=o(" \u2014 "),AH=a("a"),O6r=o("TFMPNetForMultipleChoice"),V6r=o(" (MPNet model)"),X6r=l(),NM=a("li"),lFe=a("strong"),z6r=o("rembert"),Q6r=o(" \u2014 "),yH=a("a"),W6r=o("TFRemBertForMultipleChoice"),H6r=o(" (RemBERT model)"),U6r=l(),jM=a("li"),iFe=a("strong"),J6r=o("roberta"),Y6r=o(" \u2014 "),LH=a("a"),K6r=o("TFRobertaForMultipleChoice"),Z6r=o(" (RoBERTa model)"),eTr=l(),DM=a("li"),dFe=a("strong"),oTr=o("roformer"),rTr=o(" \u2014 "),xH=a("a"),tTr=o("TFRoFormerForMultipleChoice"),aTr=o(" (RoFormer model)"),nTr=l(),GM=a("li"),cFe=a("strong"),sTr=o("xlm"),lTr=o(" \u2014 "),$H=a("a"),iTr=o("TFXLMForMultipleChoice"),dTr=o(" (XLM model)"),cTr=l(),OM=a("li"),fFe=a("strong"),fTr=o("xlm-roberta"),mTr=o(" \u2014 "),kH=a("a"),gTr=o("TFXLMRobertaForMultipleChoice"),hTr=o(" (XLM-RoBERTa model)"),pTr=l(),VM=a("li"),mFe=a("strong"),uTr=o("xlnet"),_Tr=o(" \u2014 "),SH=a("a"),bTr=o("TFXLNetForMultipleChoice"),vTr=o(" (XLNet model)"),FTr=l(),F(XM.$$.fragment),jqe=l(),dc=a("h2"),zM=a("a"),gFe=a("span"),F(AL.$$.fragment),TTr=l(),hFe=a("span"),MTr=o("TFAutoModelForNextSentencePrediction"),Dqe=l(),nr=a("div"),F(yL.$$.fragment),ETr=l(),cc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=a("a"),wTr=o("from_pretrained()"),ATr=o(" class method or the "),BH=a("a"),yTr=o("from_config()"),LTr=o(` class
method.`),xTr=l(),LL=a("p"),$Tr=o("This class cannot be instantiated directly using "),pFe=a("code"),kTr=o("__init__()"),STr=o(" (throws an error)."),RTr=l(),Rt=a("div"),F(xL.$$.fragment),BTr=l(),uFe=a("p"),PTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ITr=l(),fc=a("p"),qTr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),NTr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),DTr=o("from_pretrained()"),GTr=o(" to load the model weights."),OTr=l(),F(QM.$$.fragment),VTr=l(),Rr=a("div"),F($L.$$.fragment),XTr=l(),bFe=a("p"),zTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QTr=l(),ln=a("p"),WTr=o("The model class to instantiate is selected based on the "),vFe=a("code"),HTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),e9r=l(),kL=a("ul"),WM=a("li"),MFe=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),IH=a("a"),t9r=o("TFBertForNextSentencePrediction"),a9r=o(" (BERT model)"),n9r=l(),HM=a("li"),EFe=a("strong"),s9r=o("mobilebert"),l9r=o(" \u2014 "),qH=a("a"),i9r=o("TFMobileBertForNextSentencePrediction"),d9r=o(" (MobileBERT model)"),c9r=l(),F(UM.$$.fragment),Gqe=l(),mc=a("h2"),JM=a("a"),CFe=a("span"),F(SL.$$.fragment),f9r=l(),wFe=a("span"),m9r=o("TFAutoModelForTableQuestionAnswering"),Oqe=l(),sr=a("div"),F(RL.$$.fragment),g9r=l(),gc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NH=a("a"),p9r=o("from_pretrained()"),u9r=o(" class method or the "),jH=a("a"),_9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),BL=a("p"),F9r=o("This class cannot be instantiated directly using "),AFe=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Bt=a("div"),F(PL.$$.fragment),C9r=l(),yFe=a("p"),w9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),A9r=l(),hc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),L9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(YM.$$.fragment),R9r=l(),Br=a("div"),F(IL.$$.fragment),B9r=l(),xFe=a("p"),P9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),I9r=l(),dn=a("p"),q9r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),N9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),RFe=a("ul"),KM=a("li"),BFe=a("strong"),z9r=o("tapas"),Q9r=o(" \u2014 "),GH=a("a"),W9r=o("TFTapasForQuestionAnswering"),H9r=o(" (TAPAS model)"),U9r=l(),F(ZM.$$.fragment),Vqe=l(),pc=a("h2"),e4=a("a"),PFe=a("span"),F(qL.$$.fragment),J9r=l(),IFe=a("span"),Y9r=o("TFAutoModelForTokenClassification"),Xqe=l(),lr=a("div"),F(NL.$$.fragment),K9r=l(),uc=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),e7r=o("from_pretrained()"),o7r=o(" class method or the "),VH=a("a"),r7r=o("from_config()"),t7r=o(` class
method.`),a7r=l(),jL=a("p"),n7r=o("This class cannot be instantiated directly using "),qFe=a("code"),s7r=o("__init__()"),l7r=o(" (throws an error)."),i7r=l(),Pt=a("div"),F(DL.$$.fragment),d7r=l(),NFe=a("p"),c7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f7r=l(),_c=a("p"),m7r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),g7r=o("not"),h7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),p7r=o("from_pretrained()"),u7r=o(" to load the model weights."),_7r=l(),F(o4.$$.fragment),b7r=l(),Pr=a("div"),F(GL.$$.fragment),v7r=l(),DFe=a("p"),F7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T7r=l(),cn=a("p"),M7r=o("The model class to instantiate is selected based on the "),GFe=a("code"),E7r=o("model_type"),C7r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(":"),x7r=l(),de=a("ul"),r4=a("li"),XFe=a("strong"),$7r=o("albert"),k7r=o(" \u2014 "),zH=a("a"),S7r=o("TFAlbertForTokenClassification"),R7r=o(" (ALBERT model)"),B7r=l(),t4=a("li"),zFe=a("strong"),P7r=o("bert"),I7r=o(" \u2014 "),QH=a("a"),q7r=o("TFBertForTokenClassification"),N7r=o(" (BERT model)"),j7r=l(),a4=a("li"),QFe=a("strong"),D7r=o("camembert"),G7r=o(" \u2014 "),WH=a("a"),O7r=o("TFCamembertForTokenClassification"),V7r=o(" (CamemBERT model)"),X7r=l(),n4=a("li"),WFe=a("strong"),z7r=o("convbert"),Q7r=o(" \u2014 "),HH=a("a"),W7r=o("TFConvBertForTokenClassification"),H7r=o(" (ConvBERT model)"),U7r=l(),s4=a("li"),HFe=a("strong"),J7r=o("deberta"),Y7r=o(" \u2014 "),UH=a("a"),K7r=o("TFDebertaForTokenClassification"),Z7r=o(" (DeBERTa model)"),eMr=l(),l4=a("li"),UFe=a("strong"),oMr=o("deberta-v2"),rMr=o(" \u2014 "),JH=a("a"),tMr=o("TFDebertaV2ForTokenClassification"),aMr=o(" (DeBERTa-v2 model)"),nMr=l(),i4=a("li"),JFe=a("strong"),sMr=o("distilbert"),lMr=o(" \u2014 "),YH=a("a"),iMr=o("TFDistilBertForTokenClassification"),dMr=o(" (DistilBERT model)"),cMr=l(),d4=a("li"),YFe=a("strong"),fMr=o("electra"),mMr=o(" \u2014 "),KH=a("a"),gMr=o("TFElectraForTokenClassification"),hMr=o(" (ELECTRA model)"),pMr=l(),c4=a("li"),KFe=a("strong"),uMr=o("flaubert"),_Mr=o(" \u2014 "),ZH=a("a"),bMr=o("TFFlaubertForTokenClassification"),vMr=o(" (FlauBERT model)"),FMr=l(),f4=a("li"),ZFe=a("strong"),TMr=o("funnel"),MMr=o(" \u2014 "),eU=a("a"),EMr=o("TFFunnelForTokenClassification"),CMr=o(" (Funnel Transformer model)"),wMr=l(),m4=a("li"),e6e=a("strong"),AMr=o("layoutlm"),yMr=o(" \u2014 "),oU=a("a"),LMr=o("TFLayoutLMForTokenClassification"),xMr=o(" (LayoutLM model)"),$Mr=l(),g4=a("li"),o6e=a("strong"),kMr=o("longformer"),SMr=o(" \u2014 "),rU=a("a"),RMr=o("TFLongformerForTokenClassification"),BMr=o(" (Longformer model)"),PMr=l(),h4=a("li"),r6e=a("strong"),IMr=o("mobilebert"),qMr=o(" \u2014 "),tU=a("a"),NMr=o("TFMobileBertForTokenClassification"),jMr=o(" (MobileBERT model)"),DMr=l(),p4=a("li"),t6e=a("strong"),GMr=o("mpnet"),OMr=o(" \u2014 "),aU=a("a"),VMr=o("TFMPNetForTokenClassification"),XMr=o(" (MPNet model)"),zMr=l(),u4=a("li"),a6e=a("strong"),QMr=o("rembert"),WMr=o(" \u2014 "),nU=a("a"),HMr=o("TFRemBertForTokenClassification"),UMr=o(" (RemBERT model)"),JMr=l(),_4=a("li"),n6e=a("strong"),YMr=o("roberta"),KMr=o(" \u2014 "),sU=a("a"),ZMr=o("TFRobertaForTokenClassification"),e4r=o(" (RoBERTa model)"),o4r=l(),b4=a("li"),s6e=a("strong"),r4r=o("roformer"),t4r=o(" \u2014 "),lU=a("a"),a4r=o("TFRoFormerForTokenClassification"),n4r=o(" (RoFormer model)"),s4r=l(),v4=a("li"),l6e=a("strong"),l4r=o("xlm"),i4r=o(" \u2014 "),iU=a("a"),d4r=o("TFXLMForTokenClassification"),c4r=o(" (XLM model)"),f4r=l(),F4=a("li"),i6e=a("strong"),m4r=o("xlm-roberta"),g4r=o(" \u2014 "),dU=a("a"),h4r=o("TFXLMRobertaForTokenClassification"),p4r=o(" (XLM-RoBERTa model)"),u4r=l(),T4=a("li"),d6e=a("strong"),_4r=o("xlnet"),b4r=o(" \u2014 "),cU=a("a"),v4r=o("TFXLNetForTokenClassification"),F4r=o(" (XLNet model)"),T4r=l(),F(M4.$$.fragment),zqe=l(),bc=a("h2"),E4=a("a"),c6e=a("span"),F(OL.$$.fragment),M4r=l(),f6e=a("span"),E4r=o("TFAutoModelForQuestionAnswering"),Qqe=l(),ir=a("div"),F(VL.$$.fragment),C4r=l(),vc=a("p"),w4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=a("a"),A4r=o("from_pretrained()"),y4r=o(" class method or the "),mU=a("a"),L4r=o("from_config()"),x4r=o(` class
method.`),$4r=l(),XL=a("p"),k4r=o("This class cannot be instantiated directly using "),m6e=a("code"),S4r=o("__init__()"),R4r=o(" (throws an error)."),B4r=l(),It=a("div"),F(zL.$$.fragment),P4r=l(),g6e=a("p"),I4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q4r=l(),Fc=a("p"),N4r=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),j4r=o("not"),D4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),G4r=o("from_pretrained()"),O4r=o(" to load the model weights."),V4r=l(),F(C4.$$.fragment),X4r=l(),Ir=a("div"),F(QL.$$.fragment),z4r=l(),p6e=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W4r=l(),fn=a("p"),H4r=o("The model class to instantiate is selected based on the "),u6e=a("code"),U4r=o("model_type"),J4r=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),ce=a("ul"),w4=a("li"),v6e=a("strong"),rEr=o("albert"),tEr=o(" \u2014 "),hU=a("a"),aEr=o("TFAlbertForQuestionAnswering"),nEr=o(" (ALBERT model)"),sEr=l(),A4=a("li"),F6e=a("strong"),lEr=o("bert"),iEr=o(" \u2014 "),pU=a("a"),dEr=o("TFBertForQuestionAnswering"),cEr=o(" (BERT model)"),fEr=l(),y4=a("li"),T6e=a("strong"),mEr=o("camembert"),gEr=o(" \u2014 "),uU=a("a"),hEr=o("TFCamembertForQuestionAnswering"),pEr=o(" (CamemBERT model)"),uEr=l(),L4=a("li"),M6e=a("strong"),_Er=o("convbert"),bEr=o(" \u2014 "),_U=a("a"),vEr=o("TFConvBertForQuestionAnswering"),FEr=o(" (ConvBERT model)"),TEr=l(),x4=a("li"),E6e=a("strong"),MEr=o("deberta"),EEr=o(" \u2014 "),bU=a("a"),CEr=o("TFDebertaForQuestionAnswering"),wEr=o(" (DeBERTa model)"),AEr=l(),$4=a("li"),C6e=a("strong"),yEr=o("deberta-v2"),LEr=o(" \u2014 "),vU=a("a"),xEr=o("TFDebertaV2ForQuestionAnswering"),$Er=o(" (DeBERTa-v2 model)"),kEr=l(),k4=a("li"),w6e=a("strong"),SEr=o("distilbert"),REr=o(" \u2014 "),FU=a("a"),BEr=o("TFDistilBertForQuestionAnswering"),PEr=o(" (DistilBERT model)"),IEr=l(),S4=a("li"),A6e=a("strong"),qEr=o("electra"),NEr=o(" \u2014 "),TU=a("a"),jEr=o("TFElectraForQuestionAnswering"),DEr=o(" (ELECTRA model)"),GEr=l(),R4=a("li"),y6e=a("strong"),OEr=o("flaubert"),VEr=o(" \u2014 "),MU=a("a"),XEr=o("TFFlaubertForQuestionAnsweringSimple"),zEr=o(" (FlauBERT model)"),QEr=l(),B4=a("li"),L6e=a("strong"),WEr=o("funnel"),HEr=o(" \u2014 "),EU=a("a"),UEr=o("TFFunnelForQuestionAnswering"),JEr=o(" (Funnel Transformer model)"),YEr=l(),P4=a("li"),x6e=a("strong"),KEr=o("gptj"),ZEr=o(" \u2014 "),CU=a("a"),e5r=o("TFGPTJForQuestionAnswering"),o5r=o(" (GPT-J model)"),r5r=l(),I4=a("li"),$6e=a("strong"),t5r=o("longformer"),a5r=o(" \u2014 "),wU=a("a"),n5r=o("TFLongformerForQuestionAnswering"),s5r=o(" (Longformer model)"),l5r=l(),q4=a("li"),k6e=a("strong"),i5r=o("mobilebert"),d5r=o(" \u2014 "),AU=a("a"),c5r=o("TFMobileBertForQuestionAnswering"),f5r=o(" (MobileBERT model)"),m5r=l(),N4=a("li"),S6e=a("strong"),g5r=o("mpnet"),h5r=o(" \u2014 "),yU=a("a"),p5r=o("TFMPNetForQuestionAnswering"),u5r=o(" (MPNet model)"),_5r=l(),j4=a("li"),R6e=a("strong"),b5r=o("rembert"),v5r=o(" \u2014 "),LU=a("a"),F5r=o("TFRemBertForQuestionAnswering"),T5r=o(" (RemBERT model)"),M5r=l(),D4=a("li"),B6e=a("strong"),E5r=o("roberta"),C5r=o(" \u2014 "),xU=a("a"),w5r=o("TFRobertaForQuestionAnswering"),A5r=o(" (RoBERTa model)"),y5r=l(),G4=a("li"),P6e=a("strong"),L5r=o("roformer"),x5r=o(" \u2014 "),$U=a("a"),$5r=o("TFRoFormerForQuestionAnswering"),k5r=o(" (RoFormer model)"),S5r=l(),O4=a("li"),I6e=a("strong"),R5r=o("xlm"),B5r=o(" \u2014 "),kU=a("a"),P5r=o("TFXLMForQuestionAnsweringSimple"),I5r=o(" (XLM model)"),q5r=l(),V4=a("li"),q6e=a("strong"),N5r=o("xlm-roberta"),j5r=o(" \u2014 "),SU=a("a"),D5r=o("TFXLMRobertaForQuestionAnswering"),G5r=o(" (XLM-RoBERTa model)"),O5r=l(),X4=a("li"),N6e=a("strong"),V5r=o("xlnet"),X5r=o(" \u2014 "),RU=a("a"),z5r=o("TFXLNetForQuestionAnsweringSimple"),Q5r=o(" (XLNet model)"),W5r=l(),F(z4.$$.fragment),Wqe=l(),Tc=a("h2"),Q4=a("a"),j6e=a("span"),F(WL.$$.fragment),H5r=l(),D6e=a("span"),U5r=o("TFAutoModelForVision2Seq"),Hqe=l(),dr=a("div"),F(HL.$$.fragment),J5r=l(),Mc=a("p"),Y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BU=a("a"),K5r=o("from_pretrained()"),Z5r=o(" class method or the "),PU=a("a"),eCr=o("from_config()"),oCr=o(` class
method.`),rCr=l(),UL=a("p"),tCr=o("This class cannot be instantiated directly using "),G6e=a("code"),aCr=o("__init__()"),nCr=o(" (throws an error)."),sCr=l(),qt=a("div"),F(JL.$$.fragment),lCr=l(),O6e=a("p"),iCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dCr=l(),Ec=a("p"),cCr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),fCr=o("not"),mCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),gCr=o("from_pretrained()"),hCr=o(" to load the model weights."),pCr=l(),F(W4.$$.fragment),uCr=l(),qr=a("div"),F(YL.$$.fragment),_Cr=l(),X6e=a("p"),bCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vCr=l(),mn=a("p"),FCr=o("The model class to instantiate is selected based on the "),z6e=a("code"),TCr=o("model_type"),MCr=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),ECr=o("pretrained_model_name_or_path"),CCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(":"),yCr=l(),H6e=a("ul"),H4=a("li"),U6e=a("strong"),LCr=o("vision-encoder-decoder"),xCr=o(" \u2014 "),qU=a("a"),$Cr=o("TFVisionEncoderDecoderModel"),kCr=o(" (Vision Encoder decoder model)"),SCr=l(),F(U4.$$.fragment),Uqe=l(),Cc=a("h2"),J4=a("a"),J6e=a("span"),F(KL.$$.fragment),RCr=l(),Y6e=a("span"),BCr=o("TFAutoModelForSpeechSeq2Seq"),Jqe=l(),cr=a("div"),F(ZL.$$.fragment),PCr=l(),wc=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NU=a("a"),qCr=o("from_pretrained()"),NCr=o(" class method or the "),jU=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),e8=a("p"),OCr=o("This class cannot be instantiated directly using "),K6e=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),Nt=a("div"),F(o8.$$.fragment),QCr=l(),Z6e=a("p"),WCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HCr=l(),Ac=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e3r=l(),F(Y4.$$.fragment),o3r=l(),Nr=a("div"),F(r8.$$.fragment),r3r=l(),oTe=a("p"),t3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a3r=l(),gn=a("p"),n3r=o("The model class to instantiate is selected based on the "),rTe=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),c3r=o("pretrained_model_name_or_path"),f3r=o(":"),m3r=l(),nTe=a("ul"),K4=a("li"),sTe=a("strong"),g3r=o("speech_to_text"),h3r=o(" \u2014 "),GU=a("a"),p3r=o("TFSpeech2TextForConditionalGeneration"),u3r=o(" (Speech2Text model)"),_3r=l(),F(Z4.$$.fragment),Yqe=l(),yc=a("h2"),eE=a("a"),lTe=a("span"),F(t8.$$.fragment),b3r=l(),iTe=a("span"),v3r=o("FlaxAutoModel"),Kqe=l(),fr=a("div"),F(a8.$$.fragment),F3r=l(),Lc=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OU=a("a"),M3r=o("from_pretrained()"),E3r=o(" class method or the "),VU=a("a"),C3r=o("from_config()"),w3r=o(` class
method.`),A3r=l(),n8=a("p"),y3r=o("This class cannot be instantiated directly using "),dTe=a("code"),L3r=o("__init__()"),x3r=o(" (throws an error)."),$3r=l(),jt=a("div"),F(s8.$$.fragment),k3r=l(),cTe=a("p"),S3r=o("Instantiates one of the base model classes of the library from a configuration."),R3r=l(),xc=a("p"),B3r=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),P3r=o("not"),I3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),q3r=o("from_pretrained()"),N3r=o(" to load the model weights."),j3r=l(),F(oE.$$.fragment),D3r=l(),jr=a("div"),F(l8.$$.fragment),G3r=l(),mTe=a("p"),O3r=o("Instantiate one of the base model classes of the library from a pretrained model."),V3r=l(),hn=a("p"),X3r=o("The model class to instantiate is selected based on the "),gTe=a("code"),z3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),ee=a("ul"),rE=a("li"),uTe=a("strong"),K3r=o("albert"),Z3r=o(" \u2014 "),zU=a("a"),ewr=o("FlaxAlbertModel"),owr=o(" (ALBERT model)"),rwr=l(),tE=a("li"),_Te=a("strong"),twr=o("bart"),awr=o(" \u2014 "),QU=a("a"),nwr=o("FlaxBartModel"),swr=o(" (BART model)"),lwr=l(),aE=a("li"),bTe=a("strong"),iwr=o("beit"),dwr=o(" \u2014 "),WU=a("a"),cwr=o("FlaxBeitModel"),fwr=o(" (BEiT model)"),mwr=l(),nE=a("li"),vTe=a("strong"),gwr=o("bert"),hwr=o(" \u2014 "),HU=a("a"),pwr=o("FlaxBertModel"),uwr=o(" (BERT model)"),_wr=l(),sE=a("li"),FTe=a("strong"),bwr=o("big_bird"),vwr=o(" \u2014 "),UU=a("a"),Fwr=o("FlaxBigBirdModel"),Twr=o(" (BigBird model)"),Mwr=l(),lE=a("li"),TTe=a("strong"),Ewr=o("blenderbot"),Cwr=o(" \u2014 "),JU=a("a"),wwr=o("FlaxBlenderbotModel"),Awr=o(" (Blenderbot model)"),ywr=l(),iE=a("li"),MTe=a("strong"),Lwr=o("blenderbot-small"),xwr=o(" \u2014 "),YU=a("a"),$wr=o("FlaxBlenderbotSmallModel"),kwr=o(" (BlenderbotSmall model)"),Swr=l(),dE=a("li"),ETe=a("strong"),Rwr=o("clip"),Bwr=o(" \u2014 "),KU=a("a"),Pwr=o("FlaxCLIPModel"),Iwr=o(" (CLIP model)"),qwr=l(),cE=a("li"),CTe=a("strong"),Nwr=o("distilbert"),jwr=o(" \u2014 "),ZU=a("a"),Dwr=o("FlaxDistilBertModel"),Gwr=o(" (DistilBERT model)"),Owr=l(),fE=a("li"),wTe=a("strong"),Vwr=o("electra"),Xwr=o(" \u2014 "),eJ=a("a"),zwr=o("FlaxElectraModel"),Qwr=o(" (ELECTRA model)"),Wwr=l(),mE=a("li"),ATe=a("strong"),Hwr=o("gpt2"),Uwr=o(" \u2014 "),oJ=a("a"),Jwr=o("FlaxGPT2Model"),Ywr=o(" (OpenAI GPT-2 model)"),Kwr=l(),gE=a("li"),yTe=a("strong"),Zwr=o("gpt_neo"),eAr=o(" \u2014 "),rJ=a("a"),oAr=o("FlaxGPTNeoModel"),rAr=o(" (GPT Neo model)"),tAr=l(),hE=a("li"),LTe=a("strong"),aAr=o("gptj"),nAr=o(" \u2014 "),tJ=a("a"),sAr=o("FlaxGPTJModel"),lAr=o(" (GPT-J model)"),iAr=l(),pE=a("li"),xTe=a("strong"),dAr=o("longt5"),cAr=o(" \u2014 "),aJ=a("a"),fAr=o("FlaxLongT5Model"),mAr=o(" (LongT5 model)"),gAr=l(),uE=a("li"),$Te=a("strong"),hAr=o("marian"),pAr=o(" \u2014 "),nJ=a("a"),uAr=o("FlaxMarianModel"),_Ar=o(" (Marian model)"),bAr=l(),_E=a("li"),kTe=a("strong"),vAr=o("mbart"),FAr=o(" \u2014 "),sJ=a("a"),TAr=o("FlaxMBartModel"),MAr=o(" (mBART model)"),EAr=l(),bE=a("li"),STe=a("strong"),CAr=o("mt5"),wAr=o(" \u2014 "),lJ=a("a"),AAr=o("FlaxMT5Model"),yAr=o(" (mT5 model)"),LAr=l(),vE=a("li"),RTe=a("strong"),xAr=o("pegasus"),$Ar=o(" \u2014 "),iJ=a("a"),kAr=o("FlaxPegasusModel"),SAr=o(" (Pegasus model)"),RAr=l(),FE=a("li"),BTe=a("strong"),BAr=o("roberta"),PAr=o(" \u2014 "),dJ=a("a"),IAr=o("FlaxRobertaModel"),qAr=o(" (RoBERTa model)"),NAr=l(),TE=a("li"),PTe=a("strong"),jAr=o("roformer"),DAr=o(" \u2014 "),cJ=a("a"),GAr=o("FlaxRoFormerModel"),OAr=o(" (RoFormer model)"),VAr=l(),ME=a("li"),ITe=a("strong"),XAr=o("t5"),zAr=o(" \u2014 "),fJ=a("a"),QAr=o("FlaxT5Model"),WAr=o(" (T5 model)"),HAr=l(),EE=a("li"),qTe=a("strong"),UAr=o("vision-text-dual-encoder"),JAr=o(" \u2014 "),mJ=a("a"),YAr=o("FlaxVisionTextDualEncoderModel"),KAr=o(" (VisionTextDualEncoder model)"),ZAr=l(),CE=a("li"),NTe=a("strong"),e0r=o("vit"),o0r=o(" \u2014 "),gJ=a("a"),r0r=o("FlaxViTModel"),t0r=o(" (ViT model)"),a0r=l(),wE=a("li"),jTe=a("strong"),n0r=o("wav2vec2"),s0r=o(" \u2014 "),hJ=a("a"),l0r=o("FlaxWav2Vec2Model"),i0r=o(" (Wav2Vec2 model)"),d0r=l(),AE=a("li"),DTe=a("strong"),c0r=o("xglm"),f0r=o(" \u2014 "),pJ=a("a"),m0r=o("FlaxXGLMModel"),g0r=o(" (XGLM model)"),h0r=l(),yE=a("li"),GTe=a("strong"),p0r=o("xlm-roberta"),u0r=o(" \u2014 "),uJ=a("a"),_0r=o("FlaxXLMRobertaModel"),b0r=o(" (XLM-RoBERTa model)"),v0r=l(),F(LE.$$.fragment),Zqe=l(),$c=a("h2"),xE=a("a"),OTe=a("span"),F(i8.$$.fragment),F0r=l(),VTe=a("span"),T0r=o("FlaxAutoModelForCausalLM"),eNe=l(),mr=a("div"),F(d8.$$.fragment),M0r=l(),kc=a("p"),E0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=a("a"),C0r=o("from_pretrained()"),w0r=o(" class method or the "),bJ=a("a"),A0r=o("from_config()"),y0r=o(` class
method.`),L0r=l(),c8=a("p"),x0r=o("This class cannot be instantiated directly using "),XTe=a("code"),$0r=o("__init__()"),k0r=o(" (throws an error)."),S0r=l(),Dt=a("div"),F(f8.$$.fragment),R0r=l(),zTe=a("p"),B0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P0r=l(),Sc=a("p"),I0r=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),q0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),j0r=o("from_pretrained()"),D0r=o(" to load the model weights."),G0r=l(),F($E.$$.fragment),O0r=l(),Dr=a("div"),F(m8.$$.fragment),V0r=l(),WTe=a("p"),X0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z0r=l(),pn=a("p"),Q0r=o("The model class to instantiate is selected based on the "),HTe=a("code"),W0r=o("model_type"),H0r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(":"),Z0r=l(),Se=a("ul"),kE=a("li"),YTe=a("strong"),eyr=o("bart"),oyr=o(" \u2014 "),FJ=a("a"),ryr=o("FlaxBartForCausalLM"),tyr=o(" (BART model)"),ayr=l(),SE=a("li"),KTe=a("strong"),nyr=o("bert"),syr=o(" \u2014 "),TJ=a("a"),lyr=o("FlaxBertForCausalLM"),iyr=o(" (BERT model)"),dyr=l(),RE=a("li"),ZTe=a("strong"),cyr=o("big_bird"),fyr=o(" \u2014 "),MJ=a("a"),myr=o("FlaxBigBirdForCausalLM"),gyr=o(" (BigBird model)"),hyr=l(),BE=a("li"),e9e=a("strong"),pyr=o("electra"),uyr=o(" \u2014 "),EJ=a("a"),_yr=o("FlaxElectraForCausalLM"),byr=o(" (ELECTRA model)"),vyr=l(),PE=a("li"),o9e=a("strong"),Fyr=o("gpt2"),Tyr=o(" \u2014 "),CJ=a("a"),Myr=o("FlaxGPT2LMHeadModel"),Eyr=o(" (OpenAI GPT-2 model)"),Cyr=l(),IE=a("li"),r9e=a("strong"),wyr=o("gpt_neo"),Ayr=o(" \u2014 "),wJ=a("a"),yyr=o("FlaxGPTNeoForCausalLM"),Lyr=o(" (GPT Neo model)"),xyr=l(),qE=a("li"),t9e=a("strong"),$yr=o("gptj"),kyr=o(" \u2014 "),AJ=a("a"),Syr=o("FlaxGPTJForCausalLM"),Ryr=o(" (GPT-J model)"),Byr=l(),NE=a("li"),a9e=a("strong"),Pyr=o("roberta"),Iyr=o(" \u2014 "),yJ=a("a"),qyr=o("FlaxRobertaForCausalLM"),Nyr=o(" (RoBERTa model)"),jyr=l(),jE=a("li"),n9e=a("strong"),Dyr=o("xglm"),Gyr=o(" \u2014 "),LJ=a("a"),Oyr=o("FlaxXGLMForCausalLM"),Vyr=o(" (XGLM model)"),Xyr=l(),F(DE.$$.fragment),oNe=l(),Rc=a("h2"),GE=a("a"),s9e=a("span"),F(g8.$$.fragment),zyr=l(),l9e=a("span"),Qyr=o("FlaxAutoModelForPreTraining"),rNe=l(),gr=a("div"),F(h8.$$.fragment),Wyr=l(),Bc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),$J=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),p8=a("p"),eLr=o("This class cannot be instantiated directly using "),i9e=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),Gt=a("div"),F(u8.$$.fragment),aLr=l(),d9e=a("p"),nLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sLr=l(),Pc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),c9e=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),cLr=o("from_pretrained()"),fLr=o(" to load the model weights."),mLr=l(),F(OE.$$.fragment),gLr=l(),Gr=a("div"),F(_8.$$.fragment),hLr=l(),f9e=a("p"),pLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uLr=l(),un=a("p"),_Lr=o("The model class to instantiate is selected based on the "),m9e=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),g9e=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),Te=a("ul"),VE=a("li"),p9e=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),SJ=a("a"),yLr=o("FlaxAlbertForPreTraining"),LLr=o(" (ALBERT model)"),xLr=l(),XE=a("li"),u9e=a("strong"),$Lr=o("bart"),kLr=o(" \u2014 "),RJ=a("a"),SLr=o("FlaxBartForConditionalGeneration"),RLr=o(" (BART model)"),BLr=l(),zE=a("li"),_9e=a("strong"),PLr=o("bert"),ILr=o(" \u2014 "),BJ=a("a"),qLr=o("FlaxBertForPreTraining"),NLr=o(" (BERT model)"),jLr=l(),QE=a("li"),b9e=a("strong"),DLr=o("big_bird"),GLr=o(" \u2014 "),PJ=a("a"),OLr=o("FlaxBigBirdForPreTraining"),VLr=o(" (BigBird model)"),XLr=l(),WE=a("li"),v9e=a("strong"),zLr=o("electra"),QLr=o(" \u2014 "),IJ=a("a"),WLr=o("FlaxElectraForPreTraining"),HLr=o(" (ELECTRA model)"),ULr=l(),HE=a("li"),F9e=a("strong"),JLr=o("longt5"),YLr=o(" \u2014 "),qJ=a("a"),KLr=o("FlaxLongT5ForConditionalGeneration"),ZLr=o(" (LongT5 model)"),e8r=l(),UE=a("li"),T9e=a("strong"),o8r=o("mbart"),r8r=o(" \u2014 "),NJ=a("a"),t8r=o("FlaxMBartForConditionalGeneration"),a8r=o(" (mBART model)"),n8r=l(),JE=a("li"),M9e=a("strong"),s8r=o("mt5"),l8r=o(" \u2014 "),jJ=a("a"),i8r=o("FlaxMT5ForConditionalGeneration"),d8r=o(" (mT5 model)"),c8r=l(),YE=a("li"),E9e=a("strong"),f8r=o("roberta"),m8r=o(" \u2014 "),DJ=a("a"),g8r=o("FlaxRobertaForMaskedLM"),h8r=o(" (RoBERTa model)"),p8r=l(),KE=a("li"),C9e=a("strong"),u8r=o("roformer"),_8r=o(" \u2014 "),GJ=a("a"),b8r=o("FlaxRoFormerForMaskedLM"),v8r=o(" (RoFormer model)"),F8r=l(),ZE=a("li"),w9e=a("strong"),T8r=o("t5"),M8r=o(" \u2014 "),OJ=a("a"),E8r=o("FlaxT5ForConditionalGeneration"),C8r=o(" (T5 model)"),w8r=l(),e5=a("li"),A9e=a("strong"),A8r=o("wav2vec2"),y8r=o(" \u2014 "),VJ=a("a"),L8r=o("FlaxWav2Vec2ForPreTraining"),x8r=o(" (Wav2Vec2 model)"),$8r=l(),o5=a("li"),y9e=a("strong"),k8r=o("xlm-roberta"),S8r=o(" \u2014 "),XJ=a("a"),R8r=o("FlaxXLMRobertaForMaskedLM"),B8r=o(" (XLM-RoBERTa model)"),P8r=l(),F(r5.$$.fragment),tNe=l(),Ic=a("h2"),t5=a("a"),L9e=a("span"),F(b8.$$.fragment),I8r=l(),x9e=a("span"),q8r=o("FlaxAutoModelForMaskedLM"),aNe=l(),hr=a("div"),F(v8.$$.fragment),N8r=l(),qc=a("p"),j8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zJ=a("a"),D8r=o("from_pretrained()"),G8r=o(" class method or the "),QJ=a("a"),O8r=o("from_config()"),V8r=o(` class
method.`),X8r=l(),F8=a("p"),z8r=o("This class cannot be instantiated directly using "),$9e=a("code"),Q8r=o("__init__()"),W8r=o(" (throws an error)."),H8r=l(),Ot=a("div"),F(T8.$$.fragment),U8r=l(),k9e=a("p"),J8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y8r=l(),Nc=a("p"),K8r=o(`Note:
Loading a model from its configuration file does `),S9e=a("strong"),Z8r=o("not"),exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),oxr=o("from_pretrained()"),rxr=o(" to load the model weights."),txr=l(),F(a5.$$.fragment),axr=l(),Or=a("div"),F(M8.$$.fragment),nxr=l(),R9e=a("p"),sxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lxr=l(),_n=a("p"),ixr=o("The model class to instantiate is selected based on the "),B9e=a("code"),dxr=o("model_type"),cxr=o(` property of the config object (either
passed as an argument or loaded from `),P9e=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(":"),pxr=l(),Le=a("ul"),n5=a("li"),q9e=a("strong"),uxr=o("albert"),_xr=o(" \u2014 "),HJ=a("a"),bxr=o("FlaxAlbertForMaskedLM"),vxr=o(" (ALBERT model)"),Fxr=l(),s5=a("li"),N9e=a("strong"),Txr=o("bart"),Mxr=o(" \u2014 "),UJ=a("a"),Exr=o("FlaxBartForConditionalGeneration"),Cxr=o(" (BART model)"),wxr=l(),l5=a("li"),j9e=a("strong"),Axr=o("bert"),yxr=o(" \u2014 "),JJ=a("a"),Lxr=o("FlaxBertForMaskedLM"),xxr=o(" (BERT model)"),$xr=l(),i5=a("li"),D9e=a("strong"),kxr=o("big_bird"),Sxr=o(" \u2014 "),YJ=a("a"),Rxr=o("FlaxBigBirdForMaskedLM"),Bxr=o(" (BigBird model)"),Pxr=l(),d5=a("li"),G9e=a("strong"),Ixr=o("distilbert"),qxr=o(" \u2014 "),KJ=a("a"),Nxr=o("FlaxDistilBertForMaskedLM"),jxr=o(" (DistilBERT model)"),Dxr=l(),c5=a("li"),O9e=a("strong"),Gxr=o("electra"),Oxr=o(" \u2014 "),ZJ=a("a"),Vxr=o("FlaxElectraForMaskedLM"),Xxr=o(" (ELECTRA model)"),zxr=l(),f5=a("li"),V9e=a("strong"),Qxr=o("mbart"),Wxr=o(" \u2014 "),eY=a("a"),Hxr=o("FlaxMBartForConditionalGeneration"),Uxr=o(" (mBART model)"),Jxr=l(),m5=a("li"),X9e=a("strong"),Yxr=o("roberta"),Kxr=o(" \u2014 "),oY=a("a"),Zxr=o("FlaxRobertaForMaskedLM"),e$r=o(" (RoBERTa model)"),o$r=l(),g5=a("li"),z9e=a("strong"),r$r=o("roformer"),t$r=o(" \u2014 "),rY=a("a"),a$r=o("FlaxRoFormerForMaskedLM"),n$r=o(" (RoFormer model)"),s$r=l(),h5=a("li"),Q9e=a("strong"),l$r=o("xlm-roberta"),i$r=o(" \u2014 "),tY=a("a"),d$r=o("FlaxXLMRobertaForMaskedLM"),c$r=o(" (XLM-RoBERTa model)"),f$r=l(),F(p5.$$.fragment),nNe=l(),jc=a("h2"),u5=a("a"),W9e=a("span"),F(E8.$$.fragment),m$r=l(),H9e=a("span"),g$r=o("FlaxAutoModelForSeq2SeqLM"),sNe=l(),pr=a("div"),F(C8.$$.fragment),h$r=l(),Dc=a("p"),p$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aY=a("a"),u$r=o("from_pretrained()"),_$r=o(" class method or the "),nY=a("a"),b$r=o("from_config()"),v$r=o(` class
method.`),F$r=l(),w8=a("p"),T$r=o("This class cannot be instantiated directly using "),U9e=a("code"),M$r=o("__init__()"),E$r=o(" (throws an error)."),C$r=l(),Vt=a("div"),F(A8.$$.fragment),w$r=l(),J9e=a("p"),A$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y$r=l(),Gc=a("p"),L$r=o(`Note:
Loading a model from its configuration file does `),Y9e=a("strong"),x$r=o("not"),$$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),k$r=o("from_pretrained()"),S$r=o(" to load the model weights."),R$r=l(),F(_5.$$.fragment),B$r=l(),Vr=a("div"),F(y8.$$.fragment),P$r=l(),K9e=a("p"),I$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q$r=l(),bn=a("p"),N$r=o("The model class to instantiate is selected based on the "),Z9e=a("code"),j$r=o("model_type"),D$r=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(":"),z$r=l(),xe=a("ul"),b5=a("li"),r7e=a("strong"),Q$r=o("bart"),W$r=o(" \u2014 "),lY=a("a"),H$r=o("FlaxBartForConditionalGeneration"),U$r=o(" (BART model)"),J$r=l(),v5=a("li"),t7e=a("strong"),Y$r=o("blenderbot"),K$r=o(" \u2014 "),iY=a("a"),Z$r=o("FlaxBlenderbotForConditionalGeneration"),ekr=o(" (Blenderbot model)"),okr=l(),F5=a("li"),a7e=a("strong"),rkr=o("blenderbot-small"),tkr=o(" \u2014 "),dY=a("a"),akr=o("FlaxBlenderbotSmallForConditionalGeneration"),nkr=o(" (BlenderbotSmall model)"),skr=l(),T5=a("li"),n7e=a("strong"),lkr=o("encoder-decoder"),ikr=o(" \u2014 "),cY=a("a"),dkr=o("FlaxEncoderDecoderModel"),ckr=o(" (Encoder decoder model)"),fkr=l(),M5=a("li"),s7e=a("strong"),mkr=o("longt5"),gkr=o(" \u2014 "),fY=a("a"),hkr=o("FlaxLongT5ForConditionalGeneration"),pkr=o(" (LongT5 model)"),ukr=l(),E5=a("li"),l7e=a("strong"),_kr=o("marian"),bkr=o(" \u2014 "),mY=a("a"),vkr=o("FlaxMarianMTModel"),Fkr=o(" (Marian model)"),Tkr=l(),C5=a("li"),i7e=a("strong"),Mkr=o("mbart"),Ekr=o(" \u2014 "),gY=a("a"),Ckr=o("FlaxMBartForConditionalGeneration"),wkr=o(" (mBART model)"),Akr=l(),w5=a("li"),d7e=a("strong"),ykr=o("mt5"),Lkr=o(" \u2014 "),hY=a("a"),xkr=o("FlaxMT5ForConditionalGeneration"),$kr=o(" (mT5 model)"),kkr=l(),A5=a("li"),c7e=a("strong"),Skr=o("pegasus"),Rkr=o(" \u2014 "),pY=a("a"),Bkr=o("FlaxPegasusForConditionalGeneration"),Pkr=o(" (Pegasus model)"),Ikr=l(),y5=a("li"),f7e=a("strong"),qkr=o("t5"),Nkr=o(" \u2014 "),uY=a("a"),jkr=o("FlaxT5ForConditionalGeneration"),Dkr=o(" (T5 model)"),Gkr=l(),F(L5.$$.fragment),lNe=l(),Oc=a("h2"),x5=a("a"),m7e=a("span"),F(L8.$$.fragment),Okr=l(),g7e=a("span"),Vkr=o("FlaxAutoModelForSequenceClassification"),iNe=l(),ur=a("div"),F(x8.$$.fragment),Xkr=l(),Vc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_Y=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" class method or the "),bY=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),$8=a("p"),Ykr=o("This class cannot be instantiated directly using "),h7e=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Xt=a("div"),F(k8.$$.fragment),oSr=l(),p7e=a("p"),rSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tSr=l(),Xc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F($5.$$.fragment),cSr=l(),Xr=a("div"),F(S8.$$.fragment),fSr=l(),_7e=a("p"),mSr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gSr=l(),vn=a("p"),hSr=o("The model class to instantiate is selected based on the "),b7e=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),$e=a("ul"),k5=a("li"),T7e=a("strong"),MSr=o("albert"),ESr=o(" \u2014 "),FY=a("a"),CSr=o("FlaxAlbertForSequenceClassification"),wSr=o(" (ALBERT model)"),ASr=l(),S5=a("li"),M7e=a("strong"),ySr=o("bart"),LSr=o(" \u2014 "),TY=a("a"),xSr=o("FlaxBartForSequenceClassification"),$Sr=o(" (BART model)"),kSr=l(),R5=a("li"),E7e=a("strong"),SSr=o("bert"),RSr=o(" \u2014 "),MY=a("a"),BSr=o("FlaxBertForSequenceClassification"),PSr=o(" (BERT model)"),ISr=l(),B5=a("li"),C7e=a("strong"),qSr=o("big_bird"),NSr=o(" \u2014 "),EY=a("a"),jSr=o("FlaxBigBirdForSequenceClassification"),DSr=o(" (BigBird model)"),GSr=l(),P5=a("li"),w7e=a("strong"),OSr=o("distilbert"),VSr=o(" \u2014 "),CY=a("a"),XSr=o("FlaxDistilBertForSequenceClassification"),zSr=o(" (DistilBERT model)"),QSr=l(),I5=a("li"),A7e=a("strong"),WSr=o("electra"),HSr=o(" \u2014 "),wY=a("a"),USr=o("FlaxElectraForSequenceClassification"),JSr=o(" (ELECTRA model)"),YSr=l(),q5=a("li"),y7e=a("strong"),KSr=o("mbart"),ZSr=o(" \u2014 "),AY=a("a"),eRr=o("FlaxMBartForSequenceClassification"),oRr=o(" (mBART model)"),rRr=l(),N5=a("li"),L7e=a("strong"),tRr=o("roberta"),aRr=o(" \u2014 "),yY=a("a"),nRr=o("FlaxRobertaForSequenceClassification"),sRr=o(" (RoBERTa model)"),lRr=l(),j5=a("li"),x7e=a("strong"),iRr=o("roformer"),dRr=o(" \u2014 "),LY=a("a"),cRr=o("FlaxRoFormerForSequenceClassification"),fRr=o(" (RoFormer model)"),mRr=l(),D5=a("li"),$7e=a("strong"),gRr=o("xlm-roberta"),hRr=o(" \u2014 "),xY=a("a"),pRr=o("FlaxXLMRobertaForSequenceClassification"),uRr=o(" (XLM-RoBERTa model)"),_Rr=l(),F(G5.$$.fragment),dNe=l(),zc=a("h2"),O5=a("a"),k7e=a("span"),F(R8.$$.fragment),bRr=l(),S7e=a("span"),vRr=o("FlaxAutoModelForQuestionAnswering"),cNe=l(),_r=a("div"),F(B8.$$.fragment),FRr=l(),Qc=a("p"),TRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Y=a("a"),MRr=o("from_pretrained()"),ERr=o(" class method or the "),kY=a("a"),CRr=o("from_config()"),wRr=o(` class
method.`),ARr=l(),P8=a("p"),yRr=o("This class cannot be instantiated directly using "),R7e=a("code"),LRr=o("__init__()"),xRr=o(" (throws an error)."),$Rr=l(),zt=a("div"),F(I8.$$.fragment),kRr=l(),B7e=a("p"),SRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RRr=l(),Wc=a("p"),BRr=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),PRr=o("not"),IRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=a("a"),qRr=o("from_pretrained()"),NRr=o(" to load the model weights."),jRr=l(),F(V5.$$.fragment),DRr=l(),zr=a("div"),F(q8.$$.fragment),GRr=l(),I7e=a("p"),ORr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VRr=l(),Fn=a("p"),XRr=o("The model class to instantiate is selected based on the "),q7e=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),WRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),ke=a("ul"),X5=a("li"),D7e=a("strong"),KRr=o("albert"),ZRr=o(" \u2014 "),RY=a("a"),eBr=o("FlaxAlbertForQuestionAnswering"),oBr=o(" (ALBERT model)"),rBr=l(),z5=a("li"),G7e=a("strong"),tBr=o("bart"),aBr=o(" \u2014 "),BY=a("a"),nBr=o("FlaxBartForQuestionAnswering"),sBr=o(" (BART model)"),lBr=l(),Q5=a("li"),O7e=a("strong"),iBr=o("bert"),dBr=o(" \u2014 "),PY=a("a"),cBr=o("FlaxBertForQuestionAnswering"),fBr=o(" (BERT model)"),mBr=l(),W5=a("li"),V7e=a("strong"),gBr=o("big_bird"),hBr=o(" \u2014 "),IY=a("a"),pBr=o("FlaxBigBirdForQuestionAnswering"),uBr=o(" (BigBird model)"),_Br=l(),H5=a("li"),X7e=a("strong"),bBr=o("distilbert"),vBr=o(" \u2014 "),qY=a("a"),FBr=o("FlaxDistilBertForQuestionAnswering"),TBr=o(" (DistilBERT model)"),MBr=l(),U5=a("li"),z7e=a("strong"),EBr=o("electra"),CBr=o(" \u2014 "),NY=a("a"),wBr=o("FlaxElectraForQuestionAnswering"),ABr=o(" (ELECTRA model)"),yBr=l(),J5=a("li"),Q7e=a("strong"),LBr=o("mbart"),xBr=o(" \u2014 "),jY=a("a"),$Br=o("FlaxMBartForQuestionAnswering"),kBr=o(" (mBART model)"),SBr=l(),Y5=a("li"),W7e=a("strong"),RBr=o("roberta"),BBr=o(" \u2014 "),DY=a("a"),PBr=o("FlaxRobertaForQuestionAnswering"),IBr=o(" (RoBERTa model)"),qBr=l(),K5=a("li"),H7e=a("strong"),NBr=o("roformer"),jBr=o(" \u2014 "),GY=a("a"),DBr=o("FlaxRoFormerForQuestionAnswering"),GBr=o(" (RoFormer model)"),OBr=l(),Z5=a("li"),U7e=a("strong"),VBr=o("xlm-roberta"),XBr=o(" \u2014 "),OY=a("a"),zBr=o("FlaxXLMRobertaForQuestionAnswering"),QBr=o(" (XLM-RoBERTa model)"),WBr=l(),F(eC.$$.fragment),fNe=l(),Hc=a("h2"),oC=a("a"),J7e=a("span"),F(N8.$$.fragment),HBr=l(),Y7e=a("span"),UBr=o("FlaxAutoModelForTokenClassification"),mNe=l(),br=a("div"),F(j8.$$.fragment),JBr=l(),Uc=a("p"),YBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VY=a("a"),KBr=o("from_pretrained()"),ZBr=o(" class method or the "),XY=a("a"),ePr=o("from_config()"),oPr=o(` class
method.`),rPr=l(),D8=a("p"),tPr=o("This class cannot be instantiated directly using "),K7e=a("code"),aPr=o("__init__()"),nPr=o(" (throws an error)."),sPr=l(),Qt=a("div"),F(G8.$$.fragment),lPr=l(),Z7e=a("p"),iPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dPr=l(),Jc=a("p"),cPr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),fPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),gPr=o("from_pretrained()"),hPr=o(" to load the model weights."),pPr=l(),F(rC.$$.fragment),uPr=l(),Qr=a("div"),F(O8.$$.fragment),_Pr=l(),oMe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vPr=l(),Tn=a("p"),FPr=o("The model class to instantiate is selected based on the "),rMe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),Ge=a("ul"),tC=a("li"),nMe=a("strong"),LPr=o("albert"),xPr=o(" \u2014 "),QY=a("a"),$Pr=o("FlaxAlbertForTokenClassification"),kPr=o(" (ALBERT model)"),SPr=l(),aC=a("li"),sMe=a("strong"),RPr=o("bert"),BPr=o(" \u2014 "),WY=a("a"),PPr=o("FlaxBertForTokenClassification"),IPr=o(" (BERT model)"),qPr=l(),nC=a("li"),lMe=a("strong"),NPr=o("big_bird"),jPr=o(" \u2014 "),HY=a("a"),DPr=o("FlaxBigBirdForTokenClassification"),GPr=o(" (BigBird model)"),OPr=l(),sC=a("li"),iMe=a("strong"),VPr=o("distilbert"),XPr=o(" \u2014 "),UY=a("a"),zPr=o("FlaxDistilBertForTokenClassification"),QPr=o(" (DistilBERT model)"),WPr=l(),lC=a("li"),dMe=a("strong"),HPr=o("electra"),UPr=o(" \u2014 "),JY=a("a"),JPr=o("FlaxElectraForTokenClassification"),YPr=o(" (ELECTRA model)"),KPr=l(),iC=a("li"),cMe=a("strong"),ZPr=o("roberta"),eIr=o(" \u2014 "),YY=a("a"),oIr=o("FlaxRobertaForTokenClassification"),rIr=o(" (RoBERTa model)"),tIr=l(),dC=a("li"),fMe=a("strong"),aIr=o("roformer"),nIr=o(" \u2014 "),KY=a("a"),sIr=o("FlaxRoFormerForTokenClassification"),lIr=o(" (RoFormer model)"),iIr=l(),cC=a("li"),mMe=a("strong"),dIr=o("xlm-roberta"),cIr=o(" \u2014 "),ZY=a("a"),fIr=o("FlaxXLMRobertaForTokenClassification"),mIr=o(" (XLM-RoBERTa model)"),gIr=l(),F(fC.$$.fragment),gNe=l(),Yc=a("h2"),mC=a("a"),gMe=a("span"),F(V8.$$.fragment),hIr=l(),hMe=a("span"),pIr=o("FlaxAutoModelForMultipleChoice"),hNe=l(),vr=a("div"),F(X8.$$.fragment),uIr=l(),Kc=a("p"),_Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eK=a("a"),bIr=o("from_pretrained()"),vIr=o(" class method or the "),oK=a("a"),FIr=o("from_config()"),TIr=o(` class
method.`),MIr=l(),z8=a("p"),EIr=o("This class cannot be instantiated directly using "),pMe=a("code"),CIr=o("__init__()"),wIr=o(" (throws an error)."),AIr=l(),Wt=a("div"),F(Q8.$$.fragment),yIr=l(),uMe=a("p"),LIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xIr=l(),Zc=a("p"),$Ir=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),kIr=o("not"),SIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),RIr=o("from_pretrained()"),BIr=o(" to load the model weights."),PIr=l(),F(gC.$$.fragment),IIr=l(),Wr=a("div"),F(W8.$$.fragment),qIr=l(),bMe=a("p"),NIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jIr=l(),Mn=a("p"),DIr=o("The model class to instantiate is selected based on the "),vMe=a("code"),GIr=o("model_type"),OIr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),VIr=o("pretrained_model_name_or_path"),XIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),zIr=o("pretrained_model_name_or_path"),QIr=o(":"),WIr=l(),Oe=a("ul"),hC=a("li"),MMe=a("strong"),HIr=o("albert"),UIr=o(" \u2014 "),tK=a("a"),JIr=o("FlaxAlbertForMultipleChoice"),YIr=o(" (ALBERT model)"),KIr=l(),pC=a("li"),EMe=a("strong"),ZIr=o("bert"),eqr=o(" \u2014 "),aK=a("a"),oqr=o("FlaxBertForMultipleChoice"),rqr=o(" (BERT model)"),tqr=l(),uC=a("li"),CMe=a("strong"),aqr=o("big_bird"),nqr=o(" \u2014 "),nK=a("a"),sqr=o("FlaxBigBirdForMultipleChoice"),lqr=o(" (BigBird model)"),iqr=l(),_C=a("li"),wMe=a("strong"),dqr=o("distilbert"),cqr=o(" \u2014 "),sK=a("a"),fqr=o("FlaxDistilBertForMultipleChoice"),mqr=o(" (DistilBERT model)"),gqr=l(),bC=a("li"),AMe=a("strong"),hqr=o("electra"),pqr=o(" \u2014 "),lK=a("a"),uqr=o("FlaxElectraForMultipleChoice"),_qr=o(" (ELECTRA model)"),bqr=l(),vC=a("li"),yMe=a("strong"),vqr=o("roberta"),Fqr=o(" \u2014 "),iK=a("a"),Tqr=o("FlaxRobertaForMultipleChoice"),Mqr=o(" (RoBERTa model)"),Eqr=l(),FC=a("li"),LMe=a("strong"),Cqr=o("roformer"),wqr=o(" \u2014 "),dK=a("a"),Aqr=o("FlaxRoFormerForMultipleChoice"),yqr=o(" (RoFormer model)"),Lqr=l(),TC=a("li"),xMe=a("strong"),xqr=o("xlm-roberta"),$qr=o(" \u2014 "),cK=a("a"),kqr=o("FlaxXLMRobertaForMultipleChoice"),Sqr=o(" (XLM-RoBERTa model)"),Rqr=l(),F(MC.$$.fragment),pNe=l(),ef=a("h2"),EC=a("a"),$Me=a("span"),F(H8.$$.fragment),Bqr=l(),kMe=a("span"),Pqr=o("FlaxAutoModelForNextSentencePrediction"),uNe=l(),Fr=a("div"),F(U8.$$.fragment),Iqr=l(),of=a("p"),qqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fK=a("a"),Nqr=o("from_pretrained()"),jqr=o(" class method or the "),mK=a("a"),Dqr=o("from_config()"),Gqr=o(` class
method.`),Oqr=l(),J8=a("p"),Vqr=o("This class cannot be instantiated directly using "),SMe=a("code"),Xqr=o("__init__()"),zqr=o(" (throws an error)."),Qqr=l(),Ht=a("div"),F(Y8.$$.fragment),Wqr=l(),RMe=a("p"),Hqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Uqr=l(),rf=a("p"),Jqr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),Yqr=o("not"),Kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),Zqr=o("from_pretrained()"),eNr=o(" to load the model weights."),oNr=l(),F(CC.$$.fragment),rNr=l(),Hr=a("div"),F(K8.$$.fragment),tNr=l(),PMe=a("p"),aNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nNr=l(),En=a("p"),sNr=o("The model class to instantiate is selected based on the "),IMe=a("code"),lNr=o("model_type"),iNr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),dNr=o("pretrained_model_name_or_path"),cNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),fNr=o("pretrained_model_name_or_path"),mNr=o(":"),gNr=l(),jMe=a("ul"),wC=a("li"),DMe=a("strong"),hNr=o("bert"),pNr=o(" \u2014 "),hK=a("a"),uNr=o("FlaxBertForNextSentencePrediction"),_Nr=o(" (BERT model)"),bNr=l(),F(AC.$$.fragment),_Ne=l(),tf=a("h2"),yC=a("a"),GMe=a("span"),F(Z8.$$.fragment),vNr=l(),OMe=a("span"),FNr=o("FlaxAutoModelForImageClassification"),bNe=l(),Tr=a("div"),F(ex.$$.fragment),TNr=l(),af=a("p"),MNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pK=a("a"),ENr=o("from_pretrained()"),CNr=o(" class method or the "),uK=a("a"),wNr=o("from_config()"),ANr=o(` class
method.`),yNr=l(),ox=a("p"),LNr=o("This class cannot be instantiated directly using "),VMe=a("code"),xNr=o("__init__()"),$Nr=o(" (throws an error)."),kNr=l(),Ut=a("div"),F(rx.$$.fragment),SNr=l(),XMe=a("p"),RNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BNr=l(),nf=a("p"),PNr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),INr=o("not"),qNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),NNr=o("from_pretrained()"),jNr=o(" to load the model weights."),DNr=l(),F(LC.$$.fragment),GNr=l(),Ur=a("div"),F(tx.$$.fragment),ONr=l(),QMe=a("p"),VNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XNr=l(),Cn=a("p"),zNr=o("The model class to instantiate is selected based on the "),WMe=a("code"),QNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),HNr=o("pretrained_model_name_or_path"),UNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),JNr=o("pretrained_model_name_or_path"),YNr=o(":"),KNr=l(),ax=a("ul"),xC=a("li"),JMe=a("strong"),ZNr=o("beit"),ejr=o(" \u2014 "),bK=a("a"),ojr=o("FlaxBeitForImageClassification"),rjr=o(" (BEiT model)"),tjr=l(),$C=a("li"),YMe=a("strong"),ajr=o("vit"),njr=o(" \u2014 "),vK=a("a"),sjr=o("FlaxViTForImageClassification"),ljr=o(" (ViT model)"),ijr=l(),F(kC.$$.fragment),vNe=l(),sf=a("h2"),SC=a("a"),KMe=a("span"),F(nx.$$.fragment),djr=l(),ZMe=a("span"),cjr=o("FlaxAutoModelForVision2Seq"),FNe=l(),Mr=a("div"),F(sx.$$.fragment),fjr=l(),lf=a("p"),mjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FK=a("a"),gjr=o("from_pretrained()"),hjr=o(" class method or the "),TK=a("a"),pjr=o("from_config()"),ujr=o(` class
method.`),_jr=l(),lx=a("p"),bjr=o("This class cannot be instantiated directly using "),e4e=a("code"),vjr=o("__init__()"),Fjr=o(" (throws an error)."),Tjr=l(),Jt=a("div"),F(ix.$$.fragment),Mjr=l(),o4e=a("p"),Ejr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cjr=l(),df=a("p"),wjr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Ajr=o("not"),yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),Ljr=o("from_pretrained()"),xjr=o(" to load the model weights."),$jr=l(),F(RC.$$.fragment),kjr=l(),Jr=a("div"),F(dx.$$.fragment),Sjr=l(),t4e=a("p"),Rjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bjr=l(),wn=a("p"),Pjr=o("The model class to instantiate is selected based on the "),a4e=a("code"),Ijr=o("model_type"),qjr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),Njr=o("pretrained_model_name_or_path"),jjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),Djr=o("pretrained_model_name_or_path"),Gjr=o(":"),Ojr=l(),l4e=a("ul"),BC=a("li"),i4e=a("strong"),Vjr=o("vision-encoder-decoder"),Xjr=o(" \u2014 "),EK=a("a"),zjr=o("FlaxVisionEncoderDecoderModel"),Qjr=o(" (Vision Encoder decoder model)"),Wjr=l(),F(PC.$$.fragment),this.h()},l(f){const _=q0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var cx=s(p);m=n(cx,"A",{id:!0,class:!0,href:!0});var d4e=s(m);u=n(d4e,"SPAN",{});var c4e=s(u);T(d.$$.fragment,c4e),c4e.forEach(t),d4e.forEach(t),h=i(cx),Mo=n(cx,"SPAN",{});var f4e=s(Mo);di=r(f4e,"Auto Classes"),f4e.forEach(t),cx.forEach(t),gf=i(f),et=n(f,"P",{});var fx=s(et);ci=r(fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(fx,"CODE",{});var m4e=s(fi);oA=r(m4e,"from_pretrained()"),m4e.forEach(t),hf=r(fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),fx.forEach(t),Ne=i(f),Xe=n(f,"P",{});var An=s(Xe);mi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var g4e=s(yn);rA=r(g4e,"AutoConfig"),g4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var h4e=s(xn);tA=r(h4e,"AutoModel"),h4e.forEach(t),gi=r(An,`, and
`),$n=n(An,"A",{href:!0});var p4e=s($n);aA=r(p4e,"AutoTokenizer"),p4e.forEach(t),hi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var mx=s(Ae);E$=r(mx,"will create a model that is an instance of "),pi=n(mx,"A",{href:!0});var u4e=s(pi);C$=r(u4e,"BertModel"),u4e.forEach(t),w$=r(mx,"."),mx.forEach(t),Eo=i(f),Ea=n(f,"P",{});var gx=s(Ea);A$=r(gx,"There is one class of "),uf=n(gx,"CODE",{});var _4e=s(uf);y$=r(_4e,"AutoModel"),_4e.forEach(t),xDe=r(gx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gx.forEach(t),bIe=i(f),ui=n(f,"H2",{class:!0});var hx=s(ui);_f=n(hx,"A",{id:!0,class:!0,href:!0});var b4e=s(_f);uee=n(b4e,"SPAN",{});var v4e=s(uee);T(nA.$$.fragment,v4e),v4e.forEach(t),b4e.forEach(t),$De=i(hx),_ee=n(hx,"SPAN",{});var F4e=s(_ee);kDe=r(F4e,"Extending the Auto Classes"),F4e.forEach(t),hx.forEach(t),vIe=i(f),kn=n(f,"P",{});var cf=s(kn);SDe=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),bee=n(cf,"CODE",{});var T4e=s(bee);RDe=r(T4e,"NewModel"),T4e.forEach(t),BDe=r(cf,", make sure you have a "),vee=n(cf,"CODE",{});var M4e=s(vee);PDe=r(M4e,"NewModelConfig"),M4e.forEach(t),IDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),FIe=i(f),T(sA.$$.fragment,f),TIe=i(f),L$=n(f,"P",{});var E4e=s(L$);qDe=r(E4e,"You will then be able to use the auto classes like you would usually do!"),E4e.forEach(t),MIe=i(f),T(bf.$$.fragment,f),EIe=i(f),_i=n(f,"H2",{class:!0});var px=s(_i);vf=n(px,"A",{id:!0,class:!0,href:!0});var C4e=s(vf);Fee=n(C4e,"SPAN",{});var w4e=s(Fee);T(lA.$$.fragment,w4e),w4e.forEach(t),C4e.forEach(t),NDe=i(px),Tee=n(px,"SPAN",{});var A4e=s(Tee);jDe=r(A4e,"AutoConfig"),A4e.forEach(t),px.forEach(t),CIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(iA.$$.fragment,Kr),DDe=i(Kr),dA=n(Kr,"P",{});var ux=s(dA);GDe=r(ux,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x$=n(ux,"A",{href:!0});var y4e=s(x$);ODe=r(y4e,"from_pretrained()"),y4e.forEach(t),VDe=r(ux," class method."),ux.forEach(t),XDe=i(Kr),cA=n(Kr,"P",{});var _x=s(cA);zDe=r(_x,"This class cannot be instantiated directly using "),Mee=n(_x,"CODE",{});var L4e=s(Mee);QDe=r(L4e,"__init__()"),L4e.forEach(t),WDe=r(_x," (throws an error)."),_x.forEach(t),HDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(fA.$$.fragment,Zr),UDe=i(Zr),Eee=n(Zr,"P",{});var x4e=s(Eee);JDe=r(x4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),x4e.forEach(t),YDe=i(Zr),bi=n(Zr,"P",{});var ff=s(bi);KDe=r(ff,"The configuration class to instantiate is selected based on the "),Cee=n(ff,"CODE",{});var $4e=s(Cee);ZDe=r($4e,"model_type"),$4e.forEach(t),eGe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wee=n(ff,"CODE",{});var k4e=s(wee);oGe=r(k4e,"pretrained_model_name_or_path"),k4e.forEach(t),rGe=r(ff,":"),ff.forEach(t),tGe=i(Zr),A=n(Zr,"UL",{});var y=s(A);Ff=n(y,"LI",{});var IC=s(Ff);Aee=n(IC,"STRONG",{});var S4e=s(Aee);aGe=r(S4e,"albert"),S4e.forEach(t),nGe=r(IC," \u2014 "),$$=n(IC,"A",{href:!0});var R4e=s($$);sGe=r(R4e,"AlbertConfig"),R4e.forEach(t),lGe=r(IC," (ALBERT model)"),IC.forEach(t),iGe=i(y),Tf=n(y,"LI",{});var qC=s(Tf);yee=n(qC,"STRONG",{});var B4e=s(yee);dGe=r(B4e,"bart"),B4e.forEach(t),cGe=r(qC," \u2014 "),k$=n(qC,"A",{href:!0});var P4e=s(k$);fGe=r(P4e,"BartConfig"),P4e.forEach(t),mGe=r(qC," (BART model)"),qC.forEach(t),gGe=i(y),Mf=n(y,"LI",{});var NC=s(Mf);Lee=n(NC,"STRONG",{});var I4e=s(Lee);hGe=r(I4e,"beit"),I4e.forEach(t),pGe=r(NC," \u2014 "),S$=n(NC,"A",{href:!0});var q4e=s(S$);uGe=r(q4e,"BeitConfig"),q4e.forEach(t),_Ge=r(NC," (BEiT model)"),NC.forEach(t),bGe=i(y),Ef=n(y,"LI",{});var jC=s(Ef);xee=n(jC,"STRONG",{});var N4e=s(xee);vGe=r(N4e,"bert"),N4e.forEach(t),FGe=r(jC," \u2014 "),R$=n(jC,"A",{href:!0});var j4e=s(R$);TGe=r(j4e,"BertConfig"),j4e.forEach(t),MGe=r(jC," (BERT model)"),jC.forEach(t),EGe=i(y),Cf=n(y,"LI",{});var DC=s(Cf);$ee=n(DC,"STRONG",{});var D4e=s($ee);CGe=r(D4e,"bert-generation"),D4e.forEach(t),wGe=r(DC," \u2014 "),B$=n(DC,"A",{href:!0});var G4e=s(B$);AGe=r(G4e,"BertGenerationConfig"),G4e.forEach(t),yGe=r(DC," (Bert Generation model)"),DC.forEach(t),LGe=i(y),wf=n(y,"LI",{});var GC=s(wf);kee=n(GC,"STRONG",{});var O4e=s(kee);xGe=r(O4e,"big_bird"),O4e.forEach(t),$Ge=r(GC," \u2014 "),P$=n(GC,"A",{href:!0});var V4e=s(P$);kGe=r(V4e,"BigBirdConfig"),V4e.forEach(t),SGe=r(GC," (BigBird model)"),GC.forEach(t),RGe=i(y),Af=n(y,"LI",{});var OC=s(Af);See=n(OC,"STRONG",{});var X4e=s(See);BGe=r(X4e,"bigbird_pegasus"),X4e.forEach(t),PGe=r(OC," \u2014 "),I$=n(OC,"A",{href:!0});var z4e=s(I$);IGe=r(z4e,"BigBirdPegasusConfig"),z4e.forEach(t),qGe=r(OC," (BigBirdPegasus model)"),OC.forEach(t),NGe=i(y),yf=n(y,"LI",{});var VC=s(yf);Ree=n(VC,"STRONG",{});var Q4e=s(Ree);jGe=r(Q4e,"blenderbot"),Q4e.forEach(t),DGe=r(VC," \u2014 "),q$=n(VC,"A",{href:!0});var W4e=s(q$);GGe=r(W4e,"BlenderbotConfig"),W4e.forEach(t),OGe=r(VC," (Blenderbot model)"),VC.forEach(t),VGe=i(y),Lf=n(y,"LI",{});var XC=s(Lf);Bee=n(XC,"STRONG",{});var H4e=s(Bee);XGe=r(H4e,"blenderbot-small"),H4e.forEach(t),zGe=r(XC," \u2014 "),N$=n(XC,"A",{href:!0});var U4e=s(N$);QGe=r(U4e,"BlenderbotSmallConfig"),U4e.forEach(t),WGe=r(XC," (BlenderbotSmall model)"),XC.forEach(t),HGe=i(y),xf=n(y,"LI",{});var zC=s(xf);Pee=n(zC,"STRONG",{});var J4e=s(Pee);UGe=r(J4e,"camembert"),J4e.forEach(t),JGe=r(zC," \u2014 "),j$=n(zC,"A",{href:!0});var Y4e=s(j$);YGe=r(Y4e,"CamembertConfig"),Y4e.forEach(t),KGe=r(zC," (CamemBERT model)"),zC.forEach(t),ZGe=i(y),$f=n(y,"LI",{});var QC=s($f);Iee=n(QC,"STRONG",{});var K4e=s(Iee);eOe=r(K4e,"canine"),K4e.forEach(t),oOe=r(QC," \u2014 "),D$=n(QC,"A",{href:!0});var Z4e=s(D$);rOe=r(Z4e,"CanineConfig"),Z4e.forEach(t),tOe=r(QC," (Canine model)"),QC.forEach(t),aOe=i(y),kf=n(y,"LI",{});var WC=s(kf);qee=n(WC,"STRONG",{});var eEe=s(qee);nOe=r(eEe,"clip"),eEe.forEach(t),sOe=r(WC," \u2014 "),G$=n(WC,"A",{href:!0});var oEe=s(G$);lOe=r(oEe,"CLIPConfig"),oEe.forEach(t),iOe=r(WC," (CLIP model)"),WC.forEach(t),dOe=i(y),Sf=n(y,"LI",{});var HC=s(Sf);Nee=n(HC,"STRONG",{});var rEe=s(Nee);cOe=r(rEe,"convbert"),rEe.forEach(t),fOe=r(HC," \u2014 "),O$=n(HC,"A",{href:!0});var tEe=s(O$);mOe=r(tEe,"ConvBertConfig"),tEe.forEach(t),gOe=r(HC," (ConvBERT model)"),HC.forEach(t),hOe=i(y),Rf=n(y,"LI",{});var UC=s(Rf);jee=n(UC,"STRONG",{});var aEe=s(jee);pOe=r(aEe,"convnext"),aEe.forEach(t),uOe=r(UC," \u2014 "),V$=n(UC,"A",{href:!0});var nEe=s(V$);_Oe=r(nEe,"ConvNextConfig"),nEe.forEach(t),bOe=r(UC," (ConvNext model)"),UC.forEach(t),vOe=i(y),Bf=n(y,"LI",{});var JC=s(Bf);Dee=n(JC,"STRONG",{});var sEe=s(Dee);FOe=r(sEe,"ctrl"),sEe.forEach(t),TOe=r(JC," \u2014 "),X$=n(JC,"A",{href:!0});var lEe=s(X$);MOe=r(lEe,"CTRLConfig"),lEe.forEach(t),EOe=r(JC," (CTRL model)"),JC.forEach(t),COe=i(y),Pf=n(y,"LI",{});var YC=s(Pf);Gee=n(YC,"STRONG",{});var iEe=s(Gee);wOe=r(iEe,"data2vec-audio"),iEe.forEach(t),AOe=r(YC," \u2014 "),z$=n(YC,"A",{href:!0});var dEe=s(z$);yOe=r(dEe,"Data2VecAudioConfig"),dEe.forEach(t),LOe=r(YC," (Data2VecAudio model)"),YC.forEach(t),xOe=i(y),If=n(y,"LI",{});var KC=s(If);Oee=n(KC,"STRONG",{});var cEe=s(Oee);$Oe=r(cEe,"data2vec-text"),cEe.forEach(t),kOe=r(KC," \u2014 "),Q$=n(KC,"A",{href:!0});var fEe=s(Q$);SOe=r(fEe,"Data2VecTextConfig"),fEe.forEach(t),ROe=r(KC," (Data2VecText model)"),KC.forEach(t),BOe=i(y),qf=n(y,"LI",{});var ZC=s(qf);Vee=n(ZC,"STRONG",{});var mEe=s(Vee);POe=r(mEe,"data2vec-vision"),mEe.forEach(t),IOe=r(ZC," \u2014 "),W$=n(ZC,"A",{href:!0});var gEe=s(W$);qOe=r(gEe,"Data2VecVisionConfig"),gEe.forEach(t),NOe=r(ZC," (Data2VecVision model)"),ZC.forEach(t),jOe=i(y),Nf=n(y,"LI",{});var e3=s(Nf);Xee=n(e3,"STRONG",{});var hEe=s(Xee);DOe=r(hEe,"deberta"),hEe.forEach(t),GOe=r(e3," \u2014 "),H$=n(e3,"A",{href:!0});var pEe=s(H$);OOe=r(pEe,"DebertaConfig"),pEe.forEach(t),VOe=r(e3," (DeBERTa model)"),e3.forEach(t),XOe=i(y),jf=n(y,"LI",{});var o3=s(jf);zee=n(o3,"STRONG",{});var uEe=s(zee);zOe=r(uEe,"deberta-v2"),uEe.forEach(t),QOe=r(o3," \u2014 "),U$=n(o3,"A",{href:!0});var _Ee=s(U$);WOe=r(_Ee,"DebertaV2Config"),_Ee.forEach(t),HOe=r(o3," (DeBERTa-v2 model)"),o3.forEach(t),UOe=i(y),Df=n(y,"LI",{});var r3=s(Df);Qee=n(r3,"STRONG",{});var bEe=s(Qee);JOe=r(bEe,"decision_transformer"),bEe.forEach(t),YOe=r(r3," \u2014 "),J$=n(r3,"A",{href:!0});var vEe=s(J$);KOe=r(vEe,"DecisionTransformerConfig"),vEe.forEach(t),ZOe=r(r3," (Decision Transformer model)"),r3.forEach(t),eVe=i(y),Gf=n(y,"LI",{});var t3=s(Gf);Wee=n(t3,"STRONG",{});var FEe=s(Wee);oVe=r(FEe,"deit"),FEe.forEach(t),rVe=r(t3," \u2014 "),Y$=n(t3,"A",{href:!0});var TEe=s(Y$);tVe=r(TEe,"DeiTConfig"),TEe.forEach(t),aVe=r(t3," (DeiT model)"),t3.forEach(t),nVe=i(y),Of=n(y,"LI",{});var a3=s(Of);Hee=n(a3,"STRONG",{});var MEe=s(Hee);sVe=r(MEe,"detr"),MEe.forEach(t),lVe=r(a3," \u2014 "),K$=n(a3,"A",{href:!0});var Ujr=s(K$);iVe=r(Ujr,"DetrConfig"),Ujr.forEach(t),dVe=r(a3," (DETR model)"),a3.forEach(t),cVe=i(y),Vf=n(y,"LI",{});var EEe=s(Vf);Uee=n(EEe,"STRONG",{});var Jjr=s(Uee);fVe=r(Jjr,"distilbert"),Jjr.forEach(t),mVe=r(EEe," \u2014 "),Z$=n(EEe,"A",{href:!0});var Yjr=s(Z$);gVe=r(Yjr,"DistilBertConfig"),Yjr.forEach(t),hVe=r(EEe," (DistilBERT model)"),EEe.forEach(t),pVe=i(y),Xf=n(y,"LI",{});var CEe=s(Xf);Jee=n(CEe,"STRONG",{});var Kjr=s(Jee);uVe=r(Kjr,"dpr"),Kjr.forEach(t),_Ve=r(CEe," \u2014 "),ek=n(CEe,"A",{href:!0});var Zjr=s(ek);bVe=r(Zjr,"DPRConfig"),Zjr.forEach(t),vVe=r(CEe," (DPR model)"),CEe.forEach(t),FVe=i(y),zf=n(y,"LI",{});var wEe=s(zf);Yee=n(wEe,"STRONG",{});var eDr=s(Yee);TVe=r(eDr,"dpt"),eDr.forEach(t),MVe=r(wEe," \u2014 "),ok=n(wEe,"A",{href:!0});var oDr=s(ok);EVe=r(oDr,"DPTConfig"),oDr.forEach(t),CVe=r(wEe," (DPT model)"),wEe.forEach(t),wVe=i(y),Qf=n(y,"LI",{});var AEe=s(Qf);Kee=n(AEe,"STRONG",{});var rDr=s(Kee);AVe=r(rDr,"electra"),rDr.forEach(t),yVe=r(AEe," \u2014 "),rk=n(AEe,"A",{href:!0});var tDr=s(rk);LVe=r(tDr,"ElectraConfig"),tDr.forEach(t),xVe=r(AEe," (ELECTRA model)"),AEe.forEach(t),$Ve=i(y),Wf=n(y,"LI",{});var yEe=s(Wf);Zee=n(yEe,"STRONG",{});var aDr=s(Zee);kVe=r(aDr,"encoder-decoder"),aDr.forEach(t),SVe=r(yEe," \u2014 "),tk=n(yEe,"A",{href:!0});var nDr=s(tk);RVe=r(nDr,"EncoderDecoderConfig"),nDr.forEach(t),BVe=r(yEe," (Encoder decoder model)"),yEe.forEach(t),PVe=i(y),Hf=n(y,"LI",{});var LEe=s(Hf);eoe=n(LEe,"STRONG",{});var sDr=s(eoe);IVe=r(sDr,"flaubert"),sDr.forEach(t),qVe=r(LEe," \u2014 "),ak=n(LEe,"A",{href:!0});var lDr=s(ak);NVe=r(lDr,"FlaubertConfig"),lDr.forEach(t),jVe=r(LEe," (FlauBERT model)"),LEe.forEach(t),DVe=i(y),Uf=n(y,"LI",{});var xEe=s(Uf);ooe=n(xEe,"STRONG",{});var iDr=s(ooe);GVe=r(iDr,"flava"),iDr.forEach(t),OVe=r(xEe," \u2014 "),nk=n(xEe,"A",{href:!0});var dDr=s(nk);VVe=r(dDr,"FlavaConfig"),dDr.forEach(t),XVe=r(xEe," (Flava model)"),xEe.forEach(t),zVe=i(y),Jf=n(y,"LI",{});var $Ee=s(Jf);roe=n($Ee,"STRONG",{});var cDr=s(roe);QVe=r(cDr,"fnet"),cDr.forEach(t),WVe=r($Ee," \u2014 "),sk=n($Ee,"A",{href:!0});var fDr=s(sk);HVe=r(fDr,"FNetConfig"),fDr.forEach(t),UVe=r($Ee," (FNet model)"),$Ee.forEach(t),JVe=i(y),Yf=n(y,"LI",{});var kEe=s(Yf);toe=n(kEe,"STRONG",{});var mDr=s(toe);YVe=r(mDr,"fsmt"),mDr.forEach(t),KVe=r(kEe," \u2014 "),lk=n(kEe,"A",{href:!0});var gDr=s(lk);ZVe=r(gDr,"FSMTConfig"),gDr.forEach(t),eXe=r(kEe," (FairSeq Machine-Translation model)"),kEe.forEach(t),oXe=i(y),Kf=n(y,"LI",{});var SEe=s(Kf);aoe=n(SEe,"STRONG",{});var hDr=s(aoe);rXe=r(hDr,"funnel"),hDr.forEach(t),tXe=r(SEe," \u2014 "),ik=n(SEe,"A",{href:!0});var pDr=s(ik);aXe=r(pDr,"FunnelConfig"),pDr.forEach(t),nXe=r(SEe," (Funnel Transformer model)"),SEe.forEach(t),sXe=i(y),Zf=n(y,"LI",{});var REe=s(Zf);noe=n(REe,"STRONG",{});var uDr=s(noe);lXe=r(uDr,"glpn"),uDr.forEach(t),iXe=r(REe," \u2014 "),dk=n(REe,"A",{href:!0});var _Dr=s(dk);dXe=r(_Dr,"GLPNConfig"),_Dr.forEach(t),cXe=r(REe," (GLPN model)"),REe.forEach(t),fXe=i(y),em=n(y,"LI",{});var BEe=s(em);soe=n(BEe,"STRONG",{});var bDr=s(soe);mXe=r(bDr,"gpt2"),bDr.forEach(t),gXe=r(BEe," \u2014 "),ck=n(BEe,"A",{href:!0});var vDr=s(ck);hXe=r(vDr,"GPT2Config"),vDr.forEach(t),pXe=r(BEe," (OpenAI GPT-2 model)"),BEe.forEach(t),uXe=i(y),om=n(y,"LI",{});var PEe=s(om);loe=n(PEe,"STRONG",{});var FDr=s(loe);_Xe=r(FDr,"gpt_neo"),FDr.forEach(t),bXe=r(PEe," \u2014 "),fk=n(PEe,"A",{href:!0});var TDr=s(fk);vXe=r(TDr,"GPTNeoConfig"),TDr.forEach(t),FXe=r(PEe," (GPT Neo model)"),PEe.forEach(t),TXe=i(y),rm=n(y,"LI",{});var IEe=s(rm);ioe=n(IEe,"STRONG",{});var MDr=s(ioe);MXe=r(MDr,"gptj"),MDr.forEach(t),EXe=r(IEe," \u2014 "),mk=n(IEe,"A",{href:!0});var EDr=s(mk);CXe=r(EDr,"GPTJConfig"),EDr.forEach(t),wXe=r(IEe," (GPT-J model)"),IEe.forEach(t),AXe=i(y),tm=n(y,"LI",{});var qEe=s(tm);doe=n(qEe,"STRONG",{});var CDr=s(doe);yXe=r(CDr,"hubert"),CDr.forEach(t),LXe=r(qEe," \u2014 "),gk=n(qEe,"A",{href:!0});var wDr=s(gk);xXe=r(wDr,"HubertConfig"),wDr.forEach(t),$Xe=r(qEe," (Hubert model)"),qEe.forEach(t),kXe=i(y),am=n(y,"LI",{});var NEe=s(am);coe=n(NEe,"STRONG",{});var ADr=s(coe);SXe=r(ADr,"ibert"),ADr.forEach(t),RXe=r(NEe," \u2014 "),hk=n(NEe,"A",{href:!0});var yDr=s(hk);BXe=r(yDr,"IBertConfig"),yDr.forEach(t),PXe=r(NEe," (I-BERT model)"),NEe.forEach(t),IXe=i(y),nm=n(y,"LI",{});var jEe=s(nm);foe=n(jEe,"STRONG",{});var LDr=s(foe);qXe=r(LDr,"imagegpt"),LDr.forEach(t),NXe=r(jEe," \u2014 "),pk=n(jEe,"A",{href:!0});var xDr=s(pk);jXe=r(xDr,"ImageGPTConfig"),xDr.forEach(t),DXe=r(jEe," (ImageGPT model)"),jEe.forEach(t),GXe=i(y),sm=n(y,"LI",{});var DEe=s(sm);moe=n(DEe,"STRONG",{});var $Dr=s(moe);OXe=r($Dr,"layoutlm"),$Dr.forEach(t),VXe=r(DEe," \u2014 "),uk=n(DEe,"A",{href:!0});var kDr=s(uk);XXe=r(kDr,"LayoutLMConfig"),kDr.forEach(t),zXe=r(DEe," (LayoutLM model)"),DEe.forEach(t),QXe=i(y),lm=n(y,"LI",{});var GEe=s(lm);goe=n(GEe,"STRONG",{});var SDr=s(goe);WXe=r(SDr,"layoutlmv2"),SDr.forEach(t),HXe=r(GEe," \u2014 "),_k=n(GEe,"A",{href:!0});var RDr=s(_k);UXe=r(RDr,"LayoutLMv2Config"),RDr.forEach(t),JXe=r(GEe," (LayoutLMv2 model)"),GEe.forEach(t),YXe=i(y),im=n(y,"LI",{});var OEe=s(im);hoe=n(OEe,"STRONG",{});var BDr=s(hoe);KXe=r(BDr,"led"),BDr.forEach(t),ZXe=r(OEe," \u2014 "),bk=n(OEe,"A",{href:!0});var PDr=s(bk);eze=r(PDr,"LEDConfig"),PDr.forEach(t),oze=r(OEe," (LED model)"),OEe.forEach(t),rze=i(y),dm=n(y,"LI",{});var VEe=s(dm);poe=n(VEe,"STRONG",{});var IDr=s(poe);tze=r(IDr,"longformer"),IDr.forEach(t),aze=r(VEe," \u2014 "),vk=n(VEe,"A",{href:!0});var qDr=s(vk);nze=r(qDr,"LongformerConfig"),qDr.forEach(t),sze=r(VEe," (Longformer model)"),VEe.forEach(t),lze=i(y),cm=n(y,"LI",{});var XEe=s(cm);uoe=n(XEe,"STRONG",{});var NDr=s(uoe);ize=r(NDr,"longt5"),NDr.forEach(t),dze=r(XEe," \u2014 "),Fk=n(XEe,"A",{href:!0});var jDr=s(Fk);cze=r(jDr,"LongT5Config"),jDr.forEach(t),fze=r(XEe," (LongT5 model)"),XEe.forEach(t),mze=i(y),fm=n(y,"LI",{});var zEe=s(fm);_oe=n(zEe,"STRONG",{});var DDr=s(_oe);gze=r(DDr,"luke"),DDr.forEach(t),hze=r(zEe," \u2014 "),Tk=n(zEe,"A",{href:!0});var GDr=s(Tk);pze=r(GDr,"LukeConfig"),GDr.forEach(t),uze=r(zEe," (LUKE model)"),zEe.forEach(t),_ze=i(y),mm=n(y,"LI",{});var QEe=s(mm);boe=n(QEe,"STRONG",{});var ODr=s(boe);bze=r(ODr,"lxmert"),ODr.forEach(t),vze=r(QEe," \u2014 "),Mk=n(QEe,"A",{href:!0});var VDr=s(Mk);Fze=r(VDr,"LxmertConfig"),VDr.forEach(t),Tze=r(QEe," (LXMERT model)"),QEe.forEach(t),Mze=i(y),gm=n(y,"LI",{});var WEe=s(gm);voe=n(WEe,"STRONG",{});var XDr=s(voe);Eze=r(XDr,"m2m_100"),XDr.forEach(t),Cze=r(WEe," \u2014 "),Ek=n(WEe,"A",{href:!0});var zDr=s(Ek);wze=r(zDr,"M2M100Config"),zDr.forEach(t),Aze=r(WEe," (M2M100 model)"),WEe.forEach(t),yze=i(y),hm=n(y,"LI",{});var HEe=s(hm);Foe=n(HEe,"STRONG",{});var QDr=s(Foe);Lze=r(QDr,"marian"),QDr.forEach(t),xze=r(HEe," \u2014 "),Ck=n(HEe,"A",{href:!0});var WDr=s(Ck);$ze=r(WDr,"MarianConfig"),WDr.forEach(t),kze=r(HEe," (Marian model)"),HEe.forEach(t),Sze=i(y),pm=n(y,"LI",{});var UEe=s(pm);Toe=n(UEe,"STRONG",{});var HDr=s(Toe);Rze=r(HDr,"maskformer"),HDr.forEach(t),Bze=r(UEe," \u2014 "),wk=n(UEe,"A",{href:!0});var UDr=s(wk);Pze=r(UDr,"MaskFormerConfig"),UDr.forEach(t),Ize=r(UEe," (MaskFormer model)"),UEe.forEach(t),qze=i(y),um=n(y,"LI",{});var JEe=s(um);Moe=n(JEe,"STRONG",{});var JDr=s(Moe);Nze=r(JDr,"mbart"),JDr.forEach(t),jze=r(JEe," \u2014 "),Ak=n(JEe,"A",{href:!0});var YDr=s(Ak);Dze=r(YDr,"MBartConfig"),YDr.forEach(t),Gze=r(JEe," (mBART model)"),JEe.forEach(t),Oze=i(y),_m=n(y,"LI",{});var YEe=s(_m);Eoe=n(YEe,"STRONG",{});var KDr=s(Eoe);Vze=r(KDr,"megatron-bert"),KDr.forEach(t),Xze=r(YEe," \u2014 "),yk=n(YEe,"A",{href:!0});var ZDr=s(yk);zze=r(ZDr,"MegatronBertConfig"),ZDr.forEach(t),Qze=r(YEe," (MegatronBert model)"),YEe.forEach(t),Wze=i(y),bm=n(y,"LI",{});var KEe=s(bm);Coe=n(KEe,"STRONG",{});var eGr=s(Coe);Hze=r(eGr,"mobilebert"),eGr.forEach(t),Uze=r(KEe," \u2014 "),Lk=n(KEe,"A",{href:!0});var oGr=s(Lk);Jze=r(oGr,"MobileBertConfig"),oGr.forEach(t),Yze=r(KEe," (MobileBERT model)"),KEe.forEach(t),Kze=i(y),vm=n(y,"LI",{});var ZEe=s(vm);woe=n(ZEe,"STRONG",{});var rGr=s(woe);Zze=r(rGr,"mpnet"),rGr.forEach(t),eQe=r(ZEe," \u2014 "),xk=n(ZEe,"A",{href:!0});var tGr=s(xk);oQe=r(tGr,"MPNetConfig"),tGr.forEach(t),rQe=r(ZEe," (MPNet model)"),ZEe.forEach(t),tQe=i(y),Fm=n(y,"LI",{});var e5e=s(Fm);Aoe=n(e5e,"STRONG",{});var aGr=s(Aoe);aQe=r(aGr,"mt5"),aGr.forEach(t),nQe=r(e5e," \u2014 "),$k=n(e5e,"A",{href:!0});var nGr=s($k);sQe=r(nGr,"MT5Config"),nGr.forEach(t),lQe=r(e5e," (mT5 model)"),e5e.forEach(t),iQe=i(y),Tm=n(y,"LI",{});var o5e=s(Tm);yoe=n(o5e,"STRONG",{});var sGr=s(yoe);dQe=r(sGr,"nystromformer"),sGr.forEach(t),cQe=r(o5e," \u2014 "),kk=n(o5e,"A",{href:!0});var lGr=s(kk);fQe=r(lGr,"NystromformerConfig"),lGr.forEach(t),mQe=r(o5e," (Nystromformer model)"),o5e.forEach(t),gQe=i(y),Mm=n(y,"LI",{});var r5e=s(Mm);Loe=n(r5e,"STRONG",{});var iGr=s(Loe);hQe=r(iGr,"openai-gpt"),iGr.forEach(t),pQe=r(r5e," \u2014 "),Sk=n(r5e,"A",{href:!0});var dGr=s(Sk);uQe=r(dGr,"OpenAIGPTConfig"),dGr.forEach(t),_Qe=r(r5e," (OpenAI GPT model)"),r5e.forEach(t),bQe=i(y),Em=n(y,"LI",{});var t5e=s(Em);xoe=n(t5e,"STRONG",{});var cGr=s(xoe);vQe=r(cGr,"opt"),cGr.forEach(t),FQe=r(t5e," \u2014 "),Rk=n(t5e,"A",{href:!0});var fGr=s(Rk);TQe=r(fGr,"OPTConfig"),fGr.forEach(t),MQe=r(t5e," (OPT model)"),t5e.forEach(t),EQe=i(y),Cm=n(y,"LI",{});var a5e=s(Cm);$oe=n(a5e,"STRONG",{});var mGr=s($oe);CQe=r(mGr,"pegasus"),mGr.forEach(t),wQe=r(a5e," \u2014 "),Bk=n(a5e,"A",{href:!0});var gGr=s(Bk);AQe=r(gGr,"PegasusConfig"),gGr.forEach(t),yQe=r(a5e," (Pegasus model)"),a5e.forEach(t),LQe=i(y),wm=n(y,"LI",{});var n5e=s(wm);koe=n(n5e,"STRONG",{});var hGr=s(koe);xQe=r(hGr,"perceiver"),hGr.forEach(t),$Qe=r(n5e," \u2014 "),Pk=n(n5e,"A",{href:!0});var pGr=s(Pk);kQe=r(pGr,"PerceiverConfig"),pGr.forEach(t),SQe=r(n5e," (Perceiver model)"),n5e.forEach(t),RQe=i(y),Am=n(y,"LI",{});var s5e=s(Am);Soe=n(s5e,"STRONG",{});var uGr=s(Soe);BQe=r(uGr,"plbart"),uGr.forEach(t),PQe=r(s5e," \u2014 "),Ik=n(s5e,"A",{href:!0});var _Gr=s(Ik);IQe=r(_Gr,"PLBartConfig"),_Gr.forEach(t),qQe=r(s5e," (PLBart model)"),s5e.forEach(t),NQe=i(y),ym=n(y,"LI",{});var l5e=s(ym);Roe=n(l5e,"STRONG",{});var bGr=s(Roe);jQe=r(bGr,"poolformer"),bGr.forEach(t),DQe=r(l5e," \u2014 "),qk=n(l5e,"A",{href:!0});var vGr=s(qk);GQe=r(vGr,"PoolFormerConfig"),vGr.forEach(t),OQe=r(l5e," (PoolFormer model)"),l5e.forEach(t),VQe=i(y),Lm=n(y,"LI",{});var i5e=s(Lm);Boe=n(i5e,"STRONG",{});var FGr=s(Boe);XQe=r(FGr,"prophetnet"),FGr.forEach(t),zQe=r(i5e," \u2014 "),Nk=n(i5e,"A",{href:!0});var TGr=s(Nk);QQe=r(TGr,"ProphetNetConfig"),TGr.forEach(t),WQe=r(i5e," (ProphetNet model)"),i5e.forEach(t),HQe=i(y),xm=n(y,"LI",{});var d5e=s(xm);Poe=n(d5e,"STRONG",{});var MGr=s(Poe);UQe=r(MGr,"qdqbert"),MGr.forEach(t),JQe=r(d5e," \u2014 "),jk=n(d5e,"A",{href:!0});var EGr=s(jk);YQe=r(EGr,"QDQBertConfig"),EGr.forEach(t),KQe=r(d5e," (QDQBert model)"),d5e.forEach(t),ZQe=i(y),$m=n(y,"LI",{});var c5e=s($m);Ioe=n(c5e,"STRONG",{});var CGr=s(Ioe);eWe=r(CGr,"rag"),CGr.forEach(t),oWe=r(c5e," \u2014 "),Dk=n(c5e,"A",{href:!0});var wGr=s(Dk);rWe=r(wGr,"RagConfig"),wGr.forEach(t),tWe=r(c5e," (RAG model)"),c5e.forEach(t),aWe=i(y),km=n(y,"LI",{});var f5e=s(km);qoe=n(f5e,"STRONG",{});var AGr=s(qoe);nWe=r(AGr,"realm"),AGr.forEach(t),sWe=r(f5e," \u2014 "),Gk=n(f5e,"A",{href:!0});var yGr=s(Gk);lWe=r(yGr,"RealmConfig"),yGr.forEach(t),iWe=r(f5e," (Realm model)"),f5e.forEach(t),dWe=i(y),Sm=n(y,"LI",{});var m5e=s(Sm);Noe=n(m5e,"STRONG",{});var LGr=s(Noe);cWe=r(LGr,"reformer"),LGr.forEach(t),fWe=r(m5e," \u2014 "),Ok=n(m5e,"A",{href:!0});var xGr=s(Ok);mWe=r(xGr,"ReformerConfig"),xGr.forEach(t),gWe=r(m5e," (Reformer model)"),m5e.forEach(t),hWe=i(y),Rm=n(y,"LI",{});var g5e=s(Rm);joe=n(g5e,"STRONG",{});var $Gr=s(joe);pWe=r($Gr,"regnet"),$Gr.forEach(t),uWe=r(g5e," \u2014 "),Vk=n(g5e,"A",{href:!0});var kGr=s(Vk);_We=r(kGr,"RegNetConfig"),kGr.forEach(t),bWe=r(g5e," (RegNet model)"),g5e.forEach(t),vWe=i(y),Bm=n(y,"LI",{});var h5e=s(Bm);Doe=n(h5e,"STRONG",{});var SGr=s(Doe);FWe=r(SGr,"rembert"),SGr.forEach(t),TWe=r(h5e," \u2014 "),Xk=n(h5e,"A",{href:!0});var RGr=s(Xk);MWe=r(RGr,"RemBertConfig"),RGr.forEach(t),EWe=r(h5e," (RemBERT model)"),h5e.forEach(t),CWe=i(y),Pm=n(y,"LI",{});var p5e=s(Pm);Goe=n(p5e,"STRONG",{});var BGr=s(Goe);wWe=r(BGr,"resnet"),BGr.forEach(t),AWe=r(p5e," \u2014 "),zk=n(p5e,"A",{href:!0});var PGr=s(zk);yWe=r(PGr,"ResNetConfig"),PGr.forEach(t),LWe=r(p5e," (ResNet model)"),p5e.forEach(t),xWe=i(y),Im=n(y,"LI",{});var u5e=s(Im);Ooe=n(u5e,"STRONG",{});var IGr=s(Ooe);$We=r(IGr,"retribert"),IGr.forEach(t),kWe=r(u5e," \u2014 "),Qk=n(u5e,"A",{href:!0});var qGr=s(Qk);SWe=r(qGr,"RetriBertConfig"),qGr.forEach(t),RWe=r(u5e," (RetriBERT model)"),u5e.forEach(t),BWe=i(y),qm=n(y,"LI",{});var _5e=s(qm);Voe=n(_5e,"STRONG",{});var NGr=s(Voe);PWe=r(NGr,"roberta"),NGr.forEach(t),IWe=r(_5e," \u2014 "),Wk=n(_5e,"A",{href:!0});var jGr=s(Wk);qWe=r(jGr,"RobertaConfig"),jGr.forEach(t),NWe=r(_5e," (RoBERTa model)"),_5e.forEach(t),jWe=i(y),Nm=n(y,"LI",{});var b5e=s(Nm);Xoe=n(b5e,"STRONG",{});var DGr=s(Xoe);DWe=r(DGr,"roformer"),DGr.forEach(t),GWe=r(b5e," \u2014 "),Hk=n(b5e,"A",{href:!0});var GGr=s(Hk);OWe=r(GGr,"RoFormerConfig"),GGr.forEach(t),VWe=r(b5e," (RoFormer model)"),b5e.forEach(t),XWe=i(y),jm=n(y,"LI",{});var v5e=s(jm);zoe=n(v5e,"STRONG",{});var OGr=s(zoe);zWe=r(OGr,"segformer"),OGr.forEach(t),QWe=r(v5e," \u2014 "),Uk=n(v5e,"A",{href:!0});var VGr=s(Uk);WWe=r(VGr,"SegformerConfig"),VGr.forEach(t),HWe=r(v5e," (SegFormer model)"),v5e.forEach(t),UWe=i(y),Dm=n(y,"LI",{});var F5e=s(Dm);Qoe=n(F5e,"STRONG",{});var XGr=s(Qoe);JWe=r(XGr,"sew"),XGr.forEach(t),YWe=r(F5e," \u2014 "),Jk=n(F5e,"A",{href:!0});var zGr=s(Jk);KWe=r(zGr,"SEWConfig"),zGr.forEach(t),ZWe=r(F5e," (SEW model)"),F5e.forEach(t),eHe=i(y),Gm=n(y,"LI",{});var T5e=s(Gm);Woe=n(T5e,"STRONG",{});var QGr=s(Woe);oHe=r(QGr,"sew-d"),QGr.forEach(t),rHe=r(T5e," \u2014 "),Yk=n(T5e,"A",{href:!0});var WGr=s(Yk);tHe=r(WGr,"SEWDConfig"),WGr.forEach(t),aHe=r(T5e," (SEW-D model)"),T5e.forEach(t),nHe=i(y),Om=n(y,"LI",{});var M5e=s(Om);Hoe=n(M5e,"STRONG",{});var HGr=s(Hoe);sHe=r(HGr,"speech-encoder-decoder"),HGr.forEach(t),lHe=r(M5e," \u2014 "),Kk=n(M5e,"A",{href:!0});var UGr=s(Kk);iHe=r(UGr,"SpeechEncoderDecoderConfig"),UGr.forEach(t),dHe=r(M5e," (Speech Encoder decoder model)"),M5e.forEach(t),cHe=i(y),Vm=n(y,"LI",{});var E5e=s(Vm);Uoe=n(E5e,"STRONG",{});var JGr=s(Uoe);fHe=r(JGr,"speech_to_text"),JGr.forEach(t),mHe=r(E5e," \u2014 "),Zk=n(E5e,"A",{href:!0});var YGr=s(Zk);gHe=r(YGr,"Speech2TextConfig"),YGr.forEach(t),hHe=r(E5e," (Speech2Text model)"),E5e.forEach(t),pHe=i(y),Xm=n(y,"LI",{});var C5e=s(Xm);Joe=n(C5e,"STRONG",{});var KGr=s(Joe);uHe=r(KGr,"speech_to_text_2"),KGr.forEach(t),_He=r(C5e," \u2014 "),eS=n(C5e,"A",{href:!0});var ZGr=s(eS);bHe=r(ZGr,"Speech2Text2Config"),ZGr.forEach(t),vHe=r(C5e," (Speech2Text2 model)"),C5e.forEach(t),FHe=i(y),zm=n(y,"LI",{});var w5e=s(zm);Yoe=n(w5e,"STRONG",{});var eOr=s(Yoe);THe=r(eOr,"splinter"),eOr.forEach(t),MHe=r(w5e," \u2014 "),oS=n(w5e,"A",{href:!0});var oOr=s(oS);EHe=r(oOr,"SplinterConfig"),oOr.forEach(t),CHe=r(w5e," (Splinter model)"),w5e.forEach(t),wHe=i(y),Qm=n(y,"LI",{});var A5e=s(Qm);Koe=n(A5e,"STRONG",{});var rOr=s(Koe);AHe=r(rOr,"squeezebert"),rOr.forEach(t),yHe=r(A5e," \u2014 "),rS=n(A5e,"A",{href:!0});var tOr=s(rS);LHe=r(tOr,"SqueezeBertConfig"),tOr.forEach(t),xHe=r(A5e," (SqueezeBERT model)"),A5e.forEach(t),$He=i(y),Wm=n(y,"LI",{});var y5e=s(Wm);Zoe=n(y5e,"STRONG",{});var aOr=s(Zoe);kHe=r(aOr,"swin"),aOr.forEach(t),SHe=r(y5e," \u2014 "),tS=n(y5e,"A",{href:!0});var nOr=s(tS);RHe=r(nOr,"SwinConfig"),nOr.forEach(t),BHe=r(y5e," (Swin model)"),y5e.forEach(t),PHe=i(y),Hm=n(y,"LI",{});var L5e=s(Hm);ere=n(L5e,"STRONG",{});var sOr=s(ere);IHe=r(sOr,"t5"),sOr.forEach(t),qHe=r(L5e," \u2014 "),aS=n(L5e,"A",{href:!0});var lOr=s(aS);NHe=r(lOr,"T5Config"),lOr.forEach(t),jHe=r(L5e," (T5 model)"),L5e.forEach(t),DHe=i(y),Um=n(y,"LI",{});var x5e=s(Um);ore=n(x5e,"STRONG",{});var iOr=s(ore);GHe=r(iOr,"tapas"),iOr.forEach(t),OHe=r(x5e," \u2014 "),nS=n(x5e,"A",{href:!0});var dOr=s(nS);VHe=r(dOr,"TapasConfig"),dOr.forEach(t),XHe=r(x5e," (TAPAS model)"),x5e.forEach(t),zHe=i(y),Jm=n(y,"LI",{});var $5e=s(Jm);rre=n($5e,"STRONG",{});var cOr=s(rre);QHe=r(cOr,"transfo-xl"),cOr.forEach(t),WHe=r($5e," \u2014 "),sS=n($5e,"A",{href:!0});var fOr=s(sS);HHe=r(fOr,"TransfoXLConfig"),fOr.forEach(t),UHe=r($5e," (Transformer-XL model)"),$5e.forEach(t),JHe=i(y),Ym=n(y,"LI",{});var k5e=s(Ym);tre=n(k5e,"STRONG",{});var mOr=s(tre);YHe=r(mOr,"trocr"),mOr.forEach(t),KHe=r(k5e," \u2014 "),lS=n(k5e,"A",{href:!0});var gOr=s(lS);ZHe=r(gOr,"TrOCRConfig"),gOr.forEach(t),eUe=r(k5e," (TrOCR model)"),k5e.forEach(t),oUe=i(y),Km=n(y,"LI",{});var S5e=s(Km);are=n(S5e,"STRONG",{});var hOr=s(are);rUe=r(hOr,"unispeech"),hOr.forEach(t),tUe=r(S5e," \u2014 "),iS=n(S5e,"A",{href:!0});var pOr=s(iS);aUe=r(pOr,"UniSpeechConfig"),pOr.forEach(t),nUe=r(S5e," (UniSpeech model)"),S5e.forEach(t),sUe=i(y),Zm=n(y,"LI",{});var R5e=s(Zm);nre=n(R5e,"STRONG",{});var uOr=s(nre);lUe=r(uOr,"unispeech-sat"),uOr.forEach(t),iUe=r(R5e," \u2014 "),dS=n(R5e,"A",{href:!0});var _Or=s(dS);dUe=r(_Or,"UniSpeechSatConfig"),_Or.forEach(t),cUe=r(R5e," (UniSpeechSat model)"),R5e.forEach(t),fUe=i(y),eg=n(y,"LI",{});var B5e=s(eg);sre=n(B5e,"STRONG",{});var bOr=s(sre);mUe=r(bOr,"van"),bOr.forEach(t),gUe=r(B5e," \u2014 "),cS=n(B5e,"A",{href:!0});var vOr=s(cS);hUe=r(vOr,"VanConfig"),vOr.forEach(t),pUe=r(B5e," (VAN model)"),B5e.forEach(t),uUe=i(y),og=n(y,"LI",{});var P5e=s(og);lre=n(P5e,"STRONG",{});var FOr=s(lre);_Ue=r(FOr,"vilt"),FOr.forEach(t),bUe=r(P5e," \u2014 "),fS=n(P5e,"A",{href:!0});var TOr=s(fS);vUe=r(TOr,"ViltConfig"),TOr.forEach(t),FUe=r(P5e," (ViLT model)"),P5e.forEach(t),TUe=i(y),rg=n(y,"LI",{});var I5e=s(rg);ire=n(I5e,"STRONG",{});var MOr=s(ire);MUe=r(MOr,"vision-encoder-decoder"),MOr.forEach(t),EUe=r(I5e," \u2014 "),mS=n(I5e,"A",{href:!0});var EOr=s(mS);CUe=r(EOr,"VisionEncoderDecoderConfig"),EOr.forEach(t),wUe=r(I5e," (Vision Encoder decoder model)"),I5e.forEach(t),AUe=i(y),tg=n(y,"LI",{});var q5e=s(tg);dre=n(q5e,"STRONG",{});var COr=s(dre);yUe=r(COr,"vision-text-dual-encoder"),COr.forEach(t),LUe=r(q5e," \u2014 "),gS=n(q5e,"A",{href:!0});var wOr=s(gS);xUe=r(wOr,"VisionTextDualEncoderConfig"),wOr.forEach(t),$Ue=r(q5e," (VisionTextDualEncoder model)"),q5e.forEach(t),kUe=i(y),ag=n(y,"LI",{});var N5e=s(ag);cre=n(N5e,"STRONG",{});var AOr=s(cre);SUe=r(AOr,"visual_bert"),AOr.forEach(t),RUe=r(N5e," \u2014 "),hS=n(N5e,"A",{href:!0});var yOr=s(hS);BUe=r(yOr,"VisualBertConfig"),yOr.forEach(t),PUe=r(N5e," (VisualBert model)"),N5e.forEach(t),IUe=i(y),ng=n(y,"LI",{});var j5e=s(ng);fre=n(j5e,"STRONG",{});var LOr=s(fre);qUe=r(LOr,"vit"),LOr.forEach(t),NUe=r(j5e," \u2014 "),pS=n(j5e,"A",{href:!0});var xOr=s(pS);jUe=r(xOr,"ViTConfig"),xOr.forEach(t),DUe=r(j5e," (ViT model)"),j5e.forEach(t),GUe=i(y),sg=n(y,"LI",{});var D5e=s(sg);mre=n(D5e,"STRONG",{});var $Or=s(mre);OUe=r($Or,"vit_mae"),$Or.forEach(t),VUe=r(D5e," \u2014 "),uS=n(D5e,"A",{href:!0});var kOr=s(uS);XUe=r(kOr,"ViTMAEConfig"),kOr.forEach(t),zUe=r(D5e," (ViTMAE model)"),D5e.forEach(t),QUe=i(y),lg=n(y,"LI",{});var G5e=s(lg);gre=n(G5e,"STRONG",{});var SOr=s(gre);WUe=r(SOr,"wav2vec2"),SOr.forEach(t),HUe=r(G5e," \u2014 "),_S=n(G5e,"A",{href:!0});var ROr=s(_S);UUe=r(ROr,"Wav2Vec2Config"),ROr.forEach(t),JUe=r(G5e," (Wav2Vec2 model)"),G5e.forEach(t),YUe=i(y),ig=n(y,"LI",{});var O5e=s(ig);hre=n(O5e,"STRONG",{});var BOr=s(hre);KUe=r(BOr,"wavlm"),BOr.forEach(t),ZUe=r(O5e," \u2014 "),bS=n(O5e,"A",{href:!0});var POr=s(bS);eJe=r(POr,"WavLMConfig"),POr.forEach(t),oJe=r(O5e," (WavLM model)"),O5e.forEach(t),rJe=i(y),dg=n(y,"LI",{});var V5e=s(dg);pre=n(V5e,"STRONG",{});var IOr=s(pre);tJe=r(IOr,"xglm"),IOr.forEach(t),aJe=r(V5e," \u2014 "),vS=n(V5e,"A",{href:!0});var qOr=s(vS);nJe=r(qOr,"XGLMConfig"),qOr.forEach(t),sJe=r(V5e," (XGLM model)"),V5e.forEach(t),lJe=i(y),cg=n(y,"LI",{});var X5e=s(cg);ure=n(X5e,"STRONG",{});var NOr=s(ure);iJe=r(NOr,"xlm"),NOr.forEach(t),dJe=r(X5e," \u2014 "),FS=n(X5e,"A",{href:!0});var jOr=s(FS);cJe=r(jOr,"XLMConfig"),jOr.forEach(t),fJe=r(X5e," (XLM model)"),X5e.forEach(t),mJe=i(y),fg=n(y,"LI",{});var z5e=s(fg);_re=n(z5e,"STRONG",{});var DOr=s(_re);gJe=r(DOr,"xlm-prophetnet"),DOr.forEach(t),hJe=r(z5e," \u2014 "),TS=n(z5e,"A",{href:!0});var GOr=s(TS);pJe=r(GOr,"XLMProphetNetConfig"),GOr.forEach(t),uJe=r(z5e," (XLMProphetNet model)"),z5e.forEach(t),_Je=i(y),mg=n(y,"LI",{});var Q5e=s(mg);bre=n(Q5e,"STRONG",{});var OOr=s(bre);bJe=r(OOr,"xlm-roberta"),OOr.forEach(t),vJe=r(Q5e," \u2014 "),MS=n(Q5e,"A",{href:!0});var VOr=s(MS);FJe=r(VOr,"XLMRobertaConfig"),VOr.forEach(t),TJe=r(Q5e," (XLM-RoBERTa model)"),Q5e.forEach(t),MJe=i(y),gg=n(y,"LI",{});var W5e=s(gg);vre=n(W5e,"STRONG",{});var XOr=s(vre);EJe=r(XOr,"xlm-roberta-xl"),XOr.forEach(t),CJe=r(W5e," \u2014 "),ES=n(W5e,"A",{href:!0});var zOr=s(ES);wJe=r(zOr,"XLMRobertaXLConfig"),zOr.forEach(t),AJe=r(W5e," (XLM-RoBERTa-XL model)"),W5e.forEach(t),yJe=i(y),hg=n(y,"LI",{});var H5e=s(hg);Fre=n(H5e,"STRONG",{});var QOr=s(Fre);LJe=r(QOr,"xlnet"),QOr.forEach(t),xJe=r(H5e," \u2014 "),CS=n(H5e,"A",{href:!0});var WOr=s(CS);$Je=r(WOr,"XLNetConfig"),WOr.forEach(t),kJe=r(H5e," (XLNet model)"),H5e.forEach(t),SJe=i(y),pg=n(y,"LI",{});var U5e=s(pg);Tre=n(U5e,"STRONG",{});var HOr=s(Tre);RJe=r(HOr,"yolos"),HOr.forEach(t),BJe=r(U5e," \u2014 "),wS=n(U5e,"A",{href:!0});var UOr=s(wS);PJe=r(UOr,"YolosConfig"),UOr.forEach(t),IJe=r(U5e," (YOLOS model)"),U5e.forEach(t),qJe=i(y),ug=n(y,"LI",{});var J5e=s(ug);Mre=n(J5e,"STRONG",{});var JOr=s(Mre);NJe=r(JOr,"yoso"),JOr.forEach(t),jJe=r(J5e," \u2014 "),AS=n(J5e,"A",{href:!0});var YOr=s(AS);DJe=r(YOr,"YosoConfig"),YOr.forEach(t),GJe=r(J5e," (YOSO model)"),J5e.forEach(t),y.forEach(t),OJe=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),VJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var MNe=s(bg);T(mA.$$.fragment,MNe),XJe=i(MNe),Ere=n(MNe,"P",{});var KOr=s(Ere);zJe=r(KOr,"Register a new configuration for this class."),KOr.forEach(t),MNe.forEach(t),Kr.forEach(t),wIe=i(f),vi=n(f,"H2",{class:!0});var ENe=s(vi);vg=n(ENe,"A",{id:!0,class:!0,href:!0});var ZOr=s(vg);Cre=n(ZOr,"SPAN",{});var eVr=s(Cre);T(gA.$$.fragment,eVr),eVr.forEach(t),ZOr.forEach(t),QJe=i(ENe),wre=n(ENe,"SPAN",{});var oVr=s(wre);WJe=r(oVr,"AutoTokenizer"),oVr.forEach(t),ENe.forEach(t),AIe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(hA.$$.fragment,qs),HJe=i(qs),pA=n(qs,"P",{});var CNe=s(pA);UJe=r(CNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yS=n(CNe,"A",{href:!0});var rVr=s(yS);JJe=r(rVr,"AutoTokenizer.from_pretrained()"),rVr.forEach(t),YJe=r(CNe," class method."),CNe.forEach(t),KJe=i(qs),uA=n(qs,"P",{});var wNe=s(uA);ZJe=r(wNe,"This class cannot be instantiated directly using "),Are=n(wNe,"CODE",{});var tVr=s(Are);eYe=r(tVr,"__init__()"),tVr.forEach(t),oYe=r(wNe," (throws an error)."),wNe.forEach(t),rYe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(_A.$$.fragment,Ns),tYe=i(Ns),yre=n(Ns,"P",{});var aVr=s(yre);aYe=r(aVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),aVr.forEach(t),nYe=i(Ns),Ca=n(Ns,"P",{});var n3=s(Ca);sYe=r(n3,"The tokenizer class to instantiate is selected based on the "),Lre=n(n3,"CODE",{});var nVr=s(Lre);lYe=r(nVr,"model_type"),nVr.forEach(t),iYe=r(n3,` property of the config object (either
passed as an argument or loaded from `),xre=n(n3,"CODE",{});var sVr=s(xre);dYe=r(sVr,"pretrained_model_name_or_path"),sVr.forEach(t),cYe=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$re=n(n3,"CODE",{});var lVr=s($re);fYe=r(lVr,"pretrained_model_name_or_path"),lVr.forEach(t),mYe=r(n3,":"),n3.forEach(t),gYe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var bx=s(Sn);kre=n(bx,"STRONG",{});var iVr=s(kre);hYe=r(iVr,"albert"),iVr.forEach(t),pYe=r(bx," \u2014 "),LS=n(bx,"A",{href:!0});var dVr=s(LS);uYe=r(dVr,"AlbertTokenizer"),dVr.forEach(t),_Ye=r(bx," or "),xS=n(bx,"A",{href:!0});var cVr=s(xS);bYe=r(cVr,"AlbertTokenizerFast"),cVr.forEach(t),vYe=r(bx," (ALBERT model)"),bx.forEach(t),FYe=i(S),Rn=n(S,"LI",{});var vx=s(Rn);Sre=n(vx,"STRONG",{});var fVr=s(Sre);TYe=r(fVr,"bart"),fVr.forEach(t),MYe=r(vx," \u2014 "),$S=n(vx,"A",{href:!0});var mVr=s($S);EYe=r(mVr,"BartTokenizer"),mVr.forEach(t),CYe=r(vx," or "),kS=n(vx,"A",{href:!0});var gVr=s(kS);wYe=r(gVr,"BartTokenizerFast"),gVr.forEach(t),AYe=r(vx," (BART model)"),vx.forEach(t),yYe=i(S),Bn=n(S,"LI",{});var Fx=s(Bn);Rre=n(Fx,"STRONG",{});var hVr=s(Rre);LYe=r(hVr,"barthez"),hVr.forEach(t),xYe=r(Fx," \u2014 "),SS=n(Fx,"A",{href:!0});var pVr=s(SS);$Ye=r(pVr,"BarthezTokenizer"),pVr.forEach(t),kYe=r(Fx," or "),RS=n(Fx,"A",{href:!0});var uVr=s(RS);SYe=r(uVr,"BarthezTokenizerFast"),uVr.forEach(t),RYe=r(Fx," (BARThez model)"),Fx.forEach(t),BYe=i(S),Fg=n(S,"LI",{});var Y5e=s(Fg);Bre=n(Y5e,"STRONG",{});var _Vr=s(Bre);PYe=r(_Vr,"bartpho"),_Vr.forEach(t),IYe=r(Y5e," \u2014 "),BS=n(Y5e,"A",{href:!0});var bVr=s(BS);qYe=r(bVr,"BartphoTokenizer"),bVr.forEach(t),NYe=r(Y5e," (BARTpho model)"),Y5e.forEach(t),jYe=i(S),Pn=n(S,"LI",{});var Tx=s(Pn);Pre=n(Tx,"STRONG",{});var vVr=s(Pre);DYe=r(vVr,"bert"),vVr.forEach(t),GYe=r(Tx," \u2014 "),PS=n(Tx,"A",{href:!0});var FVr=s(PS);OYe=r(FVr,"BertTokenizer"),FVr.forEach(t),VYe=r(Tx," or "),IS=n(Tx,"A",{href:!0});var TVr=s(IS);XYe=r(TVr,"BertTokenizerFast"),TVr.forEach(t),zYe=r(Tx," (BERT model)"),Tx.forEach(t),QYe=i(S),Tg=n(S,"LI",{});var K5e=s(Tg);Ire=n(K5e,"STRONG",{});var MVr=s(Ire);WYe=r(MVr,"bert-generation"),MVr.forEach(t),HYe=r(K5e," \u2014 "),qS=n(K5e,"A",{href:!0});var EVr=s(qS);UYe=r(EVr,"BertGenerationTokenizer"),EVr.forEach(t),JYe=r(K5e," (Bert Generation model)"),K5e.forEach(t),YYe=i(S),Mg=n(S,"LI",{});var Z5e=s(Mg);qre=n(Z5e,"STRONG",{});var CVr=s(qre);KYe=r(CVr,"bert-japanese"),CVr.forEach(t),ZYe=r(Z5e," \u2014 "),NS=n(Z5e,"A",{href:!0});var wVr=s(NS);eKe=r(wVr,"BertJapaneseTokenizer"),wVr.forEach(t),oKe=r(Z5e," (BertJapanese model)"),Z5e.forEach(t),rKe=i(S),Eg=n(S,"LI",{});var eCe=s(Eg);Nre=n(eCe,"STRONG",{});var AVr=s(Nre);tKe=r(AVr,"bertweet"),AVr.forEach(t),aKe=r(eCe," \u2014 "),jS=n(eCe,"A",{href:!0});var yVr=s(jS);nKe=r(yVr,"BertweetTokenizer"),yVr.forEach(t),sKe=r(eCe," (Bertweet model)"),eCe.forEach(t),lKe=i(S),In=n(S,"LI",{});var Mx=s(In);jre=n(Mx,"STRONG",{});var LVr=s(jre);iKe=r(LVr,"big_bird"),LVr.forEach(t),dKe=r(Mx," \u2014 "),DS=n(Mx,"A",{href:!0});var xVr=s(DS);cKe=r(xVr,"BigBirdTokenizer"),xVr.forEach(t),fKe=r(Mx," or "),GS=n(Mx,"A",{href:!0});var $Vr=s(GS);mKe=r($Vr,"BigBirdTokenizerFast"),$Vr.forEach(t),gKe=r(Mx," (BigBird model)"),Mx.forEach(t),hKe=i(S),qn=n(S,"LI",{});var Ex=s(qn);Dre=n(Ex,"STRONG",{});var kVr=s(Dre);pKe=r(kVr,"bigbird_pegasus"),kVr.forEach(t),uKe=r(Ex," \u2014 "),OS=n(Ex,"A",{href:!0});var SVr=s(OS);_Ke=r(SVr,"PegasusTokenizer"),SVr.forEach(t),bKe=r(Ex," or "),VS=n(Ex,"A",{href:!0});var RVr=s(VS);vKe=r(RVr,"PegasusTokenizerFast"),RVr.forEach(t),FKe=r(Ex," (BigBirdPegasus model)"),Ex.forEach(t),TKe=i(S),Nn=n(S,"LI",{});var Cx=s(Nn);Gre=n(Cx,"STRONG",{});var BVr=s(Gre);MKe=r(BVr,"blenderbot"),BVr.forEach(t),EKe=r(Cx," \u2014 "),XS=n(Cx,"A",{href:!0});var PVr=s(XS);CKe=r(PVr,"BlenderbotTokenizer"),PVr.forEach(t),wKe=r(Cx," or "),zS=n(Cx,"A",{href:!0});var IVr=s(zS);AKe=r(IVr,"BlenderbotTokenizerFast"),IVr.forEach(t),yKe=r(Cx," (Blenderbot model)"),Cx.forEach(t),LKe=i(S),Cg=n(S,"LI",{});var oCe=s(Cg);Ore=n(oCe,"STRONG",{});var qVr=s(Ore);xKe=r(qVr,"blenderbot-small"),qVr.forEach(t),$Ke=r(oCe," \u2014 "),QS=n(oCe,"A",{href:!0});var NVr=s(QS);kKe=r(NVr,"BlenderbotSmallTokenizer"),NVr.forEach(t),SKe=r(oCe," (BlenderbotSmall model)"),oCe.forEach(t),RKe=i(S),wg=n(S,"LI",{});var rCe=s(wg);Vre=n(rCe,"STRONG",{});var jVr=s(Vre);BKe=r(jVr,"byt5"),jVr.forEach(t),PKe=r(rCe," \u2014 "),WS=n(rCe,"A",{href:!0});var DVr=s(WS);IKe=r(DVr,"ByT5Tokenizer"),DVr.forEach(t),qKe=r(rCe," (ByT5 model)"),rCe.forEach(t),NKe=i(S),jn=n(S,"LI",{});var wx=s(jn);Xre=n(wx,"STRONG",{});var GVr=s(Xre);jKe=r(GVr,"camembert"),GVr.forEach(t),DKe=r(wx," \u2014 "),HS=n(wx,"A",{href:!0});var OVr=s(HS);GKe=r(OVr,"CamembertTokenizer"),OVr.forEach(t),OKe=r(wx," or "),US=n(wx,"A",{href:!0});var VVr=s(US);VKe=r(VVr,"CamembertTokenizerFast"),VVr.forEach(t),XKe=r(wx," (CamemBERT model)"),wx.forEach(t),zKe=i(S),Ag=n(S,"LI",{});var tCe=s(Ag);zre=n(tCe,"STRONG",{});var XVr=s(zre);QKe=r(XVr,"canine"),XVr.forEach(t),WKe=r(tCe," \u2014 "),JS=n(tCe,"A",{href:!0});var zVr=s(JS);HKe=r(zVr,"CanineTokenizer"),zVr.forEach(t),UKe=r(tCe," (Canine model)"),tCe.forEach(t),JKe=i(S),Dn=n(S,"LI",{});var Ax=s(Dn);Qre=n(Ax,"STRONG",{});var QVr=s(Qre);YKe=r(QVr,"clip"),QVr.forEach(t),KKe=r(Ax," \u2014 "),YS=n(Ax,"A",{href:!0});var WVr=s(YS);ZKe=r(WVr,"CLIPTokenizer"),WVr.forEach(t),eZe=r(Ax," or "),KS=n(Ax,"A",{href:!0});var HVr=s(KS);oZe=r(HVr,"CLIPTokenizerFast"),HVr.forEach(t),rZe=r(Ax," (CLIP model)"),Ax.forEach(t),tZe=i(S),Gn=n(S,"LI",{});var yx=s(Gn);Wre=n(yx,"STRONG",{});var UVr=s(Wre);aZe=r(UVr,"convbert"),UVr.forEach(t),nZe=r(yx," \u2014 "),ZS=n(yx,"A",{href:!0});var JVr=s(ZS);sZe=r(JVr,"ConvBertTokenizer"),JVr.forEach(t),lZe=r(yx," or "),eR=n(yx,"A",{href:!0});var YVr=s(eR);iZe=r(YVr,"ConvBertTokenizerFast"),YVr.forEach(t),dZe=r(yx," (ConvBERT model)"),yx.forEach(t),cZe=i(S),On=n(S,"LI",{});var Lx=s(On);Hre=n(Lx,"STRONG",{});var KVr=s(Hre);fZe=r(KVr,"cpm"),KVr.forEach(t),mZe=r(Lx," \u2014 "),oR=n(Lx,"A",{href:!0});var ZVr=s(oR);gZe=r(ZVr,"CpmTokenizer"),ZVr.forEach(t),hZe=r(Lx," or "),rR=n(Lx,"A",{href:!0});var eXr=s(rR);pZe=r(eXr,"CpmTokenizerFast"),eXr.forEach(t),uZe=r(Lx," (CPM model)"),Lx.forEach(t),_Ze=i(S),yg=n(S,"LI",{});var aCe=s(yg);Ure=n(aCe,"STRONG",{});var oXr=s(Ure);bZe=r(oXr,"ctrl"),oXr.forEach(t),vZe=r(aCe," \u2014 "),tR=n(aCe,"A",{href:!0});var rXr=s(tR);FZe=r(rXr,"CTRLTokenizer"),rXr.forEach(t),TZe=r(aCe," (CTRL model)"),aCe.forEach(t),MZe=i(S),Vn=n(S,"LI",{});var xx=s(Vn);Jre=n(xx,"STRONG",{});var tXr=s(Jre);EZe=r(tXr,"data2vec-text"),tXr.forEach(t),CZe=r(xx," \u2014 "),aR=n(xx,"A",{href:!0});var aXr=s(aR);wZe=r(aXr,"RobertaTokenizer"),aXr.forEach(t),AZe=r(xx," or "),nR=n(xx,"A",{href:!0});var nXr=s(nR);yZe=r(nXr,"RobertaTokenizerFast"),nXr.forEach(t),LZe=r(xx," (Data2VecText model)"),xx.forEach(t),xZe=i(S),Xn=n(S,"LI",{});var $x=s(Xn);Yre=n($x,"STRONG",{});var sXr=s(Yre);$Ze=r(sXr,"deberta"),sXr.forEach(t),kZe=r($x," \u2014 "),sR=n($x,"A",{href:!0});var lXr=s(sR);SZe=r(lXr,"DebertaTokenizer"),lXr.forEach(t),RZe=r($x," or "),lR=n($x,"A",{href:!0});var iXr=s(lR);BZe=r(iXr,"DebertaTokenizerFast"),iXr.forEach(t),PZe=r($x," (DeBERTa model)"),$x.forEach(t),IZe=i(S),zn=n(S,"LI",{});var kx=s(zn);Kre=n(kx,"STRONG",{});var dXr=s(Kre);qZe=r(dXr,"deberta-v2"),dXr.forEach(t),NZe=r(kx," \u2014 "),iR=n(kx,"A",{href:!0});var cXr=s(iR);jZe=r(cXr,"DebertaV2Tokenizer"),cXr.forEach(t),DZe=r(kx," or "),dR=n(kx,"A",{href:!0});var fXr=s(dR);GZe=r(fXr,"DebertaV2TokenizerFast"),fXr.forEach(t),OZe=r(kx," (DeBERTa-v2 model)"),kx.forEach(t),VZe=i(S),Qn=n(S,"LI",{});var Sx=s(Qn);Zre=n(Sx,"STRONG",{});var mXr=s(Zre);XZe=r(mXr,"distilbert"),mXr.forEach(t),zZe=r(Sx," \u2014 "),cR=n(Sx,"A",{href:!0});var gXr=s(cR);QZe=r(gXr,"DistilBertTokenizer"),gXr.forEach(t),WZe=r(Sx," or "),fR=n(Sx,"A",{href:!0});var hXr=s(fR);HZe=r(hXr,"DistilBertTokenizerFast"),hXr.forEach(t),UZe=r(Sx," (DistilBERT model)"),Sx.forEach(t),JZe=i(S),Wn=n(S,"LI",{});var Rx=s(Wn);ete=n(Rx,"STRONG",{});var pXr=s(ete);YZe=r(pXr,"dpr"),pXr.forEach(t),KZe=r(Rx," \u2014 "),mR=n(Rx,"A",{href:!0});var uXr=s(mR);ZZe=r(uXr,"DPRQuestionEncoderTokenizer"),uXr.forEach(t),eeo=r(Rx," or "),gR=n(Rx,"A",{href:!0});var _Xr=s(gR);oeo=r(_Xr,"DPRQuestionEncoderTokenizerFast"),_Xr.forEach(t),reo=r(Rx," (DPR model)"),Rx.forEach(t),teo=i(S),Hn=n(S,"LI",{});var Bx=s(Hn);ote=n(Bx,"STRONG",{});var bXr=s(ote);aeo=r(bXr,"electra"),bXr.forEach(t),neo=r(Bx," \u2014 "),hR=n(Bx,"A",{href:!0});var vXr=s(hR);seo=r(vXr,"ElectraTokenizer"),vXr.forEach(t),leo=r(Bx," or "),pR=n(Bx,"A",{href:!0});var FXr=s(pR);ieo=r(FXr,"ElectraTokenizerFast"),FXr.forEach(t),deo=r(Bx," (ELECTRA model)"),Bx.forEach(t),ceo=i(S),Lg=n(S,"LI",{});var nCe=s(Lg);rte=n(nCe,"STRONG",{});var TXr=s(rte);feo=r(TXr,"flaubert"),TXr.forEach(t),meo=r(nCe," \u2014 "),uR=n(nCe,"A",{href:!0});var MXr=s(uR);geo=r(MXr,"FlaubertTokenizer"),MXr.forEach(t),heo=r(nCe," (FlauBERT model)"),nCe.forEach(t),peo=i(S),Un=n(S,"LI",{});var Px=s(Un);tte=n(Px,"STRONG",{});var EXr=s(tte);ueo=r(EXr,"fnet"),EXr.forEach(t),_eo=r(Px," \u2014 "),_R=n(Px,"A",{href:!0});var CXr=s(_R);beo=r(CXr,"FNetTokenizer"),CXr.forEach(t),veo=r(Px," or "),bR=n(Px,"A",{href:!0});var wXr=s(bR);Feo=r(wXr,"FNetTokenizerFast"),wXr.forEach(t),Teo=r(Px," (FNet model)"),Px.forEach(t),Meo=i(S),xg=n(S,"LI",{});var sCe=s(xg);ate=n(sCe,"STRONG",{});var AXr=s(ate);Eeo=r(AXr,"fsmt"),AXr.forEach(t),Ceo=r(sCe," \u2014 "),vR=n(sCe,"A",{href:!0});var yXr=s(vR);weo=r(yXr,"FSMTTokenizer"),yXr.forEach(t),Aeo=r(sCe," (FairSeq Machine-Translation model)"),sCe.forEach(t),yeo=i(S),Jn=n(S,"LI",{});var Ix=s(Jn);nte=n(Ix,"STRONG",{});var LXr=s(nte);Leo=r(LXr,"funnel"),LXr.forEach(t),xeo=r(Ix," \u2014 "),FR=n(Ix,"A",{href:!0});var xXr=s(FR);$eo=r(xXr,"FunnelTokenizer"),xXr.forEach(t),keo=r(Ix," or "),TR=n(Ix,"A",{href:!0});var $Xr=s(TR);Seo=r($Xr,"FunnelTokenizerFast"),$Xr.forEach(t),Reo=r(Ix," (Funnel Transformer model)"),Ix.forEach(t),Beo=i(S),Yn=n(S,"LI",{});var qx=s(Yn);ste=n(qx,"STRONG",{});var kXr=s(ste);Peo=r(kXr,"gpt2"),kXr.forEach(t),Ieo=r(qx," \u2014 "),MR=n(qx,"A",{href:!0});var SXr=s(MR);qeo=r(SXr,"GPT2Tokenizer"),SXr.forEach(t),Neo=r(qx," or "),ER=n(qx,"A",{href:!0});var RXr=s(ER);jeo=r(RXr,"GPT2TokenizerFast"),RXr.forEach(t),Deo=r(qx," (OpenAI GPT-2 model)"),qx.forEach(t),Geo=i(S),Kn=n(S,"LI",{});var Nx=s(Kn);lte=n(Nx,"STRONG",{});var BXr=s(lte);Oeo=r(BXr,"gpt_neo"),BXr.forEach(t),Veo=r(Nx," \u2014 "),CR=n(Nx,"A",{href:!0});var PXr=s(CR);Xeo=r(PXr,"GPT2Tokenizer"),PXr.forEach(t),zeo=r(Nx," or "),wR=n(Nx,"A",{href:!0});var IXr=s(wR);Qeo=r(IXr,"GPT2TokenizerFast"),IXr.forEach(t),Weo=r(Nx," (GPT Neo model)"),Nx.forEach(t),Heo=i(S),Zn=n(S,"LI",{});var jx=s(Zn);ite=n(jx,"STRONG",{});var qXr=s(ite);Ueo=r(qXr,"gptj"),qXr.forEach(t),Jeo=r(jx," \u2014 "),AR=n(jx,"A",{href:!0});var NXr=s(AR);Yeo=r(NXr,"GPT2Tokenizer"),NXr.forEach(t),Keo=r(jx," or "),yR=n(jx,"A",{href:!0});var jXr=s(yR);Zeo=r(jXr,"GPT2TokenizerFast"),jXr.forEach(t),eoo=r(jx," (GPT-J model)"),jx.forEach(t),ooo=i(S),es=n(S,"LI",{});var Dx=s(es);dte=n(Dx,"STRONG",{});var DXr=s(dte);roo=r(DXr,"herbert"),DXr.forEach(t),too=r(Dx," \u2014 "),LR=n(Dx,"A",{href:!0});var GXr=s(LR);aoo=r(GXr,"HerbertTokenizer"),GXr.forEach(t),noo=r(Dx," or "),xR=n(Dx,"A",{href:!0});var OXr=s(xR);soo=r(OXr,"HerbertTokenizerFast"),OXr.forEach(t),loo=r(Dx," (HerBERT model)"),Dx.forEach(t),ioo=i(S),$g=n(S,"LI",{});var lCe=s($g);cte=n(lCe,"STRONG",{});var VXr=s(cte);doo=r(VXr,"hubert"),VXr.forEach(t),coo=r(lCe," \u2014 "),$R=n(lCe,"A",{href:!0});var XXr=s($R);foo=r(XXr,"Wav2Vec2CTCTokenizer"),XXr.forEach(t),moo=r(lCe," (Hubert model)"),lCe.forEach(t),goo=i(S),os=n(S,"LI",{});var Gx=s(os);fte=n(Gx,"STRONG",{});var zXr=s(fte);hoo=r(zXr,"ibert"),zXr.forEach(t),poo=r(Gx," \u2014 "),kR=n(Gx,"A",{href:!0});var QXr=s(kR);uoo=r(QXr,"RobertaTokenizer"),QXr.forEach(t),_oo=r(Gx," or "),SR=n(Gx,"A",{href:!0});var WXr=s(SR);boo=r(WXr,"RobertaTokenizerFast"),WXr.forEach(t),voo=r(Gx," (I-BERT model)"),Gx.forEach(t),Foo=i(S),rs=n(S,"LI",{});var Ox=s(rs);mte=n(Ox,"STRONG",{});var HXr=s(mte);Too=r(HXr,"layoutlm"),HXr.forEach(t),Moo=r(Ox," \u2014 "),RR=n(Ox,"A",{href:!0});var UXr=s(RR);Eoo=r(UXr,"LayoutLMTokenizer"),UXr.forEach(t),Coo=r(Ox," or "),BR=n(Ox,"A",{href:!0});var JXr=s(BR);woo=r(JXr,"LayoutLMTokenizerFast"),JXr.forEach(t),Aoo=r(Ox," (LayoutLM model)"),Ox.forEach(t),yoo=i(S),ts=n(S,"LI",{});var Vx=s(ts);gte=n(Vx,"STRONG",{});var YXr=s(gte);Loo=r(YXr,"layoutlmv2"),YXr.forEach(t),xoo=r(Vx," \u2014 "),PR=n(Vx,"A",{href:!0});var KXr=s(PR);$oo=r(KXr,"LayoutLMv2Tokenizer"),KXr.forEach(t),koo=r(Vx," or "),IR=n(Vx,"A",{href:!0});var ZXr=s(IR);Soo=r(ZXr,"LayoutLMv2TokenizerFast"),ZXr.forEach(t),Roo=r(Vx," (LayoutLMv2 model)"),Vx.forEach(t),Boo=i(S),as=n(S,"LI",{});var Xx=s(as);hte=n(Xx,"STRONG",{});var ezr=s(hte);Poo=r(ezr,"layoutxlm"),ezr.forEach(t),Ioo=r(Xx," \u2014 "),qR=n(Xx,"A",{href:!0});var ozr=s(qR);qoo=r(ozr,"LayoutXLMTokenizer"),ozr.forEach(t),Noo=r(Xx," or "),NR=n(Xx,"A",{href:!0});var rzr=s(NR);joo=r(rzr,"LayoutXLMTokenizerFast"),rzr.forEach(t),Doo=r(Xx," (LayoutXLM model)"),Xx.forEach(t),Goo=i(S),ns=n(S,"LI",{});var zx=s(ns);pte=n(zx,"STRONG",{});var tzr=s(pte);Ooo=r(tzr,"led"),tzr.forEach(t),Voo=r(zx," \u2014 "),jR=n(zx,"A",{href:!0});var azr=s(jR);Xoo=r(azr,"LEDTokenizer"),azr.forEach(t),zoo=r(zx," or "),DR=n(zx,"A",{href:!0});var nzr=s(DR);Qoo=r(nzr,"LEDTokenizerFast"),nzr.forEach(t),Woo=r(zx," (LED model)"),zx.forEach(t),Hoo=i(S),ss=n(S,"LI",{});var Qx=s(ss);ute=n(Qx,"STRONG",{});var szr=s(ute);Uoo=r(szr,"longformer"),szr.forEach(t),Joo=r(Qx," \u2014 "),GR=n(Qx,"A",{href:!0});var lzr=s(GR);Yoo=r(lzr,"LongformerTokenizer"),lzr.forEach(t),Koo=r(Qx," or "),OR=n(Qx,"A",{href:!0});var izr=s(OR);Zoo=r(izr,"LongformerTokenizerFast"),izr.forEach(t),ero=r(Qx," (Longformer model)"),Qx.forEach(t),oro=i(S),ls=n(S,"LI",{});var Wx=s(ls);_te=n(Wx,"STRONG",{});var dzr=s(_te);rro=r(dzr,"longt5"),dzr.forEach(t),tro=r(Wx," \u2014 "),VR=n(Wx,"A",{href:!0});var czr=s(VR);aro=r(czr,"T5Tokenizer"),czr.forEach(t),nro=r(Wx," or "),XR=n(Wx,"A",{href:!0});var fzr=s(XR);sro=r(fzr,"T5TokenizerFast"),fzr.forEach(t),lro=r(Wx," (LongT5 model)"),Wx.forEach(t),iro=i(S),kg=n(S,"LI",{});var iCe=s(kg);bte=n(iCe,"STRONG",{});var mzr=s(bte);dro=r(mzr,"luke"),mzr.forEach(t),cro=r(iCe," \u2014 "),zR=n(iCe,"A",{href:!0});var gzr=s(zR);fro=r(gzr,"LukeTokenizer"),gzr.forEach(t),mro=r(iCe," (LUKE model)"),iCe.forEach(t),gro=i(S),is=n(S,"LI",{});var Hx=s(is);vte=n(Hx,"STRONG",{});var hzr=s(vte);hro=r(hzr,"lxmert"),hzr.forEach(t),pro=r(Hx," \u2014 "),QR=n(Hx,"A",{href:!0});var pzr=s(QR);uro=r(pzr,"LxmertTokenizer"),pzr.forEach(t),_ro=r(Hx," or "),WR=n(Hx,"A",{href:!0});var uzr=s(WR);bro=r(uzr,"LxmertTokenizerFast"),uzr.forEach(t),vro=r(Hx," (LXMERT model)"),Hx.forEach(t),Fro=i(S),Sg=n(S,"LI",{});var dCe=s(Sg);Fte=n(dCe,"STRONG",{});var _zr=s(Fte);Tro=r(_zr,"m2m_100"),_zr.forEach(t),Mro=r(dCe," \u2014 "),HR=n(dCe,"A",{href:!0});var bzr=s(HR);Ero=r(bzr,"M2M100Tokenizer"),bzr.forEach(t),Cro=r(dCe," (M2M100 model)"),dCe.forEach(t),wro=i(S),Rg=n(S,"LI",{});var cCe=s(Rg);Tte=n(cCe,"STRONG",{});var vzr=s(Tte);Aro=r(vzr,"marian"),vzr.forEach(t),yro=r(cCe," \u2014 "),UR=n(cCe,"A",{href:!0});var Fzr=s(UR);Lro=r(Fzr,"MarianTokenizer"),Fzr.forEach(t),xro=r(cCe," (Marian model)"),cCe.forEach(t),$ro=i(S),ds=n(S,"LI",{});var Ux=s(ds);Mte=n(Ux,"STRONG",{});var Tzr=s(Mte);kro=r(Tzr,"mbart"),Tzr.forEach(t),Sro=r(Ux," \u2014 "),JR=n(Ux,"A",{href:!0});var Mzr=s(JR);Rro=r(Mzr,"MBartTokenizer"),Mzr.forEach(t),Bro=r(Ux," or "),YR=n(Ux,"A",{href:!0});var Ezr=s(YR);Pro=r(Ezr,"MBartTokenizerFast"),Ezr.forEach(t),Iro=r(Ux," (mBART model)"),Ux.forEach(t),qro=i(S),cs=n(S,"LI",{});var Jx=s(cs);Ete=n(Jx,"STRONG",{});var Czr=s(Ete);Nro=r(Czr,"mbart50"),Czr.forEach(t),jro=r(Jx," \u2014 "),KR=n(Jx,"A",{href:!0});var wzr=s(KR);Dro=r(wzr,"MBart50Tokenizer"),wzr.forEach(t),Gro=r(Jx," or "),ZR=n(Jx,"A",{href:!0});var Azr=s(ZR);Oro=r(Azr,"MBart50TokenizerFast"),Azr.forEach(t),Vro=r(Jx," (mBART-50 model)"),Jx.forEach(t),Xro=i(S),fs=n(S,"LI",{});var Yx=s(fs);Cte=n(Yx,"STRONG",{});var yzr=s(Cte);zro=r(yzr,"megatron-bert"),yzr.forEach(t),Qro=r(Yx," \u2014 "),eB=n(Yx,"A",{href:!0});var Lzr=s(eB);Wro=r(Lzr,"BertTokenizer"),Lzr.forEach(t),Hro=r(Yx," or "),oB=n(Yx,"A",{href:!0});var xzr=s(oB);Uro=r(xzr,"BertTokenizerFast"),xzr.forEach(t),Jro=r(Yx," (MegatronBert model)"),Yx.forEach(t),Yro=i(S),Bg=n(S,"LI",{});var fCe=s(Bg);wte=n(fCe,"STRONG",{});var $zr=s(wte);Kro=r($zr,"mluke"),$zr.forEach(t),Zro=r(fCe," \u2014 "),rB=n(fCe,"A",{href:!0});var kzr=s(rB);eto=r(kzr,"MLukeTokenizer"),kzr.forEach(t),oto=r(fCe," (mLUKE model)"),fCe.forEach(t),rto=i(S),ms=n(S,"LI",{});var Kx=s(ms);Ate=n(Kx,"STRONG",{});var Szr=s(Ate);tto=r(Szr,"mobilebert"),Szr.forEach(t),ato=r(Kx," \u2014 "),tB=n(Kx,"A",{href:!0});var Rzr=s(tB);nto=r(Rzr,"MobileBertTokenizer"),Rzr.forEach(t),sto=r(Kx," or "),aB=n(Kx,"A",{href:!0});var Bzr=s(aB);lto=r(Bzr,"MobileBertTokenizerFast"),Bzr.forEach(t),ito=r(Kx," (MobileBERT model)"),Kx.forEach(t),dto=i(S),gs=n(S,"LI",{});var Zx=s(gs);yte=n(Zx,"STRONG",{});var Pzr=s(yte);cto=r(Pzr,"mpnet"),Pzr.forEach(t),fto=r(Zx," \u2014 "),nB=n(Zx,"A",{href:!0});var Izr=s(nB);mto=r(Izr,"MPNetTokenizer"),Izr.forEach(t),gto=r(Zx," or "),sB=n(Zx,"A",{href:!0});var qzr=s(sB);hto=r(qzr,"MPNetTokenizerFast"),qzr.forEach(t),pto=r(Zx," (MPNet model)"),Zx.forEach(t),uto=i(S),hs=n(S,"LI",{});var e$=s(hs);Lte=n(e$,"STRONG",{});var Nzr=s(Lte);_to=r(Nzr,"mt5"),Nzr.forEach(t),bto=r(e$," \u2014 "),lB=n(e$,"A",{href:!0});var jzr=s(lB);vto=r(jzr,"MT5Tokenizer"),jzr.forEach(t),Fto=r(e$," or "),iB=n(e$,"A",{href:!0});var Dzr=s(iB);Tto=r(Dzr,"MT5TokenizerFast"),Dzr.forEach(t),Mto=r(e$," (mT5 model)"),e$.forEach(t),Eto=i(S),ps=n(S,"LI",{});var o$=s(ps);xte=n(o$,"STRONG",{});var Gzr=s(xte);Cto=r(Gzr,"nystromformer"),Gzr.forEach(t),wto=r(o$," \u2014 "),dB=n(o$,"A",{href:!0});var Ozr=s(dB);Ato=r(Ozr,"AlbertTokenizer"),Ozr.forEach(t),yto=r(o$," or "),cB=n(o$,"A",{href:!0});var Vzr=s(cB);Lto=r(Vzr,"AlbertTokenizerFast"),Vzr.forEach(t),xto=r(o$," (Nystromformer model)"),o$.forEach(t),$to=i(S),us=n(S,"LI",{});var r$=s(us);$te=n(r$,"STRONG",{});var Xzr=s($te);kto=r(Xzr,"openai-gpt"),Xzr.forEach(t),Sto=r(r$," \u2014 "),fB=n(r$,"A",{href:!0});var zzr=s(fB);Rto=r(zzr,"OpenAIGPTTokenizer"),zzr.forEach(t),Bto=r(r$," or "),mB=n(r$,"A",{href:!0});var Qzr=s(mB);Pto=r(Qzr,"OpenAIGPTTokenizerFast"),Qzr.forEach(t),Ito=r(r$," (OpenAI GPT model)"),r$.forEach(t),qto=i(S),Pg=n(S,"LI",{});var mCe=s(Pg);kte=n(mCe,"STRONG",{});var Wzr=s(kte);Nto=r(Wzr,"opt"),Wzr.forEach(t),jto=r(mCe," \u2014 "),gB=n(mCe,"A",{href:!0});var Hzr=s(gB);Dto=r(Hzr,"GPT2Tokenizer"),Hzr.forEach(t),Gto=r(mCe," (OPT model)"),mCe.forEach(t),Oto=i(S),_s=n(S,"LI",{});var t$=s(_s);Ste=n(t$,"STRONG",{});var Uzr=s(Ste);Vto=r(Uzr,"pegasus"),Uzr.forEach(t),Xto=r(t$," \u2014 "),hB=n(t$,"A",{href:!0});var Jzr=s(hB);zto=r(Jzr,"PegasusTokenizer"),Jzr.forEach(t),Qto=r(t$," or "),pB=n(t$,"A",{href:!0});var Yzr=s(pB);Wto=r(Yzr,"PegasusTokenizerFast"),Yzr.forEach(t),Hto=r(t$," (Pegasus model)"),t$.forEach(t),Uto=i(S),Ig=n(S,"LI",{});var gCe=s(Ig);Rte=n(gCe,"STRONG",{});var Kzr=s(Rte);Jto=r(Kzr,"perceiver"),Kzr.forEach(t),Yto=r(gCe," \u2014 "),uB=n(gCe,"A",{href:!0});var Zzr=s(uB);Kto=r(Zzr,"PerceiverTokenizer"),Zzr.forEach(t),Zto=r(gCe," (Perceiver model)"),gCe.forEach(t),eao=i(S),qg=n(S,"LI",{});var hCe=s(qg);Bte=n(hCe,"STRONG",{});var eQr=s(Bte);oao=r(eQr,"phobert"),eQr.forEach(t),rao=r(hCe," \u2014 "),_B=n(hCe,"A",{href:!0});var oQr=s(_B);tao=r(oQr,"PhobertTokenizer"),oQr.forEach(t),aao=r(hCe," (PhoBERT model)"),hCe.forEach(t),nao=i(S),Ng=n(S,"LI",{});var pCe=s(Ng);Pte=n(pCe,"STRONG",{});var rQr=s(Pte);sao=r(rQr,"plbart"),rQr.forEach(t),lao=r(pCe," \u2014 "),bB=n(pCe,"A",{href:!0});var tQr=s(bB);iao=r(tQr,"PLBartTokenizer"),tQr.forEach(t),dao=r(pCe," (PLBart model)"),pCe.forEach(t),cao=i(S),jg=n(S,"LI",{});var uCe=s(jg);Ite=n(uCe,"STRONG",{});var aQr=s(Ite);fao=r(aQr,"prophetnet"),aQr.forEach(t),mao=r(uCe," \u2014 "),vB=n(uCe,"A",{href:!0});var nQr=s(vB);gao=r(nQr,"ProphetNetTokenizer"),nQr.forEach(t),hao=r(uCe," (ProphetNet model)"),uCe.forEach(t),pao=i(S),bs=n(S,"LI",{});var a$=s(bs);qte=n(a$,"STRONG",{});var sQr=s(qte);uao=r(sQr,"qdqbert"),sQr.forEach(t),_ao=r(a$," \u2014 "),FB=n(a$,"A",{href:!0});var lQr=s(FB);bao=r(lQr,"BertTokenizer"),lQr.forEach(t),vao=r(a$," or "),TB=n(a$,"A",{href:!0});var iQr=s(TB);Fao=r(iQr,"BertTokenizerFast"),iQr.forEach(t),Tao=r(a$," (QDQBert model)"),a$.forEach(t),Mao=i(S),Dg=n(S,"LI",{});var _Ce=s(Dg);Nte=n(_Ce,"STRONG",{});var dQr=s(Nte);Eao=r(dQr,"rag"),dQr.forEach(t),Cao=r(_Ce," \u2014 "),MB=n(_Ce,"A",{href:!0});var cQr=s(MB);wao=r(cQr,"RagTokenizer"),cQr.forEach(t),Aao=r(_Ce," (RAG model)"),_Ce.forEach(t),yao=i(S),vs=n(S,"LI",{});var n$=s(vs);jte=n(n$,"STRONG",{});var fQr=s(jte);Lao=r(fQr,"realm"),fQr.forEach(t),xao=r(n$," \u2014 "),EB=n(n$,"A",{href:!0});var mQr=s(EB);$ao=r(mQr,"RealmTokenizer"),mQr.forEach(t),kao=r(n$," or "),CB=n(n$,"A",{href:!0});var gQr=s(CB);Sao=r(gQr,"RealmTokenizerFast"),gQr.forEach(t),Rao=r(n$," (Realm model)"),n$.forEach(t),Bao=i(S),Fs=n(S,"LI",{});var s$=s(Fs);Dte=n(s$,"STRONG",{});var hQr=s(Dte);Pao=r(hQr,"reformer"),hQr.forEach(t),Iao=r(s$," \u2014 "),wB=n(s$,"A",{href:!0});var pQr=s(wB);qao=r(pQr,"ReformerTokenizer"),pQr.forEach(t),Nao=r(s$," or "),AB=n(s$,"A",{href:!0});var uQr=s(AB);jao=r(uQr,"ReformerTokenizerFast"),uQr.forEach(t),Dao=r(s$," (Reformer model)"),s$.forEach(t),Gao=i(S),Ts=n(S,"LI",{});var l$=s(Ts);Gte=n(l$,"STRONG",{});var _Qr=s(Gte);Oao=r(_Qr,"rembert"),_Qr.forEach(t),Vao=r(l$," \u2014 "),yB=n(l$,"A",{href:!0});var bQr=s(yB);Xao=r(bQr,"RemBertTokenizer"),bQr.forEach(t),zao=r(l$," or "),LB=n(l$,"A",{href:!0});var vQr=s(LB);Qao=r(vQr,"RemBertTokenizerFast"),vQr.forEach(t),Wao=r(l$," (RemBERT model)"),l$.forEach(t),Hao=i(S),Ms=n(S,"LI",{});var i$=s(Ms);Ote=n(i$,"STRONG",{});var FQr=s(Ote);Uao=r(FQr,"retribert"),FQr.forEach(t),Jao=r(i$," \u2014 "),xB=n(i$,"A",{href:!0});var TQr=s(xB);Yao=r(TQr,"RetriBertTokenizer"),TQr.forEach(t),Kao=r(i$," or "),$B=n(i$,"A",{href:!0});var MQr=s($B);Zao=r(MQr,"RetriBertTokenizerFast"),MQr.forEach(t),eno=r(i$," (RetriBERT model)"),i$.forEach(t),ono=i(S),Es=n(S,"LI",{});var d$=s(Es);Vte=n(d$,"STRONG",{});var EQr=s(Vte);rno=r(EQr,"roberta"),EQr.forEach(t),tno=r(d$," \u2014 "),kB=n(d$,"A",{href:!0});var CQr=s(kB);ano=r(CQr,"RobertaTokenizer"),CQr.forEach(t),nno=r(d$," or "),SB=n(d$,"A",{href:!0});var wQr=s(SB);sno=r(wQr,"RobertaTokenizerFast"),wQr.forEach(t),lno=r(d$," (RoBERTa model)"),d$.forEach(t),ino=i(S),Cs=n(S,"LI",{});var c$=s(Cs);Xte=n(c$,"STRONG",{});var AQr=s(Xte);dno=r(AQr,"roformer"),AQr.forEach(t),cno=r(c$," \u2014 "),RB=n(c$,"A",{href:!0});var yQr=s(RB);fno=r(yQr,"RoFormerTokenizer"),yQr.forEach(t),mno=r(c$," or "),BB=n(c$,"A",{href:!0});var LQr=s(BB);gno=r(LQr,"RoFormerTokenizerFast"),LQr.forEach(t),hno=r(c$," (RoFormer model)"),c$.forEach(t),pno=i(S),Gg=n(S,"LI",{});var bCe=s(Gg);zte=n(bCe,"STRONG",{});var xQr=s(zte);uno=r(xQr,"speech_to_text"),xQr.forEach(t),_no=r(bCe," \u2014 "),PB=n(bCe,"A",{href:!0});var $Qr=s(PB);bno=r($Qr,"Speech2TextTokenizer"),$Qr.forEach(t),vno=r(bCe," (Speech2Text model)"),bCe.forEach(t),Fno=i(S),Og=n(S,"LI",{});var vCe=s(Og);Qte=n(vCe,"STRONG",{});var kQr=s(Qte);Tno=r(kQr,"speech_to_text_2"),kQr.forEach(t),Mno=r(vCe," \u2014 "),IB=n(vCe,"A",{href:!0});var SQr=s(IB);Eno=r(SQr,"Speech2Text2Tokenizer"),SQr.forEach(t),Cno=r(vCe," (Speech2Text2 model)"),vCe.forEach(t),wno=i(S),ws=n(S,"LI",{});var f$=s(ws);Wte=n(f$,"STRONG",{});var RQr=s(Wte);Ano=r(RQr,"splinter"),RQr.forEach(t),yno=r(f$," \u2014 "),qB=n(f$,"A",{href:!0});var BQr=s(qB);Lno=r(BQr,"SplinterTokenizer"),BQr.forEach(t),xno=r(f$," or "),NB=n(f$,"A",{href:!0});var PQr=s(NB);$no=r(PQr,"SplinterTokenizerFast"),PQr.forEach(t),kno=r(f$," (Splinter model)"),f$.forEach(t),Sno=i(S),As=n(S,"LI",{});var m$=s(As);Hte=n(m$,"STRONG",{});var IQr=s(Hte);Rno=r(IQr,"squeezebert"),IQr.forEach(t),Bno=r(m$," \u2014 "),jB=n(m$,"A",{href:!0});var qQr=s(jB);Pno=r(qQr,"SqueezeBertTokenizer"),qQr.forEach(t),Ino=r(m$," or "),DB=n(m$,"A",{href:!0});var NQr=s(DB);qno=r(NQr,"SqueezeBertTokenizerFast"),NQr.forEach(t),Nno=r(m$," (SqueezeBERT model)"),m$.forEach(t),jno=i(S),ys=n(S,"LI",{});var g$=s(ys);Ute=n(g$,"STRONG",{});var jQr=s(Ute);Dno=r(jQr,"t5"),jQr.forEach(t),Gno=r(g$," \u2014 "),GB=n(g$,"A",{href:!0});var DQr=s(GB);Ono=r(DQr,"T5Tokenizer"),DQr.forEach(t),Vno=r(g$," or "),OB=n(g$,"A",{href:!0});var GQr=s(OB);Xno=r(GQr,"T5TokenizerFast"),GQr.forEach(t),zno=r(g$," (T5 model)"),g$.forEach(t),Qno=i(S),Vg=n(S,"LI",{});var FCe=s(Vg);Jte=n(FCe,"STRONG",{});var OQr=s(Jte);Wno=r(OQr,"tapas"),OQr.forEach(t),Hno=r(FCe," \u2014 "),VB=n(FCe,"A",{href:!0});var VQr=s(VB);Uno=r(VQr,"TapasTokenizer"),VQr.forEach(t),Jno=r(FCe," (TAPAS model)"),FCe.forEach(t),Yno=i(S),Xg=n(S,"LI",{});var TCe=s(Xg);Yte=n(TCe,"STRONG",{});var XQr=s(Yte);Kno=r(XQr,"tapex"),XQr.forEach(t),Zno=r(TCe," \u2014 "),XB=n(TCe,"A",{href:!0});var zQr=s(XB);eso=r(zQr,"TapexTokenizer"),zQr.forEach(t),oso=r(TCe," (TAPEX model)"),TCe.forEach(t),rso=i(S),zg=n(S,"LI",{});var MCe=s(zg);Kte=n(MCe,"STRONG",{});var QQr=s(Kte);tso=r(QQr,"transfo-xl"),QQr.forEach(t),aso=r(MCe," \u2014 "),zB=n(MCe,"A",{href:!0});var WQr=s(zB);nso=r(WQr,"TransfoXLTokenizer"),WQr.forEach(t),sso=r(MCe," (Transformer-XL model)"),MCe.forEach(t),lso=i(S),Ls=n(S,"LI",{});var h$=s(Ls);Zte=n(h$,"STRONG",{});var HQr=s(Zte);iso=r(HQr,"visual_bert"),HQr.forEach(t),dso=r(h$," \u2014 "),QB=n(h$,"A",{href:!0});var UQr=s(QB);cso=r(UQr,"BertTokenizer"),UQr.forEach(t),fso=r(h$," or "),WB=n(h$,"A",{href:!0});var JQr=s(WB);mso=r(JQr,"BertTokenizerFast"),JQr.forEach(t),gso=r(h$," (VisualBert model)"),h$.forEach(t),hso=i(S),Qg=n(S,"LI",{});var ECe=s(Qg);eae=n(ECe,"STRONG",{});var YQr=s(eae);pso=r(YQr,"wav2vec2"),YQr.forEach(t),uso=r(ECe," \u2014 "),HB=n(ECe,"A",{href:!0});var KQr=s(HB);_so=r(KQr,"Wav2Vec2CTCTokenizer"),KQr.forEach(t),bso=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),vso=i(S),Wg=n(S,"LI",{});var CCe=s(Wg);oae=n(CCe,"STRONG",{});var ZQr=s(oae);Fso=r(ZQr,"wav2vec2_phoneme"),ZQr.forEach(t),Tso=r(CCe," \u2014 "),UB=n(CCe,"A",{href:!0});var eWr=s(UB);Mso=r(eWr,"Wav2Vec2PhonemeCTCTokenizer"),eWr.forEach(t),Eso=r(CCe," (Wav2Vec2Phoneme model)"),CCe.forEach(t),Cso=i(S),xs=n(S,"LI",{});var p$=s(xs);rae=n(p$,"STRONG",{});var oWr=s(rae);wso=r(oWr,"xglm"),oWr.forEach(t),Aso=r(p$," \u2014 "),JB=n(p$,"A",{href:!0});var rWr=s(JB);yso=r(rWr,"XGLMTokenizer"),rWr.forEach(t),Lso=r(p$," or "),YB=n(p$,"A",{href:!0});var tWr=s(YB);xso=r(tWr,"XGLMTokenizerFast"),tWr.forEach(t),$so=r(p$," (XGLM model)"),p$.forEach(t),kso=i(S),Hg=n(S,"LI",{});var wCe=s(Hg);tae=n(wCe,"STRONG",{});var aWr=s(tae);Sso=r(aWr,"xlm"),aWr.forEach(t),Rso=r(wCe," \u2014 "),KB=n(wCe,"A",{href:!0});var nWr=s(KB);Bso=r(nWr,"XLMTokenizer"),nWr.forEach(t),Pso=r(wCe," (XLM model)"),wCe.forEach(t),Iso=i(S),Ug=n(S,"LI",{});var ACe=s(Ug);aae=n(ACe,"STRONG",{});var sWr=s(aae);qso=r(sWr,"xlm-prophetnet"),sWr.forEach(t),Nso=r(ACe," \u2014 "),ZB=n(ACe,"A",{href:!0});var lWr=s(ZB);jso=r(lWr,"XLMProphetNetTokenizer"),lWr.forEach(t),Dso=r(ACe," (XLMProphetNet model)"),ACe.forEach(t),Gso=i(S),$s=n(S,"LI",{});var u$=s($s);nae=n(u$,"STRONG",{});var iWr=s(nae);Oso=r(iWr,"xlm-roberta"),iWr.forEach(t),Vso=r(u$," \u2014 "),eP=n(u$,"A",{href:!0});var dWr=s(eP);Xso=r(dWr,"XLMRobertaTokenizer"),dWr.forEach(t),zso=r(u$," or "),oP=n(u$,"A",{href:!0});var cWr=s(oP);Qso=r(cWr,"XLMRobertaTokenizerFast"),cWr.forEach(t),Wso=r(u$," (XLM-RoBERTa model)"),u$.forEach(t),Hso=i(S),ks=n(S,"LI",{});var _$=s(ks);sae=n(_$,"STRONG",{});var fWr=s(sae);Uso=r(fWr,"xlm-roberta-xl"),fWr.forEach(t),Jso=r(_$," \u2014 "),rP=n(_$,"A",{href:!0});var mWr=s(rP);Yso=r(mWr,"RobertaTokenizer"),mWr.forEach(t),Kso=r(_$," or "),tP=n(_$,"A",{href:!0});var gWr=s(tP);Zso=r(gWr,"RobertaTokenizerFast"),gWr.forEach(t),elo=r(_$," (XLM-RoBERTa-XL model)"),_$.forEach(t),olo=i(S),Ss=n(S,"LI",{});var b$=s(Ss);lae=n(b$,"STRONG",{});var hWr=s(lae);rlo=r(hWr,"xlnet"),hWr.forEach(t),tlo=r(b$," \u2014 "),aP=n(b$,"A",{href:!0});var pWr=s(aP);alo=r(pWr,"XLNetTokenizer"),pWr.forEach(t),nlo=r(b$," or "),nP=n(b$,"A",{href:!0});var uWr=s(nP);slo=r(uWr,"XLNetTokenizerFast"),uWr.forEach(t),llo=r(b$," (XLNet model)"),b$.forEach(t),ilo=i(S),Rs=n(S,"LI",{});var v$=s(Rs);iae=n(v$,"STRONG",{});var _Wr=s(iae);dlo=r(_Wr,"yoso"),_Wr.forEach(t),clo=r(v$," \u2014 "),sP=n(v$,"A",{href:!0});var bWr=s(sP);flo=r(bWr,"AlbertTokenizer"),bWr.forEach(t),mlo=r(v$," or "),lP=n(v$,"A",{href:!0});var vWr=s(lP);glo=r(vWr,"AlbertTokenizerFast"),vWr.forEach(t),hlo=r(v$," (YOSO model)"),v$.forEach(t),S.forEach(t),plo=i(Ns),T(Jg.$$.fragment,Ns),Ns.forEach(t),ulo=i(qs),Yg=n(qs,"DIV",{class:!0});var ANe=s(Yg);T(bA.$$.fragment,ANe),_lo=i(ANe),dae=n(ANe,"P",{});var FWr=s(dae);blo=r(FWr,"Register a new tokenizer in this mapping."),FWr.forEach(t),ANe.forEach(t),qs.forEach(t),yIe=i(f),Fi=n(f,"H2",{class:!0});var yNe=s(Fi);Kg=n(yNe,"A",{id:!0,class:!0,href:!0});var TWr=s(Kg);cae=n(TWr,"SPAN",{});var MWr=s(cae);T(vA.$$.fragment,MWr),MWr.forEach(t),TWr.forEach(t),vlo=i(yNe),fae=n(yNe,"SPAN",{});var EWr=s(fae);Flo=r(EWr,"AutoFeatureExtractor"),EWr.forEach(t),yNe.forEach(t),LIe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(FA.$$.fragment,js),Tlo=i(js),TA=n(js,"P",{});var LNe=s(TA);Mlo=r(LNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iP=n(LNe,"A",{href:!0});var CWr=s(iP);Elo=r(CWr,"AutoFeatureExtractor.from_pretrained()"),CWr.forEach(t),Clo=r(LNe," class method."),LNe.forEach(t),wlo=i(js),MA=n(js,"P",{});var xNe=s(MA);Alo=r(xNe,"This class cannot be instantiated directly using "),mae=n(xNe,"CODE",{});var wWr=s(mae);ylo=r(wWr,"__init__()"),wWr.forEach(t),Llo=r(xNe," (throws an error)."),xNe.forEach(t),xlo=i(js),Qe=n(js,"DIV",{class:!0});var Yt=s(Qe);T(EA.$$.fragment,Yt),$lo=i(Yt),gae=n(Yt,"P",{});var AWr=s(gae);klo=r(AWr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),AWr.forEach(t),Slo=i(Yt),wa=n(Yt,"P",{});var s3=s(wa);Rlo=r(s3,"The feature extractor class to instantiate is selected based on the "),hae=n(s3,"CODE",{});var yWr=s(hae);Blo=r(yWr,"model_type"),yWr.forEach(t),Plo=r(s3,` property of the config object
(either passed as an argument or loaded from `),pae=n(s3,"CODE",{});var LWr=s(pae);Ilo=r(LWr,"pretrained_model_name_or_path"),LWr.forEach(t),qlo=r(s3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),uae=n(s3,"CODE",{});var xWr=s(uae);Nlo=r(xWr,"pretrained_model_name_or_path"),xWr.forEach(t),jlo=r(s3,":"),s3.forEach(t),Dlo=i(Yt),re=n(Yt,"UL",{});var ne=s(re);Zg=n(ne,"LI",{});var yCe=s(Zg);_ae=n(yCe,"STRONG",{});var $Wr=s(_ae);Glo=r($Wr,"beit"),$Wr.forEach(t),Olo=r(yCe," \u2014 "),dP=n(yCe,"A",{href:!0});var kWr=s(dP);Vlo=r(kWr,"BeitFeatureExtractor"),kWr.forEach(t),Xlo=r(yCe," (BEiT model)"),yCe.forEach(t),zlo=i(ne),eh=n(ne,"LI",{});var LCe=s(eh);bae=n(LCe,"STRONG",{});var SWr=s(bae);Qlo=r(SWr,"clip"),SWr.forEach(t),Wlo=r(LCe," \u2014 "),cP=n(LCe,"A",{href:!0});var RWr=s(cP);Hlo=r(RWr,"CLIPFeatureExtractor"),RWr.forEach(t),Ulo=r(LCe," (CLIP model)"),LCe.forEach(t),Jlo=i(ne),oh=n(ne,"LI",{});var xCe=s(oh);vae=n(xCe,"STRONG",{});var BWr=s(vae);Ylo=r(BWr,"convnext"),BWr.forEach(t),Klo=r(xCe," \u2014 "),fP=n(xCe,"A",{href:!0});var PWr=s(fP);Zlo=r(PWr,"ConvNextFeatureExtractor"),PWr.forEach(t),eio=r(xCe," (ConvNext model)"),xCe.forEach(t),oio=i(ne),rh=n(ne,"LI",{});var $Ce=s(rh);Fae=n($Ce,"STRONG",{});var IWr=s(Fae);rio=r(IWr,"data2vec-audio"),IWr.forEach(t),tio=r($Ce," \u2014 "),mP=n($Ce,"A",{href:!0});var qWr=s(mP);aio=r(qWr,"Wav2Vec2FeatureExtractor"),qWr.forEach(t),nio=r($Ce," (Data2VecAudio model)"),$Ce.forEach(t),sio=i(ne),th=n(ne,"LI",{});var kCe=s(th);Tae=n(kCe,"STRONG",{});var NWr=s(Tae);lio=r(NWr,"data2vec-vision"),NWr.forEach(t),iio=r(kCe," \u2014 "),gP=n(kCe,"A",{href:!0});var jWr=s(gP);dio=r(jWr,"BeitFeatureExtractor"),jWr.forEach(t),cio=r(kCe," (Data2VecVision model)"),kCe.forEach(t),fio=i(ne),ah=n(ne,"LI",{});var SCe=s(ah);Mae=n(SCe,"STRONG",{});var DWr=s(Mae);mio=r(DWr,"deit"),DWr.forEach(t),gio=r(SCe," \u2014 "),hP=n(SCe,"A",{href:!0});var GWr=s(hP);hio=r(GWr,"DeiTFeatureExtractor"),GWr.forEach(t),pio=r(SCe," (DeiT model)"),SCe.forEach(t),uio=i(ne),nh=n(ne,"LI",{});var RCe=s(nh);Eae=n(RCe,"STRONG",{});var OWr=s(Eae);_io=r(OWr,"detr"),OWr.forEach(t),bio=r(RCe," \u2014 "),pP=n(RCe,"A",{href:!0});var VWr=s(pP);vio=r(VWr,"DetrFeatureExtractor"),VWr.forEach(t),Fio=r(RCe," (DETR model)"),RCe.forEach(t),Tio=i(ne),sh=n(ne,"LI",{});var BCe=s(sh);Cae=n(BCe,"STRONG",{});var XWr=s(Cae);Mio=r(XWr,"dpt"),XWr.forEach(t),Eio=r(BCe," \u2014 "),uP=n(BCe,"A",{href:!0});var zWr=s(uP);Cio=r(zWr,"DPTFeatureExtractor"),zWr.forEach(t),wio=r(BCe," (DPT model)"),BCe.forEach(t),Aio=i(ne),lh=n(ne,"LI",{});var PCe=s(lh);wae=n(PCe,"STRONG",{});var QWr=s(wae);yio=r(QWr,"flava"),QWr.forEach(t),Lio=r(PCe," \u2014 "),_P=n(PCe,"A",{href:!0});var WWr=s(_P);xio=r(WWr,"FlavaFeatureExtractor"),WWr.forEach(t),$io=r(PCe," (Flava model)"),PCe.forEach(t),kio=i(ne),ih=n(ne,"LI",{});var ICe=s(ih);Aae=n(ICe,"STRONG",{});var HWr=s(Aae);Sio=r(HWr,"glpn"),HWr.forEach(t),Rio=r(ICe," \u2014 "),bP=n(ICe,"A",{href:!0});var UWr=s(bP);Bio=r(UWr,"GLPNFeatureExtractor"),UWr.forEach(t),Pio=r(ICe," (GLPN model)"),ICe.forEach(t),Iio=i(ne),dh=n(ne,"LI",{});var qCe=s(dh);yae=n(qCe,"STRONG",{});var JWr=s(yae);qio=r(JWr,"hubert"),JWr.forEach(t),Nio=r(qCe," \u2014 "),vP=n(qCe,"A",{href:!0});var YWr=s(vP);jio=r(YWr,"Wav2Vec2FeatureExtractor"),YWr.forEach(t),Dio=r(qCe," (Hubert model)"),qCe.forEach(t),Gio=i(ne),ch=n(ne,"LI",{});var NCe=s(ch);Lae=n(NCe,"STRONG",{});var KWr=s(Lae);Oio=r(KWr,"layoutlmv2"),KWr.forEach(t),Vio=r(NCe," \u2014 "),FP=n(NCe,"A",{href:!0});var ZWr=s(FP);Xio=r(ZWr,"LayoutLMv2FeatureExtractor"),ZWr.forEach(t),zio=r(NCe," (LayoutLMv2 model)"),NCe.forEach(t),Qio=i(ne),fh=n(ne,"LI",{});var jCe=s(fh);xae=n(jCe,"STRONG",{});var eHr=s(xae);Wio=r(eHr,"maskformer"),eHr.forEach(t),Hio=r(jCe," \u2014 "),TP=n(jCe,"A",{href:!0});var oHr=s(TP);Uio=r(oHr,"MaskFormerFeatureExtractor"),oHr.forEach(t),Jio=r(jCe," (MaskFormer model)"),jCe.forEach(t),Yio=i(ne),mh=n(ne,"LI",{});var DCe=s(mh);$ae=n(DCe,"STRONG",{});var rHr=s($ae);Kio=r(rHr,"perceiver"),rHr.forEach(t),Zio=r(DCe," \u2014 "),MP=n(DCe,"A",{href:!0});var tHr=s(MP);edo=r(tHr,"PerceiverFeatureExtractor"),tHr.forEach(t),odo=r(DCe," (Perceiver model)"),DCe.forEach(t),rdo=i(ne),gh=n(ne,"LI",{});var GCe=s(gh);kae=n(GCe,"STRONG",{});var aHr=s(kae);tdo=r(aHr,"poolformer"),aHr.forEach(t),ado=r(GCe," \u2014 "),EP=n(GCe,"A",{href:!0});var nHr=s(EP);ndo=r(nHr,"PoolFormerFeatureExtractor"),nHr.forEach(t),sdo=r(GCe," (PoolFormer model)"),GCe.forEach(t),ldo=i(ne),hh=n(ne,"LI",{});var OCe=s(hh);Sae=n(OCe,"STRONG",{});var sHr=s(Sae);ido=r(sHr,"regnet"),sHr.forEach(t),ddo=r(OCe," \u2014 "),CP=n(OCe,"A",{href:!0});var lHr=s(CP);cdo=r(lHr,"ConvNextFeatureExtractor"),lHr.forEach(t),fdo=r(OCe," (RegNet model)"),OCe.forEach(t),mdo=i(ne),ph=n(ne,"LI",{});var VCe=s(ph);Rae=n(VCe,"STRONG",{});var iHr=s(Rae);gdo=r(iHr,"resnet"),iHr.forEach(t),hdo=r(VCe," \u2014 "),wP=n(VCe,"A",{href:!0});var dHr=s(wP);pdo=r(dHr,"ConvNextFeatureExtractor"),dHr.forEach(t),udo=r(VCe," (ResNet model)"),VCe.forEach(t),_do=i(ne),uh=n(ne,"LI",{});var XCe=s(uh);Bae=n(XCe,"STRONG",{});var cHr=s(Bae);bdo=r(cHr,"segformer"),cHr.forEach(t),vdo=r(XCe," \u2014 "),AP=n(XCe,"A",{href:!0});var fHr=s(AP);Fdo=r(fHr,"SegformerFeatureExtractor"),fHr.forEach(t),Tdo=r(XCe," (SegFormer model)"),XCe.forEach(t),Mdo=i(ne),_h=n(ne,"LI",{});var zCe=s(_h);Pae=n(zCe,"STRONG",{});var mHr=s(Pae);Edo=r(mHr,"speech_to_text"),mHr.forEach(t),Cdo=r(zCe," \u2014 "),yP=n(zCe,"A",{href:!0});var gHr=s(yP);wdo=r(gHr,"Speech2TextFeatureExtractor"),gHr.forEach(t),Ado=r(zCe," (Speech2Text model)"),zCe.forEach(t),ydo=i(ne),bh=n(ne,"LI",{});var QCe=s(bh);Iae=n(QCe,"STRONG",{});var hHr=s(Iae);Ldo=r(hHr,"swin"),hHr.forEach(t),xdo=r(QCe," \u2014 "),LP=n(QCe,"A",{href:!0});var pHr=s(LP);$do=r(pHr,"ViTFeatureExtractor"),pHr.forEach(t),kdo=r(QCe," (Swin model)"),QCe.forEach(t),Sdo=i(ne),vh=n(ne,"LI",{});var WCe=s(vh);qae=n(WCe,"STRONG",{});var uHr=s(qae);Rdo=r(uHr,"van"),uHr.forEach(t),Bdo=r(WCe," \u2014 "),xP=n(WCe,"A",{href:!0});var _Hr=s(xP);Pdo=r(_Hr,"ConvNextFeatureExtractor"),_Hr.forEach(t),Ido=r(WCe," (VAN model)"),WCe.forEach(t),qdo=i(ne),Fh=n(ne,"LI",{});var HCe=s(Fh);Nae=n(HCe,"STRONG",{});var bHr=s(Nae);Ndo=r(bHr,"vit"),bHr.forEach(t),jdo=r(HCe," \u2014 "),$P=n(HCe,"A",{href:!0});var vHr=s($P);Ddo=r(vHr,"ViTFeatureExtractor"),vHr.forEach(t),Gdo=r(HCe," (ViT model)"),HCe.forEach(t),Odo=i(ne),Th=n(ne,"LI",{});var UCe=s(Th);jae=n(UCe,"STRONG",{});var FHr=s(jae);Vdo=r(FHr,"vit_mae"),FHr.forEach(t),Xdo=r(UCe," \u2014 "),kP=n(UCe,"A",{href:!0});var THr=s(kP);zdo=r(THr,"ViTFeatureExtractor"),THr.forEach(t),Qdo=r(UCe," (ViTMAE model)"),UCe.forEach(t),Wdo=i(ne),Mh=n(ne,"LI",{});var JCe=s(Mh);Dae=n(JCe,"STRONG",{});var MHr=s(Dae);Hdo=r(MHr,"wav2vec2"),MHr.forEach(t),Udo=r(JCe," \u2014 "),SP=n(JCe,"A",{href:!0});var EHr=s(SP);Jdo=r(EHr,"Wav2Vec2FeatureExtractor"),EHr.forEach(t),Ydo=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),Kdo=i(ne),Eh=n(ne,"LI",{});var YCe=s(Eh);Gae=n(YCe,"STRONG",{});var CHr=s(Gae);Zdo=r(CHr,"yolos"),CHr.forEach(t),eco=r(YCe," \u2014 "),RP=n(YCe,"A",{href:!0});var wHr=s(RP);oco=r(wHr,"YolosFeatureExtractor"),wHr.forEach(t),rco=r(YCe," (YOLOS model)"),YCe.forEach(t),ne.forEach(t),tco=i(Yt),T(Ch.$$.fragment,Yt),aco=i(Yt),T(wh.$$.fragment,Yt),Yt.forEach(t),nco=i(js),Ah=n(js,"DIV",{class:!0});var $Ne=s(Ah);T(CA.$$.fragment,$Ne),sco=i($Ne),Oae=n($Ne,"P",{});var AHr=s(Oae);lco=r(AHr,"Register a new feature extractor for this class."),AHr.forEach(t),$Ne.forEach(t),js.forEach(t),xIe=i(f),Ti=n(f,"H2",{class:!0});var kNe=s(Ti);yh=n(kNe,"A",{id:!0,class:!0,href:!0});var yHr=s(yh);Vae=n(yHr,"SPAN",{});var LHr=s(Vae);T(wA.$$.fragment,LHr),LHr.forEach(t),yHr.forEach(t),ico=i(kNe),Xae=n(kNe,"SPAN",{});var xHr=s(Xae);dco=r(xHr,"AutoProcessor"),xHr.forEach(t),kNe.forEach(t),$Ie=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(AA.$$.fragment,Ds),cco=i(Ds),yA=n(Ds,"P",{});var SNe=s(yA);fco=r(SNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BP=n(SNe,"A",{href:!0});var $Hr=s(BP);mco=r($Hr,"AutoProcessor.from_pretrained()"),$Hr.forEach(t),gco=r(SNe," class method."),SNe.forEach(t),hco=i(Ds),LA=n(Ds,"P",{});var RNe=s(LA);pco=r(RNe,"This class cannot be instantiated directly using "),zae=n(RNe,"CODE",{});var kHr=s(zae);uco=r(kHr,"__init__()"),kHr.forEach(t),_co=r(RNe," (throws an error)."),RNe.forEach(t),bco=i(Ds),We=n(Ds,"DIV",{class:!0});var Kt=s(We);T(xA.$$.fragment,Kt),vco=i(Kt),Qae=n(Kt,"P",{});var SHr=s(Qae);Fco=r(SHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),SHr.forEach(t),Tco=i(Kt),Mi=n(Kt,"P",{});var CK=s(Mi);Mco=r(CK,"The processor class to instantiate is selected based on the "),Wae=n(CK,"CODE",{});var RHr=s(Wae);Eco=r(RHr,"model_type"),RHr.forEach(t),Cco=r(CK,` property of the config object (either
passed as an argument or loaded from `),Hae=n(CK,"CODE",{});var BHr=s(Hae);wco=r(BHr,"pretrained_model_name_or_path"),BHr.forEach(t),Aco=r(CK," if possible):"),CK.forEach(t),yco=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Lh=n(ve,"LI",{});var KCe=s(Lh);Uae=n(KCe,"STRONG",{});var PHr=s(Uae);Lco=r(PHr,"clip"),PHr.forEach(t),xco=r(KCe," \u2014 "),PP=n(KCe,"A",{href:!0});var IHr=s(PP);$co=r(IHr,"CLIPProcessor"),IHr.forEach(t),kco=r(KCe," (CLIP model)"),KCe.forEach(t),Sco=i(ve),xh=n(ve,"LI",{});var ZCe=s(xh);Jae=n(ZCe,"STRONG",{});var qHr=s(Jae);Rco=r(qHr,"flava"),qHr.forEach(t),Bco=r(ZCe," \u2014 "),Yae=n(ZCe,"CODE",{});var NHr=s(Yae);Pco=r(NHr,"FLAVAProcessor"),NHr.forEach(t),Ico=r(ZCe," (Flava model)"),ZCe.forEach(t),qco=i(ve),$h=n(ve,"LI",{});var e3e=s($h);Kae=n(e3e,"STRONG",{});var jHr=s(Kae);Nco=r(jHr,"layoutlmv2"),jHr.forEach(t),jco=r(e3e," \u2014 "),IP=n(e3e,"A",{href:!0});var DHr=s(IP);Dco=r(DHr,"LayoutLMv2Processor"),DHr.forEach(t),Gco=r(e3e," (LayoutLMv2 model)"),e3e.forEach(t),Oco=i(ve),kh=n(ve,"LI",{});var o3e=s(kh);Zae=n(o3e,"STRONG",{});var GHr=s(Zae);Vco=r(GHr,"layoutxlm"),GHr.forEach(t),Xco=r(o3e," \u2014 "),qP=n(o3e,"A",{href:!0});var OHr=s(qP);zco=r(OHr,"LayoutXLMProcessor"),OHr.forEach(t),Qco=r(o3e," (LayoutXLM model)"),o3e.forEach(t),Wco=i(ve),Sh=n(ve,"LI",{});var r3e=s(Sh);ene=n(r3e,"STRONG",{});var VHr=s(ene);Hco=r(VHr,"sew"),VHr.forEach(t),Uco=r(r3e," \u2014 "),NP=n(r3e,"A",{href:!0});var XHr=s(NP);Jco=r(XHr,"Wav2Vec2Processor"),XHr.forEach(t),Yco=r(r3e," (SEW model)"),r3e.forEach(t),Kco=i(ve),Rh=n(ve,"LI",{});var t3e=s(Rh);one=n(t3e,"STRONG",{});var zHr=s(one);Zco=r(zHr,"sew-d"),zHr.forEach(t),efo=r(t3e," \u2014 "),jP=n(t3e,"A",{href:!0});var QHr=s(jP);ofo=r(QHr,"Wav2Vec2Processor"),QHr.forEach(t),rfo=r(t3e," (SEW-D model)"),t3e.forEach(t),tfo=i(ve),Bh=n(ve,"LI",{});var a3e=s(Bh);rne=n(a3e,"STRONG",{});var WHr=s(rne);afo=r(WHr,"speech_to_text"),WHr.forEach(t),nfo=r(a3e," \u2014 "),DP=n(a3e,"A",{href:!0});var HHr=s(DP);sfo=r(HHr,"Speech2TextProcessor"),HHr.forEach(t),lfo=r(a3e," (Speech2Text model)"),a3e.forEach(t),ifo=i(ve),Ph=n(ve,"LI",{});var n3e=s(Ph);tne=n(n3e,"STRONG",{});var UHr=s(tne);dfo=r(UHr,"speech_to_text_2"),UHr.forEach(t),cfo=r(n3e," \u2014 "),GP=n(n3e,"A",{href:!0});var JHr=s(GP);ffo=r(JHr,"Speech2Text2Processor"),JHr.forEach(t),mfo=r(n3e," (Speech2Text2 model)"),n3e.forEach(t),gfo=i(ve),Ih=n(ve,"LI",{});var s3e=s(Ih);ane=n(s3e,"STRONG",{});var YHr=s(ane);hfo=r(YHr,"trocr"),YHr.forEach(t),pfo=r(s3e," \u2014 "),OP=n(s3e,"A",{href:!0});var KHr=s(OP);ufo=r(KHr,"TrOCRProcessor"),KHr.forEach(t),_fo=r(s3e," (TrOCR model)"),s3e.forEach(t),bfo=i(ve),qh=n(ve,"LI",{});var l3e=s(qh);nne=n(l3e,"STRONG",{});var ZHr=s(nne);vfo=r(ZHr,"unispeech"),ZHr.forEach(t),Ffo=r(l3e," \u2014 "),VP=n(l3e,"A",{href:!0});var eUr=s(VP);Tfo=r(eUr,"Wav2Vec2Processor"),eUr.forEach(t),Mfo=r(l3e," (UniSpeech model)"),l3e.forEach(t),Efo=i(ve),Nh=n(ve,"LI",{});var i3e=s(Nh);sne=n(i3e,"STRONG",{});var oUr=s(sne);Cfo=r(oUr,"unispeech-sat"),oUr.forEach(t),wfo=r(i3e," \u2014 "),XP=n(i3e,"A",{href:!0});var rUr=s(XP);Afo=r(rUr,"Wav2Vec2Processor"),rUr.forEach(t),yfo=r(i3e," (UniSpeechSat model)"),i3e.forEach(t),Lfo=i(ve),jh=n(ve,"LI",{});var d3e=s(jh);lne=n(d3e,"STRONG",{});var tUr=s(lne);xfo=r(tUr,"vilt"),tUr.forEach(t),$fo=r(d3e," \u2014 "),zP=n(d3e,"A",{href:!0});var aUr=s(zP);kfo=r(aUr,"ViltProcessor"),aUr.forEach(t),Sfo=r(d3e," (ViLT model)"),d3e.forEach(t),Rfo=i(ve),Dh=n(ve,"LI",{});var c3e=s(Dh);ine=n(c3e,"STRONG",{});var nUr=s(ine);Bfo=r(nUr,"vision-text-dual-encoder"),nUr.forEach(t),Pfo=r(c3e," \u2014 "),QP=n(c3e,"A",{href:!0});var sUr=s(QP);Ifo=r(sUr,"VisionTextDualEncoderProcessor"),sUr.forEach(t),qfo=r(c3e," (VisionTextDualEncoder model)"),c3e.forEach(t),Nfo=i(ve),Gh=n(ve,"LI",{});var f3e=s(Gh);dne=n(f3e,"STRONG",{});var lUr=s(dne);jfo=r(lUr,"wav2vec2"),lUr.forEach(t),Dfo=r(f3e," \u2014 "),WP=n(f3e,"A",{href:!0});var iUr=s(WP);Gfo=r(iUr,"Wav2Vec2Processor"),iUr.forEach(t),Ofo=r(f3e," (Wav2Vec2 model)"),f3e.forEach(t),Vfo=i(ve),Oh=n(ve,"LI",{});var m3e=s(Oh);cne=n(m3e,"STRONG",{});var dUr=s(cne);Xfo=r(dUr,"wavlm"),dUr.forEach(t),zfo=r(m3e," \u2014 "),HP=n(m3e,"A",{href:!0});var cUr=s(HP);Qfo=r(cUr,"Wav2Vec2Processor"),cUr.forEach(t),Wfo=r(m3e," (WavLM model)"),m3e.forEach(t),ve.forEach(t),Hfo=i(Kt),T(Vh.$$.fragment,Kt),Ufo=i(Kt),T(Xh.$$.fragment,Kt),Kt.forEach(t),Jfo=i(Ds),zh=n(Ds,"DIV",{class:!0});var BNe=s(zh);T($A.$$.fragment,BNe),Yfo=i(BNe),fne=n(BNe,"P",{});var fUr=s(fne);Kfo=r(fUr,"Register a new processor for this class."),fUr.forEach(t),BNe.forEach(t),Ds.forEach(t),kIe=i(f),Ei=n(f,"H2",{class:!0});var PNe=s(Ei);Qh=n(PNe,"A",{id:!0,class:!0,href:!0});var mUr=s(Qh);mne=n(mUr,"SPAN",{});var gUr=s(mne);T(kA.$$.fragment,gUr),gUr.forEach(t),mUr.forEach(t),Zfo=i(PNe),gne=n(PNe,"SPAN",{});var hUr=s(gne);emo=r(hUr,"AutoModel"),hUr.forEach(t),PNe.forEach(t),SIe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(SA.$$.fragment,Gs),omo=i(Gs),Ci=n(Gs,"P",{});var wK=s(Ci);rmo=r(wK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UP=n(wK,"A",{href:!0});var pUr=s(UP);tmo=r(pUr,"from_pretrained()"),pUr.forEach(t),amo=r(wK," class method or the "),JP=n(wK,"A",{href:!0});var uUr=s(JP);nmo=r(uUr,"from_config()"),uUr.forEach(t),smo=r(wK,` class
method.`),wK.forEach(t),lmo=i(Gs),RA=n(Gs,"P",{});var INe=s(RA);imo=r(INe,"This class cannot be instantiated directly using "),hne=n(INe,"CODE",{});var _Ur=s(hne);dmo=r(_Ur,"__init__()"),_Ur.forEach(t),cmo=r(INe," (throws an error)."),INe.forEach(t),fmo=i(Gs),ot=n(Gs,"DIV",{class:!0});var l3=s(ot);T(BA.$$.fragment,l3),mmo=i(l3),pne=n(l3,"P",{});var bUr=s(pne);gmo=r(bUr,"Instantiates one of the base model classes of the library from a configuration."),bUr.forEach(t),hmo=i(l3),wi=n(l3,"P",{});var AK=s(wi);pmo=r(AK,`Note:
Loading a model from its configuration file does `),une=n(AK,"STRONG",{});var vUr=s(une);umo=r(vUr,"not"),vUr.forEach(t),_mo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=n(AK,"A",{href:!0});var FUr=s(YP);bmo=r(FUr,"from_pretrained()"),FUr.forEach(t),vmo=r(AK," to load the model weights."),AK.forEach(t),Fmo=i(l3),T(Wh.$$.fragment,l3),l3.forEach(t),Tmo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(PA.$$.fragment,Zt),Mmo=i(Zt),_ne=n(Zt,"P",{});var TUr=s(_ne);Emo=r(TUr,"Instantiate one of the base model classes of the library from a pretrained model."),TUr.forEach(t),Cmo=i(Zt),Aa=n(Zt,"P",{});var i3=s(Aa);wmo=r(i3,"The model class to instantiate is selected based on the "),bne=n(i3,"CODE",{});var MUr=s(bne);Amo=r(MUr,"model_type"),MUr.forEach(t),ymo=r(i3,` property of the config object (either
passed as an argument or loaded from `),vne=n(i3,"CODE",{});var EUr=s(vne);Lmo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),xmo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fne=n(i3,"CODE",{});var CUr=s(Fne);$mo=r(CUr,"pretrained_model_name_or_path"),CUr.forEach(t),kmo=r(i3,":"),i3.forEach(t),Smo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Hh=n($,"LI",{});var g3e=s(Hh);Tne=n(g3e,"STRONG",{});var wUr=s(Tne);Rmo=r(wUr,"albert"),wUr.forEach(t),Bmo=r(g3e," \u2014 "),KP=n(g3e,"A",{href:!0});var AUr=s(KP);Pmo=r(AUr,"AlbertModel"),AUr.forEach(t),Imo=r(g3e," (ALBERT model)"),g3e.forEach(t),qmo=i($),Uh=n($,"LI",{});var h3e=s(Uh);Mne=n(h3e,"STRONG",{});var yUr=s(Mne);Nmo=r(yUr,"bart"),yUr.forEach(t),jmo=r(h3e," \u2014 "),ZP=n(h3e,"A",{href:!0});var LUr=s(ZP);Dmo=r(LUr,"BartModel"),LUr.forEach(t),Gmo=r(h3e," (BART model)"),h3e.forEach(t),Omo=i($),Jh=n($,"LI",{});var p3e=s(Jh);Ene=n(p3e,"STRONG",{});var xUr=s(Ene);Vmo=r(xUr,"beit"),xUr.forEach(t),Xmo=r(p3e," \u2014 "),eI=n(p3e,"A",{href:!0});var $Ur=s(eI);zmo=r($Ur,"BeitModel"),$Ur.forEach(t),Qmo=r(p3e," (BEiT model)"),p3e.forEach(t),Wmo=i($),Yh=n($,"LI",{});var u3e=s(Yh);Cne=n(u3e,"STRONG",{});var kUr=s(Cne);Hmo=r(kUr,"bert"),kUr.forEach(t),Umo=r(u3e," \u2014 "),oI=n(u3e,"A",{href:!0});var SUr=s(oI);Jmo=r(SUr,"BertModel"),SUr.forEach(t),Ymo=r(u3e," (BERT model)"),u3e.forEach(t),Kmo=i($),Kh=n($,"LI",{});var _3e=s(Kh);wne=n(_3e,"STRONG",{});var RUr=s(wne);Zmo=r(RUr,"bert-generation"),RUr.forEach(t),ego=r(_3e," \u2014 "),rI=n(_3e,"A",{href:!0});var BUr=s(rI);ogo=r(BUr,"BertGenerationEncoder"),BUr.forEach(t),rgo=r(_3e," (Bert Generation model)"),_3e.forEach(t),tgo=i($),Zh=n($,"LI",{});var b3e=s(Zh);Ane=n(b3e,"STRONG",{});var PUr=s(Ane);ago=r(PUr,"big_bird"),PUr.forEach(t),ngo=r(b3e," \u2014 "),tI=n(b3e,"A",{href:!0});var IUr=s(tI);sgo=r(IUr,"BigBirdModel"),IUr.forEach(t),lgo=r(b3e," (BigBird model)"),b3e.forEach(t),igo=i($),ep=n($,"LI",{});var v3e=s(ep);yne=n(v3e,"STRONG",{});var qUr=s(yne);dgo=r(qUr,"bigbird_pegasus"),qUr.forEach(t),cgo=r(v3e," \u2014 "),aI=n(v3e,"A",{href:!0});var NUr=s(aI);fgo=r(NUr,"BigBirdPegasusModel"),NUr.forEach(t),mgo=r(v3e," (BigBirdPegasus model)"),v3e.forEach(t),ggo=i($),op=n($,"LI",{});var F3e=s(op);Lne=n(F3e,"STRONG",{});var jUr=s(Lne);hgo=r(jUr,"blenderbot"),jUr.forEach(t),pgo=r(F3e," \u2014 "),nI=n(F3e,"A",{href:!0});var DUr=s(nI);ugo=r(DUr,"BlenderbotModel"),DUr.forEach(t),_go=r(F3e," (Blenderbot model)"),F3e.forEach(t),bgo=i($),rp=n($,"LI",{});var T3e=s(rp);xne=n(T3e,"STRONG",{});var GUr=s(xne);vgo=r(GUr,"blenderbot-small"),GUr.forEach(t),Fgo=r(T3e," \u2014 "),sI=n(T3e,"A",{href:!0});var OUr=s(sI);Tgo=r(OUr,"BlenderbotSmallModel"),OUr.forEach(t),Mgo=r(T3e," (BlenderbotSmall model)"),T3e.forEach(t),Ego=i($),tp=n($,"LI",{});var M3e=s(tp);$ne=n(M3e,"STRONG",{});var VUr=s($ne);Cgo=r(VUr,"camembert"),VUr.forEach(t),wgo=r(M3e," \u2014 "),lI=n(M3e,"A",{href:!0});var XUr=s(lI);Ago=r(XUr,"CamembertModel"),XUr.forEach(t),ygo=r(M3e," (CamemBERT model)"),M3e.forEach(t),Lgo=i($),ap=n($,"LI",{});var E3e=s(ap);kne=n(E3e,"STRONG",{});var zUr=s(kne);xgo=r(zUr,"canine"),zUr.forEach(t),$go=r(E3e," \u2014 "),iI=n(E3e,"A",{href:!0});var QUr=s(iI);kgo=r(QUr,"CanineModel"),QUr.forEach(t),Sgo=r(E3e," (Canine model)"),E3e.forEach(t),Rgo=i($),np=n($,"LI",{});var C3e=s(np);Sne=n(C3e,"STRONG",{});var WUr=s(Sne);Bgo=r(WUr,"clip"),WUr.forEach(t),Pgo=r(C3e," \u2014 "),dI=n(C3e,"A",{href:!0});var HUr=s(dI);Igo=r(HUr,"CLIPModel"),HUr.forEach(t),qgo=r(C3e," (CLIP model)"),C3e.forEach(t),Ngo=i($),sp=n($,"LI",{});var w3e=s(sp);Rne=n(w3e,"STRONG",{});var UUr=s(Rne);jgo=r(UUr,"convbert"),UUr.forEach(t),Dgo=r(w3e," \u2014 "),cI=n(w3e,"A",{href:!0});var JUr=s(cI);Ggo=r(JUr,"ConvBertModel"),JUr.forEach(t),Ogo=r(w3e," (ConvBERT model)"),w3e.forEach(t),Vgo=i($),lp=n($,"LI",{});var A3e=s(lp);Bne=n(A3e,"STRONG",{});var YUr=s(Bne);Xgo=r(YUr,"convnext"),YUr.forEach(t),zgo=r(A3e," \u2014 "),fI=n(A3e,"A",{href:!0});var KUr=s(fI);Qgo=r(KUr,"ConvNextModel"),KUr.forEach(t),Wgo=r(A3e," (ConvNext model)"),A3e.forEach(t),Hgo=i($),ip=n($,"LI",{});var y3e=s(ip);Pne=n(y3e,"STRONG",{});var ZUr=s(Pne);Ugo=r(ZUr,"ctrl"),ZUr.forEach(t),Jgo=r(y3e," \u2014 "),mI=n(y3e,"A",{href:!0});var eJr=s(mI);Ygo=r(eJr,"CTRLModel"),eJr.forEach(t),Kgo=r(y3e," (CTRL model)"),y3e.forEach(t),Zgo=i($),dp=n($,"LI",{});var L3e=s(dp);Ine=n(L3e,"STRONG",{});var oJr=s(Ine);eho=r(oJr,"data2vec-audio"),oJr.forEach(t),oho=r(L3e," \u2014 "),gI=n(L3e,"A",{href:!0});var rJr=s(gI);rho=r(rJr,"Data2VecAudioModel"),rJr.forEach(t),tho=r(L3e," (Data2VecAudio model)"),L3e.forEach(t),aho=i($),cp=n($,"LI",{});var x3e=s(cp);qne=n(x3e,"STRONG",{});var tJr=s(qne);nho=r(tJr,"data2vec-text"),tJr.forEach(t),sho=r(x3e," \u2014 "),hI=n(x3e,"A",{href:!0});var aJr=s(hI);lho=r(aJr,"Data2VecTextModel"),aJr.forEach(t),iho=r(x3e," (Data2VecText model)"),x3e.forEach(t),dho=i($),fp=n($,"LI",{});var $3e=s(fp);Nne=n($3e,"STRONG",{});var nJr=s(Nne);cho=r(nJr,"data2vec-vision"),nJr.forEach(t),fho=r($3e," \u2014 "),pI=n($3e,"A",{href:!0});var sJr=s(pI);mho=r(sJr,"Data2VecVisionModel"),sJr.forEach(t),gho=r($3e," (Data2VecVision model)"),$3e.forEach(t),hho=i($),mp=n($,"LI",{});var k3e=s(mp);jne=n(k3e,"STRONG",{});var lJr=s(jne);pho=r(lJr,"deberta"),lJr.forEach(t),uho=r(k3e," \u2014 "),uI=n(k3e,"A",{href:!0});var iJr=s(uI);_ho=r(iJr,"DebertaModel"),iJr.forEach(t),bho=r(k3e," (DeBERTa model)"),k3e.forEach(t),vho=i($),gp=n($,"LI",{});var S3e=s(gp);Dne=n(S3e,"STRONG",{});var dJr=s(Dne);Fho=r(dJr,"deberta-v2"),dJr.forEach(t),Tho=r(S3e," \u2014 "),_I=n(S3e,"A",{href:!0});var cJr=s(_I);Mho=r(cJr,"DebertaV2Model"),cJr.forEach(t),Eho=r(S3e," (DeBERTa-v2 model)"),S3e.forEach(t),Cho=i($),hp=n($,"LI",{});var R3e=s(hp);Gne=n(R3e,"STRONG",{});var fJr=s(Gne);who=r(fJr,"decision_transformer"),fJr.forEach(t),Aho=r(R3e," \u2014 "),bI=n(R3e,"A",{href:!0});var mJr=s(bI);yho=r(mJr,"DecisionTransformerModel"),mJr.forEach(t),Lho=r(R3e," (Decision Transformer model)"),R3e.forEach(t),xho=i($),pp=n($,"LI",{});var B3e=s(pp);One=n(B3e,"STRONG",{});var gJr=s(One);$ho=r(gJr,"deit"),gJr.forEach(t),kho=r(B3e," \u2014 "),vI=n(B3e,"A",{href:!0});var hJr=s(vI);Sho=r(hJr,"DeiTModel"),hJr.forEach(t),Rho=r(B3e," (DeiT model)"),B3e.forEach(t),Bho=i($),up=n($,"LI",{});var P3e=s(up);Vne=n(P3e,"STRONG",{});var pJr=s(Vne);Pho=r(pJr,"detr"),pJr.forEach(t),Iho=r(P3e," \u2014 "),FI=n(P3e,"A",{href:!0});var uJr=s(FI);qho=r(uJr,"DetrModel"),uJr.forEach(t),Nho=r(P3e," (DETR model)"),P3e.forEach(t),jho=i($),_p=n($,"LI",{});var I3e=s(_p);Xne=n(I3e,"STRONG",{});var _Jr=s(Xne);Dho=r(_Jr,"distilbert"),_Jr.forEach(t),Gho=r(I3e," \u2014 "),TI=n(I3e,"A",{href:!0});var bJr=s(TI);Oho=r(bJr,"DistilBertModel"),bJr.forEach(t),Vho=r(I3e," (DistilBERT model)"),I3e.forEach(t),Xho=i($),bp=n($,"LI",{});var q3e=s(bp);zne=n(q3e,"STRONG",{});var vJr=s(zne);zho=r(vJr,"dpr"),vJr.forEach(t),Qho=r(q3e," \u2014 "),MI=n(q3e,"A",{href:!0});var FJr=s(MI);Who=r(FJr,"DPRQuestionEncoder"),FJr.forEach(t),Hho=r(q3e," (DPR model)"),q3e.forEach(t),Uho=i($),vp=n($,"LI",{});var N3e=s(vp);Qne=n(N3e,"STRONG",{});var TJr=s(Qne);Jho=r(TJr,"dpt"),TJr.forEach(t),Yho=r(N3e," \u2014 "),EI=n(N3e,"A",{href:!0});var MJr=s(EI);Kho=r(MJr,"DPTModel"),MJr.forEach(t),Zho=r(N3e," (DPT model)"),N3e.forEach(t),epo=i($),Fp=n($,"LI",{});var j3e=s(Fp);Wne=n(j3e,"STRONG",{});var EJr=s(Wne);opo=r(EJr,"electra"),EJr.forEach(t),rpo=r(j3e," \u2014 "),CI=n(j3e,"A",{href:!0});var CJr=s(CI);tpo=r(CJr,"ElectraModel"),CJr.forEach(t),apo=r(j3e," (ELECTRA model)"),j3e.forEach(t),npo=i($),Tp=n($,"LI",{});var D3e=s(Tp);Hne=n(D3e,"STRONG",{});var wJr=s(Hne);spo=r(wJr,"flaubert"),wJr.forEach(t),lpo=r(D3e," \u2014 "),wI=n(D3e,"A",{href:!0});var AJr=s(wI);ipo=r(AJr,"FlaubertModel"),AJr.forEach(t),dpo=r(D3e," (FlauBERT model)"),D3e.forEach(t),cpo=i($),Mp=n($,"LI",{});var G3e=s(Mp);Une=n(G3e,"STRONG",{});var yJr=s(Une);fpo=r(yJr,"flava"),yJr.forEach(t),mpo=r(G3e," \u2014 "),AI=n(G3e,"A",{href:!0});var LJr=s(AI);gpo=r(LJr,"FlavaModel"),LJr.forEach(t),hpo=r(G3e," (Flava model)"),G3e.forEach(t),ppo=i($),Ep=n($,"LI",{});var O3e=s(Ep);Jne=n(O3e,"STRONG",{});var xJr=s(Jne);upo=r(xJr,"fnet"),xJr.forEach(t),_po=r(O3e," \u2014 "),yI=n(O3e,"A",{href:!0});var $Jr=s(yI);bpo=r($Jr,"FNetModel"),$Jr.forEach(t),vpo=r(O3e," (FNet model)"),O3e.forEach(t),Fpo=i($),Cp=n($,"LI",{});var V3e=s(Cp);Yne=n(V3e,"STRONG",{});var kJr=s(Yne);Tpo=r(kJr,"fsmt"),kJr.forEach(t),Mpo=r(V3e," \u2014 "),LI=n(V3e,"A",{href:!0});var SJr=s(LI);Epo=r(SJr,"FSMTModel"),SJr.forEach(t),Cpo=r(V3e," (FairSeq Machine-Translation model)"),V3e.forEach(t),wpo=i($),Bs=n($,"LI",{});var F$=s(Bs);Kne=n(F$,"STRONG",{});var RJr=s(Kne);Apo=r(RJr,"funnel"),RJr.forEach(t),ypo=r(F$," \u2014 "),xI=n(F$,"A",{href:!0});var BJr=s(xI);Lpo=r(BJr,"FunnelModel"),BJr.forEach(t),xpo=r(F$," or "),$I=n(F$,"A",{href:!0});var PJr=s($I);$po=r(PJr,"FunnelBaseModel"),PJr.forEach(t),kpo=r(F$," (Funnel Transformer model)"),F$.forEach(t),Spo=i($),wp=n($,"LI",{});var X3e=s(wp);Zne=n(X3e,"STRONG",{});var IJr=s(Zne);Rpo=r(IJr,"glpn"),IJr.forEach(t),Bpo=r(X3e," \u2014 "),kI=n(X3e,"A",{href:!0});var qJr=s(kI);Ppo=r(qJr,"GLPNModel"),qJr.forEach(t),Ipo=r(X3e," (GLPN model)"),X3e.forEach(t),qpo=i($),Ap=n($,"LI",{});var z3e=s(Ap);ese=n(z3e,"STRONG",{});var NJr=s(ese);Npo=r(NJr,"gpt2"),NJr.forEach(t),jpo=r(z3e," \u2014 "),SI=n(z3e,"A",{href:!0});var jJr=s(SI);Dpo=r(jJr,"GPT2Model"),jJr.forEach(t),Gpo=r(z3e," (OpenAI GPT-2 model)"),z3e.forEach(t),Opo=i($),yp=n($,"LI",{});var Q3e=s(yp);ose=n(Q3e,"STRONG",{});var DJr=s(ose);Vpo=r(DJr,"gpt_neo"),DJr.forEach(t),Xpo=r(Q3e," \u2014 "),RI=n(Q3e,"A",{href:!0});var GJr=s(RI);zpo=r(GJr,"GPTNeoModel"),GJr.forEach(t),Qpo=r(Q3e," (GPT Neo model)"),Q3e.forEach(t),Wpo=i($),Lp=n($,"LI",{});var W3e=s(Lp);rse=n(W3e,"STRONG",{});var OJr=s(rse);Hpo=r(OJr,"gptj"),OJr.forEach(t),Upo=r(W3e," \u2014 "),BI=n(W3e,"A",{href:!0});var VJr=s(BI);Jpo=r(VJr,"GPTJModel"),VJr.forEach(t),Ypo=r(W3e," (GPT-J model)"),W3e.forEach(t),Kpo=i($),xp=n($,"LI",{});var H3e=s(xp);tse=n(H3e,"STRONG",{});var XJr=s(tse);Zpo=r(XJr,"hubert"),XJr.forEach(t),euo=r(H3e," \u2014 "),PI=n(H3e,"A",{href:!0});var zJr=s(PI);ouo=r(zJr,"HubertModel"),zJr.forEach(t),ruo=r(H3e," (Hubert model)"),H3e.forEach(t),tuo=i($),$p=n($,"LI",{});var U3e=s($p);ase=n(U3e,"STRONG",{});var QJr=s(ase);auo=r(QJr,"ibert"),QJr.forEach(t),nuo=r(U3e," \u2014 "),II=n(U3e,"A",{href:!0});var WJr=s(II);suo=r(WJr,"IBertModel"),WJr.forEach(t),luo=r(U3e," (I-BERT model)"),U3e.forEach(t),iuo=i($),kp=n($,"LI",{});var J3e=s(kp);nse=n(J3e,"STRONG",{});var HJr=s(nse);duo=r(HJr,"imagegpt"),HJr.forEach(t),cuo=r(J3e," \u2014 "),qI=n(J3e,"A",{href:!0});var UJr=s(qI);fuo=r(UJr,"ImageGPTModel"),UJr.forEach(t),muo=r(J3e," (ImageGPT model)"),J3e.forEach(t),guo=i($),Sp=n($,"LI",{});var Y3e=s(Sp);sse=n(Y3e,"STRONG",{});var JJr=s(sse);huo=r(JJr,"layoutlm"),JJr.forEach(t),puo=r(Y3e," \u2014 "),NI=n(Y3e,"A",{href:!0});var YJr=s(NI);uuo=r(YJr,"LayoutLMModel"),YJr.forEach(t),_uo=r(Y3e," (LayoutLM model)"),Y3e.forEach(t),buo=i($),Rp=n($,"LI",{});var K3e=s(Rp);lse=n(K3e,"STRONG",{});var KJr=s(lse);vuo=r(KJr,"layoutlmv2"),KJr.forEach(t),Fuo=r(K3e," \u2014 "),jI=n(K3e,"A",{href:!0});var ZJr=s(jI);Tuo=r(ZJr,"LayoutLMv2Model"),ZJr.forEach(t),Muo=r(K3e," (LayoutLMv2 model)"),K3e.forEach(t),Euo=i($),Bp=n($,"LI",{});var Z3e=s(Bp);ise=n(Z3e,"STRONG",{});var eYr=s(ise);Cuo=r(eYr,"led"),eYr.forEach(t),wuo=r(Z3e," \u2014 "),DI=n(Z3e,"A",{href:!0});var oYr=s(DI);Auo=r(oYr,"LEDModel"),oYr.forEach(t),yuo=r(Z3e," (LED model)"),Z3e.forEach(t),Luo=i($),Pp=n($,"LI",{});var ewe=s(Pp);dse=n(ewe,"STRONG",{});var rYr=s(dse);xuo=r(rYr,"longformer"),rYr.forEach(t),$uo=r(ewe," \u2014 "),GI=n(ewe,"A",{href:!0});var tYr=s(GI);kuo=r(tYr,"LongformerModel"),tYr.forEach(t),Suo=r(ewe," (Longformer model)"),ewe.forEach(t),Ruo=i($),Ip=n($,"LI",{});var owe=s(Ip);cse=n(owe,"STRONG",{});var aYr=s(cse);Buo=r(aYr,"longt5"),aYr.forEach(t),Puo=r(owe," \u2014 "),OI=n(owe,"A",{href:!0});var nYr=s(OI);Iuo=r(nYr,"LongT5Model"),nYr.forEach(t),quo=r(owe," (LongT5 model)"),owe.forEach(t),Nuo=i($),qp=n($,"LI",{});var rwe=s(qp);fse=n(rwe,"STRONG",{});var sYr=s(fse);juo=r(sYr,"luke"),sYr.forEach(t),Duo=r(rwe," \u2014 "),VI=n(rwe,"A",{href:!0});var lYr=s(VI);Guo=r(lYr,"LukeModel"),lYr.forEach(t),Ouo=r(rwe," (LUKE model)"),rwe.forEach(t),Vuo=i($),Np=n($,"LI",{});var twe=s(Np);mse=n(twe,"STRONG",{});var iYr=s(mse);Xuo=r(iYr,"lxmert"),iYr.forEach(t),zuo=r(twe," \u2014 "),XI=n(twe,"A",{href:!0});var dYr=s(XI);Quo=r(dYr,"LxmertModel"),dYr.forEach(t),Wuo=r(twe," (LXMERT model)"),twe.forEach(t),Huo=i($),jp=n($,"LI",{});var awe=s(jp);gse=n(awe,"STRONG",{});var cYr=s(gse);Uuo=r(cYr,"m2m_100"),cYr.forEach(t),Juo=r(awe," \u2014 "),zI=n(awe,"A",{href:!0});var fYr=s(zI);Yuo=r(fYr,"M2M100Model"),fYr.forEach(t),Kuo=r(awe," (M2M100 model)"),awe.forEach(t),Zuo=i($),Dp=n($,"LI",{});var nwe=s(Dp);hse=n(nwe,"STRONG",{});var mYr=s(hse);e_o=r(mYr,"marian"),mYr.forEach(t),o_o=r(nwe," \u2014 "),QI=n(nwe,"A",{href:!0});var gYr=s(QI);r_o=r(gYr,"MarianModel"),gYr.forEach(t),t_o=r(nwe," (Marian model)"),nwe.forEach(t),a_o=i($),Gp=n($,"LI",{});var swe=s(Gp);pse=n(swe,"STRONG",{});var hYr=s(pse);n_o=r(hYr,"maskformer"),hYr.forEach(t),s_o=r(swe," \u2014 "),WI=n(swe,"A",{href:!0});var pYr=s(WI);l_o=r(pYr,"MaskFormerModel"),pYr.forEach(t),i_o=r(swe," (MaskFormer model)"),swe.forEach(t),d_o=i($),Op=n($,"LI",{});var lwe=s(Op);use=n(lwe,"STRONG",{});var uYr=s(use);c_o=r(uYr,"mbart"),uYr.forEach(t),f_o=r(lwe," \u2014 "),HI=n(lwe,"A",{href:!0});var _Yr=s(HI);m_o=r(_Yr,"MBartModel"),_Yr.forEach(t),g_o=r(lwe," (mBART model)"),lwe.forEach(t),h_o=i($),Vp=n($,"LI",{});var iwe=s(Vp);_se=n(iwe,"STRONG",{});var bYr=s(_se);p_o=r(bYr,"megatron-bert"),bYr.forEach(t),u_o=r(iwe," \u2014 "),UI=n(iwe,"A",{href:!0});var vYr=s(UI);__o=r(vYr,"MegatronBertModel"),vYr.forEach(t),b_o=r(iwe," (MegatronBert model)"),iwe.forEach(t),v_o=i($),Xp=n($,"LI",{});var dwe=s(Xp);bse=n(dwe,"STRONG",{});var FYr=s(bse);F_o=r(FYr,"mobilebert"),FYr.forEach(t),T_o=r(dwe," \u2014 "),JI=n(dwe,"A",{href:!0});var TYr=s(JI);M_o=r(TYr,"MobileBertModel"),TYr.forEach(t),E_o=r(dwe," (MobileBERT model)"),dwe.forEach(t),C_o=i($),zp=n($,"LI",{});var cwe=s(zp);vse=n(cwe,"STRONG",{});var MYr=s(vse);w_o=r(MYr,"mpnet"),MYr.forEach(t),A_o=r(cwe," \u2014 "),YI=n(cwe,"A",{href:!0});var EYr=s(YI);y_o=r(EYr,"MPNetModel"),EYr.forEach(t),L_o=r(cwe," (MPNet model)"),cwe.forEach(t),x_o=i($),Qp=n($,"LI",{});var fwe=s(Qp);Fse=n(fwe,"STRONG",{});var CYr=s(Fse);$_o=r(CYr,"mt5"),CYr.forEach(t),k_o=r(fwe," \u2014 "),KI=n(fwe,"A",{href:!0});var wYr=s(KI);S_o=r(wYr,"MT5Model"),wYr.forEach(t),R_o=r(fwe," (mT5 model)"),fwe.forEach(t),B_o=i($),Wp=n($,"LI",{});var mwe=s(Wp);Tse=n(mwe,"STRONG",{});var AYr=s(Tse);P_o=r(AYr,"nystromformer"),AYr.forEach(t),I_o=r(mwe," \u2014 "),ZI=n(mwe,"A",{href:!0});var yYr=s(ZI);q_o=r(yYr,"NystromformerModel"),yYr.forEach(t),N_o=r(mwe," (Nystromformer model)"),mwe.forEach(t),j_o=i($),Hp=n($,"LI",{});var gwe=s(Hp);Mse=n(gwe,"STRONG",{});var LYr=s(Mse);D_o=r(LYr,"openai-gpt"),LYr.forEach(t),G_o=r(gwe," \u2014 "),eq=n(gwe,"A",{href:!0});var xYr=s(eq);O_o=r(xYr,"OpenAIGPTModel"),xYr.forEach(t),V_o=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),X_o=i($),Up=n($,"LI",{});var hwe=s(Up);Ese=n(hwe,"STRONG",{});var $Yr=s(Ese);z_o=r($Yr,"opt"),$Yr.forEach(t),Q_o=r(hwe," \u2014 "),oq=n(hwe,"A",{href:!0});var kYr=s(oq);W_o=r(kYr,"OPTModel"),kYr.forEach(t),H_o=r(hwe," (OPT model)"),hwe.forEach(t),U_o=i($),Jp=n($,"LI",{});var pwe=s(Jp);Cse=n(pwe,"STRONG",{});var SYr=s(Cse);J_o=r(SYr,"pegasus"),SYr.forEach(t),Y_o=r(pwe," \u2014 "),rq=n(pwe,"A",{href:!0});var RYr=s(rq);K_o=r(RYr,"PegasusModel"),RYr.forEach(t),Z_o=r(pwe," (Pegasus model)"),pwe.forEach(t),e2o=i($),Yp=n($,"LI",{});var uwe=s(Yp);wse=n(uwe,"STRONG",{});var BYr=s(wse);o2o=r(BYr,"perceiver"),BYr.forEach(t),r2o=r(uwe," \u2014 "),tq=n(uwe,"A",{href:!0});var PYr=s(tq);t2o=r(PYr,"PerceiverModel"),PYr.forEach(t),a2o=r(uwe," (Perceiver model)"),uwe.forEach(t),n2o=i($),Kp=n($,"LI",{});var _we=s(Kp);Ase=n(_we,"STRONG",{});var IYr=s(Ase);s2o=r(IYr,"plbart"),IYr.forEach(t),l2o=r(_we," \u2014 "),aq=n(_we,"A",{href:!0});var qYr=s(aq);i2o=r(qYr,"PLBartModel"),qYr.forEach(t),d2o=r(_we," (PLBart model)"),_we.forEach(t),c2o=i($),Zp=n($,"LI",{});var bwe=s(Zp);yse=n(bwe,"STRONG",{});var NYr=s(yse);f2o=r(NYr,"poolformer"),NYr.forEach(t),m2o=r(bwe," \u2014 "),nq=n(bwe,"A",{href:!0});var jYr=s(nq);g2o=r(jYr,"PoolFormerModel"),jYr.forEach(t),h2o=r(bwe," (PoolFormer model)"),bwe.forEach(t),p2o=i($),eu=n($,"LI",{});var vwe=s(eu);Lse=n(vwe,"STRONG",{});var DYr=s(Lse);u2o=r(DYr,"prophetnet"),DYr.forEach(t),_2o=r(vwe," \u2014 "),sq=n(vwe,"A",{href:!0});var GYr=s(sq);b2o=r(GYr,"ProphetNetModel"),GYr.forEach(t),v2o=r(vwe," (ProphetNet model)"),vwe.forEach(t),F2o=i($),ou=n($,"LI",{});var Fwe=s(ou);xse=n(Fwe,"STRONG",{});var OYr=s(xse);T2o=r(OYr,"qdqbert"),OYr.forEach(t),M2o=r(Fwe," \u2014 "),lq=n(Fwe,"A",{href:!0});var VYr=s(lq);E2o=r(VYr,"QDQBertModel"),VYr.forEach(t),C2o=r(Fwe," (QDQBert model)"),Fwe.forEach(t),w2o=i($),ru=n($,"LI",{});var Twe=s(ru);$se=n(Twe,"STRONG",{});var XYr=s($se);A2o=r(XYr,"reformer"),XYr.forEach(t),y2o=r(Twe," \u2014 "),iq=n(Twe,"A",{href:!0});var zYr=s(iq);L2o=r(zYr,"ReformerModel"),zYr.forEach(t),x2o=r(Twe," (Reformer model)"),Twe.forEach(t),$2o=i($),tu=n($,"LI",{});var Mwe=s(tu);kse=n(Mwe,"STRONG",{});var QYr=s(kse);k2o=r(QYr,"regnet"),QYr.forEach(t),S2o=r(Mwe," \u2014 "),dq=n(Mwe,"A",{href:!0});var WYr=s(dq);R2o=r(WYr,"RegNetModel"),WYr.forEach(t),B2o=r(Mwe," (RegNet model)"),Mwe.forEach(t),P2o=i($),au=n($,"LI",{});var Ewe=s(au);Sse=n(Ewe,"STRONG",{});var HYr=s(Sse);I2o=r(HYr,"rembert"),HYr.forEach(t),q2o=r(Ewe," \u2014 "),cq=n(Ewe,"A",{href:!0});var UYr=s(cq);N2o=r(UYr,"RemBertModel"),UYr.forEach(t),j2o=r(Ewe," (RemBERT model)"),Ewe.forEach(t),D2o=i($),nu=n($,"LI",{});var Cwe=s(nu);Rse=n(Cwe,"STRONG",{});var JYr=s(Rse);G2o=r(JYr,"resnet"),JYr.forEach(t),O2o=r(Cwe," \u2014 "),fq=n(Cwe,"A",{href:!0});var YYr=s(fq);V2o=r(YYr,"ResNetModel"),YYr.forEach(t),X2o=r(Cwe," (ResNet model)"),Cwe.forEach(t),z2o=i($),su=n($,"LI",{});var wwe=s(su);Bse=n(wwe,"STRONG",{});var KYr=s(Bse);Q2o=r(KYr,"retribert"),KYr.forEach(t),W2o=r(wwe," \u2014 "),mq=n(wwe,"A",{href:!0});var ZYr=s(mq);H2o=r(ZYr,"RetriBertModel"),ZYr.forEach(t),U2o=r(wwe," (RetriBERT model)"),wwe.forEach(t),J2o=i($),lu=n($,"LI",{});var Awe=s(lu);Pse=n(Awe,"STRONG",{});var eKr=s(Pse);Y2o=r(eKr,"roberta"),eKr.forEach(t),K2o=r(Awe," \u2014 "),gq=n(Awe,"A",{href:!0});var oKr=s(gq);Z2o=r(oKr,"RobertaModel"),oKr.forEach(t),e1o=r(Awe," (RoBERTa model)"),Awe.forEach(t),o1o=i($),iu=n($,"LI",{});var ywe=s(iu);Ise=n(ywe,"STRONG",{});var rKr=s(Ise);r1o=r(rKr,"roformer"),rKr.forEach(t),t1o=r(ywe," \u2014 "),hq=n(ywe,"A",{href:!0});var tKr=s(hq);a1o=r(tKr,"RoFormerModel"),tKr.forEach(t),n1o=r(ywe," (RoFormer model)"),ywe.forEach(t),s1o=i($),du=n($,"LI",{});var Lwe=s(du);qse=n(Lwe,"STRONG",{});var aKr=s(qse);l1o=r(aKr,"segformer"),aKr.forEach(t),i1o=r(Lwe," \u2014 "),pq=n(Lwe,"A",{href:!0});var nKr=s(pq);d1o=r(nKr,"SegformerModel"),nKr.forEach(t),c1o=r(Lwe," (SegFormer model)"),Lwe.forEach(t),f1o=i($),cu=n($,"LI",{});var xwe=s(cu);Nse=n(xwe,"STRONG",{});var sKr=s(Nse);m1o=r(sKr,"sew"),sKr.forEach(t),g1o=r(xwe," \u2014 "),uq=n(xwe,"A",{href:!0});var lKr=s(uq);h1o=r(lKr,"SEWModel"),lKr.forEach(t),p1o=r(xwe," (SEW model)"),xwe.forEach(t),u1o=i($),fu=n($,"LI",{});var $we=s(fu);jse=n($we,"STRONG",{});var iKr=s(jse);_1o=r(iKr,"sew-d"),iKr.forEach(t),b1o=r($we," \u2014 "),_q=n($we,"A",{href:!0});var dKr=s(_q);v1o=r(dKr,"SEWDModel"),dKr.forEach(t),F1o=r($we," (SEW-D model)"),$we.forEach(t),T1o=i($),mu=n($,"LI",{});var kwe=s(mu);Dse=n(kwe,"STRONG",{});var cKr=s(Dse);M1o=r(cKr,"speech_to_text"),cKr.forEach(t),E1o=r(kwe," \u2014 "),bq=n(kwe,"A",{href:!0});var fKr=s(bq);C1o=r(fKr,"Speech2TextModel"),fKr.forEach(t),w1o=r(kwe," (Speech2Text model)"),kwe.forEach(t),A1o=i($),gu=n($,"LI",{});var Swe=s(gu);Gse=n(Swe,"STRONG",{});var mKr=s(Gse);y1o=r(mKr,"splinter"),mKr.forEach(t),L1o=r(Swe," \u2014 "),vq=n(Swe,"A",{href:!0});var gKr=s(vq);x1o=r(gKr,"SplinterModel"),gKr.forEach(t),$1o=r(Swe," (Splinter model)"),Swe.forEach(t),k1o=i($),hu=n($,"LI",{});var Rwe=s(hu);Ose=n(Rwe,"STRONG",{});var hKr=s(Ose);S1o=r(hKr,"squeezebert"),hKr.forEach(t),R1o=r(Rwe," \u2014 "),Fq=n(Rwe,"A",{href:!0});var pKr=s(Fq);B1o=r(pKr,"SqueezeBertModel"),pKr.forEach(t),P1o=r(Rwe," (SqueezeBERT model)"),Rwe.forEach(t),I1o=i($),pu=n($,"LI",{});var Bwe=s(pu);Vse=n(Bwe,"STRONG",{});var uKr=s(Vse);q1o=r(uKr,"swin"),uKr.forEach(t),N1o=r(Bwe," \u2014 "),Tq=n(Bwe,"A",{href:!0});var _Kr=s(Tq);j1o=r(_Kr,"SwinModel"),_Kr.forEach(t),D1o=r(Bwe," (Swin model)"),Bwe.forEach(t),G1o=i($),uu=n($,"LI",{});var Pwe=s(uu);Xse=n(Pwe,"STRONG",{});var bKr=s(Xse);O1o=r(bKr,"t5"),bKr.forEach(t),V1o=r(Pwe," \u2014 "),Mq=n(Pwe,"A",{href:!0});var vKr=s(Mq);X1o=r(vKr,"T5Model"),vKr.forEach(t),z1o=r(Pwe," (T5 model)"),Pwe.forEach(t),Q1o=i($),_u=n($,"LI",{});var Iwe=s(_u);zse=n(Iwe,"STRONG",{});var FKr=s(zse);W1o=r(FKr,"tapas"),FKr.forEach(t),H1o=r(Iwe," \u2014 "),Eq=n(Iwe,"A",{href:!0});var TKr=s(Eq);U1o=r(TKr,"TapasModel"),TKr.forEach(t),J1o=r(Iwe," (TAPAS model)"),Iwe.forEach(t),Y1o=i($),bu=n($,"LI",{});var qwe=s(bu);Qse=n(qwe,"STRONG",{});var MKr=s(Qse);K1o=r(MKr,"transfo-xl"),MKr.forEach(t),Z1o=r(qwe," \u2014 "),Cq=n(qwe,"A",{href:!0});var EKr=s(Cq);ebo=r(EKr,"TransfoXLModel"),EKr.forEach(t),obo=r(qwe," (Transformer-XL model)"),qwe.forEach(t),rbo=i($),vu=n($,"LI",{});var Nwe=s(vu);Wse=n(Nwe,"STRONG",{});var CKr=s(Wse);tbo=r(CKr,"unispeech"),CKr.forEach(t),abo=r(Nwe," \u2014 "),wq=n(Nwe,"A",{href:!0});var wKr=s(wq);nbo=r(wKr,"UniSpeechModel"),wKr.forEach(t),sbo=r(Nwe," (UniSpeech model)"),Nwe.forEach(t),lbo=i($),Fu=n($,"LI",{});var jwe=s(Fu);Hse=n(jwe,"STRONG",{});var AKr=s(Hse);ibo=r(AKr,"unispeech-sat"),AKr.forEach(t),dbo=r(jwe," \u2014 "),Aq=n(jwe,"A",{href:!0});var yKr=s(Aq);cbo=r(yKr,"UniSpeechSatModel"),yKr.forEach(t),fbo=r(jwe," (UniSpeechSat model)"),jwe.forEach(t),mbo=i($),Tu=n($,"LI",{});var Dwe=s(Tu);Use=n(Dwe,"STRONG",{});var LKr=s(Use);gbo=r(LKr,"van"),LKr.forEach(t),hbo=r(Dwe," \u2014 "),yq=n(Dwe,"A",{href:!0});var xKr=s(yq);pbo=r(xKr,"VanModel"),xKr.forEach(t),ubo=r(Dwe," (VAN model)"),Dwe.forEach(t),_bo=i($),Mu=n($,"LI",{});var Gwe=s(Mu);Jse=n(Gwe,"STRONG",{});var $Kr=s(Jse);bbo=r($Kr,"vilt"),$Kr.forEach(t),vbo=r(Gwe," \u2014 "),Lq=n(Gwe,"A",{href:!0});var kKr=s(Lq);Fbo=r(kKr,"ViltModel"),kKr.forEach(t),Tbo=r(Gwe," (ViLT model)"),Gwe.forEach(t),Mbo=i($),Eu=n($,"LI",{});var Owe=s(Eu);Yse=n(Owe,"STRONG",{});var SKr=s(Yse);Ebo=r(SKr,"vision-text-dual-encoder"),SKr.forEach(t),Cbo=r(Owe," \u2014 "),xq=n(Owe,"A",{href:!0});var RKr=s(xq);wbo=r(RKr,"VisionTextDualEncoderModel"),RKr.forEach(t),Abo=r(Owe," (VisionTextDualEncoder model)"),Owe.forEach(t),ybo=i($),Cu=n($,"LI",{});var Vwe=s(Cu);Kse=n(Vwe,"STRONG",{});var BKr=s(Kse);Lbo=r(BKr,"visual_bert"),BKr.forEach(t),xbo=r(Vwe," \u2014 "),$q=n(Vwe,"A",{href:!0});var PKr=s($q);$bo=r(PKr,"VisualBertModel"),PKr.forEach(t),kbo=r(Vwe," (VisualBert model)"),Vwe.forEach(t),Sbo=i($),wu=n($,"LI",{});var Xwe=s(wu);Zse=n(Xwe,"STRONG",{});var IKr=s(Zse);Rbo=r(IKr,"vit"),IKr.forEach(t),Bbo=r(Xwe," \u2014 "),kq=n(Xwe,"A",{href:!0});var qKr=s(kq);Pbo=r(qKr,"ViTModel"),qKr.forEach(t),Ibo=r(Xwe," (ViT model)"),Xwe.forEach(t),qbo=i($),Au=n($,"LI",{});var zwe=s(Au);ele=n(zwe,"STRONG",{});var NKr=s(ele);Nbo=r(NKr,"vit_mae"),NKr.forEach(t),jbo=r(zwe," \u2014 "),Sq=n(zwe,"A",{href:!0});var jKr=s(Sq);Dbo=r(jKr,"ViTMAEModel"),jKr.forEach(t),Gbo=r(zwe," (ViTMAE model)"),zwe.forEach(t),Obo=i($),yu=n($,"LI",{});var Qwe=s(yu);ole=n(Qwe,"STRONG",{});var DKr=s(ole);Vbo=r(DKr,"wav2vec2"),DKr.forEach(t),Xbo=r(Qwe," \u2014 "),Rq=n(Qwe,"A",{href:!0});var GKr=s(Rq);zbo=r(GKr,"Wav2Vec2Model"),GKr.forEach(t),Qbo=r(Qwe," (Wav2Vec2 model)"),Qwe.forEach(t),Wbo=i($),Lu=n($,"LI",{});var Wwe=s(Lu);rle=n(Wwe,"STRONG",{});var OKr=s(rle);Hbo=r(OKr,"wavlm"),OKr.forEach(t),Ubo=r(Wwe," \u2014 "),Bq=n(Wwe,"A",{href:!0});var VKr=s(Bq);Jbo=r(VKr,"WavLMModel"),VKr.forEach(t),Ybo=r(Wwe," (WavLM model)"),Wwe.forEach(t),Kbo=i($),xu=n($,"LI",{});var Hwe=s(xu);tle=n(Hwe,"STRONG",{});var XKr=s(tle);Zbo=r(XKr,"xglm"),XKr.forEach(t),evo=r(Hwe," \u2014 "),Pq=n(Hwe,"A",{href:!0});var zKr=s(Pq);ovo=r(zKr,"XGLMModel"),zKr.forEach(t),rvo=r(Hwe," (XGLM model)"),Hwe.forEach(t),tvo=i($),$u=n($,"LI",{});var Uwe=s($u);ale=n(Uwe,"STRONG",{});var QKr=s(ale);avo=r(QKr,"xlm"),QKr.forEach(t),nvo=r(Uwe," \u2014 "),Iq=n(Uwe,"A",{href:!0});var WKr=s(Iq);svo=r(WKr,"XLMModel"),WKr.forEach(t),lvo=r(Uwe," (XLM model)"),Uwe.forEach(t),ivo=i($),ku=n($,"LI",{});var Jwe=s(ku);nle=n(Jwe,"STRONG",{});var HKr=s(nle);dvo=r(HKr,"xlm-prophetnet"),HKr.forEach(t),cvo=r(Jwe," \u2014 "),qq=n(Jwe,"A",{href:!0});var UKr=s(qq);fvo=r(UKr,"XLMProphetNetModel"),UKr.forEach(t),mvo=r(Jwe," (XLMProphetNet model)"),Jwe.forEach(t),gvo=i($),Su=n($,"LI",{});var Ywe=s(Su);sle=n(Ywe,"STRONG",{});var JKr=s(sle);hvo=r(JKr,"xlm-roberta"),JKr.forEach(t),pvo=r(Ywe," \u2014 "),Nq=n(Ywe,"A",{href:!0});var YKr=s(Nq);uvo=r(YKr,"XLMRobertaModel"),YKr.forEach(t),_vo=r(Ywe," (XLM-RoBERTa model)"),Ywe.forEach(t),bvo=i($),Ru=n($,"LI",{});var Kwe=s(Ru);lle=n(Kwe,"STRONG",{});var KKr=s(lle);vvo=r(KKr,"xlm-roberta-xl"),KKr.forEach(t),Fvo=r(Kwe," \u2014 "),jq=n(Kwe,"A",{href:!0});var ZKr=s(jq);Tvo=r(ZKr,"XLMRobertaXLModel"),ZKr.forEach(t),Mvo=r(Kwe," (XLM-RoBERTa-XL model)"),Kwe.forEach(t),Evo=i($),Bu=n($,"LI",{});var Zwe=s(Bu);ile=n(Zwe,"STRONG",{});var eZr=s(ile);Cvo=r(eZr,"xlnet"),eZr.forEach(t),wvo=r(Zwe," \u2014 "),Dq=n(Zwe,"A",{href:!0});var oZr=s(Dq);Avo=r(oZr,"XLNetModel"),oZr.forEach(t),yvo=r(Zwe," (XLNet model)"),Zwe.forEach(t),Lvo=i($),Pu=n($,"LI",{});var eAe=s(Pu);dle=n(eAe,"STRONG",{});var rZr=s(dle);xvo=r(rZr,"yolos"),rZr.forEach(t),$vo=r(eAe," \u2014 "),Gq=n(eAe,"A",{href:!0});var tZr=s(Gq);kvo=r(tZr,"YolosModel"),tZr.forEach(t),Svo=r(eAe," (YOLOS model)"),eAe.forEach(t),Rvo=i($),Iu=n($,"LI",{});var oAe=s(Iu);cle=n(oAe,"STRONG",{});var aZr=s(cle);Bvo=r(aZr,"yoso"),aZr.forEach(t),Pvo=r(oAe," \u2014 "),Oq=n(oAe,"A",{href:!0});var nZr=s(Oq);Ivo=r(nZr,"YosoModel"),nZr.forEach(t),qvo=r(oAe," (YOSO model)"),oAe.forEach(t),$.forEach(t),Nvo=i(Zt),qu=n(Zt,"P",{});var rAe=s(qu);jvo=r(rAe,"The model is set in evaluation mode by default using "),fle=n(rAe,"CODE",{});var sZr=s(fle);Dvo=r(sZr,"model.eval()"),sZr.forEach(t),Gvo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=n(rAe,"CODE",{});var lZr=s(mle);Ovo=r(lZr,"model.train()"),lZr.forEach(t),rAe.forEach(t),Vvo=i(Zt),T(Nu.$$.fragment,Zt),Zt.forEach(t),Gs.forEach(t),RIe=i(f),Ai=n(f,"H2",{class:!0});var qNe=s(Ai);ju=n(qNe,"A",{id:!0,class:!0,href:!0});var iZr=s(ju);gle=n(iZr,"SPAN",{});var dZr=s(gle);T(IA.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),Xvo=i(qNe),hle=n(qNe,"SPAN",{});var cZr=s(hle);zvo=r(cZr,"AutoModelForPreTraining"),cZr.forEach(t),qNe.forEach(t),BIe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(qA.$$.fragment,Os),Qvo=i(Os),yi=n(Os,"P",{});var yK=s(yi);Wvo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vq=n(yK,"A",{href:!0});var fZr=s(Vq);Hvo=r(fZr,"from_pretrained()"),fZr.forEach(t),Uvo=r(yK," class method or the "),Xq=n(yK,"A",{href:!0});var mZr=s(Xq);Jvo=r(mZr,"from_config()"),mZr.forEach(t),Yvo=r(yK,` class
method.`),yK.forEach(t),Kvo=i(Os),NA=n(Os,"P",{});var NNe=s(NA);Zvo=r(NNe,"This class cannot be instantiated directly using "),ple=n(NNe,"CODE",{});var gZr=s(ple);eFo=r(gZr,"__init__()"),gZr.forEach(t),oFo=r(NNe," (throws an error)."),NNe.forEach(t),rFo=i(Os),rt=n(Os,"DIV",{class:!0});var d3=s(rt);T(jA.$$.fragment,d3),tFo=i(d3),ule=n(d3,"P",{});var hZr=s(ule);aFo=r(hZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hZr.forEach(t),nFo=i(d3),Li=n(d3,"P",{});var LK=s(Li);sFo=r(LK,`Note:
Loading a model from its configuration file does `),_le=n(LK,"STRONG",{});var pZr=s(_le);lFo=r(pZr,"not"),pZr.forEach(t),iFo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zq=n(LK,"A",{href:!0});var uZr=s(zq);dFo=r(uZr,"from_pretrained()"),uZr.forEach(t),cFo=r(LK," to load the model weights."),LK.forEach(t),fFo=i(d3),T(Du.$$.fragment,d3),d3.forEach(t),mFo=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(DA.$$.fragment,ea),gFo=i(ea),ble=n(ea,"P",{});var _Zr=s(ble);hFo=r(_Zr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Zr.forEach(t),pFo=i(ea),ya=n(ea,"P",{});var c3=s(ya);uFo=r(c3,"The model class to instantiate is selected based on the "),vle=n(c3,"CODE",{});var bZr=s(vle);_Fo=r(bZr,"model_type"),bZr.forEach(t),bFo=r(c3,` property of the config object (either
passed as an argument or loaded from `),Fle=n(c3,"CODE",{});var vZr=s(Fle);vFo=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),FFo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(c3,"CODE",{});var FZr=s(Tle);TFo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),MFo=r(c3,":"),c3.forEach(t),EFo=i(ea),G=n(ea,"UL",{});var O=s(G);Gu=n(O,"LI",{});var tAe=s(Gu);Mle=n(tAe,"STRONG",{});var TZr=s(Mle);CFo=r(TZr,"albert"),TZr.forEach(t),wFo=r(tAe," \u2014 "),Qq=n(tAe,"A",{href:!0});var MZr=s(Qq);AFo=r(MZr,"AlbertForPreTraining"),MZr.forEach(t),yFo=r(tAe," (ALBERT model)"),tAe.forEach(t),LFo=i(O),Ou=n(O,"LI",{});var aAe=s(Ou);Ele=n(aAe,"STRONG",{});var EZr=s(Ele);xFo=r(EZr,"bart"),EZr.forEach(t),$Fo=r(aAe," \u2014 "),Wq=n(aAe,"A",{href:!0});var CZr=s(Wq);kFo=r(CZr,"BartForConditionalGeneration"),CZr.forEach(t),SFo=r(aAe," (BART model)"),aAe.forEach(t),RFo=i(O),Vu=n(O,"LI",{});var nAe=s(Vu);Cle=n(nAe,"STRONG",{});var wZr=s(Cle);BFo=r(wZr,"bert"),wZr.forEach(t),PFo=r(nAe," \u2014 "),Hq=n(nAe,"A",{href:!0});var AZr=s(Hq);IFo=r(AZr,"BertForPreTraining"),AZr.forEach(t),qFo=r(nAe," (BERT model)"),nAe.forEach(t),NFo=i(O),Xu=n(O,"LI",{});var sAe=s(Xu);wle=n(sAe,"STRONG",{});var yZr=s(wle);jFo=r(yZr,"big_bird"),yZr.forEach(t),DFo=r(sAe," \u2014 "),Uq=n(sAe,"A",{href:!0});var LZr=s(Uq);GFo=r(LZr,"BigBirdForPreTraining"),LZr.forEach(t),OFo=r(sAe," (BigBird model)"),sAe.forEach(t),VFo=i(O),zu=n(O,"LI",{});var lAe=s(zu);Ale=n(lAe,"STRONG",{});var xZr=s(Ale);XFo=r(xZr,"camembert"),xZr.forEach(t),zFo=r(lAe," \u2014 "),Jq=n(lAe,"A",{href:!0});var $Zr=s(Jq);QFo=r($Zr,"CamembertForMaskedLM"),$Zr.forEach(t),WFo=r(lAe," (CamemBERT model)"),lAe.forEach(t),HFo=i(O),Qu=n(O,"LI",{});var iAe=s(Qu);yle=n(iAe,"STRONG",{});var kZr=s(yle);UFo=r(kZr,"ctrl"),kZr.forEach(t),JFo=r(iAe," \u2014 "),Yq=n(iAe,"A",{href:!0});var SZr=s(Yq);YFo=r(SZr,"CTRLLMHeadModel"),SZr.forEach(t),KFo=r(iAe," (CTRL model)"),iAe.forEach(t),ZFo=i(O),Wu=n(O,"LI",{});var dAe=s(Wu);Lle=n(dAe,"STRONG",{});var RZr=s(Lle);e6o=r(RZr,"data2vec-text"),RZr.forEach(t),o6o=r(dAe," \u2014 "),Kq=n(dAe,"A",{href:!0});var BZr=s(Kq);r6o=r(BZr,"Data2VecTextForMaskedLM"),BZr.forEach(t),t6o=r(dAe," (Data2VecText model)"),dAe.forEach(t),a6o=i(O),Hu=n(O,"LI",{});var cAe=s(Hu);xle=n(cAe,"STRONG",{});var PZr=s(xle);n6o=r(PZr,"deberta"),PZr.forEach(t),s6o=r(cAe," \u2014 "),Zq=n(cAe,"A",{href:!0});var IZr=s(Zq);l6o=r(IZr,"DebertaForMaskedLM"),IZr.forEach(t),i6o=r(cAe," (DeBERTa model)"),cAe.forEach(t),d6o=i(O),Uu=n(O,"LI",{});var fAe=s(Uu);$le=n(fAe,"STRONG",{});var qZr=s($le);c6o=r(qZr,"deberta-v2"),qZr.forEach(t),f6o=r(fAe," \u2014 "),eN=n(fAe,"A",{href:!0});var NZr=s(eN);m6o=r(NZr,"DebertaV2ForMaskedLM"),NZr.forEach(t),g6o=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),h6o=i(O),Ju=n(O,"LI",{});var mAe=s(Ju);kle=n(mAe,"STRONG",{});var jZr=s(kle);p6o=r(jZr,"distilbert"),jZr.forEach(t),u6o=r(mAe," \u2014 "),oN=n(mAe,"A",{href:!0});var DZr=s(oN);_6o=r(DZr,"DistilBertForMaskedLM"),DZr.forEach(t),b6o=r(mAe," (DistilBERT model)"),mAe.forEach(t),v6o=i(O),Yu=n(O,"LI",{});var gAe=s(Yu);Sle=n(gAe,"STRONG",{});var GZr=s(Sle);F6o=r(GZr,"electra"),GZr.forEach(t),T6o=r(gAe," \u2014 "),rN=n(gAe,"A",{href:!0});var OZr=s(rN);M6o=r(OZr,"ElectraForPreTraining"),OZr.forEach(t),E6o=r(gAe," (ELECTRA model)"),gAe.forEach(t),C6o=i(O),Ku=n(O,"LI",{});var hAe=s(Ku);Rle=n(hAe,"STRONG",{});var VZr=s(Rle);w6o=r(VZr,"flaubert"),VZr.forEach(t),A6o=r(hAe," \u2014 "),tN=n(hAe,"A",{href:!0});var XZr=s(tN);y6o=r(XZr,"FlaubertWithLMHeadModel"),XZr.forEach(t),L6o=r(hAe," (FlauBERT model)"),hAe.forEach(t),x6o=i(O),Zu=n(O,"LI",{});var pAe=s(Zu);Ble=n(pAe,"STRONG",{});var zZr=s(Ble);$6o=r(zZr,"flava"),zZr.forEach(t),k6o=r(pAe," \u2014 "),aN=n(pAe,"A",{href:!0});var QZr=s(aN);S6o=r(QZr,"FlavaForPreTraining"),QZr.forEach(t),R6o=r(pAe," (Flava model)"),pAe.forEach(t),B6o=i(O),e_=n(O,"LI",{});var uAe=s(e_);Ple=n(uAe,"STRONG",{});var WZr=s(Ple);P6o=r(WZr,"fnet"),WZr.forEach(t),I6o=r(uAe," \u2014 "),nN=n(uAe,"A",{href:!0});var HZr=s(nN);q6o=r(HZr,"FNetForPreTraining"),HZr.forEach(t),N6o=r(uAe," (FNet model)"),uAe.forEach(t),j6o=i(O),o_=n(O,"LI",{});var _Ae=s(o_);Ile=n(_Ae,"STRONG",{});var UZr=s(Ile);D6o=r(UZr,"fsmt"),UZr.forEach(t),G6o=r(_Ae," \u2014 "),sN=n(_Ae,"A",{href:!0});var JZr=s(sN);O6o=r(JZr,"FSMTForConditionalGeneration"),JZr.forEach(t),V6o=r(_Ae," (FairSeq Machine-Translation model)"),_Ae.forEach(t),X6o=i(O),r_=n(O,"LI",{});var bAe=s(r_);qle=n(bAe,"STRONG",{});var YZr=s(qle);z6o=r(YZr,"funnel"),YZr.forEach(t),Q6o=r(bAe," \u2014 "),lN=n(bAe,"A",{href:!0});var KZr=s(lN);W6o=r(KZr,"FunnelForPreTraining"),KZr.forEach(t),H6o=r(bAe," (Funnel Transformer model)"),bAe.forEach(t),U6o=i(O),t_=n(O,"LI",{});var vAe=s(t_);Nle=n(vAe,"STRONG",{});var ZZr=s(Nle);J6o=r(ZZr,"gpt2"),ZZr.forEach(t),Y6o=r(vAe," \u2014 "),iN=n(vAe,"A",{href:!0});var eet=s(iN);K6o=r(eet,"GPT2LMHeadModel"),eet.forEach(t),Z6o=r(vAe," (OpenAI GPT-2 model)"),vAe.forEach(t),eTo=i(O),a_=n(O,"LI",{});var FAe=s(a_);jle=n(FAe,"STRONG",{});var oet=s(jle);oTo=r(oet,"ibert"),oet.forEach(t),rTo=r(FAe," \u2014 "),dN=n(FAe,"A",{href:!0});var ret=s(dN);tTo=r(ret,"IBertForMaskedLM"),ret.forEach(t),aTo=r(FAe," (I-BERT model)"),FAe.forEach(t),nTo=i(O),n_=n(O,"LI",{});var TAe=s(n_);Dle=n(TAe,"STRONG",{});var tet=s(Dle);sTo=r(tet,"layoutlm"),tet.forEach(t),lTo=r(TAe," \u2014 "),cN=n(TAe,"A",{href:!0});var aet=s(cN);iTo=r(aet,"LayoutLMForMaskedLM"),aet.forEach(t),dTo=r(TAe," (LayoutLM model)"),TAe.forEach(t),cTo=i(O),s_=n(O,"LI",{});var MAe=s(s_);Gle=n(MAe,"STRONG",{});var net=s(Gle);fTo=r(net,"longformer"),net.forEach(t),mTo=r(MAe," \u2014 "),fN=n(MAe,"A",{href:!0});var set=s(fN);gTo=r(set,"LongformerForMaskedLM"),set.forEach(t),hTo=r(MAe," (Longformer model)"),MAe.forEach(t),pTo=i(O),l_=n(O,"LI",{});var EAe=s(l_);Ole=n(EAe,"STRONG",{});var iet=s(Ole);uTo=r(iet,"longt5"),iet.forEach(t),_To=r(EAe," \u2014 "),mN=n(EAe,"A",{href:!0});var det=s(mN);bTo=r(det,"LongT5ForConditionalGeneration"),det.forEach(t),vTo=r(EAe," (LongT5 model)"),EAe.forEach(t),FTo=i(O),i_=n(O,"LI",{});var CAe=s(i_);Vle=n(CAe,"STRONG",{});var cet=s(Vle);TTo=r(cet,"lxmert"),cet.forEach(t),MTo=r(CAe," \u2014 "),gN=n(CAe,"A",{href:!0});var fet=s(gN);ETo=r(fet,"LxmertForPreTraining"),fet.forEach(t),CTo=r(CAe," (LXMERT model)"),CAe.forEach(t),wTo=i(O),d_=n(O,"LI",{});var wAe=s(d_);Xle=n(wAe,"STRONG",{});var met=s(Xle);ATo=r(met,"megatron-bert"),met.forEach(t),yTo=r(wAe," \u2014 "),hN=n(wAe,"A",{href:!0});var get=s(hN);LTo=r(get,"MegatronBertForPreTraining"),get.forEach(t),xTo=r(wAe," (MegatronBert model)"),wAe.forEach(t),$To=i(O),c_=n(O,"LI",{});var AAe=s(c_);zle=n(AAe,"STRONG",{});var het=s(zle);kTo=r(het,"mobilebert"),het.forEach(t),STo=r(AAe," \u2014 "),pN=n(AAe,"A",{href:!0});var pet=s(pN);RTo=r(pet,"MobileBertForPreTraining"),pet.forEach(t),BTo=r(AAe," (MobileBERT model)"),AAe.forEach(t),PTo=i(O),f_=n(O,"LI",{});var yAe=s(f_);Qle=n(yAe,"STRONG",{});var uet=s(Qle);ITo=r(uet,"mpnet"),uet.forEach(t),qTo=r(yAe," \u2014 "),uN=n(yAe,"A",{href:!0});var _et=s(uN);NTo=r(_et,"MPNetForMaskedLM"),_et.forEach(t),jTo=r(yAe," (MPNet model)"),yAe.forEach(t),DTo=i(O),m_=n(O,"LI",{});var LAe=s(m_);Wle=n(LAe,"STRONG",{});var bet=s(Wle);GTo=r(bet,"openai-gpt"),bet.forEach(t),OTo=r(LAe," \u2014 "),_N=n(LAe,"A",{href:!0});var vet=s(_N);VTo=r(vet,"OpenAIGPTLMHeadModel"),vet.forEach(t),XTo=r(LAe," (OpenAI GPT model)"),LAe.forEach(t),zTo=i(O),g_=n(O,"LI",{});var xAe=s(g_);Hle=n(xAe,"STRONG",{});var Fet=s(Hle);QTo=r(Fet,"retribert"),Fet.forEach(t),WTo=r(xAe," \u2014 "),bN=n(xAe,"A",{href:!0});var Tet=s(bN);HTo=r(Tet,"RetriBertModel"),Tet.forEach(t),UTo=r(xAe," (RetriBERT model)"),xAe.forEach(t),JTo=i(O),h_=n(O,"LI",{});var $Ae=s(h_);Ule=n($Ae,"STRONG",{});var Met=s(Ule);YTo=r(Met,"roberta"),Met.forEach(t),KTo=r($Ae," \u2014 "),vN=n($Ae,"A",{href:!0});var Eet=s(vN);ZTo=r(Eet,"RobertaForMaskedLM"),Eet.forEach(t),e9o=r($Ae," (RoBERTa model)"),$Ae.forEach(t),o9o=i(O),p_=n(O,"LI",{});var kAe=s(p_);Jle=n(kAe,"STRONG",{});var Cet=s(Jle);r9o=r(Cet,"squeezebert"),Cet.forEach(t),t9o=r(kAe," \u2014 "),FN=n(kAe,"A",{href:!0});var wet=s(FN);a9o=r(wet,"SqueezeBertForMaskedLM"),wet.forEach(t),n9o=r(kAe," (SqueezeBERT model)"),kAe.forEach(t),s9o=i(O),u_=n(O,"LI",{});var SAe=s(u_);Yle=n(SAe,"STRONG",{});var Aet=s(Yle);l9o=r(Aet,"t5"),Aet.forEach(t),i9o=r(SAe," \u2014 "),TN=n(SAe,"A",{href:!0});var yet=s(TN);d9o=r(yet,"T5ForConditionalGeneration"),yet.forEach(t),c9o=r(SAe," (T5 model)"),SAe.forEach(t),f9o=i(O),__=n(O,"LI",{});var RAe=s(__);Kle=n(RAe,"STRONG",{});var Let=s(Kle);m9o=r(Let,"tapas"),Let.forEach(t),g9o=r(RAe," \u2014 "),MN=n(RAe,"A",{href:!0});var xet=s(MN);h9o=r(xet,"TapasForMaskedLM"),xet.forEach(t),p9o=r(RAe," (TAPAS model)"),RAe.forEach(t),u9o=i(O),b_=n(O,"LI",{});var BAe=s(b_);Zle=n(BAe,"STRONG",{});var $et=s(Zle);_9o=r($et,"transfo-xl"),$et.forEach(t),b9o=r(BAe," \u2014 "),EN=n(BAe,"A",{href:!0});var ket=s(EN);v9o=r(ket,"TransfoXLLMHeadModel"),ket.forEach(t),F9o=r(BAe," (Transformer-XL model)"),BAe.forEach(t),T9o=i(O),v_=n(O,"LI",{});var PAe=s(v_);eie=n(PAe,"STRONG",{});var Set=s(eie);M9o=r(Set,"unispeech"),Set.forEach(t),E9o=r(PAe," \u2014 "),CN=n(PAe,"A",{href:!0});var Ret=s(CN);C9o=r(Ret,"UniSpeechForPreTraining"),Ret.forEach(t),w9o=r(PAe," (UniSpeech model)"),PAe.forEach(t),A9o=i(O),F_=n(O,"LI",{});var IAe=s(F_);oie=n(IAe,"STRONG",{});var Bet=s(oie);y9o=r(Bet,"unispeech-sat"),Bet.forEach(t),L9o=r(IAe," \u2014 "),wN=n(IAe,"A",{href:!0});var Pet=s(wN);x9o=r(Pet,"UniSpeechSatForPreTraining"),Pet.forEach(t),$9o=r(IAe," (UniSpeechSat model)"),IAe.forEach(t),k9o=i(O),T_=n(O,"LI",{});var qAe=s(T_);rie=n(qAe,"STRONG",{});var Iet=s(rie);S9o=r(Iet,"visual_bert"),Iet.forEach(t),R9o=r(qAe," \u2014 "),AN=n(qAe,"A",{href:!0});var qet=s(AN);B9o=r(qet,"VisualBertForPreTraining"),qet.forEach(t),P9o=r(qAe," (VisualBert model)"),qAe.forEach(t),I9o=i(O),M_=n(O,"LI",{});var NAe=s(M_);tie=n(NAe,"STRONG",{});var Net=s(tie);q9o=r(Net,"vit_mae"),Net.forEach(t),N9o=r(NAe," \u2014 "),yN=n(NAe,"A",{href:!0});var jet=s(yN);j9o=r(jet,"ViTMAEForPreTraining"),jet.forEach(t),D9o=r(NAe," (ViTMAE model)"),NAe.forEach(t),G9o=i(O),E_=n(O,"LI",{});var jAe=s(E_);aie=n(jAe,"STRONG",{});var Det=s(aie);O9o=r(Det,"wav2vec2"),Det.forEach(t),V9o=r(jAe," \u2014 "),LN=n(jAe,"A",{href:!0});var Get=s(LN);X9o=r(Get,"Wav2Vec2ForPreTraining"),Get.forEach(t),z9o=r(jAe," (Wav2Vec2 model)"),jAe.forEach(t),Q9o=i(O),C_=n(O,"LI",{});var DAe=s(C_);nie=n(DAe,"STRONG",{});var Oet=s(nie);W9o=r(Oet,"xlm"),Oet.forEach(t),H9o=r(DAe," \u2014 "),xN=n(DAe,"A",{href:!0});var Vet=s(xN);U9o=r(Vet,"XLMWithLMHeadModel"),Vet.forEach(t),J9o=r(DAe," (XLM model)"),DAe.forEach(t),Y9o=i(O),w_=n(O,"LI",{});var GAe=s(w_);sie=n(GAe,"STRONG",{});var Xet=s(sie);K9o=r(Xet,"xlm-roberta"),Xet.forEach(t),Z9o=r(GAe," \u2014 "),$N=n(GAe,"A",{href:!0});var zet=s($N);e7o=r(zet,"XLMRobertaForMaskedLM"),zet.forEach(t),o7o=r(GAe," (XLM-RoBERTa model)"),GAe.forEach(t),r7o=i(O),A_=n(O,"LI",{});var OAe=s(A_);lie=n(OAe,"STRONG",{});var Qet=s(lie);t7o=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),a7o=r(OAe," \u2014 "),kN=n(OAe,"A",{href:!0});var Wet=s(kN);n7o=r(Wet,"XLMRobertaXLForMaskedLM"),Wet.forEach(t),s7o=r(OAe," (XLM-RoBERTa-XL model)"),OAe.forEach(t),l7o=i(O),y_=n(O,"LI",{});var VAe=s(y_);iie=n(VAe,"STRONG",{});var Het=s(iie);i7o=r(Het,"xlnet"),Het.forEach(t),d7o=r(VAe," \u2014 "),SN=n(VAe,"A",{href:!0});var Uet=s(SN);c7o=r(Uet,"XLNetLMHeadModel"),Uet.forEach(t),f7o=r(VAe," (XLNet model)"),VAe.forEach(t),O.forEach(t),m7o=i(ea),L_=n(ea,"P",{});var XAe=s(L_);g7o=r(XAe,"The model is set in evaluation mode by default using "),die=n(XAe,"CODE",{});var Jet=s(die);h7o=r(Jet,"model.eval()"),Jet.forEach(t),p7o=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(XAe,"CODE",{});var Yet=s(cie);u7o=r(Yet,"model.train()"),Yet.forEach(t),XAe.forEach(t),_7o=i(ea),T(x_.$$.fragment,ea),ea.forEach(t),Os.forEach(t),PIe=i(f),xi=n(f,"H2",{class:!0});var jNe=s(xi);$_=n(jNe,"A",{id:!0,class:!0,href:!0});var Ket=s($_);fie=n(Ket,"SPAN",{});var Zet=s(fie);T(GA.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),b7o=i(jNe),mie=n(jNe,"SPAN",{});var eot=s(mie);v7o=r(eot,"AutoModelForCausalLM"),eot.forEach(t),jNe.forEach(t),IIe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(OA.$$.fragment,Vs),F7o=i(Vs),$i=n(Vs,"P",{});var xK=s($i);T7o=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RN=n(xK,"A",{href:!0});var oot=s(RN);M7o=r(oot,"from_pretrained()"),oot.forEach(t),E7o=r(xK," class method or the "),BN=n(xK,"A",{href:!0});var rot=s(BN);C7o=r(rot,"from_config()"),rot.forEach(t),w7o=r(xK,` class
method.`),xK.forEach(t),A7o=i(Vs),VA=n(Vs,"P",{});var DNe=s(VA);y7o=r(DNe,"This class cannot be instantiated directly using "),gie=n(DNe,"CODE",{});var tot=s(gie);L7o=r(tot,"__init__()"),tot.forEach(t),x7o=r(DNe," (throws an error)."),DNe.forEach(t),$7o=i(Vs),tt=n(Vs,"DIV",{class:!0});var f3=s(tt);T(XA.$$.fragment,f3),k7o=i(f3),hie=n(f3,"P",{});var aot=s(hie);S7o=r(aot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aot.forEach(t),R7o=i(f3),ki=n(f3,"P",{});var $K=s(ki);B7o=r($K,`Note:
Loading a model from its configuration file does `),pie=n($K,"STRONG",{});var not=s(pie);P7o=r(not,"not"),not.forEach(t),I7o=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),PN=n($K,"A",{href:!0});var sot=s(PN);q7o=r(sot,"from_pretrained()"),sot.forEach(t),N7o=r($K," to load the model weights."),$K.forEach(t),j7o=i(f3),T(k_.$$.fragment,f3),f3.forEach(t),D7o=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(zA.$$.fragment,oa),G7o=i(oa),uie=n(oa,"P",{});var lot=s(uie);O7o=r(lot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lot.forEach(t),V7o=i(oa),La=n(oa,"P",{});var m3=s(La);X7o=r(m3,"The model class to instantiate is selected based on the "),_ie=n(m3,"CODE",{});var iot=s(_ie);z7o=r(iot,"model_type"),iot.forEach(t),Q7o=r(m3,` property of the config object (either
passed as an argument or loaded from `),bie=n(m3,"CODE",{});var dot=s(bie);W7o=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),H7o=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(m3,"CODE",{});var cot=s(vie);U7o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),J7o=r(m3,":"),m3.forEach(t),Y7o=i(oa),z=n(oa,"UL",{});var W=s(z);S_=n(W,"LI",{});var zAe=s(S_);Fie=n(zAe,"STRONG",{});var fot=s(Fie);K7o=r(fot,"bart"),fot.forEach(t),Z7o=r(zAe," \u2014 "),IN=n(zAe,"A",{href:!0});var mot=s(IN);eMo=r(mot,"BartForCausalLM"),mot.forEach(t),oMo=r(zAe," (BART model)"),zAe.forEach(t),rMo=i(W),R_=n(W,"LI",{});var QAe=s(R_);Tie=n(QAe,"STRONG",{});var got=s(Tie);tMo=r(got,"bert"),got.forEach(t),aMo=r(QAe," \u2014 "),qN=n(QAe,"A",{href:!0});var hot=s(qN);nMo=r(hot,"BertLMHeadModel"),hot.forEach(t),sMo=r(QAe," (BERT model)"),QAe.forEach(t),lMo=i(W),B_=n(W,"LI",{});var WAe=s(B_);Mie=n(WAe,"STRONG",{});var pot=s(Mie);iMo=r(pot,"bert-generation"),pot.forEach(t),dMo=r(WAe," \u2014 "),NN=n(WAe,"A",{href:!0});var uot=s(NN);cMo=r(uot,"BertGenerationDecoder"),uot.forEach(t),fMo=r(WAe," (Bert Generation model)"),WAe.forEach(t),mMo=i(W),P_=n(W,"LI",{});var HAe=s(P_);Eie=n(HAe,"STRONG",{});var _ot=s(Eie);gMo=r(_ot,"big_bird"),_ot.forEach(t),hMo=r(HAe," \u2014 "),jN=n(HAe,"A",{href:!0});var bot=s(jN);pMo=r(bot,"BigBirdForCausalLM"),bot.forEach(t),uMo=r(HAe," (BigBird model)"),HAe.forEach(t),_Mo=i(W),I_=n(W,"LI",{});var UAe=s(I_);Cie=n(UAe,"STRONG",{});var vot=s(Cie);bMo=r(vot,"bigbird_pegasus"),vot.forEach(t),vMo=r(UAe," \u2014 "),DN=n(UAe,"A",{href:!0});var Fot=s(DN);FMo=r(Fot,"BigBirdPegasusForCausalLM"),Fot.forEach(t),TMo=r(UAe," (BigBirdPegasus model)"),UAe.forEach(t),MMo=i(W),q_=n(W,"LI",{});var JAe=s(q_);wie=n(JAe,"STRONG",{});var Tot=s(wie);EMo=r(Tot,"blenderbot"),Tot.forEach(t),CMo=r(JAe," \u2014 "),GN=n(JAe,"A",{href:!0});var Mot=s(GN);wMo=r(Mot,"BlenderbotForCausalLM"),Mot.forEach(t),AMo=r(JAe," (Blenderbot model)"),JAe.forEach(t),yMo=i(W),N_=n(W,"LI",{});var YAe=s(N_);Aie=n(YAe,"STRONG",{});var Eot=s(Aie);LMo=r(Eot,"blenderbot-small"),Eot.forEach(t),xMo=r(YAe," \u2014 "),ON=n(YAe,"A",{href:!0});var Cot=s(ON);$Mo=r(Cot,"BlenderbotSmallForCausalLM"),Cot.forEach(t),kMo=r(YAe," (BlenderbotSmall model)"),YAe.forEach(t),SMo=i(W),j_=n(W,"LI",{});var KAe=s(j_);yie=n(KAe,"STRONG",{});var wot=s(yie);RMo=r(wot,"camembert"),wot.forEach(t),BMo=r(KAe," \u2014 "),VN=n(KAe,"A",{href:!0});var Aot=s(VN);PMo=r(Aot,"CamembertForCausalLM"),Aot.forEach(t),IMo=r(KAe," (CamemBERT model)"),KAe.forEach(t),qMo=i(W),D_=n(W,"LI",{});var ZAe=s(D_);Lie=n(ZAe,"STRONG",{});var yot=s(Lie);NMo=r(yot,"ctrl"),yot.forEach(t),jMo=r(ZAe," \u2014 "),XN=n(ZAe,"A",{href:!0});var Lot=s(XN);DMo=r(Lot,"CTRLLMHeadModel"),Lot.forEach(t),GMo=r(ZAe," (CTRL model)"),ZAe.forEach(t),OMo=i(W),G_=n(W,"LI",{});var e0e=s(G_);xie=n(e0e,"STRONG",{});var xot=s(xie);VMo=r(xot,"data2vec-text"),xot.forEach(t),XMo=r(e0e," \u2014 "),zN=n(e0e,"A",{href:!0});var $ot=s(zN);zMo=r($ot,"Data2VecTextForCausalLM"),$ot.forEach(t),QMo=r(e0e," (Data2VecText model)"),e0e.forEach(t),WMo=i(W),O_=n(W,"LI",{});var o0e=s(O_);$ie=n(o0e,"STRONG",{});var kot=s($ie);HMo=r(kot,"electra"),kot.forEach(t),UMo=r(o0e," \u2014 "),QN=n(o0e,"A",{href:!0});var Sot=s(QN);JMo=r(Sot,"ElectraForCausalLM"),Sot.forEach(t),YMo=r(o0e," (ELECTRA model)"),o0e.forEach(t),KMo=i(W),V_=n(W,"LI",{});var r0e=s(V_);kie=n(r0e,"STRONG",{});var Rot=s(kie);ZMo=r(Rot,"gpt2"),Rot.forEach(t),e4o=r(r0e," \u2014 "),WN=n(r0e,"A",{href:!0});var Bot=s(WN);o4o=r(Bot,"GPT2LMHeadModel"),Bot.forEach(t),r4o=r(r0e," (OpenAI GPT-2 model)"),r0e.forEach(t),t4o=i(W),X_=n(W,"LI",{});var t0e=s(X_);Sie=n(t0e,"STRONG",{});var Pot=s(Sie);a4o=r(Pot,"gpt_neo"),Pot.forEach(t),n4o=r(t0e," \u2014 "),HN=n(t0e,"A",{href:!0});var Iot=s(HN);s4o=r(Iot,"GPTNeoForCausalLM"),Iot.forEach(t),l4o=r(t0e," (GPT Neo model)"),t0e.forEach(t),i4o=i(W),z_=n(W,"LI",{});var a0e=s(z_);Rie=n(a0e,"STRONG",{});var qot=s(Rie);d4o=r(qot,"gptj"),qot.forEach(t),c4o=r(a0e," \u2014 "),UN=n(a0e,"A",{href:!0});var Not=s(UN);f4o=r(Not,"GPTJForCausalLM"),Not.forEach(t),m4o=r(a0e," (GPT-J model)"),a0e.forEach(t),g4o=i(W),Q_=n(W,"LI",{});var n0e=s(Q_);Bie=n(n0e,"STRONG",{});var jot=s(Bie);h4o=r(jot,"marian"),jot.forEach(t),p4o=r(n0e," \u2014 "),JN=n(n0e,"A",{href:!0});var Dot=s(JN);u4o=r(Dot,"MarianForCausalLM"),Dot.forEach(t),_4o=r(n0e," (Marian model)"),n0e.forEach(t),b4o=i(W),W_=n(W,"LI",{});var s0e=s(W_);Pie=n(s0e,"STRONG",{});var Got=s(Pie);v4o=r(Got,"mbart"),Got.forEach(t),F4o=r(s0e," \u2014 "),YN=n(s0e,"A",{href:!0});var Oot=s(YN);T4o=r(Oot,"MBartForCausalLM"),Oot.forEach(t),M4o=r(s0e," (mBART model)"),s0e.forEach(t),E4o=i(W),H_=n(W,"LI",{});var l0e=s(H_);Iie=n(l0e,"STRONG",{});var Vot=s(Iie);C4o=r(Vot,"megatron-bert"),Vot.forEach(t),w4o=r(l0e," \u2014 "),KN=n(l0e,"A",{href:!0});var Xot=s(KN);A4o=r(Xot,"MegatronBertForCausalLM"),Xot.forEach(t),y4o=r(l0e," (MegatronBert model)"),l0e.forEach(t),L4o=i(W),U_=n(W,"LI",{});var i0e=s(U_);qie=n(i0e,"STRONG",{});var zot=s(qie);x4o=r(zot,"openai-gpt"),zot.forEach(t),$4o=r(i0e," \u2014 "),ZN=n(i0e,"A",{href:!0});var Qot=s(ZN);k4o=r(Qot,"OpenAIGPTLMHeadModel"),Qot.forEach(t),S4o=r(i0e," (OpenAI GPT model)"),i0e.forEach(t),R4o=i(W),J_=n(W,"LI",{});var d0e=s(J_);Nie=n(d0e,"STRONG",{});var Wot=s(Nie);B4o=r(Wot,"opt"),Wot.forEach(t),P4o=r(d0e," \u2014 "),ej=n(d0e,"A",{href:!0});var Hot=s(ej);I4o=r(Hot,"OPTForCausalLM"),Hot.forEach(t),q4o=r(d0e," (OPT model)"),d0e.forEach(t),N4o=i(W),Y_=n(W,"LI",{});var c0e=s(Y_);jie=n(c0e,"STRONG",{});var Uot=s(jie);j4o=r(Uot,"pegasus"),Uot.forEach(t),D4o=r(c0e," \u2014 "),oj=n(c0e,"A",{href:!0});var Jot=s(oj);G4o=r(Jot,"PegasusForCausalLM"),Jot.forEach(t),O4o=r(c0e," (Pegasus model)"),c0e.forEach(t),V4o=i(W),K_=n(W,"LI",{});var f0e=s(K_);Die=n(f0e,"STRONG",{});var Yot=s(Die);X4o=r(Yot,"plbart"),Yot.forEach(t),z4o=r(f0e," \u2014 "),rj=n(f0e,"A",{href:!0});var Kot=s(rj);Q4o=r(Kot,"PLBartForCausalLM"),Kot.forEach(t),W4o=r(f0e," (PLBart model)"),f0e.forEach(t),H4o=i(W),Z_=n(W,"LI",{});var m0e=s(Z_);Gie=n(m0e,"STRONG",{});var Zot=s(Gie);U4o=r(Zot,"prophetnet"),Zot.forEach(t),J4o=r(m0e," \u2014 "),tj=n(m0e,"A",{href:!0});var ert=s(tj);Y4o=r(ert,"ProphetNetForCausalLM"),ert.forEach(t),K4o=r(m0e," (ProphetNet model)"),m0e.forEach(t),Z4o=i(W),e2=n(W,"LI",{});var g0e=s(e2);Oie=n(g0e,"STRONG",{});var ort=s(Oie);eEo=r(ort,"qdqbert"),ort.forEach(t),oEo=r(g0e," \u2014 "),aj=n(g0e,"A",{href:!0});var rrt=s(aj);rEo=r(rrt,"QDQBertLMHeadModel"),rrt.forEach(t),tEo=r(g0e," (QDQBert model)"),g0e.forEach(t),aEo=i(W),o2=n(W,"LI",{});var h0e=s(o2);Vie=n(h0e,"STRONG",{});var trt=s(Vie);nEo=r(trt,"reformer"),trt.forEach(t),sEo=r(h0e," \u2014 "),nj=n(h0e,"A",{href:!0});var art=s(nj);lEo=r(art,"ReformerModelWithLMHead"),art.forEach(t),iEo=r(h0e," (Reformer model)"),h0e.forEach(t),dEo=i(W),r2=n(W,"LI",{});var p0e=s(r2);Xie=n(p0e,"STRONG",{});var nrt=s(Xie);cEo=r(nrt,"rembert"),nrt.forEach(t),fEo=r(p0e," \u2014 "),sj=n(p0e,"A",{href:!0});var srt=s(sj);mEo=r(srt,"RemBertForCausalLM"),srt.forEach(t),gEo=r(p0e," (RemBERT model)"),p0e.forEach(t),hEo=i(W),t2=n(W,"LI",{});var u0e=s(t2);zie=n(u0e,"STRONG",{});var lrt=s(zie);pEo=r(lrt,"roberta"),lrt.forEach(t),uEo=r(u0e," \u2014 "),lj=n(u0e,"A",{href:!0});var irt=s(lj);_Eo=r(irt,"RobertaForCausalLM"),irt.forEach(t),bEo=r(u0e," (RoBERTa model)"),u0e.forEach(t),vEo=i(W),a2=n(W,"LI",{});var _0e=s(a2);Qie=n(_0e,"STRONG",{});var drt=s(Qie);FEo=r(drt,"roformer"),drt.forEach(t),TEo=r(_0e," \u2014 "),ij=n(_0e,"A",{href:!0});var crt=s(ij);MEo=r(crt,"RoFormerForCausalLM"),crt.forEach(t),EEo=r(_0e," (RoFormer model)"),_0e.forEach(t),CEo=i(W),n2=n(W,"LI",{});var b0e=s(n2);Wie=n(b0e,"STRONG",{});var frt=s(Wie);wEo=r(frt,"speech_to_text_2"),frt.forEach(t),AEo=r(b0e," \u2014 "),dj=n(b0e,"A",{href:!0});var mrt=s(dj);yEo=r(mrt,"Speech2Text2ForCausalLM"),mrt.forEach(t),LEo=r(b0e," (Speech2Text2 model)"),b0e.forEach(t),xEo=i(W),s2=n(W,"LI",{});var v0e=s(s2);Hie=n(v0e,"STRONG",{});var grt=s(Hie);$Eo=r(grt,"transfo-xl"),grt.forEach(t),kEo=r(v0e," \u2014 "),cj=n(v0e,"A",{href:!0});var hrt=s(cj);SEo=r(hrt,"TransfoXLLMHeadModel"),hrt.forEach(t),REo=r(v0e," (Transformer-XL model)"),v0e.forEach(t),BEo=i(W),l2=n(W,"LI",{});var F0e=s(l2);Uie=n(F0e,"STRONG",{});var prt=s(Uie);PEo=r(prt,"trocr"),prt.forEach(t),IEo=r(F0e," \u2014 "),fj=n(F0e,"A",{href:!0});var urt=s(fj);qEo=r(urt,"TrOCRForCausalLM"),urt.forEach(t),NEo=r(F0e," (TrOCR model)"),F0e.forEach(t),jEo=i(W),i2=n(W,"LI",{});var T0e=s(i2);Jie=n(T0e,"STRONG",{});var _rt=s(Jie);DEo=r(_rt,"xglm"),_rt.forEach(t),GEo=r(T0e," \u2014 "),mj=n(T0e,"A",{href:!0});var brt=s(mj);OEo=r(brt,"XGLMForCausalLM"),brt.forEach(t),VEo=r(T0e," (XGLM model)"),T0e.forEach(t),XEo=i(W),d2=n(W,"LI",{});var M0e=s(d2);Yie=n(M0e,"STRONG",{});var vrt=s(Yie);zEo=r(vrt,"xlm"),vrt.forEach(t),QEo=r(M0e," \u2014 "),gj=n(M0e,"A",{href:!0});var Frt=s(gj);WEo=r(Frt,"XLMWithLMHeadModel"),Frt.forEach(t),HEo=r(M0e," (XLM model)"),M0e.forEach(t),UEo=i(W),c2=n(W,"LI",{});var E0e=s(c2);Kie=n(E0e,"STRONG",{});var Trt=s(Kie);JEo=r(Trt,"xlm-prophetnet"),Trt.forEach(t),YEo=r(E0e," \u2014 "),hj=n(E0e,"A",{href:!0});var Mrt=s(hj);KEo=r(Mrt,"XLMProphetNetForCausalLM"),Mrt.forEach(t),ZEo=r(E0e," (XLMProphetNet model)"),E0e.forEach(t),e5o=i(W),f2=n(W,"LI",{});var C0e=s(f2);Zie=n(C0e,"STRONG",{});var Ert=s(Zie);o5o=r(Ert,"xlm-roberta"),Ert.forEach(t),r5o=r(C0e," \u2014 "),pj=n(C0e,"A",{href:!0});var Crt=s(pj);t5o=r(Crt,"XLMRobertaForCausalLM"),Crt.forEach(t),a5o=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),n5o=i(W),m2=n(W,"LI",{});var w0e=s(m2);ede=n(w0e,"STRONG",{});var wrt=s(ede);s5o=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),l5o=r(w0e," \u2014 "),uj=n(w0e,"A",{href:!0});var Art=s(uj);i5o=r(Art,"XLMRobertaXLForCausalLM"),Art.forEach(t),d5o=r(w0e," (XLM-RoBERTa-XL model)"),w0e.forEach(t),c5o=i(W),g2=n(W,"LI",{});var A0e=s(g2);ode=n(A0e,"STRONG",{});var yrt=s(ode);f5o=r(yrt,"xlnet"),yrt.forEach(t),m5o=r(A0e," \u2014 "),_j=n(A0e,"A",{href:!0});var Lrt=s(_j);g5o=r(Lrt,"XLNetLMHeadModel"),Lrt.forEach(t),h5o=r(A0e," (XLNet model)"),A0e.forEach(t),W.forEach(t),p5o=i(oa),h2=n(oa,"P",{});var y0e=s(h2);u5o=r(y0e,"The model is set in evaluation mode by default using "),rde=n(y0e,"CODE",{});var xrt=s(rde);_5o=r(xrt,"model.eval()"),xrt.forEach(t),b5o=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(y0e,"CODE",{});var $rt=s(tde);v5o=r($rt,"model.train()"),$rt.forEach(t),y0e.forEach(t),F5o=i(oa),T(p2.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),qIe=i(f),Si=n(f,"H2",{class:!0});var GNe=s(Si);u2=n(GNe,"A",{id:!0,class:!0,href:!0});var krt=s(u2);ade=n(krt,"SPAN",{});var Srt=s(ade);T(QA.$$.fragment,Srt),Srt.forEach(t),krt.forEach(t),T5o=i(GNe),nde=n(GNe,"SPAN",{});var Rrt=s(nde);M5o=r(Rrt,"AutoModelForMaskedLM"),Rrt.forEach(t),GNe.forEach(t),NIe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(WA.$$.fragment,Xs),E5o=i(Xs),Ri=n(Xs,"P",{});var kK=s(Ri);C5o=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bj=n(kK,"A",{href:!0});var Brt=s(bj);w5o=r(Brt,"from_pretrained()"),Brt.forEach(t),A5o=r(kK," class method or the "),vj=n(kK,"A",{href:!0});var Prt=s(vj);y5o=r(Prt,"from_config()"),Prt.forEach(t),L5o=r(kK,` class
method.`),kK.forEach(t),x5o=i(Xs),HA=n(Xs,"P",{});var ONe=s(HA);$5o=r(ONe,"This class cannot be instantiated directly using "),sde=n(ONe,"CODE",{});var Irt=s(sde);k5o=r(Irt,"__init__()"),Irt.forEach(t),S5o=r(ONe," (throws an error)."),ONe.forEach(t),R5o=i(Xs),at=n(Xs,"DIV",{class:!0});var g3=s(at);T(UA.$$.fragment,g3),B5o=i(g3),lde=n(g3,"P",{});var qrt=s(lde);P5o=r(qrt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qrt.forEach(t),I5o=i(g3),Bi=n(g3,"P",{});var SK=s(Bi);q5o=r(SK,`Note:
Loading a model from its configuration file does `),ide=n(SK,"STRONG",{});var Nrt=s(ide);N5o=r(Nrt,"not"),Nrt.forEach(t),j5o=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(SK,"A",{href:!0});var jrt=s(Fj);D5o=r(jrt,"from_pretrained()"),jrt.forEach(t),G5o=r(SK," to load the model weights."),SK.forEach(t),O5o=i(g3),T(_2.$$.fragment,g3),g3.forEach(t),V5o=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(JA.$$.fragment,ra),X5o=i(ra),dde=n(ra,"P",{});var Drt=s(dde);z5o=r(Drt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Drt.forEach(t),Q5o=i(ra),xa=n(ra,"P",{});var h3=s(xa);W5o=r(h3,"The model class to instantiate is selected based on the "),cde=n(h3,"CODE",{});var Grt=s(cde);H5o=r(Grt,"model_type"),Grt.forEach(t),U5o=r(h3,` property of the config object (either
passed as an argument or loaded from `),fde=n(h3,"CODE",{});var Ort=s(fde);J5o=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),Y5o=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n(h3,"CODE",{});var Vrt=s(mde);K5o=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),Z5o=r(h3,":"),h3.forEach(t),eCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);b2=n(H,"LI",{});var L0e=s(b2);gde=n(L0e,"STRONG",{});var Xrt=s(gde);oCo=r(Xrt,"albert"),Xrt.forEach(t),rCo=r(L0e," \u2014 "),Tj=n(L0e,"A",{href:!0});var zrt=s(Tj);tCo=r(zrt,"AlbertForMaskedLM"),zrt.forEach(t),aCo=r(L0e," (ALBERT model)"),L0e.forEach(t),nCo=i(H),v2=n(H,"LI",{});var x0e=s(v2);hde=n(x0e,"STRONG",{});var Qrt=s(hde);sCo=r(Qrt,"bart"),Qrt.forEach(t),lCo=r(x0e," \u2014 "),Mj=n(x0e,"A",{href:!0});var Wrt=s(Mj);iCo=r(Wrt,"BartForConditionalGeneration"),Wrt.forEach(t),dCo=r(x0e," (BART model)"),x0e.forEach(t),cCo=i(H),F2=n(H,"LI",{});var $0e=s(F2);pde=n($0e,"STRONG",{});var Hrt=s(pde);fCo=r(Hrt,"bert"),Hrt.forEach(t),mCo=r($0e," \u2014 "),Ej=n($0e,"A",{href:!0});var Urt=s(Ej);gCo=r(Urt,"BertForMaskedLM"),Urt.forEach(t),hCo=r($0e," (BERT model)"),$0e.forEach(t),pCo=i(H),T2=n(H,"LI",{});var k0e=s(T2);ude=n(k0e,"STRONG",{});var Jrt=s(ude);uCo=r(Jrt,"big_bird"),Jrt.forEach(t),_Co=r(k0e," \u2014 "),Cj=n(k0e,"A",{href:!0});var Yrt=s(Cj);bCo=r(Yrt,"BigBirdForMaskedLM"),Yrt.forEach(t),vCo=r(k0e," (BigBird model)"),k0e.forEach(t),FCo=i(H),M2=n(H,"LI",{});var S0e=s(M2);_de=n(S0e,"STRONG",{});var Krt=s(_de);TCo=r(Krt,"camembert"),Krt.forEach(t),MCo=r(S0e," \u2014 "),wj=n(S0e,"A",{href:!0});var Zrt=s(wj);ECo=r(Zrt,"CamembertForMaskedLM"),Zrt.forEach(t),CCo=r(S0e," (CamemBERT model)"),S0e.forEach(t),wCo=i(H),E2=n(H,"LI",{});var R0e=s(E2);bde=n(R0e,"STRONG",{});var ett=s(bde);ACo=r(ett,"convbert"),ett.forEach(t),yCo=r(R0e," \u2014 "),Aj=n(R0e,"A",{href:!0});var ott=s(Aj);LCo=r(ott,"ConvBertForMaskedLM"),ott.forEach(t),xCo=r(R0e," (ConvBERT model)"),R0e.forEach(t),$Co=i(H),C2=n(H,"LI",{});var B0e=s(C2);vde=n(B0e,"STRONG",{});var rtt=s(vde);kCo=r(rtt,"data2vec-text"),rtt.forEach(t),SCo=r(B0e," \u2014 "),yj=n(B0e,"A",{href:!0});var ttt=s(yj);RCo=r(ttt,"Data2VecTextForMaskedLM"),ttt.forEach(t),BCo=r(B0e," (Data2VecText model)"),B0e.forEach(t),PCo=i(H),w2=n(H,"LI",{});var P0e=s(w2);Fde=n(P0e,"STRONG",{});var att=s(Fde);ICo=r(att,"deberta"),att.forEach(t),qCo=r(P0e," \u2014 "),Lj=n(P0e,"A",{href:!0});var ntt=s(Lj);NCo=r(ntt,"DebertaForMaskedLM"),ntt.forEach(t),jCo=r(P0e," (DeBERTa model)"),P0e.forEach(t),DCo=i(H),A2=n(H,"LI",{});var I0e=s(A2);Tde=n(I0e,"STRONG",{});var stt=s(Tde);GCo=r(stt,"deberta-v2"),stt.forEach(t),OCo=r(I0e," \u2014 "),xj=n(I0e,"A",{href:!0});var ltt=s(xj);VCo=r(ltt,"DebertaV2ForMaskedLM"),ltt.forEach(t),XCo=r(I0e," (DeBERTa-v2 model)"),I0e.forEach(t),zCo=i(H),y2=n(H,"LI",{});var q0e=s(y2);Mde=n(q0e,"STRONG",{});var itt=s(Mde);QCo=r(itt,"distilbert"),itt.forEach(t),WCo=r(q0e," \u2014 "),$j=n(q0e,"A",{href:!0});var dtt=s($j);HCo=r(dtt,"DistilBertForMaskedLM"),dtt.forEach(t),UCo=r(q0e," (DistilBERT model)"),q0e.forEach(t),JCo=i(H),L2=n(H,"LI",{});var N0e=s(L2);Ede=n(N0e,"STRONG",{});var ctt=s(Ede);YCo=r(ctt,"electra"),ctt.forEach(t),KCo=r(N0e," \u2014 "),kj=n(N0e,"A",{href:!0});var ftt=s(kj);ZCo=r(ftt,"ElectraForMaskedLM"),ftt.forEach(t),e3o=r(N0e," (ELECTRA model)"),N0e.forEach(t),o3o=i(H),x2=n(H,"LI",{});var j0e=s(x2);Cde=n(j0e,"STRONG",{});var mtt=s(Cde);r3o=r(mtt,"flaubert"),mtt.forEach(t),t3o=r(j0e," \u2014 "),Sj=n(j0e,"A",{href:!0});var gtt=s(Sj);a3o=r(gtt,"FlaubertWithLMHeadModel"),gtt.forEach(t),n3o=r(j0e," (FlauBERT model)"),j0e.forEach(t),s3o=i(H),$2=n(H,"LI",{});var D0e=s($2);wde=n(D0e,"STRONG",{});var htt=s(wde);l3o=r(htt,"fnet"),htt.forEach(t),i3o=r(D0e," \u2014 "),Rj=n(D0e,"A",{href:!0});var ptt=s(Rj);d3o=r(ptt,"FNetForMaskedLM"),ptt.forEach(t),c3o=r(D0e," (FNet model)"),D0e.forEach(t),f3o=i(H),k2=n(H,"LI",{});var G0e=s(k2);Ade=n(G0e,"STRONG",{});var utt=s(Ade);m3o=r(utt,"funnel"),utt.forEach(t),g3o=r(G0e," \u2014 "),Bj=n(G0e,"A",{href:!0});var _tt=s(Bj);h3o=r(_tt,"FunnelForMaskedLM"),_tt.forEach(t),p3o=r(G0e," (Funnel Transformer model)"),G0e.forEach(t),u3o=i(H),S2=n(H,"LI",{});var O0e=s(S2);yde=n(O0e,"STRONG",{});var btt=s(yde);_3o=r(btt,"ibert"),btt.forEach(t),b3o=r(O0e," \u2014 "),Pj=n(O0e,"A",{href:!0});var vtt=s(Pj);v3o=r(vtt,"IBertForMaskedLM"),vtt.forEach(t),F3o=r(O0e," (I-BERT model)"),O0e.forEach(t),T3o=i(H),R2=n(H,"LI",{});var V0e=s(R2);Lde=n(V0e,"STRONG",{});var Ftt=s(Lde);M3o=r(Ftt,"layoutlm"),Ftt.forEach(t),E3o=r(V0e," \u2014 "),Ij=n(V0e,"A",{href:!0});var Ttt=s(Ij);C3o=r(Ttt,"LayoutLMForMaskedLM"),Ttt.forEach(t),w3o=r(V0e," (LayoutLM model)"),V0e.forEach(t),A3o=i(H),B2=n(H,"LI",{});var X0e=s(B2);xde=n(X0e,"STRONG",{});var Mtt=s(xde);y3o=r(Mtt,"longformer"),Mtt.forEach(t),L3o=r(X0e," \u2014 "),qj=n(X0e,"A",{href:!0});var Ett=s(qj);x3o=r(Ett,"LongformerForMaskedLM"),Ett.forEach(t),$3o=r(X0e," (Longformer model)"),X0e.forEach(t),k3o=i(H),P2=n(H,"LI",{});var z0e=s(P2);$de=n(z0e,"STRONG",{});var Ctt=s($de);S3o=r(Ctt,"mbart"),Ctt.forEach(t),R3o=r(z0e," \u2014 "),Nj=n(z0e,"A",{href:!0});var wtt=s(Nj);B3o=r(wtt,"MBartForConditionalGeneration"),wtt.forEach(t),P3o=r(z0e," (mBART model)"),z0e.forEach(t),I3o=i(H),I2=n(H,"LI",{});var Q0e=s(I2);kde=n(Q0e,"STRONG",{});var Att=s(kde);q3o=r(Att,"megatron-bert"),Att.forEach(t),N3o=r(Q0e," \u2014 "),jj=n(Q0e,"A",{href:!0});var ytt=s(jj);j3o=r(ytt,"MegatronBertForMaskedLM"),ytt.forEach(t),D3o=r(Q0e," (MegatronBert model)"),Q0e.forEach(t),G3o=i(H),q2=n(H,"LI",{});var W0e=s(q2);Sde=n(W0e,"STRONG",{});var Ltt=s(Sde);O3o=r(Ltt,"mobilebert"),Ltt.forEach(t),V3o=r(W0e," \u2014 "),Dj=n(W0e,"A",{href:!0});var xtt=s(Dj);X3o=r(xtt,"MobileBertForMaskedLM"),xtt.forEach(t),z3o=r(W0e," (MobileBERT model)"),W0e.forEach(t),Q3o=i(H),N2=n(H,"LI",{});var H0e=s(N2);Rde=n(H0e,"STRONG",{});var $tt=s(Rde);W3o=r($tt,"mpnet"),$tt.forEach(t),H3o=r(H0e," \u2014 "),Gj=n(H0e,"A",{href:!0});var ktt=s(Gj);U3o=r(ktt,"MPNetForMaskedLM"),ktt.forEach(t),J3o=r(H0e," (MPNet model)"),H0e.forEach(t),Y3o=i(H),j2=n(H,"LI",{});var U0e=s(j2);Bde=n(U0e,"STRONG",{});var Stt=s(Bde);K3o=r(Stt,"nystromformer"),Stt.forEach(t),Z3o=r(U0e," \u2014 "),Oj=n(U0e,"A",{href:!0});var Rtt=s(Oj);ewo=r(Rtt,"NystromformerForMaskedLM"),Rtt.forEach(t),owo=r(U0e," (Nystromformer model)"),U0e.forEach(t),rwo=i(H),D2=n(H,"LI",{});var J0e=s(D2);Pde=n(J0e,"STRONG",{});var Btt=s(Pde);two=r(Btt,"perceiver"),Btt.forEach(t),awo=r(J0e," \u2014 "),Vj=n(J0e,"A",{href:!0});var Ptt=s(Vj);nwo=r(Ptt,"PerceiverForMaskedLM"),Ptt.forEach(t),swo=r(J0e," (Perceiver model)"),J0e.forEach(t),lwo=i(H),G2=n(H,"LI",{});var Y0e=s(G2);Ide=n(Y0e,"STRONG",{});var Itt=s(Ide);iwo=r(Itt,"qdqbert"),Itt.forEach(t),dwo=r(Y0e," \u2014 "),Xj=n(Y0e,"A",{href:!0});var qtt=s(Xj);cwo=r(qtt,"QDQBertForMaskedLM"),qtt.forEach(t),fwo=r(Y0e," (QDQBert model)"),Y0e.forEach(t),mwo=i(H),O2=n(H,"LI",{});var K0e=s(O2);qde=n(K0e,"STRONG",{});var Ntt=s(qde);gwo=r(Ntt,"reformer"),Ntt.forEach(t),hwo=r(K0e," \u2014 "),zj=n(K0e,"A",{href:!0});var jtt=s(zj);pwo=r(jtt,"ReformerForMaskedLM"),jtt.forEach(t),uwo=r(K0e," (Reformer model)"),K0e.forEach(t),_wo=i(H),V2=n(H,"LI",{});var Z0e=s(V2);Nde=n(Z0e,"STRONG",{});var Dtt=s(Nde);bwo=r(Dtt,"rembert"),Dtt.forEach(t),vwo=r(Z0e," \u2014 "),Qj=n(Z0e,"A",{href:!0});var Gtt=s(Qj);Fwo=r(Gtt,"RemBertForMaskedLM"),Gtt.forEach(t),Two=r(Z0e," (RemBERT model)"),Z0e.forEach(t),Mwo=i(H),X2=n(H,"LI",{});var eye=s(X2);jde=n(eye,"STRONG",{});var Ott=s(jde);Ewo=r(Ott,"roberta"),Ott.forEach(t),Cwo=r(eye," \u2014 "),Wj=n(eye,"A",{href:!0});var Vtt=s(Wj);wwo=r(Vtt,"RobertaForMaskedLM"),Vtt.forEach(t),Awo=r(eye," (RoBERTa model)"),eye.forEach(t),ywo=i(H),z2=n(H,"LI",{});var oye=s(z2);Dde=n(oye,"STRONG",{});var Xtt=s(Dde);Lwo=r(Xtt,"roformer"),Xtt.forEach(t),xwo=r(oye," \u2014 "),Hj=n(oye,"A",{href:!0});var ztt=s(Hj);$wo=r(ztt,"RoFormerForMaskedLM"),ztt.forEach(t),kwo=r(oye," (RoFormer model)"),oye.forEach(t),Swo=i(H),Q2=n(H,"LI",{});var rye=s(Q2);Gde=n(rye,"STRONG",{});var Qtt=s(Gde);Rwo=r(Qtt,"squeezebert"),Qtt.forEach(t),Bwo=r(rye," \u2014 "),Uj=n(rye,"A",{href:!0});var Wtt=s(Uj);Pwo=r(Wtt,"SqueezeBertForMaskedLM"),Wtt.forEach(t),Iwo=r(rye," (SqueezeBERT model)"),rye.forEach(t),qwo=i(H),W2=n(H,"LI",{});var tye=s(W2);Ode=n(tye,"STRONG",{});var Htt=s(Ode);Nwo=r(Htt,"tapas"),Htt.forEach(t),jwo=r(tye," \u2014 "),Jj=n(tye,"A",{href:!0});var Utt=s(Jj);Dwo=r(Utt,"TapasForMaskedLM"),Utt.forEach(t),Gwo=r(tye," (TAPAS model)"),tye.forEach(t),Owo=i(H),H2=n(H,"LI",{});var aye=s(H2);Vde=n(aye,"STRONG",{});var Jtt=s(Vde);Vwo=r(Jtt,"wav2vec2"),Jtt.forEach(t),Xwo=r(aye," \u2014 "),Xde=n(aye,"CODE",{});var Ytt=s(Xde);zwo=r(Ytt,"Wav2Vec2ForMaskedLM"),Ytt.forEach(t),Qwo=r(aye," (Wav2Vec2 model)"),aye.forEach(t),Wwo=i(H),U2=n(H,"LI",{});var nye=s(U2);zde=n(nye,"STRONG",{});var Ktt=s(zde);Hwo=r(Ktt,"xlm"),Ktt.forEach(t),Uwo=r(nye," \u2014 "),Yj=n(nye,"A",{href:!0});var Ztt=s(Yj);Jwo=r(Ztt,"XLMWithLMHeadModel"),Ztt.forEach(t),Ywo=r(nye," (XLM model)"),nye.forEach(t),Kwo=i(H),J2=n(H,"LI",{});var sye=s(J2);Qde=n(sye,"STRONG",{});var eat=s(Qde);Zwo=r(eat,"xlm-roberta"),eat.forEach(t),eAo=r(sye," \u2014 "),Kj=n(sye,"A",{href:!0});var oat=s(Kj);oAo=r(oat,"XLMRobertaForMaskedLM"),oat.forEach(t),rAo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),tAo=i(H),Y2=n(H,"LI",{});var lye=s(Y2);Wde=n(lye,"STRONG",{});var rat=s(Wde);aAo=r(rat,"xlm-roberta-xl"),rat.forEach(t),nAo=r(lye," \u2014 "),Zj=n(lye,"A",{href:!0});var tat=s(Zj);sAo=r(tat,"XLMRobertaXLForMaskedLM"),tat.forEach(t),lAo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),iAo=i(H),K2=n(H,"LI",{});var iye=s(K2);Hde=n(iye,"STRONG",{});var aat=s(Hde);dAo=r(aat,"yoso"),aat.forEach(t),cAo=r(iye," \u2014 "),eD=n(iye,"A",{href:!0});var nat=s(eD);fAo=r(nat,"YosoForMaskedLM"),nat.forEach(t),mAo=r(iye," (YOSO model)"),iye.forEach(t),H.forEach(t),gAo=i(ra),Z2=n(ra,"P",{});var dye=s(Z2);hAo=r(dye,"The model is set in evaluation mode by default using "),Ude=n(dye,"CODE",{});var sat=s(Ude);pAo=r(sat,"model.eval()"),sat.forEach(t),uAo=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(dye,"CODE",{});var lat=s(Jde);_Ao=r(lat,"model.train()"),lat.forEach(t),dye.forEach(t),bAo=i(ra),T(e1.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),jIe=i(f),Pi=n(f,"H2",{class:!0});var VNe=s(Pi);o1=n(VNe,"A",{id:!0,class:!0,href:!0});var iat=s(o1);Yde=n(iat,"SPAN",{});var dat=s(Yde);T(YA.$$.fragment,dat),dat.forEach(t),iat.forEach(t),vAo=i(VNe),Kde=n(VNe,"SPAN",{});var cat=s(Kde);FAo=r(cat,"AutoModelForSeq2SeqLM"),cat.forEach(t),VNe.forEach(t),DIe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(KA.$$.fragment,zs),TAo=i(zs),Ii=n(zs,"P",{});var RK=s(Ii);MAo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oD=n(RK,"A",{href:!0});var fat=s(oD);EAo=r(fat,"from_pretrained()"),fat.forEach(t),CAo=r(RK," class method or the "),rD=n(RK,"A",{href:!0});var mat=s(rD);wAo=r(mat,"from_config()"),mat.forEach(t),AAo=r(RK,` class
method.`),RK.forEach(t),yAo=i(zs),ZA=n(zs,"P",{});var XNe=s(ZA);LAo=r(XNe,"This class cannot be instantiated directly using "),Zde=n(XNe,"CODE",{});var gat=s(Zde);xAo=r(gat,"__init__()"),gat.forEach(t),$Ao=r(XNe," (throws an error)."),XNe.forEach(t),kAo=i(zs),nt=n(zs,"DIV",{class:!0});var p3=s(nt);T(e0.$$.fragment,p3),SAo=i(p3),ece=n(p3,"P",{});var hat=s(ece);RAo=r(hat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hat.forEach(t),BAo=i(p3),qi=n(p3,"P",{});var BK=s(qi);PAo=r(BK,`Note:
Loading a model from its configuration file does `),oce=n(BK,"STRONG",{});var pat=s(oce);IAo=r(pat,"not"),pat.forEach(t),qAo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=n(BK,"A",{href:!0});var uat=s(tD);NAo=r(uat,"from_pretrained()"),uat.forEach(t),jAo=r(BK," to load the model weights."),BK.forEach(t),DAo=i(p3),T(r1.$$.fragment,p3),p3.forEach(t),GAo=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(o0.$$.fragment,ta),OAo=i(ta),rce=n(ta,"P",{});var _at=s(rce);VAo=r(_at,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_at.forEach(t),XAo=i(ta),$a=n(ta,"P",{});var u3=s($a);zAo=r(u3,"The model class to instantiate is selected based on the "),tce=n(u3,"CODE",{});var bat=s(tce);QAo=r(bat,"model_type"),bat.forEach(t),WAo=r(u3,` property of the config object (either
passed as an argument or loaded from `),ace=n(u3,"CODE",{});var vat=s(ace);HAo=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),UAo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(u3,"CODE",{});var Fat=s(nce);JAo=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),YAo=r(u3,":"),u3.forEach(t),KAo=i(ta),he=n(ta,"UL",{});var ue=s(he);t1=n(ue,"LI",{});var cye=s(t1);sce=n(cye,"STRONG",{});var Tat=s(sce);ZAo=r(Tat,"bart"),Tat.forEach(t),e0o=r(cye," \u2014 "),aD=n(cye,"A",{href:!0});var Mat=s(aD);o0o=r(Mat,"BartForConditionalGeneration"),Mat.forEach(t),r0o=r(cye," (BART model)"),cye.forEach(t),t0o=i(ue),a1=n(ue,"LI",{});var fye=s(a1);lce=n(fye,"STRONG",{});var Eat=s(lce);a0o=r(Eat,"bigbird_pegasus"),Eat.forEach(t),n0o=r(fye," \u2014 "),nD=n(fye,"A",{href:!0});var Cat=s(nD);s0o=r(Cat,"BigBirdPegasusForConditionalGeneration"),Cat.forEach(t),l0o=r(fye," (BigBirdPegasus model)"),fye.forEach(t),i0o=i(ue),n1=n(ue,"LI",{});var mye=s(n1);ice=n(mye,"STRONG",{});var wat=s(ice);d0o=r(wat,"blenderbot"),wat.forEach(t),c0o=r(mye," \u2014 "),sD=n(mye,"A",{href:!0});var Aat=s(sD);f0o=r(Aat,"BlenderbotForConditionalGeneration"),Aat.forEach(t),m0o=r(mye," (Blenderbot model)"),mye.forEach(t),g0o=i(ue),s1=n(ue,"LI",{});var gye=s(s1);dce=n(gye,"STRONG",{});var yat=s(dce);h0o=r(yat,"blenderbot-small"),yat.forEach(t),p0o=r(gye," \u2014 "),lD=n(gye,"A",{href:!0});var Lat=s(lD);u0o=r(Lat,"BlenderbotSmallForConditionalGeneration"),Lat.forEach(t),_0o=r(gye," (BlenderbotSmall model)"),gye.forEach(t),b0o=i(ue),l1=n(ue,"LI",{});var hye=s(l1);cce=n(hye,"STRONG",{});var xat=s(cce);v0o=r(xat,"encoder-decoder"),xat.forEach(t),F0o=r(hye," \u2014 "),iD=n(hye,"A",{href:!0});var $at=s(iD);T0o=r($at,"EncoderDecoderModel"),$at.forEach(t),M0o=r(hye," (Encoder decoder model)"),hye.forEach(t),E0o=i(ue),i1=n(ue,"LI",{});var pye=s(i1);fce=n(pye,"STRONG",{});var kat=s(fce);C0o=r(kat,"fsmt"),kat.forEach(t),w0o=r(pye," \u2014 "),dD=n(pye,"A",{href:!0});var Sat=s(dD);A0o=r(Sat,"FSMTForConditionalGeneration"),Sat.forEach(t),y0o=r(pye," (FairSeq Machine-Translation model)"),pye.forEach(t),L0o=i(ue),d1=n(ue,"LI",{});var uye=s(d1);mce=n(uye,"STRONG",{});var Rat=s(mce);x0o=r(Rat,"led"),Rat.forEach(t),$0o=r(uye," \u2014 "),cD=n(uye,"A",{href:!0});var Bat=s(cD);k0o=r(Bat,"LEDForConditionalGeneration"),Bat.forEach(t),S0o=r(uye," (LED model)"),uye.forEach(t),R0o=i(ue),c1=n(ue,"LI",{});var _ye=s(c1);gce=n(_ye,"STRONG",{});var Pat=s(gce);B0o=r(Pat,"longt5"),Pat.forEach(t),P0o=r(_ye," \u2014 "),fD=n(_ye,"A",{href:!0});var Iat=s(fD);I0o=r(Iat,"LongT5ForConditionalGeneration"),Iat.forEach(t),q0o=r(_ye," (LongT5 model)"),_ye.forEach(t),N0o=i(ue),f1=n(ue,"LI",{});var bye=s(f1);hce=n(bye,"STRONG",{});var qat=s(hce);j0o=r(qat,"m2m_100"),qat.forEach(t),D0o=r(bye," \u2014 "),mD=n(bye,"A",{href:!0});var Nat=s(mD);G0o=r(Nat,"M2M100ForConditionalGeneration"),Nat.forEach(t),O0o=r(bye," (M2M100 model)"),bye.forEach(t),V0o=i(ue),m1=n(ue,"LI",{});var vye=s(m1);pce=n(vye,"STRONG",{});var jat=s(pce);X0o=r(jat,"marian"),jat.forEach(t),z0o=r(vye," \u2014 "),gD=n(vye,"A",{href:!0});var Dat=s(gD);Q0o=r(Dat,"MarianMTModel"),Dat.forEach(t),W0o=r(vye," (Marian model)"),vye.forEach(t),H0o=i(ue),g1=n(ue,"LI",{});var Fye=s(g1);uce=n(Fye,"STRONG",{});var Gat=s(uce);U0o=r(Gat,"mbart"),Gat.forEach(t),J0o=r(Fye," \u2014 "),hD=n(Fye,"A",{href:!0});var Oat=s(hD);Y0o=r(Oat,"MBartForConditionalGeneration"),Oat.forEach(t),K0o=r(Fye," (mBART model)"),Fye.forEach(t),Z0o=i(ue),h1=n(ue,"LI",{});var Tye=s(h1);_ce=n(Tye,"STRONG",{});var Vat=s(_ce);eyo=r(Vat,"mt5"),Vat.forEach(t),oyo=r(Tye," \u2014 "),pD=n(Tye,"A",{href:!0});var Xat=s(pD);ryo=r(Xat,"MT5ForConditionalGeneration"),Xat.forEach(t),tyo=r(Tye," (mT5 model)"),Tye.forEach(t),ayo=i(ue),p1=n(ue,"LI",{});var Mye=s(p1);bce=n(Mye,"STRONG",{});var zat=s(bce);nyo=r(zat,"pegasus"),zat.forEach(t),syo=r(Mye," \u2014 "),uD=n(Mye,"A",{href:!0});var Qat=s(uD);lyo=r(Qat,"PegasusForConditionalGeneration"),Qat.forEach(t),iyo=r(Mye," (Pegasus model)"),Mye.forEach(t),dyo=i(ue),u1=n(ue,"LI",{});var Eye=s(u1);vce=n(Eye,"STRONG",{});var Wat=s(vce);cyo=r(Wat,"plbart"),Wat.forEach(t),fyo=r(Eye," \u2014 "),_D=n(Eye,"A",{href:!0});var Hat=s(_D);myo=r(Hat,"PLBartForConditionalGeneration"),Hat.forEach(t),gyo=r(Eye," (PLBart model)"),Eye.forEach(t),hyo=i(ue),_1=n(ue,"LI",{});var Cye=s(_1);Fce=n(Cye,"STRONG",{});var Uat=s(Fce);pyo=r(Uat,"prophetnet"),Uat.forEach(t),uyo=r(Cye," \u2014 "),bD=n(Cye,"A",{href:!0});var Jat=s(bD);_yo=r(Jat,"ProphetNetForConditionalGeneration"),Jat.forEach(t),byo=r(Cye," (ProphetNet model)"),Cye.forEach(t),vyo=i(ue),b1=n(ue,"LI",{});var wye=s(b1);Tce=n(wye,"STRONG",{});var Yat=s(Tce);Fyo=r(Yat,"t5"),Yat.forEach(t),Tyo=r(wye," \u2014 "),vD=n(wye,"A",{href:!0});var Kat=s(vD);Myo=r(Kat,"T5ForConditionalGeneration"),Kat.forEach(t),Eyo=r(wye," (T5 model)"),wye.forEach(t),Cyo=i(ue),v1=n(ue,"LI",{});var Aye=s(v1);Mce=n(Aye,"STRONG",{});var Zat=s(Mce);wyo=r(Zat,"xlm-prophetnet"),Zat.forEach(t),Ayo=r(Aye," \u2014 "),FD=n(Aye,"A",{href:!0});var ent=s(FD);yyo=r(ent,"XLMProphetNetForConditionalGeneration"),ent.forEach(t),Lyo=r(Aye," (XLMProphetNet model)"),Aye.forEach(t),ue.forEach(t),xyo=i(ta),F1=n(ta,"P",{});var yye=s(F1);$yo=r(yye,"The model is set in evaluation mode by default using "),Ece=n(yye,"CODE",{});var ont=s(Ece);kyo=r(ont,"model.eval()"),ont.forEach(t),Syo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(yye,"CODE",{});var rnt=s(Cce);Ryo=r(rnt,"model.train()"),rnt.forEach(t),yye.forEach(t),Byo=i(ta),T(T1.$$.fragment,ta),ta.forEach(t),zs.forEach(t),GIe=i(f),Ni=n(f,"H2",{class:!0});var zNe=s(Ni);M1=n(zNe,"A",{id:!0,class:!0,href:!0});var tnt=s(M1);wce=n(tnt,"SPAN",{});var ant=s(wce);T(r0.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),Pyo=i(zNe),Ace=n(zNe,"SPAN",{});var nnt=s(Ace);Iyo=r(nnt,"AutoModelForSequenceClassification"),nnt.forEach(t),zNe.forEach(t),OIe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(t0.$$.fragment,Qs),qyo=i(Qs),ji=n(Qs,"P",{});var PK=s(ji);Nyo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TD=n(PK,"A",{href:!0});var snt=s(TD);jyo=r(snt,"from_pretrained()"),snt.forEach(t),Dyo=r(PK," class method or the "),MD=n(PK,"A",{href:!0});var lnt=s(MD);Gyo=r(lnt,"from_config()"),lnt.forEach(t),Oyo=r(PK,` class
method.`),PK.forEach(t),Vyo=i(Qs),a0=n(Qs,"P",{});var QNe=s(a0);Xyo=r(QNe,"This class cannot be instantiated directly using "),yce=n(QNe,"CODE",{});var int=s(yce);zyo=r(int,"__init__()"),int.forEach(t),Qyo=r(QNe," (throws an error)."),QNe.forEach(t),Wyo=i(Qs),st=n(Qs,"DIV",{class:!0});var _3=s(st);T(n0.$$.fragment,_3),Hyo=i(_3),Lce=n(_3,"P",{});var dnt=s(Lce);Uyo=r(dnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dnt.forEach(t),Jyo=i(_3),Di=n(_3,"P",{});var IK=s(Di);Yyo=r(IK,`Note:
Loading a model from its configuration file does `),xce=n(IK,"STRONG",{});var cnt=s(xce);Kyo=r(cnt,"not"),cnt.forEach(t),Zyo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(IK,"A",{href:!0});var fnt=s(ED);eLo=r(fnt,"from_pretrained()"),fnt.forEach(t),oLo=r(IK," to load the model weights."),IK.forEach(t),rLo=i(_3),T(E1.$$.fragment,_3),_3.forEach(t),tLo=i(Qs),Ze=n(Qs,"DIV",{class:!0});var aa=s(Ze);T(s0.$$.fragment,aa),aLo=i(aa),$ce=n(aa,"P",{});var mnt=s($ce);nLo=r(mnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mnt.forEach(t),sLo=i(aa),ka=n(aa,"P",{});var b3=s(ka);lLo=r(b3,"The model class to instantiate is selected based on the "),kce=n(b3,"CODE",{});var gnt=s(kce);iLo=r(gnt,"model_type"),gnt.forEach(t),dLo=r(b3,` property of the config object (either
passed as an argument or loaded from `),Sce=n(b3,"CODE",{});var hnt=s(Sce);cLo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),fLo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(b3,"CODE",{});var pnt=s(Rce);mLo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),gLo=r(b3,":"),b3.forEach(t),hLo=i(aa),q=n(aa,"UL",{});var j=s(q);C1=n(j,"LI",{});var Lye=s(C1);Bce=n(Lye,"STRONG",{});var unt=s(Bce);pLo=r(unt,"albert"),unt.forEach(t),uLo=r(Lye," \u2014 "),CD=n(Lye,"A",{href:!0});var _nt=s(CD);_Lo=r(_nt,"AlbertForSequenceClassification"),_nt.forEach(t),bLo=r(Lye," (ALBERT model)"),Lye.forEach(t),vLo=i(j),w1=n(j,"LI",{});var xye=s(w1);Pce=n(xye,"STRONG",{});var bnt=s(Pce);FLo=r(bnt,"bart"),bnt.forEach(t),TLo=r(xye," \u2014 "),wD=n(xye,"A",{href:!0});var vnt=s(wD);MLo=r(vnt,"BartForSequenceClassification"),vnt.forEach(t),ELo=r(xye," (BART model)"),xye.forEach(t),CLo=i(j),A1=n(j,"LI",{});var $ye=s(A1);Ice=n($ye,"STRONG",{});var Fnt=s(Ice);wLo=r(Fnt,"bert"),Fnt.forEach(t),ALo=r($ye," \u2014 "),AD=n($ye,"A",{href:!0});var Tnt=s(AD);yLo=r(Tnt,"BertForSequenceClassification"),Tnt.forEach(t),LLo=r($ye," (BERT model)"),$ye.forEach(t),xLo=i(j),y1=n(j,"LI",{});var kye=s(y1);qce=n(kye,"STRONG",{});var Mnt=s(qce);$Lo=r(Mnt,"big_bird"),Mnt.forEach(t),kLo=r(kye," \u2014 "),yD=n(kye,"A",{href:!0});var Ent=s(yD);SLo=r(Ent,"BigBirdForSequenceClassification"),Ent.forEach(t),RLo=r(kye," (BigBird model)"),kye.forEach(t),BLo=i(j),L1=n(j,"LI",{});var Sye=s(L1);Nce=n(Sye,"STRONG",{});var Cnt=s(Nce);PLo=r(Cnt,"bigbird_pegasus"),Cnt.forEach(t),ILo=r(Sye," \u2014 "),LD=n(Sye,"A",{href:!0});var wnt=s(LD);qLo=r(wnt,"BigBirdPegasusForSequenceClassification"),wnt.forEach(t),NLo=r(Sye," (BigBirdPegasus model)"),Sye.forEach(t),jLo=i(j),x1=n(j,"LI",{});var Rye=s(x1);jce=n(Rye,"STRONG",{});var Ant=s(jce);DLo=r(Ant,"camembert"),Ant.forEach(t),GLo=r(Rye," \u2014 "),xD=n(Rye,"A",{href:!0});var ynt=s(xD);OLo=r(ynt,"CamembertForSequenceClassification"),ynt.forEach(t),VLo=r(Rye," (CamemBERT model)"),Rye.forEach(t),XLo=i(j),$1=n(j,"LI",{});var Bye=s($1);Dce=n(Bye,"STRONG",{});var Lnt=s(Dce);zLo=r(Lnt,"canine"),Lnt.forEach(t),QLo=r(Bye," \u2014 "),$D=n(Bye,"A",{href:!0});var xnt=s($D);WLo=r(xnt,"CanineForSequenceClassification"),xnt.forEach(t),HLo=r(Bye," (Canine model)"),Bye.forEach(t),ULo=i(j),k1=n(j,"LI",{});var Pye=s(k1);Gce=n(Pye,"STRONG",{});var $nt=s(Gce);JLo=r($nt,"convbert"),$nt.forEach(t),YLo=r(Pye," \u2014 "),kD=n(Pye,"A",{href:!0});var knt=s(kD);KLo=r(knt,"ConvBertForSequenceClassification"),knt.forEach(t),ZLo=r(Pye," (ConvBERT model)"),Pye.forEach(t),e8o=i(j),S1=n(j,"LI",{});var Iye=s(S1);Oce=n(Iye,"STRONG",{});var Snt=s(Oce);o8o=r(Snt,"ctrl"),Snt.forEach(t),r8o=r(Iye," \u2014 "),SD=n(Iye,"A",{href:!0});var Rnt=s(SD);t8o=r(Rnt,"CTRLForSequenceClassification"),Rnt.forEach(t),a8o=r(Iye," (CTRL model)"),Iye.forEach(t),n8o=i(j),R1=n(j,"LI",{});var qye=s(R1);Vce=n(qye,"STRONG",{});var Bnt=s(Vce);s8o=r(Bnt,"data2vec-text"),Bnt.forEach(t),l8o=r(qye," \u2014 "),RD=n(qye,"A",{href:!0});var Pnt=s(RD);i8o=r(Pnt,"Data2VecTextForSequenceClassification"),Pnt.forEach(t),d8o=r(qye," (Data2VecText model)"),qye.forEach(t),c8o=i(j),B1=n(j,"LI",{});var Nye=s(B1);Xce=n(Nye,"STRONG",{});var Int=s(Xce);f8o=r(Int,"deberta"),Int.forEach(t),m8o=r(Nye," \u2014 "),BD=n(Nye,"A",{href:!0});var qnt=s(BD);g8o=r(qnt,"DebertaForSequenceClassification"),qnt.forEach(t),h8o=r(Nye," (DeBERTa model)"),Nye.forEach(t),p8o=i(j),P1=n(j,"LI",{});var jye=s(P1);zce=n(jye,"STRONG",{});var Nnt=s(zce);u8o=r(Nnt,"deberta-v2"),Nnt.forEach(t),_8o=r(jye," \u2014 "),PD=n(jye,"A",{href:!0});var jnt=s(PD);b8o=r(jnt,"DebertaV2ForSequenceClassification"),jnt.forEach(t),v8o=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),F8o=i(j),I1=n(j,"LI",{});var Dye=s(I1);Qce=n(Dye,"STRONG",{});var Dnt=s(Qce);T8o=r(Dnt,"distilbert"),Dnt.forEach(t),M8o=r(Dye," \u2014 "),ID=n(Dye,"A",{href:!0});var Gnt=s(ID);E8o=r(Gnt,"DistilBertForSequenceClassification"),Gnt.forEach(t),C8o=r(Dye," (DistilBERT model)"),Dye.forEach(t),w8o=i(j),q1=n(j,"LI",{});var Gye=s(q1);Wce=n(Gye,"STRONG",{});var Ont=s(Wce);A8o=r(Ont,"electra"),Ont.forEach(t),y8o=r(Gye," \u2014 "),qD=n(Gye,"A",{href:!0});var Vnt=s(qD);L8o=r(Vnt,"ElectraForSequenceClassification"),Vnt.forEach(t),x8o=r(Gye," (ELECTRA model)"),Gye.forEach(t),$8o=i(j),N1=n(j,"LI",{});var Oye=s(N1);Hce=n(Oye,"STRONG",{});var Xnt=s(Hce);k8o=r(Xnt,"flaubert"),Xnt.forEach(t),S8o=r(Oye," \u2014 "),ND=n(Oye,"A",{href:!0});var znt=s(ND);R8o=r(znt,"FlaubertForSequenceClassification"),znt.forEach(t),B8o=r(Oye," (FlauBERT model)"),Oye.forEach(t),P8o=i(j),j1=n(j,"LI",{});var Vye=s(j1);Uce=n(Vye,"STRONG",{});var Qnt=s(Uce);I8o=r(Qnt,"fnet"),Qnt.forEach(t),q8o=r(Vye," \u2014 "),jD=n(Vye,"A",{href:!0});var Wnt=s(jD);N8o=r(Wnt,"FNetForSequenceClassification"),Wnt.forEach(t),j8o=r(Vye," (FNet model)"),Vye.forEach(t),D8o=i(j),D1=n(j,"LI",{});var Xye=s(D1);Jce=n(Xye,"STRONG",{});var Hnt=s(Jce);G8o=r(Hnt,"funnel"),Hnt.forEach(t),O8o=r(Xye," \u2014 "),DD=n(Xye,"A",{href:!0});var Unt=s(DD);V8o=r(Unt,"FunnelForSequenceClassification"),Unt.forEach(t),X8o=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),z8o=i(j),G1=n(j,"LI",{});var zye=s(G1);Yce=n(zye,"STRONG",{});var Jnt=s(Yce);Q8o=r(Jnt,"gpt2"),Jnt.forEach(t),W8o=r(zye," \u2014 "),GD=n(zye,"A",{href:!0});var Ynt=s(GD);H8o=r(Ynt,"GPT2ForSequenceClassification"),Ynt.forEach(t),U8o=r(zye," (OpenAI GPT-2 model)"),zye.forEach(t),J8o=i(j),O1=n(j,"LI",{});var Qye=s(O1);Kce=n(Qye,"STRONG",{});var Knt=s(Kce);Y8o=r(Knt,"gpt_neo"),Knt.forEach(t),K8o=r(Qye," \u2014 "),OD=n(Qye,"A",{href:!0});var Znt=s(OD);Z8o=r(Znt,"GPTNeoForSequenceClassification"),Znt.forEach(t),exo=r(Qye," (GPT Neo model)"),Qye.forEach(t),oxo=i(j),V1=n(j,"LI",{});var Wye=s(V1);Zce=n(Wye,"STRONG",{});var est=s(Zce);rxo=r(est,"gptj"),est.forEach(t),txo=r(Wye," \u2014 "),VD=n(Wye,"A",{href:!0});var ost=s(VD);axo=r(ost,"GPTJForSequenceClassification"),ost.forEach(t),nxo=r(Wye," (GPT-J model)"),Wye.forEach(t),sxo=i(j),X1=n(j,"LI",{});var Hye=s(X1);efe=n(Hye,"STRONG",{});var rst=s(efe);lxo=r(rst,"ibert"),rst.forEach(t),ixo=r(Hye," \u2014 "),XD=n(Hye,"A",{href:!0});var tst=s(XD);dxo=r(tst,"IBertForSequenceClassification"),tst.forEach(t),cxo=r(Hye," (I-BERT model)"),Hye.forEach(t),fxo=i(j),z1=n(j,"LI",{});var Uye=s(z1);ofe=n(Uye,"STRONG",{});var ast=s(ofe);mxo=r(ast,"layoutlm"),ast.forEach(t),gxo=r(Uye," \u2014 "),zD=n(Uye,"A",{href:!0});var nst=s(zD);hxo=r(nst,"LayoutLMForSequenceClassification"),nst.forEach(t),pxo=r(Uye," (LayoutLM model)"),Uye.forEach(t),uxo=i(j),Q1=n(j,"LI",{});var Jye=s(Q1);rfe=n(Jye,"STRONG",{});var sst=s(rfe);_xo=r(sst,"layoutlmv2"),sst.forEach(t),bxo=r(Jye," \u2014 "),QD=n(Jye,"A",{href:!0});var lst=s(QD);vxo=r(lst,"LayoutLMv2ForSequenceClassification"),lst.forEach(t),Fxo=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),Txo=i(j),W1=n(j,"LI",{});var Yye=s(W1);tfe=n(Yye,"STRONG",{});var ist=s(tfe);Mxo=r(ist,"led"),ist.forEach(t),Exo=r(Yye," \u2014 "),WD=n(Yye,"A",{href:!0});var dst=s(WD);Cxo=r(dst,"LEDForSequenceClassification"),dst.forEach(t),wxo=r(Yye," (LED model)"),Yye.forEach(t),Axo=i(j),H1=n(j,"LI",{});var Kye=s(H1);afe=n(Kye,"STRONG",{});var cst=s(afe);yxo=r(cst,"longformer"),cst.forEach(t),Lxo=r(Kye," \u2014 "),HD=n(Kye,"A",{href:!0});var fst=s(HD);xxo=r(fst,"LongformerForSequenceClassification"),fst.forEach(t),$xo=r(Kye," (Longformer model)"),Kye.forEach(t),kxo=i(j),U1=n(j,"LI",{});var Zye=s(U1);nfe=n(Zye,"STRONG",{});var mst=s(nfe);Sxo=r(mst,"mbart"),mst.forEach(t),Rxo=r(Zye," \u2014 "),UD=n(Zye,"A",{href:!0});var gst=s(UD);Bxo=r(gst,"MBartForSequenceClassification"),gst.forEach(t),Pxo=r(Zye," (mBART model)"),Zye.forEach(t),Ixo=i(j),J1=n(j,"LI",{});var eLe=s(J1);sfe=n(eLe,"STRONG",{});var hst=s(sfe);qxo=r(hst,"megatron-bert"),hst.forEach(t),Nxo=r(eLe," \u2014 "),JD=n(eLe,"A",{href:!0});var pst=s(JD);jxo=r(pst,"MegatronBertForSequenceClassification"),pst.forEach(t),Dxo=r(eLe," (MegatronBert model)"),eLe.forEach(t),Gxo=i(j),Y1=n(j,"LI",{});var oLe=s(Y1);lfe=n(oLe,"STRONG",{});var ust=s(lfe);Oxo=r(ust,"mobilebert"),ust.forEach(t),Vxo=r(oLe," \u2014 "),YD=n(oLe,"A",{href:!0});var _st=s(YD);Xxo=r(_st,"MobileBertForSequenceClassification"),_st.forEach(t),zxo=r(oLe," (MobileBERT model)"),oLe.forEach(t),Qxo=i(j),K1=n(j,"LI",{});var rLe=s(K1);ife=n(rLe,"STRONG",{});var bst=s(ife);Wxo=r(bst,"mpnet"),bst.forEach(t),Hxo=r(rLe," \u2014 "),KD=n(rLe,"A",{href:!0});var vst=s(KD);Uxo=r(vst,"MPNetForSequenceClassification"),vst.forEach(t),Jxo=r(rLe," (MPNet model)"),rLe.forEach(t),Yxo=i(j),Z1=n(j,"LI",{});var tLe=s(Z1);dfe=n(tLe,"STRONG",{});var Fst=s(dfe);Kxo=r(Fst,"nystromformer"),Fst.forEach(t),Zxo=r(tLe," \u2014 "),ZD=n(tLe,"A",{href:!0});var Tst=s(ZD);e$o=r(Tst,"NystromformerForSequenceClassification"),Tst.forEach(t),o$o=r(tLe," (Nystromformer model)"),tLe.forEach(t),r$o=i(j),eb=n(j,"LI",{});var aLe=s(eb);cfe=n(aLe,"STRONG",{});var Mst=s(cfe);t$o=r(Mst,"openai-gpt"),Mst.forEach(t),a$o=r(aLe," \u2014 "),eG=n(aLe,"A",{href:!0});var Est=s(eG);n$o=r(Est,"OpenAIGPTForSequenceClassification"),Est.forEach(t),s$o=r(aLe," (OpenAI GPT model)"),aLe.forEach(t),l$o=i(j),ob=n(j,"LI",{});var nLe=s(ob);ffe=n(nLe,"STRONG",{});var Cst=s(ffe);i$o=r(Cst,"perceiver"),Cst.forEach(t),d$o=r(nLe," \u2014 "),oG=n(nLe,"A",{href:!0});var wst=s(oG);c$o=r(wst,"PerceiverForSequenceClassification"),wst.forEach(t),f$o=r(nLe," (Perceiver model)"),nLe.forEach(t),m$o=i(j),rb=n(j,"LI",{});var sLe=s(rb);mfe=n(sLe,"STRONG",{});var Ast=s(mfe);g$o=r(Ast,"plbart"),Ast.forEach(t),h$o=r(sLe," \u2014 "),rG=n(sLe,"A",{href:!0});var yst=s(rG);p$o=r(yst,"PLBartForSequenceClassification"),yst.forEach(t),u$o=r(sLe," (PLBart model)"),sLe.forEach(t),_$o=i(j),tb=n(j,"LI",{});var lLe=s(tb);gfe=n(lLe,"STRONG",{});var Lst=s(gfe);b$o=r(Lst,"qdqbert"),Lst.forEach(t),v$o=r(lLe," \u2014 "),tG=n(lLe,"A",{href:!0});var xst=s(tG);F$o=r(xst,"QDQBertForSequenceClassification"),xst.forEach(t),T$o=r(lLe," (QDQBert model)"),lLe.forEach(t),M$o=i(j),ab=n(j,"LI",{});var iLe=s(ab);hfe=n(iLe,"STRONG",{});var $st=s(hfe);E$o=r($st,"reformer"),$st.forEach(t),C$o=r(iLe," \u2014 "),aG=n(iLe,"A",{href:!0});var kst=s(aG);w$o=r(kst,"ReformerForSequenceClassification"),kst.forEach(t),A$o=r(iLe," (Reformer model)"),iLe.forEach(t),y$o=i(j),nb=n(j,"LI",{});var dLe=s(nb);pfe=n(dLe,"STRONG",{});var Sst=s(pfe);L$o=r(Sst,"rembert"),Sst.forEach(t),x$o=r(dLe," \u2014 "),nG=n(dLe,"A",{href:!0});var Rst=s(nG);$$o=r(Rst,"RemBertForSequenceClassification"),Rst.forEach(t),k$o=r(dLe," (RemBERT model)"),dLe.forEach(t),S$o=i(j),sb=n(j,"LI",{});var cLe=s(sb);ufe=n(cLe,"STRONG",{});var Bst=s(ufe);R$o=r(Bst,"roberta"),Bst.forEach(t),B$o=r(cLe," \u2014 "),sG=n(cLe,"A",{href:!0});var Pst=s(sG);P$o=r(Pst,"RobertaForSequenceClassification"),Pst.forEach(t),I$o=r(cLe," (RoBERTa model)"),cLe.forEach(t),q$o=i(j),lb=n(j,"LI",{});var fLe=s(lb);_fe=n(fLe,"STRONG",{});var Ist=s(_fe);N$o=r(Ist,"roformer"),Ist.forEach(t),j$o=r(fLe," \u2014 "),lG=n(fLe,"A",{href:!0});var qst=s(lG);D$o=r(qst,"RoFormerForSequenceClassification"),qst.forEach(t),G$o=r(fLe," (RoFormer model)"),fLe.forEach(t),O$o=i(j),ib=n(j,"LI",{});var mLe=s(ib);bfe=n(mLe,"STRONG",{});var Nst=s(bfe);V$o=r(Nst,"squeezebert"),Nst.forEach(t),X$o=r(mLe," \u2014 "),iG=n(mLe,"A",{href:!0});var jst=s(iG);z$o=r(jst,"SqueezeBertForSequenceClassification"),jst.forEach(t),Q$o=r(mLe," (SqueezeBERT model)"),mLe.forEach(t),W$o=i(j),db=n(j,"LI",{});var gLe=s(db);vfe=n(gLe,"STRONG",{});var Dst=s(vfe);H$o=r(Dst,"tapas"),Dst.forEach(t),U$o=r(gLe," \u2014 "),dG=n(gLe,"A",{href:!0});var Gst=s(dG);J$o=r(Gst,"TapasForSequenceClassification"),Gst.forEach(t),Y$o=r(gLe," (TAPAS model)"),gLe.forEach(t),K$o=i(j),cb=n(j,"LI",{});var hLe=s(cb);Ffe=n(hLe,"STRONG",{});var Ost=s(Ffe);Z$o=r(Ost,"transfo-xl"),Ost.forEach(t),eko=r(hLe," \u2014 "),cG=n(hLe,"A",{href:!0});var Vst=s(cG);oko=r(Vst,"TransfoXLForSequenceClassification"),Vst.forEach(t),rko=r(hLe," (Transformer-XL model)"),hLe.forEach(t),tko=i(j),fb=n(j,"LI",{});var pLe=s(fb);Tfe=n(pLe,"STRONG",{});var Xst=s(Tfe);ako=r(Xst,"xlm"),Xst.forEach(t),nko=r(pLe," \u2014 "),fG=n(pLe,"A",{href:!0});var zst=s(fG);sko=r(zst,"XLMForSequenceClassification"),zst.forEach(t),lko=r(pLe," (XLM model)"),pLe.forEach(t),iko=i(j),mb=n(j,"LI",{});var uLe=s(mb);Mfe=n(uLe,"STRONG",{});var Qst=s(Mfe);dko=r(Qst,"xlm-roberta"),Qst.forEach(t),cko=r(uLe," \u2014 "),mG=n(uLe,"A",{href:!0});var Wst=s(mG);fko=r(Wst,"XLMRobertaForSequenceClassification"),Wst.forEach(t),mko=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),gko=i(j),gb=n(j,"LI",{});var _Le=s(gb);Efe=n(_Le,"STRONG",{});var Hst=s(Efe);hko=r(Hst,"xlm-roberta-xl"),Hst.forEach(t),pko=r(_Le," \u2014 "),gG=n(_Le,"A",{href:!0});var Ust=s(gG);uko=r(Ust,"XLMRobertaXLForSequenceClassification"),Ust.forEach(t),_ko=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),bko=i(j),hb=n(j,"LI",{});var bLe=s(hb);Cfe=n(bLe,"STRONG",{});var Jst=s(Cfe);vko=r(Jst,"xlnet"),Jst.forEach(t),Fko=r(bLe," \u2014 "),hG=n(bLe,"A",{href:!0});var Yst=s(hG);Tko=r(Yst,"XLNetForSequenceClassification"),Yst.forEach(t),Mko=r(bLe," (XLNet model)"),bLe.forEach(t),Eko=i(j),pb=n(j,"LI",{});var vLe=s(pb);wfe=n(vLe,"STRONG",{});var Kst=s(wfe);Cko=r(Kst,"yoso"),Kst.forEach(t),wko=r(vLe," \u2014 "),pG=n(vLe,"A",{href:!0});var Zst=s(pG);Ako=r(Zst,"YosoForSequenceClassification"),Zst.forEach(t),yko=r(vLe," (YOSO model)"),vLe.forEach(t),j.forEach(t),Lko=i(aa),ub=n(aa,"P",{});var FLe=s(ub);xko=r(FLe,"The model is set in evaluation mode by default using "),Afe=n(FLe,"CODE",{});var elt=s(Afe);$ko=r(elt,"model.eval()"),elt.forEach(t),kko=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(FLe,"CODE",{});var olt=s(yfe);Sko=r(olt,"model.train()"),olt.forEach(t),FLe.forEach(t),Rko=i(aa),T(_b.$$.fragment,aa),aa.forEach(t),Qs.forEach(t),VIe=i(f),Gi=n(f,"H2",{class:!0});var WNe=s(Gi);bb=n(WNe,"A",{id:!0,class:!0,href:!0});var rlt=s(bb);Lfe=n(rlt,"SPAN",{});var tlt=s(Lfe);T(l0.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),Bko=i(WNe),xfe=n(WNe,"SPAN",{});var alt=s(xfe);Pko=r(alt,"AutoModelForMultipleChoice"),alt.forEach(t),WNe.forEach(t),XIe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(i0.$$.fragment,Ws),Iko=i(Ws),Oi=n(Ws,"P",{});var qK=s(Oi);qko=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uG=n(qK,"A",{href:!0});var nlt=s(uG);Nko=r(nlt,"from_pretrained()"),nlt.forEach(t),jko=r(qK," class method or the "),_G=n(qK,"A",{href:!0});var slt=s(_G);Dko=r(slt,"from_config()"),slt.forEach(t),Gko=r(qK,` class
method.`),qK.forEach(t),Oko=i(Ws),d0=n(Ws,"P",{});var HNe=s(d0);Vko=r(HNe,"This class cannot be instantiated directly using "),$fe=n(HNe,"CODE",{});var llt=s($fe);Xko=r(llt,"__init__()"),llt.forEach(t),zko=r(HNe," (throws an error)."),HNe.forEach(t),Qko=i(Ws),lt=n(Ws,"DIV",{class:!0});var v3=s(lt);T(c0.$$.fragment,v3),Wko=i(v3),kfe=n(v3,"P",{});var ilt=s(kfe);Hko=r(ilt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ilt.forEach(t),Uko=i(v3),Vi=n(v3,"P",{});var NK=s(Vi);Jko=r(NK,`Note:
Loading a model from its configuration file does `),Sfe=n(NK,"STRONG",{});var dlt=s(Sfe);Yko=r(dlt,"not"),dlt.forEach(t),Kko=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(NK,"A",{href:!0});var clt=s(bG);Zko=r(clt,"from_pretrained()"),clt.forEach(t),eSo=r(NK," to load the model weights."),NK.forEach(t),oSo=i(v3),T(vb.$$.fragment,v3),v3.forEach(t),rSo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(f0.$$.fragment,na),tSo=i(na),Rfe=n(na,"P",{});var flt=s(Rfe);aSo=r(flt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),flt.forEach(t),nSo=i(na),Sa=n(na,"P",{});var F3=s(Sa);sSo=r(F3,"The model class to instantiate is selected based on the "),Bfe=n(F3,"CODE",{});var mlt=s(Bfe);lSo=r(mlt,"model_type"),mlt.forEach(t),iSo=r(F3,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(F3,"CODE",{});var glt=s(Pfe);dSo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),cSo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(F3,"CODE",{});var hlt=s(Ife);fSo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),mSo=r(F3,":"),F3.forEach(t),gSo=i(na),Y=n(na,"UL",{});var K=s(Y);Fb=n(K,"LI",{});var TLe=s(Fb);qfe=n(TLe,"STRONG",{});var plt=s(qfe);hSo=r(plt,"albert"),plt.forEach(t),pSo=r(TLe," \u2014 "),vG=n(TLe,"A",{href:!0});var ult=s(vG);uSo=r(ult,"AlbertForMultipleChoice"),ult.forEach(t),_So=r(TLe," (ALBERT model)"),TLe.forEach(t),bSo=i(K),Tb=n(K,"LI",{});var MLe=s(Tb);Nfe=n(MLe,"STRONG",{});var _lt=s(Nfe);vSo=r(_lt,"bert"),_lt.forEach(t),FSo=r(MLe," \u2014 "),FG=n(MLe,"A",{href:!0});var blt=s(FG);TSo=r(blt,"BertForMultipleChoice"),blt.forEach(t),MSo=r(MLe," (BERT model)"),MLe.forEach(t),ESo=i(K),Mb=n(K,"LI",{});var ELe=s(Mb);jfe=n(ELe,"STRONG",{});var vlt=s(jfe);CSo=r(vlt,"big_bird"),vlt.forEach(t),wSo=r(ELe," \u2014 "),TG=n(ELe,"A",{href:!0});var Flt=s(TG);ASo=r(Flt,"BigBirdForMultipleChoice"),Flt.forEach(t),ySo=r(ELe," (BigBird model)"),ELe.forEach(t),LSo=i(K),Eb=n(K,"LI",{});var CLe=s(Eb);Dfe=n(CLe,"STRONG",{});var Tlt=s(Dfe);xSo=r(Tlt,"camembert"),Tlt.forEach(t),$So=r(CLe," \u2014 "),MG=n(CLe,"A",{href:!0});var Mlt=s(MG);kSo=r(Mlt,"CamembertForMultipleChoice"),Mlt.forEach(t),SSo=r(CLe," (CamemBERT model)"),CLe.forEach(t),RSo=i(K),Cb=n(K,"LI",{});var wLe=s(Cb);Gfe=n(wLe,"STRONG",{});var Elt=s(Gfe);BSo=r(Elt,"canine"),Elt.forEach(t),PSo=r(wLe," \u2014 "),EG=n(wLe,"A",{href:!0});var Clt=s(EG);ISo=r(Clt,"CanineForMultipleChoice"),Clt.forEach(t),qSo=r(wLe," (Canine model)"),wLe.forEach(t),NSo=i(K),wb=n(K,"LI",{});var ALe=s(wb);Ofe=n(ALe,"STRONG",{});var wlt=s(Ofe);jSo=r(wlt,"convbert"),wlt.forEach(t),DSo=r(ALe," \u2014 "),CG=n(ALe,"A",{href:!0});var Alt=s(CG);GSo=r(Alt,"ConvBertForMultipleChoice"),Alt.forEach(t),OSo=r(ALe," (ConvBERT model)"),ALe.forEach(t),VSo=i(K),Ab=n(K,"LI",{});var yLe=s(Ab);Vfe=n(yLe,"STRONG",{});var ylt=s(Vfe);XSo=r(ylt,"data2vec-text"),ylt.forEach(t),zSo=r(yLe," \u2014 "),wG=n(yLe,"A",{href:!0});var Llt=s(wG);QSo=r(Llt,"Data2VecTextForMultipleChoice"),Llt.forEach(t),WSo=r(yLe," (Data2VecText model)"),yLe.forEach(t),HSo=i(K),yb=n(K,"LI",{});var LLe=s(yb);Xfe=n(LLe,"STRONG",{});var xlt=s(Xfe);USo=r(xlt,"deberta-v2"),xlt.forEach(t),JSo=r(LLe," \u2014 "),AG=n(LLe,"A",{href:!0});var $lt=s(AG);YSo=r($lt,"DebertaV2ForMultipleChoice"),$lt.forEach(t),KSo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),ZSo=i(K),Lb=n(K,"LI",{});var xLe=s(Lb);zfe=n(xLe,"STRONG",{});var klt=s(zfe);eRo=r(klt,"distilbert"),klt.forEach(t),oRo=r(xLe," \u2014 "),yG=n(xLe,"A",{href:!0});var Slt=s(yG);rRo=r(Slt,"DistilBertForMultipleChoice"),Slt.forEach(t),tRo=r(xLe," (DistilBERT model)"),xLe.forEach(t),aRo=i(K),xb=n(K,"LI",{});var $Le=s(xb);Qfe=n($Le,"STRONG",{});var Rlt=s(Qfe);nRo=r(Rlt,"electra"),Rlt.forEach(t),sRo=r($Le," \u2014 "),LG=n($Le,"A",{href:!0});var Blt=s(LG);lRo=r(Blt,"ElectraForMultipleChoice"),Blt.forEach(t),iRo=r($Le," (ELECTRA model)"),$Le.forEach(t),dRo=i(K),$b=n(K,"LI",{});var kLe=s($b);Wfe=n(kLe,"STRONG",{});var Plt=s(Wfe);cRo=r(Plt,"flaubert"),Plt.forEach(t),fRo=r(kLe," \u2014 "),xG=n(kLe,"A",{href:!0});var Ilt=s(xG);mRo=r(Ilt,"FlaubertForMultipleChoice"),Ilt.forEach(t),gRo=r(kLe," (FlauBERT model)"),kLe.forEach(t),hRo=i(K),kb=n(K,"LI",{});var SLe=s(kb);Hfe=n(SLe,"STRONG",{});var qlt=s(Hfe);pRo=r(qlt,"fnet"),qlt.forEach(t),uRo=r(SLe," \u2014 "),$G=n(SLe,"A",{href:!0});var Nlt=s($G);_Ro=r(Nlt,"FNetForMultipleChoice"),Nlt.forEach(t),bRo=r(SLe," (FNet model)"),SLe.forEach(t),vRo=i(K),Sb=n(K,"LI",{});var RLe=s(Sb);Ufe=n(RLe,"STRONG",{});var jlt=s(Ufe);FRo=r(jlt,"funnel"),jlt.forEach(t),TRo=r(RLe," \u2014 "),kG=n(RLe,"A",{href:!0});var Dlt=s(kG);MRo=r(Dlt,"FunnelForMultipleChoice"),Dlt.forEach(t),ERo=r(RLe," (Funnel Transformer model)"),RLe.forEach(t),CRo=i(K),Rb=n(K,"LI",{});var BLe=s(Rb);Jfe=n(BLe,"STRONG",{});var Glt=s(Jfe);wRo=r(Glt,"ibert"),Glt.forEach(t),ARo=r(BLe," \u2014 "),SG=n(BLe,"A",{href:!0});var Olt=s(SG);yRo=r(Olt,"IBertForMultipleChoice"),Olt.forEach(t),LRo=r(BLe," (I-BERT model)"),BLe.forEach(t),xRo=i(K),Bb=n(K,"LI",{});var PLe=s(Bb);Yfe=n(PLe,"STRONG",{});var Vlt=s(Yfe);$Ro=r(Vlt,"longformer"),Vlt.forEach(t),kRo=r(PLe," \u2014 "),RG=n(PLe,"A",{href:!0});var Xlt=s(RG);SRo=r(Xlt,"LongformerForMultipleChoice"),Xlt.forEach(t),RRo=r(PLe," (Longformer model)"),PLe.forEach(t),BRo=i(K),Pb=n(K,"LI",{});var ILe=s(Pb);Kfe=n(ILe,"STRONG",{});var zlt=s(Kfe);PRo=r(zlt,"megatron-bert"),zlt.forEach(t),IRo=r(ILe," \u2014 "),BG=n(ILe,"A",{href:!0});var Qlt=s(BG);qRo=r(Qlt,"MegatronBertForMultipleChoice"),Qlt.forEach(t),NRo=r(ILe," (MegatronBert model)"),ILe.forEach(t),jRo=i(K),Ib=n(K,"LI",{});var qLe=s(Ib);Zfe=n(qLe,"STRONG",{});var Wlt=s(Zfe);DRo=r(Wlt,"mobilebert"),Wlt.forEach(t),GRo=r(qLe," \u2014 "),PG=n(qLe,"A",{href:!0});var Hlt=s(PG);ORo=r(Hlt,"MobileBertForMultipleChoice"),Hlt.forEach(t),VRo=r(qLe," (MobileBERT model)"),qLe.forEach(t),XRo=i(K),qb=n(K,"LI",{});var NLe=s(qb);eme=n(NLe,"STRONG",{});var Ult=s(eme);zRo=r(Ult,"mpnet"),Ult.forEach(t),QRo=r(NLe," \u2014 "),IG=n(NLe,"A",{href:!0});var Jlt=s(IG);WRo=r(Jlt,"MPNetForMultipleChoice"),Jlt.forEach(t),HRo=r(NLe," (MPNet model)"),NLe.forEach(t),URo=i(K),Nb=n(K,"LI",{});var jLe=s(Nb);ome=n(jLe,"STRONG",{});var Ylt=s(ome);JRo=r(Ylt,"nystromformer"),Ylt.forEach(t),YRo=r(jLe," \u2014 "),qG=n(jLe,"A",{href:!0});var Klt=s(qG);KRo=r(Klt,"NystromformerForMultipleChoice"),Klt.forEach(t),ZRo=r(jLe," (Nystromformer model)"),jLe.forEach(t),eBo=i(K),jb=n(K,"LI",{});var DLe=s(jb);rme=n(DLe,"STRONG",{});var Zlt=s(rme);oBo=r(Zlt,"qdqbert"),Zlt.forEach(t),rBo=r(DLe," \u2014 "),NG=n(DLe,"A",{href:!0});var eit=s(NG);tBo=r(eit,"QDQBertForMultipleChoice"),eit.forEach(t),aBo=r(DLe," (QDQBert model)"),DLe.forEach(t),nBo=i(K),Db=n(K,"LI",{});var GLe=s(Db);tme=n(GLe,"STRONG",{});var oit=s(tme);sBo=r(oit,"rembert"),oit.forEach(t),lBo=r(GLe," \u2014 "),jG=n(GLe,"A",{href:!0});var rit=s(jG);iBo=r(rit,"RemBertForMultipleChoice"),rit.forEach(t),dBo=r(GLe," (RemBERT model)"),GLe.forEach(t),cBo=i(K),Gb=n(K,"LI",{});var OLe=s(Gb);ame=n(OLe,"STRONG",{});var tit=s(ame);fBo=r(tit,"roberta"),tit.forEach(t),mBo=r(OLe," \u2014 "),DG=n(OLe,"A",{href:!0});var ait=s(DG);gBo=r(ait,"RobertaForMultipleChoice"),ait.forEach(t),hBo=r(OLe," (RoBERTa model)"),OLe.forEach(t),pBo=i(K),Ob=n(K,"LI",{});var VLe=s(Ob);nme=n(VLe,"STRONG",{});var nit=s(nme);uBo=r(nit,"roformer"),nit.forEach(t),_Bo=r(VLe," \u2014 "),GG=n(VLe,"A",{href:!0});var sit=s(GG);bBo=r(sit,"RoFormerForMultipleChoice"),sit.forEach(t),vBo=r(VLe," (RoFormer model)"),VLe.forEach(t),FBo=i(K),Vb=n(K,"LI",{});var XLe=s(Vb);sme=n(XLe,"STRONG",{});var lit=s(sme);TBo=r(lit,"squeezebert"),lit.forEach(t),MBo=r(XLe," \u2014 "),OG=n(XLe,"A",{href:!0});var iit=s(OG);EBo=r(iit,"SqueezeBertForMultipleChoice"),iit.forEach(t),CBo=r(XLe," (SqueezeBERT model)"),XLe.forEach(t),wBo=i(K),Xb=n(K,"LI",{});var zLe=s(Xb);lme=n(zLe,"STRONG",{});var dit=s(lme);ABo=r(dit,"xlm"),dit.forEach(t),yBo=r(zLe," \u2014 "),VG=n(zLe,"A",{href:!0});var cit=s(VG);LBo=r(cit,"XLMForMultipleChoice"),cit.forEach(t),xBo=r(zLe," (XLM model)"),zLe.forEach(t),$Bo=i(K),zb=n(K,"LI",{});var QLe=s(zb);ime=n(QLe,"STRONG",{});var fit=s(ime);kBo=r(fit,"xlm-roberta"),fit.forEach(t),SBo=r(QLe," \u2014 "),XG=n(QLe,"A",{href:!0});var mit=s(XG);RBo=r(mit,"XLMRobertaForMultipleChoice"),mit.forEach(t),BBo=r(QLe," (XLM-RoBERTa model)"),QLe.forEach(t),PBo=i(K),Qb=n(K,"LI",{});var WLe=s(Qb);dme=n(WLe,"STRONG",{});var git=s(dme);IBo=r(git,"xlm-roberta-xl"),git.forEach(t),qBo=r(WLe," \u2014 "),zG=n(WLe,"A",{href:!0});var hit=s(zG);NBo=r(hit,"XLMRobertaXLForMultipleChoice"),hit.forEach(t),jBo=r(WLe," (XLM-RoBERTa-XL model)"),WLe.forEach(t),DBo=i(K),Wb=n(K,"LI",{});var HLe=s(Wb);cme=n(HLe,"STRONG",{});var pit=s(cme);GBo=r(pit,"xlnet"),pit.forEach(t),OBo=r(HLe," \u2014 "),QG=n(HLe,"A",{href:!0});var uit=s(QG);VBo=r(uit,"XLNetForMultipleChoice"),uit.forEach(t),XBo=r(HLe," (XLNet model)"),HLe.forEach(t),zBo=i(K),Hb=n(K,"LI",{});var ULe=s(Hb);fme=n(ULe,"STRONG",{});var _it=s(fme);QBo=r(_it,"yoso"),_it.forEach(t),WBo=r(ULe," \u2014 "),WG=n(ULe,"A",{href:!0});var bit=s(WG);HBo=r(bit,"YosoForMultipleChoice"),bit.forEach(t),UBo=r(ULe," (YOSO model)"),ULe.forEach(t),K.forEach(t),JBo=i(na),Ub=n(na,"P",{});var JLe=s(Ub);YBo=r(JLe,"The model is set in evaluation mode by default using "),mme=n(JLe,"CODE",{});var vit=s(mme);KBo=r(vit,"model.eval()"),vit.forEach(t),ZBo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(JLe,"CODE",{});var Fit=s(gme);ePo=r(Fit,"model.train()"),Fit.forEach(t),JLe.forEach(t),oPo=i(na),T(Jb.$$.fragment,na),na.forEach(t),Ws.forEach(t),zIe=i(f),Xi=n(f,"H2",{class:!0});var UNe=s(Xi);Yb=n(UNe,"A",{id:!0,class:!0,href:!0});var Tit=s(Yb);hme=n(Tit,"SPAN",{});var Mit=s(hme);T(m0.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),rPo=i(UNe),pme=n(UNe,"SPAN",{});var Eit=s(pme);tPo=r(Eit,"AutoModelForNextSentencePrediction"),Eit.forEach(t),UNe.forEach(t),QIe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(g0.$$.fragment,Hs),aPo=i(Hs),zi=n(Hs,"P",{});var jK=s(zi);nPo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HG=n(jK,"A",{href:!0});var Cit=s(HG);sPo=r(Cit,"from_pretrained()"),Cit.forEach(t),lPo=r(jK," class method or the "),UG=n(jK,"A",{href:!0});var wit=s(UG);iPo=r(wit,"from_config()"),wit.forEach(t),dPo=r(jK,` class
method.`),jK.forEach(t),cPo=i(Hs),h0=n(Hs,"P",{});var JNe=s(h0);fPo=r(JNe,"This class cannot be instantiated directly using "),ume=n(JNe,"CODE",{});var Ait=s(ume);mPo=r(Ait,"__init__()"),Ait.forEach(t),gPo=r(JNe," (throws an error)."),JNe.forEach(t),hPo=i(Hs),it=n(Hs,"DIV",{class:!0});var T3=s(it);T(p0.$$.fragment,T3),pPo=i(T3),_me=n(T3,"P",{});var yit=s(_me);uPo=r(yit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yit.forEach(t),_Po=i(T3),Qi=n(T3,"P",{});var DK=s(Qi);bPo=r(DK,`Note:
Loading a model from its configuration file does `),bme=n(DK,"STRONG",{});var Lit=s(bme);vPo=r(Lit,"not"),Lit.forEach(t),FPo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(DK,"A",{href:!0});var xit=s(JG);TPo=r(xit,"from_pretrained()"),xit.forEach(t),MPo=r(DK," to load the model weights."),DK.forEach(t),EPo=i(T3),T(Kb.$$.fragment,T3),T3.forEach(t),CPo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(u0.$$.fragment,sa),wPo=i(sa),vme=n(sa,"P",{});var $it=s(vme);APo=r($it,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$it.forEach(t),yPo=i(sa),Ra=n(sa,"P",{});var M3=s(Ra);LPo=r(M3,"The model class to instantiate is selected based on the "),Fme=n(M3,"CODE",{});var kit=s(Fme);xPo=r(kit,"model_type"),kit.forEach(t),$Po=r(M3,` property of the config object (either
passed as an argument or loaded from `),Tme=n(M3,"CODE",{});var Sit=s(Tme);kPo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),SPo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(M3,"CODE",{});var Rit=s(Mme);RPo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),BPo=r(M3,":"),M3.forEach(t),PPo=i(sa),Yr=n(sa,"UL",{});var Us=s(Yr);Zb=n(Us,"LI",{});var YLe=s(Zb);Eme=n(YLe,"STRONG",{});var Bit=s(Eme);IPo=r(Bit,"bert"),Bit.forEach(t),qPo=r(YLe," \u2014 "),YG=n(YLe,"A",{href:!0});var Pit=s(YG);NPo=r(Pit,"BertForNextSentencePrediction"),Pit.forEach(t),jPo=r(YLe," (BERT model)"),YLe.forEach(t),DPo=i(Us),ev=n(Us,"LI",{});var KLe=s(ev);Cme=n(KLe,"STRONG",{});var Iit=s(Cme);GPo=r(Iit,"fnet"),Iit.forEach(t),OPo=r(KLe," \u2014 "),KG=n(KLe,"A",{href:!0});var qit=s(KG);VPo=r(qit,"FNetForNextSentencePrediction"),qit.forEach(t),XPo=r(KLe," (FNet model)"),KLe.forEach(t),zPo=i(Us),ov=n(Us,"LI",{});var ZLe=s(ov);wme=n(ZLe,"STRONG",{});var Nit=s(wme);QPo=r(Nit,"megatron-bert"),Nit.forEach(t),WPo=r(ZLe," \u2014 "),ZG=n(ZLe,"A",{href:!0});var jit=s(ZG);HPo=r(jit,"MegatronBertForNextSentencePrediction"),jit.forEach(t),UPo=r(ZLe," (MegatronBert model)"),ZLe.forEach(t),JPo=i(Us),rv=n(Us,"LI",{});var e8e=s(rv);Ame=n(e8e,"STRONG",{});var Dit=s(Ame);YPo=r(Dit,"mobilebert"),Dit.forEach(t),KPo=r(e8e," \u2014 "),eO=n(e8e,"A",{href:!0});var Git=s(eO);ZPo=r(Git,"MobileBertForNextSentencePrediction"),Git.forEach(t),eIo=r(e8e," (MobileBERT model)"),e8e.forEach(t),oIo=i(Us),tv=n(Us,"LI",{});var o8e=s(tv);yme=n(o8e,"STRONG",{});var Oit=s(yme);rIo=r(Oit,"qdqbert"),Oit.forEach(t),tIo=r(o8e," \u2014 "),oO=n(o8e,"A",{href:!0});var Vit=s(oO);aIo=r(Vit,"QDQBertForNextSentencePrediction"),Vit.forEach(t),nIo=r(o8e," (QDQBert model)"),o8e.forEach(t),Us.forEach(t),sIo=i(sa),av=n(sa,"P",{});var r8e=s(av);lIo=r(r8e,"The model is set in evaluation mode by default using "),Lme=n(r8e,"CODE",{});var Xit=s(Lme);iIo=r(Xit,"model.eval()"),Xit.forEach(t),dIo=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(r8e,"CODE",{});var zit=s(xme);cIo=r(zit,"model.train()"),zit.forEach(t),r8e.forEach(t),fIo=i(sa),T(nv.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),WIe=i(f),Wi=n(f,"H2",{class:!0});var YNe=s(Wi);sv=n(YNe,"A",{id:!0,class:!0,href:!0});var Qit=s(sv);$me=n(Qit,"SPAN",{});var Wit=s($me);T(_0.$$.fragment,Wit),Wit.forEach(t),Qit.forEach(t),mIo=i(YNe),kme=n(YNe,"SPAN",{});var Hit=s(kme);gIo=r(Hit,"AutoModelForTokenClassification"),Hit.forEach(t),YNe.forEach(t),HIe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(b0.$$.fragment,Js),hIo=i(Js),Hi=n(Js,"P",{});var GK=s(Hi);pIo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rO=n(GK,"A",{href:!0});var Uit=s(rO);uIo=r(Uit,"from_pretrained()"),Uit.forEach(t),_Io=r(GK," class method or the "),tO=n(GK,"A",{href:!0});var Jit=s(tO);bIo=r(Jit,"from_config()"),Jit.forEach(t),vIo=r(GK,` class
method.`),GK.forEach(t),FIo=i(Js),v0=n(Js,"P",{});var KNe=s(v0);TIo=r(KNe,"This class cannot be instantiated directly using "),Sme=n(KNe,"CODE",{});var Yit=s(Sme);MIo=r(Yit,"__init__()"),Yit.forEach(t),EIo=r(KNe," (throws an error)."),KNe.forEach(t),CIo=i(Js),dt=n(Js,"DIV",{class:!0});var E3=s(dt);T(F0.$$.fragment,E3),wIo=i(E3),Rme=n(E3,"P",{});var Kit=s(Rme);AIo=r(Kit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kit.forEach(t),yIo=i(E3),Ui=n(E3,"P",{});var OK=s(Ui);LIo=r(OK,`Note:
Loading a model from its configuration file does `),Bme=n(OK,"STRONG",{});var Zit=s(Bme);xIo=r(Zit,"not"),Zit.forEach(t),$Io=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(OK,"A",{href:!0});var edt=s(aO);kIo=r(edt,"from_pretrained()"),edt.forEach(t),SIo=r(OK," to load the model weights."),OK.forEach(t),RIo=i(E3),T(lv.$$.fragment,E3),E3.forEach(t),BIo=i(Js),ro=n(Js,"DIV",{class:!0});var la=s(ro);T(T0.$$.fragment,la),PIo=i(la),Pme=n(la,"P",{});var odt=s(Pme);IIo=r(odt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),odt.forEach(t),qIo=i(la),Ba=n(la,"P",{});var C3=s(Ba);NIo=r(C3,"The model class to instantiate is selected based on the "),Ime=n(C3,"CODE",{});var rdt=s(Ime);jIo=r(rdt,"model_type"),rdt.forEach(t),DIo=r(C3,` property of the config object (either
passed as an argument or loaded from `),qme=n(C3,"CODE",{});var tdt=s(qme);GIo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),OIo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(C3,"CODE",{});var adt=s(Nme);VIo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),XIo=r(C3,":"),C3.forEach(t),zIo=i(la),U=n(la,"UL",{});var J=s(U);iv=n(J,"LI",{});var t8e=s(iv);jme=n(t8e,"STRONG",{});var ndt=s(jme);QIo=r(ndt,"albert"),ndt.forEach(t),WIo=r(t8e," \u2014 "),nO=n(t8e,"A",{href:!0});var sdt=s(nO);HIo=r(sdt,"AlbertForTokenClassification"),sdt.forEach(t),UIo=r(t8e," (ALBERT model)"),t8e.forEach(t),JIo=i(J),dv=n(J,"LI",{});var a8e=s(dv);Dme=n(a8e,"STRONG",{});var ldt=s(Dme);YIo=r(ldt,"bert"),ldt.forEach(t),KIo=r(a8e," \u2014 "),sO=n(a8e,"A",{href:!0});var idt=s(sO);ZIo=r(idt,"BertForTokenClassification"),idt.forEach(t),eqo=r(a8e," (BERT model)"),a8e.forEach(t),oqo=i(J),cv=n(J,"LI",{});var n8e=s(cv);Gme=n(n8e,"STRONG",{});var ddt=s(Gme);rqo=r(ddt,"big_bird"),ddt.forEach(t),tqo=r(n8e," \u2014 "),lO=n(n8e,"A",{href:!0});var cdt=s(lO);aqo=r(cdt,"BigBirdForTokenClassification"),cdt.forEach(t),nqo=r(n8e," (BigBird model)"),n8e.forEach(t),sqo=i(J),fv=n(J,"LI",{});var s8e=s(fv);Ome=n(s8e,"STRONG",{});var fdt=s(Ome);lqo=r(fdt,"camembert"),fdt.forEach(t),iqo=r(s8e," \u2014 "),iO=n(s8e,"A",{href:!0});var mdt=s(iO);dqo=r(mdt,"CamembertForTokenClassification"),mdt.forEach(t),cqo=r(s8e," (CamemBERT model)"),s8e.forEach(t),fqo=i(J),mv=n(J,"LI",{});var l8e=s(mv);Vme=n(l8e,"STRONG",{});var gdt=s(Vme);mqo=r(gdt,"canine"),gdt.forEach(t),gqo=r(l8e," \u2014 "),dO=n(l8e,"A",{href:!0});var hdt=s(dO);hqo=r(hdt,"CanineForTokenClassification"),hdt.forEach(t),pqo=r(l8e," (Canine model)"),l8e.forEach(t),uqo=i(J),gv=n(J,"LI",{});var i8e=s(gv);Xme=n(i8e,"STRONG",{});var pdt=s(Xme);_qo=r(pdt,"convbert"),pdt.forEach(t),bqo=r(i8e," \u2014 "),cO=n(i8e,"A",{href:!0});var udt=s(cO);vqo=r(udt,"ConvBertForTokenClassification"),udt.forEach(t),Fqo=r(i8e," (ConvBERT model)"),i8e.forEach(t),Tqo=i(J),hv=n(J,"LI",{});var d8e=s(hv);zme=n(d8e,"STRONG",{});var _dt=s(zme);Mqo=r(_dt,"data2vec-text"),_dt.forEach(t),Eqo=r(d8e," \u2014 "),fO=n(d8e,"A",{href:!0});var bdt=s(fO);Cqo=r(bdt,"Data2VecTextForTokenClassification"),bdt.forEach(t),wqo=r(d8e," (Data2VecText model)"),d8e.forEach(t),Aqo=i(J),pv=n(J,"LI",{});var c8e=s(pv);Qme=n(c8e,"STRONG",{});var vdt=s(Qme);yqo=r(vdt,"deberta"),vdt.forEach(t),Lqo=r(c8e," \u2014 "),mO=n(c8e,"A",{href:!0});var Fdt=s(mO);xqo=r(Fdt,"DebertaForTokenClassification"),Fdt.forEach(t),$qo=r(c8e," (DeBERTa model)"),c8e.forEach(t),kqo=i(J),uv=n(J,"LI",{});var f8e=s(uv);Wme=n(f8e,"STRONG",{});var Tdt=s(Wme);Sqo=r(Tdt,"deberta-v2"),Tdt.forEach(t),Rqo=r(f8e," \u2014 "),gO=n(f8e,"A",{href:!0});var Mdt=s(gO);Bqo=r(Mdt,"DebertaV2ForTokenClassification"),Mdt.forEach(t),Pqo=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),Iqo=i(J),_v=n(J,"LI",{});var m8e=s(_v);Hme=n(m8e,"STRONG",{});var Edt=s(Hme);qqo=r(Edt,"distilbert"),Edt.forEach(t),Nqo=r(m8e," \u2014 "),hO=n(m8e,"A",{href:!0});var Cdt=s(hO);jqo=r(Cdt,"DistilBertForTokenClassification"),Cdt.forEach(t),Dqo=r(m8e," (DistilBERT model)"),m8e.forEach(t),Gqo=i(J),bv=n(J,"LI",{});var g8e=s(bv);Ume=n(g8e,"STRONG",{});var wdt=s(Ume);Oqo=r(wdt,"electra"),wdt.forEach(t),Vqo=r(g8e," \u2014 "),pO=n(g8e,"A",{href:!0});var Adt=s(pO);Xqo=r(Adt,"ElectraForTokenClassification"),Adt.forEach(t),zqo=r(g8e," (ELECTRA model)"),g8e.forEach(t),Qqo=i(J),vv=n(J,"LI",{});var h8e=s(vv);Jme=n(h8e,"STRONG",{});var ydt=s(Jme);Wqo=r(ydt,"flaubert"),ydt.forEach(t),Hqo=r(h8e," \u2014 "),uO=n(h8e,"A",{href:!0});var Ldt=s(uO);Uqo=r(Ldt,"FlaubertForTokenClassification"),Ldt.forEach(t),Jqo=r(h8e," (FlauBERT model)"),h8e.forEach(t),Yqo=i(J),Fv=n(J,"LI",{});var p8e=s(Fv);Yme=n(p8e,"STRONG",{});var xdt=s(Yme);Kqo=r(xdt,"fnet"),xdt.forEach(t),Zqo=r(p8e," \u2014 "),_O=n(p8e,"A",{href:!0});var $dt=s(_O);eNo=r($dt,"FNetForTokenClassification"),$dt.forEach(t),oNo=r(p8e," (FNet model)"),p8e.forEach(t),rNo=i(J),Tv=n(J,"LI",{});var u8e=s(Tv);Kme=n(u8e,"STRONG",{});var kdt=s(Kme);tNo=r(kdt,"funnel"),kdt.forEach(t),aNo=r(u8e," \u2014 "),bO=n(u8e,"A",{href:!0});var Sdt=s(bO);nNo=r(Sdt,"FunnelForTokenClassification"),Sdt.forEach(t),sNo=r(u8e," (Funnel Transformer model)"),u8e.forEach(t),lNo=i(J),Mv=n(J,"LI",{});var _8e=s(Mv);Zme=n(_8e,"STRONG",{});var Rdt=s(Zme);iNo=r(Rdt,"gpt2"),Rdt.forEach(t),dNo=r(_8e," \u2014 "),vO=n(_8e,"A",{href:!0});var Bdt=s(vO);cNo=r(Bdt,"GPT2ForTokenClassification"),Bdt.forEach(t),fNo=r(_8e," (OpenAI GPT-2 model)"),_8e.forEach(t),mNo=i(J),Ev=n(J,"LI",{});var b8e=s(Ev);ege=n(b8e,"STRONG",{});var Pdt=s(ege);gNo=r(Pdt,"ibert"),Pdt.forEach(t),hNo=r(b8e," \u2014 "),FO=n(b8e,"A",{href:!0});var Idt=s(FO);pNo=r(Idt,"IBertForTokenClassification"),Idt.forEach(t),uNo=r(b8e," (I-BERT model)"),b8e.forEach(t),_No=i(J),Cv=n(J,"LI",{});var v8e=s(Cv);oge=n(v8e,"STRONG",{});var qdt=s(oge);bNo=r(qdt,"layoutlm"),qdt.forEach(t),vNo=r(v8e," \u2014 "),TO=n(v8e,"A",{href:!0});var Ndt=s(TO);FNo=r(Ndt,"LayoutLMForTokenClassification"),Ndt.forEach(t),TNo=r(v8e," (LayoutLM model)"),v8e.forEach(t),MNo=i(J),wv=n(J,"LI",{});var F8e=s(wv);rge=n(F8e,"STRONG",{});var jdt=s(rge);ENo=r(jdt,"layoutlmv2"),jdt.forEach(t),CNo=r(F8e," \u2014 "),MO=n(F8e,"A",{href:!0});var Ddt=s(MO);wNo=r(Ddt,"LayoutLMv2ForTokenClassification"),Ddt.forEach(t),ANo=r(F8e," (LayoutLMv2 model)"),F8e.forEach(t),yNo=i(J),Av=n(J,"LI",{});var T8e=s(Av);tge=n(T8e,"STRONG",{});var Gdt=s(tge);LNo=r(Gdt,"longformer"),Gdt.forEach(t),xNo=r(T8e," \u2014 "),EO=n(T8e,"A",{href:!0});var Odt=s(EO);$No=r(Odt,"LongformerForTokenClassification"),Odt.forEach(t),kNo=r(T8e," (Longformer model)"),T8e.forEach(t),SNo=i(J),yv=n(J,"LI",{});var M8e=s(yv);age=n(M8e,"STRONG",{});var Vdt=s(age);RNo=r(Vdt,"megatron-bert"),Vdt.forEach(t),BNo=r(M8e," \u2014 "),CO=n(M8e,"A",{href:!0});var Xdt=s(CO);PNo=r(Xdt,"MegatronBertForTokenClassification"),Xdt.forEach(t),INo=r(M8e," (MegatronBert model)"),M8e.forEach(t),qNo=i(J),Lv=n(J,"LI",{});var E8e=s(Lv);nge=n(E8e,"STRONG",{});var zdt=s(nge);NNo=r(zdt,"mobilebert"),zdt.forEach(t),jNo=r(E8e," \u2014 "),wO=n(E8e,"A",{href:!0});var Qdt=s(wO);DNo=r(Qdt,"MobileBertForTokenClassification"),Qdt.forEach(t),GNo=r(E8e," (MobileBERT model)"),E8e.forEach(t),ONo=i(J),xv=n(J,"LI",{});var C8e=s(xv);sge=n(C8e,"STRONG",{});var Wdt=s(sge);VNo=r(Wdt,"mpnet"),Wdt.forEach(t),XNo=r(C8e," \u2014 "),AO=n(C8e,"A",{href:!0});var Hdt=s(AO);zNo=r(Hdt,"MPNetForTokenClassification"),Hdt.forEach(t),QNo=r(C8e," (MPNet model)"),C8e.forEach(t),WNo=i(J),$v=n(J,"LI",{});var w8e=s($v);lge=n(w8e,"STRONG",{});var Udt=s(lge);HNo=r(Udt,"nystromformer"),Udt.forEach(t),UNo=r(w8e," \u2014 "),yO=n(w8e,"A",{href:!0});var Jdt=s(yO);JNo=r(Jdt,"NystromformerForTokenClassification"),Jdt.forEach(t),YNo=r(w8e," (Nystromformer model)"),w8e.forEach(t),KNo=i(J),kv=n(J,"LI",{});var A8e=s(kv);ige=n(A8e,"STRONG",{});var Ydt=s(ige);ZNo=r(Ydt,"qdqbert"),Ydt.forEach(t),ejo=r(A8e," \u2014 "),LO=n(A8e,"A",{href:!0});var Kdt=s(LO);ojo=r(Kdt,"QDQBertForTokenClassification"),Kdt.forEach(t),rjo=r(A8e," (QDQBert model)"),A8e.forEach(t),tjo=i(J),Sv=n(J,"LI",{});var y8e=s(Sv);dge=n(y8e,"STRONG",{});var Zdt=s(dge);ajo=r(Zdt,"rembert"),Zdt.forEach(t),njo=r(y8e," \u2014 "),xO=n(y8e,"A",{href:!0});var ect=s(xO);sjo=r(ect,"RemBertForTokenClassification"),ect.forEach(t),ljo=r(y8e," (RemBERT model)"),y8e.forEach(t),ijo=i(J),Rv=n(J,"LI",{});var L8e=s(Rv);cge=n(L8e,"STRONG",{});var oct=s(cge);djo=r(oct,"roberta"),oct.forEach(t),cjo=r(L8e," \u2014 "),$O=n(L8e,"A",{href:!0});var rct=s($O);fjo=r(rct,"RobertaForTokenClassification"),rct.forEach(t),mjo=r(L8e," (RoBERTa model)"),L8e.forEach(t),gjo=i(J),Bv=n(J,"LI",{});var x8e=s(Bv);fge=n(x8e,"STRONG",{});var tct=s(fge);hjo=r(tct,"roformer"),tct.forEach(t),pjo=r(x8e," \u2014 "),kO=n(x8e,"A",{href:!0});var act=s(kO);ujo=r(act,"RoFormerForTokenClassification"),act.forEach(t),_jo=r(x8e," (RoFormer model)"),x8e.forEach(t),bjo=i(J),Pv=n(J,"LI",{});var $8e=s(Pv);mge=n($8e,"STRONG",{});var nct=s(mge);vjo=r(nct,"squeezebert"),nct.forEach(t),Fjo=r($8e," \u2014 "),SO=n($8e,"A",{href:!0});var sct=s(SO);Tjo=r(sct,"SqueezeBertForTokenClassification"),sct.forEach(t),Mjo=r($8e," (SqueezeBERT model)"),$8e.forEach(t),Ejo=i(J),Iv=n(J,"LI",{});var k8e=s(Iv);gge=n(k8e,"STRONG",{});var lct=s(gge);Cjo=r(lct,"xlm"),lct.forEach(t),wjo=r(k8e," \u2014 "),RO=n(k8e,"A",{href:!0});var ict=s(RO);Ajo=r(ict,"XLMForTokenClassification"),ict.forEach(t),yjo=r(k8e," (XLM model)"),k8e.forEach(t),Ljo=i(J),qv=n(J,"LI",{});var S8e=s(qv);hge=n(S8e,"STRONG",{});var dct=s(hge);xjo=r(dct,"xlm-roberta"),dct.forEach(t),$jo=r(S8e," \u2014 "),BO=n(S8e,"A",{href:!0});var cct=s(BO);kjo=r(cct,"XLMRobertaForTokenClassification"),cct.forEach(t),Sjo=r(S8e," (XLM-RoBERTa model)"),S8e.forEach(t),Rjo=i(J),Nv=n(J,"LI",{});var R8e=s(Nv);pge=n(R8e,"STRONG",{});var fct=s(pge);Bjo=r(fct,"xlm-roberta-xl"),fct.forEach(t),Pjo=r(R8e," \u2014 "),PO=n(R8e,"A",{href:!0});var mct=s(PO);Ijo=r(mct,"XLMRobertaXLForTokenClassification"),mct.forEach(t),qjo=r(R8e," (XLM-RoBERTa-XL model)"),R8e.forEach(t),Njo=i(J),jv=n(J,"LI",{});var B8e=s(jv);uge=n(B8e,"STRONG",{});var gct=s(uge);jjo=r(gct,"xlnet"),gct.forEach(t),Djo=r(B8e," \u2014 "),IO=n(B8e,"A",{href:!0});var hct=s(IO);Gjo=r(hct,"XLNetForTokenClassification"),hct.forEach(t),Ojo=r(B8e," (XLNet model)"),B8e.forEach(t),Vjo=i(J),Dv=n(J,"LI",{});var P8e=s(Dv);_ge=n(P8e,"STRONG",{});var pct=s(_ge);Xjo=r(pct,"yoso"),pct.forEach(t),zjo=r(P8e," \u2014 "),qO=n(P8e,"A",{href:!0});var uct=s(qO);Qjo=r(uct,"YosoForTokenClassification"),uct.forEach(t),Wjo=r(P8e," (YOSO model)"),P8e.forEach(t),J.forEach(t),Hjo=i(la),Gv=n(la,"P",{});var I8e=s(Gv);Ujo=r(I8e,"The model is set in evaluation mode by default using "),bge=n(I8e,"CODE",{});var _ct=s(bge);Jjo=r(_ct,"model.eval()"),_ct.forEach(t),Yjo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(I8e,"CODE",{});var bct=s(vge);Kjo=r(bct,"model.train()"),bct.forEach(t),I8e.forEach(t),Zjo=i(la),T(Ov.$$.fragment,la),la.forEach(t),Js.forEach(t),UIe=i(f),Ji=n(f,"H2",{class:!0});var ZNe=s(Ji);Vv=n(ZNe,"A",{id:!0,class:!0,href:!0});var vct=s(Vv);Fge=n(vct,"SPAN",{});var Fct=s(Fge);T(M0.$$.fragment,Fct),Fct.forEach(t),vct.forEach(t),eDo=i(ZNe),Tge=n(ZNe,"SPAN",{});var Tct=s(Tge);oDo=r(Tct,"AutoModelForQuestionAnswering"),Tct.forEach(t),ZNe.forEach(t),JIe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(E0.$$.fragment,Ys),rDo=i(Ys),Yi=n(Ys,"P",{});var VK=s(Yi);tDo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NO=n(VK,"A",{href:!0});var Mct=s(NO);aDo=r(Mct,"from_pretrained()"),Mct.forEach(t),nDo=r(VK," class method or the "),jO=n(VK,"A",{href:!0});var Ect=s(jO);sDo=r(Ect,"from_config()"),Ect.forEach(t),lDo=r(VK,` class
method.`),VK.forEach(t),iDo=i(Ys),C0=n(Ys,"P",{});var eje=s(C0);dDo=r(eje,"This class cannot be instantiated directly using "),Mge=n(eje,"CODE",{});var Cct=s(Mge);cDo=r(Cct,"__init__()"),Cct.forEach(t),fDo=r(eje," (throws an error)."),eje.forEach(t),mDo=i(Ys),ct=n(Ys,"DIV",{class:!0});var w3=s(ct);T(w0.$$.fragment,w3),gDo=i(w3),Ege=n(w3,"P",{});var wct=s(Ege);hDo=r(wct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wct.forEach(t),pDo=i(w3),Ki=n(w3,"P",{});var XK=s(Ki);uDo=r(XK,`Note:
Loading a model from its configuration file does `),Cge=n(XK,"STRONG",{});var Act=s(Cge);_Do=r(Act,"not"),Act.forEach(t),bDo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(XK,"A",{href:!0});var yct=s(DO);vDo=r(yct,"from_pretrained()"),yct.forEach(t),FDo=r(XK," to load the model weights."),XK.forEach(t),TDo=i(w3),T(Xv.$$.fragment,w3),w3.forEach(t),MDo=i(Ys),to=n(Ys,"DIV",{class:!0});var ia=s(to);T(A0.$$.fragment,ia),EDo=i(ia),wge=n(ia,"P",{});var Lct=s(wge);CDo=r(Lct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lct.forEach(t),wDo=i(ia),Pa=n(ia,"P",{});var A3=s(Pa);ADo=r(A3,"The model class to instantiate is selected based on the "),Age=n(A3,"CODE",{});var xct=s(Age);yDo=r(xct,"model_type"),xct.forEach(t),LDo=r(A3,` property of the config object (either
passed as an argument or loaded from `),yge=n(A3,"CODE",{});var $ct=s(yge);xDo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),$Do=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(A3,"CODE",{});var kct=s(Lge);kDo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),SDo=r(A3,":"),A3.forEach(t),RDo=i(ia),V=n(ia,"UL",{});var X=s(V);zv=n(X,"LI",{});var q8e=s(zv);xge=n(q8e,"STRONG",{});var Sct=s(xge);BDo=r(Sct,"albert"),Sct.forEach(t),PDo=r(q8e," \u2014 "),GO=n(q8e,"A",{href:!0});var Rct=s(GO);IDo=r(Rct,"AlbertForQuestionAnswering"),Rct.forEach(t),qDo=r(q8e," (ALBERT model)"),q8e.forEach(t),NDo=i(X),Qv=n(X,"LI",{});var N8e=s(Qv);$ge=n(N8e,"STRONG",{});var Bct=s($ge);jDo=r(Bct,"bart"),Bct.forEach(t),DDo=r(N8e," \u2014 "),OO=n(N8e,"A",{href:!0});var Pct=s(OO);GDo=r(Pct,"BartForQuestionAnswering"),Pct.forEach(t),ODo=r(N8e," (BART model)"),N8e.forEach(t),VDo=i(X),Wv=n(X,"LI",{});var j8e=s(Wv);kge=n(j8e,"STRONG",{});var Ict=s(kge);XDo=r(Ict,"bert"),Ict.forEach(t),zDo=r(j8e," \u2014 "),VO=n(j8e,"A",{href:!0});var qct=s(VO);QDo=r(qct,"BertForQuestionAnswering"),qct.forEach(t),WDo=r(j8e," (BERT model)"),j8e.forEach(t),HDo=i(X),Hv=n(X,"LI",{});var D8e=s(Hv);Sge=n(D8e,"STRONG",{});var Nct=s(Sge);UDo=r(Nct,"big_bird"),Nct.forEach(t),JDo=r(D8e," \u2014 "),XO=n(D8e,"A",{href:!0});var jct=s(XO);YDo=r(jct,"BigBirdForQuestionAnswering"),jct.forEach(t),KDo=r(D8e," (BigBird model)"),D8e.forEach(t),ZDo=i(X),Uv=n(X,"LI",{});var G8e=s(Uv);Rge=n(G8e,"STRONG",{});var Dct=s(Rge);eGo=r(Dct,"bigbird_pegasus"),Dct.forEach(t),oGo=r(G8e," \u2014 "),zO=n(G8e,"A",{href:!0});var Gct=s(zO);rGo=r(Gct,"BigBirdPegasusForQuestionAnswering"),Gct.forEach(t),tGo=r(G8e," (BigBirdPegasus model)"),G8e.forEach(t),aGo=i(X),Jv=n(X,"LI",{});var O8e=s(Jv);Bge=n(O8e,"STRONG",{});var Oct=s(Bge);nGo=r(Oct,"camembert"),Oct.forEach(t),sGo=r(O8e," \u2014 "),QO=n(O8e,"A",{href:!0});var Vct=s(QO);lGo=r(Vct,"CamembertForQuestionAnswering"),Vct.forEach(t),iGo=r(O8e," (CamemBERT model)"),O8e.forEach(t),dGo=i(X),Yv=n(X,"LI",{});var V8e=s(Yv);Pge=n(V8e,"STRONG",{});var Xct=s(Pge);cGo=r(Xct,"canine"),Xct.forEach(t),fGo=r(V8e," \u2014 "),WO=n(V8e,"A",{href:!0});var zct=s(WO);mGo=r(zct,"CanineForQuestionAnswering"),zct.forEach(t),gGo=r(V8e," (Canine model)"),V8e.forEach(t),hGo=i(X),Kv=n(X,"LI",{});var X8e=s(Kv);Ige=n(X8e,"STRONG",{});var Qct=s(Ige);pGo=r(Qct,"convbert"),Qct.forEach(t),uGo=r(X8e," \u2014 "),HO=n(X8e,"A",{href:!0});var Wct=s(HO);_Go=r(Wct,"ConvBertForQuestionAnswering"),Wct.forEach(t),bGo=r(X8e," (ConvBERT model)"),X8e.forEach(t),vGo=i(X),Zv=n(X,"LI",{});var z8e=s(Zv);qge=n(z8e,"STRONG",{});var Hct=s(qge);FGo=r(Hct,"data2vec-text"),Hct.forEach(t),TGo=r(z8e," \u2014 "),UO=n(z8e,"A",{href:!0});var Uct=s(UO);MGo=r(Uct,"Data2VecTextForQuestionAnswering"),Uct.forEach(t),EGo=r(z8e," (Data2VecText model)"),z8e.forEach(t),CGo=i(X),eF=n(X,"LI",{});var Q8e=s(eF);Nge=n(Q8e,"STRONG",{});var Jct=s(Nge);wGo=r(Jct,"deberta"),Jct.forEach(t),AGo=r(Q8e," \u2014 "),JO=n(Q8e,"A",{href:!0});var Yct=s(JO);yGo=r(Yct,"DebertaForQuestionAnswering"),Yct.forEach(t),LGo=r(Q8e," (DeBERTa model)"),Q8e.forEach(t),xGo=i(X),oF=n(X,"LI",{});var W8e=s(oF);jge=n(W8e,"STRONG",{});var Kct=s(jge);$Go=r(Kct,"deberta-v2"),Kct.forEach(t),kGo=r(W8e," \u2014 "),YO=n(W8e,"A",{href:!0});var Zct=s(YO);SGo=r(Zct,"DebertaV2ForQuestionAnswering"),Zct.forEach(t),RGo=r(W8e," (DeBERTa-v2 model)"),W8e.forEach(t),BGo=i(X),rF=n(X,"LI",{});var H8e=s(rF);Dge=n(H8e,"STRONG",{});var eft=s(Dge);PGo=r(eft,"distilbert"),eft.forEach(t),IGo=r(H8e," \u2014 "),KO=n(H8e,"A",{href:!0});var oft=s(KO);qGo=r(oft,"DistilBertForQuestionAnswering"),oft.forEach(t),NGo=r(H8e," (DistilBERT model)"),H8e.forEach(t),jGo=i(X),tF=n(X,"LI",{});var U8e=s(tF);Gge=n(U8e,"STRONG",{});var rft=s(Gge);DGo=r(rft,"electra"),rft.forEach(t),GGo=r(U8e," \u2014 "),ZO=n(U8e,"A",{href:!0});var tft=s(ZO);OGo=r(tft,"ElectraForQuestionAnswering"),tft.forEach(t),VGo=r(U8e," (ELECTRA model)"),U8e.forEach(t),XGo=i(X),aF=n(X,"LI",{});var J8e=s(aF);Oge=n(J8e,"STRONG",{});var aft=s(Oge);zGo=r(aft,"flaubert"),aft.forEach(t),QGo=r(J8e," \u2014 "),eV=n(J8e,"A",{href:!0});var nft=s(eV);WGo=r(nft,"FlaubertForQuestionAnsweringSimple"),nft.forEach(t),HGo=r(J8e," (FlauBERT model)"),J8e.forEach(t),UGo=i(X),nF=n(X,"LI",{});var Y8e=s(nF);Vge=n(Y8e,"STRONG",{});var sft=s(Vge);JGo=r(sft,"fnet"),sft.forEach(t),YGo=r(Y8e," \u2014 "),oV=n(Y8e,"A",{href:!0});var lft=s(oV);KGo=r(lft,"FNetForQuestionAnswering"),lft.forEach(t),ZGo=r(Y8e," (FNet model)"),Y8e.forEach(t),eOo=i(X),sF=n(X,"LI",{});var K8e=s(sF);Xge=n(K8e,"STRONG",{});var ift=s(Xge);oOo=r(ift,"funnel"),ift.forEach(t),rOo=r(K8e," \u2014 "),rV=n(K8e,"A",{href:!0});var dft=s(rV);tOo=r(dft,"FunnelForQuestionAnswering"),dft.forEach(t),aOo=r(K8e," (Funnel Transformer model)"),K8e.forEach(t),nOo=i(X),lF=n(X,"LI",{});var Z8e=s(lF);zge=n(Z8e,"STRONG",{});var cft=s(zge);sOo=r(cft,"gptj"),cft.forEach(t),lOo=r(Z8e," \u2014 "),tV=n(Z8e,"A",{href:!0});var fft=s(tV);iOo=r(fft,"GPTJForQuestionAnswering"),fft.forEach(t),dOo=r(Z8e," (GPT-J model)"),Z8e.forEach(t),cOo=i(X),iF=n(X,"LI",{});var exe=s(iF);Qge=n(exe,"STRONG",{});var mft=s(Qge);fOo=r(mft,"ibert"),mft.forEach(t),mOo=r(exe," \u2014 "),aV=n(exe,"A",{href:!0});var gft=s(aV);gOo=r(gft,"IBertForQuestionAnswering"),gft.forEach(t),hOo=r(exe," (I-BERT model)"),exe.forEach(t),pOo=i(X),dF=n(X,"LI",{});var oxe=s(dF);Wge=n(oxe,"STRONG",{});var hft=s(Wge);uOo=r(hft,"layoutlmv2"),hft.forEach(t),_Oo=r(oxe," \u2014 "),nV=n(oxe,"A",{href:!0});var pft=s(nV);bOo=r(pft,"LayoutLMv2ForQuestionAnswering"),pft.forEach(t),vOo=r(oxe," (LayoutLMv2 model)"),oxe.forEach(t),FOo=i(X),cF=n(X,"LI",{});var rxe=s(cF);Hge=n(rxe,"STRONG",{});var uft=s(Hge);TOo=r(uft,"led"),uft.forEach(t),MOo=r(rxe," \u2014 "),sV=n(rxe,"A",{href:!0});var _ft=s(sV);EOo=r(_ft,"LEDForQuestionAnswering"),_ft.forEach(t),COo=r(rxe," (LED model)"),rxe.forEach(t),wOo=i(X),fF=n(X,"LI",{});var txe=s(fF);Uge=n(txe,"STRONG",{});var bft=s(Uge);AOo=r(bft,"longformer"),bft.forEach(t),yOo=r(txe," \u2014 "),lV=n(txe,"A",{href:!0});var vft=s(lV);LOo=r(vft,"LongformerForQuestionAnswering"),vft.forEach(t),xOo=r(txe," (Longformer model)"),txe.forEach(t),$Oo=i(X),mF=n(X,"LI",{});var axe=s(mF);Jge=n(axe,"STRONG",{});var Fft=s(Jge);kOo=r(Fft,"lxmert"),Fft.forEach(t),SOo=r(axe," \u2014 "),iV=n(axe,"A",{href:!0});var Tft=s(iV);ROo=r(Tft,"LxmertForQuestionAnswering"),Tft.forEach(t),BOo=r(axe," (LXMERT model)"),axe.forEach(t),POo=i(X),gF=n(X,"LI",{});var nxe=s(gF);Yge=n(nxe,"STRONG",{});var Mft=s(Yge);IOo=r(Mft,"mbart"),Mft.forEach(t),qOo=r(nxe," \u2014 "),dV=n(nxe,"A",{href:!0});var Eft=s(dV);NOo=r(Eft,"MBartForQuestionAnswering"),Eft.forEach(t),jOo=r(nxe," (mBART model)"),nxe.forEach(t),DOo=i(X),hF=n(X,"LI",{});var sxe=s(hF);Kge=n(sxe,"STRONG",{});var Cft=s(Kge);GOo=r(Cft,"megatron-bert"),Cft.forEach(t),OOo=r(sxe," \u2014 "),cV=n(sxe,"A",{href:!0});var wft=s(cV);VOo=r(wft,"MegatronBertForQuestionAnswering"),wft.forEach(t),XOo=r(sxe," (MegatronBert model)"),sxe.forEach(t),zOo=i(X),pF=n(X,"LI",{});var lxe=s(pF);Zge=n(lxe,"STRONG",{});var Aft=s(Zge);QOo=r(Aft,"mobilebert"),Aft.forEach(t),WOo=r(lxe," \u2014 "),fV=n(lxe,"A",{href:!0});var yft=s(fV);HOo=r(yft,"MobileBertForQuestionAnswering"),yft.forEach(t),UOo=r(lxe," (MobileBERT model)"),lxe.forEach(t),JOo=i(X),uF=n(X,"LI",{});var ixe=s(uF);ehe=n(ixe,"STRONG",{});var Lft=s(ehe);YOo=r(Lft,"mpnet"),Lft.forEach(t),KOo=r(ixe," \u2014 "),mV=n(ixe,"A",{href:!0});var xft=s(mV);ZOo=r(xft,"MPNetForQuestionAnswering"),xft.forEach(t),eVo=r(ixe," (MPNet model)"),ixe.forEach(t),oVo=i(X),_F=n(X,"LI",{});var dxe=s(_F);ohe=n(dxe,"STRONG",{});var $ft=s(ohe);rVo=r($ft,"nystromformer"),$ft.forEach(t),tVo=r(dxe," \u2014 "),gV=n(dxe,"A",{href:!0});var kft=s(gV);aVo=r(kft,"NystromformerForQuestionAnswering"),kft.forEach(t),nVo=r(dxe," (Nystromformer model)"),dxe.forEach(t),sVo=i(X),bF=n(X,"LI",{});var cxe=s(bF);rhe=n(cxe,"STRONG",{});var Sft=s(rhe);lVo=r(Sft,"qdqbert"),Sft.forEach(t),iVo=r(cxe," \u2014 "),hV=n(cxe,"A",{href:!0});var Rft=s(hV);dVo=r(Rft,"QDQBertForQuestionAnswering"),Rft.forEach(t),cVo=r(cxe," (QDQBert model)"),cxe.forEach(t),fVo=i(X),vF=n(X,"LI",{});var fxe=s(vF);the=n(fxe,"STRONG",{});var Bft=s(the);mVo=r(Bft,"reformer"),Bft.forEach(t),gVo=r(fxe," \u2014 "),pV=n(fxe,"A",{href:!0});var Pft=s(pV);hVo=r(Pft,"ReformerForQuestionAnswering"),Pft.forEach(t),pVo=r(fxe," (Reformer model)"),fxe.forEach(t),uVo=i(X),FF=n(X,"LI",{});var mxe=s(FF);ahe=n(mxe,"STRONG",{});var Ift=s(ahe);_Vo=r(Ift,"rembert"),Ift.forEach(t),bVo=r(mxe," \u2014 "),uV=n(mxe,"A",{href:!0});var qft=s(uV);vVo=r(qft,"RemBertForQuestionAnswering"),qft.forEach(t),FVo=r(mxe," (RemBERT model)"),mxe.forEach(t),TVo=i(X),TF=n(X,"LI",{});var gxe=s(TF);nhe=n(gxe,"STRONG",{});var Nft=s(nhe);MVo=r(Nft,"roberta"),Nft.forEach(t),EVo=r(gxe," \u2014 "),_V=n(gxe,"A",{href:!0});var jft=s(_V);CVo=r(jft,"RobertaForQuestionAnswering"),jft.forEach(t),wVo=r(gxe," (RoBERTa model)"),gxe.forEach(t),AVo=i(X),MF=n(X,"LI",{});var hxe=s(MF);she=n(hxe,"STRONG",{});var Dft=s(she);yVo=r(Dft,"roformer"),Dft.forEach(t),LVo=r(hxe," \u2014 "),bV=n(hxe,"A",{href:!0});var Gft=s(bV);xVo=r(Gft,"RoFormerForQuestionAnswering"),Gft.forEach(t),$Vo=r(hxe," (RoFormer model)"),hxe.forEach(t),kVo=i(X),EF=n(X,"LI",{});var pxe=s(EF);lhe=n(pxe,"STRONG",{});var Oft=s(lhe);SVo=r(Oft,"splinter"),Oft.forEach(t),RVo=r(pxe," \u2014 "),vV=n(pxe,"A",{href:!0});var Vft=s(vV);BVo=r(Vft,"SplinterForQuestionAnswering"),Vft.forEach(t),PVo=r(pxe," (Splinter model)"),pxe.forEach(t),IVo=i(X),CF=n(X,"LI",{});var uxe=s(CF);ihe=n(uxe,"STRONG",{});var Xft=s(ihe);qVo=r(Xft,"squeezebert"),Xft.forEach(t),NVo=r(uxe," \u2014 "),FV=n(uxe,"A",{href:!0});var zft=s(FV);jVo=r(zft,"SqueezeBertForQuestionAnswering"),zft.forEach(t),DVo=r(uxe," (SqueezeBERT model)"),uxe.forEach(t),GVo=i(X),wF=n(X,"LI",{});var _xe=s(wF);dhe=n(_xe,"STRONG",{});var Qft=s(dhe);OVo=r(Qft,"xlm"),Qft.forEach(t),VVo=r(_xe," \u2014 "),TV=n(_xe,"A",{href:!0});var Wft=s(TV);XVo=r(Wft,"XLMForQuestionAnsweringSimple"),Wft.forEach(t),zVo=r(_xe," (XLM model)"),_xe.forEach(t),QVo=i(X),AF=n(X,"LI",{});var bxe=s(AF);che=n(bxe,"STRONG",{});var Hft=s(che);WVo=r(Hft,"xlm-roberta"),Hft.forEach(t),HVo=r(bxe," \u2014 "),MV=n(bxe,"A",{href:!0});var Uft=s(MV);UVo=r(Uft,"XLMRobertaForQuestionAnswering"),Uft.forEach(t),JVo=r(bxe," (XLM-RoBERTa model)"),bxe.forEach(t),YVo=i(X),yF=n(X,"LI",{});var vxe=s(yF);fhe=n(vxe,"STRONG",{});var Jft=s(fhe);KVo=r(Jft,"xlm-roberta-xl"),Jft.forEach(t),ZVo=r(vxe," \u2014 "),EV=n(vxe,"A",{href:!0});var Yft=s(EV);eXo=r(Yft,"XLMRobertaXLForQuestionAnswering"),Yft.forEach(t),oXo=r(vxe," (XLM-RoBERTa-XL model)"),vxe.forEach(t),rXo=i(X),LF=n(X,"LI",{});var Fxe=s(LF);mhe=n(Fxe,"STRONG",{});var Kft=s(mhe);tXo=r(Kft,"xlnet"),Kft.forEach(t),aXo=r(Fxe," \u2014 "),CV=n(Fxe,"A",{href:!0});var Zft=s(CV);nXo=r(Zft,"XLNetForQuestionAnsweringSimple"),Zft.forEach(t),sXo=r(Fxe," (XLNet model)"),Fxe.forEach(t),lXo=i(X),xF=n(X,"LI",{});var Txe=s(xF);ghe=n(Txe,"STRONG",{});var emt=s(ghe);iXo=r(emt,"yoso"),emt.forEach(t),dXo=r(Txe," \u2014 "),wV=n(Txe,"A",{href:!0});var omt=s(wV);cXo=r(omt,"YosoForQuestionAnswering"),omt.forEach(t),fXo=r(Txe," (YOSO model)"),Txe.forEach(t),X.forEach(t),mXo=i(ia),$F=n(ia,"P",{});var Mxe=s($F);gXo=r(Mxe,"The model is set in evaluation mode by default using "),hhe=n(Mxe,"CODE",{});var rmt=s(hhe);hXo=r(rmt,"model.eval()"),rmt.forEach(t),pXo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(Mxe,"CODE",{});var tmt=s(phe);uXo=r(tmt,"model.train()"),tmt.forEach(t),Mxe.forEach(t),_Xo=i(ia),T(kF.$$.fragment,ia),ia.forEach(t),Ys.forEach(t),YIe=i(f),Zi=n(f,"H2",{class:!0});var oje=s(Zi);SF=n(oje,"A",{id:!0,class:!0,href:!0});var amt=s(SF);uhe=n(amt,"SPAN",{});var nmt=s(uhe);T(y0.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),bXo=i(oje),_he=n(oje,"SPAN",{});var smt=s(_he);vXo=r(smt,"AutoModelForTableQuestionAnswering"),smt.forEach(t),oje.forEach(t),KIe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(L0.$$.fragment,Ks),FXo=i(Ks),ed=n(Ks,"P",{});var zK=s(ed);TXo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AV=n(zK,"A",{href:!0});var lmt=s(AV);MXo=r(lmt,"from_pretrained()"),lmt.forEach(t),EXo=r(zK," class method or the "),yV=n(zK,"A",{href:!0});var imt=s(yV);CXo=r(imt,"from_config()"),imt.forEach(t),wXo=r(zK,` class
method.`),zK.forEach(t),AXo=i(Ks),x0=n(Ks,"P",{});var rje=s(x0);yXo=r(rje,"This class cannot be instantiated directly using "),bhe=n(rje,"CODE",{});var dmt=s(bhe);LXo=r(dmt,"__init__()"),dmt.forEach(t),xXo=r(rje," (throws an error)."),rje.forEach(t),$Xo=i(Ks),ft=n(Ks,"DIV",{class:!0});var y3=s(ft);T($0.$$.fragment,y3),kXo=i(y3),vhe=n(y3,"P",{});var cmt=s(vhe);SXo=r(cmt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cmt.forEach(t),RXo=i(y3),od=n(y3,"P",{});var QK=s(od);BXo=r(QK,`Note:
Loading a model from its configuration file does `),Fhe=n(QK,"STRONG",{});var fmt=s(Fhe);PXo=r(fmt,"not"),fmt.forEach(t),IXo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(QK,"A",{href:!0});var mmt=s(LV);qXo=r(mmt,"from_pretrained()"),mmt.forEach(t),NXo=r(QK," to load the model weights."),QK.forEach(t),jXo=i(y3),T(RF.$$.fragment,y3),y3.forEach(t),DXo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(k0.$$.fragment,da),GXo=i(da),The=n(da,"P",{});var gmt=s(The);OXo=r(gmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gmt.forEach(t),VXo=i(da),Ia=n(da,"P",{});var L3=s(Ia);XXo=r(L3,"The model class to instantiate is selected based on the "),Mhe=n(L3,"CODE",{});var hmt=s(Mhe);zXo=r(hmt,"model_type"),hmt.forEach(t),QXo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(L3,"CODE",{});var pmt=s(Ehe);WXo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),HXo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(L3,"CODE",{});var umt=s(Che);UXo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),JXo=r(L3,":"),L3.forEach(t),YXo=i(da),whe=n(da,"UL",{});var _mt=s(whe);BF=n(_mt,"LI",{});var Exe=s(BF);Ahe=n(Exe,"STRONG",{});var bmt=s(Ahe);KXo=r(bmt,"tapas"),bmt.forEach(t),ZXo=r(Exe," \u2014 "),xV=n(Exe,"A",{href:!0});var vmt=s(xV);ezo=r(vmt,"TapasForQuestionAnswering"),vmt.forEach(t),ozo=r(Exe," (TAPAS model)"),Exe.forEach(t),_mt.forEach(t),rzo=i(da),PF=n(da,"P",{});var Cxe=s(PF);tzo=r(Cxe,"The model is set in evaluation mode by default using "),yhe=n(Cxe,"CODE",{});var Fmt=s(yhe);azo=r(Fmt,"model.eval()"),Fmt.forEach(t),nzo=r(Cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(Cxe,"CODE",{});var Tmt=s(Lhe);szo=r(Tmt,"model.train()"),Tmt.forEach(t),Cxe.forEach(t),lzo=i(da),T(IF.$$.fragment,da),da.forEach(t),Ks.forEach(t),ZIe=i(f),rd=n(f,"H2",{class:!0});var tje=s(rd);qF=n(tje,"A",{id:!0,class:!0,href:!0});var Mmt=s(qF);xhe=n(Mmt,"SPAN",{});var Emt=s(xhe);T(S0.$$.fragment,Emt),Emt.forEach(t),Mmt.forEach(t),izo=i(tje),$he=n(tje,"SPAN",{});var Cmt=s($he);dzo=r(Cmt,"AutoModelForImageClassification"),Cmt.forEach(t),tje.forEach(t),eqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(R0.$$.fragment,Zs),czo=i(Zs),td=n(Zs,"P",{});var WK=s(td);fzo=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=n(WK,"A",{href:!0});var wmt=s($V);mzo=r(wmt,"from_pretrained()"),wmt.forEach(t),gzo=r(WK," class method or the "),kV=n(WK,"A",{href:!0});var Amt=s(kV);hzo=r(Amt,"from_config()"),Amt.forEach(t),pzo=r(WK,` class
method.`),WK.forEach(t),uzo=i(Zs),B0=n(Zs,"P",{});var aje=s(B0);_zo=r(aje,"This class cannot be instantiated directly using "),khe=n(aje,"CODE",{});var ymt=s(khe);bzo=r(ymt,"__init__()"),ymt.forEach(t),vzo=r(aje," (throws an error)."),aje.forEach(t),Fzo=i(Zs),mt=n(Zs,"DIV",{class:!0});var x3=s(mt);T(P0.$$.fragment,x3),Tzo=i(x3),She=n(x3,"P",{});var Lmt=s(She);Mzo=r(Lmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lmt.forEach(t),Ezo=i(x3),ad=n(x3,"P",{});var HK=s(ad);Czo=r(HK,`Note:
Loading a model from its configuration file does `),Rhe=n(HK,"STRONG",{});var xmt=s(Rhe);wzo=r(xmt,"not"),xmt.forEach(t),Azo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(HK,"A",{href:!0});var $mt=s(SV);yzo=r($mt,"from_pretrained()"),$mt.forEach(t),Lzo=r(HK," to load the model weights."),HK.forEach(t),xzo=i(x3),T(NF.$$.fragment,x3),x3.forEach(t),$zo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(I0.$$.fragment,ca),kzo=i(ca),Bhe=n(ca,"P",{});var kmt=s(Bhe);Szo=r(kmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kmt.forEach(t),Rzo=i(ca),qa=n(ca,"P",{});var $3=s(qa);Bzo=r($3,"The model class to instantiate is selected based on the "),Phe=n($3,"CODE",{});var Smt=s(Phe);Pzo=r(Smt,"model_type"),Smt.forEach(t),Izo=r($3,` property of the config object (either
passed as an argument or loaded from `),Ihe=n($3,"CODE",{});var Rmt=s(Ihe);qzo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),Nzo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n($3,"CODE",{});var Bmt=s(qhe);jzo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),Dzo=r($3,":"),$3.forEach(t),Gzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);jF=n(Ee,"LI",{});var wxe=s(jF);Nhe=n(wxe,"STRONG",{});var Pmt=s(Nhe);Ozo=r(Pmt,"beit"),Pmt.forEach(t),Vzo=r(wxe," \u2014 "),RV=n(wxe,"A",{href:!0});var Imt=s(RV);Xzo=r(Imt,"BeitForImageClassification"),Imt.forEach(t),zzo=r(wxe," (BEiT model)"),wxe.forEach(t),Qzo=i(Ee),DF=n(Ee,"LI",{});var Axe=s(DF);jhe=n(Axe,"STRONG",{});var qmt=s(jhe);Wzo=r(qmt,"convnext"),qmt.forEach(t),Hzo=r(Axe," \u2014 "),BV=n(Axe,"A",{href:!0});var Nmt=s(BV);Uzo=r(Nmt,"ConvNextForImageClassification"),Nmt.forEach(t),Jzo=r(Axe," (ConvNext model)"),Axe.forEach(t),Yzo=i(Ee),GF=n(Ee,"LI",{});var yxe=s(GF);Dhe=n(yxe,"STRONG",{});var jmt=s(Dhe);Kzo=r(jmt,"data2vec-vision"),jmt.forEach(t),Zzo=r(yxe," \u2014 "),PV=n(yxe,"A",{href:!0});var Dmt=s(PV);eQo=r(Dmt,"Data2VecVisionForImageClassification"),Dmt.forEach(t),oQo=r(yxe," (Data2VecVision model)"),yxe.forEach(t),rQo=i(Ee),Ps=n(Ee,"LI",{});var T$=s(Ps);Ghe=n(T$,"STRONG",{});var Gmt=s(Ghe);tQo=r(Gmt,"deit"),Gmt.forEach(t),aQo=r(T$," \u2014 "),IV=n(T$,"A",{href:!0});var Omt=s(IV);nQo=r(Omt,"DeiTForImageClassification"),Omt.forEach(t),sQo=r(T$," or "),qV=n(T$,"A",{href:!0});var Vmt=s(qV);lQo=r(Vmt,"DeiTForImageClassificationWithTeacher"),Vmt.forEach(t),iQo=r(T$," (DeiT model)"),T$.forEach(t),dQo=i(Ee),OF=n(Ee,"LI",{});var Lxe=s(OF);Ohe=n(Lxe,"STRONG",{});var Xmt=s(Ohe);cQo=r(Xmt,"imagegpt"),Xmt.forEach(t),fQo=r(Lxe," \u2014 "),NV=n(Lxe,"A",{href:!0});var zmt=s(NV);mQo=r(zmt,"ImageGPTForImageClassification"),zmt.forEach(t),gQo=r(Lxe," (ImageGPT model)"),Lxe.forEach(t),hQo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);Vhe=n(mf,"STRONG",{});var Qmt=s(Vhe);pQo=r(Qmt,"perceiver"),Qmt.forEach(t),uQo=r(mf," \u2014 "),jV=n(mf,"A",{href:!0});var Wmt=s(jV);_Qo=r(Wmt,"PerceiverForImageClassificationLearned"),Wmt.forEach(t),bQo=r(mf," or "),DV=n(mf,"A",{href:!0});var Hmt=s(DV);vQo=r(Hmt,"PerceiverForImageClassificationFourier"),Hmt.forEach(t),FQo=r(mf," or "),GV=n(mf,"A",{href:!0});var Umt=s(GV);TQo=r(Umt,"PerceiverForImageClassificationConvProcessing"),Umt.forEach(t),MQo=r(mf," (Perceiver model)"),mf.forEach(t),EQo=i(Ee),VF=n(Ee,"LI",{});var xxe=s(VF);Xhe=n(xxe,"STRONG",{});var Jmt=s(Xhe);CQo=r(Jmt,"poolformer"),Jmt.forEach(t),wQo=r(xxe," \u2014 "),OV=n(xxe,"A",{href:!0});var Ymt=s(OV);AQo=r(Ymt,"PoolFormerForImageClassification"),Ymt.forEach(t),yQo=r(xxe," (PoolFormer model)"),xxe.forEach(t),LQo=i(Ee),XF=n(Ee,"LI",{});var $xe=s(XF);zhe=n($xe,"STRONG",{});var Kmt=s(zhe);xQo=r(Kmt,"regnet"),Kmt.forEach(t),$Qo=r($xe," \u2014 "),VV=n($xe,"A",{href:!0});var Zmt=s(VV);kQo=r(Zmt,"RegNetForImageClassification"),Zmt.forEach(t),SQo=r($xe," (RegNet model)"),$xe.forEach(t),RQo=i(Ee),zF=n(Ee,"LI",{});var kxe=s(zF);Qhe=n(kxe,"STRONG",{});var egt=s(Qhe);BQo=r(egt,"resnet"),egt.forEach(t),PQo=r(kxe," \u2014 "),XV=n(kxe,"A",{href:!0});var ogt=s(XV);IQo=r(ogt,"ResNetForImageClassification"),ogt.forEach(t),qQo=r(kxe," (ResNet model)"),kxe.forEach(t),NQo=i(Ee),QF=n(Ee,"LI",{});var Sxe=s(QF);Whe=n(Sxe,"STRONG",{});var rgt=s(Whe);jQo=r(rgt,"segformer"),rgt.forEach(t),DQo=r(Sxe," \u2014 "),zV=n(Sxe,"A",{href:!0});var tgt=s(zV);GQo=r(tgt,"SegformerForImageClassification"),tgt.forEach(t),OQo=r(Sxe," (SegFormer model)"),Sxe.forEach(t),VQo=i(Ee),WF=n(Ee,"LI",{});var Rxe=s(WF);Hhe=n(Rxe,"STRONG",{});var agt=s(Hhe);XQo=r(agt,"swin"),agt.forEach(t),zQo=r(Rxe," \u2014 "),QV=n(Rxe,"A",{href:!0});var ngt=s(QV);QQo=r(ngt,"SwinForImageClassification"),ngt.forEach(t),WQo=r(Rxe," (Swin model)"),Rxe.forEach(t),HQo=i(Ee),HF=n(Ee,"LI",{});var Bxe=s(HF);Uhe=n(Bxe,"STRONG",{});var sgt=s(Uhe);UQo=r(sgt,"van"),sgt.forEach(t),JQo=r(Bxe," \u2014 "),WV=n(Bxe,"A",{href:!0});var lgt=s(WV);YQo=r(lgt,"VanForImageClassification"),lgt.forEach(t),KQo=r(Bxe," (VAN model)"),Bxe.forEach(t),ZQo=i(Ee),UF=n(Ee,"LI",{});var Pxe=s(UF);Jhe=n(Pxe,"STRONG",{});var igt=s(Jhe);eWo=r(igt,"vit"),igt.forEach(t),oWo=r(Pxe," \u2014 "),HV=n(Pxe,"A",{href:!0});var dgt=s(HV);rWo=r(dgt,"ViTForImageClassification"),dgt.forEach(t),tWo=r(Pxe," (ViT model)"),Pxe.forEach(t),Ee.forEach(t),aWo=i(ca),JF=n(ca,"P",{});var Ixe=s(JF);nWo=r(Ixe,"The model is set in evaluation mode by default using "),Yhe=n(Ixe,"CODE",{});var cgt=s(Yhe);sWo=r(cgt,"model.eval()"),cgt.forEach(t),lWo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(Ixe,"CODE",{});var fgt=s(Khe);iWo=r(fgt,"model.train()"),fgt.forEach(t),Ixe.forEach(t),dWo=i(ca),T(YF.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),oqe=i(f),nd=n(f,"H2",{class:!0});var nje=s(nd);KF=n(nje,"A",{id:!0,class:!0,href:!0});var mgt=s(KF);Zhe=n(mgt,"SPAN",{});var ggt=s(Zhe);T(q0.$$.fragment,ggt),ggt.forEach(t),mgt.forEach(t),cWo=i(nje),epe=n(nje,"SPAN",{});var hgt=s(epe);fWo=r(hgt,"AutoModelForVision2Seq"),hgt.forEach(t),nje.forEach(t),rqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(N0.$$.fragment,el),mWo=i(el),sd=n(el,"P",{});var UK=s(sd);gWo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UV=n(UK,"A",{href:!0});var pgt=s(UV);hWo=r(pgt,"from_pretrained()"),pgt.forEach(t),pWo=r(UK," class method or the "),JV=n(UK,"A",{href:!0});var ugt=s(JV);uWo=r(ugt,"from_config()"),ugt.forEach(t),_Wo=r(UK,` class
method.`),UK.forEach(t),bWo=i(el),j0=n(el,"P",{});var sje=s(j0);vWo=r(sje,"This class cannot be instantiated directly using "),ope=n(sje,"CODE",{});var _gt=s(ope);FWo=r(_gt,"__init__()"),_gt.forEach(t),TWo=r(sje," (throws an error)."),sje.forEach(t),MWo=i(el),ht=n(el,"DIV",{class:!0});var k3=s(ht);T(D0.$$.fragment,k3),EWo=i(k3),rpe=n(k3,"P",{});var bgt=s(rpe);CWo=r(bgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bgt.forEach(t),wWo=i(k3),ld=n(k3,"P",{});var JK=s(ld);AWo=r(JK,`Note:
Loading a model from its configuration file does `),tpe=n(JK,"STRONG",{});var vgt=s(tpe);yWo=r(vgt,"not"),vgt.forEach(t),LWo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(JK,"A",{href:!0});var Fgt=s(YV);xWo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),$Wo=r(JK," to load the model weights."),JK.forEach(t),kWo=i(k3),T(ZF.$$.fragment,k3),k3.forEach(t),SWo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(G0.$$.fragment,fa),RWo=i(fa),ape=n(fa,"P",{});var Tgt=s(ape);BWo=r(Tgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tgt.forEach(t),PWo=i(fa),Na=n(fa,"P",{});var S3=s(Na);IWo=r(S3,"The model class to instantiate is selected based on the "),npe=n(S3,"CODE",{});var Mgt=s(npe);qWo=r(Mgt,"model_type"),Mgt.forEach(t),NWo=r(S3,` property of the config object (either
passed as an argument or loaded from `),spe=n(S3,"CODE",{});var Egt=s(spe);jWo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),DWo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(S3,"CODE",{});var Cgt=s(lpe);GWo=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),OWo=r(S3,":"),S3.forEach(t),VWo=i(fa),ipe=n(fa,"UL",{});var wgt=s(ipe);e6=n(wgt,"LI",{});var qxe=s(e6);dpe=n(qxe,"STRONG",{});var Agt=s(dpe);XWo=r(Agt,"vision-encoder-decoder"),Agt.forEach(t),zWo=r(qxe," \u2014 "),KV=n(qxe,"A",{href:!0});var ygt=s(KV);QWo=r(ygt,"VisionEncoderDecoderModel"),ygt.forEach(t),WWo=r(qxe," (Vision Encoder decoder model)"),qxe.forEach(t),wgt.forEach(t),HWo=i(fa),o6=n(fa,"P",{});var Nxe=s(o6);UWo=r(Nxe,"The model is set in evaluation mode by default using "),cpe=n(Nxe,"CODE",{});var Lgt=s(cpe);JWo=r(Lgt,"model.eval()"),Lgt.forEach(t),YWo=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(Nxe,"CODE",{});var xgt=s(fpe);KWo=r(xgt,"model.train()"),xgt.forEach(t),Nxe.forEach(t),ZWo=i(fa),T(r6.$$.fragment,fa),fa.forEach(t),el.forEach(t),tqe=i(f),id=n(f,"H2",{class:!0});var lje=s(id);t6=n(lje,"A",{id:!0,class:!0,href:!0});var $gt=s(t6);mpe=n($gt,"SPAN",{});var kgt=s(mpe);T(O0.$$.fragment,kgt),kgt.forEach(t),$gt.forEach(t),eHo=i(lje),gpe=n(lje,"SPAN",{});var Sgt=s(gpe);oHo=r(Sgt,"AutoModelForAudioClassification"),Sgt.forEach(t),lje.forEach(t),aqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(V0.$$.fragment,ol),rHo=i(ol),dd=n(ol,"P",{});var YK=s(dd);tHo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZV=n(YK,"A",{href:!0});var Rgt=s(ZV);aHo=r(Rgt,"from_pretrained()"),Rgt.forEach(t),nHo=r(YK," class method or the "),eX=n(YK,"A",{href:!0});var Bgt=s(eX);sHo=r(Bgt,"from_config()"),Bgt.forEach(t),lHo=r(YK,` class
method.`),YK.forEach(t),iHo=i(ol),X0=n(ol,"P",{});var ije=s(X0);dHo=r(ije,"This class cannot be instantiated directly using "),hpe=n(ije,"CODE",{});var Pgt=s(hpe);cHo=r(Pgt,"__init__()"),Pgt.forEach(t),fHo=r(ije," (throws an error)."),ije.forEach(t),mHo=i(ol),pt=n(ol,"DIV",{class:!0});var R3=s(pt);T(z0.$$.fragment,R3),gHo=i(R3),ppe=n(R3,"P",{});var Igt=s(ppe);hHo=r(Igt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Igt.forEach(t),pHo=i(R3),cd=n(R3,"P",{});var KK=s(cd);uHo=r(KK,`Note:
Loading a model from its configuration file does `),upe=n(KK,"STRONG",{});var qgt=s(upe);_Ho=r(qgt,"not"),qgt.forEach(t),bHo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(KK,"A",{href:!0});var Ngt=s(oX);vHo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),FHo=r(KK," to load the model weights."),KK.forEach(t),THo=i(R3),T(a6.$$.fragment,R3),R3.forEach(t),MHo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(Q0.$$.fragment,ma),EHo=i(ma),_pe=n(ma,"P",{});var jgt=s(_pe);CHo=r(jgt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jgt.forEach(t),wHo=i(ma),ja=n(ma,"P",{});var B3=s(ja);AHo=r(B3,"The model class to instantiate is selected based on the "),bpe=n(B3,"CODE",{});var Dgt=s(bpe);yHo=r(Dgt,"model_type"),Dgt.forEach(t),LHo=r(B3,` property of the config object (either
passed as an argument or loaded from `),vpe=n(B3,"CODE",{});var Ggt=s(vpe);xHo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),$Ho=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(B3,"CODE",{});var Ogt=s(Fpe);kHo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),SHo=r(B3,":"),B3.forEach(t),RHo=i(ma),je=n(ma,"UL",{});var bo=s(je);n6=n(bo,"LI",{});var jxe=s(n6);Tpe=n(jxe,"STRONG",{});var Vgt=s(Tpe);BHo=r(Vgt,"data2vec-audio"),Vgt.forEach(t),PHo=r(jxe," \u2014 "),rX=n(jxe,"A",{href:!0});var Xgt=s(rX);IHo=r(Xgt,"Data2VecAudioForSequenceClassification"),Xgt.forEach(t),qHo=r(jxe," (Data2VecAudio model)"),jxe.forEach(t),NHo=i(bo),s6=n(bo,"LI",{});var Dxe=s(s6);Mpe=n(Dxe,"STRONG",{});var zgt=s(Mpe);jHo=r(zgt,"hubert"),zgt.forEach(t),DHo=r(Dxe," \u2014 "),tX=n(Dxe,"A",{href:!0});var Qgt=s(tX);GHo=r(Qgt,"HubertForSequenceClassification"),Qgt.forEach(t),OHo=r(Dxe," (Hubert model)"),Dxe.forEach(t),VHo=i(bo),l6=n(bo,"LI",{});var Gxe=s(l6);Epe=n(Gxe,"STRONG",{});var Wgt=s(Epe);XHo=r(Wgt,"sew"),Wgt.forEach(t),zHo=r(Gxe," \u2014 "),aX=n(Gxe,"A",{href:!0});var Hgt=s(aX);QHo=r(Hgt,"SEWForSequenceClassification"),Hgt.forEach(t),WHo=r(Gxe," (SEW model)"),Gxe.forEach(t),HHo=i(bo),i6=n(bo,"LI",{});var Oxe=s(i6);Cpe=n(Oxe,"STRONG",{});var Ugt=s(Cpe);UHo=r(Ugt,"sew-d"),Ugt.forEach(t),JHo=r(Oxe," \u2014 "),nX=n(Oxe,"A",{href:!0});var Jgt=s(nX);YHo=r(Jgt,"SEWDForSequenceClassification"),Jgt.forEach(t),KHo=r(Oxe," (SEW-D model)"),Oxe.forEach(t),ZHo=i(bo),d6=n(bo,"LI",{});var Vxe=s(d6);wpe=n(Vxe,"STRONG",{});var Ygt=s(wpe);eUo=r(Ygt,"unispeech"),Ygt.forEach(t),oUo=r(Vxe," \u2014 "),sX=n(Vxe,"A",{href:!0});var Kgt=s(sX);rUo=r(Kgt,"UniSpeechForSequenceClassification"),Kgt.forEach(t),tUo=r(Vxe," (UniSpeech model)"),Vxe.forEach(t),aUo=i(bo),c6=n(bo,"LI",{});var Xxe=s(c6);Ape=n(Xxe,"STRONG",{});var Zgt=s(Ape);nUo=r(Zgt,"unispeech-sat"),Zgt.forEach(t),sUo=r(Xxe," \u2014 "),lX=n(Xxe,"A",{href:!0});var eht=s(lX);lUo=r(eht,"UniSpeechSatForSequenceClassification"),eht.forEach(t),iUo=r(Xxe," (UniSpeechSat model)"),Xxe.forEach(t),dUo=i(bo),f6=n(bo,"LI",{});var zxe=s(f6);ype=n(zxe,"STRONG",{});var oht=s(ype);cUo=r(oht,"wav2vec2"),oht.forEach(t),fUo=r(zxe," \u2014 "),iX=n(zxe,"A",{href:!0});var rht=s(iX);mUo=r(rht,"Wav2Vec2ForSequenceClassification"),rht.forEach(t),gUo=r(zxe," (Wav2Vec2 model)"),zxe.forEach(t),hUo=i(bo),m6=n(bo,"LI",{});var Qxe=s(m6);Lpe=n(Qxe,"STRONG",{});var tht=s(Lpe);pUo=r(tht,"wavlm"),tht.forEach(t),uUo=r(Qxe," \u2014 "),dX=n(Qxe,"A",{href:!0});var aht=s(dX);_Uo=r(aht,"WavLMForSequenceClassification"),aht.forEach(t),bUo=r(Qxe," (WavLM model)"),Qxe.forEach(t),bo.forEach(t),vUo=i(ma),g6=n(ma,"P",{});var Wxe=s(g6);FUo=r(Wxe,"The model is set in evaluation mode by default using "),xpe=n(Wxe,"CODE",{});var nht=s(xpe);TUo=r(nht,"model.eval()"),nht.forEach(t),MUo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(Wxe,"CODE",{});var sht=s($pe);EUo=r(sht,"model.train()"),sht.forEach(t),Wxe.forEach(t),CUo=i(ma),T(h6.$$.fragment,ma),ma.forEach(t),ol.forEach(t),nqe=i(f),fd=n(f,"H2",{class:!0});var dje=s(fd);p6=n(dje,"A",{id:!0,class:!0,href:!0});var lht=s(p6);kpe=n(lht,"SPAN",{});var iht=s(kpe);T(W0.$$.fragment,iht),iht.forEach(t),lht.forEach(t),wUo=i(dje),Spe=n(dje,"SPAN",{});var dht=s(Spe);AUo=r(dht,"AutoModelForAudioFrameClassification"),dht.forEach(t),dje.forEach(t),sqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(H0.$$.fragment,rl),yUo=i(rl),md=n(rl,"P",{});var ZK=s(md);LUo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cX=n(ZK,"A",{href:!0});var cht=s(cX);xUo=r(cht,"from_pretrained()"),cht.forEach(t),$Uo=r(ZK," class method or the "),fX=n(ZK,"A",{href:!0});var fht=s(fX);kUo=r(fht,"from_config()"),fht.forEach(t),SUo=r(ZK,` class
method.`),ZK.forEach(t),RUo=i(rl),U0=n(rl,"P",{});var cje=s(U0);BUo=r(cje,"This class cannot be instantiated directly using "),Rpe=n(cje,"CODE",{});var mht=s(Rpe);PUo=r(mht,"__init__()"),mht.forEach(t),IUo=r(cje," (throws an error)."),cje.forEach(t),qUo=i(rl),ut=n(rl,"DIV",{class:!0});var P3=s(ut);T(J0.$$.fragment,P3),NUo=i(P3),Bpe=n(P3,"P",{});var ght=s(Bpe);jUo=r(ght,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ght.forEach(t),DUo=i(P3),gd=n(P3,"P",{});var eZ=s(gd);GUo=r(eZ,`Note:
Loading a model from its configuration file does `),Ppe=n(eZ,"STRONG",{});var hht=s(Ppe);OUo=r(hht,"not"),hht.forEach(t),VUo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(eZ,"A",{href:!0});var pht=s(mX);XUo=r(pht,"from_pretrained()"),pht.forEach(t),zUo=r(eZ," to load the model weights."),eZ.forEach(t),QUo=i(P3),T(u6.$$.fragment,P3),P3.forEach(t),WUo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(Y0.$$.fragment,ga),HUo=i(ga),Ipe=n(ga,"P",{});var uht=s(Ipe);UUo=r(uht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uht.forEach(t),JUo=i(ga),Da=n(ga,"P",{});var I3=s(Da);YUo=r(I3,"The model class to instantiate is selected based on the "),qpe=n(I3,"CODE",{});var _ht=s(qpe);KUo=r(_ht,"model_type"),_ht.forEach(t),ZUo=r(I3,` property of the config object (either
passed as an argument or loaded from `),Npe=n(I3,"CODE",{});var bht=s(Npe);eJo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),oJo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(I3,"CODE",{});var vht=s(jpe);rJo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),tJo=r(I3,":"),I3.forEach(t),aJo=i(ga),Ga=n(ga,"UL",{});var q3=s(Ga);_6=n(q3,"LI",{});var Hxe=s(_6);Dpe=n(Hxe,"STRONG",{});var Fht=s(Dpe);nJo=r(Fht,"data2vec-audio"),Fht.forEach(t),sJo=r(Hxe," \u2014 "),gX=n(Hxe,"A",{href:!0});var Tht=s(gX);lJo=r(Tht,"Data2VecAudioForAudioFrameClassification"),Tht.forEach(t),iJo=r(Hxe," (Data2VecAudio model)"),Hxe.forEach(t),dJo=i(q3),b6=n(q3,"LI",{});var Uxe=s(b6);Gpe=n(Uxe,"STRONG",{});var Mht=s(Gpe);cJo=r(Mht,"unispeech-sat"),Mht.forEach(t),fJo=r(Uxe," \u2014 "),hX=n(Uxe,"A",{href:!0});var Eht=s(hX);mJo=r(Eht,"UniSpeechSatForAudioFrameClassification"),Eht.forEach(t),gJo=r(Uxe," (UniSpeechSat model)"),Uxe.forEach(t),hJo=i(q3),v6=n(q3,"LI",{});var Jxe=s(v6);Ope=n(Jxe,"STRONG",{});var Cht=s(Ope);pJo=r(Cht,"wav2vec2"),Cht.forEach(t),uJo=r(Jxe," \u2014 "),pX=n(Jxe,"A",{href:!0});var wht=s(pX);_Jo=r(wht,"Wav2Vec2ForAudioFrameClassification"),wht.forEach(t),bJo=r(Jxe," (Wav2Vec2 model)"),Jxe.forEach(t),vJo=i(q3),F6=n(q3,"LI",{});var Yxe=s(F6);Vpe=n(Yxe,"STRONG",{});var Aht=s(Vpe);FJo=r(Aht,"wavlm"),Aht.forEach(t),TJo=r(Yxe," \u2014 "),uX=n(Yxe,"A",{href:!0});var yht=s(uX);MJo=r(yht,"WavLMForAudioFrameClassification"),yht.forEach(t),EJo=r(Yxe," (WavLM model)"),Yxe.forEach(t),q3.forEach(t),CJo=i(ga),T6=n(ga,"P",{});var Kxe=s(T6);wJo=r(Kxe,"The model is set in evaluation mode by default using "),Xpe=n(Kxe,"CODE",{});var Lht=s(Xpe);AJo=r(Lht,"model.eval()"),Lht.forEach(t),yJo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(Kxe,"CODE",{});var xht=s(zpe);LJo=r(xht,"model.train()"),xht.forEach(t),Kxe.forEach(t),xJo=i(ga),T(M6.$$.fragment,ga),ga.forEach(t),rl.forEach(t),lqe=i(f),hd=n(f,"H2",{class:!0});var fje=s(hd);E6=n(fje,"A",{id:!0,class:!0,href:!0});var $ht=s(E6);Qpe=n($ht,"SPAN",{});var kht=s(Qpe);T(K0.$$.fragment,kht),kht.forEach(t),$ht.forEach(t),$Jo=i(fje),Wpe=n(fje,"SPAN",{});var Sht=s(Wpe);kJo=r(Sht,"AutoModelForCTC"),Sht.forEach(t),fje.forEach(t),iqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(Z0.$$.fragment,tl),SJo=i(tl),pd=n(tl,"P",{});var oZ=s(pd);RJo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=n(oZ,"A",{href:!0});var Rht=s(_X);BJo=r(Rht,"from_pretrained()"),Rht.forEach(t),PJo=r(oZ," class method or the "),bX=n(oZ,"A",{href:!0});var Bht=s(bX);IJo=r(Bht,"from_config()"),Bht.forEach(t),qJo=r(oZ,` class
method.`),oZ.forEach(t),NJo=i(tl),ey=n(tl,"P",{});var mje=s(ey);jJo=r(mje,"This class cannot be instantiated directly using "),Hpe=n(mje,"CODE",{});var Pht=s(Hpe);DJo=r(Pht,"__init__()"),Pht.forEach(t),GJo=r(mje," (throws an error)."),mje.forEach(t),OJo=i(tl),_t=n(tl,"DIV",{class:!0});var N3=s(_t);T(oy.$$.fragment,N3),VJo=i(N3),Upe=n(N3,"P",{});var Iht=s(Upe);XJo=r(Iht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Iht.forEach(t),zJo=i(N3),ud=n(N3,"P",{});var rZ=s(ud);QJo=r(rZ,`Note:
Loading a model from its configuration file does `),Jpe=n(rZ,"STRONG",{});var qht=s(Jpe);WJo=r(qht,"not"),qht.forEach(t),HJo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(rZ,"A",{href:!0});var Nht=s(vX);UJo=r(Nht,"from_pretrained()"),Nht.forEach(t),JJo=r(rZ," to load the model weights."),rZ.forEach(t),YJo=i(N3),T(C6.$$.fragment,N3),N3.forEach(t),KJo=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(ry.$$.fragment,ha),ZJo=i(ha),Ype=n(ha,"P",{});var jht=s(Ype);eYo=r(jht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jht.forEach(t),oYo=i(ha),Oa=n(ha,"P",{});var j3=s(Oa);rYo=r(j3,"The model class to instantiate is selected based on the "),Kpe=n(j3,"CODE",{});var Dht=s(Kpe);tYo=r(Dht,"model_type"),Dht.forEach(t),aYo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(j3,"CODE",{});var Ght=s(Zpe);nYo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),sYo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(j3,"CODE",{});var Oht=s(eue);lYo=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),iYo=r(j3,":"),j3.forEach(t),dYo=i(ha),De=n(ha,"UL",{});var vo=s(De);w6=n(vo,"LI",{});var Zxe=s(w6);oue=n(Zxe,"STRONG",{});var Vht=s(oue);cYo=r(Vht,"data2vec-audio"),Vht.forEach(t),fYo=r(Zxe," \u2014 "),FX=n(Zxe,"A",{href:!0});var Xht=s(FX);mYo=r(Xht,"Data2VecAudioForCTC"),Xht.forEach(t),gYo=r(Zxe," (Data2VecAudio model)"),Zxe.forEach(t),hYo=i(vo),A6=n(vo,"LI",{});var e$e=s(A6);rue=n(e$e,"STRONG",{});var zht=s(rue);pYo=r(zht,"hubert"),zht.forEach(t),uYo=r(e$e," \u2014 "),TX=n(e$e,"A",{href:!0});var Qht=s(TX);_Yo=r(Qht,"HubertForCTC"),Qht.forEach(t),bYo=r(e$e," (Hubert model)"),e$e.forEach(t),vYo=i(vo),y6=n(vo,"LI",{});var o$e=s(y6);tue=n(o$e,"STRONG",{});var Wht=s(tue);FYo=r(Wht,"sew"),Wht.forEach(t),TYo=r(o$e," \u2014 "),MX=n(o$e,"A",{href:!0});var Hht=s(MX);MYo=r(Hht,"SEWForCTC"),Hht.forEach(t),EYo=r(o$e," (SEW model)"),o$e.forEach(t),CYo=i(vo),L6=n(vo,"LI",{});var r$e=s(L6);aue=n(r$e,"STRONG",{});var Uht=s(aue);wYo=r(Uht,"sew-d"),Uht.forEach(t),AYo=r(r$e," \u2014 "),EX=n(r$e,"A",{href:!0});var Jht=s(EX);yYo=r(Jht,"SEWDForCTC"),Jht.forEach(t),LYo=r(r$e," (SEW-D model)"),r$e.forEach(t),xYo=i(vo),x6=n(vo,"LI",{});var t$e=s(x6);nue=n(t$e,"STRONG",{});var Yht=s(nue);$Yo=r(Yht,"unispeech"),Yht.forEach(t),kYo=r(t$e," \u2014 "),CX=n(t$e,"A",{href:!0});var Kht=s(CX);SYo=r(Kht,"UniSpeechForCTC"),Kht.forEach(t),RYo=r(t$e," (UniSpeech model)"),t$e.forEach(t),BYo=i(vo),$6=n(vo,"LI",{});var a$e=s($6);sue=n(a$e,"STRONG",{});var Zht=s(sue);PYo=r(Zht,"unispeech-sat"),Zht.forEach(t),IYo=r(a$e," \u2014 "),wX=n(a$e,"A",{href:!0});var ept=s(wX);qYo=r(ept,"UniSpeechSatForCTC"),ept.forEach(t),NYo=r(a$e," (UniSpeechSat model)"),a$e.forEach(t),jYo=i(vo),k6=n(vo,"LI",{});var n$e=s(k6);lue=n(n$e,"STRONG",{});var opt=s(lue);DYo=r(opt,"wav2vec2"),opt.forEach(t),GYo=r(n$e," \u2014 "),AX=n(n$e,"A",{href:!0});var rpt=s(AX);OYo=r(rpt,"Wav2Vec2ForCTC"),rpt.forEach(t),VYo=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),XYo=i(vo),S6=n(vo,"LI",{});var s$e=s(S6);iue=n(s$e,"STRONG",{});var tpt=s(iue);zYo=r(tpt,"wavlm"),tpt.forEach(t),QYo=r(s$e," \u2014 "),yX=n(s$e,"A",{href:!0});var apt=s(yX);WYo=r(apt,"WavLMForCTC"),apt.forEach(t),HYo=r(s$e," (WavLM model)"),s$e.forEach(t),vo.forEach(t),UYo=i(ha),R6=n(ha,"P",{});var l$e=s(R6);JYo=r(l$e,"The model is set in evaluation mode by default using "),due=n(l$e,"CODE",{});var npt=s(due);YYo=r(npt,"model.eval()"),npt.forEach(t),KYo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(l$e,"CODE",{});var spt=s(cue);ZYo=r(spt,"model.train()"),spt.forEach(t),l$e.forEach(t),eKo=i(ha),T(B6.$$.fragment,ha),ha.forEach(t),tl.forEach(t),dqe=i(f),_d=n(f,"H2",{class:!0});var gje=s(_d);P6=n(gje,"A",{id:!0,class:!0,href:!0});var lpt=s(P6);fue=n(lpt,"SPAN",{});var ipt=s(fue);T(ty.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),oKo=i(gje),mue=n(gje,"SPAN",{});var dpt=s(mue);rKo=r(dpt,"AutoModelForSpeechSeq2Seq"),dpt.forEach(t),gje.forEach(t),cqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(ay.$$.fragment,al),tKo=i(al),bd=n(al,"P",{});var tZ=s(bd);aKo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LX=n(tZ,"A",{href:!0});var cpt=s(LX);nKo=r(cpt,"from_pretrained()"),cpt.forEach(t),sKo=r(tZ," class method or the "),xX=n(tZ,"A",{href:!0});var fpt=s(xX);lKo=r(fpt,"from_config()"),fpt.forEach(t),iKo=r(tZ,` class
method.`),tZ.forEach(t),dKo=i(al),ny=n(al,"P",{});var hje=s(ny);cKo=r(hje,"This class cannot be instantiated directly using "),gue=n(hje,"CODE",{});var mpt=s(gue);fKo=r(mpt,"__init__()"),mpt.forEach(t),mKo=r(hje," (throws an error)."),hje.forEach(t),gKo=i(al),bt=n(al,"DIV",{class:!0});var D3=s(bt);T(sy.$$.fragment,D3),hKo=i(D3),hue=n(D3,"P",{});var gpt=s(hue);pKo=r(gpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gpt.forEach(t),uKo=i(D3),vd=n(D3,"P",{});var aZ=s(vd);_Ko=r(aZ,`Note:
Loading a model from its configuration file does `),pue=n(aZ,"STRONG",{});var hpt=s(pue);bKo=r(hpt,"not"),hpt.forEach(t),vKo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(aZ,"A",{href:!0});var ppt=s($X);FKo=r(ppt,"from_pretrained()"),ppt.forEach(t),TKo=r(aZ," to load the model weights."),aZ.forEach(t),MKo=i(D3),T(I6.$$.fragment,D3),D3.forEach(t),EKo=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(ly.$$.fragment,pa),CKo=i(pa),uue=n(pa,"P",{});var upt=s(uue);wKo=r(upt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),upt.forEach(t),AKo=i(pa),Va=n(pa,"P",{});var G3=s(Va);yKo=r(G3,"The model class to instantiate is selected based on the "),_ue=n(G3,"CODE",{});var _pt=s(_ue);LKo=r(_pt,"model_type"),_pt.forEach(t),xKo=r(G3,` property of the config object (either
passed as an argument or loaded from `),bue=n(G3,"CODE",{});var bpt=s(bue);$Ko=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),kKo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(G3,"CODE",{});var vpt=s(vue);SKo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),RKo=r(G3,":"),G3.forEach(t),BKo=i(pa),iy=n(pa,"UL",{});var pje=s(iy);q6=n(pje,"LI",{});var i$e=s(q6);Fue=n(i$e,"STRONG",{});var Fpt=s(Fue);PKo=r(Fpt,"speech-encoder-decoder"),Fpt.forEach(t),IKo=r(i$e," \u2014 "),kX=n(i$e,"A",{href:!0});var Tpt=s(kX);qKo=r(Tpt,"SpeechEncoderDecoderModel"),Tpt.forEach(t),NKo=r(i$e," (Speech Encoder decoder model)"),i$e.forEach(t),jKo=i(pje),N6=n(pje,"LI",{});var d$e=s(N6);Tue=n(d$e,"STRONG",{});var Mpt=s(Tue);DKo=r(Mpt,"speech_to_text"),Mpt.forEach(t),GKo=r(d$e," \u2014 "),SX=n(d$e,"A",{href:!0});var Ept=s(SX);OKo=r(Ept,"Speech2TextForConditionalGeneration"),Ept.forEach(t),VKo=r(d$e," (Speech2Text model)"),d$e.forEach(t),pje.forEach(t),XKo=i(pa),j6=n(pa,"P",{});var c$e=s(j6);zKo=r(c$e,"The model is set in evaluation mode by default using "),Mue=n(c$e,"CODE",{});var Cpt=s(Mue);QKo=r(Cpt,"model.eval()"),Cpt.forEach(t),WKo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(c$e,"CODE",{});var wpt=s(Eue);HKo=r(wpt,"model.train()"),wpt.forEach(t),c$e.forEach(t),UKo=i(pa),T(D6.$$.fragment,pa),pa.forEach(t),al.forEach(t),fqe=i(f),Fd=n(f,"H2",{class:!0});var uje=s(Fd);G6=n(uje,"A",{id:!0,class:!0,href:!0});var Apt=s(G6);Cue=n(Apt,"SPAN",{});var ypt=s(Cue);T(dy.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),JKo=i(uje),wue=n(uje,"SPAN",{});var Lpt=s(wue);YKo=r(Lpt,"AutoModelForAudioXVector"),Lpt.forEach(t),uje.forEach(t),mqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(cy.$$.fragment,nl),KKo=i(nl),Td=n(nl,"P",{});var nZ=s(Td);ZKo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RX=n(nZ,"A",{href:!0});var xpt=s(RX);eZo=r(xpt,"from_pretrained()"),xpt.forEach(t),oZo=r(nZ," class method or the "),BX=n(nZ,"A",{href:!0});var $pt=s(BX);rZo=r($pt,"from_config()"),$pt.forEach(t),tZo=r(nZ,` class
method.`),nZ.forEach(t),aZo=i(nl),fy=n(nl,"P",{});var _je=s(fy);nZo=r(_je,"This class cannot be instantiated directly using "),Aue=n(_je,"CODE",{});var kpt=s(Aue);sZo=r(kpt,"__init__()"),kpt.forEach(t),lZo=r(_je," (throws an error)."),_je.forEach(t),iZo=i(nl),vt=n(nl,"DIV",{class:!0});var O3=s(vt);T(my.$$.fragment,O3),dZo=i(O3),yue=n(O3,"P",{});var Spt=s(yue);cZo=r(Spt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Spt.forEach(t),fZo=i(O3),Md=n(O3,"P",{});var sZ=s(Md);mZo=r(sZ,`Note:
Loading a model from its configuration file does `),Lue=n(sZ,"STRONG",{});var Rpt=s(Lue);gZo=r(Rpt,"not"),Rpt.forEach(t),hZo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(sZ,"A",{href:!0});var Bpt=s(PX);pZo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),uZo=r(sZ," to load the model weights."),sZ.forEach(t),_Zo=i(O3),T(O6.$$.fragment,O3),O3.forEach(t),bZo=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(gy.$$.fragment,ua),vZo=i(ua),xue=n(ua,"P",{});var Ppt=s(xue);FZo=r(Ppt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ppt.forEach(t),TZo=i(ua),Xa=n(ua,"P",{});var V3=s(Xa);MZo=r(V3,"The model class to instantiate is selected based on the "),$ue=n(V3,"CODE",{});var Ipt=s($ue);EZo=r(Ipt,"model_type"),Ipt.forEach(t),CZo=r(V3,` property of the config object (either
passed as an argument or loaded from `),kue=n(V3,"CODE",{});var qpt=s(kue);wZo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),AZo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(V3,"CODE",{});var Npt=s(Sue);yZo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),LZo=r(V3,":"),V3.forEach(t),xZo=i(ua),za=n(ua,"UL",{});var X3=s(za);V6=n(X3,"LI",{});var f$e=s(V6);Rue=n(f$e,"STRONG",{});var jpt=s(Rue);$Zo=r(jpt,"data2vec-audio"),jpt.forEach(t),kZo=r(f$e," \u2014 "),IX=n(f$e,"A",{href:!0});var Dpt=s(IX);SZo=r(Dpt,"Data2VecAudioForXVector"),Dpt.forEach(t),RZo=r(f$e," (Data2VecAudio model)"),f$e.forEach(t),BZo=i(X3),X6=n(X3,"LI",{});var m$e=s(X6);Bue=n(m$e,"STRONG",{});var Gpt=s(Bue);PZo=r(Gpt,"unispeech-sat"),Gpt.forEach(t),IZo=r(m$e," \u2014 "),qX=n(m$e,"A",{href:!0});var Opt=s(qX);qZo=r(Opt,"UniSpeechSatForXVector"),Opt.forEach(t),NZo=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),jZo=i(X3),z6=n(X3,"LI",{});var g$e=s(z6);Pue=n(g$e,"STRONG",{});var Vpt=s(Pue);DZo=r(Vpt,"wav2vec2"),Vpt.forEach(t),GZo=r(g$e," \u2014 "),NX=n(g$e,"A",{href:!0});var Xpt=s(NX);OZo=r(Xpt,"Wav2Vec2ForXVector"),Xpt.forEach(t),VZo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),XZo=i(X3),Q6=n(X3,"LI",{});var h$e=s(Q6);Iue=n(h$e,"STRONG",{});var zpt=s(Iue);zZo=r(zpt,"wavlm"),zpt.forEach(t),QZo=r(h$e," \u2014 "),jX=n(h$e,"A",{href:!0});var Qpt=s(jX);WZo=r(Qpt,"WavLMForXVector"),Qpt.forEach(t),HZo=r(h$e," (WavLM model)"),h$e.forEach(t),X3.forEach(t),UZo=i(ua),W6=n(ua,"P",{});var p$e=s(W6);JZo=r(p$e,"The model is set in evaluation mode by default using "),que=n(p$e,"CODE",{});var Wpt=s(que);YZo=r(Wpt,"model.eval()"),Wpt.forEach(t),KZo=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(p$e,"CODE",{});var Hpt=s(Nue);ZZo=r(Hpt,"model.train()"),Hpt.forEach(t),p$e.forEach(t),eer=i(ua),T(H6.$$.fragment,ua),ua.forEach(t),nl.forEach(t),gqe=i(f),Ed=n(f,"H2",{class:!0});var bje=s(Ed);U6=n(bje,"A",{id:!0,class:!0,href:!0});var Upt=s(U6);jue=n(Upt,"SPAN",{});var Jpt=s(jue);T(hy.$$.fragment,Jpt),Jpt.forEach(t),Upt.forEach(t),oer=i(bje),Due=n(bje,"SPAN",{});var Ypt=s(Due);rer=r(Ypt,"AutoModelForMaskedImageModeling"),Ypt.forEach(t),bje.forEach(t),hqe=i(f),Qo=n(f,"DIV",{class:!0});var sl=s(Qo);T(py.$$.fragment,sl),ter=i(sl),Cd=n(sl,"P",{});var lZ=s(Cd);aer=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DX=n(lZ,"A",{href:!0});var Kpt=s(DX);ner=r(Kpt,"from_pretrained()"),Kpt.forEach(t),ser=r(lZ," class method or the "),GX=n(lZ,"A",{href:!0});var Zpt=s(GX);ler=r(Zpt,"from_config()"),Zpt.forEach(t),ier=r(lZ,` class
method.`),lZ.forEach(t),der=i(sl),uy=n(sl,"P",{});var vje=s(uy);cer=r(vje,"This class cannot be instantiated directly using "),Gue=n(vje,"CODE",{});var eut=s(Gue);fer=r(eut,"__init__()"),eut.forEach(t),mer=r(vje," (throws an error)."),vje.forEach(t),ger=i(sl),Ft=n(sl,"DIV",{class:!0});var z3=s(Ft);T(_y.$$.fragment,z3),her=i(z3),Oue=n(z3,"P",{});var out=s(Oue);per=r(out,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),out.forEach(t),uer=i(z3),wd=n(z3,"P",{});var iZ=s(wd);_er=r(iZ,`Note:
Loading a model from its configuration file does `),Vue=n(iZ,"STRONG",{});var rut=s(Vue);ber=r(rut,"not"),rut.forEach(t),ver=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(iZ,"A",{href:!0});var tut=s(OX);Fer=r(tut,"from_pretrained()"),tut.forEach(t),Ter=r(iZ," to load the model weights."),iZ.forEach(t),Mer=i(z3),T(J6.$$.fragment,z3),z3.forEach(t),Eer=i(sl),go=n(sl,"DIV",{class:!0});var _a=s(go);T(by.$$.fragment,_a),Cer=i(_a),Xue=n(_a,"P",{});var aut=s(Xue);wer=r(aut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aut.forEach(t),Aer=i(_a),Qa=n(_a,"P",{});var Q3=s(Qa);yer=r(Q3,"The model class to instantiate is selected based on the "),zue=n(Q3,"CODE",{});var nut=s(zue);Ler=r(nut,"model_type"),nut.forEach(t),xer=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Que=n(Q3,"CODE",{});var sut=s(Que);$er=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),ker=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(Q3,"CODE",{});var lut=s(Wue);Ser=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),Rer=r(Q3,":"),Q3.forEach(t),Ber=i(_a),Ad=n(_a,"UL",{});var dZ=s(Ad);Y6=n(dZ,"LI",{});var u$e=s(Y6);Hue=n(u$e,"STRONG",{});var iut=s(Hue);Per=r(iut,"deit"),iut.forEach(t),Ier=r(u$e," \u2014 "),VX=n(u$e,"A",{href:!0});var dut=s(VX);qer=r(dut,"DeiTForMaskedImageModeling"),dut.forEach(t),Ner=r(u$e," (DeiT model)"),u$e.forEach(t),jer=i(dZ),K6=n(dZ,"LI",{});var _$e=s(K6);Uue=n(_$e,"STRONG",{});var cut=s(Uue);Der=r(cut,"swin"),cut.forEach(t),Ger=r(_$e," \u2014 "),XX=n(_$e,"A",{href:!0});var fut=s(XX);Oer=r(fut,"SwinForMaskedImageModeling"),fut.forEach(t),Ver=r(_$e," (Swin model)"),_$e.forEach(t),Xer=i(dZ),Z6=n(dZ,"LI",{});var b$e=s(Z6);Jue=n(b$e,"STRONG",{});var mut=s(Jue);zer=r(mut,"vit"),mut.forEach(t),Qer=r(b$e," \u2014 "),zX=n(b$e,"A",{href:!0});var gut=s(zX);Wer=r(gut,"ViTForMaskedImageModeling"),gut.forEach(t),Her=r(b$e," (ViT model)"),b$e.forEach(t),dZ.forEach(t),Uer=i(_a),eT=n(_a,"P",{});var v$e=s(eT);Jer=r(v$e,"The model is set in evaluation mode by default using "),Yue=n(v$e,"CODE",{});var hut=s(Yue);Yer=r(hut,"model.eval()"),hut.forEach(t),Ker=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(v$e,"CODE",{});var put=s(Kue);Zer=r(put,"model.train()"),put.forEach(t),v$e.forEach(t),eor=i(_a),T(oT.$$.fragment,_a),_a.forEach(t),sl.forEach(t),pqe=i(f),yd=n(f,"H2",{class:!0});var Fje=s(yd);rT=n(Fje,"A",{id:!0,class:!0,href:!0});var uut=s(rT);Zue=n(uut,"SPAN",{});var _ut=s(Zue);T(vy.$$.fragment,_ut),_ut.forEach(t),uut.forEach(t),oor=i(Fje),e_e=n(Fje,"SPAN",{});var but=s(e_e);ror=r(but,"AutoModelForObjectDetection"),but.forEach(t),Fje.forEach(t),uqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(Fy.$$.fragment,ll),tor=i(ll),Ld=n(ll,"P",{});var cZ=s(Ld);aor=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QX=n(cZ,"A",{href:!0});var vut=s(QX);nor=r(vut,"from_pretrained()"),vut.forEach(t),sor=r(cZ," class method or the "),WX=n(cZ,"A",{href:!0});var Fut=s(WX);lor=r(Fut,"from_config()"),Fut.forEach(t),ior=r(cZ,` class
method.`),cZ.forEach(t),dor=i(ll),Ty=n(ll,"P",{});var Tje=s(Ty);cor=r(Tje,"This class cannot be instantiated directly using "),o_e=n(Tje,"CODE",{});var Tut=s(o_e);mor=r(Tut,"__init__()"),Tut.forEach(t),gor=r(Tje," (throws an error)."),Tje.forEach(t),hor=i(ll),Tt=n(ll,"DIV",{class:!0});var W3=s(Tt);T(My.$$.fragment,W3),por=i(W3),r_e=n(W3,"P",{});var Mut=s(r_e);uor=r(Mut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mut.forEach(t),_or=i(W3),xd=n(W3,"P",{});var fZ=s(xd);bor=r(fZ,`Note:
Loading a model from its configuration file does `),t_e=n(fZ,"STRONG",{});var Eut=s(t_e);vor=r(Eut,"not"),Eut.forEach(t),For=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(fZ,"A",{href:!0});var Cut=s(HX);Tor=r(Cut,"from_pretrained()"),Cut.forEach(t),Mor=r(fZ," to load the model weights."),fZ.forEach(t),Eor=i(W3),T(tT.$$.fragment,W3),W3.forEach(t),Cor=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Ey.$$.fragment,ba),wor=i(ba),a_e=n(ba,"P",{});var wut=s(a_e);Aor=r(wut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wut.forEach(t),yor=i(ba),Wa=n(ba,"P",{});var H3=s(Wa);Lor=r(H3,"The model class to instantiate is selected based on the "),n_e=n(H3,"CODE",{});var Aut=s(n_e);xor=r(Aut,"model_type"),Aut.forEach(t),$or=r(H3,` property of the config object (either
passed as an argument or loaded from `),s_e=n(H3,"CODE",{});var yut=s(s_e);kor=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),Sor=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(H3,"CODE",{});var Lut=s(l_e);Ror=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),Bor=r(H3,":"),H3.forEach(t),Por=i(ba),Cy=n(ba,"UL",{});var Mje=s(Cy);aT=n(Mje,"LI",{});var F$e=s(aT);i_e=n(F$e,"STRONG",{});var xut=s(i_e);Ior=r(xut,"detr"),xut.forEach(t),qor=r(F$e," \u2014 "),UX=n(F$e,"A",{href:!0});var $ut=s(UX);Nor=r($ut,"DetrForObjectDetection"),$ut.forEach(t),jor=r(F$e," (DETR model)"),F$e.forEach(t),Dor=i(Mje),nT=n(Mje,"LI",{});var T$e=s(nT);d_e=n(T$e,"STRONG",{});var kut=s(d_e);Gor=r(kut,"yolos"),kut.forEach(t),Oor=r(T$e," \u2014 "),JX=n(T$e,"A",{href:!0});var Sut=s(JX);Vor=r(Sut,"YolosForObjectDetection"),Sut.forEach(t),Xor=r(T$e," (YOLOS model)"),T$e.forEach(t),Mje.forEach(t),zor=i(ba),sT=n(ba,"P",{});var M$e=s(sT);Qor=r(M$e,"The model is set in evaluation mode by default using "),c_e=n(M$e,"CODE",{});var Rut=s(c_e);Wor=r(Rut,"model.eval()"),Rut.forEach(t),Hor=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(M$e,"CODE",{});var But=s(f_e);Uor=r(But,"model.train()"),But.forEach(t),M$e.forEach(t),Jor=i(ba),T(lT.$$.fragment,ba),ba.forEach(t),ll.forEach(t),_qe=i(f),$d=n(f,"H2",{class:!0});var Eje=s($d);iT=n(Eje,"A",{id:!0,class:!0,href:!0});var Put=s(iT);m_e=n(Put,"SPAN",{});var Iut=s(m_e);T(wy.$$.fragment,Iut),Iut.forEach(t),Put.forEach(t),Yor=i(Eje),g_e=n(Eje,"SPAN",{});var qut=s(g_e);Kor=r(qut,"AutoModelForImageSegmentation"),qut.forEach(t),Eje.forEach(t),bqe=i(f),Ho=n(f,"DIV",{class:!0});var il=s(Ho);T(Ay.$$.fragment,il),Zor=i(il),kd=n(il,"P",{});var mZ=s(kd);err=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YX=n(mZ,"A",{href:!0});var Nut=s(YX);orr=r(Nut,"from_pretrained()"),Nut.forEach(t),rrr=r(mZ," class method or the "),KX=n(mZ,"A",{href:!0});var jut=s(KX);trr=r(jut,"from_config()"),jut.forEach(t),arr=r(mZ,` class
method.`),mZ.forEach(t),nrr=i(il),yy=n(il,"P",{});var Cje=s(yy);srr=r(Cje,"This class cannot be instantiated directly using "),h_e=n(Cje,"CODE",{});var Dut=s(h_e);lrr=r(Dut,"__init__()"),Dut.forEach(t),irr=r(Cje," (throws an error)."),Cje.forEach(t),drr=i(il),Mt=n(il,"DIV",{class:!0});var U3=s(Mt);T(Ly.$$.fragment,U3),crr=i(U3),p_e=n(U3,"P",{});var Gut=s(p_e);frr=r(Gut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Gut.forEach(t),mrr=i(U3),Sd=n(U3,"P",{});var gZ=s(Sd);grr=r(gZ,`Note:
Loading a model from its configuration file does `),u_e=n(gZ,"STRONG",{});var Out=s(u_e);hrr=r(Out,"not"),Out.forEach(t),prr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(gZ,"A",{href:!0});var Vut=s(ZX);urr=r(Vut,"from_pretrained()"),Vut.forEach(t),_rr=r(gZ," to load the model weights."),gZ.forEach(t),brr=i(U3),T(dT.$$.fragment,U3),U3.forEach(t),vrr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(xy.$$.fragment,va),Frr=i(va),__e=n(va,"P",{});var Xut=s(__e);Trr=r(Xut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xut.forEach(t),Mrr=i(va),Ha=n(va,"P",{});var J3=s(Ha);Err=r(J3,"The model class to instantiate is selected based on the "),b_e=n(J3,"CODE",{});var zut=s(b_e);Crr=r(zut,"model_type"),zut.forEach(t),wrr=r(J3,` property of the config object (either
passed as an argument or loaded from `),v_e=n(J3,"CODE",{});var Qut=s(v_e);Arr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),yrr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(J3,"CODE",{});var Wut=s(F_e);Lrr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),xrr=r(J3,":"),J3.forEach(t),$rr=i(va),T_e=n(va,"UL",{});var Hut=s(T_e);cT=n(Hut,"LI",{});var E$e=s(cT);M_e=n(E$e,"STRONG",{});var Uut=s(M_e);krr=r(Uut,"detr"),Uut.forEach(t),Srr=r(E$e," \u2014 "),ez=n(E$e,"A",{href:!0});var Jut=s(ez);Rrr=r(Jut,"DetrForSegmentation"),Jut.forEach(t),Brr=r(E$e," (DETR model)"),E$e.forEach(t),Hut.forEach(t),Prr=i(va),fT=n(va,"P",{});var C$e=s(fT);Irr=r(C$e,"The model is set in evaluation mode by default using "),E_e=n(C$e,"CODE",{});var Yut=s(E_e);qrr=r(Yut,"model.eval()"),Yut.forEach(t),Nrr=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(C$e,"CODE",{});var Kut=s(C_e);jrr=r(Kut,"model.train()"),Kut.forEach(t),C$e.forEach(t),Drr=i(va),T(mT.$$.fragment,va),va.forEach(t),il.forEach(t),vqe=i(f),Rd=n(f,"H2",{class:!0});var wje=s(Rd);gT=n(wje,"A",{id:!0,class:!0,href:!0});var Zut=s(gT);w_e=n(Zut,"SPAN",{});var e_t=s(w_e);T($y.$$.fragment,e_t),e_t.forEach(t),Zut.forEach(t),Grr=i(wje),A_e=n(wje,"SPAN",{});var o_t=s(A_e);Orr=r(o_t,"AutoModelForSemanticSegmentation"),o_t.forEach(t),wje.forEach(t),Fqe=i(f),Uo=n(f,"DIV",{class:!0});var dl=s(Uo);T(ky.$$.fragment,dl),Vrr=i(dl),Bd=n(dl,"P",{});var hZ=s(Bd);Xrr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oz=n(hZ,"A",{href:!0});var r_t=s(oz);zrr=r(r_t,"from_pretrained()"),r_t.forEach(t),Qrr=r(hZ," class method or the "),rz=n(hZ,"A",{href:!0});var t_t=s(rz);Wrr=r(t_t,"from_config()"),t_t.forEach(t),Hrr=r(hZ,` class
method.`),hZ.forEach(t),Urr=i(dl),Sy=n(dl,"P",{});var Aje=s(Sy);Jrr=r(Aje,"This class cannot be instantiated directly using "),y_e=n(Aje,"CODE",{});var a_t=s(y_e);Yrr=r(a_t,"__init__()"),a_t.forEach(t),Krr=r(Aje," (throws an error)."),Aje.forEach(t),Zrr=i(dl),Et=n(dl,"DIV",{class:!0});var Y3=s(Et);T(Ry.$$.fragment,Y3),etr=i(Y3),L_e=n(Y3,"P",{});var n_t=s(L_e);otr=r(n_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),n_t.forEach(t),rtr=i(Y3),Pd=n(Y3,"P",{});var pZ=s(Pd);ttr=r(pZ,`Note:
Loading a model from its configuration file does `),x_e=n(pZ,"STRONG",{});var s_t=s(x_e);atr=r(s_t,"not"),s_t.forEach(t),ntr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(pZ,"A",{href:!0});var l_t=s(tz);str=r(l_t,"from_pretrained()"),l_t.forEach(t),ltr=r(pZ," to load the model weights."),pZ.forEach(t),itr=i(Y3),T(hT.$$.fragment,Y3),Y3.forEach(t),dtr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(By.$$.fragment,Fa),ctr=i(Fa),$_e=n(Fa,"P",{});var i_t=s($_e);ftr=r(i_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),i_t.forEach(t),mtr=i(Fa),Ua=n(Fa,"P",{});var K3=s(Ua);gtr=r(K3,"The model class to instantiate is selected based on the "),k_e=n(K3,"CODE",{});var d_t=s(k_e);htr=r(d_t,"model_type"),d_t.forEach(t),ptr=r(K3,` property of the config object (either
passed as an argument or loaded from `),S_e=n(K3,"CODE",{});var c_t=s(S_e);utr=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),_tr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(K3,"CODE",{});var f_t=s(R_e);btr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),vtr=r(K3,":"),K3.forEach(t),Ftr=i(Fa),Ja=n(Fa,"UL",{});var Z3=s(Ja);pT=n(Z3,"LI",{});var w$e=s(pT);B_e=n(w$e,"STRONG",{});var m_t=s(B_e);Ttr=r(m_t,"beit"),m_t.forEach(t),Mtr=r(w$e," \u2014 "),az=n(w$e,"A",{href:!0});var g_t=s(az);Etr=r(g_t,"BeitForSemanticSegmentation"),g_t.forEach(t),Ctr=r(w$e," (BEiT model)"),w$e.forEach(t),wtr=i(Z3),uT=n(Z3,"LI",{});var A$e=s(uT);P_e=n(A$e,"STRONG",{});var h_t=s(P_e);Atr=r(h_t,"data2vec-vision"),h_t.forEach(t),ytr=r(A$e," \u2014 "),nz=n(A$e,"A",{href:!0});var p_t=s(nz);Ltr=r(p_t,"Data2VecVisionForSemanticSegmentation"),p_t.forEach(t),xtr=r(A$e," (Data2VecVision model)"),A$e.forEach(t),$tr=i(Z3),_T=n(Z3,"LI",{});var y$e=s(_T);I_e=n(y$e,"STRONG",{});var u_t=s(I_e);ktr=r(u_t,"dpt"),u_t.forEach(t),Str=r(y$e," \u2014 "),sz=n(y$e,"A",{href:!0});var __t=s(sz);Rtr=r(__t,"DPTForSemanticSegmentation"),__t.forEach(t),Btr=r(y$e," (DPT model)"),y$e.forEach(t),Ptr=i(Z3),bT=n(Z3,"LI",{});var L$e=s(bT);q_e=n(L$e,"STRONG",{});var b_t=s(q_e);Itr=r(b_t,"segformer"),b_t.forEach(t),qtr=r(L$e," \u2014 "),lz=n(L$e,"A",{href:!0});var v_t=s(lz);Ntr=r(v_t,"SegformerForSemanticSegmentation"),v_t.forEach(t),jtr=r(L$e," (SegFormer model)"),L$e.forEach(t),Z3.forEach(t),Dtr=i(Fa),vT=n(Fa,"P",{});var x$e=s(vT);Gtr=r(x$e,"The model is set in evaluation mode by default using "),N_e=n(x$e,"CODE",{});var F_t=s(N_e);Otr=r(F_t,"model.eval()"),F_t.forEach(t),Vtr=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(x$e,"CODE",{});var T_t=s(j_e);Xtr=r(T_t,"model.train()"),T_t.forEach(t),x$e.forEach(t),ztr=i(Fa),T(FT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Tqe=i(f),Id=n(f,"H2",{class:!0});var yje=s(Id);TT=n(yje,"A",{id:!0,class:!0,href:!0});var M_t=s(TT);D_e=n(M_t,"SPAN",{});var E_t=s(D_e);T(Py.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Qtr=i(yje),G_e=n(yje,"SPAN",{});var C_t=s(G_e);Wtr=r(C_t,"AutoModelForInstanceSegmentation"),C_t.forEach(t),yje.forEach(t),Mqe=i(f),Jo=n(f,"DIV",{class:!0});var cl=s(Jo);T(Iy.$$.fragment,cl),Htr=i(cl),qd=n(cl,"P",{});var uZ=s(qd);Utr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iz=n(uZ,"A",{href:!0});var w_t=s(iz);Jtr=r(w_t,"from_pretrained()"),w_t.forEach(t),Ytr=r(uZ," class method or the "),dz=n(uZ,"A",{href:!0});var A_t=s(dz);Ktr=r(A_t,"from_config()"),A_t.forEach(t),Ztr=r(uZ,` class
method.`),uZ.forEach(t),ear=i(cl),qy=n(cl,"P",{});var Lje=s(qy);oar=r(Lje,"This class cannot be instantiated directly using "),O_e=n(Lje,"CODE",{});var y_t=s(O_e);rar=r(y_t,"__init__()"),y_t.forEach(t),tar=r(Lje," (throws an error)."),Lje.forEach(t),aar=i(cl),Ct=n(cl,"DIV",{class:!0});var ew=s(Ct);T(Ny.$$.fragment,ew),nar=i(ew),V_e=n(ew,"P",{});var L_t=s(V_e);sar=r(L_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),L_t.forEach(t),lar=i(ew),Nd=n(ew,"P",{});var _Z=s(Nd);iar=r(_Z,`Note:
Loading a model from its configuration file does `),X_e=n(_Z,"STRONG",{});var x_t=s(X_e);dar=r(x_t,"not"),x_t.forEach(t),car=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(_Z,"A",{href:!0});var $_t=s(cz);far=r($_t,"from_pretrained()"),$_t.forEach(t),mar=r(_Z," to load the model weights."),_Z.forEach(t),gar=i(ew),T(MT.$$.fragment,ew),ew.forEach(t),har=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(jy.$$.fragment,Ta),par=i(Ta),z_e=n(Ta,"P",{});var k_t=s(z_e);uar=r(k_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),k_t.forEach(t),_ar=i(Ta),Ya=n(Ta,"P",{});var ow=s(Ya);bar=r(ow,"The model class to instantiate is selected based on the "),Q_e=n(ow,"CODE",{});var S_t=s(Q_e);Far=r(S_t,"model_type"),S_t.forEach(t),Tar=r(ow,` property of the config object (either
passed as an argument or loaded from `),W_e=n(ow,"CODE",{});var R_t=s(W_e);Mar=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),Ear=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(ow,"CODE",{});var B_t=s(H_e);Car=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),war=r(ow,":"),ow.forEach(t),Aar=i(Ta),U_e=n(Ta,"UL",{});var P_t=s(U_e);ET=n(P_t,"LI",{});var $$e=s(ET);J_e=n($$e,"STRONG",{});var I_t=s(J_e);yar=r(I_t,"maskformer"),I_t.forEach(t),Lar=r($$e," \u2014 "),fz=n($$e,"A",{href:!0});var q_t=s(fz);xar=r(q_t,"MaskFormerForInstanceSegmentation"),q_t.forEach(t),$ar=r($$e," (MaskFormer model)"),$$e.forEach(t),P_t.forEach(t),kar=i(Ta),CT=n(Ta,"P",{});var k$e=s(CT);Sar=r(k$e,"The model is set in evaluation mode by default using "),Y_e=n(k$e,"CODE",{});var N_t=s(Y_e);Rar=r(N_t,"model.eval()"),N_t.forEach(t),Bar=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(k$e,"CODE",{});var j_t=s(K_e);Par=r(j_t,"model.train()"),j_t.forEach(t),k$e.forEach(t),Iar=i(Ta),T(wT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),Eqe=i(f),jd=n(f,"H2",{class:!0});var xje=s(jd);AT=n(xje,"A",{id:!0,class:!0,href:!0});var D_t=s(AT);Z_e=n(D_t,"SPAN",{});var G_t=s(Z_e);T(Dy.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),qar=i(xje),e2e=n(xje,"SPAN",{});var O_t=s(e2e);Nar=r(O_t,"TFAutoModel"),O_t.forEach(t),xje.forEach(t),Cqe=i(f),Yo=n(f,"DIV",{class:!0});var fl=s(Yo);T(Gy.$$.fragment,fl),jar=i(fl),Dd=n(fl,"P",{});var bZ=s(Dd);Dar=r(bZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mz=n(bZ,"A",{href:!0});var V_t=s(mz);Gar=r(V_t,"from_pretrained()"),V_t.forEach(t),Oar=r(bZ," class method or the "),gz=n(bZ,"A",{href:!0});var X_t=s(gz);Var=r(X_t,"from_config()"),X_t.forEach(t),Xar=r(bZ,` class
method.`),bZ.forEach(t),zar=i(fl),Oy=n(fl,"P",{});var $je=s(Oy);Qar=r($je,"This class cannot be instantiated directly using "),o2e=n($je,"CODE",{});var z_t=s(o2e);War=r(z_t,"__init__()"),z_t.forEach(t),Har=r($je," (throws an error)."),$je.forEach(t),Uar=i(fl),wt=n(fl,"DIV",{class:!0});var rw=s(wt);T(Vy.$$.fragment,rw),Jar=i(rw),r2e=n(rw,"P",{});var Q_t=s(r2e);Yar=r(Q_t,"Instantiates one of the base model classes of the library from a configuration."),Q_t.forEach(t),Kar=i(rw),Gd=n(rw,"P",{});var vZ=s(Gd);Zar=r(vZ,`Note:
Loading a model from its configuration file does `),t2e=n(vZ,"STRONG",{});var W_t=s(t2e);enr=r(W_t,"not"),W_t.forEach(t),onr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(vZ,"A",{href:!0});var H_t=s(hz);rnr=r(H_t,"from_pretrained()"),H_t.forEach(t),tnr=r(vZ," to load the model weights."),vZ.forEach(t),anr=i(rw),T(yT.$$.fragment,rw),rw.forEach(t),nnr=i(fl),wr=n(fl,"DIV",{class:!0});var ml=s(wr);T(Xy.$$.fragment,ml),snr=i(ml),a2e=n(ml,"P",{});var U_t=s(a2e);lnr=r(U_t,"Instantiate one of the base model classes of the library from a pretrained model."),U_t.forEach(t),inr=i(ml),Ka=n(ml,"P",{});var tw=s(Ka);dnr=r(tw,"The model class to instantiate is selected based on the "),n2e=n(tw,"CODE",{});var J_t=s(n2e);cnr=r(J_t,"model_type"),J_t.forEach(t),fnr=r(tw,` property of the config object (either
passed as an argument or loaded from `),s2e=n(tw,"CODE",{});var Y_t=s(s2e);mnr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),gnr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(tw,"CODE",{});var K_t=s(l2e);hnr=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),pnr=r(tw,":"),tw.forEach(t),unr=i(ml),N=n(ml,"UL",{});var D=s(N);LT=n(D,"LI",{});var S$e=s(LT);i2e=n(S$e,"STRONG",{});var Z_t=s(i2e);_nr=r(Z_t,"albert"),Z_t.forEach(t),bnr=r(S$e," \u2014 "),pz=n(S$e,"A",{href:!0});var e2t=s(pz);vnr=r(e2t,"TFAlbertModel"),e2t.forEach(t),Fnr=r(S$e," (ALBERT model)"),S$e.forEach(t),Tnr=i(D),xT=n(D,"LI",{});var R$e=s(xT);d2e=n(R$e,"STRONG",{});var o2t=s(d2e);Mnr=r(o2t,"bart"),o2t.forEach(t),Enr=r(R$e," \u2014 "),uz=n(R$e,"A",{href:!0});var r2t=s(uz);Cnr=r(r2t,"TFBartModel"),r2t.forEach(t),wnr=r(R$e," (BART model)"),R$e.forEach(t),Anr=i(D),$T=n(D,"LI",{});var B$e=s($T);c2e=n(B$e,"STRONG",{});var t2t=s(c2e);ynr=r(t2t,"bert"),t2t.forEach(t),Lnr=r(B$e," \u2014 "),_z=n(B$e,"A",{href:!0});var a2t=s(_z);xnr=r(a2t,"TFBertModel"),a2t.forEach(t),$nr=r(B$e," (BERT model)"),B$e.forEach(t),knr=i(D),kT=n(D,"LI",{});var P$e=s(kT);f2e=n(P$e,"STRONG",{});var n2t=s(f2e);Snr=r(n2t,"blenderbot"),n2t.forEach(t),Rnr=r(P$e," \u2014 "),bz=n(P$e,"A",{href:!0});var s2t=s(bz);Bnr=r(s2t,"TFBlenderbotModel"),s2t.forEach(t),Pnr=r(P$e," (Blenderbot model)"),P$e.forEach(t),Inr=i(D),ST=n(D,"LI",{});var I$e=s(ST);m2e=n(I$e,"STRONG",{});var l2t=s(m2e);qnr=r(l2t,"blenderbot-small"),l2t.forEach(t),Nnr=r(I$e," \u2014 "),vz=n(I$e,"A",{href:!0});var i2t=s(vz);jnr=r(i2t,"TFBlenderbotSmallModel"),i2t.forEach(t),Dnr=r(I$e," (BlenderbotSmall model)"),I$e.forEach(t),Gnr=i(D),RT=n(D,"LI",{});var q$e=s(RT);g2e=n(q$e,"STRONG",{});var d2t=s(g2e);Onr=r(d2t,"camembert"),d2t.forEach(t),Vnr=r(q$e," \u2014 "),Fz=n(q$e,"A",{href:!0});var c2t=s(Fz);Xnr=r(c2t,"TFCamembertModel"),c2t.forEach(t),znr=r(q$e," (CamemBERT model)"),q$e.forEach(t),Qnr=i(D),BT=n(D,"LI",{});var N$e=s(BT);h2e=n(N$e,"STRONG",{});var f2t=s(h2e);Wnr=r(f2t,"clip"),f2t.forEach(t),Hnr=r(N$e," \u2014 "),Tz=n(N$e,"A",{href:!0});var m2t=s(Tz);Unr=r(m2t,"TFCLIPModel"),m2t.forEach(t),Jnr=r(N$e," (CLIP model)"),N$e.forEach(t),Ynr=i(D),PT=n(D,"LI",{});var j$e=s(PT);p2e=n(j$e,"STRONG",{});var g2t=s(p2e);Knr=r(g2t,"convbert"),g2t.forEach(t),Znr=r(j$e," \u2014 "),Mz=n(j$e,"A",{href:!0});var h2t=s(Mz);esr=r(h2t,"TFConvBertModel"),h2t.forEach(t),osr=r(j$e," (ConvBERT model)"),j$e.forEach(t),rsr=i(D),IT=n(D,"LI",{});var D$e=s(IT);u2e=n(D$e,"STRONG",{});var p2t=s(u2e);tsr=r(p2t,"convnext"),p2t.forEach(t),asr=r(D$e," \u2014 "),Ez=n(D$e,"A",{href:!0});var u2t=s(Ez);nsr=r(u2t,"TFConvNextModel"),u2t.forEach(t),ssr=r(D$e," (ConvNext model)"),D$e.forEach(t),lsr=i(D),qT=n(D,"LI",{});var G$e=s(qT);_2e=n(G$e,"STRONG",{});var _2t=s(_2e);isr=r(_2t,"ctrl"),_2t.forEach(t),dsr=r(G$e," \u2014 "),Cz=n(G$e,"A",{href:!0});var b2t=s(Cz);csr=r(b2t,"TFCTRLModel"),b2t.forEach(t),fsr=r(G$e," (CTRL model)"),G$e.forEach(t),msr=i(D),NT=n(D,"LI",{});var O$e=s(NT);b2e=n(O$e,"STRONG",{});var v2t=s(b2e);gsr=r(v2t,"data2vec-vision"),v2t.forEach(t),hsr=r(O$e," \u2014 "),wz=n(O$e,"A",{href:!0});var F2t=s(wz);psr=r(F2t,"TFData2VecVisionModel"),F2t.forEach(t),usr=r(O$e," (Data2VecVision model)"),O$e.forEach(t),_sr=i(D),jT=n(D,"LI",{});var V$e=s(jT);v2e=n(V$e,"STRONG",{});var T2t=s(v2e);bsr=r(T2t,"deberta"),T2t.forEach(t),vsr=r(V$e," \u2014 "),Az=n(V$e,"A",{href:!0});var M2t=s(Az);Fsr=r(M2t,"TFDebertaModel"),M2t.forEach(t),Tsr=r(V$e," (DeBERTa model)"),V$e.forEach(t),Msr=i(D),DT=n(D,"LI",{});var X$e=s(DT);F2e=n(X$e,"STRONG",{});var E2t=s(F2e);Esr=r(E2t,"deberta-v2"),E2t.forEach(t),Csr=r(X$e," \u2014 "),yz=n(X$e,"A",{href:!0});var C2t=s(yz);wsr=r(C2t,"TFDebertaV2Model"),C2t.forEach(t),Asr=r(X$e," (DeBERTa-v2 model)"),X$e.forEach(t),ysr=i(D),GT=n(D,"LI",{});var z$e=s(GT);T2e=n(z$e,"STRONG",{});var w2t=s(T2e);Lsr=r(w2t,"distilbert"),w2t.forEach(t),xsr=r(z$e," \u2014 "),Lz=n(z$e,"A",{href:!0});var A2t=s(Lz);$sr=r(A2t,"TFDistilBertModel"),A2t.forEach(t),ksr=r(z$e," (DistilBERT model)"),z$e.forEach(t),Ssr=i(D),OT=n(D,"LI",{});var Q$e=s(OT);M2e=n(Q$e,"STRONG",{});var y2t=s(M2e);Rsr=r(y2t,"dpr"),y2t.forEach(t),Bsr=r(Q$e," \u2014 "),xz=n(Q$e,"A",{href:!0});var L2t=s(xz);Psr=r(L2t,"TFDPRQuestionEncoder"),L2t.forEach(t),Isr=r(Q$e," (DPR model)"),Q$e.forEach(t),qsr=i(D),VT=n(D,"LI",{});var W$e=s(VT);E2e=n(W$e,"STRONG",{});var x2t=s(E2e);Nsr=r(x2t,"electra"),x2t.forEach(t),jsr=r(W$e," \u2014 "),$z=n(W$e,"A",{href:!0});var $2t=s($z);Dsr=r($2t,"TFElectraModel"),$2t.forEach(t),Gsr=r(W$e," (ELECTRA model)"),W$e.forEach(t),Osr=i(D),XT=n(D,"LI",{});var H$e=s(XT);C2e=n(H$e,"STRONG",{});var k2t=s(C2e);Vsr=r(k2t,"flaubert"),k2t.forEach(t),Xsr=r(H$e," \u2014 "),kz=n(H$e,"A",{href:!0});var S2t=s(kz);zsr=r(S2t,"TFFlaubertModel"),S2t.forEach(t),Qsr=r(H$e," (FlauBERT model)"),H$e.forEach(t),Wsr=i(D),Is=n(D,"LI",{});var M$=s(Is);w2e=n(M$,"STRONG",{});var R2t=s(w2e);Hsr=r(R2t,"funnel"),R2t.forEach(t),Usr=r(M$," \u2014 "),Sz=n(M$,"A",{href:!0});var B2t=s(Sz);Jsr=r(B2t,"TFFunnelModel"),B2t.forEach(t),Ysr=r(M$," or "),Rz=n(M$,"A",{href:!0});var P2t=s(Rz);Ksr=r(P2t,"TFFunnelBaseModel"),P2t.forEach(t),Zsr=r(M$," (Funnel Transformer model)"),M$.forEach(t),elr=i(D),zT=n(D,"LI",{});var U$e=s(zT);A2e=n(U$e,"STRONG",{});var I2t=s(A2e);olr=r(I2t,"gpt2"),I2t.forEach(t),rlr=r(U$e," \u2014 "),Bz=n(U$e,"A",{href:!0});var q2t=s(Bz);tlr=r(q2t,"TFGPT2Model"),q2t.forEach(t),alr=r(U$e," (OpenAI GPT-2 model)"),U$e.forEach(t),nlr=i(D),QT=n(D,"LI",{});var J$e=s(QT);y2e=n(J$e,"STRONG",{});var N2t=s(y2e);slr=r(N2t,"gptj"),N2t.forEach(t),llr=r(J$e," \u2014 "),Pz=n(J$e,"A",{href:!0});var j2t=s(Pz);ilr=r(j2t,"TFGPTJModel"),j2t.forEach(t),dlr=r(J$e," (GPT-J model)"),J$e.forEach(t),clr=i(D),WT=n(D,"LI",{});var Y$e=s(WT);L2e=n(Y$e,"STRONG",{});var D2t=s(L2e);flr=r(D2t,"hubert"),D2t.forEach(t),mlr=r(Y$e," \u2014 "),Iz=n(Y$e,"A",{href:!0});var G2t=s(Iz);glr=r(G2t,"TFHubertModel"),G2t.forEach(t),hlr=r(Y$e," (Hubert model)"),Y$e.forEach(t),plr=i(D),HT=n(D,"LI",{});var K$e=s(HT);x2e=n(K$e,"STRONG",{});var O2t=s(x2e);ulr=r(O2t,"layoutlm"),O2t.forEach(t),_lr=r(K$e," \u2014 "),qz=n(K$e,"A",{href:!0});var V2t=s(qz);blr=r(V2t,"TFLayoutLMModel"),V2t.forEach(t),vlr=r(K$e," (LayoutLM model)"),K$e.forEach(t),Flr=i(D),UT=n(D,"LI",{});var Z$e=s(UT);$2e=n(Z$e,"STRONG",{});var X2t=s($2e);Tlr=r(X2t,"led"),X2t.forEach(t),Mlr=r(Z$e," \u2014 "),Nz=n(Z$e,"A",{href:!0});var z2t=s(Nz);Elr=r(z2t,"TFLEDModel"),z2t.forEach(t),Clr=r(Z$e," (LED model)"),Z$e.forEach(t),wlr=i(D),JT=n(D,"LI",{});var eke=s(JT);k2e=n(eke,"STRONG",{});var Q2t=s(k2e);Alr=r(Q2t,"longformer"),Q2t.forEach(t),ylr=r(eke," \u2014 "),jz=n(eke,"A",{href:!0});var W2t=s(jz);Llr=r(W2t,"TFLongformerModel"),W2t.forEach(t),xlr=r(eke," (Longformer model)"),eke.forEach(t),$lr=i(D),YT=n(D,"LI",{});var oke=s(YT);S2e=n(oke,"STRONG",{});var H2t=s(S2e);klr=r(H2t,"lxmert"),H2t.forEach(t),Slr=r(oke," \u2014 "),Dz=n(oke,"A",{href:!0});var U2t=s(Dz);Rlr=r(U2t,"TFLxmertModel"),U2t.forEach(t),Blr=r(oke," (LXMERT model)"),oke.forEach(t),Plr=i(D),KT=n(D,"LI",{});var rke=s(KT);R2e=n(rke,"STRONG",{});var J2t=s(R2e);Ilr=r(J2t,"marian"),J2t.forEach(t),qlr=r(rke," \u2014 "),Gz=n(rke,"A",{href:!0});var Y2t=s(Gz);Nlr=r(Y2t,"TFMarianModel"),Y2t.forEach(t),jlr=r(rke," (Marian model)"),rke.forEach(t),Dlr=i(D),ZT=n(D,"LI",{});var tke=s(ZT);B2e=n(tke,"STRONG",{});var K2t=s(B2e);Glr=r(K2t,"mbart"),K2t.forEach(t),Olr=r(tke," \u2014 "),Oz=n(tke,"A",{href:!0});var Z2t=s(Oz);Vlr=r(Z2t,"TFMBartModel"),Z2t.forEach(t),Xlr=r(tke," (mBART model)"),tke.forEach(t),zlr=i(D),e9=n(D,"LI",{});var ake=s(e9);P2e=n(ake,"STRONG",{});var e1t=s(P2e);Qlr=r(e1t,"mobilebert"),e1t.forEach(t),Wlr=r(ake," \u2014 "),Vz=n(ake,"A",{href:!0});var o1t=s(Vz);Hlr=r(o1t,"TFMobileBertModel"),o1t.forEach(t),Ulr=r(ake," (MobileBERT model)"),ake.forEach(t),Jlr=i(D),o9=n(D,"LI",{});var nke=s(o9);I2e=n(nke,"STRONG",{});var r1t=s(I2e);Ylr=r(r1t,"mpnet"),r1t.forEach(t),Klr=r(nke," \u2014 "),Xz=n(nke,"A",{href:!0});var t1t=s(Xz);Zlr=r(t1t,"TFMPNetModel"),t1t.forEach(t),eir=r(nke," (MPNet model)"),nke.forEach(t),oir=i(D),r9=n(D,"LI",{});var ske=s(r9);q2e=n(ske,"STRONG",{});var a1t=s(q2e);rir=r(a1t,"mt5"),a1t.forEach(t),tir=r(ske," \u2014 "),zz=n(ske,"A",{href:!0});var n1t=s(zz);air=r(n1t,"TFMT5Model"),n1t.forEach(t),nir=r(ske," (mT5 model)"),ske.forEach(t),sir=i(D),t9=n(D,"LI",{});var lke=s(t9);N2e=n(lke,"STRONG",{});var s1t=s(N2e);lir=r(s1t,"openai-gpt"),s1t.forEach(t),iir=r(lke," \u2014 "),Qz=n(lke,"A",{href:!0});var l1t=s(Qz);dir=r(l1t,"TFOpenAIGPTModel"),l1t.forEach(t),cir=r(lke," (OpenAI GPT model)"),lke.forEach(t),fir=i(D),a9=n(D,"LI",{});var ike=s(a9);j2e=n(ike,"STRONG",{});var i1t=s(j2e);mir=r(i1t,"pegasus"),i1t.forEach(t),gir=r(ike," \u2014 "),Wz=n(ike,"A",{href:!0});var d1t=s(Wz);hir=r(d1t,"TFPegasusModel"),d1t.forEach(t),pir=r(ike," (Pegasus model)"),ike.forEach(t),uir=i(D),n9=n(D,"LI",{});var dke=s(n9);D2e=n(dke,"STRONG",{});var c1t=s(D2e);_ir=r(c1t,"rembert"),c1t.forEach(t),bir=r(dke," \u2014 "),Hz=n(dke,"A",{href:!0});var f1t=s(Hz);vir=r(f1t,"TFRemBertModel"),f1t.forEach(t),Fir=r(dke," (RemBERT model)"),dke.forEach(t),Tir=i(D),s9=n(D,"LI",{});var cke=s(s9);G2e=n(cke,"STRONG",{});var m1t=s(G2e);Mir=r(m1t,"roberta"),m1t.forEach(t),Eir=r(cke," \u2014 "),Uz=n(cke,"A",{href:!0});var g1t=s(Uz);Cir=r(g1t,"TFRobertaModel"),g1t.forEach(t),wir=r(cke," (RoBERTa model)"),cke.forEach(t),Air=i(D),l9=n(D,"LI",{});var fke=s(l9);O2e=n(fke,"STRONG",{});var h1t=s(O2e);yir=r(h1t,"roformer"),h1t.forEach(t),Lir=r(fke," \u2014 "),Jz=n(fke,"A",{href:!0});var p1t=s(Jz);xir=r(p1t,"TFRoFormerModel"),p1t.forEach(t),$ir=r(fke," (RoFormer model)"),fke.forEach(t),kir=i(D),i9=n(D,"LI",{});var mke=s(i9);V2e=n(mke,"STRONG",{});var u1t=s(V2e);Sir=r(u1t,"speech_to_text"),u1t.forEach(t),Rir=r(mke," \u2014 "),Yz=n(mke,"A",{href:!0});var _1t=s(Yz);Bir=r(_1t,"TFSpeech2TextModel"),_1t.forEach(t),Pir=r(mke," (Speech2Text model)"),mke.forEach(t),Iir=i(D),d9=n(D,"LI",{});var gke=s(d9);X2e=n(gke,"STRONG",{});var b1t=s(X2e);qir=r(b1t,"swin"),b1t.forEach(t),Nir=r(gke," \u2014 "),Kz=n(gke,"A",{href:!0});var v1t=s(Kz);jir=r(v1t,"TFSwinModel"),v1t.forEach(t),Dir=r(gke," (Swin model)"),gke.forEach(t),Gir=i(D),c9=n(D,"LI",{});var hke=s(c9);z2e=n(hke,"STRONG",{});var F1t=s(z2e);Oir=r(F1t,"t5"),F1t.forEach(t),Vir=r(hke," \u2014 "),Zz=n(hke,"A",{href:!0});var T1t=s(Zz);Xir=r(T1t,"TFT5Model"),T1t.forEach(t),zir=r(hke," (T5 model)"),hke.forEach(t),Qir=i(D),f9=n(D,"LI",{});var pke=s(f9);Q2e=n(pke,"STRONG",{});var M1t=s(Q2e);Wir=r(M1t,"tapas"),M1t.forEach(t),Hir=r(pke," \u2014 "),eQ=n(pke,"A",{href:!0});var E1t=s(eQ);Uir=r(E1t,"TFTapasModel"),E1t.forEach(t),Jir=r(pke," (TAPAS model)"),pke.forEach(t),Yir=i(D),m9=n(D,"LI",{});var uke=s(m9);W2e=n(uke,"STRONG",{});var C1t=s(W2e);Kir=r(C1t,"transfo-xl"),C1t.forEach(t),Zir=r(uke," \u2014 "),oQ=n(uke,"A",{href:!0});var w1t=s(oQ);edr=r(w1t,"TFTransfoXLModel"),w1t.forEach(t),odr=r(uke," (Transformer-XL model)"),uke.forEach(t),rdr=i(D),g9=n(D,"LI",{});var _ke=s(g9);H2e=n(_ke,"STRONG",{});var A1t=s(H2e);tdr=r(A1t,"vit"),A1t.forEach(t),adr=r(_ke," \u2014 "),rQ=n(_ke,"A",{href:!0});var y1t=s(rQ);ndr=r(y1t,"TFViTModel"),y1t.forEach(t),sdr=r(_ke," (ViT model)"),_ke.forEach(t),ldr=i(D),h9=n(D,"LI",{});var bke=s(h9);U2e=n(bke,"STRONG",{});var L1t=s(U2e);idr=r(L1t,"vit_mae"),L1t.forEach(t),ddr=r(bke," \u2014 "),tQ=n(bke,"A",{href:!0});var x1t=s(tQ);cdr=r(x1t,"TFViTMAEModel"),x1t.forEach(t),fdr=r(bke," (ViTMAE model)"),bke.forEach(t),mdr=i(D),p9=n(D,"LI",{});var vke=s(p9);J2e=n(vke,"STRONG",{});var $1t=s(J2e);gdr=r($1t,"wav2vec2"),$1t.forEach(t),hdr=r(vke," \u2014 "),aQ=n(vke,"A",{href:!0});var k1t=s(aQ);pdr=r(k1t,"TFWav2Vec2Model"),k1t.forEach(t),udr=r(vke," (Wav2Vec2 model)"),vke.forEach(t),_dr=i(D),u9=n(D,"LI",{});var Fke=s(u9);Y2e=n(Fke,"STRONG",{});var S1t=s(Y2e);bdr=r(S1t,"xlm"),S1t.forEach(t),vdr=r(Fke," \u2014 "),nQ=n(Fke,"A",{href:!0});var R1t=s(nQ);Fdr=r(R1t,"TFXLMModel"),R1t.forEach(t),Tdr=r(Fke," (XLM model)"),Fke.forEach(t),Mdr=i(D),_9=n(D,"LI",{});var Tke=s(_9);K2e=n(Tke,"STRONG",{});var B1t=s(K2e);Edr=r(B1t,"xlm-roberta"),B1t.forEach(t),Cdr=r(Tke," \u2014 "),sQ=n(Tke,"A",{href:!0});var P1t=s(sQ);wdr=r(P1t,"TFXLMRobertaModel"),P1t.forEach(t),Adr=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),ydr=i(D),b9=n(D,"LI",{});var Mke=s(b9);Z2e=n(Mke,"STRONG",{});var I1t=s(Z2e);Ldr=r(I1t,"xlnet"),I1t.forEach(t),xdr=r(Mke," \u2014 "),lQ=n(Mke,"A",{href:!0});var q1t=s(lQ);$dr=r(q1t,"TFXLNetModel"),q1t.forEach(t),kdr=r(Mke," (XLNet model)"),Mke.forEach(t),D.forEach(t),Sdr=i(ml),T(v9.$$.fragment,ml),ml.forEach(t),fl.forEach(t),wqe=i(f),Od=n(f,"H2",{class:!0});var kje=s(Od);F9=n(kje,"A",{id:!0,class:!0,href:!0});var N1t=s(F9);e1e=n(N1t,"SPAN",{});var j1t=s(e1e);T(zy.$$.fragment,j1t),j1t.forEach(t),N1t.forEach(t),Rdr=i(kje),o1e=n(kje,"SPAN",{});var D1t=s(o1e);Bdr=r(D1t,"TFAutoModelForPreTraining"),D1t.forEach(t),kje.forEach(t),Aqe=i(f),Ko=n(f,"DIV",{class:!0});var gl=s(Ko);T(Qy.$$.fragment,gl),Pdr=i(gl),Vd=n(gl,"P",{});var FZ=s(Vd);Idr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iQ=n(FZ,"A",{href:!0});var G1t=s(iQ);qdr=r(G1t,"from_pretrained()"),G1t.forEach(t),Ndr=r(FZ," class method or the "),dQ=n(FZ,"A",{href:!0});var O1t=s(dQ);jdr=r(O1t,"from_config()"),O1t.forEach(t),Ddr=r(FZ,` class
method.`),FZ.forEach(t),Gdr=i(gl),Wy=n(gl,"P",{});var Sje=s(Wy);Odr=r(Sje,"This class cannot be instantiated directly using "),r1e=n(Sje,"CODE",{});var V1t=s(r1e);Vdr=r(V1t,"__init__()"),V1t.forEach(t),Xdr=r(Sje," (throws an error)."),Sje.forEach(t),zdr=i(gl),At=n(gl,"DIV",{class:!0});var aw=s(At);T(Hy.$$.fragment,aw),Qdr=i(aw),t1e=n(aw,"P",{});var X1t=s(t1e);Wdr=r(X1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X1t.forEach(t),Hdr=i(aw),Xd=n(aw,"P",{});var TZ=s(Xd);Udr=r(TZ,`Note:
Loading a model from its configuration file does `),a1e=n(TZ,"STRONG",{});var z1t=s(a1e);Jdr=r(z1t,"not"),z1t.forEach(t),Ydr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(TZ,"A",{href:!0});var Q1t=s(cQ);Kdr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),Zdr=r(TZ," to load the model weights."),TZ.forEach(t),ecr=i(aw),T(T9.$$.fragment,aw),aw.forEach(t),ocr=i(gl),Ar=n(gl,"DIV",{class:!0});var hl=s(Ar);T(Uy.$$.fragment,hl),rcr=i(hl),n1e=n(hl,"P",{});var W1t=s(n1e);tcr=r(W1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W1t.forEach(t),acr=i(hl),Za=n(hl,"P",{});var nw=s(Za);ncr=r(nw,"The model class to instantiate is selected based on the "),s1e=n(nw,"CODE",{});var H1t=s(s1e);scr=r(H1t,"model_type"),H1t.forEach(t),lcr=r(nw,` property of the config object (either
passed as an argument or loaded from `),l1e=n(nw,"CODE",{});var U1t=s(l1e);icr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),dcr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(nw,"CODE",{});var J1t=s(i1e);ccr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),fcr=r(nw,":"),nw.forEach(t),mcr=i(hl),se=n(hl,"UL",{});var le=s(se);M9=n(le,"LI",{});var Eke=s(M9);d1e=n(Eke,"STRONG",{});var Y1t=s(d1e);gcr=r(Y1t,"albert"),Y1t.forEach(t),hcr=r(Eke," \u2014 "),fQ=n(Eke,"A",{href:!0});var K1t=s(fQ);pcr=r(K1t,"TFAlbertForPreTraining"),K1t.forEach(t),ucr=r(Eke," (ALBERT model)"),Eke.forEach(t),_cr=i(le),E9=n(le,"LI",{});var Cke=s(E9);c1e=n(Cke,"STRONG",{});var Z1t=s(c1e);bcr=r(Z1t,"bart"),Z1t.forEach(t),vcr=r(Cke," \u2014 "),mQ=n(Cke,"A",{href:!0});var ebt=s(mQ);Fcr=r(ebt,"TFBartForConditionalGeneration"),ebt.forEach(t),Tcr=r(Cke," (BART model)"),Cke.forEach(t),Mcr=i(le),C9=n(le,"LI",{});var wke=s(C9);f1e=n(wke,"STRONG",{});var obt=s(f1e);Ecr=r(obt,"bert"),obt.forEach(t),Ccr=r(wke," \u2014 "),gQ=n(wke,"A",{href:!0});var rbt=s(gQ);wcr=r(rbt,"TFBertForPreTraining"),rbt.forEach(t),Acr=r(wke," (BERT model)"),wke.forEach(t),ycr=i(le),w9=n(le,"LI",{});var Ake=s(w9);m1e=n(Ake,"STRONG",{});var tbt=s(m1e);Lcr=r(tbt,"camembert"),tbt.forEach(t),xcr=r(Ake," \u2014 "),hQ=n(Ake,"A",{href:!0});var abt=s(hQ);$cr=r(abt,"TFCamembertForMaskedLM"),abt.forEach(t),kcr=r(Ake," (CamemBERT model)"),Ake.forEach(t),Scr=i(le),A9=n(le,"LI",{});var yke=s(A9);g1e=n(yke,"STRONG",{});var nbt=s(g1e);Rcr=r(nbt,"ctrl"),nbt.forEach(t),Bcr=r(yke," \u2014 "),pQ=n(yke,"A",{href:!0});var sbt=s(pQ);Pcr=r(sbt,"TFCTRLLMHeadModel"),sbt.forEach(t),Icr=r(yke," (CTRL model)"),yke.forEach(t),qcr=i(le),y9=n(le,"LI",{});var Lke=s(y9);h1e=n(Lke,"STRONG",{});var lbt=s(h1e);Ncr=r(lbt,"distilbert"),lbt.forEach(t),jcr=r(Lke," \u2014 "),uQ=n(Lke,"A",{href:!0});var ibt=s(uQ);Dcr=r(ibt,"TFDistilBertForMaskedLM"),ibt.forEach(t),Gcr=r(Lke," (DistilBERT model)"),Lke.forEach(t),Ocr=i(le),L9=n(le,"LI",{});var xke=s(L9);p1e=n(xke,"STRONG",{});var dbt=s(p1e);Vcr=r(dbt,"electra"),dbt.forEach(t),Xcr=r(xke," \u2014 "),_Q=n(xke,"A",{href:!0});var cbt=s(_Q);zcr=r(cbt,"TFElectraForPreTraining"),cbt.forEach(t),Qcr=r(xke," (ELECTRA model)"),xke.forEach(t),Wcr=i(le),x9=n(le,"LI",{});var $ke=s(x9);u1e=n($ke,"STRONG",{});var fbt=s(u1e);Hcr=r(fbt,"flaubert"),fbt.forEach(t),Ucr=r($ke," \u2014 "),bQ=n($ke,"A",{href:!0});var mbt=s(bQ);Jcr=r(mbt,"TFFlaubertWithLMHeadModel"),mbt.forEach(t),Ycr=r($ke," (FlauBERT model)"),$ke.forEach(t),Kcr=i(le),$9=n(le,"LI",{});var kke=s($9);_1e=n(kke,"STRONG",{});var gbt=s(_1e);Zcr=r(gbt,"funnel"),gbt.forEach(t),efr=r(kke," \u2014 "),vQ=n(kke,"A",{href:!0});var hbt=s(vQ);ofr=r(hbt,"TFFunnelForPreTraining"),hbt.forEach(t),rfr=r(kke," (Funnel Transformer model)"),kke.forEach(t),tfr=i(le),k9=n(le,"LI",{});var Ske=s(k9);b1e=n(Ske,"STRONG",{});var pbt=s(b1e);afr=r(pbt,"gpt2"),pbt.forEach(t),nfr=r(Ske," \u2014 "),FQ=n(Ske,"A",{href:!0});var ubt=s(FQ);sfr=r(ubt,"TFGPT2LMHeadModel"),ubt.forEach(t),lfr=r(Ske," (OpenAI GPT-2 model)"),Ske.forEach(t),ifr=i(le),S9=n(le,"LI",{});var Rke=s(S9);v1e=n(Rke,"STRONG",{});var _bt=s(v1e);dfr=r(_bt,"layoutlm"),_bt.forEach(t),cfr=r(Rke," \u2014 "),TQ=n(Rke,"A",{href:!0});var bbt=s(TQ);ffr=r(bbt,"TFLayoutLMForMaskedLM"),bbt.forEach(t),mfr=r(Rke," (LayoutLM model)"),Rke.forEach(t),gfr=i(le),R9=n(le,"LI",{});var Bke=s(R9);F1e=n(Bke,"STRONG",{});var vbt=s(F1e);hfr=r(vbt,"lxmert"),vbt.forEach(t),pfr=r(Bke," \u2014 "),MQ=n(Bke,"A",{href:!0});var Fbt=s(MQ);ufr=r(Fbt,"TFLxmertForPreTraining"),Fbt.forEach(t),_fr=r(Bke," (LXMERT model)"),Bke.forEach(t),bfr=i(le),B9=n(le,"LI",{});var Pke=s(B9);T1e=n(Pke,"STRONG",{});var Tbt=s(T1e);vfr=r(Tbt,"mobilebert"),Tbt.forEach(t),Ffr=r(Pke," \u2014 "),EQ=n(Pke,"A",{href:!0});var Mbt=s(EQ);Tfr=r(Mbt,"TFMobileBertForPreTraining"),Mbt.forEach(t),Mfr=r(Pke," (MobileBERT model)"),Pke.forEach(t),Efr=i(le),P9=n(le,"LI",{});var Ike=s(P9);M1e=n(Ike,"STRONG",{});var Ebt=s(M1e);Cfr=r(Ebt,"mpnet"),Ebt.forEach(t),wfr=r(Ike," \u2014 "),CQ=n(Ike,"A",{href:!0});var Cbt=s(CQ);Afr=r(Cbt,"TFMPNetForMaskedLM"),Cbt.forEach(t),yfr=r(Ike," (MPNet model)"),Ike.forEach(t),Lfr=i(le),I9=n(le,"LI",{});var qke=s(I9);E1e=n(qke,"STRONG",{});var wbt=s(E1e);xfr=r(wbt,"openai-gpt"),wbt.forEach(t),$fr=r(qke," \u2014 "),wQ=n(qke,"A",{href:!0});var Abt=s(wQ);kfr=r(Abt,"TFOpenAIGPTLMHeadModel"),Abt.forEach(t),Sfr=r(qke," (OpenAI GPT model)"),qke.forEach(t),Rfr=i(le),q9=n(le,"LI",{});var Nke=s(q9);C1e=n(Nke,"STRONG",{});var ybt=s(C1e);Bfr=r(ybt,"roberta"),ybt.forEach(t),Pfr=r(Nke," \u2014 "),AQ=n(Nke,"A",{href:!0});var Lbt=s(AQ);Ifr=r(Lbt,"TFRobertaForMaskedLM"),Lbt.forEach(t),qfr=r(Nke," (RoBERTa model)"),Nke.forEach(t),Nfr=i(le),N9=n(le,"LI",{});var jke=s(N9);w1e=n(jke,"STRONG",{});var xbt=s(w1e);jfr=r(xbt,"t5"),xbt.forEach(t),Dfr=r(jke," \u2014 "),yQ=n(jke,"A",{href:!0});var $bt=s(yQ);Gfr=r($bt,"TFT5ForConditionalGeneration"),$bt.forEach(t),Ofr=r(jke," (T5 model)"),jke.forEach(t),Vfr=i(le),j9=n(le,"LI",{});var Dke=s(j9);A1e=n(Dke,"STRONG",{});var kbt=s(A1e);Xfr=r(kbt,"tapas"),kbt.forEach(t),zfr=r(Dke," \u2014 "),LQ=n(Dke,"A",{href:!0});var Sbt=s(LQ);Qfr=r(Sbt,"TFTapasForMaskedLM"),Sbt.forEach(t),Wfr=r(Dke," (TAPAS model)"),Dke.forEach(t),Hfr=i(le),D9=n(le,"LI",{});var Gke=s(D9);y1e=n(Gke,"STRONG",{});var Rbt=s(y1e);Ufr=r(Rbt,"transfo-xl"),Rbt.forEach(t),Jfr=r(Gke," \u2014 "),xQ=n(Gke,"A",{href:!0});var Bbt=s(xQ);Yfr=r(Bbt,"TFTransfoXLLMHeadModel"),Bbt.forEach(t),Kfr=r(Gke," (Transformer-XL model)"),Gke.forEach(t),Zfr=i(le),G9=n(le,"LI",{});var Oke=s(G9);L1e=n(Oke,"STRONG",{});var Pbt=s(L1e);emr=r(Pbt,"vit_mae"),Pbt.forEach(t),omr=r(Oke," \u2014 "),$Q=n(Oke,"A",{href:!0});var Ibt=s($Q);rmr=r(Ibt,"TFViTMAEForPreTraining"),Ibt.forEach(t),tmr=r(Oke," (ViTMAE model)"),Oke.forEach(t),amr=i(le),O9=n(le,"LI",{});var Vke=s(O9);x1e=n(Vke,"STRONG",{});var qbt=s(x1e);nmr=r(qbt,"xlm"),qbt.forEach(t),smr=r(Vke," \u2014 "),kQ=n(Vke,"A",{href:!0});var Nbt=s(kQ);lmr=r(Nbt,"TFXLMWithLMHeadModel"),Nbt.forEach(t),imr=r(Vke," (XLM model)"),Vke.forEach(t),dmr=i(le),V9=n(le,"LI",{});var Xke=s(V9);$1e=n(Xke,"STRONG",{});var jbt=s($1e);cmr=r(jbt,"xlm-roberta"),jbt.forEach(t),fmr=r(Xke," \u2014 "),SQ=n(Xke,"A",{href:!0});var Dbt=s(SQ);mmr=r(Dbt,"TFXLMRobertaForMaskedLM"),Dbt.forEach(t),gmr=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),hmr=i(le),X9=n(le,"LI",{});var zke=s(X9);k1e=n(zke,"STRONG",{});var Gbt=s(k1e);pmr=r(Gbt,"xlnet"),Gbt.forEach(t),umr=r(zke," \u2014 "),RQ=n(zke,"A",{href:!0});var Obt=s(RQ);_mr=r(Obt,"TFXLNetLMHeadModel"),Obt.forEach(t),bmr=r(zke," (XLNet model)"),zke.forEach(t),le.forEach(t),vmr=i(hl),T(z9.$$.fragment,hl),hl.forEach(t),gl.forEach(t),yqe=i(f),zd=n(f,"H2",{class:!0});var Rje=s(zd);Q9=n(Rje,"A",{id:!0,class:!0,href:!0});var Vbt=s(Q9);S1e=n(Vbt,"SPAN",{});var Xbt=s(S1e);T(Jy.$$.fragment,Xbt),Xbt.forEach(t),Vbt.forEach(t),Fmr=i(Rje),R1e=n(Rje,"SPAN",{});var zbt=s(R1e);Tmr=r(zbt,"TFAutoModelForCausalLM"),zbt.forEach(t),Rje.forEach(t),Lqe=i(f),Zo=n(f,"DIV",{class:!0});var pl=s(Zo);T(Yy.$$.fragment,pl),Mmr=i(pl),Qd=n(pl,"P",{});var MZ=s(Qd);Emr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BQ=n(MZ,"A",{href:!0});var Qbt=s(BQ);Cmr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),wmr=r(MZ," class method or the "),PQ=n(MZ,"A",{href:!0});var Wbt=s(PQ);Amr=r(Wbt,"from_config()"),Wbt.forEach(t),ymr=r(MZ,` class
method.`),MZ.forEach(t),Lmr=i(pl),Ky=n(pl,"P",{});var Bje=s(Ky);xmr=r(Bje,"This class cannot be instantiated directly using "),B1e=n(Bje,"CODE",{});var Hbt=s(B1e);$mr=r(Hbt,"__init__()"),Hbt.forEach(t),kmr=r(Bje," (throws an error)."),Bje.forEach(t),Smr=i(pl),yt=n(pl,"DIV",{class:!0});var sw=s(yt);T(Zy.$$.fragment,sw),Rmr=i(sw),P1e=n(sw,"P",{});var Ubt=s(P1e);Bmr=r(Ubt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ubt.forEach(t),Pmr=i(sw),Wd=n(sw,"P",{});var EZ=s(Wd);Imr=r(EZ,`Note:
Loading a model from its configuration file does `),I1e=n(EZ,"STRONG",{});var Jbt=s(I1e);qmr=r(Jbt,"not"),Jbt.forEach(t),Nmr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(EZ,"A",{href:!0});var Ybt=s(IQ);jmr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),Dmr=r(EZ," to load the model weights."),EZ.forEach(t),Gmr=i(sw),T(W9.$$.fragment,sw),sw.forEach(t),Omr=i(pl),yr=n(pl,"DIV",{class:!0});var ul=s(yr);T(eL.$$.fragment,ul),Vmr=i(ul),q1e=n(ul,"P",{});var Kbt=s(q1e);Xmr=r(Kbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kbt.forEach(t),zmr=i(ul),en=n(ul,"P",{});var lw=s(en);Qmr=r(lw,"The model class to instantiate is selected based on the "),N1e=n(lw,"CODE",{});var Zbt=s(N1e);Wmr=r(Zbt,"model_type"),Zbt.forEach(t),Hmr=r(lw,` property of the config object (either
passed as an argument or loaded from `),j1e=n(lw,"CODE",{});var evt=s(j1e);Umr=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),Jmr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(lw,"CODE",{});var ovt=s(D1e);Ymr=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Kmr=r(lw,":"),lw.forEach(t),Zmr=i(ul),Me=n(ul,"UL",{});var we=s(Me);H9=n(we,"LI",{});var Qke=s(H9);G1e=n(Qke,"STRONG",{});var rvt=s(G1e);egr=r(rvt,"bert"),rvt.forEach(t),ogr=r(Qke," \u2014 "),qQ=n(Qke,"A",{href:!0});var tvt=s(qQ);rgr=r(tvt,"TFBertLMHeadModel"),tvt.forEach(t),tgr=r(Qke," (BERT model)"),Qke.forEach(t),agr=i(we),U9=n(we,"LI",{});var Wke=s(U9);O1e=n(Wke,"STRONG",{});var avt=s(O1e);ngr=r(avt,"camembert"),avt.forEach(t),sgr=r(Wke," \u2014 "),NQ=n(Wke,"A",{href:!0});var nvt=s(NQ);lgr=r(nvt,"TFCamembertForCausalLM"),nvt.forEach(t),igr=r(Wke," (CamemBERT model)"),Wke.forEach(t),dgr=i(we),J9=n(we,"LI",{});var Hke=s(J9);V1e=n(Hke,"STRONG",{});var svt=s(V1e);cgr=r(svt,"ctrl"),svt.forEach(t),fgr=r(Hke," \u2014 "),jQ=n(Hke,"A",{href:!0});var lvt=s(jQ);mgr=r(lvt,"TFCTRLLMHeadModel"),lvt.forEach(t),ggr=r(Hke," (CTRL model)"),Hke.forEach(t),hgr=i(we),Y9=n(we,"LI",{});var Uke=s(Y9);X1e=n(Uke,"STRONG",{});var ivt=s(X1e);pgr=r(ivt,"gpt2"),ivt.forEach(t),ugr=r(Uke," \u2014 "),DQ=n(Uke,"A",{href:!0});var dvt=s(DQ);_gr=r(dvt,"TFGPT2LMHeadModel"),dvt.forEach(t),bgr=r(Uke," (OpenAI GPT-2 model)"),Uke.forEach(t),vgr=i(we),K9=n(we,"LI",{});var Jke=s(K9);z1e=n(Jke,"STRONG",{});var cvt=s(z1e);Fgr=r(cvt,"gptj"),cvt.forEach(t),Tgr=r(Jke," \u2014 "),GQ=n(Jke,"A",{href:!0});var fvt=s(GQ);Mgr=r(fvt,"TFGPTJForCausalLM"),fvt.forEach(t),Egr=r(Jke," (GPT-J model)"),Jke.forEach(t),Cgr=i(we),Z9=n(we,"LI",{});var Yke=s(Z9);Q1e=n(Yke,"STRONG",{});var mvt=s(Q1e);wgr=r(mvt,"openai-gpt"),mvt.forEach(t),Agr=r(Yke," \u2014 "),OQ=n(Yke,"A",{href:!0});var gvt=s(OQ);ygr=r(gvt,"TFOpenAIGPTLMHeadModel"),gvt.forEach(t),Lgr=r(Yke," (OpenAI GPT model)"),Yke.forEach(t),xgr=i(we),e7=n(we,"LI",{});var Kke=s(e7);W1e=n(Kke,"STRONG",{});var hvt=s(W1e);$gr=r(hvt,"rembert"),hvt.forEach(t),kgr=r(Kke," \u2014 "),VQ=n(Kke,"A",{href:!0});var pvt=s(VQ);Sgr=r(pvt,"TFRemBertForCausalLM"),pvt.forEach(t),Rgr=r(Kke," (RemBERT model)"),Kke.forEach(t),Bgr=i(we),o7=n(we,"LI",{});var Zke=s(o7);H1e=n(Zke,"STRONG",{});var uvt=s(H1e);Pgr=r(uvt,"roberta"),uvt.forEach(t),Igr=r(Zke," \u2014 "),XQ=n(Zke,"A",{href:!0});var _vt=s(XQ);qgr=r(_vt,"TFRobertaForCausalLM"),_vt.forEach(t),Ngr=r(Zke," (RoBERTa model)"),Zke.forEach(t),jgr=i(we),r7=n(we,"LI",{});var eSe=s(r7);U1e=n(eSe,"STRONG",{});var bvt=s(U1e);Dgr=r(bvt,"roformer"),bvt.forEach(t),Ggr=r(eSe," \u2014 "),zQ=n(eSe,"A",{href:!0});var vvt=s(zQ);Ogr=r(vvt,"TFRoFormerForCausalLM"),vvt.forEach(t),Vgr=r(eSe," (RoFormer model)"),eSe.forEach(t),Xgr=i(we),t7=n(we,"LI",{});var oSe=s(t7);J1e=n(oSe,"STRONG",{});var Fvt=s(J1e);zgr=r(Fvt,"transfo-xl"),Fvt.forEach(t),Qgr=r(oSe," \u2014 "),QQ=n(oSe,"A",{href:!0});var Tvt=s(QQ);Wgr=r(Tvt,"TFTransfoXLLMHeadModel"),Tvt.forEach(t),Hgr=r(oSe," (Transformer-XL model)"),oSe.forEach(t),Ugr=i(we),a7=n(we,"LI",{});var rSe=s(a7);Y1e=n(rSe,"STRONG",{});var Mvt=s(Y1e);Jgr=r(Mvt,"xlm"),Mvt.forEach(t),Ygr=r(rSe," \u2014 "),WQ=n(rSe,"A",{href:!0});var Evt=s(WQ);Kgr=r(Evt,"TFXLMWithLMHeadModel"),Evt.forEach(t),Zgr=r(rSe," (XLM model)"),rSe.forEach(t),ehr=i(we),n7=n(we,"LI",{});var tSe=s(n7);K1e=n(tSe,"STRONG",{});var Cvt=s(K1e);ohr=r(Cvt,"xlnet"),Cvt.forEach(t),rhr=r(tSe," \u2014 "),HQ=n(tSe,"A",{href:!0});var wvt=s(HQ);thr=r(wvt,"TFXLNetLMHeadModel"),wvt.forEach(t),ahr=r(tSe," (XLNet model)"),tSe.forEach(t),we.forEach(t),nhr=i(ul),T(s7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),xqe=i(f),Hd=n(f,"H2",{class:!0});var Pje=s(Hd);l7=n(Pje,"A",{id:!0,class:!0,href:!0});var Avt=s(l7);Z1e=n(Avt,"SPAN",{});var yvt=s(Z1e);T(oL.$$.fragment,yvt),yvt.forEach(t),Avt.forEach(t),shr=i(Pje),ebe=n(Pje,"SPAN",{});var Lvt=s(ebe);lhr=r(Lvt,"TFAutoModelForImageClassification"),Lvt.forEach(t),Pje.forEach(t),$qe=i(f),er=n(f,"DIV",{class:!0});var _l=s(er);T(rL.$$.fragment,_l),ihr=i(_l),Ud=n(_l,"P",{});var CZ=s(Ud);dhr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UQ=n(CZ,"A",{href:!0});var xvt=s(UQ);chr=r(xvt,"from_pretrained()"),xvt.forEach(t),fhr=r(CZ," class method or the "),JQ=n(CZ,"A",{href:!0});var $vt=s(JQ);mhr=r($vt,"from_config()"),$vt.forEach(t),ghr=r(CZ,` class
method.`),CZ.forEach(t),hhr=i(_l),tL=n(_l,"P",{});var Ije=s(tL);phr=r(Ije,"This class cannot be instantiated directly using "),obe=n(Ije,"CODE",{});var kvt=s(obe);uhr=r(kvt,"__init__()"),kvt.forEach(t),_hr=r(Ije," (throws an error)."),Ije.forEach(t),bhr=i(_l),Lt=n(_l,"DIV",{class:!0});var iw=s(Lt);T(aL.$$.fragment,iw),vhr=i(iw),rbe=n(iw,"P",{});var Svt=s(rbe);Fhr=r(Svt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Svt.forEach(t),Thr=i(iw),Jd=n(iw,"P",{});var wZ=s(Jd);Mhr=r(wZ,`Note:
Loading a model from its configuration file does `),tbe=n(wZ,"STRONG",{});var Rvt=s(tbe);Ehr=r(Rvt,"not"),Rvt.forEach(t),Chr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(wZ,"A",{href:!0});var Bvt=s(YQ);whr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),Ahr=r(wZ," to load the model weights."),wZ.forEach(t),yhr=i(iw),T(i7.$$.fragment,iw),iw.forEach(t),Lhr=i(_l),Lr=n(_l,"DIV",{class:!0});var bl=s(Lr);T(nL.$$.fragment,bl),xhr=i(bl),abe=n(bl,"P",{});var Pvt=s(abe);$hr=r(Pvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pvt.forEach(t),khr=i(bl),on=n(bl,"P",{});var dw=s(on);Shr=r(dw,"The model class to instantiate is selected based on the "),nbe=n(dw,"CODE",{});var Ivt=s(nbe);Rhr=r(Ivt,"model_type"),Ivt.forEach(t),Bhr=r(dw,` property of the config object (either
passed as an argument or loaded from `),sbe=n(dw,"CODE",{});var qvt=s(sbe);Phr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),Ihr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(dw,"CODE",{});var Nvt=s(lbe);qhr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),Nhr=r(dw,":"),dw.forEach(t),jhr=i(bl),rn=n(bl,"UL",{});var cw=s(rn);d7=n(cw,"LI",{});var aSe=s(d7);ibe=n(aSe,"STRONG",{});var jvt=s(ibe);Dhr=r(jvt,"convnext"),jvt.forEach(t),Ghr=r(aSe," \u2014 "),KQ=n(aSe,"A",{href:!0});var Dvt=s(KQ);Ohr=r(Dvt,"TFConvNextForImageClassification"),Dvt.forEach(t),Vhr=r(aSe," (ConvNext model)"),aSe.forEach(t),Xhr=i(cw),c7=n(cw,"LI",{});var nSe=s(c7);dbe=n(nSe,"STRONG",{});var Gvt=s(dbe);zhr=r(Gvt,"data2vec-vision"),Gvt.forEach(t),Qhr=r(nSe," \u2014 "),ZQ=n(nSe,"A",{href:!0});var Ovt=s(ZQ);Whr=r(Ovt,"TFData2VecVisionForImageClassification"),Ovt.forEach(t),Hhr=r(nSe," (Data2VecVision model)"),nSe.forEach(t),Uhr=i(cw),f7=n(cw,"LI",{});var sSe=s(f7);cbe=n(sSe,"STRONG",{});var Vvt=s(cbe);Jhr=r(Vvt,"swin"),Vvt.forEach(t),Yhr=r(sSe," \u2014 "),eW=n(sSe,"A",{href:!0});var Xvt=s(eW);Khr=r(Xvt,"TFSwinForImageClassification"),Xvt.forEach(t),Zhr=r(sSe," (Swin model)"),sSe.forEach(t),epr=i(cw),m7=n(cw,"LI",{});var lSe=s(m7);fbe=n(lSe,"STRONG",{});var zvt=s(fbe);opr=r(zvt,"vit"),zvt.forEach(t),rpr=r(lSe," \u2014 "),oW=n(lSe,"A",{href:!0});var Qvt=s(oW);tpr=r(Qvt,"TFViTForImageClassification"),Qvt.forEach(t),apr=r(lSe," (ViT model)"),lSe.forEach(t),cw.forEach(t),npr=i(bl),T(g7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),kqe=i(f),Yd=n(f,"H2",{class:!0});var qje=s(Yd);h7=n(qje,"A",{id:!0,class:!0,href:!0});var Wvt=s(h7);mbe=n(Wvt,"SPAN",{});var Hvt=s(mbe);T(sL.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),spr=i(qje),gbe=n(qje,"SPAN",{});var Uvt=s(gbe);lpr=r(Uvt,"TFAutoModelForMaskedLM"),Uvt.forEach(t),qje.forEach(t),Sqe=i(f),or=n(f,"DIV",{class:!0});var vl=s(or);T(lL.$$.fragment,vl),ipr=i(vl),Kd=n(vl,"P",{});var AZ=s(Kd);dpr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rW=n(AZ,"A",{href:!0});var Jvt=s(rW);cpr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),fpr=r(AZ," class method or the "),tW=n(AZ,"A",{href:!0});var Yvt=s(tW);mpr=r(Yvt,"from_config()"),Yvt.forEach(t),gpr=r(AZ,` class
method.`),AZ.forEach(t),hpr=i(vl),iL=n(vl,"P",{});var Nje=s(iL);ppr=r(Nje,"This class cannot be instantiated directly using "),hbe=n(Nje,"CODE",{});var Kvt=s(hbe);upr=r(Kvt,"__init__()"),Kvt.forEach(t),_pr=r(Nje," (throws an error)."),Nje.forEach(t),bpr=i(vl),xt=n(vl,"DIV",{class:!0});var fw=s(xt);T(dL.$$.fragment,fw),vpr=i(fw),pbe=n(fw,"P",{});var Zvt=s(pbe);Fpr=r(Zvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zvt.forEach(t),Tpr=i(fw),Zd=n(fw,"P",{});var yZ=s(Zd);Mpr=r(yZ,`Note:
Loading a model from its configuration file does `),ube=n(yZ,"STRONG",{});var eFt=s(ube);Epr=r(eFt,"not"),eFt.forEach(t),Cpr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(yZ,"A",{href:!0});var oFt=s(aW);wpr=r(oFt,"from_pretrained()"),oFt.forEach(t),Apr=r(yZ," to load the model weights."),yZ.forEach(t),ypr=i(fw),T(p7.$$.fragment,fw),fw.forEach(t),Lpr=i(vl),xr=n(vl,"DIV",{class:!0});var Fl=s(xr);T(cL.$$.fragment,Fl),xpr=i(Fl),_be=n(Fl,"P",{});var rFt=s(_be);$pr=r(rFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rFt.forEach(t),kpr=i(Fl),tn=n(Fl,"P",{});var mw=s(tn);Spr=r(mw,"The model class to instantiate is selected based on the "),bbe=n(mw,"CODE",{});var tFt=s(bbe);Rpr=r(tFt,"model_type"),tFt.forEach(t),Bpr=r(mw,` property of the config object (either
passed as an argument or loaded from `),vbe=n(mw,"CODE",{});var aFt=s(vbe);Ppr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),Ipr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(mw,"CODE",{});var nFt=s(Fbe);qpr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Npr=r(mw,":"),mw.forEach(t),jpr=i(Fl),ie=n(Fl,"UL",{});var fe=s(ie);u7=n(fe,"LI",{});var iSe=s(u7);Tbe=n(iSe,"STRONG",{});var sFt=s(Tbe);Dpr=r(sFt,"albert"),sFt.forEach(t),Gpr=r(iSe," \u2014 "),nW=n(iSe,"A",{href:!0});var lFt=s(nW);Opr=r(lFt,"TFAlbertForMaskedLM"),lFt.forEach(t),Vpr=r(iSe," (ALBERT model)"),iSe.forEach(t),Xpr=i(fe),_7=n(fe,"LI",{});var dSe=s(_7);Mbe=n(dSe,"STRONG",{});var iFt=s(Mbe);zpr=r(iFt,"bert"),iFt.forEach(t),Qpr=r(dSe," \u2014 "),sW=n(dSe,"A",{href:!0});var dFt=s(sW);Wpr=r(dFt,"TFBertForMaskedLM"),dFt.forEach(t),Hpr=r(dSe," (BERT model)"),dSe.forEach(t),Upr=i(fe),b7=n(fe,"LI",{});var cSe=s(b7);Ebe=n(cSe,"STRONG",{});var cFt=s(Ebe);Jpr=r(cFt,"camembert"),cFt.forEach(t),Ypr=r(cSe," \u2014 "),lW=n(cSe,"A",{href:!0});var fFt=s(lW);Kpr=r(fFt,"TFCamembertForMaskedLM"),fFt.forEach(t),Zpr=r(cSe," (CamemBERT model)"),cSe.forEach(t),eur=i(fe),v7=n(fe,"LI",{});var fSe=s(v7);Cbe=n(fSe,"STRONG",{});var mFt=s(Cbe);our=r(mFt,"convbert"),mFt.forEach(t),rur=r(fSe," \u2014 "),iW=n(fSe,"A",{href:!0});var gFt=s(iW);tur=r(gFt,"TFConvBertForMaskedLM"),gFt.forEach(t),aur=r(fSe," (ConvBERT model)"),fSe.forEach(t),nur=i(fe),F7=n(fe,"LI",{});var mSe=s(F7);wbe=n(mSe,"STRONG",{});var hFt=s(wbe);sur=r(hFt,"deberta"),hFt.forEach(t),lur=r(mSe," \u2014 "),dW=n(mSe,"A",{href:!0});var pFt=s(dW);iur=r(pFt,"TFDebertaForMaskedLM"),pFt.forEach(t),dur=r(mSe," (DeBERTa model)"),mSe.forEach(t),cur=i(fe),T7=n(fe,"LI",{});var gSe=s(T7);Abe=n(gSe,"STRONG",{});var uFt=s(Abe);fur=r(uFt,"deberta-v2"),uFt.forEach(t),mur=r(gSe," \u2014 "),cW=n(gSe,"A",{href:!0});var _Ft=s(cW);gur=r(_Ft,"TFDebertaV2ForMaskedLM"),_Ft.forEach(t),hur=r(gSe," (DeBERTa-v2 model)"),gSe.forEach(t),pur=i(fe),M7=n(fe,"LI",{});var hSe=s(M7);ybe=n(hSe,"STRONG",{});var bFt=s(ybe);uur=r(bFt,"distilbert"),bFt.forEach(t),_ur=r(hSe," \u2014 "),fW=n(hSe,"A",{href:!0});var vFt=s(fW);bur=r(vFt,"TFDistilBertForMaskedLM"),vFt.forEach(t),vur=r(hSe," (DistilBERT model)"),hSe.forEach(t),Fur=i(fe),E7=n(fe,"LI",{});var pSe=s(E7);Lbe=n(pSe,"STRONG",{});var FFt=s(Lbe);Tur=r(FFt,"electra"),FFt.forEach(t),Mur=r(pSe," \u2014 "),mW=n(pSe,"A",{href:!0});var TFt=s(mW);Eur=r(TFt,"TFElectraForMaskedLM"),TFt.forEach(t),Cur=r(pSe," (ELECTRA model)"),pSe.forEach(t),wur=i(fe),C7=n(fe,"LI",{});var uSe=s(C7);xbe=n(uSe,"STRONG",{});var MFt=s(xbe);Aur=r(MFt,"flaubert"),MFt.forEach(t),yur=r(uSe," \u2014 "),gW=n(uSe,"A",{href:!0});var EFt=s(gW);Lur=r(EFt,"TFFlaubertWithLMHeadModel"),EFt.forEach(t),xur=r(uSe," (FlauBERT model)"),uSe.forEach(t),$ur=i(fe),w7=n(fe,"LI",{});var _Se=s(w7);$be=n(_Se,"STRONG",{});var CFt=s($be);kur=r(CFt,"funnel"),CFt.forEach(t),Sur=r(_Se," \u2014 "),hW=n(_Se,"A",{href:!0});var wFt=s(hW);Rur=r(wFt,"TFFunnelForMaskedLM"),wFt.forEach(t),Bur=r(_Se," (Funnel Transformer model)"),_Se.forEach(t),Pur=i(fe),A7=n(fe,"LI",{});var bSe=s(A7);kbe=n(bSe,"STRONG",{});var AFt=s(kbe);Iur=r(AFt,"layoutlm"),AFt.forEach(t),qur=r(bSe," \u2014 "),pW=n(bSe,"A",{href:!0});var yFt=s(pW);Nur=r(yFt,"TFLayoutLMForMaskedLM"),yFt.forEach(t),jur=r(bSe," (LayoutLM model)"),bSe.forEach(t),Dur=i(fe),y7=n(fe,"LI",{});var vSe=s(y7);Sbe=n(vSe,"STRONG",{});var LFt=s(Sbe);Gur=r(LFt,"longformer"),LFt.forEach(t),Our=r(vSe," \u2014 "),uW=n(vSe,"A",{href:!0});var xFt=s(uW);Vur=r(xFt,"TFLongformerForMaskedLM"),xFt.forEach(t),Xur=r(vSe," (Longformer model)"),vSe.forEach(t),zur=i(fe),L7=n(fe,"LI",{});var FSe=s(L7);Rbe=n(FSe,"STRONG",{});var $Ft=s(Rbe);Qur=r($Ft,"mobilebert"),$Ft.forEach(t),Wur=r(FSe," \u2014 "),_W=n(FSe,"A",{href:!0});var kFt=s(_W);Hur=r(kFt,"TFMobileBertForMaskedLM"),kFt.forEach(t),Uur=r(FSe," (MobileBERT model)"),FSe.forEach(t),Jur=i(fe),x7=n(fe,"LI",{});var TSe=s(x7);Bbe=n(TSe,"STRONG",{});var SFt=s(Bbe);Yur=r(SFt,"mpnet"),SFt.forEach(t),Kur=r(TSe," \u2014 "),bW=n(TSe,"A",{href:!0});var RFt=s(bW);Zur=r(RFt,"TFMPNetForMaskedLM"),RFt.forEach(t),e_r=r(TSe," (MPNet model)"),TSe.forEach(t),o_r=i(fe),$7=n(fe,"LI",{});var MSe=s($7);Pbe=n(MSe,"STRONG",{});var BFt=s(Pbe);r_r=r(BFt,"rembert"),BFt.forEach(t),t_r=r(MSe," \u2014 "),vW=n(MSe,"A",{href:!0});var PFt=s(vW);a_r=r(PFt,"TFRemBertForMaskedLM"),PFt.forEach(t),n_r=r(MSe," (RemBERT model)"),MSe.forEach(t),s_r=i(fe),k7=n(fe,"LI",{});var ESe=s(k7);Ibe=n(ESe,"STRONG",{});var IFt=s(Ibe);l_r=r(IFt,"roberta"),IFt.forEach(t),i_r=r(ESe," \u2014 "),FW=n(ESe,"A",{href:!0});var qFt=s(FW);d_r=r(qFt,"TFRobertaForMaskedLM"),qFt.forEach(t),c_r=r(ESe," (RoBERTa model)"),ESe.forEach(t),f_r=i(fe),S7=n(fe,"LI",{});var CSe=s(S7);qbe=n(CSe,"STRONG",{});var NFt=s(qbe);m_r=r(NFt,"roformer"),NFt.forEach(t),g_r=r(CSe," \u2014 "),TW=n(CSe,"A",{href:!0});var jFt=s(TW);h_r=r(jFt,"TFRoFormerForMaskedLM"),jFt.forEach(t),p_r=r(CSe," (RoFormer model)"),CSe.forEach(t),u_r=i(fe),R7=n(fe,"LI",{});var wSe=s(R7);Nbe=n(wSe,"STRONG",{});var DFt=s(Nbe);__r=r(DFt,"tapas"),DFt.forEach(t),b_r=r(wSe," \u2014 "),MW=n(wSe,"A",{href:!0});var GFt=s(MW);v_r=r(GFt,"TFTapasForMaskedLM"),GFt.forEach(t),F_r=r(wSe," (TAPAS model)"),wSe.forEach(t),T_r=i(fe),B7=n(fe,"LI",{});var ASe=s(B7);jbe=n(ASe,"STRONG",{});var OFt=s(jbe);M_r=r(OFt,"xlm"),OFt.forEach(t),E_r=r(ASe," \u2014 "),EW=n(ASe,"A",{href:!0});var VFt=s(EW);C_r=r(VFt,"TFXLMWithLMHeadModel"),VFt.forEach(t),w_r=r(ASe," (XLM model)"),ASe.forEach(t),A_r=i(fe),P7=n(fe,"LI",{});var ySe=s(P7);Dbe=n(ySe,"STRONG",{});var XFt=s(Dbe);y_r=r(XFt,"xlm-roberta"),XFt.forEach(t),L_r=r(ySe," \u2014 "),CW=n(ySe,"A",{href:!0});var zFt=s(CW);x_r=r(zFt,"TFXLMRobertaForMaskedLM"),zFt.forEach(t),$_r=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),fe.forEach(t),k_r=i(Fl),T(I7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),Rqe=i(f),ec=n(f,"H2",{class:!0});var jje=s(ec);q7=n(jje,"A",{id:!0,class:!0,href:!0});var QFt=s(q7);Gbe=n(QFt,"SPAN",{});var WFt=s(Gbe);T(fL.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),S_r=i(jje),Obe=n(jje,"SPAN",{});var HFt=s(Obe);R_r=r(HFt,"TFAutoModelForSeq2SeqLM"),HFt.forEach(t),jje.forEach(t),Bqe=i(f),rr=n(f,"DIV",{class:!0});var Tl=s(rr);T(mL.$$.fragment,Tl),B_r=i(Tl),oc=n(Tl,"P",{});var LZ=s(oc);P_r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=n(LZ,"A",{href:!0});var UFt=s(wW);I_r=r(UFt,"from_pretrained()"),UFt.forEach(t),q_r=r(LZ," class method or the "),AW=n(LZ,"A",{href:!0});var JFt=s(AW);N_r=r(JFt,"from_config()"),JFt.forEach(t),j_r=r(LZ,` class
method.`),LZ.forEach(t),D_r=i(Tl),gL=n(Tl,"P",{});var Dje=s(gL);G_r=r(Dje,"This class cannot be instantiated directly using "),Vbe=n(Dje,"CODE",{});var YFt=s(Vbe);O_r=r(YFt,"__init__()"),YFt.forEach(t),V_r=r(Dje," (throws an error)."),Dje.forEach(t),X_r=i(Tl),$t=n(Tl,"DIV",{class:!0});var gw=s($t);T(hL.$$.fragment,gw),z_r=i(gw),Xbe=n(gw,"P",{});var KFt=s(Xbe);Q_r=r(KFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KFt.forEach(t),W_r=i(gw),rc=n(gw,"P",{});var xZ=s(rc);H_r=r(xZ,`Note:
Loading a model from its configuration file does `),zbe=n(xZ,"STRONG",{});var ZFt=s(zbe);U_r=r(ZFt,"not"),ZFt.forEach(t),J_r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(xZ,"A",{href:!0});var e6t=s(yW);Y_r=r(e6t,"from_pretrained()"),e6t.forEach(t),K_r=r(xZ," to load the model weights."),xZ.forEach(t),Z_r=i(gw),T(N7.$$.fragment,gw),gw.forEach(t),e2r=i(Tl),$r=n(Tl,"DIV",{class:!0});var Ml=s($r);T(pL.$$.fragment,Ml),o2r=i(Ml),Qbe=n(Ml,"P",{});var o6t=s(Qbe);r2r=r(o6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o6t.forEach(t),t2r=i(Ml),an=n(Ml,"P",{});var hw=s(an);a2r=r(hw,"The model class to instantiate is selected based on the "),Wbe=n(hw,"CODE",{});var r6t=s(Wbe);n2r=r(r6t,"model_type"),r6t.forEach(t),s2r=r(hw,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(hw,"CODE",{});var t6t=s(Hbe);l2r=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),i2r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(hw,"CODE",{});var a6t=s(Ube);d2r=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),c2r=r(hw,":"),hw.forEach(t),f2r=i(Ml),ye=n(Ml,"UL",{});var Re=s(ye);j7=n(Re,"LI",{});var LSe=s(j7);Jbe=n(LSe,"STRONG",{});var n6t=s(Jbe);m2r=r(n6t,"bart"),n6t.forEach(t),g2r=r(LSe," \u2014 "),LW=n(LSe,"A",{href:!0});var s6t=s(LW);h2r=r(s6t,"TFBartForConditionalGeneration"),s6t.forEach(t),p2r=r(LSe," (BART model)"),LSe.forEach(t),u2r=i(Re),D7=n(Re,"LI",{});var xSe=s(D7);Ybe=n(xSe,"STRONG",{});var l6t=s(Ybe);_2r=r(l6t,"blenderbot"),l6t.forEach(t),b2r=r(xSe," \u2014 "),xW=n(xSe,"A",{href:!0});var i6t=s(xW);v2r=r(i6t,"TFBlenderbotForConditionalGeneration"),i6t.forEach(t),F2r=r(xSe," (Blenderbot model)"),xSe.forEach(t),T2r=i(Re),G7=n(Re,"LI",{});var $Se=s(G7);Kbe=n($Se,"STRONG",{});var d6t=s(Kbe);M2r=r(d6t,"blenderbot-small"),d6t.forEach(t),E2r=r($Se," \u2014 "),$W=n($Se,"A",{href:!0});var c6t=s($W);C2r=r(c6t,"TFBlenderbotSmallForConditionalGeneration"),c6t.forEach(t),w2r=r($Se," (BlenderbotSmall model)"),$Se.forEach(t),A2r=i(Re),O7=n(Re,"LI",{});var kSe=s(O7);Zbe=n(kSe,"STRONG",{});var f6t=s(Zbe);y2r=r(f6t,"encoder-decoder"),f6t.forEach(t),L2r=r(kSe," \u2014 "),kW=n(kSe,"A",{href:!0});var m6t=s(kW);x2r=r(m6t,"TFEncoderDecoderModel"),m6t.forEach(t),$2r=r(kSe," (Encoder decoder model)"),kSe.forEach(t),k2r=i(Re),V7=n(Re,"LI",{});var SSe=s(V7);eve=n(SSe,"STRONG",{});var g6t=s(eve);S2r=r(g6t,"led"),g6t.forEach(t),R2r=r(SSe," \u2014 "),SW=n(SSe,"A",{href:!0});var h6t=s(SW);B2r=r(h6t,"TFLEDForConditionalGeneration"),h6t.forEach(t),P2r=r(SSe," (LED model)"),SSe.forEach(t),I2r=i(Re),X7=n(Re,"LI",{});var RSe=s(X7);ove=n(RSe,"STRONG",{});var p6t=s(ove);q2r=r(p6t,"marian"),p6t.forEach(t),N2r=r(RSe," \u2014 "),RW=n(RSe,"A",{href:!0});var u6t=s(RW);j2r=r(u6t,"TFMarianMTModel"),u6t.forEach(t),D2r=r(RSe," (Marian model)"),RSe.forEach(t),G2r=i(Re),z7=n(Re,"LI",{});var BSe=s(z7);rve=n(BSe,"STRONG",{});var _6t=s(rve);O2r=r(_6t,"mbart"),_6t.forEach(t),V2r=r(BSe," \u2014 "),BW=n(BSe,"A",{href:!0});var b6t=s(BW);X2r=r(b6t,"TFMBartForConditionalGeneration"),b6t.forEach(t),z2r=r(BSe," (mBART model)"),BSe.forEach(t),Q2r=i(Re),Q7=n(Re,"LI",{});var PSe=s(Q7);tve=n(PSe,"STRONG",{});var v6t=s(tve);W2r=r(v6t,"mt5"),v6t.forEach(t),H2r=r(PSe," \u2014 "),PW=n(PSe,"A",{href:!0});var F6t=s(PW);U2r=r(F6t,"TFMT5ForConditionalGeneration"),F6t.forEach(t),J2r=r(PSe," (mT5 model)"),PSe.forEach(t),Y2r=i(Re),W7=n(Re,"LI",{});var ISe=s(W7);ave=n(ISe,"STRONG",{});var T6t=s(ave);K2r=r(T6t,"pegasus"),T6t.forEach(t),Z2r=r(ISe," \u2014 "),IW=n(ISe,"A",{href:!0});var M6t=s(IW);e1r=r(M6t,"TFPegasusForConditionalGeneration"),M6t.forEach(t),o1r=r(ISe," (Pegasus model)"),ISe.forEach(t),r1r=i(Re),H7=n(Re,"LI",{});var qSe=s(H7);nve=n(qSe,"STRONG",{});var E6t=s(nve);t1r=r(E6t,"t5"),E6t.forEach(t),a1r=r(qSe," \u2014 "),qW=n(qSe,"A",{href:!0});var C6t=s(qW);n1r=r(C6t,"TFT5ForConditionalGeneration"),C6t.forEach(t),s1r=r(qSe," (T5 model)"),qSe.forEach(t),Re.forEach(t),l1r=i(Ml),T(U7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Pqe=i(f),tc=n(f,"H2",{class:!0});var Gje=s(tc);J7=n(Gje,"A",{id:!0,class:!0,href:!0});var w6t=s(J7);sve=n(w6t,"SPAN",{});var A6t=s(sve);T(uL.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),i1r=i(Gje),lve=n(Gje,"SPAN",{});var y6t=s(lve);d1r=r(y6t,"TFAutoModelForSequenceClassification"),y6t.forEach(t),Gje.forEach(t),Iqe=i(f),tr=n(f,"DIV",{class:!0});var El=s(tr);T(_L.$$.fragment,El),c1r=i(El),ac=n(El,"P",{});var $Z=s(ac);f1r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NW=n($Z,"A",{href:!0});var L6t=s(NW);m1r=r(L6t,"from_pretrained()"),L6t.forEach(t),g1r=r($Z," class method or the "),jW=n($Z,"A",{href:!0});var x6t=s(jW);h1r=r(x6t,"from_config()"),x6t.forEach(t),p1r=r($Z,` class
method.`),$Z.forEach(t),u1r=i(El),bL=n(El,"P",{});var Oje=s(bL);_1r=r(Oje,"This class cannot be instantiated directly using "),ive=n(Oje,"CODE",{});var $6t=s(ive);b1r=r($6t,"__init__()"),$6t.forEach(t),v1r=r(Oje," (throws an error)."),Oje.forEach(t),F1r=i(El),kt=n(El,"DIV",{class:!0});var pw=s(kt);T(vL.$$.fragment,pw),T1r=i(pw),dve=n(pw,"P",{});var k6t=s(dve);M1r=r(k6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k6t.forEach(t),E1r=i(pw),nc=n(pw,"P",{});var kZ=s(nc);C1r=r(kZ,`Note:
Loading a model from its configuration file does `),cve=n(kZ,"STRONG",{});var S6t=s(cve);w1r=r(S6t,"not"),S6t.forEach(t),A1r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(kZ,"A",{href:!0});var R6t=s(DW);y1r=r(R6t,"from_pretrained()"),R6t.forEach(t),L1r=r(kZ," to load the model weights."),kZ.forEach(t),x1r=i(pw),T(Y7.$$.fragment,pw),pw.forEach(t),$1r=i(El),kr=n(El,"DIV",{class:!0});var Cl=s(kr);T(FL.$$.fragment,Cl),k1r=i(Cl),fve=n(Cl,"P",{});var B6t=s(fve);S1r=r(B6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B6t.forEach(t),R1r=i(Cl),nn=n(Cl,"P",{});var uw=s(nn);B1r=r(uw,"The model class to instantiate is selected based on the "),mve=n(uw,"CODE",{});var P6t=s(mve);P1r=r(P6t,"model_type"),P6t.forEach(t),I1r=r(uw,` property of the config object (either
passed as an argument or loaded from `),gve=n(uw,"CODE",{});var I6t=s(gve);q1r=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),N1r=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(uw,"CODE",{});var q6t=s(hve);j1r=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),D1r=r(uw,":"),uw.forEach(t),G1r=i(Cl),Z=n(Cl,"UL",{});var te=s(Z);K7=n(te,"LI",{});var NSe=s(K7);pve=n(NSe,"STRONG",{});var N6t=s(pve);O1r=r(N6t,"albert"),N6t.forEach(t),V1r=r(NSe," \u2014 "),GW=n(NSe,"A",{href:!0});var j6t=s(GW);X1r=r(j6t,"TFAlbertForSequenceClassification"),j6t.forEach(t),z1r=r(NSe," (ALBERT model)"),NSe.forEach(t),Q1r=i(te),Z7=n(te,"LI",{});var jSe=s(Z7);uve=n(jSe,"STRONG",{});var D6t=s(uve);W1r=r(D6t,"bert"),D6t.forEach(t),H1r=r(jSe," \u2014 "),OW=n(jSe,"A",{href:!0});var G6t=s(OW);U1r=r(G6t,"TFBertForSequenceClassification"),G6t.forEach(t),J1r=r(jSe," (BERT model)"),jSe.forEach(t),Y1r=i(te),eM=n(te,"LI",{});var DSe=s(eM);_ve=n(DSe,"STRONG",{});var O6t=s(_ve);K1r=r(O6t,"camembert"),O6t.forEach(t),Z1r=r(DSe," \u2014 "),VW=n(DSe,"A",{href:!0});var V6t=s(VW);ebr=r(V6t,"TFCamembertForSequenceClassification"),V6t.forEach(t),obr=r(DSe," (CamemBERT model)"),DSe.forEach(t),rbr=i(te),oM=n(te,"LI",{});var GSe=s(oM);bve=n(GSe,"STRONG",{});var X6t=s(bve);tbr=r(X6t,"convbert"),X6t.forEach(t),abr=r(GSe," \u2014 "),XW=n(GSe,"A",{href:!0});var z6t=s(XW);nbr=r(z6t,"TFConvBertForSequenceClassification"),z6t.forEach(t),sbr=r(GSe," (ConvBERT model)"),GSe.forEach(t),lbr=i(te),rM=n(te,"LI",{});var OSe=s(rM);vve=n(OSe,"STRONG",{});var Q6t=s(vve);ibr=r(Q6t,"ctrl"),Q6t.forEach(t),dbr=r(OSe," \u2014 "),zW=n(OSe,"A",{href:!0});var W6t=s(zW);cbr=r(W6t,"TFCTRLForSequenceClassification"),W6t.forEach(t),fbr=r(OSe," (CTRL model)"),OSe.forEach(t),mbr=i(te),tM=n(te,"LI",{});var VSe=s(tM);Fve=n(VSe,"STRONG",{});var H6t=s(Fve);gbr=r(H6t,"deberta"),H6t.forEach(t),hbr=r(VSe," \u2014 "),QW=n(VSe,"A",{href:!0});var U6t=s(QW);pbr=r(U6t,"TFDebertaForSequenceClassification"),U6t.forEach(t),ubr=r(VSe," (DeBERTa model)"),VSe.forEach(t),_br=i(te),aM=n(te,"LI",{});var XSe=s(aM);Tve=n(XSe,"STRONG",{});var J6t=s(Tve);bbr=r(J6t,"deberta-v2"),J6t.forEach(t),vbr=r(XSe," \u2014 "),WW=n(XSe,"A",{href:!0});var Y6t=s(WW);Fbr=r(Y6t,"TFDebertaV2ForSequenceClassification"),Y6t.forEach(t),Tbr=r(XSe," (DeBERTa-v2 model)"),XSe.forEach(t),Mbr=i(te),nM=n(te,"LI",{});var zSe=s(nM);Mve=n(zSe,"STRONG",{});var K6t=s(Mve);Ebr=r(K6t,"distilbert"),K6t.forEach(t),Cbr=r(zSe," \u2014 "),HW=n(zSe,"A",{href:!0});var Z6t=s(HW);wbr=r(Z6t,"TFDistilBertForSequenceClassification"),Z6t.forEach(t),Abr=r(zSe," (DistilBERT model)"),zSe.forEach(t),ybr=i(te),sM=n(te,"LI",{});var QSe=s(sM);Eve=n(QSe,"STRONG",{});var eTt=s(Eve);Lbr=r(eTt,"electra"),eTt.forEach(t),xbr=r(QSe," \u2014 "),UW=n(QSe,"A",{href:!0});var oTt=s(UW);$br=r(oTt,"TFElectraForSequenceClassification"),oTt.forEach(t),kbr=r(QSe," (ELECTRA model)"),QSe.forEach(t),Sbr=i(te),lM=n(te,"LI",{});var WSe=s(lM);Cve=n(WSe,"STRONG",{});var rTt=s(Cve);Rbr=r(rTt,"flaubert"),rTt.forEach(t),Bbr=r(WSe," \u2014 "),JW=n(WSe,"A",{href:!0});var tTt=s(JW);Pbr=r(tTt,"TFFlaubertForSequenceClassification"),tTt.forEach(t),Ibr=r(WSe," (FlauBERT model)"),WSe.forEach(t),qbr=i(te),iM=n(te,"LI",{});var HSe=s(iM);wve=n(HSe,"STRONG",{});var aTt=s(wve);Nbr=r(aTt,"funnel"),aTt.forEach(t),jbr=r(HSe," \u2014 "),YW=n(HSe,"A",{href:!0});var nTt=s(YW);Dbr=r(nTt,"TFFunnelForSequenceClassification"),nTt.forEach(t),Gbr=r(HSe," (Funnel Transformer model)"),HSe.forEach(t),Obr=i(te),dM=n(te,"LI",{});var USe=s(dM);Ave=n(USe,"STRONG",{});var sTt=s(Ave);Vbr=r(sTt,"gpt2"),sTt.forEach(t),Xbr=r(USe," \u2014 "),KW=n(USe,"A",{href:!0});var lTt=s(KW);zbr=r(lTt,"TFGPT2ForSequenceClassification"),lTt.forEach(t),Qbr=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),Wbr=i(te),cM=n(te,"LI",{});var JSe=s(cM);yve=n(JSe,"STRONG",{});var iTt=s(yve);Hbr=r(iTt,"gptj"),iTt.forEach(t),Ubr=r(JSe," \u2014 "),ZW=n(JSe,"A",{href:!0});var dTt=s(ZW);Jbr=r(dTt,"TFGPTJForSequenceClassification"),dTt.forEach(t),Ybr=r(JSe," (GPT-J model)"),JSe.forEach(t),Kbr=i(te),fM=n(te,"LI",{});var YSe=s(fM);Lve=n(YSe,"STRONG",{});var cTt=s(Lve);Zbr=r(cTt,"layoutlm"),cTt.forEach(t),evr=r(YSe," \u2014 "),eH=n(YSe,"A",{href:!0});var fTt=s(eH);ovr=r(fTt,"TFLayoutLMForSequenceClassification"),fTt.forEach(t),rvr=r(YSe," (LayoutLM model)"),YSe.forEach(t),tvr=i(te),mM=n(te,"LI",{});var KSe=s(mM);xve=n(KSe,"STRONG",{});var mTt=s(xve);avr=r(mTt,"longformer"),mTt.forEach(t),nvr=r(KSe," \u2014 "),oH=n(KSe,"A",{href:!0});var gTt=s(oH);svr=r(gTt,"TFLongformerForSequenceClassification"),gTt.forEach(t),lvr=r(KSe," (Longformer model)"),KSe.forEach(t),ivr=i(te),gM=n(te,"LI",{});var ZSe=s(gM);$ve=n(ZSe,"STRONG",{});var hTt=s($ve);dvr=r(hTt,"mobilebert"),hTt.forEach(t),cvr=r(ZSe," \u2014 "),rH=n(ZSe,"A",{href:!0});var pTt=s(rH);fvr=r(pTt,"TFMobileBertForSequenceClassification"),pTt.forEach(t),mvr=r(ZSe," (MobileBERT model)"),ZSe.forEach(t),gvr=i(te),hM=n(te,"LI",{});var eRe=s(hM);kve=n(eRe,"STRONG",{});var uTt=s(kve);hvr=r(uTt,"mpnet"),uTt.forEach(t),pvr=r(eRe," \u2014 "),tH=n(eRe,"A",{href:!0});var _Tt=s(tH);uvr=r(_Tt,"TFMPNetForSequenceClassification"),_Tt.forEach(t),_vr=r(eRe," (MPNet model)"),eRe.forEach(t),bvr=i(te),pM=n(te,"LI",{});var oRe=s(pM);Sve=n(oRe,"STRONG",{});var bTt=s(Sve);vvr=r(bTt,"openai-gpt"),bTt.forEach(t),Fvr=r(oRe," \u2014 "),aH=n(oRe,"A",{href:!0});var vTt=s(aH);Tvr=r(vTt,"TFOpenAIGPTForSequenceClassification"),vTt.forEach(t),Mvr=r(oRe," (OpenAI GPT model)"),oRe.forEach(t),Evr=i(te),uM=n(te,"LI",{});var rRe=s(uM);Rve=n(rRe,"STRONG",{});var FTt=s(Rve);Cvr=r(FTt,"rembert"),FTt.forEach(t),wvr=r(rRe," \u2014 "),nH=n(rRe,"A",{href:!0});var TTt=s(nH);Avr=r(TTt,"TFRemBertForSequenceClassification"),TTt.forEach(t),yvr=r(rRe," (RemBERT model)"),rRe.forEach(t),Lvr=i(te),_M=n(te,"LI",{});var tRe=s(_M);Bve=n(tRe,"STRONG",{});var MTt=s(Bve);xvr=r(MTt,"roberta"),MTt.forEach(t),$vr=r(tRe," \u2014 "),sH=n(tRe,"A",{href:!0});var ETt=s(sH);kvr=r(ETt,"TFRobertaForSequenceClassification"),ETt.forEach(t),Svr=r(tRe," (RoBERTa model)"),tRe.forEach(t),Rvr=i(te),bM=n(te,"LI",{});var aRe=s(bM);Pve=n(aRe,"STRONG",{});var CTt=s(Pve);Bvr=r(CTt,"roformer"),CTt.forEach(t),Pvr=r(aRe," \u2014 "),lH=n(aRe,"A",{href:!0});var wTt=s(lH);Ivr=r(wTt,"TFRoFormerForSequenceClassification"),wTt.forEach(t),qvr=r(aRe," (RoFormer model)"),aRe.forEach(t),Nvr=i(te),vM=n(te,"LI",{});var nRe=s(vM);Ive=n(nRe,"STRONG",{});var ATt=s(Ive);jvr=r(ATt,"tapas"),ATt.forEach(t),Dvr=r(nRe," \u2014 "),iH=n(nRe,"A",{href:!0});var yTt=s(iH);Gvr=r(yTt,"TFTapasForSequenceClassification"),yTt.forEach(t),Ovr=r(nRe," (TAPAS model)"),nRe.forEach(t),Vvr=i(te),FM=n(te,"LI",{});var sRe=s(FM);qve=n(sRe,"STRONG",{});var LTt=s(qve);Xvr=r(LTt,"transfo-xl"),LTt.forEach(t),zvr=r(sRe," \u2014 "),dH=n(sRe,"A",{href:!0});var xTt=s(dH);Qvr=r(xTt,"TFTransfoXLForSequenceClassification"),xTt.forEach(t),Wvr=r(sRe," (Transformer-XL model)"),sRe.forEach(t),Hvr=i(te),TM=n(te,"LI",{});var lRe=s(TM);Nve=n(lRe,"STRONG",{});var $Tt=s(Nve);Uvr=r($Tt,"xlm"),$Tt.forEach(t),Jvr=r(lRe," \u2014 "),cH=n(lRe,"A",{href:!0});var kTt=s(cH);Yvr=r(kTt,"TFXLMForSequenceClassification"),kTt.forEach(t),Kvr=r(lRe," (XLM model)"),lRe.forEach(t),Zvr=i(te),MM=n(te,"LI",{});var iRe=s(MM);jve=n(iRe,"STRONG",{});var STt=s(jve);eFr=r(STt,"xlm-roberta"),STt.forEach(t),oFr=r(iRe," \u2014 "),fH=n(iRe,"A",{href:!0});var RTt=s(fH);rFr=r(RTt,"TFXLMRobertaForSequenceClassification"),RTt.forEach(t),tFr=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),aFr=i(te),EM=n(te,"LI",{});var dRe=s(EM);Dve=n(dRe,"STRONG",{});var BTt=s(Dve);nFr=r(BTt,"xlnet"),BTt.forEach(t),sFr=r(dRe," \u2014 "),mH=n(dRe,"A",{href:!0});var PTt=s(mH);lFr=r(PTt,"TFXLNetForSequenceClassification"),PTt.forEach(t),iFr=r(dRe," (XLNet model)"),dRe.forEach(t),te.forEach(t),dFr=i(Cl),T(CM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),qqe=i(f),sc=n(f,"H2",{class:!0});var Vje=s(sc);wM=n(Vje,"A",{id:!0,class:!0,href:!0});var ITt=s(wM);Gve=n(ITt,"SPAN",{});var qTt=s(Gve);T(TL.$$.fragment,qTt),qTt.forEach(t),ITt.forEach(t),cFr=i(Vje),Ove=n(Vje,"SPAN",{});var NTt=s(Ove);fFr=r(NTt,"TFAutoModelForMultipleChoice"),NTt.forEach(t),Vje.forEach(t),Nqe=i(f),ar=n(f,"DIV",{class:!0});var wl=s(ar);T(ML.$$.fragment,wl),mFr=i(wl),lc=n(wl,"P",{});var SZ=s(lc);gFr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gH=n(SZ,"A",{href:!0});var jTt=s(gH);hFr=r(jTt,"from_pretrained()"),jTt.forEach(t),pFr=r(SZ," class method or the "),hH=n(SZ,"A",{href:!0});var DTt=s(hH);uFr=r(DTt,"from_config()"),DTt.forEach(t),_Fr=r(SZ,` class
method.`),SZ.forEach(t),bFr=i(wl),EL=n(wl,"P",{});var Xje=s(EL);vFr=r(Xje,"This class cannot be instantiated directly using "),Vve=n(Xje,"CODE",{});var GTt=s(Vve);FFr=r(GTt,"__init__()"),GTt.forEach(t),TFr=r(Xje," (throws an error)."),Xje.forEach(t),MFr=i(wl),St=n(wl,"DIV",{class:!0});var _w=s(St);T(CL.$$.fragment,_w),EFr=i(_w),Xve=n(_w,"P",{});var OTt=s(Xve);CFr=r(OTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OTt.forEach(t),wFr=i(_w),ic=n(_w,"P",{});var RZ=s(ic);AFr=r(RZ,`Note:
Loading a model from its configuration file does `),zve=n(RZ,"STRONG",{});var VTt=s(zve);yFr=r(VTt,"not"),VTt.forEach(t),LFr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(RZ,"A",{href:!0});var XTt=s(pH);xFr=r(XTt,"from_pretrained()"),XTt.forEach(t),$Fr=r(RZ," to load the model weights."),RZ.forEach(t),kFr=i(_w),T(AM.$$.fragment,_w),_w.forEach(t),SFr=i(wl),Sr=n(wl,"DIV",{class:!0});var Al=s(Sr);T(wL.$$.fragment,Al),RFr=i(Al),Qve=n(Al,"P",{});var zTt=s(Qve);BFr=r(zTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zTt.forEach(t),PFr=i(Al),sn=n(Al,"P",{});var bw=s(sn);IFr=r(bw,"The model class to instantiate is selected based on the "),Wve=n(bw,"CODE",{});var QTt=s(Wve);qFr=r(QTt,"model_type"),QTt.forEach(t),NFr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Hve=n(bw,"CODE",{});var WTt=s(Hve);jFr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),DFr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(bw,"CODE",{});var HTt=s(Uve);GFr=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),OFr=r(bw,":"),bw.forEach(t),VFr=i(Al),pe=n(Al,"UL",{});var _e=s(pe);yM=n(_e,"LI",{});var cRe=s(yM);Jve=n(cRe,"STRONG",{});var UTt=s(Jve);XFr=r(UTt,"albert"),UTt.forEach(t),zFr=r(cRe," \u2014 "),uH=n(cRe,"A",{href:!0});var JTt=s(uH);QFr=r(JTt,"TFAlbertForMultipleChoice"),JTt.forEach(t),WFr=r(cRe," (ALBERT model)"),cRe.forEach(t),HFr=i(_e),LM=n(_e,"LI",{});var fRe=s(LM);Yve=n(fRe,"STRONG",{});var YTt=s(Yve);UFr=r(YTt,"bert"),YTt.forEach(t),JFr=r(fRe," \u2014 "),_H=n(fRe,"A",{href:!0});var KTt=s(_H);YFr=r(KTt,"TFBertForMultipleChoice"),KTt.forEach(t),KFr=r(fRe," (BERT model)"),fRe.forEach(t),ZFr=i(_e),xM=n(_e,"LI",{});var mRe=s(xM);Kve=n(mRe,"STRONG",{});var ZTt=s(Kve);e6r=r(ZTt,"camembert"),ZTt.forEach(t),o6r=r(mRe," \u2014 "),bH=n(mRe,"A",{href:!0});var e9t=s(bH);r6r=r(e9t,"TFCamembertForMultipleChoice"),e9t.forEach(t),t6r=r(mRe," (CamemBERT model)"),mRe.forEach(t),a6r=i(_e),$M=n(_e,"LI",{});var gRe=s($M);Zve=n(gRe,"STRONG",{});var o9t=s(Zve);n6r=r(o9t,"convbert"),o9t.forEach(t),s6r=r(gRe," \u2014 "),vH=n(gRe,"A",{href:!0});var r9t=s(vH);l6r=r(r9t,"TFConvBertForMultipleChoice"),r9t.forEach(t),i6r=r(gRe," (ConvBERT model)"),gRe.forEach(t),d6r=i(_e),kM=n(_e,"LI",{});var hRe=s(kM);eFe=n(hRe,"STRONG",{});var t9t=s(eFe);c6r=r(t9t,"distilbert"),t9t.forEach(t),f6r=r(hRe," \u2014 "),FH=n(hRe,"A",{href:!0});var a9t=s(FH);m6r=r(a9t,"TFDistilBertForMultipleChoice"),a9t.forEach(t),g6r=r(hRe," (DistilBERT model)"),hRe.forEach(t),h6r=i(_e),SM=n(_e,"LI",{});var pRe=s(SM);oFe=n(pRe,"STRONG",{});var n9t=s(oFe);p6r=r(n9t,"electra"),n9t.forEach(t),u6r=r(pRe," \u2014 "),TH=n(pRe,"A",{href:!0});var s9t=s(TH);_6r=r(s9t,"TFElectraForMultipleChoice"),s9t.forEach(t),b6r=r(pRe," (ELECTRA model)"),pRe.forEach(t),v6r=i(_e),RM=n(_e,"LI",{});var uRe=s(RM);rFe=n(uRe,"STRONG",{});var l9t=s(rFe);F6r=r(l9t,"flaubert"),l9t.forEach(t),T6r=r(uRe," \u2014 "),MH=n(uRe,"A",{href:!0});var i9t=s(MH);M6r=r(i9t,"TFFlaubertForMultipleChoice"),i9t.forEach(t),E6r=r(uRe," (FlauBERT model)"),uRe.forEach(t),C6r=i(_e),BM=n(_e,"LI",{});var _Re=s(BM);tFe=n(_Re,"STRONG",{});var d9t=s(tFe);w6r=r(d9t,"funnel"),d9t.forEach(t),A6r=r(_Re," \u2014 "),EH=n(_Re,"A",{href:!0});var c9t=s(EH);y6r=r(c9t,"TFFunnelForMultipleChoice"),c9t.forEach(t),L6r=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),x6r=i(_e),PM=n(_e,"LI",{});var bRe=s(PM);aFe=n(bRe,"STRONG",{});var f9t=s(aFe);$6r=r(f9t,"longformer"),f9t.forEach(t),k6r=r(bRe," \u2014 "),CH=n(bRe,"A",{href:!0});var m9t=s(CH);S6r=r(m9t,"TFLongformerForMultipleChoice"),m9t.forEach(t),R6r=r(bRe," (Longformer model)"),bRe.forEach(t),B6r=i(_e),IM=n(_e,"LI",{});var vRe=s(IM);nFe=n(vRe,"STRONG",{});var g9t=s(nFe);P6r=r(g9t,"mobilebert"),g9t.forEach(t),I6r=r(vRe," \u2014 "),wH=n(vRe,"A",{href:!0});var h9t=s(wH);q6r=r(h9t,"TFMobileBertForMultipleChoice"),h9t.forEach(t),N6r=r(vRe," (MobileBERT model)"),vRe.forEach(t),j6r=i(_e),qM=n(_e,"LI",{});var FRe=s(qM);sFe=n(FRe,"STRONG",{});var p9t=s(sFe);D6r=r(p9t,"mpnet"),p9t.forEach(t),G6r=r(FRe," \u2014 "),AH=n(FRe,"A",{href:!0});var u9t=s(AH);O6r=r(u9t,"TFMPNetForMultipleChoice"),u9t.forEach(t),V6r=r(FRe," (MPNet model)"),FRe.forEach(t),X6r=i(_e),NM=n(_e,"LI",{});var TRe=s(NM);lFe=n(TRe,"STRONG",{});var _9t=s(lFe);z6r=r(_9t,"rembert"),_9t.forEach(t),Q6r=r(TRe," \u2014 "),yH=n(TRe,"A",{href:!0});var b9t=s(yH);W6r=r(b9t,"TFRemBertForMultipleChoice"),b9t.forEach(t),H6r=r(TRe," (RemBERT model)"),TRe.forEach(t),U6r=i(_e),jM=n(_e,"LI",{});var MRe=s(jM);iFe=n(MRe,"STRONG",{});var v9t=s(iFe);J6r=r(v9t,"roberta"),v9t.forEach(t),Y6r=r(MRe," \u2014 "),LH=n(MRe,"A",{href:!0});var F9t=s(LH);K6r=r(F9t,"TFRobertaForMultipleChoice"),F9t.forEach(t),Z6r=r(MRe," (RoBERTa model)"),MRe.forEach(t),eTr=i(_e),DM=n(_e,"LI",{});var ERe=s(DM);dFe=n(ERe,"STRONG",{});var T9t=s(dFe);oTr=r(T9t,"roformer"),T9t.forEach(t),rTr=r(ERe," \u2014 "),xH=n(ERe,"A",{href:!0});var M9t=s(xH);tTr=r(M9t,"TFRoFormerForMultipleChoice"),M9t.forEach(t),aTr=r(ERe," (RoFormer model)"),ERe.forEach(t),nTr=i(_e),GM=n(_e,"LI",{});var CRe=s(GM);cFe=n(CRe,"STRONG",{});var E9t=s(cFe);sTr=r(E9t,"xlm"),E9t.forEach(t),lTr=r(CRe," \u2014 "),$H=n(CRe,"A",{href:!0});var C9t=s($H);iTr=r(C9t,"TFXLMForMultipleChoice"),C9t.forEach(t),dTr=r(CRe," (XLM model)"),CRe.forEach(t),cTr=i(_e),OM=n(_e,"LI",{});var wRe=s(OM);fFe=n(wRe,"STRONG",{});var w9t=s(fFe);fTr=r(w9t,"xlm-roberta"),w9t.forEach(t),mTr=r(wRe," \u2014 "),kH=n(wRe,"A",{href:!0});var A9t=s(kH);gTr=r(A9t,"TFXLMRobertaForMultipleChoice"),A9t.forEach(t),hTr=r(wRe," (XLM-RoBERTa model)"),wRe.forEach(t),pTr=i(_e),VM=n(_e,"LI",{});var ARe=s(VM);mFe=n(ARe,"STRONG",{});var y9t=s(mFe);uTr=r(y9t,"xlnet"),y9t.forEach(t),_Tr=r(ARe," \u2014 "),SH=n(ARe,"A",{href:!0});var L9t=s(SH);bTr=r(L9t,"TFXLNetForMultipleChoice"),L9t.forEach(t),vTr=r(ARe," (XLNet model)"),ARe.forEach(t),_e.forEach(t),FTr=i(Al),T(XM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),jqe=i(f),dc=n(f,"H2",{class:!0});var zje=s(dc);zM=n(zje,"A",{id:!0,class:!0,href:!0});var x9t=s(zM);gFe=n(x9t,"SPAN",{});var $9t=s(gFe);T(AL.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),TTr=i(zje),hFe=n(zje,"SPAN",{});var k9t=s(hFe);MTr=r(k9t,"TFAutoModelForNextSentencePrediction"),k9t.forEach(t),zje.forEach(t),Dqe=i(f),nr=n(f,"DIV",{class:!0});var yl=s(nr);T(yL.$$.fragment,yl),ETr=i(yl),cc=n(yl,"P",{});var BZ=s(cc);CTr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=n(BZ,"A",{href:!0});var S9t=s(RH);wTr=r(S9t,"from_pretrained()"),S9t.forEach(t),ATr=r(BZ," class method or the "),BH=n(BZ,"A",{href:!0});var R9t=s(BH);yTr=r(R9t,"from_config()"),R9t.forEach(t),LTr=r(BZ,` class
method.`),BZ.forEach(t),xTr=i(yl),LL=n(yl,"P",{});var Qje=s(LL);$Tr=r(Qje,"This class cannot be instantiated directly using "),pFe=n(Qje,"CODE",{});var B9t=s(pFe);kTr=r(B9t,"__init__()"),B9t.forEach(t),STr=r(Qje," (throws an error)."),Qje.forEach(t),RTr=i(yl),Rt=n(yl,"DIV",{class:!0});var vw=s(Rt);T(xL.$$.fragment,vw),BTr=i(vw),uFe=n(vw,"P",{});var P9t=s(uFe);PTr=r(P9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P9t.forEach(t),ITr=i(vw),fc=n(vw,"P",{});var PZ=s(fc);qTr=r(PZ,`Note:
Loading a model from its configuration file does `),_Fe=n(PZ,"STRONG",{});var I9t=s(_Fe);NTr=r(I9t,"not"),I9t.forEach(t),jTr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(PZ,"A",{href:!0});var q9t=s(PH);DTr=r(q9t,"from_pretrained()"),q9t.forEach(t),GTr=r(PZ," to load the model weights."),PZ.forEach(t),OTr=i(vw),T(QM.$$.fragment,vw),vw.forEach(t),VTr=i(yl),Rr=n(yl,"DIV",{class:!0});var Ll=s(Rr);T($L.$$.fragment,Ll),XTr=i(Ll),bFe=n(Ll,"P",{});var N9t=s(bFe);zTr=r(N9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N9t.forEach(t),QTr=i(Ll),ln=n(Ll,"P",{});var Fw=s(ln);WTr=r(Fw,"The model class to instantiate is selected based on the "),vFe=n(Fw,"CODE",{});var j9t=s(vFe);HTr=r(j9t,"model_type"),j9t.forEach(t),UTr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),FFe=n(Fw,"CODE",{});var D9t=s(FFe);JTr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),YTr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(Fw,"CODE",{});var G9t=s(TFe);KTr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),ZTr=r(Fw,":"),Fw.forEach(t),e9r=i(Ll),kL=n(Ll,"UL",{});var Wje=s(kL);WM=n(Wje,"LI",{});var yRe=s(WM);MFe=n(yRe,"STRONG",{});var O9t=s(MFe);o9r=r(O9t,"bert"),O9t.forEach(t),r9r=r(yRe," \u2014 "),IH=n(yRe,"A",{href:!0});var V9t=s(IH);t9r=r(V9t,"TFBertForNextSentencePrediction"),V9t.forEach(t),a9r=r(yRe," (BERT model)"),yRe.forEach(t),n9r=i(Wje),HM=n(Wje,"LI",{});var LRe=s(HM);EFe=n(LRe,"STRONG",{});var X9t=s(EFe);s9r=r(X9t,"mobilebert"),X9t.forEach(t),l9r=r(LRe," \u2014 "),qH=n(LRe,"A",{href:!0});var z9t=s(qH);i9r=r(z9t,"TFMobileBertForNextSentencePrediction"),z9t.forEach(t),d9r=r(LRe," (MobileBERT model)"),LRe.forEach(t),Wje.forEach(t),c9r=i(Ll),T(UM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Gqe=i(f),mc=n(f,"H2",{class:!0});var Hje=s(mc);JM=n(Hje,"A",{id:!0,class:!0,href:!0});var Q9t=s(JM);CFe=n(Q9t,"SPAN",{});var W9t=s(CFe);T(SL.$$.fragment,W9t),W9t.forEach(t),Q9t.forEach(t),f9r=i(Hje),wFe=n(Hje,"SPAN",{});var H9t=s(wFe);m9r=r(H9t,"TFAutoModelForTableQuestionAnswering"),H9t.forEach(t),Hje.forEach(t),Oqe=i(f),sr=n(f,"DIV",{class:!0});var xl=s(sr);T(RL.$$.fragment,xl),g9r=i(xl),gc=n(xl,"P",{});var IZ=s(gc);h9r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NH=n(IZ,"A",{href:!0});var U9t=s(NH);p9r=r(U9t,"from_pretrained()"),U9t.forEach(t),u9r=r(IZ," class method or the "),jH=n(IZ,"A",{href:!0});var J9t=s(jH);_9r=r(J9t,"from_config()"),J9t.forEach(t),b9r=r(IZ,` class
method.`),IZ.forEach(t),v9r=i(xl),BL=n(xl,"P",{});var Uje=s(BL);F9r=r(Uje,"This class cannot be instantiated directly using "),AFe=n(Uje,"CODE",{});var Y9t=s(AFe);T9r=r(Y9t,"__init__()"),Y9t.forEach(t),M9r=r(Uje," (throws an error)."),Uje.forEach(t),E9r=i(xl),Bt=n(xl,"DIV",{class:!0});var Tw=s(Bt);T(PL.$$.fragment,Tw),C9r=i(Tw),yFe=n(Tw,"P",{});var K9t=s(yFe);w9r=r(K9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K9t.forEach(t),A9r=i(Tw),hc=n(Tw,"P",{});var qZ=s(hc);y9r=r(qZ,`Note:
Loading a model from its configuration file does `),LFe=n(qZ,"STRONG",{});var Z9t=s(LFe);L9r=r(Z9t,"not"),Z9t.forEach(t),x9r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(qZ,"A",{href:!0});var e7t=s(DH);$9r=r(e7t,"from_pretrained()"),e7t.forEach(t),k9r=r(qZ," to load the model weights."),qZ.forEach(t),S9r=i(Tw),T(YM.$$.fragment,Tw),Tw.forEach(t),R9r=i(xl),Br=n(xl,"DIV",{class:!0});var $l=s(Br);T(IL.$$.fragment,$l),B9r=i($l),xFe=n($l,"P",{});var o7t=s(xFe);P9r=r(o7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o7t.forEach(t),I9r=i($l),dn=n($l,"P",{});var Mw=s(dn);q9r=r(Mw,"The model class to instantiate is selected based on the "),$Fe=n(Mw,"CODE",{});var r7t=s($Fe);N9r=r(r7t,"model_type"),r7t.forEach(t),j9r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),kFe=n(Mw,"CODE",{});var t7t=s(kFe);D9r=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),G9r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(Mw,"CODE",{});var a7t=s(SFe);O9r=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),V9r=r(Mw,":"),Mw.forEach(t),X9r=i($l),RFe=n($l,"UL",{});var n7t=s(RFe);KM=n(n7t,"LI",{});var xRe=s(KM);BFe=n(xRe,"STRONG",{});var s7t=s(BFe);z9r=r(s7t,"tapas"),s7t.forEach(t),Q9r=r(xRe," \u2014 "),GH=n(xRe,"A",{href:!0});var l7t=s(GH);W9r=r(l7t,"TFTapasForQuestionAnswering"),l7t.forEach(t),H9r=r(xRe," (TAPAS model)"),xRe.forEach(t),n7t.forEach(t),U9r=i($l),T(ZM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Vqe=i(f),pc=n(f,"H2",{class:!0});var Jje=s(pc);e4=n(Jje,"A",{id:!0,class:!0,href:!0});var i7t=s(e4);PFe=n(i7t,"SPAN",{});var d7t=s(PFe);T(qL.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),J9r=i(Jje),IFe=n(Jje,"SPAN",{});var c7t=s(IFe);Y9r=r(c7t,"TFAutoModelForTokenClassification"),c7t.forEach(t),Jje.forEach(t),Xqe=i(f),lr=n(f,"DIV",{class:!0});var kl=s(lr);T(NL.$$.fragment,kl),K9r=i(kl),uc=n(kl,"P",{});var NZ=s(uc);Z9r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(NZ,"A",{href:!0});var f7t=s(OH);e7r=r(f7t,"from_pretrained()"),f7t.forEach(t),o7r=r(NZ," class method or the "),VH=n(NZ,"A",{href:!0});var m7t=s(VH);r7r=r(m7t,"from_config()"),m7t.forEach(t),t7r=r(NZ,` class
method.`),NZ.forEach(t),a7r=i(kl),jL=n(kl,"P",{});var Yje=s(jL);n7r=r(Yje,"This class cannot be instantiated directly using "),qFe=n(Yje,"CODE",{});var g7t=s(qFe);s7r=r(g7t,"__init__()"),g7t.forEach(t),l7r=r(Yje," (throws an error)."),Yje.forEach(t),i7r=i(kl),Pt=n(kl,"DIV",{class:!0});var Ew=s(Pt);T(DL.$$.fragment,Ew),d7r=i(Ew),NFe=n(Ew,"P",{});var h7t=s(NFe);c7r=r(h7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h7t.forEach(t),f7r=i(Ew),_c=n(Ew,"P",{});var jZ=s(_c);m7r=r(jZ,`Note:
Loading a model from its configuration file does `),jFe=n(jZ,"STRONG",{});var p7t=s(jFe);g7r=r(p7t,"not"),p7t.forEach(t),h7r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(jZ,"A",{href:!0});var u7t=s(XH);p7r=r(u7t,"from_pretrained()"),u7t.forEach(t),u7r=r(jZ," to load the model weights."),jZ.forEach(t),_7r=i(Ew),T(o4.$$.fragment,Ew),Ew.forEach(t),b7r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(GL.$$.fragment,Sl),v7r=i(Sl),DFe=n(Sl,"P",{});var _7t=s(DFe);F7r=r(_7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_7t.forEach(t),T7r=i(Sl),cn=n(Sl,"P",{});var Cw=s(cn);M7r=r(Cw,"The model class to instantiate is selected based on the "),GFe=n(Cw,"CODE",{});var b7t=s(GFe);E7r=r(b7t,"model_type"),b7t.forEach(t),C7r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),OFe=n(Cw,"CODE",{});var v7t=s(OFe);w7r=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),A7r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(Cw,"CODE",{});var F7t=s(VFe);y7r=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),L7r=r(Cw,":"),Cw.forEach(t),x7r=i(Sl),de=n(Sl,"UL",{});var me=s(de);r4=n(me,"LI",{});var $Re=s(r4);XFe=n($Re,"STRONG",{});var T7t=s(XFe);$7r=r(T7t,"albert"),T7t.forEach(t),k7r=r($Re," \u2014 "),zH=n($Re,"A",{href:!0});var M7t=s(zH);S7r=r(M7t,"TFAlbertForTokenClassification"),M7t.forEach(t),R7r=r($Re," (ALBERT model)"),$Re.forEach(t),B7r=i(me),t4=n(me,"LI",{});var kRe=s(t4);zFe=n(kRe,"STRONG",{});var E7t=s(zFe);P7r=r(E7t,"bert"),E7t.forEach(t),I7r=r(kRe," \u2014 "),QH=n(kRe,"A",{href:!0});var C7t=s(QH);q7r=r(C7t,"TFBertForTokenClassification"),C7t.forEach(t),N7r=r(kRe," (BERT model)"),kRe.forEach(t),j7r=i(me),a4=n(me,"LI",{});var SRe=s(a4);QFe=n(SRe,"STRONG",{});var w7t=s(QFe);D7r=r(w7t,"camembert"),w7t.forEach(t),G7r=r(SRe," \u2014 "),WH=n(SRe,"A",{href:!0});var A7t=s(WH);O7r=r(A7t,"TFCamembertForTokenClassification"),A7t.forEach(t),V7r=r(SRe," (CamemBERT model)"),SRe.forEach(t),X7r=i(me),n4=n(me,"LI",{});var RRe=s(n4);WFe=n(RRe,"STRONG",{});var y7t=s(WFe);z7r=r(y7t,"convbert"),y7t.forEach(t),Q7r=r(RRe," \u2014 "),HH=n(RRe,"A",{href:!0});var L7t=s(HH);W7r=r(L7t,"TFConvBertForTokenClassification"),L7t.forEach(t),H7r=r(RRe," (ConvBERT model)"),RRe.forEach(t),U7r=i(me),s4=n(me,"LI",{});var BRe=s(s4);HFe=n(BRe,"STRONG",{});var x7t=s(HFe);J7r=r(x7t,"deberta"),x7t.forEach(t),Y7r=r(BRe," \u2014 "),UH=n(BRe,"A",{href:!0});var $7t=s(UH);K7r=r($7t,"TFDebertaForTokenClassification"),$7t.forEach(t),Z7r=r(BRe," (DeBERTa model)"),BRe.forEach(t),eMr=i(me),l4=n(me,"LI",{});var PRe=s(l4);UFe=n(PRe,"STRONG",{});var k7t=s(UFe);oMr=r(k7t,"deberta-v2"),k7t.forEach(t),rMr=r(PRe," \u2014 "),JH=n(PRe,"A",{href:!0});var S7t=s(JH);tMr=r(S7t,"TFDebertaV2ForTokenClassification"),S7t.forEach(t),aMr=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),nMr=i(me),i4=n(me,"LI",{});var IRe=s(i4);JFe=n(IRe,"STRONG",{});var R7t=s(JFe);sMr=r(R7t,"distilbert"),R7t.forEach(t),lMr=r(IRe," \u2014 "),YH=n(IRe,"A",{href:!0});var B7t=s(YH);iMr=r(B7t,"TFDistilBertForTokenClassification"),B7t.forEach(t),dMr=r(IRe," (DistilBERT model)"),IRe.forEach(t),cMr=i(me),d4=n(me,"LI",{});var qRe=s(d4);YFe=n(qRe,"STRONG",{});var P7t=s(YFe);fMr=r(P7t,"electra"),P7t.forEach(t),mMr=r(qRe," \u2014 "),KH=n(qRe,"A",{href:!0});var I7t=s(KH);gMr=r(I7t,"TFElectraForTokenClassification"),I7t.forEach(t),hMr=r(qRe," (ELECTRA model)"),qRe.forEach(t),pMr=i(me),c4=n(me,"LI",{});var NRe=s(c4);KFe=n(NRe,"STRONG",{});var q7t=s(KFe);uMr=r(q7t,"flaubert"),q7t.forEach(t),_Mr=r(NRe," \u2014 "),ZH=n(NRe,"A",{href:!0});var N7t=s(ZH);bMr=r(N7t,"TFFlaubertForTokenClassification"),N7t.forEach(t),vMr=r(NRe," (FlauBERT model)"),NRe.forEach(t),FMr=i(me),f4=n(me,"LI",{});var jRe=s(f4);ZFe=n(jRe,"STRONG",{});var j7t=s(ZFe);TMr=r(j7t,"funnel"),j7t.forEach(t),MMr=r(jRe," \u2014 "),eU=n(jRe,"A",{href:!0});var D7t=s(eU);EMr=r(D7t,"TFFunnelForTokenClassification"),D7t.forEach(t),CMr=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),wMr=i(me),m4=n(me,"LI",{});var DRe=s(m4);e6e=n(DRe,"STRONG",{});var G7t=s(e6e);AMr=r(G7t,"layoutlm"),G7t.forEach(t),yMr=r(DRe," \u2014 "),oU=n(DRe,"A",{href:!0});var O7t=s(oU);LMr=r(O7t,"TFLayoutLMForTokenClassification"),O7t.forEach(t),xMr=r(DRe," (LayoutLM model)"),DRe.forEach(t),$Mr=i(me),g4=n(me,"LI",{});var GRe=s(g4);o6e=n(GRe,"STRONG",{});var V7t=s(o6e);kMr=r(V7t,"longformer"),V7t.forEach(t),SMr=r(GRe," \u2014 "),rU=n(GRe,"A",{href:!0});var X7t=s(rU);RMr=r(X7t,"TFLongformerForTokenClassification"),X7t.forEach(t),BMr=r(GRe," (Longformer model)"),GRe.forEach(t),PMr=i(me),h4=n(me,"LI",{});var ORe=s(h4);r6e=n(ORe,"STRONG",{});var z7t=s(r6e);IMr=r(z7t,"mobilebert"),z7t.forEach(t),qMr=r(ORe," \u2014 "),tU=n(ORe,"A",{href:!0});var Q7t=s(tU);NMr=r(Q7t,"TFMobileBertForTokenClassification"),Q7t.forEach(t),jMr=r(ORe," (MobileBERT model)"),ORe.forEach(t),DMr=i(me),p4=n(me,"LI",{});var VRe=s(p4);t6e=n(VRe,"STRONG",{});var W7t=s(t6e);GMr=r(W7t,"mpnet"),W7t.forEach(t),OMr=r(VRe," \u2014 "),aU=n(VRe,"A",{href:!0});var H7t=s(aU);VMr=r(H7t,"TFMPNetForTokenClassification"),H7t.forEach(t),XMr=r(VRe," (MPNet model)"),VRe.forEach(t),zMr=i(me),u4=n(me,"LI",{});var XRe=s(u4);a6e=n(XRe,"STRONG",{});var U7t=s(a6e);QMr=r(U7t,"rembert"),U7t.forEach(t),WMr=r(XRe," \u2014 "),nU=n(XRe,"A",{href:!0});var J7t=s(nU);HMr=r(J7t,"TFRemBertForTokenClassification"),J7t.forEach(t),UMr=r(XRe," (RemBERT model)"),XRe.forEach(t),JMr=i(me),_4=n(me,"LI",{});var zRe=s(_4);n6e=n(zRe,"STRONG",{});var Y7t=s(n6e);YMr=r(Y7t,"roberta"),Y7t.forEach(t),KMr=r(zRe," \u2014 "),sU=n(zRe,"A",{href:!0});var K7t=s(sU);ZMr=r(K7t,"TFRobertaForTokenClassification"),K7t.forEach(t),e4r=r(zRe," (RoBERTa model)"),zRe.forEach(t),o4r=i(me),b4=n(me,"LI",{});var QRe=s(b4);s6e=n(QRe,"STRONG",{});var Z7t=s(s6e);r4r=r(Z7t,"roformer"),Z7t.forEach(t),t4r=r(QRe," \u2014 "),lU=n(QRe,"A",{href:!0});var eMt=s(lU);a4r=r(eMt,"TFRoFormerForTokenClassification"),eMt.forEach(t),n4r=r(QRe," (RoFormer model)"),QRe.forEach(t),s4r=i(me),v4=n(me,"LI",{});var WRe=s(v4);l6e=n(WRe,"STRONG",{});var oMt=s(l6e);l4r=r(oMt,"xlm"),oMt.forEach(t),i4r=r(WRe," \u2014 "),iU=n(WRe,"A",{href:!0});var rMt=s(iU);d4r=r(rMt,"TFXLMForTokenClassification"),rMt.forEach(t),c4r=r(WRe," (XLM model)"),WRe.forEach(t),f4r=i(me),F4=n(me,"LI",{});var HRe=s(F4);i6e=n(HRe,"STRONG",{});var tMt=s(i6e);m4r=r(tMt,"xlm-roberta"),tMt.forEach(t),g4r=r(HRe," \u2014 "),dU=n(HRe,"A",{href:!0});var aMt=s(dU);h4r=r(aMt,"TFXLMRobertaForTokenClassification"),aMt.forEach(t),p4r=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),u4r=i(me),T4=n(me,"LI",{});var URe=s(T4);d6e=n(URe,"STRONG",{});var nMt=s(d6e);_4r=r(nMt,"xlnet"),nMt.forEach(t),b4r=r(URe," \u2014 "),cU=n(URe,"A",{href:!0});var sMt=s(cU);v4r=r(sMt,"TFXLNetForTokenClassification"),sMt.forEach(t),F4r=r(URe," (XLNet model)"),URe.forEach(t),me.forEach(t),T4r=i(Sl),T(M4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),zqe=i(f),bc=n(f,"H2",{class:!0});var Kje=s(bc);E4=n(Kje,"A",{id:!0,class:!0,href:!0});var lMt=s(E4);c6e=n(lMt,"SPAN",{});var iMt=s(c6e);T(OL.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),M4r=i(Kje),f6e=n(Kje,"SPAN",{});var dMt=s(f6e);E4r=r(dMt,"TFAutoModelForQuestionAnswering"),dMt.forEach(t),Kje.forEach(t),Qqe=i(f),ir=n(f,"DIV",{class:!0});var Rl=s(ir);T(VL.$$.fragment,Rl),C4r=i(Rl),vc=n(Rl,"P",{});var DZ=s(vc);w4r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=n(DZ,"A",{href:!0});var cMt=s(fU);A4r=r(cMt,"from_pretrained()"),cMt.forEach(t),y4r=r(DZ," class method or the "),mU=n(DZ,"A",{href:!0});var fMt=s(mU);L4r=r(fMt,"from_config()"),fMt.forEach(t),x4r=r(DZ,` class
method.`),DZ.forEach(t),$4r=i(Rl),XL=n(Rl,"P",{});var Zje=s(XL);k4r=r(Zje,"This class cannot be instantiated directly using "),m6e=n(Zje,"CODE",{});var mMt=s(m6e);S4r=r(mMt,"__init__()"),mMt.forEach(t),R4r=r(Zje," (throws an error)."),Zje.forEach(t),B4r=i(Rl),It=n(Rl,"DIV",{class:!0});var ww=s(It);T(zL.$$.fragment,ww),P4r=i(ww),g6e=n(ww,"P",{});var gMt=s(g6e);I4r=r(gMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gMt.forEach(t),q4r=i(ww),Fc=n(ww,"P",{});var GZ=s(Fc);N4r=r(GZ,`Note:
Loading a model from its configuration file does `),h6e=n(GZ,"STRONG",{});var hMt=s(h6e);j4r=r(hMt,"not"),hMt.forEach(t),D4r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(GZ,"A",{href:!0});var pMt=s(gU);G4r=r(pMt,"from_pretrained()"),pMt.forEach(t),O4r=r(GZ," to load the model weights."),GZ.forEach(t),V4r=i(ww),T(C4.$$.fragment,ww),ww.forEach(t),X4r=i(Rl),Ir=n(Rl,"DIV",{class:!0});var Bl=s(Ir);T(QL.$$.fragment,Bl),z4r=i(Bl),p6e=n(Bl,"P",{});var uMt=s(p6e);Q4r=r(uMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uMt.forEach(t),W4r=i(Bl),fn=n(Bl,"P",{});var Aw=s(fn);H4r=r(Aw,"The model class to instantiate is selected based on the "),u6e=n(Aw,"CODE",{});var _Mt=s(u6e);U4r=r(_Mt,"model_type"),_Mt.forEach(t),J4r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),_6e=n(Aw,"CODE",{});var bMt=s(_6e);Y4r=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),K4r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(Aw,"CODE",{});var vMt=s(b6e);Z4r=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),eEr=r(Aw,":"),Aw.forEach(t),oEr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);w4=n(ge,"LI",{});var JRe=s(w4);v6e=n(JRe,"STRONG",{});var FMt=s(v6e);rEr=r(FMt,"albert"),FMt.forEach(t),tEr=r(JRe," \u2014 "),hU=n(JRe,"A",{href:!0});var TMt=s(hU);aEr=r(TMt,"TFAlbertForQuestionAnswering"),TMt.forEach(t),nEr=r(JRe," (ALBERT model)"),JRe.forEach(t),sEr=i(ge),A4=n(ge,"LI",{});var YRe=s(A4);F6e=n(YRe,"STRONG",{});var MMt=s(F6e);lEr=r(MMt,"bert"),MMt.forEach(t),iEr=r(YRe," \u2014 "),pU=n(YRe,"A",{href:!0});var EMt=s(pU);dEr=r(EMt,"TFBertForQuestionAnswering"),EMt.forEach(t),cEr=r(YRe," (BERT model)"),YRe.forEach(t),fEr=i(ge),y4=n(ge,"LI",{});var KRe=s(y4);T6e=n(KRe,"STRONG",{});var CMt=s(T6e);mEr=r(CMt,"camembert"),CMt.forEach(t),gEr=r(KRe," \u2014 "),uU=n(KRe,"A",{href:!0});var wMt=s(uU);hEr=r(wMt,"TFCamembertForQuestionAnswering"),wMt.forEach(t),pEr=r(KRe," (CamemBERT model)"),KRe.forEach(t),uEr=i(ge),L4=n(ge,"LI",{});var ZRe=s(L4);M6e=n(ZRe,"STRONG",{});var AMt=s(M6e);_Er=r(AMt,"convbert"),AMt.forEach(t),bEr=r(ZRe," \u2014 "),_U=n(ZRe,"A",{href:!0});var yMt=s(_U);vEr=r(yMt,"TFConvBertForQuestionAnswering"),yMt.forEach(t),FEr=r(ZRe," (ConvBERT model)"),ZRe.forEach(t),TEr=i(ge),x4=n(ge,"LI",{});var eBe=s(x4);E6e=n(eBe,"STRONG",{});var LMt=s(E6e);MEr=r(LMt,"deberta"),LMt.forEach(t),EEr=r(eBe," \u2014 "),bU=n(eBe,"A",{href:!0});var xMt=s(bU);CEr=r(xMt,"TFDebertaForQuestionAnswering"),xMt.forEach(t),wEr=r(eBe," (DeBERTa model)"),eBe.forEach(t),AEr=i(ge),$4=n(ge,"LI",{});var oBe=s($4);C6e=n(oBe,"STRONG",{});var $Mt=s(C6e);yEr=r($Mt,"deberta-v2"),$Mt.forEach(t),LEr=r(oBe," \u2014 "),vU=n(oBe,"A",{href:!0});var kMt=s(vU);xEr=r(kMt,"TFDebertaV2ForQuestionAnswering"),kMt.forEach(t),$Er=r(oBe," (DeBERTa-v2 model)"),oBe.forEach(t),kEr=i(ge),k4=n(ge,"LI",{});var rBe=s(k4);w6e=n(rBe,"STRONG",{});var SMt=s(w6e);SEr=r(SMt,"distilbert"),SMt.forEach(t),REr=r(rBe," \u2014 "),FU=n(rBe,"A",{href:!0});var RMt=s(FU);BEr=r(RMt,"TFDistilBertForQuestionAnswering"),RMt.forEach(t),PEr=r(rBe," (DistilBERT model)"),rBe.forEach(t),IEr=i(ge),S4=n(ge,"LI",{});var tBe=s(S4);A6e=n(tBe,"STRONG",{});var BMt=s(A6e);qEr=r(BMt,"electra"),BMt.forEach(t),NEr=r(tBe," \u2014 "),TU=n(tBe,"A",{href:!0});var PMt=s(TU);jEr=r(PMt,"TFElectraForQuestionAnswering"),PMt.forEach(t),DEr=r(tBe," (ELECTRA model)"),tBe.forEach(t),GEr=i(ge),R4=n(ge,"LI",{});var aBe=s(R4);y6e=n(aBe,"STRONG",{});var IMt=s(y6e);OEr=r(IMt,"flaubert"),IMt.forEach(t),VEr=r(aBe," \u2014 "),MU=n(aBe,"A",{href:!0});var qMt=s(MU);XEr=r(qMt,"TFFlaubertForQuestionAnsweringSimple"),qMt.forEach(t),zEr=r(aBe," (FlauBERT model)"),aBe.forEach(t),QEr=i(ge),B4=n(ge,"LI",{});var nBe=s(B4);L6e=n(nBe,"STRONG",{});var NMt=s(L6e);WEr=r(NMt,"funnel"),NMt.forEach(t),HEr=r(nBe," \u2014 "),EU=n(nBe,"A",{href:!0});var jMt=s(EU);UEr=r(jMt,"TFFunnelForQuestionAnswering"),jMt.forEach(t),JEr=r(nBe," (Funnel Transformer model)"),nBe.forEach(t),YEr=i(ge),P4=n(ge,"LI",{});var sBe=s(P4);x6e=n(sBe,"STRONG",{});var DMt=s(x6e);KEr=r(DMt,"gptj"),DMt.forEach(t),ZEr=r(sBe," \u2014 "),CU=n(sBe,"A",{href:!0});var GMt=s(CU);e5r=r(GMt,"TFGPTJForQuestionAnswering"),GMt.forEach(t),o5r=r(sBe," (GPT-J model)"),sBe.forEach(t),r5r=i(ge),I4=n(ge,"LI",{});var lBe=s(I4);$6e=n(lBe,"STRONG",{});var OMt=s($6e);t5r=r(OMt,"longformer"),OMt.forEach(t),a5r=r(lBe," \u2014 "),wU=n(lBe,"A",{href:!0});var VMt=s(wU);n5r=r(VMt,"TFLongformerForQuestionAnswering"),VMt.forEach(t),s5r=r(lBe," (Longformer model)"),lBe.forEach(t),l5r=i(ge),q4=n(ge,"LI",{});var iBe=s(q4);k6e=n(iBe,"STRONG",{});var XMt=s(k6e);i5r=r(XMt,"mobilebert"),XMt.forEach(t),d5r=r(iBe," \u2014 "),AU=n(iBe,"A",{href:!0});var zMt=s(AU);c5r=r(zMt,"TFMobileBertForQuestionAnswering"),zMt.forEach(t),f5r=r(iBe," (MobileBERT model)"),iBe.forEach(t),m5r=i(ge),N4=n(ge,"LI",{});var dBe=s(N4);S6e=n(dBe,"STRONG",{});var QMt=s(S6e);g5r=r(QMt,"mpnet"),QMt.forEach(t),h5r=r(dBe," \u2014 "),yU=n(dBe,"A",{href:!0});var WMt=s(yU);p5r=r(WMt,"TFMPNetForQuestionAnswering"),WMt.forEach(t),u5r=r(dBe," (MPNet model)"),dBe.forEach(t),_5r=i(ge),j4=n(ge,"LI",{});var cBe=s(j4);R6e=n(cBe,"STRONG",{});var HMt=s(R6e);b5r=r(HMt,"rembert"),HMt.forEach(t),v5r=r(cBe," \u2014 "),LU=n(cBe,"A",{href:!0});var UMt=s(LU);F5r=r(UMt,"TFRemBertForQuestionAnswering"),UMt.forEach(t),T5r=r(cBe," (RemBERT model)"),cBe.forEach(t),M5r=i(ge),D4=n(ge,"LI",{});var fBe=s(D4);B6e=n(fBe,"STRONG",{});var JMt=s(B6e);E5r=r(JMt,"roberta"),JMt.forEach(t),C5r=r(fBe," \u2014 "),xU=n(fBe,"A",{href:!0});var YMt=s(xU);w5r=r(YMt,"TFRobertaForQuestionAnswering"),YMt.forEach(t),A5r=r(fBe," (RoBERTa model)"),fBe.forEach(t),y5r=i(ge),G4=n(ge,"LI",{});var mBe=s(G4);P6e=n(mBe,"STRONG",{});var KMt=s(P6e);L5r=r(KMt,"roformer"),KMt.forEach(t),x5r=r(mBe," \u2014 "),$U=n(mBe,"A",{href:!0});var ZMt=s($U);$5r=r(ZMt,"TFRoFormerForQuestionAnswering"),ZMt.forEach(t),k5r=r(mBe," (RoFormer model)"),mBe.forEach(t),S5r=i(ge),O4=n(ge,"LI",{});var gBe=s(O4);I6e=n(gBe,"STRONG",{});var e4t=s(I6e);R5r=r(e4t,"xlm"),e4t.forEach(t),B5r=r(gBe," \u2014 "),kU=n(gBe,"A",{href:!0});var o4t=s(kU);P5r=r(o4t,"TFXLMForQuestionAnsweringSimple"),o4t.forEach(t),I5r=r(gBe," (XLM model)"),gBe.forEach(t),q5r=i(ge),V4=n(ge,"LI",{});var hBe=s(V4);q6e=n(hBe,"STRONG",{});var r4t=s(q6e);N5r=r(r4t,"xlm-roberta"),r4t.forEach(t),j5r=r(hBe," \u2014 "),SU=n(hBe,"A",{href:!0});var t4t=s(SU);D5r=r(t4t,"TFXLMRobertaForQuestionAnswering"),t4t.forEach(t),G5r=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),O5r=i(ge),X4=n(ge,"LI",{});var pBe=s(X4);N6e=n(pBe,"STRONG",{});var a4t=s(N6e);V5r=r(a4t,"xlnet"),a4t.forEach(t),X5r=r(pBe," \u2014 "),RU=n(pBe,"A",{href:!0});var n4t=s(RU);z5r=r(n4t,"TFXLNetForQuestionAnsweringSimple"),n4t.forEach(t),Q5r=r(pBe," (XLNet model)"),pBe.forEach(t),ge.forEach(t),W5r=i(Bl),T(z4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Wqe=i(f),Tc=n(f,"H2",{class:!0});var eDe=s(Tc);Q4=n(eDe,"A",{id:!0,class:!0,href:!0});var s4t=s(Q4);j6e=n(s4t,"SPAN",{});var l4t=s(j6e);T(WL.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),H5r=i(eDe),D6e=n(eDe,"SPAN",{});var i4t=s(D6e);U5r=r(i4t,"TFAutoModelForVision2Seq"),i4t.forEach(t),eDe.forEach(t),Hqe=i(f),dr=n(f,"DIV",{class:!0});var Pl=s(dr);T(HL.$$.fragment,Pl),J5r=i(Pl),Mc=n(Pl,"P",{});var OZ=s(Mc);Y5r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BU=n(OZ,"A",{href:!0});var d4t=s(BU);K5r=r(d4t,"from_pretrained()"),d4t.forEach(t),Z5r=r(OZ," class method or the "),PU=n(OZ,"A",{href:!0});var c4t=s(PU);eCr=r(c4t,"from_config()"),c4t.forEach(t),oCr=r(OZ,` class
method.`),OZ.forEach(t),rCr=i(Pl),UL=n(Pl,"P",{});var oDe=s(UL);tCr=r(oDe,"This class cannot be instantiated directly using "),G6e=n(oDe,"CODE",{});var f4t=s(G6e);aCr=r(f4t,"__init__()"),f4t.forEach(t),nCr=r(oDe," (throws an error)."),oDe.forEach(t),sCr=i(Pl),qt=n(Pl,"DIV",{class:!0});var yw=s(qt);T(JL.$$.fragment,yw),lCr=i(yw),O6e=n(yw,"P",{});var m4t=s(O6e);iCr=r(m4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m4t.forEach(t),dCr=i(yw),Ec=n(yw,"P",{});var VZ=s(Ec);cCr=r(VZ,`Note:
Loading a model from its configuration file does `),V6e=n(VZ,"STRONG",{});var g4t=s(V6e);fCr=r(g4t,"not"),g4t.forEach(t),mCr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(VZ,"A",{href:!0});var h4t=s(IU);gCr=r(h4t,"from_pretrained()"),h4t.forEach(t),hCr=r(VZ," to load the model weights."),VZ.forEach(t),pCr=i(yw),T(W4.$$.fragment,yw),yw.forEach(t),uCr=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(YL.$$.fragment,Il),_Cr=i(Il),X6e=n(Il,"P",{});var p4t=s(X6e);bCr=r(p4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p4t.forEach(t),vCr=i(Il),mn=n(Il,"P",{});var Lw=s(mn);FCr=r(Lw,"The model class to instantiate is selected based on the "),z6e=n(Lw,"CODE",{});var u4t=s(z6e);TCr=r(u4t,"model_type"),u4t.forEach(t),MCr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(Lw,"CODE",{});var _4t=s(Q6e);ECr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),CCr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(Lw,"CODE",{});var b4t=s(W6e);wCr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),ACr=r(Lw,":"),Lw.forEach(t),yCr=i(Il),H6e=n(Il,"UL",{});var v4t=s(H6e);H4=n(v4t,"LI",{});var uBe=s(H4);U6e=n(uBe,"STRONG",{});var F4t=s(U6e);LCr=r(F4t,"vision-encoder-decoder"),F4t.forEach(t),xCr=r(uBe," \u2014 "),qU=n(uBe,"A",{href:!0});var T4t=s(qU);$Cr=r(T4t,"TFVisionEncoderDecoderModel"),T4t.forEach(t),kCr=r(uBe," (Vision Encoder decoder model)"),uBe.forEach(t),v4t.forEach(t),SCr=i(Il),T(U4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Uqe=i(f),Cc=n(f,"H2",{class:!0});var rDe=s(Cc);J4=n(rDe,"A",{id:!0,class:!0,href:!0});var M4t=s(J4);J6e=n(M4t,"SPAN",{});var E4t=s(J6e);T(KL.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),RCr=i(rDe),Y6e=n(rDe,"SPAN",{});var C4t=s(Y6e);BCr=r(C4t,"TFAutoModelForSpeechSeq2Seq"),C4t.forEach(t),rDe.forEach(t),Jqe=i(f),cr=n(f,"DIV",{class:!0});var ql=s(cr);T(ZL.$$.fragment,ql),PCr=i(ql),wc=n(ql,"P",{});var XZ=s(wc);ICr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NU=n(XZ,"A",{href:!0});var w4t=s(NU);qCr=r(w4t,"from_pretrained()"),w4t.forEach(t),NCr=r(XZ," class method or the "),jU=n(XZ,"A",{href:!0});var A4t=s(jU);jCr=r(A4t,"from_config()"),A4t.forEach(t),DCr=r(XZ,` class
method.`),XZ.forEach(t),GCr=i(ql),e8=n(ql,"P",{});var tDe=s(e8);OCr=r(tDe,"This class cannot be instantiated directly using "),K6e=n(tDe,"CODE",{});var y4t=s(K6e);VCr=r(y4t,"__init__()"),y4t.forEach(t),XCr=r(tDe," (throws an error)."),tDe.forEach(t),zCr=i(ql),Nt=n(ql,"DIV",{class:!0});var xw=s(Nt);T(o8.$$.fragment,xw),QCr=i(xw),Z6e=n(xw,"P",{});var L4t=s(Z6e);WCr=r(L4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L4t.forEach(t),HCr=i(xw),Ac=n(xw,"P",{});var zZ=s(Ac);UCr=r(zZ,`Note:
Loading a model from its configuration file does `),eTe=n(zZ,"STRONG",{});var x4t=s(eTe);JCr=r(x4t,"not"),x4t.forEach(t),YCr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(zZ,"A",{href:!0});var $4t=s(DU);KCr=r($4t,"from_pretrained()"),$4t.forEach(t),ZCr=r(zZ," to load the model weights."),zZ.forEach(t),e3r=i(xw),T(Y4.$$.fragment,xw),xw.forEach(t),o3r=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(r8.$$.fragment,Nl),r3r=i(Nl),oTe=n(Nl,"P",{});var k4t=s(oTe);t3r=r(k4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k4t.forEach(t),a3r=i(Nl),gn=n(Nl,"P",{});var $w=s(gn);n3r=r($w,"The model class to instantiate is selected based on the "),rTe=n($w,"CODE",{});var S4t=s(rTe);s3r=r(S4t,"model_type"),S4t.forEach(t),l3r=r($w,` property of the config object (either
passed as an argument or loaded from `),tTe=n($w,"CODE",{});var R4t=s(tTe);i3r=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),d3r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n($w,"CODE",{});var B4t=s(aTe);c3r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),f3r=r($w,":"),$w.forEach(t),m3r=i(Nl),nTe=n(Nl,"UL",{});var P4t=s(nTe);K4=n(P4t,"LI",{});var _Be=s(K4);sTe=n(_Be,"STRONG",{});var I4t=s(sTe);g3r=r(I4t,"speech_to_text"),I4t.forEach(t),h3r=r(_Be," \u2014 "),GU=n(_Be,"A",{href:!0});var q4t=s(GU);p3r=r(q4t,"TFSpeech2TextForConditionalGeneration"),q4t.forEach(t),u3r=r(_Be," (Speech2Text model)"),_Be.forEach(t),P4t.forEach(t),_3r=i(Nl),T(Z4.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Yqe=i(f),yc=n(f,"H2",{class:!0});var aDe=s(yc);eE=n(aDe,"A",{id:!0,class:!0,href:!0});var N4t=s(eE);lTe=n(N4t,"SPAN",{});var j4t=s(lTe);T(t8.$$.fragment,j4t),j4t.forEach(t),N4t.forEach(t),b3r=i(aDe),iTe=n(aDe,"SPAN",{});var D4t=s(iTe);v3r=r(D4t,"FlaxAutoModel"),D4t.forEach(t),aDe.forEach(t),Kqe=i(f),fr=n(f,"DIV",{class:!0});var jl=s(fr);T(a8.$$.fragment,jl),F3r=i(jl),Lc=n(jl,"P",{});var QZ=s(Lc);T3r=r(QZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OU=n(QZ,"A",{href:!0});var G4t=s(OU);M3r=r(G4t,"from_pretrained()"),G4t.forEach(t),E3r=r(QZ," class method or the "),VU=n(QZ,"A",{href:!0});var O4t=s(VU);C3r=r(O4t,"from_config()"),O4t.forEach(t),w3r=r(QZ,` class
method.`),QZ.forEach(t),A3r=i(jl),n8=n(jl,"P",{});var nDe=s(n8);y3r=r(nDe,"This class cannot be instantiated directly using "),dTe=n(nDe,"CODE",{});var V4t=s(dTe);L3r=r(V4t,"__init__()"),V4t.forEach(t),x3r=r(nDe," (throws an error)."),nDe.forEach(t),$3r=i(jl),jt=n(jl,"DIV",{class:!0});var kw=s(jt);T(s8.$$.fragment,kw),k3r=i(kw),cTe=n(kw,"P",{});var X4t=s(cTe);S3r=r(X4t,"Instantiates one of the base model classes of the library from a configuration."),X4t.forEach(t),R3r=i(kw),xc=n(kw,"P",{});var WZ=s(xc);B3r=r(WZ,`Note:
Loading a model from its configuration file does `),fTe=n(WZ,"STRONG",{});var z4t=s(fTe);P3r=r(z4t,"not"),z4t.forEach(t),I3r=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(WZ,"A",{href:!0});var Q4t=s(XU);q3r=r(Q4t,"from_pretrained()"),Q4t.forEach(t),N3r=r(WZ," to load the model weights."),WZ.forEach(t),j3r=i(kw),T(oE.$$.fragment,kw),kw.forEach(t),D3r=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(l8.$$.fragment,Dl),G3r=i(Dl),mTe=n(Dl,"P",{});var W4t=s(mTe);O3r=r(W4t,"Instantiate one of the base model classes of the library from a pretrained model."),W4t.forEach(t),V3r=i(Dl),hn=n(Dl,"P",{});var Sw=s(hn);X3r=r(Sw,"The model class to instantiate is selected based on the "),gTe=n(Sw,"CODE",{});var H4t=s(gTe);z3r=r(H4t,"model_type"),H4t.forEach(t),Q3r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),hTe=n(Sw,"CODE",{});var U4t=s(hTe);W3r=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),H3r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(Sw,"CODE",{});var J4t=s(pTe);U3r=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),J3r=r(Sw,":"),Sw.forEach(t),Y3r=i(Dl),ee=n(Dl,"UL",{});var ae=s(ee);rE=n(ae,"LI",{});var bBe=s(rE);uTe=n(bBe,"STRONG",{});var Y4t=s(uTe);K3r=r(Y4t,"albert"),Y4t.forEach(t),Z3r=r(bBe," \u2014 "),zU=n(bBe,"A",{href:!0});var K4t=s(zU);ewr=r(K4t,"FlaxAlbertModel"),K4t.forEach(t),owr=r(bBe," (ALBERT model)"),bBe.forEach(t),rwr=i(ae),tE=n(ae,"LI",{});var vBe=s(tE);_Te=n(vBe,"STRONG",{});var Z4t=s(_Te);twr=r(Z4t,"bart"),Z4t.forEach(t),awr=r(vBe," \u2014 "),QU=n(vBe,"A",{href:!0});var eEt=s(QU);nwr=r(eEt,"FlaxBartModel"),eEt.forEach(t),swr=r(vBe," (BART model)"),vBe.forEach(t),lwr=i(ae),aE=n(ae,"LI",{});var FBe=s(aE);bTe=n(FBe,"STRONG",{});var oEt=s(bTe);iwr=r(oEt,"beit"),oEt.forEach(t),dwr=r(FBe," \u2014 "),WU=n(FBe,"A",{href:!0});var rEt=s(WU);cwr=r(rEt,"FlaxBeitModel"),rEt.forEach(t),fwr=r(FBe," (BEiT model)"),FBe.forEach(t),mwr=i(ae),nE=n(ae,"LI",{});var TBe=s(nE);vTe=n(TBe,"STRONG",{});var tEt=s(vTe);gwr=r(tEt,"bert"),tEt.forEach(t),hwr=r(TBe," \u2014 "),HU=n(TBe,"A",{href:!0});var aEt=s(HU);pwr=r(aEt,"FlaxBertModel"),aEt.forEach(t),uwr=r(TBe," (BERT model)"),TBe.forEach(t),_wr=i(ae),sE=n(ae,"LI",{});var MBe=s(sE);FTe=n(MBe,"STRONG",{});var nEt=s(FTe);bwr=r(nEt,"big_bird"),nEt.forEach(t),vwr=r(MBe," \u2014 "),UU=n(MBe,"A",{href:!0});var sEt=s(UU);Fwr=r(sEt,"FlaxBigBirdModel"),sEt.forEach(t),Twr=r(MBe," (BigBird model)"),MBe.forEach(t),Mwr=i(ae),lE=n(ae,"LI",{});var EBe=s(lE);TTe=n(EBe,"STRONG",{});var lEt=s(TTe);Ewr=r(lEt,"blenderbot"),lEt.forEach(t),Cwr=r(EBe," \u2014 "),JU=n(EBe,"A",{href:!0});var iEt=s(JU);wwr=r(iEt,"FlaxBlenderbotModel"),iEt.forEach(t),Awr=r(EBe," (Blenderbot model)"),EBe.forEach(t),ywr=i(ae),iE=n(ae,"LI",{});var CBe=s(iE);MTe=n(CBe,"STRONG",{});var dEt=s(MTe);Lwr=r(dEt,"blenderbot-small"),dEt.forEach(t),xwr=r(CBe," \u2014 "),YU=n(CBe,"A",{href:!0});var cEt=s(YU);$wr=r(cEt,"FlaxBlenderbotSmallModel"),cEt.forEach(t),kwr=r(CBe," (BlenderbotSmall model)"),CBe.forEach(t),Swr=i(ae),dE=n(ae,"LI",{});var wBe=s(dE);ETe=n(wBe,"STRONG",{});var fEt=s(ETe);Rwr=r(fEt,"clip"),fEt.forEach(t),Bwr=r(wBe," \u2014 "),KU=n(wBe,"A",{href:!0});var mEt=s(KU);Pwr=r(mEt,"FlaxCLIPModel"),mEt.forEach(t),Iwr=r(wBe," (CLIP model)"),wBe.forEach(t),qwr=i(ae),cE=n(ae,"LI",{});var ABe=s(cE);CTe=n(ABe,"STRONG",{});var gEt=s(CTe);Nwr=r(gEt,"distilbert"),gEt.forEach(t),jwr=r(ABe," \u2014 "),ZU=n(ABe,"A",{href:!0});var hEt=s(ZU);Dwr=r(hEt,"FlaxDistilBertModel"),hEt.forEach(t),Gwr=r(ABe," (DistilBERT model)"),ABe.forEach(t),Owr=i(ae),fE=n(ae,"LI",{});var yBe=s(fE);wTe=n(yBe,"STRONG",{});var pEt=s(wTe);Vwr=r(pEt,"electra"),pEt.forEach(t),Xwr=r(yBe," \u2014 "),eJ=n(yBe,"A",{href:!0});var uEt=s(eJ);zwr=r(uEt,"FlaxElectraModel"),uEt.forEach(t),Qwr=r(yBe," (ELECTRA model)"),yBe.forEach(t),Wwr=i(ae),mE=n(ae,"LI",{});var LBe=s(mE);ATe=n(LBe,"STRONG",{});var _Et=s(ATe);Hwr=r(_Et,"gpt2"),_Et.forEach(t),Uwr=r(LBe," \u2014 "),oJ=n(LBe,"A",{href:!0});var bEt=s(oJ);Jwr=r(bEt,"FlaxGPT2Model"),bEt.forEach(t),Ywr=r(LBe," (OpenAI GPT-2 model)"),LBe.forEach(t),Kwr=i(ae),gE=n(ae,"LI",{});var xBe=s(gE);yTe=n(xBe,"STRONG",{});var vEt=s(yTe);Zwr=r(vEt,"gpt_neo"),vEt.forEach(t),eAr=r(xBe," \u2014 "),rJ=n(xBe,"A",{href:!0});var FEt=s(rJ);oAr=r(FEt,"FlaxGPTNeoModel"),FEt.forEach(t),rAr=r(xBe," (GPT Neo model)"),xBe.forEach(t),tAr=i(ae),hE=n(ae,"LI",{});var $Be=s(hE);LTe=n($Be,"STRONG",{});var TEt=s(LTe);aAr=r(TEt,"gptj"),TEt.forEach(t),nAr=r($Be," \u2014 "),tJ=n($Be,"A",{href:!0});var MEt=s(tJ);sAr=r(MEt,"FlaxGPTJModel"),MEt.forEach(t),lAr=r($Be," (GPT-J model)"),$Be.forEach(t),iAr=i(ae),pE=n(ae,"LI",{});var kBe=s(pE);xTe=n(kBe,"STRONG",{});var EEt=s(xTe);dAr=r(EEt,"longt5"),EEt.forEach(t),cAr=r(kBe," \u2014 "),aJ=n(kBe,"A",{href:!0});var CEt=s(aJ);fAr=r(CEt,"FlaxLongT5Model"),CEt.forEach(t),mAr=r(kBe," (LongT5 model)"),kBe.forEach(t),gAr=i(ae),uE=n(ae,"LI",{});var SBe=s(uE);$Te=n(SBe,"STRONG",{});var wEt=s($Te);hAr=r(wEt,"marian"),wEt.forEach(t),pAr=r(SBe," \u2014 "),nJ=n(SBe,"A",{href:!0});var AEt=s(nJ);uAr=r(AEt,"FlaxMarianModel"),AEt.forEach(t),_Ar=r(SBe," (Marian model)"),SBe.forEach(t),bAr=i(ae),_E=n(ae,"LI",{});var RBe=s(_E);kTe=n(RBe,"STRONG",{});var yEt=s(kTe);vAr=r(yEt,"mbart"),yEt.forEach(t),FAr=r(RBe," \u2014 "),sJ=n(RBe,"A",{href:!0});var LEt=s(sJ);TAr=r(LEt,"FlaxMBartModel"),LEt.forEach(t),MAr=r(RBe," (mBART model)"),RBe.forEach(t),EAr=i(ae),bE=n(ae,"LI",{});var BBe=s(bE);STe=n(BBe,"STRONG",{});var xEt=s(STe);CAr=r(xEt,"mt5"),xEt.forEach(t),wAr=r(BBe," \u2014 "),lJ=n(BBe,"A",{href:!0});var $Et=s(lJ);AAr=r($Et,"FlaxMT5Model"),$Et.forEach(t),yAr=r(BBe," (mT5 model)"),BBe.forEach(t),LAr=i(ae),vE=n(ae,"LI",{});var PBe=s(vE);RTe=n(PBe,"STRONG",{});var kEt=s(RTe);xAr=r(kEt,"pegasus"),kEt.forEach(t),$Ar=r(PBe," \u2014 "),iJ=n(PBe,"A",{href:!0});var SEt=s(iJ);kAr=r(SEt,"FlaxPegasusModel"),SEt.forEach(t),SAr=r(PBe," (Pegasus model)"),PBe.forEach(t),RAr=i(ae),FE=n(ae,"LI",{});var IBe=s(FE);BTe=n(IBe,"STRONG",{});var REt=s(BTe);BAr=r(REt,"roberta"),REt.forEach(t),PAr=r(IBe," \u2014 "),dJ=n(IBe,"A",{href:!0});var BEt=s(dJ);IAr=r(BEt,"FlaxRobertaModel"),BEt.forEach(t),qAr=r(IBe," (RoBERTa model)"),IBe.forEach(t),NAr=i(ae),TE=n(ae,"LI",{});var qBe=s(TE);PTe=n(qBe,"STRONG",{});var PEt=s(PTe);jAr=r(PEt,"roformer"),PEt.forEach(t),DAr=r(qBe," \u2014 "),cJ=n(qBe,"A",{href:!0});var IEt=s(cJ);GAr=r(IEt,"FlaxRoFormerModel"),IEt.forEach(t),OAr=r(qBe," (RoFormer model)"),qBe.forEach(t),VAr=i(ae),ME=n(ae,"LI",{});var NBe=s(ME);ITe=n(NBe,"STRONG",{});var qEt=s(ITe);XAr=r(qEt,"t5"),qEt.forEach(t),zAr=r(NBe," \u2014 "),fJ=n(NBe,"A",{href:!0});var NEt=s(fJ);QAr=r(NEt,"FlaxT5Model"),NEt.forEach(t),WAr=r(NBe," (T5 model)"),NBe.forEach(t),HAr=i(ae),EE=n(ae,"LI",{});var jBe=s(EE);qTe=n(jBe,"STRONG",{});var jEt=s(qTe);UAr=r(jEt,"vision-text-dual-encoder"),jEt.forEach(t),JAr=r(jBe," \u2014 "),mJ=n(jBe,"A",{href:!0});var DEt=s(mJ);YAr=r(DEt,"FlaxVisionTextDualEncoderModel"),DEt.forEach(t),KAr=r(jBe," (VisionTextDualEncoder model)"),jBe.forEach(t),ZAr=i(ae),CE=n(ae,"LI",{});var DBe=s(CE);NTe=n(DBe,"STRONG",{});var GEt=s(NTe);e0r=r(GEt,"vit"),GEt.forEach(t),o0r=r(DBe," \u2014 "),gJ=n(DBe,"A",{href:!0});var OEt=s(gJ);r0r=r(OEt,"FlaxViTModel"),OEt.forEach(t),t0r=r(DBe," (ViT model)"),DBe.forEach(t),a0r=i(ae),wE=n(ae,"LI",{});var GBe=s(wE);jTe=n(GBe,"STRONG",{});var VEt=s(jTe);n0r=r(VEt,"wav2vec2"),VEt.forEach(t),s0r=r(GBe," \u2014 "),hJ=n(GBe,"A",{href:!0});var XEt=s(hJ);l0r=r(XEt,"FlaxWav2Vec2Model"),XEt.forEach(t),i0r=r(GBe," (Wav2Vec2 model)"),GBe.forEach(t),d0r=i(ae),AE=n(ae,"LI",{});var OBe=s(AE);DTe=n(OBe,"STRONG",{});var zEt=s(DTe);c0r=r(zEt,"xglm"),zEt.forEach(t),f0r=r(OBe," \u2014 "),pJ=n(OBe,"A",{href:!0});var QEt=s(pJ);m0r=r(QEt,"FlaxXGLMModel"),QEt.forEach(t),g0r=r(OBe," (XGLM model)"),OBe.forEach(t),h0r=i(ae),yE=n(ae,"LI",{});var VBe=s(yE);GTe=n(VBe,"STRONG",{});var WEt=s(GTe);p0r=r(WEt,"xlm-roberta"),WEt.forEach(t),u0r=r(VBe," \u2014 "),uJ=n(VBe,"A",{href:!0});var HEt=s(uJ);_0r=r(HEt,"FlaxXLMRobertaModel"),HEt.forEach(t),b0r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),ae.forEach(t),v0r=i(Dl),T(LE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Zqe=i(f),$c=n(f,"H2",{class:!0});var sDe=s($c);xE=n(sDe,"A",{id:!0,class:!0,href:!0});var UEt=s(xE);OTe=n(UEt,"SPAN",{});var JEt=s(OTe);T(i8.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),F0r=i(sDe),VTe=n(sDe,"SPAN",{});var YEt=s(VTe);T0r=r(YEt,"FlaxAutoModelForCausalLM"),YEt.forEach(t),sDe.forEach(t),eNe=i(f),mr=n(f,"DIV",{class:!0});var Gl=s(mr);T(d8.$$.fragment,Gl),M0r=i(Gl),kc=n(Gl,"P",{});var HZ=s(kc);E0r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_J=n(HZ,"A",{href:!0});var KEt=s(_J);C0r=r(KEt,"from_pretrained()"),KEt.forEach(t),w0r=r(HZ," class method or the "),bJ=n(HZ,"A",{href:!0});var ZEt=s(bJ);A0r=r(ZEt,"from_config()"),ZEt.forEach(t),y0r=r(HZ,` class
method.`),HZ.forEach(t),L0r=i(Gl),c8=n(Gl,"P",{});var lDe=s(c8);x0r=r(lDe,"This class cannot be instantiated directly using "),XTe=n(lDe,"CODE",{});var e5t=s(XTe);$0r=r(e5t,"__init__()"),e5t.forEach(t),k0r=r(lDe," (throws an error)."),lDe.forEach(t),S0r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Rw=s(Dt);T(f8.$$.fragment,Rw),R0r=i(Rw),zTe=n(Rw,"P",{});var o5t=s(zTe);B0r=r(o5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o5t.forEach(t),P0r=i(Rw),Sc=n(Rw,"P",{});var UZ=s(Sc);I0r=r(UZ,`Note:
Loading a model from its configuration file does `),QTe=n(UZ,"STRONG",{});var r5t=s(QTe);q0r=r(r5t,"not"),r5t.forEach(t),N0r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(UZ,"A",{href:!0});var t5t=s(vJ);j0r=r(t5t,"from_pretrained()"),t5t.forEach(t),D0r=r(UZ," to load the model weights."),UZ.forEach(t),G0r=i(Rw),T($E.$$.fragment,Rw),Rw.forEach(t),O0r=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(m8.$$.fragment,Ol),V0r=i(Ol),WTe=n(Ol,"P",{});var a5t=s(WTe);X0r=r(a5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a5t.forEach(t),z0r=i(Ol),pn=n(Ol,"P",{});var Bw=s(pn);Q0r=r(Bw,"The model class to instantiate is selected based on the "),HTe=n(Bw,"CODE",{});var n5t=s(HTe);W0r=r(n5t,"model_type"),n5t.forEach(t),H0r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),UTe=n(Bw,"CODE",{});var s5t=s(UTe);U0r=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),J0r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(Bw,"CODE",{});var l5t=s(JTe);Y0r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),K0r=r(Bw,":"),Bw.forEach(t),Z0r=i(Ol),Se=n(Ol,"UL",{});var Ve=s(Se);kE=n(Ve,"LI",{});var XBe=s(kE);YTe=n(XBe,"STRONG",{});var i5t=s(YTe);eyr=r(i5t,"bart"),i5t.forEach(t),oyr=r(XBe," \u2014 "),FJ=n(XBe,"A",{href:!0});var d5t=s(FJ);ryr=r(d5t,"FlaxBartForCausalLM"),d5t.forEach(t),tyr=r(XBe," (BART model)"),XBe.forEach(t),ayr=i(Ve),SE=n(Ve,"LI",{});var zBe=s(SE);KTe=n(zBe,"STRONG",{});var c5t=s(KTe);nyr=r(c5t,"bert"),c5t.forEach(t),syr=r(zBe," \u2014 "),TJ=n(zBe,"A",{href:!0});var f5t=s(TJ);lyr=r(f5t,"FlaxBertForCausalLM"),f5t.forEach(t),iyr=r(zBe," (BERT model)"),zBe.forEach(t),dyr=i(Ve),RE=n(Ve,"LI",{});var QBe=s(RE);ZTe=n(QBe,"STRONG",{});var m5t=s(ZTe);cyr=r(m5t,"big_bird"),m5t.forEach(t),fyr=r(QBe," \u2014 "),MJ=n(QBe,"A",{href:!0});var g5t=s(MJ);myr=r(g5t,"FlaxBigBirdForCausalLM"),g5t.forEach(t),gyr=r(QBe," (BigBird model)"),QBe.forEach(t),hyr=i(Ve),BE=n(Ve,"LI",{});var WBe=s(BE);e9e=n(WBe,"STRONG",{});var h5t=s(e9e);pyr=r(h5t,"electra"),h5t.forEach(t),uyr=r(WBe," \u2014 "),EJ=n(WBe,"A",{href:!0});var p5t=s(EJ);_yr=r(p5t,"FlaxElectraForCausalLM"),p5t.forEach(t),byr=r(WBe," (ELECTRA model)"),WBe.forEach(t),vyr=i(Ve),PE=n(Ve,"LI",{});var HBe=s(PE);o9e=n(HBe,"STRONG",{});var u5t=s(o9e);Fyr=r(u5t,"gpt2"),u5t.forEach(t),Tyr=r(HBe," \u2014 "),CJ=n(HBe,"A",{href:!0});var _5t=s(CJ);Myr=r(_5t,"FlaxGPT2LMHeadModel"),_5t.forEach(t),Eyr=r(HBe," (OpenAI GPT-2 model)"),HBe.forEach(t),Cyr=i(Ve),IE=n(Ve,"LI",{});var UBe=s(IE);r9e=n(UBe,"STRONG",{});var b5t=s(r9e);wyr=r(b5t,"gpt_neo"),b5t.forEach(t),Ayr=r(UBe," \u2014 "),wJ=n(UBe,"A",{href:!0});var v5t=s(wJ);yyr=r(v5t,"FlaxGPTNeoForCausalLM"),v5t.forEach(t),Lyr=r(UBe," (GPT Neo model)"),UBe.forEach(t),xyr=i(Ve),qE=n(Ve,"LI",{});var JBe=s(qE);t9e=n(JBe,"STRONG",{});var F5t=s(t9e);$yr=r(F5t,"gptj"),F5t.forEach(t),kyr=r(JBe," \u2014 "),AJ=n(JBe,"A",{href:!0});var T5t=s(AJ);Syr=r(T5t,"FlaxGPTJForCausalLM"),T5t.forEach(t),Ryr=r(JBe," (GPT-J model)"),JBe.forEach(t),Byr=i(Ve),NE=n(Ve,"LI",{});var YBe=s(NE);a9e=n(YBe,"STRONG",{});var M5t=s(a9e);Pyr=r(M5t,"roberta"),M5t.forEach(t),Iyr=r(YBe," \u2014 "),yJ=n(YBe,"A",{href:!0});var E5t=s(yJ);qyr=r(E5t,"FlaxRobertaForCausalLM"),E5t.forEach(t),Nyr=r(YBe," (RoBERTa model)"),YBe.forEach(t),jyr=i(Ve),jE=n(Ve,"LI",{});var KBe=s(jE);n9e=n(KBe,"STRONG",{});var C5t=s(n9e);Dyr=r(C5t,"xglm"),C5t.forEach(t),Gyr=r(KBe," \u2014 "),LJ=n(KBe,"A",{href:!0});var w5t=s(LJ);Oyr=r(w5t,"FlaxXGLMForCausalLM"),w5t.forEach(t),Vyr=r(KBe," (XGLM model)"),KBe.forEach(t),Ve.forEach(t),Xyr=i(Ol),T(DE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),oNe=i(f),Rc=n(f,"H2",{class:!0});var iDe=s(Rc);GE=n(iDe,"A",{id:!0,class:!0,href:!0});var A5t=s(GE);s9e=n(A5t,"SPAN",{});var y5t=s(s9e);T(g8.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),zyr=i(iDe),l9e=n(iDe,"SPAN",{});var L5t=s(l9e);Qyr=r(L5t,"FlaxAutoModelForPreTraining"),L5t.forEach(t),iDe.forEach(t),rNe=i(f),gr=n(f,"DIV",{class:!0});var Vl=s(gr);T(h8.$$.fragment,Vl),Wyr=i(Vl),Bc=n(Vl,"P",{});var JZ=s(Bc);Hyr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xJ=n(JZ,"A",{href:!0});var x5t=s(xJ);Uyr=r(x5t,"from_pretrained()"),x5t.forEach(t),Jyr=r(JZ," class method or the "),$J=n(JZ,"A",{href:!0});var $5t=s($J);Yyr=r($5t,"from_config()"),$5t.forEach(t),Kyr=r(JZ,` class
method.`),JZ.forEach(t),Zyr=i(Vl),p8=n(Vl,"P",{});var dDe=s(p8);eLr=r(dDe,"This class cannot be instantiated directly using "),i9e=n(dDe,"CODE",{});var k5t=s(i9e);oLr=r(k5t,"__init__()"),k5t.forEach(t),rLr=r(dDe," (throws an error)."),dDe.forEach(t),tLr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var Pw=s(Gt);T(u8.$$.fragment,Pw),aLr=i(Pw),d9e=n(Pw,"P",{});var S5t=s(d9e);nLr=r(S5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S5t.forEach(t),sLr=i(Pw),Pc=n(Pw,"P",{});var YZ=s(Pc);lLr=r(YZ,`Note:
Loading a model from its configuration file does `),c9e=n(YZ,"STRONG",{});var R5t=s(c9e);iLr=r(R5t,"not"),R5t.forEach(t),dLr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(YZ,"A",{href:!0});var B5t=s(kJ);cLr=r(B5t,"from_pretrained()"),B5t.forEach(t),fLr=r(YZ," to load the model weights."),YZ.forEach(t),mLr=i(Pw),T(OE.$$.fragment,Pw),Pw.forEach(t),gLr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(_8.$$.fragment,Xl),hLr=i(Xl),f9e=n(Xl,"P",{});var P5t=s(f9e);pLr=r(P5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P5t.forEach(t),uLr=i(Xl),un=n(Xl,"P",{});var Iw=s(un);_Lr=r(Iw,"The model class to instantiate is selected based on the "),m9e=n(Iw,"CODE",{});var I5t=s(m9e);bLr=r(I5t,"model_type"),I5t.forEach(t),vLr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),g9e=n(Iw,"CODE",{});var q5t=s(g9e);FLr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),TLr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=n(Iw,"CODE",{});var N5t=s(h9e);MLr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),ELr=r(Iw,":"),Iw.forEach(t),CLr=i(Xl),Te=n(Xl,"UL",{});var Ce=s(Te);VE=n(Ce,"LI",{});var ZBe=s(VE);p9e=n(ZBe,"STRONG",{});var j5t=s(p9e);wLr=r(j5t,"albert"),j5t.forEach(t),ALr=r(ZBe," \u2014 "),SJ=n(ZBe,"A",{href:!0});var D5t=s(SJ);yLr=r(D5t,"FlaxAlbertForPreTraining"),D5t.forEach(t),LLr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),xLr=i(Ce),XE=n(Ce,"LI",{});var ePe=s(XE);u9e=n(ePe,"STRONG",{});var G5t=s(u9e);$Lr=r(G5t,"bart"),G5t.forEach(t),kLr=r(ePe," \u2014 "),RJ=n(ePe,"A",{href:!0});var O5t=s(RJ);SLr=r(O5t,"FlaxBartForConditionalGeneration"),O5t.forEach(t),RLr=r(ePe," (BART model)"),ePe.forEach(t),BLr=i(Ce),zE=n(Ce,"LI",{});var oPe=s(zE);_9e=n(oPe,"STRONG",{});var V5t=s(_9e);PLr=r(V5t,"bert"),V5t.forEach(t),ILr=r(oPe," \u2014 "),BJ=n(oPe,"A",{href:!0});var X5t=s(BJ);qLr=r(X5t,"FlaxBertForPreTraining"),X5t.forEach(t),NLr=r(oPe," (BERT model)"),oPe.forEach(t),jLr=i(Ce),QE=n(Ce,"LI",{});var rPe=s(QE);b9e=n(rPe,"STRONG",{});var z5t=s(b9e);DLr=r(z5t,"big_bird"),z5t.forEach(t),GLr=r(rPe," \u2014 "),PJ=n(rPe,"A",{href:!0});var Q5t=s(PJ);OLr=r(Q5t,"FlaxBigBirdForPreTraining"),Q5t.forEach(t),VLr=r(rPe," (BigBird model)"),rPe.forEach(t),XLr=i(Ce),WE=n(Ce,"LI",{});var tPe=s(WE);v9e=n(tPe,"STRONG",{});var W5t=s(v9e);zLr=r(W5t,"electra"),W5t.forEach(t),QLr=r(tPe," \u2014 "),IJ=n(tPe,"A",{href:!0});var H5t=s(IJ);WLr=r(H5t,"FlaxElectraForPreTraining"),H5t.forEach(t),HLr=r(tPe," (ELECTRA model)"),tPe.forEach(t),ULr=i(Ce),HE=n(Ce,"LI",{});var aPe=s(HE);F9e=n(aPe,"STRONG",{});var U5t=s(F9e);JLr=r(U5t,"longt5"),U5t.forEach(t),YLr=r(aPe," \u2014 "),qJ=n(aPe,"A",{href:!0});var J5t=s(qJ);KLr=r(J5t,"FlaxLongT5ForConditionalGeneration"),J5t.forEach(t),ZLr=r(aPe," (LongT5 model)"),aPe.forEach(t),e8r=i(Ce),UE=n(Ce,"LI",{});var nPe=s(UE);T9e=n(nPe,"STRONG",{});var Y5t=s(T9e);o8r=r(Y5t,"mbart"),Y5t.forEach(t),r8r=r(nPe," \u2014 "),NJ=n(nPe,"A",{href:!0});var K5t=s(NJ);t8r=r(K5t,"FlaxMBartForConditionalGeneration"),K5t.forEach(t),a8r=r(nPe," (mBART model)"),nPe.forEach(t),n8r=i(Ce),JE=n(Ce,"LI",{});var sPe=s(JE);M9e=n(sPe,"STRONG",{});var Z5t=s(M9e);s8r=r(Z5t,"mt5"),Z5t.forEach(t),l8r=r(sPe," \u2014 "),jJ=n(sPe,"A",{href:!0});var eCt=s(jJ);i8r=r(eCt,"FlaxMT5ForConditionalGeneration"),eCt.forEach(t),d8r=r(sPe," (mT5 model)"),sPe.forEach(t),c8r=i(Ce),YE=n(Ce,"LI",{});var lPe=s(YE);E9e=n(lPe,"STRONG",{});var oCt=s(E9e);f8r=r(oCt,"roberta"),oCt.forEach(t),m8r=r(lPe," \u2014 "),DJ=n(lPe,"A",{href:!0});var rCt=s(DJ);g8r=r(rCt,"FlaxRobertaForMaskedLM"),rCt.forEach(t),h8r=r(lPe," (RoBERTa model)"),lPe.forEach(t),p8r=i(Ce),KE=n(Ce,"LI",{});var iPe=s(KE);C9e=n(iPe,"STRONG",{});var tCt=s(C9e);u8r=r(tCt,"roformer"),tCt.forEach(t),_8r=r(iPe," \u2014 "),GJ=n(iPe,"A",{href:!0});var aCt=s(GJ);b8r=r(aCt,"FlaxRoFormerForMaskedLM"),aCt.forEach(t),v8r=r(iPe," (RoFormer model)"),iPe.forEach(t),F8r=i(Ce),ZE=n(Ce,"LI",{});var dPe=s(ZE);w9e=n(dPe,"STRONG",{});var nCt=s(w9e);T8r=r(nCt,"t5"),nCt.forEach(t),M8r=r(dPe," \u2014 "),OJ=n(dPe,"A",{href:!0});var sCt=s(OJ);E8r=r(sCt,"FlaxT5ForConditionalGeneration"),sCt.forEach(t),C8r=r(dPe," (T5 model)"),dPe.forEach(t),w8r=i(Ce),e5=n(Ce,"LI",{});var cPe=s(e5);A9e=n(cPe,"STRONG",{});var lCt=s(A9e);A8r=r(lCt,"wav2vec2"),lCt.forEach(t),y8r=r(cPe," \u2014 "),VJ=n(cPe,"A",{href:!0});var iCt=s(VJ);L8r=r(iCt,"FlaxWav2Vec2ForPreTraining"),iCt.forEach(t),x8r=r(cPe," (Wav2Vec2 model)"),cPe.forEach(t),$8r=i(Ce),o5=n(Ce,"LI",{});var fPe=s(o5);y9e=n(fPe,"STRONG",{});var dCt=s(y9e);k8r=r(dCt,"xlm-roberta"),dCt.forEach(t),S8r=r(fPe," \u2014 "),XJ=n(fPe,"A",{href:!0});var cCt=s(XJ);R8r=r(cCt,"FlaxXLMRobertaForMaskedLM"),cCt.forEach(t),B8r=r(fPe," (XLM-RoBERTa model)"),fPe.forEach(t),Ce.forEach(t),P8r=i(Xl),T(r5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),tNe=i(f),Ic=n(f,"H2",{class:!0});var cDe=s(Ic);t5=n(cDe,"A",{id:!0,class:!0,href:!0});var fCt=s(t5);L9e=n(fCt,"SPAN",{});var mCt=s(L9e);T(b8.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),I8r=i(cDe),x9e=n(cDe,"SPAN",{});var gCt=s(x9e);q8r=r(gCt,"FlaxAutoModelForMaskedLM"),gCt.forEach(t),cDe.forEach(t),aNe=i(f),hr=n(f,"DIV",{class:!0});var zl=s(hr);T(v8.$$.fragment,zl),N8r=i(zl),qc=n(zl,"P",{});var KZ=s(qc);j8r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zJ=n(KZ,"A",{href:!0});var hCt=s(zJ);D8r=r(hCt,"from_pretrained()"),hCt.forEach(t),G8r=r(KZ," class method or the "),QJ=n(KZ,"A",{href:!0});var pCt=s(QJ);O8r=r(pCt,"from_config()"),pCt.forEach(t),V8r=r(KZ,` class
method.`),KZ.forEach(t),X8r=i(zl),F8=n(zl,"P",{});var fDe=s(F8);z8r=r(fDe,"This class cannot be instantiated directly using "),$9e=n(fDe,"CODE",{});var uCt=s($9e);Q8r=r(uCt,"__init__()"),uCt.forEach(t),W8r=r(fDe," (throws an error)."),fDe.forEach(t),H8r=i(zl),Ot=n(zl,"DIV",{class:!0});var qw=s(Ot);T(T8.$$.fragment,qw),U8r=i(qw),k9e=n(qw,"P",{});var _Ct=s(k9e);J8r=r(_Ct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Ct.forEach(t),Y8r=i(qw),Nc=n(qw,"P",{});var ZZ=s(Nc);K8r=r(ZZ,`Note:
Loading a model from its configuration file does `),S9e=n(ZZ,"STRONG",{});var bCt=s(S9e);Z8r=r(bCt,"not"),bCt.forEach(t),exr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(ZZ,"A",{href:!0});var vCt=s(WJ);oxr=r(vCt,"from_pretrained()"),vCt.forEach(t),rxr=r(ZZ," to load the model weights."),ZZ.forEach(t),txr=i(qw),T(a5.$$.fragment,qw),qw.forEach(t),axr=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(M8.$$.fragment,Ql),nxr=i(Ql),R9e=n(Ql,"P",{});var FCt=s(R9e);sxr=r(FCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FCt.forEach(t),lxr=i(Ql),_n=n(Ql,"P",{});var Nw=s(_n);ixr=r(Nw,"The model class to instantiate is selected based on the "),B9e=n(Nw,"CODE",{});var TCt=s(B9e);dxr=r(TCt,"model_type"),TCt.forEach(t),cxr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),P9e=n(Nw,"CODE",{});var MCt=s(P9e);fxr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),mxr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=n(Nw,"CODE",{});var ECt=s(I9e);gxr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),hxr=r(Nw,":"),Nw.forEach(t),pxr=i(Ql),Le=n(Ql,"UL",{});var Be=s(Le);n5=n(Be,"LI",{});var mPe=s(n5);q9e=n(mPe,"STRONG",{});var CCt=s(q9e);uxr=r(CCt,"albert"),CCt.forEach(t),_xr=r(mPe," \u2014 "),HJ=n(mPe,"A",{href:!0});var wCt=s(HJ);bxr=r(wCt,"FlaxAlbertForMaskedLM"),wCt.forEach(t),vxr=r(mPe," (ALBERT model)"),mPe.forEach(t),Fxr=i(Be),s5=n(Be,"LI",{});var gPe=s(s5);N9e=n(gPe,"STRONG",{});var ACt=s(N9e);Txr=r(ACt,"bart"),ACt.forEach(t),Mxr=r(gPe," \u2014 "),UJ=n(gPe,"A",{href:!0});var yCt=s(UJ);Exr=r(yCt,"FlaxBartForConditionalGeneration"),yCt.forEach(t),Cxr=r(gPe," (BART model)"),gPe.forEach(t),wxr=i(Be),l5=n(Be,"LI",{});var hPe=s(l5);j9e=n(hPe,"STRONG",{});var LCt=s(j9e);Axr=r(LCt,"bert"),LCt.forEach(t),yxr=r(hPe," \u2014 "),JJ=n(hPe,"A",{href:!0});var xCt=s(JJ);Lxr=r(xCt,"FlaxBertForMaskedLM"),xCt.forEach(t),xxr=r(hPe," (BERT model)"),hPe.forEach(t),$xr=i(Be),i5=n(Be,"LI",{});var pPe=s(i5);D9e=n(pPe,"STRONG",{});var $Ct=s(D9e);kxr=r($Ct,"big_bird"),$Ct.forEach(t),Sxr=r(pPe," \u2014 "),YJ=n(pPe,"A",{href:!0});var kCt=s(YJ);Rxr=r(kCt,"FlaxBigBirdForMaskedLM"),kCt.forEach(t),Bxr=r(pPe," (BigBird model)"),pPe.forEach(t),Pxr=i(Be),d5=n(Be,"LI",{});var uPe=s(d5);G9e=n(uPe,"STRONG",{});var SCt=s(G9e);Ixr=r(SCt,"distilbert"),SCt.forEach(t),qxr=r(uPe," \u2014 "),KJ=n(uPe,"A",{href:!0});var RCt=s(KJ);Nxr=r(RCt,"FlaxDistilBertForMaskedLM"),RCt.forEach(t),jxr=r(uPe," (DistilBERT model)"),uPe.forEach(t),Dxr=i(Be),c5=n(Be,"LI",{});var _Pe=s(c5);O9e=n(_Pe,"STRONG",{});var BCt=s(O9e);Gxr=r(BCt,"electra"),BCt.forEach(t),Oxr=r(_Pe," \u2014 "),ZJ=n(_Pe,"A",{href:!0});var PCt=s(ZJ);Vxr=r(PCt,"FlaxElectraForMaskedLM"),PCt.forEach(t),Xxr=r(_Pe," (ELECTRA model)"),_Pe.forEach(t),zxr=i(Be),f5=n(Be,"LI",{});var bPe=s(f5);V9e=n(bPe,"STRONG",{});var ICt=s(V9e);Qxr=r(ICt,"mbart"),ICt.forEach(t),Wxr=r(bPe," \u2014 "),eY=n(bPe,"A",{href:!0});var qCt=s(eY);Hxr=r(qCt,"FlaxMBartForConditionalGeneration"),qCt.forEach(t),Uxr=r(bPe," (mBART model)"),bPe.forEach(t),Jxr=i(Be),m5=n(Be,"LI",{});var vPe=s(m5);X9e=n(vPe,"STRONG",{});var NCt=s(X9e);Yxr=r(NCt,"roberta"),NCt.forEach(t),Kxr=r(vPe," \u2014 "),oY=n(vPe,"A",{href:!0});var jCt=s(oY);Zxr=r(jCt,"FlaxRobertaForMaskedLM"),jCt.forEach(t),e$r=r(vPe," (RoBERTa model)"),vPe.forEach(t),o$r=i(Be),g5=n(Be,"LI",{});var FPe=s(g5);z9e=n(FPe,"STRONG",{});var DCt=s(z9e);r$r=r(DCt,"roformer"),DCt.forEach(t),t$r=r(FPe," \u2014 "),rY=n(FPe,"A",{href:!0});var GCt=s(rY);a$r=r(GCt,"FlaxRoFormerForMaskedLM"),GCt.forEach(t),n$r=r(FPe," (RoFormer model)"),FPe.forEach(t),s$r=i(Be),h5=n(Be,"LI",{});var TPe=s(h5);Q9e=n(TPe,"STRONG",{});var OCt=s(Q9e);l$r=r(OCt,"xlm-roberta"),OCt.forEach(t),i$r=r(TPe," \u2014 "),tY=n(TPe,"A",{href:!0});var VCt=s(tY);d$r=r(VCt,"FlaxXLMRobertaForMaskedLM"),VCt.forEach(t),c$r=r(TPe," (XLM-RoBERTa model)"),TPe.forEach(t),Be.forEach(t),f$r=i(Ql),T(p5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),nNe=i(f),jc=n(f,"H2",{class:!0});var mDe=s(jc);u5=n(mDe,"A",{id:!0,class:!0,href:!0});var XCt=s(u5);W9e=n(XCt,"SPAN",{});var zCt=s(W9e);T(E8.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),m$r=i(mDe),H9e=n(mDe,"SPAN",{});var QCt=s(H9e);g$r=r(QCt,"FlaxAutoModelForSeq2SeqLM"),QCt.forEach(t),mDe.forEach(t),sNe=i(f),pr=n(f,"DIV",{class:!0});var Wl=s(pr);T(C8.$$.fragment,Wl),h$r=i(Wl),Dc=n(Wl,"P",{});var eee=s(Dc);p$r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aY=n(eee,"A",{href:!0});var WCt=s(aY);u$r=r(WCt,"from_pretrained()"),WCt.forEach(t),_$r=r(eee," class method or the "),nY=n(eee,"A",{href:!0});var HCt=s(nY);b$r=r(HCt,"from_config()"),HCt.forEach(t),v$r=r(eee,` class
method.`),eee.forEach(t),F$r=i(Wl),w8=n(Wl,"P",{});var gDe=s(w8);T$r=r(gDe,"This class cannot be instantiated directly using "),U9e=n(gDe,"CODE",{});var UCt=s(U9e);M$r=r(UCt,"__init__()"),UCt.forEach(t),E$r=r(gDe," (throws an error)."),gDe.forEach(t),C$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var jw=s(Vt);T(A8.$$.fragment,jw),w$r=i(jw),J9e=n(jw,"P",{});var JCt=s(J9e);A$r=r(JCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JCt.forEach(t),y$r=i(jw),Gc=n(jw,"P",{});var oee=s(Gc);L$r=r(oee,`Note:
Loading a model from its configuration file does `),Y9e=n(oee,"STRONG",{});var YCt=s(Y9e);x$r=r(YCt,"not"),YCt.forEach(t),$$r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(oee,"A",{href:!0});var KCt=s(sY);k$r=r(KCt,"from_pretrained()"),KCt.forEach(t),S$r=r(oee," to load the model weights."),oee.forEach(t),R$r=i(jw),T(_5.$$.fragment,jw),jw.forEach(t),B$r=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(y8.$$.fragment,Hl),P$r=i(Hl),K9e=n(Hl,"P",{});var ZCt=s(K9e);I$r=r(ZCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZCt.forEach(t),q$r=i(Hl),bn=n(Hl,"P",{});var Dw=s(bn);N$r=r(Dw,"The model class to instantiate is selected based on the "),Z9e=n(Dw,"CODE",{});var e3t=s(Z9e);j$r=r(e3t,"model_type"),e3t.forEach(t),D$r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),e7e=n(Dw,"CODE",{});var o3t=s(e7e);G$r=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),O$r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(Dw,"CODE",{});var r3t=s(o7e);V$r=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),X$r=r(Dw,":"),Dw.forEach(t),z$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);b5=n(Pe,"LI",{});var MPe=s(b5);r7e=n(MPe,"STRONG",{});var t3t=s(r7e);Q$r=r(t3t,"bart"),t3t.forEach(t),W$r=r(MPe," \u2014 "),lY=n(MPe,"A",{href:!0});var a3t=s(lY);H$r=r(a3t,"FlaxBartForConditionalGeneration"),a3t.forEach(t),U$r=r(MPe," (BART model)"),MPe.forEach(t),J$r=i(Pe),v5=n(Pe,"LI",{});var EPe=s(v5);t7e=n(EPe,"STRONG",{});var n3t=s(t7e);Y$r=r(n3t,"blenderbot"),n3t.forEach(t),K$r=r(EPe," \u2014 "),iY=n(EPe,"A",{href:!0});var s3t=s(iY);Z$r=r(s3t,"FlaxBlenderbotForConditionalGeneration"),s3t.forEach(t),ekr=r(EPe," (Blenderbot model)"),EPe.forEach(t),okr=i(Pe),F5=n(Pe,"LI",{});var CPe=s(F5);a7e=n(CPe,"STRONG",{});var l3t=s(a7e);rkr=r(l3t,"blenderbot-small"),l3t.forEach(t),tkr=r(CPe," \u2014 "),dY=n(CPe,"A",{href:!0});var i3t=s(dY);akr=r(i3t,"FlaxBlenderbotSmallForConditionalGeneration"),i3t.forEach(t),nkr=r(CPe," (BlenderbotSmall model)"),CPe.forEach(t),skr=i(Pe),T5=n(Pe,"LI",{});var wPe=s(T5);n7e=n(wPe,"STRONG",{});var d3t=s(n7e);lkr=r(d3t,"encoder-decoder"),d3t.forEach(t),ikr=r(wPe," \u2014 "),cY=n(wPe,"A",{href:!0});var c3t=s(cY);dkr=r(c3t,"FlaxEncoderDecoderModel"),c3t.forEach(t),ckr=r(wPe," (Encoder decoder model)"),wPe.forEach(t),fkr=i(Pe),M5=n(Pe,"LI",{});var APe=s(M5);s7e=n(APe,"STRONG",{});var f3t=s(s7e);mkr=r(f3t,"longt5"),f3t.forEach(t),gkr=r(APe," \u2014 "),fY=n(APe,"A",{href:!0});var m3t=s(fY);hkr=r(m3t,"FlaxLongT5ForConditionalGeneration"),m3t.forEach(t),pkr=r(APe," (LongT5 model)"),APe.forEach(t),ukr=i(Pe),E5=n(Pe,"LI",{});var yPe=s(E5);l7e=n(yPe,"STRONG",{});var g3t=s(l7e);_kr=r(g3t,"marian"),g3t.forEach(t),bkr=r(yPe," \u2014 "),mY=n(yPe,"A",{href:!0});var h3t=s(mY);vkr=r(h3t,"FlaxMarianMTModel"),h3t.forEach(t),Fkr=r(yPe," (Marian model)"),yPe.forEach(t),Tkr=i(Pe),C5=n(Pe,"LI",{});var LPe=s(C5);i7e=n(LPe,"STRONG",{});var p3t=s(i7e);Mkr=r(p3t,"mbart"),p3t.forEach(t),Ekr=r(LPe," \u2014 "),gY=n(LPe,"A",{href:!0});var u3t=s(gY);Ckr=r(u3t,"FlaxMBartForConditionalGeneration"),u3t.forEach(t),wkr=r(LPe," (mBART model)"),LPe.forEach(t),Akr=i(Pe),w5=n(Pe,"LI",{});var xPe=s(w5);d7e=n(xPe,"STRONG",{});var _3t=s(d7e);ykr=r(_3t,"mt5"),_3t.forEach(t),Lkr=r(xPe," \u2014 "),hY=n(xPe,"A",{href:!0});var b3t=s(hY);xkr=r(b3t,"FlaxMT5ForConditionalGeneration"),b3t.forEach(t),$kr=r(xPe," (mT5 model)"),xPe.forEach(t),kkr=i(Pe),A5=n(Pe,"LI",{});var $Pe=s(A5);c7e=n($Pe,"STRONG",{});var v3t=s(c7e);Skr=r(v3t,"pegasus"),v3t.forEach(t),Rkr=r($Pe," \u2014 "),pY=n($Pe,"A",{href:!0});var F3t=s(pY);Bkr=r(F3t,"FlaxPegasusForConditionalGeneration"),F3t.forEach(t),Pkr=r($Pe," (Pegasus model)"),$Pe.forEach(t),Ikr=i(Pe),y5=n(Pe,"LI",{});var kPe=s(y5);f7e=n(kPe,"STRONG",{});var T3t=s(f7e);qkr=r(T3t,"t5"),T3t.forEach(t),Nkr=r(kPe," \u2014 "),uY=n(kPe,"A",{href:!0});var M3t=s(uY);jkr=r(M3t,"FlaxT5ForConditionalGeneration"),M3t.forEach(t),Dkr=r(kPe," (T5 model)"),kPe.forEach(t),Pe.forEach(t),Gkr=i(Hl),T(L5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),lNe=i(f),Oc=n(f,"H2",{class:!0});var hDe=s(Oc);x5=n(hDe,"A",{id:!0,class:!0,href:!0});var E3t=s(x5);m7e=n(E3t,"SPAN",{});var C3t=s(m7e);T(L8.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),Okr=i(hDe),g7e=n(hDe,"SPAN",{});var w3t=s(g7e);Vkr=r(w3t,"FlaxAutoModelForSequenceClassification"),w3t.forEach(t),hDe.forEach(t),iNe=i(f),ur=n(f,"DIV",{class:!0});var Ul=s(ur);T(x8.$$.fragment,Ul),Xkr=i(Ul),Vc=n(Ul,"P",{});var ree=s(Vc);zkr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_Y=n(ree,"A",{href:!0});var A3t=s(_Y);Qkr=r(A3t,"from_pretrained()"),A3t.forEach(t),Wkr=r(ree," class method or the "),bY=n(ree,"A",{href:!0});var y3t=s(bY);Hkr=r(y3t,"from_config()"),y3t.forEach(t),Ukr=r(ree,` class
method.`),ree.forEach(t),Jkr=i(Ul),$8=n(Ul,"P",{});var pDe=s($8);Ykr=r(pDe,"This class cannot be instantiated directly using "),h7e=n(pDe,"CODE",{});var L3t=s(h7e);Kkr=r(L3t,"__init__()"),L3t.forEach(t),Zkr=r(pDe," (throws an error)."),pDe.forEach(t),eSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var Gw=s(Xt);T(k8.$$.fragment,Gw),oSr=i(Gw),p7e=n(Gw,"P",{});var x3t=s(p7e);rSr=r(x3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x3t.forEach(t),tSr=i(Gw),Xc=n(Gw,"P",{});var tee=s(Xc);aSr=r(tee,`Note:
Loading a model from its configuration file does `),u7e=n(tee,"STRONG",{});var $3t=s(u7e);nSr=r($3t,"not"),$3t.forEach(t),sSr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(tee,"A",{href:!0});var k3t=s(vY);lSr=r(k3t,"from_pretrained()"),k3t.forEach(t),iSr=r(tee," to load the model weights."),tee.forEach(t),dSr=i(Gw),T($5.$$.fragment,Gw),Gw.forEach(t),cSr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(S8.$$.fragment,Jl),fSr=i(Jl),_7e=n(Jl,"P",{});var S3t=s(_7e);mSr=r(S3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S3t.forEach(t),gSr=i(Jl),vn=n(Jl,"P",{});var Ow=s(vn);hSr=r(Ow,"The model class to instantiate is selected based on the "),b7e=n(Ow,"CODE",{});var R3t=s(b7e);pSr=r(R3t,"model_type"),R3t.forEach(t),uSr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),v7e=n(Ow,"CODE",{});var B3t=s(v7e);_Sr=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),bSr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(Ow,"CODE",{});var P3t=s(F7e);vSr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),FSr=r(Ow,":"),Ow.forEach(t),TSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);k5=n(Ie,"LI",{});var SPe=s(k5);T7e=n(SPe,"STRONG",{});var I3t=s(T7e);MSr=r(I3t,"albert"),I3t.forEach(t),ESr=r(SPe," \u2014 "),FY=n(SPe,"A",{href:!0});var q3t=s(FY);CSr=r(q3t,"FlaxAlbertForSequenceClassification"),q3t.forEach(t),wSr=r(SPe," (ALBERT model)"),SPe.forEach(t),ASr=i(Ie),S5=n(Ie,"LI",{});var RPe=s(S5);M7e=n(RPe,"STRONG",{});var N3t=s(M7e);ySr=r(N3t,"bart"),N3t.forEach(t),LSr=r(RPe," \u2014 "),TY=n(RPe,"A",{href:!0});var j3t=s(TY);xSr=r(j3t,"FlaxBartForSequenceClassification"),j3t.forEach(t),$Sr=r(RPe," (BART model)"),RPe.forEach(t),kSr=i(Ie),R5=n(Ie,"LI",{});var BPe=s(R5);E7e=n(BPe,"STRONG",{});var D3t=s(E7e);SSr=r(D3t,"bert"),D3t.forEach(t),RSr=r(BPe," \u2014 "),MY=n(BPe,"A",{href:!0});var G3t=s(MY);BSr=r(G3t,"FlaxBertForSequenceClassification"),G3t.forEach(t),PSr=r(BPe," (BERT model)"),BPe.forEach(t),ISr=i(Ie),B5=n(Ie,"LI",{});var PPe=s(B5);C7e=n(PPe,"STRONG",{});var O3t=s(C7e);qSr=r(O3t,"big_bird"),O3t.forEach(t),NSr=r(PPe," \u2014 "),EY=n(PPe,"A",{href:!0});var V3t=s(EY);jSr=r(V3t,"FlaxBigBirdForSequenceClassification"),V3t.forEach(t),DSr=r(PPe," (BigBird model)"),PPe.forEach(t),GSr=i(Ie),P5=n(Ie,"LI",{});var IPe=s(P5);w7e=n(IPe,"STRONG",{});var X3t=s(w7e);OSr=r(X3t,"distilbert"),X3t.forEach(t),VSr=r(IPe," \u2014 "),CY=n(IPe,"A",{href:!0});var z3t=s(CY);XSr=r(z3t,"FlaxDistilBertForSequenceClassification"),z3t.forEach(t),zSr=r(IPe," (DistilBERT model)"),IPe.forEach(t),QSr=i(Ie),I5=n(Ie,"LI",{});var qPe=s(I5);A7e=n(qPe,"STRONG",{});var Q3t=s(A7e);WSr=r(Q3t,"electra"),Q3t.forEach(t),HSr=r(qPe," \u2014 "),wY=n(qPe,"A",{href:!0});var W3t=s(wY);USr=r(W3t,"FlaxElectraForSequenceClassification"),W3t.forEach(t),JSr=r(qPe," (ELECTRA model)"),qPe.forEach(t),YSr=i(Ie),q5=n(Ie,"LI",{});var NPe=s(q5);y7e=n(NPe,"STRONG",{});var H3t=s(y7e);KSr=r(H3t,"mbart"),H3t.forEach(t),ZSr=r(NPe," \u2014 "),AY=n(NPe,"A",{href:!0});var U3t=s(AY);eRr=r(U3t,"FlaxMBartForSequenceClassification"),U3t.forEach(t),oRr=r(NPe," (mBART model)"),NPe.forEach(t),rRr=i(Ie),N5=n(Ie,"LI",{});var jPe=s(N5);L7e=n(jPe,"STRONG",{});var J3t=s(L7e);tRr=r(J3t,"roberta"),J3t.forEach(t),aRr=r(jPe," \u2014 "),yY=n(jPe,"A",{href:!0});var Y3t=s(yY);nRr=r(Y3t,"FlaxRobertaForSequenceClassification"),Y3t.forEach(t),sRr=r(jPe," (RoBERTa model)"),jPe.forEach(t),lRr=i(Ie),j5=n(Ie,"LI",{});var DPe=s(j5);x7e=n(DPe,"STRONG",{});var K3t=s(x7e);iRr=r(K3t,"roformer"),K3t.forEach(t),dRr=r(DPe," \u2014 "),LY=n(DPe,"A",{href:!0});var Z3t=s(LY);cRr=r(Z3t,"FlaxRoFormerForSequenceClassification"),Z3t.forEach(t),fRr=r(DPe," (RoFormer model)"),DPe.forEach(t),mRr=i(Ie),D5=n(Ie,"LI",{});var GPe=s(D5);$7e=n(GPe,"STRONG",{});var ewt=s($7e);gRr=r(ewt,"xlm-roberta"),ewt.forEach(t),hRr=r(GPe," \u2014 "),xY=n(GPe,"A",{href:!0});var owt=s(xY);pRr=r(owt,"FlaxXLMRobertaForSequenceClassification"),owt.forEach(t),uRr=r(GPe," (XLM-RoBERTa model)"),GPe.forEach(t),Ie.forEach(t),_Rr=i(Jl),T(G5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),dNe=i(f),zc=n(f,"H2",{class:!0});var uDe=s(zc);O5=n(uDe,"A",{id:!0,class:!0,href:!0});var rwt=s(O5);k7e=n(rwt,"SPAN",{});var twt=s(k7e);T(R8.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),bRr=i(uDe),S7e=n(uDe,"SPAN",{});var awt=s(S7e);vRr=r(awt,"FlaxAutoModelForQuestionAnswering"),awt.forEach(t),uDe.forEach(t),cNe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(B8.$$.fragment,Yl),FRr=i(Yl),Qc=n(Yl,"P",{});var aee=s(Qc);TRr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Y=n(aee,"A",{href:!0});var nwt=s($Y);MRr=r(nwt,"from_pretrained()"),nwt.forEach(t),ERr=r(aee," class method or the "),kY=n(aee,"A",{href:!0});var swt=s(kY);CRr=r(swt,"from_config()"),swt.forEach(t),wRr=r(aee,` class
method.`),aee.forEach(t),ARr=i(Yl),P8=n(Yl,"P",{});var _De=s(P8);yRr=r(_De,"This class cannot be instantiated directly using "),R7e=n(_De,"CODE",{});var lwt=s(R7e);LRr=r(lwt,"__init__()"),lwt.forEach(t),xRr=r(_De," (throws an error)."),_De.forEach(t),$Rr=i(Yl),zt=n(Yl,"DIV",{class:!0});var Vw=s(zt);T(I8.$$.fragment,Vw),kRr=i(Vw),B7e=n(Vw,"P",{});var iwt=s(B7e);SRr=r(iwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iwt.forEach(t),RRr=i(Vw),Wc=n(Vw,"P",{});var nee=s(Wc);BRr=r(nee,`Note:
Loading a model from its configuration file does `),P7e=n(nee,"STRONG",{});var dwt=s(P7e);PRr=r(dwt,"not"),dwt.forEach(t),IRr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=n(nee,"A",{href:!0});var cwt=s(SY);qRr=r(cwt,"from_pretrained()"),cwt.forEach(t),NRr=r(nee," to load the model weights."),nee.forEach(t),jRr=i(Vw),T(V5.$$.fragment,Vw),Vw.forEach(t),DRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(q8.$$.fragment,Kl),GRr=i(Kl),I7e=n(Kl,"P",{});var fwt=s(I7e);ORr=r(fwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fwt.forEach(t),VRr=i(Kl),Fn=n(Kl,"P",{});var Xw=s(Fn);XRr=r(Xw,"The model class to instantiate is selected based on the "),q7e=n(Xw,"CODE",{});var mwt=s(q7e);zRr=r(mwt,"model_type"),mwt.forEach(t),QRr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),N7e=n(Xw,"CODE",{});var gwt=s(N7e);WRr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),HRr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(Xw,"CODE",{});var hwt=s(j7e);URr=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),JRr=r(Xw,":"),Xw.forEach(t),YRr=i(Kl),ke=n(Kl,"UL",{});var qe=s(ke);X5=n(qe,"LI",{});var OPe=s(X5);D7e=n(OPe,"STRONG",{});var pwt=s(D7e);KRr=r(pwt,"albert"),pwt.forEach(t),ZRr=r(OPe," \u2014 "),RY=n(OPe,"A",{href:!0});var uwt=s(RY);eBr=r(uwt,"FlaxAlbertForQuestionAnswering"),uwt.forEach(t),oBr=r(OPe," (ALBERT model)"),OPe.forEach(t),rBr=i(qe),z5=n(qe,"LI",{});var VPe=s(z5);G7e=n(VPe,"STRONG",{});var _wt=s(G7e);tBr=r(_wt,"bart"),_wt.forEach(t),aBr=r(VPe," \u2014 "),BY=n(VPe,"A",{href:!0});var bwt=s(BY);nBr=r(bwt,"FlaxBartForQuestionAnswering"),bwt.forEach(t),sBr=r(VPe," (BART model)"),VPe.forEach(t),lBr=i(qe),Q5=n(qe,"LI",{});var XPe=s(Q5);O7e=n(XPe,"STRONG",{});var vwt=s(O7e);iBr=r(vwt,"bert"),vwt.forEach(t),dBr=r(XPe," \u2014 "),PY=n(XPe,"A",{href:!0});var Fwt=s(PY);cBr=r(Fwt,"FlaxBertForQuestionAnswering"),Fwt.forEach(t),fBr=r(XPe," (BERT model)"),XPe.forEach(t),mBr=i(qe),W5=n(qe,"LI",{});var zPe=s(W5);V7e=n(zPe,"STRONG",{});var Twt=s(V7e);gBr=r(Twt,"big_bird"),Twt.forEach(t),hBr=r(zPe," \u2014 "),IY=n(zPe,"A",{href:!0});var Mwt=s(IY);pBr=r(Mwt,"FlaxBigBirdForQuestionAnswering"),Mwt.forEach(t),uBr=r(zPe," (BigBird model)"),zPe.forEach(t),_Br=i(qe),H5=n(qe,"LI",{});var QPe=s(H5);X7e=n(QPe,"STRONG",{});var Ewt=s(X7e);bBr=r(Ewt,"distilbert"),Ewt.forEach(t),vBr=r(QPe," \u2014 "),qY=n(QPe,"A",{href:!0});var Cwt=s(qY);FBr=r(Cwt,"FlaxDistilBertForQuestionAnswering"),Cwt.forEach(t),TBr=r(QPe," (DistilBERT model)"),QPe.forEach(t),MBr=i(qe),U5=n(qe,"LI",{});var WPe=s(U5);z7e=n(WPe,"STRONG",{});var wwt=s(z7e);EBr=r(wwt,"electra"),wwt.forEach(t),CBr=r(WPe," \u2014 "),NY=n(WPe,"A",{href:!0});var Awt=s(NY);wBr=r(Awt,"FlaxElectraForQuestionAnswering"),Awt.forEach(t),ABr=r(WPe," (ELECTRA model)"),WPe.forEach(t),yBr=i(qe),J5=n(qe,"LI",{});var HPe=s(J5);Q7e=n(HPe,"STRONG",{});var ywt=s(Q7e);LBr=r(ywt,"mbart"),ywt.forEach(t),xBr=r(HPe," \u2014 "),jY=n(HPe,"A",{href:!0});var Lwt=s(jY);$Br=r(Lwt,"FlaxMBartForQuestionAnswering"),Lwt.forEach(t),kBr=r(HPe," (mBART model)"),HPe.forEach(t),SBr=i(qe),Y5=n(qe,"LI",{});var UPe=s(Y5);W7e=n(UPe,"STRONG",{});var xwt=s(W7e);RBr=r(xwt,"roberta"),xwt.forEach(t),BBr=r(UPe," \u2014 "),DY=n(UPe,"A",{href:!0});var $wt=s(DY);PBr=r($wt,"FlaxRobertaForQuestionAnswering"),$wt.forEach(t),IBr=r(UPe," (RoBERTa model)"),UPe.forEach(t),qBr=i(qe),K5=n(qe,"LI",{});var JPe=s(K5);H7e=n(JPe,"STRONG",{});var kwt=s(H7e);NBr=r(kwt,"roformer"),kwt.forEach(t),jBr=r(JPe," \u2014 "),GY=n(JPe,"A",{href:!0});var Swt=s(GY);DBr=r(Swt,"FlaxRoFormerForQuestionAnswering"),Swt.forEach(t),GBr=r(JPe," (RoFormer model)"),JPe.forEach(t),OBr=i(qe),Z5=n(qe,"LI",{});var YPe=s(Z5);U7e=n(YPe,"STRONG",{});var Rwt=s(U7e);VBr=r(Rwt,"xlm-roberta"),Rwt.forEach(t),XBr=r(YPe," \u2014 "),OY=n(YPe,"A",{href:!0});var Bwt=s(OY);zBr=r(Bwt,"FlaxXLMRobertaForQuestionAnswering"),Bwt.forEach(t),QBr=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),qe.forEach(t),WBr=i(Kl),T(eC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),fNe=i(f),Hc=n(f,"H2",{class:!0});var bDe=s(Hc);oC=n(bDe,"A",{id:!0,class:!0,href:!0});var Pwt=s(oC);J7e=n(Pwt,"SPAN",{});var Iwt=s(J7e);T(N8.$$.fragment,Iwt),Iwt.forEach(t),Pwt.forEach(t),HBr=i(bDe),Y7e=n(bDe,"SPAN",{});var qwt=s(Y7e);UBr=r(qwt,"FlaxAutoModelForTokenClassification"),qwt.forEach(t),bDe.forEach(t),mNe=i(f),br=n(f,"DIV",{class:!0});var Zl=s(br);T(j8.$$.fragment,Zl),JBr=i(Zl),Uc=n(Zl,"P",{});var see=s(Uc);YBr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VY=n(see,"A",{href:!0});var Nwt=s(VY);KBr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),ZBr=r(see," class method or the "),XY=n(see,"A",{href:!0});var jwt=s(XY);ePr=r(jwt,"from_config()"),jwt.forEach(t),oPr=r(see,` class
method.`),see.forEach(t),rPr=i(Zl),D8=n(Zl,"P",{});var vDe=s(D8);tPr=r(vDe,"This class cannot be instantiated directly using "),K7e=n(vDe,"CODE",{});var Dwt=s(K7e);aPr=r(Dwt,"__init__()"),Dwt.forEach(t),nPr=r(vDe," (throws an error)."),vDe.forEach(t),sPr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var zw=s(Qt);T(G8.$$.fragment,zw),lPr=i(zw),Z7e=n(zw,"P",{});var Gwt=s(Z7e);iPr=r(Gwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gwt.forEach(t),dPr=i(zw),Jc=n(zw,"P",{});var lee=s(Jc);cPr=r(lee,`Note:
Loading a model from its configuration file does `),eMe=n(lee,"STRONG",{});var Owt=s(eMe);fPr=r(Owt,"not"),Owt.forEach(t),mPr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(lee,"A",{href:!0});var Vwt=s(zY);gPr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),hPr=r(lee," to load the model weights."),lee.forEach(t),pPr=i(zw),T(rC.$$.fragment,zw),zw.forEach(t),uPr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(O8.$$.fragment,ei),_Pr=i(ei),oMe=n(ei,"P",{});var Xwt=s(oMe);bPr=r(Xwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xwt.forEach(t),vPr=i(ei),Tn=n(ei,"P",{});var Qw=s(Tn);FPr=r(Qw,"The model class to instantiate is selected based on the "),rMe=n(Qw,"CODE",{});var zwt=s(rMe);TPr=r(zwt,"model_type"),zwt.forEach(t),MPr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),tMe=n(Qw,"CODE",{});var Qwt=s(tMe);EPr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),CPr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(Qw,"CODE",{});var Wwt=s(aMe);wPr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),APr=r(Qw,":"),Qw.forEach(t),yPr=i(ei),Ge=n(ei,"UL",{});var Fo=s(Ge);tC=n(Fo,"LI",{});var KPe=s(tC);nMe=n(KPe,"STRONG",{});var Hwt=s(nMe);LPr=r(Hwt,"albert"),Hwt.forEach(t),xPr=r(KPe," \u2014 "),QY=n(KPe,"A",{href:!0});var Uwt=s(QY);$Pr=r(Uwt,"FlaxAlbertForTokenClassification"),Uwt.forEach(t),kPr=r(KPe," (ALBERT model)"),KPe.forEach(t),SPr=i(Fo),aC=n(Fo,"LI",{});var ZPe=s(aC);sMe=n(ZPe,"STRONG",{});var Jwt=s(sMe);RPr=r(Jwt,"bert"),Jwt.forEach(t),BPr=r(ZPe," \u2014 "),WY=n(ZPe,"A",{href:!0});var Ywt=s(WY);PPr=r(Ywt,"FlaxBertForTokenClassification"),Ywt.forEach(t),IPr=r(ZPe," (BERT model)"),ZPe.forEach(t),qPr=i(Fo),nC=n(Fo,"LI",{});var eIe=s(nC);lMe=n(eIe,"STRONG",{});var Kwt=s(lMe);NPr=r(Kwt,"big_bird"),Kwt.forEach(t),jPr=r(eIe," \u2014 "),HY=n(eIe,"A",{href:!0});var Zwt=s(HY);DPr=r(Zwt,"FlaxBigBirdForTokenClassification"),Zwt.forEach(t),GPr=r(eIe," (BigBird model)"),eIe.forEach(t),OPr=i(Fo),sC=n(Fo,"LI",{});var oIe=s(sC);iMe=n(oIe,"STRONG",{});var eAt=s(iMe);VPr=r(eAt,"distilbert"),eAt.forEach(t),XPr=r(oIe," \u2014 "),UY=n(oIe,"A",{href:!0});var oAt=s(UY);zPr=r(oAt,"FlaxDistilBertForTokenClassification"),oAt.forEach(t),QPr=r(oIe," (DistilBERT model)"),oIe.forEach(t),WPr=i(Fo),lC=n(Fo,"LI",{});var rIe=s(lC);dMe=n(rIe,"STRONG",{});var rAt=s(dMe);HPr=r(rAt,"electra"),rAt.forEach(t),UPr=r(rIe," \u2014 "),JY=n(rIe,"A",{href:!0});var tAt=s(JY);JPr=r(tAt,"FlaxElectraForTokenClassification"),tAt.forEach(t),YPr=r(rIe," (ELECTRA model)"),rIe.forEach(t),KPr=i(Fo),iC=n(Fo,"LI",{});var tIe=s(iC);cMe=n(tIe,"STRONG",{});var aAt=s(cMe);ZPr=r(aAt,"roberta"),aAt.forEach(t),eIr=r(tIe," \u2014 "),YY=n(tIe,"A",{href:!0});var nAt=s(YY);oIr=r(nAt,"FlaxRobertaForTokenClassification"),nAt.forEach(t),rIr=r(tIe," (RoBERTa model)"),tIe.forEach(t),tIr=i(Fo),dC=n(Fo,"LI",{});var aIe=s(dC);fMe=n(aIe,"STRONG",{});var sAt=s(fMe);aIr=r(sAt,"roformer"),sAt.forEach(t),nIr=r(aIe," \u2014 "),KY=n(aIe,"A",{href:!0});var lAt=s(KY);sIr=r(lAt,"FlaxRoFormerForTokenClassification"),lAt.forEach(t),lIr=r(aIe," (RoFormer model)"),aIe.forEach(t),iIr=i(Fo),cC=n(Fo,"LI",{});var nIe=s(cC);mMe=n(nIe,"STRONG",{});var iAt=s(mMe);dIr=r(iAt,"xlm-roberta"),iAt.forEach(t),cIr=r(nIe," \u2014 "),ZY=n(nIe,"A",{href:!0});var dAt=s(ZY);fIr=r(dAt,"FlaxXLMRobertaForTokenClassification"),dAt.forEach(t),mIr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),Fo.forEach(t),gIr=i(ei),T(fC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),gNe=i(f),Yc=n(f,"H2",{class:!0});var FDe=s(Yc);mC=n(FDe,"A",{id:!0,class:!0,href:!0});var cAt=s(mC);gMe=n(cAt,"SPAN",{});var fAt=s(gMe);T(V8.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),hIr=i(FDe),hMe=n(FDe,"SPAN",{});var mAt=s(hMe);pIr=r(mAt,"FlaxAutoModelForMultipleChoice"),mAt.forEach(t),FDe.forEach(t),hNe=i(f),vr=n(f,"DIV",{class:!0});var oi=s(vr);T(X8.$$.fragment,oi),uIr=i(oi),Kc=n(oi,"P",{});var iee=s(Kc);_Ir=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eK=n(iee,"A",{href:!0});var gAt=s(eK);bIr=r(gAt,"from_pretrained()"),gAt.forEach(t),vIr=r(iee," class method or the "),oK=n(iee,"A",{href:!0});var hAt=s(oK);FIr=r(hAt,"from_config()"),hAt.forEach(t),TIr=r(iee,` class
method.`),iee.forEach(t),MIr=i(oi),z8=n(oi,"P",{});var TDe=s(z8);EIr=r(TDe,"This class cannot be instantiated directly using "),pMe=n(TDe,"CODE",{});var pAt=s(pMe);CIr=r(pAt,"__init__()"),pAt.forEach(t),wIr=r(TDe," (throws an error)."),TDe.forEach(t),AIr=i(oi),Wt=n(oi,"DIV",{class:!0});var Ww=s(Wt);T(Q8.$$.fragment,Ww),yIr=i(Ww),uMe=n(Ww,"P",{});var uAt=s(uMe);LIr=r(uAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uAt.forEach(t),xIr=i(Ww),Zc=n(Ww,"P",{});var dee=s(Zc);$Ir=r(dee,`Note:
Loading a model from its configuration file does `),_Me=n(dee,"STRONG",{});var _At=s(_Me);kIr=r(_At,"not"),_At.forEach(t),SIr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(dee,"A",{href:!0});var bAt=s(rK);RIr=r(bAt,"from_pretrained()"),bAt.forEach(t),BIr=r(dee," to load the model weights."),dee.forEach(t),PIr=i(Ww),T(gC.$$.fragment,Ww),Ww.forEach(t),IIr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(W8.$$.fragment,ri),qIr=i(ri),bMe=n(ri,"P",{});var vAt=s(bMe);NIr=r(vAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vAt.forEach(t),jIr=i(ri),Mn=n(ri,"P",{});var Hw=s(Mn);DIr=r(Hw,"The model class to instantiate is selected based on the "),vMe=n(Hw,"CODE",{});var FAt=s(vMe);GIr=r(FAt,"model_type"),FAt.forEach(t),OIr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),FMe=n(Hw,"CODE",{});var TAt=s(FMe);VIr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),XIr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(Hw,"CODE",{});var MAt=s(TMe);zIr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),QIr=r(Hw,":"),Hw.forEach(t),WIr=i(ri),Oe=n(ri,"UL",{});var To=s(Oe);hC=n(To,"LI",{});var sIe=s(hC);MMe=n(sIe,"STRONG",{});var EAt=s(MMe);HIr=r(EAt,"albert"),EAt.forEach(t),UIr=r(sIe," \u2014 "),tK=n(sIe,"A",{href:!0});var CAt=s(tK);JIr=r(CAt,"FlaxAlbertForMultipleChoice"),CAt.forEach(t),YIr=r(sIe," (ALBERT model)"),sIe.forEach(t),KIr=i(To),pC=n(To,"LI",{});var lIe=s(pC);EMe=n(lIe,"STRONG",{});var wAt=s(EMe);ZIr=r(wAt,"bert"),wAt.forEach(t),eqr=r(lIe," \u2014 "),aK=n(lIe,"A",{href:!0});var AAt=s(aK);oqr=r(AAt,"FlaxBertForMultipleChoice"),AAt.forEach(t),rqr=r(lIe," (BERT model)"),lIe.forEach(t),tqr=i(To),uC=n(To,"LI",{});var iIe=s(uC);CMe=n(iIe,"STRONG",{});var yAt=s(CMe);aqr=r(yAt,"big_bird"),yAt.forEach(t),nqr=r(iIe," \u2014 "),nK=n(iIe,"A",{href:!0});var LAt=s(nK);sqr=r(LAt,"FlaxBigBirdForMultipleChoice"),LAt.forEach(t),lqr=r(iIe," (BigBird model)"),iIe.forEach(t),iqr=i(To),_C=n(To,"LI",{});var dIe=s(_C);wMe=n(dIe,"STRONG",{});var xAt=s(wMe);dqr=r(xAt,"distilbert"),xAt.forEach(t),cqr=r(dIe," \u2014 "),sK=n(dIe,"A",{href:!0});var $At=s(sK);fqr=r($At,"FlaxDistilBertForMultipleChoice"),$At.forEach(t),mqr=r(dIe," (DistilBERT model)"),dIe.forEach(t),gqr=i(To),bC=n(To,"LI",{});var cIe=s(bC);AMe=n(cIe,"STRONG",{});var kAt=s(AMe);hqr=r(kAt,"electra"),kAt.forEach(t),pqr=r(cIe," \u2014 "),lK=n(cIe,"A",{href:!0});var SAt=s(lK);uqr=r(SAt,"FlaxElectraForMultipleChoice"),SAt.forEach(t),_qr=r(cIe," (ELECTRA model)"),cIe.forEach(t),bqr=i(To),vC=n(To,"LI",{});var fIe=s(vC);yMe=n(fIe,"STRONG",{});var RAt=s(yMe);vqr=r(RAt,"roberta"),RAt.forEach(t),Fqr=r(fIe," \u2014 "),iK=n(fIe,"A",{href:!0});var BAt=s(iK);Tqr=r(BAt,"FlaxRobertaForMultipleChoice"),BAt.forEach(t),Mqr=r(fIe," (RoBERTa model)"),fIe.forEach(t),Eqr=i(To),FC=n(To,"LI",{});var mIe=s(FC);LMe=n(mIe,"STRONG",{});var PAt=s(LMe);Cqr=r(PAt,"roformer"),PAt.forEach(t),wqr=r(mIe," \u2014 "),dK=n(mIe,"A",{href:!0});var IAt=s(dK);Aqr=r(IAt,"FlaxRoFormerForMultipleChoice"),IAt.forEach(t),yqr=r(mIe," (RoFormer model)"),mIe.forEach(t),Lqr=i(To),TC=n(To,"LI",{});var gIe=s(TC);xMe=n(gIe,"STRONG",{});var qAt=s(xMe);xqr=r(qAt,"xlm-roberta"),qAt.forEach(t),$qr=r(gIe," \u2014 "),cK=n(gIe,"A",{href:!0});var NAt=s(cK);kqr=r(NAt,"FlaxXLMRobertaForMultipleChoice"),NAt.forEach(t),Sqr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),To.forEach(t),Rqr=i(ri),T(MC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),pNe=i(f),ef=n(f,"H2",{class:!0});var MDe=s(ef);EC=n(MDe,"A",{id:!0,class:!0,href:!0});var jAt=s(EC);$Me=n(jAt,"SPAN",{});var DAt=s($Me);T(H8.$$.fragment,DAt),DAt.forEach(t),jAt.forEach(t),Bqr=i(MDe),kMe=n(MDe,"SPAN",{});var GAt=s(kMe);Pqr=r(GAt,"FlaxAutoModelForNextSentencePrediction"),GAt.forEach(t),MDe.forEach(t),uNe=i(f),Fr=n(f,"DIV",{class:!0});var ti=s(Fr);T(U8.$$.fragment,ti),Iqr=i(ti),of=n(ti,"P",{});var cee=s(of);qqr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fK=n(cee,"A",{href:!0});var OAt=s(fK);Nqr=r(OAt,"from_pretrained()"),OAt.forEach(t),jqr=r(cee," class method or the "),mK=n(cee,"A",{href:!0});var VAt=s(mK);Dqr=r(VAt,"from_config()"),VAt.forEach(t),Gqr=r(cee,` class
method.`),cee.forEach(t),Oqr=i(ti),J8=n(ti,"P",{});var EDe=s(J8);Vqr=r(EDe,"This class cannot be instantiated directly using "),SMe=n(EDe,"CODE",{});var XAt=s(SMe);Xqr=r(XAt,"__init__()"),XAt.forEach(t),zqr=r(EDe," (throws an error)."),EDe.forEach(t),Qqr=i(ti),Ht=n(ti,"DIV",{class:!0});var Uw=s(Ht);T(Y8.$$.fragment,Uw),Wqr=i(Uw),RMe=n(Uw,"P",{});var zAt=s(RMe);Hqr=r(zAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zAt.forEach(t),Uqr=i(Uw),rf=n(Uw,"P",{});var fee=s(rf);Jqr=r(fee,`Note:
Loading a model from its configuration file does `),BMe=n(fee,"STRONG",{});var QAt=s(BMe);Yqr=r(QAt,"not"),QAt.forEach(t),Kqr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(fee,"A",{href:!0});var WAt=s(gK);Zqr=r(WAt,"from_pretrained()"),WAt.forEach(t),eNr=r(fee," to load the model weights."),fee.forEach(t),oNr=i(Uw),T(CC.$$.fragment,Uw),Uw.forEach(t),rNr=i(ti),Hr=n(ti,"DIV",{class:!0});var ai=s(Hr);T(K8.$$.fragment,ai),tNr=i(ai),PMe=n(ai,"P",{});var HAt=s(PMe);aNr=r(HAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HAt.forEach(t),nNr=i(ai),En=n(ai,"P",{});var Jw=s(En);sNr=r(Jw,"The model class to instantiate is selected based on the "),IMe=n(Jw,"CODE",{});var UAt=s(IMe);lNr=r(UAt,"model_type"),UAt.forEach(t),iNr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),qMe=n(Jw,"CODE",{});var JAt=s(qMe);dNr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),cNr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(Jw,"CODE",{});var YAt=s(NMe);fNr=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),mNr=r(Jw,":"),Jw.forEach(t),gNr=i(ai),jMe=n(ai,"UL",{});var KAt=s(jMe);wC=n(KAt,"LI",{});var hIe=s(wC);DMe=n(hIe,"STRONG",{});var ZAt=s(DMe);hNr=r(ZAt,"bert"),ZAt.forEach(t),pNr=r(hIe," \u2014 "),hK=n(hIe,"A",{href:!0});var e0t=s(hK);uNr=r(e0t,"FlaxBertForNextSentencePrediction"),e0t.forEach(t),_Nr=r(hIe," (BERT model)"),hIe.forEach(t),KAt.forEach(t),bNr=i(ai),T(AC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),_Ne=i(f),tf=n(f,"H2",{class:!0});var CDe=s(tf);yC=n(CDe,"A",{id:!0,class:!0,href:!0});var o0t=s(yC);GMe=n(o0t,"SPAN",{});var r0t=s(GMe);T(Z8.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),vNr=i(CDe),OMe=n(CDe,"SPAN",{});var t0t=s(OMe);FNr=r(t0t,"FlaxAutoModelForImageClassification"),t0t.forEach(t),CDe.forEach(t),bNe=i(f),Tr=n(f,"DIV",{class:!0});var ni=s(Tr);T(ex.$$.fragment,ni),TNr=i(ni),af=n(ni,"P",{});var mee=s(af);MNr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pK=n(mee,"A",{href:!0});var a0t=s(pK);ENr=r(a0t,"from_pretrained()"),a0t.forEach(t),CNr=r(mee," class method or the "),uK=n(mee,"A",{href:!0});var n0t=s(uK);wNr=r(n0t,"from_config()"),n0t.forEach(t),ANr=r(mee,` class
method.`),mee.forEach(t),yNr=i(ni),ox=n(ni,"P",{});var wDe=s(ox);LNr=r(wDe,"This class cannot be instantiated directly using "),VMe=n(wDe,"CODE",{});var s0t=s(VMe);xNr=r(s0t,"__init__()"),s0t.forEach(t),$Nr=r(wDe," (throws an error)."),wDe.forEach(t),kNr=i(ni),Ut=n(ni,"DIV",{class:!0});var Yw=s(Ut);T(rx.$$.fragment,Yw),SNr=i(Yw),XMe=n(Yw,"P",{});var l0t=s(XMe);RNr=r(l0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l0t.forEach(t),BNr=i(Yw),nf=n(Yw,"P",{});var gee=s(nf);PNr=r(gee,`Note:
Loading a model from its configuration file does `),zMe=n(gee,"STRONG",{});var i0t=s(zMe);INr=r(i0t,"not"),i0t.forEach(t),qNr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(gee,"A",{href:!0});var d0t=s(_K);NNr=r(d0t,"from_pretrained()"),d0t.forEach(t),jNr=r(gee," to load the model weights."),gee.forEach(t),DNr=i(Yw),T(LC.$$.fragment,Yw),Yw.forEach(t),GNr=i(ni),Ur=n(ni,"DIV",{class:!0});var si=s(Ur);T(tx.$$.fragment,si),ONr=i(si),QMe=n(si,"P",{});var c0t=s(QMe);VNr=r(c0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c0t.forEach(t),XNr=i(si),Cn=n(si,"P",{});var Kw=s(Cn);zNr=r(Kw,"The model class to instantiate is selected based on the "),WMe=n(Kw,"CODE",{});var f0t=s(WMe);QNr=r(f0t,"model_type"),f0t.forEach(t),WNr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),HMe=n(Kw,"CODE",{});var m0t=s(HMe);HNr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),UNr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(Kw,"CODE",{});var g0t=s(UMe);JNr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),YNr=r(Kw,":"),Kw.forEach(t),KNr=i(si),ax=n(si,"UL",{});var ADe=s(ax);xC=n(ADe,"LI",{});var pIe=s(xC);JMe=n(pIe,"STRONG",{});var h0t=s(JMe);ZNr=r(h0t,"beit"),h0t.forEach(t),ejr=r(pIe," \u2014 "),bK=n(pIe,"A",{href:!0});var p0t=s(bK);ojr=r(p0t,"FlaxBeitForImageClassification"),p0t.forEach(t),rjr=r(pIe," (BEiT model)"),pIe.forEach(t),tjr=i(ADe),$C=n(ADe,"LI",{});var uIe=s($C);YMe=n(uIe,"STRONG",{});var u0t=s(YMe);ajr=r(u0t,"vit"),u0t.forEach(t),njr=r(uIe," \u2014 "),vK=n(uIe,"A",{href:!0});var _0t=s(vK);sjr=r(_0t,"FlaxViTForImageClassification"),_0t.forEach(t),ljr=r(uIe," (ViT model)"),uIe.forEach(t),ADe.forEach(t),ijr=i(si),T(kC.$$.fragment,si),si.forEach(t),ni.forEach(t),vNe=i(f),sf=n(f,"H2",{class:!0});var yDe=s(sf);SC=n(yDe,"A",{id:!0,class:!0,href:!0});var b0t=s(SC);KMe=n(b0t,"SPAN",{});var v0t=s(KMe);T(nx.$$.fragment,v0t),v0t.forEach(t),b0t.forEach(t),djr=i(yDe),ZMe=n(yDe,"SPAN",{});var F0t=s(ZMe);cjr=r(F0t,"FlaxAutoModelForVision2Seq"),F0t.forEach(t),yDe.forEach(t),FNe=i(f),Mr=n(f,"DIV",{class:!0});var li=s(Mr);T(sx.$$.fragment,li),fjr=i(li),lf=n(li,"P",{});var hee=s(lf);mjr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FK=n(hee,"A",{href:!0});var T0t=s(FK);gjr=r(T0t,"from_pretrained()"),T0t.forEach(t),hjr=r(hee," class method or the "),TK=n(hee,"A",{href:!0});var M0t=s(TK);pjr=r(M0t,"from_config()"),M0t.forEach(t),ujr=r(hee,` class
method.`),hee.forEach(t),_jr=i(li),lx=n(li,"P",{});var LDe=s(lx);bjr=r(LDe,"This class cannot be instantiated directly using "),e4e=n(LDe,"CODE",{});var E0t=s(e4e);vjr=r(E0t,"__init__()"),E0t.forEach(t),Fjr=r(LDe," (throws an error)."),LDe.forEach(t),Tjr=i(li),Jt=n(li,"DIV",{class:!0});var Zw=s(Jt);T(ix.$$.fragment,Zw),Mjr=i(Zw),o4e=n(Zw,"P",{});var C0t=s(o4e);Ejr=r(C0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),C0t.forEach(t),Cjr=i(Zw),df=n(Zw,"P",{});var pee=s(df);wjr=r(pee,`Note:
Loading a model from its configuration file does `),r4e=n(pee,"STRONG",{});var w0t=s(r4e);Ajr=r(w0t,"not"),w0t.forEach(t),yjr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(pee,"A",{href:!0});var A0t=s(MK);Ljr=r(A0t,"from_pretrained()"),A0t.forEach(t),xjr=r(pee," to load the model weights."),pee.forEach(t),$jr=i(Zw),T(RC.$$.fragment,Zw),Zw.forEach(t),kjr=i(li),Jr=n(li,"DIV",{class:!0});var ii=s(Jr);T(dx.$$.fragment,ii),Sjr=i(ii),t4e=n(ii,"P",{});var y0t=s(t4e);Rjr=r(y0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),y0t.forEach(t),Bjr=i(ii),wn=n(ii,"P",{});var eA=s(wn);Pjr=r(eA,"The model class to instantiate is selected based on the "),a4e=n(eA,"CODE",{});var L0t=s(a4e);Ijr=r(L0t,"model_type"),L0t.forEach(t),qjr=r(eA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(eA,"CODE",{});var x0t=s(n4e);Njr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),jjr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(eA,"CODE",{});var $0t=s(s4e);Djr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),Gjr=r(eA,":"),eA.forEach(t),Ojr=i(ii),l4e=n(ii,"UL",{});var k0t=s(l4e);BC=n(k0t,"LI",{});var _Ie=s(BC);i4e=n(_Ie,"STRONG",{});var S0t=s(i4e);Vjr=r(S0t,"vision-encoder-decoder"),S0t.forEach(t),Xjr=r(_Ie," \u2014 "),EK=n(_Ie,"A",{href:!0});var R0t=s(EK);zjr=r(R0t,"FlaxVisionEncoderDecoderModel"),R0t.forEach(t),Qjr=r(_Ie," (Vision Encoder decoder model)"),_Ie.forEach(t),k0t.forEach(t),Wjr=i(ii),T(PC.$$.fragment,ii),ii.forEach(t),li.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(qLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(_i,"class","relative group"),c(x$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c($$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(k$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(S$,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(R$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(B$,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(P$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(I$,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(q$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(N$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(j$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(D$,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(G$,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(O$,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(V$,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(X$,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(z$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Q$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(W$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(H$,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(U$,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(J$,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Y$,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(K$,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(Z$,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ek,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(ok,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(rk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(tk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ak,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(nk,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(vi,"class","relative group"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoFeatureExtractor"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoFeatureExtractor"),c(Fi,"class","relative group"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Ti,"class","relative group"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoModel"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoModel"),c(Ei,"class","relative group"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"id","transformers.AutoModelForPreTraining"),c(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ju,"href","#transformers.AutoModelForPreTraining"),c(Ai,"class","relative group"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForCausalLM"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForCausalLM"),c(xi,"class","relative group"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u2,"id","transformers.AutoModelForMaskedLM"),c(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u2,"href","#transformers.AutoModelForMaskedLM"),c(Si,"class","relative group"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o1,"id","transformers.AutoModelForSeq2SeqLM"),c(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Pi,"class","relative group"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSequenceClassification"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSequenceClassification"),c(Ni,"class","relative group"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForMultipleChoice"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForMultipleChoice"),c(Gi,"class","relative group"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForNextSentencePrediction"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Xi,"class","relative group"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForTokenClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForTokenClassification"),c(Wi,"class","relative group"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForQuestionAnswering"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ji,"class","relative group"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForTableQuestionAnswering"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Zi,"class","relative group"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForImageClassification"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForImageClassification"),c(rd,"class","relative group"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForVision2Seq"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForVision2Seq"),c(nd,"class","relative group"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.AutoModelForAudioClassification"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.AutoModelForAudioClassification"),c(id,"class","relative group"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.AutoModelForAudioFrameClassification"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.AutoModelForCTC"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.AutoModelForCTC"),c(hd,"class","relative group"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(_d,"class","relative group"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForAudioXVector"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForAudioXVector"),c(Fd,"class","relative group"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.AutoModelForMaskedImageModeling"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ed,"class","relative group"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForObjectDetection"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForObjectDetection"),c(yd,"class","relative group"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForImageSegmentation"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForImageSegmentation"),c($d,"class","relative group"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForSemanticSegmentation"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Rd,"class","relative group"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForInstanceSegmentation"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Id,"class","relative group"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.TFAutoModel"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.TFAutoModel"),c(jd,"class","relative group"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F9,"id","transformers.TFAutoModelForPreTraining"),c(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F9,"href","#transformers.TFAutoModelForPreTraining"),c(Od,"class","relative group"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q9,"id","transformers.TFAutoModelForCausalLM"),c(Q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q9,"href","#transformers.TFAutoModelForCausalLM"),c(zd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForImageClassification"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForImageClassification"),c(Hd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForMaskedLM"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModelForSequenceClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForMultipleChoice"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForTokenClassification"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForQuestionAnswering"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForVision2Seq"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.FlaxAutoModel"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModelForCausalLM"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForPreTraining"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForMaskedLM"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForTokenClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForImageClassification"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForVision2Seq"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,di),b(f,gf,_),b(f,et,_),e(et,ci),e(et,fi),e(fi,oA),e(et,hf),b(f,Ne,_),b(f,Xe,_),e(Xe,mi),e(Xe,yn),e(yn,rA),e(Xe,Ln),e(Xe,xn),e(xn,tA),e(Xe,gi),e(Xe,$n),e($n,aA),e(Xe,hi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,E$),e(Ae,pi),e(pi,C$),e(Ae,w$),b(f,Eo,_),b(f,Ea,_),e(Ea,A$),e(Ea,uf),e(uf,y$),e(Ea,xDe),b(f,bIe,_),b(f,ui,_),e(ui,_f),e(_f,uee),M(nA,uee,null),e(ui,$De),e(ui,_ee),e(_ee,kDe),b(f,vIe,_),b(f,kn,_),e(kn,SDe),e(kn,bee),e(bee,RDe),e(kn,BDe),e(kn,vee),e(vee,PDe),e(kn,IDe),b(f,FIe,_),M(sA,f,_),b(f,TIe,_),b(f,L$,_),e(L$,qDe),b(f,MIe,_),M(bf,f,_),b(f,EIe,_),b(f,_i,_),e(_i,vf),e(vf,Fee),M(lA,Fee,null),e(_i,NDe),e(_i,Tee),e(Tee,jDe),b(f,CIe,_),b(f,Co,_),M(iA,Co,null),e(Co,DDe),e(Co,dA),e(dA,GDe),e(dA,x$),e(x$,ODe),e(dA,VDe),e(Co,XDe),e(Co,cA),e(cA,zDe),e(cA,Mee),e(Mee,QDe),e(cA,WDe),e(Co,HDe),e(Co,Er),M(fA,Er,null),e(Er,UDe),e(Er,Eee),e(Eee,JDe),e(Er,YDe),e(Er,bi),e(bi,KDe),e(bi,Cee),e(Cee,ZDe),e(bi,eGe),e(bi,wee),e(wee,oGe),e(bi,rGe),e(Er,tGe),e(Er,A),e(A,Ff),e(Ff,Aee),e(Aee,aGe),e(Ff,nGe),e(Ff,$$),e($$,sGe),e(Ff,lGe),e(A,iGe),e(A,Tf),e(Tf,yee),e(yee,dGe),e(Tf,cGe),e(Tf,k$),e(k$,fGe),e(Tf,mGe),e(A,gGe),e(A,Mf),e(Mf,Lee),e(Lee,hGe),e(Mf,pGe),e(Mf,S$),e(S$,uGe),e(Mf,_Ge),e(A,bGe),e(A,Ef),e(Ef,xee),e(xee,vGe),e(Ef,FGe),e(Ef,R$),e(R$,TGe),e(Ef,MGe),e(A,EGe),e(A,Cf),e(Cf,$ee),e($ee,CGe),e(Cf,wGe),e(Cf,B$),e(B$,AGe),e(Cf,yGe),e(A,LGe),e(A,wf),e(wf,kee),e(kee,xGe),e(wf,$Ge),e(wf,P$),e(P$,kGe),e(wf,SGe),e(A,RGe),e(A,Af),e(Af,See),e(See,BGe),e(Af,PGe),e(Af,I$),e(I$,IGe),e(Af,qGe),e(A,NGe),e(A,yf),e(yf,Ree),e(Ree,jGe),e(yf,DGe),e(yf,q$),e(q$,GGe),e(yf,OGe),e(A,VGe),e(A,Lf),e(Lf,Bee),e(Bee,XGe),e(Lf,zGe),e(Lf,N$),e(N$,QGe),e(Lf,WGe),e(A,HGe),e(A,xf),e(xf,Pee),e(Pee,UGe),e(xf,JGe),e(xf,j$),e(j$,YGe),e(xf,KGe),e(A,ZGe),e(A,$f),e($f,Iee),e(Iee,eOe),e($f,oOe),e($f,D$),e(D$,rOe),e($f,tOe),e(A,aOe),e(A,kf),e(kf,qee),e(qee,nOe),e(kf,sOe),e(kf,G$),e(G$,lOe),e(kf,iOe),e(A,dOe),e(A,Sf),e(Sf,Nee),e(Nee,cOe),e(Sf,fOe),e(Sf,O$),e(O$,mOe),e(Sf,gOe),e(A,hOe),e(A,Rf),e(Rf,jee),e(jee,pOe),e(Rf,uOe),e(Rf,V$),e(V$,_Oe),e(Rf,bOe),e(A,vOe),e(A,Bf),e(Bf,Dee),e(Dee,FOe),e(Bf,TOe),e(Bf,X$),e(X$,MOe),e(Bf,EOe),e(A,COe),e(A,Pf),e(Pf,Gee),e(Gee,wOe),e(Pf,AOe),e(Pf,z$),e(z$,yOe),e(Pf,LOe),e(A,xOe),e(A,If),e(If,Oee),e(Oee,$Oe),e(If,kOe),e(If,Q$),e(Q$,SOe),e(If,ROe),e(A,BOe),e(A,qf),e(qf,Vee),e(Vee,POe),e(qf,IOe),e(qf,W$),e(W$,qOe),e(qf,NOe),e(A,jOe),e(A,Nf),e(Nf,Xee),e(Xee,DOe),e(Nf,GOe),e(Nf,H$),e(H$,OOe),e(Nf,VOe),e(A,XOe),e(A,jf),e(jf,zee),e(zee,zOe),e(jf,QOe),e(jf,U$),e(U$,WOe),e(jf,HOe),e(A,UOe),e(A,Df),e(Df,Qee),e(Qee,JOe),e(Df,YOe),e(Df,J$),e(J$,KOe),e(Df,ZOe),e(A,eVe),e(A,Gf),e(Gf,Wee),e(Wee,oVe),e(Gf,rVe),e(Gf,Y$),e(Y$,tVe),e(Gf,aVe),e(A,nVe),e(A,Of),e(Of,Hee),e(Hee,sVe),e(Of,lVe),e(Of,K$),e(K$,iVe),e(Of,dVe),e(A,cVe),e(A,Vf),e(Vf,Uee),e(Uee,fVe),e(Vf,mVe),e(Vf,Z$),e(Z$,gVe),e(Vf,hVe),e(A,pVe),e(A,Xf),e(Xf,Jee),e(Jee,uVe),e(Xf,_Ve),e(Xf,ek),e(ek,bVe),e(Xf,vVe),e(A,FVe),e(A,zf),e(zf,Yee),e(Yee,TVe),e(zf,MVe),e(zf,ok),e(ok,EVe),e(zf,CVe),e(A,wVe),e(A,Qf),e(Qf,Kee),e(Kee,AVe),e(Qf,yVe),e(Qf,rk),e(rk,LVe),e(Qf,xVe),e(A,$Ve),e(A,Wf),e(Wf,Zee),e(Zee,kVe),e(Wf,SVe),e(Wf,tk),e(tk,RVe),e(Wf,BVe),e(A,PVe),e(A,Hf),e(Hf,eoe),e(eoe,IVe),e(Hf,qVe),e(Hf,ak),e(ak,NVe),e(Hf,jVe),e(A,DVe),e(A,Uf),e(Uf,ooe),e(ooe,GVe),e(Uf,OVe),e(Uf,nk),e(nk,VVe),e(Uf,XVe),e(A,zVe),e(A,Jf),e(Jf,roe),e(roe,QVe),e(Jf,WVe),e(Jf,sk),e(sk,HVe),e(Jf,UVe),e(A,JVe),e(A,Yf),e(Yf,toe),e(toe,YVe),e(Yf,KVe),e(Yf,lk),e(lk,ZVe),e(Yf,eXe),e(A,oXe),e(A,Kf),e(Kf,aoe),e(aoe,rXe),e(Kf,tXe),e(Kf,ik),e(ik,aXe),e(Kf,nXe),e(A,sXe),e(A,Zf),e(Zf,noe),e(noe,lXe),e(Zf,iXe),e(Zf,dk),e(dk,dXe),e(Zf,cXe),e(A,fXe),e(A,em),e(em,soe),e(soe,mXe),e(em,gXe),e(em,ck),e(ck,hXe),e(em,pXe),e(A,uXe),e(A,om),e(om,loe),e(loe,_Xe),e(om,bXe),e(om,fk),e(fk,vXe),e(om,FXe),e(A,TXe),e(A,rm),e(rm,ioe),e(ioe,MXe),e(rm,EXe),e(rm,mk),e(mk,CXe),e(rm,wXe),e(A,AXe),e(A,tm),e(tm,doe),e(doe,yXe),e(tm,LXe),e(tm,gk),e(gk,xXe),e(tm,$Xe),e(A,kXe),e(A,am),e(am,coe),e(coe,SXe),e(am,RXe),e(am,hk),e(hk,BXe),e(am,PXe),e(A,IXe),e(A,nm),e(nm,foe),e(foe,qXe),e(nm,NXe),e(nm,pk),e(pk,jXe),e(nm,DXe),e(A,GXe),e(A,sm),e(sm,moe),e(moe,OXe),e(sm,VXe),e(sm,uk),e(uk,XXe),e(sm,zXe),e(A,QXe),e(A,lm),e(lm,goe),e(goe,WXe),e(lm,HXe),e(lm,_k),e(_k,UXe),e(lm,JXe),e(A,YXe),e(A,im),e(im,hoe),e(hoe,KXe),e(im,ZXe),e(im,bk),e(bk,eze),e(im,oze),e(A,rze),e(A,dm),e(dm,poe),e(poe,tze),e(dm,aze),e(dm,vk),e(vk,nze),e(dm,sze),e(A,lze),e(A,cm),e(cm,uoe),e(uoe,ize),e(cm,dze),e(cm,Fk),e(Fk,cze),e(cm,fze),e(A,mze),e(A,fm),e(fm,_oe),e(_oe,gze),e(fm,hze),e(fm,Tk),e(Tk,pze),e(fm,uze),e(A,_ze),e(A,mm),e(mm,boe),e(boe,bze),e(mm,vze),e(mm,Mk),e(Mk,Fze),e(mm,Tze),e(A,Mze),e(A,gm),e(gm,voe),e(voe,Eze),e(gm,Cze),e(gm,Ek),e(Ek,wze),e(gm,Aze),e(A,yze),e(A,hm),e(hm,Foe),e(Foe,Lze),e(hm,xze),e(hm,Ck),e(Ck,$ze),e(hm,kze),e(A,Sze),e(A,pm),e(pm,Toe),e(Toe,Rze),e(pm,Bze),e(pm,wk),e(wk,Pze),e(pm,Ize),e(A,qze),e(A,um),e(um,Moe),e(Moe,Nze),e(um,jze),e(um,Ak),e(Ak,Dze),e(um,Gze),e(A,Oze),e(A,_m),e(_m,Eoe),e(Eoe,Vze),e(_m,Xze),e(_m,yk),e(yk,zze),e(_m,Qze),e(A,Wze),e(A,bm),e(bm,Coe),e(Coe,Hze),e(bm,Uze),e(bm,Lk),e(Lk,Jze),e(bm,Yze),e(A,Kze),e(A,vm),e(vm,woe),e(woe,Zze),e(vm,eQe),e(vm,xk),e(xk,oQe),e(vm,rQe),e(A,tQe),e(A,Fm),e(Fm,Aoe),e(Aoe,aQe),e(Fm,nQe),e(Fm,$k),e($k,sQe),e(Fm,lQe),e(A,iQe),e(A,Tm),e(Tm,yoe),e(yoe,dQe),e(Tm,cQe),e(Tm,kk),e(kk,fQe),e(Tm,mQe),e(A,gQe),e(A,Mm),e(Mm,Loe),e(Loe,hQe),e(Mm,pQe),e(Mm,Sk),e(Sk,uQe),e(Mm,_Qe),e(A,bQe),e(A,Em),e(Em,xoe),e(xoe,vQe),e(Em,FQe),e(Em,Rk),e(Rk,TQe),e(Em,MQe),e(A,EQe),e(A,Cm),e(Cm,$oe),e($oe,CQe),e(Cm,wQe),e(Cm,Bk),e(Bk,AQe),e(Cm,yQe),e(A,LQe),e(A,wm),e(wm,koe),e(koe,xQe),e(wm,$Qe),e(wm,Pk),e(Pk,kQe),e(wm,SQe),e(A,RQe),e(A,Am),e(Am,Soe),e(Soe,BQe),e(Am,PQe),e(Am,Ik),e(Ik,IQe),e(Am,qQe),e(A,NQe),e(A,ym),e(ym,Roe),e(Roe,jQe),e(ym,DQe),e(ym,qk),e(qk,GQe),e(ym,OQe),e(A,VQe),e(A,Lm),e(Lm,Boe),e(Boe,XQe),e(Lm,zQe),e(Lm,Nk),e(Nk,QQe),e(Lm,WQe),e(A,HQe),e(A,xm),e(xm,Poe),e(Poe,UQe),e(xm,JQe),e(xm,jk),e(jk,YQe),e(xm,KQe),e(A,ZQe),e(A,$m),e($m,Ioe),e(Ioe,eWe),e($m,oWe),e($m,Dk),e(Dk,rWe),e($m,tWe),e(A,aWe),e(A,km),e(km,qoe),e(qoe,nWe),e(km,sWe),e(km,Gk),e(Gk,lWe),e(km,iWe),e(A,dWe),e(A,Sm),e(Sm,Noe),e(Noe,cWe),e(Sm,fWe),e(Sm,Ok),e(Ok,mWe),e(Sm,gWe),e(A,hWe),e(A,Rm),e(Rm,joe),e(joe,pWe),e(Rm,uWe),e(Rm,Vk),e(Vk,_We),e(Rm,bWe),e(A,vWe),e(A,Bm),e(Bm,Doe),e(Doe,FWe),e(Bm,TWe),e(Bm,Xk),e(Xk,MWe),e(Bm,EWe),e(A,CWe),e(A,Pm),e(Pm,Goe),e(Goe,wWe),e(Pm,AWe),e(Pm,zk),e(zk,yWe),e(Pm,LWe),e(A,xWe),e(A,Im),e(Im,Ooe),e(Ooe,$We),e(Im,kWe),e(Im,Qk),e(Qk,SWe),e(Im,RWe),e(A,BWe),e(A,qm),e(qm,Voe),e(Voe,PWe),e(qm,IWe),e(qm,Wk),e(Wk,qWe),e(qm,NWe),e(A,jWe),e(A,Nm),e(Nm,Xoe),e(Xoe,DWe),e(Nm,GWe),e(Nm,Hk),e(Hk,OWe),e(Nm,VWe),e(A,XWe),e(A,jm),e(jm,zoe),e(zoe,zWe),e(jm,QWe),e(jm,Uk),e(Uk,WWe),e(jm,HWe),e(A,UWe),e(A,Dm),e(Dm,Qoe),e(Qoe,JWe),e(Dm,YWe),e(Dm,Jk),e(Jk,KWe),e(Dm,ZWe),e(A,eHe),e(A,Gm),e(Gm,Woe),e(Woe,oHe),e(Gm,rHe),e(Gm,Yk),e(Yk,tHe),e(Gm,aHe),e(A,nHe),e(A,Om),e(Om,Hoe),e(Hoe,sHe),e(Om,lHe),e(Om,Kk),e(Kk,iHe),e(Om,dHe),e(A,cHe),e(A,Vm),e(Vm,Uoe),e(Uoe,fHe),e(Vm,mHe),e(Vm,Zk),e(Zk,gHe),e(Vm,hHe),e(A,pHe),e(A,Xm),e(Xm,Joe),e(Joe,uHe),e(Xm,_He),e(Xm,eS),e(eS,bHe),e(Xm,vHe),e(A,FHe),e(A,zm),e(zm,Yoe),e(Yoe,THe),e(zm,MHe),e(zm,oS),e(oS,EHe),e(zm,CHe),e(A,wHe),e(A,Qm),e(Qm,Koe),e(Koe,AHe),e(Qm,yHe),e(Qm,rS),e(rS,LHe),e(Qm,xHe),e(A,$He),e(A,Wm),e(Wm,Zoe),e(Zoe,kHe),e(Wm,SHe),e(Wm,tS),e(tS,RHe),e(Wm,BHe),e(A,PHe),e(A,Hm),e(Hm,ere),e(ere,IHe),e(Hm,qHe),e(Hm,aS),e(aS,NHe),e(Hm,jHe),e(A,DHe),e(A,Um),e(Um,ore),e(ore,GHe),e(Um,OHe),e(Um,nS),e(nS,VHe),e(Um,XHe),e(A,zHe),e(A,Jm),e(Jm,rre),e(rre,QHe),e(Jm,WHe),e(Jm,sS),e(sS,HHe),e(Jm,UHe),e(A,JHe),e(A,Ym),e(Ym,tre),e(tre,YHe),e(Ym,KHe),e(Ym,lS),e(lS,ZHe),e(Ym,eUe),e(A,oUe),e(A,Km),e(Km,are),e(are,rUe),e(Km,tUe),e(Km,iS),e(iS,aUe),e(Km,nUe),e(A,sUe),e(A,Zm),e(Zm,nre),e(nre,lUe),e(Zm,iUe),e(Zm,dS),e(dS,dUe),e(Zm,cUe),e(A,fUe),e(A,eg),e(eg,sre),e(sre,mUe),e(eg,gUe),e(eg,cS),e(cS,hUe),e(eg,pUe),e(A,uUe),e(A,og),e(og,lre),e(lre,_Ue),e(og,bUe),e(og,fS),e(fS,vUe),e(og,FUe),e(A,TUe),e(A,rg),e(rg,ire),e(ire,MUe),e(rg,EUe),e(rg,mS),e(mS,CUe),e(rg,wUe),e(A,AUe),e(A,tg),e(tg,dre),e(dre,yUe),e(tg,LUe),e(tg,gS),e(gS,xUe),e(tg,$Ue),e(A,kUe),e(A,ag),e(ag,cre),e(cre,SUe),e(ag,RUe),e(ag,hS),e(hS,BUe),e(ag,PUe),e(A,IUe),e(A,ng),e(ng,fre),e(fre,qUe),e(ng,NUe),e(ng,pS),e(pS,jUe),e(ng,DUe),e(A,GUe),e(A,sg),e(sg,mre),e(mre,OUe),e(sg,VUe),e(sg,uS),e(uS,XUe),e(sg,zUe),e(A,QUe),e(A,lg),e(lg,gre),e(gre,WUe),e(lg,HUe),e(lg,_S),e(_S,UUe),e(lg,JUe),e(A,YUe),e(A,ig),e(ig,hre),e(hre,KUe),e(ig,ZUe),e(ig,bS),e(bS,eJe),e(ig,oJe),e(A,rJe),e(A,dg),e(dg,pre),e(pre,tJe),e(dg,aJe),e(dg,vS),e(vS,nJe),e(dg,sJe),e(A,lJe),e(A,cg),e(cg,ure),e(ure,iJe),e(cg,dJe),e(cg,FS),e(FS,cJe),e(cg,fJe),e(A,mJe),e(A,fg),e(fg,_re),e(_re,gJe),e(fg,hJe),e(fg,TS),e(TS,pJe),e(fg,uJe),e(A,_Je),e(A,mg),e(mg,bre),e(bre,bJe),e(mg,vJe),e(mg,MS),e(MS,FJe),e(mg,TJe),e(A,MJe),e(A,gg),e(gg,vre),e(vre,EJe),e(gg,CJe),e(gg,ES),e(ES,wJe),e(gg,AJe),e(A,yJe),e(A,hg),e(hg,Fre),e(Fre,LJe),e(hg,xJe),e(hg,CS),e(CS,$Je),e(hg,kJe),e(A,SJe),e(A,pg),e(pg,Tre),e(Tre,RJe),e(pg,BJe),e(pg,wS),e(wS,PJe),e(pg,IJe),e(A,qJe),e(A,ug),e(ug,Mre),e(Mre,NJe),e(ug,jJe),e(ug,AS),e(AS,DJe),e(ug,GJe),e(Er,OJe),M(_g,Er,null),e(Co,VJe),e(Co,bg),M(mA,bg,null),e(bg,XJe),e(bg,Ere),e(Ere,zJe),b(f,wIe,_),b(f,vi,_),e(vi,vg),e(vg,Cre),M(gA,Cre,null),e(vi,QJe),e(vi,wre),e(wre,WJe),b(f,AIe,_),b(f,wo,_),M(hA,wo,null),e(wo,HJe),e(wo,pA),e(pA,UJe),e(pA,yS),e(yS,JJe),e(pA,YJe),e(wo,KJe),e(wo,uA),e(uA,ZJe),e(uA,Are),e(Are,eYe),e(uA,oYe),e(wo,rYe),e(wo,Cr),M(_A,Cr,null),e(Cr,tYe),e(Cr,yre),e(yre,aYe),e(Cr,nYe),e(Cr,Ca),e(Ca,sYe),e(Ca,Lre),e(Lre,lYe),e(Ca,iYe),e(Ca,xre),e(xre,dYe),e(Ca,cYe),e(Ca,$re),e($re,fYe),e(Ca,mYe),e(Cr,gYe),e(Cr,k),e(k,Sn),e(Sn,kre),e(kre,hYe),e(Sn,pYe),e(Sn,LS),e(LS,uYe),e(Sn,_Ye),e(Sn,xS),e(xS,bYe),e(Sn,vYe),e(k,FYe),e(k,Rn),e(Rn,Sre),e(Sre,TYe),e(Rn,MYe),e(Rn,$S),e($S,EYe),e(Rn,CYe),e(Rn,kS),e(kS,wYe),e(Rn,AYe),e(k,yYe),e(k,Bn),e(Bn,Rre),e(Rre,LYe),e(Bn,xYe),e(Bn,SS),e(SS,$Ye),e(Bn,kYe),e(Bn,RS),e(RS,SYe),e(Bn,RYe),e(k,BYe),e(k,Fg),e(Fg,Bre),e(Bre,PYe),e(Fg,IYe),e(Fg,BS),e(BS,qYe),e(Fg,NYe),e(k,jYe),e(k,Pn),e(Pn,Pre),e(Pre,DYe),e(Pn,GYe),e(Pn,PS),e(PS,OYe),e(Pn,VYe),e(Pn,IS),e(IS,XYe),e(Pn,zYe),e(k,QYe),e(k,Tg),e(Tg,Ire),e(Ire,WYe),e(Tg,HYe),e(Tg,qS),e(qS,UYe),e(Tg,JYe),e(k,YYe),e(k,Mg),e(Mg,qre),e(qre,KYe),e(Mg,ZYe),e(Mg,NS),e(NS,eKe),e(Mg,oKe),e(k,rKe),e(k,Eg),e(Eg,Nre),e(Nre,tKe),e(Eg,aKe),e(Eg,jS),e(jS,nKe),e(Eg,sKe),e(k,lKe),e(k,In),e(In,jre),e(jre,iKe),e(In,dKe),e(In,DS),e(DS,cKe),e(In,fKe),e(In,GS),e(GS,mKe),e(In,gKe),e(k,hKe),e(k,qn),e(qn,Dre),e(Dre,pKe),e(qn,uKe),e(qn,OS),e(OS,_Ke),e(qn,bKe),e(qn,VS),e(VS,vKe),e(qn,FKe),e(k,TKe),e(k,Nn),e(Nn,Gre),e(Gre,MKe),e(Nn,EKe),e(Nn,XS),e(XS,CKe),e(Nn,wKe),e(Nn,zS),e(zS,AKe),e(Nn,yKe),e(k,LKe),e(k,Cg),e(Cg,Ore),e(Ore,xKe),e(Cg,$Ke),e(Cg,QS),e(QS,kKe),e(Cg,SKe),e(k,RKe),e(k,wg),e(wg,Vre),e(Vre,BKe),e(wg,PKe),e(wg,WS),e(WS,IKe),e(wg,qKe),e(k,NKe),e(k,jn),e(jn,Xre),e(Xre,jKe),e(jn,DKe),e(jn,HS),e(HS,GKe),e(jn,OKe),e(jn,US),e(US,VKe),e(jn,XKe),e(k,zKe),e(k,Ag),e(Ag,zre),e(zre,QKe),e(Ag,WKe),e(Ag,JS),e(JS,HKe),e(Ag,UKe),e(k,JKe),e(k,Dn),e(Dn,Qre),e(Qre,YKe),e(Dn,KKe),e(Dn,YS),e(YS,ZKe),e(Dn,eZe),e(Dn,KS),e(KS,oZe),e(Dn,rZe),e(k,tZe),e(k,Gn),e(Gn,Wre),e(Wre,aZe),e(Gn,nZe),e(Gn,ZS),e(ZS,sZe),e(Gn,lZe),e(Gn,eR),e(eR,iZe),e(Gn,dZe),e(k,cZe),e(k,On),e(On,Hre),e(Hre,fZe),e(On,mZe),e(On,oR),e(oR,gZe),e(On,hZe),e(On,rR),e(rR,pZe),e(On,uZe),e(k,_Ze),e(k,yg),e(yg,Ure),e(Ure,bZe),e(yg,vZe),e(yg,tR),e(tR,FZe),e(yg,TZe),e(k,MZe),e(k,Vn),e(Vn,Jre),e(Jre,EZe),e(Vn,CZe),e(Vn,aR),e(aR,wZe),e(Vn,AZe),e(Vn,nR),e(nR,yZe),e(Vn,LZe),e(k,xZe),e(k,Xn),e(Xn,Yre),e(Yre,$Ze),e(Xn,kZe),e(Xn,sR),e(sR,SZe),e(Xn,RZe),e(Xn,lR),e(lR,BZe),e(Xn,PZe),e(k,IZe),e(k,zn),e(zn,Kre),e(Kre,qZe),e(zn,NZe),e(zn,iR),e(iR,jZe),e(zn,DZe),e(zn,dR),e(dR,GZe),e(zn,OZe),e(k,VZe),e(k,Qn),e(Qn,Zre),e(Zre,XZe),e(Qn,zZe),e(Qn,cR),e(cR,QZe),e(Qn,WZe),e(Qn,fR),e(fR,HZe),e(Qn,UZe),e(k,JZe),e(k,Wn),e(Wn,ete),e(ete,YZe),e(Wn,KZe),e(Wn,mR),e(mR,ZZe),e(Wn,eeo),e(Wn,gR),e(gR,oeo),e(Wn,reo),e(k,teo),e(k,Hn),e(Hn,ote),e(ote,aeo),e(Hn,neo),e(Hn,hR),e(hR,seo),e(Hn,leo),e(Hn,pR),e(pR,ieo),e(Hn,deo),e(k,ceo),e(k,Lg),e(Lg,rte),e(rte,feo),e(Lg,meo),e(Lg,uR),e(uR,geo),e(Lg,heo),e(k,peo),e(k,Un),e(Un,tte),e(tte,ueo),e(Un,_eo),e(Un,_R),e(_R,beo),e(Un,veo),e(Un,bR),e(bR,Feo),e(Un,Teo),e(k,Meo),e(k,xg),e(xg,ate),e(ate,Eeo),e(xg,Ceo),e(xg,vR),e(vR,weo),e(xg,Aeo),e(k,yeo),e(k,Jn),e(Jn,nte),e(nte,Leo),e(Jn,xeo),e(Jn,FR),e(FR,$eo),e(Jn,keo),e(Jn,TR),e(TR,Seo),e(Jn,Reo),e(k,Beo),e(k,Yn),e(Yn,ste),e(ste,Peo),e(Yn,Ieo),e(Yn,MR),e(MR,qeo),e(Yn,Neo),e(Yn,ER),e(ER,jeo),e(Yn,Deo),e(k,Geo),e(k,Kn),e(Kn,lte),e(lte,Oeo),e(Kn,Veo),e(Kn,CR),e(CR,Xeo),e(Kn,zeo),e(Kn,wR),e(wR,Qeo),e(Kn,Weo),e(k,Heo),e(k,Zn),e(Zn,ite),e(ite,Ueo),e(Zn,Jeo),e(Zn,AR),e(AR,Yeo),e(Zn,Keo),e(Zn,yR),e(yR,Zeo),e(Zn,eoo),e(k,ooo),e(k,es),e(es,dte),e(dte,roo),e(es,too),e(es,LR),e(LR,aoo),e(es,noo),e(es,xR),e(xR,soo),e(es,loo),e(k,ioo),e(k,$g),e($g,cte),e(cte,doo),e($g,coo),e($g,$R),e($R,foo),e($g,moo),e(k,goo),e(k,os),e(os,fte),e(fte,hoo),e(os,poo),e(os,kR),e(kR,uoo),e(os,_oo),e(os,SR),e(SR,boo),e(os,voo),e(k,Foo),e(k,rs),e(rs,mte),e(mte,Too),e(rs,Moo),e(rs,RR),e(RR,Eoo),e(rs,Coo),e(rs,BR),e(BR,woo),e(rs,Aoo),e(k,yoo),e(k,ts),e(ts,gte),e(gte,Loo),e(ts,xoo),e(ts,PR),e(PR,$oo),e(ts,koo),e(ts,IR),e(IR,Soo),e(ts,Roo),e(k,Boo),e(k,as),e(as,hte),e(hte,Poo),e(as,Ioo),e(as,qR),e(qR,qoo),e(as,Noo),e(as,NR),e(NR,joo),e(as,Doo),e(k,Goo),e(k,ns),e(ns,pte),e(pte,Ooo),e(ns,Voo),e(ns,jR),e(jR,Xoo),e(ns,zoo),e(ns,DR),e(DR,Qoo),e(ns,Woo),e(k,Hoo),e(k,ss),e(ss,ute),e(ute,Uoo),e(ss,Joo),e(ss,GR),e(GR,Yoo),e(ss,Koo),e(ss,OR),e(OR,Zoo),e(ss,ero),e(k,oro),e(k,ls),e(ls,_te),e(_te,rro),e(ls,tro),e(ls,VR),e(VR,aro),e(ls,nro),e(ls,XR),e(XR,sro),e(ls,lro),e(k,iro),e(k,kg),e(kg,bte),e(bte,dro),e(kg,cro),e(kg,zR),e(zR,fro),e(kg,mro),e(k,gro),e(k,is),e(is,vte),e(vte,hro),e(is,pro),e(is,QR),e(QR,uro),e(is,_ro),e(is,WR),e(WR,bro),e(is,vro),e(k,Fro),e(k,Sg),e(Sg,Fte),e(Fte,Tro),e(Sg,Mro),e(Sg,HR),e(HR,Ero),e(Sg,Cro),e(k,wro),e(k,Rg),e(Rg,Tte),e(Tte,Aro),e(Rg,yro),e(Rg,UR),e(UR,Lro),e(Rg,xro),e(k,$ro),e(k,ds),e(ds,Mte),e(Mte,kro),e(ds,Sro),e(ds,JR),e(JR,Rro),e(ds,Bro),e(ds,YR),e(YR,Pro),e(ds,Iro),e(k,qro),e(k,cs),e(cs,Ete),e(Ete,Nro),e(cs,jro),e(cs,KR),e(KR,Dro),e(cs,Gro),e(cs,ZR),e(ZR,Oro),e(cs,Vro),e(k,Xro),e(k,fs),e(fs,Cte),e(Cte,zro),e(fs,Qro),e(fs,eB),e(eB,Wro),e(fs,Hro),e(fs,oB),e(oB,Uro),e(fs,Jro),e(k,Yro),e(k,Bg),e(Bg,wte),e(wte,Kro),e(Bg,Zro),e(Bg,rB),e(rB,eto),e(Bg,oto),e(k,rto),e(k,ms),e(ms,Ate),e(Ate,tto),e(ms,ato),e(ms,tB),e(tB,nto),e(ms,sto),e(ms,aB),e(aB,lto),e(ms,ito),e(k,dto),e(k,gs),e(gs,yte),e(yte,cto),e(gs,fto),e(gs,nB),e(nB,mto),e(gs,gto),e(gs,sB),e(sB,hto),e(gs,pto),e(k,uto),e(k,hs),e(hs,Lte),e(Lte,_to),e(hs,bto),e(hs,lB),e(lB,vto),e(hs,Fto),e(hs,iB),e(iB,Tto),e(hs,Mto),e(k,Eto),e(k,ps),e(ps,xte),e(xte,Cto),e(ps,wto),e(ps,dB),e(dB,Ato),e(ps,yto),e(ps,cB),e(cB,Lto),e(ps,xto),e(k,$to),e(k,us),e(us,$te),e($te,kto),e(us,Sto),e(us,fB),e(fB,Rto),e(us,Bto),e(us,mB),e(mB,Pto),e(us,Ito),e(k,qto),e(k,Pg),e(Pg,kte),e(kte,Nto),e(Pg,jto),e(Pg,gB),e(gB,Dto),e(Pg,Gto),e(k,Oto),e(k,_s),e(_s,Ste),e(Ste,Vto),e(_s,Xto),e(_s,hB),e(hB,zto),e(_s,Qto),e(_s,pB),e(pB,Wto),e(_s,Hto),e(k,Uto),e(k,Ig),e(Ig,Rte),e(Rte,Jto),e(Ig,Yto),e(Ig,uB),e(uB,Kto),e(Ig,Zto),e(k,eao),e(k,qg),e(qg,Bte),e(Bte,oao),e(qg,rao),e(qg,_B),e(_B,tao),e(qg,aao),e(k,nao),e(k,Ng),e(Ng,Pte),e(Pte,sao),e(Ng,lao),e(Ng,bB),e(bB,iao),e(Ng,dao),e(k,cao),e(k,jg),e(jg,Ite),e(Ite,fao),e(jg,mao),e(jg,vB),e(vB,gao),e(jg,hao),e(k,pao),e(k,bs),e(bs,qte),e(qte,uao),e(bs,_ao),e(bs,FB),e(FB,bao),e(bs,vao),e(bs,TB),e(TB,Fao),e(bs,Tao),e(k,Mao),e(k,Dg),e(Dg,Nte),e(Nte,Eao),e(Dg,Cao),e(Dg,MB),e(MB,wao),e(Dg,Aao),e(k,yao),e(k,vs),e(vs,jte),e(jte,Lao),e(vs,xao),e(vs,EB),e(EB,$ao),e(vs,kao),e(vs,CB),e(CB,Sao),e(vs,Rao),e(k,Bao),e(k,Fs),e(Fs,Dte),e(Dte,Pao),e(Fs,Iao),e(Fs,wB),e(wB,qao),e(Fs,Nao),e(Fs,AB),e(AB,jao),e(Fs,Dao),e(k,Gao),e(k,Ts),e(Ts,Gte),e(Gte,Oao),e(Ts,Vao),e(Ts,yB),e(yB,Xao),e(Ts,zao),e(Ts,LB),e(LB,Qao),e(Ts,Wao),e(k,Hao),e(k,Ms),e(Ms,Ote),e(Ote,Uao),e(Ms,Jao),e(Ms,xB),e(xB,Yao),e(Ms,Kao),e(Ms,$B),e($B,Zao),e(Ms,eno),e(k,ono),e(k,Es),e(Es,Vte),e(Vte,rno),e(Es,tno),e(Es,kB),e(kB,ano),e(Es,nno),e(Es,SB),e(SB,sno),e(Es,lno),e(k,ino),e(k,Cs),e(Cs,Xte),e(Xte,dno),e(Cs,cno),e(Cs,RB),e(RB,fno),e(Cs,mno),e(Cs,BB),e(BB,gno),e(Cs,hno),e(k,pno),e(k,Gg),e(Gg,zte),e(zte,uno),e(Gg,_no),e(Gg,PB),e(PB,bno),e(Gg,vno),e(k,Fno),e(k,Og),e(Og,Qte),e(Qte,Tno),e(Og,Mno),e(Og,IB),e(IB,Eno),e(Og,Cno),e(k,wno),e(k,ws),e(ws,Wte),e(Wte,Ano),e(ws,yno),e(ws,qB),e(qB,Lno),e(ws,xno),e(ws,NB),e(NB,$no),e(ws,kno),e(k,Sno),e(k,As),e(As,Hte),e(Hte,Rno),e(As,Bno),e(As,jB),e(jB,Pno),e(As,Ino),e(As,DB),e(DB,qno),e(As,Nno),e(k,jno),e(k,ys),e(ys,Ute),e(Ute,Dno),e(ys,Gno),e(ys,GB),e(GB,Ono),e(ys,Vno),e(ys,OB),e(OB,Xno),e(ys,zno),e(k,Qno),e(k,Vg),e(Vg,Jte),e(Jte,Wno),e(Vg,Hno),e(Vg,VB),e(VB,Uno),e(Vg,Jno),e(k,Yno),e(k,Xg),e(Xg,Yte),e(Yte,Kno),e(Xg,Zno),e(Xg,XB),e(XB,eso),e(Xg,oso),e(k,rso),e(k,zg),e(zg,Kte),e(Kte,tso),e(zg,aso),e(zg,zB),e(zB,nso),e(zg,sso),e(k,lso),e(k,Ls),e(Ls,Zte),e(Zte,iso),e(Ls,dso),e(Ls,QB),e(QB,cso),e(Ls,fso),e(Ls,WB),e(WB,mso),e(Ls,gso),e(k,hso),e(k,Qg),e(Qg,eae),e(eae,pso),e(Qg,uso),e(Qg,HB),e(HB,_so),e(Qg,bso),e(k,vso),e(k,Wg),e(Wg,oae),e(oae,Fso),e(Wg,Tso),e(Wg,UB),e(UB,Mso),e(Wg,Eso),e(k,Cso),e(k,xs),e(xs,rae),e(rae,wso),e(xs,Aso),e(xs,JB),e(JB,yso),e(xs,Lso),e(xs,YB),e(YB,xso),e(xs,$so),e(k,kso),e(k,Hg),e(Hg,tae),e(tae,Sso),e(Hg,Rso),e(Hg,KB),e(KB,Bso),e(Hg,Pso),e(k,Iso),e(k,Ug),e(Ug,aae),e(aae,qso),e(Ug,Nso),e(Ug,ZB),e(ZB,jso),e(Ug,Dso),e(k,Gso),e(k,$s),e($s,nae),e(nae,Oso),e($s,Vso),e($s,eP),e(eP,Xso),e($s,zso),e($s,oP),e(oP,Qso),e($s,Wso),e(k,Hso),e(k,ks),e(ks,sae),e(sae,Uso),e(ks,Jso),e(ks,rP),e(rP,Yso),e(ks,Kso),e(ks,tP),e(tP,Zso),e(ks,elo),e(k,olo),e(k,Ss),e(Ss,lae),e(lae,rlo),e(Ss,tlo),e(Ss,aP),e(aP,alo),e(Ss,nlo),e(Ss,nP),e(nP,slo),e(Ss,llo),e(k,ilo),e(k,Rs),e(Rs,iae),e(iae,dlo),e(Rs,clo),e(Rs,sP),e(sP,flo),e(Rs,mlo),e(Rs,lP),e(lP,glo),e(Rs,hlo),e(Cr,plo),M(Jg,Cr,null),e(wo,ulo),e(wo,Yg),M(bA,Yg,null),e(Yg,_lo),e(Yg,dae),e(dae,blo),b(f,yIe,_),b(f,Fi,_),e(Fi,Kg),e(Kg,cae),M(vA,cae,null),e(Fi,vlo),e(Fi,fae),e(fae,Flo),b(f,LIe,_),b(f,Ao,_),M(FA,Ao,null),e(Ao,Tlo),e(Ao,TA),e(TA,Mlo),e(TA,iP),e(iP,Elo),e(TA,Clo),e(Ao,wlo),e(Ao,MA),e(MA,Alo),e(MA,mae),e(mae,ylo),e(MA,Llo),e(Ao,xlo),e(Ao,Qe),M(EA,Qe,null),e(Qe,$lo),e(Qe,gae),e(gae,klo),e(Qe,Slo),e(Qe,wa),e(wa,Rlo),e(wa,hae),e(hae,Blo),e(wa,Plo),e(wa,pae),e(pae,Ilo),e(wa,qlo),e(wa,uae),e(uae,Nlo),e(wa,jlo),e(Qe,Dlo),e(Qe,re),e(re,Zg),e(Zg,_ae),e(_ae,Glo),e(Zg,Olo),e(Zg,dP),e(dP,Vlo),e(Zg,Xlo),e(re,zlo),e(re,eh),e(eh,bae),e(bae,Qlo),e(eh,Wlo),e(eh,cP),e(cP,Hlo),e(eh,Ulo),e(re,Jlo),e(re,oh),e(oh,vae),e(vae,Ylo),e(oh,Klo),e(oh,fP),e(fP,Zlo),e(oh,eio),e(re,oio),e(re,rh),e(rh,Fae),e(Fae,rio),e(rh,tio),e(rh,mP),e(mP,aio),e(rh,nio),e(re,sio),e(re,th),e(th,Tae),e(Tae,lio),e(th,iio),e(th,gP),e(gP,dio),e(th,cio),e(re,fio),e(re,ah),e(ah,Mae),e(Mae,mio),e(ah,gio),e(ah,hP),e(hP,hio),e(ah,pio),e(re,uio),e(re,nh),e(nh,Eae),e(Eae,_io),e(nh,bio),e(nh,pP),e(pP,vio),e(nh,Fio),e(re,Tio),e(re,sh),e(sh,Cae),e(Cae,Mio),e(sh,Eio),e(sh,uP),e(uP,Cio),e(sh,wio),e(re,Aio),e(re,lh),e(lh,wae),e(wae,yio),e(lh,Lio),e(lh,_P),e(_P,xio),e(lh,$io),e(re,kio),e(re,ih),e(ih,Aae),e(Aae,Sio),e(ih,Rio),e(ih,bP),e(bP,Bio),e(ih,Pio),e(re,Iio),e(re,dh),e(dh,yae),e(yae,qio),e(dh,Nio),e(dh,vP),e(vP,jio),e(dh,Dio),e(re,Gio),e(re,ch),e(ch,Lae),e(Lae,Oio),e(ch,Vio),e(ch,FP),e(FP,Xio),e(ch,zio),e(re,Qio),e(re,fh),e(fh,xae),e(xae,Wio),e(fh,Hio),e(fh,TP),e(TP,Uio),e(fh,Jio),e(re,Yio),e(re,mh),e(mh,$ae),e($ae,Kio),e(mh,Zio),e(mh,MP),e(MP,edo),e(mh,odo),e(re,rdo),e(re,gh),e(gh,kae),e(kae,tdo),e(gh,ado),e(gh,EP),e(EP,ndo),e(gh,sdo),e(re,ldo),e(re,hh),e(hh,Sae),e(Sae,ido),e(hh,ddo),e(hh,CP),e(CP,cdo),e(hh,fdo),e(re,mdo),e(re,ph),e(ph,Rae),e(Rae,gdo),e(ph,hdo),e(ph,wP),e(wP,pdo),e(ph,udo),e(re,_do),e(re,uh),e(uh,Bae),e(Bae,bdo),e(uh,vdo),e(uh,AP),e(AP,Fdo),e(uh,Tdo),e(re,Mdo),e(re,_h),e(_h,Pae),e(Pae,Edo),e(_h,Cdo),e(_h,yP),e(yP,wdo),e(_h,Ado),e(re,ydo),e(re,bh),e(bh,Iae),e(Iae,Ldo),e(bh,xdo),e(bh,LP),e(LP,$do),e(bh,kdo),e(re,Sdo),e(re,vh),e(vh,qae),e(qae,Rdo),e(vh,Bdo),e(vh,xP),e(xP,Pdo),e(vh,Ido),e(re,qdo),e(re,Fh),e(Fh,Nae),e(Nae,Ndo),e(Fh,jdo),e(Fh,$P),e($P,Ddo),e(Fh,Gdo),e(re,Odo),e(re,Th),e(Th,jae),e(jae,Vdo),e(Th,Xdo),e(Th,kP),e(kP,zdo),e(Th,Qdo),e(re,Wdo),e(re,Mh),e(Mh,Dae),e(Dae,Hdo),e(Mh,Udo),e(Mh,SP),e(SP,Jdo),e(Mh,Ydo),e(re,Kdo),e(re,Eh),e(Eh,Gae),e(Gae,Zdo),e(Eh,eco),e(Eh,RP),e(RP,oco),e(Eh,rco),e(Qe,tco),M(Ch,Qe,null),e(Qe,aco),M(wh,Qe,null),e(Ao,nco),e(Ao,Ah),M(CA,Ah,null),e(Ah,sco),e(Ah,Oae),e(Oae,lco),b(f,xIe,_),b(f,Ti,_),e(Ti,yh),e(yh,Vae),M(wA,Vae,null),e(Ti,ico),e(Ti,Xae),e(Xae,dco),b(f,$Ie,_),b(f,yo,_),M(AA,yo,null),e(yo,cco),e(yo,yA),e(yA,fco),e(yA,BP),e(BP,mco),e(yA,gco),e(yo,hco),e(yo,LA),e(LA,pco),e(LA,zae),e(zae,uco),e(LA,_co),e(yo,bco),e(yo,We),M(xA,We,null),e(We,vco),e(We,Qae),e(Qae,Fco),e(We,Tco),e(We,Mi),e(Mi,Mco),e(Mi,Wae),e(Wae,Eco),e(Mi,Cco),e(Mi,Hae),e(Hae,wco),e(Mi,Aco),e(We,yco),e(We,be),e(be,Lh),e(Lh,Uae),e(Uae,Lco),e(Lh,xco),e(Lh,PP),e(PP,$co),e(Lh,kco),e(be,Sco),e(be,xh),e(xh,Jae),e(Jae,Rco),e(xh,Bco),e(xh,Yae),e(Yae,Pco),e(xh,Ico),e(be,qco),e(be,$h),e($h,Kae),e(Kae,Nco),e($h,jco),e($h,IP),e(IP,Dco),e($h,Gco),e(be,Oco),e(be,kh),e(kh,Zae),e(Zae,Vco),e(kh,Xco),e(kh,qP),e(qP,zco),e(kh,Qco),e(be,Wco),e(be,Sh),e(Sh,ene),e(ene,Hco),e(Sh,Uco),e(Sh,NP),e(NP,Jco),e(Sh,Yco),e(be,Kco),e(be,Rh),e(Rh,one),e(one,Zco),e(Rh,efo),e(Rh,jP),e(jP,ofo),e(Rh,rfo),e(be,tfo),e(be,Bh),e(Bh,rne),e(rne,afo),e(Bh,nfo),e(Bh,DP),e(DP,sfo),e(Bh,lfo),e(be,ifo),e(be,Ph),e(Ph,tne),e(tne,dfo),e(Ph,cfo),e(Ph,GP),e(GP,ffo),e(Ph,mfo),e(be,gfo),e(be,Ih),e(Ih,ane),e(ane,hfo),e(Ih,pfo),e(Ih,OP),e(OP,ufo),e(Ih,_fo),e(be,bfo),e(be,qh),e(qh,nne),e(nne,vfo),e(qh,Ffo),e(qh,VP),e(VP,Tfo),e(qh,Mfo),e(be,Efo),e(be,Nh),e(Nh,sne),e(sne,Cfo),e(Nh,wfo),e(Nh,XP),e(XP,Afo),e(Nh,yfo),e(be,Lfo),e(be,jh),e(jh,lne),e(lne,xfo),e(jh,$fo),e(jh,zP),e(zP,kfo),e(jh,Sfo),e(be,Rfo),e(be,Dh),e(Dh,ine),e(ine,Bfo),e(Dh,Pfo),e(Dh,QP),e(QP,Ifo),e(Dh,qfo),e(be,Nfo),e(be,Gh),e(Gh,dne),e(dne,jfo),e(Gh,Dfo),e(Gh,WP),e(WP,Gfo),e(Gh,Ofo),e(be,Vfo),e(be,Oh),e(Oh,cne),e(cne,Xfo),e(Oh,zfo),e(Oh,HP),e(HP,Qfo),e(Oh,Wfo),e(We,Hfo),M(Vh,We,null),e(We,Ufo),M(Xh,We,null),e(yo,Jfo),e(yo,zh),M($A,zh,null),e(zh,Yfo),e(zh,fne),e(fne,Kfo),b(f,kIe,_),b(f,Ei,_),e(Ei,Qh),e(Qh,mne),M(kA,mne,null),e(Ei,Zfo),e(Ei,gne),e(gne,emo),b(f,SIe,_),b(f,Lo,_),M(SA,Lo,null),e(Lo,omo),e(Lo,Ci),e(Ci,rmo),e(Ci,UP),e(UP,tmo),e(Ci,amo),e(Ci,JP),e(JP,nmo),e(Ci,smo),e(Lo,lmo),e(Lo,RA),e(RA,imo),e(RA,hne),e(hne,dmo),e(RA,cmo),e(Lo,fmo),e(Lo,ot),M(BA,ot,null),e(ot,mmo),e(ot,pne),e(pne,gmo),e(ot,hmo),e(ot,wi),e(wi,pmo),e(wi,une),e(une,umo),e(wi,_mo),e(wi,YP),e(YP,bmo),e(wi,vmo),e(ot,Fmo),M(Wh,ot,null),e(Lo,Tmo),e(Lo,He),M(PA,He,null),e(He,Mmo),e(He,_ne),e(_ne,Emo),e(He,Cmo),e(He,Aa),e(Aa,wmo),e(Aa,bne),e(bne,Amo),e(Aa,ymo),e(Aa,vne),e(vne,Lmo),e(Aa,xmo),e(Aa,Fne),e(Fne,$mo),e(Aa,kmo),e(He,Smo),e(He,x),e(x,Hh),e(Hh,Tne),e(Tne,Rmo),e(Hh,Bmo),e(Hh,KP),e(KP,Pmo),e(Hh,Imo),e(x,qmo),e(x,Uh),e(Uh,Mne),e(Mne,Nmo),e(Uh,jmo),e(Uh,ZP),e(ZP,Dmo),e(Uh,Gmo),e(x,Omo),e(x,Jh),e(Jh,Ene),e(Ene,Vmo),e(Jh,Xmo),e(Jh,eI),e(eI,zmo),e(Jh,Qmo),e(x,Wmo),e(x,Yh),e(Yh,Cne),e(Cne,Hmo),e(Yh,Umo),e(Yh,oI),e(oI,Jmo),e(Yh,Ymo),e(x,Kmo),e(x,Kh),e(Kh,wne),e(wne,Zmo),e(Kh,ego),e(Kh,rI),e(rI,ogo),e(Kh,rgo),e(x,tgo),e(x,Zh),e(Zh,Ane),e(Ane,ago),e(Zh,ngo),e(Zh,tI),e(tI,sgo),e(Zh,lgo),e(x,igo),e(x,ep),e(ep,yne),e(yne,dgo),e(ep,cgo),e(ep,aI),e(aI,fgo),e(ep,mgo),e(x,ggo),e(x,op),e(op,Lne),e(Lne,hgo),e(op,pgo),e(op,nI),e(nI,ugo),e(op,_go),e(x,bgo),e(x,rp),e(rp,xne),e(xne,vgo),e(rp,Fgo),e(rp,sI),e(sI,Tgo),e(rp,Mgo),e(x,Ego),e(x,tp),e(tp,$ne),e($ne,Cgo),e(tp,wgo),e(tp,lI),e(lI,Ago),e(tp,ygo),e(x,Lgo),e(x,ap),e(ap,kne),e(kne,xgo),e(ap,$go),e(ap,iI),e(iI,kgo),e(ap,Sgo),e(x,Rgo),e(x,np),e(np,Sne),e(Sne,Bgo),e(np,Pgo),e(np,dI),e(dI,Igo),e(np,qgo),e(x,Ngo),e(x,sp),e(sp,Rne),e(Rne,jgo),e(sp,Dgo),e(sp,cI),e(cI,Ggo),e(sp,Ogo),e(x,Vgo),e(x,lp),e(lp,Bne),e(Bne,Xgo),e(lp,zgo),e(lp,fI),e(fI,Qgo),e(lp,Wgo),e(x,Hgo),e(x,ip),e(ip,Pne),e(Pne,Ugo),e(ip,Jgo),e(ip,mI),e(mI,Ygo),e(ip,Kgo),e(x,Zgo),e(x,dp),e(dp,Ine),e(Ine,eho),e(dp,oho),e(dp,gI),e(gI,rho),e(dp,tho),e(x,aho),e(x,cp),e(cp,qne),e(qne,nho),e(cp,sho),e(cp,hI),e(hI,lho),e(cp,iho),e(x,dho),e(x,fp),e(fp,Nne),e(Nne,cho),e(fp,fho),e(fp,pI),e(pI,mho),e(fp,gho),e(x,hho),e(x,mp),e(mp,jne),e(jne,pho),e(mp,uho),e(mp,uI),e(uI,_ho),e(mp,bho),e(x,vho),e(x,gp),e(gp,Dne),e(Dne,Fho),e(gp,Tho),e(gp,_I),e(_I,Mho),e(gp,Eho),e(x,Cho),e(x,hp),e(hp,Gne),e(Gne,who),e(hp,Aho),e(hp,bI),e(bI,yho),e(hp,Lho),e(x,xho),e(x,pp),e(pp,One),e(One,$ho),e(pp,kho),e(pp,vI),e(vI,Sho),e(pp,Rho),e(x,Bho),e(x,up),e(up,Vne),e(Vne,Pho),e(up,Iho),e(up,FI),e(FI,qho),e(up,Nho),e(x,jho),e(x,_p),e(_p,Xne),e(Xne,Dho),e(_p,Gho),e(_p,TI),e(TI,Oho),e(_p,Vho),e(x,Xho),e(x,bp),e(bp,zne),e(zne,zho),e(bp,Qho),e(bp,MI),e(MI,Who),e(bp,Hho),e(x,Uho),e(x,vp),e(vp,Qne),e(Qne,Jho),e(vp,Yho),e(vp,EI),e(EI,Kho),e(vp,Zho),e(x,epo),e(x,Fp),e(Fp,Wne),e(Wne,opo),e(Fp,rpo),e(Fp,CI),e(CI,tpo),e(Fp,apo),e(x,npo),e(x,Tp),e(Tp,Hne),e(Hne,spo),e(Tp,lpo),e(Tp,wI),e(wI,ipo),e(Tp,dpo),e(x,cpo),e(x,Mp),e(Mp,Une),e(Une,fpo),e(Mp,mpo),e(Mp,AI),e(AI,gpo),e(Mp,hpo),e(x,ppo),e(x,Ep),e(Ep,Jne),e(Jne,upo),e(Ep,_po),e(Ep,yI),e(yI,bpo),e(Ep,vpo),e(x,Fpo),e(x,Cp),e(Cp,Yne),e(Yne,Tpo),e(Cp,Mpo),e(Cp,LI),e(LI,Epo),e(Cp,Cpo),e(x,wpo),e(x,Bs),e(Bs,Kne),e(Kne,Apo),e(Bs,ypo),e(Bs,xI),e(xI,Lpo),e(Bs,xpo),e(Bs,$I),e($I,$po),e(Bs,kpo),e(x,Spo),e(x,wp),e(wp,Zne),e(Zne,Rpo),e(wp,Bpo),e(wp,kI),e(kI,Ppo),e(wp,Ipo),e(x,qpo),e(x,Ap),e(Ap,ese),e(ese,Npo),e(Ap,jpo),e(Ap,SI),e(SI,Dpo),e(Ap,Gpo),e(x,Opo),e(x,yp),e(yp,ose),e(ose,Vpo),e(yp,Xpo),e(yp,RI),e(RI,zpo),e(yp,Qpo),e(x,Wpo),e(x,Lp),e(Lp,rse),e(rse,Hpo),e(Lp,Upo),e(Lp,BI),e(BI,Jpo),e(Lp,Ypo),e(x,Kpo),e(x,xp),e(xp,tse),e(tse,Zpo),e(xp,euo),e(xp,PI),e(PI,ouo),e(xp,ruo),e(x,tuo),e(x,$p),e($p,ase),e(ase,auo),e($p,nuo),e($p,II),e(II,suo),e($p,luo),e(x,iuo),e(x,kp),e(kp,nse),e(nse,duo),e(kp,cuo),e(kp,qI),e(qI,fuo),e(kp,muo),e(x,guo),e(x,Sp),e(Sp,sse),e(sse,huo),e(Sp,puo),e(Sp,NI),e(NI,uuo),e(Sp,_uo),e(x,buo),e(x,Rp),e(Rp,lse),e(lse,vuo),e(Rp,Fuo),e(Rp,jI),e(jI,Tuo),e(Rp,Muo),e(x,Euo),e(x,Bp),e(Bp,ise),e(ise,Cuo),e(Bp,wuo),e(Bp,DI),e(DI,Auo),e(Bp,yuo),e(x,Luo),e(x,Pp),e(Pp,dse),e(dse,xuo),e(Pp,$uo),e(Pp,GI),e(GI,kuo),e(Pp,Suo),e(x,Ruo),e(x,Ip),e(Ip,cse),e(cse,Buo),e(Ip,Puo),e(Ip,OI),e(OI,Iuo),e(Ip,quo),e(x,Nuo),e(x,qp),e(qp,fse),e(fse,juo),e(qp,Duo),e(qp,VI),e(VI,Guo),e(qp,Ouo),e(x,Vuo),e(x,Np),e(Np,mse),e(mse,Xuo),e(Np,zuo),e(Np,XI),e(XI,Quo),e(Np,Wuo),e(x,Huo),e(x,jp),e(jp,gse),e(gse,Uuo),e(jp,Juo),e(jp,zI),e(zI,Yuo),e(jp,Kuo),e(x,Zuo),e(x,Dp),e(Dp,hse),e(hse,e_o),e(Dp,o_o),e(Dp,QI),e(QI,r_o),e(Dp,t_o),e(x,a_o),e(x,Gp),e(Gp,pse),e(pse,n_o),e(Gp,s_o),e(Gp,WI),e(WI,l_o),e(Gp,i_o),e(x,d_o),e(x,Op),e(Op,use),e(use,c_o),e(Op,f_o),e(Op,HI),e(HI,m_o),e(Op,g_o),e(x,h_o),e(x,Vp),e(Vp,_se),e(_se,p_o),e(Vp,u_o),e(Vp,UI),e(UI,__o),e(Vp,b_o),e(x,v_o),e(x,Xp),e(Xp,bse),e(bse,F_o),e(Xp,T_o),e(Xp,JI),e(JI,M_o),e(Xp,E_o),e(x,C_o),e(x,zp),e(zp,vse),e(vse,w_o),e(zp,A_o),e(zp,YI),e(YI,y_o),e(zp,L_o),e(x,x_o),e(x,Qp),e(Qp,Fse),e(Fse,$_o),e(Qp,k_o),e(Qp,KI),e(KI,S_o),e(Qp,R_o),e(x,B_o),e(x,Wp),e(Wp,Tse),e(Tse,P_o),e(Wp,I_o),e(Wp,ZI),e(ZI,q_o),e(Wp,N_o),e(x,j_o),e(x,Hp),e(Hp,Mse),e(Mse,D_o),e(Hp,G_o),e(Hp,eq),e(eq,O_o),e(Hp,V_o),e(x,X_o),e(x,Up),e(Up,Ese),e(Ese,z_o),e(Up,Q_o),e(Up,oq),e(oq,W_o),e(Up,H_o),e(x,U_o),e(x,Jp),e(Jp,Cse),e(Cse,J_o),e(Jp,Y_o),e(Jp,rq),e(rq,K_o),e(Jp,Z_o),e(x,e2o),e(x,Yp),e(Yp,wse),e(wse,o2o),e(Yp,r2o),e(Yp,tq),e(tq,t2o),e(Yp,a2o),e(x,n2o),e(x,Kp),e(Kp,Ase),e(Ase,s2o),e(Kp,l2o),e(Kp,aq),e(aq,i2o),e(Kp,d2o),e(x,c2o),e(x,Zp),e(Zp,yse),e(yse,f2o),e(Zp,m2o),e(Zp,nq),e(nq,g2o),e(Zp,h2o),e(x,p2o),e(x,eu),e(eu,Lse),e(Lse,u2o),e(eu,_2o),e(eu,sq),e(sq,b2o),e(eu,v2o),e(x,F2o),e(x,ou),e(ou,xse),e(xse,T2o),e(ou,M2o),e(ou,lq),e(lq,E2o),e(ou,C2o),e(x,w2o),e(x,ru),e(ru,$se),e($se,A2o),e(ru,y2o),e(ru,iq),e(iq,L2o),e(ru,x2o),e(x,$2o),e(x,tu),e(tu,kse),e(kse,k2o),e(tu,S2o),e(tu,dq),e(dq,R2o),e(tu,B2o),e(x,P2o),e(x,au),e(au,Sse),e(Sse,I2o),e(au,q2o),e(au,cq),e(cq,N2o),e(au,j2o),e(x,D2o),e(x,nu),e(nu,Rse),e(Rse,G2o),e(nu,O2o),e(nu,fq),e(fq,V2o),e(nu,X2o),e(x,z2o),e(x,su),e(su,Bse),e(Bse,Q2o),e(su,W2o),e(su,mq),e(mq,H2o),e(su,U2o),e(x,J2o),e(x,lu),e(lu,Pse),e(Pse,Y2o),e(lu,K2o),e(lu,gq),e(gq,Z2o),e(lu,e1o),e(x,o1o),e(x,iu),e(iu,Ise),e(Ise,r1o),e(iu,t1o),e(iu,hq),e(hq,a1o),e(iu,n1o),e(x,s1o),e(x,du),e(du,qse),e(qse,l1o),e(du,i1o),e(du,pq),e(pq,d1o),e(du,c1o),e(x,f1o),e(x,cu),e(cu,Nse),e(Nse,m1o),e(cu,g1o),e(cu,uq),e(uq,h1o),e(cu,p1o),e(x,u1o),e(x,fu),e(fu,jse),e(jse,_1o),e(fu,b1o),e(fu,_q),e(_q,v1o),e(fu,F1o),e(x,T1o),e(x,mu),e(mu,Dse),e(Dse,M1o),e(mu,E1o),e(mu,bq),e(bq,C1o),e(mu,w1o),e(x,A1o),e(x,gu),e(gu,Gse),e(Gse,y1o),e(gu,L1o),e(gu,vq),e(vq,x1o),e(gu,$1o),e(x,k1o),e(x,hu),e(hu,Ose),e(Ose,S1o),e(hu,R1o),e(hu,Fq),e(Fq,B1o),e(hu,P1o),e(x,I1o),e(x,pu),e(pu,Vse),e(Vse,q1o),e(pu,N1o),e(pu,Tq),e(Tq,j1o),e(pu,D1o),e(x,G1o),e(x,uu),e(uu,Xse),e(Xse,O1o),e(uu,V1o),e(uu,Mq),e(Mq,X1o),e(uu,z1o),e(x,Q1o),e(x,_u),e(_u,zse),e(zse,W1o),e(_u,H1o),e(_u,Eq),e(Eq,U1o),e(_u,J1o),e(x,Y1o),e(x,bu),e(bu,Qse),e(Qse,K1o),e(bu,Z1o),e(bu,Cq),e(Cq,ebo),e(bu,obo),e(x,rbo),e(x,vu),e(vu,Wse),e(Wse,tbo),e(vu,abo),e(vu,wq),e(wq,nbo),e(vu,sbo),e(x,lbo),e(x,Fu),e(Fu,Hse),e(Hse,ibo),e(Fu,dbo),e(Fu,Aq),e(Aq,cbo),e(Fu,fbo),e(x,mbo),e(x,Tu),e(Tu,Use),e(Use,gbo),e(Tu,hbo),e(Tu,yq),e(yq,pbo),e(Tu,ubo),e(x,_bo),e(x,Mu),e(Mu,Jse),e(Jse,bbo),e(Mu,vbo),e(Mu,Lq),e(Lq,Fbo),e(Mu,Tbo),e(x,Mbo),e(x,Eu),e(Eu,Yse),e(Yse,Ebo),e(Eu,Cbo),e(Eu,xq),e(xq,wbo),e(Eu,Abo),e(x,ybo),e(x,Cu),e(Cu,Kse),e(Kse,Lbo),e(Cu,xbo),e(Cu,$q),e($q,$bo),e(Cu,kbo),e(x,Sbo),e(x,wu),e(wu,Zse),e(Zse,Rbo),e(wu,Bbo),e(wu,kq),e(kq,Pbo),e(wu,Ibo),e(x,qbo),e(x,Au),e(Au,ele),e(ele,Nbo),e(Au,jbo),e(Au,Sq),e(Sq,Dbo),e(Au,Gbo),e(x,Obo),e(x,yu),e(yu,ole),e(ole,Vbo),e(yu,Xbo),e(yu,Rq),e(Rq,zbo),e(yu,Qbo),e(x,Wbo),e(x,Lu),e(Lu,rle),e(rle,Hbo),e(Lu,Ubo),e(Lu,Bq),e(Bq,Jbo),e(Lu,Ybo),e(x,Kbo),e(x,xu),e(xu,tle),e(tle,Zbo),e(xu,evo),e(xu,Pq),e(Pq,ovo),e(xu,rvo),e(x,tvo),e(x,$u),e($u,ale),e(ale,avo),e($u,nvo),e($u,Iq),e(Iq,svo),e($u,lvo),e(x,ivo),e(x,ku),e(ku,nle),e(nle,dvo),e(ku,cvo),e(ku,qq),e(qq,fvo),e(ku,mvo),e(x,gvo),e(x,Su),e(Su,sle),e(sle,hvo),e(Su,pvo),e(Su,Nq),e(Nq,uvo),e(Su,_vo),e(x,bvo),e(x,Ru),e(Ru,lle),e(lle,vvo),e(Ru,Fvo),e(Ru,jq),e(jq,Tvo),e(Ru,Mvo),e(x,Evo),e(x,Bu),e(Bu,ile),e(ile,Cvo),e(Bu,wvo),e(Bu,Dq),e(Dq,Avo),e(Bu,yvo),e(x,Lvo),e(x,Pu),e(Pu,dle),e(dle,xvo),e(Pu,$vo),e(Pu,Gq),e(Gq,kvo),e(Pu,Svo),e(x,Rvo),e(x,Iu),e(Iu,cle),e(cle,Bvo),e(Iu,Pvo),e(Iu,Oq),e(Oq,Ivo),e(Iu,qvo),e(He,Nvo),e(He,qu),e(qu,jvo),e(qu,fle),e(fle,Dvo),e(qu,Gvo),e(qu,mle),e(mle,Ovo),e(He,Vvo),M(Nu,He,null),b(f,RIe,_),b(f,Ai,_),e(Ai,ju),e(ju,gle),M(IA,gle,null),e(Ai,Xvo),e(Ai,hle),e(hle,zvo),b(f,BIe,_),b(f,xo,_),M(qA,xo,null),e(xo,Qvo),e(xo,yi),e(yi,Wvo),e(yi,Vq),e(Vq,Hvo),e(yi,Uvo),e(yi,Xq),e(Xq,Jvo),e(yi,Yvo),e(xo,Kvo),e(xo,NA),e(NA,Zvo),e(NA,ple),e(ple,eFo),e(NA,oFo),e(xo,rFo),e(xo,rt),M(jA,rt,null),e(rt,tFo),e(rt,ule),e(ule,aFo),e(rt,nFo),e(rt,Li),e(Li,sFo),e(Li,_le),e(_le,lFo),e(Li,iFo),e(Li,zq),e(zq,dFo),e(Li,cFo),e(rt,fFo),M(Du,rt,null),e(xo,mFo),e(xo,Ue),M(DA,Ue,null),e(Ue,gFo),e(Ue,ble),e(ble,hFo),e(Ue,pFo),e(Ue,ya),e(ya,uFo),e(ya,vle),e(vle,_Fo),e(ya,bFo),e(ya,Fle),e(Fle,vFo),e(ya,FFo),e(ya,Tle),e(Tle,TFo),e(ya,MFo),e(Ue,EFo),e(Ue,G),e(G,Gu),e(Gu,Mle),e(Mle,CFo),e(Gu,wFo),e(Gu,Qq),e(Qq,AFo),e(Gu,yFo),e(G,LFo),e(G,Ou),e(Ou,Ele),e(Ele,xFo),e(Ou,$Fo),e(Ou,Wq),e(Wq,kFo),e(Ou,SFo),e(G,RFo),e(G,Vu),e(Vu,Cle),e(Cle,BFo),e(Vu,PFo),e(Vu,Hq),e(Hq,IFo),e(Vu,qFo),e(G,NFo),e(G,Xu),e(Xu,wle),e(wle,jFo),e(Xu,DFo),e(Xu,Uq),e(Uq,GFo),e(Xu,OFo),e(G,VFo),e(G,zu),e(zu,Ale),e(Ale,XFo),e(zu,zFo),e(zu,Jq),e(Jq,QFo),e(zu,WFo),e(G,HFo),e(G,Qu),e(Qu,yle),e(yle,UFo),e(Qu,JFo),e(Qu,Yq),e(Yq,YFo),e(Qu,KFo),e(G,ZFo),e(G,Wu),e(Wu,Lle),e(Lle,e6o),e(Wu,o6o),e(Wu,Kq),e(Kq,r6o),e(Wu,t6o),e(G,a6o),e(G,Hu),e(Hu,xle),e(xle,n6o),e(Hu,s6o),e(Hu,Zq),e(Zq,l6o),e(Hu,i6o),e(G,d6o),e(G,Uu),e(Uu,$le),e($le,c6o),e(Uu,f6o),e(Uu,eN),e(eN,m6o),e(Uu,g6o),e(G,h6o),e(G,Ju),e(Ju,kle),e(kle,p6o),e(Ju,u6o),e(Ju,oN),e(oN,_6o),e(Ju,b6o),e(G,v6o),e(G,Yu),e(Yu,Sle),e(Sle,F6o),e(Yu,T6o),e(Yu,rN),e(rN,M6o),e(Yu,E6o),e(G,C6o),e(G,Ku),e(Ku,Rle),e(Rle,w6o),e(Ku,A6o),e(Ku,tN),e(tN,y6o),e(Ku,L6o),e(G,x6o),e(G,Zu),e(Zu,Ble),e(Ble,$6o),e(Zu,k6o),e(Zu,aN),e(aN,S6o),e(Zu,R6o),e(G,B6o),e(G,e_),e(e_,Ple),e(Ple,P6o),e(e_,I6o),e(e_,nN),e(nN,q6o),e(e_,N6o),e(G,j6o),e(G,o_),e(o_,Ile),e(Ile,D6o),e(o_,G6o),e(o_,sN),e(sN,O6o),e(o_,V6o),e(G,X6o),e(G,r_),e(r_,qle),e(qle,z6o),e(r_,Q6o),e(r_,lN),e(lN,W6o),e(r_,H6o),e(G,U6o),e(G,t_),e(t_,Nle),e(Nle,J6o),e(t_,Y6o),e(t_,iN),e(iN,K6o),e(t_,Z6o),e(G,eTo),e(G,a_),e(a_,jle),e(jle,oTo),e(a_,rTo),e(a_,dN),e(dN,tTo),e(a_,aTo),e(G,nTo),e(G,n_),e(n_,Dle),e(Dle,sTo),e(n_,lTo),e(n_,cN),e(cN,iTo),e(n_,dTo),e(G,cTo),e(G,s_),e(s_,Gle),e(Gle,fTo),e(s_,mTo),e(s_,fN),e(fN,gTo),e(s_,hTo),e(G,pTo),e(G,l_),e(l_,Ole),e(Ole,uTo),e(l_,_To),e(l_,mN),e(mN,bTo),e(l_,vTo),e(G,FTo),e(G,i_),e(i_,Vle),e(Vle,TTo),e(i_,MTo),e(i_,gN),e(gN,ETo),e(i_,CTo),e(G,wTo),e(G,d_),e(d_,Xle),e(Xle,ATo),e(d_,yTo),e(d_,hN),e(hN,LTo),e(d_,xTo),e(G,$To),e(G,c_),e(c_,zle),e(zle,kTo),e(c_,STo),e(c_,pN),e(pN,RTo),e(c_,BTo),e(G,PTo),e(G,f_),e(f_,Qle),e(Qle,ITo),e(f_,qTo),e(f_,uN),e(uN,NTo),e(f_,jTo),e(G,DTo),e(G,m_),e(m_,Wle),e(Wle,GTo),e(m_,OTo),e(m_,_N),e(_N,VTo),e(m_,XTo),e(G,zTo),e(G,g_),e(g_,Hle),e(Hle,QTo),e(g_,WTo),e(g_,bN),e(bN,HTo),e(g_,UTo),e(G,JTo),e(G,h_),e(h_,Ule),e(Ule,YTo),e(h_,KTo),e(h_,vN),e(vN,ZTo),e(h_,e9o),e(G,o9o),e(G,p_),e(p_,Jle),e(Jle,r9o),e(p_,t9o),e(p_,FN),e(FN,a9o),e(p_,n9o),e(G,s9o),e(G,u_),e(u_,Yle),e(Yle,l9o),e(u_,i9o),e(u_,TN),e(TN,d9o),e(u_,c9o),e(G,f9o),e(G,__),e(__,Kle),e(Kle,m9o),e(__,g9o),e(__,MN),e(MN,h9o),e(__,p9o),e(G,u9o),e(G,b_),e(b_,Zle),e(Zle,_9o),e(b_,b9o),e(b_,EN),e(EN,v9o),e(b_,F9o),e(G,T9o),e(G,v_),e(v_,eie),e(eie,M9o),e(v_,E9o),e(v_,CN),e(CN,C9o),e(v_,w9o),e(G,A9o),e(G,F_),e(F_,oie),e(oie,y9o),e(F_,L9o),e(F_,wN),e(wN,x9o),e(F_,$9o),e(G,k9o),e(G,T_),e(T_,rie),e(rie,S9o),e(T_,R9o),e(T_,AN),e(AN,B9o),e(T_,P9o),e(G,I9o),e(G,M_),e(M_,tie),e(tie,q9o),e(M_,N9o),e(M_,yN),e(yN,j9o),e(M_,D9o),e(G,G9o),e(G,E_),e(E_,aie),e(aie,O9o),e(E_,V9o),e(E_,LN),e(LN,X9o),e(E_,z9o),e(G,Q9o),e(G,C_),e(C_,nie),e(nie,W9o),e(C_,H9o),e(C_,xN),e(xN,U9o),e(C_,J9o),e(G,Y9o),e(G,w_),e(w_,sie),e(sie,K9o),e(w_,Z9o),e(w_,$N),e($N,e7o),e(w_,o7o),e(G,r7o),e(G,A_),e(A_,lie),e(lie,t7o),e(A_,a7o),e(A_,kN),e(kN,n7o),e(A_,s7o),e(G,l7o),e(G,y_),e(y_,iie),e(iie,i7o),e(y_,d7o),e(y_,SN),e(SN,c7o),e(y_,f7o),e(Ue,m7o),e(Ue,L_),e(L_,g7o),e(L_,die),e(die,h7o),e(L_,p7o),e(L_,cie),e(cie,u7o),e(Ue,_7o),M(x_,Ue,null),b(f,PIe,_),b(f,xi,_),e(xi,$_),e($_,fie),M(GA,fie,null),e(xi,b7o),e(xi,mie),e(mie,v7o),b(f,IIe,_),b(f,$o,_),M(OA,$o,null),e($o,F7o),e($o,$i),e($i,T7o),e($i,RN),e(RN,M7o),e($i,E7o),e($i,BN),e(BN,C7o),e($i,w7o),e($o,A7o),e($o,VA),e(VA,y7o),e(VA,gie),e(gie,L7o),e(VA,x7o),e($o,$7o),e($o,tt),M(XA,tt,null),e(tt,k7o),e(tt,hie),e(hie,S7o),e(tt,R7o),e(tt,ki),e(ki,B7o),e(ki,pie),e(pie,P7o),e(ki,I7o),e(ki,PN),e(PN,q7o),e(ki,N7o),e(tt,j7o),M(k_,tt,null),e($o,D7o),e($o,Je),M(zA,Je,null),e(Je,G7o),e(Je,uie),e(uie,O7o),e(Je,V7o),e(Je,La),e(La,X7o),e(La,_ie),e(_ie,z7o),e(La,Q7o),e(La,bie),e(bie,W7o),e(La,H7o),e(La,vie),e(vie,U7o),e(La,J7o),e(Je,Y7o),e(Je,z),e(z,S_),e(S_,Fie),e(Fie,K7o),e(S_,Z7o),e(S_,IN),e(IN,eMo),e(S_,oMo),e(z,rMo),e(z,R_),e(R_,Tie),e(Tie,tMo),e(R_,aMo),e(R_,qN),e(qN,nMo),e(R_,sMo),e(z,lMo),e(z,B_),e(B_,Mie),e(Mie,iMo),e(B_,dMo),e(B_,NN),e(NN,cMo),e(B_,fMo),e(z,mMo),e(z,P_),e(P_,Eie),e(Eie,gMo),e(P_,hMo),e(P_,jN),e(jN,pMo),e(P_,uMo),e(z,_Mo),e(z,I_),e(I_,Cie),e(Cie,bMo),e(I_,vMo),e(I_,DN),e(DN,FMo),e(I_,TMo),e(z,MMo),e(z,q_),e(q_,wie),e(wie,EMo),e(q_,CMo),e(q_,GN),e(GN,wMo),e(q_,AMo),e(z,yMo),e(z,N_),e(N_,Aie),e(Aie,LMo),e(N_,xMo),e(N_,ON),e(ON,$Mo),e(N_,kMo),e(z,SMo),e(z,j_),e(j_,yie),e(yie,RMo),e(j_,BMo),e(j_,VN),e(VN,PMo),e(j_,IMo),e(z,qMo),e(z,D_),e(D_,Lie),e(Lie,NMo),e(D_,jMo),e(D_,XN),e(XN,DMo),e(D_,GMo),e(z,OMo),e(z,G_),e(G_,xie),e(xie,VMo),e(G_,XMo),e(G_,zN),e(zN,zMo),e(G_,QMo),e(z,WMo),e(z,O_),e(O_,$ie),e($ie,HMo),e(O_,UMo),e(O_,QN),e(QN,JMo),e(O_,YMo),e(z,KMo),e(z,V_),e(V_,kie),e(kie,ZMo),e(V_,e4o),e(V_,WN),e(WN,o4o),e(V_,r4o),e(z,t4o),e(z,X_),e(X_,Sie),e(Sie,a4o),e(X_,n4o),e(X_,HN),e(HN,s4o),e(X_,l4o),e(z,i4o),e(z,z_),e(z_,Rie),e(Rie,d4o),e(z_,c4o),e(z_,UN),e(UN,f4o),e(z_,m4o),e(z,g4o),e(z,Q_),e(Q_,Bie),e(Bie,h4o),e(Q_,p4o),e(Q_,JN),e(JN,u4o),e(Q_,_4o),e(z,b4o),e(z,W_),e(W_,Pie),e(Pie,v4o),e(W_,F4o),e(W_,YN),e(YN,T4o),e(W_,M4o),e(z,E4o),e(z,H_),e(H_,Iie),e(Iie,C4o),e(H_,w4o),e(H_,KN),e(KN,A4o),e(H_,y4o),e(z,L4o),e(z,U_),e(U_,qie),e(qie,x4o),e(U_,$4o),e(U_,ZN),e(ZN,k4o),e(U_,S4o),e(z,R4o),e(z,J_),e(J_,Nie),e(Nie,B4o),e(J_,P4o),e(J_,ej),e(ej,I4o),e(J_,q4o),e(z,N4o),e(z,Y_),e(Y_,jie),e(jie,j4o),e(Y_,D4o),e(Y_,oj),e(oj,G4o),e(Y_,O4o),e(z,V4o),e(z,K_),e(K_,Die),e(Die,X4o),e(K_,z4o),e(K_,rj),e(rj,Q4o),e(K_,W4o),e(z,H4o),e(z,Z_),e(Z_,Gie),e(Gie,U4o),e(Z_,J4o),e(Z_,tj),e(tj,Y4o),e(Z_,K4o),e(z,Z4o),e(z,e2),e(e2,Oie),e(Oie,eEo),e(e2,oEo),e(e2,aj),e(aj,rEo),e(e2,tEo),e(z,aEo),e(z,o2),e(o2,Vie),e(Vie,nEo),e(o2,sEo),e(o2,nj),e(nj,lEo),e(o2,iEo),e(z,dEo),e(z,r2),e(r2,Xie),e(Xie,cEo),e(r2,fEo),e(r2,sj),e(sj,mEo),e(r2,gEo),e(z,hEo),e(z,t2),e(t2,zie),e(zie,pEo),e(t2,uEo),e(t2,lj),e(lj,_Eo),e(t2,bEo),e(z,vEo),e(z,a2),e(a2,Qie),e(Qie,FEo),e(a2,TEo),e(a2,ij),e(ij,MEo),e(a2,EEo),e(z,CEo),e(z,n2),e(n2,Wie),e(Wie,wEo),e(n2,AEo),e(n2,dj),e(dj,yEo),e(n2,LEo),e(z,xEo),e(z,s2),e(s2,Hie),e(Hie,$Eo),e(s2,kEo),e(s2,cj),e(cj,SEo),e(s2,REo),e(z,BEo),e(z,l2),e(l2,Uie),e(Uie,PEo),e(l2,IEo),e(l2,fj),e(fj,qEo),e(l2,NEo),e(z,jEo),e(z,i2),e(i2,Jie),e(Jie,DEo),e(i2,GEo),e(i2,mj),e(mj,OEo),e(i2,VEo),e(z,XEo),e(z,d2),e(d2,Yie),e(Yie,zEo),e(d2,QEo),e(d2,gj),e(gj,WEo),e(d2,HEo),e(z,UEo),e(z,c2),e(c2,Kie),e(Kie,JEo),e(c2,YEo),e(c2,hj),e(hj,KEo),e(c2,ZEo),e(z,e5o),e(z,f2),e(f2,Zie),e(Zie,o5o),e(f2,r5o),e(f2,pj),e(pj,t5o),e(f2,a5o),e(z,n5o),e(z,m2),e(m2,ede),e(ede,s5o),e(m2,l5o),e(m2,uj),e(uj,i5o),e(m2,d5o),e(z,c5o),e(z,g2),e(g2,ode),e(ode,f5o),e(g2,m5o),e(g2,_j),e(_j,g5o),e(g2,h5o),e(Je,p5o),e(Je,h2),e(h2,u5o),e(h2,rde),e(rde,_5o),e(h2,b5o),e(h2,tde),e(tde,v5o),e(Je,F5o),M(p2,Je,null),b(f,qIe,_),b(f,Si,_),e(Si,u2),e(u2,ade),M(QA,ade,null),e(Si,T5o),e(Si,nde),e(nde,M5o),b(f,NIe,_),b(f,ko,_),M(WA,ko,null),e(ko,E5o),e(ko,Ri),e(Ri,C5o),e(Ri,bj),e(bj,w5o),e(Ri,A5o),e(Ri,vj),e(vj,y5o),e(Ri,L5o),e(ko,x5o),e(ko,HA),e(HA,$5o),e(HA,sde),e(sde,k5o),e(HA,S5o),e(ko,R5o),e(ko,at),M(UA,at,null),e(at,B5o),e(at,lde),e(lde,P5o),e(at,I5o),e(at,Bi),e(Bi,q5o),e(Bi,ide),e(ide,N5o),e(Bi,j5o),e(Bi,Fj),e(Fj,D5o),e(Bi,G5o),e(at,O5o),M(_2,at,null),e(ko,V5o),e(ko,Ye),M(JA,Ye,null),e(Ye,X5o),e(Ye,dde),e(dde,z5o),e(Ye,Q5o),e(Ye,xa),e(xa,W5o),e(xa,cde),e(cde,H5o),e(xa,U5o),e(xa,fde),e(fde,J5o),e(xa,Y5o),e(xa,mde),e(mde,K5o),e(xa,Z5o),e(Ye,eCo),e(Ye,Q),e(Q,b2),e(b2,gde),e(gde,oCo),e(b2,rCo),e(b2,Tj),e(Tj,tCo),e(b2,aCo),e(Q,nCo),e(Q,v2),e(v2,hde),e(hde,sCo),e(v2,lCo),e(v2,Mj),e(Mj,iCo),e(v2,dCo),e(Q,cCo),e(Q,F2),e(F2,pde),e(pde,fCo),e(F2,mCo),e(F2,Ej),e(Ej,gCo),e(F2,hCo),e(Q,pCo),e(Q,T2),e(T2,ude),e(ude,uCo),e(T2,_Co),e(T2,Cj),e(Cj,bCo),e(T2,vCo),e(Q,FCo),e(Q,M2),e(M2,_de),e(_de,TCo),e(M2,MCo),e(M2,wj),e(wj,ECo),e(M2,CCo),e(Q,wCo),e(Q,E2),e(E2,bde),e(bde,ACo),e(E2,yCo),e(E2,Aj),e(Aj,LCo),e(E2,xCo),e(Q,$Co),e(Q,C2),e(C2,vde),e(vde,kCo),e(C2,SCo),e(C2,yj),e(yj,RCo),e(C2,BCo),e(Q,PCo),e(Q,w2),e(w2,Fde),e(Fde,ICo),e(w2,qCo),e(w2,Lj),e(Lj,NCo),e(w2,jCo),e(Q,DCo),e(Q,A2),e(A2,Tde),e(Tde,GCo),e(A2,OCo),e(A2,xj),e(xj,VCo),e(A2,XCo),e(Q,zCo),e(Q,y2),e(y2,Mde),e(Mde,QCo),e(y2,WCo),e(y2,$j),e($j,HCo),e(y2,UCo),e(Q,JCo),e(Q,L2),e(L2,Ede),e(Ede,YCo),e(L2,KCo),e(L2,kj),e(kj,ZCo),e(L2,e3o),e(Q,o3o),e(Q,x2),e(x2,Cde),e(Cde,r3o),e(x2,t3o),e(x2,Sj),e(Sj,a3o),e(x2,n3o),e(Q,s3o),e(Q,$2),e($2,wde),e(wde,l3o),e($2,i3o),e($2,Rj),e(Rj,d3o),e($2,c3o),e(Q,f3o),e(Q,k2),e(k2,Ade),e(Ade,m3o),e(k2,g3o),e(k2,Bj),e(Bj,h3o),e(k2,p3o),e(Q,u3o),e(Q,S2),e(S2,yde),e(yde,_3o),e(S2,b3o),e(S2,Pj),e(Pj,v3o),e(S2,F3o),e(Q,T3o),e(Q,R2),e(R2,Lde),e(Lde,M3o),e(R2,E3o),e(R2,Ij),e(Ij,C3o),e(R2,w3o),e(Q,A3o),e(Q,B2),e(B2,xde),e(xde,y3o),e(B2,L3o),e(B2,qj),e(qj,x3o),e(B2,$3o),e(Q,k3o),e(Q,P2),e(P2,$de),e($de,S3o),e(P2,R3o),e(P2,Nj),e(Nj,B3o),e(P2,P3o),e(Q,I3o),e(Q,I2),e(I2,kde),e(kde,q3o),e(I2,N3o),e(I2,jj),e(jj,j3o),e(I2,D3o),e(Q,G3o),e(Q,q2),e(q2,Sde),e(Sde,O3o),e(q2,V3o),e(q2,Dj),e(Dj,X3o),e(q2,z3o),e(Q,Q3o),e(Q,N2),e(N2,Rde),e(Rde,W3o),e(N2,H3o),e(N2,Gj),e(Gj,U3o),e(N2,J3o),e(Q,Y3o),e(Q,j2),e(j2,Bde),e(Bde,K3o),e(j2,Z3o),e(j2,Oj),e(Oj,ewo),e(j2,owo),e(Q,rwo),e(Q,D2),e(D2,Pde),e(Pde,two),e(D2,awo),e(D2,Vj),e(Vj,nwo),e(D2,swo),e(Q,lwo),e(Q,G2),e(G2,Ide),e(Ide,iwo),e(G2,dwo),e(G2,Xj),e(Xj,cwo),e(G2,fwo),e(Q,mwo),e(Q,O2),e(O2,qde),e(qde,gwo),e(O2,hwo),e(O2,zj),e(zj,pwo),e(O2,uwo),e(Q,_wo),e(Q,V2),e(V2,Nde),e(Nde,bwo),e(V2,vwo),e(V2,Qj),e(Qj,Fwo),e(V2,Two),e(Q,Mwo),e(Q,X2),e(X2,jde),e(jde,Ewo),e(X2,Cwo),e(X2,Wj),e(Wj,wwo),e(X2,Awo),e(Q,ywo),e(Q,z2),e(z2,Dde),e(Dde,Lwo),e(z2,xwo),e(z2,Hj),e(Hj,$wo),e(z2,kwo),e(Q,Swo),e(Q,Q2),e(Q2,Gde),e(Gde,Rwo),e(Q2,Bwo),e(Q2,Uj),e(Uj,Pwo),e(Q2,Iwo),e(Q,qwo),e(Q,W2),e(W2,Ode),e(Ode,Nwo),e(W2,jwo),e(W2,Jj),e(Jj,Dwo),e(W2,Gwo),e(Q,Owo),e(Q,H2),e(H2,Vde),e(Vde,Vwo),e(H2,Xwo),e(H2,Xde),e(Xde,zwo),e(H2,Qwo),e(Q,Wwo),e(Q,U2),e(U2,zde),e(zde,Hwo),e(U2,Uwo),e(U2,Yj),e(Yj,Jwo),e(U2,Ywo),e(Q,Kwo),e(Q,J2),e(J2,Qde),e(Qde,Zwo),e(J2,eAo),e(J2,Kj),e(Kj,oAo),e(J2,rAo),e(Q,tAo),e(Q,Y2),e(Y2,Wde),e(Wde,aAo),e(Y2,nAo),e(Y2,Zj),e(Zj,sAo),e(Y2,lAo),e(Q,iAo),e(Q,K2),e(K2,Hde),e(Hde,dAo),e(K2,cAo),e(K2,eD),e(eD,fAo),e(K2,mAo),e(Ye,gAo),e(Ye,Z2),e(Z2,hAo),e(Z2,Ude),e(Ude,pAo),e(Z2,uAo),e(Z2,Jde),e(Jde,_Ao),e(Ye,bAo),M(e1,Ye,null),b(f,jIe,_),b(f,Pi,_),e(Pi,o1),e(o1,Yde),M(YA,Yde,null),e(Pi,vAo),e(Pi,Kde),e(Kde,FAo),b(f,DIe,_),b(f,So,_),M(KA,So,null),e(So,TAo),e(So,Ii),e(Ii,MAo),e(Ii,oD),e(oD,EAo),e(Ii,CAo),e(Ii,rD),e(rD,wAo),e(Ii,AAo),e(So,yAo),e(So,ZA),e(ZA,LAo),e(ZA,Zde),e(Zde,xAo),e(ZA,$Ao),e(So,kAo),e(So,nt),M(e0,nt,null),e(nt,SAo),e(nt,ece),e(ece,RAo),e(nt,BAo),e(nt,qi),e(qi,PAo),e(qi,oce),e(oce,IAo),e(qi,qAo),e(qi,tD),e(tD,NAo),e(qi,jAo),e(nt,DAo),M(r1,nt,null),e(So,GAo),e(So,Ke),M(o0,Ke,null),e(Ke,OAo),e(Ke,rce),e(rce,VAo),e(Ke,XAo),e(Ke,$a),e($a,zAo),e($a,tce),e(tce,QAo),e($a,WAo),e($a,ace),e(ace,HAo),e($a,UAo),e($a,nce),e(nce,JAo),e($a,YAo),e(Ke,KAo),e(Ke,he),e(he,t1),e(t1,sce),e(sce,ZAo),e(t1,e0o),e(t1,aD),e(aD,o0o),e(t1,r0o),e(he,t0o),e(he,a1),e(a1,lce),e(lce,a0o),e(a1,n0o),e(a1,nD),e(nD,s0o),e(a1,l0o),e(he,i0o),e(he,n1),e(n1,ice),e(ice,d0o),e(n1,c0o),e(n1,sD),e(sD,f0o),e(n1,m0o),e(he,g0o),e(he,s1),e(s1,dce),e(dce,h0o),e(s1,p0o),e(s1,lD),e(lD,u0o),e(s1,_0o),e(he,b0o),e(he,l1),e(l1,cce),e(cce,v0o),e(l1,F0o),e(l1,iD),e(iD,T0o),e(l1,M0o),e(he,E0o),e(he,i1),e(i1,fce),e(fce,C0o),e(i1,w0o),e(i1,dD),e(dD,A0o),e(i1,y0o),e(he,L0o),e(he,d1),e(d1,mce),e(mce,x0o),e(d1,$0o),e(d1,cD),e(cD,k0o),e(d1,S0o),e(he,R0o),e(he,c1),e(c1,gce),e(gce,B0o),e(c1,P0o),e(c1,fD),e(fD,I0o),e(c1,q0o),e(he,N0o),e(he,f1),e(f1,hce),e(hce,j0o),e(f1,D0o),e(f1,mD),e(mD,G0o),e(f1,O0o),e(he,V0o),e(he,m1),e(m1,pce),e(pce,X0o),e(m1,z0o),e(m1,gD),e(gD,Q0o),e(m1,W0o),e(he,H0o),e(he,g1),e(g1,uce),e(uce,U0o),e(g1,J0o),e(g1,hD),e(hD,Y0o),e(g1,K0o),e(he,Z0o),e(he,h1),e(h1,_ce),e(_ce,eyo),e(h1,oyo),e(h1,pD),e(pD,ryo),e(h1,tyo),e(he,ayo),e(he,p1),e(p1,bce),e(bce,nyo),e(p1,syo),e(p1,uD),e(uD,lyo),e(p1,iyo),e(he,dyo),e(he,u1),e(u1,vce),e(vce,cyo),e(u1,fyo),e(u1,_D),e(_D,myo),e(u1,gyo),e(he,hyo),e(he,_1),e(_1,Fce),e(Fce,pyo),e(_1,uyo),e(_1,bD),e(bD,_yo),e(_1,byo),e(he,vyo),e(he,b1),e(b1,Tce),e(Tce,Fyo),e(b1,Tyo),e(b1,vD),e(vD,Myo),e(b1,Eyo),e(he,Cyo),e(he,v1),e(v1,Mce),e(Mce,wyo),e(v1,Ayo),e(v1,FD),e(FD,yyo),e(v1,Lyo),e(Ke,xyo),e(Ke,F1),e(F1,$yo),e(F1,Ece),e(Ece,kyo),e(F1,Syo),e(F1,Cce),e(Cce,Ryo),e(Ke,Byo),M(T1,Ke,null),b(f,GIe,_),b(f,Ni,_),e(Ni,M1),e(M1,wce),M(r0,wce,null),e(Ni,Pyo),e(Ni,Ace),e(Ace,Iyo),b(f,OIe,_),b(f,Ro,_),M(t0,Ro,null),e(Ro,qyo),e(Ro,ji),e(ji,Nyo),e(ji,TD),e(TD,jyo),e(ji,Dyo),e(ji,MD),e(MD,Gyo),e(ji,Oyo),e(Ro,Vyo),e(Ro,a0),e(a0,Xyo),e(a0,yce),e(yce,zyo),e(a0,Qyo),e(Ro,Wyo),e(Ro,st),M(n0,st,null),e(st,Hyo),e(st,Lce),e(Lce,Uyo),e(st,Jyo),e(st,Di),e(Di,Yyo),e(Di,xce),e(xce,Kyo),e(Di,Zyo),e(Di,ED),e(ED,eLo),e(Di,oLo),e(st,rLo),M(E1,st,null),e(Ro,tLo),e(Ro,Ze),M(s0,Ze,null),e(Ze,aLo),e(Ze,$ce),e($ce,nLo),e(Ze,sLo),e(Ze,ka),e(ka,lLo),e(ka,kce),e(kce,iLo),e(ka,dLo),e(ka,Sce),e(Sce,cLo),e(ka,fLo),e(ka,Rce),e(Rce,mLo),e(ka,gLo),e(Ze,hLo),e(Ze,q),e(q,C1),e(C1,Bce),e(Bce,pLo),e(C1,uLo),e(C1,CD),e(CD,_Lo),e(C1,bLo),e(q,vLo),e(q,w1),e(w1,Pce),e(Pce,FLo),e(w1,TLo),e(w1,wD),e(wD,MLo),e(w1,ELo),e(q,CLo),e(q,A1),e(A1,Ice),e(Ice,wLo),e(A1,ALo),e(A1,AD),e(AD,yLo),e(A1,LLo),e(q,xLo),e(q,y1),e(y1,qce),e(qce,$Lo),e(y1,kLo),e(y1,yD),e(yD,SLo),e(y1,RLo),e(q,BLo),e(q,L1),e(L1,Nce),e(Nce,PLo),e(L1,ILo),e(L1,LD),e(LD,qLo),e(L1,NLo),e(q,jLo),e(q,x1),e(x1,jce),e(jce,DLo),e(x1,GLo),e(x1,xD),e(xD,OLo),e(x1,VLo),e(q,XLo),e(q,$1),e($1,Dce),e(Dce,zLo),e($1,QLo),e($1,$D),e($D,WLo),e($1,HLo),e(q,ULo),e(q,k1),e(k1,Gce),e(Gce,JLo),e(k1,YLo),e(k1,kD),e(kD,KLo),e(k1,ZLo),e(q,e8o),e(q,S1),e(S1,Oce),e(Oce,o8o),e(S1,r8o),e(S1,SD),e(SD,t8o),e(S1,a8o),e(q,n8o),e(q,R1),e(R1,Vce),e(Vce,s8o),e(R1,l8o),e(R1,RD),e(RD,i8o),e(R1,d8o),e(q,c8o),e(q,B1),e(B1,Xce),e(Xce,f8o),e(B1,m8o),e(B1,BD),e(BD,g8o),e(B1,h8o),e(q,p8o),e(q,P1),e(P1,zce),e(zce,u8o),e(P1,_8o),e(P1,PD),e(PD,b8o),e(P1,v8o),e(q,F8o),e(q,I1),e(I1,Qce),e(Qce,T8o),e(I1,M8o),e(I1,ID),e(ID,E8o),e(I1,C8o),e(q,w8o),e(q,q1),e(q1,Wce),e(Wce,A8o),e(q1,y8o),e(q1,qD),e(qD,L8o),e(q1,x8o),e(q,$8o),e(q,N1),e(N1,Hce),e(Hce,k8o),e(N1,S8o),e(N1,ND),e(ND,R8o),e(N1,B8o),e(q,P8o),e(q,j1),e(j1,Uce),e(Uce,I8o),e(j1,q8o),e(j1,jD),e(jD,N8o),e(j1,j8o),e(q,D8o),e(q,D1),e(D1,Jce),e(Jce,G8o),e(D1,O8o),e(D1,DD),e(DD,V8o),e(D1,X8o),e(q,z8o),e(q,G1),e(G1,Yce),e(Yce,Q8o),e(G1,W8o),e(G1,GD),e(GD,H8o),e(G1,U8o),e(q,J8o),e(q,O1),e(O1,Kce),e(Kce,Y8o),e(O1,K8o),e(O1,OD),e(OD,Z8o),e(O1,exo),e(q,oxo),e(q,V1),e(V1,Zce),e(Zce,rxo),e(V1,txo),e(V1,VD),e(VD,axo),e(V1,nxo),e(q,sxo),e(q,X1),e(X1,efe),e(efe,lxo),e(X1,ixo),e(X1,XD),e(XD,dxo),e(X1,cxo),e(q,fxo),e(q,z1),e(z1,ofe),e(ofe,mxo),e(z1,gxo),e(z1,zD),e(zD,hxo),e(z1,pxo),e(q,uxo),e(q,Q1),e(Q1,rfe),e(rfe,_xo),e(Q1,bxo),e(Q1,QD),e(QD,vxo),e(Q1,Fxo),e(q,Txo),e(q,W1),e(W1,tfe),e(tfe,Mxo),e(W1,Exo),e(W1,WD),e(WD,Cxo),e(W1,wxo),e(q,Axo),e(q,H1),e(H1,afe),e(afe,yxo),e(H1,Lxo),e(H1,HD),e(HD,xxo),e(H1,$xo),e(q,kxo),e(q,U1),e(U1,nfe),e(nfe,Sxo),e(U1,Rxo),e(U1,UD),e(UD,Bxo),e(U1,Pxo),e(q,Ixo),e(q,J1),e(J1,sfe),e(sfe,qxo),e(J1,Nxo),e(J1,JD),e(JD,jxo),e(J1,Dxo),e(q,Gxo),e(q,Y1),e(Y1,lfe),e(lfe,Oxo),e(Y1,Vxo),e(Y1,YD),e(YD,Xxo),e(Y1,zxo),e(q,Qxo),e(q,K1),e(K1,ife),e(ife,Wxo),e(K1,Hxo),e(K1,KD),e(KD,Uxo),e(K1,Jxo),e(q,Yxo),e(q,Z1),e(Z1,dfe),e(dfe,Kxo),e(Z1,Zxo),e(Z1,ZD),e(ZD,e$o),e(Z1,o$o),e(q,r$o),e(q,eb),e(eb,cfe),e(cfe,t$o),e(eb,a$o),e(eb,eG),e(eG,n$o),e(eb,s$o),e(q,l$o),e(q,ob),e(ob,ffe),e(ffe,i$o),e(ob,d$o),e(ob,oG),e(oG,c$o),e(ob,f$o),e(q,m$o),e(q,rb),e(rb,mfe),e(mfe,g$o),e(rb,h$o),e(rb,rG),e(rG,p$o),e(rb,u$o),e(q,_$o),e(q,tb),e(tb,gfe),e(gfe,b$o),e(tb,v$o),e(tb,tG),e(tG,F$o),e(tb,T$o),e(q,M$o),e(q,ab),e(ab,hfe),e(hfe,E$o),e(ab,C$o),e(ab,aG),e(aG,w$o),e(ab,A$o),e(q,y$o),e(q,nb),e(nb,pfe),e(pfe,L$o),e(nb,x$o),e(nb,nG),e(nG,$$o),e(nb,k$o),e(q,S$o),e(q,sb),e(sb,ufe),e(ufe,R$o),e(sb,B$o),e(sb,sG),e(sG,P$o),e(sb,I$o),e(q,q$o),e(q,lb),e(lb,_fe),e(_fe,N$o),e(lb,j$o),e(lb,lG),e(lG,D$o),e(lb,G$o),e(q,O$o),e(q,ib),e(ib,bfe),e(bfe,V$o),e(ib,X$o),e(ib,iG),e(iG,z$o),e(ib,Q$o),e(q,W$o),e(q,db),e(db,vfe),e(vfe,H$o),e(db,U$o),e(db,dG),e(dG,J$o),e(db,Y$o),e(q,K$o),e(q,cb),e(cb,Ffe),e(Ffe,Z$o),e(cb,eko),e(cb,cG),e(cG,oko),e(cb,rko),e(q,tko),e(q,fb),e(fb,Tfe),e(Tfe,ako),e(fb,nko),e(fb,fG),e(fG,sko),e(fb,lko),e(q,iko),e(q,mb),e(mb,Mfe),e(Mfe,dko),e(mb,cko),e(mb,mG),e(mG,fko),e(mb,mko),e(q,gko),e(q,gb),e(gb,Efe),e(Efe,hko),e(gb,pko),e(gb,gG),e(gG,uko),e(gb,_ko),e(q,bko),e(q,hb),e(hb,Cfe),e(Cfe,vko),e(hb,Fko),e(hb,hG),e(hG,Tko),e(hb,Mko),e(q,Eko),e(q,pb),e(pb,wfe),e(wfe,Cko),e(pb,wko),e(pb,pG),e(pG,Ako),e(pb,yko),e(Ze,Lko),e(Ze,ub),e(ub,xko),e(ub,Afe),e(Afe,$ko),e(ub,kko),e(ub,yfe),e(yfe,Sko),e(Ze,Rko),M(_b,Ze,null),b(f,VIe,_),b(f,Gi,_),e(Gi,bb),e(bb,Lfe),M(l0,Lfe,null),e(Gi,Bko),e(Gi,xfe),e(xfe,Pko),b(f,XIe,_),b(f,Bo,_),M(i0,Bo,null),e(Bo,Iko),e(Bo,Oi),e(Oi,qko),e(Oi,uG),e(uG,Nko),e(Oi,jko),e(Oi,_G),e(_G,Dko),e(Oi,Gko),e(Bo,Oko),e(Bo,d0),e(d0,Vko),e(d0,$fe),e($fe,Xko),e(d0,zko),e(Bo,Qko),e(Bo,lt),M(c0,lt,null),e(lt,Wko),e(lt,kfe),e(kfe,Hko),e(lt,Uko),e(lt,Vi),e(Vi,Jko),e(Vi,Sfe),e(Sfe,Yko),e(Vi,Kko),e(Vi,bG),e(bG,Zko),e(Vi,eSo),e(lt,oSo),M(vb,lt,null),e(Bo,rSo),e(Bo,eo),M(f0,eo,null),e(eo,tSo),e(eo,Rfe),e(Rfe,aSo),e(eo,nSo),e(eo,Sa),e(Sa,sSo),e(Sa,Bfe),e(Bfe,lSo),e(Sa,iSo),e(Sa,Pfe),e(Pfe,dSo),e(Sa,cSo),e(Sa,Ife),e(Ife,fSo),e(Sa,mSo),e(eo,gSo),e(eo,Y),e(Y,Fb),e(Fb,qfe),e(qfe,hSo),e(Fb,pSo),e(Fb,vG),e(vG,uSo),e(Fb,_So),e(Y,bSo),e(Y,Tb),e(Tb,Nfe),e(Nfe,vSo),e(Tb,FSo),e(Tb,FG),e(FG,TSo),e(Tb,MSo),e(Y,ESo),e(Y,Mb),e(Mb,jfe),e(jfe,CSo),e(Mb,wSo),e(Mb,TG),e(TG,ASo),e(Mb,ySo),e(Y,LSo),e(Y,Eb),e(Eb,Dfe),e(Dfe,xSo),e(Eb,$So),e(Eb,MG),e(MG,kSo),e(Eb,SSo),e(Y,RSo),e(Y,Cb),e(Cb,Gfe),e(Gfe,BSo),e(Cb,PSo),e(Cb,EG),e(EG,ISo),e(Cb,qSo),e(Y,NSo),e(Y,wb),e(wb,Ofe),e(Ofe,jSo),e(wb,DSo),e(wb,CG),e(CG,GSo),e(wb,OSo),e(Y,VSo),e(Y,Ab),e(Ab,Vfe),e(Vfe,XSo),e(Ab,zSo),e(Ab,wG),e(wG,QSo),e(Ab,WSo),e(Y,HSo),e(Y,yb),e(yb,Xfe),e(Xfe,USo),e(yb,JSo),e(yb,AG),e(AG,YSo),e(yb,KSo),e(Y,ZSo),e(Y,Lb),e(Lb,zfe),e(zfe,eRo),e(Lb,oRo),e(Lb,yG),e(yG,rRo),e(Lb,tRo),e(Y,aRo),e(Y,xb),e(xb,Qfe),e(Qfe,nRo),e(xb,sRo),e(xb,LG),e(LG,lRo),e(xb,iRo),e(Y,dRo),e(Y,$b),e($b,Wfe),e(Wfe,cRo),e($b,fRo),e($b,xG),e(xG,mRo),e($b,gRo),e(Y,hRo),e(Y,kb),e(kb,Hfe),e(Hfe,pRo),e(kb,uRo),e(kb,$G),e($G,_Ro),e(kb,bRo),e(Y,vRo),e(Y,Sb),e(Sb,Ufe),e(Ufe,FRo),e(Sb,TRo),e(Sb,kG),e(kG,MRo),e(Sb,ERo),e(Y,CRo),e(Y,Rb),e(Rb,Jfe),e(Jfe,wRo),e(Rb,ARo),e(Rb,SG),e(SG,yRo),e(Rb,LRo),e(Y,xRo),e(Y,Bb),e(Bb,Yfe),e(Yfe,$Ro),e(Bb,kRo),e(Bb,RG),e(RG,SRo),e(Bb,RRo),e(Y,BRo),e(Y,Pb),e(Pb,Kfe),e(Kfe,PRo),e(Pb,IRo),e(Pb,BG),e(BG,qRo),e(Pb,NRo),e(Y,jRo),e(Y,Ib),e(Ib,Zfe),e(Zfe,DRo),e(Ib,GRo),e(Ib,PG),e(PG,ORo),e(Ib,VRo),e(Y,XRo),e(Y,qb),e(qb,eme),e(eme,zRo),e(qb,QRo),e(qb,IG),e(IG,WRo),e(qb,HRo),e(Y,URo),e(Y,Nb),e(Nb,ome),e(ome,JRo),e(Nb,YRo),e(Nb,qG),e(qG,KRo),e(Nb,ZRo),e(Y,eBo),e(Y,jb),e(jb,rme),e(rme,oBo),e(jb,rBo),e(jb,NG),e(NG,tBo),e(jb,aBo),e(Y,nBo),e(Y,Db),e(Db,tme),e(tme,sBo),e(Db,lBo),e(Db,jG),e(jG,iBo),e(Db,dBo),e(Y,cBo),e(Y,Gb),e(Gb,ame),e(ame,fBo),e(Gb,mBo),e(Gb,DG),e(DG,gBo),e(Gb,hBo),e(Y,pBo),e(Y,Ob),e(Ob,nme),e(nme,uBo),e(Ob,_Bo),e(Ob,GG),e(GG,bBo),e(Ob,vBo),e(Y,FBo),e(Y,Vb),e(Vb,sme),e(sme,TBo),e(Vb,MBo),e(Vb,OG),e(OG,EBo),e(Vb,CBo),e(Y,wBo),e(Y,Xb),e(Xb,lme),e(lme,ABo),e(Xb,yBo),e(Xb,VG),e(VG,LBo),e(Xb,xBo),e(Y,$Bo),e(Y,zb),e(zb,ime),e(ime,kBo),e(zb,SBo),e(zb,XG),e(XG,RBo),e(zb,BBo),e(Y,PBo),e(Y,Qb),e(Qb,dme),e(dme,IBo),e(Qb,qBo),e(Qb,zG),e(zG,NBo),e(Qb,jBo),e(Y,DBo),e(Y,Wb),e(Wb,cme),e(cme,GBo),e(Wb,OBo),e(Wb,QG),e(QG,VBo),e(Wb,XBo),e(Y,zBo),e(Y,Hb),e(Hb,fme),e(fme,QBo),e(Hb,WBo),e(Hb,WG),e(WG,HBo),e(Hb,UBo),e(eo,JBo),e(eo,Ub),e(Ub,YBo),e(Ub,mme),e(mme,KBo),e(Ub,ZBo),e(Ub,gme),e(gme,ePo),e(eo,oPo),M(Jb,eo,null),b(f,zIe,_),b(f,Xi,_),e(Xi,Yb),e(Yb,hme),M(m0,hme,null),e(Xi,rPo),e(Xi,pme),e(pme,tPo),b(f,QIe,_),b(f,Po,_),M(g0,Po,null),e(Po,aPo),e(Po,zi),e(zi,nPo),e(zi,HG),e(HG,sPo),e(zi,lPo),e(zi,UG),e(UG,iPo),e(zi,dPo),e(Po,cPo),e(Po,h0),e(h0,fPo),e(h0,ume),e(ume,mPo),e(h0,gPo),e(Po,hPo),e(Po,it),M(p0,it,null),e(it,pPo),e(it,_me),e(_me,uPo),e(it,_Po),e(it,Qi),e(Qi,bPo),e(Qi,bme),e(bme,vPo),e(Qi,FPo),e(Qi,JG),e(JG,TPo),e(Qi,MPo),e(it,EPo),M(Kb,it,null),e(Po,CPo),e(Po,oo),M(u0,oo,null),e(oo,wPo),e(oo,vme),e(vme,APo),e(oo,yPo),e(oo,Ra),e(Ra,LPo),e(Ra,Fme),e(Fme,xPo),e(Ra,$Po),e(Ra,Tme),e(Tme,kPo),e(Ra,SPo),e(Ra,Mme),e(Mme,RPo),e(Ra,BPo),e(oo,PPo),e(oo,Yr),e(Yr,Zb),e(Zb,Eme),e(Eme,IPo),e(Zb,qPo),e(Zb,YG),e(YG,NPo),e(Zb,jPo),e(Yr,DPo),e(Yr,ev),e(ev,Cme),e(Cme,GPo),e(ev,OPo),e(ev,KG),e(KG,VPo),e(ev,XPo),e(Yr,zPo),e(Yr,ov),e(ov,wme),e(wme,QPo),e(ov,WPo),e(ov,ZG),e(ZG,HPo),e(ov,UPo),e(Yr,JPo),e(Yr,rv),e(rv,Ame),e(Ame,YPo),e(rv,KPo),e(rv,eO),e(eO,ZPo),e(rv,eIo),e(Yr,oIo),e(Yr,tv),e(tv,yme),e(yme,rIo),e(tv,tIo),e(tv,oO),e(oO,aIo),e(tv,nIo),e(oo,sIo),e(oo,av),e(av,lIo),e(av,Lme),e(Lme,iIo),e(av,dIo),e(av,xme),e(xme,cIo),e(oo,fIo),M(nv,oo,null),b(f,WIe,_),b(f,Wi,_),e(Wi,sv),e(sv,$me),M(_0,$me,null),e(Wi,mIo),e(Wi,kme),e(kme,gIo),b(f,HIe,_),b(f,Io,_),M(b0,Io,null),e(Io,hIo),e(Io,Hi),e(Hi,pIo),e(Hi,rO),e(rO,uIo),e(Hi,_Io),e(Hi,tO),e(tO,bIo),e(Hi,vIo),e(Io,FIo),e(Io,v0),e(v0,TIo),e(v0,Sme),e(Sme,MIo),e(v0,EIo),e(Io,CIo),e(Io,dt),M(F0,dt,null),e(dt,wIo),e(dt,Rme),e(Rme,AIo),e(dt,yIo),e(dt,Ui),e(Ui,LIo),e(Ui,Bme),e(Bme,xIo),e(Ui,$Io),e(Ui,aO),e(aO,kIo),e(Ui,SIo),e(dt,RIo),M(lv,dt,null),e(Io,BIo),e(Io,ro),M(T0,ro,null),e(ro,PIo),e(ro,Pme),e(Pme,IIo),e(ro,qIo),e(ro,Ba),e(Ba,NIo),e(Ba,Ime),e(Ime,jIo),e(Ba,DIo),e(Ba,qme),e(qme,GIo),e(Ba,OIo),e(Ba,Nme),e(Nme,VIo),e(Ba,XIo),e(ro,zIo),e(ro,U),e(U,iv),e(iv,jme),e(jme,QIo),e(iv,WIo),e(iv,nO),e(nO,HIo),e(iv,UIo),e(U,JIo),e(U,dv),e(dv,Dme),e(Dme,YIo),e(dv,KIo),e(dv,sO),e(sO,ZIo),e(dv,eqo),e(U,oqo),e(U,cv),e(cv,Gme),e(Gme,rqo),e(cv,tqo),e(cv,lO),e(lO,aqo),e(cv,nqo),e(U,sqo),e(U,fv),e(fv,Ome),e(Ome,lqo),e(fv,iqo),e(fv,iO),e(iO,dqo),e(fv,cqo),e(U,fqo),e(U,mv),e(mv,Vme),e(Vme,mqo),e(mv,gqo),e(mv,dO),e(dO,hqo),e(mv,pqo),e(U,uqo),e(U,gv),e(gv,Xme),e(Xme,_qo),e(gv,bqo),e(gv,cO),e(cO,vqo),e(gv,Fqo),e(U,Tqo),e(U,hv),e(hv,zme),e(zme,Mqo),e(hv,Eqo),e(hv,fO),e(fO,Cqo),e(hv,wqo),e(U,Aqo),e(U,pv),e(pv,Qme),e(Qme,yqo),e(pv,Lqo),e(pv,mO),e(mO,xqo),e(pv,$qo),e(U,kqo),e(U,uv),e(uv,Wme),e(Wme,Sqo),e(uv,Rqo),e(uv,gO),e(gO,Bqo),e(uv,Pqo),e(U,Iqo),e(U,_v),e(_v,Hme),e(Hme,qqo),e(_v,Nqo),e(_v,hO),e(hO,jqo),e(_v,Dqo),e(U,Gqo),e(U,bv),e(bv,Ume),e(Ume,Oqo),e(bv,Vqo),e(bv,pO),e(pO,Xqo),e(bv,zqo),e(U,Qqo),e(U,vv),e(vv,Jme),e(Jme,Wqo),e(vv,Hqo),e(vv,uO),e(uO,Uqo),e(vv,Jqo),e(U,Yqo),e(U,Fv),e(Fv,Yme),e(Yme,Kqo),e(Fv,Zqo),e(Fv,_O),e(_O,eNo),e(Fv,oNo),e(U,rNo),e(U,Tv),e(Tv,Kme),e(Kme,tNo),e(Tv,aNo),e(Tv,bO),e(bO,nNo),e(Tv,sNo),e(U,lNo),e(U,Mv),e(Mv,Zme),e(Zme,iNo),e(Mv,dNo),e(Mv,vO),e(vO,cNo),e(Mv,fNo),e(U,mNo),e(U,Ev),e(Ev,ege),e(ege,gNo),e(Ev,hNo),e(Ev,FO),e(FO,pNo),e(Ev,uNo),e(U,_No),e(U,Cv),e(Cv,oge),e(oge,bNo),e(Cv,vNo),e(Cv,TO),e(TO,FNo),e(Cv,TNo),e(U,MNo),e(U,wv),e(wv,rge),e(rge,ENo),e(wv,CNo),e(wv,MO),e(MO,wNo),e(wv,ANo),e(U,yNo),e(U,Av),e(Av,tge),e(tge,LNo),e(Av,xNo),e(Av,EO),e(EO,$No),e(Av,kNo),e(U,SNo),e(U,yv),e(yv,age),e(age,RNo),e(yv,BNo),e(yv,CO),e(CO,PNo),e(yv,INo),e(U,qNo),e(U,Lv),e(Lv,nge),e(nge,NNo),e(Lv,jNo),e(Lv,wO),e(wO,DNo),e(Lv,GNo),e(U,ONo),e(U,xv),e(xv,sge),e(sge,VNo),e(xv,XNo),e(xv,AO),e(AO,zNo),e(xv,QNo),e(U,WNo),e(U,$v),e($v,lge),e(lge,HNo),e($v,UNo),e($v,yO),e(yO,JNo),e($v,YNo),e(U,KNo),e(U,kv),e(kv,ige),e(ige,ZNo),e(kv,ejo),e(kv,LO),e(LO,ojo),e(kv,rjo),e(U,tjo),e(U,Sv),e(Sv,dge),e(dge,ajo),e(Sv,njo),e(Sv,xO),e(xO,sjo),e(Sv,ljo),e(U,ijo),e(U,Rv),e(Rv,cge),e(cge,djo),e(Rv,cjo),e(Rv,$O),e($O,fjo),e(Rv,mjo),e(U,gjo),e(U,Bv),e(Bv,fge),e(fge,hjo),e(Bv,pjo),e(Bv,kO),e(kO,ujo),e(Bv,_jo),e(U,bjo),e(U,Pv),e(Pv,mge),e(mge,vjo),e(Pv,Fjo),e(Pv,SO),e(SO,Tjo),e(Pv,Mjo),e(U,Ejo),e(U,Iv),e(Iv,gge),e(gge,Cjo),e(Iv,wjo),e(Iv,RO),e(RO,Ajo),e(Iv,yjo),e(U,Ljo),e(U,qv),e(qv,hge),e(hge,xjo),e(qv,$jo),e(qv,BO),e(BO,kjo),e(qv,Sjo),e(U,Rjo),e(U,Nv),e(Nv,pge),e(pge,Bjo),e(Nv,Pjo),e(Nv,PO),e(PO,Ijo),e(Nv,qjo),e(U,Njo),e(U,jv),e(jv,uge),e(uge,jjo),e(jv,Djo),e(jv,IO),e(IO,Gjo),e(jv,Ojo),e(U,Vjo),e(U,Dv),e(Dv,_ge),e(_ge,Xjo),e(Dv,zjo),e(Dv,qO),e(qO,Qjo),e(Dv,Wjo),e(ro,Hjo),e(ro,Gv),e(Gv,Ujo),e(Gv,bge),e(bge,Jjo),e(Gv,Yjo),e(Gv,vge),e(vge,Kjo),e(ro,Zjo),M(Ov,ro,null),b(f,UIe,_),b(f,Ji,_),e(Ji,Vv),e(Vv,Fge),M(M0,Fge,null),e(Ji,eDo),e(Ji,Tge),e(Tge,oDo),b(f,JIe,_),b(f,qo,_),M(E0,qo,null),e(qo,rDo),e(qo,Yi),e(Yi,tDo),e(Yi,NO),e(NO,aDo),e(Yi,nDo),e(Yi,jO),e(jO,sDo),e(Yi,lDo),e(qo,iDo),e(qo,C0),e(C0,dDo),e(C0,Mge),e(Mge,cDo),e(C0,fDo),e(qo,mDo),e(qo,ct),M(w0,ct,null),e(ct,gDo),e(ct,Ege),e(Ege,hDo),e(ct,pDo),e(ct,Ki),e(Ki,uDo),e(Ki,Cge),e(Cge,_Do),e(Ki,bDo),e(Ki,DO),e(DO,vDo),e(Ki,FDo),e(ct,TDo),M(Xv,ct,null),e(qo,MDo),e(qo,to),M(A0,to,null),e(to,EDo),e(to,wge),e(wge,CDo),e(to,wDo),e(to,Pa),e(Pa,ADo),e(Pa,Age),e(Age,yDo),e(Pa,LDo),e(Pa,yge),e(yge,xDo),e(Pa,$Do),e(Pa,Lge),e(Lge,kDo),e(Pa,SDo),e(to,RDo),e(to,V),e(V,zv),e(zv,xge),e(xge,BDo),e(zv,PDo),e(zv,GO),e(GO,IDo),e(zv,qDo),e(V,NDo),e(V,Qv),e(Qv,$ge),e($ge,jDo),e(Qv,DDo),e(Qv,OO),e(OO,GDo),e(Qv,ODo),e(V,VDo),e(V,Wv),e(Wv,kge),e(kge,XDo),e(Wv,zDo),e(Wv,VO),e(VO,QDo),e(Wv,WDo),e(V,HDo),e(V,Hv),e(Hv,Sge),e(Sge,UDo),e(Hv,JDo),e(Hv,XO),e(XO,YDo),e(Hv,KDo),e(V,ZDo),e(V,Uv),e(Uv,Rge),e(Rge,eGo),e(Uv,oGo),e(Uv,zO),e(zO,rGo),e(Uv,tGo),e(V,aGo),e(V,Jv),e(Jv,Bge),e(Bge,nGo),e(Jv,sGo),e(Jv,QO),e(QO,lGo),e(Jv,iGo),e(V,dGo),e(V,Yv),e(Yv,Pge),e(Pge,cGo),e(Yv,fGo),e(Yv,WO),e(WO,mGo),e(Yv,gGo),e(V,hGo),e(V,Kv),e(Kv,Ige),e(Ige,pGo),e(Kv,uGo),e(Kv,HO),e(HO,_Go),e(Kv,bGo),e(V,vGo),e(V,Zv),e(Zv,qge),e(qge,FGo),e(Zv,TGo),e(Zv,UO),e(UO,MGo),e(Zv,EGo),e(V,CGo),e(V,eF),e(eF,Nge),e(Nge,wGo),e(eF,AGo),e(eF,JO),e(JO,yGo),e(eF,LGo),e(V,xGo),e(V,oF),e(oF,jge),e(jge,$Go),e(oF,kGo),e(oF,YO),e(YO,SGo),e(oF,RGo),e(V,BGo),e(V,rF),e(rF,Dge),e(Dge,PGo),e(rF,IGo),e(rF,KO),e(KO,qGo),e(rF,NGo),e(V,jGo),e(V,tF),e(tF,Gge),e(Gge,DGo),e(tF,GGo),e(tF,ZO),e(ZO,OGo),e(tF,VGo),e(V,XGo),e(V,aF),e(aF,Oge),e(Oge,zGo),e(aF,QGo),e(aF,eV),e(eV,WGo),e(aF,HGo),e(V,UGo),e(V,nF),e(nF,Vge),e(Vge,JGo),e(nF,YGo),e(nF,oV),e(oV,KGo),e(nF,ZGo),e(V,eOo),e(V,sF),e(sF,Xge),e(Xge,oOo),e(sF,rOo),e(sF,rV),e(rV,tOo),e(sF,aOo),e(V,nOo),e(V,lF),e(lF,zge),e(zge,sOo),e(lF,lOo),e(lF,tV),e(tV,iOo),e(lF,dOo),e(V,cOo),e(V,iF),e(iF,Qge),e(Qge,fOo),e(iF,mOo),e(iF,aV),e(aV,gOo),e(iF,hOo),e(V,pOo),e(V,dF),e(dF,Wge),e(Wge,uOo),e(dF,_Oo),e(dF,nV),e(nV,bOo),e(dF,vOo),e(V,FOo),e(V,cF),e(cF,Hge),e(Hge,TOo),e(cF,MOo),e(cF,sV),e(sV,EOo),e(cF,COo),e(V,wOo),e(V,fF),e(fF,Uge),e(Uge,AOo),e(fF,yOo),e(fF,lV),e(lV,LOo),e(fF,xOo),e(V,$Oo),e(V,mF),e(mF,Jge),e(Jge,kOo),e(mF,SOo),e(mF,iV),e(iV,ROo),e(mF,BOo),e(V,POo),e(V,gF),e(gF,Yge),e(Yge,IOo),e(gF,qOo),e(gF,dV),e(dV,NOo),e(gF,jOo),e(V,DOo),e(V,hF),e(hF,Kge),e(Kge,GOo),e(hF,OOo),e(hF,cV),e(cV,VOo),e(hF,XOo),e(V,zOo),e(V,pF),e(pF,Zge),e(Zge,QOo),e(pF,WOo),e(pF,fV),e(fV,HOo),e(pF,UOo),e(V,JOo),e(V,uF),e(uF,ehe),e(ehe,YOo),e(uF,KOo),e(uF,mV),e(mV,ZOo),e(uF,eVo),e(V,oVo),e(V,_F),e(_F,ohe),e(ohe,rVo),e(_F,tVo),e(_F,gV),e(gV,aVo),e(_F,nVo),e(V,sVo),e(V,bF),e(bF,rhe),e(rhe,lVo),e(bF,iVo),e(bF,hV),e(hV,dVo),e(bF,cVo),e(V,fVo),e(V,vF),e(vF,the),e(the,mVo),e(vF,gVo),e(vF,pV),e(pV,hVo),e(vF,pVo),e(V,uVo),e(V,FF),e(FF,ahe),e(ahe,_Vo),e(FF,bVo),e(FF,uV),e(uV,vVo),e(FF,FVo),e(V,TVo),e(V,TF),e(TF,nhe),e(nhe,MVo),e(TF,EVo),e(TF,_V),e(_V,CVo),e(TF,wVo),e(V,AVo),e(V,MF),e(MF,she),e(she,yVo),e(MF,LVo),e(MF,bV),e(bV,xVo),e(MF,$Vo),e(V,kVo),e(V,EF),e(EF,lhe),e(lhe,SVo),e(EF,RVo),e(EF,vV),e(vV,BVo),e(EF,PVo),e(V,IVo),e(V,CF),e(CF,ihe),e(ihe,qVo),e(CF,NVo),e(CF,FV),e(FV,jVo),e(CF,DVo),e(V,GVo),e(V,wF),e(wF,dhe),e(dhe,OVo),e(wF,VVo),e(wF,TV),e(TV,XVo),e(wF,zVo),e(V,QVo),e(V,AF),e(AF,che),e(che,WVo),e(AF,HVo),e(AF,MV),e(MV,UVo),e(AF,JVo),e(V,YVo),e(V,yF),e(yF,fhe),e(fhe,KVo),e(yF,ZVo),e(yF,EV),e(EV,eXo),e(yF,oXo),e(V,rXo),e(V,LF),e(LF,mhe),e(mhe,tXo),e(LF,aXo),e(LF,CV),e(CV,nXo),e(LF,sXo),e(V,lXo),e(V,xF),e(xF,ghe),e(ghe,iXo),e(xF,dXo),e(xF,wV),e(wV,cXo),e(xF,fXo),e(to,mXo),e(to,$F),e($F,gXo),e($F,hhe),e(hhe,hXo),e($F,pXo),e($F,phe),e(phe,uXo),e(to,_Xo),M(kF,to,null),b(f,YIe,_),b(f,Zi,_),e(Zi,SF),e(SF,uhe),M(y0,uhe,null),e(Zi,bXo),e(Zi,_he),e(_he,vXo),b(f,KIe,_),b(f,No,_),M(L0,No,null),e(No,FXo),e(No,ed),e(ed,TXo),e(ed,AV),e(AV,MXo),e(ed,EXo),e(ed,yV),e(yV,CXo),e(ed,wXo),e(No,AXo),e(No,x0),e(x0,yXo),e(x0,bhe),e(bhe,LXo),e(x0,xXo),e(No,$Xo),e(No,ft),M($0,ft,null),e(ft,kXo),e(ft,vhe),e(vhe,SXo),e(ft,RXo),e(ft,od),e(od,BXo),e(od,Fhe),e(Fhe,PXo),e(od,IXo),e(od,LV),e(LV,qXo),e(od,NXo),e(ft,jXo),M(RF,ft,null),e(No,DXo),e(No,ao),M(k0,ao,null),e(ao,GXo),e(ao,The),e(The,OXo),e(ao,VXo),e(ao,Ia),e(Ia,XXo),e(Ia,Mhe),e(Mhe,zXo),e(Ia,QXo),e(Ia,Ehe),e(Ehe,WXo),e(Ia,HXo),e(Ia,Che),e(Che,UXo),e(Ia,JXo),e(ao,YXo),e(ao,whe),e(whe,BF),e(BF,Ahe),e(Ahe,KXo),e(BF,ZXo),e(BF,xV),e(xV,ezo),e(BF,ozo),e(ao,rzo),e(ao,PF),e(PF,tzo),e(PF,yhe),e(yhe,azo),e(PF,nzo),e(PF,Lhe),e(Lhe,szo),e(ao,lzo),M(IF,ao,null),b(f,ZIe,_),b(f,rd,_),e(rd,qF),e(qF,xhe),M(S0,xhe,null),e(rd,izo),e(rd,$he),e($he,dzo),b(f,eqe,_),b(f,jo,_),M(R0,jo,null),e(jo,czo),e(jo,td),e(td,fzo),e(td,$V),e($V,mzo),e(td,gzo),e(td,kV),e(kV,hzo),e(td,pzo),e(jo,uzo),e(jo,B0),e(B0,_zo),e(B0,khe),e(khe,bzo),e(B0,vzo),e(jo,Fzo),e(jo,mt),M(P0,mt,null),e(mt,Tzo),e(mt,She),e(She,Mzo),e(mt,Ezo),e(mt,ad),e(ad,Czo),e(ad,Rhe),e(Rhe,wzo),e(ad,Azo),e(ad,SV),e(SV,yzo),e(ad,Lzo),e(mt,xzo),M(NF,mt,null),e(jo,$zo),e(jo,no),M(I0,no,null),e(no,kzo),e(no,Bhe),e(Bhe,Szo),e(no,Rzo),e(no,qa),e(qa,Bzo),e(qa,Phe),e(Phe,Pzo),e(qa,Izo),e(qa,Ihe),e(Ihe,qzo),e(qa,Nzo),e(qa,qhe),e(qhe,jzo),e(qa,Dzo),e(no,Gzo),e(no,Fe),e(Fe,jF),e(jF,Nhe),e(Nhe,Ozo),e(jF,Vzo),e(jF,RV),e(RV,Xzo),e(jF,zzo),e(Fe,Qzo),e(Fe,DF),e(DF,jhe),e(jhe,Wzo),e(DF,Hzo),e(DF,BV),e(BV,Uzo),e(DF,Jzo),e(Fe,Yzo),e(Fe,GF),e(GF,Dhe),e(Dhe,Kzo),e(GF,Zzo),e(GF,PV),e(PV,eQo),e(GF,oQo),e(Fe,rQo),e(Fe,Ps),e(Ps,Ghe),e(Ghe,tQo),e(Ps,aQo),e(Ps,IV),e(IV,nQo),e(Ps,sQo),e(Ps,qV),e(qV,lQo),e(Ps,iQo),e(Fe,dQo),e(Fe,OF),e(OF,Ohe),e(Ohe,cQo),e(OF,fQo),e(OF,NV),e(NV,mQo),e(OF,gQo),e(Fe,hQo),e(Fe,gt),e(gt,Vhe),e(Vhe,pQo),e(gt,uQo),e(gt,jV),e(jV,_Qo),e(gt,bQo),e(gt,DV),e(DV,vQo),e(gt,FQo),e(gt,GV),e(GV,TQo),e(gt,MQo),e(Fe,EQo),e(Fe,VF),e(VF,Xhe),e(Xhe,CQo),e(VF,wQo),e(VF,OV),e(OV,AQo),e(VF,yQo),e(Fe,LQo),e(Fe,XF),e(XF,zhe),e(zhe,xQo),e(XF,$Qo),e(XF,VV),e(VV,kQo),e(XF,SQo),e(Fe,RQo),e(Fe,zF),e(zF,Qhe),e(Qhe,BQo),e(zF,PQo),e(zF,XV),e(XV,IQo),e(zF,qQo),e(Fe,NQo),e(Fe,QF),e(QF,Whe),e(Whe,jQo),e(QF,DQo),e(QF,zV),e(zV,GQo),e(QF,OQo),e(Fe,VQo),e(Fe,WF),e(WF,Hhe),e(Hhe,XQo),e(WF,zQo),e(WF,QV),e(QV,QQo),e(WF,WQo),e(Fe,HQo),e(Fe,HF),e(HF,Uhe),e(Uhe,UQo),e(HF,JQo),e(HF,WV),e(WV,YQo),e(HF,KQo),e(Fe,ZQo),e(Fe,UF),e(UF,Jhe),e(Jhe,eWo),e(UF,oWo),e(UF,HV),e(HV,rWo),e(UF,tWo),e(no,aWo),e(no,JF),e(JF,nWo),e(JF,Yhe),e(Yhe,sWo),e(JF,lWo),e(JF,Khe),e(Khe,iWo),e(no,dWo),M(YF,no,null),b(f,oqe,_),b(f,nd,_),e(nd,KF),e(KF,Zhe),M(q0,Zhe,null),e(nd,cWo),e(nd,epe),e(epe,fWo),b(f,rqe,_),b(f,Do,_),M(N0,Do,null),e(Do,mWo),e(Do,sd),e(sd,gWo),e(sd,UV),e(UV,hWo),e(sd,pWo),e(sd,JV),e(JV,uWo),e(sd,_Wo),e(Do,bWo),e(Do,j0),e(j0,vWo),e(j0,ope),e(ope,FWo),e(j0,TWo),e(Do,MWo),e(Do,ht),M(D0,ht,null),e(ht,EWo),e(ht,rpe),e(rpe,CWo),e(ht,wWo),e(ht,ld),e(ld,AWo),e(ld,tpe),e(tpe,yWo),e(ld,LWo),e(ld,YV),e(YV,xWo),e(ld,$Wo),e(ht,kWo),M(ZF,ht,null),e(Do,SWo),e(Do,so),M(G0,so,null),e(so,RWo),e(so,ape),e(ape,BWo),e(so,PWo),e(so,Na),e(Na,IWo),e(Na,npe),e(npe,qWo),e(Na,NWo),e(Na,spe),e(spe,jWo),e(Na,DWo),e(Na,lpe),e(lpe,GWo),e(Na,OWo),e(so,VWo),e(so,ipe),e(ipe,e6),e(e6,dpe),e(dpe,XWo),e(e6,zWo),e(e6,KV),e(KV,QWo),e(e6,WWo),e(so,HWo),e(so,o6),e(o6,UWo),e(o6,cpe),e(cpe,JWo),e(o6,YWo),e(o6,fpe),e(fpe,KWo),e(so,ZWo),M(r6,so,null),b(f,tqe,_),b(f,id,_),e(id,t6),e(t6,mpe),M(O0,mpe,null),e(id,eHo),e(id,gpe),e(gpe,oHo),b(f,aqe,_),b(f,Go,_),M(V0,Go,null),e(Go,rHo),e(Go,dd),e(dd,tHo),e(dd,ZV),e(ZV,aHo),e(dd,nHo),e(dd,eX),e(eX,sHo),e(dd,lHo),e(Go,iHo),e(Go,X0),e(X0,dHo),e(X0,hpe),e(hpe,cHo),e(X0,fHo),e(Go,mHo),e(Go,pt),M(z0,pt,null),e(pt,gHo),e(pt,ppe),e(ppe,hHo),e(pt,pHo),e(pt,cd),e(cd,uHo),e(cd,upe),e(upe,_Ho),e(cd,bHo),e(cd,oX),e(oX,vHo),e(cd,FHo),e(pt,THo),M(a6,pt,null),e(Go,MHo),e(Go,lo),M(Q0,lo,null),e(lo,EHo),e(lo,_pe),e(_pe,CHo),e(lo,wHo),e(lo,ja),e(ja,AHo),e(ja,bpe),e(bpe,yHo),e(ja,LHo),e(ja,vpe),e(vpe,xHo),e(ja,$Ho),e(ja,Fpe),e(Fpe,kHo),e(ja,SHo),e(lo,RHo),e(lo,je),e(je,n6),e(n6,Tpe),e(Tpe,BHo),e(n6,PHo),e(n6,rX),e(rX,IHo),e(n6,qHo),e(je,NHo),e(je,s6),e(s6,Mpe),e(Mpe,jHo),e(s6,DHo),e(s6,tX),e(tX,GHo),e(s6,OHo),e(je,VHo),e(je,l6),e(l6,Epe),e(Epe,XHo),e(l6,zHo),e(l6,aX),e(aX,QHo),e(l6,WHo),e(je,HHo),e(je,i6),e(i6,Cpe),e(Cpe,UHo),e(i6,JHo),e(i6,nX),e(nX,YHo),e(i6,KHo),e(je,ZHo),e(je,d6),e(d6,wpe),e(wpe,eUo),e(d6,oUo),e(d6,sX),e(sX,rUo),e(d6,tUo),e(je,aUo),e(je,c6),e(c6,Ape),e(Ape,nUo),e(c6,sUo),e(c6,lX),e(lX,lUo),e(c6,iUo),e(je,dUo),e(je,f6),e(f6,ype),e(ype,cUo),e(f6,fUo),e(f6,iX),e(iX,mUo),e(f6,gUo),e(je,hUo),e(je,m6),e(m6,Lpe),e(Lpe,pUo),e(m6,uUo),e(m6,dX),e(dX,_Uo),e(m6,bUo),e(lo,vUo),e(lo,g6),e(g6,FUo),e(g6,xpe),e(xpe,TUo),e(g6,MUo),e(g6,$pe),e($pe,EUo),e(lo,CUo),M(h6,lo,null),b(f,nqe,_),b(f,fd,_),e(fd,p6),e(p6,kpe),M(W0,kpe,null),e(fd,wUo),e(fd,Spe),e(Spe,AUo),b(f,sqe,_),b(f,Oo,_),M(H0,Oo,null),e(Oo,yUo),e(Oo,md),e(md,LUo),e(md,cX),e(cX,xUo),e(md,$Uo),e(md,fX),e(fX,kUo),e(md,SUo),e(Oo,RUo),e(Oo,U0),e(U0,BUo),e(U0,Rpe),e(Rpe,PUo),e(U0,IUo),e(Oo,qUo),e(Oo,ut),M(J0,ut,null),e(ut,NUo),e(ut,Bpe),e(Bpe,jUo),e(ut,DUo),e(ut,gd),e(gd,GUo),e(gd,Ppe),e(Ppe,OUo),e(gd,VUo),e(gd,mX),e(mX,XUo),e(gd,zUo),e(ut,QUo),M(u6,ut,null),e(Oo,WUo),e(Oo,io),M(Y0,io,null),e(io,HUo),e(io,Ipe),e(Ipe,UUo),e(io,JUo),e(io,Da),e(Da,YUo),e(Da,qpe),e(qpe,KUo),e(Da,ZUo),e(Da,Npe),e(Npe,eJo),e(Da,oJo),e(Da,jpe),e(jpe,rJo),e(Da,tJo),e(io,aJo),e(io,Ga),e(Ga,_6),e(_6,Dpe),e(Dpe,nJo),e(_6,sJo),e(_6,gX),e(gX,lJo),e(_6,iJo),e(Ga,dJo),e(Ga,b6),e(b6,Gpe),e(Gpe,cJo),e(b6,fJo),e(b6,hX),e(hX,mJo),e(b6,gJo),e(Ga,hJo),e(Ga,v6),e(v6,Ope),e(Ope,pJo),e(v6,uJo),e(v6,pX),e(pX,_Jo),e(v6,bJo),e(Ga,vJo),e(Ga,F6),e(F6,Vpe),e(Vpe,FJo),e(F6,TJo),e(F6,uX),e(uX,MJo),e(F6,EJo),e(io,CJo),e(io,T6),e(T6,wJo),e(T6,Xpe),e(Xpe,AJo),e(T6,yJo),e(T6,zpe),e(zpe,LJo),e(io,xJo),M(M6,io,null),b(f,lqe,_),b(f,hd,_),e(hd,E6),e(E6,Qpe),M(K0,Qpe,null),e(hd,$Jo),e(hd,Wpe),e(Wpe,kJo),b(f,iqe,_),b(f,Vo,_),M(Z0,Vo,null),e(Vo,SJo),e(Vo,pd),e(pd,RJo),e(pd,_X),e(_X,BJo),e(pd,PJo),e(pd,bX),e(bX,IJo),e(pd,qJo),e(Vo,NJo),e(Vo,ey),e(ey,jJo),e(ey,Hpe),e(Hpe,DJo),e(ey,GJo),e(Vo,OJo),e(Vo,_t),M(oy,_t,null),e(_t,VJo),e(_t,Upe),e(Upe,XJo),e(_t,zJo),e(_t,ud),e(ud,QJo),e(ud,Jpe),e(Jpe,WJo),e(ud,HJo),e(ud,vX),e(vX,UJo),e(ud,JJo),e(_t,YJo),M(C6,_t,null),e(Vo,KJo),e(Vo,co),M(ry,co,null),e(co,ZJo),e(co,Ype),e(Ype,eYo),e(co,oYo),e(co,Oa),e(Oa,rYo),e(Oa,Kpe),e(Kpe,tYo),e(Oa,aYo),e(Oa,Zpe),e(Zpe,nYo),e(Oa,sYo),e(Oa,eue),e(eue,lYo),e(Oa,iYo),e(co,dYo),e(co,De),e(De,w6),e(w6,oue),e(oue,cYo),e(w6,fYo),e(w6,FX),e(FX,mYo),e(w6,gYo),e(De,hYo),e(De,A6),e(A6,rue),e(rue,pYo),e(A6,uYo),e(A6,TX),e(TX,_Yo),e(A6,bYo),e(De,vYo),e(De,y6),e(y6,tue),e(tue,FYo),e(y6,TYo),e(y6,MX),e(MX,MYo),e(y6,EYo),e(De,CYo),e(De,L6),e(L6,aue),e(aue,wYo),e(L6,AYo),e(L6,EX),e(EX,yYo),e(L6,LYo),e(De,xYo),e(De,x6),e(x6,nue),e(nue,$Yo),e(x6,kYo),e(x6,CX),e(CX,SYo),e(x6,RYo),e(De,BYo),e(De,$6),e($6,sue),e(sue,PYo),e($6,IYo),e($6,wX),e(wX,qYo),e($6,NYo),e(De,jYo),e(De,k6),e(k6,lue),e(lue,DYo),e(k6,GYo),e(k6,AX),e(AX,OYo),e(k6,VYo),e(De,XYo),e(De,S6),e(S6,iue),e(iue,zYo),e(S6,QYo),e(S6,yX),e(yX,WYo),e(S6,HYo),e(co,UYo),e(co,R6),e(R6,JYo),e(R6,due),e(due,YYo),e(R6,KYo),e(R6,cue),e(cue,ZYo),e(co,eKo),M(B6,co,null),b(f,dqe,_),b(f,_d,_),e(_d,P6),e(P6,fue),M(ty,fue,null),e(_d,oKo),e(_d,mue),e(mue,rKo),b(f,cqe,_),b(f,Xo,_),M(ay,Xo,null),e(Xo,tKo),e(Xo,bd),e(bd,aKo),e(bd,LX),e(LX,nKo),e(bd,sKo),e(bd,xX),e(xX,lKo),e(bd,iKo),e(Xo,dKo),e(Xo,ny),e(ny,cKo),e(ny,gue),e(gue,fKo),e(ny,mKo),e(Xo,gKo),e(Xo,bt),M(sy,bt,null),e(bt,hKo),e(bt,hue),e(hue,pKo),e(bt,uKo),e(bt,vd),e(vd,_Ko),e(vd,pue),e(pue,bKo),e(vd,vKo),e(vd,$X),e($X,FKo),e(vd,TKo),e(bt,MKo),M(I6,bt,null),e(Xo,EKo),e(Xo,fo),M(ly,fo,null),e(fo,CKo),e(fo,uue),e(uue,wKo),e(fo,AKo),e(fo,Va),e(Va,yKo),e(Va,_ue),e(_ue,LKo),e(Va,xKo),e(Va,bue),e(bue,$Ko),e(Va,kKo),e(Va,vue),e(vue,SKo),e(Va,RKo),e(fo,BKo),e(fo,iy),e(iy,q6),e(q6,Fue),e(Fue,PKo),e(q6,IKo),e(q6,kX),e(kX,qKo),e(q6,NKo),e(iy,jKo),e(iy,N6),e(N6,Tue),e(Tue,DKo),e(N6,GKo),e(N6,SX),e(SX,OKo),e(N6,VKo),e(fo,XKo),e(fo,j6),e(j6,zKo),e(j6,Mue),e(Mue,QKo),e(j6,WKo),e(j6,Eue),e(Eue,HKo),e(fo,UKo),M(D6,fo,null),b(f,fqe,_),b(f,Fd,_),e(Fd,G6),e(G6,Cue),M(dy,Cue,null),e(Fd,JKo),e(Fd,wue),e(wue,YKo),b(f,mqe,_),b(f,zo,_),M(cy,zo,null),e(zo,KKo),e(zo,Td),e(Td,ZKo),e(Td,RX),e(RX,eZo),e(Td,oZo),e(Td,BX),e(BX,rZo),e(Td,tZo),e(zo,aZo),e(zo,fy),e(fy,nZo),e(fy,Aue),e(Aue,sZo),e(fy,lZo),e(zo,iZo),e(zo,vt),M(my,vt,null),e(vt,dZo),e(vt,yue),e(yue,cZo),e(vt,fZo),e(vt,Md),e(Md,mZo),e(Md,Lue),e(Lue,gZo),e(Md,hZo),e(Md,PX),e(PX,pZo),e(Md,uZo),e(vt,_Zo),M(O6,vt,null),e(zo,bZo),e(zo,mo),M(gy,mo,null),e(mo,vZo),e(mo,xue),e(xue,FZo),e(mo,TZo),e(mo,Xa),e(Xa,MZo),e(Xa,$ue),e($ue,EZo),e(Xa,CZo),e(Xa,kue),e(kue,wZo),e(Xa,AZo),e(Xa,Sue),e(Sue,yZo),e(Xa,LZo),e(mo,xZo),e(mo,za),e(za,V6),e(V6,Rue),e(Rue,$Zo),e(V6,kZo),e(V6,IX),e(IX,SZo),e(V6,RZo),e(za,BZo),e(za,X6),e(X6,Bue),e(Bue,PZo),e(X6,IZo),e(X6,qX),e(qX,qZo),e(X6,NZo),e(za,jZo),e(za,z6),e(z6,Pue),e(Pue,DZo),e(z6,GZo),e(z6,NX),e(NX,OZo),e(z6,VZo),e(za,XZo),e(za,Q6),e(Q6,Iue),e(Iue,zZo),e(Q6,QZo),e(Q6,jX),e(jX,WZo),e(Q6,HZo),e(mo,UZo),e(mo,W6),e(W6,JZo),e(W6,que),e(que,YZo),e(W6,KZo),e(W6,Nue),e(Nue,ZZo),e(mo,eer),M(H6,mo,null),b(f,gqe,_),b(f,Ed,_),e(Ed,U6),e(U6,jue),M(hy,jue,null),e(Ed,oer),e(Ed,Due),e(Due,rer),b(f,hqe,_),b(f,Qo,_),M(py,Qo,null),e(Qo,ter),e(Qo,Cd),e(Cd,aer),e(Cd,DX),e(DX,ner),e(Cd,ser),e(Cd,GX),e(GX,ler),e(Cd,ier),e(Qo,der),e(Qo,uy),e(uy,cer),e(uy,Gue),e(Gue,fer),e(uy,mer),e(Qo,ger),e(Qo,Ft),M(_y,Ft,null),e(Ft,her),e(Ft,Oue),e(Oue,per),e(Ft,uer),e(Ft,wd),e(wd,_er),e(wd,Vue),e(Vue,ber),e(wd,ver),e(wd,OX),e(OX,Fer),e(wd,Ter),e(Ft,Mer),M(J6,Ft,null),e(Qo,Eer),e(Qo,go),M(by,go,null),e(go,Cer),e(go,Xue),e(Xue,wer),e(go,Aer),e(go,Qa),e(Qa,yer),e(Qa,zue),e(zue,Ler),e(Qa,xer),e(Qa,Que),e(Que,$er),e(Qa,ker),e(Qa,Wue),e(Wue,Ser),e(Qa,Rer),e(go,Ber),e(go,Ad),e(Ad,Y6),e(Y6,Hue),e(Hue,Per),e(Y6,Ier),e(Y6,VX),e(VX,qer),e(Y6,Ner),e(Ad,jer),e(Ad,K6),e(K6,Uue),e(Uue,Der),e(K6,Ger),e(K6,XX),e(XX,Oer),e(K6,Ver),e(Ad,Xer),e(Ad,Z6),e(Z6,Jue),e(Jue,zer),e(Z6,Qer),e(Z6,zX),e(zX,Wer),e(Z6,Her),e(go,Uer),e(go,eT),e(eT,Jer),e(eT,Yue),e(Yue,Yer),e(eT,Ker),e(eT,Kue),e(Kue,Zer),e(go,eor),M(oT,go,null),b(f,pqe,_),b(f,yd,_),e(yd,rT),e(rT,Zue),M(vy,Zue,null),e(yd,oor),e(yd,e_e),e(e_e,ror),b(f,uqe,_),b(f,Wo,_),M(Fy,Wo,null),e(Wo,tor),e(Wo,Ld),e(Ld,aor),e(Ld,QX),e(QX,nor),e(Ld,sor),e(Ld,WX),e(WX,lor),e(Ld,ior),e(Wo,dor),e(Wo,Ty),e(Ty,cor),e(Ty,o_e),e(o_e,mor),e(Ty,gor),e(Wo,hor),e(Wo,Tt),M(My,Tt,null),e(Tt,por),e(Tt,r_e),e(r_e,uor),e(Tt,_or),e(Tt,xd),e(xd,bor),e(xd,t_e),e(t_e,vor),e(xd,For),e(xd,HX),e(HX,Tor),e(xd,Mor),e(Tt,Eor),M(tT,Tt,null),e(Wo,Cor),e(Wo,ho),M(Ey,ho,null),e(ho,wor),e(ho,a_e),e(a_e,Aor),e(ho,yor),e(ho,Wa),e(Wa,Lor),e(Wa,n_e),e(n_e,xor),e(Wa,$or),e(Wa,s_e),e(s_e,kor),e(Wa,Sor),e(Wa,l_e),e(l_e,Ror),e(Wa,Bor),e(ho,Por),e(ho,Cy),e(Cy,aT),e(aT,i_e),e(i_e,Ior),e(aT,qor),e(aT,UX),e(UX,Nor),e(aT,jor),e(Cy,Dor),e(Cy,nT),e(nT,d_e),e(d_e,Gor),e(nT,Oor),e(nT,JX),e(JX,Vor),e(nT,Xor),e(ho,zor),e(ho,sT),e(sT,Qor),e(sT,c_e),e(c_e,Wor),e(sT,Hor),e(sT,f_e),e(f_e,Uor),e(ho,Jor),M(lT,ho,null),b(f,_qe,_),b(f,$d,_),e($d,iT),e(iT,m_e),M(wy,m_e,null),e($d,Yor),e($d,g_e),e(g_e,Kor),b(f,bqe,_),b(f,Ho,_),M(Ay,Ho,null),e(Ho,Zor),e(Ho,kd),e(kd,err),e(kd,YX),e(YX,orr),e(kd,rrr),e(kd,KX),e(KX,trr),e(kd,arr),e(Ho,nrr),e(Ho,yy),e(yy,srr),e(yy,h_e),e(h_e,lrr),e(yy,irr),e(Ho,drr),e(Ho,Mt),M(Ly,Mt,null),e(Mt,crr),e(Mt,p_e),e(p_e,frr),e(Mt,mrr),e(Mt,Sd),e(Sd,grr),e(Sd,u_e),e(u_e,hrr),e(Sd,prr),e(Sd,ZX),e(ZX,urr),e(Sd,_rr),e(Mt,brr),M(dT,Mt,null),e(Ho,vrr),e(Ho,po),M(xy,po,null),e(po,Frr),e(po,__e),e(__e,Trr),e(po,Mrr),e(po,Ha),e(Ha,Err),e(Ha,b_e),e(b_e,Crr),e(Ha,wrr),e(Ha,v_e),e(v_e,Arr),e(Ha,yrr),e(Ha,F_e),e(F_e,Lrr),e(Ha,xrr),e(po,$rr),e(po,T_e),e(T_e,cT),e(cT,M_e),e(M_e,krr),e(cT,Srr),e(cT,ez),e(ez,Rrr),e(cT,Brr),e(po,Prr),e(po,fT),e(fT,Irr),e(fT,E_e),e(E_e,qrr),e(fT,Nrr),e(fT,C_e),e(C_e,jrr),e(po,Drr),M(mT,po,null),b(f,vqe,_),b(f,Rd,_),e(Rd,gT),e(gT,w_e),M($y,w_e,null),e(Rd,Grr),e(Rd,A_e),e(A_e,Orr),b(f,Fqe,_),b(f,Uo,_),M(ky,Uo,null),e(Uo,Vrr),e(Uo,Bd),e(Bd,Xrr),e(Bd,oz),e(oz,zrr),e(Bd,Qrr),e(Bd,rz),e(rz,Wrr),e(Bd,Hrr),e(Uo,Urr),e(Uo,Sy),e(Sy,Jrr),e(Sy,y_e),e(y_e,Yrr),e(Sy,Krr),e(Uo,Zrr),e(Uo,Et),M(Ry,Et,null),e(Et,etr),e(Et,L_e),e(L_e,otr),e(Et,rtr),e(Et,Pd),e(Pd,ttr),e(Pd,x_e),e(x_e,atr),e(Pd,ntr),e(Pd,tz),e(tz,str),e(Pd,ltr),e(Et,itr),M(hT,Et,null),e(Uo,dtr),e(Uo,uo),M(By,uo,null),e(uo,ctr),e(uo,$_e),e($_e,ftr),e(uo,mtr),e(uo,Ua),e(Ua,gtr),e(Ua,k_e),e(k_e,htr),e(Ua,ptr),e(Ua,S_e),e(S_e,utr),e(Ua,_tr),e(Ua,R_e),e(R_e,btr),e(Ua,vtr),e(uo,Ftr),e(uo,Ja),e(Ja,pT),e(pT,B_e),e(B_e,Ttr),e(pT,Mtr),e(pT,az),e(az,Etr),e(pT,Ctr),e(Ja,wtr),e(Ja,uT),e(uT,P_e),e(P_e,Atr),e(uT,ytr),e(uT,nz),e(nz,Ltr),e(uT,xtr),e(Ja,$tr),e(Ja,_T),e(_T,I_e),e(I_e,ktr),e(_T,Str),e(_T,sz),e(sz,Rtr),e(_T,Btr),e(Ja,Ptr),e(Ja,bT),e(bT,q_e),e(q_e,Itr),e(bT,qtr),e(bT,lz),e(lz,Ntr),e(bT,jtr),e(uo,Dtr),e(uo,vT),e(vT,Gtr),e(vT,N_e),e(N_e,Otr),e(vT,Vtr),e(vT,j_e),e(j_e,Xtr),e(uo,ztr),M(FT,uo,null),b(f,Tqe,_),b(f,Id,_),e(Id,TT),e(TT,D_e),M(Py,D_e,null),e(Id,Qtr),e(Id,G_e),e(G_e,Wtr),b(f,Mqe,_),b(f,Jo,_),M(Iy,Jo,null),e(Jo,Htr),e(Jo,qd),e(qd,Utr),e(qd,iz),e(iz,Jtr),e(qd,Ytr),e(qd,dz),e(dz,Ktr),e(qd,Ztr),e(Jo,ear),e(Jo,qy),e(qy,oar),e(qy,O_e),e(O_e,rar),e(qy,tar),e(Jo,aar),e(Jo,Ct),M(Ny,Ct,null),e(Ct,nar),e(Ct,V_e),e(V_e,sar),e(Ct,lar),e(Ct,Nd),e(Nd,iar),e(Nd,X_e),e(X_e,dar),e(Nd,car),e(Nd,cz),e(cz,far),e(Nd,mar),e(Ct,gar),M(MT,Ct,null),e(Jo,har),e(Jo,_o),M(jy,_o,null),e(_o,par),e(_o,z_e),e(z_e,uar),e(_o,_ar),e(_o,Ya),e(Ya,bar),e(Ya,Q_e),e(Q_e,Far),e(Ya,Tar),e(Ya,W_e),e(W_e,Mar),e(Ya,Ear),e(Ya,H_e),e(H_e,Car),e(Ya,war),e(_o,Aar),e(_o,U_e),e(U_e,ET),e(ET,J_e),e(J_e,yar),e(ET,Lar),e(ET,fz),e(fz,xar),e(ET,$ar),e(_o,kar),e(_o,CT),e(CT,Sar),e(CT,Y_e),e(Y_e,Rar),e(CT,Bar),e(CT,K_e),e(K_e,Par),e(_o,Iar),M(wT,_o,null),b(f,Eqe,_),b(f,jd,_),e(jd,AT),e(AT,Z_e),M(Dy,Z_e,null),e(jd,qar),e(jd,e2e),e(e2e,Nar),b(f,Cqe,_),b(f,Yo,_),M(Gy,Yo,null),e(Yo,jar),e(Yo,Dd),e(Dd,Dar),e(Dd,mz),e(mz,Gar),e(Dd,Oar),e(Dd,gz),e(gz,Var),e(Dd,Xar),e(Yo,zar),e(Yo,Oy),e(Oy,Qar),e(Oy,o2e),e(o2e,War),e(Oy,Har),e(Yo,Uar),e(Yo,wt),M(Vy,wt,null),e(wt,Jar),e(wt,r2e),e(r2e,Yar),e(wt,Kar),e(wt,Gd),e(Gd,Zar),e(Gd,t2e),e(t2e,enr),e(Gd,onr),e(Gd,hz),e(hz,rnr),e(Gd,tnr),e(wt,anr),M(yT,wt,null),e(Yo,nnr),e(Yo,wr),M(Xy,wr,null),e(wr,snr),e(wr,a2e),e(a2e,lnr),e(wr,inr),e(wr,Ka),e(Ka,dnr),e(Ka,n2e),e(n2e,cnr),e(Ka,fnr),e(Ka,s2e),e(s2e,mnr),e(Ka,gnr),e(Ka,l2e),e(l2e,hnr),e(Ka,pnr),e(wr,unr),e(wr,N),e(N,LT),e(LT,i2e),e(i2e,_nr),e(LT,bnr),e(LT,pz),e(pz,vnr),e(LT,Fnr),e(N,Tnr),e(N,xT),e(xT,d2e),e(d2e,Mnr),e(xT,Enr),e(xT,uz),e(uz,Cnr),e(xT,wnr),e(N,Anr),e(N,$T),e($T,c2e),e(c2e,ynr),e($T,Lnr),e($T,_z),e(_z,xnr),e($T,$nr),e(N,knr),e(N,kT),e(kT,f2e),e(f2e,Snr),e(kT,Rnr),e(kT,bz),e(bz,Bnr),e(kT,Pnr),e(N,Inr),e(N,ST),e(ST,m2e),e(m2e,qnr),e(ST,Nnr),e(ST,vz),e(vz,jnr),e(ST,Dnr),e(N,Gnr),e(N,RT),e(RT,g2e),e(g2e,Onr),e(RT,Vnr),e(RT,Fz),e(Fz,Xnr),e(RT,znr),e(N,Qnr),e(N,BT),e(BT,h2e),e(h2e,Wnr),e(BT,Hnr),e(BT,Tz),e(Tz,Unr),e(BT,Jnr),e(N,Ynr),e(N,PT),e(PT,p2e),e(p2e,Knr),e(PT,Znr),e(PT,Mz),e(Mz,esr),e(PT,osr),e(N,rsr),e(N,IT),e(IT,u2e),e(u2e,tsr),e(IT,asr),e(IT,Ez),e(Ez,nsr),e(IT,ssr),e(N,lsr),e(N,qT),e(qT,_2e),e(_2e,isr),e(qT,dsr),e(qT,Cz),e(Cz,csr),e(qT,fsr),e(N,msr),e(N,NT),e(NT,b2e),e(b2e,gsr),e(NT,hsr),e(NT,wz),e(wz,psr),e(NT,usr),e(N,_sr),e(N,jT),e(jT,v2e),e(v2e,bsr),e(jT,vsr),e(jT,Az),e(Az,Fsr),e(jT,Tsr),e(N,Msr),e(N,DT),e(DT,F2e),e(F2e,Esr),e(DT,Csr),e(DT,yz),e(yz,wsr),e(DT,Asr),e(N,ysr),e(N,GT),e(GT,T2e),e(T2e,Lsr),e(GT,xsr),e(GT,Lz),e(Lz,$sr),e(GT,ksr),e(N,Ssr),e(N,OT),e(OT,M2e),e(M2e,Rsr),e(OT,Bsr),e(OT,xz),e(xz,Psr),e(OT,Isr),e(N,qsr),e(N,VT),e(VT,E2e),e(E2e,Nsr),e(VT,jsr),e(VT,$z),e($z,Dsr),e(VT,Gsr),e(N,Osr),e(N,XT),e(XT,C2e),e(C2e,Vsr),e(XT,Xsr),e(XT,kz),e(kz,zsr),e(XT,Qsr),e(N,Wsr),e(N,Is),e(Is,w2e),e(w2e,Hsr),e(Is,Usr),e(Is,Sz),e(Sz,Jsr),e(Is,Ysr),e(Is,Rz),e(Rz,Ksr),e(Is,Zsr),e(N,elr),e(N,zT),e(zT,A2e),e(A2e,olr),e(zT,rlr),e(zT,Bz),e(Bz,tlr),e(zT,alr),e(N,nlr),e(N,QT),e(QT,y2e),e(y2e,slr),e(QT,llr),e(QT,Pz),e(Pz,ilr),e(QT,dlr),e(N,clr),e(N,WT),e(WT,L2e),e(L2e,flr),e(WT,mlr),e(WT,Iz),e(Iz,glr),e(WT,hlr),e(N,plr),e(N,HT),e(HT,x2e),e(x2e,ulr),e(HT,_lr),e(HT,qz),e(qz,blr),e(HT,vlr),e(N,Flr),e(N,UT),e(UT,$2e),e($2e,Tlr),e(UT,Mlr),e(UT,Nz),e(Nz,Elr),e(UT,Clr),e(N,wlr),e(N,JT),e(JT,k2e),e(k2e,Alr),e(JT,ylr),e(JT,jz),e(jz,Llr),e(JT,xlr),e(N,$lr),e(N,YT),e(YT,S2e),e(S2e,klr),e(YT,Slr),e(YT,Dz),e(Dz,Rlr),e(YT,Blr),e(N,Plr),e(N,KT),e(KT,R2e),e(R2e,Ilr),e(KT,qlr),e(KT,Gz),e(Gz,Nlr),e(KT,jlr),e(N,Dlr),e(N,ZT),e(ZT,B2e),e(B2e,Glr),e(ZT,Olr),e(ZT,Oz),e(Oz,Vlr),e(ZT,Xlr),e(N,zlr),e(N,e9),e(e9,P2e),e(P2e,Qlr),e(e9,Wlr),e(e9,Vz),e(Vz,Hlr),e(e9,Ulr),e(N,Jlr),e(N,o9),e(o9,I2e),e(I2e,Ylr),e(o9,Klr),e(o9,Xz),e(Xz,Zlr),e(o9,eir),e(N,oir),e(N,r9),e(r9,q2e),e(q2e,rir),e(r9,tir),e(r9,zz),e(zz,air),e(r9,nir),e(N,sir),e(N,t9),e(t9,N2e),e(N2e,lir),e(t9,iir),e(t9,Qz),e(Qz,dir),e(t9,cir),e(N,fir),e(N,a9),e(a9,j2e),e(j2e,mir),e(a9,gir),e(a9,Wz),e(Wz,hir),e(a9,pir),e(N,uir),e(N,n9),e(n9,D2e),e(D2e,_ir),e(n9,bir),e(n9,Hz),e(Hz,vir),e(n9,Fir),e(N,Tir),e(N,s9),e(s9,G2e),e(G2e,Mir),e(s9,Eir),e(s9,Uz),e(Uz,Cir),e(s9,wir),e(N,Air),e(N,l9),e(l9,O2e),e(O2e,yir),e(l9,Lir),e(l9,Jz),e(Jz,xir),e(l9,$ir),e(N,kir),e(N,i9),e(i9,V2e),e(V2e,Sir),e(i9,Rir),e(i9,Yz),e(Yz,Bir),e(i9,Pir),e(N,Iir),e(N,d9),e(d9,X2e),e(X2e,qir),e(d9,Nir),e(d9,Kz),e(Kz,jir),e(d9,Dir),e(N,Gir),e(N,c9),e(c9,z2e),e(z2e,Oir),e(c9,Vir),e(c9,Zz),e(Zz,Xir),e(c9,zir),e(N,Qir),e(N,f9),e(f9,Q2e),e(Q2e,Wir),e(f9,Hir),e(f9,eQ),e(eQ,Uir),e(f9,Jir),e(N,Yir),e(N,m9),e(m9,W2e),e(W2e,Kir),e(m9,Zir),e(m9,oQ),e(oQ,edr),e(m9,odr),e(N,rdr),e(N,g9),e(g9,H2e),e(H2e,tdr),e(g9,adr),e(g9,rQ),e(rQ,ndr),e(g9,sdr),e(N,ldr),e(N,h9),e(h9,U2e),e(U2e,idr),e(h9,ddr),e(h9,tQ),e(tQ,cdr),e(h9,fdr),e(N,mdr),e(N,p9),e(p9,J2e),e(J2e,gdr),e(p9,hdr),e(p9,aQ),e(aQ,pdr),e(p9,udr),e(N,_dr),e(N,u9),e(u9,Y2e),e(Y2e,bdr),e(u9,vdr),e(u9,nQ),e(nQ,Fdr),e(u9,Tdr),e(N,Mdr),e(N,_9),e(_9,K2e),e(K2e,Edr),e(_9,Cdr),e(_9,sQ),e(sQ,wdr),e(_9,Adr),e(N,ydr),e(N,b9),e(b9,Z2e),e(Z2e,Ldr),e(b9,xdr),e(b9,lQ),e(lQ,$dr),e(b9,kdr),e(wr,Sdr),M(v9,wr,null),b(f,wqe,_),b(f,Od,_),e(Od,F9),e(F9,e1e),M(zy,e1e,null),e(Od,Rdr),e(Od,o1e),e(o1e,Bdr),b(f,Aqe,_),b(f,Ko,_),M(Qy,Ko,null),e(Ko,Pdr),e(Ko,Vd),e(Vd,Idr),e(Vd,iQ),e(iQ,qdr),e(Vd,Ndr),e(Vd,dQ),e(dQ,jdr),e(Vd,Ddr),e(Ko,Gdr),e(Ko,Wy),e(Wy,Odr),e(Wy,r1e),e(r1e,Vdr),e(Wy,Xdr),e(Ko,zdr),e(Ko,At),M(Hy,At,null),e(At,Qdr),e(At,t1e),e(t1e,Wdr),e(At,Hdr),e(At,Xd),e(Xd,Udr),e(Xd,a1e),e(a1e,Jdr),e(Xd,Ydr),e(Xd,cQ),e(cQ,Kdr),e(Xd,Zdr),e(At,ecr),M(T9,At,null),e(Ko,ocr),e(Ko,Ar),M(Uy,Ar,null),e(Ar,rcr),e(Ar,n1e),e(n1e,tcr),e(Ar,acr),e(Ar,Za),e(Za,ncr),e(Za,s1e),e(s1e,scr),e(Za,lcr),e(Za,l1e),e(l1e,icr),e(Za,dcr),e(Za,i1e),e(i1e,ccr),e(Za,fcr),e(Ar,mcr),e(Ar,se),e(se,M9),e(M9,d1e),e(d1e,gcr),e(M9,hcr),e(M9,fQ),e(fQ,pcr),e(M9,ucr),e(se,_cr),e(se,E9),e(E9,c1e),e(c1e,bcr),e(E9,vcr),e(E9,mQ),e(mQ,Fcr),e(E9,Tcr),e(se,Mcr),e(se,C9),e(C9,f1e),e(f1e,Ecr),e(C9,Ccr),e(C9,gQ),e(gQ,wcr),e(C9,Acr),e(se,ycr),e(se,w9),e(w9,m1e),e(m1e,Lcr),e(w9,xcr),e(w9,hQ),e(hQ,$cr),e(w9,kcr),e(se,Scr),e(se,A9),e(A9,g1e),e(g1e,Rcr),e(A9,Bcr),e(A9,pQ),e(pQ,Pcr),e(A9,Icr),e(se,qcr),e(se,y9),e(y9,h1e),e(h1e,Ncr),e(y9,jcr),e(y9,uQ),e(uQ,Dcr),e(y9,Gcr),e(se,Ocr),e(se,L9),e(L9,p1e),e(p1e,Vcr),e(L9,Xcr),e(L9,_Q),e(_Q,zcr),e(L9,Qcr),e(se,Wcr),e(se,x9),e(x9,u1e),e(u1e,Hcr),e(x9,Ucr),e(x9,bQ),e(bQ,Jcr),e(x9,Ycr),e(se,Kcr),e(se,$9),e($9,_1e),e(_1e,Zcr),e($9,efr),e($9,vQ),e(vQ,ofr),e($9,rfr),e(se,tfr),e(se,k9),e(k9,b1e),e(b1e,afr),e(k9,nfr),e(k9,FQ),e(FQ,sfr),e(k9,lfr),e(se,ifr),e(se,S9),e(S9,v1e),e(v1e,dfr),e(S9,cfr),e(S9,TQ),e(TQ,ffr),e(S9,mfr),e(se,gfr),e(se,R9),e(R9,F1e),e(F1e,hfr),e(R9,pfr),e(R9,MQ),e(MQ,ufr),e(R9,_fr),e(se,bfr),e(se,B9),e(B9,T1e),e(T1e,vfr),e(B9,Ffr),e(B9,EQ),e(EQ,Tfr),e(B9,Mfr),e(se,Efr),e(se,P9),e(P9,M1e),e(M1e,Cfr),e(P9,wfr),e(P9,CQ),e(CQ,Afr),e(P9,yfr),e(se,Lfr),e(se,I9),e(I9,E1e),e(E1e,xfr),e(I9,$fr),e(I9,wQ),e(wQ,kfr),e(I9,Sfr),e(se,Rfr),e(se,q9),e(q9,C1e),e(C1e,Bfr),e(q9,Pfr),e(q9,AQ),e(AQ,Ifr),e(q9,qfr),e(se,Nfr),e(se,N9),e(N9,w1e),e(w1e,jfr),e(N9,Dfr),e(N9,yQ),e(yQ,Gfr),e(N9,Ofr),e(se,Vfr),e(se,j9),e(j9,A1e),e(A1e,Xfr),e(j9,zfr),e(j9,LQ),e(LQ,Qfr),e(j9,Wfr),e(se,Hfr),e(se,D9),e(D9,y1e),e(y1e,Ufr),e(D9,Jfr),e(D9,xQ),e(xQ,Yfr),e(D9,Kfr),e(se,Zfr),e(se,G9),e(G9,L1e),e(L1e,emr),e(G9,omr),e(G9,$Q),e($Q,rmr),e(G9,tmr),e(se,amr),e(se,O9),e(O9,x1e),e(x1e,nmr),e(O9,smr),e(O9,kQ),e(kQ,lmr),e(O9,imr),e(se,dmr),e(se,V9),e(V9,$1e),e($1e,cmr),e(V9,fmr),e(V9,SQ),e(SQ,mmr),e(V9,gmr),e(se,hmr),e(se,X9),e(X9,k1e),e(k1e,pmr),e(X9,umr),e(X9,RQ),e(RQ,_mr),e(X9,bmr),e(Ar,vmr),M(z9,Ar,null),b(f,yqe,_),b(f,zd,_),e(zd,Q9),e(Q9,S1e),M(Jy,S1e,null),e(zd,Fmr),e(zd,R1e),e(R1e,Tmr),b(f,Lqe,_),b(f,Zo,_),M(Yy,Zo,null),e(Zo,Mmr),e(Zo,Qd),e(Qd,Emr),e(Qd,BQ),e(BQ,Cmr),e(Qd,wmr),e(Qd,PQ),e(PQ,Amr),e(Qd,ymr),e(Zo,Lmr),e(Zo,Ky),e(Ky,xmr),e(Ky,B1e),e(B1e,$mr),e(Ky,kmr),e(Zo,Smr),e(Zo,yt),M(Zy,yt,null),e(yt,Rmr),e(yt,P1e),e(P1e,Bmr),e(yt,Pmr),e(yt,Wd),e(Wd,Imr),e(Wd,I1e),e(I1e,qmr),e(Wd,Nmr),e(Wd,IQ),e(IQ,jmr),e(Wd,Dmr),e(yt,Gmr),M(W9,yt,null),e(Zo,Omr),e(Zo,yr),M(eL,yr,null),e(yr,Vmr),e(yr,q1e),e(q1e,Xmr),e(yr,zmr),e(yr,en),e(en,Qmr),e(en,N1e),e(N1e,Wmr),e(en,Hmr),e(en,j1e),e(j1e,Umr),e(en,Jmr),e(en,D1e),e(D1e,Ymr),e(en,Kmr),e(yr,Zmr),e(yr,Me),e(Me,H9),e(H9,G1e),e(G1e,egr),e(H9,ogr),e(H9,qQ),e(qQ,rgr),e(H9,tgr),e(Me,agr),e(Me,U9),e(U9,O1e),e(O1e,ngr),e(U9,sgr),e(U9,NQ),e(NQ,lgr),e(U9,igr),e(Me,dgr),e(Me,J9),e(J9,V1e),e(V1e,cgr),e(J9,fgr),e(J9,jQ),e(jQ,mgr),e(J9,ggr),e(Me,hgr),e(Me,Y9),e(Y9,X1e),e(X1e,pgr),e(Y9,ugr),e(Y9,DQ),e(DQ,_gr),e(Y9,bgr),e(Me,vgr),e(Me,K9),e(K9,z1e),e(z1e,Fgr),e(K9,Tgr),e(K9,GQ),e(GQ,Mgr),e(K9,Egr),e(Me,Cgr),e(Me,Z9),e(Z9,Q1e),e(Q1e,wgr),e(Z9,Agr),e(Z9,OQ),e(OQ,ygr),e(Z9,Lgr),e(Me,xgr),e(Me,e7),e(e7,W1e),e(W1e,$gr),e(e7,kgr),e(e7,VQ),e(VQ,Sgr),e(e7,Rgr),e(Me,Bgr),e(Me,o7),e(o7,H1e),e(H1e,Pgr),e(o7,Igr),e(o7,XQ),e(XQ,qgr),e(o7,Ngr),e(Me,jgr),e(Me,r7),e(r7,U1e),e(U1e,Dgr),e(r7,Ggr),e(r7,zQ),e(zQ,Ogr),e(r7,Vgr),e(Me,Xgr),e(Me,t7),e(t7,J1e),e(J1e,zgr),e(t7,Qgr),e(t7,QQ),e(QQ,Wgr),e(t7,Hgr),e(Me,Ugr),e(Me,a7),e(a7,Y1e),e(Y1e,Jgr),e(a7,Ygr),e(a7,WQ),e(WQ,Kgr),e(a7,Zgr),e(Me,ehr),e(Me,n7),e(n7,K1e),e(K1e,ohr),e(n7,rhr),e(n7,HQ),e(HQ,thr),e(n7,ahr),e(yr,nhr),M(s7,yr,null),b(f,xqe,_),b(f,Hd,_),e(Hd,l7),e(l7,Z1e),M(oL,Z1e,null),e(Hd,shr),e(Hd,ebe),e(ebe,lhr),b(f,$qe,_),b(f,er,_),M(rL,er,null),e(er,ihr),e(er,Ud),e(Ud,dhr),e(Ud,UQ),e(UQ,chr),e(Ud,fhr),e(Ud,JQ),e(JQ,mhr),e(Ud,ghr),e(er,hhr),e(er,tL),e(tL,phr),e(tL,obe),e(obe,uhr),e(tL,_hr),e(er,bhr),e(er,Lt),M(aL,Lt,null),e(Lt,vhr),e(Lt,rbe),e(rbe,Fhr),e(Lt,Thr),e(Lt,Jd),e(Jd,Mhr),e(Jd,tbe),e(tbe,Ehr),e(Jd,Chr),e(Jd,YQ),e(YQ,whr),e(Jd,Ahr),e(Lt,yhr),M(i7,Lt,null),e(er,Lhr),e(er,Lr),M(nL,Lr,null),e(Lr,xhr),e(Lr,abe),e(abe,$hr),e(Lr,khr),e(Lr,on),e(on,Shr),e(on,nbe),e(nbe,Rhr),e(on,Bhr),e(on,sbe),e(sbe,Phr),e(on,Ihr),e(on,lbe),e(lbe,qhr),e(on,Nhr),e(Lr,jhr),e(Lr,rn),e(rn,d7),e(d7,ibe),e(ibe,Dhr),e(d7,Ghr),e(d7,KQ),e(KQ,Ohr),e(d7,Vhr),e(rn,Xhr),e(rn,c7),e(c7,dbe),e(dbe,zhr),e(c7,Qhr),e(c7,ZQ),e(ZQ,Whr),e(c7,Hhr),e(rn,Uhr),e(rn,f7),e(f7,cbe),e(cbe,Jhr),e(f7,Yhr),e(f7,eW),e(eW,Khr),e(f7,Zhr),e(rn,epr),e(rn,m7),e(m7,fbe),e(fbe,opr),e(m7,rpr),e(m7,oW),e(oW,tpr),e(m7,apr),e(Lr,npr),M(g7,Lr,null),b(f,kqe,_),b(f,Yd,_),e(Yd,h7),e(h7,mbe),M(sL,mbe,null),e(Yd,spr),e(Yd,gbe),e(gbe,lpr),b(f,Sqe,_),b(f,or,_),M(lL,or,null),e(or,ipr),e(or,Kd),e(Kd,dpr),e(Kd,rW),e(rW,cpr),e(Kd,fpr),e(Kd,tW),e(tW,mpr),e(Kd,gpr),e(or,hpr),e(or,iL),e(iL,ppr),e(iL,hbe),e(hbe,upr),e(iL,_pr),e(or,bpr),e(or,xt),M(dL,xt,null),e(xt,vpr),e(xt,pbe),e(pbe,Fpr),e(xt,Tpr),e(xt,Zd),e(Zd,Mpr),e(Zd,ube),e(ube,Epr),e(Zd,Cpr),e(Zd,aW),e(aW,wpr),e(Zd,Apr),e(xt,ypr),M(p7,xt,null),e(or,Lpr),e(or,xr),M(cL,xr,null),e(xr,xpr),e(xr,_be),e(_be,$pr),e(xr,kpr),e(xr,tn),e(tn,Spr),e(tn,bbe),e(bbe,Rpr),e(tn,Bpr),e(tn,vbe),e(vbe,Ppr),e(tn,Ipr),e(tn,Fbe),e(Fbe,qpr),e(tn,Npr),e(xr,jpr),e(xr,ie),e(ie,u7),e(u7,Tbe),e(Tbe,Dpr),e(u7,Gpr),e(u7,nW),e(nW,Opr),e(u7,Vpr),e(ie,Xpr),e(ie,_7),e(_7,Mbe),e(Mbe,zpr),e(_7,Qpr),e(_7,sW),e(sW,Wpr),e(_7,Hpr),e(ie,Upr),e(ie,b7),e(b7,Ebe),e(Ebe,Jpr),e(b7,Ypr),e(b7,lW),e(lW,Kpr),e(b7,Zpr),e(ie,eur),e(ie,v7),e(v7,Cbe),e(Cbe,our),e(v7,rur),e(v7,iW),e(iW,tur),e(v7,aur),e(ie,nur),e(ie,F7),e(F7,wbe),e(wbe,sur),e(F7,lur),e(F7,dW),e(dW,iur),e(F7,dur),e(ie,cur),e(ie,T7),e(T7,Abe),e(Abe,fur),e(T7,mur),e(T7,cW),e(cW,gur),e(T7,hur),e(ie,pur),e(ie,M7),e(M7,ybe),e(ybe,uur),e(M7,_ur),e(M7,fW),e(fW,bur),e(M7,vur),e(ie,Fur),e(ie,E7),e(E7,Lbe),e(Lbe,Tur),e(E7,Mur),e(E7,mW),e(mW,Eur),e(E7,Cur),e(ie,wur),e(ie,C7),e(C7,xbe),e(xbe,Aur),e(C7,yur),e(C7,gW),e(gW,Lur),e(C7,xur),e(ie,$ur),e(ie,w7),e(w7,$be),e($be,kur),e(w7,Sur),e(w7,hW),e(hW,Rur),e(w7,Bur),e(ie,Pur),e(ie,A7),e(A7,kbe),e(kbe,Iur),e(A7,qur),e(A7,pW),e(pW,Nur),e(A7,jur),e(ie,Dur),e(ie,y7),e(y7,Sbe),e(Sbe,Gur),e(y7,Our),e(y7,uW),e(uW,Vur),e(y7,Xur),e(ie,zur),e(ie,L7),e(L7,Rbe),e(Rbe,Qur),e(L7,Wur),e(L7,_W),e(_W,Hur),e(L7,Uur),e(ie,Jur),e(ie,x7),e(x7,Bbe),e(Bbe,Yur),e(x7,Kur),e(x7,bW),e(bW,Zur),e(x7,e_r),e(ie,o_r),e(ie,$7),e($7,Pbe),e(Pbe,r_r),e($7,t_r),e($7,vW),e(vW,a_r),e($7,n_r),e(ie,s_r),e(ie,k7),e(k7,Ibe),e(Ibe,l_r),e(k7,i_r),e(k7,FW),e(FW,d_r),e(k7,c_r),e(ie,f_r),e(ie,S7),e(S7,qbe),e(qbe,m_r),e(S7,g_r),e(S7,TW),e(TW,h_r),e(S7,p_r),e(ie,u_r),e(ie,R7),e(R7,Nbe),e(Nbe,__r),e(R7,b_r),e(R7,MW),e(MW,v_r),e(R7,F_r),e(ie,T_r),e(ie,B7),e(B7,jbe),e(jbe,M_r),e(B7,E_r),e(B7,EW),e(EW,C_r),e(B7,w_r),e(ie,A_r),e(ie,P7),e(P7,Dbe),e(Dbe,y_r),e(P7,L_r),e(P7,CW),e(CW,x_r),e(P7,$_r),e(xr,k_r),M(I7,xr,null),b(f,Rqe,_),b(f,ec,_),e(ec,q7),e(q7,Gbe),M(fL,Gbe,null),e(ec,S_r),e(ec,Obe),e(Obe,R_r),b(f,Bqe,_),b(f,rr,_),M(mL,rr,null),e(rr,B_r),e(rr,oc),e(oc,P_r),e(oc,wW),e(wW,I_r),e(oc,q_r),e(oc,AW),e(AW,N_r),e(oc,j_r),e(rr,D_r),e(rr,gL),e(gL,G_r),e(gL,Vbe),e(Vbe,O_r),e(gL,V_r),e(rr,X_r),e(rr,$t),M(hL,$t,null),e($t,z_r),e($t,Xbe),e(Xbe,Q_r),e($t,W_r),e($t,rc),e(rc,H_r),e(rc,zbe),e(zbe,U_r),e(rc,J_r),e(rc,yW),e(yW,Y_r),e(rc,K_r),e($t,Z_r),M(N7,$t,null),e(rr,e2r),e(rr,$r),M(pL,$r,null),e($r,o2r),e($r,Qbe),e(Qbe,r2r),e($r,t2r),e($r,an),e(an,a2r),e(an,Wbe),e(Wbe,n2r),e(an,s2r),e(an,Hbe),e(Hbe,l2r),e(an,i2r),e(an,Ube),e(Ube,d2r),e(an,c2r),e($r,f2r),e($r,ye),e(ye,j7),e(j7,Jbe),e(Jbe,m2r),e(j7,g2r),e(j7,LW),e(LW,h2r),e(j7,p2r),e(ye,u2r),e(ye,D7),e(D7,Ybe),e(Ybe,_2r),e(D7,b2r),e(D7,xW),e(xW,v2r),e(D7,F2r),e(ye,T2r),e(ye,G7),e(G7,Kbe),e(Kbe,M2r),e(G7,E2r),e(G7,$W),e($W,C2r),e(G7,w2r),e(ye,A2r),e(ye,O7),e(O7,Zbe),e(Zbe,y2r),e(O7,L2r),e(O7,kW),e(kW,x2r),e(O7,$2r),e(ye,k2r),e(ye,V7),e(V7,eve),e(eve,S2r),e(V7,R2r),e(V7,SW),e(SW,B2r),e(V7,P2r),e(ye,I2r),e(ye,X7),e(X7,ove),e(ove,q2r),e(X7,N2r),e(X7,RW),e(RW,j2r),e(X7,D2r),e(ye,G2r),e(ye,z7),e(z7,rve),e(rve,O2r),e(z7,V2r),e(z7,BW),e(BW,X2r),e(z7,z2r),e(ye,Q2r),e(ye,Q7),e(Q7,tve),e(tve,W2r),e(Q7,H2r),e(Q7,PW),e(PW,U2r),e(Q7,J2r),e(ye,Y2r),e(ye,W7),e(W7,ave),e(ave,K2r),e(W7,Z2r),e(W7,IW),e(IW,e1r),e(W7,o1r),e(ye,r1r),e(ye,H7),e(H7,nve),e(nve,t1r),e(H7,a1r),e(H7,qW),e(qW,n1r),e(H7,s1r),e($r,l1r),M(U7,$r,null),b(f,Pqe,_),b(f,tc,_),e(tc,J7),e(J7,sve),M(uL,sve,null),e(tc,i1r),e(tc,lve),e(lve,d1r),b(f,Iqe,_),b(f,tr,_),M(_L,tr,null),e(tr,c1r),e(tr,ac),e(ac,f1r),e(ac,NW),e(NW,m1r),e(ac,g1r),e(ac,jW),e(jW,h1r),e(ac,p1r),e(tr,u1r),e(tr,bL),e(bL,_1r),e(bL,ive),e(ive,b1r),e(bL,v1r),e(tr,F1r),e(tr,kt),M(vL,kt,null),e(kt,T1r),e(kt,dve),e(dve,M1r),e(kt,E1r),e(kt,nc),e(nc,C1r),e(nc,cve),e(cve,w1r),e(nc,A1r),e(nc,DW),e(DW,y1r),e(nc,L1r),e(kt,x1r),M(Y7,kt,null),e(tr,$1r),e(tr,kr),M(FL,kr,null),e(kr,k1r),e(kr,fve),e(fve,S1r),e(kr,R1r),e(kr,nn),e(nn,B1r),e(nn,mve),e(mve,P1r),e(nn,I1r),e(nn,gve),e(gve,q1r),e(nn,N1r),e(nn,hve),e(hve,j1r),e(nn,D1r),e(kr,G1r),e(kr,Z),e(Z,K7),e(K7,pve),e(pve,O1r),e(K7,V1r),e(K7,GW),e(GW,X1r),e(K7,z1r),e(Z,Q1r),e(Z,Z7),e(Z7,uve),e(uve,W1r),e(Z7,H1r),e(Z7,OW),e(OW,U1r),e(Z7,J1r),e(Z,Y1r),e(Z,eM),e(eM,_ve),e(_ve,K1r),e(eM,Z1r),e(eM,VW),e(VW,ebr),e(eM,obr),e(Z,rbr),e(Z,oM),e(oM,bve),e(bve,tbr),e(oM,abr),e(oM,XW),e(XW,nbr),e(oM,sbr),e(Z,lbr),e(Z,rM),e(rM,vve),e(vve,ibr),e(rM,dbr),e(rM,zW),e(zW,cbr),e(rM,fbr),e(Z,mbr),e(Z,tM),e(tM,Fve),e(Fve,gbr),e(tM,hbr),e(tM,QW),e(QW,pbr),e(tM,ubr),e(Z,_br),e(Z,aM),e(aM,Tve),e(Tve,bbr),e(aM,vbr),e(aM,WW),e(WW,Fbr),e(aM,Tbr),e(Z,Mbr),e(Z,nM),e(nM,Mve),e(Mve,Ebr),e(nM,Cbr),e(nM,HW),e(HW,wbr),e(nM,Abr),e(Z,ybr),e(Z,sM),e(sM,Eve),e(Eve,Lbr),e(sM,xbr),e(sM,UW),e(UW,$br),e(sM,kbr),e(Z,Sbr),e(Z,lM),e(lM,Cve),e(Cve,Rbr),e(lM,Bbr),e(lM,JW),e(JW,Pbr),e(lM,Ibr),e(Z,qbr),e(Z,iM),e(iM,wve),e(wve,Nbr),e(iM,jbr),e(iM,YW),e(YW,Dbr),e(iM,Gbr),e(Z,Obr),e(Z,dM),e(dM,Ave),e(Ave,Vbr),e(dM,Xbr),e(dM,KW),e(KW,zbr),e(dM,Qbr),e(Z,Wbr),e(Z,cM),e(cM,yve),e(yve,Hbr),e(cM,Ubr),e(cM,ZW),e(ZW,Jbr),e(cM,Ybr),e(Z,Kbr),e(Z,fM),e(fM,Lve),e(Lve,Zbr),e(fM,evr),e(fM,eH),e(eH,ovr),e(fM,rvr),e(Z,tvr),e(Z,mM),e(mM,xve),e(xve,avr),e(mM,nvr),e(mM,oH),e(oH,svr),e(mM,lvr),e(Z,ivr),e(Z,gM),e(gM,$ve),e($ve,dvr),e(gM,cvr),e(gM,rH),e(rH,fvr),e(gM,mvr),e(Z,gvr),e(Z,hM),e(hM,kve),e(kve,hvr),e(hM,pvr),e(hM,tH),e(tH,uvr),e(hM,_vr),e(Z,bvr),e(Z,pM),e(pM,Sve),e(Sve,vvr),e(pM,Fvr),e(pM,aH),e(aH,Tvr),e(pM,Mvr),e(Z,Evr),e(Z,uM),e(uM,Rve),e(Rve,Cvr),e(uM,wvr),e(uM,nH),e(nH,Avr),e(uM,yvr),e(Z,Lvr),e(Z,_M),e(_M,Bve),e(Bve,xvr),e(_M,$vr),e(_M,sH),e(sH,kvr),e(_M,Svr),e(Z,Rvr),e(Z,bM),e(bM,Pve),e(Pve,Bvr),e(bM,Pvr),e(bM,lH),e(lH,Ivr),e(bM,qvr),e(Z,Nvr),e(Z,vM),e(vM,Ive),e(Ive,jvr),e(vM,Dvr),e(vM,iH),e(iH,Gvr),e(vM,Ovr),e(Z,Vvr),e(Z,FM),e(FM,qve),e(qve,Xvr),e(FM,zvr),e(FM,dH),e(dH,Qvr),e(FM,Wvr),e(Z,Hvr),e(Z,TM),e(TM,Nve),e(Nve,Uvr),e(TM,Jvr),e(TM,cH),e(cH,Yvr),e(TM,Kvr),e(Z,Zvr),e(Z,MM),e(MM,jve),e(jve,eFr),e(MM,oFr),e(MM,fH),e(fH,rFr),e(MM,tFr),e(Z,aFr),e(Z,EM),e(EM,Dve),e(Dve,nFr),e(EM,sFr),e(EM,mH),e(mH,lFr),e(EM,iFr),e(kr,dFr),M(CM,kr,null),b(f,qqe,_),b(f,sc,_),e(sc,wM),e(wM,Gve),M(TL,Gve,null),e(sc,cFr),e(sc,Ove),e(Ove,fFr),b(f,Nqe,_),b(f,ar,_),M(ML,ar,null),e(ar,mFr),e(ar,lc),e(lc,gFr),e(lc,gH),e(gH,hFr),e(lc,pFr),e(lc,hH),e(hH,uFr),e(lc,_Fr),e(ar,bFr),e(ar,EL),e(EL,vFr),e(EL,Vve),e(Vve,FFr),e(EL,TFr),e(ar,MFr),e(ar,St),M(CL,St,null),e(St,EFr),e(St,Xve),e(Xve,CFr),e(St,wFr),e(St,ic),e(ic,AFr),e(ic,zve),e(zve,yFr),e(ic,LFr),e(ic,pH),e(pH,xFr),e(ic,$Fr),e(St,kFr),M(AM,St,null),e(ar,SFr),e(ar,Sr),M(wL,Sr,null),e(Sr,RFr),e(Sr,Qve),e(Qve,BFr),e(Sr,PFr),e(Sr,sn),e(sn,IFr),e(sn,Wve),e(Wve,qFr),e(sn,NFr),e(sn,Hve),e(Hve,jFr),e(sn,DFr),e(sn,Uve),e(Uve,GFr),e(sn,OFr),e(Sr,VFr),e(Sr,pe),e(pe,yM),e(yM,Jve),e(Jve,XFr),e(yM,zFr),e(yM,uH),e(uH,QFr),e(yM,WFr),e(pe,HFr),e(pe,LM),e(LM,Yve),e(Yve,UFr),e(LM,JFr),e(LM,_H),e(_H,YFr),e(LM,KFr),e(pe,ZFr),e(pe,xM),e(xM,Kve),e(Kve,e6r),e(xM,o6r),e(xM,bH),e(bH,r6r),e(xM,t6r),e(pe,a6r),e(pe,$M),e($M,Zve),e(Zve,n6r),e($M,s6r),e($M,vH),e(vH,l6r),e($M,i6r),e(pe,d6r),e(pe,kM),e(kM,eFe),e(eFe,c6r),e(kM,f6r),e(kM,FH),e(FH,m6r),e(kM,g6r),e(pe,h6r),e(pe,SM),e(SM,oFe),e(oFe,p6r),e(SM,u6r),e(SM,TH),e(TH,_6r),e(SM,b6r),e(pe,v6r),e(pe,RM),e(RM,rFe),e(rFe,F6r),e(RM,T6r),e(RM,MH),e(MH,M6r),e(RM,E6r),e(pe,C6r),e(pe,BM),e(BM,tFe),e(tFe,w6r),e(BM,A6r),e(BM,EH),e(EH,y6r),e(BM,L6r),e(pe,x6r),e(pe,PM),e(PM,aFe),e(aFe,$6r),e(PM,k6r),e(PM,CH),e(CH,S6r),e(PM,R6r),e(pe,B6r),e(pe,IM),e(IM,nFe),e(nFe,P6r),e(IM,I6r),e(IM,wH),e(wH,q6r),e(IM,N6r),e(pe,j6r),e(pe,qM),e(qM,sFe),e(sFe,D6r),e(qM,G6r),e(qM,AH),e(AH,O6r),e(qM,V6r),e(pe,X6r),e(pe,NM),e(NM,lFe),e(lFe,z6r),e(NM,Q6r),e(NM,yH),e(yH,W6r),e(NM,H6r),e(pe,U6r),e(pe,jM),e(jM,iFe),e(iFe,J6r),e(jM,Y6r),e(jM,LH),e(LH,K6r),e(jM,Z6r),e(pe,eTr),e(pe,DM),e(DM,dFe),e(dFe,oTr),e(DM,rTr),e(DM,xH),e(xH,tTr),e(DM,aTr),e(pe,nTr),e(pe,GM),e(GM,cFe),e(cFe,sTr),e(GM,lTr),e(GM,$H),e($H,iTr),e(GM,dTr),e(pe,cTr),e(pe,OM),e(OM,fFe),e(fFe,fTr),e(OM,mTr),e(OM,kH),e(kH,gTr),e(OM,hTr),e(pe,pTr),e(pe,VM),e(VM,mFe),e(mFe,uTr),e(VM,_Tr),e(VM,SH),e(SH,bTr),e(VM,vTr),e(Sr,FTr),M(XM,Sr,null),b(f,jqe,_),b(f,dc,_),e(dc,zM),e(zM,gFe),M(AL,gFe,null),e(dc,TTr),e(dc,hFe),e(hFe,MTr),b(f,Dqe,_),b(f,nr,_),M(yL,nr,null),e(nr,ETr),e(nr,cc),e(cc,CTr),e(cc,RH),e(RH,wTr),e(cc,ATr),e(cc,BH),e(BH,yTr),e(cc,LTr),e(nr,xTr),e(nr,LL),e(LL,$Tr),e(LL,pFe),e(pFe,kTr),e(LL,STr),e(nr,RTr),e(nr,Rt),M(xL,Rt,null),e(Rt,BTr),e(Rt,uFe),e(uFe,PTr),e(Rt,ITr),e(Rt,fc),e(fc,qTr),e(fc,_Fe),e(_Fe,NTr),e(fc,jTr),e(fc,PH),e(PH,DTr),e(fc,GTr),e(Rt,OTr),M(QM,Rt,null),e(nr,VTr),e(nr,Rr),M($L,Rr,null),e(Rr,XTr),e(Rr,bFe),e(bFe,zTr),e(Rr,QTr),e(Rr,ln),e(ln,WTr),e(ln,vFe),e(vFe,HTr),e(ln,UTr),e(ln,FFe),e(FFe,JTr),e(ln,YTr),e(ln,TFe),e(TFe,KTr),e(ln,ZTr),e(Rr,e9r),e(Rr,kL),e(kL,WM),e(WM,MFe),e(MFe,o9r),e(WM,r9r),e(WM,IH),e(IH,t9r),e(WM,a9r),e(kL,n9r),e(kL,HM),e(HM,EFe),e(EFe,s9r),e(HM,l9r),e(HM,qH),e(qH,i9r),e(HM,d9r),e(Rr,c9r),M(UM,Rr,null),b(f,Gqe,_),b(f,mc,_),e(mc,JM),e(JM,CFe),M(SL,CFe,null),e(mc,f9r),e(mc,wFe),e(wFe,m9r),b(f,Oqe,_),b(f,sr,_),M(RL,sr,null),e(sr,g9r),e(sr,gc),e(gc,h9r),e(gc,NH),e(NH,p9r),e(gc,u9r),e(gc,jH),e(jH,_9r),e(gc,b9r),e(sr,v9r),e(sr,BL),e(BL,F9r),e(BL,AFe),e(AFe,T9r),e(BL,M9r),e(sr,E9r),e(sr,Bt),M(PL,Bt,null),e(Bt,C9r),e(Bt,yFe),e(yFe,w9r),e(Bt,A9r),e(Bt,hc),e(hc,y9r),e(hc,LFe),e(LFe,L9r),e(hc,x9r),e(hc,DH),e(DH,$9r),e(hc,k9r),e(Bt,S9r),M(YM,Bt,null),e(sr,R9r),e(sr,Br),M(IL,Br,null),e(Br,B9r),e(Br,xFe),e(xFe,P9r),e(Br,I9r),e(Br,dn),e(dn,q9r),e(dn,$Fe),e($Fe,N9r),e(dn,j9r),e(dn,kFe),e(kFe,D9r),e(dn,G9r),e(dn,SFe),e(SFe,O9r),e(dn,V9r),e(Br,X9r),e(Br,RFe),e(RFe,KM),e(KM,BFe),e(BFe,z9r),e(KM,Q9r),e(KM,GH),e(GH,W9r),e(KM,H9r),e(Br,U9r),M(ZM,Br,null),b(f,Vqe,_),b(f,pc,_),e(pc,e4),e(e4,PFe),M(qL,PFe,null),e(pc,J9r),e(pc,IFe),e(IFe,Y9r),b(f,Xqe,_),b(f,lr,_),M(NL,lr,null),e(lr,K9r),e(lr,uc),e(uc,Z9r),e(uc,OH),e(OH,e7r),e(uc,o7r),e(uc,VH),e(VH,r7r),e(uc,t7r),e(lr,a7r),e(lr,jL),e(jL,n7r),e(jL,qFe),e(qFe,s7r),e(jL,l7r),e(lr,i7r),e(lr,Pt),M(DL,Pt,null),e(Pt,d7r),e(Pt,NFe),e(NFe,c7r),e(Pt,f7r),e(Pt,_c),e(_c,m7r),e(_c,jFe),e(jFe,g7r),e(_c,h7r),e(_c,XH),e(XH,p7r),e(_c,u7r),e(Pt,_7r),M(o4,Pt,null),e(lr,b7r),e(lr,Pr),M(GL,Pr,null),e(Pr,v7r),e(Pr,DFe),e(DFe,F7r),e(Pr,T7r),e(Pr,cn),e(cn,M7r),e(cn,GFe),e(GFe,E7r),e(cn,C7r),e(cn,OFe),e(OFe,w7r),e(cn,A7r),e(cn,VFe),e(VFe,y7r),e(cn,L7r),e(Pr,x7r),e(Pr,de),e(de,r4),e(r4,XFe),e(XFe,$7r),e(r4,k7r),e(r4,zH),e(zH,S7r),e(r4,R7r),e(de,B7r),e(de,t4),e(t4,zFe),e(zFe,P7r),e(t4,I7r),e(t4,QH),e(QH,q7r),e(t4,N7r),e(de,j7r),e(de,a4),e(a4,QFe),e(QFe,D7r),e(a4,G7r),e(a4,WH),e(WH,O7r),e(a4,V7r),e(de,X7r),e(de,n4),e(n4,WFe),e(WFe,z7r),e(n4,Q7r),e(n4,HH),e(HH,W7r),e(n4,H7r),e(de,U7r),e(de,s4),e(s4,HFe),e(HFe,J7r),e(s4,Y7r),e(s4,UH),e(UH,K7r),e(s4,Z7r),e(de,eMr),e(de,l4),e(l4,UFe),e(UFe,oMr),e(l4,rMr),e(l4,JH),e(JH,tMr),e(l4,aMr),e(de,nMr),e(de,i4),e(i4,JFe),e(JFe,sMr),e(i4,lMr),e(i4,YH),e(YH,iMr),e(i4,dMr),e(de,cMr),e(de,d4),e(d4,YFe),e(YFe,fMr),e(d4,mMr),e(d4,KH),e(KH,gMr),e(d4,hMr),e(de,pMr),e(de,c4),e(c4,KFe),e(KFe,uMr),e(c4,_Mr),e(c4,ZH),e(ZH,bMr),e(c4,vMr),e(de,FMr),e(de,f4),e(f4,ZFe),e(ZFe,TMr),e(f4,MMr),e(f4,eU),e(eU,EMr),e(f4,CMr),e(de,wMr),e(de,m4),e(m4,e6e),e(e6e,AMr),e(m4,yMr),e(m4,oU),e(oU,LMr),e(m4,xMr),e(de,$Mr),e(de,g4),e(g4,o6e),e(o6e,kMr),e(g4,SMr),e(g4,rU),e(rU,RMr),e(g4,BMr),e(de,PMr),e(de,h4),e(h4,r6e),e(r6e,IMr),e(h4,qMr),e(h4,tU),e(tU,NMr),e(h4,jMr),e(de,DMr),e(de,p4),e(p4,t6e),e(t6e,GMr),e(p4,OMr),e(p4,aU),e(aU,VMr),e(p4,XMr),e(de,zMr),e(de,u4),e(u4,a6e),e(a6e,QMr),e(u4,WMr),e(u4,nU),e(nU,HMr),e(u4,UMr),e(de,JMr),e(de,_4),e(_4,n6e),e(n6e,YMr),e(_4,KMr),e(_4,sU),e(sU,ZMr),e(_4,e4r),e(de,o4r),e(de,b4),e(b4,s6e),e(s6e,r4r),e(b4,t4r),e(b4,lU),e(lU,a4r),e(b4,n4r),e(de,s4r),e(de,v4),e(v4,l6e),e(l6e,l4r),e(v4,i4r),e(v4,iU),e(iU,d4r),e(v4,c4r),e(de,f4r),e(de,F4),e(F4,i6e),e(i6e,m4r),e(F4,g4r),e(F4,dU),e(dU,h4r),e(F4,p4r),e(de,u4r),e(de,T4),e(T4,d6e),e(d6e,_4r),e(T4,b4r),e(T4,cU),e(cU,v4r),e(T4,F4r),e(Pr,T4r),M(M4,Pr,null),b(f,zqe,_),b(f,bc,_),e(bc,E4),e(E4,c6e),M(OL,c6e,null),e(bc,M4r),e(bc,f6e),e(f6e,E4r),b(f,Qqe,_),b(f,ir,_),M(VL,ir,null),e(ir,C4r),e(ir,vc),e(vc,w4r),e(vc,fU),e(fU,A4r),e(vc,y4r),e(vc,mU),e(mU,L4r),e(vc,x4r),e(ir,$4r),e(ir,XL),e(XL,k4r),e(XL,m6e),e(m6e,S4r),e(XL,R4r),e(ir,B4r),e(ir,It),M(zL,It,null),e(It,P4r),e(It,g6e),e(g6e,I4r),e(It,q4r),e(It,Fc),e(Fc,N4r),e(Fc,h6e),e(h6e,j4r),e(Fc,D4r),e(Fc,gU),e(gU,G4r),e(Fc,O4r),e(It,V4r),M(C4,It,null),e(ir,X4r),e(ir,Ir),M(QL,Ir,null),e(Ir,z4r),e(Ir,p6e),e(p6e,Q4r),e(Ir,W4r),e(Ir,fn),e(fn,H4r),e(fn,u6e),e(u6e,U4r),e(fn,J4r),e(fn,_6e),e(_6e,Y4r),e(fn,K4r),e(fn,b6e),e(b6e,Z4r),e(fn,eEr),e(Ir,oEr),e(Ir,ce),e(ce,w4),e(w4,v6e),e(v6e,rEr),e(w4,tEr),e(w4,hU),e(hU,aEr),e(w4,nEr),e(ce,sEr),e(ce,A4),e(A4,F6e),e(F6e,lEr),e(A4,iEr),e(A4,pU),e(pU,dEr),e(A4,cEr),e(ce,fEr),e(ce,y4),e(y4,T6e),e(T6e,mEr),e(y4,gEr),e(y4,uU),e(uU,hEr),e(y4,pEr),e(ce,uEr),e(ce,L4),e(L4,M6e),e(M6e,_Er),e(L4,bEr),e(L4,_U),e(_U,vEr),e(L4,FEr),e(ce,TEr),e(ce,x4),e(x4,E6e),e(E6e,MEr),e(x4,EEr),e(x4,bU),e(bU,CEr),e(x4,wEr),e(ce,AEr),e(ce,$4),e($4,C6e),e(C6e,yEr),e($4,LEr),e($4,vU),e(vU,xEr),e($4,$Er),e(ce,kEr),e(ce,k4),e(k4,w6e),e(w6e,SEr),e(k4,REr),e(k4,FU),e(FU,BEr),e(k4,PEr),e(ce,IEr),e(ce,S4),e(S4,A6e),e(A6e,qEr),e(S4,NEr),e(S4,TU),e(TU,jEr),e(S4,DEr),e(ce,GEr),e(ce,R4),e(R4,y6e),e(y6e,OEr),e(R4,VEr),e(R4,MU),e(MU,XEr),e(R4,zEr),e(ce,QEr),e(ce,B4),e(B4,L6e),e(L6e,WEr),e(B4,HEr),e(B4,EU),e(EU,UEr),e(B4,JEr),e(ce,YEr),e(ce,P4),e(P4,x6e),e(x6e,KEr),e(P4,ZEr),e(P4,CU),e(CU,e5r),e(P4,o5r),e(ce,r5r),e(ce,I4),e(I4,$6e),e($6e,t5r),e(I4,a5r),e(I4,wU),e(wU,n5r),e(I4,s5r),e(ce,l5r),e(ce,q4),e(q4,k6e),e(k6e,i5r),e(q4,d5r),e(q4,AU),e(AU,c5r),e(q4,f5r),e(ce,m5r),e(ce,N4),e(N4,S6e),e(S6e,g5r),e(N4,h5r),e(N4,yU),e(yU,p5r),e(N4,u5r),e(ce,_5r),e(ce,j4),e(j4,R6e),e(R6e,b5r),e(j4,v5r),e(j4,LU),e(LU,F5r),e(j4,T5r),e(ce,M5r),e(ce,D4),e(D4,B6e),e(B6e,E5r),e(D4,C5r),e(D4,xU),e(xU,w5r),e(D4,A5r),e(ce,y5r),e(ce,G4),e(G4,P6e),e(P6e,L5r),e(G4,x5r),e(G4,$U),e($U,$5r),e(G4,k5r),e(ce,S5r),e(ce,O4),e(O4,I6e),e(I6e,R5r),e(O4,B5r),e(O4,kU),e(kU,P5r),e(O4,I5r),e(ce,q5r),e(ce,V4),e(V4,q6e),e(q6e,N5r),e(V4,j5r),e(V4,SU),e(SU,D5r),e(V4,G5r),e(ce,O5r),e(ce,X4),e(X4,N6e),e(N6e,V5r),e(X4,X5r),e(X4,RU),e(RU,z5r),e(X4,Q5r),e(Ir,W5r),M(z4,Ir,null),b(f,Wqe,_),b(f,Tc,_),e(Tc,Q4),e(Q4,j6e),M(WL,j6e,null),e(Tc,H5r),e(Tc,D6e),e(D6e,U5r),b(f,Hqe,_),b(f,dr,_),M(HL,dr,null),e(dr,J5r),e(dr,Mc),e(Mc,Y5r),e(Mc,BU),e(BU,K5r),e(Mc,Z5r),e(Mc,PU),e(PU,eCr),e(Mc,oCr),e(dr,rCr),e(dr,UL),e(UL,tCr),e(UL,G6e),e(G6e,aCr),e(UL,nCr),e(dr,sCr),e(dr,qt),M(JL,qt,null),e(qt,lCr),e(qt,O6e),e(O6e,iCr),e(qt,dCr),e(qt,Ec),e(Ec,cCr),e(Ec,V6e),e(V6e,fCr),e(Ec,mCr),e(Ec,IU),e(IU,gCr),e(Ec,hCr),e(qt,pCr),M(W4,qt,null),e(dr,uCr),e(dr,qr),M(YL,qr,null),e(qr,_Cr),e(qr,X6e),e(X6e,bCr),e(qr,vCr),e(qr,mn),e(mn,FCr),e(mn,z6e),e(z6e,TCr),e(mn,MCr),e(mn,Q6e),e(Q6e,ECr),e(mn,CCr),e(mn,W6e),e(W6e,wCr),e(mn,ACr),e(qr,yCr),e(qr,H6e),e(H6e,H4),e(H4,U6e),e(U6e,LCr),e(H4,xCr),e(H4,qU),e(qU,$Cr),e(H4,kCr),e(qr,SCr),M(U4,qr,null),b(f,Uqe,_),b(f,Cc,_),e(Cc,J4),e(J4,J6e),M(KL,J6e,null),e(Cc,RCr),e(Cc,Y6e),e(Y6e,BCr),b(f,Jqe,_),b(f,cr,_),M(ZL,cr,null),e(cr,PCr),e(cr,wc),e(wc,ICr),e(wc,NU),e(NU,qCr),e(wc,NCr),e(wc,jU),e(jU,jCr),e(wc,DCr),e(cr,GCr),e(cr,e8),e(e8,OCr),e(e8,K6e),e(K6e,VCr),e(e8,XCr),e(cr,zCr),e(cr,Nt),M(o8,Nt,null),e(Nt,QCr),e(Nt,Z6e),e(Z6e,WCr),e(Nt,HCr),e(Nt,Ac),e(Ac,UCr),e(Ac,eTe),e(eTe,JCr),e(Ac,YCr),e(Ac,DU),e(DU,KCr),e(Ac,ZCr),e(Nt,e3r),M(Y4,Nt,null),e(cr,o3r),e(cr,Nr),M(r8,Nr,null),e(Nr,r3r),e(Nr,oTe),e(oTe,t3r),e(Nr,a3r),e(Nr,gn),e(gn,n3r),e(gn,rTe),e(rTe,s3r),e(gn,l3r),e(gn,tTe),e(tTe,i3r),e(gn,d3r),e(gn,aTe),e(aTe,c3r),e(gn,f3r),e(Nr,m3r),e(Nr,nTe),e(nTe,K4),e(K4,sTe),e(sTe,g3r),e(K4,h3r),e(K4,GU),e(GU,p3r),e(K4,u3r),e(Nr,_3r),M(Z4,Nr,null),b(f,Yqe,_),b(f,yc,_),e(yc,eE),e(eE,lTe),M(t8,lTe,null),e(yc,b3r),e(yc,iTe),e(iTe,v3r),b(f,Kqe,_),b(f,fr,_),M(a8,fr,null),e(fr,F3r),e(fr,Lc),e(Lc,T3r),e(Lc,OU),e(OU,M3r),e(Lc,E3r),e(Lc,VU),e(VU,C3r),e(Lc,w3r),e(fr,A3r),e(fr,n8),e(n8,y3r),e(n8,dTe),e(dTe,L3r),e(n8,x3r),e(fr,$3r),e(fr,jt),M(s8,jt,null),e(jt,k3r),e(jt,cTe),e(cTe,S3r),e(jt,R3r),e(jt,xc),e(xc,B3r),e(xc,fTe),e(fTe,P3r),e(xc,I3r),e(xc,XU),e(XU,q3r),e(xc,N3r),e(jt,j3r),M(oE,jt,null),e(fr,D3r),e(fr,jr),M(l8,jr,null),e(jr,G3r),e(jr,mTe),e(mTe,O3r),e(jr,V3r),e(jr,hn),e(hn,X3r),e(hn,gTe),e(gTe,z3r),e(hn,Q3r),e(hn,hTe),e(hTe,W3r),e(hn,H3r),e(hn,pTe),e(pTe,U3r),e(hn,J3r),e(jr,Y3r),e(jr,ee),e(ee,rE),e(rE,uTe),e(uTe,K3r),e(rE,Z3r),e(rE,zU),e(zU,ewr),e(rE,owr),e(ee,rwr),e(ee,tE),e(tE,_Te),e(_Te,twr),e(tE,awr),e(tE,QU),e(QU,nwr),e(tE,swr),e(ee,lwr),e(ee,aE),e(aE,bTe),e(bTe,iwr),e(aE,dwr),e(aE,WU),e(WU,cwr),e(aE,fwr),e(ee,mwr),e(ee,nE),e(nE,vTe),e(vTe,gwr),e(nE,hwr),e(nE,HU),e(HU,pwr),e(nE,uwr),e(ee,_wr),e(ee,sE),e(sE,FTe),e(FTe,bwr),e(sE,vwr),e(sE,UU),e(UU,Fwr),e(sE,Twr),e(ee,Mwr),e(ee,lE),e(lE,TTe),e(TTe,Ewr),e(lE,Cwr),e(lE,JU),e(JU,wwr),e(lE,Awr),e(ee,ywr),e(ee,iE),e(iE,MTe),e(MTe,Lwr),e(iE,xwr),e(iE,YU),e(YU,$wr),e(iE,kwr),e(ee,Swr),e(ee,dE),e(dE,ETe),e(ETe,Rwr),e(dE,Bwr),e(dE,KU),e(KU,Pwr),e(dE,Iwr),e(ee,qwr),e(ee,cE),e(cE,CTe),e(CTe,Nwr),e(cE,jwr),e(cE,ZU),e(ZU,Dwr),e(cE,Gwr),e(ee,Owr),e(ee,fE),e(fE,wTe),e(wTe,Vwr),e(fE,Xwr),e(fE,eJ),e(eJ,zwr),e(fE,Qwr),e(ee,Wwr),e(ee,mE),e(mE,ATe),e(ATe,Hwr),e(mE,Uwr),e(mE,oJ),e(oJ,Jwr),e(mE,Ywr),e(ee,Kwr),e(ee,gE),e(gE,yTe),e(yTe,Zwr),e(gE,eAr),e(gE,rJ),e(rJ,oAr),e(gE,rAr),e(ee,tAr),e(ee,hE),e(hE,LTe),e(LTe,aAr),e(hE,nAr),e(hE,tJ),e(tJ,sAr),e(hE,lAr),e(ee,iAr),e(ee,pE),e(pE,xTe),e(xTe,dAr),e(pE,cAr),e(pE,aJ),e(aJ,fAr),e(pE,mAr),e(ee,gAr),e(ee,uE),e(uE,$Te),e($Te,hAr),e(uE,pAr),e(uE,nJ),e(nJ,uAr),e(uE,_Ar),e(ee,bAr),e(ee,_E),e(_E,kTe),e(kTe,vAr),e(_E,FAr),e(_E,sJ),e(sJ,TAr),e(_E,MAr),e(ee,EAr),e(ee,bE),e(bE,STe),e(STe,CAr),e(bE,wAr),e(bE,lJ),e(lJ,AAr),e(bE,yAr),e(ee,LAr),e(ee,vE),e(vE,RTe),e(RTe,xAr),e(vE,$Ar),e(vE,iJ),e(iJ,kAr),e(vE,SAr),e(ee,RAr),e(ee,FE),e(FE,BTe),e(BTe,BAr),e(FE,PAr),e(FE,dJ),e(dJ,IAr),e(FE,qAr),e(ee,NAr),e(ee,TE),e(TE,PTe),e(PTe,jAr),e(TE,DAr),e(TE,cJ),e(cJ,GAr),e(TE,OAr),e(ee,VAr),e(ee,ME),e(ME,ITe),e(ITe,XAr),e(ME,zAr),e(ME,fJ),e(fJ,QAr),e(ME,WAr),e(ee,HAr),e(ee,EE),e(EE,qTe),e(qTe,UAr),e(EE,JAr),e(EE,mJ),e(mJ,YAr),e(EE,KAr),e(ee,ZAr),e(ee,CE),e(CE,NTe),e(NTe,e0r),e(CE,o0r),e(CE,gJ),e(gJ,r0r),e(CE,t0r),e(ee,a0r),e(ee,wE),e(wE,jTe),e(jTe,n0r),e(wE,s0r),e(wE,hJ),e(hJ,l0r),e(wE,i0r),e(ee,d0r),e(ee,AE),e(AE,DTe),e(DTe,c0r),e(AE,f0r),e(AE,pJ),e(pJ,m0r),e(AE,g0r),e(ee,h0r),e(ee,yE),e(yE,GTe),e(GTe,p0r),e(yE,u0r),e(yE,uJ),e(uJ,_0r),e(yE,b0r),e(jr,v0r),M(LE,jr,null),b(f,Zqe,_),b(f,$c,_),e($c,xE),e(xE,OTe),M(i8,OTe,null),e($c,F0r),e($c,VTe),e(VTe,T0r),b(f,eNe,_),b(f,mr,_),M(d8,mr,null),e(mr,M0r),e(mr,kc),e(kc,E0r),e(kc,_J),e(_J,C0r),e(kc,w0r),e(kc,bJ),e(bJ,A0r),e(kc,y0r),e(mr,L0r),e(mr,c8),e(c8,x0r),e(c8,XTe),e(XTe,$0r),e(c8,k0r),e(mr,S0r),e(mr,Dt),M(f8,Dt,null),e(Dt,R0r),e(Dt,zTe),e(zTe,B0r),e(Dt,P0r),e(Dt,Sc),e(Sc,I0r),e(Sc,QTe),e(QTe,q0r),e(Sc,N0r),e(Sc,vJ),e(vJ,j0r),e(Sc,D0r),e(Dt,G0r),M($E,Dt,null),e(mr,O0r),e(mr,Dr),M(m8,Dr,null),e(Dr,V0r),e(Dr,WTe),e(WTe,X0r),e(Dr,z0r),e(Dr,pn),e(pn,Q0r),e(pn,HTe),e(HTe,W0r),e(pn,H0r),e(pn,UTe),e(UTe,U0r),e(pn,J0r),e(pn,JTe),e(JTe,Y0r),e(pn,K0r),e(Dr,Z0r),e(Dr,Se),e(Se,kE),e(kE,YTe),e(YTe,eyr),e(kE,oyr),e(kE,FJ),e(FJ,ryr),e(kE,tyr),e(Se,ayr),e(Se,SE),e(SE,KTe),e(KTe,nyr),e(SE,syr),e(SE,TJ),e(TJ,lyr),e(SE,iyr),e(Se,dyr),e(Se,RE),e(RE,ZTe),e(ZTe,cyr),e(RE,fyr),e(RE,MJ),e(MJ,myr),e(RE,gyr),e(Se,hyr),e(Se,BE),e(BE,e9e),e(e9e,pyr),e(BE,uyr),e(BE,EJ),e(EJ,_yr),e(BE,byr),e(Se,vyr),e(Se,PE),e(PE,o9e),e(o9e,Fyr),e(PE,Tyr),e(PE,CJ),e(CJ,Myr),e(PE,Eyr),e(Se,Cyr),e(Se,IE),e(IE,r9e),e(r9e,wyr),e(IE,Ayr),e(IE,wJ),e(wJ,yyr),e(IE,Lyr),e(Se,xyr),e(Se,qE),e(qE,t9e),e(t9e,$yr),e(qE,kyr),e(qE,AJ),e(AJ,Syr),e(qE,Ryr),e(Se,Byr),e(Se,NE),e(NE,a9e),e(a9e,Pyr),e(NE,Iyr),e(NE,yJ),e(yJ,qyr),e(NE,Nyr),e(Se,jyr),e(Se,jE),e(jE,n9e),e(n9e,Dyr),e(jE,Gyr),e(jE,LJ),e(LJ,Oyr),e(jE,Vyr),e(Dr,Xyr),M(DE,Dr,null),b(f,oNe,_),b(f,Rc,_),e(Rc,GE),e(GE,s9e),M(g8,s9e,null),e(Rc,zyr),e(Rc,l9e),e(l9e,Qyr),b(f,rNe,_),b(f,gr,_),M(h8,gr,null),e(gr,Wyr),e(gr,Bc),e(Bc,Hyr),e(Bc,xJ),e(xJ,Uyr),e(Bc,Jyr),e(Bc,$J),e($J,Yyr),e(Bc,Kyr),e(gr,Zyr),e(gr,p8),e(p8,eLr),e(p8,i9e),e(i9e,oLr),e(p8,rLr),e(gr,tLr),e(gr,Gt),M(u8,Gt,null),e(Gt,aLr),e(Gt,d9e),e(d9e,nLr),e(Gt,sLr),e(Gt,Pc),e(Pc,lLr),e(Pc,c9e),e(c9e,iLr),e(Pc,dLr),e(Pc,kJ),e(kJ,cLr),e(Pc,fLr),e(Gt,mLr),M(OE,Gt,null),e(gr,gLr),e(gr,Gr),M(_8,Gr,null),e(Gr,hLr),e(Gr,f9e),e(f9e,pLr),e(Gr,uLr),e(Gr,un),e(un,_Lr),e(un,m9e),e(m9e,bLr),e(un,vLr),e(un,g9e),e(g9e,FLr),e(un,TLr),e(un,h9e),e(h9e,MLr),e(un,ELr),e(Gr,CLr),e(Gr,Te),e(Te,VE),e(VE,p9e),e(p9e,wLr),e(VE,ALr),e(VE,SJ),e(SJ,yLr),e(VE,LLr),e(Te,xLr),e(Te,XE),e(XE,u9e),e(u9e,$Lr),e(XE,kLr),e(XE,RJ),e(RJ,SLr),e(XE,RLr),e(Te,BLr),e(Te,zE),e(zE,_9e),e(_9e,PLr),e(zE,ILr),e(zE,BJ),e(BJ,qLr),e(zE,NLr),e(Te,jLr),e(Te,QE),e(QE,b9e),e(b9e,DLr),e(QE,GLr),e(QE,PJ),e(PJ,OLr),e(QE,VLr),e(Te,XLr),e(Te,WE),e(WE,v9e),e(v9e,zLr),e(WE,QLr),e(WE,IJ),e(IJ,WLr),e(WE,HLr),e(Te,ULr),e(Te,HE),e(HE,F9e),e(F9e,JLr),e(HE,YLr),e(HE,qJ),e(qJ,KLr),e(HE,ZLr),e(Te,e8r),e(Te,UE),e(UE,T9e),e(T9e,o8r),e(UE,r8r),e(UE,NJ),e(NJ,t8r),e(UE,a8r),e(Te,n8r),e(Te,JE),e(JE,M9e),e(M9e,s8r),e(JE,l8r),e(JE,jJ),e(jJ,i8r),e(JE,d8r),e(Te,c8r),e(Te,YE),e(YE,E9e),e(E9e,f8r),e(YE,m8r),e(YE,DJ),e(DJ,g8r),e(YE,h8r),e(Te,p8r),e(Te,KE),e(KE,C9e),e(C9e,u8r),e(KE,_8r),e(KE,GJ),e(GJ,b8r),e(KE,v8r),e(Te,F8r),e(Te,ZE),e(ZE,w9e),e(w9e,T8r),e(ZE,M8r),e(ZE,OJ),e(OJ,E8r),e(ZE,C8r),e(Te,w8r),e(Te,e5),e(e5,A9e),e(A9e,A8r),e(e5,y8r),e(e5,VJ),e(VJ,L8r),e(e5,x8r),e(Te,$8r),e(Te,o5),e(o5,y9e),e(y9e,k8r),e(o5,S8r),e(o5,XJ),e(XJ,R8r),e(o5,B8r),e(Gr,P8r),M(r5,Gr,null),b(f,tNe,_),b(f,Ic,_),e(Ic,t5),e(t5,L9e),M(b8,L9e,null),e(Ic,I8r),e(Ic,x9e),e(x9e,q8r),b(f,aNe,_),b(f,hr,_),M(v8,hr,null),e(hr,N8r),e(hr,qc),e(qc,j8r),e(qc,zJ),e(zJ,D8r),e(qc,G8r),e(qc,QJ),e(QJ,O8r),e(qc,V8r),e(hr,X8r),e(hr,F8),e(F8,z8r),e(F8,$9e),e($9e,Q8r),e(F8,W8r),e(hr,H8r),e(hr,Ot),M(T8,Ot,null),e(Ot,U8r),e(Ot,k9e),e(k9e,J8r),e(Ot,Y8r),e(Ot,Nc),e(Nc,K8r),e(Nc,S9e),e(S9e,Z8r),e(Nc,exr),e(Nc,WJ),e(WJ,oxr),e(Nc,rxr),e(Ot,txr),M(a5,Ot,null),e(hr,axr),e(hr,Or),M(M8,Or,null),e(Or,nxr),e(Or,R9e),e(R9e,sxr),e(Or,lxr),e(Or,_n),e(_n,ixr),e(_n,B9e),e(B9e,dxr),e(_n,cxr),e(_n,P9e),e(P9e,fxr),e(_n,mxr),e(_n,I9e),e(I9e,gxr),e(_n,hxr),e(Or,pxr),e(Or,Le),e(Le,n5),e(n5,q9e),e(q9e,uxr),e(n5,_xr),e(n5,HJ),e(HJ,bxr),e(n5,vxr),e(Le,Fxr),e(Le,s5),e(s5,N9e),e(N9e,Txr),e(s5,Mxr),e(s5,UJ),e(UJ,Exr),e(s5,Cxr),e(Le,wxr),e(Le,l5),e(l5,j9e),e(j9e,Axr),e(l5,yxr),e(l5,JJ),e(JJ,Lxr),e(l5,xxr),e(Le,$xr),e(Le,i5),e(i5,D9e),e(D9e,kxr),e(i5,Sxr),e(i5,YJ),e(YJ,Rxr),e(i5,Bxr),e(Le,Pxr),e(Le,d5),e(d5,G9e),e(G9e,Ixr),e(d5,qxr),e(d5,KJ),e(KJ,Nxr),e(d5,jxr),e(Le,Dxr),e(Le,c5),e(c5,O9e),e(O9e,Gxr),e(c5,Oxr),e(c5,ZJ),e(ZJ,Vxr),e(c5,Xxr),e(Le,zxr),e(Le,f5),e(f5,V9e),e(V9e,Qxr),e(f5,Wxr),e(f5,eY),e(eY,Hxr),e(f5,Uxr),e(Le,Jxr),e(Le,m5),e(m5,X9e),e(X9e,Yxr),e(m5,Kxr),e(m5,oY),e(oY,Zxr),e(m5,e$r),e(Le,o$r),e(Le,g5),e(g5,z9e),e(z9e,r$r),e(g5,t$r),e(g5,rY),e(rY,a$r),e(g5,n$r),e(Le,s$r),e(Le,h5),e(h5,Q9e),e(Q9e,l$r),e(h5,i$r),e(h5,tY),e(tY,d$r),e(h5,c$r),e(Or,f$r),M(p5,Or,null),b(f,nNe,_),b(f,jc,_),e(jc,u5),e(u5,W9e),M(E8,W9e,null),e(jc,m$r),e(jc,H9e),e(H9e,g$r),b(f,sNe,_),b(f,pr,_),M(C8,pr,null),e(pr,h$r),e(pr,Dc),e(Dc,p$r),e(Dc,aY),e(aY,u$r),e(Dc,_$r),e(Dc,nY),e(nY,b$r),e(Dc,v$r),e(pr,F$r),e(pr,w8),e(w8,T$r),e(w8,U9e),e(U9e,M$r),e(w8,E$r),e(pr,C$r),e(pr,Vt),M(A8,Vt,null),e(Vt,w$r),e(Vt,J9e),e(J9e,A$r),e(Vt,y$r),e(Vt,Gc),e(Gc,L$r),e(Gc,Y9e),e(Y9e,x$r),e(Gc,$$r),e(Gc,sY),e(sY,k$r),e(Gc,S$r),e(Vt,R$r),M(_5,Vt,null),e(pr,B$r),e(pr,Vr),M(y8,Vr,null),e(Vr,P$r),e(Vr,K9e),e(K9e,I$r),e(Vr,q$r),e(Vr,bn),e(bn,N$r),e(bn,Z9e),e(Z9e,j$r),e(bn,D$r),e(bn,e7e),e(e7e,G$r),e(bn,O$r),e(bn,o7e),e(o7e,V$r),e(bn,X$r),e(Vr,z$r),e(Vr,xe),e(xe,b5),e(b5,r7e),e(r7e,Q$r),e(b5,W$r),e(b5,lY),e(lY,H$r),e(b5,U$r),e(xe,J$r),e(xe,v5),e(v5,t7e),e(t7e,Y$r),e(v5,K$r),e(v5,iY),e(iY,Z$r),e(v5,ekr),e(xe,okr),e(xe,F5),e(F5,a7e),e(a7e,rkr),e(F5,tkr),e(F5,dY),e(dY,akr),e(F5,nkr),e(xe,skr),e(xe,T5),e(T5,n7e),e(n7e,lkr),e(T5,ikr),e(T5,cY),e(cY,dkr),e(T5,ckr),e(xe,fkr),e(xe,M5),e(M5,s7e),e(s7e,mkr),e(M5,gkr),e(M5,fY),e(fY,hkr),e(M5,pkr),e(xe,ukr),e(xe,E5),e(E5,l7e),e(l7e,_kr),e(E5,bkr),e(E5,mY),e(mY,vkr),e(E5,Fkr),e(xe,Tkr),e(xe,C5),e(C5,i7e),e(i7e,Mkr),e(C5,Ekr),e(C5,gY),e(gY,Ckr),e(C5,wkr),e(xe,Akr),e(xe,w5),e(w5,d7e),e(d7e,ykr),e(w5,Lkr),e(w5,hY),e(hY,xkr),e(w5,$kr),e(xe,kkr),e(xe,A5),e(A5,c7e),e(c7e,Skr),e(A5,Rkr),e(A5,pY),e(pY,Bkr),e(A5,Pkr),e(xe,Ikr),e(xe,y5),e(y5,f7e),e(f7e,qkr),e(y5,Nkr),e(y5,uY),e(uY,jkr),e(y5,Dkr),e(Vr,Gkr),M(L5,Vr,null),b(f,lNe,_),b(f,Oc,_),e(Oc,x5),e(x5,m7e),M(L8,m7e,null),e(Oc,Okr),e(Oc,g7e),e(g7e,Vkr),b(f,iNe,_),b(f,ur,_),M(x8,ur,null),e(ur,Xkr),e(ur,Vc),e(Vc,zkr),e(Vc,_Y),e(_Y,Qkr),e(Vc,Wkr),e(Vc,bY),e(bY,Hkr),e(Vc,Ukr),e(ur,Jkr),e(ur,$8),e($8,Ykr),e($8,h7e),e(h7e,Kkr),e($8,Zkr),e(ur,eSr),e(ur,Xt),M(k8,Xt,null),e(Xt,oSr),e(Xt,p7e),e(p7e,rSr),e(Xt,tSr),e(Xt,Xc),e(Xc,aSr),e(Xc,u7e),e(u7e,nSr),e(Xc,sSr),e(Xc,vY),e(vY,lSr),e(Xc,iSr),e(Xt,dSr),M($5,Xt,null),e(ur,cSr),e(ur,Xr),M(S8,Xr,null),e(Xr,fSr),e(Xr,_7e),e(_7e,mSr),e(Xr,gSr),e(Xr,vn),e(vn,hSr),e(vn,b7e),e(b7e,pSr),e(vn,uSr),e(vn,v7e),e(v7e,_Sr),e(vn,bSr),e(vn,F7e),e(F7e,vSr),e(vn,FSr),e(Xr,TSr),e(Xr,$e),e($e,k5),e(k5,T7e),e(T7e,MSr),e(k5,ESr),e(k5,FY),e(FY,CSr),e(k5,wSr),e($e,ASr),e($e,S5),e(S5,M7e),e(M7e,ySr),e(S5,LSr),e(S5,TY),e(TY,xSr),e(S5,$Sr),e($e,kSr),e($e,R5),e(R5,E7e),e(E7e,SSr),e(R5,RSr),e(R5,MY),e(MY,BSr),e(R5,PSr),e($e,ISr),e($e,B5),e(B5,C7e),e(C7e,qSr),e(B5,NSr),e(B5,EY),e(EY,jSr),e(B5,DSr),e($e,GSr),e($e,P5),e(P5,w7e),e(w7e,OSr),e(P5,VSr),e(P5,CY),e(CY,XSr),e(P5,zSr),e($e,QSr),e($e,I5),e(I5,A7e),e(A7e,WSr),e(I5,HSr),e(I5,wY),e(wY,USr),e(I5,JSr),e($e,YSr),e($e,q5),e(q5,y7e),e(y7e,KSr),e(q5,ZSr),e(q5,AY),e(AY,eRr),e(q5,oRr),e($e,rRr),e($e,N5),e(N5,L7e),e(L7e,tRr),e(N5,aRr),e(N5,yY),e(yY,nRr),e(N5,sRr),e($e,lRr),e($e,j5),e(j5,x7e),e(x7e,iRr),e(j5,dRr),e(j5,LY),e(LY,cRr),e(j5,fRr),e($e,mRr),e($e,D5),e(D5,$7e),e($7e,gRr),e(D5,hRr),e(D5,xY),e(xY,pRr),e(D5,uRr),e(Xr,_Rr),M(G5,Xr,null),b(f,dNe,_),b(f,zc,_),e(zc,O5),e(O5,k7e),M(R8,k7e,null),e(zc,bRr),e(zc,S7e),e(S7e,vRr),b(f,cNe,_),b(f,_r,_),M(B8,_r,null),e(_r,FRr),e(_r,Qc),e(Qc,TRr),e(Qc,$Y),e($Y,MRr),e(Qc,ERr),e(Qc,kY),e(kY,CRr),e(Qc,wRr),e(_r,ARr),e(_r,P8),e(P8,yRr),e(P8,R7e),e(R7e,LRr),e(P8,xRr),e(_r,$Rr),e(_r,zt),M(I8,zt,null),e(zt,kRr),e(zt,B7e),e(B7e,SRr),e(zt,RRr),e(zt,Wc),e(Wc,BRr),e(Wc,P7e),e(P7e,PRr),e(Wc,IRr),e(Wc,SY),e(SY,qRr),e(Wc,NRr),e(zt,jRr),M(V5,zt,null),e(_r,DRr),e(_r,zr),M(q8,zr,null),e(zr,GRr),e(zr,I7e),e(I7e,ORr),e(zr,VRr),e(zr,Fn),e(Fn,XRr),e(Fn,q7e),e(q7e,zRr),e(Fn,QRr),e(Fn,N7e),e(N7e,WRr),e(Fn,HRr),e(Fn,j7e),e(j7e,URr),e(Fn,JRr),e(zr,YRr),e(zr,ke),e(ke,X5),e(X5,D7e),e(D7e,KRr),e(X5,ZRr),e(X5,RY),e(RY,eBr),e(X5,oBr),e(ke,rBr),e(ke,z5),e(z5,G7e),e(G7e,tBr),e(z5,aBr),e(z5,BY),e(BY,nBr),e(z5,sBr),e(ke,lBr),e(ke,Q5),e(Q5,O7e),e(O7e,iBr),e(Q5,dBr),e(Q5,PY),e(PY,cBr),e(Q5,fBr),e(ke,mBr),e(ke,W5),e(W5,V7e),e(V7e,gBr),e(W5,hBr),e(W5,IY),e(IY,pBr),e(W5,uBr),e(ke,_Br),e(ke,H5),e(H5,X7e),e(X7e,bBr),e(H5,vBr),e(H5,qY),e(qY,FBr),e(H5,TBr),e(ke,MBr),e(ke,U5),e(U5,z7e),e(z7e,EBr),e(U5,CBr),e(U5,NY),e(NY,wBr),e(U5,ABr),e(ke,yBr),e(ke,J5),e(J5,Q7e),e(Q7e,LBr),e(J5,xBr),e(J5,jY),e(jY,$Br),e(J5,kBr),e(ke,SBr),e(ke,Y5),e(Y5,W7e),e(W7e,RBr),e(Y5,BBr),e(Y5,DY),e(DY,PBr),e(Y5,IBr),e(ke,qBr),e(ke,K5),e(K5,H7e),e(H7e,NBr),e(K5,jBr),e(K5,GY),e(GY,DBr),e(K5,GBr),e(ke,OBr),e(ke,Z5),e(Z5,U7e),e(U7e,VBr),e(Z5,XBr),e(Z5,OY),e(OY,zBr),e(Z5,QBr),e(zr,WBr),M(eC,zr,null),b(f,fNe,_),b(f,Hc,_),e(Hc,oC),e(oC,J7e),M(N8,J7e,null),e(Hc,HBr),e(Hc,Y7e),e(Y7e,UBr),b(f,mNe,_),b(f,br,_),M(j8,br,null),e(br,JBr),e(br,Uc),e(Uc,YBr),e(Uc,VY),e(VY,KBr),e(Uc,ZBr),e(Uc,XY),e(XY,ePr),e(Uc,oPr),e(br,rPr),e(br,D8),e(D8,tPr),e(D8,K7e),e(K7e,aPr),e(D8,nPr),e(br,sPr),e(br,Qt),M(G8,Qt,null),e(Qt,lPr),e(Qt,Z7e),e(Z7e,iPr),e(Qt,dPr),e(Qt,Jc),e(Jc,cPr),e(Jc,eMe),e(eMe,fPr),e(Jc,mPr),e(Jc,zY),e(zY,gPr),e(Jc,hPr),e(Qt,pPr),M(rC,Qt,null),e(br,uPr),e(br,Qr),M(O8,Qr,null),e(Qr,_Pr),e(Qr,oMe),e(oMe,bPr),e(Qr,vPr),e(Qr,Tn),e(Tn,FPr),e(Tn,rMe),e(rMe,TPr),e(Tn,MPr),e(Tn,tMe),e(tMe,EPr),e(Tn,CPr),e(Tn,aMe),e(aMe,wPr),e(Tn,APr),e(Qr,yPr),e(Qr,Ge),e(Ge,tC),e(tC,nMe),e(nMe,LPr),e(tC,xPr),e(tC,QY),e(QY,$Pr),e(tC,kPr),e(Ge,SPr),e(Ge,aC),e(aC,sMe),e(sMe,RPr),e(aC,BPr),e(aC,WY),e(WY,PPr),e(aC,IPr),e(Ge,qPr),e(Ge,nC),e(nC,lMe),e(lMe,NPr),e(nC,jPr),e(nC,HY),e(HY,DPr),e(nC,GPr),e(Ge,OPr),e(Ge,sC),e(sC,iMe),e(iMe,VPr),e(sC,XPr),e(sC,UY),e(UY,zPr),e(sC,QPr),e(Ge,WPr),e(Ge,lC),e(lC,dMe),e(dMe,HPr),e(lC,UPr),e(lC,JY),e(JY,JPr),e(lC,YPr),e(Ge,KPr),e(Ge,iC),e(iC,cMe),e(cMe,ZPr),e(iC,eIr),e(iC,YY),e(YY,oIr),e(iC,rIr),e(Ge,tIr),e(Ge,dC),e(dC,fMe),e(fMe,aIr),e(dC,nIr),e(dC,KY),e(KY,sIr),e(dC,lIr),e(Ge,iIr),e(Ge,cC),e(cC,mMe),e(mMe,dIr),e(cC,cIr),e(cC,ZY),e(ZY,fIr),e(cC,mIr),e(Qr,gIr),M(fC,Qr,null),b(f,gNe,_),b(f,Yc,_),e(Yc,mC),e(mC,gMe),M(V8,gMe,null),e(Yc,hIr),e(Yc,hMe),e(hMe,pIr),b(f,hNe,_),b(f,vr,_),M(X8,vr,null),e(vr,uIr),e(vr,Kc),e(Kc,_Ir),e(Kc,eK),e(eK,bIr),e(Kc,vIr),e(Kc,oK),e(oK,FIr),e(Kc,TIr),e(vr,MIr),e(vr,z8),e(z8,EIr),e(z8,pMe),e(pMe,CIr),e(z8,wIr),e(vr,AIr),e(vr,Wt),M(Q8,Wt,null),e(Wt,yIr),e(Wt,uMe),e(uMe,LIr),e(Wt,xIr),e(Wt,Zc),e(Zc,$Ir),e(Zc,_Me),e(_Me,kIr),e(Zc,SIr),e(Zc,rK),e(rK,RIr),e(Zc,BIr),e(Wt,PIr),M(gC,Wt,null),e(vr,IIr),e(vr,Wr),M(W8,Wr,null),e(Wr,qIr),e(Wr,bMe),e(bMe,NIr),e(Wr,jIr),e(Wr,Mn),e(Mn,DIr),e(Mn,vMe),e(vMe,GIr),e(Mn,OIr),e(Mn,FMe),e(FMe,VIr),e(Mn,XIr),e(Mn,TMe),e(TMe,zIr),e(Mn,QIr),e(Wr,WIr),e(Wr,Oe),e(Oe,hC),e(hC,MMe),e(MMe,HIr),e(hC,UIr),e(hC,tK),e(tK,JIr),e(hC,YIr),e(Oe,KIr),e(Oe,pC),e(pC,EMe),e(EMe,ZIr),e(pC,eqr),e(pC,aK),e(aK,oqr),e(pC,rqr),e(Oe,tqr),e(Oe,uC),e(uC,CMe),e(CMe,aqr),e(uC,nqr),e(uC,nK),e(nK,sqr),e(uC,lqr),e(Oe,iqr),e(Oe,_C),e(_C,wMe),e(wMe,dqr),e(_C,cqr),e(_C,sK),e(sK,fqr),e(_C,mqr),e(Oe,gqr),e(Oe,bC),e(bC,AMe),e(AMe,hqr),e(bC,pqr),e(bC,lK),e(lK,uqr),e(bC,_qr),e(Oe,bqr),e(Oe,vC),e(vC,yMe),e(yMe,vqr),e(vC,Fqr),e(vC,iK),e(iK,Tqr),e(vC,Mqr),e(Oe,Eqr),e(Oe,FC),e(FC,LMe),e(LMe,Cqr),e(FC,wqr),e(FC,dK),e(dK,Aqr),e(FC,yqr),e(Oe,Lqr),e(Oe,TC),e(TC,xMe),e(xMe,xqr),e(TC,$qr),e(TC,cK),e(cK,kqr),e(TC,Sqr),e(Wr,Rqr),M(MC,Wr,null),b(f,pNe,_),b(f,ef,_),e(ef,EC),e(EC,$Me),M(H8,$Me,null),e(ef,Bqr),e(ef,kMe),e(kMe,Pqr),b(f,uNe,_),b(f,Fr,_),M(U8,Fr,null),e(Fr,Iqr),e(Fr,of),e(of,qqr),e(of,fK),e(fK,Nqr),e(of,jqr),e(of,mK),e(mK,Dqr),e(of,Gqr),e(Fr,Oqr),e(Fr,J8),e(J8,Vqr),e(J8,SMe),e(SMe,Xqr),e(J8,zqr),e(Fr,Qqr),e(Fr,Ht),M(Y8,Ht,null),e(Ht,Wqr),e(Ht,RMe),e(RMe,Hqr),e(Ht,Uqr),e(Ht,rf),e(rf,Jqr),e(rf,BMe),e(BMe,Yqr),e(rf,Kqr),e(rf,gK),e(gK,Zqr),e(rf,eNr),e(Ht,oNr),M(CC,Ht,null),e(Fr,rNr),e(Fr,Hr),M(K8,Hr,null),e(Hr,tNr),e(Hr,PMe),e(PMe,aNr),e(Hr,nNr),e(Hr,En),e(En,sNr),e(En,IMe),e(IMe,lNr),e(En,iNr),e(En,qMe),e(qMe,dNr),e(En,cNr),e(En,NMe),e(NMe,fNr),e(En,mNr),e(Hr,gNr),e(Hr,jMe),e(jMe,wC),e(wC,DMe),e(DMe,hNr),e(wC,pNr),e(wC,hK),e(hK,uNr),e(wC,_Nr),e(Hr,bNr),M(AC,Hr,null),b(f,_Ne,_),b(f,tf,_),e(tf,yC),e(yC,GMe),M(Z8,GMe,null),e(tf,vNr),e(tf,OMe),e(OMe,FNr),b(f,bNe,_),b(f,Tr,_),M(ex,Tr,null),e(Tr,TNr),e(Tr,af),e(af,MNr),e(af,pK),e(pK,ENr),e(af,CNr),e(af,uK),e(uK,wNr),e(af,ANr),e(Tr,yNr),e(Tr,ox),e(ox,LNr),e(ox,VMe),e(VMe,xNr),e(ox,$Nr),e(Tr,kNr),e(Tr,Ut),M(rx,Ut,null),e(Ut,SNr),e(Ut,XMe),e(XMe,RNr),e(Ut,BNr),e(Ut,nf),e(nf,PNr),e(nf,zMe),e(zMe,INr),e(nf,qNr),e(nf,_K),e(_K,NNr),e(nf,jNr),e(Ut,DNr),M(LC,Ut,null),e(Tr,GNr),e(Tr,Ur),M(tx,Ur,null),e(Ur,ONr),e(Ur,QMe),e(QMe,VNr),e(Ur,XNr),e(Ur,Cn),e(Cn,zNr),e(Cn,WMe),e(WMe,QNr),e(Cn,WNr),e(Cn,HMe),e(HMe,HNr),e(Cn,UNr),e(Cn,UMe),e(UMe,JNr),e(Cn,YNr),e(Ur,KNr),e(Ur,ax),e(ax,xC),e(xC,JMe),e(JMe,ZNr),e(xC,ejr),e(xC,bK),e(bK,ojr),e(xC,rjr),e(ax,tjr),e(ax,$C),e($C,YMe),e(YMe,ajr),e($C,njr),e($C,vK),e(vK,sjr),e($C,ljr),e(Ur,ijr),M(kC,Ur,null),b(f,vNe,_),b(f,sf,_),e(sf,SC),e(SC,KMe),M(nx,KMe,null),e(sf,djr),e(sf,ZMe),e(ZMe,cjr),b(f,FNe,_),b(f,Mr,_),M(sx,Mr,null),e(Mr,fjr),e(Mr,lf),e(lf,mjr),e(lf,FK),e(FK,gjr),e(lf,hjr),e(lf,TK),e(TK,pjr),e(lf,ujr),e(Mr,_jr),e(Mr,lx),e(lx,bjr),e(lx,e4e),e(e4e,vjr),e(lx,Fjr),e(Mr,Tjr),e(Mr,Jt),M(ix,Jt,null),e(Jt,Mjr),e(Jt,o4e),e(o4e,Ejr),e(Jt,Cjr),e(Jt,df),e(df,wjr),e(df,r4e),e(r4e,Ajr),e(df,yjr),e(df,MK),e(MK,Ljr),e(df,xjr),e(Jt,$jr),M(RC,Jt,null),e(Mr,kjr),e(Mr,Jr),M(dx,Jr,null),e(Jr,Sjr),e(Jr,t4e),e(t4e,Rjr),e(Jr,Bjr),e(Jr,wn),e(wn,Pjr),e(wn,a4e),e(a4e,Ijr),e(wn,qjr),e(wn,n4e),e(n4e,Njr),e(wn,jjr),e(wn,s4e),e(s4e,Djr),e(wn,Gjr),e(Jr,Ojr),e(Jr,l4e),e(l4e,BC),e(BC,i4e),e(i4e,Vjr),e(BC,Xjr),e(BC,EK),e(EK,zjr),e(BC,Qjr),e(Jr,Wjr),M(PC,Jr,null),TNe=!0},p(f,[_]){const cx={};_&2&&(cx.$$scope={dirty:_,ctx:f}),bf.$set(cx);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),_g.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),Jg.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),Ch.$set(f4e);const fx={};_&2&&(fx.$$scope={dirty:_,ctx:f}),wh.$set(fx);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),Vh.$set(m4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Xh.$set(An);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),Wh.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),Nu.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),Du.$set(p4e);const mx={};_&2&&(mx.$$scope={dirty:_,ctx:f}),x_.$set(mx);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),k_.$set(u4e);const gx={};_&2&&(gx.$$scope={dirty:_,ctx:f}),p2.$set(gx);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),_2.$set(_4e);const hx={};_&2&&(hx.$$scope={dirty:_,ctx:f}),e1.$set(hx);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),r1.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),T1.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),E1.$set(F4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),_b.$set(cf);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),vb.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),Jb.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),Kb.$set(E4e);const px={};_&2&&(px.$$scope={dirty:_,ctx:f}),nv.$set(px);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),lv.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),Ov.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),Xv.$set(A4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),kF.$set(Kr);const ux={};_&2&&(ux.$$scope={dirty:_,ctx:f}),RF.$set(ux);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),IF.$set(y4e);const _x={};_&2&&(_x.$$scope={dirty:_,ctx:f}),NF.$set(_x);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),YF.$set(L4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),ZF.$set(Zr);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),r6.$set(x4e);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),a6.$set(ff);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),h6.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),u6.$set(k4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),M6.$set(y);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),C6.$set(IC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),B6.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),I6.$set(R4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),D6.$set(qC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),O6.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),H6.$set(P4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),J6.$set(NC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),oT.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),tT.$set(q4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),lT.$set(jC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),dT.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),mT.$set(j4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),hT.$set(DC);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),FT.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),MT.$set(G4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),wT.$set(GC);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),yT.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),v9.$set(V4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),T9.$set(OC);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),z9.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),W9.$set(z4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),s7.$set(VC);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),i7.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),g7.$set(W4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),p7.$set(XC);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),I7.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),N7.$set(U4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),U7.$set(zC);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),Y7.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),CM.$set(Y4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),AM.$set(QC);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),XM.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),QM.$set(Z4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),UM.$set(WC);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),YM.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),ZM.$set(oEe);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),o4.$set(HC);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),M4.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),C4.$set(tEe);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),z4.$set(UC);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),W4.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),U4.$set(nEe);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),Y4.$set(JC);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),Z4.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),oE.$set(lEe);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),LE.$set(YC);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),$E.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),DE.$set(dEe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),OE.$set(KC);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),r5.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),a5.$set(fEe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),p5.$set(ZC);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),_5.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),L5.$set(gEe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),$5.$set(e3);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),G5.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),V5.$set(pEe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),eC.$set(o3);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),rC.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),fC.$set(_Ee);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),gC.$set(r3);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),MC.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),CC.$set(vEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),AC.$set(t3);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),LC.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),kC.$set(TEe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),RC.$set(a3);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),PC.$set(MEe)},i(f){TNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(bf.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(fA.$$.fragment,f),E(_g.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(_A.$$.fragment,f),E(Jg.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(Ch.$$.fragment,f),E(wh.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(Wh.$$.fragment,f),E(PA.$$.fragment,f),E(Nu.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(Du.$$.fragment,f),E(DA.$$.fragment,f),E(x_.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(k_.$$.fragment,f),E(zA.$$.fragment,f),E(p2.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(_2.$$.fragment,f),E(JA.$$.fragment,f),E(e1.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e0.$$.fragment,f),E(r1.$$.fragment,f),E(o0.$$.fragment,f),E(T1.$$.fragment,f),E(r0.$$.fragment,f),E(t0.$$.fragment,f),E(n0.$$.fragment,f),E(E1.$$.fragment,f),E(s0.$$.fragment,f),E(_b.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(c0.$$.fragment,f),E(vb.$$.fragment,f),E(f0.$$.fragment,f),E(Jb.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(p0.$$.fragment,f),E(Kb.$$.fragment,f),E(u0.$$.fragment,f),E(nv.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(F0.$$.fragment,f),E(lv.$$.fragment,f),E(T0.$$.fragment,f),E(Ov.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(Xv.$$.fragment,f),E(A0.$$.fragment,f),E(kF.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(RF.$$.fragment,f),E(k0.$$.fragment,f),E(IF.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(NF.$$.fragment,f),E(I0.$$.fragment,f),E(YF.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(ZF.$$.fragment,f),E(G0.$$.fragment,f),E(r6.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(a6.$$.fragment,f),E(Q0.$$.fragment,f),E(h6.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(u6.$$.fragment,f),E(Y0.$$.fragment,f),E(M6.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(C6.$$.fragment,f),E(ry.$$.fragment,f),E(B6.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(I6.$$.fragment,f),E(ly.$$.fragment,f),E(D6.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(O6.$$.fragment,f),E(gy.$$.fragment,f),E(H6.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(J6.$$.fragment,f),E(by.$$.fragment,f),E(oT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(tT.$$.fragment,f),E(Ey.$$.fragment,f),E(lT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(dT.$$.fragment,f),E(xy.$$.fragment,f),E(mT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(hT.$$.fragment,f),E(By.$$.fragment,f),E(FT.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(MT.$$.fragment,f),E(jy.$$.fragment,f),E(wT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(yT.$$.fragment,f),E(Xy.$$.fragment,f),E(v9.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(T9.$$.fragment,f),E(Uy.$$.fragment,f),E(z9.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(W9.$$.fragment,f),E(eL.$$.fragment,f),E(s7.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(i7.$$.fragment,f),E(nL.$$.fragment,f),E(g7.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(p7.$$.fragment,f),E(cL.$$.fragment,f),E(I7.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(N7.$$.fragment,f),E(pL.$$.fragment,f),E(U7.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(Y7.$$.fragment,f),E(FL.$$.fragment,f),E(CM.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(AM.$$.fragment,f),E(wL.$$.fragment,f),E(XM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(QM.$$.fragment,f),E($L.$$.fragment,f),E(UM.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(YM.$$.fragment,f),E(IL.$$.fragment,f),E(ZM.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(o4.$$.fragment,f),E(GL.$$.fragment,f),E(M4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(C4.$$.fragment,f),E(QL.$$.fragment,f),E(z4.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(W4.$$.fragment,f),E(YL.$$.fragment,f),E(U4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(Y4.$$.fragment,f),E(r8.$$.fragment,f),E(Z4.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(oE.$$.fragment,f),E(l8.$$.fragment,f),E(LE.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E($E.$$.fragment,f),E(m8.$$.fragment,f),E(DE.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(OE.$$.fragment,f),E(_8.$$.fragment,f),E(r5.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(a5.$$.fragment,f),E(M8.$$.fragment,f),E(p5.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(_5.$$.fragment,f),E(y8.$$.fragment,f),E(L5.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E($5.$$.fragment,f),E(S8.$$.fragment,f),E(G5.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(V5.$$.fragment,f),E(q8.$$.fragment,f),E(eC.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(rC.$$.fragment,f),E(O8.$$.fragment,f),E(fC.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(gC.$$.fragment,f),E(W8.$$.fragment,f),E(MC.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(CC.$$.fragment,f),E(K8.$$.fragment,f),E(AC.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(LC.$$.fragment,f),E(tx.$$.fragment,f),E(kC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(RC.$$.fragment,f),E(dx.$$.fragment,f),E(PC.$$.fragment,f),TNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(bf.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(fA.$$.fragment,f),C(_g.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(_A.$$.fragment,f),C(Jg.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(Ch.$$.fragment,f),C(wh.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(Wh.$$.fragment,f),C(PA.$$.fragment,f),C(Nu.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(Du.$$.fragment,f),C(DA.$$.fragment,f),C(x_.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(k_.$$.fragment,f),C(zA.$$.fragment,f),C(p2.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(_2.$$.fragment,f),C(JA.$$.fragment,f),C(e1.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e0.$$.fragment,f),C(r1.$$.fragment,f),C(o0.$$.fragment,f),C(T1.$$.fragment,f),C(r0.$$.fragment,f),C(t0.$$.fragment,f),C(n0.$$.fragment,f),C(E1.$$.fragment,f),C(s0.$$.fragment,f),C(_b.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(c0.$$.fragment,f),C(vb.$$.fragment,f),C(f0.$$.fragment,f),C(Jb.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(p0.$$.fragment,f),C(Kb.$$.fragment,f),C(u0.$$.fragment,f),C(nv.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(F0.$$.fragment,f),C(lv.$$.fragment,f),C(T0.$$.fragment,f),C(Ov.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(Xv.$$.fragment,f),C(A0.$$.fragment,f),C(kF.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(RF.$$.fragment,f),C(k0.$$.fragment,f),C(IF.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(NF.$$.fragment,f),C(I0.$$.fragment,f),C(YF.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(ZF.$$.fragment,f),C(G0.$$.fragment,f),C(r6.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(a6.$$.fragment,f),C(Q0.$$.fragment,f),C(h6.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(u6.$$.fragment,f),C(Y0.$$.fragment,f),C(M6.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(C6.$$.fragment,f),C(ry.$$.fragment,f),C(B6.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(I6.$$.fragment,f),C(ly.$$.fragment,f),C(D6.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(O6.$$.fragment,f),C(gy.$$.fragment,f),C(H6.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(J6.$$.fragment,f),C(by.$$.fragment,f),C(oT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(tT.$$.fragment,f),C(Ey.$$.fragment,f),C(lT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(dT.$$.fragment,f),C(xy.$$.fragment,f),C(mT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(hT.$$.fragment,f),C(By.$$.fragment,f),C(FT.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(MT.$$.fragment,f),C(jy.$$.fragment,f),C(wT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(yT.$$.fragment,f),C(Xy.$$.fragment,f),C(v9.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(T9.$$.fragment,f),C(Uy.$$.fragment,f),C(z9.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(W9.$$.fragment,f),C(eL.$$.fragment,f),C(s7.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(i7.$$.fragment,f),C(nL.$$.fragment,f),C(g7.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(p7.$$.fragment,f),C(cL.$$.fragment,f),C(I7.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(N7.$$.fragment,f),C(pL.$$.fragment,f),C(U7.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(Y7.$$.fragment,f),C(FL.$$.fragment,f),C(CM.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(AM.$$.fragment,f),C(wL.$$.fragment,f),C(XM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(QM.$$.fragment,f),C($L.$$.fragment,f),C(UM.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(YM.$$.fragment,f),C(IL.$$.fragment,f),C(ZM.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(o4.$$.fragment,f),C(GL.$$.fragment,f),C(M4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(C4.$$.fragment,f),C(QL.$$.fragment,f),C(z4.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(W4.$$.fragment,f),C(YL.$$.fragment,f),C(U4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(Y4.$$.fragment,f),C(r8.$$.fragment,f),C(Z4.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(oE.$$.fragment,f),C(l8.$$.fragment,f),C(LE.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C($E.$$.fragment,f),C(m8.$$.fragment,f),C(DE.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(OE.$$.fragment,f),C(_8.$$.fragment,f),C(r5.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(a5.$$.fragment,f),C(M8.$$.fragment,f),C(p5.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(_5.$$.fragment,f),C(y8.$$.fragment,f),C(L5.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C($5.$$.fragment,f),C(S8.$$.fragment,f),C(G5.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(V5.$$.fragment,f),C(q8.$$.fragment,f),C(eC.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(rC.$$.fragment,f),C(O8.$$.fragment,f),C(fC.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(gC.$$.fragment,f),C(W8.$$.fragment,f),C(MC.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(CC.$$.fragment,f),C(K8.$$.fragment,f),C(AC.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(LC.$$.fragment,f),C(tx.$$.fragment,f),C(kC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(RC.$$.fragment,f),C(dx.$$.fragment,f),C(PC.$$.fragment,f),TNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(Ne),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(bIe),f&&t(ui),w(nA),f&&t(vIe),f&&t(kn),f&&t(FIe),w(sA,f),f&&t(TIe),f&&t(L$),f&&t(MIe),w(bf,f),f&&t(EIe),f&&t(_i),w(lA),f&&t(CIe),f&&t(Co),w(iA),w(fA),w(_g),w(mA),f&&t(wIe),f&&t(vi),w(gA),f&&t(AIe),f&&t(wo),w(hA),w(_A),w(Jg),w(bA),f&&t(yIe),f&&t(Fi),w(vA),f&&t(LIe),f&&t(Ao),w(FA),w(EA),w(Ch),w(wh),w(CA),f&&t(xIe),f&&t(Ti),w(wA),f&&t($Ie),f&&t(yo),w(AA),w(xA),w(Vh),w(Xh),w($A),f&&t(kIe),f&&t(Ei),w(kA),f&&t(SIe),f&&t(Lo),w(SA),w(BA),w(Wh),w(PA),w(Nu),f&&t(RIe),f&&t(Ai),w(IA),f&&t(BIe),f&&t(xo),w(qA),w(jA),w(Du),w(DA),w(x_),f&&t(PIe),f&&t(xi),w(GA),f&&t(IIe),f&&t($o),w(OA),w(XA),w(k_),w(zA),w(p2),f&&t(qIe),f&&t(Si),w(QA),f&&t(NIe),f&&t(ko),w(WA),w(UA),w(_2),w(JA),w(e1),f&&t(jIe),f&&t(Pi),w(YA),f&&t(DIe),f&&t(So),w(KA),w(e0),w(r1),w(o0),w(T1),f&&t(GIe),f&&t(Ni),w(r0),f&&t(OIe),f&&t(Ro),w(t0),w(n0),w(E1),w(s0),w(_b),f&&t(VIe),f&&t(Gi),w(l0),f&&t(XIe),f&&t(Bo),w(i0),w(c0),w(vb),w(f0),w(Jb),f&&t(zIe),f&&t(Xi),w(m0),f&&t(QIe),f&&t(Po),w(g0),w(p0),w(Kb),w(u0),w(nv),f&&t(WIe),f&&t(Wi),w(_0),f&&t(HIe),f&&t(Io),w(b0),w(F0),w(lv),w(T0),w(Ov),f&&t(UIe),f&&t(Ji),w(M0),f&&t(JIe),f&&t(qo),w(E0),w(w0),w(Xv),w(A0),w(kF),f&&t(YIe),f&&t(Zi),w(y0),f&&t(KIe),f&&t(No),w(L0),w($0),w(RF),w(k0),w(IF),f&&t(ZIe),f&&t(rd),w(S0),f&&t(eqe),f&&t(jo),w(R0),w(P0),w(NF),w(I0),w(YF),f&&t(oqe),f&&t(nd),w(q0),f&&t(rqe),f&&t(Do),w(N0),w(D0),w(ZF),w(G0),w(r6),f&&t(tqe),f&&t(id),w(O0),f&&t(aqe),f&&t(Go),w(V0),w(z0),w(a6),w(Q0),w(h6),f&&t(nqe),f&&t(fd),w(W0),f&&t(sqe),f&&t(Oo),w(H0),w(J0),w(u6),w(Y0),w(M6),f&&t(lqe),f&&t(hd),w(K0),f&&t(iqe),f&&t(Vo),w(Z0),w(oy),w(C6),w(ry),w(B6),f&&t(dqe),f&&t(_d),w(ty),f&&t(cqe),f&&t(Xo),w(ay),w(sy),w(I6),w(ly),w(D6),f&&t(fqe),f&&t(Fd),w(dy),f&&t(mqe),f&&t(zo),w(cy),w(my),w(O6),w(gy),w(H6),f&&t(gqe),f&&t(Ed),w(hy),f&&t(hqe),f&&t(Qo),w(py),w(_y),w(J6),w(by),w(oT),f&&t(pqe),f&&t(yd),w(vy),f&&t(uqe),f&&t(Wo),w(Fy),w(My),w(tT),w(Ey),w(lT),f&&t(_qe),f&&t($d),w(wy),f&&t(bqe),f&&t(Ho),w(Ay),w(Ly),w(dT),w(xy),w(mT),f&&t(vqe),f&&t(Rd),w($y),f&&t(Fqe),f&&t(Uo),w(ky),w(Ry),w(hT),w(By),w(FT),f&&t(Tqe),f&&t(Id),w(Py),f&&t(Mqe),f&&t(Jo),w(Iy),w(Ny),w(MT),w(jy),w(wT),f&&t(Eqe),f&&t(jd),w(Dy),f&&t(Cqe),f&&t(Yo),w(Gy),w(Vy),w(yT),w(Xy),w(v9),f&&t(wqe),f&&t(Od),w(zy),f&&t(Aqe),f&&t(Ko),w(Qy),w(Hy),w(T9),w(Uy),w(z9),f&&t(yqe),f&&t(zd),w(Jy),f&&t(Lqe),f&&t(Zo),w(Yy),w(Zy),w(W9),w(eL),w(s7),f&&t(xqe),f&&t(Hd),w(oL),f&&t($qe),f&&t(er),w(rL),w(aL),w(i7),w(nL),w(g7),f&&t(kqe),f&&t(Yd),w(sL),f&&t(Sqe),f&&t(or),w(lL),w(dL),w(p7),w(cL),w(I7),f&&t(Rqe),f&&t(ec),w(fL),f&&t(Bqe),f&&t(rr),w(mL),w(hL),w(N7),w(pL),w(U7),f&&t(Pqe),f&&t(tc),w(uL),f&&t(Iqe),f&&t(tr),w(_L),w(vL),w(Y7),w(FL),w(CM),f&&t(qqe),f&&t(sc),w(TL),f&&t(Nqe),f&&t(ar),w(ML),w(CL),w(AM),w(wL),w(XM),f&&t(jqe),f&&t(dc),w(AL),f&&t(Dqe),f&&t(nr),w(yL),w(xL),w(QM),w($L),w(UM),f&&t(Gqe),f&&t(mc),w(SL),f&&t(Oqe),f&&t(sr),w(RL),w(PL),w(YM),w(IL),w(ZM),f&&t(Vqe),f&&t(pc),w(qL),f&&t(Xqe),f&&t(lr),w(NL),w(DL),w(o4),w(GL),w(M4),f&&t(zqe),f&&t(bc),w(OL),f&&t(Qqe),f&&t(ir),w(VL),w(zL),w(C4),w(QL),w(z4),f&&t(Wqe),f&&t(Tc),w(WL),f&&t(Hqe),f&&t(dr),w(HL),w(JL),w(W4),w(YL),w(U4),f&&t(Uqe),f&&t(Cc),w(KL),f&&t(Jqe),f&&t(cr),w(ZL),w(o8),w(Y4),w(r8),w(Z4),f&&t(Yqe),f&&t(yc),w(t8),f&&t(Kqe),f&&t(fr),w(a8),w(s8),w(oE),w(l8),w(LE),f&&t(Zqe),f&&t($c),w(i8),f&&t(eNe),f&&t(mr),w(d8),w(f8),w($E),w(m8),w(DE),f&&t(oNe),f&&t(Rc),w(g8),f&&t(rNe),f&&t(gr),w(h8),w(u8),w(OE),w(_8),w(r5),f&&t(tNe),f&&t(Ic),w(b8),f&&t(aNe),f&&t(hr),w(v8),w(T8),w(a5),w(M8),w(p5),f&&t(nNe),f&&t(jc),w(E8),f&&t(sNe),f&&t(pr),w(C8),w(A8),w(_5),w(y8),w(L5),f&&t(lNe),f&&t(Oc),w(L8),f&&t(iNe),f&&t(ur),w(x8),w(k8),w($5),w(S8),w(G5),f&&t(dNe),f&&t(zc),w(R8),f&&t(cNe),f&&t(_r),w(B8),w(I8),w(V5),w(q8),w(eC),f&&t(fNe),f&&t(Hc),w(N8),f&&t(mNe),f&&t(br),w(j8),w(G8),w(rC),w(O8),w(fC),f&&t(gNe),f&&t(Yc),w(V8),f&&t(hNe),f&&t(vr),w(X8),w(Q8),w(gC),w(W8),w(MC),f&&t(pNe),f&&t(ef),w(H8),f&&t(uNe),f&&t(Fr),w(U8),w(Y8),w(CC),w(K8),w(AC),f&&t(_Ne),f&&t(tf),w(Z8),f&&t(bNe),f&&t(Tr),w(ex),w(rx),w(LC),w(tx),w(kC),f&&t(vNe),f&&t(sf),w(nx),f&&t(FNe),f&&t(Mr),w(sx),w(ix),w(RC),w(dx),w(PC)}}}const qLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function NLt(L){return N0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zLt extends B0t{constructor(g){super();P0t(this,g,NLt,ILt,I0t,{})}}export{zLt as default,qLt as metadata};
