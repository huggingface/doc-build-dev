import{S as Xkt,i as zkt,s as Wkt,e as a,k as l,w as F,t as o,M as Qkt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Hkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as YXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ukt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,kw,uf,De,We,pi,yn,Sw,Ln,xn,Rw,_i,$n,Pw,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),kw=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),Sw=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Rw=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),Pw=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ek=s(p);m=r(ek,"NewModelConfig"),ek.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var ok=s(mi);_f=r(ok,"model_type"),ok.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var rk=s(gi);hi=r(rk,'"new-model"'),rk.forEach(t),kw=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),Sw=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var tk=s(Ln);xn=r(tk,"PreTrainedModel"),tk.forEach(t),Rw=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),Pw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var ak=s(ui);bf=r(ak,"NewModelConfig"),ak.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,kw),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,Sw),e(De,Ln),e(Ln,xn),e(De,Rw),e(De,_i),e(_i,$n),e(De,Pw),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,kw,uf,De,We,pi,yn,Sw,Ln,xn,Rw,_i,$n,Pw,ui,bf,Ca,Qe,Ae,ek,bi,ok,rk,Eo,wa,tk,vf,ak,OOe,kqe,vi,Ff,Coe,Bw,VOe,woe,XOe,Sqe,kn,zOe,Aoe,WOe,QOe,yoe,HOe,UOe,Rqe,Iw,Pqe,nk,JOe,Bqe,Tf,Iqe,Fi,Mf,Loe,Nw,YOe,xoe,KOe,Nqe,Co,qw,ZOe,jw,eVe,sk,oVe,rVe,tVe,Dw,aVe,$oe,nVe,sVe,lVe,Er,Gw,iVe,koe,dVe,cVe,Ti,fVe,Soe,mVe,gVe,Roe,hVe,pVe,_Ve,A,Ef,Poe,uVe,bVe,lk,vVe,FVe,TVe,Cf,Boe,MVe,EVe,ik,CVe,wVe,AVe,wf,Ioe,yVe,LVe,dk,xVe,$Ve,kVe,Af,Noe,SVe,RVe,ck,PVe,BVe,IVe,yf,qoe,NVe,qVe,fk,jVe,DVe,GVe,Lf,joe,OVe,VVe,mk,XVe,zVe,WVe,xf,Doe,QVe,HVe,gk,UVe,JVe,YVe,$f,Goe,KVe,ZVe,hk,eXe,oXe,rXe,kf,Ooe,tXe,aXe,pk,nXe,sXe,lXe,Sf,Voe,iXe,dXe,_k,cXe,fXe,mXe,Rf,Xoe,gXe,hXe,uk,pXe,_Xe,uXe,Pf,zoe,bXe,vXe,bk,FXe,TXe,MXe,Bf,Woe,EXe,CXe,vk,wXe,AXe,yXe,If,Qoe,LXe,xXe,Fk,$Xe,kXe,SXe,Nf,Hoe,RXe,PXe,Tk,BXe,IXe,NXe,qf,Uoe,qXe,jXe,Mk,DXe,GXe,OXe,jf,Joe,VXe,XXe,Ek,zXe,WXe,QXe,Df,Yoe,HXe,UXe,Ck,JXe,YXe,KXe,Gf,Koe,ZXe,eze,wk,oze,rze,tze,Of,Zoe,aze,nze,Ak,sze,lze,ize,Vf,ere,dze,cze,yk,fze,mze,gze,Xf,ore,hze,pze,Lk,_ze,uze,bze,zf,rre,vze,Fze,xk,Tze,Mze,Eze,Wf,tre,Cze,wze,$k,Aze,yze,Lze,Qf,are,xze,$ze,kk,kze,Sze,Rze,Hf,nre,Pze,Bze,Sk,Ize,Nze,qze,Uf,sre,jze,Dze,Rk,Gze,Oze,Vze,Jf,lre,Xze,zze,Pk,Wze,Qze,Hze,Yf,ire,Uze,Jze,Bk,Yze,Kze,Zze,Kf,dre,eWe,oWe,Ik,rWe,tWe,aWe,Zf,cre,nWe,sWe,Nk,lWe,iWe,dWe,em,fre,cWe,fWe,qk,mWe,gWe,hWe,om,mre,pWe,_We,jk,uWe,bWe,vWe,rm,gre,FWe,TWe,Dk,MWe,EWe,CWe,tm,hre,wWe,AWe,Gk,yWe,LWe,xWe,am,pre,$We,kWe,Ok,SWe,RWe,PWe,nm,_re,BWe,IWe,Vk,NWe,qWe,jWe,sm,ure,DWe,GWe,Xk,OWe,VWe,XWe,lm,bre,zWe,WWe,zk,QWe,HWe,UWe,im,vre,JWe,YWe,Wk,KWe,ZWe,eQe,dm,Fre,oQe,rQe,Qk,tQe,aQe,nQe,cm,Tre,sQe,lQe,Hk,iQe,dQe,cQe,fm,Mre,fQe,mQe,Uk,gQe,hQe,pQe,mm,Ere,_Qe,uQe,Jk,bQe,vQe,FQe,gm,Cre,TQe,MQe,Yk,EQe,CQe,wQe,hm,wre,AQe,yQe,Kk,LQe,xQe,$Qe,pm,Are,kQe,SQe,Zk,RQe,PQe,BQe,_m,yre,IQe,NQe,eS,qQe,jQe,DQe,um,Lre,GQe,OQe,oS,VQe,XQe,zQe,bm,xre,WQe,QQe,rS,HQe,UQe,JQe,vm,$re,YQe,KQe,tS,ZQe,eHe,oHe,Fm,kre,rHe,tHe,aS,aHe,nHe,sHe,Tm,Sre,lHe,iHe,nS,dHe,cHe,fHe,Mm,Rre,mHe,gHe,sS,hHe,pHe,_He,Em,Pre,uHe,bHe,lS,vHe,FHe,THe,Cm,Bre,MHe,EHe,iS,CHe,wHe,AHe,wm,Ire,yHe,LHe,dS,xHe,$He,kHe,Am,Nre,SHe,RHe,cS,PHe,BHe,IHe,ym,qre,NHe,qHe,fS,jHe,DHe,GHe,Lm,jre,OHe,VHe,mS,XHe,zHe,WHe,xm,Dre,QHe,HHe,gS,UHe,JHe,YHe,$m,Gre,KHe,ZHe,hS,eUe,oUe,rUe,km,Ore,tUe,aUe,pS,nUe,sUe,lUe,Sm,Vre,iUe,dUe,_S,cUe,fUe,mUe,Rm,Xre,gUe,hUe,uS,pUe,_Ue,uUe,Pm,zre,bUe,vUe,bS,FUe,TUe,MUe,Bm,Wre,EUe,CUe,vS,wUe,AUe,yUe,Im,Qre,LUe,xUe,FS,$Ue,kUe,SUe,Nm,Hre,RUe,PUe,TS,BUe,IUe,NUe,qm,Ure,qUe,jUe,MS,DUe,GUe,OUe,jm,Jre,VUe,XUe,ES,zUe,WUe,QUe,Dm,Yre,HUe,UUe,CS,JUe,YUe,KUe,Gm,Kre,ZUe,eJe,wS,oJe,rJe,tJe,Om,Zre,aJe,nJe,AS,sJe,lJe,iJe,Vm,ete,dJe,cJe,yS,fJe,mJe,gJe,Xm,ote,hJe,pJe,LS,_Je,uJe,bJe,zm,rte,vJe,FJe,xS,TJe,MJe,EJe,Wm,tte,CJe,wJe,$S,AJe,yJe,LJe,Qm,ate,xJe,$Je,kS,kJe,SJe,RJe,Hm,nte,PJe,BJe,SS,IJe,NJe,qJe,Um,ste,jJe,DJe,RS,GJe,OJe,VJe,Jm,lte,XJe,zJe,PS,WJe,QJe,HJe,Ym,ite,UJe,JJe,BS,YJe,KJe,ZJe,Km,dte,eYe,oYe,IS,rYe,tYe,aYe,Zm,cte,nYe,sYe,NS,lYe,iYe,dYe,eg,fte,cYe,fYe,qS,mYe,gYe,hYe,og,mte,pYe,_Ye,jS,uYe,bYe,vYe,rg,gte,FYe,TYe,DS,MYe,EYe,CYe,tg,hte,wYe,AYe,GS,yYe,LYe,xYe,ag,pte,$Ye,kYe,OS,SYe,RYe,PYe,ng,_te,BYe,IYe,VS,NYe,qYe,jYe,sg,ute,DYe,GYe,XS,OYe,VYe,XYe,lg,bte,zYe,WYe,zS,QYe,HYe,UYe,ig,vte,JYe,YYe,WS,KYe,ZYe,eKe,dg,Fte,oKe,rKe,QS,tKe,aKe,nKe,cg,Tte,sKe,lKe,HS,iKe,dKe,cKe,fg,Mte,fKe,mKe,US,gKe,hKe,pKe,mg,Ete,_Ke,uKe,JS,bKe,vKe,FKe,gg,Cte,TKe,MKe,YS,EKe,CKe,wKe,hg,wte,AKe,yKe,KS,LKe,xKe,$Ke,pg,Ate,kKe,SKe,ZS,RKe,PKe,BKe,_g,yte,IKe,NKe,eR,qKe,jKe,DKe,ug,Lte,GKe,OKe,oR,VKe,XKe,zKe,bg,xte,WKe,QKe,rR,HKe,UKe,JKe,vg,$te,YKe,KKe,tR,ZKe,eZe,oZe,Fg,kte,rZe,tZe,aR,aZe,nZe,sZe,Tg,Ste,lZe,iZe,nR,dZe,cZe,fZe,Mg,Rte,mZe,gZe,sR,hZe,pZe,_Ze,Eg,Pte,uZe,bZe,lR,vZe,FZe,TZe,Cg,Bte,MZe,EZe,iR,CZe,wZe,AZe,wg,yZe,Ag,Ow,LZe,Ite,xZe,qqe,Mi,yg,Nte,Vw,$Ze,qte,kZe,jqe,wo,Xw,SZe,zw,RZe,dR,PZe,BZe,IZe,Ww,NZe,jte,qZe,jZe,DZe,Cr,Qw,GZe,Dte,OZe,VZe,Aa,XZe,Gte,zZe,WZe,Ote,QZe,HZe,Vte,UZe,JZe,YZe,k,Sn,Xte,KZe,ZZe,cR,eeo,oeo,fR,reo,teo,aeo,Rn,zte,neo,seo,mR,leo,ieo,gR,deo,ceo,feo,Pn,Wte,meo,geo,hR,heo,peo,pR,_eo,ueo,beo,Lg,Qte,veo,Feo,_R,Teo,Meo,Eeo,Bn,Hte,Ceo,weo,uR,Aeo,yeo,bR,Leo,xeo,$eo,xg,Ute,keo,Seo,vR,Reo,Peo,Beo,$g,Jte,Ieo,Neo,FR,qeo,jeo,Deo,kg,Yte,Geo,Oeo,TR,Veo,Xeo,zeo,In,Kte,Weo,Qeo,MR,Heo,Ueo,ER,Jeo,Yeo,Keo,Nn,Zte,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,qn,eae,soo,loo,AR,ioo,doo,yR,coo,foo,moo,Sg,oae,goo,hoo,LR,poo,_oo,uoo,Rg,rae,boo,voo,xR,Foo,Too,Moo,jn,tae,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Pg,aae,$oo,koo,SR,Soo,Roo,Poo,Dn,nae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Gn,sae,Ooo,Voo,BR,Xoo,zoo,IR,Woo,Qoo,Hoo,On,lae,Uoo,Joo,NR,Yoo,Koo,qR,Zoo,ero,oro,Bg,iae,rro,tro,jR,aro,nro,sro,Vn,dae,lro,iro,DR,dro,cro,GR,fro,mro,gro,Xn,cae,hro,pro,OR,_ro,uro,VR,bro,vro,Fro,zn,fae,Tro,Mro,XR,Ero,Cro,zR,wro,Aro,yro,Wn,mae,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Qn,gae,Bro,Iro,HR,Nro,qro,UR,jro,Dro,Gro,Hn,hae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ig,pae,Uro,Jro,KR,Yro,Kro,Zro,Un,_ae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,Ng,uae,lto,ito,oP,dto,cto,fto,Jn,bae,mto,gto,rP,hto,pto,tP,_to,uto,bto,Yn,vae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,Kn,Fae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,qg,Tae,Rto,Pto,iP,Bto,Ito,Nto,Zn,Mae,qto,jto,dP,Dto,Gto,cP,Oto,Vto,Xto,es,Eae,zto,Wto,fP,Qto,Hto,mP,Uto,Jto,Yto,jg,Cae,Kto,Zto,gP,eao,oao,rao,os,wae,tao,aao,hP,nao,sao,pP,lao,iao,dao,rs,Aae,cao,fao,_P,mao,gao,uP,hao,pao,_ao,ts,yae,uao,bao,bP,vao,Fao,vP,Tao,Mao,Eao,as,Lae,Cao,wao,FP,Aao,yao,TP,Lao,xao,$ao,ns,xae,kao,Sao,MP,Rao,Pao,EP,Bao,Iao,Nao,ss,$ae,qao,jao,CP,Dao,Gao,wP,Oao,Vao,Xao,ls,kae,zao,Wao,AP,Qao,Hao,yP,Uao,Jao,Yao,is,Sae,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Dg,Rae,nno,sno,$P,lno,ino,dno,ds,Pae,cno,fno,kP,mno,gno,SP,hno,pno,_no,Gg,Bae,uno,bno,RP,vno,Fno,Tno,Og,Iae,Mno,Eno,PP,Cno,wno,Ano,cs,Nae,yno,Lno,BP,xno,$no,IP,kno,Sno,Rno,fs,qae,Pno,Bno,NP,Ino,Nno,qP,qno,jno,Dno,ms,jae,Gno,Ono,jP,Vno,Xno,DP,zno,Wno,Qno,Vg,Dae,Hno,Uno,GP,Jno,Yno,Kno,gs,Gae,Zno,eso,OP,oso,rso,VP,tso,aso,nso,hs,Oae,sso,lso,XP,iso,dso,zP,cso,fso,mso,ps,Vae,gso,hso,WP,pso,_so,QP,uso,bso,vso,_s,Xae,Fso,Tso,HP,Mso,Eso,UP,Cso,wso,Aso,us,zae,yso,Lso,JP,xso,$so,YP,kso,Sso,Rso,Xg,Wae,Pso,Bso,KP,Iso,Nso,qso,bs,Qae,jso,Dso,ZP,Gso,Oso,eB,Vso,Xso,zso,zg,Hae,Wso,Qso,oB,Hso,Uso,Jso,Wg,Uae,Yso,Kso,rB,Zso,elo,olo,Qg,Jae,rlo,tlo,tB,alo,nlo,slo,Hg,Yae,llo,ilo,aB,dlo,clo,flo,vs,Kae,mlo,glo,nB,hlo,plo,sB,_lo,ulo,blo,Ug,Zae,vlo,Flo,lB,Tlo,Mlo,Elo,Fs,ene,Clo,wlo,iB,Alo,ylo,dB,Llo,xlo,$lo,Ts,one,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,Nlo,Ms,rne,qlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,Es,tne,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Cs,ane,Klo,Zlo,_B,eio,oio,uB,rio,tio,aio,ws,nne,nio,sio,bB,lio,iio,vB,dio,cio,fio,Jg,sne,mio,gio,FB,hio,pio,_io,Yg,lne,uio,bio,TB,vio,Fio,Tio,As,ine,Mio,Eio,MB,Cio,wio,EB,Aio,yio,Lio,ys,dne,xio,$io,CB,kio,Sio,wB,Rio,Pio,Bio,Ls,cne,Iio,Nio,AB,qio,jio,yB,Dio,Gio,Oio,Kg,fne,Vio,Xio,LB,zio,Wio,Qio,Zg,mne,Hio,Uio,xB,Jio,Yio,Kio,eh,gne,Zio,edo,$B,odo,rdo,tdo,xs,hne,ado,ndo,kB,sdo,ldo,SB,ido,ddo,cdo,oh,pne,fdo,mdo,RB,gdo,hdo,pdo,rh,_ne,_do,udo,PB,bdo,vdo,Fdo,th,une,Tdo,Mdo,BB,Edo,Cdo,wdo,$s,bne,Ado,ydo,IB,Ldo,xdo,NB,$do,kdo,Sdo,ah,vne,Rdo,Pdo,qB,Bdo,Ido,Ndo,nh,Fne,qdo,jdo,jB,Ddo,Gdo,Odo,ks,Tne,Vdo,Xdo,DB,zdo,Wdo,GB,Qdo,Hdo,Udo,Ss,Mne,Jdo,Ydo,OB,Kdo,Zdo,VB,eco,oco,rco,Rs,Ene,tco,aco,XB,nco,sco,zB,lco,ico,dco,Ps,Cne,cco,fco,WB,mco,gco,QB,hco,pco,_co,sh,uco,lh,Hw,bco,wne,vco,Dqe,Ei,ih,Ane,Uw,Fco,yne,Tco,Gqe,Ao,Jw,Mco,Yw,Eco,HB,Cco,wco,Aco,Kw,yco,Lne,Lco,xco,$co,He,Zw,kco,xne,Sco,Rco,ya,Pco,$ne,Bco,Ico,kne,Nco,qco,Sne,jco,Dco,Gco,Y,dh,Rne,Oco,Vco,UB,Xco,zco,Wco,ch,Pne,Qco,Hco,JB,Uco,Jco,Yco,fh,Bne,Kco,Zco,YB,efo,ofo,rfo,mh,Ine,tfo,afo,KB,nfo,sfo,lfo,gh,Nne,ifo,dfo,ZB,cfo,ffo,mfo,hh,qne,gfo,hfo,eI,pfo,_fo,ufo,ph,jne,bfo,vfo,oI,Ffo,Tfo,Mfo,_h,Dne,Efo,Cfo,rI,wfo,Afo,yfo,uh,Gne,Lfo,xfo,tI,$fo,kfo,Sfo,bh,One,Rfo,Pfo,aI,Bfo,Ifo,Nfo,vh,Vne,qfo,jfo,nI,Dfo,Gfo,Ofo,Fh,Xne,Vfo,Xfo,sI,zfo,Wfo,Qfo,Th,zne,Hfo,Ufo,lI,Jfo,Yfo,Kfo,Mh,Wne,Zfo,emo,iI,omo,rmo,tmo,Eh,Qne,amo,nmo,dI,smo,lmo,imo,Ch,Hne,dmo,cmo,cI,fmo,mmo,gmo,wh,Une,hmo,pmo,fI,_mo,umo,bmo,Ah,Jne,vmo,Fmo,mI,Tmo,Mmo,Emo,yh,Yne,Cmo,wmo,gI,Amo,ymo,Lmo,Lh,Kne,xmo,$mo,hI,kmo,Smo,Rmo,xh,Zne,Pmo,Bmo,pI,Imo,Nmo,qmo,$h,ese,jmo,Dmo,_I,Gmo,Omo,Vmo,kh,ose,Xmo,zmo,uI,Wmo,Qmo,Hmo,Sh,rse,Umo,Jmo,bI,Ymo,Kmo,Zmo,Rh,tse,ego,ogo,vI,rgo,tgo,ago,Ph,ase,ngo,sgo,FI,lgo,igo,dgo,Bh,nse,cgo,fgo,TI,mgo,ggo,hgo,Ih,sse,pgo,_go,MI,ugo,bgo,vgo,Nh,lse,Fgo,Tgo,EI,Mgo,Ego,Cgo,qh,wgo,jh,Ago,Dh,eA,ygo,ise,Lgo,Oqe,Ci,Gh,dse,oA,xgo,cse,$go,Vqe,yo,rA,kgo,tA,Sgo,CI,Rgo,Pgo,Bgo,aA,Igo,fse,Ngo,qgo,jgo,Ue,nA,Dgo,mse,Ggo,Ogo,wi,Vgo,gse,Xgo,zgo,hse,Wgo,Qgo,Hgo,he,Oh,pse,Ugo,Jgo,wI,Ygo,Kgo,Zgo,Vh,_se,eho,oho,use,rho,tho,aho,Xh,bse,nho,sho,AI,lho,iho,dho,zh,vse,cho,fho,yI,mho,gho,hho,Wh,Fse,pho,_ho,LI,uho,bho,vho,Qh,Tse,Fho,Tho,xI,Mho,Eho,Cho,Hh,Mse,who,Aho,$I,yho,Lho,xho,Uh,Ese,$ho,kho,kI,Sho,Rho,Pho,Jh,Cse,Bho,Iho,SI,Nho,qho,jho,Yh,wse,Dho,Gho,RI,Oho,Vho,Xho,Kh,Ase,zho,Who,PI,Qho,Hho,Uho,Zh,yse,Jho,Yho,BI,Kho,Zho,epo,ep,Lse,opo,rpo,II,tpo,apo,npo,op,xse,spo,lpo,NI,ipo,dpo,cpo,rp,$se,fpo,mpo,qI,gpo,hpo,ppo,tp,kse,_po,upo,jI,bpo,vpo,Fpo,ap,Sse,Tpo,Mpo,DI,Epo,Cpo,wpo,np,Apo,sp,ypo,lp,sA,Lpo,Rse,xpo,Xqe,Ai,ip,Pse,lA,$po,Bse,kpo,zqe,Lo,iA,Spo,yi,Rpo,GI,Ppo,Bpo,OI,Ipo,Npo,qpo,dA,jpo,Ise,Dpo,Gpo,Opo,tt,cA,Vpo,Nse,Xpo,zpo,Li,Wpo,qse,Qpo,Hpo,VI,Upo,Jpo,Ypo,dp,Kpo,Je,fA,Zpo,jse,e_o,o_o,La,r_o,Dse,t_o,a_o,Gse,n_o,s_o,Ose,l_o,i_o,d_o,x,cp,Vse,c_o,f_o,XI,m_o,g_o,h_o,fp,Xse,p_o,__o,zI,u_o,b_o,v_o,mp,zse,F_o,T_o,WI,M_o,E_o,C_o,gp,Wse,w_o,A_o,QI,y_o,L_o,x_o,hp,Qse,$_o,k_o,HI,S_o,R_o,P_o,pp,Hse,B_o,I_o,UI,N_o,q_o,j_o,_p,Use,D_o,G_o,JI,O_o,V_o,X_o,up,Jse,z_o,W_o,YI,Q_o,H_o,U_o,bp,Yse,J_o,Y_o,KI,K_o,Z_o,euo,vp,Kse,ouo,ruo,ZI,tuo,auo,nuo,Fp,Zse,suo,luo,eN,iuo,duo,cuo,Tp,ele,fuo,muo,oN,guo,huo,puo,Mp,ole,_uo,uuo,rN,buo,vuo,Fuo,Ep,rle,Tuo,Muo,tN,Euo,Cuo,wuo,Cp,tle,Auo,yuo,aN,Luo,xuo,$uo,wp,ale,kuo,Suo,nN,Ruo,Puo,Buo,Ap,nle,Iuo,Nuo,sN,quo,juo,Duo,yp,sle,Guo,Ouo,lN,Vuo,Xuo,zuo,Lp,lle,Wuo,Quo,iN,Huo,Uuo,Juo,xp,ile,Yuo,Kuo,dN,Zuo,e2o,o2o,$p,dle,r2o,t2o,cN,a2o,n2o,s2o,kp,cle,l2o,i2o,fN,d2o,c2o,f2o,Sp,fle,m2o,g2o,mN,h2o,p2o,_2o,Rp,mle,u2o,b2o,gN,v2o,F2o,T2o,Pp,gle,M2o,E2o,hN,C2o,w2o,A2o,Bp,hle,y2o,L2o,pN,x2o,$2o,k2o,Ip,ple,S2o,R2o,_N,P2o,B2o,I2o,Np,_le,N2o,q2o,uN,j2o,D2o,G2o,qp,ule,O2o,V2o,bN,X2o,z2o,W2o,jp,ble,Q2o,H2o,vN,U2o,J2o,Y2o,Dp,vle,K2o,Z2o,FN,e1o,o1o,r1o,Gp,Fle,t1o,a1o,TN,n1o,s1o,l1o,Bs,Tle,i1o,d1o,MN,c1o,f1o,EN,m1o,g1o,h1o,Op,Mle,p1o,_1o,CN,u1o,b1o,v1o,Vp,Ele,F1o,T1o,wN,M1o,E1o,C1o,Xp,Cle,w1o,A1o,AN,y1o,L1o,x1o,zp,wle,$1o,k1o,yN,S1o,R1o,P1o,Wp,Ale,B1o,I1o,LN,N1o,q1o,j1o,Qp,yle,D1o,G1o,xN,O1o,V1o,X1o,Hp,Lle,z1o,W1o,$N,Q1o,H1o,U1o,Up,xle,J1o,Y1o,kN,K1o,Z1o,ebo,Jp,$le,obo,rbo,SN,tbo,abo,nbo,Yp,kle,sbo,lbo,RN,ibo,dbo,cbo,Kp,Sle,fbo,mbo,PN,gbo,hbo,pbo,Zp,Rle,_bo,ubo,BN,bbo,vbo,Fbo,e_,Ple,Tbo,Mbo,IN,Ebo,Cbo,wbo,o_,Ble,Abo,ybo,NN,Lbo,xbo,$bo,r_,Ile,kbo,Sbo,qN,Rbo,Pbo,Bbo,t_,Nle,Ibo,Nbo,jN,qbo,jbo,Dbo,a_,qle,Gbo,Obo,DN,Vbo,Xbo,zbo,n_,jle,Wbo,Qbo,GN,Hbo,Ubo,Jbo,s_,Dle,Ybo,Kbo,ON,Zbo,evo,ovo,l_,Gle,rvo,tvo,VN,avo,nvo,svo,i_,Ole,lvo,ivo,XN,dvo,cvo,fvo,d_,Vle,mvo,gvo,zN,hvo,pvo,_vo,c_,Xle,uvo,bvo,WN,vvo,Fvo,Tvo,f_,zle,Mvo,Evo,QN,Cvo,wvo,Avo,m_,Wle,yvo,Lvo,HN,xvo,$vo,kvo,g_,Qle,Svo,Rvo,UN,Pvo,Bvo,Ivo,h_,Hle,Nvo,qvo,JN,jvo,Dvo,Gvo,p_,Ule,Ovo,Vvo,YN,Xvo,zvo,Wvo,__,Jle,Qvo,Hvo,KN,Uvo,Jvo,Yvo,u_,Yle,Kvo,Zvo,ZN,eFo,oFo,rFo,b_,Kle,tFo,aFo,eq,nFo,sFo,lFo,v_,Zle,iFo,dFo,oq,cFo,fFo,mFo,F_,eie,gFo,hFo,rq,pFo,_Fo,uFo,T_,oie,bFo,vFo,tq,FFo,TFo,MFo,M_,rie,EFo,CFo,aq,wFo,AFo,yFo,E_,tie,LFo,xFo,nq,$Fo,kFo,SFo,C_,aie,RFo,PFo,sq,BFo,IFo,NFo,w_,nie,qFo,jFo,lq,DFo,GFo,OFo,A_,sie,VFo,XFo,iq,zFo,WFo,QFo,y_,lie,HFo,UFo,dq,JFo,YFo,KFo,L_,iie,ZFo,e6o,cq,o6o,r6o,t6o,x_,die,a6o,n6o,fq,s6o,l6o,i6o,$_,cie,d6o,c6o,mq,f6o,m6o,g6o,k_,fie,h6o,p6o,gq,_6o,u6o,b6o,S_,mie,v6o,F6o,hq,T6o,M6o,E6o,R_,gie,C6o,w6o,pq,A6o,y6o,L6o,P_,hie,x6o,$6o,_q,k6o,S6o,R6o,B_,pie,P6o,B6o,uq,I6o,N6o,q6o,I_,_ie,j6o,D6o,bq,G6o,O6o,V6o,N_,uie,X6o,z6o,vq,W6o,Q6o,H6o,q_,bie,U6o,J6o,Fq,Y6o,K6o,Z6o,j_,vie,eTo,oTo,Tq,rTo,tTo,aTo,D_,Fie,nTo,sTo,Mq,lTo,iTo,dTo,G_,Tie,cTo,fTo,Eq,mTo,gTo,hTo,O_,Mie,pTo,_To,Cq,uTo,bTo,vTo,V_,Eie,FTo,TTo,wq,MTo,ETo,CTo,X_,Cie,wTo,ATo,Aq,yTo,LTo,xTo,z_,wie,$To,kTo,yq,STo,RTo,PTo,W_,Aie,BTo,ITo,Lq,NTo,qTo,jTo,Q_,yie,DTo,GTo,xq,OTo,VTo,XTo,H_,Lie,zTo,WTo,$q,QTo,HTo,UTo,U_,xie,JTo,YTo,kq,KTo,ZTo,e7o,J_,$ie,o7o,r7o,Sq,t7o,a7o,n7o,Y_,kie,s7o,l7o,Rq,i7o,d7o,c7o,K_,Sie,f7o,m7o,Pq,g7o,h7o,p7o,Z_,Rie,_7o,u7o,Bq,b7o,v7o,F7o,eu,Pie,T7o,M7o,Iq,E7o,C7o,w7o,ou,Bie,A7o,y7o,Nq,L7o,x7o,$7o,ru,Iie,k7o,S7o,qq,R7o,P7o,B7o,tu,Nie,I7o,N7o,jq,q7o,j7o,D7o,au,G7o,qie,O7o,V7o,jie,X7o,z7o,nu,Wqe,xi,su,Die,mA,W7o,Gie,Q7o,Qqe,xo,gA,H7o,$i,U7o,Dq,J7o,Y7o,Gq,K7o,Z7o,e9o,hA,o9o,Oie,r9o,t9o,a9o,at,pA,n9o,Vie,s9o,l9o,ki,i9o,Xie,d9o,c9o,Oq,f9o,m9o,g9o,lu,h9o,Ye,_A,p9o,zie,_9o,u9o,xa,b9o,Wie,v9o,F9o,Qie,T9o,M9o,Hie,E9o,C9o,w9o,G,iu,Uie,A9o,y9o,Vq,L9o,x9o,$9o,du,Jie,k9o,S9o,Xq,R9o,P9o,B9o,cu,Yie,I9o,N9o,zq,q9o,j9o,D9o,fu,Kie,G9o,O9o,Wq,V9o,X9o,z9o,mu,Zie,W9o,Q9o,Qq,H9o,U9o,J9o,gu,ede,Y9o,K9o,Hq,Z9o,eMo,oMo,hu,ode,rMo,tMo,Uq,aMo,nMo,sMo,pu,rde,lMo,iMo,Jq,dMo,cMo,fMo,_u,tde,mMo,gMo,Yq,hMo,pMo,_Mo,uu,ade,uMo,bMo,Kq,vMo,FMo,TMo,bu,nde,MMo,EMo,Zq,CMo,wMo,AMo,vu,sde,yMo,LMo,ej,xMo,$Mo,kMo,Fu,lde,SMo,RMo,oj,PMo,BMo,IMo,Tu,ide,NMo,qMo,rj,jMo,DMo,GMo,Mu,dde,OMo,VMo,tj,XMo,zMo,WMo,Eu,cde,QMo,HMo,aj,UMo,JMo,YMo,Cu,fde,KMo,ZMo,nj,e4o,o4o,r4o,wu,mde,t4o,a4o,sj,n4o,s4o,l4o,Au,gde,i4o,d4o,lj,c4o,f4o,m4o,yu,hde,g4o,h4o,ij,p4o,_4o,u4o,Lu,pde,b4o,v4o,dj,F4o,T4o,M4o,xu,_de,E4o,C4o,cj,w4o,A4o,y4o,$u,ude,L4o,x4o,fj,$4o,k4o,S4o,ku,bde,R4o,P4o,mj,B4o,I4o,N4o,Su,vde,q4o,j4o,gj,D4o,G4o,O4o,Ru,Fde,V4o,X4o,hj,z4o,W4o,Q4o,Pu,Tde,H4o,U4o,pj,J4o,Y4o,K4o,Bu,Mde,Z4o,eEo,_j,oEo,rEo,tEo,Iu,Ede,aEo,nEo,uj,sEo,lEo,iEo,Nu,Cde,dEo,cEo,bj,fEo,mEo,gEo,qu,wde,hEo,pEo,vj,_Eo,uEo,bEo,ju,Ade,vEo,FEo,Fj,TEo,MEo,EEo,Du,yde,CEo,wEo,Tj,AEo,yEo,LEo,Gu,Lde,xEo,$Eo,Mj,kEo,SEo,REo,Ou,xde,PEo,BEo,Ej,IEo,NEo,qEo,Vu,$de,jEo,DEo,Cj,GEo,OEo,VEo,Xu,kde,XEo,zEo,wj,WEo,QEo,HEo,zu,Sde,UEo,JEo,Aj,YEo,KEo,ZEo,Wu,Rde,e5o,o5o,yj,r5o,t5o,a5o,Qu,Pde,n5o,s5o,Lj,l5o,i5o,d5o,Hu,Bde,c5o,f5o,xj,m5o,g5o,h5o,Uu,Ide,p5o,_5o,$j,u5o,b5o,v5o,Ju,Nde,F5o,T5o,kj,M5o,E5o,C5o,Yu,w5o,qde,A5o,y5o,jde,L5o,x5o,Ku,Hqe,Si,Zu,Dde,uA,$5o,Gde,k5o,Uqe,$o,bA,S5o,Ri,R5o,Sj,P5o,B5o,Rj,I5o,N5o,q5o,vA,j5o,Ode,D5o,G5o,O5o,nt,FA,V5o,Vde,X5o,z5o,Pi,W5o,Xde,Q5o,H5o,Pj,U5o,J5o,Y5o,e2,K5o,Ke,TA,Z5o,zde,eCo,oCo,$a,rCo,Wde,tCo,aCo,Qde,nCo,sCo,Hde,lCo,iCo,dCo,z,o2,Ude,cCo,fCo,Bj,mCo,gCo,hCo,r2,Jde,pCo,_Co,Ij,uCo,bCo,vCo,t2,Yde,FCo,TCo,Nj,MCo,ECo,CCo,a2,Kde,wCo,ACo,qj,yCo,LCo,xCo,n2,Zde,$Co,kCo,jj,SCo,RCo,PCo,s2,ece,BCo,ICo,Dj,NCo,qCo,jCo,l2,oce,DCo,GCo,Gj,OCo,VCo,XCo,i2,rce,zCo,WCo,Oj,QCo,HCo,UCo,d2,tce,JCo,YCo,Vj,KCo,ZCo,e3o,c2,ace,o3o,r3o,Xj,t3o,a3o,n3o,f2,nce,s3o,l3o,zj,i3o,d3o,c3o,m2,sce,f3o,m3o,Wj,g3o,h3o,p3o,g2,lce,_3o,u3o,Qj,b3o,v3o,F3o,h2,ice,T3o,M3o,Hj,E3o,C3o,w3o,p2,dce,A3o,y3o,Uj,L3o,x3o,$3o,_2,cce,k3o,S3o,Jj,R3o,P3o,B3o,u2,fce,I3o,N3o,Yj,q3o,j3o,D3o,b2,mce,G3o,O3o,Kj,V3o,X3o,z3o,v2,gce,W3o,Q3o,Zj,H3o,U3o,J3o,F2,hce,Y3o,K3o,eD,Z3o,e0o,o0o,T2,pce,r0o,t0o,oD,a0o,n0o,s0o,M2,_ce,l0o,i0o,rD,d0o,c0o,f0o,E2,uce,m0o,g0o,tD,h0o,p0o,_0o,C2,bce,u0o,b0o,aD,v0o,F0o,T0o,w2,vce,M0o,E0o,nD,C0o,w0o,A0o,A2,Fce,y0o,L0o,sD,x0o,$0o,k0o,y2,Tce,S0o,R0o,lD,P0o,B0o,I0o,L2,Mce,N0o,q0o,iD,j0o,D0o,G0o,x2,Ece,O0o,V0o,dD,X0o,z0o,W0o,$2,Cce,Q0o,H0o,cD,U0o,J0o,Y0o,k2,wce,K0o,Z0o,fD,ewo,owo,rwo,S2,Ace,two,awo,mD,nwo,swo,lwo,R2,yce,iwo,dwo,gD,cwo,fwo,mwo,P2,Lce,gwo,hwo,hD,pwo,_wo,uwo,B2,xce,bwo,vwo,pD,Fwo,Two,Mwo,I2,$ce,Ewo,Cwo,_D,wwo,Awo,ywo,N2,kce,Lwo,xwo,uD,$wo,kwo,Swo,q2,Rwo,Sce,Pwo,Bwo,Rce,Iwo,Nwo,j2,Jqe,Bi,D2,Pce,MA,qwo,Bce,jwo,Yqe,ko,EA,Dwo,Ii,Gwo,bD,Owo,Vwo,vD,Xwo,zwo,Wwo,CA,Qwo,Ice,Hwo,Uwo,Jwo,st,wA,Ywo,Nce,Kwo,Zwo,Ni,eAo,qce,oAo,rAo,FD,tAo,aAo,nAo,G2,sAo,Ze,AA,lAo,jce,iAo,dAo,ka,cAo,Dce,fAo,mAo,Gce,gAo,hAo,Oce,pAo,_Ao,uAo,Q,O2,Vce,bAo,vAo,TD,FAo,TAo,MAo,V2,Xce,EAo,CAo,MD,wAo,AAo,yAo,X2,zce,LAo,xAo,ED,$Ao,kAo,SAo,z2,Wce,RAo,PAo,CD,BAo,IAo,NAo,W2,Qce,qAo,jAo,wD,DAo,GAo,OAo,Q2,Hce,VAo,XAo,AD,zAo,WAo,QAo,H2,Uce,HAo,UAo,yD,JAo,YAo,KAo,U2,Jce,ZAo,eyo,LD,oyo,ryo,tyo,J2,Yce,ayo,nyo,xD,syo,lyo,iyo,Y2,Kce,dyo,cyo,$D,fyo,myo,gyo,K2,Zce,hyo,pyo,kD,_yo,uyo,byo,Z2,efe,vyo,Fyo,SD,Tyo,Myo,Eyo,e1,ofe,Cyo,wyo,RD,Ayo,yyo,Lyo,o1,rfe,xyo,$yo,PD,kyo,Syo,Ryo,r1,tfe,Pyo,Byo,BD,Iyo,Nyo,qyo,t1,afe,jyo,Dyo,ID,Gyo,Oyo,Vyo,a1,nfe,Xyo,zyo,ND,Wyo,Qyo,Hyo,n1,sfe,Uyo,Jyo,qD,Yyo,Kyo,Zyo,s1,lfe,eLo,oLo,jD,rLo,tLo,aLo,l1,ife,nLo,sLo,DD,lLo,iLo,dLo,i1,dfe,cLo,fLo,GD,mLo,gLo,hLo,d1,cfe,pLo,_Lo,OD,uLo,bLo,vLo,c1,ffe,FLo,TLo,VD,MLo,ELo,CLo,f1,mfe,wLo,ALo,XD,yLo,LLo,xLo,m1,gfe,$Lo,kLo,zD,SLo,RLo,PLo,g1,hfe,BLo,ILo,WD,NLo,qLo,jLo,h1,pfe,DLo,GLo,QD,OLo,VLo,XLo,p1,_fe,zLo,WLo,HD,QLo,HLo,ULo,_1,ufe,JLo,YLo,UD,KLo,ZLo,e8o,u1,bfe,o8o,r8o,JD,t8o,a8o,n8o,b1,vfe,s8o,l8o,Ffe,i8o,d8o,c8o,v1,Tfe,f8o,m8o,YD,g8o,h8o,p8o,F1,Mfe,_8o,u8o,KD,b8o,v8o,F8o,T1,Efe,T8o,M8o,ZD,E8o,C8o,w8o,M1,Cfe,A8o,y8o,eG,L8o,x8o,$8o,E1,k8o,wfe,S8o,R8o,Afe,P8o,B8o,C1,Kqe,qi,w1,yfe,yA,I8o,Lfe,N8o,Zqe,So,LA,q8o,ji,j8o,oG,D8o,G8o,rG,O8o,V8o,X8o,xA,z8o,xfe,W8o,Q8o,H8o,lt,$A,U8o,$fe,J8o,Y8o,Di,K8o,kfe,Z8o,exo,tG,oxo,rxo,txo,A1,axo,eo,kA,nxo,Sfe,sxo,lxo,Sa,ixo,Rfe,dxo,cxo,Pfe,fxo,mxo,Bfe,gxo,hxo,pxo,pe,y1,Ife,_xo,uxo,aG,bxo,vxo,Fxo,L1,Nfe,Txo,Mxo,nG,Exo,Cxo,wxo,x1,qfe,Axo,yxo,sG,Lxo,xxo,$xo,$1,jfe,kxo,Sxo,lG,Rxo,Pxo,Bxo,k1,Dfe,Ixo,Nxo,iG,qxo,jxo,Dxo,S1,Gfe,Gxo,Oxo,dG,Vxo,Xxo,zxo,R1,Ofe,Wxo,Qxo,cG,Hxo,Uxo,Jxo,P1,Vfe,Yxo,Kxo,fG,Zxo,e$o,o$o,B1,Xfe,r$o,t$o,mG,a$o,n$o,s$o,I1,zfe,l$o,i$o,gG,d$o,c$o,f$o,N1,Wfe,m$o,g$o,hG,h$o,p$o,_$o,q1,Qfe,u$o,b$o,pG,v$o,F$o,T$o,j1,Hfe,M$o,E$o,_G,C$o,w$o,A$o,D1,Ufe,y$o,L$o,uG,x$o,$$o,k$o,G1,Jfe,S$o,R$o,bG,P$o,B$o,I$o,O1,Yfe,N$o,q$o,vG,j$o,D$o,G$o,V1,Kfe,O$o,V$o,FG,X$o,z$o,W$o,X1,Q$o,Zfe,H$o,U$o,eme,J$o,Y$o,z1,eje,Gi,W1,ome,SA,K$o,rme,Z$o,oje,Ro,RA,eko,Oi,oko,TG,rko,tko,MG,ako,nko,sko,PA,lko,tme,iko,dko,cko,it,BA,fko,ame,mko,gko,Vi,hko,nme,pko,_ko,EG,uko,bko,vko,Q1,Fko,oo,IA,Tko,sme,Mko,Eko,Ra,Cko,lme,wko,Ako,ime,yko,Lko,dme,xko,$ko,kko,N,H1,cme,Sko,Rko,CG,Pko,Bko,Iko,U1,fme,Nko,qko,wG,jko,Dko,Gko,J1,mme,Oko,Vko,AG,Xko,zko,Wko,Y1,gme,Qko,Hko,yG,Uko,Jko,Yko,K1,hme,Kko,Zko,LG,eSo,oSo,rSo,Z1,pme,tSo,aSo,xG,nSo,sSo,lSo,eb,_me,iSo,dSo,$G,cSo,fSo,mSo,ob,ume,gSo,hSo,kG,pSo,_So,uSo,rb,bme,bSo,vSo,SG,FSo,TSo,MSo,tb,vme,ESo,CSo,RG,wSo,ASo,ySo,ab,Fme,LSo,xSo,PG,$So,kSo,SSo,nb,Tme,RSo,PSo,BG,BSo,ISo,NSo,sb,Mme,qSo,jSo,IG,DSo,GSo,OSo,lb,Eme,VSo,XSo,NG,zSo,WSo,QSo,ib,Cme,HSo,USo,qG,JSo,YSo,KSo,db,wme,ZSo,eRo,jG,oRo,rRo,tRo,cb,Ame,aRo,nRo,DG,sRo,lRo,iRo,fb,yme,dRo,cRo,GG,fRo,mRo,gRo,mb,Lme,hRo,pRo,OG,_Ro,uRo,bRo,gb,xme,vRo,FRo,VG,TRo,MRo,ERo,hb,$me,CRo,wRo,XG,ARo,yRo,LRo,pb,kme,xRo,$Ro,zG,kRo,SRo,RRo,_b,Sme,PRo,BRo,WG,IRo,NRo,qRo,ub,Rme,jRo,DRo,QG,GRo,ORo,VRo,bb,Pme,XRo,zRo,HG,WRo,QRo,HRo,vb,Bme,URo,JRo,UG,YRo,KRo,ZRo,Fb,Ime,ePo,oPo,JG,rPo,tPo,aPo,Tb,Nme,nPo,sPo,YG,lPo,iPo,dPo,Mb,qme,cPo,fPo,KG,mPo,gPo,hPo,Eb,jme,pPo,_Po,ZG,uPo,bPo,vPo,Cb,Dme,FPo,TPo,eO,MPo,EPo,CPo,wb,Gme,wPo,APo,oO,yPo,LPo,xPo,Ab,Ome,$Po,kPo,rO,SPo,RPo,PPo,yb,Vme,BPo,IPo,tO,NPo,qPo,jPo,Lb,Xme,DPo,GPo,aO,OPo,VPo,XPo,xb,zme,zPo,WPo,nO,QPo,HPo,UPo,$b,Wme,JPo,YPo,sO,KPo,ZPo,eBo,kb,Qme,oBo,rBo,lO,tBo,aBo,nBo,Sb,Hme,sBo,lBo,iO,iBo,dBo,cBo,Rb,Ume,fBo,mBo,dO,gBo,hBo,pBo,Pb,Jme,_Bo,uBo,cO,bBo,vBo,FBo,Bb,Yme,TBo,MBo,fO,EBo,CBo,wBo,Ib,Kme,ABo,yBo,mO,LBo,xBo,$Bo,Nb,Zme,kBo,SBo,gO,RBo,PBo,BBo,qb,ege,IBo,NBo,hO,qBo,jBo,DBo,jb,oge,GBo,OBo,pO,VBo,XBo,zBo,Db,rge,WBo,QBo,_O,HBo,UBo,JBo,Gb,YBo,tge,KBo,ZBo,age,eIo,oIo,Ob,rje,Xi,Vb,nge,NA,rIo,sge,tIo,tje,Po,qA,aIo,zi,nIo,uO,sIo,lIo,bO,iIo,dIo,cIo,jA,fIo,lge,mIo,gIo,hIo,dt,DA,pIo,ige,_Io,uIo,Wi,bIo,dge,vIo,FIo,vO,TIo,MIo,EIo,Xb,CIo,ro,GA,wIo,cge,AIo,yIo,Pa,LIo,fge,xIo,$Io,mge,kIo,SIo,gge,RIo,PIo,BIo,K,zb,hge,IIo,NIo,FO,qIo,jIo,DIo,Wb,pge,GIo,OIo,TO,VIo,XIo,zIo,Qb,_ge,WIo,QIo,MO,HIo,UIo,JIo,Hb,uge,YIo,KIo,EO,ZIo,eNo,oNo,Ub,bge,rNo,tNo,CO,aNo,nNo,sNo,Jb,vge,lNo,iNo,wO,dNo,cNo,fNo,Yb,Fge,mNo,gNo,AO,hNo,pNo,_No,Kb,Tge,uNo,bNo,yO,vNo,FNo,TNo,Zb,Mge,MNo,ENo,LO,CNo,wNo,ANo,ev,Ege,yNo,LNo,xO,xNo,$No,kNo,ov,Cge,SNo,RNo,$O,PNo,BNo,INo,rv,wge,NNo,qNo,kO,jNo,DNo,GNo,tv,Age,ONo,VNo,SO,XNo,zNo,WNo,av,yge,QNo,HNo,RO,UNo,JNo,YNo,nv,Lge,KNo,ZNo,PO,eqo,oqo,rqo,sv,xge,tqo,aqo,BO,nqo,sqo,lqo,lv,$ge,iqo,dqo,IO,cqo,fqo,mqo,iv,kge,gqo,hqo,NO,pqo,_qo,uqo,dv,Sge,bqo,vqo,qO,Fqo,Tqo,Mqo,cv,Rge,Eqo,Cqo,jO,wqo,Aqo,yqo,fv,Pge,Lqo,xqo,DO,$qo,kqo,Sqo,mv,Bge,Rqo,Pqo,GO,Bqo,Iqo,Nqo,gv,Ige,qqo,jqo,OO,Dqo,Gqo,Oqo,hv,Nge,Vqo,Xqo,VO,zqo,Wqo,Qqo,pv,qge,Hqo,Uqo,XO,Jqo,Yqo,Kqo,_v,jge,Zqo,ejo,zO,ojo,rjo,tjo,uv,Dge,ajo,njo,WO,sjo,ljo,ijo,bv,Gge,djo,cjo,QO,fjo,mjo,gjo,vv,Oge,hjo,pjo,HO,_jo,ujo,bjo,Fv,vjo,Vge,Fjo,Tjo,Xge,Mjo,Ejo,Tv,aje,Qi,Mv,zge,OA,Cjo,Wge,wjo,nje,Bo,VA,Ajo,Hi,yjo,UO,Ljo,xjo,JO,$jo,kjo,Sjo,XA,Rjo,Qge,Pjo,Bjo,Ijo,ct,zA,Njo,Hge,qjo,jjo,Ui,Djo,Uge,Gjo,Ojo,YO,Vjo,Xjo,zjo,Ev,Wjo,to,WA,Qjo,Jge,Hjo,Ujo,Ba,Jjo,Yge,Yjo,Kjo,Kge,Zjo,eDo,Zge,oDo,rDo,tDo,Yr,Cv,ehe,aDo,nDo,KO,sDo,lDo,iDo,wv,ohe,dDo,cDo,ZO,fDo,mDo,gDo,Av,rhe,hDo,pDo,eV,_Do,uDo,bDo,yv,the,vDo,FDo,oV,TDo,MDo,EDo,Lv,ahe,CDo,wDo,rV,ADo,yDo,LDo,xv,xDo,nhe,$Do,kDo,she,SDo,RDo,$v,sje,Ji,kv,lhe,QA,PDo,ihe,BDo,lje,Io,HA,IDo,Yi,NDo,tV,qDo,jDo,aV,DDo,GDo,ODo,UA,VDo,dhe,XDo,zDo,WDo,ft,JA,QDo,che,HDo,UDo,Ki,JDo,fhe,YDo,KDo,nV,ZDo,eGo,oGo,Sv,rGo,ao,YA,tGo,mhe,aGo,nGo,Ia,sGo,ghe,lGo,iGo,hhe,dGo,cGo,phe,fGo,mGo,gGo,H,Rv,_he,hGo,pGo,sV,_Go,uGo,bGo,Pv,uhe,vGo,FGo,lV,TGo,MGo,EGo,Bv,bhe,CGo,wGo,iV,AGo,yGo,LGo,Iv,vhe,xGo,$Go,dV,kGo,SGo,RGo,Nv,Fhe,PGo,BGo,cV,IGo,NGo,qGo,qv,The,jGo,DGo,fV,GGo,OGo,VGo,jv,Mhe,XGo,zGo,mV,WGo,QGo,HGo,Dv,Ehe,UGo,JGo,gV,YGo,KGo,ZGo,Gv,Che,eOo,oOo,hV,rOo,tOo,aOo,Ov,whe,nOo,sOo,pV,lOo,iOo,dOo,Vv,Ahe,cOo,fOo,_V,mOo,gOo,hOo,Xv,yhe,pOo,_Oo,uV,uOo,bOo,vOo,zv,Lhe,FOo,TOo,bV,MOo,EOo,COo,Wv,xhe,wOo,AOo,vV,yOo,LOo,xOo,Qv,$he,$Oo,kOo,FV,SOo,ROo,POo,Hv,khe,BOo,IOo,TV,NOo,qOo,jOo,Uv,She,DOo,GOo,MV,OOo,VOo,XOo,Jv,Rhe,zOo,WOo,EV,QOo,HOo,UOo,Yv,Phe,JOo,YOo,CV,KOo,ZOo,eVo,Kv,Bhe,oVo,rVo,wV,tVo,aVo,nVo,Zv,Ihe,sVo,lVo,AV,iVo,dVo,cVo,eF,Nhe,fVo,mVo,yV,gVo,hVo,pVo,oF,qhe,_Vo,uVo,LV,bVo,vVo,FVo,rF,jhe,TVo,MVo,xV,EVo,CVo,wVo,tF,Dhe,AVo,yVo,$V,LVo,xVo,$Vo,aF,Ghe,kVo,SVo,kV,RVo,PVo,BVo,nF,Ohe,IVo,NVo,SV,qVo,jVo,DVo,sF,Vhe,GVo,OVo,RV,VVo,XVo,zVo,lF,Xhe,WVo,QVo,PV,HVo,UVo,JVo,iF,zhe,YVo,KVo,BV,ZVo,eXo,oXo,dF,Whe,rXo,tXo,IV,aXo,nXo,sXo,cF,Qhe,lXo,iXo,NV,dXo,cXo,fXo,fF,Hhe,mXo,gXo,qV,hXo,pXo,_Xo,mF,Uhe,uXo,bXo,jV,vXo,FXo,TXo,gF,MXo,Jhe,EXo,CXo,Yhe,wXo,AXo,hF,ije,Zi,pF,Khe,KA,yXo,Zhe,LXo,dje,No,ZA,xXo,ed,$Xo,DV,kXo,SXo,GV,RXo,PXo,BXo,ey,IXo,epe,NXo,qXo,jXo,mt,oy,DXo,ope,GXo,OXo,od,VXo,rpe,XXo,zXo,OV,WXo,QXo,HXo,_F,UXo,no,ry,JXo,tpe,YXo,KXo,Na,ZXo,ape,ezo,ozo,npe,rzo,tzo,spe,azo,nzo,szo,V,uF,lpe,lzo,izo,VV,dzo,czo,fzo,bF,ipe,mzo,gzo,XV,hzo,pzo,_zo,vF,dpe,uzo,bzo,zV,vzo,Fzo,Tzo,FF,cpe,Mzo,Ezo,WV,Czo,wzo,Azo,TF,fpe,yzo,Lzo,QV,xzo,$zo,kzo,MF,mpe,Szo,Rzo,HV,Pzo,Bzo,Izo,EF,gpe,Nzo,qzo,UV,jzo,Dzo,Gzo,CF,hpe,Ozo,Vzo,JV,Xzo,zzo,Wzo,wF,ppe,Qzo,Hzo,YV,Uzo,Jzo,Yzo,AF,_pe,Kzo,Zzo,KV,eWo,oWo,rWo,yF,upe,tWo,aWo,ZV,nWo,sWo,lWo,LF,bpe,iWo,dWo,eX,cWo,fWo,mWo,xF,vpe,gWo,hWo,oX,pWo,_Wo,uWo,$F,Fpe,bWo,vWo,rX,FWo,TWo,MWo,kF,Tpe,EWo,CWo,tX,wWo,AWo,yWo,SF,Mpe,LWo,xWo,aX,$Wo,kWo,SWo,RF,Epe,RWo,PWo,nX,BWo,IWo,NWo,PF,Cpe,qWo,jWo,sX,DWo,GWo,OWo,BF,wpe,VWo,XWo,lX,zWo,WWo,QWo,IF,Ape,HWo,UWo,iX,JWo,YWo,KWo,NF,ype,ZWo,eQo,dX,oQo,rQo,tQo,qF,Lpe,aQo,nQo,cX,sQo,lQo,iQo,jF,xpe,dQo,cQo,fX,fQo,mQo,gQo,DF,$pe,hQo,pQo,mX,_Qo,uQo,bQo,GF,kpe,vQo,FQo,gX,TQo,MQo,EQo,OF,Spe,CQo,wQo,hX,AQo,yQo,LQo,VF,Rpe,xQo,$Qo,pX,kQo,SQo,RQo,XF,Ppe,PQo,BQo,_X,IQo,NQo,qQo,zF,Bpe,jQo,DQo,uX,GQo,OQo,VQo,WF,Ipe,XQo,zQo,bX,WQo,QQo,HQo,QF,Npe,UQo,JQo,vX,YQo,KQo,ZQo,HF,qpe,eHo,oHo,FX,rHo,tHo,aHo,UF,jpe,nHo,sHo,TX,lHo,iHo,dHo,JF,Dpe,cHo,fHo,MX,mHo,gHo,hHo,YF,Gpe,pHo,_Ho,EX,uHo,bHo,vHo,KF,Ope,FHo,THo,CX,MHo,EHo,CHo,ZF,Vpe,wHo,AHo,wX,yHo,LHo,xHo,e6,Xpe,$Ho,kHo,AX,SHo,RHo,PHo,o6,zpe,BHo,IHo,yX,NHo,qHo,jHo,r6,Wpe,DHo,GHo,LX,OHo,VHo,XHo,t6,zHo,Qpe,WHo,QHo,Hpe,HHo,UHo,a6,cje,rd,n6,Upe,ty,JHo,Jpe,YHo,fje,qo,ay,KHo,td,ZHo,xX,eUo,oUo,$X,rUo,tUo,aUo,ny,nUo,Ype,sUo,lUo,iUo,gt,sy,dUo,Kpe,cUo,fUo,ad,mUo,Zpe,gUo,hUo,kX,pUo,_Uo,uUo,s6,bUo,so,ly,vUo,e_e,FUo,TUo,qa,MUo,o_e,EUo,CUo,r_e,wUo,AUo,t_e,yUo,LUo,xUo,a_e,l6,n_e,$Uo,kUo,SX,SUo,RUo,PUo,i6,BUo,s_e,IUo,NUo,l_e,qUo,jUo,d6,mje,nd,c6,i_e,iy,DUo,d_e,GUo,gje,jo,dy,OUo,sd,VUo,RX,XUo,zUo,PX,WUo,QUo,HUo,cy,UUo,c_e,JUo,YUo,KUo,ht,fy,ZUo,f_e,eJo,oJo,ld,rJo,m_e,tJo,aJo,BX,nJo,sJo,lJo,f6,iJo,lo,my,dJo,g_e,cJo,fJo,ja,mJo,h_e,gJo,hJo,p_e,pJo,_Jo,__e,uJo,bJo,vJo,Fe,m6,u_e,FJo,TJo,IX,MJo,EJo,CJo,g6,b_e,wJo,AJo,NX,yJo,LJo,xJo,h6,v_e,$Jo,kJo,qX,SJo,RJo,PJo,p6,F_e,BJo,IJo,jX,NJo,qJo,jJo,Is,T_e,DJo,GJo,DX,OJo,VJo,GX,XJo,zJo,WJo,_6,M_e,QJo,HJo,OX,UJo,JJo,YJo,pt,E_e,KJo,ZJo,VX,eYo,oYo,XX,rYo,tYo,zX,aYo,nYo,sYo,u6,C_e,lYo,iYo,WX,dYo,cYo,fYo,b6,w_e,mYo,gYo,QX,hYo,pYo,_Yo,v6,A_e,uYo,bYo,HX,vYo,FYo,TYo,F6,y_e,MYo,EYo,UX,CYo,wYo,AYo,T6,L_e,yYo,LYo,JX,xYo,$Yo,kYo,M6,x_e,SYo,RYo,YX,PYo,BYo,IYo,E6,$_e,NYo,qYo,KX,jYo,DYo,GYo,C6,OYo,k_e,VYo,XYo,S_e,zYo,WYo,w6,hje,id,A6,R_e,gy,QYo,P_e,HYo,pje,Do,hy,UYo,dd,JYo,ZX,YYo,KYo,ez,ZYo,eKo,oKo,py,rKo,B_e,tKo,aKo,nKo,_t,_y,sKo,I_e,lKo,iKo,cd,dKo,N_e,cKo,fKo,oz,mKo,gKo,hKo,y6,pKo,io,uy,_Ko,q_e,uKo,bKo,Da,vKo,j_e,FKo,TKo,D_e,MKo,EKo,G_e,CKo,wKo,AKo,O_e,L6,V_e,yKo,LKo,rz,xKo,$Ko,kKo,x6,SKo,X_e,RKo,PKo,z_e,BKo,IKo,$6,_je,fd,k6,W_e,by,NKo,Q_e,qKo,uje,Go,vy,jKo,md,DKo,tz,GKo,OKo,az,VKo,XKo,zKo,Fy,WKo,H_e,QKo,HKo,UKo,ut,Ty,JKo,U_e,YKo,KKo,gd,ZKo,J_e,eZo,oZo,nz,rZo,tZo,aZo,S6,nZo,co,My,sZo,Y_e,lZo,iZo,Ga,dZo,K_e,cZo,fZo,Z_e,mZo,gZo,eue,hZo,pZo,_Zo,Se,R6,oue,uZo,bZo,sz,vZo,FZo,TZo,P6,rue,MZo,EZo,lz,CZo,wZo,AZo,B6,tue,yZo,LZo,iz,xZo,$Zo,kZo,I6,aue,SZo,RZo,dz,PZo,BZo,IZo,N6,nue,NZo,qZo,cz,jZo,DZo,GZo,q6,sue,OZo,VZo,fz,XZo,zZo,WZo,j6,lue,QZo,HZo,mz,UZo,JZo,YZo,D6,iue,KZo,ZZo,gz,eer,oer,rer,G6,due,ter,aer,hz,ner,ser,ler,O6,ier,cue,der,cer,fue,fer,mer,V6,bje,hd,X6,mue,Ey,ger,gue,her,vje,Oo,Cy,per,pd,_er,pz,uer,ber,_z,ver,Fer,Ter,wy,Mer,hue,Eer,Cer,wer,bt,Ay,Aer,pue,yer,Ler,_d,xer,_ue,$er,ker,uz,Ser,Rer,Per,z6,Ber,fo,yy,Ier,uue,Ner,qer,Oa,jer,bue,Der,Ger,vue,Oer,Ver,Fue,Xer,zer,Wer,Kr,W6,Tue,Qer,Her,bz,Uer,Jer,Yer,Q6,Mue,Ker,Zer,vz,eor,oor,ror,H6,Eue,tor,aor,Fz,nor,sor,lor,U6,Cue,ior,dor,Tz,cor,mor,gor,J6,wue,hor,por,Mz,_or,uor,bor,Y6,vor,Aue,For,Tor,yue,Mor,Eor,K6,Fje,ud,Z6,Lue,Ly,Cor,xue,wor,Tje,Vo,xy,Aor,bd,yor,Ez,Lor,xor,Cz,$or,kor,Sor,$y,Ror,$ue,Por,Bor,Ior,vt,ky,Nor,kue,qor,jor,vd,Dor,Sue,Gor,Oor,wz,Vor,Xor,zor,eT,Wor,mo,Sy,Qor,Rue,Hor,Uor,Va,Jor,Pue,Yor,Kor,Bue,Zor,err,Iue,orr,rrr,trr,Re,oT,Nue,arr,nrr,Az,srr,lrr,irr,rT,que,drr,crr,yz,frr,mrr,grr,tT,jue,hrr,prr,Lz,_rr,urr,brr,aT,Due,vrr,Frr,xz,Trr,Mrr,Err,nT,Gue,Crr,wrr,$z,Arr,yrr,Lrr,sT,Oue,xrr,$rr,kz,krr,Srr,Rrr,lT,Vue,Prr,Brr,Sz,Irr,Nrr,qrr,iT,Xue,jrr,Drr,Rz,Grr,Orr,Vrr,dT,zue,Xrr,zrr,Pz,Wrr,Qrr,Hrr,cT,Urr,Wue,Jrr,Yrr,Que,Krr,Zrr,fT,Mje,Fd,mT,Hue,Ry,etr,Uue,otr,Eje,Xo,Py,rtr,Td,ttr,Bz,atr,ntr,Iz,str,ltr,itr,By,dtr,Jue,ctr,ftr,mtr,Ft,Iy,gtr,Yue,htr,ptr,Md,_tr,Kue,utr,btr,Nz,vtr,Ftr,Ttr,gT,Mtr,go,Ny,Etr,Zue,Ctr,wtr,Xa,Atr,e2e,ytr,Ltr,o2e,xtr,$tr,r2e,ktr,Str,Rtr,qy,hT,t2e,Ptr,Btr,qz,Itr,Ntr,qtr,pT,a2e,jtr,Dtr,jz,Gtr,Otr,Vtr,_T,Xtr,n2e,ztr,Wtr,s2e,Qtr,Htr,uT,Cje,Ed,bT,l2e,jy,Utr,i2e,Jtr,wje,zo,Dy,Ytr,Cd,Ktr,Dz,Ztr,ear,Gz,oar,rar,tar,Gy,aar,d2e,nar,sar,lar,Tt,Oy,iar,c2e,dar,car,wd,far,f2e,mar,gar,Oz,har,par,_ar,vT,uar,ho,Vy,bar,m2e,Far,Tar,za,Mar,g2e,Ear,Car,h2e,war,Aar,p2e,yar,Lar,xar,Zr,FT,_2e,$ar,kar,Vz,Sar,Rar,Par,TT,u2e,Bar,Iar,Xz,Nar,qar,jar,MT,b2e,Dar,Gar,zz,Oar,Var,Xar,ET,v2e,zar,War,Wz,Qar,Har,Uar,CT,F2e,Jar,Yar,Qz,Kar,Zar,enr,wT,onr,T2e,rnr,tnr,M2e,anr,nnr,AT,Aje,Ad,yT,E2e,Xy,snr,C2e,lnr,yje,Wo,zy,inr,yd,dnr,Hz,cnr,fnr,Uz,mnr,gnr,hnr,Wy,pnr,w2e,_nr,unr,bnr,Mt,Qy,vnr,A2e,Fnr,Tnr,Ld,Mnr,y2e,Enr,Cnr,Jz,wnr,Anr,ynr,LT,Lnr,po,Hy,xnr,L2e,$nr,knr,Wa,Snr,x2e,Rnr,Pnr,$2e,Bnr,Inr,k2e,Nnr,qnr,jnr,xd,xT,S2e,Dnr,Gnr,Yz,Onr,Vnr,Xnr,$T,R2e,znr,Wnr,Kz,Qnr,Hnr,Unr,kT,P2e,Jnr,Ynr,Zz,Knr,Znr,esr,ST,osr,B2e,rsr,tsr,I2e,asr,nsr,RT,Lje,$d,PT,N2e,Uy,ssr,q2e,lsr,xje,Qo,Jy,isr,kd,dsr,eW,csr,fsr,oW,msr,gsr,hsr,Yy,psr,j2e,_sr,usr,bsr,Et,Ky,vsr,D2e,Fsr,Tsr,Sd,Msr,G2e,Esr,Csr,rW,wsr,Asr,ysr,BT,Lsr,_o,Zy,xsr,O2e,$sr,ksr,Qa,Ssr,V2e,Rsr,Psr,X2e,Bsr,Isr,z2e,Nsr,qsr,jsr,eL,IT,W2e,Dsr,Gsr,tW,Osr,Vsr,Xsr,NT,Q2e,zsr,Wsr,aW,Qsr,Hsr,Usr,qT,Jsr,H2e,Ysr,Ksr,U2e,Zsr,elr,jT,$je,Rd,DT,J2e,oL,olr,Y2e,rlr,kje,Ho,rL,tlr,Pd,alr,nW,nlr,slr,sW,llr,ilr,dlr,tL,clr,K2e,flr,mlr,glr,Ct,aL,hlr,Z2e,plr,_lr,Bd,ulr,e1e,blr,vlr,lW,Flr,Tlr,Mlr,GT,Elr,uo,nL,Clr,o1e,wlr,Alr,Ha,ylr,r1e,Llr,xlr,t1e,$lr,klr,a1e,Slr,Rlr,Plr,n1e,OT,s1e,Blr,Ilr,iW,Nlr,qlr,jlr,VT,Dlr,l1e,Glr,Olr,i1e,Vlr,Xlr,XT,Sje,Id,zT,d1e,sL,zlr,c1e,Wlr,Rje,Uo,lL,Qlr,Nd,Hlr,dW,Ulr,Jlr,cW,Ylr,Klr,Zlr,iL,eir,f1e,oir,rir,tir,wt,dL,air,m1e,nir,sir,qd,lir,g1e,iir,dir,fW,cir,fir,mir,WT,gir,bo,cL,hir,h1e,pir,_ir,Ua,uir,p1e,bir,vir,_1e,Fir,Tir,u1e,Mir,Eir,Cir,Ja,QT,b1e,wir,Air,mW,yir,Lir,xir,HT,v1e,$ir,kir,gW,Sir,Rir,Pir,UT,F1e,Bir,Iir,hW,Nir,qir,jir,JT,T1e,Dir,Gir,pW,Oir,Vir,Xir,YT,zir,M1e,Wir,Qir,E1e,Hir,Uir,KT,Pje,jd,ZT,C1e,fL,Jir,w1e,Yir,Bje,Jo,mL,Kir,Dd,Zir,_W,edr,odr,uW,rdr,tdr,adr,gL,ndr,A1e,sdr,ldr,idr,At,hL,ddr,y1e,cdr,fdr,Gd,mdr,L1e,gdr,hdr,bW,pdr,_dr,udr,e7,bdr,vo,pL,vdr,x1e,Fdr,Tdr,Ya,Mdr,$1e,Edr,Cdr,k1e,wdr,Adr,S1e,ydr,Ldr,xdr,R1e,o7,P1e,$dr,kdr,vW,Sdr,Rdr,Pdr,r7,Bdr,B1e,Idr,Ndr,I1e,qdr,jdr,t7,Ije,Od,a7,N1e,_L,Ddr,q1e,Gdr,Nje,Yo,uL,Odr,Vd,Vdr,FW,Xdr,zdr,TW,Wdr,Qdr,Hdr,bL,Udr,j1e,Jdr,Ydr,Kdr,yt,vL,Zdr,D1e,ecr,ocr,Xd,rcr,G1e,tcr,acr,MW,ncr,scr,lcr,n7,icr,wr,FL,dcr,O1e,ccr,fcr,Ka,mcr,V1e,gcr,hcr,X1e,pcr,_cr,z1e,ucr,bcr,vcr,q,s7,W1e,Fcr,Tcr,EW,Mcr,Ecr,Ccr,l7,Q1e,wcr,Acr,CW,ycr,Lcr,xcr,i7,H1e,$cr,kcr,wW,Scr,Rcr,Pcr,d7,U1e,Bcr,Icr,AW,Ncr,qcr,jcr,c7,J1e,Dcr,Gcr,yW,Ocr,Vcr,Xcr,f7,Y1e,zcr,Wcr,LW,Qcr,Hcr,Ucr,m7,K1e,Jcr,Ycr,xW,Kcr,Zcr,efr,g7,Z1e,ofr,rfr,$W,tfr,afr,nfr,h7,ebe,sfr,lfr,kW,ifr,dfr,cfr,p7,obe,ffr,mfr,SW,gfr,hfr,pfr,_7,rbe,_fr,ufr,RW,bfr,vfr,Ffr,u7,tbe,Tfr,Mfr,PW,Efr,Cfr,wfr,b7,abe,Afr,yfr,BW,Lfr,xfr,$fr,v7,nbe,kfr,Sfr,IW,Rfr,Pfr,Bfr,F7,sbe,Ifr,Nfr,NW,qfr,jfr,Dfr,T7,lbe,Gfr,Ofr,qW,Vfr,Xfr,zfr,M7,ibe,Wfr,Qfr,jW,Hfr,Ufr,Jfr,Ns,dbe,Yfr,Kfr,DW,Zfr,emr,GW,omr,rmr,tmr,E7,cbe,amr,nmr,OW,smr,lmr,imr,C7,fbe,dmr,cmr,VW,fmr,mmr,gmr,w7,mbe,hmr,pmr,XW,_mr,umr,bmr,A7,gbe,vmr,Fmr,zW,Tmr,Mmr,Emr,y7,hbe,Cmr,wmr,WW,Amr,ymr,Lmr,L7,pbe,xmr,$mr,QW,kmr,Smr,Rmr,x7,_be,Pmr,Bmr,HW,Imr,Nmr,qmr,$7,ube,jmr,Dmr,UW,Gmr,Omr,Vmr,k7,bbe,Xmr,zmr,JW,Wmr,Qmr,Hmr,S7,vbe,Umr,Jmr,YW,Ymr,Kmr,Zmr,R7,Fbe,egr,ogr,KW,rgr,tgr,agr,P7,Tbe,ngr,sgr,ZW,lgr,igr,dgr,B7,Mbe,cgr,fgr,eQ,mgr,ggr,hgr,I7,Ebe,pgr,_gr,oQ,ugr,bgr,vgr,N7,Cbe,Fgr,Tgr,rQ,Mgr,Egr,Cgr,q7,wbe,wgr,Agr,tQ,ygr,Lgr,xgr,j7,Abe,$gr,kgr,aQ,Sgr,Rgr,Pgr,D7,ybe,Bgr,Igr,nQ,Ngr,qgr,jgr,G7,Lbe,Dgr,Ggr,sQ,Ogr,Vgr,Xgr,O7,xbe,zgr,Wgr,lQ,Qgr,Hgr,Ugr,V7,$be,Jgr,Ygr,iQ,Kgr,Zgr,ehr,X7,kbe,ohr,rhr,dQ,thr,ahr,nhr,z7,Sbe,shr,lhr,cQ,ihr,dhr,chr,W7,Rbe,fhr,mhr,fQ,ghr,hhr,phr,Q7,Pbe,_hr,uhr,mQ,bhr,vhr,Fhr,H7,Bbe,Thr,Mhr,gQ,Ehr,Chr,whr,U7,Ibe,Ahr,yhr,hQ,Lhr,xhr,$hr,J7,Nbe,khr,Shr,pQ,Rhr,Phr,Bhr,Y7,qje,zd,K7,qbe,TL,Ihr,jbe,Nhr,jje,Ko,ML,qhr,Wd,jhr,_Q,Dhr,Ghr,uQ,Ohr,Vhr,Xhr,EL,zhr,Dbe,Whr,Qhr,Hhr,Lt,CL,Uhr,Gbe,Jhr,Yhr,Qd,Khr,Obe,Zhr,epr,bQ,opr,rpr,tpr,Z7,apr,Ar,wL,npr,Vbe,spr,lpr,Za,ipr,Xbe,dpr,cpr,zbe,fpr,mpr,Wbe,gpr,hpr,ppr,se,e9,Qbe,_pr,upr,vQ,bpr,vpr,Fpr,o9,Hbe,Tpr,Mpr,FQ,Epr,Cpr,wpr,r9,Ube,Apr,ypr,TQ,Lpr,xpr,$pr,t9,Jbe,kpr,Spr,MQ,Rpr,Ppr,Bpr,a9,Ybe,Ipr,Npr,EQ,qpr,jpr,Dpr,n9,Kbe,Gpr,Opr,CQ,Vpr,Xpr,zpr,s9,Zbe,Wpr,Qpr,wQ,Hpr,Upr,Jpr,l9,eve,Ypr,Kpr,AQ,Zpr,e_r,o_r,i9,ove,r_r,t_r,yQ,a_r,n_r,s_r,d9,rve,l_r,i_r,LQ,d_r,c_r,f_r,c9,tve,m_r,g_r,xQ,h_r,p_r,__r,f9,ave,u_r,b_r,$Q,v_r,F_r,T_r,m9,nve,M_r,E_r,kQ,C_r,w_r,A_r,g9,sve,y_r,L_r,SQ,x_r,$_r,k_r,h9,lve,S_r,R_r,RQ,P_r,B_r,I_r,p9,ive,N_r,q_r,PQ,j_r,D_r,G_r,_9,dve,O_r,V_r,BQ,X_r,z_r,W_r,u9,cve,Q_r,H_r,IQ,U_r,J_r,Y_r,b9,fve,K_r,Z_r,NQ,eur,our,rur,v9,mve,tur,aur,qQ,nur,sur,lur,F9,gve,iur,dur,jQ,cur,fur,mur,T9,hve,gur,hur,DQ,pur,_ur,uur,M9,pve,bur,vur,GQ,Fur,Tur,Mur,E9,Dje,Hd,C9,_ve,AL,Eur,uve,Cur,Gje,Zo,yL,wur,Ud,Aur,OQ,yur,Lur,VQ,xur,$ur,kur,LL,Sur,bve,Rur,Pur,Bur,xt,xL,Iur,vve,Nur,qur,Jd,jur,Fve,Dur,Gur,XQ,Our,Vur,Xur,w9,zur,yr,$L,Wur,Tve,Qur,Hur,en,Uur,Mve,Jur,Yur,Eve,Kur,Zur,Cve,e2r,o2r,r2r,Ee,A9,wve,t2r,a2r,zQ,n2r,s2r,l2r,y9,Ave,i2r,d2r,WQ,c2r,f2r,m2r,L9,yve,g2r,h2r,QQ,p2r,_2r,u2r,x9,Lve,b2r,v2r,HQ,F2r,T2r,M2r,$9,xve,E2r,C2r,UQ,w2r,A2r,y2r,k9,$ve,L2r,x2r,JQ,$2r,k2r,S2r,S9,kve,R2r,P2r,YQ,B2r,I2r,N2r,R9,Sve,q2r,j2r,KQ,D2r,G2r,O2r,P9,Rve,V2r,X2r,ZQ,z2r,W2r,Q2r,B9,Pve,H2r,U2r,eH,J2r,Y2r,K2r,I9,Bve,Z2r,e1r,oH,o1r,r1r,t1r,N9,Ive,a1r,n1r,rH,s1r,l1r,i1r,q9,Oje,Yd,j9,Nve,kL,d1r,qve,c1r,Vje,er,SL,f1r,Kd,m1r,tH,g1r,h1r,aH,p1r,_1r,u1r,RL,b1r,jve,v1r,F1r,T1r,$t,PL,M1r,Dve,E1r,C1r,Zd,w1r,Gve,A1r,y1r,nH,L1r,x1r,$1r,D9,k1r,Lr,BL,S1r,Ove,R1r,P1r,on,B1r,Vve,I1r,N1r,Xve,q1r,j1r,zve,D1r,G1r,O1r,rn,G9,Wve,V1r,X1r,sH,z1r,W1r,Q1r,O9,Qve,H1r,U1r,lH,J1r,Y1r,K1r,V9,Hve,Z1r,ebr,iH,obr,rbr,tbr,X9,Uve,abr,nbr,dH,sbr,lbr,ibr,z9,Xje,ec,W9,Jve,IL,dbr,Yve,cbr,zje,or,NL,fbr,oc,mbr,cH,gbr,hbr,fH,pbr,_br,ubr,qL,bbr,Kve,vbr,Fbr,Tbr,kt,jL,Mbr,Zve,Ebr,Cbr,rc,wbr,eFe,Abr,ybr,mH,Lbr,xbr,$br,Q9,kbr,xr,DL,Sbr,oFe,Rbr,Pbr,tn,Bbr,rFe,Ibr,Nbr,tFe,qbr,jbr,aFe,Dbr,Gbr,Obr,ie,H9,nFe,Vbr,Xbr,gH,zbr,Wbr,Qbr,U9,sFe,Hbr,Ubr,hH,Jbr,Ybr,Kbr,J9,lFe,Zbr,evr,pH,ovr,rvr,tvr,Y9,iFe,avr,nvr,_H,svr,lvr,ivr,K9,dFe,dvr,cvr,uH,fvr,mvr,gvr,Z9,cFe,hvr,pvr,bH,_vr,uvr,bvr,eM,fFe,vvr,Fvr,vH,Tvr,Mvr,Evr,oM,mFe,Cvr,wvr,FH,Avr,yvr,Lvr,rM,gFe,xvr,$vr,TH,kvr,Svr,Rvr,tM,hFe,Pvr,Bvr,MH,Ivr,Nvr,qvr,aM,pFe,jvr,Dvr,EH,Gvr,Ovr,Vvr,nM,_Fe,Xvr,zvr,CH,Wvr,Qvr,Hvr,sM,uFe,Uvr,Jvr,wH,Yvr,Kvr,Zvr,lM,bFe,eFr,oFr,AH,rFr,tFr,aFr,iM,vFe,nFr,sFr,yH,lFr,iFr,dFr,dM,FFe,cFr,fFr,LH,mFr,gFr,hFr,cM,TFe,pFr,_Fr,xH,uFr,bFr,vFr,fM,MFe,FFr,TFr,$H,MFr,EFr,CFr,mM,EFe,wFr,AFr,kH,yFr,LFr,xFr,gM,CFe,$Fr,kFr,SH,SFr,RFr,PFr,hM,Wje,tc,pM,wFe,GL,BFr,AFe,IFr,Qje,rr,OL,NFr,ac,qFr,RH,jFr,DFr,PH,GFr,OFr,VFr,VL,XFr,yFe,zFr,WFr,QFr,St,XL,HFr,LFe,UFr,JFr,nc,YFr,xFe,KFr,ZFr,BH,e6r,o6r,r6r,_M,t6r,$r,zL,a6r,$Fe,n6r,s6r,an,l6r,kFe,i6r,d6r,SFe,c6r,f6r,RFe,m6r,g6r,h6r,ye,uM,PFe,p6r,_6r,IH,u6r,b6r,v6r,bM,BFe,F6r,T6r,NH,M6r,E6r,C6r,vM,IFe,w6r,A6r,qH,y6r,L6r,x6r,FM,NFe,$6r,k6r,jH,S6r,R6r,P6r,TM,qFe,B6r,I6r,DH,N6r,q6r,j6r,MM,jFe,D6r,G6r,GH,O6r,V6r,X6r,EM,DFe,z6r,W6r,OH,Q6r,H6r,U6r,CM,GFe,J6r,Y6r,VH,K6r,Z6r,eTr,wM,OFe,oTr,rTr,XH,tTr,aTr,nTr,AM,VFe,sTr,lTr,zH,iTr,dTr,cTr,yM,Hje,sc,LM,XFe,WL,fTr,zFe,mTr,Uje,tr,QL,gTr,lc,hTr,WH,pTr,_Tr,QH,uTr,bTr,vTr,HL,FTr,WFe,TTr,MTr,ETr,Rt,UL,CTr,QFe,wTr,ATr,ic,yTr,HFe,LTr,xTr,HH,$Tr,kTr,STr,xM,RTr,kr,JL,PTr,UFe,BTr,ITr,nn,NTr,JFe,qTr,jTr,YFe,DTr,GTr,KFe,OTr,VTr,XTr,oe,$M,ZFe,zTr,WTr,UH,QTr,HTr,UTr,kM,e6e,JTr,YTr,JH,KTr,ZTr,e7r,SM,o6e,o7r,r7r,YH,t7r,a7r,n7r,RM,r6e,s7r,l7r,KH,i7r,d7r,c7r,PM,t6e,f7r,m7r,ZH,g7r,h7r,p7r,BM,a6e,_7r,u7r,eU,b7r,v7r,F7r,IM,n6e,T7r,M7r,oU,E7r,C7r,w7r,NM,s6e,A7r,y7r,rU,L7r,x7r,$7r,qM,l6e,k7r,S7r,tU,R7r,P7r,B7r,jM,i6e,I7r,N7r,aU,q7r,j7r,D7r,DM,d6e,G7r,O7r,nU,V7r,X7r,z7r,GM,c6e,W7r,Q7r,sU,H7r,U7r,J7r,OM,f6e,Y7r,K7r,lU,Z7r,e9r,o9r,VM,m6e,r9r,t9r,iU,a9r,n9r,s9r,XM,g6e,l9r,i9r,dU,d9r,c9r,f9r,zM,h6e,m9r,g9r,cU,h9r,p9r,_9r,WM,p6e,u9r,b9r,fU,v9r,F9r,T9r,QM,_6e,M9r,E9r,mU,C9r,w9r,A9r,HM,u6e,y9r,L9r,gU,x9r,$9r,k9r,UM,b6e,S9r,R9r,hU,P9r,B9r,I9r,JM,v6e,N9r,q9r,pU,j9r,D9r,G9r,YM,F6e,O9r,V9r,_U,X9r,z9r,W9r,KM,T6e,Q9r,H9r,uU,U9r,J9r,Y9r,ZM,M6e,K9r,Z9r,bU,eMr,oMr,rMr,e4,E6e,tMr,aMr,vU,nMr,sMr,lMr,o4,C6e,iMr,dMr,FU,cMr,fMr,mMr,r4,Jje,dc,t4,w6e,YL,gMr,A6e,hMr,Yje,ar,KL,pMr,cc,_Mr,TU,uMr,bMr,MU,vMr,FMr,TMr,ZL,MMr,y6e,EMr,CMr,wMr,Pt,e8,AMr,L6e,yMr,LMr,fc,xMr,x6e,$Mr,kMr,EU,SMr,RMr,PMr,a4,BMr,Sr,o8,IMr,$6e,NMr,qMr,sn,jMr,k6e,DMr,GMr,S6e,OMr,VMr,R6e,XMr,zMr,WMr,_e,n4,P6e,QMr,HMr,CU,UMr,JMr,YMr,s4,B6e,KMr,ZMr,wU,e4r,o4r,r4r,l4,I6e,t4r,a4r,AU,n4r,s4r,l4r,i4,N6e,i4r,d4r,yU,c4r,f4r,m4r,d4,q6e,g4r,h4r,LU,p4r,_4r,u4r,c4,j6e,b4r,v4r,xU,F4r,T4r,M4r,f4,D6e,E4r,C4r,$U,w4r,A4r,y4r,m4,G6e,L4r,x4r,kU,$4r,k4r,S4r,g4,O6e,R4r,P4r,SU,B4r,I4r,N4r,h4,V6e,q4r,j4r,RU,D4r,G4r,O4r,p4,X6e,V4r,X4r,PU,z4r,W4r,Q4r,_4,z6e,H4r,U4r,BU,J4r,Y4r,K4r,u4,W6e,Z4r,eEr,IU,oEr,rEr,tEr,b4,Q6e,aEr,nEr,NU,sEr,lEr,iEr,v4,H6e,dEr,cEr,qU,fEr,mEr,gEr,F4,U6e,hEr,pEr,jU,_Er,uEr,bEr,T4,J6e,vEr,FEr,DU,TEr,MEr,EEr,M4,Kje,mc,E4,Y6e,r8,CEr,K6e,wEr,Zje,nr,t8,AEr,gc,yEr,GU,LEr,xEr,OU,$Er,kEr,SEr,a8,REr,Z6e,PEr,BEr,IEr,Bt,n8,NEr,eTe,qEr,jEr,hc,DEr,oTe,GEr,OEr,VU,VEr,XEr,zEr,C4,WEr,Rr,s8,QEr,rTe,HEr,UEr,ln,JEr,tTe,YEr,KEr,aTe,ZEr,e5r,nTe,o5r,r5r,t5r,l8,w4,sTe,a5r,n5r,XU,s5r,l5r,i5r,A4,lTe,d5r,c5r,zU,f5r,m5r,g5r,y4,eDe,pc,L4,iTe,i8,h5r,dTe,p5r,oDe,sr,d8,_5r,_c,u5r,WU,b5r,v5r,QU,F5r,T5r,M5r,c8,E5r,cTe,C5r,w5r,A5r,It,f8,y5r,fTe,L5r,x5r,uc,$5r,mTe,k5r,S5r,HU,R5r,P5r,B5r,x4,I5r,Pr,m8,N5r,gTe,q5r,j5r,dn,D5r,hTe,G5r,O5r,pTe,V5r,X5r,_Te,z5r,W5r,Q5r,uTe,$4,bTe,H5r,U5r,UU,J5r,Y5r,K5r,k4,rDe,bc,S4,vTe,g8,Z5r,FTe,eCr,tDe,lr,h8,oCr,vc,rCr,JU,tCr,aCr,YU,nCr,sCr,lCr,p8,iCr,TTe,dCr,cCr,fCr,Nt,_8,mCr,MTe,gCr,hCr,Fc,pCr,ETe,_Cr,uCr,KU,bCr,vCr,FCr,R4,TCr,Br,u8,MCr,CTe,ECr,CCr,cn,wCr,wTe,ACr,yCr,ATe,LCr,xCr,yTe,$Cr,kCr,SCr,de,P4,LTe,RCr,PCr,ZU,BCr,ICr,NCr,B4,xTe,qCr,jCr,eJ,DCr,GCr,OCr,I4,$Te,VCr,XCr,oJ,zCr,WCr,QCr,N4,kTe,HCr,UCr,rJ,JCr,YCr,KCr,q4,STe,ZCr,e3r,tJ,o3r,r3r,t3r,j4,RTe,a3r,n3r,aJ,s3r,l3r,i3r,D4,PTe,d3r,c3r,nJ,f3r,m3r,g3r,G4,BTe,h3r,p3r,sJ,_3r,u3r,b3r,O4,ITe,v3r,F3r,lJ,T3r,M3r,E3r,V4,NTe,C3r,w3r,iJ,A3r,y3r,L3r,X4,qTe,x3r,$3r,dJ,k3r,S3r,R3r,z4,jTe,P3r,B3r,cJ,I3r,N3r,q3r,W4,DTe,j3r,D3r,fJ,G3r,O3r,V3r,Q4,GTe,X3r,z3r,mJ,W3r,Q3r,H3r,H4,OTe,U3r,J3r,gJ,Y3r,K3r,Z3r,U4,VTe,e0r,o0r,hJ,r0r,t0r,a0r,J4,XTe,n0r,s0r,pJ,l0r,i0r,d0r,Y4,zTe,c0r,f0r,_J,m0r,g0r,h0r,K4,WTe,p0r,_0r,uJ,u0r,b0r,v0r,Z4,QTe,F0r,T0r,bJ,M0r,E0r,C0r,eE,aDe,Tc,oE,HTe,b8,w0r,UTe,A0r,nDe,ir,v8,y0r,Mc,L0r,vJ,x0r,$0r,FJ,k0r,S0r,R0r,F8,P0r,JTe,B0r,I0r,N0r,qt,T8,q0r,YTe,j0r,D0r,Ec,G0r,KTe,O0r,V0r,TJ,X0r,z0r,W0r,rE,Q0r,Ir,M8,H0r,ZTe,U0r,J0r,fn,Y0r,e7e,K0r,Z0r,o7e,ewr,owr,r7e,rwr,twr,awr,ce,tE,t7e,nwr,swr,MJ,lwr,iwr,dwr,aE,a7e,cwr,fwr,EJ,mwr,gwr,hwr,nE,n7e,pwr,_wr,CJ,uwr,bwr,vwr,sE,s7e,Fwr,Twr,wJ,Mwr,Ewr,Cwr,lE,l7e,wwr,Awr,AJ,ywr,Lwr,xwr,iE,i7e,$wr,kwr,yJ,Swr,Rwr,Pwr,dE,d7e,Bwr,Iwr,LJ,Nwr,qwr,jwr,cE,c7e,Dwr,Gwr,xJ,Owr,Vwr,Xwr,fE,f7e,zwr,Wwr,$J,Qwr,Hwr,Uwr,mE,m7e,Jwr,Ywr,kJ,Kwr,Zwr,eAr,gE,g7e,oAr,rAr,SJ,tAr,aAr,nAr,hE,h7e,sAr,lAr,RJ,iAr,dAr,cAr,pE,p7e,fAr,mAr,PJ,gAr,hAr,pAr,_E,_7e,_Ar,uAr,BJ,bAr,vAr,FAr,uE,u7e,TAr,MAr,IJ,EAr,CAr,wAr,bE,b7e,AAr,yAr,NJ,LAr,xAr,$Ar,vE,v7e,kAr,SAr,qJ,RAr,PAr,BAr,FE,F7e,IAr,NAr,jJ,qAr,jAr,DAr,TE,T7e,GAr,OAr,DJ,VAr,XAr,zAr,ME,M7e,WAr,QAr,GJ,HAr,UAr,JAr,EE,sDe,Cc,CE,E7e,E8,YAr,C7e,KAr,lDe,dr,C8,ZAr,wc,eyr,OJ,oyr,ryr,VJ,tyr,ayr,nyr,w8,syr,w7e,lyr,iyr,dyr,jt,A8,cyr,A7e,fyr,myr,Ac,gyr,y7e,hyr,pyr,XJ,_yr,uyr,byr,wE,vyr,Nr,y8,Fyr,L7e,Tyr,Myr,mn,Eyr,x7e,Cyr,wyr,$7e,Ayr,yyr,k7e,Lyr,xyr,$yr,S7e,AE,R7e,kyr,Syr,zJ,Ryr,Pyr,Byr,yE,iDe,yc,LE,P7e,L8,Iyr,B7e,Nyr,dDe,cr,x8,qyr,Lc,jyr,WJ,Dyr,Gyr,QJ,Oyr,Vyr,Xyr,$8,zyr,I7e,Wyr,Qyr,Hyr,Dt,k8,Uyr,N7e,Jyr,Yyr,xc,Kyr,q7e,Zyr,eLr,HJ,oLr,rLr,tLr,xE,aLr,qr,S8,nLr,j7e,sLr,lLr,gn,iLr,D7e,dLr,cLr,G7e,fLr,mLr,O7e,gLr,hLr,pLr,V7e,$E,X7e,_Lr,uLr,UJ,bLr,vLr,FLr,kE,cDe,$c,SE,z7e,R8,TLr,W7e,MLr,fDe,fr,P8,ELr,kc,CLr,JJ,wLr,ALr,YJ,yLr,LLr,xLr,B8,$Lr,Q7e,kLr,SLr,RLr,Gt,I8,PLr,H7e,BLr,ILr,Sc,NLr,U7e,qLr,jLr,KJ,DLr,GLr,OLr,RE,VLr,jr,N8,XLr,J7e,zLr,WLr,hn,QLr,Y7e,HLr,ULr,K7e,JLr,YLr,Z7e,KLr,ZLr,e8r,re,PE,e9e,o8r,r8r,ZJ,t8r,a8r,n8r,BE,o9e,s8r,l8r,eY,i8r,d8r,c8r,IE,r9e,f8r,m8r,oY,g8r,h8r,p8r,NE,t9e,_8r,u8r,rY,b8r,v8r,F8r,qE,a9e,T8r,M8r,tY,E8r,C8r,w8r,jE,n9e,A8r,y8r,aY,L8r,x8r,$8r,DE,s9e,k8r,S8r,nY,R8r,P8r,B8r,GE,l9e,I8r,N8r,sY,q8r,j8r,D8r,OE,i9e,G8r,O8r,lY,V8r,X8r,z8r,VE,d9e,W8r,Q8r,iY,H8r,U8r,J8r,XE,c9e,Y8r,K8r,dY,Z8r,exr,oxr,zE,f9e,rxr,txr,cY,axr,nxr,sxr,WE,m9e,lxr,ixr,fY,dxr,cxr,fxr,QE,g9e,mxr,gxr,mY,hxr,pxr,_xr,HE,h9e,uxr,bxr,gY,vxr,Fxr,Txr,UE,p9e,Mxr,Exr,hY,Cxr,wxr,Axr,JE,_9e,yxr,Lxr,pY,xxr,$xr,kxr,YE,u9e,Sxr,Rxr,_Y,Pxr,Bxr,Ixr,KE,b9e,Nxr,qxr,uY,jxr,Dxr,Gxr,ZE,v9e,Oxr,Vxr,bY,Xxr,zxr,Wxr,e5,F9e,Qxr,Hxr,vY,Uxr,Jxr,Yxr,o5,T9e,Kxr,Zxr,FY,e$r,o$r,r$r,r5,M9e,t$r,a$r,TY,n$r,s$r,l$r,t5,E9e,i$r,d$r,MY,c$r,f$r,m$r,a5,C9e,g$r,h$r,EY,p$r,_$r,u$r,n5,w9e,b$r,v$r,CY,F$r,T$r,M$r,s5,mDe,Rc,l5,A9e,q8,E$r,y9e,C$r,gDe,mr,j8,w$r,Pc,A$r,wY,y$r,L$r,AY,x$r,$$r,k$r,D8,S$r,L9e,R$r,P$r,B$r,Ot,G8,I$r,x9e,N$r,q$r,Bc,j$r,$9e,D$r,G$r,yY,O$r,V$r,X$r,i5,z$r,Dr,O8,W$r,k9e,Q$r,H$r,pn,U$r,S9e,J$r,Y$r,R9e,K$r,Z$r,P9e,ekr,okr,rkr,Pe,d5,B9e,tkr,akr,LY,nkr,skr,lkr,c5,I9e,ikr,dkr,xY,ckr,fkr,mkr,f5,N9e,gkr,hkr,$Y,pkr,_kr,ukr,m5,q9e,bkr,vkr,kY,Fkr,Tkr,Mkr,g5,j9e,Ekr,Ckr,SY,wkr,Akr,ykr,h5,D9e,Lkr,xkr,RY,$kr,kkr,Skr,p5,G9e,Rkr,Pkr,PY,Bkr,Ikr,Nkr,_5,O9e,qkr,jkr,BY,Dkr,Gkr,Okr,u5,V9e,Vkr,Xkr,IY,zkr,Wkr,Qkr,b5,hDe,Ic,v5,X9e,V8,Hkr,z9e,Ukr,pDe,gr,X8,Jkr,Nc,Ykr,NY,Kkr,Zkr,qY,eSr,oSr,rSr,z8,tSr,W9e,aSr,nSr,sSr,Vt,W8,lSr,Q9e,iSr,dSr,qc,cSr,H9e,fSr,mSr,jY,gSr,hSr,pSr,F5,_Sr,Gr,Q8,uSr,U9e,bSr,vSr,_n,FSr,J9e,TSr,MSr,Y9e,ESr,CSr,K9e,wSr,ASr,ySr,Te,T5,Z9e,LSr,xSr,DY,$Sr,kSr,SSr,M5,eMe,RSr,PSr,GY,BSr,ISr,NSr,E5,oMe,qSr,jSr,OY,DSr,GSr,OSr,C5,rMe,VSr,XSr,VY,zSr,WSr,QSr,w5,tMe,HSr,USr,XY,JSr,YSr,KSr,A5,aMe,ZSr,eRr,zY,oRr,rRr,tRr,y5,nMe,aRr,nRr,WY,sRr,lRr,iRr,L5,sMe,dRr,cRr,QY,fRr,mRr,gRr,x5,lMe,hRr,pRr,HY,_Rr,uRr,bRr,$5,iMe,vRr,FRr,UY,TRr,MRr,ERr,k5,dMe,CRr,wRr,JY,ARr,yRr,LRr,S5,cMe,xRr,$Rr,YY,kRr,SRr,RRr,R5,fMe,PRr,BRr,KY,IRr,NRr,qRr,P5,_De,jc,B5,mMe,H8,jRr,gMe,DRr,uDe,hr,U8,GRr,Dc,ORr,ZY,VRr,XRr,eK,zRr,WRr,QRr,J8,HRr,hMe,URr,JRr,YRr,Xt,Y8,KRr,pMe,ZRr,ePr,Gc,oPr,_Me,rPr,tPr,oK,aPr,nPr,sPr,I5,lPr,Or,K8,iPr,uMe,dPr,cPr,un,fPr,bMe,mPr,gPr,vMe,hPr,pPr,FMe,_Pr,uPr,bPr,Le,N5,TMe,vPr,FPr,rK,TPr,MPr,EPr,q5,MMe,CPr,wPr,tK,APr,yPr,LPr,j5,EMe,xPr,$Pr,aK,kPr,SPr,RPr,D5,CMe,PPr,BPr,nK,IPr,NPr,qPr,G5,wMe,jPr,DPr,sK,GPr,OPr,VPr,O5,AMe,XPr,zPr,lK,WPr,QPr,HPr,V5,yMe,UPr,JPr,iK,YPr,KPr,ZPr,X5,LMe,eBr,oBr,dK,rBr,tBr,aBr,z5,xMe,nBr,sBr,cK,lBr,iBr,dBr,W5,$Me,cBr,fBr,fK,mBr,gBr,hBr,Q5,bDe,Oc,H5,kMe,Z8,pBr,SMe,_Br,vDe,pr,ex,uBr,Vc,bBr,mK,vBr,FBr,gK,TBr,MBr,EBr,ox,CBr,RMe,wBr,ABr,yBr,zt,rx,LBr,PMe,xBr,$Br,Xc,kBr,BMe,SBr,RBr,hK,PBr,BBr,IBr,U5,NBr,Vr,tx,qBr,IMe,jBr,DBr,bn,GBr,NMe,OBr,VBr,qMe,XBr,zBr,jMe,WBr,QBr,HBr,xe,J5,DMe,UBr,JBr,pK,YBr,KBr,ZBr,Y5,GMe,eIr,oIr,_K,rIr,tIr,aIr,K5,OMe,nIr,sIr,uK,lIr,iIr,dIr,Z5,VMe,cIr,fIr,bK,mIr,gIr,hIr,eC,XMe,pIr,_Ir,vK,uIr,bIr,vIr,oC,zMe,FIr,TIr,FK,MIr,EIr,CIr,rC,WMe,wIr,AIr,TK,yIr,LIr,xIr,tC,QMe,$Ir,kIr,MK,SIr,RIr,PIr,aC,HMe,BIr,IIr,EK,NIr,qIr,jIr,nC,UMe,DIr,GIr,CK,OIr,VIr,XIr,sC,FDe,zc,lC,JMe,ax,zIr,YMe,WIr,TDe,_r,nx,QIr,Wc,HIr,wK,UIr,JIr,AK,YIr,KIr,ZIr,sx,eNr,KMe,oNr,rNr,tNr,Wt,lx,aNr,ZMe,nNr,sNr,Qc,lNr,e4e,iNr,dNr,yK,cNr,fNr,mNr,iC,gNr,Xr,ix,hNr,o4e,pNr,_Nr,vn,uNr,r4e,bNr,vNr,t4e,FNr,TNr,a4e,MNr,ENr,CNr,$e,dC,n4e,wNr,ANr,LK,yNr,LNr,xNr,cC,s4e,$Nr,kNr,xK,SNr,RNr,PNr,fC,l4e,BNr,INr,$K,NNr,qNr,jNr,mC,i4e,DNr,GNr,kK,ONr,VNr,XNr,gC,d4e,zNr,WNr,SK,QNr,HNr,UNr,hC,c4e,JNr,YNr,RK,KNr,ZNr,eqr,pC,f4e,oqr,rqr,PK,tqr,aqr,nqr,_C,m4e,sqr,lqr,BK,iqr,dqr,cqr,uC,g4e,fqr,mqr,IK,gqr,hqr,pqr,bC,h4e,_qr,uqr,NK,bqr,vqr,Fqr,vC,MDe,Hc,FC,p4e,dx,Tqr,_4e,Mqr,EDe,ur,cx,Eqr,Uc,Cqr,qK,wqr,Aqr,jK,yqr,Lqr,xqr,fx,$qr,u4e,kqr,Sqr,Rqr,Qt,mx,Pqr,b4e,Bqr,Iqr,Jc,Nqr,v4e,qqr,jqr,DK,Dqr,Gqr,Oqr,TC,Vqr,zr,gx,Xqr,F4e,zqr,Wqr,Fn,Qqr,T4e,Hqr,Uqr,M4e,Jqr,Yqr,E4e,Kqr,Zqr,ejr,ke,MC,C4e,ojr,rjr,GK,tjr,ajr,njr,EC,w4e,sjr,ljr,OK,ijr,djr,cjr,CC,A4e,fjr,mjr,VK,gjr,hjr,pjr,wC,y4e,_jr,ujr,XK,bjr,vjr,Fjr,AC,L4e,Tjr,Mjr,zK,Ejr,Cjr,wjr,yC,x4e,Ajr,yjr,WK,Ljr,xjr,$jr,LC,$4e,kjr,Sjr,QK,Rjr,Pjr,Bjr,xC,k4e,Ijr,Njr,HK,qjr,jjr,Djr,$C,S4e,Gjr,Ojr,UK,Vjr,Xjr,zjr,kC,R4e,Wjr,Qjr,JK,Hjr,Ujr,Jjr,SC,CDe,Yc,RC,P4e,hx,Yjr,B4e,Kjr,wDe,br,px,Zjr,Kc,eDr,YK,oDr,rDr,KK,tDr,aDr,nDr,_x,sDr,I4e,lDr,iDr,dDr,Ht,ux,cDr,N4e,fDr,mDr,Zc,gDr,q4e,hDr,pDr,ZK,_Dr,uDr,bDr,PC,vDr,Wr,bx,FDr,j4e,TDr,MDr,Tn,EDr,D4e,CDr,wDr,G4e,ADr,yDr,O4e,LDr,xDr,$Dr,Ge,BC,V4e,kDr,SDr,eZ,RDr,PDr,BDr,IC,X4e,IDr,NDr,oZ,qDr,jDr,DDr,NC,z4e,GDr,ODr,rZ,VDr,XDr,zDr,qC,W4e,WDr,QDr,tZ,HDr,UDr,JDr,jC,Q4e,YDr,KDr,aZ,ZDr,eGr,oGr,DC,H4e,rGr,tGr,nZ,aGr,nGr,sGr,GC,U4e,lGr,iGr,sZ,dGr,cGr,fGr,OC,J4e,mGr,gGr,lZ,hGr,pGr,_Gr,VC,ADe,ef,XC,Y4e,vx,uGr,K4e,bGr,yDe,vr,Fx,vGr,of,FGr,iZ,TGr,MGr,dZ,EGr,CGr,wGr,Tx,AGr,Z4e,yGr,LGr,xGr,Ut,Mx,$Gr,eEe,kGr,SGr,rf,RGr,oEe,PGr,BGr,cZ,IGr,NGr,qGr,zC,jGr,Qr,Ex,DGr,rEe,GGr,OGr,Mn,VGr,tEe,XGr,zGr,aEe,WGr,QGr,nEe,HGr,UGr,JGr,Oe,WC,sEe,YGr,KGr,fZ,ZGr,eOr,oOr,QC,lEe,rOr,tOr,mZ,aOr,nOr,sOr,HC,iEe,lOr,iOr,gZ,dOr,cOr,fOr,UC,dEe,mOr,gOr,hZ,hOr,pOr,_Or,JC,cEe,uOr,bOr,pZ,vOr,FOr,TOr,YC,fEe,MOr,EOr,_Z,COr,wOr,AOr,KC,mEe,yOr,LOr,uZ,xOr,$Or,kOr,ZC,gEe,SOr,ROr,bZ,POr,BOr,IOr,e3,LDe,tf,o3,hEe,Cx,NOr,pEe,qOr,xDe,Fr,wx,jOr,af,DOr,vZ,GOr,OOr,FZ,VOr,XOr,zOr,Ax,WOr,_Ee,QOr,HOr,UOr,Jt,yx,JOr,uEe,YOr,KOr,nf,ZOr,bEe,eVr,oVr,TZ,rVr,tVr,aVr,r3,nVr,Hr,Lx,sVr,vEe,lVr,iVr,En,dVr,FEe,cVr,fVr,TEe,mVr,gVr,MEe,hVr,pVr,_Vr,EEe,t3,CEe,uVr,bVr,MZ,vVr,FVr,TVr,a3,$De,sf,n3,wEe,xx,MVr,AEe,EVr,kDe,Tr,$x,CVr,lf,wVr,EZ,AVr,yVr,CZ,LVr,xVr,$Vr,kx,kVr,yEe,SVr,RVr,PVr,Yt,Sx,BVr,LEe,IVr,NVr,df,qVr,xEe,jVr,DVr,wZ,GVr,OVr,VVr,s3,XVr,Ur,Rx,zVr,$Ee,WVr,QVr,Cn,HVr,kEe,UVr,JVr,SEe,YVr,KVr,REe,ZVr,eXr,oXr,Px,l3,PEe,rXr,tXr,AZ,aXr,nXr,sXr,i3,BEe,lXr,iXr,yZ,dXr,cXr,fXr,d3,SDe,cf,c3,IEe,Bx,mXr,NEe,gXr,RDe,Mr,Ix,hXr,ff,pXr,LZ,_Xr,uXr,xZ,bXr,vXr,FXr,Nx,TXr,qEe,MXr,EXr,CXr,Kt,qx,wXr,jEe,AXr,yXr,mf,LXr,DEe,xXr,$Xr,$Z,kXr,SXr,RXr,f3,PXr,Jr,jx,BXr,GEe,IXr,NXr,wn,qXr,OEe,jXr,DXr,VEe,GXr,OXr,XEe,VXr,XXr,zXr,zEe,m3,WEe,WXr,QXr,kZ,HXr,UXr,JXr,g3,PDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Bw=new te({}),Iw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new YXr({props:{warning:!0,$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),Nw=new te({}),qw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L587"}}),Gw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),Ow=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L733"}}),Vw=new te({}),Xw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L397"}}),Qw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L411"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),Hw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L610"}}),Uw=new te({}),Jw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new YXr({props:{$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),eA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),oA=new te({}),rA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L88"}}),nA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L102"}}),np=new YXr({props:{$$slots:{default:[eSt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),sA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L255"}}),lA=new te({}),iA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L740"}}),cA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),mA=new te({}),gA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L747"}}),pA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),uA=new te({}),bA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L762"}}),FA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),MA=new te({}),EA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L769"}}),wA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),yA=new te({}),LA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L776"}}),$A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),SA=new te({}),RA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L785"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),NA=new te({}),qA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L819"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),OA=new te({}),VA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L826"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),QA=new te({}),HA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L812"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),KA=new te({}),ZA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L794"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L801"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L835"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L874"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L881"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L904"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),Ly=new te({}),xy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L888"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L895"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L913"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L920"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L867"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L842"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),sL=new te({}),lL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L849"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L858"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),_L=new te({}),uL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),TL=new te({}),ML=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),E9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),AL=new te({}),yL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),q9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),kL=new te({}),SL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),D9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),IL=new te({}),NL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Q9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),GL=new te({}),OL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),WL=new te({}),QL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),YL=new te({}),KL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),r8=new te({}),t8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),i8=new te({}),d8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),g8=new te({}),h8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),b8=new te({}),v8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),E8=new te({}),C8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),L8=new te({}),x8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),R8=new te({}),P8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),I8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),q8=new te({}),j8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),G8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),V8=new te({}),X8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),H8=new te({}),U8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),Z8=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),kw=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),Sw=o("AutoConfig"),Ln=o(", "),xn=a("a"),Rw=o("AutoModel"),_i=o(`, and
`),$n=a("a"),Pw=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ek=o("will create a model that is an instance of "),bi=a("a"),ok=o("BertModel"),rk=o("."),Eo=l(),wa=a("p"),tk=o("There is one class of "),vf=a("code"),ak=o("AutoModel"),OOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kqe=l(),vi=a("h2"),Ff=a("a"),Coe=a("span"),F(Bw.$$.fragment),VOe=l(),woe=a("span"),XOe=o("Extending the Auto Classes"),Sqe=l(),kn=a("p"),zOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=a("code"),WOe=o("NewModel"),QOe=o(", make sure you have a "),yoe=a("code"),HOe=o("NewModelConfig"),UOe=o(` then you can add those to the auto
classes like this:`),Rqe=l(),F(Iw.$$.fragment),Pqe=l(),nk=a("p"),JOe=o("You will then be able to use the auto classes like you would usually do!"),Bqe=l(),F(Tf.$$.fragment),Iqe=l(),Fi=a("h2"),Mf=a("a"),Loe=a("span"),F(Nw.$$.fragment),YOe=l(),xoe=a("span"),KOe=o("AutoConfig"),Nqe=l(),Co=a("div"),F(qw.$$.fragment),ZOe=l(),jw=a("p"),eVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=a("a"),oVe=o("from_pretrained()"),rVe=o(" class method."),tVe=l(),Dw=a("p"),aVe=o("This class cannot be instantiated directly using "),$oe=a("code"),nVe=o("__init__()"),sVe=o(" (throws an error)."),lVe=l(),Er=a("div"),F(Gw.$$.fragment),iVe=l(),koe=a("p"),dVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cVe=l(),Ti=a("p"),fVe=o("The configuration class to instantiate is selected based on the "),Soe=a("code"),mVe=o("model_type"),gVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=a("code"),hVe=o("pretrained_model_name_or_path"),pVe=o(":"),_Ve=l(),A=a("ul"),Ef=a("li"),Poe=a("strong"),uVe=o("albert"),bVe=o(" \u2014 "),lk=a("a"),vVe=o("AlbertConfig"),FVe=o(" (ALBERT model)"),TVe=l(),Cf=a("li"),Boe=a("strong"),MVe=o("bart"),EVe=o(" \u2014 "),ik=a("a"),CVe=o("BartConfig"),wVe=o(" (BART model)"),AVe=l(),wf=a("li"),Ioe=a("strong"),yVe=o("beit"),LVe=o(" \u2014 "),dk=a("a"),xVe=o("BeitConfig"),$Ve=o(" (BEiT model)"),kVe=l(),Af=a("li"),Noe=a("strong"),SVe=o("bert"),RVe=o(" \u2014 "),ck=a("a"),PVe=o("BertConfig"),BVe=o(" (BERT model)"),IVe=l(),yf=a("li"),qoe=a("strong"),NVe=o("bert-generation"),qVe=o(" \u2014 "),fk=a("a"),jVe=o("BertGenerationConfig"),DVe=o(" (Bert Generation model)"),GVe=l(),Lf=a("li"),joe=a("strong"),OVe=o("big_bird"),VVe=o(" \u2014 "),mk=a("a"),XVe=o("BigBirdConfig"),zVe=o(" (BigBird model)"),WVe=l(),xf=a("li"),Doe=a("strong"),QVe=o("bigbird_pegasus"),HVe=o(" \u2014 "),gk=a("a"),UVe=o("BigBirdPegasusConfig"),JVe=o(" (BigBirdPegasus model)"),YVe=l(),$f=a("li"),Goe=a("strong"),KVe=o("blenderbot"),ZVe=o(" \u2014 "),hk=a("a"),eXe=o("BlenderbotConfig"),oXe=o(" (Blenderbot model)"),rXe=l(),kf=a("li"),Ooe=a("strong"),tXe=o("blenderbot-small"),aXe=o(" \u2014 "),pk=a("a"),nXe=o("BlenderbotSmallConfig"),sXe=o(" (BlenderbotSmall model)"),lXe=l(),Sf=a("li"),Voe=a("strong"),iXe=o("camembert"),dXe=o(" \u2014 "),_k=a("a"),cXe=o("CamembertConfig"),fXe=o(" (CamemBERT model)"),mXe=l(),Rf=a("li"),Xoe=a("strong"),gXe=o("canine"),hXe=o(" \u2014 "),uk=a("a"),pXe=o("CanineConfig"),_Xe=o(" (Canine model)"),uXe=l(),Pf=a("li"),zoe=a("strong"),bXe=o("clip"),vXe=o(" \u2014 "),bk=a("a"),FXe=o("CLIPConfig"),TXe=o(" (CLIP model)"),MXe=l(),Bf=a("li"),Woe=a("strong"),EXe=o("convbert"),CXe=o(" \u2014 "),vk=a("a"),wXe=o("ConvBertConfig"),AXe=o(" (ConvBERT model)"),yXe=l(),If=a("li"),Qoe=a("strong"),LXe=o("convnext"),xXe=o(" \u2014 "),Fk=a("a"),$Xe=o("ConvNextConfig"),kXe=o(" (ConvNext model)"),SXe=l(),Nf=a("li"),Hoe=a("strong"),RXe=o("ctrl"),PXe=o(" \u2014 "),Tk=a("a"),BXe=o("CTRLConfig"),IXe=o(" (CTRL model)"),NXe=l(),qf=a("li"),Uoe=a("strong"),qXe=o("cvt"),jXe=o(" \u2014 "),Mk=a("a"),DXe=o("CvtConfig"),GXe=o(" (CvT model)"),OXe=l(),jf=a("li"),Joe=a("strong"),VXe=o("data2vec-audio"),XXe=o(" \u2014 "),Ek=a("a"),zXe=o("Data2VecAudioConfig"),WXe=o(" (Data2VecAudio model)"),QXe=l(),Df=a("li"),Yoe=a("strong"),HXe=o("data2vec-text"),UXe=o(" \u2014 "),Ck=a("a"),JXe=o("Data2VecTextConfig"),YXe=o(" (Data2VecText model)"),KXe=l(),Gf=a("li"),Koe=a("strong"),ZXe=o("data2vec-vision"),eze=o(" \u2014 "),wk=a("a"),oze=o("Data2VecVisionConfig"),rze=o(" (Data2VecVision model)"),tze=l(),Of=a("li"),Zoe=a("strong"),aze=o("deberta"),nze=o(" \u2014 "),Ak=a("a"),sze=o("DebertaConfig"),lze=o(" (DeBERTa model)"),ize=l(),Vf=a("li"),ere=a("strong"),dze=o("deberta-v2"),cze=o(" \u2014 "),yk=a("a"),fze=o("DebertaV2Config"),mze=o(" (DeBERTa-v2 model)"),gze=l(),Xf=a("li"),ore=a("strong"),hze=o("decision_transformer"),pze=o(" \u2014 "),Lk=a("a"),_ze=o("DecisionTransformerConfig"),uze=o(" (Decision Transformer model)"),bze=l(),zf=a("li"),rre=a("strong"),vze=o("deit"),Fze=o(" \u2014 "),xk=a("a"),Tze=o("DeiTConfig"),Mze=o(" (DeiT model)"),Eze=l(),Wf=a("li"),tre=a("strong"),Cze=o("detr"),wze=o(" \u2014 "),$k=a("a"),Aze=o("DetrConfig"),yze=o(" (DETR model)"),Lze=l(),Qf=a("li"),are=a("strong"),xze=o("distilbert"),$ze=o(" \u2014 "),kk=a("a"),kze=o("DistilBertConfig"),Sze=o(" (DistilBERT model)"),Rze=l(),Hf=a("li"),nre=a("strong"),Pze=o("dpr"),Bze=o(" \u2014 "),Sk=a("a"),Ize=o("DPRConfig"),Nze=o(" (DPR model)"),qze=l(),Uf=a("li"),sre=a("strong"),jze=o("dpt"),Dze=o(" \u2014 "),Rk=a("a"),Gze=o("DPTConfig"),Oze=o(" (DPT model)"),Vze=l(),Jf=a("li"),lre=a("strong"),Xze=o("electra"),zze=o(" \u2014 "),Pk=a("a"),Wze=o("ElectraConfig"),Qze=o(" (ELECTRA model)"),Hze=l(),Yf=a("li"),ire=a("strong"),Uze=o("encoder-decoder"),Jze=o(" \u2014 "),Bk=a("a"),Yze=o("EncoderDecoderConfig"),Kze=o(" (Encoder decoder model)"),Zze=l(),Kf=a("li"),dre=a("strong"),eWe=o("flaubert"),oWe=o(" \u2014 "),Ik=a("a"),rWe=o("FlaubertConfig"),tWe=o(" (FlauBERT model)"),aWe=l(),Zf=a("li"),cre=a("strong"),nWe=o("flava"),sWe=o(" \u2014 "),Nk=a("a"),lWe=o("FlavaConfig"),iWe=o(" (Flava model)"),dWe=l(),em=a("li"),fre=a("strong"),cWe=o("fnet"),fWe=o(" \u2014 "),qk=a("a"),mWe=o("FNetConfig"),gWe=o(" (FNet model)"),hWe=l(),om=a("li"),mre=a("strong"),pWe=o("fsmt"),_We=o(" \u2014 "),jk=a("a"),uWe=o("FSMTConfig"),bWe=o(" (FairSeq Machine-Translation model)"),vWe=l(),rm=a("li"),gre=a("strong"),FWe=o("funnel"),TWe=o(" \u2014 "),Dk=a("a"),MWe=o("FunnelConfig"),EWe=o(" (Funnel Transformer model)"),CWe=l(),tm=a("li"),hre=a("strong"),wWe=o("glpn"),AWe=o(" \u2014 "),Gk=a("a"),yWe=o("GLPNConfig"),LWe=o(" (GLPN model)"),xWe=l(),am=a("li"),pre=a("strong"),$We=o("gpt2"),kWe=o(" \u2014 "),Ok=a("a"),SWe=o("GPT2Config"),RWe=o(" (OpenAI GPT-2 model)"),PWe=l(),nm=a("li"),_re=a("strong"),BWe=o("gpt_neo"),IWe=o(" \u2014 "),Vk=a("a"),NWe=o("GPTNeoConfig"),qWe=o(" (GPT Neo model)"),jWe=l(),sm=a("li"),ure=a("strong"),DWe=o("gpt_neox"),GWe=o(" \u2014 "),Xk=a("a"),OWe=o("GPTNeoXConfig"),VWe=o(" (GPT NeoX model)"),XWe=l(),lm=a("li"),bre=a("strong"),zWe=o("gptj"),WWe=o(" \u2014 "),zk=a("a"),QWe=o("GPTJConfig"),HWe=o(" (GPT-J model)"),UWe=l(),im=a("li"),vre=a("strong"),JWe=o("hubert"),YWe=o(" \u2014 "),Wk=a("a"),KWe=o("HubertConfig"),ZWe=o(" (Hubert model)"),eQe=l(),dm=a("li"),Fre=a("strong"),oQe=o("ibert"),rQe=o(" \u2014 "),Qk=a("a"),tQe=o("IBertConfig"),aQe=o(" (I-BERT model)"),nQe=l(),cm=a("li"),Tre=a("strong"),sQe=o("imagegpt"),lQe=o(" \u2014 "),Hk=a("a"),iQe=o("ImageGPTConfig"),dQe=o(" (ImageGPT model)"),cQe=l(),fm=a("li"),Mre=a("strong"),fQe=o("layoutlm"),mQe=o(" \u2014 "),Uk=a("a"),gQe=o("LayoutLMConfig"),hQe=o(" (LayoutLM model)"),pQe=l(),mm=a("li"),Ere=a("strong"),_Qe=o("layoutlmv2"),uQe=o(" \u2014 "),Jk=a("a"),bQe=o("LayoutLMv2Config"),vQe=o(" (LayoutLMv2 model)"),FQe=l(),gm=a("li"),Cre=a("strong"),TQe=o("layoutlmv3"),MQe=o(" \u2014 "),Yk=a("a"),EQe=o("LayoutLMv3Config"),CQe=o(" (LayoutLMv3 model)"),wQe=l(),hm=a("li"),wre=a("strong"),AQe=o("led"),yQe=o(" \u2014 "),Kk=a("a"),LQe=o("LEDConfig"),xQe=o(" (LED model)"),$Qe=l(),pm=a("li"),Are=a("strong"),kQe=o("longformer"),SQe=o(" \u2014 "),Zk=a("a"),RQe=o("LongformerConfig"),PQe=o(" (Longformer model)"),BQe=l(),_m=a("li"),yre=a("strong"),IQe=o("longt5"),NQe=o(" \u2014 "),eS=a("a"),qQe=o("LongT5Config"),jQe=o(" (LongT5 model)"),DQe=l(),um=a("li"),Lre=a("strong"),GQe=o("luke"),OQe=o(" \u2014 "),oS=a("a"),VQe=o("LukeConfig"),XQe=o(" (LUKE model)"),zQe=l(),bm=a("li"),xre=a("strong"),WQe=o("lxmert"),QQe=o(" \u2014 "),rS=a("a"),HQe=o("LxmertConfig"),UQe=o(" (LXMERT model)"),JQe=l(),vm=a("li"),$re=a("strong"),YQe=o("m2m_100"),KQe=o(" \u2014 "),tS=a("a"),ZQe=o("M2M100Config"),eHe=o(" (M2M100 model)"),oHe=l(),Fm=a("li"),kre=a("strong"),rHe=o("marian"),tHe=o(" \u2014 "),aS=a("a"),aHe=o("MarianConfig"),nHe=o(" (Marian model)"),sHe=l(),Tm=a("li"),Sre=a("strong"),lHe=o("maskformer"),iHe=o(" \u2014 "),nS=a("a"),dHe=o("MaskFormerConfig"),cHe=o(" (MaskFormer model)"),fHe=l(),Mm=a("li"),Rre=a("strong"),mHe=o("mbart"),gHe=o(" \u2014 "),sS=a("a"),hHe=o("MBartConfig"),pHe=o(" (mBART model)"),_He=l(),Em=a("li"),Pre=a("strong"),uHe=o("megatron-bert"),bHe=o(" \u2014 "),lS=a("a"),vHe=o("MegatronBertConfig"),FHe=o(" (MegatronBert model)"),THe=l(),Cm=a("li"),Bre=a("strong"),MHe=o("mobilebert"),EHe=o(" \u2014 "),iS=a("a"),CHe=o("MobileBertConfig"),wHe=o(" (MobileBERT model)"),AHe=l(),wm=a("li"),Ire=a("strong"),yHe=o("mpnet"),LHe=o(" \u2014 "),dS=a("a"),xHe=o("MPNetConfig"),$He=o(" (MPNet model)"),kHe=l(),Am=a("li"),Nre=a("strong"),SHe=o("mt5"),RHe=o(" \u2014 "),cS=a("a"),PHe=o("MT5Config"),BHe=o(" (mT5 model)"),IHe=l(),ym=a("li"),qre=a("strong"),NHe=o("nystromformer"),qHe=o(" \u2014 "),fS=a("a"),jHe=o("NystromformerConfig"),DHe=o(" (Nystromformer model)"),GHe=l(),Lm=a("li"),jre=a("strong"),OHe=o("openai-gpt"),VHe=o(" \u2014 "),mS=a("a"),XHe=o("OpenAIGPTConfig"),zHe=o(" (OpenAI GPT model)"),WHe=l(),xm=a("li"),Dre=a("strong"),QHe=o("opt"),HHe=o(" \u2014 "),gS=a("a"),UHe=o("OPTConfig"),JHe=o(" (OPT model)"),YHe=l(),$m=a("li"),Gre=a("strong"),KHe=o("pegasus"),ZHe=o(" \u2014 "),hS=a("a"),eUe=o("PegasusConfig"),oUe=o(" (Pegasus model)"),rUe=l(),km=a("li"),Ore=a("strong"),tUe=o("perceiver"),aUe=o(" \u2014 "),pS=a("a"),nUe=o("PerceiverConfig"),sUe=o(" (Perceiver model)"),lUe=l(),Sm=a("li"),Vre=a("strong"),iUe=o("plbart"),dUe=o(" \u2014 "),_S=a("a"),cUe=o("PLBartConfig"),fUe=o(" (PLBart model)"),mUe=l(),Rm=a("li"),Xre=a("strong"),gUe=o("poolformer"),hUe=o(" \u2014 "),uS=a("a"),pUe=o("PoolFormerConfig"),_Ue=o(" (PoolFormer model)"),uUe=l(),Pm=a("li"),zre=a("strong"),bUe=o("prophetnet"),vUe=o(" \u2014 "),bS=a("a"),FUe=o("ProphetNetConfig"),TUe=o(" (ProphetNet model)"),MUe=l(),Bm=a("li"),Wre=a("strong"),EUe=o("qdqbert"),CUe=o(" \u2014 "),vS=a("a"),wUe=o("QDQBertConfig"),AUe=o(" (QDQBert model)"),yUe=l(),Im=a("li"),Qre=a("strong"),LUe=o("rag"),xUe=o(" \u2014 "),FS=a("a"),$Ue=o("RagConfig"),kUe=o(" (RAG model)"),SUe=l(),Nm=a("li"),Hre=a("strong"),RUe=o("realm"),PUe=o(" \u2014 "),TS=a("a"),BUe=o("RealmConfig"),IUe=o(" (Realm model)"),NUe=l(),qm=a("li"),Ure=a("strong"),qUe=o("reformer"),jUe=o(" \u2014 "),MS=a("a"),DUe=o("ReformerConfig"),GUe=o(" (Reformer model)"),OUe=l(),jm=a("li"),Jre=a("strong"),VUe=o("regnet"),XUe=o(" \u2014 "),ES=a("a"),zUe=o("RegNetConfig"),WUe=o(" (RegNet model)"),QUe=l(),Dm=a("li"),Yre=a("strong"),HUe=o("rembert"),UUe=o(" \u2014 "),CS=a("a"),JUe=o("RemBertConfig"),YUe=o(" (RemBERT model)"),KUe=l(),Gm=a("li"),Kre=a("strong"),ZUe=o("resnet"),eJe=o(" \u2014 "),wS=a("a"),oJe=o("ResNetConfig"),rJe=o(" (ResNet model)"),tJe=l(),Om=a("li"),Zre=a("strong"),aJe=o("retribert"),nJe=o(" \u2014 "),AS=a("a"),sJe=o("RetriBertConfig"),lJe=o(" (RetriBERT model)"),iJe=l(),Vm=a("li"),ete=a("strong"),dJe=o("roberta"),cJe=o(" \u2014 "),yS=a("a"),fJe=o("RobertaConfig"),mJe=o(" (RoBERTa model)"),gJe=l(),Xm=a("li"),ote=a("strong"),hJe=o("roformer"),pJe=o(" \u2014 "),LS=a("a"),_Je=o("RoFormerConfig"),uJe=o(" (RoFormer model)"),bJe=l(),zm=a("li"),rte=a("strong"),vJe=o("segformer"),FJe=o(" \u2014 "),xS=a("a"),TJe=o("SegformerConfig"),MJe=o(" (SegFormer model)"),EJe=l(),Wm=a("li"),tte=a("strong"),CJe=o("sew"),wJe=o(" \u2014 "),$S=a("a"),AJe=o("SEWConfig"),yJe=o(" (SEW model)"),LJe=l(),Qm=a("li"),ate=a("strong"),xJe=o("sew-d"),$Je=o(" \u2014 "),kS=a("a"),kJe=o("SEWDConfig"),SJe=o(" (SEW-D model)"),RJe=l(),Hm=a("li"),nte=a("strong"),PJe=o("speech-encoder-decoder"),BJe=o(" \u2014 "),SS=a("a"),IJe=o("SpeechEncoderDecoderConfig"),NJe=o(" (Speech Encoder decoder model)"),qJe=l(),Um=a("li"),ste=a("strong"),jJe=o("speech_to_text"),DJe=o(" \u2014 "),RS=a("a"),GJe=o("Speech2TextConfig"),OJe=o(" (Speech2Text model)"),VJe=l(),Jm=a("li"),lte=a("strong"),XJe=o("speech_to_text_2"),zJe=o(" \u2014 "),PS=a("a"),WJe=o("Speech2Text2Config"),QJe=o(" (Speech2Text2 model)"),HJe=l(),Ym=a("li"),ite=a("strong"),UJe=o("splinter"),JJe=o(" \u2014 "),BS=a("a"),YJe=o("SplinterConfig"),KJe=o(" (Splinter model)"),ZJe=l(),Km=a("li"),dte=a("strong"),eYe=o("squeezebert"),oYe=o(" \u2014 "),IS=a("a"),rYe=o("SqueezeBertConfig"),tYe=o(" (SqueezeBERT model)"),aYe=l(),Zm=a("li"),cte=a("strong"),nYe=o("swin"),sYe=o(" \u2014 "),NS=a("a"),lYe=o("SwinConfig"),iYe=o(" (Swin model)"),dYe=l(),eg=a("li"),fte=a("strong"),cYe=o("t5"),fYe=o(" \u2014 "),qS=a("a"),mYe=o("T5Config"),gYe=o(" (T5 model)"),hYe=l(),og=a("li"),mte=a("strong"),pYe=o("tapas"),_Ye=o(" \u2014 "),jS=a("a"),uYe=o("TapasConfig"),bYe=o(" (TAPAS model)"),vYe=l(),rg=a("li"),gte=a("strong"),FYe=o("trajectory_transformer"),TYe=o(" \u2014 "),DS=a("a"),MYe=o("TrajectoryTransformerConfig"),EYe=o(" (Trajectory Transformer model)"),CYe=l(),tg=a("li"),hte=a("strong"),wYe=o("transfo-xl"),AYe=o(" \u2014 "),GS=a("a"),yYe=o("TransfoXLConfig"),LYe=o(" (Transformer-XL model)"),xYe=l(),ag=a("li"),pte=a("strong"),$Ye=o("trocr"),kYe=o(" \u2014 "),OS=a("a"),SYe=o("TrOCRConfig"),RYe=o(" (TrOCR model)"),PYe=l(),ng=a("li"),_te=a("strong"),BYe=o("unispeech"),IYe=o(" \u2014 "),VS=a("a"),NYe=o("UniSpeechConfig"),qYe=o(" (UniSpeech model)"),jYe=l(),sg=a("li"),ute=a("strong"),DYe=o("unispeech-sat"),GYe=o(" \u2014 "),XS=a("a"),OYe=o("UniSpeechSatConfig"),VYe=o(" (UniSpeechSat model)"),XYe=l(),lg=a("li"),bte=a("strong"),zYe=o("van"),WYe=o(" \u2014 "),zS=a("a"),QYe=o("VanConfig"),HYe=o(" (VAN model)"),UYe=l(),ig=a("li"),vte=a("strong"),JYe=o("vilt"),YYe=o(" \u2014 "),WS=a("a"),KYe=o("ViltConfig"),ZYe=o(" (ViLT model)"),eKe=l(),dg=a("li"),Fte=a("strong"),oKe=o("vision-encoder-decoder"),rKe=o(" \u2014 "),QS=a("a"),tKe=o("VisionEncoderDecoderConfig"),aKe=o(" (Vision Encoder decoder model)"),nKe=l(),cg=a("li"),Tte=a("strong"),sKe=o("vision-text-dual-encoder"),lKe=o(" \u2014 "),HS=a("a"),iKe=o("VisionTextDualEncoderConfig"),dKe=o(" (VisionTextDualEncoder model)"),cKe=l(),fg=a("li"),Mte=a("strong"),fKe=o("visual_bert"),mKe=o(" \u2014 "),US=a("a"),gKe=o("VisualBertConfig"),hKe=o(" (VisualBert model)"),pKe=l(),mg=a("li"),Ete=a("strong"),_Ke=o("vit"),uKe=o(" \u2014 "),JS=a("a"),bKe=o("ViTConfig"),vKe=o(" (ViT model)"),FKe=l(),gg=a("li"),Cte=a("strong"),TKe=o("vit_mae"),MKe=o(" \u2014 "),YS=a("a"),EKe=o("ViTMAEConfig"),CKe=o(" (ViTMAE model)"),wKe=l(),hg=a("li"),wte=a("strong"),AKe=o("wav2vec2"),yKe=o(" \u2014 "),KS=a("a"),LKe=o("Wav2Vec2Config"),xKe=o(" (Wav2Vec2 model)"),$Ke=l(),pg=a("li"),Ate=a("strong"),kKe=o("wav2vec2-conformer"),SKe=o(" \u2014 "),ZS=a("a"),RKe=o("Wav2Vec2ConformerConfig"),PKe=o(" (Wav2Vec2-Conformer model)"),BKe=l(),_g=a("li"),yte=a("strong"),IKe=o("wavlm"),NKe=o(" \u2014 "),eR=a("a"),qKe=o("WavLMConfig"),jKe=o(" (WavLM model)"),DKe=l(),ug=a("li"),Lte=a("strong"),GKe=o("xglm"),OKe=o(" \u2014 "),oR=a("a"),VKe=o("XGLMConfig"),XKe=o(" (XGLM model)"),zKe=l(),bg=a("li"),xte=a("strong"),WKe=o("xlm"),QKe=o(" \u2014 "),rR=a("a"),HKe=o("XLMConfig"),UKe=o(" (XLM model)"),JKe=l(),vg=a("li"),$te=a("strong"),YKe=o("xlm-prophetnet"),KKe=o(" \u2014 "),tR=a("a"),ZKe=o("XLMProphetNetConfig"),eZe=o(" (XLMProphetNet model)"),oZe=l(),Fg=a("li"),kte=a("strong"),rZe=o("xlm-roberta"),tZe=o(" \u2014 "),aR=a("a"),aZe=o("XLMRobertaConfig"),nZe=o(" (XLM-RoBERTa model)"),sZe=l(),Tg=a("li"),Ste=a("strong"),lZe=o("xlm-roberta-xl"),iZe=o(" \u2014 "),nR=a("a"),dZe=o("XLMRobertaXLConfig"),cZe=o(" (XLM-RoBERTa-XL model)"),fZe=l(),Mg=a("li"),Rte=a("strong"),mZe=o("xlnet"),gZe=o(" \u2014 "),sR=a("a"),hZe=o("XLNetConfig"),pZe=o(" (XLNet model)"),_Ze=l(),Eg=a("li"),Pte=a("strong"),uZe=o("yolos"),bZe=o(" \u2014 "),lR=a("a"),vZe=o("YolosConfig"),FZe=o(" (YOLOS model)"),TZe=l(),Cg=a("li"),Bte=a("strong"),MZe=o("yoso"),EZe=o(" \u2014 "),iR=a("a"),CZe=o("YosoConfig"),wZe=o(" (YOSO model)"),AZe=l(),F(wg.$$.fragment),yZe=l(),Ag=a("div"),F(Ow.$$.fragment),LZe=l(),Ite=a("p"),xZe=o("Register a new configuration for this class."),qqe=l(),Mi=a("h2"),yg=a("a"),Nte=a("span"),F(Vw.$$.fragment),$Ze=l(),qte=a("span"),kZe=o("AutoTokenizer"),jqe=l(),wo=a("div"),F(Xw.$$.fragment),SZe=l(),zw=a("p"),RZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=a("a"),PZe=o("AutoTokenizer.from_pretrained()"),BZe=o(" class method."),IZe=l(),Ww=a("p"),NZe=o("This class cannot be instantiated directly using "),jte=a("code"),qZe=o("__init__()"),jZe=o(" (throws an error)."),DZe=l(),Cr=a("div"),F(Qw.$$.fragment),GZe=l(),Dte=a("p"),OZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VZe=l(),Aa=a("p"),XZe=o("The tokenizer class to instantiate is selected based on the "),Gte=a("code"),zZe=o("model_type"),WZe=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),QZe=o("pretrained_model_name_or_path"),HZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),UZe=o("pretrained_model_name_or_path"),JZe=o(":"),YZe=l(),k=a("ul"),Sn=a("li"),Xte=a("strong"),KZe=o("albert"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("AlbertTokenizer"),oeo=o(" or "),fR=a("a"),reo=o("AlbertTokenizerFast"),teo=o(" (ALBERT model)"),aeo=l(),Rn=a("li"),zte=a("strong"),neo=o("bart"),seo=o(" \u2014 "),mR=a("a"),leo=o("BartTokenizer"),ieo=o(" or "),gR=a("a"),deo=o("BartTokenizerFast"),ceo=o(" (BART model)"),feo=l(),Pn=a("li"),Wte=a("strong"),meo=o("barthez"),geo=o(" \u2014 "),hR=a("a"),heo=o("BarthezTokenizer"),peo=o(" or "),pR=a("a"),_eo=o("BarthezTokenizerFast"),ueo=o(" (BARThez model)"),beo=l(),Lg=a("li"),Qte=a("strong"),veo=o("bartpho"),Feo=o(" \u2014 "),_R=a("a"),Teo=o("BartphoTokenizer"),Meo=o(" (BARTpho model)"),Eeo=l(),Bn=a("li"),Hte=a("strong"),Ceo=o("bert"),weo=o(" \u2014 "),uR=a("a"),Aeo=o("BertTokenizer"),yeo=o(" or "),bR=a("a"),Leo=o("BertTokenizerFast"),xeo=o(" (BERT model)"),$eo=l(),xg=a("li"),Ute=a("strong"),keo=o("bert-generation"),Seo=o(" \u2014 "),vR=a("a"),Reo=o("BertGenerationTokenizer"),Peo=o(" (Bert Generation model)"),Beo=l(),$g=a("li"),Jte=a("strong"),Ieo=o("bert-japanese"),Neo=o(" \u2014 "),FR=a("a"),qeo=o("BertJapaneseTokenizer"),jeo=o(" (BertJapanese model)"),Deo=l(),kg=a("li"),Yte=a("strong"),Geo=o("bertweet"),Oeo=o(" \u2014 "),TR=a("a"),Veo=o("BertweetTokenizer"),Xeo=o(" (Bertweet model)"),zeo=l(),In=a("li"),Kte=a("strong"),Weo=o("big_bird"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("BigBirdTokenizer"),Ueo=o(" or "),ER=a("a"),Jeo=o("BigBirdTokenizerFast"),Yeo=o(" (BigBird model)"),Keo=l(),Nn=a("li"),Zte=a("strong"),Zeo=o("bigbird_pegasus"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("PegasusTokenizer"),roo=o(" or "),wR=a("a"),too=o("PegasusTokenizerFast"),aoo=o(" (BigBirdPegasus model)"),noo=l(),qn=a("li"),eae=a("strong"),soo=o("blenderbot"),loo=o(" \u2014 "),AR=a("a"),ioo=o("BlenderbotTokenizer"),doo=o(" or "),yR=a("a"),coo=o("BlenderbotTokenizerFast"),foo=o(" (Blenderbot model)"),moo=l(),Sg=a("li"),oae=a("strong"),goo=o("blenderbot-small"),hoo=o(" \u2014 "),LR=a("a"),poo=o("BlenderbotSmallTokenizer"),_oo=o(" (BlenderbotSmall model)"),uoo=l(),Rg=a("li"),rae=a("strong"),boo=o("byt5"),voo=o(" \u2014 "),xR=a("a"),Foo=o("ByT5Tokenizer"),Too=o(" (ByT5 model)"),Moo=l(),jn=a("li"),tae=a("strong"),Eoo=o("camembert"),Coo=o(" \u2014 "),$R=a("a"),woo=o("CamembertTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("CamembertTokenizerFast"),Loo=o(" (CamemBERT model)"),xoo=l(),Pg=a("li"),aae=a("strong"),$oo=o("canine"),koo=o(" \u2014 "),SR=a("a"),Soo=o("CanineTokenizer"),Roo=o(" (Canine model)"),Poo=l(),Dn=a("li"),nae=a("strong"),Boo=o("clip"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("CLIPTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("CLIPTokenizerFast"),Doo=o(" (CLIP model)"),Goo=l(),Gn=a("li"),sae=a("strong"),Ooo=o("convbert"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("ConvBertTokenizer"),zoo=o(" or "),IR=a("a"),Woo=o("ConvBertTokenizerFast"),Qoo=o(" (ConvBERT model)"),Hoo=l(),On=a("li"),lae=a("strong"),Uoo=o("cpm"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("CpmTokenizer"),Koo=o(" or "),qR=a("a"),Zoo=o("CpmTokenizerFast"),ero=o(" (CPM model)"),oro=l(),Bg=a("li"),iae=a("strong"),rro=o("ctrl"),tro=o(" \u2014 "),jR=a("a"),aro=o("CTRLTokenizer"),nro=o(" (CTRL model)"),sro=l(),Vn=a("li"),dae=a("strong"),lro=o("data2vec-text"),iro=o(" \u2014 "),DR=a("a"),dro=o("RobertaTokenizer"),cro=o(" or "),GR=a("a"),fro=o("RobertaTokenizerFast"),mro=o(" (Data2VecText model)"),gro=l(),Xn=a("li"),cae=a("strong"),hro=o("deberta"),pro=o(" \u2014 "),OR=a("a"),_ro=o("DebertaTokenizer"),uro=o(" or "),VR=a("a"),bro=o("DebertaTokenizerFast"),vro=o(" (DeBERTa model)"),Fro=l(),zn=a("li"),fae=a("strong"),Tro=o("deberta-v2"),Mro=o(" \u2014 "),XR=a("a"),Ero=o("DebertaV2Tokenizer"),Cro=o(" or "),zR=a("a"),wro=o("DebertaV2TokenizerFast"),Aro=o(" (DeBERTa-v2 model)"),yro=l(),Wn=a("li"),mae=a("strong"),Lro=o("distilbert"),xro=o(" \u2014 "),WR=a("a"),$ro=o("DistilBertTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("DistilBertTokenizerFast"),Rro=o(" (DistilBERT model)"),Pro=l(),Qn=a("li"),gae=a("strong"),Bro=o("dpr"),Iro=o(" \u2014 "),HR=a("a"),Nro=o("DPRQuestionEncoderTokenizer"),qro=o(" or "),UR=a("a"),jro=o("DPRQuestionEncoderTokenizerFast"),Dro=o(" (DPR model)"),Gro=l(),Hn=a("li"),hae=a("strong"),Oro=o("electra"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("ElectraTokenizer"),zro=o(" or "),YR=a("a"),Wro=o("ElectraTokenizerFast"),Qro=o(" (ELECTRA model)"),Hro=l(),Ig=a("li"),pae=a("strong"),Uro=o("flaubert"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("FlaubertTokenizer"),Kro=o(" (FlauBERT model)"),Zro=l(),Un=a("li"),_ae=a("strong"),eto=o("fnet"),oto=o(" \u2014 "),ZR=a("a"),rto=o("FNetTokenizer"),tto=o(" or "),eP=a("a"),ato=o("FNetTokenizerFast"),nto=o(" (FNet model)"),sto=l(),Ng=a("li"),uae=a("strong"),lto=o("fsmt"),ito=o(" \u2014 "),oP=a("a"),dto=o("FSMTTokenizer"),cto=o(" (FairSeq Machine-Translation model)"),fto=l(),Jn=a("li"),bae=a("strong"),mto=o("funnel"),gto=o(" \u2014 "),rP=a("a"),hto=o("FunnelTokenizer"),pto=o(" or "),tP=a("a"),_to=o("FunnelTokenizerFast"),uto=o(" (Funnel Transformer model)"),bto=l(),Yn=a("li"),vae=a("strong"),vto=o("gpt2"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("GPT2Tokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("GPT2TokenizerFast"),Cto=o(" (OpenAI GPT-2 model)"),wto=l(),Kn=a("li"),Fae=a("strong"),Ato=o("gpt_neo"),yto=o(" \u2014 "),sP=a("a"),Lto=o("GPT2Tokenizer"),xto=o(" or "),lP=a("a"),$to=o("GPT2TokenizerFast"),kto=o(" (GPT Neo model)"),Sto=l(),qg=a("li"),Tae=a("strong"),Rto=o("gpt_neox"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("GPTNeoXTokenizerFast"),Ito=o(" (GPT NeoX model)"),Nto=l(),Zn=a("li"),Mae=a("strong"),qto=o("gptj"),jto=o(" \u2014 "),dP=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" or "),cP=a("a"),Oto=o("GPT2TokenizerFast"),Vto=o(" (GPT-J model)"),Xto=l(),es=a("li"),Eae=a("strong"),zto=o("herbert"),Wto=o(" \u2014 "),fP=a("a"),Qto=o("HerbertTokenizer"),Hto=o(" or "),mP=a("a"),Uto=o("HerbertTokenizerFast"),Jto=o(" (HerBERT model)"),Yto=l(),jg=a("li"),Cae=a("strong"),Kto=o("hubert"),Zto=o(" \u2014 "),gP=a("a"),eao=o("Wav2Vec2CTCTokenizer"),oao=o(" (Hubert model)"),rao=l(),os=a("li"),wae=a("strong"),tao=o("ibert"),aao=o(" \u2014 "),hP=a("a"),nao=o("RobertaTokenizer"),sao=o(" or "),pP=a("a"),lao=o("RobertaTokenizerFast"),iao=o(" (I-BERT model)"),dao=l(),rs=a("li"),Aae=a("strong"),cao=o("layoutlm"),fao=o(" \u2014 "),_P=a("a"),mao=o("LayoutLMTokenizer"),gao=o(" or "),uP=a("a"),hao=o("LayoutLMTokenizerFast"),pao=o(" (LayoutLM model)"),_ao=l(),ts=a("li"),yae=a("strong"),uao=o("layoutlmv2"),bao=o(" \u2014 "),bP=a("a"),vao=o("LayoutLMv2Tokenizer"),Fao=o(" or "),vP=a("a"),Tao=o("LayoutLMv2TokenizerFast"),Mao=o(" (LayoutLMv2 model)"),Eao=l(),as=a("li"),Lae=a("strong"),Cao=o("layoutlmv3"),wao=o(" \u2014 "),FP=a("a"),Aao=o("LayoutLMv3Tokenizer"),yao=o(" or "),TP=a("a"),Lao=o("LayoutLMv3TokenizerFast"),xao=o(" (LayoutLMv3 model)"),$ao=l(),ns=a("li"),xae=a("strong"),kao=o("layoutxlm"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("LayoutXLMTokenizer"),Pao=o(" or "),EP=a("a"),Bao=o("LayoutXLMTokenizerFast"),Iao=o(" (LayoutXLM model)"),Nao=l(),ss=a("li"),$ae=a("strong"),qao=o("led"),jao=o(" \u2014 "),CP=a("a"),Dao=o("LEDTokenizer"),Gao=o(" or "),wP=a("a"),Oao=o("LEDTokenizerFast"),Vao=o(" (LED model)"),Xao=l(),ls=a("li"),kae=a("strong"),zao=o("longformer"),Wao=o(" \u2014 "),AP=a("a"),Qao=o("LongformerTokenizer"),Hao=o(" or "),yP=a("a"),Uao=o("LongformerTokenizerFast"),Jao=o(" (Longformer model)"),Yao=l(),is=a("li"),Sae=a("strong"),Kao=o("longt5"),Zao=o(" \u2014 "),LP=a("a"),eno=o("T5Tokenizer"),ono=o(" or "),xP=a("a"),rno=o("T5TokenizerFast"),tno=o(" (LongT5 model)"),ano=l(),Dg=a("li"),Rae=a("strong"),nno=o("luke"),sno=o(" \u2014 "),$P=a("a"),lno=o("LukeTokenizer"),ino=o(" (LUKE model)"),dno=l(),ds=a("li"),Pae=a("strong"),cno=o("lxmert"),fno=o(" \u2014 "),kP=a("a"),mno=o("LxmertTokenizer"),gno=o(" or "),SP=a("a"),hno=o("LxmertTokenizerFast"),pno=o(" (LXMERT model)"),_no=l(),Gg=a("li"),Bae=a("strong"),uno=o("m2m_100"),bno=o(" \u2014 "),RP=a("a"),vno=o("M2M100Tokenizer"),Fno=o(" (M2M100 model)"),Tno=l(),Og=a("li"),Iae=a("strong"),Mno=o("marian"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MarianTokenizer"),wno=o(" (Marian model)"),Ano=l(),cs=a("li"),Nae=a("strong"),yno=o("mbart"),Lno=o(" \u2014 "),BP=a("a"),xno=o("MBartTokenizer"),$no=o(" or "),IP=a("a"),kno=o("MBartTokenizerFast"),Sno=o(" (mBART model)"),Rno=l(),fs=a("li"),qae=a("strong"),Pno=o("mbart50"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("MBart50Tokenizer"),Nno=o(" or "),qP=a("a"),qno=o("MBart50TokenizerFast"),jno=o(" (mBART-50 model)"),Dno=l(),ms=a("li"),jae=a("strong"),Gno=o("megatron-bert"),Ono=o(" \u2014 "),jP=a("a"),Vno=o("BertTokenizer"),Xno=o(" or "),DP=a("a"),zno=o("BertTokenizerFast"),Wno=o(" (MegatronBert model)"),Qno=l(),Vg=a("li"),Dae=a("strong"),Hno=o("mluke"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("MLukeTokenizer"),Yno=o(" (mLUKE model)"),Kno=l(),gs=a("li"),Gae=a("strong"),Zno=o("mobilebert"),eso=o(" \u2014 "),OP=a("a"),oso=o("MobileBertTokenizer"),rso=o(" or "),VP=a("a"),tso=o("MobileBertTokenizerFast"),aso=o(" (MobileBERT model)"),nso=l(),hs=a("li"),Oae=a("strong"),sso=o("mpnet"),lso=o(" \u2014 "),XP=a("a"),iso=o("MPNetTokenizer"),dso=o(" or "),zP=a("a"),cso=o("MPNetTokenizerFast"),fso=o(" (MPNet model)"),mso=l(),ps=a("li"),Vae=a("strong"),gso=o("mt5"),hso=o(" \u2014 "),WP=a("a"),pso=o("MT5Tokenizer"),_so=o(" or "),QP=a("a"),uso=o("MT5TokenizerFast"),bso=o(" (mT5 model)"),vso=l(),_s=a("li"),Xae=a("strong"),Fso=o("nystromformer"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("AlbertTokenizer"),Eso=o(" or "),UP=a("a"),Cso=o("AlbertTokenizerFast"),wso=o(" (Nystromformer model)"),Aso=l(),us=a("li"),zae=a("strong"),yso=o("openai-gpt"),Lso=o(" \u2014 "),JP=a("a"),xso=o("OpenAIGPTTokenizer"),$so=o(" or "),YP=a("a"),kso=o("OpenAIGPTTokenizerFast"),Sso=o(" (OpenAI GPT model)"),Rso=l(),Xg=a("li"),Wae=a("strong"),Pso=o("opt"),Bso=o(" \u2014 "),KP=a("a"),Iso=o("GPT2Tokenizer"),Nso=o(" (OPT model)"),qso=l(),bs=a("li"),Qae=a("strong"),jso=o("pegasus"),Dso=o(" \u2014 "),ZP=a("a"),Gso=o("PegasusTokenizer"),Oso=o(" or "),eB=a("a"),Vso=o("PegasusTokenizerFast"),Xso=o(" (Pegasus model)"),zso=l(),zg=a("li"),Hae=a("strong"),Wso=o("perceiver"),Qso=o(" \u2014 "),oB=a("a"),Hso=o("PerceiverTokenizer"),Uso=o(" (Perceiver model)"),Jso=l(),Wg=a("li"),Uae=a("strong"),Yso=o("phobert"),Kso=o(" \u2014 "),rB=a("a"),Zso=o("PhobertTokenizer"),elo=o(" (PhoBERT model)"),olo=l(),Qg=a("li"),Jae=a("strong"),rlo=o("plbart"),tlo=o(" \u2014 "),tB=a("a"),alo=o("PLBartTokenizer"),nlo=o(" (PLBart model)"),slo=l(),Hg=a("li"),Yae=a("strong"),llo=o("prophetnet"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("ProphetNetTokenizer"),clo=o(" (ProphetNet model)"),flo=l(),vs=a("li"),Kae=a("strong"),mlo=o("qdqbert"),glo=o(" \u2014 "),nB=a("a"),hlo=o("BertTokenizer"),plo=o(" or "),sB=a("a"),_lo=o("BertTokenizerFast"),ulo=o(" (QDQBert model)"),blo=l(),Ug=a("li"),Zae=a("strong"),vlo=o("rag"),Flo=o(" \u2014 "),lB=a("a"),Tlo=o("RagTokenizer"),Mlo=o(" (RAG model)"),Elo=l(),Fs=a("li"),ene=a("strong"),Clo=o("realm"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("RealmTokenizer"),ylo=o(" or "),dB=a("a"),Llo=o("RealmTokenizerFast"),xlo=o(" (Realm model)"),$lo=l(),Ts=a("li"),one=a("strong"),klo=o("reformer"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("ReformerTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("ReformerTokenizerFast"),Ilo=o(" (Reformer model)"),Nlo=l(),Ms=a("li"),rne=a("strong"),qlo=o("rembert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("RemBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("RemBertTokenizerFast"),Vlo=o(" (RemBERT model)"),Xlo=l(),Es=a("li"),tne=a("strong"),zlo=o("retribert"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("RetriBertTokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("RetriBertTokenizerFast"),Jlo=o(" (RetriBERT model)"),Ylo=l(),Cs=a("li"),ane=a("strong"),Klo=o("roberta"),Zlo=o(" \u2014 "),_B=a("a"),eio=o("RobertaTokenizer"),oio=o(" or "),uB=a("a"),rio=o("RobertaTokenizerFast"),tio=o(" (RoBERTa model)"),aio=l(),ws=a("li"),nne=a("strong"),nio=o("roformer"),sio=o(" \u2014 "),bB=a("a"),lio=o("RoFormerTokenizer"),iio=o(" or "),vB=a("a"),dio=o("RoFormerTokenizerFast"),cio=o(" (RoFormer model)"),fio=l(),Jg=a("li"),sne=a("strong"),mio=o("speech_to_text"),gio=o(" \u2014 "),FB=a("a"),hio=o("Speech2TextTokenizer"),pio=o(" (Speech2Text model)"),_io=l(),Yg=a("li"),lne=a("strong"),uio=o("speech_to_text_2"),bio=o(" \u2014 "),TB=a("a"),vio=o("Speech2Text2Tokenizer"),Fio=o(" (Speech2Text2 model)"),Tio=l(),As=a("li"),ine=a("strong"),Mio=o("splinter"),Eio=o(" \u2014 "),MB=a("a"),Cio=o("SplinterTokenizer"),wio=o(" or "),EB=a("a"),Aio=o("SplinterTokenizerFast"),yio=o(" (Splinter model)"),Lio=l(),ys=a("li"),dne=a("strong"),xio=o("squeezebert"),$io=o(" \u2014 "),CB=a("a"),kio=o("SqueezeBertTokenizer"),Sio=o(" or "),wB=a("a"),Rio=o("SqueezeBertTokenizerFast"),Pio=o(" (SqueezeBERT model)"),Bio=l(),Ls=a("li"),cne=a("strong"),Iio=o("t5"),Nio=o(" \u2014 "),AB=a("a"),qio=o("T5Tokenizer"),jio=o(" or "),yB=a("a"),Dio=o("T5TokenizerFast"),Gio=o(" (T5 model)"),Oio=l(),Kg=a("li"),fne=a("strong"),Vio=o("tapas"),Xio=o(" \u2014 "),LB=a("a"),zio=o("TapasTokenizer"),Wio=o(" (TAPAS model)"),Qio=l(),Zg=a("li"),mne=a("strong"),Hio=o("tapex"),Uio=o(" \u2014 "),xB=a("a"),Jio=o("TapexTokenizer"),Yio=o(" (TAPEX model)"),Kio=l(),eh=a("li"),gne=a("strong"),Zio=o("transfo-xl"),edo=o(" \u2014 "),$B=a("a"),odo=o("TransfoXLTokenizer"),rdo=o(" (Transformer-XL model)"),tdo=l(),xs=a("li"),hne=a("strong"),ado=o("visual_bert"),ndo=o(" \u2014 "),kB=a("a"),sdo=o("BertTokenizer"),ldo=o(" or "),SB=a("a"),ido=o("BertTokenizerFast"),ddo=o(" (VisualBert model)"),cdo=l(),oh=a("li"),pne=a("strong"),fdo=o("wav2vec2"),mdo=o(" \u2014 "),RB=a("a"),gdo=o("Wav2Vec2CTCTokenizer"),hdo=o(" (Wav2Vec2 model)"),pdo=l(),rh=a("li"),_ne=a("strong"),_do=o("wav2vec2-conformer"),udo=o(" \u2014 "),PB=a("a"),bdo=o("Wav2Vec2CTCTokenizer"),vdo=o(" (Wav2Vec2-Conformer model)"),Fdo=l(),th=a("li"),une=a("strong"),Tdo=o("wav2vec2_phoneme"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("Wav2Vec2PhonemeCTCTokenizer"),Cdo=o(" (Wav2Vec2Phoneme model)"),wdo=l(),$s=a("li"),bne=a("strong"),Ado=o("xglm"),ydo=o(" \u2014 "),IB=a("a"),Ldo=o("XGLMTokenizer"),xdo=o(" or "),NB=a("a"),$do=o("XGLMTokenizerFast"),kdo=o(" (XGLM model)"),Sdo=l(),ah=a("li"),vne=a("strong"),Rdo=o("xlm"),Pdo=o(" \u2014 "),qB=a("a"),Bdo=o("XLMTokenizer"),Ido=o(" (XLM model)"),Ndo=l(),nh=a("li"),Fne=a("strong"),qdo=o("xlm-prophetnet"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("XLMProphetNetTokenizer"),Gdo=o(" (XLMProphetNet model)"),Odo=l(),ks=a("li"),Tne=a("strong"),Vdo=o("xlm-roberta"),Xdo=o(" \u2014 "),DB=a("a"),zdo=o("XLMRobertaTokenizer"),Wdo=o(" or "),GB=a("a"),Qdo=o("XLMRobertaTokenizerFast"),Hdo=o(" (XLM-RoBERTa model)"),Udo=l(),Ss=a("li"),Mne=a("strong"),Jdo=o("xlm-roberta-xl"),Ydo=o(" \u2014 "),OB=a("a"),Kdo=o("RobertaTokenizer"),Zdo=o(" or "),VB=a("a"),eco=o("RobertaTokenizerFast"),oco=o(" (XLM-RoBERTa-XL model)"),rco=l(),Rs=a("li"),Ene=a("strong"),tco=o("xlnet"),aco=o(" \u2014 "),XB=a("a"),nco=o("XLNetTokenizer"),sco=o(" or "),zB=a("a"),lco=o("XLNetTokenizerFast"),ico=o(" (XLNet model)"),dco=l(),Ps=a("li"),Cne=a("strong"),cco=o("yoso"),fco=o(" \u2014 "),WB=a("a"),mco=o("AlbertTokenizer"),gco=o(" or "),QB=a("a"),hco=o("AlbertTokenizerFast"),pco=o(" (YOSO model)"),_co=l(),F(sh.$$.fragment),uco=l(),lh=a("div"),F(Hw.$$.fragment),bco=l(),wne=a("p"),vco=o("Register a new tokenizer in this mapping."),Dqe=l(),Ei=a("h2"),ih=a("a"),Ane=a("span"),F(Uw.$$.fragment),Fco=l(),yne=a("span"),Tco=o("AutoFeatureExtractor"),Gqe=l(),Ao=a("div"),F(Jw.$$.fragment),Mco=l(),Yw=a("p"),Eco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=a("a"),Cco=o("AutoFeatureExtractor.from_pretrained()"),wco=o(" class method."),Aco=l(),Kw=a("p"),yco=o("This class cannot be instantiated directly using "),Lne=a("code"),Lco=o("__init__()"),xco=o(" (throws an error)."),$co=l(),He=a("div"),F(Zw.$$.fragment),kco=l(),xne=a("p"),Sco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rco=l(),ya=a("p"),Pco=o("The feature extractor class to instantiate is selected based on the "),$ne=a("code"),Bco=o("model_type"),Ico=o(` property of the config object
(either passed as an argument or loaded from `),kne=a("code"),Nco=o("pretrained_model_name_or_path"),qco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(":"),Gco=l(),Y=a("ul"),dh=a("li"),Rne=a("strong"),Oco=o("beit"),Vco=o(" \u2014 "),UB=a("a"),Xco=o("BeitFeatureExtractor"),zco=o(" (BEiT model)"),Wco=l(),ch=a("li"),Pne=a("strong"),Qco=o("clip"),Hco=o(" \u2014 "),JB=a("a"),Uco=o("CLIPFeatureExtractor"),Jco=o(" (CLIP model)"),Yco=l(),fh=a("li"),Bne=a("strong"),Kco=o("convnext"),Zco=o(" \u2014 "),YB=a("a"),efo=o("ConvNextFeatureExtractor"),ofo=o(" (ConvNext model)"),rfo=l(),mh=a("li"),Ine=a("strong"),tfo=o("cvt"),afo=o(" \u2014 "),KB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (CvT model)"),lfo=l(),gh=a("li"),Nne=a("strong"),ifo=o("data2vec-audio"),dfo=o(" \u2014 "),ZB=a("a"),cfo=o("Wav2Vec2FeatureExtractor"),ffo=o(" (Data2VecAudio model)"),mfo=l(),hh=a("li"),qne=a("strong"),gfo=o("data2vec-vision"),hfo=o(" \u2014 "),eI=a("a"),pfo=o("BeitFeatureExtractor"),_fo=o(" (Data2VecVision model)"),ufo=l(),ph=a("li"),jne=a("strong"),bfo=o("deit"),vfo=o(" \u2014 "),oI=a("a"),Ffo=o("DeiTFeatureExtractor"),Tfo=o(" (DeiT model)"),Mfo=l(),_h=a("li"),Dne=a("strong"),Efo=o("detr"),Cfo=o(" \u2014 "),rI=a("a"),wfo=o("DetrFeatureExtractor"),Afo=o(" (DETR model)"),yfo=l(),uh=a("li"),Gne=a("strong"),Lfo=o("dpt"),xfo=o(" \u2014 "),tI=a("a"),$fo=o("DPTFeatureExtractor"),kfo=o(" (DPT model)"),Sfo=l(),bh=a("li"),One=a("strong"),Rfo=o("flava"),Pfo=o(" \u2014 "),aI=a("a"),Bfo=o("FlavaFeatureExtractor"),Ifo=o(" (Flava model)"),Nfo=l(),vh=a("li"),Vne=a("strong"),qfo=o("glpn"),jfo=o(" \u2014 "),nI=a("a"),Dfo=o("GLPNFeatureExtractor"),Gfo=o(" (GLPN model)"),Ofo=l(),Fh=a("li"),Xne=a("strong"),Vfo=o("hubert"),Xfo=o(" \u2014 "),sI=a("a"),zfo=o("Wav2Vec2FeatureExtractor"),Wfo=o(" (Hubert model)"),Qfo=l(),Th=a("li"),zne=a("strong"),Hfo=o("imagegpt"),Ufo=o(" \u2014 "),lI=a("a"),Jfo=o("ImageGPTFeatureExtractor"),Yfo=o(" (ImageGPT model)"),Kfo=l(),Mh=a("li"),Wne=a("strong"),Zfo=o("layoutlmv2"),emo=o(" \u2014 "),iI=a("a"),omo=o("LayoutLMv2FeatureExtractor"),rmo=o(" (LayoutLMv2 model)"),tmo=l(),Eh=a("li"),Qne=a("strong"),amo=o("layoutlmv3"),nmo=o(" \u2014 "),dI=a("a"),smo=o("LayoutLMv3FeatureExtractor"),lmo=o(" (LayoutLMv3 model)"),imo=l(),Ch=a("li"),Hne=a("strong"),dmo=o("maskformer"),cmo=o(" \u2014 "),cI=a("a"),fmo=o("MaskFormerFeatureExtractor"),mmo=o(" (MaskFormer model)"),gmo=l(),wh=a("li"),Une=a("strong"),hmo=o("perceiver"),pmo=o(" \u2014 "),fI=a("a"),_mo=o("PerceiverFeatureExtractor"),umo=o(" (Perceiver model)"),bmo=l(),Ah=a("li"),Jne=a("strong"),vmo=o("poolformer"),Fmo=o(" \u2014 "),mI=a("a"),Tmo=o("PoolFormerFeatureExtractor"),Mmo=o(" (PoolFormer model)"),Emo=l(),yh=a("li"),Yne=a("strong"),Cmo=o("regnet"),wmo=o(" \u2014 "),gI=a("a"),Amo=o("ConvNextFeatureExtractor"),ymo=o(" (RegNet model)"),Lmo=l(),Lh=a("li"),Kne=a("strong"),xmo=o("resnet"),$mo=o(" \u2014 "),hI=a("a"),kmo=o("ConvNextFeatureExtractor"),Smo=o(" (ResNet model)"),Rmo=l(),xh=a("li"),Zne=a("strong"),Pmo=o("segformer"),Bmo=o(" \u2014 "),pI=a("a"),Imo=o("SegformerFeatureExtractor"),Nmo=o(" (SegFormer model)"),qmo=l(),$h=a("li"),ese=a("strong"),jmo=o("speech_to_text"),Dmo=o(" \u2014 "),_I=a("a"),Gmo=o("Speech2TextFeatureExtractor"),Omo=o(" (Speech2Text model)"),Vmo=l(),kh=a("li"),ose=a("strong"),Xmo=o("swin"),zmo=o(" \u2014 "),uI=a("a"),Wmo=o("ViTFeatureExtractor"),Qmo=o(" (Swin model)"),Hmo=l(),Sh=a("li"),rse=a("strong"),Umo=o("van"),Jmo=o(" \u2014 "),bI=a("a"),Ymo=o("ConvNextFeatureExtractor"),Kmo=o(" (VAN model)"),Zmo=l(),Rh=a("li"),tse=a("strong"),ego=o("vit"),ogo=o(" \u2014 "),vI=a("a"),rgo=o("ViTFeatureExtractor"),tgo=o(" (ViT model)"),ago=l(),Ph=a("li"),ase=a("strong"),ngo=o("vit_mae"),sgo=o(" \u2014 "),FI=a("a"),lgo=o("ViTFeatureExtractor"),igo=o(" (ViTMAE model)"),dgo=l(),Bh=a("li"),nse=a("strong"),cgo=o("wav2vec2"),fgo=o(" \u2014 "),TI=a("a"),mgo=o("Wav2Vec2FeatureExtractor"),ggo=o(" (Wav2Vec2 model)"),hgo=l(),Ih=a("li"),sse=a("strong"),pgo=o("wav2vec2-conformer"),_go=o(" \u2014 "),MI=a("a"),ugo=o("Wav2Vec2FeatureExtractor"),bgo=o(" (Wav2Vec2-Conformer model)"),vgo=l(),Nh=a("li"),lse=a("strong"),Fgo=o("yolos"),Tgo=o(" \u2014 "),EI=a("a"),Mgo=o("YolosFeatureExtractor"),Ego=o(" (YOLOS model)"),Cgo=l(),F(qh.$$.fragment),wgo=l(),F(jh.$$.fragment),Ago=l(),Dh=a("div"),F(eA.$$.fragment),ygo=l(),ise=a("p"),Lgo=o("Register a new feature extractor for this class."),Oqe=l(),Ci=a("h2"),Gh=a("a"),dse=a("span"),F(oA.$$.fragment),xgo=l(),cse=a("span"),$go=o("AutoProcessor"),Vqe=l(),yo=a("div"),F(rA.$$.fragment),kgo=l(),tA=a("p"),Sgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=a("a"),Rgo=o("AutoProcessor.from_pretrained()"),Pgo=o(" class method."),Bgo=l(),aA=a("p"),Igo=o("This class cannot be instantiated directly using "),fse=a("code"),Ngo=o("__init__()"),qgo=o(" (throws an error)."),jgo=l(),Ue=a("div"),F(nA.$$.fragment),Dgo=l(),mse=a("p"),Ggo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ogo=l(),wi=a("p"),Vgo=o("The processor class to instantiate is selected based on the "),gse=a("code"),Xgo=o("model_type"),zgo=o(` property of the config object (either
passed as an argument or loaded from `),hse=a("code"),Wgo=o("pretrained_model_name_or_path"),Qgo=o(" if possible):"),Hgo=l(),he=a("ul"),Oh=a("li"),pse=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),wI=a("a"),Ygo=o("CLIPProcessor"),Kgo=o(" (CLIP model)"),Zgo=l(),Vh=a("li"),_se=a("strong"),eho=o("flava"),oho=o(" \u2014 "),use=a("code"),rho=o("FLAVAProcessor"),tho=o(" (Flava model)"),aho=l(),Xh=a("li"),bse=a("strong"),nho=o("layoutlmv2"),sho=o(" \u2014 "),AI=a("a"),lho=o("LayoutLMv2Processor"),iho=o(" (LayoutLMv2 model)"),dho=l(),zh=a("li"),vse=a("strong"),cho=o("layoutlmv3"),fho=o(" \u2014 "),yI=a("a"),mho=o("LayoutLMv3Processor"),gho=o(" (LayoutLMv3 model)"),hho=l(),Wh=a("li"),Fse=a("strong"),pho=o("layoutxlm"),_ho=o(" \u2014 "),LI=a("a"),uho=o("LayoutXLMProcessor"),bho=o(" (LayoutXLM model)"),vho=l(),Qh=a("li"),Tse=a("strong"),Fho=o("sew"),Tho=o(" \u2014 "),xI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (SEW model)"),Cho=l(),Hh=a("li"),Mse=a("strong"),who=o("sew-d"),Aho=o(" \u2014 "),$I=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (SEW-D model)"),xho=l(),Uh=a("li"),Ese=a("strong"),$ho=o("speech_to_text"),kho=o(" \u2014 "),kI=a("a"),Sho=o("Speech2TextProcessor"),Rho=o(" (Speech2Text model)"),Pho=l(),Jh=a("li"),Cse=a("strong"),Bho=o("speech_to_text_2"),Iho=o(" \u2014 "),SI=a("a"),Nho=o("Speech2Text2Processor"),qho=o(" (Speech2Text2 model)"),jho=l(),Yh=a("li"),wse=a("strong"),Dho=o("trocr"),Gho=o(" \u2014 "),RI=a("a"),Oho=o("TrOCRProcessor"),Vho=o(" (TrOCR model)"),Xho=l(),Kh=a("li"),Ase=a("strong"),zho=o("unispeech"),Who=o(" \u2014 "),PI=a("a"),Qho=o("Wav2Vec2Processor"),Hho=o(" (UniSpeech model)"),Uho=l(),Zh=a("li"),yse=a("strong"),Jho=o("unispeech-sat"),Yho=o(" \u2014 "),BI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (UniSpeechSat model)"),epo=l(),ep=a("li"),Lse=a("strong"),opo=o("vilt"),rpo=o(" \u2014 "),II=a("a"),tpo=o("ViltProcessor"),apo=o(" (ViLT model)"),npo=l(),op=a("li"),xse=a("strong"),spo=o("vision-text-dual-encoder"),lpo=o(" \u2014 "),NI=a("a"),ipo=o("VisionTextDualEncoderProcessor"),dpo=o(" (VisionTextDualEncoder model)"),cpo=l(),rp=a("li"),$se=a("strong"),fpo=o("wav2vec2"),mpo=o(" \u2014 "),qI=a("a"),gpo=o("Wav2Vec2Processor"),hpo=o(" (Wav2Vec2 model)"),ppo=l(),tp=a("li"),kse=a("strong"),_po=o("wav2vec2-conformer"),upo=o(" \u2014 "),jI=a("a"),bpo=o("Wav2Vec2Processor"),vpo=o(" (Wav2Vec2-Conformer model)"),Fpo=l(),ap=a("li"),Sse=a("strong"),Tpo=o("wavlm"),Mpo=o(" \u2014 "),DI=a("a"),Epo=o("Wav2Vec2Processor"),Cpo=o(" (WavLM model)"),wpo=l(),F(np.$$.fragment),Apo=l(),F(sp.$$.fragment),ypo=l(),lp=a("div"),F(sA.$$.fragment),Lpo=l(),Rse=a("p"),xpo=o("Register a new processor for this class."),Xqe=l(),Ai=a("h2"),ip=a("a"),Pse=a("span"),F(lA.$$.fragment),$po=l(),Bse=a("span"),kpo=o("AutoModel"),zqe=l(),Lo=a("div"),F(iA.$$.fragment),Spo=l(),yi=a("p"),Rpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),Ppo=o("from_pretrained()"),Bpo=o(" class method or the "),OI=a("a"),Ipo=o("from_config()"),Npo=o(` class
method.`),qpo=l(),dA=a("p"),jpo=o("This class cannot be instantiated directly using "),Ise=a("code"),Dpo=o("__init__()"),Gpo=o(" (throws an error)."),Opo=l(),tt=a("div"),F(cA.$$.fragment),Vpo=l(),Nse=a("p"),Xpo=o("Instantiates one of the base model classes of the library from a configuration."),zpo=l(),Li=a("p"),Wpo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),Qpo=o("not"),Hpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),Upo=o("from_pretrained()"),Jpo=o(" to load the model weights."),Ypo=l(),F(dp.$$.fragment),Kpo=l(),Je=a("div"),F(fA.$$.fragment),Zpo=l(),jse=a("p"),e_o=o("Instantiate one of the base model classes of the library from a pretrained model."),o_o=l(),La=a("p"),r_o=o("The model class to instantiate is selected based on the "),Dse=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(":"),d_o=l(),x=a("ul"),cp=a("li"),Vse=a("strong"),c_o=o("albert"),f_o=o(" \u2014 "),XI=a("a"),m_o=o("AlbertModel"),g_o=o(" (ALBERT model)"),h_o=l(),fp=a("li"),Xse=a("strong"),p_o=o("bart"),__o=o(" \u2014 "),zI=a("a"),u_o=o("BartModel"),b_o=o(" (BART model)"),v_o=l(),mp=a("li"),zse=a("strong"),F_o=o("beit"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("BeitModel"),E_o=o(" (BEiT model)"),C_o=l(),gp=a("li"),Wse=a("strong"),w_o=o("bert"),A_o=o(" \u2014 "),QI=a("a"),y_o=o("BertModel"),L_o=o(" (BERT model)"),x_o=l(),hp=a("li"),Qse=a("strong"),$_o=o("bert-generation"),k_o=o(" \u2014 "),HI=a("a"),S_o=o("BertGenerationEncoder"),R_o=o(" (Bert Generation model)"),P_o=l(),pp=a("li"),Hse=a("strong"),B_o=o("big_bird"),I_o=o(" \u2014 "),UI=a("a"),N_o=o("BigBirdModel"),q_o=o(" (BigBird model)"),j_o=l(),_p=a("li"),Use=a("strong"),D_o=o("bigbird_pegasus"),G_o=o(" \u2014 "),JI=a("a"),O_o=o("BigBirdPegasusModel"),V_o=o(" (BigBirdPegasus model)"),X_o=l(),up=a("li"),Jse=a("strong"),z_o=o("blenderbot"),W_o=o(" \u2014 "),YI=a("a"),Q_o=o("BlenderbotModel"),H_o=o(" (Blenderbot model)"),U_o=l(),bp=a("li"),Yse=a("strong"),J_o=o("blenderbot-small"),Y_o=o(" \u2014 "),KI=a("a"),K_o=o("BlenderbotSmallModel"),Z_o=o(" (BlenderbotSmall model)"),euo=l(),vp=a("li"),Kse=a("strong"),ouo=o("camembert"),ruo=o(" \u2014 "),ZI=a("a"),tuo=o("CamembertModel"),auo=o(" (CamemBERT model)"),nuo=l(),Fp=a("li"),Zse=a("strong"),suo=o("canine"),luo=o(" \u2014 "),eN=a("a"),iuo=o("CanineModel"),duo=o(" (Canine model)"),cuo=l(),Tp=a("li"),ele=a("strong"),fuo=o("clip"),muo=o(" \u2014 "),oN=a("a"),guo=o("CLIPModel"),huo=o(" (CLIP model)"),puo=l(),Mp=a("li"),ole=a("strong"),_uo=o("convbert"),uuo=o(" \u2014 "),rN=a("a"),buo=o("ConvBertModel"),vuo=o(" (ConvBERT model)"),Fuo=l(),Ep=a("li"),rle=a("strong"),Tuo=o("convnext"),Muo=o(" \u2014 "),tN=a("a"),Euo=o("ConvNextModel"),Cuo=o(" (ConvNext model)"),wuo=l(),Cp=a("li"),tle=a("strong"),Auo=o("ctrl"),yuo=o(" \u2014 "),aN=a("a"),Luo=o("CTRLModel"),xuo=o(" (CTRL model)"),$uo=l(),wp=a("li"),ale=a("strong"),kuo=o("cvt"),Suo=o(" \u2014 "),nN=a("a"),Ruo=o("CvtModel"),Puo=o(" (CvT model)"),Buo=l(),Ap=a("li"),nle=a("strong"),Iuo=o("data2vec-audio"),Nuo=o(" \u2014 "),sN=a("a"),quo=o("Data2VecAudioModel"),juo=o(" (Data2VecAudio model)"),Duo=l(),yp=a("li"),sle=a("strong"),Guo=o("data2vec-text"),Ouo=o(" \u2014 "),lN=a("a"),Vuo=o("Data2VecTextModel"),Xuo=o(" (Data2VecText model)"),zuo=l(),Lp=a("li"),lle=a("strong"),Wuo=o("data2vec-vision"),Quo=o(" \u2014 "),iN=a("a"),Huo=o("Data2VecVisionModel"),Uuo=o(" (Data2VecVision model)"),Juo=l(),xp=a("li"),ile=a("strong"),Yuo=o("deberta"),Kuo=o(" \u2014 "),dN=a("a"),Zuo=o("DebertaModel"),e2o=o(" (DeBERTa model)"),o2o=l(),$p=a("li"),dle=a("strong"),r2o=o("deberta-v2"),t2o=o(" \u2014 "),cN=a("a"),a2o=o("DebertaV2Model"),n2o=o(" (DeBERTa-v2 model)"),s2o=l(),kp=a("li"),cle=a("strong"),l2o=o("decision_transformer"),i2o=o(" \u2014 "),fN=a("a"),d2o=o("DecisionTransformerModel"),c2o=o(" (Decision Transformer model)"),f2o=l(),Sp=a("li"),fle=a("strong"),m2o=o("deit"),g2o=o(" \u2014 "),mN=a("a"),h2o=o("DeiTModel"),p2o=o(" (DeiT model)"),_2o=l(),Rp=a("li"),mle=a("strong"),u2o=o("detr"),b2o=o(" \u2014 "),gN=a("a"),v2o=o("DetrModel"),F2o=o(" (DETR model)"),T2o=l(),Pp=a("li"),gle=a("strong"),M2o=o("distilbert"),E2o=o(" \u2014 "),hN=a("a"),C2o=o("DistilBertModel"),w2o=o(" (DistilBERT model)"),A2o=l(),Bp=a("li"),hle=a("strong"),y2o=o("dpr"),L2o=o(" \u2014 "),pN=a("a"),x2o=o("DPRQuestionEncoder"),$2o=o(" (DPR model)"),k2o=l(),Ip=a("li"),ple=a("strong"),S2o=o("dpt"),R2o=o(" \u2014 "),_N=a("a"),P2o=o("DPTModel"),B2o=o(" (DPT model)"),I2o=l(),Np=a("li"),_le=a("strong"),N2o=o("electra"),q2o=o(" \u2014 "),uN=a("a"),j2o=o("ElectraModel"),D2o=o(" (ELECTRA model)"),G2o=l(),qp=a("li"),ule=a("strong"),O2o=o("flaubert"),V2o=o(" \u2014 "),bN=a("a"),X2o=o("FlaubertModel"),z2o=o(" (FlauBERT model)"),W2o=l(),jp=a("li"),ble=a("strong"),Q2o=o("flava"),H2o=o(" \u2014 "),vN=a("a"),U2o=o("FlavaModel"),J2o=o(" (Flava model)"),Y2o=l(),Dp=a("li"),vle=a("strong"),K2o=o("fnet"),Z2o=o(" \u2014 "),FN=a("a"),e1o=o("FNetModel"),o1o=o(" (FNet model)"),r1o=l(),Gp=a("li"),Fle=a("strong"),t1o=o("fsmt"),a1o=o(" \u2014 "),TN=a("a"),n1o=o("FSMTModel"),s1o=o(" (FairSeq Machine-Translation model)"),l1o=l(),Bs=a("li"),Tle=a("strong"),i1o=o("funnel"),d1o=o(" \u2014 "),MN=a("a"),c1o=o("FunnelModel"),f1o=o(" or "),EN=a("a"),m1o=o("FunnelBaseModel"),g1o=o(" (Funnel Transformer model)"),h1o=l(),Op=a("li"),Mle=a("strong"),p1o=o("glpn"),_1o=o(" \u2014 "),CN=a("a"),u1o=o("GLPNModel"),b1o=o(" (GLPN model)"),v1o=l(),Vp=a("li"),Ele=a("strong"),F1o=o("gpt2"),T1o=o(" \u2014 "),wN=a("a"),M1o=o("GPT2Model"),E1o=o(" (OpenAI GPT-2 model)"),C1o=l(),Xp=a("li"),Cle=a("strong"),w1o=o("gpt_neo"),A1o=o(" \u2014 "),AN=a("a"),y1o=o("GPTNeoModel"),L1o=o(" (GPT Neo model)"),x1o=l(),zp=a("li"),wle=a("strong"),$1o=o("gpt_neox"),k1o=o(" \u2014 "),yN=a("a"),S1o=o("GPTNeoXModel"),R1o=o(" (GPT NeoX model)"),P1o=l(),Wp=a("li"),Ale=a("strong"),B1o=o("gptj"),I1o=o(" \u2014 "),LN=a("a"),N1o=o("GPTJModel"),q1o=o(" (GPT-J model)"),j1o=l(),Qp=a("li"),yle=a("strong"),D1o=o("hubert"),G1o=o(" \u2014 "),xN=a("a"),O1o=o("HubertModel"),V1o=o(" (Hubert model)"),X1o=l(),Hp=a("li"),Lle=a("strong"),z1o=o("ibert"),W1o=o(" \u2014 "),$N=a("a"),Q1o=o("IBertModel"),H1o=o(" (I-BERT model)"),U1o=l(),Up=a("li"),xle=a("strong"),J1o=o("imagegpt"),Y1o=o(" \u2014 "),kN=a("a"),K1o=o("ImageGPTModel"),Z1o=o(" (ImageGPT model)"),ebo=l(),Jp=a("li"),$le=a("strong"),obo=o("layoutlm"),rbo=o(" \u2014 "),SN=a("a"),tbo=o("LayoutLMModel"),abo=o(" (LayoutLM model)"),nbo=l(),Yp=a("li"),kle=a("strong"),sbo=o("layoutlmv2"),lbo=o(" \u2014 "),RN=a("a"),ibo=o("LayoutLMv2Model"),dbo=o(" (LayoutLMv2 model)"),cbo=l(),Kp=a("li"),Sle=a("strong"),fbo=o("layoutlmv3"),mbo=o(" \u2014 "),PN=a("a"),gbo=o("LayoutLMv3Model"),hbo=o(" (LayoutLMv3 model)"),pbo=l(),Zp=a("li"),Rle=a("strong"),_bo=o("led"),ubo=o(" \u2014 "),BN=a("a"),bbo=o("LEDModel"),vbo=o(" (LED model)"),Fbo=l(),e_=a("li"),Ple=a("strong"),Tbo=o("longformer"),Mbo=o(" \u2014 "),IN=a("a"),Ebo=o("LongformerModel"),Cbo=o(" (Longformer model)"),wbo=l(),o_=a("li"),Ble=a("strong"),Abo=o("longt5"),ybo=o(" \u2014 "),NN=a("a"),Lbo=o("LongT5Model"),xbo=o(" (LongT5 model)"),$bo=l(),r_=a("li"),Ile=a("strong"),kbo=o("luke"),Sbo=o(" \u2014 "),qN=a("a"),Rbo=o("LukeModel"),Pbo=o(" (LUKE model)"),Bbo=l(),t_=a("li"),Nle=a("strong"),Ibo=o("lxmert"),Nbo=o(" \u2014 "),jN=a("a"),qbo=o("LxmertModel"),jbo=o(" (LXMERT model)"),Dbo=l(),a_=a("li"),qle=a("strong"),Gbo=o("m2m_100"),Obo=o(" \u2014 "),DN=a("a"),Vbo=o("M2M100Model"),Xbo=o(" (M2M100 model)"),zbo=l(),n_=a("li"),jle=a("strong"),Wbo=o("marian"),Qbo=o(" \u2014 "),GN=a("a"),Hbo=o("MarianModel"),Ubo=o(" (Marian model)"),Jbo=l(),s_=a("li"),Dle=a("strong"),Ybo=o("maskformer"),Kbo=o(" \u2014 "),ON=a("a"),Zbo=o("MaskFormerModel"),evo=o(" (MaskFormer model)"),ovo=l(),l_=a("li"),Gle=a("strong"),rvo=o("mbart"),tvo=o(" \u2014 "),VN=a("a"),avo=o("MBartModel"),nvo=o(" (mBART model)"),svo=l(),i_=a("li"),Ole=a("strong"),lvo=o("megatron-bert"),ivo=o(" \u2014 "),XN=a("a"),dvo=o("MegatronBertModel"),cvo=o(" (MegatronBert model)"),fvo=l(),d_=a("li"),Vle=a("strong"),mvo=o("mobilebert"),gvo=o(" \u2014 "),zN=a("a"),hvo=o("MobileBertModel"),pvo=o(" (MobileBERT model)"),_vo=l(),c_=a("li"),Xle=a("strong"),uvo=o("mpnet"),bvo=o(" \u2014 "),WN=a("a"),vvo=o("MPNetModel"),Fvo=o(" (MPNet model)"),Tvo=l(),f_=a("li"),zle=a("strong"),Mvo=o("mt5"),Evo=o(" \u2014 "),QN=a("a"),Cvo=o("MT5Model"),wvo=o(" (mT5 model)"),Avo=l(),m_=a("li"),Wle=a("strong"),yvo=o("nystromformer"),Lvo=o(" \u2014 "),HN=a("a"),xvo=o("NystromformerModel"),$vo=o(" (Nystromformer model)"),kvo=l(),g_=a("li"),Qle=a("strong"),Svo=o("openai-gpt"),Rvo=o(" \u2014 "),UN=a("a"),Pvo=o("OpenAIGPTModel"),Bvo=o(" (OpenAI GPT model)"),Ivo=l(),h_=a("li"),Hle=a("strong"),Nvo=o("opt"),qvo=o(" \u2014 "),JN=a("a"),jvo=o("OPTModel"),Dvo=o(" (OPT model)"),Gvo=l(),p_=a("li"),Ule=a("strong"),Ovo=o("pegasus"),Vvo=o(" \u2014 "),YN=a("a"),Xvo=o("PegasusModel"),zvo=o(" (Pegasus model)"),Wvo=l(),__=a("li"),Jle=a("strong"),Qvo=o("perceiver"),Hvo=o(" \u2014 "),KN=a("a"),Uvo=o("PerceiverModel"),Jvo=o(" (Perceiver model)"),Yvo=l(),u_=a("li"),Yle=a("strong"),Kvo=o("plbart"),Zvo=o(" \u2014 "),ZN=a("a"),eFo=o("PLBartModel"),oFo=o(" (PLBart model)"),rFo=l(),b_=a("li"),Kle=a("strong"),tFo=o("poolformer"),aFo=o(" \u2014 "),eq=a("a"),nFo=o("PoolFormerModel"),sFo=o(" (PoolFormer model)"),lFo=l(),v_=a("li"),Zle=a("strong"),iFo=o("prophetnet"),dFo=o(" \u2014 "),oq=a("a"),cFo=o("ProphetNetModel"),fFo=o(" (ProphetNet model)"),mFo=l(),F_=a("li"),eie=a("strong"),gFo=o("qdqbert"),hFo=o(" \u2014 "),rq=a("a"),pFo=o("QDQBertModel"),_Fo=o(" (QDQBert model)"),uFo=l(),T_=a("li"),oie=a("strong"),bFo=o("reformer"),vFo=o(" \u2014 "),tq=a("a"),FFo=o("ReformerModel"),TFo=o(" (Reformer model)"),MFo=l(),M_=a("li"),rie=a("strong"),EFo=o("regnet"),CFo=o(" \u2014 "),aq=a("a"),wFo=o("RegNetModel"),AFo=o(" (RegNet model)"),yFo=l(),E_=a("li"),tie=a("strong"),LFo=o("rembert"),xFo=o(" \u2014 "),nq=a("a"),$Fo=o("RemBertModel"),kFo=o(" (RemBERT model)"),SFo=l(),C_=a("li"),aie=a("strong"),RFo=o("resnet"),PFo=o(" \u2014 "),sq=a("a"),BFo=o("ResNetModel"),IFo=o(" (ResNet model)"),NFo=l(),w_=a("li"),nie=a("strong"),qFo=o("retribert"),jFo=o(" \u2014 "),lq=a("a"),DFo=o("RetriBertModel"),GFo=o(" (RetriBERT model)"),OFo=l(),A_=a("li"),sie=a("strong"),VFo=o("roberta"),XFo=o(" \u2014 "),iq=a("a"),zFo=o("RobertaModel"),WFo=o(" (RoBERTa model)"),QFo=l(),y_=a("li"),lie=a("strong"),HFo=o("roformer"),UFo=o(" \u2014 "),dq=a("a"),JFo=o("RoFormerModel"),YFo=o(" (RoFormer model)"),KFo=l(),L_=a("li"),iie=a("strong"),ZFo=o("segformer"),e6o=o(" \u2014 "),cq=a("a"),o6o=o("SegformerModel"),r6o=o(" (SegFormer model)"),t6o=l(),x_=a("li"),die=a("strong"),a6o=o("sew"),n6o=o(" \u2014 "),fq=a("a"),s6o=o("SEWModel"),l6o=o(" (SEW model)"),i6o=l(),$_=a("li"),cie=a("strong"),d6o=o("sew-d"),c6o=o(" \u2014 "),mq=a("a"),f6o=o("SEWDModel"),m6o=o(" (SEW-D model)"),g6o=l(),k_=a("li"),fie=a("strong"),h6o=o("speech_to_text"),p6o=o(" \u2014 "),gq=a("a"),_6o=o("Speech2TextModel"),u6o=o(" (Speech2Text model)"),b6o=l(),S_=a("li"),mie=a("strong"),v6o=o("splinter"),F6o=o(" \u2014 "),hq=a("a"),T6o=o("SplinterModel"),M6o=o(" (Splinter model)"),E6o=l(),R_=a("li"),gie=a("strong"),C6o=o("squeezebert"),w6o=o(" \u2014 "),pq=a("a"),A6o=o("SqueezeBertModel"),y6o=o(" (SqueezeBERT model)"),L6o=l(),P_=a("li"),hie=a("strong"),x6o=o("swin"),$6o=o(" \u2014 "),_q=a("a"),k6o=o("SwinModel"),S6o=o(" (Swin model)"),R6o=l(),B_=a("li"),pie=a("strong"),P6o=o("t5"),B6o=o(" \u2014 "),uq=a("a"),I6o=o("T5Model"),N6o=o(" (T5 model)"),q6o=l(),I_=a("li"),_ie=a("strong"),j6o=o("tapas"),D6o=o(" \u2014 "),bq=a("a"),G6o=o("TapasModel"),O6o=o(" (TAPAS model)"),V6o=l(),N_=a("li"),uie=a("strong"),X6o=o("trajectory_transformer"),z6o=o(" \u2014 "),vq=a("a"),W6o=o("TrajectoryTransformerModel"),Q6o=o(" (Trajectory Transformer model)"),H6o=l(),q_=a("li"),bie=a("strong"),U6o=o("transfo-xl"),J6o=o(" \u2014 "),Fq=a("a"),Y6o=o("TransfoXLModel"),K6o=o(" (Transformer-XL model)"),Z6o=l(),j_=a("li"),vie=a("strong"),eTo=o("unispeech"),oTo=o(" \u2014 "),Tq=a("a"),rTo=o("UniSpeechModel"),tTo=o(" (UniSpeech model)"),aTo=l(),D_=a("li"),Fie=a("strong"),nTo=o("unispeech-sat"),sTo=o(" \u2014 "),Mq=a("a"),lTo=o("UniSpeechSatModel"),iTo=o(" (UniSpeechSat model)"),dTo=l(),G_=a("li"),Tie=a("strong"),cTo=o("van"),fTo=o(" \u2014 "),Eq=a("a"),mTo=o("VanModel"),gTo=o(" (VAN model)"),hTo=l(),O_=a("li"),Mie=a("strong"),pTo=o("vilt"),_To=o(" \u2014 "),Cq=a("a"),uTo=o("ViltModel"),bTo=o(" (ViLT model)"),vTo=l(),V_=a("li"),Eie=a("strong"),FTo=o("vision-text-dual-encoder"),TTo=o(" \u2014 "),wq=a("a"),MTo=o("VisionTextDualEncoderModel"),ETo=o(" (VisionTextDualEncoder model)"),CTo=l(),X_=a("li"),Cie=a("strong"),wTo=o("visual_bert"),ATo=o(" \u2014 "),Aq=a("a"),yTo=o("VisualBertModel"),LTo=o(" (VisualBert model)"),xTo=l(),z_=a("li"),wie=a("strong"),$To=o("vit"),kTo=o(" \u2014 "),yq=a("a"),STo=o("ViTModel"),RTo=o(" (ViT model)"),PTo=l(),W_=a("li"),Aie=a("strong"),BTo=o("vit_mae"),ITo=o(" \u2014 "),Lq=a("a"),NTo=o("ViTMAEModel"),qTo=o(" (ViTMAE model)"),jTo=l(),Q_=a("li"),yie=a("strong"),DTo=o("wav2vec2"),GTo=o(" \u2014 "),xq=a("a"),OTo=o("Wav2Vec2Model"),VTo=o(" (Wav2Vec2 model)"),XTo=l(),H_=a("li"),Lie=a("strong"),zTo=o("wav2vec2-conformer"),WTo=o(" \u2014 "),$q=a("a"),QTo=o("Wav2Vec2ConformerModel"),HTo=o(" (Wav2Vec2-Conformer model)"),UTo=l(),U_=a("li"),xie=a("strong"),JTo=o("wavlm"),YTo=o(" \u2014 "),kq=a("a"),KTo=o("WavLMModel"),ZTo=o(" (WavLM model)"),e7o=l(),J_=a("li"),$ie=a("strong"),o7o=o("xglm"),r7o=o(" \u2014 "),Sq=a("a"),t7o=o("XGLMModel"),a7o=o(" (XGLM model)"),n7o=l(),Y_=a("li"),kie=a("strong"),s7o=o("xlm"),l7o=o(" \u2014 "),Rq=a("a"),i7o=o("XLMModel"),d7o=o(" (XLM model)"),c7o=l(),K_=a("li"),Sie=a("strong"),f7o=o("xlm-prophetnet"),m7o=o(" \u2014 "),Pq=a("a"),g7o=o("XLMProphetNetModel"),h7o=o(" (XLMProphetNet model)"),p7o=l(),Z_=a("li"),Rie=a("strong"),_7o=o("xlm-roberta"),u7o=o(" \u2014 "),Bq=a("a"),b7o=o("XLMRobertaModel"),v7o=o(" (XLM-RoBERTa model)"),F7o=l(),eu=a("li"),Pie=a("strong"),T7o=o("xlm-roberta-xl"),M7o=o(" \u2014 "),Iq=a("a"),E7o=o("XLMRobertaXLModel"),C7o=o(" (XLM-RoBERTa-XL model)"),w7o=l(),ou=a("li"),Bie=a("strong"),A7o=o("xlnet"),y7o=o(" \u2014 "),Nq=a("a"),L7o=o("XLNetModel"),x7o=o(" (XLNet model)"),$7o=l(),ru=a("li"),Iie=a("strong"),k7o=o("yolos"),S7o=o(" \u2014 "),qq=a("a"),R7o=o("YolosModel"),P7o=o(" (YOLOS model)"),B7o=l(),tu=a("li"),Nie=a("strong"),I7o=o("yoso"),N7o=o(" \u2014 "),jq=a("a"),q7o=o("YosoModel"),j7o=o(" (YOSO model)"),D7o=l(),au=a("p"),G7o=o("The model is set in evaluation mode by default using "),qie=a("code"),O7o=o("model.eval()"),V7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),X7o=o("model.train()"),z7o=l(),F(nu.$$.fragment),Wqe=l(),xi=a("h2"),su=a("a"),Die=a("span"),F(mA.$$.fragment),W7o=l(),Gie=a("span"),Q7o=o("AutoModelForPreTraining"),Qqe=l(),xo=a("div"),F(gA.$$.fragment),H7o=l(),$i=a("p"),U7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),J7o=o("from_pretrained()"),Y7o=o(" class method or the "),Gq=a("a"),K7o=o("from_config()"),Z7o=o(` class
method.`),e9o=l(),hA=a("p"),o9o=o("This class cannot be instantiated directly using "),Oie=a("code"),r9o=o("__init__()"),t9o=o(" (throws an error)."),a9o=l(),at=a("div"),F(pA.$$.fragment),n9o=l(),Vie=a("p"),s9o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l9o=l(),ki=a("p"),i9o=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),d9o=o("not"),c9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),f9o=o("from_pretrained()"),m9o=o(" to load the model weights."),g9o=l(),F(lu.$$.fragment),h9o=l(),Ye=a("div"),F(_A.$$.fragment),p9o=l(),zie=a("p"),_9o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),u9o=l(),xa=a("p"),b9o=o("The model class to instantiate is selected based on the "),Wie=a("code"),v9o=o("model_type"),F9o=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),T9o=o("pretrained_model_name_or_path"),M9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),E9o=o("pretrained_model_name_or_path"),C9o=o(":"),w9o=l(),G=a("ul"),iu=a("li"),Uie=a("strong"),A9o=o("albert"),y9o=o(" \u2014 "),Vq=a("a"),L9o=o("AlbertForPreTraining"),x9o=o(" (ALBERT model)"),$9o=l(),du=a("li"),Jie=a("strong"),k9o=o("bart"),S9o=o(" \u2014 "),Xq=a("a"),R9o=o("BartForConditionalGeneration"),P9o=o(" (BART model)"),B9o=l(),cu=a("li"),Yie=a("strong"),I9o=o("bert"),N9o=o(" \u2014 "),zq=a("a"),q9o=o("BertForPreTraining"),j9o=o(" (BERT model)"),D9o=l(),fu=a("li"),Kie=a("strong"),G9o=o("big_bird"),O9o=o(" \u2014 "),Wq=a("a"),V9o=o("BigBirdForPreTraining"),X9o=o(" (BigBird model)"),z9o=l(),mu=a("li"),Zie=a("strong"),W9o=o("camembert"),Q9o=o(" \u2014 "),Qq=a("a"),H9o=o("CamembertForMaskedLM"),U9o=o(" (CamemBERT model)"),J9o=l(),gu=a("li"),ede=a("strong"),Y9o=o("ctrl"),K9o=o(" \u2014 "),Hq=a("a"),Z9o=o("CTRLLMHeadModel"),eMo=o(" (CTRL model)"),oMo=l(),hu=a("li"),ode=a("strong"),rMo=o("data2vec-text"),tMo=o(" \u2014 "),Uq=a("a"),aMo=o("Data2VecTextForMaskedLM"),nMo=o(" (Data2VecText model)"),sMo=l(),pu=a("li"),rde=a("strong"),lMo=o("deberta"),iMo=o(" \u2014 "),Jq=a("a"),dMo=o("DebertaForMaskedLM"),cMo=o(" (DeBERTa model)"),fMo=l(),_u=a("li"),tde=a("strong"),mMo=o("deberta-v2"),gMo=o(" \u2014 "),Yq=a("a"),hMo=o("DebertaV2ForMaskedLM"),pMo=o(" (DeBERTa-v2 model)"),_Mo=l(),uu=a("li"),ade=a("strong"),uMo=o("distilbert"),bMo=o(" \u2014 "),Kq=a("a"),vMo=o("DistilBertForMaskedLM"),FMo=o(" (DistilBERT model)"),TMo=l(),bu=a("li"),nde=a("strong"),MMo=o("electra"),EMo=o(" \u2014 "),Zq=a("a"),CMo=o("ElectraForPreTraining"),wMo=o(" (ELECTRA model)"),AMo=l(),vu=a("li"),sde=a("strong"),yMo=o("flaubert"),LMo=o(" \u2014 "),ej=a("a"),xMo=o("FlaubertWithLMHeadModel"),$Mo=o(" (FlauBERT model)"),kMo=l(),Fu=a("li"),lde=a("strong"),SMo=o("flava"),RMo=o(" \u2014 "),oj=a("a"),PMo=o("FlavaForPreTraining"),BMo=o(" (Flava model)"),IMo=l(),Tu=a("li"),ide=a("strong"),NMo=o("fnet"),qMo=o(" \u2014 "),rj=a("a"),jMo=o("FNetForPreTraining"),DMo=o(" (FNet model)"),GMo=l(),Mu=a("li"),dde=a("strong"),OMo=o("fsmt"),VMo=o(" \u2014 "),tj=a("a"),XMo=o("FSMTForConditionalGeneration"),zMo=o(" (FairSeq Machine-Translation model)"),WMo=l(),Eu=a("li"),cde=a("strong"),QMo=o("funnel"),HMo=o(" \u2014 "),aj=a("a"),UMo=o("FunnelForPreTraining"),JMo=o(" (Funnel Transformer model)"),YMo=l(),Cu=a("li"),fde=a("strong"),KMo=o("gpt2"),ZMo=o(" \u2014 "),nj=a("a"),e4o=o("GPT2LMHeadModel"),o4o=o(" (OpenAI GPT-2 model)"),r4o=l(),wu=a("li"),mde=a("strong"),t4o=o("ibert"),a4o=o(" \u2014 "),sj=a("a"),n4o=o("IBertForMaskedLM"),s4o=o(" (I-BERT model)"),l4o=l(),Au=a("li"),gde=a("strong"),i4o=o("layoutlm"),d4o=o(" \u2014 "),lj=a("a"),c4o=o("LayoutLMForMaskedLM"),f4o=o(" (LayoutLM model)"),m4o=l(),yu=a("li"),hde=a("strong"),g4o=o("longformer"),h4o=o(" \u2014 "),ij=a("a"),p4o=o("LongformerForMaskedLM"),_4o=o(" (Longformer model)"),u4o=l(),Lu=a("li"),pde=a("strong"),b4o=o("longt5"),v4o=o(" \u2014 "),dj=a("a"),F4o=o("LongT5ForConditionalGeneration"),T4o=o(" (LongT5 model)"),M4o=l(),xu=a("li"),_de=a("strong"),E4o=o("lxmert"),C4o=o(" \u2014 "),cj=a("a"),w4o=o("LxmertForPreTraining"),A4o=o(" (LXMERT model)"),y4o=l(),$u=a("li"),ude=a("strong"),L4o=o("megatron-bert"),x4o=o(" \u2014 "),fj=a("a"),$4o=o("MegatronBertForPreTraining"),k4o=o(" (MegatronBert model)"),S4o=l(),ku=a("li"),bde=a("strong"),R4o=o("mobilebert"),P4o=o(" \u2014 "),mj=a("a"),B4o=o("MobileBertForPreTraining"),I4o=o(" (MobileBERT model)"),N4o=l(),Su=a("li"),vde=a("strong"),q4o=o("mpnet"),j4o=o(" \u2014 "),gj=a("a"),D4o=o("MPNetForMaskedLM"),G4o=o(" (MPNet model)"),O4o=l(),Ru=a("li"),Fde=a("strong"),V4o=o("openai-gpt"),X4o=o(" \u2014 "),hj=a("a"),z4o=o("OpenAIGPTLMHeadModel"),W4o=o(" (OpenAI GPT model)"),Q4o=l(),Pu=a("li"),Tde=a("strong"),H4o=o("retribert"),U4o=o(" \u2014 "),pj=a("a"),J4o=o("RetriBertModel"),Y4o=o(" (RetriBERT model)"),K4o=l(),Bu=a("li"),Mde=a("strong"),Z4o=o("roberta"),eEo=o(" \u2014 "),_j=a("a"),oEo=o("RobertaForMaskedLM"),rEo=o(" (RoBERTa model)"),tEo=l(),Iu=a("li"),Ede=a("strong"),aEo=o("splinter"),nEo=o(" \u2014 "),uj=a("a"),sEo=o("SplinterForPreTraining"),lEo=o(" (Splinter model)"),iEo=l(),Nu=a("li"),Cde=a("strong"),dEo=o("squeezebert"),cEo=o(" \u2014 "),bj=a("a"),fEo=o("SqueezeBertForMaskedLM"),mEo=o(" (SqueezeBERT model)"),gEo=l(),qu=a("li"),wde=a("strong"),hEo=o("t5"),pEo=o(" \u2014 "),vj=a("a"),_Eo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),bEo=l(),ju=a("li"),Ade=a("strong"),vEo=o("tapas"),FEo=o(" \u2014 "),Fj=a("a"),TEo=o("TapasForMaskedLM"),MEo=o(" (TAPAS model)"),EEo=l(),Du=a("li"),yde=a("strong"),CEo=o("transfo-xl"),wEo=o(" \u2014 "),Tj=a("a"),AEo=o("TransfoXLLMHeadModel"),yEo=o(" (Transformer-XL model)"),LEo=l(),Gu=a("li"),Lde=a("strong"),xEo=o("unispeech"),$Eo=o(" \u2014 "),Mj=a("a"),kEo=o("UniSpeechForPreTraining"),SEo=o(" (UniSpeech model)"),REo=l(),Ou=a("li"),xde=a("strong"),PEo=o("unispeech-sat"),BEo=o(" \u2014 "),Ej=a("a"),IEo=o("UniSpeechSatForPreTraining"),NEo=o(" (UniSpeechSat model)"),qEo=l(),Vu=a("li"),$de=a("strong"),jEo=o("visual_bert"),DEo=o(" \u2014 "),Cj=a("a"),GEo=o("VisualBertForPreTraining"),OEo=o(" (VisualBert model)"),VEo=l(),Xu=a("li"),kde=a("strong"),XEo=o("vit_mae"),zEo=o(" \u2014 "),wj=a("a"),WEo=o("ViTMAEForPreTraining"),QEo=o(" (ViTMAE model)"),HEo=l(),zu=a("li"),Sde=a("strong"),UEo=o("wav2vec2"),JEo=o(" \u2014 "),Aj=a("a"),YEo=o("Wav2Vec2ForPreTraining"),KEo=o(" (Wav2Vec2 model)"),ZEo=l(),Wu=a("li"),Rde=a("strong"),e5o=o("wav2vec2-conformer"),o5o=o(" \u2014 "),yj=a("a"),r5o=o("Wav2Vec2ConformerForPreTraining"),t5o=o(" (Wav2Vec2-Conformer model)"),a5o=l(),Qu=a("li"),Pde=a("strong"),n5o=o("xlm"),s5o=o(" \u2014 "),Lj=a("a"),l5o=o("XLMWithLMHeadModel"),i5o=o(" (XLM model)"),d5o=l(),Hu=a("li"),Bde=a("strong"),c5o=o("xlm-roberta"),f5o=o(" \u2014 "),xj=a("a"),m5o=o("XLMRobertaForMaskedLM"),g5o=o(" (XLM-RoBERTa model)"),h5o=l(),Uu=a("li"),Ide=a("strong"),p5o=o("xlm-roberta-xl"),_5o=o(" \u2014 "),$j=a("a"),u5o=o("XLMRobertaXLForMaskedLM"),b5o=o(" (XLM-RoBERTa-XL model)"),v5o=l(),Ju=a("li"),Nde=a("strong"),F5o=o("xlnet"),T5o=o(" \u2014 "),kj=a("a"),M5o=o("XLNetLMHeadModel"),E5o=o(" (XLNet model)"),C5o=l(),Yu=a("p"),w5o=o("The model is set in evaluation mode by default using "),qde=a("code"),A5o=o("model.eval()"),y5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),L5o=o("model.train()"),x5o=l(),F(Ku.$$.fragment),Hqe=l(),Si=a("h2"),Zu=a("a"),Dde=a("span"),F(uA.$$.fragment),$5o=l(),Gde=a("span"),k5o=o("AutoModelForCausalLM"),Uqe=l(),$o=a("div"),F(bA.$$.fragment),S5o=l(),Ri=a("p"),R5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sj=a("a"),P5o=o("from_pretrained()"),B5o=o(" class method or the "),Rj=a("a"),I5o=o("from_config()"),N5o=o(` class
method.`),q5o=l(),vA=a("p"),j5o=o("This class cannot be instantiated directly using "),Ode=a("code"),D5o=o("__init__()"),G5o=o(" (throws an error)."),O5o=l(),nt=a("div"),F(FA.$$.fragment),V5o=l(),Vde=a("p"),X5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z5o=l(),Pi=a("p"),W5o=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),Q5o=o("not"),H5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=a("a"),U5o=o("from_pretrained()"),J5o=o(" to load the model weights."),Y5o=l(),F(e2.$$.fragment),K5o=l(),Ke=a("div"),F(TA.$$.fragment),Z5o=l(),zde=a("p"),eCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oCo=l(),$a=a("p"),rCo=o("The model class to instantiate is selected based on the "),Wde=a("code"),tCo=o("model_type"),aCo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),nCo=o("pretrained_model_name_or_path"),sCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),lCo=o("pretrained_model_name_or_path"),iCo=o(":"),dCo=l(),z=a("ul"),o2=a("li"),Ude=a("strong"),cCo=o("bart"),fCo=o(" \u2014 "),Bj=a("a"),mCo=o("BartForCausalLM"),gCo=o(" (BART model)"),hCo=l(),r2=a("li"),Jde=a("strong"),pCo=o("bert"),_Co=o(" \u2014 "),Ij=a("a"),uCo=o("BertLMHeadModel"),bCo=o(" (BERT model)"),vCo=l(),t2=a("li"),Yde=a("strong"),FCo=o("bert-generation"),TCo=o(" \u2014 "),Nj=a("a"),MCo=o("BertGenerationDecoder"),ECo=o(" (Bert Generation model)"),CCo=l(),a2=a("li"),Kde=a("strong"),wCo=o("big_bird"),ACo=o(" \u2014 "),qj=a("a"),yCo=o("BigBirdForCausalLM"),LCo=o(" (BigBird model)"),xCo=l(),n2=a("li"),Zde=a("strong"),$Co=o("bigbird_pegasus"),kCo=o(" \u2014 "),jj=a("a"),SCo=o("BigBirdPegasusForCausalLM"),RCo=o(" (BigBirdPegasus model)"),PCo=l(),s2=a("li"),ece=a("strong"),BCo=o("blenderbot"),ICo=o(" \u2014 "),Dj=a("a"),NCo=o("BlenderbotForCausalLM"),qCo=o(" (Blenderbot model)"),jCo=l(),l2=a("li"),oce=a("strong"),DCo=o("blenderbot-small"),GCo=o(" \u2014 "),Gj=a("a"),OCo=o("BlenderbotSmallForCausalLM"),VCo=o(" (BlenderbotSmall model)"),XCo=l(),i2=a("li"),rce=a("strong"),zCo=o("camembert"),WCo=o(" \u2014 "),Oj=a("a"),QCo=o("CamembertForCausalLM"),HCo=o(" (CamemBERT model)"),UCo=l(),d2=a("li"),tce=a("strong"),JCo=o("ctrl"),YCo=o(" \u2014 "),Vj=a("a"),KCo=o("CTRLLMHeadModel"),ZCo=o(" (CTRL model)"),e3o=l(),c2=a("li"),ace=a("strong"),o3o=o("data2vec-text"),r3o=o(" \u2014 "),Xj=a("a"),t3o=o("Data2VecTextForCausalLM"),a3o=o(" (Data2VecText model)"),n3o=l(),f2=a("li"),nce=a("strong"),s3o=o("electra"),l3o=o(" \u2014 "),zj=a("a"),i3o=o("ElectraForCausalLM"),d3o=o(" (ELECTRA model)"),c3o=l(),m2=a("li"),sce=a("strong"),f3o=o("gpt2"),m3o=o(" \u2014 "),Wj=a("a"),g3o=o("GPT2LMHeadModel"),h3o=o(" (OpenAI GPT-2 model)"),p3o=l(),g2=a("li"),lce=a("strong"),_3o=o("gpt_neo"),u3o=o(" \u2014 "),Qj=a("a"),b3o=o("GPTNeoForCausalLM"),v3o=o(" (GPT Neo model)"),F3o=l(),h2=a("li"),ice=a("strong"),T3o=o("gpt_neox"),M3o=o(" \u2014 "),Hj=a("a"),E3o=o("GPTNeoXForCausalLM"),C3o=o(" (GPT NeoX model)"),w3o=l(),p2=a("li"),dce=a("strong"),A3o=o("gptj"),y3o=o(" \u2014 "),Uj=a("a"),L3o=o("GPTJForCausalLM"),x3o=o(" (GPT-J model)"),$3o=l(),_2=a("li"),cce=a("strong"),k3o=o("marian"),S3o=o(" \u2014 "),Jj=a("a"),R3o=o("MarianForCausalLM"),P3o=o(" (Marian model)"),B3o=l(),u2=a("li"),fce=a("strong"),I3o=o("mbart"),N3o=o(" \u2014 "),Yj=a("a"),q3o=o("MBartForCausalLM"),j3o=o(" (mBART model)"),D3o=l(),b2=a("li"),mce=a("strong"),G3o=o("megatron-bert"),O3o=o(" \u2014 "),Kj=a("a"),V3o=o("MegatronBertForCausalLM"),X3o=o(" (MegatronBert model)"),z3o=l(),v2=a("li"),gce=a("strong"),W3o=o("openai-gpt"),Q3o=o(" \u2014 "),Zj=a("a"),H3o=o("OpenAIGPTLMHeadModel"),U3o=o(" (OpenAI GPT model)"),J3o=l(),F2=a("li"),hce=a("strong"),Y3o=o("opt"),K3o=o(" \u2014 "),eD=a("a"),Z3o=o("OPTForCausalLM"),e0o=o(" (OPT model)"),o0o=l(),T2=a("li"),pce=a("strong"),r0o=o("pegasus"),t0o=o(" \u2014 "),oD=a("a"),a0o=o("PegasusForCausalLM"),n0o=o(" (Pegasus model)"),s0o=l(),M2=a("li"),_ce=a("strong"),l0o=o("plbart"),i0o=o(" \u2014 "),rD=a("a"),d0o=o("PLBartForCausalLM"),c0o=o(" (PLBart model)"),f0o=l(),E2=a("li"),uce=a("strong"),m0o=o("prophetnet"),g0o=o(" \u2014 "),tD=a("a"),h0o=o("ProphetNetForCausalLM"),p0o=o(" (ProphetNet model)"),_0o=l(),C2=a("li"),bce=a("strong"),u0o=o("qdqbert"),b0o=o(" \u2014 "),aD=a("a"),v0o=o("QDQBertLMHeadModel"),F0o=o(" (QDQBert model)"),T0o=l(),w2=a("li"),vce=a("strong"),M0o=o("reformer"),E0o=o(" \u2014 "),nD=a("a"),C0o=o("ReformerModelWithLMHead"),w0o=o(" (Reformer model)"),A0o=l(),A2=a("li"),Fce=a("strong"),y0o=o("rembert"),L0o=o(" \u2014 "),sD=a("a"),x0o=o("RemBertForCausalLM"),$0o=o(" (RemBERT model)"),k0o=l(),y2=a("li"),Tce=a("strong"),S0o=o("roberta"),R0o=o(" \u2014 "),lD=a("a"),P0o=o("RobertaForCausalLM"),B0o=o(" (RoBERTa model)"),I0o=l(),L2=a("li"),Mce=a("strong"),N0o=o("roformer"),q0o=o(" \u2014 "),iD=a("a"),j0o=o("RoFormerForCausalLM"),D0o=o(" (RoFormer model)"),G0o=l(),x2=a("li"),Ece=a("strong"),O0o=o("speech_to_text_2"),V0o=o(" \u2014 "),dD=a("a"),X0o=o("Speech2Text2ForCausalLM"),z0o=o(" (Speech2Text2 model)"),W0o=l(),$2=a("li"),Cce=a("strong"),Q0o=o("transfo-xl"),H0o=o(" \u2014 "),cD=a("a"),U0o=o("TransfoXLLMHeadModel"),J0o=o(" (Transformer-XL model)"),Y0o=l(),k2=a("li"),wce=a("strong"),K0o=o("trocr"),Z0o=o(" \u2014 "),fD=a("a"),ewo=o("TrOCRForCausalLM"),owo=o(" (TrOCR model)"),rwo=l(),S2=a("li"),Ace=a("strong"),two=o("xglm"),awo=o(" \u2014 "),mD=a("a"),nwo=o("XGLMForCausalLM"),swo=o(" (XGLM model)"),lwo=l(),R2=a("li"),yce=a("strong"),iwo=o("xlm"),dwo=o(" \u2014 "),gD=a("a"),cwo=o("XLMWithLMHeadModel"),fwo=o(" (XLM model)"),mwo=l(),P2=a("li"),Lce=a("strong"),gwo=o("xlm-prophetnet"),hwo=o(" \u2014 "),hD=a("a"),pwo=o("XLMProphetNetForCausalLM"),_wo=o(" (XLMProphetNet model)"),uwo=l(),B2=a("li"),xce=a("strong"),bwo=o("xlm-roberta"),vwo=o(" \u2014 "),pD=a("a"),Fwo=o("XLMRobertaForCausalLM"),Two=o(" (XLM-RoBERTa model)"),Mwo=l(),I2=a("li"),$ce=a("strong"),Ewo=o("xlm-roberta-xl"),Cwo=o(" \u2014 "),_D=a("a"),wwo=o("XLMRobertaXLForCausalLM"),Awo=o(" (XLM-RoBERTa-XL model)"),ywo=l(),N2=a("li"),kce=a("strong"),Lwo=o("xlnet"),xwo=o(" \u2014 "),uD=a("a"),$wo=o("XLNetLMHeadModel"),kwo=o(" (XLNet model)"),Swo=l(),q2=a("p"),Rwo=o("The model is set in evaluation mode by default using "),Sce=a("code"),Pwo=o("model.eval()"),Bwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),Iwo=o("model.train()"),Nwo=l(),F(j2.$$.fragment),Jqe=l(),Bi=a("h2"),D2=a("a"),Pce=a("span"),F(MA.$$.fragment),qwo=l(),Bce=a("span"),jwo=o("AutoModelForMaskedLM"),Yqe=l(),ko=a("div"),F(EA.$$.fragment),Dwo=l(),Ii=a("p"),Gwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=a("a"),Owo=o("from_pretrained()"),Vwo=o(" class method or the "),vD=a("a"),Xwo=o("from_config()"),zwo=o(` class
method.`),Wwo=l(),CA=a("p"),Qwo=o("This class cannot be instantiated directly using "),Ice=a("code"),Hwo=o("__init__()"),Uwo=o(" (throws an error)."),Jwo=l(),st=a("div"),F(wA.$$.fragment),Ywo=l(),Nce=a("p"),Kwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zwo=l(),Ni=a("p"),eAo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),oAo=o("not"),rAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),tAo=o("from_pretrained()"),aAo=o(" to load the model weights."),nAo=l(),F(G2.$$.fragment),sAo=l(),Ze=a("div"),F(AA.$$.fragment),lAo=l(),jce=a("p"),iAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dAo=l(),ka=a("p"),cAo=o("The model class to instantiate is selected based on the "),Dce=a("code"),fAo=o("model_type"),mAo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),pAo=o("pretrained_model_name_or_path"),_Ao=o(":"),uAo=l(),Q=a("ul"),O2=a("li"),Vce=a("strong"),bAo=o("albert"),vAo=o(" \u2014 "),TD=a("a"),FAo=o("AlbertForMaskedLM"),TAo=o(" (ALBERT model)"),MAo=l(),V2=a("li"),Xce=a("strong"),EAo=o("bart"),CAo=o(" \u2014 "),MD=a("a"),wAo=o("BartForConditionalGeneration"),AAo=o(" (BART model)"),yAo=l(),X2=a("li"),zce=a("strong"),LAo=o("bert"),xAo=o(" \u2014 "),ED=a("a"),$Ao=o("BertForMaskedLM"),kAo=o(" (BERT model)"),SAo=l(),z2=a("li"),Wce=a("strong"),RAo=o("big_bird"),PAo=o(" \u2014 "),CD=a("a"),BAo=o("BigBirdForMaskedLM"),IAo=o(" (BigBird model)"),NAo=l(),W2=a("li"),Qce=a("strong"),qAo=o("camembert"),jAo=o(" \u2014 "),wD=a("a"),DAo=o("CamembertForMaskedLM"),GAo=o(" (CamemBERT model)"),OAo=l(),Q2=a("li"),Hce=a("strong"),VAo=o("convbert"),XAo=o(" \u2014 "),AD=a("a"),zAo=o("ConvBertForMaskedLM"),WAo=o(" (ConvBERT model)"),QAo=l(),H2=a("li"),Uce=a("strong"),HAo=o("data2vec-text"),UAo=o(" \u2014 "),yD=a("a"),JAo=o("Data2VecTextForMaskedLM"),YAo=o(" (Data2VecText model)"),KAo=l(),U2=a("li"),Jce=a("strong"),ZAo=o("deberta"),eyo=o(" \u2014 "),LD=a("a"),oyo=o("DebertaForMaskedLM"),ryo=o(" (DeBERTa model)"),tyo=l(),J2=a("li"),Yce=a("strong"),ayo=o("deberta-v2"),nyo=o(" \u2014 "),xD=a("a"),syo=o("DebertaV2ForMaskedLM"),lyo=o(" (DeBERTa-v2 model)"),iyo=l(),Y2=a("li"),Kce=a("strong"),dyo=o("distilbert"),cyo=o(" \u2014 "),$D=a("a"),fyo=o("DistilBertForMaskedLM"),myo=o(" (DistilBERT model)"),gyo=l(),K2=a("li"),Zce=a("strong"),hyo=o("electra"),pyo=o(" \u2014 "),kD=a("a"),_yo=o("ElectraForMaskedLM"),uyo=o(" (ELECTRA model)"),byo=l(),Z2=a("li"),efe=a("strong"),vyo=o("flaubert"),Fyo=o(" \u2014 "),SD=a("a"),Tyo=o("FlaubertWithLMHeadModel"),Myo=o(" (FlauBERT model)"),Eyo=l(),e1=a("li"),ofe=a("strong"),Cyo=o("fnet"),wyo=o(" \u2014 "),RD=a("a"),Ayo=o("FNetForMaskedLM"),yyo=o(" (FNet model)"),Lyo=l(),o1=a("li"),rfe=a("strong"),xyo=o("funnel"),$yo=o(" \u2014 "),PD=a("a"),kyo=o("FunnelForMaskedLM"),Syo=o(" (Funnel Transformer model)"),Ryo=l(),r1=a("li"),tfe=a("strong"),Pyo=o("ibert"),Byo=o(" \u2014 "),BD=a("a"),Iyo=o("IBertForMaskedLM"),Nyo=o(" (I-BERT model)"),qyo=l(),t1=a("li"),afe=a("strong"),jyo=o("layoutlm"),Dyo=o(" \u2014 "),ID=a("a"),Gyo=o("LayoutLMForMaskedLM"),Oyo=o(" (LayoutLM model)"),Vyo=l(),a1=a("li"),nfe=a("strong"),Xyo=o("longformer"),zyo=o(" \u2014 "),ND=a("a"),Wyo=o("LongformerForMaskedLM"),Qyo=o(" (Longformer model)"),Hyo=l(),n1=a("li"),sfe=a("strong"),Uyo=o("mbart"),Jyo=o(" \u2014 "),qD=a("a"),Yyo=o("MBartForConditionalGeneration"),Kyo=o(" (mBART model)"),Zyo=l(),s1=a("li"),lfe=a("strong"),eLo=o("megatron-bert"),oLo=o(" \u2014 "),jD=a("a"),rLo=o("MegatronBertForMaskedLM"),tLo=o(" (MegatronBert model)"),aLo=l(),l1=a("li"),ife=a("strong"),nLo=o("mobilebert"),sLo=o(" \u2014 "),DD=a("a"),lLo=o("MobileBertForMaskedLM"),iLo=o(" (MobileBERT model)"),dLo=l(),i1=a("li"),dfe=a("strong"),cLo=o("mpnet"),fLo=o(" \u2014 "),GD=a("a"),mLo=o("MPNetForMaskedLM"),gLo=o(" (MPNet model)"),hLo=l(),d1=a("li"),cfe=a("strong"),pLo=o("nystromformer"),_Lo=o(" \u2014 "),OD=a("a"),uLo=o("NystromformerForMaskedLM"),bLo=o(" (Nystromformer model)"),vLo=l(),c1=a("li"),ffe=a("strong"),FLo=o("perceiver"),TLo=o(" \u2014 "),VD=a("a"),MLo=o("PerceiverForMaskedLM"),ELo=o(" (Perceiver model)"),CLo=l(),f1=a("li"),mfe=a("strong"),wLo=o("qdqbert"),ALo=o(" \u2014 "),XD=a("a"),yLo=o("QDQBertForMaskedLM"),LLo=o(" (QDQBert model)"),xLo=l(),m1=a("li"),gfe=a("strong"),$Lo=o("reformer"),kLo=o(" \u2014 "),zD=a("a"),SLo=o("ReformerForMaskedLM"),RLo=o(" (Reformer model)"),PLo=l(),g1=a("li"),hfe=a("strong"),BLo=o("rembert"),ILo=o(" \u2014 "),WD=a("a"),NLo=o("RemBertForMaskedLM"),qLo=o(" (RemBERT model)"),jLo=l(),h1=a("li"),pfe=a("strong"),DLo=o("roberta"),GLo=o(" \u2014 "),QD=a("a"),OLo=o("RobertaForMaskedLM"),VLo=o(" (RoBERTa model)"),XLo=l(),p1=a("li"),_fe=a("strong"),zLo=o("roformer"),WLo=o(" \u2014 "),HD=a("a"),QLo=o("RoFormerForMaskedLM"),HLo=o(" (RoFormer model)"),ULo=l(),_1=a("li"),ufe=a("strong"),JLo=o("squeezebert"),YLo=o(" \u2014 "),UD=a("a"),KLo=o("SqueezeBertForMaskedLM"),ZLo=o(" (SqueezeBERT model)"),e8o=l(),u1=a("li"),bfe=a("strong"),o8o=o("tapas"),r8o=o(" \u2014 "),JD=a("a"),t8o=o("TapasForMaskedLM"),a8o=o(" (TAPAS model)"),n8o=l(),b1=a("li"),vfe=a("strong"),s8o=o("wav2vec2"),l8o=o(" \u2014 "),Ffe=a("code"),i8o=o("Wav2Vec2ForMaskedLM"),d8o=o(" (Wav2Vec2 model)"),c8o=l(),v1=a("li"),Tfe=a("strong"),f8o=o("xlm"),m8o=o(" \u2014 "),YD=a("a"),g8o=o("XLMWithLMHeadModel"),h8o=o(" (XLM model)"),p8o=l(),F1=a("li"),Mfe=a("strong"),_8o=o("xlm-roberta"),u8o=o(" \u2014 "),KD=a("a"),b8o=o("XLMRobertaForMaskedLM"),v8o=o(" (XLM-RoBERTa model)"),F8o=l(),T1=a("li"),Efe=a("strong"),T8o=o("xlm-roberta-xl"),M8o=o(" \u2014 "),ZD=a("a"),E8o=o("XLMRobertaXLForMaskedLM"),C8o=o(" (XLM-RoBERTa-XL model)"),w8o=l(),M1=a("li"),Cfe=a("strong"),A8o=o("yoso"),y8o=o(" \u2014 "),eG=a("a"),L8o=o("YosoForMaskedLM"),x8o=o(" (YOSO model)"),$8o=l(),E1=a("p"),k8o=o("The model is set in evaluation mode by default using "),wfe=a("code"),S8o=o("model.eval()"),R8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),P8o=o("model.train()"),B8o=l(),F(C1.$$.fragment),Kqe=l(),qi=a("h2"),w1=a("a"),yfe=a("span"),F(yA.$$.fragment),I8o=l(),Lfe=a("span"),N8o=o("AutoModelForSeq2SeqLM"),Zqe=l(),So=a("div"),F(LA.$$.fragment),q8o=l(),ji=a("p"),j8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),D8o=o("from_pretrained()"),G8o=o(" class method or the "),rG=a("a"),O8o=o("from_config()"),V8o=o(` class
method.`),X8o=l(),xA=a("p"),z8o=o("This class cannot be instantiated directly using "),xfe=a("code"),W8o=o("__init__()"),Q8o=o(" (throws an error)."),H8o=l(),lt=a("div"),F($A.$$.fragment),U8o=l(),$fe=a("p"),J8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y8o=l(),Di=a("p"),K8o=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),Z8o=o("not"),exo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),oxo=o("from_pretrained()"),rxo=o(" to load the model weights."),txo=l(),F(A1.$$.fragment),axo=l(),eo=a("div"),F(kA.$$.fragment),nxo=l(),Sfe=a("p"),sxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lxo=l(),Sa=a("p"),ixo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),dxo=o("model_type"),cxo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),fxo=o("pretrained_model_name_or_path"),mxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(":"),pxo=l(),pe=a("ul"),y1=a("li"),Ife=a("strong"),_xo=o("bart"),uxo=o(" \u2014 "),aG=a("a"),bxo=o("BartForConditionalGeneration"),vxo=o(" (BART model)"),Fxo=l(),L1=a("li"),Nfe=a("strong"),Txo=o("bigbird_pegasus"),Mxo=o(" \u2014 "),nG=a("a"),Exo=o("BigBirdPegasusForConditionalGeneration"),Cxo=o(" (BigBirdPegasus model)"),wxo=l(),x1=a("li"),qfe=a("strong"),Axo=o("blenderbot"),yxo=o(" \u2014 "),sG=a("a"),Lxo=o("BlenderbotForConditionalGeneration"),xxo=o(" (Blenderbot model)"),$xo=l(),$1=a("li"),jfe=a("strong"),kxo=o("blenderbot-small"),Sxo=o(" \u2014 "),lG=a("a"),Rxo=o("BlenderbotSmallForConditionalGeneration"),Pxo=o(" (BlenderbotSmall model)"),Bxo=l(),k1=a("li"),Dfe=a("strong"),Ixo=o("encoder-decoder"),Nxo=o(" \u2014 "),iG=a("a"),qxo=o("EncoderDecoderModel"),jxo=o(" (Encoder decoder model)"),Dxo=l(),S1=a("li"),Gfe=a("strong"),Gxo=o("fsmt"),Oxo=o(" \u2014 "),dG=a("a"),Vxo=o("FSMTForConditionalGeneration"),Xxo=o(" (FairSeq Machine-Translation model)"),zxo=l(),R1=a("li"),Ofe=a("strong"),Wxo=o("led"),Qxo=o(" \u2014 "),cG=a("a"),Hxo=o("LEDForConditionalGeneration"),Uxo=o(" (LED model)"),Jxo=l(),P1=a("li"),Vfe=a("strong"),Yxo=o("longt5"),Kxo=o(" \u2014 "),fG=a("a"),Zxo=o("LongT5ForConditionalGeneration"),e$o=o(" (LongT5 model)"),o$o=l(),B1=a("li"),Xfe=a("strong"),r$o=o("m2m_100"),t$o=o(" \u2014 "),mG=a("a"),a$o=o("M2M100ForConditionalGeneration"),n$o=o(" (M2M100 model)"),s$o=l(),I1=a("li"),zfe=a("strong"),l$o=o("marian"),i$o=o(" \u2014 "),gG=a("a"),d$o=o("MarianMTModel"),c$o=o(" (Marian model)"),f$o=l(),N1=a("li"),Wfe=a("strong"),m$o=o("mbart"),g$o=o(" \u2014 "),hG=a("a"),h$o=o("MBartForConditionalGeneration"),p$o=o(" (mBART model)"),_$o=l(),q1=a("li"),Qfe=a("strong"),u$o=o("mt5"),b$o=o(" \u2014 "),pG=a("a"),v$o=o("MT5ForConditionalGeneration"),F$o=o(" (mT5 model)"),T$o=l(),j1=a("li"),Hfe=a("strong"),M$o=o("pegasus"),E$o=o(" \u2014 "),_G=a("a"),C$o=o("PegasusForConditionalGeneration"),w$o=o(" (Pegasus model)"),A$o=l(),D1=a("li"),Ufe=a("strong"),y$o=o("plbart"),L$o=o(" \u2014 "),uG=a("a"),x$o=o("PLBartForConditionalGeneration"),$$o=o(" (PLBart model)"),k$o=l(),G1=a("li"),Jfe=a("strong"),S$o=o("prophetnet"),R$o=o(" \u2014 "),bG=a("a"),P$o=o("ProphetNetForConditionalGeneration"),B$o=o(" (ProphetNet model)"),I$o=l(),O1=a("li"),Yfe=a("strong"),N$o=o("t5"),q$o=o(" \u2014 "),vG=a("a"),j$o=o("T5ForConditionalGeneration"),D$o=o(" (T5 model)"),G$o=l(),V1=a("li"),Kfe=a("strong"),O$o=o("xlm-prophetnet"),V$o=o(" \u2014 "),FG=a("a"),X$o=o("XLMProphetNetForConditionalGeneration"),z$o=o(" (XLMProphetNet model)"),W$o=l(),X1=a("p"),Q$o=o("The model is set in evaluation mode by default using "),Zfe=a("code"),H$o=o("model.eval()"),U$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),J$o=o("model.train()"),Y$o=l(),F(z1.$$.fragment),eje=l(),Gi=a("h2"),W1=a("a"),ome=a("span"),F(SA.$$.fragment),K$o=l(),rme=a("span"),Z$o=o("AutoModelForSequenceClassification"),oje=l(),Ro=a("div"),F(RA.$$.fragment),eko=l(),Oi=a("p"),oko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TG=a("a"),rko=o("from_pretrained()"),tko=o(" class method or the "),MG=a("a"),ako=o("from_config()"),nko=o(` class
method.`),sko=l(),PA=a("p"),lko=o("This class cannot be instantiated directly using "),tme=a("code"),iko=o("__init__()"),dko=o(" (throws an error)."),cko=l(),it=a("div"),F(BA.$$.fragment),fko=l(),ame=a("p"),mko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gko=l(),Vi=a("p"),hko=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),pko=o("not"),_ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),uko=o("from_pretrained()"),bko=o(" to load the model weights."),vko=l(),F(Q1.$$.fragment),Fko=l(),oo=a("div"),F(IA.$$.fragment),Tko=l(),sme=a("p"),Mko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eko=l(),Ra=a("p"),Cko=o("The model class to instantiate is selected based on the "),lme=a("code"),wko=o("model_type"),Ako=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),yko=o("pretrained_model_name_or_path"),Lko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),xko=o("pretrained_model_name_or_path"),$ko=o(":"),kko=l(),N=a("ul"),H1=a("li"),cme=a("strong"),Sko=o("albert"),Rko=o(" \u2014 "),CG=a("a"),Pko=o("AlbertForSequenceClassification"),Bko=o(" (ALBERT model)"),Iko=l(),U1=a("li"),fme=a("strong"),Nko=o("bart"),qko=o(" \u2014 "),wG=a("a"),jko=o("BartForSequenceClassification"),Dko=o(" (BART model)"),Gko=l(),J1=a("li"),mme=a("strong"),Oko=o("bert"),Vko=o(" \u2014 "),AG=a("a"),Xko=o("BertForSequenceClassification"),zko=o(" (BERT model)"),Wko=l(),Y1=a("li"),gme=a("strong"),Qko=o("big_bird"),Hko=o(" \u2014 "),yG=a("a"),Uko=o("BigBirdForSequenceClassification"),Jko=o(" (BigBird model)"),Yko=l(),K1=a("li"),hme=a("strong"),Kko=o("bigbird_pegasus"),Zko=o(" \u2014 "),LG=a("a"),eSo=o("BigBirdPegasusForSequenceClassification"),oSo=o(" (BigBirdPegasus model)"),rSo=l(),Z1=a("li"),pme=a("strong"),tSo=o("camembert"),aSo=o(" \u2014 "),xG=a("a"),nSo=o("CamembertForSequenceClassification"),sSo=o(" (CamemBERT model)"),lSo=l(),eb=a("li"),_me=a("strong"),iSo=o("canine"),dSo=o(" \u2014 "),$G=a("a"),cSo=o("CanineForSequenceClassification"),fSo=o(" (Canine model)"),mSo=l(),ob=a("li"),ume=a("strong"),gSo=o("convbert"),hSo=o(" \u2014 "),kG=a("a"),pSo=o("ConvBertForSequenceClassification"),_So=o(" (ConvBERT model)"),uSo=l(),rb=a("li"),bme=a("strong"),bSo=o("ctrl"),vSo=o(" \u2014 "),SG=a("a"),FSo=o("CTRLForSequenceClassification"),TSo=o(" (CTRL model)"),MSo=l(),tb=a("li"),vme=a("strong"),ESo=o("data2vec-text"),CSo=o(" \u2014 "),RG=a("a"),wSo=o("Data2VecTextForSequenceClassification"),ASo=o(" (Data2VecText model)"),ySo=l(),ab=a("li"),Fme=a("strong"),LSo=o("deberta"),xSo=o(" \u2014 "),PG=a("a"),$So=o("DebertaForSequenceClassification"),kSo=o(" (DeBERTa model)"),SSo=l(),nb=a("li"),Tme=a("strong"),RSo=o("deberta-v2"),PSo=o(" \u2014 "),BG=a("a"),BSo=o("DebertaV2ForSequenceClassification"),ISo=o(" (DeBERTa-v2 model)"),NSo=l(),sb=a("li"),Mme=a("strong"),qSo=o("distilbert"),jSo=o(" \u2014 "),IG=a("a"),DSo=o("DistilBertForSequenceClassification"),GSo=o(" (DistilBERT model)"),OSo=l(),lb=a("li"),Eme=a("strong"),VSo=o("electra"),XSo=o(" \u2014 "),NG=a("a"),zSo=o("ElectraForSequenceClassification"),WSo=o(" (ELECTRA model)"),QSo=l(),ib=a("li"),Cme=a("strong"),HSo=o("flaubert"),USo=o(" \u2014 "),qG=a("a"),JSo=o("FlaubertForSequenceClassification"),YSo=o(" (FlauBERT model)"),KSo=l(),db=a("li"),wme=a("strong"),ZSo=o("fnet"),eRo=o(" \u2014 "),jG=a("a"),oRo=o("FNetForSequenceClassification"),rRo=o(" (FNet model)"),tRo=l(),cb=a("li"),Ame=a("strong"),aRo=o("funnel"),nRo=o(" \u2014 "),DG=a("a"),sRo=o("FunnelForSequenceClassification"),lRo=o(" (Funnel Transformer model)"),iRo=l(),fb=a("li"),yme=a("strong"),dRo=o("gpt2"),cRo=o(" \u2014 "),GG=a("a"),fRo=o("GPT2ForSequenceClassification"),mRo=o(" (OpenAI GPT-2 model)"),gRo=l(),mb=a("li"),Lme=a("strong"),hRo=o("gpt_neo"),pRo=o(" \u2014 "),OG=a("a"),_Ro=o("GPTNeoForSequenceClassification"),uRo=o(" (GPT Neo model)"),bRo=l(),gb=a("li"),xme=a("strong"),vRo=o("gptj"),FRo=o(" \u2014 "),VG=a("a"),TRo=o("GPTJForSequenceClassification"),MRo=o(" (GPT-J model)"),ERo=l(),hb=a("li"),$me=a("strong"),CRo=o("ibert"),wRo=o(" \u2014 "),XG=a("a"),ARo=o("IBertForSequenceClassification"),yRo=o(" (I-BERT model)"),LRo=l(),pb=a("li"),kme=a("strong"),xRo=o("layoutlm"),$Ro=o(" \u2014 "),zG=a("a"),kRo=o("LayoutLMForSequenceClassification"),SRo=o(" (LayoutLM model)"),RRo=l(),_b=a("li"),Sme=a("strong"),PRo=o("layoutlmv2"),BRo=o(" \u2014 "),WG=a("a"),IRo=o("LayoutLMv2ForSequenceClassification"),NRo=o(" (LayoutLMv2 model)"),qRo=l(),ub=a("li"),Rme=a("strong"),jRo=o("layoutlmv3"),DRo=o(" \u2014 "),QG=a("a"),GRo=o("LayoutLMv3ForSequenceClassification"),ORo=o(" (LayoutLMv3 model)"),VRo=l(),bb=a("li"),Pme=a("strong"),XRo=o("led"),zRo=o(" \u2014 "),HG=a("a"),WRo=o("LEDForSequenceClassification"),QRo=o(" (LED model)"),HRo=l(),vb=a("li"),Bme=a("strong"),URo=o("longformer"),JRo=o(" \u2014 "),UG=a("a"),YRo=o("LongformerForSequenceClassification"),KRo=o(" (Longformer model)"),ZRo=l(),Fb=a("li"),Ime=a("strong"),ePo=o("mbart"),oPo=o(" \u2014 "),JG=a("a"),rPo=o("MBartForSequenceClassification"),tPo=o(" (mBART model)"),aPo=l(),Tb=a("li"),Nme=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),YG=a("a"),lPo=o("MegatronBertForSequenceClassification"),iPo=o(" (MegatronBert model)"),dPo=l(),Mb=a("li"),qme=a("strong"),cPo=o("mobilebert"),fPo=o(" \u2014 "),KG=a("a"),mPo=o("MobileBertForSequenceClassification"),gPo=o(" (MobileBERT model)"),hPo=l(),Eb=a("li"),jme=a("strong"),pPo=o("mpnet"),_Po=o(" \u2014 "),ZG=a("a"),uPo=o("MPNetForSequenceClassification"),bPo=o(" (MPNet model)"),vPo=l(),Cb=a("li"),Dme=a("strong"),FPo=o("nystromformer"),TPo=o(" \u2014 "),eO=a("a"),MPo=o("NystromformerForSequenceClassification"),EPo=o(" (Nystromformer model)"),CPo=l(),wb=a("li"),Gme=a("strong"),wPo=o("openai-gpt"),APo=o(" \u2014 "),oO=a("a"),yPo=o("OpenAIGPTForSequenceClassification"),LPo=o(" (OpenAI GPT model)"),xPo=l(),Ab=a("li"),Ome=a("strong"),$Po=o("perceiver"),kPo=o(" \u2014 "),rO=a("a"),SPo=o("PerceiverForSequenceClassification"),RPo=o(" (Perceiver model)"),PPo=l(),yb=a("li"),Vme=a("strong"),BPo=o("plbart"),IPo=o(" \u2014 "),tO=a("a"),NPo=o("PLBartForSequenceClassification"),qPo=o(" (PLBart model)"),jPo=l(),Lb=a("li"),Xme=a("strong"),DPo=o("qdqbert"),GPo=o(" \u2014 "),aO=a("a"),OPo=o("QDQBertForSequenceClassification"),VPo=o(" (QDQBert model)"),XPo=l(),xb=a("li"),zme=a("strong"),zPo=o("reformer"),WPo=o(" \u2014 "),nO=a("a"),QPo=o("ReformerForSequenceClassification"),HPo=o(" (Reformer model)"),UPo=l(),$b=a("li"),Wme=a("strong"),JPo=o("rembert"),YPo=o(" \u2014 "),sO=a("a"),KPo=o("RemBertForSequenceClassification"),ZPo=o(" (RemBERT model)"),eBo=l(),kb=a("li"),Qme=a("strong"),oBo=o("roberta"),rBo=o(" \u2014 "),lO=a("a"),tBo=o("RobertaForSequenceClassification"),aBo=o(" (RoBERTa model)"),nBo=l(),Sb=a("li"),Hme=a("strong"),sBo=o("roformer"),lBo=o(" \u2014 "),iO=a("a"),iBo=o("RoFormerForSequenceClassification"),dBo=o(" (RoFormer model)"),cBo=l(),Rb=a("li"),Ume=a("strong"),fBo=o("squeezebert"),mBo=o(" \u2014 "),dO=a("a"),gBo=o("SqueezeBertForSequenceClassification"),hBo=o(" (SqueezeBERT model)"),pBo=l(),Pb=a("li"),Jme=a("strong"),_Bo=o("tapas"),uBo=o(" \u2014 "),cO=a("a"),bBo=o("TapasForSequenceClassification"),vBo=o(" (TAPAS model)"),FBo=l(),Bb=a("li"),Yme=a("strong"),TBo=o("transfo-xl"),MBo=o(" \u2014 "),fO=a("a"),EBo=o("TransfoXLForSequenceClassification"),CBo=o(" (Transformer-XL model)"),wBo=l(),Ib=a("li"),Kme=a("strong"),ABo=o("xlm"),yBo=o(" \u2014 "),mO=a("a"),LBo=o("XLMForSequenceClassification"),xBo=o(" (XLM model)"),$Bo=l(),Nb=a("li"),Zme=a("strong"),kBo=o("xlm-roberta"),SBo=o(" \u2014 "),gO=a("a"),RBo=o("XLMRobertaForSequenceClassification"),PBo=o(" (XLM-RoBERTa model)"),BBo=l(),qb=a("li"),ege=a("strong"),IBo=o("xlm-roberta-xl"),NBo=o(" \u2014 "),hO=a("a"),qBo=o("XLMRobertaXLForSequenceClassification"),jBo=o(" (XLM-RoBERTa-XL model)"),DBo=l(),jb=a("li"),oge=a("strong"),GBo=o("xlnet"),OBo=o(" \u2014 "),pO=a("a"),VBo=o("XLNetForSequenceClassification"),XBo=o(" (XLNet model)"),zBo=l(),Db=a("li"),rge=a("strong"),WBo=o("yoso"),QBo=o(" \u2014 "),_O=a("a"),HBo=o("YosoForSequenceClassification"),UBo=o(" (YOSO model)"),JBo=l(),Gb=a("p"),YBo=o("The model is set in evaluation mode by default using "),tge=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),eIo=o("model.train()"),oIo=l(),F(Ob.$$.fragment),rje=l(),Xi=a("h2"),Vb=a("a"),nge=a("span"),F(NA.$$.fragment),rIo=l(),sge=a("span"),tIo=o("AutoModelForMultipleChoice"),tje=l(),Po=a("div"),F(qA.$$.fragment),aIo=l(),zi=a("p"),nIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uO=a("a"),sIo=o("from_pretrained()"),lIo=o(" class method or the "),bO=a("a"),iIo=o("from_config()"),dIo=o(` class
method.`),cIo=l(),jA=a("p"),fIo=o("This class cannot be instantiated directly using "),lge=a("code"),mIo=o("__init__()"),gIo=o(" (throws an error)."),hIo=l(),dt=a("div"),F(DA.$$.fragment),pIo=l(),ige=a("p"),_Io=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uIo=l(),Wi=a("p"),bIo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),vIo=o("not"),FIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),TIo=o("from_pretrained()"),MIo=o(" to load the model weights."),EIo=l(),F(Xb.$$.fragment),CIo=l(),ro=a("div"),F(GA.$$.fragment),wIo=l(),cge=a("p"),AIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yIo=l(),Pa=a("p"),LIo=o("The model class to instantiate is selected based on the "),fge=a("code"),xIo=o("model_type"),$Io=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),kIo=o("pretrained_model_name_or_path"),SIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),RIo=o("pretrained_model_name_or_path"),PIo=o(":"),BIo=l(),K=a("ul"),zb=a("li"),hge=a("strong"),IIo=o("albert"),NIo=o(" \u2014 "),FO=a("a"),qIo=o("AlbertForMultipleChoice"),jIo=o(" (ALBERT model)"),DIo=l(),Wb=a("li"),pge=a("strong"),GIo=o("bert"),OIo=o(" \u2014 "),TO=a("a"),VIo=o("BertForMultipleChoice"),XIo=o(" (BERT model)"),zIo=l(),Qb=a("li"),_ge=a("strong"),WIo=o("big_bird"),QIo=o(" \u2014 "),MO=a("a"),HIo=o("BigBirdForMultipleChoice"),UIo=o(" (BigBird model)"),JIo=l(),Hb=a("li"),uge=a("strong"),YIo=o("camembert"),KIo=o(" \u2014 "),EO=a("a"),ZIo=o("CamembertForMultipleChoice"),eNo=o(" (CamemBERT model)"),oNo=l(),Ub=a("li"),bge=a("strong"),rNo=o("canine"),tNo=o(" \u2014 "),CO=a("a"),aNo=o("CanineForMultipleChoice"),nNo=o(" (Canine model)"),sNo=l(),Jb=a("li"),vge=a("strong"),lNo=o("convbert"),iNo=o(" \u2014 "),wO=a("a"),dNo=o("ConvBertForMultipleChoice"),cNo=o(" (ConvBERT model)"),fNo=l(),Yb=a("li"),Fge=a("strong"),mNo=o("data2vec-text"),gNo=o(" \u2014 "),AO=a("a"),hNo=o("Data2VecTextForMultipleChoice"),pNo=o(" (Data2VecText model)"),_No=l(),Kb=a("li"),Tge=a("strong"),uNo=o("deberta-v2"),bNo=o(" \u2014 "),yO=a("a"),vNo=o("DebertaV2ForMultipleChoice"),FNo=o(" (DeBERTa-v2 model)"),TNo=l(),Zb=a("li"),Mge=a("strong"),MNo=o("distilbert"),ENo=o(" \u2014 "),LO=a("a"),CNo=o("DistilBertForMultipleChoice"),wNo=o(" (DistilBERT model)"),ANo=l(),ev=a("li"),Ege=a("strong"),yNo=o("electra"),LNo=o(" \u2014 "),xO=a("a"),xNo=o("ElectraForMultipleChoice"),$No=o(" (ELECTRA model)"),kNo=l(),ov=a("li"),Cge=a("strong"),SNo=o("flaubert"),RNo=o(" \u2014 "),$O=a("a"),PNo=o("FlaubertForMultipleChoice"),BNo=o(" (FlauBERT model)"),INo=l(),rv=a("li"),wge=a("strong"),NNo=o("fnet"),qNo=o(" \u2014 "),kO=a("a"),jNo=o("FNetForMultipleChoice"),DNo=o(" (FNet model)"),GNo=l(),tv=a("li"),Age=a("strong"),ONo=o("funnel"),VNo=o(" \u2014 "),SO=a("a"),XNo=o("FunnelForMultipleChoice"),zNo=o(" (Funnel Transformer model)"),WNo=l(),av=a("li"),yge=a("strong"),QNo=o("ibert"),HNo=o(" \u2014 "),RO=a("a"),UNo=o("IBertForMultipleChoice"),JNo=o(" (I-BERT model)"),YNo=l(),nv=a("li"),Lge=a("strong"),KNo=o("longformer"),ZNo=o(" \u2014 "),PO=a("a"),eqo=o("LongformerForMultipleChoice"),oqo=o(" (Longformer model)"),rqo=l(),sv=a("li"),xge=a("strong"),tqo=o("megatron-bert"),aqo=o(" \u2014 "),BO=a("a"),nqo=o("MegatronBertForMultipleChoice"),sqo=o(" (MegatronBert model)"),lqo=l(),lv=a("li"),$ge=a("strong"),iqo=o("mobilebert"),dqo=o(" \u2014 "),IO=a("a"),cqo=o("MobileBertForMultipleChoice"),fqo=o(" (MobileBERT model)"),mqo=l(),iv=a("li"),kge=a("strong"),gqo=o("mpnet"),hqo=o(" \u2014 "),NO=a("a"),pqo=o("MPNetForMultipleChoice"),_qo=o(" (MPNet model)"),uqo=l(),dv=a("li"),Sge=a("strong"),bqo=o("nystromformer"),vqo=o(" \u2014 "),qO=a("a"),Fqo=o("NystromformerForMultipleChoice"),Tqo=o(" (Nystromformer model)"),Mqo=l(),cv=a("li"),Rge=a("strong"),Eqo=o("qdqbert"),Cqo=o(" \u2014 "),jO=a("a"),wqo=o("QDQBertForMultipleChoice"),Aqo=o(" (QDQBert model)"),yqo=l(),fv=a("li"),Pge=a("strong"),Lqo=o("rembert"),xqo=o(" \u2014 "),DO=a("a"),$qo=o("RemBertForMultipleChoice"),kqo=o(" (RemBERT model)"),Sqo=l(),mv=a("li"),Bge=a("strong"),Rqo=o("roberta"),Pqo=o(" \u2014 "),GO=a("a"),Bqo=o("RobertaForMultipleChoice"),Iqo=o(" (RoBERTa model)"),Nqo=l(),gv=a("li"),Ige=a("strong"),qqo=o("roformer"),jqo=o(" \u2014 "),OO=a("a"),Dqo=o("RoFormerForMultipleChoice"),Gqo=o(" (RoFormer model)"),Oqo=l(),hv=a("li"),Nge=a("strong"),Vqo=o("squeezebert"),Xqo=o(" \u2014 "),VO=a("a"),zqo=o("SqueezeBertForMultipleChoice"),Wqo=o(" (SqueezeBERT model)"),Qqo=l(),pv=a("li"),qge=a("strong"),Hqo=o("xlm"),Uqo=o(" \u2014 "),XO=a("a"),Jqo=o("XLMForMultipleChoice"),Yqo=o(" (XLM model)"),Kqo=l(),_v=a("li"),jge=a("strong"),Zqo=o("xlm-roberta"),ejo=o(" \u2014 "),zO=a("a"),ojo=o("XLMRobertaForMultipleChoice"),rjo=o(" (XLM-RoBERTa model)"),tjo=l(),uv=a("li"),Dge=a("strong"),ajo=o("xlm-roberta-xl"),njo=o(" \u2014 "),WO=a("a"),sjo=o("XLMRobertaXLForMultipleChoice"),ljo=o(" (XLM-RoBERTa-XL model)"),ijo=l(),bv=a("li"),Gge=a("strong"),djo=o("xlnet"),cjo=o(" \u2014 "),QO=a("a"),fjo=o("XLNetForMultipleChoice"),mjo=o(" (XLNet model)"),gjo=l(),vv=a("li"),Oge=a("strong"),hjo=o("yoso"),pjo=o(" \u2014 "),HO=a("a"),_jo=o("YosoForMultipleChoice"),ujo=o(" (YOSO model)"),bjo=l(),Fv=a("p"),vjo=o("The model is set in evaluation mode by default using "),Vge=a("code"),Fjo=o("model.eval()"),Tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),Mjo=o("model.train()"),Ejo=l(),F(Tv.$$.fragment),aje=l(),Qi=a("h2"),Mv=a("a"),zge=a("span"),F(OA.$$.fragment),Cjo=l(),Wge=a("span"),wjo=o("AutoModelForNextSentencePrediction"),nje=l(),Bo=a("div"),F(VA.$$.fragment),Ajo=l(),Hi=a("p"),yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UO=a("a"),Ljo=o("from_pretrained()"),xjo=o(" class method or the "),JO=a("a"),$jo=o("from_config()"),kjo=o(` class
method.`),Sjo=l(),XA=a("p"),Rjo=o("This class cannot be instantiated directly using "),Qge=a("code"),Pjo=o("__init__()"),Bjo=o(" (throws an error)."),Ijo=l(),ct=a("div"),F(zA.$$.fragment),Njo=l(),Hge=a("p"),qjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jjo=l(),Ui=a("p"),Djo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),Gjo=o("not"),Ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),Vjo=o("from_pretrained()"),Xjo=o(" to load the model weights."),zjo=l(),F(Ev.$$.fragment),Wjo=l(),to=a("div"),F(WA.$$.fragment),Qjo=l(),Jge=a("p"),Hjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ujo=l(),Ba=a("p"),Jjo=o("The model class to instantiate is selected based on the "),Yge=a("code"),Yjo=o("model_type"),Kjo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),oDo=o("pretrained_model_name_or_path"),rDo=o(":"),tDo=l(),Yr=a("ul"),Cv=a("li"),ehe=a("strong"),aDo=o("bert"),nDo=o(" \u2014 "),KO=a("a"),sDo=o("BertForNextSentencePrediction"),lDo=o(" (BERT model)"),iDo=l(),wv=a("li"),ohe=a("strong"),dDo=o("fnet"),cDo=o(" \u2014 "),ZO=a("a"),fDo=o("FNetForNextSentencePrediction"),mDo=o(" (FNet model)"),gDo=l(),Av=a("li"),rhe=a("strong"),hDo=o("megatron-bert"),pDo=o(" \u2014 "),eV=a("a"),_Do=o("MegatronBertForNextSentencePrediction"),uDo=o(" (MegatronBert model)"),bDo=l(),yv=a("li"),the=a("strong"),vDo=o("mobilebert"),FDo=o(" \u2014 "),oV=a("a"),TDo=o("MobileBertForNextSentencePrediction"),MDo=o(" (MobileBERT model)"),EDo=l(),Lv=a("li"),ahe=a("strong"),CDo=o("qdqbert"),wDo=o(" \u2014 "),rV=a("a"),ADo=o("QDQBertForNextSentencePrediction"),yDo=o(" (QDQBert model)"),LDo=l(),xv=a("p"),xDo=o("The model is set in evaluation mode by default using "),nhe=a("code"),$Do=o("model.eval()"),kDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),SDo=o("model.train()"),RDo=l(),F($v.$$.fragment),sje=l(),Ji=a("h2"),kv=a("a"),lhe=a("span"),F(QA.$$.fragment),PDo=l(),ihe=a("span"),BDo=o("AutoModelForTokenClassification"),lje=l(),Io=a("div"),F(HA.$$.fragment),IDo=l(),Yi=a("p"),NDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tV=a("a"),qDo=o("from_pretrained()"),jDo=o(" class method or the "),aV=a("a"),DDo=o("from_config()"),GDo=o(` class
method.`),ODo=l(),UA=a("p"),VDo=o("This class cannot be instantiated directly using "),dhe=a("code"),XDo=o("__init__()"),zDo=o(" (throws an error)."),WDo=l(),ft=a("div"),F(JA.$$.fragment),QDo=l(),che=a("p"),HDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UDo=l(),Ki=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),ZDo=o("from_pretrained()"),eGo=o(" to load the model weights."),oGo=l(),F(Sv.$$.fragment),rGo=l(),ao=a("div"),F(YA.$$.fragment),tGo=l(),mhe=a("p"),aGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nGo=l(),Ia=a("p"),sGo=o("The model class to instantiate is selected based on the "),ghe=a("code"),lGo=o("model_type"),iGo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),dGo=o("pretrained_model_name_or_path"),cGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(":"),gGo=l(),H=a("ul"),Rv=a("li"),_he=a("strong"),hGo=o("albert"),pGo=o(" \u2014 "),sV=a("a"),_Go=o("AlbertForTokenClassification"),uGo=o(" (ALBERT model)"),bGo=l(),Pv=a("li"),uhe=a("strong"),vGo=o("bert"),FGo=o(" \u2014 "),lV=a("a"),TGo=o("BertForTokenClassification"),MGo=o(" (BERT model)"),EGo=l(),Bv=a("li"),bhe=a("strong"),CGo=o("big_bird"),wGo=o(" \u2014 "),iV=a("a"),AGo=o("BigBirdForTokenClassification"),yGo=o(" (BigBird model)"),LGo=l(),Iv=a("li"),vhe=a("strong"),xGo=o("camembert"),$Go=o(" \u2014 "),dV=a("a"),kGo=o("CamembertForTokenClassification"),SGo=o(" (CamemBERT model)"),RGo=l(),Nv=a("li"),Fhe=a("strong"),PGo=o("canine"),BGo=o(" \u2014 "),cV=a("a"),IGo=o("CanineForTokenClassification"),NGo=o(" (Canine model)"),qGo=l(),qv=a("li"),The=a("strong"),jGo=o("convbert"),DGo=o(" \u2014 "),fV=a("a"),GGo=o("ConvBertForTokenClassification"),OGo=o(" (ConvBERT model)"),VGo=l(),jv=a("li"),Mhe=a("strong"),XGo=o("data2vec-text"),zGo=o(" \u2014 "),mV=a("a"),WGo=o("Data2VecTextForTokenClassification"),QGo=o(" (Data2VecText model)"),HGo=l(),Dv=a("li"),Ehe=a("strong"),UGo=o("deberta"),JGo=o(" \u2014 "),gV=a("a"),YGo=o("DebertaForTokenClassification"),KGo=o(" (DeBERTa model)"),ZGo=l(),Gv=a("li"),Che=a("strong"),eOo=o("deberta-v2"),oOo=o(" \u2014 "),hV=a("a"),rOo=o("DebertaV2ForTokenClassification"),tOo=o(" (DeBERTa-v2 model)"),aOo=l(),Ov=a("li"),whe=a("strong"),nOo=o("distilbert"),sOo=o(" \u2014 "),pV=a("a"),lOo=o("DistilBertForTokenClassification"),iOo=o(" (DistilBERT model)"),dOo=l(),Vv=a("li"),Ahe=a("strong"),cOo=o("electra"),fOo=o(" \u2014 "),_V=a("a"),mOo=o("ElectraForTokenClassification"),gOo=o(" (ELECTRA model)"),hOo=l(),Xv=a("li"),yhe=a("strong"),pOo=o("flaubert"),_Oo=o(" \u2014 "),uV=a("a"),uOo=o("FlaubertForTokenClassification"),bOo=o(" (FlauBERT model)"),vOo=l(),zv=a("li"),Lhe=a("strong"),FOo=o("fnet"),TOo=o(" \u2014 "),bV=a("a"),MOo=o("FNetForTokenClassification"),EOo=o(" (FNet model)"),COo=l(),Wv=a("li"),xhe=a("strong"),wOo=o("funnel"),AOo=o(" \u2014 "),vV=a("a"),yOo=o("FunnelForTokenClassification"),LOo=o(" (Funnel Transformer model)"),xOo=l(),Qv=a("li"),$he=a("strong"),$Oo=o("gpt2"),kOo=o(" \u2014 "),FV=a("a"),SOo=o("GPT2ForTokenClassification"),ROo=o(" (OpenAI GPT-2 model)"),POo=l(),Hv=a("li"),khe=a("strong"),BOo=o("ibert"),IOo=o(" \u2014 "),TV=a("a"),NOo=o("IBertForTokenClassification"),qOo=o(" (I-BERT model)"),jOo=l(),Uv=a("li"),She=a("strong"),DOo=o("layoutlm"),GOo=o(" \u2014 "),MV=a("a"),OOo=o("LayoutLMForTokenClassification"),VOo=o(" (LayoutLM model)"),XOo=l(),Jv=a("li"),Rhe=a("strong"),zOo=o("layoutlmv2"),WOo=o(" \u2014 "),EV=a("a"),QOo=o("LayoutLMv2ForTokenClassification"),HOo=o(" (LayoutLMv2 model)"),UOo=l(),Yv=a("li"),Phe=a("strong"),JOo=o("layoutlmv3"),YOo=o(" \u2014 "),CV=a("a"),KOo=o("LayoutLMv3ForTokenClassification"),ZOo=o(" (LayoutLMv3 model)"),eVo=l(),Kv=a("li"),Bhe=a("strong"),oVo=o("longformer"),rVo=o(" \u2014 "),wV=a("a"),tVo=o("LongformerForTokenClassification"),aVo=o(" (Longformer model)"),nVo=l(),Zv=a("li"),Ihe=a("strong"),sVo=o("megatron-bert"),lVo=o(" \u2014 "),AV=a("a"),iVo=o("MegatronBertForTokenClassification"),dVo=o(" (MegatronBert model)"),cVo=l(),eF=a("li"),Nhe=a("strong"),fVo=o("mobilebert"),mVo=o(" \u2014 "),yV=a("a"),gVo=o("MobileBertForTokenClassification"),hVo=o(" (MobileBERT model)"),pVo=l(),oF=a("li"),qhe=a("strong"),_Vo=o("mpnet"),uVo=o(" \u2014 "),LV=a("a"),bVo=o("MPNetForTokenClassification"),vVo=o(" (MPNet model)"),FVo=l(),rF=a("li"),jhe=a("strong"),TVo=o("nystromformer"),MVo=o(" \u2014 "),xV=a("a"),EVo=o("NystromformerForTokenClassification"),CVo=o(" (Nystromformer model)"),wVo=l(),tF=a("li"),Dhe=a("strong"),AVo=o("qdqbert"),yVo=o(" \u2014 "),$V=a("a"),LVo=o("QDQBertForTokenClassification"),xVo=o(" (QDQBert model)"),$Vo=l(),aF=a("li"),Ghe=a("strong"),kVo=o("rembert"),SVo=o(" \u2014 "),kV=a("a"),RVo=o("RemBertForTokenClassification"),PVo=o(" (RemBERT model)"),BVo=l(),nF=a("li"),Ohe=a("strong"),IVo=o("roberta"),NVo=o(" \u2014 "),SV=a("a"),qVo=o("RobertaForTokenClassification"),jVo=o(" (RoBERTa model)"),DVo=l(),sF=a("li"),Vhe=a("strong"),GVo=o("roformer"),OVo=o(" \u2014 "),RV=a("a"),VVo=o("RoFormerForTokenClassification"),XVo=o(" (RoFormer model)"),zVo=l(),lF=a("li"),Xhe=a("strong"),WVo=o("squeezebert"),QVo=o(" \u2014 "),PV=a("a"),HVo=o("SqueezeBertForTokenClassification"),UVo=o(" (SqueezeBERT model)"),JVo=l(),iF=a("li"),zhe=a("strong"),YVo=o("xlm"),KVo=o(" \u2014 "),BV=a("a"),ZVo=o("XLMForTokenClassification"),eXo=o(" (XLM model)"),oXo=l(),dF=a("li"),Whe=a("strong"),rXo=o("xlm-roberta"),tXo=o(" \u2014 "),IV=a("a"),aXo=o("XLMRobertaForTokenClassification"),nXo=o(" (XLM-RoBERTa model)"),sXo=l(),cF=a("li"),Qhe=a("strong"),lXo=o("xlm-roberta-xl"),iXo=o(" \u2014 "),NV=a("a"),dXo=o("XLMRobertaXLForTokenClassification"),cXo=o(" (XLM-RoBERTa-XL model)"),fXo=l(),fF=a("li"),Hhe=a("strong"),mXo=o("xlnet"),gXo=o(" \u2014 "),qV=a("a"),hXo=o("XLNetForTokenClassification"),pXo=o(" (XLNet model)"),_Xo=l(),mF=a("li"),Uhe=a("strong"),uXo=o("yoso"),bXo=o(" \u2014 "),jV=a("a"),vXo=o("YosoForTokenClassification"),FXo=o(" (YOSO model)"),TXo=l(),gF=a("p"),MXo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),EXo=o("model.eval()"),CXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),wXo=o("model.train()"),AXo=l(),F(hF.$$.fragment),ije=l(),Zi=a("h2"),pF=a("a"),Khe=a("span"),F(KA.$$.fragment),yXo=l(),Zhe=a("span"),LXo=o("AutoModelForQuestionAnswering"),dje=l(),No=a("div"),F(ZA.$$.fragment),xXo=l(),ed=a("p"),$Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DV=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),GV=a("a"),RXo=o("from_config()"),PXo=o(` class
method.`),BXo=l(),ey=a("p"),IXo=o("This class cannot be instantiated directly using "),epe=a("code"),NXo=o("__init__()"),qXo=o(" (throws an error)."),jXo=l(),mt=a("div"),F(oy.$$.fragment),DXo=l(),ope=a("p"),GXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OXo=l(),od=a("p"),VXo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),XXo=o("not"),zXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),WXo=o("from_pretrained()"),QXo=o(" to load the model weights."),HXo=l(),F(_F.$$.fragment),UXo=l(),no=a("div"),F(ry.$$.fragment),JXo=l(),tpe=a("p"),YXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KXo=l(),Na=a("p"),ZXo=o("The model class to instantiate is selected based on the "),ape=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),V=a("ul"),uF=a("li"),lpe=a("strong"),lzo=o("albert"),izo=o(" \u2014 "),VV=a("a"),dzo=o("AlbertForQuestionAnswering"),czo=o(" (ALBERT model)"),fzo=l(),bF=a("li"),ipe=a("strong"),mzo=o("bart"),gzo=o(" \u2014 "),XV=a("a"),hzo=o("BartForQuestionAnswering"),pzo=o(" (BART model)"),_zo=l(),vF=a("li"),dpe=a("strong"),uzo=o("bert"),bzo=o(" \u2014 "),zV=a("a"),vzo=o("BertForQuestionAnswering"),Fzo=o(" (BERT model)"),Tzo=l(),FF=a("li"),cpe=a("strong"),Mzo=o("big_bird"),Ezo=o(" \u2014 "),WV=a("a"),Czo=o("BigBirdForQuestionAnswering"),wzo=o(" (BigBird model)"),Azo=l(),TF=a("li"),fpe=a("strong"),yzo=o("bigbird_pegasus"),Lzo=o(" \u2014 "),QV=a("a"),xzo=o("BigBirdPegasusForQuestionAnswering"),$zo=o(" (BigBirdPegasus model)"),kzo=l(),MF=a("li"),mpe=a("strong"),Szo=o("camembert"),Rzo=o(" \u2014 "),HV=a("a"),Pzo=o("CamembertForQuestionAnswering"),Bzo=o(" (CamemBERT model)"),Izo=l(),EF=a("li"),gpe=a("strong"),Nzo=o("canine"),qzo=o(" \u2014 "),UV=a("a"),jzo=o("CanineForQuestionAnswering"),Dzo=o(" (Canine model)"),Gzo=l(),CF=a("li"),hpe=a("strong"),Ozo=o("convbert"),Vzo=o(" \u2014 "),JV=a("a"),Xzo=o("ConvBertForQuestionAnswering"),zzo=o(" (ConvBERT model)"),Wzo=l(),wF=a("li"),ppe=a("strong"),Qzo=o("data2vec-text"),Hzo=o(" \u2014 "),YV=a("a"),Uzo=o("Data2VecTextForQuestionAnswering"),Jzo=o(" (Data2VecText model)"),Yzo=l(),AF=a("li"),_pe=a("strong"),Kzo=o("deberta"),Zzo=o(" \u2014 "),KV=a("a"),eWo=o("DebertaForQuestionAnswering"),oWo=o(" (DeBERTa model)"),rWo=l(),yF=a("li"),upe=a("strong"),tWo=o("deberta-v2"),aWo=o(" \u2014 "),ZV=a("a"),nWo=o("DebertaV2ForQuestionAnswering"),sWo=o(" (DeBERTa-v2 model)"),lWo=l(),LF=a("li"),bpe=a("strong"),iWo=o("distilbert"),dWo=o(" \u2014 "),eX=a("a"),cWo=o("DistilBertForQuestionAnswering"),fWo=o(" (DistilBERT model)"),mWo=l(),xF=a("li"),vpe=a("strong"),gWo=o("electra"),hWo=o(" \u2014 "),oX=a("a"),pWo=o("ElectraForQuestionAnswering"),_Wo=o(" (ELECTRA model)"),uWo=l(),$F=a("li"),Fpe=a("strong"),bWo=o("flaubert"),vWo=o(" \u2014 "),rX=a("a"),FWo=o("FlaubertForQuestionAnsweringSimple"),TWo=o(" (FlauBERT model)"),MWo=l(),kF=a("li"),Tpe=a("strong"),EWo=o("fnet"),CWo=o(" \u2014 "),tX=a("a"),wWo=o("FNetForQuestionAnswering"),AWo=o(" (FNet model)"),yWo=l(),SF=a("li"),Mpe=a("strong"),LWo=o("funnel"),xWo=o(" \u2014 "),aX=a("a"),$Wo=o("FunnelForQuestionAnswering"),kWo=o(" (Funnel Transformer model)"),SWo=l(),RF=a("li"),Epe=a("strong"),RWo=o("gptj"),PWo=o(" \u2014 "),nX=a("a"),BWo=o("GPTJForQuestionAnswering"),IWo=o(" (GPT-J model)"),NWo=l(),PF=a("li"),Cpe=a("strong"),qWo=o("ibert"),jWo=o(" \u2014 "),sX=a("a"),DWo=o("IBertForQuestionAnswering"),GWo=o(" (I-BERT model)"),OWo=l(),BF=a("li"),wpe=a("strong"),VWo=o("layoutlmv2"),XWo=o(" \u2014 "),lX=a("a"),zWo=o("LayoutLMv2ForQuestionAnswering"),WWo=o(" (LayoutLMv2 model)"),QWo=l(),IF=a("li"),Ape=a("strong"),HWo=o("layoutlmv3"),UWo=o(" \u2014 "),iX=a("a"),JWo=o("LayoutLMv3ForQuestionAnswering"),YWo=o(" (LayoutLMv3 model)"),KWo=l(),NF=a("li"),ype=a("strong"),ZWo=o("led"),eQo=o(" \u2014 "),dX=a("a"),oQo=o("LEDForQuestionAnswering"),rQo=o(" (LED model)"),tQo=l(),qF=a("li"),Lpe=a("strong"),aQo=o("longformer"),nQo=o(" \u2014 "),cX=a("a"),sQo=o("LongformerForQuestionAnswering"),lQo=o(" (Longformer model)"),iQo=l(),jF=a("li"),xpe=a("strong"),dQo=o("lxmert"),cQo=o(" \u2014 "),fX=a("a"),fQo=o("LxmertForQuestionAnswering"),mQo=o(" (LXMERT model)"),gQo=l(),DF=a("li"),$pe=a("strong"),hQo=o("mbart"),pQo=o(" \u2014 "),mX=a("a"),_Qo=o("MBartForQuestionAnswering"),uQo=o(" (mBART model)"),bQo=l(),GF=a("li"),kpe=a("strong"),vQo=o("megatron-bert"),FQo=o(" \u2014 "),gX=a("a"),TQo=o("MegatronBertForQuestionAnswering"),MQo=o(" (MegatronBert model)"),EQo=l(),OF=a("li"),Spe=a("strong"),CQo=o("mobilebert"),wQo=o(" \u2014 "),hX=a("a"),AQo=o("MobileBertForQuestionAnswering"),yQo=o(" (MobileBERT model)"),LQo=l(),VF=a("li"),Rpe=a("strong"),xQo=o("mpnet"),$Qo=o(" \u2014 "),pX=a("a"),kQo=o("MPNetForQuestionAnswering"),SQo=o(" (MPNet model)"),RQo=l(),XF=a("li"),Ppe=a("strong"),PQo=o("nystromformer"),BQo=o(" \u2014 "),_X=a("a"),IQo=o("NystromformerForQuestionAnswering"),NQo=o(" (Nystromformer model)"),qQo=l(),zF=a("li"),Bpe=a("strong"),jQo=o("qdqbert"),DQo=o(" \u2014 "),uX=a("a"),GQo=o("QDQBertForQuestionAnswering"),OQo=o(" (QDQBert model)"),VQo=l(),WF=a("li"),Ipe=a("strong"),XQo=o("reformer"),zQo=o(" \u2014 "),bX=a("a"),WQo=o("ReformerForQuestionAnswering"),QQo=o(" (Reformer model)"),HQo=l(),QF=a("li"),Npe=a("strong"),UQo=o("rembert"),JQo=o(" \u2014 "),vX=a("a"),YQo=o("RemBertForQuestionAnswering"),KQo=o(" (RemBERT model)"),ZQo=l(),HF=a("li"),qpe=a("strong"),eHo=o("roberta"),oHo=o(" \u2014 "),FX=a("a"),rHo=o("RobertaForQuestionAnswering"),tHo=o(" (RoBERTa model)"),aHo=l(),UF=a("li"),jpe=a("strong"),nHo=o("roformer"),sHo=o(" \u2014 "),TX=a("a"),lHo=o("RoFormerForQuestionAnswering"),iHo=o(" (RoFormer model)"),dHo=l(),JF=a("li"),Dpe=a("strong"),cHo=o("splinter"),fHo=o(" \u2014 "),MX=a("a"),mHo=o("SplinterForQuestionAnswering"),gHo=o(" (Splinter model)"),hHo=l(),YF=a("li"),Gpe=a("strong"),pHo=o("squeezebert"),_Ho=o(" \u2014 "),EX=a("a"),uHo=o("SqueezeBertForQuestionAnswering"),bHo=o(" (SqueezeBERT model)"),vHo=l(),KF=a("li"),Ope=a("strong"),FHo=o("xlm"),THo=o(" \u2014 "),CX=a("a"),MHo=o("XLMForQuestionAnsweringSimple"),EHo=o(" (XLM model)"),CHo=l(),ZF=a("li"),Vpe=a("strong"),wHo=o("xlm-roberta"),AHo=o(" \u2014 "),wX=a("a"),yHo=o("XLMRobertaForQuestionAnswering"),LHo=o(" (XLM-RoBERTa model)"),xHo=l(),e6=a("li"),Xpe=a("strong"),$Ho=o("xlm-roberta-xl"),kHo=o(" \u2014 "),AX=a("a"),SHo=o("XLMRobertaXLForQuestionAnswering"),RHo=o(" (XLM-RoBERTa-XL model)"),PHo=l(),o6=a("li"),zpe=a("strong"),BHo=o("xlnet"),IHo=o(" \u2014 "),yX=a("a"),NHo=o("XLNetForQuestionAnsweringSimple"),qHo=o(" (XLNet model)"),jHo=l(),r6=a("li"),Wpe=a("strong"),DHo=o("yoso"),GHo=o(" \u2014 "),LX=a("a"),OHo=o("YosoForQuestionAnswering"),VHo=o(" (YOSO model)"),XHo=l(),t6=a("p"),zHo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),WHo=o("model.eval()"),QHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),HHo=o("model.train()"),UHo=l(),F(a6.$$.fragment),cje=l(),rd=a("h2"),n6=a("a"),Upe=a("span"),F(ty.$$.fragment),JHo=l(),Jpe=a("span"),YHo=o("AutoModelForTableQuestionAnswering"),fje=l(),qo=a("div"),F(ay.$$.fragment),KHo=l(),td=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xX=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),$X=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),ny=a("p"),nUo=o("This class cannot be instantiated directly using "),Ype=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),gt=a("div"),F(sy.$$.fragment),dUo=l(),Kpe=a("p"),cUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fUo=l(),ad=a("p"),mUo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),pUo=o("from_pretrained()"),_Uo=o(" to load the model weights."),uUo=l(),F(s6.$$.fragment),bUo=l(),so=a("div"),F(ly.$$.fragment),vUo=l(),e_e=a("p"),FUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TUo=l(),qa=a("p"),MUo=o("The model class to instantiate is selected based on the "),o_e=a("code"),EUo=o("model_type"),CUo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(":"),xUo=l(),a_e=a("ul"),l6=a("li"),n_e=a("strong"),$Uo=o("tapas"),kUo=o(" \u2014 "),SX=a("a"),SUo=o("TapasForQuestionAnswering"),RUo=o(" (TAPAS model)"),PUo=l(),i6=a("p"),BUo=o("The model is set in evaluation mode by default using "),s_e=a("code"),IUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),qUo=o("model.train()"),jUo=l(),F(d6.$$.fragment),mje=l(),nd=a("h2"),c6=a("a"),i_e=a("span"),F(iy.$$.fragment),DUo=l(),d_e=a("span"),GUo=o("AutoModelForImageClassification"),gje=l(),jo=a("div"),F(dy.$$.fragment),OUo=l(),sd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),PX=a("a"),WUo=o("from_config()"),QUo=o(` class
method.`),HUo=l(),cy=a("p"),UUo=o("This class cannot be instantiated directly using "),c_e=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),ht=a("div"),F(fy.$$.fragment),ZUo=l(),f_e=a("p"),eJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oJo=l(),ld=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(f6.$$.fragment),iJo=l(),lo=a("div"),F(my.$$.fragment),dJo=l(),g_e=a("p"),cJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fJo=l(),ja=a("p"),mJo=o("The model class to instantiate is selected based on the "),h_e=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),uJo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),Fe=a("ul"),m6=a("li"),u_e=a("strong"),FJo=o("beit"),TJo=o(" \u2014 "),IX=a("a"),MJo=o("BeitForImageClassification"),EJo=o(" (BEiT model)"),CJo=l(),g6=a("li"),b_e=a("strong"),wJo=o("convnext"),AJo=o(" \u2014 "),NX=a("a"),yJo=o("ConvNextForImageClassification"),LJo=o(" (ConvNext model)"),xJo=l(),h6=a("li"),v_e=a("strong"),$Jo=o("cvt"),kJo=o(" \u2014 "),qX=a("a"),SJo=o("CvtForImageClassification"),RJo=o(" (CvT model)"),PJo=l(),p6=a("li"),F_e=a("strong"),BJo=o("data2vec-vision"),IJo=o(" \u2014 "),jX=a("a"),NJo=o("Data2VecVisionForImageClassification"),qJo=o(" (Data2VecVision model)"),jJo=l(),Is=a("li"),T_e=a("strong"),DJo=o("deit"),GJo=o(" \u2014 "),DX=a("a"),OJo=o("DeiTForImageClassification"),VJo=o(" or "),GX=a("a"),XJo=o("DeiTForImageClassificationWithTeacher"),zJo=o(" (DeiT model)"),WJo=l(),_6=a("li"),M_e=a("strong"),QJo=o("imagegpt"),HJo=o(" \u2014 "),OX=a("a"),UJo=o("ImageGPTForImageClassification"),JJo=o(" (ImageGPT model)"),YJo=l(),pt=a("li"),E_e=a("strong"),KJo=o("perceiver"),ZJo=o(" \u2014 "),VX=a("a"),eYo=o("PerceiverForImageClassificationLearned"),oYo=o(" or "),XX=a("a"),rYo=o("PerceiverForImageClassificationFourier"),tYo=o(" or "),zX=a("a"),aYo=o("PerceiverForImageClassificationConvProcessing"),nYo=o(" (Perceiver model)"),sYo=l(),u6=a("li"),C_e=a("strong"),lYo=o("poolformer"),iYo=o(" \u2014 "),WX=a("a"),dYo=o("PoolFormerForImageClassification"),cYo=o(" (PoolFormer model)"),fYo=l(),b6=a("li"),w_e=a("strong"),mYo=o("regnet"),gYo=o(" \u2014 "),QX=a("a"),hYo=o("RegNetForImageClassification"),pYo=o(" (RegNet model)"),_Yo=l(),v6=a("li"),A_e=a("strong"),uYo=o("resnet"),bYo=o(" \u2014 "),HX=a("a"),vYo=o("ResNetForImageClassification"),FYo=o(" (ResNet model)"),TYo=l(),F6=a("li"),y_e=a("strong"),MYo=o("segformer"),EYo=o(" \u2014 "),UX=a("a"),CYo=o("SegformerForImageClassification"),wYo=o(" (SegFormer model)"),AYo=l(),T6=a("li"),L_e=a("strong"),yYo=o("swin"),LYo=o(" \u2014 "),JX=a("a"),xYo=o("SwinForImageClassification"),$Yo=o(" (Swin model)"),kYo=l(),M6=a("li"),x_e=a("strong"),SYo=o("van"),RYo=o(" \u2014 "),YX=a("a"),PYo=o("VanForImageClassification"),BYo=o(" (VAN model)"),IYo=l(),E6=a("li"),$_e=a("strong"),NYo=o("vit"),qYo=o(" \u2014 "),KX=a("a"),jYo=o("ViTForImageClassification"),DYo=o(" (ViT model)"),GYo=l(),C6=a("p"),OYo=o("The model is set in evaluation mode by default using "),k_e=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),zYo=o("model.train()"),WYo=l(),F(w6.$$.fragment),hje=l(),id=a("h2"),A6=a("a"),R_e=a("span"),F(gy.$$.fragment),QYo=l(),P_e=a("span"),HYo=o("AutoModelForVision2Seq"),pje=l(),Do=a("div"),F(hy.$$.fragment),UYo=l(),dd=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZX=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),ez=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),py=a("p"),rKo=o("This class cannot be instantiated directly using "),B_e=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),_t=a("div"),F(_y.$$.fragment),sKo=l(),I_e=a("p"),lKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iKo=l(),cd=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),cKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),mKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),F(y6.$$.fragment),pKo=l(),io=a("div"),F(uy.$$.fragment),_Ko=l(),q_e=a("p"),uKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bKo=l(),Da=a("p"),vKo=o("The model class to instantiate is selected based on the "),j_e=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),O_e=a("ul"),L6=a("li"),V_e=a("strong"),yKo=o("vision-encoder-decoder"),LKo=o(" \u2014 "),rz=a("a"),xKo=o("VisionEncoderDecoderModel"),$Ko=o(" (Vision Encoder decoder model)"),kKo=l(),x6=a("p"),SKo=o("The model is set in evaluation mode by default using "),X_e=a("code"),RKo=o("model.eval()"),PKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),BKo=o("model.train()"),IKo=l(),F($6.$$.fragment),_je=l(),fd=a("h2"),k6=a("a"),W_e=a("span"),F(by.$$.fragment),NKo=l(),Q_e=a("span"),qKo=o("AutoModelForAudioClassification"),uje=l(),Go=a("div"),F(vy.$$.fragment),jKo=l(),md=a("p"),DKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tz=a("a"),GKo=o("from_pretrained()"),OKo=o(" class method or the "),az=a("a"),VKo=o("from_config()"),XKo=o(` class
method.`),zKo=l(),Fy=a("p"),WKo=o("This class cannot be instantiated directly using "),H_e=a("code"),QKo=o("__init__()"),HKo=o(" (throws an error)."),UKo=l(),ut=a("div"),F(Ty.$$.fragment),JKo=l(),U_e=a("p"),YKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KKo=l(),gd=a("p"),ZKo=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),eZo=o("not"),oZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),rZo=o("from_pretrained()"),tZo=o(" to load the model weights."),aZo=l(),F(S6.$$.fragment),nZo=l(),co=a("div"),F(My.$$.fragment),sZo=l(),Y_e=a("p"),lZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iZo=l(),Ga=a("p"),dZo=o("The model class to instantiate is selected based on the "),K_e=a("code"),cZo=o("model_type"),fZo=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),mZo=o("pretrained_model_name_or_path"),gZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),hZo=o("pretrained_model_name_or_path"),pZo=o(":"),_Zo=l(),Se=a("ul"),R6=a("li"),oue=a("strong"),uZo=o("data2vec-audio"),bZo=o(" \u2014 "),sz=a("a"),vZo=o("Data2VecAudioForSequenceClassification"),FZo=o(" (Data2VecAudio model)"),TZo=l(),P6=a("li"),rue=a("strong"),MZo=o("hubert"),EZo=o(" \u2014 "),lz=a("a"),CZo=o("HubertForSequenceClassification"),wZo=o(" (Hubert model)"),AZo=l(),B6=a("li"),tue=a("strong"),yZo=o("sew"),LZo=o(" \u2014 "),iz=a("a"),xZo=o("SEWForSequenceClassification"),$Zo=o(" (SEW model)"),kZo=l(),I6=a("li"),aue=a("strong"),SZo=o("sew-d"),RZo=o(" \u2014 "),dz=a("a"),PZo=o("SEWDForSequenceClassification"),BZo=o(" (SEW-D model)"),IZo=l(),N6=a("li"),nue=a("strong"),NZo=o("unispeech"),qZo=o(" \u2014 "),cz=a("a"),jZo=o("UniSpeechForSequenceClassification"),DZo=o(" (UniSpeech model)"),GZo=l(),q6=a("li"),sue=a("strong"),OZo=o("unispeech-sat"),VZo=o(" \u2014 "),fz=a("a"),XZo=o("UniSpeechSatForSequenceClassification"),zZo=o(" (UniSpeechSat model)"),WZo=l(),j6=a("li"),lue=a("strong"),QZo=o("wav2vec2"),HZo=o(" \u2014 "),mz=a("a"),UZo=o("Wav2Vec2ForSequenceClassification"),JZo=o(" (Wav2Vec2 model)"),YZo=l(),D6=a("li"),iue=a("strong"),KZo=o("wav2vec2-conformer"),ZZo=o(" \u2014 "),gz=a("a"),eer=o("Wav2Vec2ConformerForSequenceClassification"),oer=o(" (Wav2Vec2-Conformer model)"),rer=l(),G6=a("li"),due=a("strong"),ter=o("wavlm"),aer=o(" \u2014 "),hz=a("a"),ner=o("WavLMForSequenceClassification"),ser=o(" (WavLM model)"),ler=l(),O6=a("p"),ier=o("The model is set in evaluation mode by default using "),cue=a("code"),der=o("model.eval()"),cer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),fer=o("model.train()"),mer=l(),F(V6.$$.fragment),bje=l(),hd=a("h2"),X6=a("a"),mue=a("span"),F(Ey.$$.fragment),ger=l(),gue=a("span"),her=o("AutoModelForAudioFrameClassification"),vje=l(),Oo=a("div"),F(Cy.$$.fragment),per=l(),pd=a("p"),_er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pz=a("a"),uer=o("from_pretrained()"),ber=o(" class method or the "),_z=a("a"),ver=o("from_config()"),Fer=o(` class
method.`),Ter=l(),wy=a("p"),Mer=o("This class cannot be instantiated directly using "),hue=a("code"),Eer=o("__init__()"),Cer=o(" (throws an error)."),wer=l(),bt=a("div"),F(Ay.$$.fragment),Aer=l(),pue=a("p"),yer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ler=l(),_d=a("p"),xer=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),$er=o("not"),ker=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Ser=o("from_pretrained()"),Rer=o(" to load the model weights."),Per=l(),F(z6.$$.fragment),Ber=l(),fo=a("div"),F(yy.$$.fragment),Ier=l(),uue=a("p"),Ner=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qer=l(),Oa=a("p"),jer=o("The model class to instantiate is selected based on the "),bue=a("code"),Der=o("model_type"),Ger=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),Xer=o("pretrained_model_name_or_path"),zer=o(":"),Wer=l(),Kr=a("ul"),W6=a("li"),Tue=a("strong"),Qer=o("data2vec-audio"),Her=o(" \u2014 "),bz=a("a"),Uer=o("Data2VecAudioForAudioFrameClassification"),Jer=o(" (Data2VecAudio model)"),Yer=l(),Q6=a("li"),Mue=a("strong"),Ker=o("unispeech-sat"),Zer=o(" \u2014 "),vz=a("a"),eor=o("UniSpeechSatForAudioFrameClassification"),oor=o(" (UniSpeechSat model)"),ror=l(),H6=a("li"),Eue=a("strong"),tor=o("wav2vec2"),aor=o(" \u2014 "),Fz=a("a"),nor=o("Wav2Vec2ForAudioFrameClassification"),sor=o(" (Wav2Vec2 model)"),lor=l(),U6=a("li"),Cue=a("strong"),ior=o("wav2vec2-conformer"),dor=o(" \u2014 "),Tz=a("a"),cor=o("Wav2Vec2ConformerForAudioFrameClassification"),mor=o(" (Wav2Vec2-Conformer model)"),gor=l(),J6=a("li"),wue=a("strong"),hor=o("wavlm"),por=o(" \u2014 "),Mz=a("a"),_or=o("WavLMForAudioFrameClassification"),uor=o(" (WavLM model)"),bor=l(),Y6=a("p"),vor=o("The model is set in evaluation mode by default using "),Aue=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),Mor=o("model.train()"),Eor=l(),F(K6.$$.fragment),Fje=l(),ud=a("h2"),Z6=a("a"),Lue=a("span"),F(Ly.$$.fragment),Cor=l(),xue=a("span"),wor=o("AutoModelForCTC"),Tje=l(),Vo=a("div"),F(xy.$$.fragment),Aor=l(),bd=a("p"),yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ez=a("a"),Lor=o("from_pretrained()"),xor=o(" class method or the "),Cz=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),$y=a("p"),Ror=o("This class cannot be instantiated directly using "),$ue=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),vt=a("div"),F(ky.$$.fragment),Nor=l(),kue=a("p"),qor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jor=l(),vd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(eT.$$.fragment),Wor=l(),mo=a("div"),F(Sy.$$.fragment),Qor=l(),Rue=a("p"),Hor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Uor=l(),Va=a("p"),Jor=o("The model class to instantiate is selected based on the "),Pue=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),Re=a("ul"),oT=a("li"),Nue=a("strong"),arr=o("data2vec-audio"),nrr=o(" \u2014 "),Az=a("a"),srr=o("Data2VecAudioForCTC"),lrr=o(" (Data2VecAudio model)"),irr=l(),rT=a("li"),que=a("strong"),drr=o("hubert"),crr=o(" \u2014 "),yz=a("a"),frr=o("HubertForCTC"),mrr=o(" (Hubert model)"),grr=l(),tT=a("li"),jue=a("strong"),hrr=o("sew"),prr=o(" \u2014 "),Lz=a("a"),_rr=o("SEWForCTC"),urr=o(" (SEW model)"),brr=l(),aT=a("li"),Due=a("strong"),vrr=o("sew-d"),Frr=o(" \u2014 "),xz=a("a"),Trr=o("SEWDForCTC"),Mrr=o(" (SEW-D model)"),Err=l(),nT=a("li"),Gue=a("strong"),Crr=o("unispeech"),wrr=o(" \u2014 "),$z=a("a"),Arr=o("UniSpeechForCTC"),yrr=o(" (UniSpeech model)"),Lrr=l(),sT=a("li"),Oue=a("strong"),xrr=o("unispeech-sat"),$rr=o(" \u2014 "),kz=a("a"),krr=o("UniSpeechSatForCTC"),Srr=o(" (UniSpeechSat model)"),Rrr=l(),lT=a("li"),Vue=a("strong"),Prr=o("wav2vec2"),Brr=o(" \u2014 "),Sz=a("a"),Irr=o("Wav2Vec2ForCTC"),Nrr=o(" (Wav2Vec2 model)"),qrr=l(),iT=a("li"),Xue=a("strong"),jrr=o("wav2vec2-conformer"),Drr=o(" \u2014 "),Rz=a("a"),Grr=o("Wav2Vec2ConformerForCTC"),Orr=o(" (Wav2Vec2-Conformer model)"),Vrr=l(),dT=a("li"),zue=a("strong"),Xrr=o("wavlm"),zrr=o(" \u2014 "),Pz=a("a"),Wrr=o("WavLMForCTC"),Qrr=o(" (WavLM model)"),Hrr=l(),cT=a("p"),Urr=o("The model is set in evaluation mode by default using "),Wue=a("code"),Jrr=o("model.eval()"),Yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Krr=o("model.train()"),Zrr=l(),F(fT.$$.fragment),Mje=l(),Fd=a("h2"),mT=a("a"),Hue=a("span"),F(Ry.$$.fragment),etr=l(),Uue=a("span"),otr=o("AutoModelForSpeechSeq2Seq"),Eje=l(),Xo=a("div"),F(Py.$$.fragment),rtr=l(),Td=a("p"),ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bz=a("a"),atr=o("from_pretrained()"),ntr=o(" class method or the "),Iz=a("a"),str=o("from_config()"),ltr=o(` class
method.`),itr=l(),By=a("p"),dtr=o("This class cannot be instantiated directly using "),Jue=a("code"),ctr=o("__init__()"),ftr=o(" (throws an error)."),mtr=l(),Ft=a("div"),F(Iy.$$.fragment),gtr=l(),Yue=a("p"),htr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ptr=l(),Md=a("p"),_tr=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),utr=o("not"),btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),vtr=o("from_pretrained()"),Ftr=o(" to load the model weights."),Ttr=l(),F(gT.$$.fragment),Mtr=l(),go=a("div"),F(Ny.$$.fragment),Etr=l(),Zue=a("p"),Ctr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wtr=l(),Xa=a("p"),Atr=o("The model class to instantiate is selected based on the "),e2e=a("code"),ytr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),xtr=o("pretrained_model_name_or_path"),$tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),ktr=o("pretrained_model_name_or_path"),Str=o(":"),Rtr=l(),qy=a("ul"),hT=a("li"),t2e=a("strong"),Ptr=o("speech-encoder-decoder"),Btr=o(" \u2014 "),qz=a("a"),Itr=o("SpeechEncoderDecoderModel"),Ntr=o(" (Speech Encoder decoder model)"),qtr=l(),pT=a("li"),a2e=a("strong"),jtr=o("speech_to_text"),Dtr=o(" \u2014 "),jz=a("a"),Gtr=o("Speech2TextForConditionalGeneration"),Otr=o(" (Speech2Text model)"),Vtr=l(),_T=a("p"),Xtr=o("The model is set in evaluation mode by default using "),n2e=a("code"),ztr=o("model.eval()"),Wtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),Qtr=o("model.train()"),Htr=l(),F(uT.$$.fragment),Cje=l(),Ed=a("h2"),bT=a("a"),l2e=a("span"),F(jy.$$.fragment),Utr=l(),i2e=a("span"),Jtr=o("AutoModelForAudioXVector"),wje=l(),zo=a("div"),F(Dy.$$.fragment),Ytr=l(),Cd=a("p"),Ktr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dz=a("a"),Ztr=o("from_pretrained()"),ear=o(" class method or the "),Gz=a("a"),oar=o("from_config()"),rar=o(` class
method.`),tar=l(),Gy=a("p"),aar=o("This class cannot be instantiated directly using "),d2e=a("code"),nar=o("__init__()"),sar=o(" (throws an error)."),lar=l(),Tt=a("div"),F(Oy.$$.fragment),iar=l(),c2e=a("p"),dar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),car=l(),wd=a("p"),far=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),mar=o("not"),gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),har=o("from_pretrained()"),par=o(" to load the model weights."),_ar=l(),F(vT.$$.fragment),uar=l(),ho=a("div"),F(Vy.$$.fragment),bar=l(),m2e=a("p"),Far=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tar=l(),za=a("p"),Mar=o("The model class to instantiate is selected based on the "),g2e=a("code"),Ear=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),yar=o("pretrained_model_name_or_path"),Lar=o(":"),xar=l(),Zr=a("ul"),FT=a("li"),_2e=a("strong"),$ar=o("data2vec-audio"),kar=o(" \u2014 "),Vz=a("a"),Sar=o("Data2VecAudioForXVector"),Rar=o(" (Data2VecAudio model)"),Par=l(),TT=a("li"),u2e=a("strong"),Bar=o("unispeech-sat"),Iar=o(" \u2014 "),Xz=a("a"),Nar=o("UniSpeechSatForXVector"),qar=o(" (UniSpeechSat model)"),jar=l(),MT=a("li"),b2e=a("strong"),Dar=o("wav2vec2"),Gar=o(" \u2014 "),zz=a("a"),Oar=o("Wav2Vec2ForXVector"),Var=o(" (Wav2Vec2 model)"),Xar=l(),ET=a("li"),v2e=a("strong"),zar=o("wav2vec2-conformer"),War=o(" \u2014 "),Wz=a("a"),Qar=o("Wav2Vec2ConformerForXVector"),Har=o(" (Wav2Vec2-Conformer model)"),Uar=l(),CT=a("li"),F2e=a("strong"),Jar=o("wavlm"),Yar=o(" \u2014 "),Qz=a("a"),Kar=o("WavLMForXVector"),Zar=o(" (WavLM model)"),enr=l(),wT=a("p"),onr=o("The model is set in evaluation mode by default using "),T2e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=a("code"),anr=o("model.train()"),nnr=l(),F(AT.$$.fragment),Aje=l(),Ad=a("h2"),yT=a("a"),E2e=a("span"),F(Xy.$$.fragment),snr=l(),C2e=a("span"),lnr=o("AutoModelForMaskedImageModeling"),yje=l(),Wo=a("div"),F(zy.$$.fragment),inr=l(),yd=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Hz=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),Uz=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),Wy=a("p"),pnr=o("This class cannot be instantiated directly using "),w2e=a("code"),_nr=o("__init__()"),unr=o(" (throws an error)."),bnr=l(),Mt=a("div"),F(Qy.$$.fragment),vnr=l(),A2e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tnr=l(),Ld=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),ynr=l(),F(LT.$$.fragment),Lnr=l(),po=a("div"),F(Hy.$$.fragment),xnr=l(),L2e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),knr=l(),Wa=a("p"),Snr=o("The model class to instantiate is selected based on the "),x2e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),xd=a("ul"),xT=a("li"),S2e=a("strong"),Dnr=o("deit"),Gnr=o(" \u2014 "),Yz=a("a"),Onr=o("DeiTForMaskedImageModeling"),Vnr=o(" (DeiT model)"),Xnr=l(),$T=a("li"),R2e=a("strong"),znr=o("swin"),Wnr=o(" \u2014 "),Kz=a("a"),Qnr=o("SwinForMaskedImageModeling"),Hnr=o(" (Swin model)"),Unr=l(),kT=a("li"),P2e=a("strong"),Jnr=o("vit"),Ynr=o(" \u2014 "),Zz=a("a"),Knr=o("ViTForMaskedImageModeling"),Znr=o(" (ViT model)"),esr=l(),ST=a("p"),osr=o("The model is set in evaluation mode by default using "),B2e=a("code"),rsr=o("model.eval()"),tsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),asr=o("model.train()"),nsr=l(),F(RT.$$.fragment),Lje=l(),$d=a("h2"),PT=a("a"),N2e=a("span"),F(Uy.$$.fragment),ssr=l(),q2e=a("span"),lsr=o("AutoModelForObjectDetection"),xje=l(),Qo=a("div"),F(Jy.$$.fragment),isr=l(),kd=a("p"),dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eW=a("a"),csr=o("from_pretrained()"),fsr=o(" class method or the "),oW=a("a"),msr=o("from_config()"),gsr=o(` class
method.`),hsr=l(),Yy=a("p"),psr=o("This class cannot be instantiated directly using "),j2e=a("code"),_sr=o("__init__()"),usr=o(" (throws an error)."),bsr=l(),Et=a("div"),F(Ky.$$.fragment),vsr=l(),D2e=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tsr=l(),Sd=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),Esr=o("not"),Csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),wsr=o("from_pretrained()"),Asr=o(" to load the model weights."),ysr=l(),F(BT.$$.fragment),Lsr=l(),_o=a("div"),F(Zy.$$.fragment),xsr=l(),O2e=a("p"),$sr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ksr=l(),Qa=a("p"),Ssr=o("The model class to instantiate is selected based on the "),V2e=a("code"),Rsr=o("model_type"),Psr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),Nsr=o("pretrained_model_name_or_path"),qsr=o(":"),jsr=l(),eL=a("ul"),IT=a("li"),W2e=a("strong"),Dsr=o("detr"),Gsr=o(" \u2014 "),tW=a("a"),Osr=o("DetrForObjectDetection"),Vsr=o(" (DETR model)"),Xsr=l(),NT=a("li"),Q2e=a("strong"),zsr=o("yolos"),Wsr=o(" \u2014 "),aW=a("a"),Qsr=o("YolosForObjectDetection"),Hsr=o(" (YOLOS model)"),Usr=l(),qT=a("p"),Jsr=o("The model is set in evaluation mode by default using "),H2e=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),Zsr=o("model.train()"),elr=l(),F(jT.$$.fragment),$je=l(),Rd=a("h2"),DT=a("a"),J2e=a("span"),F(oL.$$.fragment),olr=l(),Y2e=a("span"),rlr=o("AutoModelForImageSegmentation"),kje=l(),Ho=a("div"),F(rL.$$.fragment),tlr=l(),Pd=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nW=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),sW=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),tL=a("p"),clr=o("This class cannot be instantiated directly using "),K2e=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),Ct=a("div"),F(aL.$$.fragment),hlr=l(),Z2e=a("p"),plr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_lr=l(),Bd=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(GT.$$.fragment),Elr=l(),uo=a("div"),F(nL.$$.fragment),Clr=l(),o1e=a("p"),wlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Alr=l(),Ha=a("p"),ylr=o("The model class to instantiate is selected based on the "),r1e=a("code"),Llr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),n1e=a("ul"),OT=a("li"),s1e=a("strong"),Blr=o("detr"),Ilr=o(" \u2014 "),iW=a("a"),Nlr=o("DetrForSegmentation"),qlr=o(" (DETR model)"),jlr=l(),VT=a("p"),Dlr=o("The model is set in evaluation mode by default using "),l1e=a("code"),Glr=o("model.eval()"),Olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Vlr=o("model.train()"),Xlr=l(),F(XT.$$.fragment),Sje=l(),Id=a("h2"),zT=a("a"),d1e=a("span"),F(sL.$$.fragment),zlr=l(),c1e=a("span"),Wlr=o("AutoModelForSemanticSegmentation"),Rje=l(),Uo=a("div"),F(lL.$$.fragment),Qlr=l(),Nd=a("p"),Hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" class method or the "),cW=a("a"),Ylr=o("from_config()"),Klr=o(` class
method.`),Zlr=l(),iL=a("p"),eir=o("This class cannot be instantiated directly using "),f1e=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),wt=a("div"),F(dL.$$.fragment),air=l(),m1e=a("p"),nir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sir=l(),qd=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),cir=o("from_pretrained()"),fir=o(" to load the model weights."),mir=l(),F(WT.$$.fragment),gir=l(),bo=a("div"),F(cL.$$.fragment),hir=l(),h1e=a("p"),pir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_ir=l(),Ua=a("p"),uir=o("The model class to instantiate is selected based on the "),p1e=a("code"),bir=o("model_type"),vir=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(":"),Cir=l(),Ja=a("ul"),QT=a("li"),b1e=a("strong"),wir=o("beit"),Air=o(" \u2014 "),mW=a("a"),yir=o("BeitForSemanticSegmentation"),Lir=o(" (BEiT model)"),xir=l(),HT=a("li"),v1e=a("strong"),$ir=o("data2vec-vision"),kir=o(" \u2014 "),gW=a("a"),Sir=o("Data2VecVisionForSemanticSegmentation"),Rir=o(" (Data2VecVision model)"),Pir=l(),UT=a("li"),F1e=a("strong"),Bir=o("dpt"),Iir=o(" \u2014 "),hW=a("a"),Nir=o("DPTForSemanticSegmentation"),qir=o(" (DPT model)"),jir=l(),JT=a("li"),T1e=a("strong"),Dir=o("segformer"),Gir=o(" \u2014 "),pW=a("a"),Oir=o("SegformerForSemanticSegmentation"),Vir=o(" (SegFormer model)"),Xir=l(),YT=a("p"),zir=o("The model is set in evaluation mode by default using "),M1e=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=a("code"),Hir=o("model.train()"),Uir=l(),F(KT.$$.fragment),Pje=l(),jd=a("h2"),ZT=a("a"),C1e=a("span"),F(fL.$$.fragment),Jir=l(),w1e=a("span"),Yir=o("AutoModelForInstanceSegmentation"),Bje=l(),Jo=a("div"),F(mL.$$.fragment),Kir=l(),Dd=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_W=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),uW=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),gL=a("p"),ndr=o("This class cannot be instantiated directly using "),A1e=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),At=a("div"),F(hL.$$.fragment),ddr=l(),y1e=a("p"),cdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fdr=l(),Gd=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),pdr=o("from_pretrained()"),_dr=o(" to load the model weights."),udr=l(),F(e7.$$.fragment),bdr=l(),vo=a("div"),F(pL.$$.fragment),vdr=l(),x1e=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tdr=l(),Ya=a("p"),Mdr=o("The model class to instantiate is selected based on the "),$1e=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),R1e=a("ul"),o7=a("li"),P1e=a("strong"),$dr=o("maskformer"),kdr=o(" \u2014 "),vW=a("a"),Sdr=o("MaskFormerForInstanceSegmentation"),Rdr=o(" (MaskFormer model)"),Pdr=l(),r7=a("p"),Bdr=o("The model is set in evaluation mode by default using "),B1e=a("code"),Idr=o("model.eval()"),Ndr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),qdr=o("model.train()"),jdr=l(),F(t7.$$.fragment),Ije=l(),Od=a("h2"),a7=a("a"),N1e=a("span"),F(_L.$$.fragment),Ddr=l(),q1e=a("span"),Gdr=o("TFAutoModel"),Nje=l(),Yo=a("div"),F(uL.$$.fragment),Odr=l(),Vd=a("p"),Vdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" class method or the "),TW=a("a"),Wdr=o("from_config()"),Qdr=o(` class
method.`),Hdr=l(),bL=a("p"),Udr=o("This class cannot be instantiated directly using "),j1e=a("code"),Jdr=o("__init__()"),Ydr=o(" (throws an error)."),Kdr=l(),yt=a("div"),F(vL.$$.fragment),Zdr=l(),D1e=a("p"),ecr=o("Instantiates one of the base model classes of the library from a configuration."),ocr=l(),Xd=a("p"),rcr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),tcr=o("not"),acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),ncr=o("from_pretrained()"),scr=o(" to load the model weights."),lcr=l(),F(n7.$$.fragment),icr=l(),wr=a("div"),F(FL.$$.fragment),dcr=l(),O1e=a("p"),ccr=o("Instantiate one of the base model classes of the library from a pretrained model."),fcr=l(),Ka=a("p"),mcr=o("The model class to instantiate is selected based on the "),V1e=a("code"),gcr=o("model_type"),hcr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),pcr=o("pretrained_model_name_or_path"),_cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),ucr=o("pretrained_model_name_or_path"),bcr=o(":"),vcr=l(),q=a("ul"),s7=a("li"),W1e=a("strong"),Fcr=o("albert"),Tcr=o(" \u2014 "),EW=a("a"),Mcr=o("TFAlbertModel"),Ecr=o(" (ALBERT model)"),Ccr=l(),l7=a("li"),Q1e=a("strong"),wcr=o("bart"),Acr=o(" \u2014 "),CW=a("a"),ycr=o("TFBartModel"),Lcr=o(" (BART model)"),xcr=l(),i7=a("li"),H1e=a("strong"),$cr=o("bert"),kcr=o(" \u2014 "),wW=a("a"),Scr=o("TFBertModel"),Rcr=o(" (BERT model)"),Pcr=l(),d7=a("li"),U1e=a("strong"),Bcr=o("blenderbot"),Icr=o(" \u2014 "),AW=a("a"),Ncr=o("TFBlenderbotModel"),qcr=o(" (Blenderbot model)"),jcr=l(),c7=a("li"),J1e=a("strong"),Dcr=o("blenderbot-small"),Gcr=o(" \u2014 "),yW=a("a"),Ocr=o("TFBlenderbotSmallModel"),Vcr=o(" (BlenderbotSmall model)"),Xcr=l(),f7=a("li"),Y1e=a("strong"),zcr=o("camembert"),Wcr=o(" \u2014 "),LW=a("a"),Qcr=o("TFCamembertModel"),Hcr=o(" (CamemBERT model)"),Ucr=l(),m7=a("li"),K1e=a("strong"),Jcr=o("clip"),Ycr=o(" \u2014 "),xW=a("a"),Kcr=o("TFCLIPModel"),Zcr=o(" (CLIP model)"),efr=l(),g7=a("li"),Z1e=a("strong"),ofr=o("convbert"),rfr=o(" \u2014 "),$W=a("a"),tfr=o("TFConvBertModel"),afr=o(" (ConvBERT model)"),nfr=l(),h7=a("li"),ebe=a("strong"),sfr=o("convnext"),lfr=o(" \u2014 "),kW=a("a"),ifr=o("TFConvNextModel"),dfr=o(" (ConvNext model)"),cfr=l(),p7=a("li"),obe=a("strong"),ffr=o("ctrl"),mfr=o(" \u2014 "),SW=a("a"),gfr=o("TFCTRLModel"),hfr=o(" (CTRL model)"),pfr=l(),_7=a("li"),rbe=a("strong"),_fr=o("data2vec-vision"),ufr=o(" \u2014 "),RW=a("a"),bfr=o("TFData2VecVisionModel"),vfr=o(" (Data2VecVision model)"),Ffr=l(),u7=a("li"),tbe=a("strong"),Tfr=o("deberta"),Mfr=o(" \u2014 "),PW=a("a"),Efr=o("TFDebertaModel"),Cfr=o(" (DeBERTa model)"),wfr=l(),b7=a("li"),abe=a("strong"),Afr=o("deberta-v2"),yfr=o(" \u2014 "),BW=a("a"),Lfr=o("TFDebertaV2Model"),xfr=o(" (DeBERTa-v2 model)"),$fr=l(),v7=a("li"),nbe=a("strong"),kfr=o("distilbert"),Sfr=o(" \u2014 "),IW=a("a"),Rfr=o("TFDistilBertModel"),Pfr=o(" (DistilBERT model)"),Bfr=l(),F7=a("li"),sbe=a("strong"),Ifr=o("dpr"),Nfr=o(" \u2014 "),NW=a("a"),qfr=o("TFDPRQuestionEncoder"),jfr=o(" (DPR model)"),Dfr=l(),T7=a("li"),lbe=a("strong"),Gfr=o("electra"),Ofr=o(" \u2014 "),qW=a("a"),Vfr=o("TFElectraModel"),Xfr=o(" (ELECTRA model)"),zfr=l(),M7=a("li"),ibe=a("strong"),Wfr=o("flaubert"),Qfr=o(" \u2014 "),jW=a("a"),Hfr=o("TFFlaubertModel"),Ufr=o(" (FlauBERT model)"),Jfr=l(),Ns=a("li"),dbe=a("strong"),Yfr=o("funnel"),Kfr=o(" \u2014 "),DW=a("a"),Zfr=o("TFFunnelModel"),emr=o(" or "),GW=a("a"),omr=o("TFFunnelBaseModel"),rmr=o(" (Funnel Transformer model)"),tmr=l(),E7=a("li"),cbe=a("strong"),amr=o("gpt2"),nmr=o(" \u2014 "),OW=a("a"),smr=o("TFGPT2Model"),lmr=o(" (OpenAI GPT-2 model)"),imr=l(),C7=a("li"),fbe=a("strong"),dmr=o("gptj"),cmr=o(" \u2014 "),VW=a("a"),fmr=o("TFGPTJModel"),mmr=o(" (GPT-J model)"),gmr=l(),w7=a("li"),mbe=a("strong"),hmr=o("hubert"),pmr=o(" \u2014 "),XW=a("a"),_mr=o("TFHubertModel"),umr=o(" (Hubert model)"),bmr=l(),A7=a("li"),gbe=a("strong"),vmr=o("layoutlm"),Fmr=o(" \u2014 "),zW=a("a"),Tmr=o("TFLayoutLMModel"),Mmr=o(" (LayoutLM model)"),Emr=l(),y7=a("li"),hbe=a("strong"),Cmr=o("led"),wmr=o(" \u2014 "),WW=a("a"),Amr=o("TFLEDModel"),ymr=o(" (LED model)"),Lmr=l(),L7=a("li"),pbe=a("strong"),xmr=o("longformer"),$mr=o(" \u2014 "),QW=a("a"),kmr=o("TFLongformerModel"),Smr=o(" (Longformer model)"),Rmr=l(),x7=a("li"),_be=a("strong"),Pmr=o("lxmert"),Bmr=o(" \u2014 "),HW=a("a"),Imr=o("TFLxmertModel"),Nmr=o(" (LXMERT model)"),qmr=l(),$7=a("li"),ube=a("strong"),jmr=o("marian"),Dmr=o(" \u2014 "),UW=a("a"),Gmr=o("TFMarianModel"),Omr=o(" (Marian model)"),Vmr=l(),k7=a("li"),bbe=a("strong"),Xmr=o("mbart"),zmr=o(" \u2014 "),JW=a("a"),Wmr=o("TFMBartModel"),Qmr=o(" (mBART model)"),Hmr=l(),S7=a("li"),vbe=a("strong"),Umr=o("mobilebert"),Jmr=o(" \u2014 "),YW=a("a"),Ymr=o("TFMobileBertModel"),Kmr=o(" (MobileBERT model)"),Zmr=l(),R7=a("li"),Fbe=a("strong"),egr=o("mpnet"),ogr=o(" \u2014 "),KW=a("a"),rgr=o("TFMPNetModel"),tgr=o(" (MPNet model)"),agr=l(),P7=a("li"),Tbe=a("strong"),ngr=o("mt5"),sgr=o(" \u2014 "),ZW=a("a"),lgr=o("TFMT5Model"),igr=o(" (mT5 model)"),dgr=l(),B7=a("li"),Mbe=a("strong"),cgr=o("openai-gpt"),fgr=o(" \u2014 "),eQ=a("a"),mgr=o("TFOpenAIGPTModel"),ggr=o(" (OpenAI GPT model)"),hgr=l(),I7=a("li"),Ebe=a("strong"),pgr=o("pegasus"),_gr=o(" \u2014 "),oQ=a("a"),ugr=o("TFPegasusModel"),bgr=o(" (Pegasus model)"),vgr=l(),N7=a("li"),Cbe=a("strong"),Fgr=o("rembert"),Tgr=o(" \u2014 "),rQ=a("a"),Mgr=o("TFRemBertModel"),Egr=o(" (RemBERT model)"),Cgr=l(),q7=a("li"),wbe=a("strong"),wgr=o("roberta"),Agr=o(" \u2014 "),tQ=a("a"),ygr=o("TFRobertaModel"),Lgr=o(" (RoBERTa model)"),xgr=l(),j7=a("li"),Abe=a("strong"),$gr=o("roformer"),kgr=o(" \u2014 "),aQ=a("a"),Sgr=o("TFRoFormerModel"),Rgr=o(" (RoFormer model)"),Pgr=l(),D7=a("li"),ybe=a("strong"),Bgr=o("speech_to_text"),Igr=o(" \u2014 "),nQ=a("a"),Ngr=o("TFSpeech2TextModel"),qgr=o(" (Speech2Text model)"),jgr=l(),G7=a("li"),Lbe=a("strong"),Dgr=o("swin"),Ggr=o(" \u2014 "),sQ=a("a"),Ogr=o("TFSwinModel"),Vgr=o(" (Swin model)"),Xgr=l(),O7=a("li"),xbe=a("strong"),zgr=o("t5"),Wgr=o(" \u2014 "),lQ=a("a"),Qgr=o("TFT5Model"),Hgr=o(" (T5 model)"),Ugr=l(),V7=a("li"),$be=a("strong"),Jgr=o("tapas"),Ygr=o(" \u2014 "),iQ=a("a"),Kgr=o("TFTapasModel"),Zgr=o(" (TAPAS model)"),ehr=l(),X7=a("li"),kbe=a("strong"),ohr=o("transfo-xl"),rhr=o(" \u2014 "),dQ=a("a"),thr=o("TFTransfoXLModel"),ahr=o(" (Transformer-XL model)"),nhr=l(),z7=a("li"),Sbe=a("strong"),shr=o("vit"),lhr=o(" \u2014 "),cQ=a("a"),ihr=o("TFViTModel"),dhr=o(" (ViT model)"),chr=l(),W7=a("li"),Rbe=a("strong"),fhr=o("vit_mae"),mhr=o(" \u2014 "),fQ=a("a"),ghr=o("TFViTMAEModel"),hhr=o(" (ViTMAE model)"),phr=l(),Q7=a("li"),Pbe=a("strong"),_hr=o("wav2vec2"),uhr=o(" \u2014 "),mQ=a("a"),bhr=o("TFWav2Vec2Model"),vhr=o(" (Wav2Vec2 model)"),Fhr=l(),H7=a("li"),Bbe=a("strong"),Thr=o("xlm"),Mhr=o(" \u2014 "),gQ=a("a"),Ehr=o("TFXLMModel"),Chr=o(" (XLM model)"),whr=l(),U7=a("li"),Ibe=a("strong"),Ahr=o("xlm-roberta"),yhr=o(" \u2014 "),hQ=a("a"),Lhr=o("TFXLMRobertaModel"),xhr=o(" (XLM-RoBERTa model)"),$hr=l(),J7=a("li"),Nbe=a("strong"),khr=o("xlnet"),Shr=o(" \u2014 "),pQ=a("a"),Rhr=o("TFXLNetModel"),Phr=o(" (XLNet model)"),Bhr=l(),F(Y7.$$.fragment),qje=l(),zd=a("h2"),K7=a("a"),qbe=a("span"),F(TL.$$.fragment),Ihr=l(),jbe=a("span"),Nhr=o("TFAutoModelForPreTraining"),jje=l(),Ko=a("div"),F(ML.$$.fragment),qhr=l(),Wd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),uQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),EL=a("p"),zhr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),Lt=a("div"),F(CL.$$.fragment),Uhr=l(),Gbe=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yhr=l(),Qd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(Z7.$$.fragment),apr=l(),Ar=a("div"),F(wL.$$.fragment),npr=l(),Vbe=a("p"),spr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lpr=l(),Za=a("p"),ipr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),se=a("ul"),e9=a("li"),Qbe=a("strong"),_pr=o("albert"),upr=o(" \u2014 "),vQ=a("a"),bpr=o("TFAlbertForPreTraining"),vpr=o(" (ALBERT model)"),Fpr=l(),o9=a("li"),Hbe=a("strong"),Tpr=o("bart"),Mpr=o(" \u2014 "),FQ=a("a"),Epr=o("TFBartForConditionalGeneration"),Cpr=o(" (BART model)"),wpr=l(),r9=a("li"),Ube=a("strong"),Apr=o("bert"),ypr=o(" \u2014 "),TQ=a("a"),Lpr=o("TFBertForPreTraining"),xpr=o(" (BERT model)"),$pr=l(),t9=a("li"),Jbe=a("strong"),kpr=o("camembert"),Spr=o(" \u2014 "),MQ=a("a"),Rpr=o("TFCamembertForMaskedLM"),Ppr=o(" (CamemBERT model)"),Bpr=l(),a9=a("li"),Ybe=a("strong"),Ipr=o("ctrl"),Npr=o(" \u2014 "),EQ=a("a"),qpr=o("TFCTRLLMHeadModel"),jpr=o(" (CTRL model)"),Dpr=l(),n9=a("li"),Kbe=a("strong"),Gpr=o("distilbert"),Opr=o(" \u2014 "),CQ=a("a"),Vpr=o("TFDistilBertForMaskedLM"),Xpr=o(" (DistilBERT model)"),zpr=l(),s9=a("li"),Zbe=a("strong"),Wpr=o("electra"),Qpr=o(" \u2014 "),wQ=a("a"),Hpr=o("TFElectraForPreTraining"),Upr=o(" (ELECTRA model)"),Jpr=l(),l9=a("li"),eve=a("strong"),Ypr=o("flaubert"),Kpr=o(" \u2014 "),AQ=a("a"),Zpr=o("TFFlaubertWithLMHeadModel"),e_r=o(" (FlauBERT model)"),o_r=l(),i9=a("li"),ove=a("strong"),r_r=o("funnel"),t_r=o(" \u2014 "),yQ=a("a"),a_r=o("TFFunnelForPreTraining"),n_r=o(" (Funnel Transformer model)"),s_r=l(),d9=a("li"),rve=a("strong"),l_r=o("gpt2"),i_r=o(" \u2014 "),LQ=a("a"),d_r=o("TFGPT2LMHeadModel"),c_r=o(" (OpenAI GPT-2 model)"),f_r=l(),c9=a("li"),tve=a("strong"),m_r=o("layoutlm"),g_r=o(" \u2014 "),xQ=a("a"),h_r=o("TFLayoutLMForMaskedLM"),p_r=o(" (LayoutLM model)"),__r=l(),f9=a("li"),ave=a("strong"),u_r=o("lxmert"),b_r=o(" \u2014 "),$Q=a("a"),v_r=o("TFLxmertForPreTraining"),F_r=o(" (LXMERT model)"),T_r=l(),m9=a("li"),nve=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),kQ=a("a"),C_r=o("TFMobileBertForPreTraining"),w_r=o(" (MobileBERT model)"),A_r=l(),g9=a("li"),sve=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),SQ=a("a"),x_r=o("TFMPNetForMaskedLM"),$_r=o(" (MPNet model)"),k_r=l(),h9=a("li"),lve=a("strong"),S_r=o("openai-gpt"),R_r=o(" \u2014 "),RQ=a("a"),P_r=o("TFOpenAIGPTLMHeadModel"),B_r=o(" (OpenAI GPT model)"),I_r=l(),p9=a("li"),ive=a("strong"),N_r=o("roberta"),q_r=o(" \u2014 "),PQ=a("a"),j_r=o("TFRobertaForMaskedLM"),D_r=o(" (RoBERTa model)"),G_r=l(),_9=a("li"),dve=a("strong"),O_r=o("t5"),V_r=o(" \u2014 "),BQ=a("a"),X_r=o("TFT5ForConditionalGeneration"),z_r=o(" (T5 model)"),W_r=l(),u9=a("li"),cve=a("strong"),Q_r=o("tapas"),H_r=o(" \u2014 "),IQ=a("a"),U_r=o("TFTapasForMaskedLM"),J_r=o(" (TAPAS model)"),Y_r=l(),b9=a("li"),fve=a("strong"),K_r=o("transfo-xl"),Z_r=o(" \u2014 "),NQ=a("a"),eur=o("TFTransfoXLLMHeadModel"),our=o(" (Transformer-XL model)"),rur=l(),v9=a("li"),mve=a("strong"),tur=o("vit_mae"),aur=o(" \u2014 "),qQ=a("a"),nur=o("TFViTMAEForPreTraining"),sur=o(" (ViTMAE model)"),lur=l(),F9=a("li"),gve=a("strong"),iur=o("xlm"),dur=o(" \u2014 "),jQ=a("a"),cur=o("TFXLMWithLMHeadModel"),fur=o(" (XLM model)"),mur=l(),T9=a("li"),hve=a("strong"),gur=o("xlm-roberta"),hur=o(" \u2014 "),DQ=a("a"),pur=o("TFXLMRobertaForMaskedLM"),_ur=o(" (XLM-RoBERTa model)"),uur=l(),M9=a("li"),pve=a("strong"),bur=o("xlnet"),vur=o(" \u2014 "),GQ=a("a"),Fur=o("TFXLNetLMHeadModel"),Tur=o(" (XLNet model)"),Mur=l(),F(E9.$$.fragment),Dje=l(),Hd=a("h2"),C9=a("a"),_ve=a("span"),F(AL.$$.fragment),Eur=l(),uve=a("span"),Cur=o("TFAutoModelForCausalLM"),Gje=l(),Zo=a("div"),F(yL.$$.fragment),wur=l(),Ud=a("p"),Aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=a("a"),yur=o("from_pretrained()"),Lur=o(" class method or the "),VQ=a("a"),xur=o("from_config()"),$ur=o(` class
method.`),kur=l(),LL=a("p"),Sur=o("This class cannot be instantiated directly using "),bve=a("code"),Rur=o("__init__()"),Pur=o(" (throws an error)."),Bur=l(),xt=a("div"),F(xL.$$.fragment),Iur=l(),vve=a("p"),Nur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qur=l(),Jd=a("p"),jur=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),Dur=o("not"),Gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Our=o("from_pretrained()"),Vur=o(" to load the model weights."),Xur=l(),F(w9.$$.fragment),zur=l(),yr=a("div"),F($L.$$.fragment),Wur=l(),Tve=a("p"),Qur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hur=l(),en=a("p"),Uur=o("The model class to instantiate is selected based on the "),Mve=a("code"),Jur=o("model_type"),Yur=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(":"),r2r=l(),Ee=a("ul"),A9=a("li"),wve=a("strong"),t2r=o("bert"),a2r=o(" \u2014 "),zQ=a("a"),n2r=o("TFBertLMHeadModel"),s2r=o(" (BERT model)"),l2r=l(),y9=a("li"),Ave=a("strong"),i2r=o("camembert"),d2r=o(" \u2014 "),WQ=a("a"),c2r=o("TFCamembertForCausalLM"),f2r=o(" (CamemBERT model)"),m2r=l(),L9=a("li"),yve=a("strong"),g2r=o("ctrl"),h2r=o(" \u2014 "),QQ=a("a"),p2r=o("TFCTRLLMHeadModel"),_2r=o(" (CTRL model)"),u2r=l(),x9=a("li"),Lve=a("strong"),b2r=o("gpt2"),v2r=o(" \u2014 "),HQ=a("a"),F2r=o("TFGPT2LMHeadModel"),T2r=o(" (OpenAI GPT-2 model)"),M2r=l(),$9=a("li"),xve=a("strong"),E2r=o("gptj"),C2r=o(" \u2014 "),UQ=a("a"),w2r=o("TFGPTJForCausalLM"),A2r=o(" (GPT-J model)"),y2r=l(),k9=a("li"),$ve=a("strong"),L2r=o("openai-gpt"),x2r=o(" \u2014 "),JQ=a("a"),$2r=o("TFOpenAIGPTLMHeadModel"),k2r=o(" (OpenAI GPT model)"),S2r=l(),S9=a("li"),kve=a("strong"),R2r=o("rembert"),P2r=o(" \u2014 "),YQ=a("a"),B2r=o("TFRemBertForCausalLM"),I2r=o(" (RemBERT model)"),N2r=l(),R9=a("li"),Sve=a("strong"),q2r=o("roberta"),j2r=o(" \u2014 "),KQ=a("a"),D2r=o("TFRobertaForCausalLM"),G2r=o(" (RoBERTa model)"),O2r=l(),P9=a("li"),Rve=a("strong"),V2r=o("roformer"),X2r=o(" \u2014 "),ZQ=a("a"),z2r=o("TFRoFormerForCausalLM"),W2r=o(" (RoFormer model)"),Q2r=l(),B9=a("li"),Pve=a("strong"),H2r=o("transfo-xl"),U2r=o(" \u2014 "),eH=a("a"),J2r=o("TFTransfoXLLMHeadModel"),Y2r=o(" (Transformer-XL model)"),K2r=l(),I9=a("li"),Bve=a("strong"),Z2r=o("xlm"),e1r=o(" \u2014 "),oH=a("a"),o1r=o("TFXLMWithLMHeadModel"),r1r=o(" (XLM model)"),t1r=l(),N9=a("li"),Ive=a("strong"),a1r=o("xlnet"),n1r=o(" \u2014 "),rH=a("a"),s1r=o("TFXLNetLMHeadModel"),l1r=o(" (XLNet model)"),i1r=l(),F(q9.$$.fragment),Oje=l(),Yd=a("h2"),j9=a("a"),Nve=a("span"),F(kL.$$.fragment),d1r=l(),qve=a("span"),c1r=o("TFAutoModelForImageClassification"),Vje=l(),er=a("div"),F(SL.$$.fragment),f1r=l(),Kd=a("p"),m1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tH=a("a"),g1r=o("from_pretrained()"),h1r=o(" class method or the "),aH=a("a"),p1r=o("from_config()"),_1r=o(` class
method.`),u1r=l(),RL=a("p"),b1r=o("This class cannot be instantiated directly using "),jve=a("code"),v1r=o("__init__()"),F1r=o(" (throws an error)."),T1r=l(),$t=a("div"),F(PL.$$.fragment),M1r=l(),Dve=a("p"),E1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C1r=l(),Zd=a("p"),w1r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),A1r=o("not"),y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),L1r=o("from_pretrained()"),x1r=o(" to load the model weights."),$1r=l(),F(D9.$$.fragment),k1r=l(),Lr=a("div"),F(BL.$$.fragment),S1r=l(),Ove=a("p"),R1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P1r=l(),on=a("p"),B1r=o("The model class to instantiate is selected based on the "),Vve=a("code"),I1r=o("model_type"),N1r=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),q1r=o("pretrained_model_name_or_path"),j1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(":"),O1r=l(),rn=a("ul"),G9=a("li"),Wve=a("strong"),V1r=o("convnext"),X1r=o(" \u2014 "),sH=a("a"),z1r=o("TFConvNextForImageClassification"),W1r=o(" (ConvNext model)"),Q1r=l(),O9=a("li"),Qve=a("strong"),H1r=o("data2vec-vision"),U1r=o(" \u2014 "),lH=a("a"),J1r=o("TFData2VecVisionForImageClassification"),Y1r=o(" (Data2VecVision model)"),K1r=l(),V9=a("li"),Hve=a("strong"),Z1r=o("swin"),ebr=o(" \u2014 "),iH=a("a"),obr=o("TFSwinForImageClassification"),rbr=o(" (Swin model)"),tbr=l(),X9=a("li"),Uve=a("strong"),abr=o("vit"),nbr=o(" \u2014 "),dH=a("a"),sbr=o("TFViTForImageClassification"),lbr=o(" (ViT model)"),ibr=l(),F(z9.$$.fragment),Xje=l(),ec=a("h2"),W9=a("a"),Jve=a("span"),F(IL.$$.fragment),dbr=l(),Yve=a("span"),cbr=o("TFAutoModelForMaskedLM"),zje=l(),or=a("div"),F(NL.$$.fragment),fbr=l(),oc=a("p"),mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cH=a("a"),gbr=o("from_pretrained()"),hbr=o(" class method or the "),fH=a("a"),pbr=o("from_config()"),_br=o(` class
method.`),ubr=l(),qL=a("p"),bbr=o("This class cannot be instantiated directly using "),Kve=a("code"),vbr=o("__init__()"),Fbr=o(" (throws an error)."),Tbr=l(),kt=a("div"),F(jL.$$.fragment),Mbr=l(),Zve=a("p"),Ebr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cbr=l(),rc=a("p"),wbr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),Abr=o("not"),ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Lbr=o("from_pretrained()"),xbr=o(" to load the model weights."),$br=l(),F(Q9.$$.fragment),kbr=l(),xr=a("div"),F(DL.$$.fragment),Sbr=l(),oFe=a("p"),Rbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pbr=l(),tn=a("p"),Bbr=o("The model class to instantiate is selected based on the "),rFe=a("code"),Ibr=o("model_type"),Nbr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),qbr=o("pretrained_model_name_or_path"),jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),Dbr=o("pretrained_model_name_or_path"),Gbr=o(":"),Obr=l(),ie=a("ul"),H9=a("li"),nFe=a("strong"),Vbr=o("albert"),Xbr=o(" \u2014 "),gH=a("a"),zbr=o("TFAlbertForMaskedLM"),Wbr=o(" (ALBERT model)"),Qbr=l(),U9=a("li"),sFe=a("strong"),Hbr=o("bert"),Ubr=o(" \u2014 "),hH=a("a"),Jbr=o("TFBertForMaskedLM"),Ybr=o(" (BERT model)"),Kbr=l(),J9=a("li"),lFe=a("strong"),Zbr=o("camembert"),evr=o(" \u2014 "),pH=a("a"),ovr=o("TFCamembertForMaskedLM"),rvr=o(" (CamemBERT model)"),tvr=l(),Y9=a("li"),iFe=a("strong"),avr=o("convbert"),nvr=o(" \u2014 "),_H=a("a"),svr=o("TFConvBertForMaskedLM"),lvr=o(" (ConvBERT model)"),ivr=l(),K9=a("li"),dFe=a("strong"),dvr=o("deberta"),cvr=o(" \u2014 "),uH=a("a"),fvr=o("TFDebertaForMaskedLM"),mvr=o(" (DeBERTa model)"),gvr=l(),Z9=a("li"),cFe=a("strong"),hvr=o("deberta-v2"),pvr=o(" \u2014 "),bH=a("a"),_vr=o("TFDebertaV2ForMaskedLM"),uvr=o(" (DeBERTa-v2 model)"),bvr=l(),eM=a("li"),fFe=a("strong"),vvr=o("distilbert"),Fvr=o(" \u2014 "),vH=a("a"),Tvr=o("TFDistilBertForMaskedLM"),Mvr=o(" (DistilBERT model)"),Evr=l(),oM=a("li"),mFe=a("strong"),Cvr=o("electra"),wvr=o(" \u2014 "),FH=a("a"),Avr=o("TFElectraForMaskedLM"),yvr=o(" (ELECTRA model)"),Lvr=l(),rM=a("li"),gFe=a("strong"),xvr=o("flaubert"),$vr=o(" \u2014 "),TH=a("a"),kvr=o("TFFlaubertWithLMHeadModel"),Svr=o(" (FlauBERT model)"),Rvr=l(),tM=a("li"),hFe=a("strong"),Pvr=o("funnel"),Bvr=o(" \u2014 "),MH=a("a"),Ivr=o("TFFunnelForMaskedLM"),Nvr=o(" (Funnel Transformer model)"),qvr=l(),aM=a("li"),pFe=a("strong"),jvr=o("layoutlm"),Dvr=o(" \u2014 "),EH=a("a"),Gvr=o("TFLayoutLMForMaskedLM"),Ovr=o(" (LayoutLM model)"),Vvr=l(),nM=a("li"),_Fe=a("strong"),Xvr=o("longformer"),zvr=o(" \u2014 "),CH=a("a"),Wvr=o("TFLongformerForMaskedLM"),Qvr=o(" (Longformer model)"),Hvr=l(),sM=a("li"),uFe=a("strong"),Uvr=o("mobilebert"),Jvr=o(" \u2014 "),wH=a("a"),Yvr=o("TFMobileBertForMaskedLM"),Kvr=o(" (MobileBERT model)"),Zvr=l(),lM=a("li"),bFe=a("strong"),eFr=o("mpnet"),oFr=o(" \u2014 "),AH=a("a"),rFr=o("TFMPNetForMaskedLM"),tFr=o(" (MPNet model)"),aFr=l(),iM=a("li"),vFe=a("strong"),nFr=o("rembert"),sFr=o(" \u2014 "),yH=a("a"),lFr=o("TFRemBertForMaskedLM"),iFr=o(" (RemBERT model)"),dFr=l(),dM=a("li"),FFe=a("strong"),cFr=o("roberta"),fFr=o(" \u2014 "),LH=a("a"),mFr=o("TFRobertaForMaskedLM"),gFr=o(" (RoBERTa model)"),hFr=l(),cM=a("li"),TFe=a("strong"),pFr=o("roformer"),_Fr=o(" \u2014 "),xH=a("a"),uFr=o("TFRoFormerForMaskedLM"),bFr=o(" (RoFormer model)"),vFr=l(),fM=a("li"),MFe=a("strong"),FFr=o("tapas"),TFr=o(" \u2014 "),$H=a("a"),MFr=o("TFTapasForMaskedLM"),EFr=o(" (TAPAS model)"),CFr=l(),mM=a("li"),EFe=a("strong"),wFr=o("xlm"),AFr=o(" \u2014 "),kH=a("a"),yFr=o("TFXLMWithLMHeadModel"),LFr=o(" (XLM model)"),xFr=l(),gM=a("li"),CFe=a("strong"),$Fr=o("xlm-roberta"),kFr=o(" \u2014 "),SH=a("a"),SFr=o("TFXLMRobertaForMaskedLM"),RFr=o(" (XLM-RoBERTa model)"),PFr=l(),F(hM.$$.fragment),Wje=l(),tc=a("h2"),pM=a("a"),wFe=a("span"),F(GL.$$.fragment),BFr=l(),AFe=a("span"),IFr=o("TFAutoModelForSeq2SeqLM"),Qje=l(),rr=a("div"),F(OL.$$.fragment),NFr=l(),ac=a("p"),qFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RH=a("a"),jFr=o("from_pretrained()"),DFr=o(" class method or the "),PH=a("a"),GFr=o("from_config()"),OFr=o(` class
method.`),VFr=l(),VL=a("p"),XFr=o("This class cannot be instantiated directly using "),yFe=a("code"),zFr=o("__init__()"),WFr=o(" (throws an error)."),QFr=l(),St=a("div"),F(XL.$$.fragment),HFr=l(),LFe=a("p"),UFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JFr=l(),nc=a("p"),YFr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),KFr=o("not"),ZFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),e6r=o("from_pretrained()"),o6r=o(" to load the model weights."),r6r=l(),F(_M.$$.fragment),t6r=l(),$r=a("div"),F(zL.$$.fragment),a6r=l(),$Fe=a("p"),n6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s6r=l(),an=a("p"),l6r=o("The model class to instantiate is selected based on the "),kFe=a("code"),i6r=o("model_type"),d6r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(":"),h6r=l(),ye=a("ul"),uM=a("li"),PFe=a("strong"),p6r=o("bart"),_6r=o(" \u2014 "),IH=a("a"),u6r=o("TFBartForConditionalGeneration"),b6r=o(" (BART model)"),v6r=l(),bM=a("li"),BFe=a("strong"),F6r=o("blenderbot"),T6r=o(" \u2014 "),NH=a("a"),M6r=o("TFBlenderbotForConditionalGeneration"),E6r=o(" (Blenderbot model)"),C6r=l(),vM=a("li"),IFe=a("strong"),w6r=o("blenderbot-small"),A6r=o(" \u2014 "),qH=a("a"),y6r=o("TFBlenderbotSmallForConditionalGeneration"),L6r=o(" (BlenderbotSmall model)"),x6r=l(),FM=a("li"),NFe=a("strong"),$6r=o("encoder-decoder"),k6r=o(" \u2014 "),jH=a("a"),S6r=o("TFEncoderDecoderModel"),R6r=o(" (Encoder decoder model)"),P6r=l(),TM=a("li"),qFe=a("strong"),B6r=o("led"),I6r=o(" \u2014 "),DH=a("a"),N6r=o("TFLEDForConditionalGeneration"),q6r=o(" (LED model)"),j6r=l(),MM=a("li"),jFe=a("strong"),D6r=o("marian"),G6r=o(" \u2014 "),GH=a("a"),O6r=o("TFMarianMTModel"),V6r=o(" (Marian model)"),X6r=l(),EM=a("li"),DFe=a("strong"),z6r=o("mbart"),W6r=o(" \u2014 "),OH=a("a"),Q6r=o("TFMBartForConditionalGeneration"),H6r=o(" (mBART model)"),U6r=l(),CM=a("li"),GFe=a("strong"),J6r=o("mt5"),Y6r=o(" \u2014 "),VH=a("a"),K6r=o("TFMT5ForConditionalGeneration"),Z6r=o(" (mT5 model)"),eTr=l(),wM=a("li"),OFe=a("strong"),oTr=o("pegasus"),rTr=o(" \u2014 "),XH=a("a"),tTr=o("TFPegasusForConditionalGeneration"),aTr=o(" (Pegasus model)"),nTr=l(),AM=a("li"),VFe=a("strong"),sTr=o("t5"),lTr=o(" \u2014 "),zH=a("a"),iTr=o("TFT5ForConditionalGeneration"),dTr=o(" (T5 model)"),cTr=l(),F(yM.$$.fragment),Hje=l(),sc=a("h2"),LM=a("a"),XFe=a("span"),F(WL.$$.fragment),fTr=l(),zFe=a("span"),mTr=o("TFAutoModelForSequenceClassification"),Uje=l(),tr=a("div"),F(QL.$$.fragment),gTr=l(),lc=a("p"),hTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WH=a("a"),pTr=o("from_pretrained()"),_Tr=o(" class method or the "),QH=a("a"),uTr=o("from_config()"),bTr=o(` class
method.`),vTr=l(),HL=a("p"),FTr=o("This class cannot be instantiated directly using "),WFe=a("code"),TTr=o("__init__()"),MTr=o(" (throws an error)."),ETr=l(),Rt=a("div"),F(UL.$$.fragment),CTr=l(),QFe=a("p"),wTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ATr=l(),ic=a("p"),yTr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),LTr=o("not"),xTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),$Tr=o("from_pretrained()"),kTr=o(" to load the model weights."),STr=l(),F(xM.$$.fragment),RTr=l(),kr=a("div"),F(JL.$$.fragment),PTr=l(),UFe=a("p"),BTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ITr=l(),nn=a("p"),NTr=o("The model class to instantiate is selected based on the "),JFe=a("code"),qTr=o("model_type"),jTr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),DTr=o("pretrained_model_name_or_path"),GTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),OTr=o("pretrained_model_name_or_path"),VTr=o(":"),XTr=l(),oe=a("ul"),$M=a("li"),ZFe=a("strong"),zTr=o("albert"),WTr=o(" \u2014 "),UH=a("a"),QTr=o("TFAlbertForSequenceClassification"),HTr=o(" (ALBERT model)"),UTr=l(),kM=a("li"),e6e=a("strong"),JTr=o("bert"),YTr=o(" \u2014 "),JH=a("a"),KTr=o("TFBertForSequenceClassification"),ZTr=o(" (BERT model)"),e7r=l(),SM=a("li"),o6e=a("strong"),o7r=o("camembert"),r7r=o(" \u2014 "),YH=a("a"),t7r=o("TFCamembertForSequenceClassification"),a7r=o(" (CamemBERT model)"),n7r=l(),RM=a("li"),r6e=a("strong"),s7r=o("convbert"),l7r=o(" \u2014 "),KH=a("a"),i7r=o("TFConvBertForSequenceClassification"),d7r=o(" (ConvBERT model)"),c7r=l(),PM=a("li"),t6e=a("strong"),f7r=o("ctrl"),m7r=o(" \u2014 "),ZH=a("a"),g7r=o("TFCTRLForSequenceClassification"),h7r=o(" (CTRL model)"),p7r=l(),BM=a("li"),a6e=a("strong"),_7r=o("deberta"),u7r=o(" \u2014 "),eU=a("a"),b7r=o("TFDebertaForSequenceClassification"),v7r=o(" (DeBERTa model)"),F7r=l(),IM=a("li"),n6e=a("strong"),T7r=o("deberta-v2"),M7r=o(" \u2014 "),oU=a("a"),E7r=o("TFDebertaV2ForSequenceClassification"),C7r=o(" (DeBERTa-v2 model)"),w7r=l(),NM=a("li"),s6e=a("strong"),A7r=o("distilbert"),y7r=o(" \u2014 "),rU=a("a"),L7r=o("TFDistilBertForSequenceClassification"),x7r=o(" (DistilBERT model)"),$7r=l(),qM=a("li"),l6e=a("strong"),k7r=o("electra"),S7r=o(" \u2014 "),tU=a("a"),R7r=o("TFElectraForSequenceClassification"),P7r=o(" (ELECTRA model)"),B7r=l(),jM=a("li"),i6e=a("strong"),I7r=o("flaubert"),N7r=o(" \u2014 "),aU=a("a"),q7r=o("TFFlaubertForSequenceClassification"),j7r=o(" (FlauBERT model)"),D7r=l(),DM=a("li"),d6e=a("strong"),G7r=o("funnel"),O7r=o(" \u2014 "),nU=a("a"),V7r=o("TFFunnelForSequenceClassification"),X7r=o(" (Funnel Transformer model)"),z7r=l(),GM=a("li"),c6e=a("strong"),W7r=o("gpt2"),Q7r=o(" \u2014 "),sU=a("a"),H7r=o("TFGPT2ForSequenceClassification"),U7r=o(" (OpenAI GPT-2 model)"),J7r=l(),OM=a("li"),f6e=a("strong"),Y7r=o("gptj"),K7r=o(" \u2014 "),lU=a("a"),Z7r=o("TFGPTJForSequenceClassification"),e9r=o(" (GPT-J model)"),o9r=l(),VM=a("li"),m6e=a("strong"),r9r=o("layoutlm"),t9r=o(" \u2014 "),iU=a("a"),a9r=o("TFLayoutLMForSequenceClassification"),n9r=o(" (LayoutLM model)"),s9r=l(),XM=a("li"),g6e=a("strong"),l9r=o("longformer"),i9r=o(" \u2014 "),dU=a("a"),d9r=o("TFLongformerForSequenceClassification"),c9r=o(" (Longformer model)"),f9r=l(),zM=a("li"),h6e=a("strong"),m9r=o("mobilebert"),g9r=o(" \u2014 "),cU=a("a"),h9r=o("TFMobileBertForSequenceClassification"),p9r=o(" (MobileBERT model)"),_9r=l(),WM=a("li"),p6e=a("strong"),u9r=o("mpnet"),b9r=o(" \u2014 "),fU=a("a"),v9r=o("TFMPNetForSequenceClassification"),F9r=o(" (MPNet model)"),T9r=l(),QM=a("li"),_6e=a("strong"),M9r=o("openai-gpt"),E9r=o(" \u2014 "),mU=a("a"),C9r=o("TFOpenAIGPTForSequenceClassification"),w9r=o(" (OpenAI GPT model)"),A9r=l(),HM=a("li"),u6e=a("strong"),y9r=o("rembert"),L9r=o(" \u2014 "),gU=a("a"),x9r=o("TFRemBertForSequenceClassification"),$9r=o(" (RemBERT model)"),k9r=l(),UM=a("li"),b6e=a("strong"),S9r=o("roberta"),R9r=o(" \u2014 "),hU=a("a"),P9r=o("TFRobertaForSequenceClassification"),B9r=o(" (RoBERTa model)"),I9r=l(),JM=a("li"),v6e=a("strong"),N9r=o("roformer"),q9r=o(" \u2014 "),pU=a("a"),j9r=o("TFRoFormerForSequenceClassification"),D9r=o(" (RoFormer model)"),G9r=l(),YM=a("li"),F6e=a("strong"),O9r=o("tapas"),V9r=o(" \u2014 "),_U=a("a"),X9r=o("TFTapasForSequenceClassification"),z9r=o(" (TAPAS model)"),W9r=l(),KM=a("li"),T6e=a("strong"),Q9r=o("transfo-xl"),H9r=o(" \u2014 "),uU=a("a"),U9r=o("TFTransfoXLForSequenceClassification"),J9r=o(" (Transformer-XL model)"),Y9r=l(),ZM=a("li"),M6e=a("strong"),K9r=o("xlm"),Z9r=o(" \u2014 "),bU=a("a"),eMr=o("TFXLMForSequenceClassification"),oMr=o(" (XLM model)"),rMr=l(),e4=a("li"),E6e=a("strong"),tMr=o("xlm-roberta"),aMr=o(" \u2014 "),vU=a("a"),nMr=o("TFXLMRobertaForSequenceClassification"),sMr=o(" (XLM-RoBERTa model)"),lMr=l(),o4=a("li"),C6e=a("strong"),iMr=o("xlnet"),dMr=o(" \u2014 "),FU=a("a"),cMr=o("TFXLNetForSequenceClassification"),fMr=o(" (XLNet model)"),mMr=l(),F(r4.$$.fragment),Jje=l(),dc=a("h2"),t4=a("a"),w6e=a("span"),F(YL.$$.fragment),gMr=l(),A6e=a("span"),hMr=o("TFAutoModelForMultipleChoice"),Yje=l(),ar=a("div"),F(KL.$$.fragment),pMr=l(),cc=a("p"),_Mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TU=a("a"),uMr=o("from_pretrained()"),bMr=o(" class method or the "),MU=a("a"),vMr=o("from_config()"),FMr=o(` class
method.`),TMr=l(),ZL=a("p"),MMr=o("This class cannot be instantiated directly using "),y6e=a("code"),EMr=o("__init__()"),CMr=o(" (throws an error)."),wMr=l(),Pt=a("div"),F(e8.$$.fragment),AMr=l(),L6e=a("p"),yMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LMr=l(),fc=a("p"),xMr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),$Mr=o("not"),kMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),SMr=o("from_pretrained()"),RMr=o(" to load the model weights."),PMr=l(),F(a4.$$.fragment),BMr=l(),Sr=a("div"),F(o8.$$.fragment),IMr=l(),$6e=a("p"),NMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qMr=l(),sn=a("p"),jMr=o("The model class to instantiate is selected based on the "),k6e=a("code"),DMr=o("model_type"),GMr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(":"),WMr=l(),_e=a("ul"),n4=a("li"),P6e=a("strong"),QMr=o("albert"),HMr=o(" \u2014 "),CU=a("a"),UMr=o("TFAlbertForMultipleChoice"),JMr=o(" (ALBERT model)"),YMr=l(),s4=a("li"),B6e=a("strong"),KMr=o("bert"),ZMr=o(" \u2014 "),wU=a("a"),e4r=o("TFBertForMultipleChoice"),o4r=o(" (BERT model)"),r4r=l(),l4=a("li"),I6e=a("strong"),t4r=o("camembert"),a4r=o(" \u2014 "),AU=a("a"),n4r=o("TFCamembertForMultipleChoice"),s4r=o(" (CamemBERT model)"),l4r=l(),i4=a("li"),N6e=a("strong"),i4r=o("convbert"),d4r=o(" \u2014 "),yU=a("a"),c4r=o("TFConvBertForMultipleChoice"),f4r=o(" (ConvBERT model)"),m4r=l(),d4=a("li"),q6e=a("strong"),g4r=o("distilbert"),h4r=o(" \u2014 "),LU=a("a"),p4r=o("TFDistilBertForMultipleChoice"),_4r=o(" (DistilBERT model)"),u4r=l(),c4=a("li"),j6e=a("strong"),b4r=o("electra"),v4r=o(" \u2014 "),xU=a("a"),F4r=o("TFElectraForMultipleChoice"),T4r=o(" (ELECTRA model)"),M4r=l(),f4=a("li"),D6e=a("strong"),E4r=o("flaubert"),C4r=o(" \u2014 "),$U=a("a"),w4r=o("TFFlaubertForMultipleChoice"),A4r=o(" (FlauBERT model)"),y4r=l(),m4=a("li"),G6e=a("strong"),L4r=o("funnel"),x4r=o(" \u2014 "),kU=a("a"),$4r=o("TFFunnelForMultipleChoice"),k4r=o(" (Funnel Transformer model)"),S4r=l(),g4=a("li"),O6e=a("strong"),R4r=o("longformer"),P4r=o(" \u2014 "),SU=a("a"),B4r=o("TFLongformerForMultipleChoice"),I4r=o(" (Longformer model)"),N4r=l(),h4=a("li"),V6e=a("strong"),q4r=o("mobilebert"),j4r=o(" \u2014 "),RU=a("a"),D4r=o("TFMobileBertForMultipleChoice"),G4r=o(" (MobileBERT model)"),O4r=l(),p4=a("li"),X6e=a("strong"),V4r=o("mpnet"),X4r=o(" \u2014 "),PU=a("a"),z4r=o("TFMPNetForMultipleChoice"),W4r=o(" (MPNet model)"),Q4r=l(),_4=a("li"),z6e=a("strong"),H4r=o("rembert"),U4r=o(" \u2014 "),BU=a("a"),J4r=o("TFRemBertForMultipleChoice"),Y4r=o(" (RemBERT model)"),K4r=l(),u4=a("li"),W6e=a("strong"),Z4r=o("roberta"),eEr=o(" \u2014 "),IU=a("a"),oEr=o("TFRobertaForMultipleChoice"),rEr=o(" (RoBERTa model)"),tEr=l(),b4=a("li"),Q6e=a("strong"),aEr=o("roformer"),nEr=o(" \u2014 "),NU=a("a"),sEr=o("TFRoFormerForMultipleChoice"),lEr=o(" (RoFormer model)"),iEr=l(),v4=a("li"),H6e=a("strong"),dEr=o("xlm"),cEr=o(" \u2014 "),qU=a("a"),fEr=o("TFXLMForMultipleChoice"),mEr=o(" (XLM model)"),gEr=l(),F4=a("li"),U6e=a("strong"),hEr=o("xlm-roberta"),pEr=o(" \u2014 "),jU=a("a"),_Er=o("TFXLMRobertaForMultipleChoice"),uEr=o(" (XLM-RoBERTa model)"),bEr=l(),T4=a("li"),J6e=a("strong"),vEr=o("xlnet"),FEr=o(" \u2014 "),DU=a("a"),TEr=o("TFXLNetForMultipleChoice"),MEr=o(" (XLNet model)"),EEr=l(),F(M4.$$.fragment),Kje=l(),mc=a("h2"),E4=a("a"),Y6e=a("span"),F(r8.$$.fragment),CEr=l(),K6e=a("span"),wEr=o("TFAutoModelForNextSentencePrediction"),Zje=l(),nr=a("div"),F(t8.$$.fragment),AEr=l(),gc=a("p"),yEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GU=a("a"),LEr=o("from_pretrained()"),xEr=o(" class method or the "),OU=a("a"),$Er=o("from_config()"),kEr=o(` class
method.`),SEr=l(),a8=a("p"),REr=o("This class cannot be instantiated directly using "),Z6e=a("code"),PEr=o("__init__()"),BEr=o(" (throws an error)."),IEr=l(),Bt=a("div"),F(n8.$$.fragment),NEr=l(),eTe=a("p"),qEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jEr=l(),hc=a("p"),DEr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),GEr=o("not"),OEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),VEr=o("from_pretrained()"),XEr=o(" to load the model weights."),zEr=l(),F(C4.$$.fragment),WEr=l(),Rr=a("div"),F(s8.$$.fragment),QEr=l(),rTe=a("p"),HEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UEr=l(),ln=a("p"),JEr=o("The model class to instantiate is selected based on the "),tTe=a("code"),YEr=o("model_type"),KEr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),ZEr=o("pretrained_model_name_or_path"),e5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(":"),t5r=l(),l8=a("ul"),w4=a("li"),sTe=a("strong"),a5r=o("bert"),n5r=o(" \u2014 "),XU=a("a"),s5r=o("TFBertForNextSentencePrediction"),l5r=o(" (BERT model)"),i5r=l(),A4=a("li"),lTe=a("strong"),d5r=o("mobilebert"),c5r=o(" \u2014 "),zU=a("a"),f5r=o("TFMobileBertForNextSentencePrediction"),m5r=o(" (MobileBERT model)"),g5r=l(),F(y4.$$.fragment),eDe=l(),pc=a("h2"),L4=a("a"),iTe=a("span"),F(i8.$$.fragment),h5r=l(),dTe=a("span"),p5r=o("TFAutoModelForTableQuestionAnswering"),oDe=l(),sr=a("div"),F(d8.$$.fragment),_5r=l(),_c=a("p"),u5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WU=a("a"),b5r=o("from_pretrained()"),v5r=o(" class method or the "),QU=a("a"),F5r=o("from_config()"),T5r=o(` class
method.`),M5r=l(),c8=a("p"),E5r=o("This class cannot be instantiated directly using "),cTe=a("code"),C5r=o("__init__()"),w5r=o(" (throws an error)."),A5r=l(),It=a("div"),F(f8.$$.fragment),y5r=l(),fTe=a("p"),L5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x5r=l(),uc=a("p"),$5r=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),k5r=o("not"),S5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=a("a"),R5r=o("from_pretrained()"),P5r=o(" to load the model weights."),B5r=l(),F(x4.$$.fragment),I5r=l(),Pr=a("div"),F(m8.$$.fragment),N5r=l(),gTe=a("p"),q5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),j5r=l(),dn=a("p"),D5r=o("The model class to instantiate is selected based on the "),hTe=a("code"),G5r=o("model_type"),O5r=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),V5r=o("pretrained_model_name_or_path"),X5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),z5r=o("pretrained_model_name_or_path"),W5r=o(":"),Q5r=l(),uTe=a("ul"),$4=a("li"),bTe=a("strong"),H5r=o("tapas"),U5r=o(" \u2014 "),UU=a("a"),J5r=o("TFTapasForQuestionAnswering"),Y5r=o(" (TAPAS model)"),K5r=l(),F(k4.$$.fragment),rDe=l(),bc=a("h2"),S4=a("a"),vTe=a("span"),F(g8.$$.fragment),Z5r=l(),FTe=a("span"),eCr=o("TFAutoModelForTokenClassification"),tDe=l(),lr=a("div"),F(h8.$$.fragment),oCr=l(),vc=a("p"),rCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JU=a("a"),tCr=o("from_pretrained()"),aCr=o(" class method or the "),YU=a("a"),nCr=o("from_config()"),sCr=o(` class
method.`),lCr=l(),p8=a("p"),iCr=o("This class cannot be instantiated directly using "),TTe=a("code"),dCr=o("__init__()"),cCr=o(" (throws an error)."),fCr=l(),Nt=a("div"),F(_8.$$.fragment),mCr=l(),MTe=a("p"),gCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hCr=l(),Fc=a("p"),pCr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),_Cr=o("not"),uCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),bCr=o("from_pretrained()"),vCr=o(" to load the model weights."),FCr=l(),F(R4.$$.fragment),TCr=l(),Br=a("div"),F(u8.$$.fragment),MCr=l(),CTe=a("p"),ECr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CCr=l(),cn=a("p"),wCr=o("The model class to instantiate is selected based on the "),wTe=a("code"),ACr=o("model_type"),yCr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),$Cr=o("pretrained_model_name_or_path"),kCr=o(":"),SCr=l(),de=a("ul"),P4=a("li"),LTe=a("strong"),RCr=o("albert"),PCr=o(" \u2014 "),ZU=a("a"),BCr=o("TFAlbertForTokenClassification"),ICr=o(" (ALBERT model)"),NCr=l(),B4=a("li"),xTe=a("strong"),qCr=o("bert"),jCr=o(" \u2014 "),eJ=a("a"),DCr=o("TFBertForTokenClassification"),GCr=o(" (BERT model)"),OCr=l(),I4=a("li"),$Te=a("strong"),VCr=o("camembert"),XCr=o(" \u2014 "),oJ=a("a"),zCr=o("TFCamembertForTokenClassification"),WCr=o(" (CamemBERT model)"),QCr=l(),N4=a("li"),kTe=a("strong"),HCr=o("convbert"),UCr=o(" \u2014 "),rJ=a("a"),JCr=o("TFConvBertForTokenClassification"),YCr=o(" (ConvBERT model)"),KCr=l(),q4=a("li"),STe=a("strong"),ZCr=o("deberta"),e3r=o(" \u2014 "),tJ=a("a"),o3r=o("TFDebertaForTokenClassification"),r3r=o(" (DeBERTa model)"),t3r=l(),j4=a("li"),RTe=a("strong"),a3r=o("deberta-v2"),n3r=o(" \u2014 "),aJ=a("a"),s3r=o("TFDebertaV2ForTokenClassification"),l3r=o(" (DeBERTa-v2 model)"),i3r=l(),D4=a("li"),PTe=a("strong"),d3r=o("distilbert"),c3r=o(" \u2014 "),nJ=a("a"),f3r=o("TFDistilBertForTokenClassification"),m3r=o(" (DistilBERT model)"),g3r=l(),G4=a("li"),BTe=a("strong"),h3r=o("electra"),p3r=o(" \u2014 "),sJ=a("a"),_3r=o("TFElectraForTokenClassification"),u3r=o(" (ELECTRA model)"),b3r=l(),O4=a("li"),ITe=a("strong"),v3r=o("flaubert"),F3r=o(" \u2014 "),lJ=a("a"),T3r=o("TFFlaubertForTokenClassification"),M3r=o(" (FlauBERT model)"),E3r=l(),V4=a("li"),NTe=a("strong"),C3r=o("funnel"),w3r=o(" \u2014 "),iJ=a("a"),A3r=o("TFFunnelForTokenClassification"),y3r=o(" (Funnel Transformer model)"),L3r=l(),X4=a("li"),qTe=a("strong"),x3r=o("layoutlm"),$3r=o(" \u2014 "),dJ=a("a"),k3r=o("TFLayoutLMForTokenClassification"),S3r=o(" (LayoutLM model)"),R3r=l(),z4=a("li"),jTe=a("strong"),P3r=o("longformer"),B3r=o(" \u2014 "),cJ=a("a"),I3r=o("TFLongformerForTokenClassification"),N3r=o(" (Longformer model)"),q3r=l(),W4=a("li"),DTe=a("strong"),j3r=o("mobilebert"),D3r=o(" \u2014 "),fJ=a("a"),G3r=o("TFMobileBertForTokenClassification"),O3r=o(" (MobileBERT model)"),V3r=l(),Q4=a("li"),GTe=a("strong"),X3r=o("mpnet"),z3r=o(" \u2014 "),mJ=a("a"),W3r=o("TFMPNetForTokenClassification"),Q3r=o(" (MPNet model)"),H3r=l(),H4=a("li"),OTe=a("strong"),U3r=o("rembert"),J3r=o(" \u2014 "),gJ=a("a"),Y3r=o("TFRemBertForTokenClassification"),K3r=o(" (RemBERT model)"),Z3r=l(),U4=a("li"),VTe=a("strong"),e0r=o("roberta"),o0r=o(" \u2014 "),hJ=a("a"),r0r=o("TFRobertaForTokenClassification"),t0r=o(" (RoBERTa model)"),a0r=l(),J4=a("li"),XTe=a("strong"),n0r=o("roformer"),s0r=o(" \u2014 "),pJ=a("a"),l0r=o("TFRoFormerForTokenClassification"),i0r=o(" (RoFormer model)"),d0r=l(),Y4=a("li"),zTe=a("strong"),c0r=o("xlm"),f0r=o(" \u2014 "),_J=a("a"),m0r=o("TFXLMForTokenClassification"),g0r=o(" (XLM model)"),h0r=l(),K4=a("li"),WTe=a("strong"),p0r=o("xlm-roberta"),_0r=o(" \u2014 "),uJ=a("a"),u0r=o("TFXLMRobertaForTokenClassification"),b0r=o(" (XLM-RoBERTa model)"),v0r=l(),Z4=a("li"),QTe=a("strong"),F0r=o("xlnet"),T0r=o(" \u2014 "),bJ=a("a"),M0r=o("TFXLNetForTokenClassification"),E0r=o(" (XLNet model)"),C0r=l(),F(eE.$$.fragment),aDe=l(),Tc=a("h2"),oE=a("a"),HTe=a("span"),F(b8.$$.fragment),w0r=l(),UTe=a("span"),A0r=o("TFAutoModelForQuestionAnswering"),nDe=l(),ir=a("div"),F(v8.$$.fragment),y0r=l(),Mc=a("p"),L0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vJ=a("a"),x0r=o("from_pretrained()"),$0r=o(" class method or the "),FJ=a("a"),k0r=o("from_config()"),S0r=o(` class
method.`),R0r=l(),F8=a("p"),P0r=o("This class cannot be instantiated directly using "),JTe=a("code"),B0r=o("__init__()"),I0r=o(" (throws an error)."),N0r=l(),qt=a("div"),F(T8.$$.fragment),q0r=l(),YTe=a("p"),j0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D0r=l(),Ec=a("p"),G0r=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),O0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),X0r=o("from_pretrained()"),z0r=o(" to load the model weights."),W0r=l(),F(rE.$$.fragment),Q0r=l(),Ir=a("div"),F(M8.$$.fragment),H0r=l(),ZTe=a("p"),U0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J0r=l(),fn=a("p"),Y0r=o("The model class to instantiate is selected based on the "),e7e=a("code"),K0r=o("model_type"),Z0r=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(":"),awr=l(),ce=a("ul"),tE=a("li"),t7e=a("strong"),nwr=o("albert"),swr=o(" \u2014 "),MJ=a("a"),lwr=o("TFAlbertForQuestionAnswering"),iwr=o(" (ALBERT model)"),dwr=l(),aE=a("li"),a7e=a("strong"),cwr=o("bert"),fwr=o(" \u2014 "),EJ=a("a"),mwr=o("TFBertForQuestionAnswering"),gwr=o(" (BERT model)"),hwr=l(),nE=a("li"),n7e=a("strong"),pwr=o("camembert"),_wr=o(" \u2014 "),CJ=a("a"),uwr=o("TFCamembertForQuestionAnswering"),bwr=o(" (CamemBERT model)"),vwr=l(),sE=a("li"),s7e=a("strong"),Fwr=o("convbert"),Twr=o(" \u2014 "),wJ=a("a"),Mwr=o("TFConvBertForQuestionAnswering"),Ewr=o(" (ConvBERT model)"),Cwr=l(),lE=a("li"),l7e=a("strong"),wwr=o("deberta"),Awr=o(" \u2014 "),AJ=a("a"),ywr=o("TFDebertaForQuestionAnswering"),Lwr=o(" (DeBERTa model)"),xwr=l(),iE=a("li"),i7e=a("strong"),$wr=o("deberta-v2"),kwr=o(" \u2014 "),yJ=a("a"),Swr=o("TFDebertaV2ForQuestionAnswering"),Rwr=o(" (DeBERTa-v2 model)"),Pwr=l(),dE=a("li"),d7e=a("strong"),Bwr=o("distilbert"),Iwr=o(" \u2014 "),LJ=a("a"),Nwr=o("TFDistilBertForQuestionAnswering"),qwr=o(" (DistilBERT model)"),jwr=l(),cE=a("li"),c7e=a("strong"),Dwr=o("electra"),Gwr=o(" \u2014 "),xJ=a("a"),Owr=o("TFElectraForQuestionAnswering"),Vwr=o(" (ELECTRA model)"),Xwr=l(),fE=a("li"),f7e=a("strong"),zwr=o("flaubert"),Wwr=o(" \u2014 "),$J=a("a"),Qwr=o("TFFlaubertForQuestionAnsweringSimple"),Hwr=o(" (FlauBERT model)"),Uwr=l(),mE=a("li"),m7e=a("strong"),Jwr=o("funnel"),Ywr=o(" \u2014 "),kJ=a("a"),Kwr=o("TFFunnelForQuestionAnswering"),Zwr=o(" (Funnel Transformer model)"),eAr=l(),gE=a("li"),g7e=a("strong"),oAr=o("gptj"),rAr=o(" \u2014 "),SJ=a("a"),tAr=o("TFGPTJForQuestionAnswering"),aAr=o(" (GPT-J model)"),nAr=l(),hE=a("li"),h7e=a("strong"),sAr=o("longformer"),lAr=o(" \u2014 "),RJ=a("a"),iAr=o("TFLongformerForQuestionAnswering"),dAr=o(" (Longformer model)"),cAr=l(),pE=a("li"),p7e=a("strong"),fAr=o("mobilebert"),mAr=o(" \u2014 "),PJ=a("a"),gAr=o("TFMobileBertForQuestionAnswering"),hAr=o(" (MobileBERT model)"),pAr=l(),_E=a("li"),_7e=a("strong"),_Ar=o("mpnet"),uAr=o(" \u2014 "),BJ=a("a"),bAr=o("TFMPNetForQuestionAnswering"),vAr=o(" (MPNet model)"),FAr=l(),uE=a("li"),u7e=a("strong"),TAr=o("rembert"),MAr=o(" \u2014 "),IJ=a("a"),EAr=o("TFRemBertForQuestionAnswering"),CAr=o(" (RemBERT model)"),wAr=l(),bE=a("li"),b7e=a("strong"),AAr=o("roberta"),yAr=o(" \u2014 "),NJ=a("a"),LAr=o("TFRobertaForQuestionAnswering"),xAr=o(" (RoBERTa model)"),$Ar=l(),vE=a("li"),v7e=a("strong"),kAr=o("roformer"),SAr=o(" \u2014 "),qJ=a("a"),RAr=o("TFRoFormerForQuestionAnswering"),PAr=o(" (RoFormer model)"),BAr=l(),FE=a("li"),F7e=a("strong"),IAr=o("xlm"),NAr=o(" \u2014 "),jJ=a("a"),qAr=o("TFXLMForQuestionAnsweringSimple"),jAr=o(" (XLM model)"),DAr=l(),TE=a("li"),T7e=a("strong"),GAr=o("xlm-roberta"),OAr=o(" \u2014 "),DJ=a("a"),VAr=o("TFXLMRobertaForQuestionAnswering"),XAr=o(" (XLM-RoBERTa model)"),zAr=l(),ME=a("li"),M7e=a("strong"),WAr=o("xlnet"),QAr=o(" \u2014 "),GJ=a("a"),HAr=o("TFXLNetForQuestionAnsweringSimple"),UAr=o(" (XLNet model)"),JAr=l(),F(EE.$$.fragment),sDe=l(),Cc=a("h2"),CE=a("a"),E7e=a("span"),F(E8.$$.fragment),YAr=l(),C7e=a("span"),KAr=o("TFAutoModelForVision2Seq"),lDe=l(),dr=a("div"),F(C8.$$.fragment),ZAr=l(),wc=a("p"),eyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OJ=a("a"),oyr=o("from_pretrained()"),ryr=o(" class method or the "),VJ=a("a"),tyr=o("from_config()"),ayr=o(` class
method.`),nyr=l(),w8=a("p"),syr=o("This class cannot be instantiated directly using "),w7e=a("code"),lyr=o("__init__()"),iyr=o(" (throws an error)."),dyr=l(),jt=a("div"),F(A8.$$.fragment),cyr=l(),A7e=a("p"),fyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),myr=l(),Ac=a("p"),gyr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),hyr=o("not"),pyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),_yr=o("from_pretrained()"),uyr=o(" to load the model weights."),byr=l(),F(wE.$$.fragment),vyr=l(),Nr=a("div"),F(y8.$$.fragment),Fyr=l(),L7e=a("p"),Tyr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Myr=l(),mn=a("p"),Eyr=o("The model class to instantiate is selected based on the "),x7e=a("code"),Cyr=o("model_type"),wyr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),Ayr=o("pretrained_model_name_or_path"),yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),Lyr=o("pretrained_model_name_or_path"),xyr=o(":"),$yr=l(),S7e=a("ul"),AE=a("li"),R7e=a("strong"),kyr=o("vision-encoder-decoder"),Syr=o(" \u2014 "),zJ=a("a"),Ryr=o("TFVisionEncoderDecoderModel"),Pyr=o(" (Vision Encoder decoder model)"),Byr=l(),F(yE.$$.fragment),iDe=l(),yc=a("h2"),LE=a("a"),P7e=a("span"),F(L8.$$.fragment),Iyr=l(),B7e=a("span"),Nyr=o("TFAutoModelForSpeechSeq2Seq"),dDe=l(),cr=a("div"),F(x8.$$.fragment),qyr=l(),Lc=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WJ=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),QJ=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),$8=a("p"),zyr=o("This class cannot be instantiated directly using "),I7e=a("code"),Wyr=o("__init__()"),Qyr=o(" (throws an error)."),Hyr=l(),Dt=a("div"),F(k8.$$.fragment),Uyr=l(),N7e=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yyr=l(),xc=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),Zyr=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(xE.$$.fragment),aLr=l(),qr=a("div"),F(S8.$$.fragment),nLr=l(),j7e=a("p"),sLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lLr=l(),gn=a("p"),iLr=o("The model class to instantiate is selected based on the "),D7e=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),V7e=a("ul"),$E=a("li"),X7e=a("strong"),_Lr=o("speech_to_text"),uLr=o(" \u2014 "),UJ=a("a"),bLr=o("TFSpeech2TextForConditionalGeneration"),vLr=o(" (Speech2Text model)"),FLr=l(),F(kE.$$.fragment),cDe=l(),$c=a("h2"),SE=a("a"),z7e=a("span"),F(R8.$$.fragment),TLr=l(),W7e=a("span"),MLr=o("FlaxAutoModel"),fDe=l(),fr=a("div"),F(P8.$$.fragment),ELr=l(),kc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JJ=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),YJ=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),B8=a("p"),$Lr=o("This class cannot be instantiated directly using "),Q7e=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Gt=a("div"),F(I8.$$.fragment),PLr=l(),H7e=a("p"),BLr=o("Instantiates one of the base model classes of the library from a configuration."),ILr=l(),Sc=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),qLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F(RE.$$.fragment),VLr=l(),jr=a("div"),F(N8.$$.fragment),XLr=l(),J7e=a("p"),zLr=o("Instantiate one of the base model classes of the library from a pretrained model."),WLr=l(),hn=a("p"),QLr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),re=a("ul"),PE=a("li"),e9e=a("strong"),o8r=o("albert"),r8r=o(" \u2014 "),ZJ=a("a"),t8r=o("FlaxAlbertModel"),a8r=o(" (ALBERT model)"),n8r=l(),BE=a("li"),o9e=a("strong"),s8r=o("bart"),l8r=o(" \u2014 "),eY=a("a"),i8r=o("FlaxBartModel"),d8r=o(" (BART model)"),c8r=l(),IE=a("li"),r9e=a("strong"),f8r=o("beit"),m8r=o(" \u2014 "),oY=a("a"),g8r=o("FlaxBeitModel"),h8r=o(" (BEiT model)"),p8r=l(),NE=a("li"),t9e=a("strong"),_8r=o("bert"),u8r=o(" \u2014 "),rY=a("a"),b8r=o("FlaxBertModel"),v8r=o(" (BERT model)"),F8r=l(),qE=a("li"),a9e=a("strong"),T8r=o("big_bird"),M8r=o(" \u2014 "),tY=a("a"),E8r=o("FlaxBigBirdModel"),C8r=o(" (BigBird model)"),w8r=l(),jE=a("li"),n9e=a("strong"),A8r=o("blenderbot"),y8r=o(" \u2014 "),aY=a("a"),L8r=o("FlaxBlenderbotModel"),x8r=o(" (Blenderbot model)"),$8r=l(),DE=a("li"),s9e=a("strong"),k8r=o("blenderbot-small"),S8r=o(" \u2014 "),nY=a("a"),R8r=o("FlaxBlenderbotSmallModel"),P8r=o(" (BlenderbotSmall model)"),B8r=l(),GE=a("li"),l9e=a("strong"),I8r=o("clip"),N8r=o(" \u2014 "),sY=a("a"),q8r=o("FlaxCLIPModel"),j8r=o(" (CLIP model)"),D8r=l(),OE=a("li"),i9e=a("strong"),G8r=o("distilbert"),O8r=o(" \u2014 "),lY=a("a"),V8r=o("FlaxDistilBertModel"),X8r=o(" (DistilBERT model)"),z8r=l(),VE=a("li"),d9e=a("strong"),W8r=o("electra"),Q8r=o(" \u2014 "),iY=a("a"),H8r=o("FlaxElectraModel"),U8r=o(" (ELECTRA model)"),J8r=l(),XE=a("li"),c9e=a("strong"),Y8r=o("gpt2"),K8r=o(" \u2014 "),dY=a("a"),Z8r=o("FlaxGPT2Model"),exr=o(" (OpenAI GPT-2 model)"),oxr=l(),zE=a("li"),f9e=a("strong"),rxr=o("gpt_neo"),txr=o(" \u2014 "),cY=a("a"),axr=o("FlaxGPTNeoModel"),nxr=o(" (GPT Neo model)"),sxr=l(),WE=a("li"),m9e=a("strong"),lxr=o("gptj"),ixr=o(" \u2014 "),fY=a("a"),dxr=o("FlaxGPTJModel"),cxr=o(" (GPT-J model)"),fxr=l(),QE=a("li"),g9e=a("strong"),mxr=o("longt5"),gxr=o(" \u2014 "),mY=a("a"),hxr=o("FlaxLongT5Model"),pxr=o(" (LongT5 model)"),_xr=l(),HE=a("li"),h9e=a("strong"),uxr=o("marian"),bxr=o(" \u2014 "),gY=a("a"),vxr=o("FlaxMarianModel"),Fxr=o(" (Marian model)"),Txr=l(),UE=a("li"),p9e=a("strong"),Mxr=o("mbart"),Exr=o(" \u2014 "),hY=a("a"),Cxr=o("FlaxMBartModel"),wxr=o(" (mBART model)"),Axr=l(),JE=a("li"),_9e=a("strong"),yxr=o("mt5"),Lxr=o(" \u2014 "),pY=a("a"),xxr=o("FlaxMT5Model"),$xr=o(" (mT5 model)"),kxr=l(),YE=a("li"),u9e=a("strong"),Sxr=o("pegasus"),Rxr=o(" \u2014 "),_Y=a("a"),Pxr=o("FlaxPegasusModel"),Bxr=o(" (Pegasus model)"),Ixr=l(),KE=a("li"),b9e=a("strong"),Nxr=o("roberta"),qxr=o(" \u2014 "),uY=a("a"),jxr=o("FlaxRobertaModel"),Dxr=o(" (RoBERTa model)"),Gxr=l(),ZE=a("li"),v9e=a("strong"),Oxr=o("roformer"),Vxr=o(" \u2014 "),bY=a("a"),Xxr=o("FlaxRoFormerModel"),zxr=o(" (RoFormer model)"),Wxr=l(),e5=a("li"),F9e=a("strong"),Qxr=o("t5"),Hxr=o(" \u2014 "),vY=a("a"),Uxr=o("FlaxT5Model"),Jxr=o(" (T5 model)"),Yxr=l(),o5=a("li"),T9e=a("strong"),Kxr=o("vision-text-dual-encoder"),Zxr=o(" \u2014 "),FY=a("a"),e$r=o("FlaxVisionTextDualEncoderModel"),o$r=o(" (VisionTextDualEncoder model)"),r$r=l(),r5=a("li"),M9e=a("strong"),t$r=o("vit"),a$r=o(" \u2014 "),TY=a("a"),n$r=o("FlaxViTModel"),s$r=o(" (ViT model)"),l$r=l(),t5=a("li"),E9e=a("strong"),i$r=o("wav2vec2"),d$r=o(" \u2014 "),MY=a("a"),c$r=o("FlaxWav2Vec2Model"),f$r=o(" (Wav2Vec2 model)"),m$r=l(),a5=a("li"),C9e=a("strong"),g$r=o("xglm"),h$r=o(" \u2014 "),EY=a("a"),p$r=o("FlaxXGLMModel"),_$r=o(" (XGLM model)"),u$r=l(),n5=a("li"),w9e=a("strong"),b$r=o("xlm-roberta"),v$r=o(" \u2014 "),CY=a("a"),F$r=o("FlaxXLMRobertaModel"),T$r=o(" (XLM-RoBERTa model)"),M$r=l(),F(s5.$$.fragment),mDe=l(),Rc=a("h2"),l5=a("a"),A9e=a("span"),F(q8.$$.fragment),E$r=l(),y9e=a("span"),C$r=o("FlaxAutoModelForCausalLM"),gDe=l(),mr=a("div"),F(j8.$$.fragment),w$r=l(),Pc=a("p"),A$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wY=a("a"),y$r=o("from_pretrained()"),L$r=o(" class method or the "),AY=a("a"),x$r=o("from_config()"),$$r=o(` class
method.`),k$r=l(),D8=a("p"),S$r=o("This class cannot be instantiated directly using "),L9e=a("code"),R$r=o("__init__()"),P$r=o(" (throws an error)."),B$r=l(),Ot=a("div"),F(G8.$$.fragment),I$r=l(),x9e=a("p"),N$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q$r=l(),Bc=a("p"),j$r=o(`Note:
Loading a model from its configuration file does `),$9e=a("strong"),D$r=o("not"),G$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),O$r=o("from_pretrained()"),V$r=o(" to load the model weights."),X$r=l(),F(i5.$$.fragment),z$r=l(),Dr=a("div"),F(O8.$$.fragment),W$r=l(),k9e=a("p"),Q$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H$r=l(),pn=a("p"),U$r=o("The model class to instantiate is selected based on the "),S9e=a("code"),J$r=o("model_type"),Y$r=o(` property of the config object (either
passed as an argument or loaded from `),R9e=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=a("code"),ekr=o("pretrained_model_name_or_path"),okr=o(":"),rkr=l(),Pe=a("ul"),d5=a("li"),B9e=a("strong"),tkr=o("bart"),akr=o(" \u2014 "),LY=a("a"),nkr=o("FlaxBartForCausalLM"),skr=o(" (BART model)"),lkr=l(),c5=a("li"),I9e=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),xY=a("a"),ckr=o("FlaxBertForCausalLM"),fkr=o(" (BERT model)"),mkr=l(),f5=a("li"),N9e=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),$Y=a("a"),pkr=o("FlaxBigBirdForCausalLM"),_kr=o(" (BigBird model)"),ukr=l(),m5=a("li"),q9e=a("strong"),bkr=o("electra"),vkr=o(" \u2014 "),kY=a("a"),Fkr=o("FlaxElectraForCausalLM"),Tkr=o(" (ELECTRA model)"),Mkr=l(),g5=a("li"),j9e=a("strong"),Ekr=o("gpt2"),Ckr=o(" \u2014 "),SY=a("a"),wkr=o("FlaxGPT2LMHeadModel"),Akr=o(" (OpenAI GPT-2 model)"),ykr=l(),h5=a("li"),D9e=a("strong"),Lkr=o("gpt_neo"),xkr=o(" \u2014 "),RY=a("a"),$kr=o("FlaxGPTNeoForCausalLM"),kkr=o(" (GPT Neo model)"),Skr=l(),p5=a("li"),G9e=a("strong"),Rkr=o("gptj"),Pkr=o(" \u2014 "),PY=a("a"),Bkr=o("FlaxGPTJForCausalLM"),Ikr=o(" (GPT-J model)"),Nkr=l(),_5=a("li"),O9e=a("strong"),qkr=o("roberta"),jkr=o(" \u2014 "),BY=a("a"),Dkr=o("FlaxRobertaForCausalLM"),Gkr=o(" (RoBERTa model)"),Okr=l(),u5=a("li"),V9e=a("strong"),Vkr=o("xglm"),Xkr=o(" \u2014 "),IY=a("a"),zkr=o("FlaxXGLMForCausalLM"),Wkr=o(" (XGLM model)"),Qkr=l(),F(b5.$$.fragment),hDe=l(),Ic=a("h2"),v5=a("a"),X9e=a("span"),F(V8.$$.fragment),Hkr=l(),z9e=a("span"),Ukr=o("FlaxAutoModelForPreTraining"),pDe=l(),gr=a("div"),F(X8.$$.fragment),Jkr=l(),Nc=a("p"),Ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NY=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" class method or the "),qY=a("a"),eSr=o("from_config()"),oSr=o(` class
method.`),rSr=l(),z8=a("p"),tSr=o("This class cannot be instantiated directly using "),W9e=a("code"),aSr=o("__init__()"),nSr=o(" (throws an error)."),sSr=l(),Vt=a("div"),F(W8.$$.fragment),lSr=l(),Q9e=a("p"),iSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dSr=l(),qc=a("p"),cSr=o(`Note:
Loading a model from its configuration file does `),H9e=a("strong"),fSr=o("not"),mSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),gSr=o("from_pretrained()"),hSr=o(" to load the model weights."),pSr=l(),F(F5.$$.fragment),_Sr=l(),Gr=a("div"),F(Q8.$$.fragment),uSr=l(),U9e=a("p"),bSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vSr=l(),_n=a("p"),FSr=o("The model class to instantiate is selected based on the "),J9e=a("code"),TSr=o("model_type"),MSr=o(` property of the config object (either
passed as an argument or loaded from `),Y9e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(":"),ySr=l(),Te=a("ul"),T5=a("li"),Z9e=a("strong"),LSr=o("albert"),xSr=o(" \u2014 "),DY=a("a"),$Sr=o("FlaxAlbertForPreTraining"),kSr=o(" (ALBERT model)"),SSr=l(),M5=a("li"),eMe=a("strong"),RSr=o("bart"),PSr=o(" \u2014 "),GY=a("a"),BSr=o("FlaxBartForConditionalGeneration"),ISr=o(" (BART model)"),NSr=l(),E5=a("li"),oMe=a("strong"),qSr=o("bert"),jSr=o(" \u2014 "),OY=a("a"),DSr=o("FlaxBertForPreTraining"),GSr=o(" (BERT model)"),OSr=l(),C5=a("li"),rMe=a("strong"),VSr=o("big_bird"),XSr=o(" \u2014 "),VY=a("a"),zSr=o("FlaxBigBirdForPreTraining"),WSr=o(" (BigBird model)"),QSr=l(),w5=a("li"),tMe=a("strong"),HSr=o("electra"),USr=o(" \u2014 "),XY=a("a"),JSr=o("FlaxElectraForPreTraining"),YSr=o(" (ELECTRA model)"),KSr=l(),A5=a("li"),aMe=a("strong"),ZSr=o("longt5"),eRr=o(" \u2014 "),zY=a("a"),oRr=o("FlaxLongT5ForConditionalGeneration"),rRr=o(" (LongT5 model)"),tRr=l(),y5=a("li"),nMe=a("strong"),aRr=o("mbart"),nRr=o(" \u2014 "),WY=a("a"),sRr=o("FlaxMBartForConditionalGeneration"),lRr=o(" (mBART model)"),iRr=l(),L5=a("li"),sMe=a("strong"),dRr=o("mt5"),cRr=o(" \u2014 "),QY=a("a"),fRr=o("FlaxMT5ForConditionalGeneration"),mRr=o(" (mT5 model)"),gRr=l(),x5=a("li"),lMe=a("strong"),hRr=o("roberta"),pRr=o(" \u2014 "),HY=a("a"),_Rr=o("FlaxRobertaForMaskedLM"),uRr=o(" (RoBERTa model)"),bRr=l(),$5=a("li"),iMe=a("strong"),vRr=o("roformer"),FRr=o(" \u2014 "),UY=a("a"),TRr=o("FlaxRoFormerForMaskedLM"),MRr=o(" (RoFormer model)"),ERr=l(),k5=a("li"),dMe=a("strong"),CRr=o("t5"),wRr=o(" \u2014 "),JY=a("a"),ARr=o("FlaxT5ForConditionalGeneration"),yRr=o(" (T5 model)"),LRr=l(),S5=a("li"),cMe=a("strong"),xRr=o("wav2vec2"),$Rr=o(" \u2014 "),YY=a("a"),kRr=o("FlaxWav2Vec2ForPreTraining"),SRr=o(" (Wav2Vec2 model)"),RRr=l(),R5=a("li"),fMe=a("strong"),PRr=o("xlm-roberta"),BRr=o(" \u2014 "),KY=a("a"),IRr=o("FlaxXLMRobertaForMaskedLM"),NRr=o(" (XLM-RoBERTa model)"),qRr=l(),F(P5.$$.fragment),_De=l(),jc=a("h2"),B5=a("a"),mMe=a("span"),F(H8.$$.fragment),jRr=l(),gMe=a("span"),DRr=o("FlaxAutoModelForMaskedLM"),uDe=l(),hr=a("div"),F(U8.$$.fragment),GRr=l(),Dc=a("p"),ORr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZY=a("a"),VRr=o("from_pretrained()"),XRr=o(" class method or the "),eK=a("a"),zRr=o("from_config()"),WRr=o(` class
method.`),QRr=l(),J8=a("p"),HRr=o("This class cannot be instantiated directly using "),hMe=a("code"),URr=o("__init__()"),JRr=o(" (throws an error)."),YRr=l(),Xt=a("div"),F(Y8.$$.fragment),KRr=l(),pMe=a("p"),ZRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ePr=l(),Gc=a("p"),oPr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),rPr=o("not"),tPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),aPr=o("from_pretrained()"),nPr=o(" to load the model weights."),sPr=l(),F(I5.$$.fragment),lPr=l(),Or=a("div"),F(K8.$$.fragment),iPr=l(),uMe=a("p"),dPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPr=l(),un=a("p"),fPr=o("The model class to instantiate is selected based on the "),bMe=a("code"),mPr=o("model_type"),gPr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),hPr=o("pretrained_model_name_or_path"),pPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),_Pr=o("pretrained_model_name_or_path"),uPr=o(":"),bPr=l(),Le=a("ul"),N5=a("li"),TMe=a("strong"),vPr=o("albert"),FPr=o(" \u2014 "),rK=a("a"),TPr=o("FlaxAlbertForMaskedLM"),MPr=o(" (ALBERT model)"),EPr=l(),q5=a("li"),MMe=a("strong"),CPr=o("bart"),wPr=o(" \u2014 "),tK=a("a"),APr=o("FlaxBartForConditionalGeneration"),yPr=o(" (BART model)"),LPr=l(),j5=a("li"),EMe=a("strong"),xPr=o("bert"),$Pr=o(" \u2014 "),aK=a("a"),kPr=o("FlaxBertForMaskedLM"),SPr=o(" (BERT model)"),RPr=l(),D5=a("li"),CMe=a("strong"),PPr=o("big_bird"),BPr=o(" \u2014 "),nK=a("a"),IPr=o("FlaxBigBirdForMaskedLM"),NPr=o(" (BigBird model)"),qPr=l(),G5=a("li"),wMe=a("strong"),jPr=o("distilbert"),DPr=o(" \u2014 "),sK=a("a"),GPr=o("FlaxDistilBertForMaskedLM"),OPr=o(" (DistilBERT model)"),VPr=l(),O5=a("li"),AMe=a("strong"),XPr=o("electra"),zPr=o(" \u2014 "),lK=a("a"),WPr=o("FlaxElectraForMaskedLM"),QPr=o(" (ELECTRA model)"),HPr=l(),V5=a("li"),yMe=a("strong"),UPr=o("mbart"),JPr=o(" \u2014 "),iK=a("a"),YPr=o("FlaxMBartForConditionalGeneration"),KPr=o(" (mBART model)"),ZPr=l(),X5=a("li"),LMe=a("strong"),eBr=o("roberta"),oBr=o(" \u2014 "),dK=a("a"),rBr=o("FlaxRobertaForMaskedLM"),tBr=o(" (RoBERTa model)"),aBr=l(),z5=a("li"),xMe=a("strong"),nBr=o("roformer"),sBr=o(" \u2014 "),cK=a("a"),lBr=o("FlaxRoFormerForMaskedLM"),iBr=o(" (RoFormer model)"),dBr=l(),W5=a("li"),$Me=a("strong"),cBr=o("xlm-roberta"),fBr=o(" \u2014 "),fK=a("a"),mBr=o("FlaxXLMRobertaForMaskedLM"),gBr=o(" (XLM-RoBERTa model)"),hBr=l(),F(Q5.$$.fragment),bDe=l(),Oc=a("h2"),H5=a("a"),kMe=a("span"),F(Z8.$$.fragment),pBr=l(),SMe=a("span"),_Br=o("FlaxAutoModelForSeq2SeqLM"),vDe=l(),pr=a("div"),F(ex.$$.fragment),uBr=l(),Vc=a("p"),bBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mK=a("a"),vBr=o("from_pretrained()"),FBr=o(" class method or the "),gK=a("a"),TBr=o("from_config()"),MBr=o(` class
method.`),EBr=l(),ox=a("p"),CBr=o("This class cannot be instantiated directly using "),RMe=a("code"),wBr=o("__init__()"),ABr=o(" (throws an error)."),yBr=l(),zt=a("div"),F(rx.$$.fragment),LBr=l(),PMe=a("p"),xBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Br=l(),Xc=a("p"),kBr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),SBr=o("not"),RBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),PBr=o("from_pretrained()"),BBr=o(" to load the model weights."),IBr=l(),F(U5.$$.fragment),NBr=l(),Vr=a("div"),F(tx.$$.fragment),qBr=l(),IMe=a("p"),jBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DBr=l(),bn=a("p"),GBr=o("The model class to instantiate is selected based on the "),NMe=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),WBr=o("pretrained_model_name_or_path"),QBr=o(":"),HBr=l(),xe=a("ul"),J5=a("li"),DMe=a("strong"),UBr=o("bart"),JBr=o(" \u2014 "),pK=a("a"),YBr=o("FlaxBartForConditionalGeneration"),KBr=o(" (BART model)"),ZBr=l(),Y5=a("li"),GMe=a("strong"),eIr=o("blenderbot"),oIr=o(" \u2014 "),_K=a("a"),rIr=o("FlaxBlenderbotForConditionalGeneration"),tIr=o(" (Blenderbot model)"),aIr=l(),K5=a("li"),OMe=a("strong"),nIr=o("blenderbot-small"),sIr=o(" \u2014 "),uK=a("a"),lIr=o("FlaxBlenderbotSmallForConditionalGeneration"),iIr=o(" (BlenderbotSmall model)"),dIr=l(),Z5=a("li"),VMe=a("strong"),cIr=o("encoder-decoder"),fIr=o(" \u2014 "),bK=a("a"),mIr=o("FlaxEncoderDecoderModel"),gIr=o(" (Encoder decoder model)"),hIr=l(),eC=a("li"),XMe=a("strong"),pIr=o("longt5"),_Ir=o(" \u2014 "),vK=a("a"),uIr=o("FlaxLongT5ForConditionalGeneration"),bIr=o(" (LongT5 model)"),vIr=l(),oC=a("li"),zMe=a("strong"),FIr=o("marian"),TIr=o(" \u2014 "),FK=a("a"),MIr=o("FlaxMarianMTModel"),EIr=o(" (Marian model)"),CIr=l(),rC=a("li"),WMe=a("strong"),wIr=o("mbart"),AIr=o(" \u2014 "),TK=a("a"),yIr=o("FlaxMBartForConditionalGeneration"),LIr=o(" (mBART model)"),xIr=l(),tC=a("li"),QMe=a("strong"),$Ir=o("mt5"),kIr=o(" \u2014 "),MK=a("a"),SIr=o("FlaxMT5ForConditionalGeneration"),RIr=o(" (mT5 model)"),PIr=l(),aC=a("li"),HMe=a("strong"),BIr=o("pegasus"),IIr=o(" \u2014 "),EK=a("a"),NIr=o("FlaxPegasusForConditionalGeneration"),qIr=o(" (Pegasus model)"),jIr=l(),nC=a("li"),UMe=a("strong"),DIr=o("t5"),GIr=o(" \u2014 "),CK=a("a"),OIr=o("FlaxT5ForConditionalGeneration"),VIr=o(" (T5 model)"),XIr=l(),F(sC.$$.fragment),FDe=l(),zc=a("h2"),lC=a("a"),JMe=a("span"),F(ax.$$.fragment),zIr=l(),YMe=a("span"),WIr=o("FlaxAutoModelForSequenceClassification"),TDe=l(),_r=a("div"),F(nx.$$.fragment),QIr=l(),Wc=a("p"),HIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=a("a"),UIr=o("from_pretrained()"),JIr=o(" class method or the "),AK=a("a"),YIr=o("from_config()"),KIr=o(` class
method.`),ZIr=l(),sx=a("p"),eNr=o("This class cannot be instantiated directly using "),KMe=a("code"),oNr=o("__init__()"),rNr=o(" (throws an error)."),tNr=l(),Wt=a("div"),F(lx.$$.fragment),aNr=l(),ZMe=a("p"),nNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sNr=l(),Qc=a("p"),lNr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),iNr=o("not"),dNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),cNr=o("from_pretrained()"),fNr=o(" to load the model weights."),mNr=l(),F(iC.$$.fragment),gNr=l(),Xr=a("div"),F(ix.$$.fragment),hNr=l(),o4e=a("p"),pNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Nr=l(),vn=a("p"),uNr=o("The model class to instantiate is selected based on the "),r4e=a("code"),bNr=o("model_type"),vNr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(":"),CNr=l(),$e=a("ul"),dC=a("li"),n4e=a("strong"),wNr=o("albert"),ANr=o(" \u2014 "),LK=a("a"),yNr=o("FlaxAlbertForSequenceClassification"),LNr=o(" (ALBERT model)"),xNr=l(),cC=a("li"),s4e=a("strong"),$Nr=o("bart"),kNr=o(" \u2014 "),xK=a("a"),SNr=o("FlaxBartForSequenceClassification"),RNr=o(" (BART model)"),PNr=l(),fC=a("li"),l4e=a("strong"),BNr=o("bert"),INr=o(" \u2014 "),$K=a("a"),NNr=o("FlaxBertForSequenceClassification"),qNr=o(" (BERT model)"),jNr=l(),mC=a("li"),i4e=a("strong"),DNr=o("big_bird"),GNr=o(" \u2014 "),kK=a("a"),ONr=o("FlaxBigBirdForSequenceClassification"),VNr=o(" (BigBird model)"),XNr=l(),gC=a("li"),d4e=a("strong"),zNr=o("distilbert"),WNr=o(" \u2014 "),SK=a("a"),QNr=o("FlaxDistilBertForSequenceClassification"),HNr=o(" (DistilBERT model)"),UNr=l(),hC=a("li"),c4e=a("strong"),JNr=o("electra"),YNr=o(" \u2014 "),RK=a("a"),KNr=o("FlaxElectraForSequenceClassification"),ZNr=o(" (ELECTRA model)"),eqr=l(),pC=a("li"),f4e=a("strong"),oqr=o("mbart"),rqr=o(" \u2014 "),PK=a("a"),tqr=o("FlaxMBartForSequenceClassification"),aqr=o(" (mBART model)"),nqr=l(),_C=a("li"),m4e=a("strong"),sqr=o("roberta"),lqr=o(" \u2014 "),BK=a("a"),iqr=o("FlaxRobertaForSequenceClassification"),dqr=o(" (RoBERTa model)"),cqr=l(),uC=a("li"),g4e=a("strong"),fqr=o("roformer"),mqr=o(" \u2014 "),IK=a("a"),gqr=o("FlaxRoFormerForSequenceClassification"),hqr=o(" (RoFormer model)"),pqr=l(),bC=a("li"),h4e=a("strong"),_qr=o("xlm-roberta"),uqr=o(" \u2014 "),NK=a("a"),bqr=o("FlaxXLMRobertaForSequenceClassification"),vqr=o(" (XLM-RoBERTa model)"),Fqr=l(),F(vC.$$.fragment),MDe=l(),Hc=a("h2"),FC=a("a"),p4e=a("span"),F(dx.$$.fragment),Tqr=l(),_4e=a("span"),Mqr=o("FlaxAutoModelForQuestionAnswering"),EDe=l(),ur=a("div"),F(cx.$$.fragment),Eqr=l(),Uc=a("p"),Cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=a("a"),wqr=o("from_pretrained()"),Aqr=o(" class method or the "),jK=a("a"),yqr=o("from_config()"),Lqr=o(` class
method.`),xqr=l(),fx=a("p"),$qr=o("This class cannot be instantiated directly using "),u4e=a("code"),kqr=o("__init__()"),Sqr=o(" (throws an error)."),Rqr=l(),Qt=a("div"),F(mx.$$.fragment),Pqr=l(),b4e=a("p"),Bqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iqr=l(),Jc=a("p"),Nqr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),qqr=o("not"),jqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" to load the model weights."),Oqr=l(),F(TC.$$.fragment),Vqr=l(),zr=a("div"),F(gx.$$.fragment),Xqr=l(),F4e=a("p"),zqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wqr=l(),Fn=a("p"),Qqr=o("The model class to instantiate is selected based on the "),T4e=a("code"),Hqr=o("model_type"),Uqr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),Kqr=o("pretrained_model_name_or_path"),Zqr=o(":"),ejr=l(),ke=a("ul"),MC=a("li"),C4e=a("strong"),ojr=o("albert"),rjr=o(" \u2014 "),GK=a("a"),tjr=o("FlaxAlbertForQuestionAnswering"),ajr=o(" (ALBERT model)"),njr=l(),EC=a("li"),w4e=a("strong"),sjr=o("bart"),ljr=o(" \u2014 "),OK=a("a"),ijr=o("FlaxBartForQuestionAnswering"),djr=o(" (BART model)"),cjr=l(),CC=a("li"),A4e=a("strong"),fjr=o("bert"),mjr=o(" \u2014 "),VK=a("a"),gjr=o("FlaxBertForQuestionAnswering"),hjr=o(" (BERT model)"),pjr=l(),wC=a("li"),y4e=a("strong"),_jr=o("big_bird"),ujr=o(" \u2014 "),XK=a("a"),bjr=o("FlaxBigBirdForQuestionAnswering"),vjr=o(" (BigBird model)"),Fjr=l(),AC=a("li"),L4e=a("strong"),Tjr=o("distilbert"),Mjr=o(" \u2014 "),zK=a("a"),Ejr=o("FlaxDistilBertForQuestionAnswering"),Cjr=o(" (DistilBERT model)"),wjr=l(),yC=a("li"),x4e=a("strong"),Ajr=o("electra"),yjr=o(" \u2014 "),WK=a("a"),Ljr=o("FlaxElectraForQuestionAnswering"),xjr=o(" (ELECTRA model)"),$jr=l(),LC=a("li"),$4e=a("strong"),kjr=o("mbart"),Sjr=o(" \u2014 "),QK=a("a"),Rjr=o("FlaxMBartForQuestionAnswering"),Pjr=o(" (mBART model)"),Bjr=l(),xC=a("li"),k4e=a("strong"),Ijr=o("roberta"),Njr=o(" \u2014 "),HK=a("a"),qjr=o("FlaxRobertaForQuestionAnswering"),jjr=o(" (RoBERTa model)"),Djr=l(),$C=a("li"),S4e=a("strong"),Gjr=o("roformer"),Ojr=o(" \u2014 "),UK=a("a"),Vjr=o("FlaxRoFormerForQuestionAnswering"),Xjr=o(" (RoFormer model)"),zjr=l(),kC=a("li"),R4e=a("strong"),Wjr=o("xlm-roberta"),Qjr=o(" \u2014 "),JK=a("a"),Hjr=o("FlaxXLMRobertaForQuestionAnswering"),Ujr=o(" (XLM-RoBERTa model)"),Jjr=l(),F(SC.$$.fragment),CDe=l(),Yc=a("h2"),RC=a("a"),P4e=a("span"),F(hx.$$.fragment),Yjr=l(),B4e=a("span"),Kjr=o("FlaxAutoModelForTokenClassification"),wDe=l(),br=a("div"),F(px.$$.fragment),Zjr=l(),Kc=a("p"),eDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=a("a"),oDr=o("from_pretrained()"),rDr=o(" class method or the "),KK=a("a"),tDr=o("from_config()"),aDr=o(` class
method.`),nDr=l(),_x=a("p"),sDr=o("This class cannot be instantiated directly using "),I4e=a("code"),lDr=o("__init__()"),iDr=o(" (throws an error)."),dDr=l(),Ht=a("div"),F(ux.$$.fragment),cDr=l(),N4e=a("p"),fDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mDr=l(),Zc=a("p"),gDr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),hDr=o("not"),pDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),_Dr=o("from_pretrained()"),uDr=o(" to load the model weights."),bDr=l(),F(PC.$$.fragment),vDr=l(),Wr=a("div"),F(bx.$$.fragment),FDr=l(),j4e=a("p"),TDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MDr=l(),Tn=a("p"),EDr=o("The model class to instantiate is selected based on the "),D4e=a("code"),CDr=o("model_type"),wDr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(":"),$Dr=l(),Ge=a("ul"),BC=a("li"),V4e=a("strong"),kDr=o("albert"),SDr=o(" \u2014 "),eZ=a("a"),RDr=o("FlaxAlbertForTokenClassification"),PDr=o(" (ALBERT model)"),BDr=l(),IC=a("li"),X4e=a("strong"),IDr=o("bert"),NDr=o(" \u2014 "),oZ=a("a"),qDr=o("FlaxBertForTokenClassification"),jDr=o(" (BERT model)"),DDr=l(),NC=a("li"),z4e=a("strong"),GDr=o("big_bird"),ODr=o(" \u2014 "),rZ=a("a"),VDr=o("FlaxBigBirdForTokenClassification"),XDr=o(" (BigBird model)"),zDr=l(),qC=a("li"),W4e=a("strong"),WDr=o("distilbert"),QDr=o(" \u2014 "),tZ=a("a"),HDr=o("FlaxDistilBertForTokenClassification"),UDr=o(" (DistilBERT model)"),JDr=l(),jC=a("li"),Q4e=a("strong"),YDr=o("electra"),KDr=o(" \u2014 "),aZ=a("a"),ZDr=o("FlaxElectraForTokenClassification"),eGr=o(" (ELECTRA model)"),oGr=l(),DC=a("li"),H4e=a("strong"),rGr=o("roberta"),tGr=o(" \u2014 "),nZ=a("a"),aGr=o("FlaxRobertaForTokenClassification"),nGr=o(" (RoBERTa model)"),sGr=l(),GC=a("li"),U4e=a("strong"),lGr=o("roformer"),iGr=o(" \u2014 "),sZ=a("a"),dGr=o("FlaxRoFormerForTokenClassification"),cGr=o(" (RoFormer model)"),fGr=l(),OC=a("li"),J4e=a("strong"),mGr=o("xlm-roberta"),gGr=o(" \u2014 "),lZ=a("a"),hGr=o("FlaxXLMRobertaForTokenClassification"),pGr=o(" (XLM-RoBERTa model)"),_Gr=l(),F(VC.$$.fragment),ADe=l(),ef=a("h2"),XC=a("a"),Y4e=a("span"),F(vx.$$.fragment),uGr=l(),K4e=a("span"),bGr=o("FlaxAutoModelForMultipleChoice"),yDe=l(),vr=a("div"),F(Fx.$$.fragment),vGr=l(),of=a("p"),FGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=a("a"),TGr=o("from_pretrained()"),MGr=o(" class method or the "),dZ=a("a"),EGr=o("from_config()"),CGr=o(` class
method.`),wGr=l(),Tx=a("p"),AGr=o("This class cannot be instantiated directly using "),Z4e=a("code"),yGr=o("__init__()"),LGr=o(" (throws an error)."),xGr=l(),Ut=a("div"),F(Mx.$$.fragment),$Gr=l(),eEe=a("p"),kGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SGr=l(),rf=a("p"),RGr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),PGr=o("not"),BGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),IGr=o("from_pretrained()"),NGr=o(" to load the model weights."),qGr=l(),F(zC.$$.fragment),jGr=l(),Qr=a("div"),F(Ex.$$.fragment),DGr=l(),rEe=a("p"),GGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OGr=l(),Mn=a("p"),VGr=o("The model class to instantiate is selected based on the "),tEe=a("code"),XGr=o("model_type"),zGr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),HGr=o("pretrained_model_name_or_path"),UGr=o(":"),JGr=l(),Oe=a("ul"),WC=a("li"),sEe=a("strong"),YGr=o("albert"),KGr=o(" \u2014 "),fZ=a("a"),ZGr=o("FlaxAlbertForMultipleChoice"),eOr=o(" (ALBERT model)"),oOr=l(),QC=a("li"),lEe=a("strong"),rOr=o("bert"),tOr=o(" \u2014 "),mZ=a("a"),aOr=o("FlaxBertForMultipleChoice"),nOr=o(" (BERT model)"),sOr=l(),HC=a("li"),iEe=a("strong"),lOr=o("big_bird"),iOr=o(" \u2014 "),gZ=a("a"),dOr=o("FlaxBigBirdForMultipleChoice"),cOr=o(" (BigBird model)"),fOr=l(),UC=a("li"),dEe=a("strong"),mOr=o("distilbert"),gOr=o(" \u2014 "),hZ=a("a"),hOr=o("FlaxDistilBertForMultipleChoice"),pOr=o(" (DistilBERT model)"),_Or=l(),JC=a("li"),cEe=a("strong"),uOr=o("electra"),bOr=o(" \u2014 "),pZ=a("a"),vOr=o("FlaxElectraForMultipleChoice"),FOr=o(" (ELECTRA model)"),TOr=l(),YC=a("li"),fEe=a("strong"),MOr=o("roberta"),EOr=o(" \u2014 "),_Z=a("a"),COr=o("FlaxRobertaForMultipleChoice"),wOr=o(" (RoBERTa model)"),AOr=l(),KC=a("li"),mEe=a("strong"),yOr=o("roformer"),LOr=o(" \u2014 "),uZ=a("a"),xOr=o("FlaxRoFormerForMultipleChoice"),$Or=o(" (RoFormer model)"),kOr=l(),ZC=a("li"),gEe=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),bZ=a("a"),POr=o("FlaxXLMRobertaForMultipleChoice"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(e3.$$.fragment),LDe=l(),tf=a("h2"),o3=a("a"),hEe=a("span"),F(Cx.$$.fragment),NOr=l(),pEe=a("span"),qOr=o("FlaxAutoModelForNextSentencePrediction"),xDe=l(),Fr=a("div"),F(wx.$$.fragment),jOr=l(),af=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),FZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),Ax=a("p"),WOr=o("This class cannot be instantiated directly using "),_Ee=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Jt=a("div"),F(yx.$$.fragment),JOr=l(),uEe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KOr=l(),nf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(r3.$$.fragment),nVr=l(),Hr=a("div"),F(Lx.$$.fragment),sVr=l(),vEe=a("p"),lVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iVr=l(),En=a("p"),dVr=o("The model class to instantiate is selected based on the "),FEe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),EEe=a("ul"),t3=a("li"),CEe=a("strong"),uVr=o("bert"),bVr=o(" \u2014 "),MZ=a("a"),vVr=o("FlaxBertForNextSentencePrediction"),FVr=o(" (BERT model)"),TVr=l(),F(a3.$$.fragment),$De=l(),sf=a("h2"),n3=a("a"),wEe=a("span"),F(xx.$$.fragment),MVr=l(),AEe=a("span"),EVr=o("FlaxAutoModelForImageClassification"),kDe=l(),Tr=a("div"),F($x.$$.fragment),CVr=l(),lf=a("p"),wVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=a("a"),AVr=o("from_pretrained()"),yVr=o(" class method or the "),CZ=a("a"),LVr=o("from_config()"),xVr=o(` class
method.`),$Vr=l(),kx=a("p"),kVr=o("This class cannot be instantiated directly using "),yEe=a("code"),SVr=o("__init__()"),RVr=o(" (throws an error)."),PVr=l(),Yt=a("div"),F(Sx.$$.fragment),BVr=l(),LEe=a("p"),IVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NVr=l(),df=a("p"),qVr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),jVr=o("not"),DVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" to load the model weights."),VVr=l(),F(s3.$$.fragment),XVr=l(),Ur=a("div"),F(Rx.$$.fragment),zVr=l(),$Ee=a("p"),WVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QVr=l(),Cn=a("p"),HVr=o("The model class to instantiate is selected based on the "),kEe=a("code"),UVr=o("model_type"),JVr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),YVr=o("pretrained_model_name_or_path"),KVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),ZVr=o("pretrained_model_name_or_path"),eXr=o(":"),oXr=l(),Px=a("ul"),l3=a("li"),PEe=a("strong"),rXr=o("beit"),tXr=o(" \u2014 "),AZ=a("a"),aXr=o("FlaxBeitForImageClassification"),nXr=o(" (BEiT model)"),sXr=l(),i3=a("li"),BEe=a("strong"),lXr=o("vit"),iXr=o(" \u2014 "),yZ=a("a"),dXr=o("FlaxViTForImageClassification"),cXr=o(" (ViT model)"),fXr=l(),F(d3.$$.fragment),SDe=l(),cf=a("h2"),c3=a("a"),IEe=a("span"),F(Bx.$$.fragment),mXr=l(),NEe=a("span"),gXr=o("FlaxAutoModelForVision2Seq"),RDe=l(),Mr=a("div"),F(Ix.$$.fragment),hXr=l(),ff=a("p"),pXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=a("a"),_Xr=o("from_pretrained()"),uXr=o(" class method or the "),xZ=a("a"),bXr=o("from_config()"),vXr=o(` class
method.`),FXr=l(),Nx=a("p"),TXr=o("This class cannot be instantiated directly using "),qEe=a("code"),MXr=o("__init__()"),EXr=o(" (throws an error)."),CXr=l(),Kt=a("div"),F(qx.$$.fragment),wXr=l(),jEe=a("p"),AXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yXr=l(),mf=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),xXr=o("not"),$Xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),kXr=o("from_pretrained()"),SXr=o(" to load the model weights."),RXr=l(),F(f3.$$.fragment),PXr=l(),Jr=a("div"),F(jx.$$.fragment),BXr=l(),GEe=a("p"),IXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NXr=l(),wn=a("p"),qXr=o("The model class to instantiate is selected based on the "),OEe=a("code"),jXr=o("model_type"),DXr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),GXr=o("pretrained_model_name_or_path"),OXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),VXr=o("pretrained_model_name_or_path"),XXr=o(":"),zXr=l(),zEe=a("ul"),m3=a("li"),WEe=a("strong"),WXr=o("vision-encoder-decoder"),QXr=o(" \u2014 "),kZ=a("a"),HXr=o("FlaxVisionEncoderDecoderModel"),UXr=o(" (Vision Encoder decoder model)"),JXr=l(),F(g3.$$.fragment),this.h()},l(f){const u=Qkt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Dx=s(p);m=n(Dx,"A",{id:!0,class:!0,href:!0});var QEe=s(m);_=n(QEe,"SPAN",{});var HEe=s(_);T(d.$$.fragment,HEe),HEe.forEach(t),QEe.forEach(t),h=i(Dx),Mo=n(Dx,"SPAN",{});var UEe=s(Mo);mi=r(UEe,"Auto Classes"),UEe.forEach(t),Dx.forEach(t),_f=i(f),rt=n(f,"P",{});var Gx=s(rt);gi=r(Gx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Gx,"CODE",{});var JEe=s(hi);kw=r(JEe,"from_pretrained()"),JEe.forEach(t),uf=r(Gx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Gx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var YEe=s(yn);Sw=r(YEe,"AutoConfig"),YEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var KEe=s(xn);Rw=r(KEe,"AutoModel"),KEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var ZEe=s($n);Pw=r(ZEe,"AutoTokenizer"),ZEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ox=s(Ae);ek=r(Ox,"will create a model that is an instance of "),bi=n(Ox,"A",{href:!0});var e5e=s(bi);ok=r(e5e,"BertModel"),e5e.forEach(t),rk=r(Ox,"."),Ox.forEach(t),Eo=i(f),wa=n(f,"P",{});var Vx=s(wa);tk=r(Vx,"There is one class of "),vf=n(Vx,"CODE",{});var o5e=s(vf);ak=r(o5e,"AutoModel"),o5e.forEach(t),OOe=r(Vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Vx.forEach(t),kqe=i(f),vi=n(f,"H2",{class:!0});var Xx=s(vi);Ff=n(Xx,"A",{id:!0,class:!0,href:!0});var r5e=s(Ff);Coe=n(r5e,"SPAN",{});var t5e=s(Coe);T(Bw.$$.fragment,t5e),t5e.forEach(t),r5e.forEach(t),VOe=i(Xx),woe=n(Xx,"SPAN",{});var a5e=s(woe);XOe=r(a5e,"Extending the Auto Classes"),a5e.forEach(t),Xx.forEach(t),Sqe=i(f),kn=n(f,"P",{});var gf=s(kn);zOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=n(gf,"CODE",{});var n5e=s(Aoe);WOe=r(n5e,"NewModel"),n5e.forEach(t),QOe=r(gf,", make sure you have a "),yoe=n(gf,"CODE",{});var s5e=s(yoe);HOe=r(s5e,"NewModelConfig"),s5e.forEach(t),UOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Rqe=i(f),T(Iw.$$.fragment,f),Pqe=i(f),nk=n(f,"P",{});var l5e=s(nk);JOe=r(l5e,"You will then be able to use the auto classes like you would usually do!"),l5e.forEach(t),Bqe=i(f),T(Tf.$$.fragment,f),Iqe=i(f),Fi=n(f,"H2",{class:!0});var zx=s(Fi);Mf=n(zx,"A",{id:!0,class:!0,href:!0});var i5e=s(Mf);Loe=n(i5e,"SPAN",{});var d5e=s(Loe);T(Nw.$$.fragment,d5e),d5e.forEach(t),i5e.forEach(t),YOe=i(zx),xoe=n(zx,"SPAN",{});var c5e=s(xoe);KOe=r(c5e,"AutoConfig"),c5e.forEach(t),zx.forEach(t),Nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(qw.$$.fragment,et),ZOe=i(et),jw=n(et,"P",{});var Wx=s(jw);eVe=r(Wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=n(Wx,"A",{href:!0});var f5e=s(sk);oVe=r(f5e,"from_pretrained()"),f5e.forEach(t),rVe=r(Wx," class method."),Wx.forEach(t),tVe=i(et),Dw=n(et,"P",{});var Qx=s(Dw);aVe=r(Qx,"This class cannot be instantiated directly using "),$oe=n(Qx,"CODE",{});var m5e=s($oe);nVe=r(m5e,"__init__()"),m5e.forEach(t),sVe=r(Qx," (throws an error)."),Qx.forEach(t),lVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Gw.$$.fragment,ot),iVe=i(ot),koe=n(ot,"P",{});var g5e=s(koe);dVe=r(g5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),g5e.forEach(t),cVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);fVe=r(hf,"The configuration class to instantiate is selected based on the "),Soe=n(hf,"CODE",{});var h5e=s(Soe);mVe=r(h5e,"model_type"),h5e.forEach(t),gVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=n(hf,"CODE",{});var p5e=s(Roe);hVe=r(p5e,"pretrained_model_name_or_path"),p5e.forEach(t),pVe=r(hf,":"),hf.forEach(t),_Ve=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var h3=s(Ef);Poe=n(h3,"STRONG",{});var _5e=s(Poe);uVe=r(_5e,"albert"),_5e.forEach(t),bVe=r(h3," \u2014 "),lk=n(h3,"A",{href:!0});var u5e=s(lk);vVe=r(u5e,"AlbertConfig"),u5e.forEach(t),FVe=r(h3," (ALBERT model)"),h3.forEach(t),TVe=i(y),Cf=n(y,"LI",{});var p3=s(Cf);Boe=n(p3,"STRONG",{});var b5e=s(Boe);MVe=r(b5e,"bart"),b5e.forEach(t),EVe=r(p3," \u2014 "),ik=n(p3,"A",{href:!0});var v5e=s(ik);CVe=r(v5e,"BartConfig"),v5e.forEach(t),wVe=r(p3," (BART model)"),p3.forEach(t),AVe=i(y),wf=n(y,"LI",{});var _3=s(wf);Ioe=n(_3,"STRONG",{});var F5e=s(Ioe);yVe=r(F5e,"beit"),F5e.forEach(t),LVe=r(_3," \u2014 "),dk=n(_3,"A",{href:!0});var T5e=s(dk);xVe=r(T5e,"BeitConfig"),T5e.forEach(t),$Ve=r(_3," (BEiT model)"),_3.forEach(t),kVe=i(y),Af=n(y,"LI",{});var u3=s(Af);Noe=n(u3,"STRONG",{});var M5e=s(Noe);SVe=r(M5e,"bert"),M5e.forEach(t),RVe=r(u3," \u2014 "),ck=n(u3,"A",{href:!0});var E5e=s(ck);PVe=r(E5e,"BertConfig"),E5e.forEach(t),BVe=r(u3," (BERT model)"),u3.forEach(t),IVe=i(y),yf=n(y,"LI",{});var b3=s(yf);qoe=n(b3,"STRONG",{});var C5e=s(qoe);NVe=r(C5e,"bert-generation"),C5e.forEach(t),qVe=r(b3," \u2014 "),fk=n(b3,"A",{href:!0});var w5e=s(fk);jVe=r(w5e,"BertGenerationConfig"),w5e.forEach(t),DVe=r(b3," (Bert Generation model)"),b3.forEach(t),GVe=i(y),Lf=n(y,"LI",{});var v3=s(Lf);joe=n(v3,"STRONG",{});var A5e=s(joe);OVe=r(A5e,"big_bird"),A5e.forEach(t),VVe=r(v3," \u2014 "),mk=n(v3,"A",{href:!0});var y5e=s(mk);XVe=r(y5e,"BigBirdConfig"),y5e.forEach(t),zVe=r(v3," (BigBird model)"),v3.forEach(t),WVe=i(y),xf=n(y,"LI",{});var F3=s(xf);Doe=n(F3,"STRONG",{});var L5e=s(Doe);QVe=r(L5e,"bigbird_pegasus"),L5e.forEach(t),HVe=r(F3," \u2014 "),gk=n(F3,"A",{href:!0});var x5e=s(gk);UVe=r(x5e,"BigBirdPegasusConfig"),x5e.forEach(t),JVe=r(F3," (BigBirdPegasus model)"),F3.forEach(t),YVe=i(y),$f=n(y,"LI",{});var T3=s($f);Goe=n(T3,"STRONG",{});var $5e=s(Goe);KVe=r($5e,"blenderbot"),$5e.forEach(t),ZVe=r(T3," \u2014 "),hk=n(T3,"A",{href:!0});var k5e=s(hk);eXe=r(k5e,"BlenderbotConfig"),k5e.forEach(t),oXe=r(T3," (Blenderbot model)"),T3.forEach(t),rXe=i(y),kf=n(y,"LI",{});var M3=s(kf);Ooe=n(M3,"STRONG",{});var S5e=s(Ooe);tXe=r(S5e,"blenderbot-small"),S5e.forEach(t),aXe=r(M3," \u2014 "),pk=n(M3,"A",{href:!0});var R5e=s(pk);nXe=r(R5e,"BlenderbotSmallConfig"),R5e.forEach(t),sXe=r(M3," (BlenderbotSmall model)"),M3.forEach(t),lXe=i(y),Sf=n(y,"LI",{});var E3=s(Sf);Voe=n(E3,"STRONG",{});var P5e=s(Voe);iXe=r(P5e,"camembert"),P5e.forEach(t),dXe=r(E3," \u2014 "),_k=n(E3,"A",{href:!0});var B5e=s(_k);cXe=r(B5e,"CamembertConfig"),B5e.forEach(t),fXe=r(E3," (CamemBERT model)"),E3.forEach(t),mXe=i(y),Rf=n(y,"LI",{});var C3=s(Rf);Xoe=n(C3,"STRONG",{});var I5e=s(Xoe);gXe=r(I5e,"canine"),I5e.forEach(t),hXe=r(C3," \u2014 "),uk=n(C3,"A",{href:!0});var N5e=s(uk);pXe=r(N5e,"CanineConfig"),N5e.forEach(t),_Xe=r(C3," (Canine model)"),C3.forEach(t),uXe=i(y),Pf=n(y,"LI",{});var w3=s(Pf);zoe=n(w3,"STRONG",{});var q5e=s(zoe);bXe=r(q5e,"clip"),q5e.forEach(t),vXe=r(w3," \u2014 "),bk=n(w3,"A",{href:!0});var j5e=s(bk);FXe=r(j5e,"CLIPConfig"),j5e.forEach(t),TXe=r(w3," (CLIP model)"),w3.forEach(t),MXe=i(y),Bf=n(y,"LI",{});var A3=s(Bf);Woe=n(A3,"STRONG",{});var D5e=s(Woe);EXe=r(D5e,"convbert"),D5e.forEach(t),CXe=r(A3," \u2014 "),vk=n(A3,"A",{href:!0});var G5e=s(vk);wXe=r(G5e,"ConvBertConfig"),G5e.forEach(t),AXe=r(A3," (ConvBERT model)"),A3.forEach(t),yXe=i(y),If=n(y,"LI",{});var y3=s(If);Qoe=n(y3,"STRONG",{});var O5e=s(Qoe);LXe=r(O5e,"convnext"),O5e.forEach(t),xXe=r(y3," \u2014 "),Fk=n(y3,"A",{href:!0});var V5e=s(Fk);$Xe=r(V5e,"ConvNextConfig"),V5e.forEach(t),kXe=r(y3," (ConvNext model)"),y3.forEach(t),SXe=i(y),Nf=n(y,"LI",{});var L3=s(Nf);Hoe=n(L3,"STRONG",{});var X5e=s(Hoe);RXe=r(X5e,"ctrl"),X5e.forEach(t),PXe=r(L3," \u2014 "),Tk=n(L3,"A",{href:!0});var z5e=s(Tk);BXe=r(z5e,"CTRLConfig"),z5e.forEach(t),IXe=r(L3," (CTRL model)"),L3.forEach(t),NXe=i(y),qf=n(y,"LI",{});var x3=s(qf);Uoe=n(x3,"STRONG",{});var W5e=s(Uoe);qXe=r(W5e,"cvt"),W5e.forEach(t),jXe=r(x3," \u2014 "),Mk=n(x3,"A",{href:!0});var Q5e=s(Mk);DXe=r(Q5e,"CvtConfig"),Q5e.forEach(t),GXe=r(x3," (CvT model)"),x3.forEach(t),OXe=i(y),jf=n(y,"LI",{});var $3=s(jf);Joe=n($3,"STRONG",{});var H5e=s(Joe);VXe=r(H5e,"data2vec-audio"),H5e.forEach(t),XXe=r($3," \u2014 "),Ek=n($3,"A",{href:!0});var U5e=s(Ek);zXe=r(U5e,"Data2VecAudioConfig"),U5e.forEach(t),WXe=r($3," (Data2VecAudio model)"),$3.forEach(t),QXe=i(y),Df=n(y,"LI",{});var k3=s(Df);Yoe=n(k3,"STRONG",{});var J5e=s(Yoe);HXe=r(J5e,"data2vec-text"),J5e.forEach(t),UXe=r(k3," \u2014 "),Ck=n(k3,"A",{href:!0});var Y5e=s(Ck);JXe=r(Y5e,"Data2VecTextConfig"),Y5e.forEach(t),YXe=r(k3," (Data2VecText model)"),k3.forEach(t),KXe=i(y),Gf=n(y,"LI",{});var S3=s(Gf);Koe=n(S3,"STRONG",{});var K5e=s(Koe);ZXe=r(K5e,"data2vec-vision"),K5e.forEach(t),eze=r(S3," \u2014 "),wk=n(S3,"A",{href:!0});var Z5e=s(wk);oze=r(Z5e,"Data2VecVisionConfig"),Z5e.forEach(t),rze=r(S3," (Data2VecVision model)"),S3.forEach(t),tze=i(y),Of=n(y,"LI",{});var R3=s(Of);Zoe=n(R3,"STRONG",{});var eCe=s(Zoe);aze=r(eCe,"deberta"),eCe.forEach(t),nze=r(R3," \u2014 "),Ak=n(R3,"A",{href:!0});var oCe=s(Ak);sze=r(oCe,"DebertaConfig"),oCe.forEach(t),lze=r(R3," (DeBERTa model)"),R3.forEach(t),ize=i(y),Vf=n(y,"LI",{});var P3=s(Vf);ere=n(P3,"STRONG",{});var rCe=s(ere);dze=r(rCe,"deberta-v2"),rCe.forEach(t),cze=r(P3," \u2014 "),yk=n(P3,"A",{href:!0});var tCe=s(yk);fze=r(tCe,"DebertaV2Config"),tCe.forEach(t),mze=r(P3," (DeBERTa-v2 model)"),P3.forEach(t),gze=i(y),Xf=n(y,"LI",{});var B3=s(Xf);ore=n(B3,"STRONG",{});var aCe=s(ore);hze=r(aCe,"decision_transformer"),aCe.forEach(t),pze=r(B3," \u2014 "),Lk=n(B3,"A",{href:!0});var nCe=s(Lk);_ze=r(nCe,"DecisionTransformerConfig"),nCe.forEach(t),uze=r(B3," (Decision Transformer model)"),B3.forEach(t),bze=i(y),zf=n(y,"LI",{});var I3=s(zf);rre=n(I3,"STRONG",{});var sCe=s(rre);vze=r(sCe,"deit"),sCe.forEach(t),Fze=r(I3," \u2014 "),xk=n(I3,"A",{href:!0});var KXr=s(xk);Tze=r(KXr,"DeiTConfig"),KXr.forEach(t),Mze=r(I3," (DeiT model)"),I3.forEach(t),Eze=i(y),Wf=n(y,"LI",{});var lCe=s(Wf);tre=n(lCe,"STRONG",{});var ZXr=s(tre);Cze=r(ZXr,"detr"),ZXr.forEach(t),wze=r(lCe," \u2014 "),$k=n(lCe,"A",{href:!0});var ezr=s($k);Aze=r(ezr,"DetrConfig"),ezr.forEach(t),yze=r(lCe," (DETR model)"),lCe.forEach(t),Lze=i(y),Qf=n(y,"LI",{});var iCe=s(Qf);are=n(iCe,"STRONG",{});var ozr=s(are);xze=r(ozr,"distilbert"),ozr.forEach(t),$ze=r(iCe," \u2014 "),kk=n(iCe,"A",{href:!0});var rzr=s(kk);kze=r(rzr,"DistilBertConfig"),rzr.forEach(t),Sze=r(iCe," (DistilBERT model)"),iCe.forEach(t),Rze=i(y),Hf=n(y,"LI",{});var dCe=s(Hf);nre=n(dCe,"STRONG",{});var tzr=s(nre);Pze=r(tzr,"dpr"),tzr.forEach(t),Bze=r(dCe," \u2014 "),Sk=n(dCe,"A",{href:!0});var azr=s(Sk);Ize=r(azr,"DPRConfig"),azr.forEach(t),Nze=r(dCe," (DPR model)"),dCe.forEach(t),qze=i(y),Uf=n(y,"LI",{});var cCe=s(Uf);sre=n(cCe,"STRONG",{});var nzr=s(sre);jze=r(nzr,"dpt"),nzr.forEach(t),Dze=r(cCe," \u2014 "),Rk=n(cCe,"A",{href:!0});var szr=s(Rk);Gze=r(szr,"DPTConfig"),szr.forEach(t),Oze=r(cCe," (DPT model)"),cCe.forEach(t),Vze=i(y),Jf=n(y,"LI",{});var fCe=s(Jf);lre=n(fCe,"STRONG",{});var lzr=s(lre);Xze=r(lzr,"electra"),lzr.forEach(t),zze=r(fCe," \u2014 "),Pk=n(fCe,"A",{href:!0});var izr=s(Pk);Wze=r(izr,"ElectraConfig"),izr.forEach(t),Qze=r(fCe," (ELECTRA model)"),fCe.forEach(t),Hze=i(y),Yf=n(y,"LI",{});var mCe=s(Yf);ire=n(mCe,"STRONG",{});var dzr=s(ire);Uze=r(dzr,"encoder-decoder"),dzr.forEach(t),Jze=r(mCe," \u2014 "),Bk=n(mCe,"A",{href:!0});var czr=s(Bk);Yze=r(czr,"EncoderDecoderConfig"),czr.forEach(t),Kze=r(mCe," (Encoder decoder model)"),mCe.forEach(t),Zze=i(y),Kf=n(y,"LI",{});var gCe=s(Kf);dre=n(gCe,"STRONG",{});var fzr=s(dre);eWe=r(fzr,"flaubert"),fzr.forEach(t),oWe=r(gCe," \u2014 "),Ik=n(gCe,"A",{href:!0});var mzr=s(Ik);rWe=r(mzr,"FlaubertConfig"),mzr.forEach(t),tWe=r(gCe," (FlauBERT model)"),gCe.forEach(t),aWe=i(y),Zf=n(y,"LI",{});var hCe=s(Zf);cre=n(hCe,"STRONG",{});var gzr=s(cre);nWe=r(gzr,"flava"),gzr.forEach(t),sWe=r(hCe," \u2014 "),Nk=n(hCe,"A",{href:!0});var hzr=s(Nk);lWe=r(hzr,"FlavaConfig"),hzr.forEach(t),iWe=r(hCe," (Flava model)"),hCe.forEach(t),dWe=i(y),em=n(y,"LI",{});var pCe=s(em);fre=n(pCe,"STRONG",{});var pzr=s(fre);cWe=r(pzr,"fnet"),pzr.forEach(t),fWe=r(pCe," \u2014 "),qk=n(pCe,"A",{href:!0});var _zr=s(qk);mWe=r(_zr,"FNetConfig"),_zr.forEach(t),gWe=r(pCe," (FNet model)"),pCe.forEach(t),hWe=i(y),om=n(y,"LI",{});var _Ce=s(om);mre=n(_Ce,"STRONG",{});var uzr=s(mre);pWe=r(uzr,"fsmt"),uzr.forEach(t),_We=r(_Ce," \u2014 "),jk=n(_Ce,"A",{href:!0});var bzr=s(jk);uWe=r(bzr,"FSMTConfig"),bzr.forEach(t),bWe=r(_Ce," (FairSeq Machine-Translation model)"),_Ce.forEach(t),vWe=i(y),rm=n(y,"LI",{});var uCe=s(rm);gre=n(uCe,"STRONG",{});var vzr=s(gre);FWe=r(vzr,"funnel"),vzr.forEach(t),TWe=r(uCe," \u2014 "),Dk=n(uCe,"A",{href:!0});var Fzr=s(Dk);MWe=r(Fzr,"FunnelConfig"),Fzr.forEach(t),EWe=r(uCe," (Funnel Transformer model)"),uCe.forEach(t),CWe=i(y),tm=n(y,"LI",{});var bCe=s(tm);hre=n(bCe,"STRONG",{});var Tzr=s(hre);wWe=r(Tzr,"glpn"),Tzr.forEach(t),AWe=r(bCe," \u2014 "),Gk=n(bCe,"A",{href:!0});var Mzr=s(Gk);yWe=r(Mzr,"GLPNConfig"),Mzr.forEach(t),LWe=r(bCe," (GLPN model)"),bCe.forEach(t),xWe=i(y),am=n(y,"LI",{});var vCe=s(am);pre=n(vCe,"STRONG",{});var Ezr=s(pre);$We=r(Ezr,"gpt2"),Ezr.forEach(t),kWe=r(vCe," \u2014 "),Ok=n(vCe,"A",{href:!0});var Czr=s(Ok);SWe=r(Czr,"GPT2Config"),Czr.forEach(t),RWe=r(vCe," (OpenAI GPT-2 model)"),vCe.forEach(t),PWe=i(y),nm=n(y,"LI",{});var FCe=s(nm);_re=n(FCe,"STRONG",{});var wzr=s(_re);BWe=r(wzr,"gpt_neo"),wzr.forEach(t),IWe=r(FCe," \u2014 "),Vk=n(FCe,"A",{href:!0});var Azr=s(Vk);NWe=r(Azr,"GPTNeoConfig"),Azr.forEach(t),qWe=r(FCe," (GPT Neo model)"),FCe.forEach(t),jWe=i(y),sm=n(y,"LI",{});var TCe=s(sm);ure=n(TCe,"STRONG",{});var yzr=s(ure);DWe=r(yzr,"gpt_neox"),yzr.forEach(t),GWe=r(TCe," \u2014 "),Xk=n(TCe,"A",{href:!0});var Lzr=s(Xk);OWe=r(Lzr,"GPTNeoXConfig"),Lzr.forEach(t),VWe=r(TCe," (GPT NeoX model)"),TCe.forEach(t),XWe=i(y),lm=n(y,"LI",{});var MCe=s(lm);bre=n(MCe,"STRONG",{});var xzr=s(bre);zWe=r(xzr,"gptj"),xzr.forEach(t),WWe=r(MCe," \u2014 "),zk=n(MCe,"A",{href:!0});var $zr=s(zk);QWe=r($zr,"GPTJConfig"),$zr.forEach(t),HWe=r(MCe," (GPT-J model)"),MCe.forEach(t),UWe=i(y),im=n(y,"LI",{});var ECe=s(im);vre=n(ECe,"STRONG",{});var kzr=s(vre);JWe=r(kzr,"hubert"),kzr.forEach(t),YWe=r(ECe," \u2014 "),Wk=n(ECe,"A",{href:!0});var Szr=s(Wk);KWe=r(Szr,"HubertConfig"),Szr.forEach(t),ZWe=r(ECe," (Hubert model)"),ECe.forEach(t),eQe=i(y),dm=n(y,"LI",{});var CCe=s(dm);Fre=n(CCe,"STRONG",{});var Rzr=s(Fre);oQe=r(Rzr,"ibert"),Rzr.forEach(t),rQe=r(CCe," \u2014 "),Qk=n(CCe,"A",{href:!0});var Pzr=s(Qk);tQe=r(Pzr,"IBertConfig"),Pzr.forEach(t),aQe=r(CCe," (I-BERT model)"),CCe.forEach(t),nQe=i(y),cm=n(y,"LI",{});var wCe=s(cm);Tre=n(wCe,"STRONG",{});var Bzr=s(Tre);sQe=r(Bzr,"imagegpt"),Bzr.forEach(t),lQe=r(wCe," \u2014 "),Hk=n(wCe,"A",{href:!0});var Izr=s(Hk);iQe=r(Izr,"ImageGPTConfig"),Izr.forEach(t),dQe=r(wCe," (ImageGPT model)"),wCe.forEach(t),cQe=i(y),fm=n(y,"LI",{});var ACe=s(fm);Mre=n(ACe,"STRONG",{});var Nzr=s(Mre);fQe=r(Nzr,"layoutlm"),Nzr.forEach(t),mQe=r(ACe," \u2014 "),Uk=n(ACe,"A",{href:!0});var qzr=s(Uk);gQe=r(qzr,"LayoutLMConfig"),qzr.forEach(t),hQe=r(ACe," (LayoutLM model)"),ACe.forEach(t),pQe=i(y),mm=n(y,"LI",{});var yCe=s(mm);Ere=n(yCe,"STRONG",{});var jzr=s(Ere);_Qe=r(jzr,"layoutlmv2"),jzr.forEach(t),uQe=r(yCe," \u2014 "),Jk=n(yCe,"A",{href:!0});var Dzr=s(Jk);bQe=r(Dzr,"LayoutLMv2Config"),Dzr.forEach(t),vQe=r(yCe," (LayoutLMv2 model)"),yCe.forEach(t),FQe=i(y),gm=n(y,"LI",{});var LCe=s(gm);Cre=n(LCe,"STRONG",{});var Gzr=s(Cre);TQe=r(Gzr,"layoutlmv3"),Gzr.forEach(t),MQe=r(LCe," \u2014 "),Yk=n(LCe,"A",{href:!0});var Ozr=s(Yk);EQe=r(Ozr,"LayoutLMv3Config"),Ozr.forEach(t),CQe=r(LCe," (LayoutLMv3 model)"),LCe.forEach(t),wQe=i(y),hm=n(y,"LI",{});var xCe=s(hm);wre=n(xCe,"STRONG",{});var Vzr=s(wre);AQe=r(Vzr,"led"),Vzr.forEach(t),yQe=r(xCe," \u2014 "),Kk=n(xCe,"A",{href:!0});var Xzr=s(Kk);LQe=r(Xzr,"LEDConfig"),Xzr.forEach(t),xQe=r(xCe," (LED model)"),xCe.forEach(t),$Qe=i(y),pm=n(y,"LI",{});var $Ce=s(pm);Are=n($Ce,"STRONG",{});var zzr=s(Are);kQe=r(zzr,"longformer"),zzr.forEach(t),SQe=r($Ce," \u2014 "),Zk=n($Ce,"A",{href:!0});var Wzr=s(Zk);RQe=r(Wzr,"LongformerConfig"),Wzr.forEach(t),PQe=r($Ce," (Longformer model)"),$Ce.forEach(t),BQe=i(y),_m=n(y,"LI",{});var kCe=s(_m);yre=n(kCe,"STRONG",{});var Qzr=s(yre);IQe=r(Qzr,"longt5"),Qzr.forEach(t),NQe=r(kCe," \u2014 "),eS=n(kCe,"A",{href:!0});var Hzr=s(eS);qQe=r(Hzr,"LongT5Config"),Hzr.forEach(t),jQe=r(kCe," (LongT5 model)"),kCe.forEach(t),DQe=i(y),um=n(y,"LI",{});var SCe=s(um);Lre=n(SCe,"STRONG",{});var Uzr=s(Lre);GQe=r(Uzr,"luke"),Uzr.forEach(t),OQe=r(SCe," \u2014 "),oS=n(SCe,"A",{href:!0});var Jzr=s(oS);VQe=r(Jzr,"LukeConfig"),Jzr.forEach(t),XQe=r(SCe," (LUKE model)"),SCe.forEach(t),zQe=i(y),bm=n(y,"LI",{});var RCe=s(bm);xre=n(RCe,"STRONG",{});var Yzr=s(xre);WQe=r(Yzr,"lxmert"),Yzr.forEach(t),QQe=r(RCe," \u2014 "),rS=n(RCe,"A",{href:!0});var Kzr=s(rS);HQe=r(Kzr,"LxmertConfig"),Kzr.forEach(t),UQe=r(RCe," (LXMERT model)"),RCe.forEach(t),JQe=i(y),vm=n(y,"LI",{});var PCe=s(vm);$re=n(PCe,"STRONG",{});var Zzr=s($re);YQe=r(Zzr,"m2m_100"),Zzr.forEach(t),KQe=r(PCe," \u2014 "),tS=n(PCe,"A",{href:!0});var eWr=s(tS);ZQe=r(eWr,"M2M100Config"),eWr.forEach(t),eHe=r(PCe," (M2M100 model)"),PCe.forEach(t),oHe=i(y),Fm=n(y,"LI",{});var BCe=s(Fm);kre=n(BCe,"STRONG",{});var oWr=s(kre);rHe=r(oWr,"marian"),oWr.forEach(t),tHe=r(BCe," \u2014 "),aS=n(BCe,"A",{href:!0});var rWr=s(aS);aHe=r(rWr,"MarianConfig"),rWr.forEach(t),nHe=r(BCe," (Marian model)"),BCe.forEach(t),sHe=i(y),Tm=n(y,"LI",{});var ICe=s(Tm);Sre=n(ICe,"STRONG",{});var tWr=s(Sre);lHe=r(tWr,"maskformer"),tWr.forEach(t),iHe=r(ICe," \u2014 "),nS=n(ICe,"A",{href:!0});var aWr=s(nS);dHe=r(aWr,"MaskFormerConfig"),aWr.forEach(t),cHe=r(ICe," (MaskFormer model)"),ICe.forEach(t),fHe=i(y),Mm=n(y,"LI",{});var NCe=s(Mm);Rre=n(NCe,"STRONG",{});var nWr=s(Rre);mHe=r(nWr,"mbart"),nWr.forEach(t),gHe=r(NCe," \u2014 "),sS=n(NCe,"A",{href:!0});var sWr=s(sS);hHe=r(sWr,"MBartConfig"),sWr.forEach(t),pHe=r(NCe," (mBART model)"),NCe.forEach(t),_He=i(y),Em=n(y,"LI",{});var qCe=s(Em);Pre=n(qCe,"STRONG",{});var lWr=s(Pre);uHe=r(lWr,"megatron-bert"),lWr.forEach(t),bHe=r(qCe," \u2014 "),lS=n(qCe,"A",{href:!0});var iWr=s(lS);vHe=r(iWr,"MegatronBertConfig"),iWr.forEach(t),FHe=r(qCe," (MegatronBert model)"),qCe.forEach(t),THe=i(y),Cm=n(y,"LI",{});var jCe=s(Cm);Bre=n(jCe,"STRONG",{});var dWr=s(Bre);MHe=r(dWr,"mobilebert"),dWr.forEach(t),EHe=r(jCe," \u2014 "),iS=n(jCe,"A",{href:!0});var cWr=s(iS);CHe=r(cWr,"MobileBertConfig"),cWr.forEach(t),wHe=r(jCe," (MobileBERT model)"),jCe.forEach(t),AHe=i(y),wm=n(y,"LI",{});var DCe=s(wm);Ire=n(DCe,"STRONG",{});var fWr=s(Ire);yHe=r(fWr,"mpnet"),fWr.forEach(t),LHe=r(DCe," \u2014 "),dS=n(DCe,"A",{href:!0});var mWr=s(dS);xHe=r(mWr,"MPNetConfig"),mWr.forEach(t),$He=r(DCe," (MPNet model)"),DCe.forEach(t),kHe=i(y),Am=n(y,"LI",{});var GCe=s(Am);Nre=n(GCe,"STRONG",{});var gWr=s(Nre);SHe=r(gWr,"mt5"),gWr.forEach(t),RHe=r(GCe," \u2014 "),cS=n(GCe,"A",{href:!0});var hWr=s(cS);PHe=r(hWr,"MT5Config"),hWr.forEach(t),BHe=r(GCe," (mT5 model)"),GCe.forEach(t),IHe=i(y),ym=n(y,"LI",{});var OCe=s(ym);qre=n(OCe,"STRONG",{});var pWr=s(qre);NHe=r(pWr,"nystromformer"),pWr.forEach(t),qHe=r(OCe," \u2014 "),fS=n(OCe,"A",{href:!0});var _Wr=s(fS);jHe=r(_Wr,"NystromformerConfig"),_Wr.forEach(t),DHe=r(OCe," (Nystromformer model)"),OCe.forEach(t),GHe=i(y),Lm=n(y,"LI",{});var VCe=s(Lm);jre=n(VCe,"STRONG",{});var uWr=s(jre);OHe=r(uWr,"openai-gpt"),uWr.forEach(t),VHe=r(VCe," \u2014 "),mS=n(VCe,"A",{href:!0});var bWr=s(mS);XHe=r(bWr,"OpenAIGPTConfig"),bWr.forEach(t),zHe=r(VCe," (OpenAI GPT model)"),VCe.forEach(t),WHe=i(y),xm=n(y,"LI",{});var XCe=s(xm);Dre=n(XCe,"STRONG",{});var vWr=s(Dre);QHe=r(vWr,"opt"),vWr.forEach(t),HHe=r(XCe," \u2014 "),gS=n(XCe,"A",{href:!0});var FWr=s(gS);UHe=r(FWr,"OPTConfig"),FWr.forEach(t),JHe=r(XCe," (OPT model)"),XCe.forEach(t),YHe=i(y),$m=n(y,"LI",{});var zCe=s($m);Gre=n(zCe,"STRONG",{});var TWr=s(Gre);KHe=r(TWr,"pegasus"),TWr.forEach(t),ZHe=r(zCe," \u2014 "),hS=n(zCe,"A",{href:!0});var MWr=s(hS);eUe=r(MWr,"PegasusConfig"),MWr.forEach(t),oUe=r(zCe," (Pegasus model)"),zCe.forEach(t),rUe=i(y),km=n(y,"LI",{});var WCe=s(km);Ore=n(WCe,"STRONG",{});var EWr=s(Ore);tUe=r(EWr,"perceiver"),EWr.forEach(t),aUe=r(WCe," \u2014 "),pS=n(WCe,"A",{href:!0});var CWr=s(pS);nUe=r(CWr,"PerceiverConfig"),CWr.forEach(t),sUe=r(WCe," (Perceiver model)"),WCe.forEach(t),lUe=i(y),Sm=n(y,"LI",{});var QCe=s(Sm);Vre=n(QCe,"STRONG",{});var wWr=s(Vre);iUe=r(wWr,"plbart"),wWr.forEach(t),dUe=r(QCe," \u2014 "),_S=n(QCe,"A",{href:!0});var AWr=s(_S);cUe=r(AWr,"PLBartConfig"),AWr.forEach(t),fUe=r(QCe," (PLBart model)"),QCe.forEach(t),mUe=i(y),Rm=n(y,"LI",{});var HCe=s(Rm);Xre=n(HCe,"STRONG",{});var yWr=s(Xre);gUe=r(yWr,"poolformer"),yWr.forEach(t),hUe=r(HCe," \u2014 "),uS=n(HCe,"A",{href:!0});var LWr=s(uS);pUe=r(LWr,"PoolFormerConfig"),LWr.forEach(t),_Ue=r(HCe," (PoolFormer model)"),HCe.forEach(t),uUe=i(y),Pm=n(y,"LI",{});var UCe=s(Pm);zre=n(UCe,"STRONG",{});var xWr=s(zre);bUe=r(xWr,"prophetnet"),xWr.forEach(t),vUe=r(UCe," \u2014 "),bS=n(UCe,"A",{href:!0});var $Wr=s(bS);FUe=r($Wr,"ProphetNetConfig"),$Wr.forEach(t),TUe=r(UCe," (ProphetNet model)"),UCe.forEach(t),MUe=i(y),Bm=n(y,"LI",{});var JCe=s(Bm);Wre=n(JCe,"STRONG",{});var kWr=s(Wre);EUe=r(kWr,"qdqbert"),kWr.forEach(t),CUe=r(JCe," \u2014 "),vS=n(JCe,"A",{href:!0});var SWr=s(vS);wUe=r(SWr,"QDQBertConfig"),SWr.forEach(t),AUe=r(JCe," (QDQBert model)"),JCe.forEach(t),yUe=i(y),Im=n(y,"LI",{});var YCe=s(Im);Qre=n(YCe,"STRONG",{});var RWr=s(Qre);LUe=r(RWr,"rag"),RWr.forEach(t),xUe=r(YCe," \u2014 "),FS=n(YCe,"A",{href:!0});var PWr=s(FS);$Ue=r(PWr,"RagConfig"),PWr.forEach(t),kUe=r(YCe," (RAG model)"),YCe.forEach(t),SUe=i(y),Nm=n(y,"LI",{});var KCe=s(Nm);Hre=n(KCe,"STRONG",{});var BWr=s(Hre);RUe=r(BWr,"realm"),BWr.forEach(t),PUe=r(KCe," \u2014 "),TS=n(KCe,"A",{href:!0});var IWr=s(TS);BUe=r(IWr,"RealmConfig"),IWr.forEach(t),IUe=r(KCe," (Realm model)"),KCe.forEach(t),NUe=i(y),qm=n(y,"LI",{});var ZCe=s(qm);Ure=n(ZCe,"STRONG",{});var NWr=s(Ure);qUe=r(NWr,"reformer"),NWr.forEach(t),jUe=r(ZCe," \u2014 "),MS=n(ZCe,"A",{href:!0});var qWr=s(MS);DUe=r(qWr,"ReformerConfig"),qWr.forEach(t),GUe=r(ZCe," (Reformer model)"),ZCe.forEach(t),OUe=i(y),jm=n(y,"LI",{});var e3e=s(jm);Jre=n(e3e,"STRONG",{});var jWr=s(Jre);VUe=r(jWr,"regnet"),jWr.forEach(t),XUe=r(e3e," \u2014 "),ES=n(e3e,"A",{href:!0});var DWr=s(ES);zUe=r(DWr,"RegNetConfig"),DWr.forEach(t),WUe=r(e3e," (RegNet model)"),e3e.forEach(t),QUe=i(y),Dm=n(y,"LI",{});var o3e=s(Dm);Yre=n(o3e,"STRONG",{});var GWr=s(Yre);HUe=r(GWr,"rembert"),GWr.forEach(t),UUe=r(o3e," \u2014 "),CS=n(o3e,"A",{href:!0});var OWr=s(CS);JUe=r(OWr,"RemBertConfig"),OWr.forEach(t),YUe=r(o3e," (RemBERT model)"),o3e.forEach(t),KUe=i(y),Gm=n(y,"LI",{});var r3e=s(Gm);Kre=n(r3e,"STRONG",{});var VWr=s(Kre);ZUe=r(VWr,"resnet"),VWr.forEach(t),eJe=r(r3e," \u2014 "),wS=n(r3e,"A",{href:!0});var XWr=s(wS);oJe=r(XWr,"ResNetConfig"),XWr.forEach(t),rJe=r(r3e," (ResNet model)"),r3e.forEach(t),tJe=i(y),Om=n(y,"LI",{});var t3e=s(Om);Zre=n(t3e,"STRONG",{});var zWr=s(Zre);aJe=r(zWr,"retribert"),zWr.forEach(t),nJe=r(t3e," \u2014 "),AS=n(t3e,"A",{href:!0});var WWr=s(AS);sJe=r(WWr,"RetriBertConfig"),WWr.forEach(t),lJe=r(t3e," (RetriBERT model)"),t3e.forEach(t),iJe=i(y),Vm=n(y,"LI",{});var a3e=s(Vm);ete=n(a3e,"STRONG",{});var QWr=s(ete);dJe=r(QWr,"roberta"),QWr.forEach(t),cJe=r(a3e," \u2014 "),yS=n(a3e,"A",{href:!0});var HWr=s(yS);fJe=r(HWr,"RobertaConfig"),HWr.forEach(t),mJe=r(a3e," (RoBERTa model)"),a3e.forEach(t),gJe=i(y),Xm=n(y,"LI",{});var n3e=s(Xm);ote=n(n3e,"STRONG",{});var UWr=s(ote);hJe=r(UWr,"roformer"),UWr.forEach(t),pJe=r(n3e," \u2014 "),LS=n(n3e,"A",{href:!0});var JWr=s(LS);_Je=r(JWr,"RoFormerConfig"),JWr.forEach(t),uJe=r(n3e," (RoFormer model)"),n3e.forEach(t),bJe=i(y),zm=n(y,"LI",{});var s3e=s(zm);rte=n(s3e,"STRONG",{});var YWr=s(rte);vJe=r(YWr,"segformer"),YWr.forEach(t),FJe=r(s3e," \u2014 "),xS=n(s3e,"A",{href:!0});var KWr=s(xS);TJe=r(KWr,"SegformerConfig"),KWr.forEach(t),MJe=r(s3e," (SegFormer model)"),s3e.forEach(t),EJe=i(y),Wm=n(y,"LI",{});var l3e=s(Wm);tte=n(l3e,"STRONG",{});var ZWr=s(tte);CJe=r(ZWr,"sew"),ZWr.forEach(t),wJe=r(l3e," \u2014 "),$S=n(l3e,"A",{href:!0});var eQr=s($S);AJe=r(eQr,"SEWConfig"),eQr.forEach(t),yJe=r(l3e," (SEW model)"),l3e.forEach(t),LJe=i(y),Qm=n(y,"LI",{});var i3e=s(Qm);ate=n(i3e,"STRONG",{});var oQr=s(ate);xJe=r(oQr,"sew-d"),oQr.forEach(t),$Je=r(i3e," \u2014 "),kS=n(i3e,"A",{href:!0});var rQr=s(kS);kJe=r(rQr,"SEWDConfig"),rQr.forEach(t),SJe=r(i3e," (SEW-D model)"),i3e.forEach(t),RJe=i(y),Hm=n(y,"LI",{});var d3e=s(Hm);nte=n(d3e,"STRONG",{});var tQr=s(nte);PJe=r(tQr,"speech-encoder-decoder"),tQr.forEach(t),BJe=r(d3e," \u2014 "),SS=n(d3e,"A",{href:!0});var aQr=s(SS);IJe=r(aQr,"SpeechEncoderDecoderConfig"),aQr.forEach(t),NJe=r(d3e," (Speech Encoder decoder model)"),d3e.forEach(t),qJe=i(y),Um=n(y,"LI",{});var c3e=s(Um);ste=n(c3e,"STRONG",{});var nQr=s(ste);jJe=r(nQr,"speech_to_text"),nQr.forEach(t),DJe=r(c3e," \u2014 "),RS=n(c3e,"A",{href:!0});var sQr=s(RS);GJe=r(sQr,"Speech2TextConfig"),sQr.forEach(t),OJe=r(c3e," (Speech2Text model)"),c3e.forEach(t),VJe=i(y),Jm=n(y,"LI",{});var f3e=s(Jm);lte=n(f3e,"STRONG",{});var lQr=s(lte);XJe=r(lQr,"speech_to_text_2"),lQr.forEach(t),zJe=r(f3e," \u2014 "),PS=n(f3e,"A",{href:!0});var iQr=s(PS);WJe=r(iQr,"Speech2Text2Config"),iQr.forEach(t),QJe=r(f3e," (Speech2Text2 model)"),f3e.forEach(t),HJe=i(y),Ym=n(y,"LI",{});var m3e=s(Ym);ite=n(m3e,"STRONG",{});var dQr=s(ite);UJe=r(dQr,"splinter"),dQr.forEach(t),JJe=r(m3e," \u2014 "),BS=n(m3e,"A",{href:!0});var cQr=s(BS);YJe=r(cQr,"SplinterConfig"),cQr.forEach(t),KJe=r(m3e," (Splinter model)"),m3e.forEach(t),ZJe=i(y),Km=n(y,"LI",{});var g3e=s(Km);dte=n(g3e,"STRONG",{});var fQr=s(dte);eYe=r(fQr,"squeezebert"),fQr.forEach(t),oYe=r(g3e," \u2014 "),IS=n(g3e,"A",{href:!0});var mQr=s(IS);rYe=r(mQr,"SqueezeBertConfig"),mQr.forEach(t),tYe=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),aYe=i(y),Zm=n(y,"LI",{});var h3e=s(Zm);cte=n(h3e,"STRONG",{});var gQr=s(cte);nYe=r(gQr,"swin"),gQr.forEach(t),sYe=r(h3e," \u2014 "),NS=n(h3e,"A",{href:!0});var hQr=s(NS);lYe=r(hQr,"SwinConfig"),hQr.forEach(t),iYe=r(h3e," (Swin model)"),h3e.forEach(t),dYe=i(y),eg=n(y,"LI",{});var p3e=s(eg);fte=n(p3e,"STRONG",{});var pQr=s(fte);cYe=r(pQr,"t5"),pQr.forEach(t),fYe=r(p3e," \u2014 "),qS=n(p3e,"A",{href:!0});var _Qr=s(qS);mYe=r(_Qr,"T5Config"),_Qr.forEach(t),gYe=r(p3e," (T5 model)"),p3e.forEach(t),hYe=i(y),og=n(y,"LI",{});var _3e=s(og);mte=n(_3e,"STRONG",{});var uQr=s(mte);pYe=r(uQr,"tapas"),uQr.forEach(t),_Ye=r(_3e," \u2014 "),jS=n(_3e,"A",{href:!0});var bQr=s(jS);uYe=r(bQr,"TapasConfig"),bQr.forEach(t),bYe=r(_3e," (TAPAS model)"),_3e.forEach(t),vYe=i(y),rg=n(y,"LI",{});var u3e=s(rg);gte=n(u3e,"STRONG",{});var vQr=s(gte);FYe=r(vQr,"trajectory_transformer"),vQr.forEach(t),TYe=r(u3e," \u2014 "),DS=n(u3e,"A",{href:!0});var FQr=s(DS);MYe=r(FQr,"TrajectoryTransformerConfig"),FQr.forEach(t),EYe=r(u3e," (Trajectory Transformer model)"),u3e.forEach(t),CYe=i(y),tg=n(y,"LI",{});var b3e=s(tg);hte=n(b3e,"STRONG",{});var TQr=s(hte);wYe=r(TQr,"transfo-xl"),TQr.forEach(t),AYe=r(b3e," \u2014 "),GS=n(b3e,"A",{href:!0});var MQr=s(GS);yYe=r(MQr,"TransfoXLConfig"),MQr.forEach(t),LYe=r(b3e," (Transformer-XL model)"),b3e.forEach(t),xYe=i(y),ag=n(y,"LI",{});var v3e=s(ag);pte=n(v3e,"STRONG",{});var EQr=s(pte);$Ye=r(EQr,"trocr"),EQr.forEach(t),kYe=r(v3e," \u2014 "),OS=n(v3e,"A",{href:!0});var CQr=s(OS);SYe=r(CQr,"TrOCRConfig"),CQr.forEach(t),RYe=r(v3e," (TrOCR model)"),v3e.forEach(t),PYe=i(y),ng=n(y,"LI",{});var F3e=s(ng);_te=n(F3e,"STRONG",{});var wQr=s(_te);BYe=r(wQr,"unispeech"),wQr.forEach(t),IYe=r(F3e," \u2014 "),VS=n(F3e,"A",{href:!0});var AQr=s(VS);NYe=r(AQr,"UniSpeechConfig"),AQr.forEach(t),qYe=r(F3e," (UniSpeech model)"),F3e.forEach(t),jYe=i(y),sg=n(y,"LI",{});var T3e=s(sg);ute=n(T3e,"STRONG",{});var yQr=s(ute);DYe=r(yQr,"unispeech-sat"),yQr.forEach(t),GYe=r(T3e," \u2014 "),XS=n(T3e,"A",{href:!0});var LQr=s(XS);OYe=r(LQr,"UniSpeechSatConfig"),LQr.forEach(t),VYe=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),XYe=i(y),lg=n(y,"LI",{});var M3e=s(lg);bte=n(M3e,"STRONG",{});var xQr=s(bte);zYe=r(xQr,"van"),xQr.forEach(t),WYe=r(M3e," \u2014 "),zS=n(M3e,"A",{href:!0});var $Qr=s(zS);QYe=r($Qr,"VanConfig"),$Qr.forEach(t),HYe=r(M3e," (VAN model)"),M3e.forEach(t),UYe=i(y),ig=n(y,"LI",{});var E3e=s(ig);vte=n(E3e,"STRONG",{});var kQr=s(vte);JYe=r(kQr,"vilt"),kQr.forEach(t),YYe=r(E3e," \u2014 "),WS=n(E3e,"A",{href:!0});var SQr=s(WS);KYe=r(SQr,"ViltConfig"),SQr.forEach(t),ZYe=r(E3e," (ViLT model)"),E3e.forEach(t),eKe=i(y),dg=n(y,"LI",{});var C3e=s(dg);Fte=n(C3e,"STRONG",{});var RQr=s(Fte);oKe=r(RQr,"vision-encoder-decoder"),RQr.forEach(t),rKe=r(C3e," \u2014 "),QS=n(C3e,"A",{href:!0});var PQr=s(QS);tKe=r(PQr,"VisionEncoderDecoderConfig"),PQr.forEach(t),aKe=r(C3e," (Vision Encoder decoder model)"),C3e.forEach(t),nKe=i(y),cg=n(y,"LI",{});var w3e=s(cg);Tte=n(w3e,"STRONG",{});var BQr=s(Tte);sKe=r(BQr,"vision-text-dual-encoder"),BQr.forEach(t),lKe=r(w3e," \u2014 "),HS=n(w3e,"A",{href:!0});var IQr=s(HS);iKe=r(IQr,"VisionTextDualEncoderConfig"),IQr.forEach(t),dKe=r(w3e," (VisionTextDualEncoder model)"),w3e.forEach(t),cKe=i(y),fg=n(y,"LI",{});var A3e=s(fg);Mte=n(A3e,"STRONG",{});var NQr=s(Mte);fKe=r(NQr,"visual_bert"),NQr.forEach(t),mKe=r(A3e," \u2014 "),US=n(A3e,"A",{href:!0});var qQr=s(US);gKe=r(qQr,"VisualBertConfig"),qQr.forEach(t),hKe=r(A3e," (VisualBert model)"),A3e.forEach(t),pKe=i(y),mg=n(y,"LI",{});var y3e=s(mg);Ete=n(y3e,"STRONG",{});var jQr=s(Ete);_Ke=r(jQr,"vit"),jQr.forEach(t),uKe=r(y3e," \u2014 "),JS=n(y3e,"A",{href:!0});var DQr=s(JS);bKe=r(DQr,"ViTConfig"),DQr.forEach(t),vKe=r(y3e," (ViT model)"),y3e.forEach(t),FKe=i(y),gg=n(y,"LI",{});var L3e=s(gg);Cte=n(L3e,"STRONG",{});var GQr=s(Cte);TKe=r(GQr,"vit_mae"),GQr.forEach(t),MKe=r(L3e," \u2014 "),YS=n(L3e,"A",{href:!0});var OQr=s(YS);EKe=r(OQr,"ViTMAEConfig"),OQr.forEach(t),CKe=r(L3e," (ViTMAE model)"),L3e.forEach(t),wKe=i(y),hg=n(y,"LI",{});var x3e=s(hg);wte=n(x3e,"STRONG",{});var VQr=s(wte);AKe=r(VQr,"wav2vec2"),VQr.forEach(t),yKe=r(x3e," \u2014 "),KS=n(x3e,"A",{href:!0});var XQr=s(KS);LKe=r(XQr,"Wav2Vec2Config"),XQr.forEach(t),xKe=r(x3e," (Wav2Vec2 model)"),x3e.forEach(t),$Ke=i(y),pg=n(y,"LI",{});var $3e=s(pg);Ate=n($3e,"STRONG",{});var zQr=s(Ate);kKe=r(zQr,"wav2vec2-conformer"),zQr.forEach(t),SKe=r($3e," \u2014 "),ZS=n($3e,"A",{href:!0});var WQr=s(ZS);RKe=r(WQr,"Wav2Vec2ConformerConfig"),WQr.forEach(t),PKe=r($3e," (Wav2Vec2-Conformer model)"),$3e.forEach(t),BKe=i(y),_g=n(y,"LI",{});var k3e=s(_g);yte=n(k3e,"STRONG",{});var QQr=s(yte);IKe=r(QQr,"wavlm"),QQr.forEach(t),NKe=r(k3e," \u2014 "),eR=n(k3e,"A",{href:!0});var HQr=s(eR);qKe=r(HQr,"WavLMConfig"),HQr.forEach(t),jKe=r(k3e," (WavLM model)"),k3e.forEach(t),DKe=i(y),ug=n(y,"LI",{});var S3e=s(ug);Lte=n(S3e,"STRONG",{});var UQr=s(Lte);GKe=r(UQr,"xglm"),UQr.forEach(t),OKe=r(S3e," \u2014 "),oR=n(S3e,"A",{href:!0});var JQr=s(oR);VKe=r(JQr,"XGLMConfig"),JQr.forEach(t),XKe=r(S3e," (XGLM model)"),S3e.forEach(t),zKe=i(y),bg=n(y,"LI",{});var R3e=s(bg);xte=n(R3e,"STRONG",{});var YQr=s(xte);WKe=r(YQr,"xlm"),YQr.forEach(t),QKe=r(R3e," \u2014 "),rR=n(R3e,"A",{href:!0});var KQr=s(rR);HKe=r(KQr,"XLMConfig"),KQr.forEach(t),UKe=r(R3e," (XLM model)"),R3e.forEach(t),JKe=i(y),vg=n(y,"LI",{});var P3e=s(vg);$te=n(P3e,"STRONG",{});var ZQr=s($te);YKe=r(ZQr,"xlm-prophetnet"),ZQr.forEach(t),KKe=r(P3e," \u2014 "),tR=n(P3e,"A",{href:!0});var eHr=s(tR);ZKe=r(eHr,"XLMProphetNetConfig"),eHr.forEach(t),eZe=r(P3e," (XLMProphetNet model)"),P3e.forEach(t),oZe=i(y),Fg=n(y,"LI",{});var B3e=s(Fg);kte=n(B3e,"STRONG",{});var oHr=s(kte);rZe=r(oHr,"xlm-roberta"),oHr.forEach(t),tZe=r(B3e," \u2014 "),aR=n(B3e,"A",{href:!0});var rHr=s(aR);aZe=r(rHr,"XLMRobertaConfig"),rHr.forEach(t),nZe=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),sZe=i(y),Tg=n(y,"LI",{});var I3e=s(Tg);Ste=n(I3e,"STRONG",{});var tHr=s(Ste);lZe=r(tHr,"xlm-roberta-xl"),tHr.forEach(t),iZe=r(I3e," \u2014 "),nR=n(I3e,"A",{href:!0});var aHr=s(nR);dZe=r(aHr,"XLMRobertaXLConfig"),aHr.forEach(t),cZe=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),fZe=i(y),Mg=n(y,"LI",{});var N3e=s(Mg);Rte=n(N3e,"STRONG",{});var nHr=s(Rte);mZe=r(nHr,"xlnet"),nHr.forEach(t),gZe=r(N3e," \u2014 "),sR=n(N3e,"A",{href:!0});var sHr=s(sR);hZe=r(sHr,"XLNetConfig"),sHr.forEach(t),pZe=r(N3e," (XLNet model)"),N3e.forEach(t),_Ze=i(y),Eg=n(y,"LI",{});var q3e=s(Eg);Pte=n(q3e,"STRONG",{});var lHr=s(Pte);uZe=r(lHr,"yolos"),lHr.forEach(t),bZe=r(q3e," \u2014 "),lR=n(q3e,"A",{href:!0});var iHr=s(lR);vZe=r(iHr,"YolosConfig"),iHr.forEach(t),FZe=r(q3e," (YOLOS model)"),q3e.forEach(t),TZe=i(y),Cg=n(y,"LI",{});var j3e=s(Cg);Bte=n(j3e,"STRONG",{});var dHr=s(Bte);MZe=r(dHr,"yoso"),dHr.forEach(t),EZe=r(j3e," \u2014 "),iR=n(j3e,"A",{href:!0});var cHr=s(iR);CZe=r(cHr,"YosoConfig"),cHr.forEach(t),wZe=r(j3e," (YOSO model)"),j3e.forEach(t),y.forEach(t),AZe=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),yZe=i(et),Ag=n(et,"DIV",{class:!0});var BDe=s(Ag);T(Ow.$$.fragment,BDe),LZe=i(BDe),Ite=n(BDe,"P",{});var fHr=s(Ite);xZe=r(fHr,"Register a new configuration for this class."),fHr.forEach(t),BDe.forEach(t),et.forEach(t),qqe=i(f),Mi=n(f,"H2",{class:!0});var IDe=s(Mi);yg=n(IDe,"A",{id:!0,class:!0,href:!0});var mHr=s(yg);Nte=n(mHr,"SPAN",{});var gHr=s(Nte);T(Vw.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),$Ze=i(IDe),qte=n(IDe,"SPAN",{});var hHr=s(qte);kZe=r(hHr,"AutoTokenizer"),hHr.forEach(t),IDe.forEach(t),jqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(Xw.$$.fragment,qs),SZe=i(qs),zw=n(qs,"P",{});var NDe=s(zw);RZe=r(NDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=n(NDe,"A",{href:!0});var pHr=s(dR);PZe=r(pHr,"AutoTokenizer.from_pretrained()"),pHr.forEach(t),BZe=r(NDe," class method."),NDe.forEach(t),IZe=i(qs),Ww=n(qs,"P",{});var qDe=s(Ww);NZe=r(qDe,"This class cannot be instantiated directly using "),jte=n(qDe,"CODE",{});var _Hr=s(jte);qZe=r(_Hr,"__init__()"),_Hr.forEach(t),jZe=r(qDe," (throws an error)."),qDe.forEach(t),DZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(Qw.$$.fragment,js),GZe=i(js),Dte=n(js,"P",{});var uHr=s(Dte);OZe=r(uHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uHr.forEach(t),VZe=i(js),Aa=n(js,"P",{});var N3=s(Aa);XZe=r(N3,"The tokenizer class to instantiate is selected based on the "),Gte=n(N3,"CODE",{});var bHr=s(Gte);zZe=r(bHr,"model_type"),bHr.forEach(t),WZe=r(N3,` property of the config object (either
passed as an argument or loaded from `),Ote=n(N3,"CODE",{});var vHr=s(Ote);QZe=r(vHr,"pretrained_model_name_or_path"),vHr.forEach(t),HZe=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(N3,"CODE",{});var FHr=s(Vte);UZe=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),JZe=r(N3,":"),N3.forEach(t),YZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Hx=s(Sn);Xte=n(Hx,"STRONG",{});var THr=s(Xte);KZe=r(THr,"albert"),THr.forEach(t),ZZe=r(Hx," \u2014 "),cR=n(Hx,"A",{href:!0});var MHr=s(cR);eeo=r(MHr,"AlbertTokenizer"),MHr.forEach(t),oeo=r(Hx," or "),fR=n(Hx,"A",{href:!0});var EHr=s(fR);reo=r(EHr,"AlbertTokenizerFast"),EHr.forEach(t),teo=r(Hx," (ALBERT model)"),Hx.forEach(t),aeo=i(S),Rn=n(S,"LI",{});var Ux=s(Rn);zte=n(Ux,"STRONG",{});var CHr=s(zte);neo=r(CHr,"bart"),CHr.forEach(t),seo=r(Ux," \u2014 "),mR=n(Ux,"A",{href:!0});var wHr=s(mR);leo=r(wHr,"BartTokenizer"),wHr.forEach(t),ieo=r(Ux," or "),gR=n(Ux,"A",{href:!0});var AHr=s(gR);deo=r(AHr,"BartTokenizerFast"),AHr.forEach(t),ceo=r(Ux," (BART model)"),Ux.forEach(t),feo=i(S),Pn=n(S,"LI",{});var Jx=s(Pn);Wte=n(Jx,"STRONG",{});var yHr=s(Wte);meo=r(yHr,"barthez"),yHr.forEach(t),geo=r(Jx," \u2014 "),hR=n(Jx,"A",{href:!0});var LHr=s(hR);heo=r(LHr,"BarthezTokenizer"),LHr.forEach(t),peo=r(Jx," or "),pR=n(Jx,"A",{href:!0});var xHr=s(pR);_eo=r(xHr,"BarthezTokenizerFast"),xHr.forEach(t),ueo=r(Jx," (BARThez model)"),Jx.forEach(t),beo=i(S),Lg=n(S,"LI",{});var D3e=s(Lg);Qte=n(D3e,"STRONG",{});var $Hr=s(Qte);veo=r($Hr,"bartpho"),$Hr.forEach(t),Feo=r(D3e," \u2014 "),_R=n(D3e,"A",{href:!0});var kHr=s(_R);Teo=r(kHr,"BartphoTokenizer"),kHr.forEach(t),Meo=r(D3e," (BARTpho model)"),D3e.forEach(t),Eeo=i(S),Bn=n(S,"LI",{});var Yx=s(Bn);Hte=n(Yx,"STRONG",{});var SHr=s(Hte);Ceo=r(SHr,"bert"),SHr.forEach(t),weo=r(Yx," \u2014 "),uR=n(Yx,"A",{href:!0});var RHr=s(uR);Aeo=r(RHr,"BertTokenizer"),RHr.forEach(t),yeo=r(Yx," or "),bR=n(Yx,"A",{href:!0});var PHr=s(bR);Leo=r(PHr,"BertTokenizerFast"),PHr.forEach(t),xeo=r(Yx," (BERT model)"),Yx.forEach(t),$eo=i(S),xg=n(S,"LI",{});var G3e=s(xg);Ute=n(G3e,"STRONG",{});var BHr=s(Ute);keo=r(BHr,"bert-generation"),BHr.forEach(t),Seo=r(G3e," \u2014 "),vR=n(G3e,"A",{href:!0});var IHr=s(vR);Reo=r(IHr,"BertGenerationTokenizer"),IHr.forEach(t),Peo=r(G3e," (Bert Generation model)"),G3e.forEach(t),Beo=i(S),$g=n(S,"LI",{});var O3e=s($g);Jte=n(O3e,"STRONG",{});var NHr=s(Jte);Ieo=r(NHr,"bert-japanese"),NHr.forEach(t),Neo=r(O3e," \u2014 "),FR=n(O3e,"A",{href:!0});var qHr=s(FR);qeo=r(qHr,"BertJapaneseTokenizer"),qHr.forEach(t),jeo=r(O3e," (BertJapanese model)"),O3e.forEach(t),Deo=i(S),kg=n(S,"LI",{});var V3e=s(kg);Yte=n(V3e,"STRONG",{});var jHr=s(Yte);Geo=r(jHr,"bertweet"),jHr.forEach(t),Oeo=r(V3e," \u2014 "),TR=n(V3e,"A",{href:!0});var DHr=s(TR);Veo=r(DHr,"BertweetTokenizer"),DHr.forEach(t),Xeo=r(V3e," (Bertweet model)"),V3e.forEach(t),zeo=i(S),In=n(S,"LI",{});var Kx=s(In);Kte=n(Kx,"STRONG",{});var GHr=s(Kte);Weo=r(GHr,"big_bird"),GHr.forEach(t),Qeo=r(Kx," \u2014 "),MR=n(Kx,"A",{href:!0});var OHr=s(MR);Heo=r(OHr,"BigBirdTokenizer"),OHr.forEach(t),Ueo=r(Kx," or "),ER=n(Kx,"A",{href:!0});var VHr=s(ER);Jeo=r(VHr,"BigBirdTokenizerFast"),VHr.forEach(t),Yeo=r(Kx," (BigBird model)"),Kx.forEach(t),Keo=i(S),Nn=n(S,"LI",{});var Zx=s(Nn);Zte=n(Zx,"STRONG",{});var XHr=s(Zte);Zeo=r(XHr,"bigbird_pegasus"),XHr.forEach(t),eoo=r(Zx," \u2014 "),CR=n(Zx,"A",{href:!0});var zHr=s(CR);ooo=r(zHr,"PegasusTokenizer"),zHr.forEach(t),roo=r(Zx," or "),wR=n(Zx,"A",{href:!0});var WHr=s(wR);too=r(WHr,"PegasusTokenizerFast"),WHr.forEach(t),aoo=r(Zx," (BigBirdPegasus model)"),Zx.forEach(t),noo=i(S),qn=n(S,"LI",{});var e$=s(qn);eae=n(e$,"STRONG",{});var QHr=s(eae);soo=r(QHr,"blenderbot"),QHr.forEach(t),loo=r(e$," \u2014 "),AR=n(e$,"A",{href:!0});var HHr=s(AR);ioo=r(HHr,"BlenderbotTokenizer"),HHr.forEach(t),doo=r(e$," or "),yR=n(e$,"A",{href:!0});var UHr=s(yR);coo=r(UHr,"BlenderbotTokenizerFast"),UHr.forEach(t),foo=r(e$," (Blenderbot model)"),e$.forEach(t),moo=i(S),Sg=n(S,"LI",{});var X3e=s(Sg);oae=n(X3e,"STRONG",{});var JHr=s(oae);goo=r(JHr,"blenderbot-small"),JHr.forEach(t),hoo=r(X3e," \u2014 "),LR=n(X3e,"A",{href:!0});var YHr=s(LR);poo=r(YHr,"BlenderbotSmallTokenizer"),YHr.forEach(t),_oo=r(X3e," (BlenderbotSmall model)"),X3e.forEach(t),uoo=i(S),Rg=n(S,"LI",{});var z3e=s(Rg);rae=n(z3e,"STRONG",{});var KHr=s(rae);boo=r(KHr,"byt5"),KHr.forEach(t),voo=r(z3e," \u2014 "),xR=n(z3e,"A",{href:!0});var ZHr=s(xR);Foo=r(ZHr,"ByT5Tokenizer"),ZHr.forEach(t),Too=r(z3e," (ByT5 model)"),z3e.forEach(t),Moo=i(S),jn=n(S,"LI",{});var o$=s(jn);tae=n(o$,"STRONG",{});var eUr=s(tae);Eoo=r(eUr,"camembert"),eUr.forEach(t),Coo=r(o$," \u2014 "),$R=n(o$,"A",{href:!0});var oUr=s($R);woo=r(oUr,"CamembertTokenizer"),oUr.forEach(t),Aoo=r(o$," or "),kR=n(o$,"A",{href:!0});var rUr=s(kR);yoo=r(rUr,"CamembertTokenizerFast"),rUr.forEach(t),Loo=r(o$," (CamemBERT model)"),o$.forEach(t),xoo=i(S),Pg=n(S,"LI",{});var W3e=s(Pg);aae=n(W3e,"STRONG",{});var tUr=s(aae);$oo=r(tUr,"canine"),tUr.forEach(t),koo=r(W3e," \u2014 "),SR=n(W3e,"A",{href:!0});var aUr=s(SR);Soo=r(aUr,"CanineTokenizer"),aUr.forEach(t),Roo=r(W3e," (Canine model)"),W3e.forEach(t),Poo=i(S),Dn=n(S,"LI",{});var r$=s(Dn);nae=n(r$,"STRONG",{});var nUr=s(nae);Boo=r(nUr,"clip"),nUr.forEach(t),Ioo=r(r$," \u2014 "),RR=n(r$,"A",{href:!0});var sUr=s(RR);Noo=r(sUr,"CLIPTokenizer"),sUr.forEach(t),qoo=r(r$," or "),PR=n(r$,"A",{href:!0});var lUr=s(PR);joo=r(lUr,"CLIPTokenizerFast"),lUr.forEach(t),Doo=r(r$," (CLIP model)"),r$.forEach(t),Goo=i(S),Gn=n(S,"LI",{});var t$=s(Gn);sae=n(t$,"STRONG",{});var iUr=s(sae);Ooo=r(iUr,"convbert"),iUr.forEach(t),Voo=r(t$," \u2014 "),BR=n(t$,"A",{href:!0});var dUr=s(BR);Xoo=r(dUr,"ConvBertTokenizer"),dUr.forEach(t),zoo=r(t$," or "),IR=n(t$,"A",{href:!0});var cUr=s(IR);Woo=r(cUr,"ConvBertTokenizerFast"),cUr.forEach(t),Qoo=r(t$," (ConvBERT model)"),t$.forEach(t),Hoo=i(S),On=n(S,"LI",{});var a$=s(On);lae=n(a$,"STRONG",{});var fUr=s(lae);Uoo=r(fUr,"cpm"),fUr.forEach(t),Joo=r(a$," \u2014 "),NR=n(a$,"A",{href:!0});var mUr=s(NR);Yoo=r(mUr,"CpmTokenizer"),mUr.forEach(t),Koo=r(a$," or "),qR=n(a$,"A",{href:!0});var gUr=s(qR);Zoo=r(gUr,"CpmTokenizerFast"),gUr.forEach(t),ero=r(a$," (CPM model)"),a$.forEach(t),oro=i(S),Bg=n(S,"LI",{});var Q3e=s(Bg);iae=n(Q3e,"STRONG",{});var hUr=s(iae);rro=r(hUr,"ctrl"),hUr.forEach(t),tro=r(Q3e," \u2014 "),jR=n(Q3e,"A",{href:!0});var pUr=s(jR);aro=r(pUr,"CTRLTokenizer"),pUr.forEach(t),nro=r(Q3e," (CTRL model)"),Q3e.forEach(t),sro=i(S),Vn=n(S,"LI",{});var n$=s(Vn);dae=n(n$,"STRONG",{});var _Ur=s(dae);lro=r(_Ur,"data2vec-text"),_Ur.forEach(t),iro=r(n$," \u2014 "),DR=n(n$,"A",{href:!0});var uUr=s(DR);dro=r(uUr,"RobertaTokenizer"),uUr.forEach(t),cro=r(n$," or "),GR=n(n$,"A",{href:!0});var bUr=s(GR);fro=r(bUr,"RobertaTokenizerFast"),bUr.forEach(t),mro=r(n$," (Data2VecText model)"),n$.forEach(t),gro=i(S),Xn=n(S,"LI",{});var s$=s(Xn);cae=n(s$,"STRONG",{});var vUr=s(cae);hro=r(vUr,"deberta"),vUr.forEach(t),pro=r(s$," \u2014 "),OR=n(s$,"A",{href:!0});var FUr=s(OR);_ro=r(FUr,"DebertaTokenizer"),FUr.forEach(t),uro=r(s$," or "),VR=n(s$,"A",{href:!0});var TUr=s(VR);bro=r(TUr,"DebertaTokenizerFast"),TUr.forEach(t),vro=r(s$," (DeBERTa model)"),s$.forEach(t),Fro=i(S),zn=n(S,"LI",{});var l$=s(zn);fae=n(l$,"STRONG",{});var MUr=s(fae);Tro=r(MUr,"deberta-v2"),MUr.forEach(t),Mro=r(l$," \u2014 "),XR=n(l$,"A",{href:!0});var EUr=s(XR);Ero=r(EUr,"DebertaV2Tokenizer"),EUr.forEach(t),Cro=r(l$," or "),zR=n(l$,"A",{href:!0});var CUr=s(zR);wro=r(CUr,"DebertaV2TokenizerFast"),CUr.forEach(t),Aro=r(l$," (DeBERTa-v2 model)"),l$.forEach(t),yro=i(S),Wn=n(S,"LI",{});var i$=s(Wn);mae=n(i$,"STRONG",{});var wUr=s(mae);Lro=r(wUr,"distilbert"),wUr.forEach(t),xro=r(i$," \u2014 "),WR=n(i$,"A",{href:!0});var AUr=s(WR);$ro=r(AUr,"DistilBertTokenizer"),AUr.forEach(t),kro=r(i$," or "),QR=n(i$,"A",{href:!0});var yUr=s(QR);Sro=r(yUr,"DistilBertTokenizerFast"),yUr.forEach(t),Rro=r(i$," (DistilBERT model)"),i$.forEach(t),Pro=i(S),Qn=n(S,"LI",{});var d$=s(Qn);gae=n(d$,"STRONG",{});var LUr=s(gae);Bro=r(LUr,"dpr"),LUr.forEach(t),Iro=r(d$," \u2014 "),HR=n(d$,"A",{href:!0});var xUr=s(HR);Nro=r(xUr,"DPRQuestionEncoderTokenizer"),xUr.forEach(t),qro=r(d$," or "),UR=n(d$,"A",{href:!0});var $Ur=s(UR);jro=r($Ur,"DPRQuestionEncoderTokenizerFast"),$Ur.forEach(t),Dro=r(d$," (DPR model)"),d$.forEach(t),Gro=i(S),Hn=n(S,"LI",{});var c$=s(Hn);hae=n(c$,"STRONG",{});var kUr=s(hae);Oro=r(kUr,"electra"),kUr.forEach(t),Vro=r(c$," \u2014 "),JR=n(c$,"A",{href:!0});var SUr=s(JR);Xro=r(SUr,"ElectraTokenizer"),SUr.forEach(t),zro=r(c$," or "),YR=n(c$,"A",{href:!0});var RUr=s(YR);Wro=r(RUr,"ElectraTokenizerFast"),RUr.forEach(t),Qro=r(c$," (ELECTRA model)"),c$.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var H3e=s(Ig);pae=n(H3e,"STRONG",{});var PUr=s(pae);Uro=r(PUr,"flaubert"),PUr.forEach(t),Jro=r(H3e," \u2014 "),KR=n(H3e,"A",{href:!0});var BUr=s(KR);Yro=r(BUr,"FlaubertTokenizer"),BUr.forEach(t),Kro=r(H3e," (FlauBERT model)"),H3e.forEach(t),Zro=i(S),Un=n(S,"LI",{});var f$=s(Un);_ae=n(f$,"STRONG",{});var IUr=s(_ae);eto=r(IUr,"fnet"),IUr.forEach(t),oto=r(f$," \u2014 "),ZR=n(f$,"A",{href:!0});var NUr=s(ZR);rto=r(NUr,"FNetTokenizer"),NUr.forEach(t),tto=r(f$," or "),eP=n(f$,"A",{href:!0});var qUr=s(eP);ato=r(qUr,"FNetTokenizerFast"),qUr.forEach(t),nto=r(f$," (FNet model)"),f$.forEach(t),sto=i(S),Ng=n(S,"LI",{});var U3e=s(Ng);uae=n(U3e,"STRONG",{});var jUr=s(uae);lto=r(jUr,"fsmt"),jUr.forEach(t),ito=r(U3e," \u2014 "),oP=n(U3e,"A",{href:!0});var DUr=s(oP);dto=r(DUr,"FSMTTokenizer"),DUr.forEach(t),cto=r(U3e," (FairSeq Machine-Translation model)"),U3e.forEach(t),fto=i(S),Jn=n(S,"LI",{});var m$=s(Jn);bae=n(m$,"STRONG",{});var GUr=s(bae);mto=r(GUr,"funnel"),GUr.forEach(t),gto=r(m$," \u2014 "),rP=n(m$,"A",{href:!0});var OUr=s(rP);hto=r(OUr,"FunnelTokenizer"),OUr.forEach(t),pto=r(m$," or "),tP=n(m$,"A",{href:!0});var VUr=s(tP);_to=r(VUr,"FunnelTokenizerFast"),VUr.forEach(t),uto=r(m$," (Funnel Transformer model)"),m$.forEach(t),bto=i(S),Yn=n(S,"LI",{});var g$=s(Yn);vae=n(g$,"STRONG",{});var XUr=s(vae);vto=r(XUr,"gpt2"),XUr.forEach(t),Fto=r(g$," \u2014 "),aP=n(g$,"A",{href:!0});var zUr=s(aP);Tto=r(zUr,"GPT2Tokenizer"),zUr.forEach(t),Mto=r(g$," or "),nP=n(g$,"A",{href:!0});var WUr=s(nP);Eto=r(WUr,"GPT2TokenizerFast"),WUr.forEach(t),Cto=r(g$," (OpenAI GPT-2 model)"),g$.forEach(t),wto=i(S),Kn=n(S,"LI",{});var h$=s(Kn);Fae=n(h$,"STRONG",{});var QUr=s(Fae);Ato=r(QUr,"gpt_neo"),QUr.forEach(t),yto=r(h$," \u2014 "),sP=n(h$,"A",{href:!0});var HUr=s(sP);Lto=r(HUr,"GPT2Tokenizer"),HUr.forEach(t),xto=r(h$," or "),lP=n(h$,"A",{href:!0});var UUr=s(lP);$to=r(UUr,"GPT2TokenizerFast"),UUr.forEach(t),kto=r(h$," (GPT Neo model)"),h$.forEach(t),Sto=i(S),qg=n(S,"LI",{});var J3e=s(qg);Tae=n(J3e,"STRONG",{});var JUr=s(Tae);Rto=r(JUr,"gpt_neox"),JUr.forEach(t),Pto=r(J3e," \u2014 "),iP=n(J3e,"A",{href:!0});var YUr=s(iP);Bto=r(YUr,"GPTNeoXTokenizerFast"),YUr.forEach(t),Ito=r(J3e," (GPT NeoX model)"),J3e.forEach(t),Nto=i(S),Zn=n(S,"LI",{});var p$=s(Zn);Mae=n(p$,"STRONG",{});var KUr=s(Mae);qto=r(KUr,"gptj"),KUr.forEach(t),jto=r(p$," \u2014 "),dP=n(p$,"A",{href:!0});var ZUr=s(dP);Dto=r(ZUr,"GPT2Tokenizer"),ZUr.forEach(t),Gto=r(p$," or "),cP=n(p$,"A",{href:!0});var eJr=s(cP);Oto=r(eJr,"GPT2TokenizerFast"),eJr.forEach(t),Vto=r(p$," (GPT-J model)"),p$.forEach(t),Xto=i(S),es=n(S,"LI",{});var _$=s(es);Eae=n(_$,"STRONG",{});var oJr=s(Eae);zto=r(oJr,"herbert"),oJr.forEach(t),Wto=r(_$," \u2014 "),fP=n(_$,"A",{href:!0});var rJr=s(fP);Qto=r(rJr,"HerbertTokenizer"),rJr.forEach(t),Hto=r(_$," or "),mP=n(_$,"A",{href:!0});var tJr=s(mP);Uto=r(tJr,"HerbertTokenizerFast"),tJr.forEach(t),Jto=r(_$," (HerBERT model)"),_$.forEach(t),Yto=i(S),jg=n(S,"LI",{});var Y3e=s(jg);Cae=n(Y3e,"STRONG",{});var aJr=s(Cae);Kto=r(aJr,"hubert"),aJr.forEach(t),Zto=r(Y3e," \u2014 "),gP=n(Y3e,"A",{href:!0});var nJr=s(gP);eao=r(nJr,"Wav2Vec2CTCTokenizer"),nJr.forEach(t),oao=r(Y3e," (Hubert model)"),Y3e.forEach(t),rao=i(S),os=n(S,"LI",{});var u$=s(os);wae=n(u$,"STRONG",{});var sJr=s(wae);tao=r(sJr,"ibert"),sJr.forEach(t),aao=r(u$," \u2014 "),hP=n(u$,"A",{href:!0});var lJr=s(hP);nao=r(lJr,"RobertaTokenizer"),lJr.forEach(t),sao=r(u$," or "),pP=n(u$,"A",{href:!0});var iJr=s(pP);lao=r(iJr,"RobertaTokenizerFast"),iJr.forEach(t),iao=r(u$," (I-BERT model)"),u$.forEach(t),dao=i(S),rs=n(S,"LI",{});var b$=s(rs);Aae=n(b$,"STRONG",{});var dJr=s(Aae);cao=r(dJr,"layoutlm"),dJr.forEach(t),fao=r(b$," \u2014 "),_P=n(b$,"A",{href:!0});var cJr=s(_P);mao=r(cJr,"LayoutLMTokenizer"),cJr.forEach(t),gao=r(b$," or "),uP=n(b$,"A",{href:!0});var fJr=s(uP);hao=r(fJr,"LayoutLMTokenizerFast"),fJr.forEach(t),pao=r(b$," (LayoutLM model)"),b$.forEach(t),_ao=i(S),ts=n(S,"LI",{});var v$=s(ts);yae=n(v$,"STRONG",{});var mJr=s(yae);uao=r(mJr,"layoutlmv2"),mJr.forEach(t),bao=r(v$," \u2014 "),bP=n(v$,"A",{href:!0});var gJr=s(bP);vao=r(gJr,"LayoutLMv2Tokenizer"),gJr.forEach(t),Fao=r(v$," or "),vP=n(v$,"A",{href:!0});var hJr=s(vP);Tao=r(hJr,"LayoutLMv2TokenizerFast"),hJr.forEach(t),Mao=r(v$," (LayoutLMv2 model)"),v$.forEach(t),Eao=i(S),as=n(S,"LI",{});var F$=s(as);Lae=n(F$,"STRONG",{});var pJr=s(Lae);Cao=r(pJr,"layoutlmv3"),pJr.forEach(t),wao=r(F$," \u2014 "),FP=n(F$,"A",{href:!0});var _Jr=s(FP);Aao=r(_Jr,"LayoutLMv3Tokenizer"),_Jr.forEach(t),yao=r(F$," or "),TP=n(F$,"A",{href:!0});var uJr=s(TP);Lao=r(uJr,"LayoutLMv3TokenizerFast"),uJr.forEach(t),xao=r(F$," (LayoutLMv3 model)"),F$.forEach(t),$ao=i(S),ns=n(S,"LI",{});var T$=s(ns);xae=n(T$,"STRONG",{});var bJr=s(xae);kao=r(bJr,"layoutxlm"),bJr.forEach(t),Sao=r(T$," \u2014 "),MP=n(T$,"A",{href:!0});var vJr=s(MP);Rao=r(vJr,"LayoutXLMTokenizer"),vJr.forEach(t),Pao=r(T$," or "),EP=n(T$,"A",{href:!0});var FJr=s(EP);Bao=r(FJr,"LayoutXLMTokenizerFast"),FJr.forEach(t),Iao=r(T$," (LayoutXLM model)"),T$.forEach(t),Nao=i(S),ss=n(S,"LI",{});var M$=s(ss);$ae=n(M$,"STRONG",{});var TJr=s($ae);qao=r(TJr,"led"),TJr.forEach(t),jao=r(M$," \u2014 "),CP=n(M$,"A",{href:!0});var MJr=s(CP);Dao=r(MJr,"LEDTokenizer"),MJr.forEach(t),Gao=r(M$," or "),wP=n(M$,"A",{href:!0});var EJr=s(wP);Oao=r(EJr,"LEDTokenizerFast"),EJr.forEach(t),Vao=r(M$," (LED model)"),M$.forEach(t),Xao=i(S),ls=n(S,"LI",{});var E$=s(ls);kae=n(E$,"STRONG",{});var CJr=s(kae);zao=r(CJr,"longformer"),CJr.forEach(t),Wao=r(E$," \u2014 "),AP=n(E$,"A",{href:!0});var wJr=s(AP);Qao=r(wJr,"LongformerTokenizer"),wJr.forEach(t),Hao=r(E$," or "),yP=n(E$,"A",{href:!0});var AJr=s(yP);Uao=r(AJr,"LongformerTokenizerFast"),AJr.forEach(t),Jao=r(E$," (Longformer model)"),E$.forEach(t),Yao=i(S),is=n(S,"LI",{});var C$=s(is);Sae=n(C$,"STRONG",{});var yJr=s(Sae);Kao=r(yJr,"longt5"),yJr.forEach(t),Zao=r(C$," \u2014 "),LP=n(C$,"A",{href:!0});var LJr=s(LP);eno=r(LJr,"T5Tokenizer"),LJr.forEach(t),ono=r(C$," or "),xP=n(C$,"A",{href:!0});var xJr=s(xP);rno=r(xJr,"T5TokenizerFast"),xJr.forEach(t),tno=r(C$," (LongT5 model)"),C$.forEach(t),ano=i(S),Dg=n(S,"LI",{});var K3e=s(Dg);Rae=n(K3e,"STRONG",{});var $Jr=s(Rae);nno=r($Jr,"luke"),$Jr.forEach(t),sno=r(K3e," \u2014 "),$P=n(K3e,"A",{href:!0});var kJr=s($P);lno=r(kJr,"LukeTokenizer"),kJr.forEach(t),ino=r(K3e," (LUKE model)"),K3e.forEach(t),dno=i(S),ds=n(S,"LI",{});var w$=s(ds);Pae=n(w$,"STRONG",{});var SJr=s(Pae);cno=r(SJr,"lxmert"),SJr.forEach(t),fno=r(w$," \u2014 "),kP=n(w$,"A",{href:!0});var RJr=s(kP);mno=r(RJr,"LxmertTokenizer"),RJr.forEach(t),gno=r(w$," or "),SP=n(w$,"A",{href:!0});var PJr=s(SP);hno=r(PJr,"LxmertTokenizerFast"),PJr.forEach(t),pno=r(w$," (LXMERT model)"),w$.forEach(t),_no=i(S),Gg=n(S,"LI",{});var Z3e=s(Gg);Bae=n(Z3e,"STRONG",{});var BJr=s(Bae);uno=r(BJr,"m2m_100"),BJr.forEach(t),bno=r(Z3e," \u2014 "),RP=n(Z3e,"A",{href:!0});var IJr=s(RP);vno=r(IJr,"M2M100Tokenizer"),IJr.forEach(t),Fno=r(Z3e," (M2M100 model)"),Z3e.forEach(t),Tno=i(S),Og=n(S,"LI",{});var e0e=s(Og);Iae=n(e0e,"STRONG",{});var NJr=s(Iae);Mno=r(NJr,"marian"),NJr.forEach(t),Eno=r(e0e," \u2014 "),PP=n(e0e,"A",{href:!0});var qJr=s(PP);Cno=r(qJr,"MarianTokenizer"),qJr.forEach(t),wno=r(e0e," (Marian model)"),e0e.forEach(t),Ano=i(S),cs=n(S,"LI",{});var A$=s(cs);Nae=n(A$,"STRONG",{});var jJr=s(Nae);yno=r(jJr,"mbart"),jJr.forEach(t),Lno=r(A$," \u2014 "),BP=n(A$,"A",{href:!0});var DJr=s(BP);xno=r(DJr,"MBartTokenizer"),DJr.forEach(t),$no=r(A$," or "),IP=n(A$,"A",{href:!0});var GJr=s(IP);kno=r(GJr,"MBartTokenizerFast"),GJr.forEach(t),Sno=r(A$," (mBART model)"),A$.forEach(t),Rno=i(S),fs=n(S,"LI",{});var y$=s(fs);qae=n(y$,"STRONG",{});var OJr=s(qae);Pno=r(OJr,"mbart50"),OJr.forEach(t),Bno=r(y$," \u2014 "),NP=n(y$,"A",{href:!0});var VJr=s(NP);Ino=r(VJr,"MBart50Tokenizer"),VJr.forEach(t),Nno=r(y$," or "),qP=n(y$,"A",{href:!0});var XJr=s(qP);qno=r(XJr,"MBart50TokenizerFast"),XJr.forEach(t),jno=r(y$," (mBART-50 model)"),y$.forEach(t),Dno=i(S),ms=n(S,"LI",{});var L$=s(ms);jae=n(L$,"STRONG",{});var zJr=s(jae);Gno=r(zJr,"megatron-bert"),zJr.forEach(t),Ono=r(L$," \u2014 "),jP=n(L$,"A",{href:!0});var WJr=s(jP);Vno=r(WJr,"BertTokenizer"),WJr.forEach(t),Xno=r(L$," or "),DP=n(L$,"A",{href:!0});var QJr=s(DP);zno=r(QJr,"BertTokenizerFast"),QJr.forEach(t),Wno=r(L$," (MegatronBert model)"),L$.forEach(t),Qno=i(S),Vg=n(S,"LI",{});var o0e=s(Vg);Dae=n(o0e,"STRONG",{});var HJr=s(Dae);Hno=r(HJr,"mluke"),HJr.forEach(t),Uno=r(o0e," \u2014 "),GP=n(o0e,"A",{href:!0});var UJr=s(GP);Jno=r(UJr,"MLukeTokenizer"),UJr.forEach(t),Yno=r(o0e," (mLUKE model)"),o0e.forEach(t),Kno=i(S),gs=n(S,"LI",{});var x$=s(gs);Gae=n(x$,"STRONG",{});var JJr=s(Gae);Zno=r(JJr,"mobilebert"),JJr.forEach(t),eso=r(x$," \u2014 "),OP=n(x$,"A",{href:!0});var YJr=s(OP);oso=r(YJr,"MobileBertTokenizer"),YJr.forEach(t),rso=r(x$," or "),VP=n(x$,"A",{href:!0});var KJr=s(VP);tso=r(KJr,"MobileBertTokenizerFast"),KJr.forEach(t),aso=r(x$," (MobileBERT model)"),x$.forEach(t),nso=i(S),hs=n(S,"LI",{});var $$=s(hs);Oae=n($$,"STRONG",{});var ZJr=s(Oae);sso=r(ZJr,"mpnet"),ZJr.forEach(t),lso=r($$," \u2014 "),XP=n($$,"A",{href:!0});var eYr=s(XP);iso=r(eYr,"MPNetTokenizer"),eYr.forEach(t),dso=r($$," or "),zP=n($$,"A",{href:!0});var oYr=s(zP);cso=r(oYr,"MPNetTokenizerFast"),oYr.forEach(t),fso=r($$," (MPNet model)"),$$.forEach(t),mso=i(S),ps=n(S,"LI",{});var k$=s(ps);Vae=n(k$,"STRONG",{});var rYr=s(Vae);gso=r(rYr,"mt5"),rYr.forEach(t),hso=r(k$," \u2014 "),WP=n(k$,"A",{href:!0});var tYr=s(WP);pso=r(tYr,"MT5Tokenizer"),tYr.forEach(t),_so=r(k$," or "),QP=n(k$,"A",{href:!0});var aYr=s(QP);uso=r(aYr,"MT5TokenizerFast"),aYr.forEach(t),bso=r(k$," (mT5 model)"),k$.forEach(t),vso=i(S),_s=n(S,"LI",{});var S$=s(_s);Xae=n(S$,"STRONG",{});var nYr=s(Xae);Fso=r(nYr,"nystromformer"),nYr.forEach(t),Tso=r(S$," \u2014 "),HP=n(S$,"A",{href:!0});var sYr=s(HP);Mso=r(sYr,"AlbertTokenizer"),sYr.forEach(t),Eso=r(S$," or "),UP=n(S$,"A",{href:!0});var lYr=s(UP);Cso=r(lYr,"AlbertTokenizerFast"),lYr.forEach(t),wso=r(S$," (Nystromformer model)"),S$.forEach(t),Aso=i(S),us=n(S,"LI",{});var R$=s(us);zae=n(R$,"STRONG",{});var iYr=s(zae);yso=r(iYr,"openai-gpt"),iYr.forEach(t),Lso=r(R$," \u2014 "),JP=n(R$,"A",{href:!0});var dYr=s(JP);xso=r(dYr,"OpenAIGPTTokenizer"),dYr.forEach(t),$so=r(R$," or "),YP=n(R$,"A",{href:!0});var cYr=s(YP);kso=r(cYr,"OpenAIGPTTokenizerFast"),cYr.forEach(t),Sso=r(R$," (OpenAI GPT model)"),R$.forEach(t),Rso=i(S),Xg=n(S,"LI",{});var r0e=s(Xg);Wae=n(r0e,"STRONG",{});var fYr=s(Wae);Pso=r(fYr,"opt"),fYr.forEach(t),Bso=r(r0e," \u2014 "),KP=n(r0e,"A",{href:!0});var mYr=s(KP);Iso=r(mYr,"GPT2Tokenizer"),mYr.forEach(t),Nso=r(r0e," (OPT model)"),r0e.forEach(t),qso=i(S),bs=n(S,"LI",{});var P$=s(bs);Qae=n(P$,"STRONG",{});var gYr=s(Qae);jso=r(gYr,"pegasus"),gYr.forEach(t),Dso=r(P$," \u2014 "),ZP=n(P$,"A",{href:!0});var hYr=s(ZP);Gso=r(hYr,"PegasusTokenizer"),hYr.forEach(t),Oso=r(P$," or "),eB=n(P$,"A",{href:!0});var pYr=s(eB);Vso=r(pYr,"PegasusTokenizerFast"),pYr.forEach(t),Xso=r(P$," (Pegasus model)"),P$.forEach(t),zso=i(S),zg=n(S,"LI",{});var t0e=s(zg);Hae=n(t0e,"STRONG",{});var _Yr=s(Hae);Wso=r(_Yr,"perceiver"),_Yr.forEach(t),Qso=r(t0e," \u2014 "),oB=n(t0e,"A",{href:!0});var uYr=s(oB);Hso=r(uYr,"PerceiverTokenizer"),uYr.forEach(t),Uso=r(t0e," (Perceiver model)"),t0e.forEach(t),Jso=i(S),Wg=n(S,"LI",{});var a0e=s(Wg);Uae=n(a0e,"STRONG",{});var bYr=s(Uae);Yso=r(bYr,"phobert"),bYr.forEach(t),Kso=r(a0e," \u2014 "),rB=n(a0e,"A",{href:!0});var vYr=s(rB);Zso=r(vYr,"PhobertTokenizer"),vYr.forEach(t),elo=r(a0e," (PhoBERT model)"),a0e.forEach(t),olo=i(S),Qg=n(S,"LI",{});var n0e=s(Qg);Jae=n(n0e,"STRONG",{});var FYr=s(Jae);rlo=r(FYr,"plbart"),FYr.forEach(t),tlo=r(n0e," \u2014 "),tB=n(n0e,"A",{href:!0});var TYr=s(tB);alo=r(TYr,"PLBartTokenizer"),TYr.forEach(t),nlo=r(n0e," (PLBart model)"),n0e.forEach(t),slo=i(S),Hg=n(S,"LI",{});var s0e=s(Hg);Yae=n(s0e,"STRONG",{});var MYr=s(Yae);llo=r(MYr,"prophetnet"),MYr.forEach(t),ilo=r(s0e," \u2014 "),aB=n(s0e,"A",{href:!0});var EYr=s(aB);dlo=r(EYr,"ProphetNetTokenizer"),EYr.forEach(t),clo=r(s0e," (ProphetNet model)"),s0e.forEach(t),flo=i(S),vs=n(S,"LI",{});var B$=s(vs);Kae=n(B$,"STRONG",{});var CYr=s(Kae);mlo=r(CYr,"qdqbert"),CYr.forEach(t),glo=r(B$," \u2014 "),nB=n(B$,"A",{href:!0});var wYr=s(nB);hlo=r(wYr,"BertTokenizer"),wYr.forEach(t),plo=r(B$," or "),sB=n(B$,"A",{href:!0});var AYr=s(sB);_lo=r(AYr,"BertTokenizerFast"),AYr.forEach(t),ulo=r(B$," (QDQBert model)"),B$.forEach(t),blo=i(S),Ug=n(S,"LI",{});var l0e=s(Ug);Zae=n(l0e,"STRONG",{});var yYr=s(Zae);vlo=r(yYr,"rag"),yYr.forEach(t),Flo=r(l0e," \u2014 "),lB=n(l0e,"A",{href:!0});var LYr=s(lB);Tlo=r(LYr,"RagTokenizer"),LYr.forEach(t),Mlo=r(l0e," (RAG model)"),l0e.forEach(t),Elo=i(S),Fs=n(S,"LI",{});var I$=s(Fs);ene=n(I$,"STRONG",{});var xYr=s(ene);Clo=r(xYr,"realm"),xYr.forEach(t),wlo=r(I$," \u2014 "),iB=n(I$,"A",{href:!0});var $Yr=s(iB);Alo=r($Yr,"RealmTokenizer"),$Yr.forEach(t),ylo=r(I$," or "),dB=n(I$,"A",{href:!0});var kYr=s(dB);Llo=r(kYr,"RealmTokenizerFast"),kYr.forEach(t),xlo=r(I$," (Realm model)"),I$.forEach(t),$lo=i(S),Ts=n(S,"LI",{});var N$=s(Ts);one=n(N$,"STRONG",{});var SYr=s(one);klo=r(SYr,"reformer"),SYr.forEach(t),Slo=r(N$," \u2014 "),cB=n(N$,"A",{href:!0});var RYr=s(cB);Rlo=r(RYr,"ReformerTokenizer"),RYr.forEach(t),Plo=r(N$," or "),fB=n(N$,"A",{href:!0});var PYr=s(fB);Blo=r(PYr,"ReformerTokenizerFast"),PYr.forEach(t),Ilo=r(N$," (Reformer model)"),N$.forEach(t),Nlo=i(S),Ms=n(S,"LI",{});var q$=s(Ms);rne=n(q$,"STRONG",{});var BYr=s(rne);qlo=r(BYr,"rembert"),BYr.forEach(t),jlo=r(q$," \u2014 "),mB=n(q$,"A",{href:!0});var IYr=s(mB);Dlo=r(IYr,"RemBertTokenizer"),IYr.forEach(t),Glo=r(q$," or "),gB=n(q$,"A",{href:!0});var NYr=s(gB);Olo=r(NYr,"RemBertTokenizerFast"),NYr.forEach(t),Vlo=r(q$," (RemBERT model)"),q$.forEach(t),Xlo=i(S),Es=n(S,"LI",{});var j$=s(Es);tne=n(j$,"STRONG",{});var qYr=s(tne);zlo=r(qYr,"retribert"),qYr.forEach(t),Wlo=r(j$," \u2014 "),hB=n(j$,"A",{href:!0});var jYr=s(hB);Qlo=r(jYr,"RetriBertTokenizer"),jYr.forEach(t),Hlo=r(j$," or "),pB=n(j$,"A",{href:!0});var DYr=s(pB);Ulo=r(DYr,"RetriBertTokenizerFast"),DYr.forEach(t),Jlo=r(j$," (RetriBERT model)"),j$.forEach(t),Ylo=i(S),Cs=n(S,"LI",{});var D$=s(Cs);ane=n(D$,"STRONG",{});var GYr=s(ane);Klo=r(GYr,"roberta"),GYr.forEach(t),Zlo=r(D$," \u2014 "),_B=n(D$,"A",{href:!0});var OYr=s(_B);eio=r(OYr,"RobertaTokenizer"),OYr.forEach(t),oio=r(D$," or "),uB=n(D$,"A",{href:!0});var VYr=s(uB);rio=r(VYr,"RobertaTokenizerFast"),VYr.forEach(t),tio=r(D$," (RoBERTa model)"),D$.forEach(t),aio=i(S),ws=n(S,"LI",{});var G$=s(ws);nne=n(G$,"STRONG",{});var XYr=s(nne);nio=r(XYr,"roformer"),XYr.forEach(t),sio=r(G$," \u2014 "),bB=n(G$,"A",{href:!0});var zYr=s(bB);lio=r(zYr,"RoFormerTokenizer"),zYr.forEach(t),iio=r(G$," or "),vB=n(G$,"A",{href:!0});var WYr=s(vB);dio=r(WYr,"RoFormerTokenizerFast"),WYr.forEach(t),cio=r(G$," (RoFormer model)"),G$.forEach(t),fio=i(S),Jg=n(S,"LI",{});var i0e=s(Jg);sne=n(i0e,"STRONG",{});var QYr=s(sne);mio=r(QYr,"speech_to_text"),QYr.forEach(t),gio=r(i0e," \u2014 "),FB=n(i0e,"A",{href:!0});var HYr=s(FB);hio=r(HYr,"Speech2TextTokenizer"),HYr.forEach(t),pio=r(i0e," (Speech2Text model)"),i0e.forEach(t),_io=i(S),Yg=n(S,"LI",{});var d0e=s(Yg);lne=n(d0e,"STRONG",{});var UYr=s(lne);uio=r(UYr,"speech_to_text_2"),UYr.forEach(t),bio=r(d0e," \u2014 "),TB=n(d0e,"A",{href:!0});var JYr=s(TB);vio=r(JYr,"Speech2Text2Tokenizer"),JYr.forEach(t),Fio=r(d0e," (Speech2Text2 model)"),d0e.forEach(t),Tio=i(S),As=n(S,"LI",{});var O$=s(As);ine=n(O$,"STRONG",{});var YYr=s(ine);Mio=r(YYr,"splinter"),YYr.forEach(t),Eio=r(O$," \u2014 "),MB=n(O$,"A",{href:!0});var KYr=s(MB);Cio=r(KYr,"SplinterTokenizer"),KYr.forEach(t),wio=r(O$," or "),EB=n(O$,"A",{href:!0});var ZYr=s(EB);Aio=r(ZYr,"SplinterTokenizerFast"),ZYr.forEach(t),yio=r(O$," (Splinter model)"),O$.forEach(t),Lio=i(S),ys=n(S,"LI",{});var V$=s(ys);dne=n(V$,"STRONG",{});var eKr=s(dne);xio=r(eKr,"squeezebert"),eKr.forEach(t),$io=r(V$," \u2014 "),CB=n(V$,"A",{href:!0});var oKr=s(CB);kio=r(oKr,"SqueezeBertTokenizer"),oKr.forEach(t),Sio=r(V$," or "),wB=n(V$,"A",{href:!0});var rKr=s(wB);Rio=r(rKr,"SqueezeBertTokenizerFast"),rKr.forEach(t),Pio=r(V$," (SqueezeBERT model)"),V$.forEach(t),Bio=i(S),Ls=n(S,"LI",{});var X$=s(Ls);cne=n(X$,"STRONG",{});var tKr=s(cne);Iio=r(tKr,"t5"),tKr.forEach(t),Nio=r(X$," \u2014 "),AB=n(X$,"A",{href:!0});var aKr=s(AB);qio=r(aKr,"T5Tokenizer"),aKr.forEach(t),jio=r(X$," or "),yB=n(X$,"A",{href:!0});var nKr=s(yB);Dio=r(nKr,"T5TokenizerFast"),nKr.forEach(t),Gio=r(X$," (T5 model)"),X$.forEach(t),Oio=i(S),Kg=n(S,"LI",{});var c0e=s(Kg);fne=n(c0e,"STRONG",{});var sKr=s(fne);Vio=r(sKr,"tapas"),sKr.forEach(t),Xio=r(c0e," \u2014 "),LB=n(c0e,"A",{href:!0});var lKr=s(LB);zio=r(lKr,"TapasTokenizer"),lKr.forEach(t),Wio=r(c0e," (TAPAS model)"),c0e.forEach(t),Qio=i(S),Zg=n(S,"LI",{});var f0e=s(Zg);mne=n(f0e,"STRONG",{});var iKr=s(mne);Hio=r(iKr,"tapex"),iKr.forEach(t),Uio=r(f0e," \u2014 "),xB=n(f0e,"A",{href:!0});var dKr=s(xB);Jio=r(dKr,"TapexTokenizer"),dKr.forEach(t),Yio=r(f0e," (TAPEX model)"),f0e.forEach(t),Kio=i(S),eh=n(S,"LI",{});var m0e=s(eh);gne=n(m0e,"STRONG",{});var cKr=s(gne);Zio=r(cKr,"transfo-xl"),cKr.forEach(t),edo=r(m0e," \u2014 "),$B=n(m0e,"A",{href:!0});var fKr=s($B);odo=r(fKr,"TransfoXLTokenizer"),fKr.forEach(t),rdo=r(m0e," (Transformer-XL model)"),m0e.forEach(t),tdo=i(S),xs=n(S,"LI",{});var z$=s(xs);hne=n(z$,"STRONG",{});var mKr=s(hne);ado=r(mKr,"visual_bert"),mKr.forEach(t),ndo=r(z$," \u2014 "),kB=n(z$,"A",{href:!0});var gKr=s(kB);sdo=r(gKr,"BertTokenizer"),gKr.forEach(t),ldo=r(z$," or "),SB=n(z$,"A",{href:!0});var hKr=s(SB);ido=r(hKr,"BertTokenizerFast"),hKr.forEach(t),ddo=r(z$," (VisualBert model)"),z$.forEach(t),cdo=i(S),oh=n(S,"LI",{});var g0e=s(oh);pne=n(g0e,"STRONG",{});var pKr=s(pne);fdo=r(pKr,"wav2vec2"),pKr.forEach(t),mdo=r(g0e," \u2014 "),RB=n(g0e,"A",{href:!0});var _Kr=s(RB);gdo=r(_Kr,"Wav2Vec2CTCTokenizer"),_Kr.forEach(t),hdo=r(g0e," (Wav2Vec2 model)"),g0e.forEach(t),pdo=i(S),rh=n(S,"LI",{});var h0e=s(rh);_ne=n(h0e,"STRONG",{});var uKr=s(_ne);_do=r(uKr,"wav2vec2-conformer"),uKr.forEach(t),udo=r(h0e," \u2014 "),PB=n(h0e,"A",{href:!0});var bKr=s(PB);bdo=r(bKr,"Wav2Vec2CTCTokenizer"),bKr.forEach(t),vdo=r(h0e," (Wav2Vec2-Conformer model)"),h0e.forEach(t),Fdo=i(S),th=n(S,"LI",{});var p0e=s(th);une=n(p0e,"STRONG",{});var vKr=s(une);Tdo=r(vKr,"wav2vec2_phoneme"),vKr.forEach(t),Mdo=r(p0e," \u2014 "),BB=n(p0e,"A",{href:!0});var FKr=s(BB);Edo=r(FKr,"Wav2Vec2PhonemeCTCTokenizer"),FKr.forEach(t),Cdo=r(p0e," (Wav2Vec2Phoneme model)"),p0e.forEach(t),wdo=i(S),$s=n(S,"LI",{});var W$=s($s);bne=n(W$,"STRONG",{});var TKr=s(bne);Ado=r(TKr,"xglm"),TKr.forEach(t),ydo=r(W$," \u2014 "),IB=n(W$,"A",{href:!0});var MKr=s(IB);Ldo=r(MKr,"XGLMTokenizer"),MKr.forEach(t),xdo=r(W$," or "),NB=n(W$,"A",{href:!0});var EKr=s(NB);$do=r(EKr,"XGLMTokenizerFast"),EKr.forEach(t),kdo=r(W$," (XGLM model)"),W$.forEach(t),Sdo=i(S),ah=n(S,"LI",{});var _0e=s(ah);vne=n(_0e,"STRONG",{});var CKr=s(vne);Rdo=r(CKr,"xlm"),CKr.forEach(t),Pdo=r(_0e," \u2014 "),qB=n(_0e,"A",{href:!0});var wKr=s(qB);Bdo=r(wKr,"XLMTokenizer"),wKr.forEach(t),Ido=r(_0e," (XLM model)"),_0e.forEach(t),Ndo=i(S),nh=n(S,"LI",{});var u0e=s(nh);Fne=n(u0e,"STRONG",{});var AKr=s(Fne);qdo=r(AKr,"xlm-prophetnet"),AKr.forEach(t),jdo=r(u0e," \u2014 "),jB=n(u0e,"A",{href:!0});var yKr=s(jB);Ddo=r(yKr,"XLMProphetNetTokenizer"),yKr.forEach(t),Gdo=r(u0e," (XLMProphetNet model)"),u0e.forEach(t),Odo=i(S),ks=n(S,"LI",{});var Q$=s(ks);Tne=n(Q$,"STRONG",{});var LKr=s(Tne);Vdo=r(LKr,"xlm-roberta"),LKr.forEach(t),Xdo=r(Q$," \u2014 "),DB=n(Q$,"A",{href:!0});var xKr=s(DB);zdo=r(xKr,"XLMRobertaTokenizer"),xKr.forEach(t),Wdo=r(Q$," or "),GB=n(Q$,"A",{href:!0});var $Kr=s(GB);Qdo=r($Kr,"XLMRobertaTokenizerFast"),$Kr.forEach(t),Hdo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),Udo=i(S),Ss=n(S,"LI",{});var H$=s(Ss);Mne=n(H$,"STRONG",{});var kKr=s(Mne);Jdo=r(kKr,"xlm-roberta-xl"),kKr.forEach(t),Ydo=r(H$," \u2014 "),OB=n(H$,"A",{href:!0});var SKr=s(OB);Kdo=r(SKr,"RobertaTokenizer"),SKr.forEach(t),Zdo=r(H$," or "),VB=n(H$,"A",{href:!0});var RKr=s(VB);eco=r(RKr,"RobertaTokenizerFast"),RKr.forEach(t),oco=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),rco=i(S),Rs=n(S,"LI",{});var U$=s(Rs);Ene=n(U$,"STRONG",{});var PKr=s(Ene);tco=r(PKr,"xlnet"),PKr.forEach(t),aco=r(U$," \u2014 "),XB=n(U$,"A",{href:!0});var BKr=s(XB);nco=r(BKr,"XLNetTokenizer"),BKr.forEach(t),sco=r(U$," or "),zB=n(U$,"A",{href:!0});var IKr=s(zB);lco=r(IKr,"XLNetTokenizerFast"),IKr.forEach(t),ico=r(U$," (XLNet model)"),U$.forEach(t),dco=i(S),Ps=n(S,"LI",{});var J$=s(Ps);Cne=n(J$,"STRONG",{});var NKr=s(Cne);cco=r(NKr,"yoso"),NKr.forEach(t),fco=r(J$," \u2014 "),WB=n(J$,"A",{href:!0});var qKr=s(WB);mco=r(qKr,"AlbertTokenizer"),qKr.forEach(t),gco=r(J$," or "),QB=n(J$,"A",{href:!0});var jKr=s(QB);hco=r(jKr,"AlbertTokenizerFast"),jKr.forEach(t),pco=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),_co=i(js),T(sh.$$.fragment,js),js.forEach(t),uco=i(qs),lh=n(qs,"DIV",{class:!0});var jDe=s(lh);T(Hw.$$.fragment,jDe),bco=i(jDe),wne=n(jDe,"P",{});var DKr=s(wne);vco=r(DKr,"Register a new tokenizer in this mapping."),DKr.forEach(t),jDe.forEach(t),qs.forEach(t),Dqe=i(f),Ei=n(f,"H2",{class:!0});var DDe=s(Ei);ih=n(DDe,"A",{id:!0,class:!0,href:!0});var GKr=s(ih);Ane=n(GKr,"SPAN",{});var OKr=s(Ane);T(Uw.$$.fragment,OKr),OKr.forEach(t),GKr.forEach(t),Fco=i(DDe),yne=n(DDe,"SPAN",{});var VKr=s(yne);Tco=r(VKr,"AutoFeatureExtractor"),VKr.forEach(t),DDe.forEach(t),Gqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(Jw.$$.fragment,Ds),Mco=i(Ds),Yw=n(Ds,"P",{});var GDe=s(Yw);Eco=r(GDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=n(GDe,"A",{href:!0});var XKr=s(HB);Cco=r(XKr,"AutoFeatureExtractor.from_pretrained()"),XKr.forEach(t),wco=r(GDe," class method."),GDe.forEach(t),Aco=i(Ds),Kw=n(Ds,"P",{});var ODe=s(Kw);yco=r(ODe,"This class cannot be instantiated directly using "),Lne=n(ODe,"CODE",{});var zKr=s(Lne);Lco=r(zKr,"__init__()"),zKr.forEach(t),xco=r(ODe," (throws an error)."),ODe.forEach(t),$co=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(Zw.$$.fragment,Zt),kco=i(Zt),xne=n(Zt,"P",{});var WKr=s(xne);Sco=r(WKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),WKr.forEach(t),Rco=i(Zt),ya=n(Zt,"P",{});var q3=s(ya);Pco=r(q3,"The feature extractor class to instantiate is selected based on the "),$ne=n(q3,"CODE",{});var QKr=s($ne);Bco=r(QKr,"model_type"),QKr.forEach(t),Ico=r(q3,` property of the config object
(either passed as an argument or loaded from `),kne=n(q3,"CODE",{});var HKr=s(kne);Nco=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),qco=r(q3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=n(q3,"CODE",{});var UKr=s(Sne);jco=r(UKr,"pretrained_model_name_or_path"),UKr.forEach(t),Dco=r(q3,":"),q3.forEach(t),Gco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var b0e=s(dh);Rne=n(b0e,"STRONG",{});var JKr=s(Rne);Oco=r(JKr,"beit"),JKr.forEach(t),Vco=r(b0e," \u2014 "),UB=n(b0e,"A",{href:!0});var YKr=s(UB);Xco=r(YKr,"BeitFeatureExtractor"),YKr.forEach(t),zco=r(b0e," (BEiT model)"),b0e.forEach(t),Wco=i(Z),ch=n(Z,"LI",{});var v0e=s(ch);Pne=n(v0e,"STRONG",{});var KKr=s(Pne);Qco=r(KKr,"clip"),KKr.forEach(t),Hco=r(v0e," \u2014 "),JB=n(v0e,"A",{href:!0});var ZKr=s(JB);Uco=r(ZKr,"CLIPFeatureExtractor"),ZKr.forEach(t),Jco=r(v0e," (CLIP model)"),v0e.forEach(t),Yco=i(Z),fh=n(Z,"LI",{});var F0e=s(fh);Bne=n(F0e,"STRONG",{});var eZr=s(Bne);Kco=r(eZr,"convnext"),eZr.forEach(t),Zco=r(F0e," \u2014 "),YB=n(F0e,"A",{href:!0});var oZr=s(YB);efo=r(oZr,"ConvNextFeatureExtractor"),oZr.forEach(t),ofo=r(F0e," (ConvNext model)"),F0e.forEach(t),rfo=i(Z),mh=n(Z,"LI",{});var T0e=s(mh);Ine=n(T0e,"STRONG",{});var rZr=s(Ine);tfo=r(rZr,"cvt"),rZr.forEach(t),afo=r(T0e," \u2014 "),KB=n(T0e,"A",{href:!0});var tZr=s(KB);nfo=r(tZr,"ConvNextFeatureExtractor"),tZr.forEach(t),sfo=r(T0e," (CvT model)"),T0e.forEach(t),lfo=i(Z),gh=n(Z,"LI",{});var M0e=s(gh);Nne=n(M0e,"STRONG",{});var aZr=s(Nne);ifo=r(aZr,"data2vec-audio"),aZr.forEach(t),dfo=r(M0e," \u2014 "),ZB=n(M0e,"A",{href:!0});var nZr=s(ZB);cfo=r(nZr,"Wav2Vec2FeatureExtractor"),nZr.forEach(t),ffo=r(M0e," (Data2VecAudio model)"),M0e.forEach(t),mfo=i(Z),hh=n(Z,"LI",{});var E0e=s(hh);qne=n(E0e,"STRONG",{});var sZr=s(qne);gfo=r(sZr,"data2vec-vision"),sZr.forEach(t),hfo=r(E0e," \u2014 "),eI=n(E0e,"A",{href:!0});var lZr=s(eI);pfo=r(lZr,"BeitFeatureExtractor"),lZr.forEach(t),_fo=r(E0e," (Data2VecVision model)"),E0e.forEach(t),ufo=i(Z),ph=n(Z,"LI",{});var C0e=s(ph);jne=n(C0e,"STRONG",{});var iZr=s(jne);bfo=r(iZr,"deit"),iZr.forEach(t),vfo=r(C0e," \u2014 "),oI=n(C0e,"A",{href:!0});var dZr=s(oI);Ffo=r(dZr,"DeiTFeatureExtractor"),dZr.forEach(t),Tfo=r(C0e," (DeiT model)"),C0e.forEach(t),Mfo=i(Z),_h=n(Z,"LI",{});var w0e=s(_h);Dne=n(w0e,"STRONG",{});var cZr=s(Dne);Efo=r(cZr,"detr"),cZr.forEach(t),Cfo=r(w0e," \u2014 "),rI=n(w0e,"A",{href:!0});var fZr=s(rI);wfo=r(fZr,"DetrFeatureExtractor"),fZr.forEach(t),Afo=r(w0e," (DETR model)"),w0e.forEach(t),yfo=i(Z),uh=n(Z,"LI",{});var A0e=s(uh);Gne=n(A0e,"STRONG",{});var mZr=s(Gne);Lfo=r(mZr,"dpt"),mZr.forEach(t),xfo=r(A0e," \u2014 "),tI=n(A0e,"A",{href:!0});var gZr=s(tI);$fo=r(gZr,"DPTFeatureExtractor"),gZr.forEach(t),kfo=r(A0e," (DPT model)"),A0e.forEach(t),Sfo=i(Z),bh=n(Z,"LI",{});var y0e=s(bh);One=n(y0e,"STRONG",{});var hZr=s(One);Rfo=r(hZr,"flava"),hZr.forEach(t),Pfo=r(y0e," \u2014 "),aI=n(y0e,"A",{href:!0});var pZr=s(aI);Bfo=r(pZr,"FlavaFeatureExtractor"),pZr.forEach(t),Ifo=r(y0e," (Flava model)"),y0e.forEach(t),Nfo=i(Z),vh=n(Z,"LI",{});var L0e=s(vh);Vne=n(L0e,"STRONG",{});var _Zr=s(Vne);qfo=r(_Zr,"glpn"),_Zr.forEach(t),jfo=r(L0e," \u2014 "),nI=n(L0e,"A",{href:!0});var uZr=s(nI);Dfo=r(uZr,"GLPNFeatureExtractor"),uZr.forEach(t),Gfo=r(L0e," (GLPN model)"),L0e.forEach(t),Ofo=i(Z),Fh=n(Z,"LI",{});var x0e=s(Fh);Xne=n(x0e,"STRONG",{});var bZr=s(Xne);Vfo=r(bZr,"hubert"),bZr.forEach(t),Xfo=r(x0e," \u2014 "),sI=n(x0e,"A",{href:!0});var vZr=s(sI);zfo=r(vZr,"Wav2Vec2FeatureExtractor"),vZr.forEach(t),Wfo=r(x0e," (Hubert model)"),x0e.forEach(t),Qfo=i(Z),Th=n(Z,"LI",{});var $0e=s(Th);zne=n($0e,"STRONG",{});var FZr=s(zne);Hfo=r(FZr,"imagegpt"),FZr.forEach(t),Ufo=r($0e," \u2014 "),lI=n($0e,"A",{href:!0});var TZr=s(lI);Jfo=r(TZr,"ImageGPTFeatureExtractor"),TZr.forEach(t),Yfo=r($0e," (ImageGPT model)"),$0e.forEach(t),Kfo=i(Z),Mh=n(Z,"LI",{});var k0e=s(Mh);Wne=n(k0e,"STRONG",{});var MZr=s(Wne);Zfo=r(MZr,"layoutlmv2"),MZr.forEach(t),emo=r(k0e," \u2014 "),iI=n(k0e,"A",{href:!0});var EZr=s(iI);omo=r(EZr,"LayoutLMv2FeatureExtractor"),EZr.forEach(t),rmo=r(k0e," (LayoutLMv2 model)"),k0e.forEach(t),tmo=i(Z),Eh=n(Z,"LI",{});var S0e=s(Eh);Qne=n(S0e,"STRONG",{});var CZr=s(Qne);amo=r(CZr,"layoutlmv3"),CZr.forEach(t),nmo=r(S0e," \u2014 "),dI=n(S0e,"A",{href:!0});var wZr=s(dI);smo=r(wZr,"LayoutLMv3FeatureExtractor"),wZr.forEach(t),lmo=r(S0e," (LayoutLMv3 model)"),S0e.forEach(t),imo=i(Z),Ch=n(Z,"LI",{});var R0e=s(Ch);Hne=n(R0e,"STRONG",{});var AZr=s(Hne);dmo=r(AZr,"maskformer"),AZr.forEach(t),cmo=r(R0e," \u2014 "),cI=n(R0e,"A",{href:!0});var yZr=s(cI);fmo=r(yZr,"MaskFormerFeatureExtractor"),yZr.forEach(t),mmo=r(R0e," (MaskFormer model)"),R0e.forEach(t),gmo=i(Z),wh=n(Z,"LI",{});var P0e=s(wh);Une=n(P0e,"STRONG",{});var LZr=s(Une);hmo=r(LZr,"perceiver"),LZr.forEach(t),pmo=r(P0e," \u2014 "),fI=n(P0e,"A",{href:!0});var xZr=s(fI);_mo=r(xZr,"PerceiverFeatureExtractor"),xZr.forEach(t),umo=r(P0e," (Perceiver model)"),P0e.forEach(t),bmo=i(Z),Ah=n(Z,"LI",{});var B0e=s(Ah);Jne=n(B0e,"STRONG",{});var $Zr=s(Jne);vmo=r($Zr,"poolformer"),$Zr.forEach(t),Fmo=r(B0e," \u2014 "),mI=n(B0e,"A",{href:!0});var kZr=s(mI);Tmo=r(kZr,"PoolFormerFeatureExtractor"),kZr.forEach(t),Mmo=r(B0e," (PoolFormer model)"),B0e.forEach(t),Emo=i(Z),yh=n(Z,"LI",{});var I0e=s(yh);Yne=n(I0e,"STRONG",{});var SZr=s(Yne);Cmo=r(SZr,"regnet"),SZr.forEach(t),wmo=r(I0e," \u2014 "),gI=n(I0e,"A",{href:!0});var RZr=s(gI);Amo=r(RZr,"ConvNextFeatureExtractor"),RZr.forEach(t),ymo=r(I0e," (RegNet model)"),I0e.forEach(t),Lmo=i(Z),Lh=n(Z,"LI",{});var N0e=s(Lh);Kne=n(N0e,"STRONG",{});var PZr=s(Kne);xmo=r(PZr,"resnet"),PZr.forEach(t),$mo=r(N0e," \u2014 "),hI=n(N0e,"A",{href:!0});var BZr=s(hI);kmo=r(BZr,"ConvNextFeatureExtractor"),BZr.forEach(t),Smo=r(N0e," (ResNet model)"),N0e.forEach(t),Rmo=i(Z),xh=n(Z,"LI",{});var q0e=s(xh);Zne=n(q0e,"STRONG",{});var IZr=s(Zne);Pmo=r(IZr,"segformer"),IZr.forEach(t),Bmo=r(q0e," \u2014 "),pI=n(q0e,"A",{href:!0});var NZr=s(pI);Imo=r(NZr,"SegformerFeatureExtractor"),NZr.forEach(t),Nmo=r(q0e," (SegFormer model)"),q0e.forEach(t),qmo=i(Z),$h=n(Z,"LI",{});var j0e=s($h);ese=n(j0e,"STRONG",{});var qZr=s(ese);jmo=r(qZr,"speech_to_text"),qZr.forEach(t),Dmo=r(j0e," \u2014 "),_I=n(j0e,"A",{href:!0});var jZr=s(_I);Gmo=r(jZr,"Speech2TextFeatureExtractor"),jZr.forEach(t),Omo=r(j0e," (Speech2Text model)"),j0e.forEach(t),Vmo=i(Z),kh=n(Z,"LI",{});var D0e=s(kh);ose=n(D0e,"STRONG",{});var DZr=s(ose);Xmo=r(DZr,"swin"),DZr.forEach(t),zmo=r(D0e," \u2014 "),uI=n(D0e,"A",{href:!0});var GZr=s(uI);Wmo=r(GZr,"ViTFeatureExtractor"),GZr.forEach(t),Qmo=r(D0e," (Swin model)"),D0e.forEach(t),Hmo=i(Z),Sh=n(Z,"LI",{});var G0e=s(Sh);rse=n(G0e,"STRONG",{});var OZr=s(rse);Umo=r(OZr,"van"),OZr.forEach(t),Jmo=r(G0e," \u2014 "),bI=n(G0e,"A",{href:!0});var VZr=s(bI);Ymo=r(VZr,"ConvNextFeatureExtractor"),VZr.forEach(t),Kmo=r(G0e," (VAN model)"),G0e.forEach(t),Zmo=i(Z),Rh=n(Z,"LI",{});var O0e=s(Rh);tse=n(O0e,"STRONG",{});var XZr=s(tse);ego=r(XZr,"vit"),XZr.forEach(t),ogo=r(O0e," \u2014 "),vI=n(O0e,"A",{href:!0});var zZr=s(vI);rgo=r(zZr,"ViTFeatureExtractor"),zZr.forEach(t),tgo=r(O0e," (ViT model)"),O0e.forEach(t),ago=i(Z),Ph=n(Z,"LI",{});var V0e=s(Ph);ase=n(V0e,"STRONG",{});var WZr=s(ase);ngo=r(WZr,"vit_mae"),WZr.forEach(t),sgo=r(V0e," \u2014 "),FI=n(V0e,"A",{href:!0});var QZr=s(FI);lgo=r(QZr,"ViTFeatureExtractor"),QZr.forEach(t),igo=r(V0e," (ViTMAE model)"),V0e.forEach(t),dgo=i(Z),Bh=n(Z,"LI",{});var X0e=s(Bh);nse=n(X0e,"STRONG",{});var HZr=s(nse);cgo=r(HZr,"wav2vec2"),HZr.forEach(t),fgo=r(X0e," \u2014 "),TI=n(X0e,"A",{href:!0});var UZr=s(TI);mgo=r(UZr,"Wav2Vec2FeatureExtractor"),UZr.forEach(t),ggo=r(X0e," (Wav2Vec2 model)"),X0e.forEach(t),hgo=i(Z),Ih=n(Z,"LI",{});var z0e=s(Ih);sse=n(z0e,"STRONG",{});var JZr=s(sse);pgo=r(JZr,"wav2vec2-conformer"),JZr.forEach(t),_go=r(z0e," \u2014 "),MI=n(z0e,"A",{href:!0});var YZr=s(MI);ugo=r(YZr,"Wav2Vec2FeatureExtractor"),YZr.forEach(t),bgo=r(z0e," (Wav2Vec2-Conformer model)"),z0e.forEach(t),vgo=i(Z),Nh=n(Z,"LI",{});var W0e=s(Nh);lse=n(W0e,"STRONG",{});var KZr=s(lse);Fgo=r(KZr,"yolos"),KZr.forEach(t),Tgo=r(W0e," \u2014 "),EI=n(W0e,"A",{href:!0});var ZZr=s(EI);Mgo=r(ZZr,"YolosFeatureExtractor"),ZZr.forEach(t),Ego=r(W0e," (YOLOS model)"),W0e.forEach(t),Z.forEach(t),Cgo=i(Zt),T(qh.$$.fragment,Zt),wgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),Ago=i(Ds),Dh=n(Ds,"DIV",{class:!0});var VDe=s(Dh);T(eA.$$.fragment,VDe),ygo=i(VDe),ise=n(VDe,"P",{});var eet=s(ise);Lgo=r(eet,"Register a new feature extractor for this class."),eet.forEach(t),VDe.forEach(t),Ds.forEach(t),Oqe=i(f),Ci=n(f,"H2",{class:!0});var XDe=s(Ci);Gh=n(XDe,"A",{id:!0,class:!0,href:!0});var oet=s(Gh);dse=n(oet,"SPAN",{});var ret=s(dse);T(oA.$$.fragment,ret),ret.forEach(t),oet.forEach(t),xgo=i(XDe),cse=n(XDe,"SPAN",{});var tet=s(cse);$go=r(tet,"AutoProcessor"),tet.forEach(t),XDe.forEach(t),Vqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(rA.$$.fragment,Gs),kgo=i(Gs),tA=n(Gs,"P",{});var zDe=s(tA);Sgo=r(zDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=n(zDe,"A",{href:!0});var aet=s(CI);Rgo=r(aet,"AutoProcessor.from_pretrained()"),aet.forEach(t),Pgo=r(zDe," class method."),zDe.forEach(t),Bgo=i(Gs),aA=n(Gs,"P",{});var WDe=s(aA);Igo=r(WDe,"This class cannot be instantiated directly using "),fse=n(WDe,"CODE",{});var net=s(fse);Ngo=r(net,"__init__()"),net.forEach(t),qgo=r(WDe," (throws an error)."),WDe.forEach(t),jgo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(nA.$$.fragment,ea),Dgo=i(ea),mse=n(ea,"P",{});var set=s(mse);Ggo=r(set,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),set.forEach(t),Ogo=i(ea),wi=n(ea,"P",{});var SZ=s(wi);Vgo=r(SZ,"The processor class to instantiate is selected based on the "),gse=n(SZ,"CODE",{});var iet=s(gse);Xgo=r(iet,"model_type"),iet.forEach(t),zgo=r(SZ,` property of the config object (either
passed as an argument or loaded from `),hse=n(SZ,"CODE",{});var det=s(hse);Wgo=r(det,"pretrained_model_name_or_path"),det.forEach(t),Qgo=r(SZ," if possible):"),SZ.forEach(t),Hgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var Q0e=s(Oh);pse=n(Q0e,"STRONG",{});var cet=s(pse);Ugo=r(cet,"clip"),cet.forEach(t),Jgo=r(Q0e," \u2014 "),wI=n(Q0e,"A",{href:!0});var fet=s(wI);Ygo=r(fet,"CLIPProcessor"),fet.forEach(t),Kgo=r(Q0e," (CLIP model)"),Q0e.forEach(t),Zgo=i(ue),Vh=n(ue,"LI",{});var H0e=s(Vh);_se=n(H0e,"STRONG",{});var met=s(_se);eho=r(met,"flava"),met.forEach(t),oho=r(H0e," \u2014 "),use=n(H0e,"CODE",{});var get=s(use);rho=r(get,"FLAVAProcessor"),get.forEach(t),tho=r(H0e," (Flava model)"),H0e.forEach(t),aho=i(ue),Xh=n(ue,"LI",{});var U0e=s(Xh);bse=n(U0e,"STRONG",{});var het=s(bse);nho=r(het,"layoutlmv2"),het.forEach(t),sho=r(U0e," \u2014 "),AI=n(U0e,"A",{href:!0});var pet=s(AI);lho=r(pet,"LayoutLMv2Processor"),pet.forEach(t),iho=r(U0e," (LayoutLMv2 model)"),U0e.forEach(t),dho=i(ue),zh=n(ue,"LI",{});var J0e=s(zh);vse=n(J0e,"STRONG",{});var _et=s(vse);cho=r(_et,"layoutlmv3"),_et.forEach(t),fho=r(J0e," \u2014 "),yI=n(J0e,"A",{href:!0});var uet=s(yI);mho=r(uet,"LayoutLMv3Processor"),uet.forEach(t),gho=r(J0e," (LayoutLMv3 model)"),J0e.forEach(t),hho=i(ue),Wh=n(ue,"LI",{});var Y0e=s(Wh);Fse=n(Y0e,"STRONG",{});var bet=s(Fse);pho=r(bet,"layoutxlm"),bet.forEach(t),_ho=r(Y0e," \u2014 "),LI=n(Y0e,"A",{href:!0});var vet=s(LI);uho=r(vet,"LayoutXLMProcessor"),vet.forEach(t),bho=r(Y0e," (LayoutXLM model)"),Y0e.forEach(t),vho=i(ue),Qh=n(ue,"LI",{});var K0e=s(Qh);Tse=n(K0e,"STRONG",{});var Fet=s(Tse);Fho=r(Fet,"sew"),Fet.forEach(t),Tho=r(K0e," \u2014 "),xI=n(K0e,"A",{href:!0});var Tet=s(xI);Mho=r(Tet,"Wav2Vec2Processor"),Tet.forEach(t),Eho=r(K0e," (SEW model)"),K0e.forEach(t),Cho=i(ue),Hh=n(ue,"LI",{});var Z0e=s(Hh);Mse=n(Z0e,"STRONG",{});var Met=s(Mse);who=r(Met,"sew-d"),Met.forEach(t),Aho=r(Z0e," \u2014 "),$I=n(Z0e,"A",{href:!0});var Eet=s($I);yho=r(Eet,"Wav2Vec2Processor"),Eet.forEach(t),Lho=r(Z0e," (SEW-D model)"),Z0e.forEach(t),xho=i(ue),Uh=n(ue,"LI",{});var ewe=s(Uh);Ese=n(ewe,"STRONG",{});var Cet=s(Ese);$ho=r(Cet,"speech_to_text"),Cet.forEach(t),kho=r(ewe," \u2014 "),kI=n(ewe,"A",{href:!0});var wet=s(kI);Sho=r(wet,"Speech2TextProcessor"),wet.forEach(t),Rho=r(ewe," (Speech2Text model)"),ewe.forEach(t),Pho=i(ue),Jh=n(ue,"LI",{});var owe=s(Jh);Cse=n(owe,"STRONG",{});var Aet=s(Cse);Bho=r(Aet,"speech_to_text_2"),Aet.forEach(t),Iho=r(owe," \u2014 "),SI=n(owe,"A",{href:!0});var yet=s(SI);Nho=r(yet,"Speech2Text2Processor"),yet.forEach(t),qho=r(owe," (Speech2Text2 model)"),owe.forEach(t),jho=i(ue),Yh=n(ue,"LI",{});var rwe=s(Yh);wse=n(rwe,"STRONG",{});var Let=s(wse);Dho=r(Let,"trocr"),Let.forEach(t),Gho=r(rwe," \u2014 "),RI=n(rwe,"A",{href:!0});var xet=s(RI);Oho=r(xet,"TrOCRProcessor"),xet.forEach(t),Vho=r(rwe," (TrOCR model)"),rwe.forEach(t),Xho=i(ue),Kh=n(ue,"LI",{});var twe=s(Kh);Ase=n(twe,"STRONG",{});var $et=s(Ase);zho=r($et,"unispeech"),$et.forEach(t),Who=r(twe," \u2014 "),PI=n(twe,"A",{href:!0});var ket=s(PI);Qho=r(ket,"Wav2Vec2Processor"),ket.forEach(t),Hho=r(twe," (UniSpeech model)"),twe.forEach(t),Uho=i(ue),Zh=n(ue,"LI",{});var awe=s(Zh);yse=n(awe,"STRONG",{});var Set=s(yse);Jho=r(Set,"unispeech-sat"),Set.forEach(t),Yho=r(awe," \u2014 "),BI=n(awe,"A",{href:!0});var Ret=s(BI);Kho=r(Ret,"Wav2Vec2Processor"),Ret.forEach(t),Zho=r(awe," (UniSpeechSat model)"),awe.forEach(t),epo=i(ue),ep=n(ue,"LI",{});var nwe=s(ep);Lse=n(nwe,"STRONG",{});var Pet=s(Lse);opo=r(Pet,"vilt"),Pet.forEach(t),rpo=r(nwe," \u2014 "),II=n(nwe,"A",{href:!0});var Bet=s(II);tpo=r(Bet,"ViltProcessor"),Bet.forEach(t),apo=r(nwe," (ViLT model)"),nwe.forEach(t),npo=i(ue),op=n(ue,"LI",{});var swe=s(op);xse=n(swe,"STRONG",{});var Iet=s(xse);spo=r(Iet,"vision-text-dual-encoder"),Iet.forEach(t),lpo=r(swe," \u2014 "),NI=n(swe,"A",{href:!0});var Net=s(NI);ipo=r(Net,"VisionTextDualEncoderProcessor"),Net.forEach(t),dpo=r(swe," (VisionTextDualEncoder model)"),swe.forEach(t),cpo=i(ue),rp=n(ue,"LI",{});var lwe=s(rp);$se=n(lwe,"STRONG",{});var qet=s($se);fpo=r(qet,"wav2vec2"),qet.forEach(t),mpo=r(lwe," \u2014 "),qI=n(lwe,"A",{href:!0});var jet=s(qI);gpo=r(jet,"Wav2Vec2Processor"),jet.forEach(t),hpo=r(lwe," (Wav2Vec2 model)"),lwe.forEach(t),ppo=i(ue),tp=n(ue,"LI",{});var iwe=s(tp);kse=n(iwe,"STRONG",{});var Det=s(kse);_po=r(Det,"wav2vec2-conformer"),Det.forEach(t),upo=r(iwe," \u2014 "),jI=n(iwe,"A",{href:!0});var Get=s(jI);bpo=r(Get,"Wav2Vec2Processor"),Get.forEach(t),vpo=r(iwe," (Wav2Vec2-Conformer model)"),iwe.forEach(t),Fpo=i(ue),ap=n(ue,"LI",{});var dwe=s(ap);Sse=n(dwe,"STRONG",{});var Oet=s(Sse);Tpo=r(Oet,"wavlm"),Oet.forEach(t),Mpo=r(dwe," \u2014 "),DI=n(dwe,"A",{href:!0});var Vet=s(DI);Epo=r(Vet,"Wav2Vec2Processor"),Vet.forEach(t),Cpo=r(dwe," (WavLM model)"),dwe.forEach(t),ue.forEach(t),wpo=i(ea),T(np.$$.fragment,ea),Apo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),ypo=i(Gs),lp=n(Gs,"DIV",{class:!0});var QDe=s(lp);T(sA.$$.fragment,QDe),Lpo=i(QDe),Rse=n(QDe,"P",{});var Xet=s(Rse);xpo=r(Xet,"Register a new processor for this class."),Xet.forEach(t),QDe.forEach(t),Gs.forEach(t),Xqe=i(f),Ai=n(f,"H2",{class:!0});var HDe=s(Ai);ip=n(HDe,"A",{id:!0,class:!0,href:!0});var zet=s(ip);Pse=n(zet,"SPAN",{});var Wet=s(Pse);T(lA.$$.fragment,Wet),Wet.forEach(t),zet.forEach(t),$po=i(HDe),Bse=n(HDe,"SPAN",{});var Qet=s(Bse);kpo=r(Qet,"AutoModel"),Qet.forEach(t),HDe.forEach(t),zqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(iA.$$.fragment,Os),Spo=i(Os),yi=n(Os,"P",{});var RZ=s(yi);Rpo=r(RZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(RZ,"A",{href:!0});var Het=s(GI);Ppo=r(Het,"from_pretrained()"),Het.forEach(t),Bpo=r(RZ," class method or the "),OI=n(RZ,"A",{href:!0});var Uet=s(OI);Ipo=r(Uet,"from_config()"),Uet.forEach(t),Npo=r(RZ,` class
method.`),RZ.forEach(t),qpo=i(Os),dA=n(Os,"P",{});var UDe=s(dA);jpo=r(UDe,"This class cannot be instantiated directly using "),Ise=n(UDe,"CODE",{});var Jet=s(Ise);Dpo=r(Jet,"__init__()"),Jet.forEach(t),Gpo=r(UDe," (throws an error)."),UDe.forEach(t),Opo=i(Os),tt=n(Os,"DIV",{class:!0});var j3=s(tt);T(cA.$$.fragment,j3),Vpo=i(j3),Nse=n(j3,"P",{});var Yet=s(Nse);Xpo=r(Yet,"Instantiates one of the base model classes of the library from a configuration."),Yet.forEach(t),zpo=i(j3),Li=n(j3,"P",{});var PZ=s(Li);Wpo=r(PZ,`Note:
Loading a model from its configuration file does `),qse=n(PZ,"STRONG",{});var Ket=s(qse);Qpo=r(Ket,"not"),Ket.forEach(t),Hpo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(PZ,"A",{href:!0});var Zet=s(VI);Upo=r(Zet,"from_pretrained()"),Zet.forEach(t),Jpo=r(PZ," to load the model weights."),PZ.forEach(t),Ypo=i(j3),T(dp.$$.fragment,j3),j3.forEach(t),Kpo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(fA.$$.fragment,oa),Zpo=i(oa),jse=n(oa,"P",{});var eot=s(jse);e_o=r(eot,"Instantiate one of the base model classes of the library from a pretrained model."),eot.forEach(t),o_o=i(oa),La=n(oa,"P",{});var D3=s(La);r_o=r(D3,"The model class to instantiate is selected based on the "),Dse=n(D3,"CODE",{});var oot=s(Dse);t_o=r(oot,"model_type"),oot.forEach(t),a_o=r(D3,` property of the config object (either
passed as an argument or loaded from `),Gse=n(D3,"CODE",{});var rot=s(Gse);n_o=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),s_o=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(D3,"CODE",{});var tot=s(Ose);l_o=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),i_o=r(D3,":"),D3.forEach(t),d_o=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var cwe=s(cp);Vse=n(cwe,"STRONG",{});var aot=s(Vse);c_o=r(aot,"albert"),aot.forEach(t),f_o=r(cwe," \u2014 "),XI=n(cwe,"A",{href:!0});var not=s(XI);m_o=r(not,"AlbertModel"),not.forEach(t),g_o=r(cwe," (ALBERT model)"),cwe.forEach(t),h_o=i($),fp=n($,"LI",{});var fwe=s(fp);Xse=n(fwe,"STRONG",{});var sot=s(Xse);p_o=r(sot,"bart"),sot.forEach(t),__o=r(fwe," \u2014 "),zI=n(fwe,"A",{href:!0});var lot=s(zI);u_o=r(lot,"BartModel"),lot.forEach(t),b_o=r(fwe," (BART model)"),fwe.forEach(t),v_o=i($),mp=n($,"LI",{});var mwe=s(mp);zse=n(mwe,"STRONG",{});var iot=s(zse);F_o=r(iot,"beit"),iot.forEach(t),T_o=r(mwe," \u2014 "),WI=n(mwe,"A",{href:!0});var dot=s(WI);M_o=r(dot,"BeitModel"),dot.forEach(t),E_o=r(mwe," (BEiT model)"),mwe.forEach(t),C_o=i($),gp=n($,"LI",{});var gwe=s(gp);Wse=n(gwe,"STRONG",{});var cot=s(Wse);w_o=r(cot,"bert"),cot.forEach(t),A_o=r(gwe," \u2014 "),QI=n(gwe,"A",{href:!0});var fot=s(QI);y_o=r(fot,"BertModel"),fot.forEach(t),L_o=r(gwe," (BERT model)"),gwe.forEach(t),x_o=i($),hp=n($,"LI",{});var hwe=s(hp);Qse=n(hwe,"STRONG",{});var mot=s(Qse);$_o=r(mot,"bert-generation"),mot.forEach(t),k_o=r(hwe," \u2014 "),HI=n(hwe,"A",{href:!0});var got=s(HI);S_o=r(got,"BertGenerationEncoder"),got.forEach(t),R_o=r(hwe," (Bert Generation model)"),hwe.forEach(t),P_o=i($),pp=n($,"LI",{});var pwe=s(pp);Hse=n(pwe,"STRONG",{});var hot=s(Hse);B_o=r(hot,"big_bird"),hot.forEach(t),I_o=r(pwe," \u2014 "),UI=n(pwe,"A",{href:!0});var pot=s(UI);N_o=r(pot,"BigBirdModel"),pot.forEach(t),q_o=r(pwe," (BigBird model)"),pwe.forEach(t),j_o=i($),_p=n($,"LI",{});var _we=s(_p);Use=n(_we,"STRONG",{});var _ot=s(Use);D_o=r(_ot,"bigbird_pegasus"),_ot.forEach(t),G_o=r(_we," \u2014 "),JI=n(_we,"A",{href:!0});var uot=s(JI);O_o=r(uot,"BigBirdPegasusModel"),uot.forEach(t),V_o=r(_we," (BigBirdPegasus model)"),_we.forEach(t),X_o=i($),up=n($,"LI",{});var uwe=s(up);Jse=n(uwe,"STRONG",{});var bot=s(Jse);z_o=r(bot,"blenderbot"),bot.forEach(t),W_o=r(uwe," \u2014 "),YI=n(uwe,"A",{href:!0});var vot=s(YI);Q_o=r(vot,"BlenderbotModel"),vot.forEach(t),H_o=r(uwe," (Blenderbot model)"),uwe.forEach(t),U_o=i($),bp=n($,"LI",{});var bwe=s(bp);Yse=n(bwe,"STRONG",{});var Fot=s(Yse);J_o=r(Fot,"blenderbot-small"),Fot.forEach(t),Y_o=r(bwe," \u2014 "),KI=n(bwe,"A",{href:!0});var Tot=s(KI);K_o=r(Tot,"BlenderbotSmallModel"),Tot.forEach(t),Z_o=r(bwe," (BlenderbotSmall model)"),bwe.forEach(t),euo=i($),vp=n($,"LI",{});var vwe=s(vp);Kse=n(vwe,"STRONG",{});var Mot=s(Kse);ouo=r(Mot,"camembert"),Mot.forEach(t),ruo=r(vwe," \u2014 "),ZI=n(vwe,"A",{href:!0});var Eot=s(ZI);tuo=r(Eot,"CamembertModel"),Eot.forEach(t),auo=r(vwe," (CamemBERT model)"),vwe.forEach(t),nuo=i($),Fp=n($,"LI",{});var Fwe=s(Fp);Zse=n(Fwe,"STRONG",{});var Cot=s(Zse);suo=r(Cot,"canine"),Cot.forEach(t),luo=r(Fwe," \u2014 "),eN=n(Fwe,"A",{href:!0});var wot=s(eN);iuo=r(wot,"CanineModel"),wot.forEach(t),duo=r(Fwe," (Canine model)"),Fwe.forEach(t),cuo=i($),Tp=n($,"LI",{});var Twe=s(Tp);ele=n(Twe,"STRONG",{});var Aot=s(ele);fuo=r(Aot,"clip"),Aot.forEach(t),muo=r(Twe," \u2014 "),oN=n(Twe,"A",{href:!0});var yot=s(oN);guo=r(yot,"CLIPModel"),yot.forEach(t),huo=r(Twe," (CLIP model)"),Twe.forEach(t),puo=i($),Mp=n($,"LI",{});var Mwe=s(Mp);ole=n(Mwe,"STRONG",{});var Lot=s(ole);_uo=r(Lot,"convbert"),Lot.forEach(t),uuo=r(Mwe," \u2014 "),rN=n(Mwe,"A",{href:!0});var xot=s(rN);buo=r(xot,"ConvBertModel"),xot.forEach(t),vuo=r(Mwe," (ConvBERT model)"),Mwe.forEach(t),Fuo=i($),Ep=n($,"LI",{});var Ewe=s(Ep);rle=n(Ewe,"STRONG",{});var $ot=s(rle);Tuo=r($ot,"convnext"),$ot.forEach(t),Muo=r(Ewe," \u2014 "),tN=n(Ewe,"A",{href:!0});var kot=s(tN);Euo=r(kot,"ConvNextModel"),kot.forEach(t),Cuo=r(Ewe," (ConvNext model)"),Ewe.forEach(t),wuo=i($),Cp=n($,"LI",{});var Cwe=s(Cp);tle=n(Cwe,"STRONG",{});var Sot=s(tle);Auo=r(Sot,"ctrl"),Sot.forEach(t),yuo=r(Cwe," \u2014 "),aN=n(Cwe,"A",{href:!0});var Rot=s(aN);Luo=r(Rot,"CTRLModel"),Rot.forEach(t),xuo=r(Cwe," (CTRL model)"),Cwe.forEach(t),$uo=i($),wp=n($,"LI",{});var wwe=s(wp);ale=n(wwe,"STRONG",{});var Pot=s(ale);kuo=r(Pot,"cvt"),Pot.forEach(t),Suo=r(wwe," \u2014 "),nN=n(wwe,"A",{href:!0});var Bot=s(nN);Ruo=r(Bot,"CvtModel"),Bot.forEach(t),Puo=r(wwe," (CvT model)"),wwe.forEach(t),Buo=i($),Ap=n($,"LI",{});var Awe=s(Ap);nle=n(Awe,"STRONG",{});var Iot=s(nle);Iuo=r(Iot,"data2vec-audio"),Iot.forEach(t),Nuo=r(Awe," \u2014 "),sN=n(Awe,"A",{href:!0});var Not=s(sN);quo=r(Not,"Data2VecAudioModel"),Not.forEach(t),juo=r(Awe," (Data2VecAudio model)"),Awe.forEach(t),Duo=i($),yp=n($,"LI",{});var ywe=s(yp);sle=n(ywe,"STRONG",{});var qot=s(sle);Guo=r(qot,"data2vec-text"),qot.forEach(t),Ouo=r(ywe," \u2014 "),lN=n(ywe,"A",{href:!0});var jot=s(lN);Vuo=r(jot,"Data2VecTextModel"),jot.forEach(t),Xuo=r(ywe," (Data2VecText model)"),ywe.forEach(t),zuo=i($),Lp=n($,"LI",{});var Lwe=s(Lp);lle=n(Lwe,"STRONG",{});var Dot=s(lle);Wuo=r(Dot,"data2vec-vision"),Dot.forEach(t),Quo=r(Lwe," \u2014 "),iN=n(Lwe,"A",{href:!0});var Got=s(iN);Huo=r(Got,"Data2VecVisionModel"),Got.forEach(t),Uuo=r(Lwe," (Data2VecVision model)"),Lwe.forEach(t),Juo=i($),xp=n($,"LI",{});var xwe=s(xp);ile=n(xwe,"STRONG",{});var Oot=s(ile);Yuo=r(Oot,"deberta"),Oot.forEach(t),Kuo=r(xwe," \u2014 "),dN=n(xwe,"A",{href:!0});var Vot=s(dN);Zuo=r(Vot,"DebertaModel"),Vot.forEach(t),e2o=r(xwe," (DeBERTa model)"),xwe.forEach(t),o2o=i($),$p=n($,"LI",{});var $we=s($p);dle=n($we,"STRONG",{});var Xot=s(dle);r2o=r(Xot,"deberta-v2"),Xot.forEach(t),t2o=r($we," \u2014 "),cN=n($we,"A",{href:!0});var zot=s(cN);a2o=r(zot,"DebertaV2Model"),zot.forEach(t),n2o=r($we," (DeBERTa-v2 model)"),$we.forEach(t),s2o=i($),kp=n($,"LI",{});var kwe=s(kp);cle=n(kwe,"STRONG",{});var Wot=s(cle);l2o=r(Wot,"decision_transformer"),Wot.forEach(t),i2o=r(kwe," \u2014 "),fN=n(kwe,"A",{href:!0});var Qot=s(fN);d2o=r(Qot,"DecisionTransformerModel"),Qot.forEach(t),c2o=r(kwe," (Decision Transformer model)"),kwe.forEach(t),f2o=i($),Sp=n($,"LI",{});var Swe=s(Sp);fle=n(Swe,"STRONG",{});var Hot=s(fle);m2o=r(Hot,"deit"),Hot.forEach(t),g2o=r(Swe," \u2014 "),mN=n(Swe,"A",{href:!0});var Uot=s(mN);h2o=r(Uot,"DeiTModel"),Uot.forEach(t),p2o=r(Swe," (DeiT model)"),Swe.forEach(t),_2o=i($),Rp=n($,"LI",{});var Rwe=s(Rp);mle=n(Rwe,"STRONG",{});var Jot=s(mle);u2o=r(Jot,"detr"),Jot.forEach(t),b2o=r(Rwe," \u2014 "),gN=n(Rwe,"A",{href:!0});var Yot=s(gN);v2o=r(Yot,"DetrModel"),Yot.forEach(t),F2o=r(Rwe," (DETR model)"),Rwe.forEach(t),T2o=i($),Pp=n($,"LI",{});var Pwe=s(Pp);gle=n(Pwe,"STRONG",{});var Kot=s(gle);M2o=r(Kot,"distilbert"),Kot.forEach(t),E2o=r(Pwe," \u2014 "),hN=n(Pwe,"A",{href:!0});var Zot=s(hN);C2o=r(Zot,"DistilBertModel"),Zot.forEach(t),w2o=r(Pwe," (DistilBERT model)"),Pwe.forEach(t),A2o=i($),Bp=n($,"LI",{});var Bwe=s(Bp);hle=n(Bwe,"STRONG",{});var ert=s(hle);y2o=r(ert,"dpr"),ert.forEach(t),L2o=r(Bwe," \u2014 "),pN=n(Bwe,"A",{href:!0});var ort=s(pN);x2o=r(ort,"DPRQuestionEncoder"),ort.forEach(t),$2o=r(Bwe," (DPR model)"),Bwe.forEach(t),k2o=i($),Ip=n($,"LI",{});var Iwe=s(Ip);ple=n(Iwe,"STRONG",{});var rrt=s(ple);S2o=r(rrt,"dpt"),rrt.forEach(t),R2o=r(Iwe," \u2014 "),_N=n(Iwe,"A",{href:!0});var trt=s(_N);P2o=r(trt,"DPTModel"),trt.forEach(t),B2o=r(Iwe," (DPT model)"),Iwe.forEach(t),I2o=i($),Np=n($,"LI",{});var Nwe=s(Np);_le=n(Nwe,"STRONG",{});var art=s(_le);N2o=r(art,"electra"),art.forEach(t),q2o=r(Nwe," \u2014 "),uN=n(Nwe,"A",{href:!0});var nrt=s(uN);j2o=r(nrt,"ElectraModel"),nrt.forEach(t),D2o=r(Nwe," (ELECTRA model)"),Nwe.forEach(t),G2o=i($),qp=n($,"LI",{});var qwe=s(qp);ule=n(qwe,"STRONG",{});var srt=s(ule);O2o=r(srt,"flaubert"),srt.forEach(t),V2o=r(qwe," \u2014 "),bN=n(qwe,"A",{href:!0});var lrt=s(bN);X2o=r(lrt,"FlaubertModel"),lrt.forEach(t),z2o=r(qwe," (FlauBERT model)"),qwe.forEach(t),W2o=i($),jp=n($,"LI",{});var jwe=s(jp);ble=n(jwe,"STRONG",{});var irt=s(ble);Q2o=r(irt,"flava"),irt.forEach(t),H2o=r(jwe," \u2014 "),vN=n(jwe,"A",{href:!0});var drt=s(vN);U2o=r(drt,"FlavaModel"),drt.forEach(t),J2o=r(jwe," (Flava model)"),jwe.forEach(t),Y2o=i($),Dp=n($,"LI",{});var Dwe=s(Dp);vle=n(Dwe,"STRONG",{});var crt=s(vle);K2o=r(crt,"fnet"),crt.forEach(t),Z2o=r(Dwe," \u2014 "),FN=n(Dwe,"A",{href:!0});var frt=s(FN);e1o=r(frt,"FNetModel"),frt.forEach(t),o1o=r(Dwe," (FNet model)"),Dwe.forEach(t),r1o=i($),Gp=n($,"LI",{});var Gwe=s(Gp);Fle=n(Gwe,"STRONG",{});var mrt=s(Fle);t1o=r(mrt,"fsmt"),mrt.forEach(t),a1o=r(Gwe," \u2014 "),TN=n(Gwe,"A",{href:!0});var grt=s(TN);n1o=r(grt,"FSMTModel"),grt.forEach(t),s1o=r(Gwe," (FairSeq Machine-Translation model)"),Gwe.forEach(t),l1o=i($),Bs=n($,"LI",{});var Y$=s(Bs);Tle=n(Y$,"STRONG",{});var hrt=s(Tle);i1o=r(hrt,"funnel"),hrt.forEach(t),d1o=r(Y$," \u2014 "),MN=n(Y$,"A",{href:!0});var prt=s(MN);c1o=r(prt,"FunnelModel"),prt.forEach(t),f1o=r(Y$," or "),EN=n(Y$,"A",{href:!0});var _rt=s(EN);m1o=r(_rt,"FunnelBaseModel"),_rt.forEach(t),g1o=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),h1o=i($),Op=n($,"LI",{});var Owe=s(Op);Mle=n(Owe,"STRONG",{});var urt=s(Mle);p1o=r(urt,"glpn"),urt.forEach(t),_1o=r(Owe," \u2014 "),CN=n(Owe,"A",{href:!0});var brt=s(CN);u1o=r(brt,"GLPNModel"),brt.forEach(t),b1o=r(Owe," (GLPN model)"),Owe.forEach(t),v1o=i($),Vp=n($,"LI",{});var Vwe=s(Vp);Ele=n(Vwe,"STRONG",{});var vrt=s(Ele);F1o=r(vrt,"gpt2"),vrt.forEach(t),T1o=r(Vwe," \u2014 "),wN=n(Vwe,"A",{href:!0});var Frt=s(wN);M1o=r(Frt,"GPT2Model"),Frt.forEach(t),E1o=r(Vwe," (OpenAI GPT-2 model)"),Vwe.forEach(t),C1o=i($),Xp=n($,"LI",{});var Xwe=s(Xp);Cle=n(Xwe,"STRONG",{});var Trt=s(Cle);w1o=r(Trt,"gpt_neo"),Trt.forEach(t),A1o=r(Xwe," \u2014 "),AN=n(Xwe,"A",{href:!0});var Mrt=s(AN);y1o=r(Mrt,"GPTNeoModel"),Mrt.forEach(t),L1o=r(Xwe," (GPT Neo model)"),Xwe.forEach(t),x1o=i($),zp=n($,"LI",{});var zwe=s(zp);wle=n(zwe,"STRONG",{});var Ert=s(wle);$1o=r(Ert,"gpt_neox"),Ert.forEach(t),k1o=r(zwe," \u2014 "),yN=n(zwe,"A",{href:!0});var Crt=s(yN);S1o=r(Crt,"GPTNeoXModel"),Crt.forEach(t),R1o=r(zwe," (GPT NeoX model)"),zwe.forEach(t),P1o=i($),Wp=n($,"LI",{});var Wwe=s(Wp);Ale=n(Wwe,"STRONG",{});var wrt=s(Ale);B1o=r(wrt,"gptj"),wrt.forEach(t),I1o=r(Wwe," \u2014 "),LN=n(Wwe,"A",{href:!0});var Art=s(LN);N1o=r(Art,"GPTJModel"),Art.forEach(t),q1o=r(Wwe," (GPT-J model)"),Wwe.forEach(t),j1o=i($),Qp=n($,"LI",{});var Qwe=s(Qp);yle=n(Qwe,"STRONG",{});var yrt=s(yle);D1o=r(yrt,"hubert"),yrt.forEach(t),G1o=r(Qwe," \u2014 "),xN=n(Qwe,"A",{href:!0});var Lrt=s(xN);O1o=r(Lrt,"HubertModel"),Lrt.forEach(t),V1o=r(Qwe," (Hubert model)"),Qwe.forEach(t),X1o=i($),Hp=n($,"LI",{});var Hwe=s(Hp);Lle=n(Hwe,"STRONG",{});var xrt=s(Lle);z1o=r(xrt,"ibert"),xrt.forEach(t),W1o=r(Hwe," \u2014 "),$N=n(Hwe,"A",{href:!0});var $rt=s($N);Q1o=r($rt,"IBertModel"),$rt.forEach(t),H1o=r(Hwe," (I-BERT model)"),Hwe.forEach(t),U1o=i($),Up=n($,"LI",{});var Uwe=s(Up);xle=n(Uwe,"STRONG",{});var krt=s(xle);J1o=r(krt,"imagegpt"),krt.forEach(t),Y1o=r(Uwe," \u2014 "),kN=n(Uwe,"A",{href:!0});var Srt=s(kN);K1o=r(Srt,"ImageGPTModel"),Srt.forEach(t),Z1o=r(Uwe," (ImageGPT model)"),Uwe.forEach(t),ebo=i($),Jp=n($,"LI",{});var Jwe=s(Jp);$le=n(Jwe,"STRONG",{});var Rrt=s($le);obo=r(Rrt,"layoutlm"),Rrt.forEach(t),rbo=r(Jwe," \u2014 "),SN=n(Jwe,"A",{href:!0});var Prt=s(SN);tbo=r(Prt,"LayoutLMModel"),Prt.forEach(t),abo=r(Jwe," (LayoutLM model)"),Jwe.forEach(t),nbo=i($),Yp=n($,"LI",{});var Ywe=s(Yp);kle=n(Ywe,"STRONG",{});var Brt=s(kle);sbo=r(Brt,"layoutlmv2"),Brt.forEach(t),lbo=r(Ywe," \u2014 "),RN=n(Ywe,"A",{href:!0});var Irt=s(RN);ibo=r(Irt,"LayoutLMv2Model"),Irt.forEach(t),dbo=r(Ywe," (LayoutLMv2 model)"),Ywe.forEach(t),cbo=i($),Kp=n($,"LI",{});var Kwe=s(Kp);Sle=n(Kwe,"STRONG",{});var Nrt=s(Sle);fbo=r(Nrt,"layoutlmv3"),Nrt.forEach(t),mbo=r(Kwe," \u2014 "),PN=n(Kwe,"A",{href:!0});var qrt=s(PN);gbo=r(qrt,"LayoutLMv3Model"),qrt.forEach(t),hbo=r(Kwe," (LayoutLMv3 model)"),Kwe.forEach(t),pbo=i($),Zp=n($,"LI",{});var Zwe=s(Zp);Rle=n(Zwe,"STRONG",{});var jrt=s(Rle);_bo=r(jrt,"led"),jrt.forEach(t),ubo=r(Zwe," \u2014 "),BN=n(Zwe,"A",{href:!0});var Drt=s(BN);bbo=r(Drt,"LEDModel"),Drt.forEach(t),vbo=r(Zwe," (LED model)"),Zwe.forEach(t),Fbo=i($),e_=n($,"LI",{});var eAe=s(e_);Ple=n(eAe,"STRONG",{});var Grt=s(Ple);Tbo=r(Grt,"longformer"),Grt.forEach(t),Mbo=r(eAe," \u2014 "),IN=n(eAe,"A",{href:!0});var Ort=s(IN);Ebo=r(Ort,"LongformerModel"),Ort.forEach(t),Cbo=r(eAe," (Longformer model)"),eAe.forEach(t),wbo=i($),o_=n($,"LI",{});var oAe=s(o_);Ble=n(oAe,"STRONG",{});var Vrt=s(Ble);Abo=r(Vrt,"longt5"),Vrt.forEach(t),ybo=r(oAe," \u2014 "),NN=n(oAe,"A",{href:!0});var Xrt=s(NN);Lbo=r(Xrt,"LongT5Model"),Xrt.forEach(t),xbo=r(oAe," (LongT5 model)"),oAe.forEach(t),$bo=i($),r_=n($,"LI",{});var rAe=s(r_);Ile=n(rAe,"STRONG",{});var zrt=s(Ile);kbo=r(zrt,"luke"),zrt.forEach(t),Sbo=r(rAe," \u2014 "),qN=n(rAe,"A",{href:!0});var Wrt=s(qN);Rbo=r(Wrt,"LukeModel"),Wrt.forEach(t),Pbo=r(rAe," (LUKE model)"),rAe.forEach(t),Bbo=i($),t_=n($,"LI",{});var tAe=s(t_);Nle=n(tAe,"STRONG",{});var Qrt=s(Nle);Ibo=r(Qrt,"lxmert"),Qrt.forEach(t),Nbo=r(tAe," \u2014 "),jN=n(tAe,"A",{href:!0});var Hrt=s(jN);qbo=r(Hrt,"LxmertModel"),Hrt.forEach(t),jbo=r(tAe," (LXMERT model)"),tAe.forEach(t),Dbo=i($),a_=n($,"LI",{});var aAe=s(a_);qle=n(aAe,"STRONG",{});var Urt=s(qle);Gbo=r(Urt,"m2m_100"),Urt.forEach(t),Obo=r(aAe," \u2014 "),DN=n(aAe,"A",{href:!0});var Jrt=s(DN);Vbo=r(Jrt,"M2M100Model"),Jrt.forEach(t),Xbo=r(aAe," (M2M100 model)"),aAe.forEach(t),zbo=i($),n_=n($,"LI",{});var nAe=s(n_);jle=n(nAe,"STRONG",{});var Yrt=s(jle);Wbo=r(Yrt,"marian"),Yrt.forEach(t),Qbo=r(nAe," \u2014 "),GN=n(nAe,"A",{href:!0});var Krt=s(GN);Hbo=r(Krt,"MarianModel"),Krt.forEach(t),Ubo=r(nAe," (Marian model)"),nAe.forEach(t),Jbo=i($),s_=n($,"LI",{});var sAe=s(s_);Dle=n(sAe,"STRONG",{});var Zrt=s(Dle);Ybo=r(Zrt,"maskformer"),Zrt.forEach(t),Kbo=r(sAe," \u2014 "),ON=n(sAe,"A",{href:!0});var ett=s(ON);Zbo=r(ett,"MaskFormerModel"),ett.forEach(t),evo=r(sAe," (MaskFormer model)"),sAe.forEach(t),ovo=i($),l_=n($,"LI",{});var lAe=s(l_);Gle=n(lAe,"STRONG",{});var ott=s(Gle);rvo=r(ott,"mbart"),ott.forEach(t),tvo=r(lAe," \u2014 "),VN=n(lAe,"A",{href:!0});var rtt=s(VN);avo=r(rtt,"MBartModel"),rtt.forEach(t),nvo=r(lAe," (mBART model)"),lAe.forEach(t),svo=i($),i_=n($,"LI",{});var iAe=s(i_);Ole=n(iAe,"STRONG",{});var ttt=s(Ole);lvo=r(ttt,"megatron-bert"),ttt.forEach(t),ivo=r(iAe," \u2014 "),XN=n(iAe,"A",{href:!0});var att=s(XN);dvo=r(att,"MegatronBertModel"),att.forEach(t),cvo=r(iAe," (MegatronBert model)"),iAe.forEach(t),fvo=i($),d_=n($,"LI",{});var dAe=s(d_);Vle=n(dAe,"STRONG",{});var ntt=s(Vle);mvo=r(ntt,"mobilebert"),ntt.forEach(t),gvo=r(dAe," \u2014 "),zN=n(dAe,"A",{href:!0});var stt=s(zN);hvo=r(stt,"MobileBertModel"),stt.forEach(t),pvo=r(dAe," (MobileBERT model)"),dAe.forEach(t),_vo=i($),c_=n($,"LI",{});var cAe=s(c_);Xle=n(cAe,"STRONG",{});var ltt=s(Xle);uvo=r(ltt,"mpnet"),ltt.forEach(t),bvo=r(cAe," \u2014 "),WN=n(cAe,"A",{href:!0});var itt=s(WN);vvo=r(itt,"MPNetModel"),itt.forEach(t),Fvo=r(cAe," (MPNet model)"),cAe.forEach(t),Tvo=i($),f_=n($,"LI",{});var fAe=s(f_);zle=n(fAe,"STRONG",{});var dtt=s(zle);Mvo=r(dtt,"mt5"),dtt.forEach(t),Evo=r(fAe," \u2014 "),QN=n(fAe,"A",{href:!0});var ctt=s(QN);Cvo=r(ctt,"MT5Model"),ctt.forEach(t),wvo=r(fAe," (mT5 model)"),fAe.forEach(t),Avo=i($),m_=n($,"LI",{});var mAe=s(m_);Wle=n(mAe,"STRONG",{});var ftt=s(Wle);yvo=r(ftt,"nystromformer"),ftt.forEach(t),Lvo=r(mAe," \u2014 "),HN=n(mAe,"A",{href:!0});var mtt=s(HN);xvo=r(mtt,"NystromformerModel"),mtt.forEach(t),$vo=r(mAe," (Nystromformer model)"),mAe.forEach(t),kvo=i($),g_=n($,"LI",{});var gAe=s(g_);Qle=n(gAe,"STRONG",{});var gtt=s(Qle);Svo=r(gtt,"openai-gpt"),gtt.forEach(t),Rvo=r(gAe," \u2014 "),UN=n(gAe,"A",{href:!0});var htt=s(UN);Pvo=r(htt,"OpenAIGPTModel"),htt.forEach(t),Bvo=r(gAe," (OpenAI GPT model)"),gAe.forEach(t),Ivo=i($),h_=n($,"LI",{});var hAe=s(h_);Hle=n(hAe,"STRONG",{});var ptt=s(Hle);Nvo=r(ptt,"opt"),ptt.forEach(t),qvo=r(hAe," \u2014 "),JN=n(hAe,"A",{href:!0});var _tt=s(JN);jvo=r(_tt,"OPTModel"),_tt.forEach(t),Dvo=r(hAe," (OPT model)"),hAe.forEach(t),Gvo=i($),p_=n($,"LI",{});var pAe=s(p_);Ule=n(pAe,"STRONG",{});var utt=s(Ule);Ovo=r(utt,"pegasus"),utt.forEach(t),Vvo=r(pAe," \u2014 "),YN=n(pAe,"A",{href:!0});var btt=s(YN);Xvo=r(btt,"PegasusModel"),btt.forEach(t),zvo=r(pAe," (Pegasus model)"),pAe.forEach(t),Wvo=i($),__=n($,"LI",{});var _Ae=s(__);Jle=n(_Ae,"STRONG",{});var vtt=s(Jle);Qvo=r(vtt,"perceiver"),vtt.forEach(t),Hvo=r(_Ae," \u2014 "),KN=n(_Ae,"A",{href:!0});var Ftt=s(KN);Uvo=r(Ftt,"PerceiverModel"),Ftt.forEach(t),Jvo=r(_Ae," (Perceiver model)"),_Ae.forEach(t),Yvo=i($),u_=n($,"LI",{});var uAe=s(u_);Yle=n(uAe,"STRONG",{});var Ttt=s(Yle);Kvo=r(Ttt,"plbart"),Ttt.forEach(t),Zvo=r(uAe," \u2014 "),ZN=n(uAe,"A",{href:!0});var Mtt=s(ZN);eFo=r(Mtt,"PLBartModel"),Mtt.forEach(t),oFo=r(uAe," (PLBart model)"),uAe.forEach(t),rFo=i($),b_=n($,"LI",{});var bAe=s(b_);Kle=n(bAe,"STRONG",{});var Ett=s(Kle);tFo=r(Ett,"poolformer"),Ett.forEach(t),aFo=r(bAe," \u2014 "),eq=n(bAe,"A",{href:!0});var Ctt=s(eq);nFo=r(Ctt,"PoolFormerModel"),Ctt.forEach(t),sFo=r(bAe," (PoolFormer model)"),bAe.forEach(t),lFo=i($),v_=n($,"LI",{});var vAe=s(v_);Zle=n(vAe,"STRONG",{});var wtt=s(Zle);iFo=r(wtt,"prophetnet"),wtt.forEach(t),dFo=r(vAe," \u2014 "),oq=n(vAe,"A",{href:!0});var Att=s(oq);cFo=r(Att,"ProphetNetModel"),Att.forEach(t),fFo=r(vAe," (ProphetNet model)"),vAe.forEach(t),mFo=i($),F_=n($,"LI",{});var FAe=s(F_);eie=n(FAe,"STRONG",{});var ytt=s(eie);gFo=r(ytt,"qdqbert"),ytt.forEach(t),hFo=r(FAe," \u2014 "),rq=n(FAe,"A",{href:!0});var Ltt=s(rq);pFo=r(Ltt,"QDQBertModel"),Ltt.forEach(t),_Fo=r(FAe," (QDQBert model)"),FAe.forEach(t),uFo=i($),T_=n($,"LI",{});var TAe=s(T_);oie=n(TAe,"STRONG",{});var xtt=s(oie);bFo=r(xtt,"reformer"),xtt.forEach(t),vFo=r(TAe," \u2014 "),tq=n(TAe,"A",{href:!0});var $tt=s(tq);FFo=r($tt,"ReformerModel"),$tt.forEach(t),TFo=r(TAe," (Reformer model)"),TAe.forEach(t),MFo=i($),M_=n($,"LI",{});var MAe=s(M_);rie=n(MAe,"STRONG",{});var ktt=s(rie);EFo=r(ktt,"regnet"),ktt.forEach(t),CFo=r(MAe," \u2014 "),aq=n(MAe,"A",{href:!0});var Stt=s(aq);wFo=r(Stt,"RegNetModel"),Stt.forEach(t),AFo=r(MAe," (RegNet model)"),MAe.forEach(t),yFo=i($),E_=n($,"LI",{});var EAe=s(E_);tie=n(EAe,"STRONG",{});var Rtt=s(tie);LFo=r(Rtt,"rembert"),Rtt.forEach(t),xFo=r(EAe," \u2014 "),nq=n(EAe,"A",{href:!0});var Ptt=s(nq);$Fo=r(Ptt,"RemBertModel"),Ptt.forEach(t),kFo=r(EAe," (RemBERT model)"),EAe.forEach(t),SFo=i($),C_=n($,"LI",{});var CAe=s(C_);aie=n(CAe,"STRONG",{});var Btt=s(aie);RFo=r(Btt,"resnet"),Btt.forEach(t),PFo=r(CAe," \u2014 "),sq=n(CAe,"A",{href:!0});var Itt=s(sq);BFo=r(Itt,"ResNetModel"),Itt.forEach(t),IFo=r(CAe," (ResNet model)"),CAe.forEach(t),NFo=i($),w_=n($,"LI",{});var wAe=s(w_);nie=n(wAe,"STRONG",{});var Ntt=s(nie);qFo=r(Ntt,"retribert"),Ntt.forEach(t),jFo=r(wAe," \u2014 "),lq=n(wAe,"A",{href:!0});var qtt=s(lq);DFo=r(qtt,"RetriBertModel"),qtt.forEach(t),GFo=r(wAe," (RetriBERT model)"),wAe.forEach(t),OFo=i($),A_=n($,"LI",{});var AAe=s(A_);sie=n(AAe,"STRONG",{});var jtt=s(sie);VFo=r(jtt,"roberta"),jtt.forEach(t),XFo=r(AAe," \u2014 "),iq=n(AAe,"A",{href:!0});var Dtt=s(iq);zFo=r(Dtt,"RobertaModel"),Dtt.forEach(t),WFo=r(AAe," (RoBERTa model)"),AAe.forEach(t),QFo=i($),y_=n($,"LI",{});var yAe=s(y_);lie=n(yAe,"STRONG",{});var Gtt=s(lie);HFo=r(Gtt,"roformer"),Gtt.forEach(t),UFo=r(yAe," \u2014 "),dq=n(yAe,"A",{href:!0});var Ott=s(dq);JFo=r(Ott,"RoFormerModel"),Ott.forEach(t),YFo=r(yAe," (RoFormer model)"),yAe.forEach(t),KFo=i($),L_=n($,"LI",{});var LAe=s(L_);iie=n(LAe,"STRONG",{});var Vtt=s(iie);ZFo=r(Vtt,"segformer"),Vtt.forEach(t),e6o=r(LAe," \u2014 "),cq=n(LAe,"A",{href:!0});var Xtt=s(cq);o6o=r(Xtt,"SegformerModel"),Xtt.forEach(t),r6o=r(LAe," (SegFormer model)"),LAe.forEach(t),t6o=i($),x_=n($,"LI",{});var xAe=s(x_);die=n(xAe,"STRONG",{});var ztt=s(die);a6o=r(ztt,"sew"),ztt.forEach(t),n6o=r(xAe," \u2014 "),fq=n(xAe,"A",{href:!0});var Wtt=s(fq);s6o=r(Wtt,"SEWModel"),Wtt.forEach(t),l6o=r(xAe," (SEW model)"),xAe.forEach(t),i6o=i($),$_=n($,"LI",{});var $Ae=s($_);cie=n($Ae,"STRONG",{});var Qtt=s(cie);d6o=r(Qtt,"sew-d"),Qtt.forEach(t),c6o=r($Ae," \u2014 "),mq=n($Ae,"A",{href:!0});var Htt=s(mq);f6o=r(Htt,"SEWDModel"),Htt.forEach(t),m6o=r($Ae," (SEW-D model)"),$Ae.forEach(t),g6o=i($),k_=n($,"LI",{});var kAe=s(k_);fie=n(kAe,"STRONG",{});var Utt=s(fie);h6o=r(Utt,"speech_to_text"),Utt.forEach(t),p6o=r(kAe," \u2014 "),gq=n(kAe,"A",{href:!0});var Jtt=s(gq);_6o=r(Jtt,"Speech2TextModel"),Jtt.forEach(t),u6o=r(kAe," (Speech2Text model)"),kAe.forEach(t),b6o=i($),S_=n($,"LI",{});var SAe=s(S_);mie=n(SAe,"STRONG",{});var Ytt=s(mie);v6o=r(Ytt,"splinter"),Ytt.forEach(t),F6o=r(SAe," \u2014 "),hq=n(SAe,"A",{href:!0});var Ktt=s(hq);T6o=r(Ktt,"SplinterModel"),Ktt.forEach(t),M6o=r(SAe," (Splinter model)"),SAe.forEach(t),E6o=i($),R_=n($,"LI",{});var RAe=s(R_);gie=n(RAe,"STRONG",{});var Ztt=s(gie);C6o=r(Ztt,"squeezebert"),Ztt.forEach(t),w6o=r(RAe," \u2014 "),pq=n(RAe,"A",{href:!0});var eat=s(pq);A6o=r(eat,"SqueezeBertModel"),eat.forEach(t),y6o=r(RAe," (SqueezeBERT model)"),RAe.forEach(t),L6o=i($),P_=n($,"LI",{});var PAe=s(P_);hie=n(PAe,"STRONG",{});var oat=s(hie);x6o=r(oat,"swin"),oat.forEach(t),$6o=r(PAe," \u2014 "),_q=n(PAe,"A",{href:!0});var rat=s(_q);k6o=r(rat,"SwinModel"),rat.forEach(t),S6o=r(PAe," (Swin model)"),PAe.forEach(t),R6o=i($),B_=n($,"LI",{});var BAe=s(B_);pie=n(BAe,"STRONG",{});var tat=s(pie);P6o=r(tat,"t5"),tat.forEach(t),B6o=r(BAe," \u2014 "),uq=n(BAe,"A",{href:!0});var aat=s(uq);I6o=r(aat,"T5Model"),aat.forEach(t),N6o=r(BAe," (T5 model)"),BAe.forEach(t),q6o=i($),I_=n($,"LI",{});var IAe=s(I_);_ie=n(IAe,"STRONG",{});var nat=s(_ie);j6o=r(nat,"tapas"),nat.forEach(t),D6o=r(IAe," \u2014 "),bq=n(IAe,"A",{href:!0});var sat=s(bq);G6o=r(sat,"TapasModel"),sat.forEach(t),O6o=r(IAe," (TAPAS model)"),IAe.forEach(t),V6o=i($),N_=n($,"LI",{});var NAe=s(N_);uie=n(NAe,"STRONG",{});var lat=s(uie);X6o=r(lat,"trajectory_transformer"),lat.forEach(t),z6o=r(NAe," \u2014 "),vq=n(NAe,"A",{href:!0});var iat=s(vq);W6o=r(iat,"TrajectoryTransformerModel"),iat.forEach(t),Q6o=r(NAe," (Trajectory Transformer model)"),NAe.forEach(t),H6o=i($),q_=n($,"LI",{});var qAe=s(q_);bie=n(qAe,"STRONG",{});var dat=s(bie);U6o=r(dat,"transfo-xl"),dat.forEach(t),J6o=r(qAe," \u2014 "),Fq=n(qAe,"A",{href:!0});var cat=s(Fq);Y6o=r(cat,"TransfoXLModel"),cat.forEach(t),K6o=r(qAe," (Transformer-XL model)"),qAe.forEach(t),Z6o=i($),j_=n($,"LI",{});var jAe=s(j_);vie=n(jAe,"STRONG",{});var fat=s(vie);eTo=r(fat,"unispeech"),fat.forEach(t),oTo=r(jAe," \u2014 "),Tq=n(jAe,"A",{href:!0});var mat=s(Tq);rTo=r(mat,"UniSpeechModel"),mat.forEach(t),tTo=r(jAe," (UniSpeech model)"),jAe.forEach(t),aTo=i($),D_=n($,"LI",{});var DAe=s(D_);Fie=n(DAe,"STRONG",{});var gat=s(Fie);nTo=r(gat,"unispeech-sat"),gat.forEach(t),sTo=r(DAe," \u2014 "),Mq=n(DAe,"A",{href:!0});var hat=s(Mq);lTo=r(hat,"UniSpeechSatModel"),hat.forEach(t),iTo=r(DAe," (UniSpeechSat model)"),DAe.forEach(t),dTo=i($),G_=n($,"LI",{});var GAe=s(G_);Tie=n(GAe,"STRONG",{});var pat=s(Tie);cTo=r(pat,"van"),pat.forEach(t),fTo=r(GAe," \u2014 "),Eq=n(GAe,"A",{href:!0});var _at=s(Eq);mTo=r(_at,"VanModel"),_at.forEach(t),gTo=r(GAe," (VAN model)"),GAe.forEach(t),hTo=i($),O_=n($,"LI",{});var OAe=s(O_);Mie=n(OAe,"STRONG",{});var uat=s(Mie);pTo=r(uat,"vilt"),uat.forEach(t),_To=r(OAe," \u2014 "),Cq=n(OAe,"A",{href:!0});var bat=s(Cq);uTo=r(bat,"ViltModel"),bat.forEach(t),bTo=r(OAe," (ViLT model)"),OAe.forEach(t),vTo=i($),V_=n($,"LI",{});var VAe=s(V_);Eie=n(VAe,"STRONG",{});var vat=s(Eie);FTo=r(vat,"vision-text-dual-encoder"),vat.forEach(t),TTo=r(VAe," \u2014 "),wq=n(VAe,"A",{href:!0});var Fat=s(wq);MTo=r(Fat,"VisionTextDualEncoderModel"),Fat.forEach(t),ETo=r(VAe," (VisionTextDualEncoder model)"),VAe.forEach(t),CTo=i($),X_=n($,"LI",{});var XAe=s(X_);Cie=n(XAe,"STRONG",{});var Tat=s(Cie);wTo=r(Tat,"visual_bert"),Tat.forEach(t),ATo=r(XAe," \u2014 "),Aq=n(XAe,"A",{href:!0});var Mat=s(Aq);yTo=r(Mat,"VisualBertModel"),Mat.forEach(t),LTo=r(XAe," (VisualBert model)"),XAe.forEach(t),xTo=i($),z_=n($,"LI",{});var zAe=s(z_);wie=n(zAe,"STRONG",{});var Eat=s(wie);$To=r(Eat,"vit"),Eat.forEach(t),kTo=r(zAe," \u2014 "),yq=n(zAe,"A",{href:!0});var Cat=s(yq);STo=r(Cat,"ViTModel"),Cat.forEach(t),RTo=r(zAe," (ViT model)"),zAe.forEach(t),PTo=i($),W_=n($,"LI",{});var WAe=s(W_);Aie=n(WAe,"STRONG",{});var wat=s(Aie);BTo=r(wat,"vit_mae"),wat.forEach(t),ITo=r(WAe," \u2014 "),Lq=n(WAe,"A",{href:!0});var Aat=s(Lq);NTo=r(Aat,"ViTMAEModel"),Aat.forEach(t),qTo=r(WAe," (ViTMAE model)"),WAe.forEach(t),jTo=i($),Q_=n($,"LI",{});var QAe=s(Q_);yie=n(QAe,"STRONG",{});var yat=s(yie);DTo=r(yat,"wav2vec2"),yat.forEach(t),GTo=r(QAe," \u2014 "),xq=n(QAe,"A",{href:!0});var Lat=s(xq);OTo=r(Lat,"Wav2Vec2Model"),Lat.forEach(t),VTo=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),XTo=i($),H_=n($,"LI",{});var HAe=s(H_);Lie=n(HAe,"STRONG",{});var xat=s(Lie);zTo=r(xat,"wav2vec2-conformer"),xat.forEach(t),WTo=r(HAe," \u2014 "),$q=n(HAe,"A",{href:!0});var $at=s($q);QTo=r($at,"Wav2Vec2ConformerModel"),$at.forEach(t),HTo=r(HAe," (Wav2Vec2-Conformer model)"),HAe.forEach(t),UTo=i($),U_=n($,"LI",{});var UAe=s(U_);xie=n(UAe,"STRONG",{});var kat=s(xie);JTo=r(kat,"wavlm"),kat.forEach(t),YTo=r(UAe," \u2014 "),kq=n(UAe,"A",{href:!0});var Sat=s(kq);KTo=r(Sat,"WavLMModel"),Sat.forEach(t),ZTo=r(UAe," (WavLM model)"),UAe.forEach(t),e7o=i($),J_=n($,"LI",{});var JAe=s(J_);$ie=n(JAe,"STRONG",{});var Rat=s($ie);o7o=r(Rat,"xglm"),Rat.forEach(t),r7o=r(JAe," \u2014 "),Sq=n(JAe,"A",{href:!0});var Pat=s(Sq);t7o=r(Pat,"XGLMModel"),Pat.forEach(t),a7o=r(JAe," (XGLM model)"),JAe.forEach(t),n7o=i($),Y_=n($,"LI",{});var YAe=s(Y_);kie=n(YAe,"STRONG",{});var Bat=s(kie);s7o=r(Bat,"xlm"),Bat.forEach(t),l7o=r(YAe," \u2014 "),Rq=n(YAe,"A",{href:!0});var Iat=s(Rq);i7o=r(Iat,"XLMModel"),Iat.forEach(t),d7o=r(YAe," (XLM model)"),YAe.forEach(t),c7o=i($),K_=n($,"LI",{});var KAe=s(K_);Sie=n(KAe,"STRONG",{});var Nat=s(Sie);f7o=r(Nat,"xlm-prophetnet"),Nat.forEach(t),m7o=r(KAe," \u2014 "),Pq=n(KAe,"A",{href:!0});var qat=s(Pq);g7o=r(qat,"XLMProphetNetModel"),qat.forEach(t),h7o=r(KAe," (XLMProphetNet model)"),KAe.forEach(t),p7o=i($),Z_=n($,"LI",{});var ZAe=s(Z_);Rie=n(ZAe,"STRONG",{});var jat=s(Rie);_7o=r(jat,"xlm-roberta"),jat.forEach(t),u7o=r(ZAe," \u2014 "),Bq=n(ZAe,"A",{href:!0});var Dat=s(Bq);b7o=r(Dat,"XLMRobertaModel"),Dat.forEach(t),v7o=r(ZAe," (XLM-RoBERTa model)"),ZAe.forEach(t),F7o=i($),eu=n($,"LI",{});var eye=s(eu);Pie=n(eye,"STRONG",{});var Gat=s(Pie);T7o=r(Gat,"xlm-roberta-xl"),Gat.forEach(t),M7o=r(eye," \u2014 "),Iq=n(eye,"A",{href:!0});var Oat=s(Iq);E7o=r(Oat,"XLMRobertaXLModel"),Oat.forEach(t),C7o=r(eye," (XLM-RoBERTa-XL model)"),eye.forEach(t),w7o=i($),ou=n($,"LI",{});var oye=s(ou);Bie=n(oye,"STRONG",{});var Vat=s(Bie);A7o=r(Vat,"xlnet"),Vat.forEach(t),y7o=r(oye," \u2014 "),Nq=n(oye,"A",{href:!0});var Xat=s(Nq);L7o=r(Xat,"XLNetModel"),Xat.forEach(t),x7o=r(oye," (XLNet model)"),oye.forEach(t),$7o=i($),ru=n($,"LI",{});var rye=s(ru);Iie=n(rye,"STRONG",{});var zat=s(Iie);k7o=r(zat,"yolos"),zat.forEach(t),S7o=r(rye," \u2014 "),qq=n(rye,"A",{href:!0});var Wat=s(qq);R7o=r(Wat,"YolosModel"),Wat.forEach(t),P7o=r(rye," (YOLOS model)"),rye.forEach(t),B7o=i($),tu=n($,"LI",{});var tye=s(tu);Nie=n(tye,"STRONG",{});var Qat=s(Nie);I7o=r(Qat,"yoso"),Qat.forEach(t),N7o=r(tye," \u2014 "),jq=n(tye,"A",{href:!0});var Hat=s(jq);q7o=r(Hat,"YosoModel"),Hat.forEach(t),j7o=r(tye," (YOSO model)"),tye.forEach(t),$.forEach(t),D7o=i(oa),au=n(oa,"P",{});var aye=s(au);G7o=r(aye,"The model is set in evaluation mode by default using "),qie=n(aye,"CODE",{});var Uat=s(qie);O7o=r(Uat,"model.eval()"),Uat.forEach(t),V7o=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(aye,"CODE",{});var Jat=s(jie);X7o=r(Jat,"model.train()"),Jat.forEach(t),aye.forEach(t),z7o=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Wqe=i(f),xi=n(f,"H2",{class:!0});var JDe=s(xi);su=n(JDe,"A",{id:!0,class:!0,href:!0});var Yat=s(su);Die=n(Yat,"SPAN",{});var Kat=s(Die);T(mA.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),W7o=i(JDe),Gie=n(JDe,"SPAN",{});var Zat=s(Gie);Q7o=r(Zat,"AutoModelForPreTraining"),Zat.forEach(t),JDe.forEach(t),Qqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(gA.$$.fragment,Vs),H7o=i(Vs),$i=n(Vs,"P",{});var BZ=s($i);U7o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(BZ,"A",{href:!0});var ent=s(Dq);J7o=r(ent,"from_pretrained()"),ent.forEach(t),Y7o=r(BZ," class method or the "),Gq=n(BZ,"A",{href:!0});var ont=s(Gq);K7o=r(ont,"from_config()"),ont.forEach(t),Z7o=r(BZ,` class
method.`),BZ.forEach(t),e9o=i(Vs),hA=n(Vs,"P",{});var YDe=s(hA);o9o=r(YDe,"This class cannot be instantiated directly using "),Oie=n(YDe,"CODE",{});var rnt=s(Oie);r9o=r(rnt,"__init__()"),rnt.forEach(t),t9o=r(YDe," (throws an error)."),YDe.forEach(t),a9o=i(Vs),at=n(Vs,"DIV",{class:!0});var G3=s(at);T(pA.$$.fragment,G3),n9o=i(G3),Vie=n(G3,"P",{});var tnt=s(Vie);s9o=r(tnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tnt.forEach(t),l9o=i(G3),ki=n(G3,"P",{});var IZ=s(ki);i9o=r(IZ,`Note:
Loading a model from its configuration file does `),Xie=n(IZ,"STRONG",{});var ant=s(Xie);d9o=r(ant,"not"),ant.forEach(t),c9o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(IZ,"A",{href:!0});var nnt=s(Oq);f9o=r(nnt,"from_pretrained()"),nnt.forEach(t),m9o=r(IZ," to load the model weights."),IZ.forEach(t),g9o=i(G3),T(lu.$$.fragment,G3),G3.forEach(t),h9o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(_A.$$.fragment,ra),p9o=i(ra),zie=n(ra,"P",{});var snt=s(zie);_9o=r(snt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),snt.forEach(t),u9o=i(ra),xa=n(ra,"P",{});var O3=s(xa);b9o=r(O3,"The model class to instantiate is selected based on the "),Wie=n(O3,"CODE",{});var lnt=s(Wie);v9o=r(lnt,"model_type"),lnt.forEach(t),F9o=r(O3,` property of the config object (either
passed as an argument or loaded from `),Qie=n(O3,"CODE",{});var int=s(Qie);T9o=r(int,"pretrained_model_name_or_path"),int.forEach(t),M9o=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(O3,"CODE",{});var dnt=s(Hie);E9o=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),C9o=r(O3,":"),O3.forEach(t),w9o=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var nye=s(iu);Uie=n(nye,"STRONG",{});var cnt=s(Uie);A9o=r(cnt,"albert"),cnt.forEach(t),y9o=r(nye," \u2014 "),Vq=n(nye,"A",{href:!0});var fnt=s(Vq);L9o=r(fnt,"AlbertForPreTraining"),fnt.forEach(t),x9o=r(nye," (ALBERT model)"),nye.forEach(t),$9o=i(O),du=n(O,"LI",{});var sye=s(du);Jie=n(sye,"STRONG",{});var mnt=s(Jie);k9o=r(mnt,"bart"),mnt.forEach(t),S9o=r(sye," \u2014 "),Xq=n(sye,"A",{href:!0});var gnt=s(Xq);R9o=r(gnt,"BartForConditionalGeneration"),gnt.forEach(t),P9o=r(sye," (BART model)"),sye.forEach(t),B9o=i(O),cu=n(O,"LI",{});var lye=s(cu);Yie=n(lye,"STRONG",{});var hnt=s(Yie);I9o=r(hnt,"bert"),hnt.forEach(t),N9o=r(lye," \u2014 "),zq=n(lye,"A",{href:!0});var pnt=s(zq);q9o=r(pnt,"BertForPreTraining"),pnt.forEach(t),j9o=r(lye," (BERT model)"),lye.forEach(t),D9o=i(O),fu=n(O,"LI",{});var iye=s(fu);Kie=n(iye,"STRONG",{});var _nt=s(Kie);G9o=r(_nt,"big_bird"),_nt.forEach(t),O9o=r(iye," \u2014 "),Wq=n(iye,"A",{href:!0});var unt=s(Wq);V9o=r(unt,"BigBirdForPreTraining"),unt.forEach(t),X9o=r(iye," (BigBird model)"),iye.forEach(t),z9o=i(O),mu=n(O,"LI",{});var dye=s(mu);Zie=n(dye,"STRONG",{});var bnt=s(Zie);W9o=r(bnt,"camembert"),bnt.forEach(t),Q9o=r(dye," \u2014 "),Qq=n(dye,"A",{href:!0});var vnt=s(Qq);H9o=r(vnt,"CamembertForMaskedLM"),vnt.forEach(t),U9o=r(dye," (CamemBERT model)"),dye.forEach(t),J9o=i(O),gu=n(O,"LI",{});var cye=s(gu);ede=n(cye,"STRONG",{});var Fnt=s(ede);Y9o=r(Fnt,"ctrl"),Fnt.forEach(t),K9o=r(cye," \u2014 "),Hq=n(cye,"A",{href:!0});var Tnt=s(Hq);Z9o=r(Tnt,"CTRLLMHeadModel"),Tnt.forEach(t),eMo=r(cye," (CTRL model)"),cye.forEach(t),oMo=i(O),hu=n(O,"LI",{});var fye=s(hu);ode=n(fye,"STRONG",{});var Mnt=s(ode);rMo=r(Mnt,"data2vec-text"),Mnt.forEach(t),tMo=r(fye," \u2014 "),Uq=n(fye,"A",{href:!0});var Ent=s(Uq);aMo=r(Ent,"Data2VecTextForMaskedLM"),Ent.forEach(t),nMo=r(fye," (Data2VecText model)"),fye.forEach(t),sMo=i(O),pu=n(O,"LI",{});var mye=s(pu);rde=n(mye,"STRONG",{});var Cnt=s(rde);lMo=r(Cnt,"deberta"),Cnt.forEach(t),iMo=r(mye," \u2014 "),Jq=n(mye,"A",{href:!0});var wnt=s(Jq);dMo=r(wnt,"DebertaForMaskedLM"),wnt.forEach(t),cMo=r(mye," (DeBERTa model)"),mye.forEach(t),fMo=i(O),_u=n(O,"LI",{});var gye=s(_u);tde=n(gye,"STRONG",{});var Ant=s(tde);mMo=r(Ant,"deberta-v2"),Ant.forEach(t),gMo=r(gye," \u2014 "),Yq=n(gye,"A",{href:!0});var ynt=s(Yq);hMo=r(ynt,"DebertaV2ForMaskedLM"),ynt.forEach(t),pMo=r(gye," (DeBERTa-v2 model)"),gye.forEach(t),_Mo=i(O),uu=n(O,"LI",{});var hye=s(uu);ade=n(hye,"STRONG",{});var Lnt=s(ade);uMo=r(Lnt,"distilbert"),Lnt.forEach(t),bMo=r(hye," \u2014 "),Kq=n(hye,"A",{href:!0});var xnt=s(Kq);vMo=r(xnt,"DistilBertForMaskedLM"),xnt.forEach(t),FMo=r(hye," (DistilBERT model)"),hye.forEach(t),TMo=i(O),bu=n(O,"LI",{});var pye=s(bu);nde=n(pye,"STRONG",{});var $nt=s(nde);MMo=r($nt,"electra"),$nt.forEach(t),EMo=r(pye," \u2014 "),Zq=n(pye,"A",{href:!0});var knt=s(Zq);CMo=r(knt,"ElectraForPreTraining"),knt.forEach(t),wMo=r(pye," (ELECTRA model)"),pye.forEach(t),AMo=i(O),vu=n(O,"LI",{});var _ye=s(vu);sde=n(_ye,"STRONG",{});var Snt=s(sde);yMo=r(Snt,"flaubert"),Snt.forEach(t),LMo=r(_ye," \u2014 "),ej=n(_ye,"A",{href:!0});var Rnt=s(ej);xMo=r(Rnt,"FlaubertWithLMHeadModel"),Rnt.forEach(t),$Mo=r(_ye," (FlauBERT model)"),_ye.forEach(t),kMo=i(O),Fu=n(O,"LI",{});var uye=s(Fu);lde=n(uye,"STRONG",{});var Pnt=s(lde);SMo=r(Pnt,"flava"),Pnt.forEach(t),RMo=r(uye," \u2014 "),oj=n(uye,"A",{href:!0});var Bnt=s(oj);PMo=r(Bnt,"FlavaForPreTraining"),Bnt.forEach(t),BMo=r(uye," (Flava model)"),uye.forEach(t),IMo=i(O),Tu=n(O,"LI",{});var bye=s(Tu);ide=n(bye,"STRONG",{});var Int=s(ide);NMo=r(Int,"fnet"),Int.forEach(t),qMo=r(bye," \u2014 "),rj=n(bye,"A",{href:!0});var Nnt=s(rj);jMo=r(Nnt,"FNetForPreTraining"),Nnt.forEach(t),DMo=r(bye," (FNet model)"),bye.forEach(t),GMo=i(O),Mu=n(O,"LI",{});var vye=s(Mu);dde=n(vye,"STRONG",{});var qnt=s(dde);OMo=r(qnt,"fsmt"),qnt.forEach(t),VMo=r(vye," \u2014 "),tj=n(vye,"A",{href:!0});var jnt=s(tj);XMo=r(jnt,"FSMTForConditionalGeneration"),jnt.forEach(t),zMo=r(vye," (FairSeq Machine-Translation model)"),vye.forEach(t),WMo=i(O),Eu=n(O,"LI",{});var Fye=s(Eu);cde=n(Fye,"STRONG",{});var Dnt=s(cde);QMo=r(Dnt,"funnel"),Dnt.forEach(t),HMo=r(Fye," \u2014 "),aj=n(Fye,"A",{href:!0});var Gnt=s(aj);UMo=r(Gnt,"FunnelForPreTraining"),Gnt.forEach(t),JMo=r(Fye," (Funnel Transformer model)"),Fye.forEach(t),YMo=i(O),Cu=n(O,"LI",{});var Tye=s(Cu);fde=n(Tye,"STRONG",{});var Ont=s(fde);KMo=r(Ont,"gpt2"),Ont.forEach(t),ZMo=r(Tye," \u2014 "),nj=n(Tye,"A",{href:!0});var Vnt=s(nj);e4o=r(Vnt,"GPT2LMHeadModel"),Vnt.forEach(t),o4o=r(Tye," (OpenAI GPT-2 model)"),Tye.forEach(t),r4o=i(O),wu=n(O,"LI",{});var Mye=s(wu);mde=n(Mye,"STRONG",{});var Xnt=s(mde);t4o=r(Xnt,"ibert"),Xnt.forEach(t),a4o=r(Mye," \u2014 "),sj=n(Mye,"A",{href:!0});var znt=s(sj);n4o=r(znt,"IBertForMaskedLM"),znt.forEach(t),s4o=r(Mye," (I-BERT model)"),Mye.forEach(t),l4o=i(O),Au=n(O,"LI",{});var Eye=s(Au);gde=n(Eye,"STRONG",{});var Wnt=s(gde);i4o=r(Wnt,"layoutlm"),Wnt.forEach(t),d4o=r(Eye," \u2014 "),lj=n(Eye,"A",{href:!0});var Qnt=s(lj);c4o=r(Qnt,"LayoutLMForMaskedLM"),Qnt.forEach(t),f4o=r(Eye," (LayoutLM model)"),Eye.forEach(t),m4o=i(O),yu=n(O,"LI",{});var Cye=s(yu);hde=n(Cye,"STRONG",{});var Hnt=s(hde);g4o=r(Hnt,"longformer"),Hnt.forEach(t),h4o=r(Cye," \u2014 "),ij=n(Cye,"A",{href:!0});var Unt=s(ij);p4o=r(Unt,"LongformerForMaskedLM"),Unt.forEach(t),_4o=r(Cye," (Longformer model)"),Cye.forEach(t),u4o=i(O),Lu=n(O,"LI",{});var wye=s(Lu);pde=n(wye,"STRONG",{});var Jnt=s(pde);b4o=r(Jnt,"longt5"),Jnt.forEach(t),v4o=r(wye," \u2014 "),dj=n(wye,"A",{href:!0});var Ynt=s(dj);F4o=r(Ynt,"LongT5ForConditionalGeneration"),Ynt.forEach(t),T4o=r(wye," (LongT5 model)"),wye.forEach(t),M4o=i(O),xu=n(O,"LI",{});var Aye=s(xu);_de=n(Aye,"STRONG",{});var Knt=s(_de);E4o=r(Knt,"lxmert"),Knt.forEach(t),C4o=r(Aye," \u2014 "),cj=n(Aye,"A",{href:!0});var Znt=s(cj);w4o=r(Znt,"LxmertForPreTraining"),Znt.forEach(t),A4o=r(Aye," (LXMERT model)"),Aye.forEach(t),y4o=i(O),$u=n(O,"LI",{});var yye=s($u);ude=n(yye,"STRONG",{});var est=s(ude);L4o=r(est,"megatron-bert"),est.forEach(t),x4o=r(yye," \u2014 "),fj=n(yye,"A",{href:!0});var ost=s(fj);$4o=r(ost,"MegatronBertForPreTraining"),ost.forEach(t),k4o=r(yye," (MegatronBert model)"),yye.forEach(t),S4o=i(O),ku=n(O,"LI",{});var Lye=s(ku);bde=n(Lye,"STRONG",{});var rst=s(bde);R4o=r(rst,"mobilebert"),rst.forEach(t),P4o=r(Lye," \u2014 "),mj=n(Lye,"A",{href:!0});var tst=s(mj);B4o=r(tst,"MobileBertForPreTraining"),tst.forEach(t),I4o=r(Lye," (MobileBERT model)"),Lye.forEach(t),N4o=i(O),Su=n(O,"LI",{});var xye=s(Su);vde=n(xye,"STRONG",{});var ast=s(vde);q4o=r(ast,"mpnet"),ast.forEach(t),j4o=r(xye," \u2014 "),gj=n(xye,"A",{href:!0});var nst=s(gj);D4o=r(nst,"MPNetForMaskedLM"),nst.forEach(t),G4o=r(xye," (MPNet model)"),xye.forEach(t),O4o=i(O),Ru=n(O,"LI",{});var $ye=s(Ru);Fde=n($ye,"STRONG",{});var sst=s(Fde);V4o=r(sst,"openai-gpt"),sst.forEach(t),X4o=r($ye," \u2014 "),hj=n($ye,"A",{href:!0});var lst=s(hj);z4o=r(lst,"OpenAIGPTLMHeadModel"),lst.forEach(t),W4o=r($ye," (OpenAI GPT model)"),$ye.forEach(t),Q4o=i(O),Pu=n(O,"LI",{});var kye=s(Pu);Tde=n(kye,"STRONG",{});var ist=s(Tde);H4o=r(ist,"retribert"),ist.forEach(t),U4o=r(kye," \u2014 "),pj=n(kye,"A",{href:!0});var dst=s(pj);J4o=r(dst,"RetriBertModel"),dst.forEach(t),Y4o=r(kye," (RetriBERT model)"),kye.forEach(t),K4o=i(O),Bu=n(O,"LI",{});var Sye=s(Bu);Mde=n(Sye,"STRONG",{});var cst=s(Mde);Z4o=r(cst,"roberta"),cst.forEach(t),eEo=r(Sye," \u2014 "),_j=n(Sye,"A",{href:!0});var fst=s(_j);oEo=r(fst,"RobertaForMaskedLM"),fst.forEach(t),rEo=r(Sye," (RoBERTa model)"),Sye.forEach(t),tEo=i(O),Iu=n(O,"LI",{});var Rye=s(Iu);Ede=n(Rye,"STRONG",{});var mst=s(Ede);aEo=r(mst,"splinter"),mst.forEach(t),nEo=r(Rye," \u2014 "),uj=n(Rye,"A",{href:!0});var gst=s(uj);sEo=r(gst,"SplinterForPreTraining"),gst.forEach(t),lEo=r(Rye," (Splinter model)"),Rye.forEach(t),iEo=i(O),Nu=n(O,"LI",{});var Pye=s(Nu);Cde=n(Pye,"STRONG",{});var hst=s(Cde);dEo=r(hst,"squeezebert"),hst.forEach(t),cEo=r(Pye," \u2014 "),bj=n(Pye,"A",{href:!0});var pst=s(bj);fEo=r(pst,"SqueezeBertForMaskedLM"),pst.forEach(t),mEo=r(Pye," (SqueezeBERT model)"),Pye.forEach(t),gEo=i(O),qu=n(O,"LI",{});var Bye=s(qu);wde=n(Bye,"STRONG",{});var _st=s(wde);hEo=r(_st,"t5"),_st.forEach(t),pEo=r(Bye," \u2014 "),vj=n(Bye,"A",{href:!0});var ust=s(vj);_Eo=r(ust,"T5ForConditionalGeneration"),ust.forEach(t),uEo=r(Bye," (T5 model)"),Bye.forEach(t),bEo=i(O),ju=n(O,"LI",{});var Iye=s(ju);Ade=n(Iye,"STRONG",{});var bst=s(Ade);vEo=r(bst,"tapas"),bst.forEach(t),FEo=r(Iye," \u2014 "),Fj=n(Iye,"A",{href:!0});var vst=s(Fj);TEo=r(vst,"TapasForMaskedLM"),vst.forEach(t),MEo=r(Iye," (TAPAS model)"),Iye.forEach(t),EEo=i(O),Du=n(O,"LI",{});var Nye=s(Du);yde=n(Nye,"STRONG",{});var Fst=s(yde);CEo=r(Fst,"transfo-xl"),Fst.forEach(t),wEo=r(Nye," \u2014 "),Tj=n(Nye,"A",{href:!0});var Tst=s(Tj);AEo=r(Tst,"TransfoXLLMHeadModel"),Tst.forEach(t),yEo=r(Nye," (Transformer-XL model)"),Nye.forEach(t),LEo=i(O),Gu=n(O,"LI",{});var qye=s(Gu);Lde=n(qye,"STRONG",{});var Mst=s(Lde);xEo=r(Mst,"unispeech"),Mst.forEach(t),$Eo=r(qye," \u2014 "),Mj=n(qye,"A",{href:!0});var Est=s(Mj);kEo=r(Est,"UniSpeechForPreTraining"),Est.forEach(t),SEo=r(qye," (UniSpeech model)"),qye.forEach(t),REo=i(O),Ou=n(O,"LI",{});var jye=s(Ou);xde=n(jye,"STRONG",{});var Cst=s(xde);PEo=r(Cst,"unispeech-sat"),Cst.forEach(t),BEo=r(jye," \u2014 "),Ej=n(jye,"A",{href:!0});var wst=s(Ej);IEo=r(wst,"UniSpeechSatForPreTraining"),wst.forEach(t),NEo=r(jye," (UniSpeechSat model)"),jye.forEach(t),qEo=i(O),Vu=n(O,"LI",{});var Dye=s(Vu);$de=n(Dye,"STRONG",{});var Ast=s($de);jEo=r(Ast,"visual_bert"),Ast.forEach(t),DEo=r(Dye," \u2014 "),Cj=n(Dye,"A",{href:!0});var yst=s(Cj);GEo=r(yst,"VisualBertForPreTraining"),yst.forEach(t),OEo=r(Dye," (VisualBert model)"),Dye.forEach(t),VEo=i(O),Xu=n(O,"LI",{});var Gye=s(Xu);kde=n(Gye,"STRONG",{});var Lst=s(kde);XEo=r(Lst,"vit_mae"),Lst.forEach(t),zEo=r(Gye," \u2014 "),wj=n(Gye,"A",{href:!0});var xst=s(wj);WEo=r(xst,"ViTMAEForPreTraining"),xst.forEach(t),QEo=r(Gye," (ViTMAE model)"),Gye.forEach(t),HEo=i(O),zu=n(O,"LI",{});var Oye=s(zu);Sde=n(Oye,"STRONG",{});var $st=s(Sde);UEo=r($st,"wav2vec2"),$st.forEach(t),JEo=r(Oye," \u2014 "),Aj=n(Oye,"A",{href:!0});var kst=s(Aj);YEo=r(kst,"Wav2Vec2ForPreTraining"),kst.forEach(t),KEo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),ZEo=i(O),Wu=n(O,"LI",{});var Vye=s(Wu);Rde=n(Vye,"STRONG",{});var Sst=s(Rde);e5o=r(Sst,"wav2vec2-conformer"),Sst.forEach(t),o5o=r(Vye," \u2014 "),yj=n(Vye,"A",{href:!0});var Rst=s(yj);r5o=r(Rst,"Wav2Vec2ConformerForPreTraining"),Rst.forEach(t),t5o=r(Vye," (Wav2Vec2-Conformer model)"),Vye.forEach(t),a5o=i(O),Qu=n(O,"LI",{});var Xye=s(Qu);Pde=n(Xye,"STRONG",{});var Pst=s(Pde);n5o=r(Pst,"xlm"),Pst.forEach(t),s5o=r(Xye," \u2014 "),Lj=n(Xye,"A",{href:!0});var Bst=s(Lj);l5o=r(Bst,"XLMWithLMHeadModel"),Bst.forEach(t),i5o=r(Xye," (XLM model)"),Xye.forEach(t),d5o=i(O),Hu=n(O,"LI",{});var zye=s(Hu);Bde=n(zye,"STRONG",{});var Ist=s(Bde);c5o=r(Ist,"xlm-roberta"),Ist.forEach(t),f5o=r(zye," \u2014 "),xj=n(zye,"A",{href:!0});var Nst=s(xj);m5o=r(Nst,"XLMRobertaForMaskedLM"),Nst.forEach(t),g5o=r(zye," (XLM-RoBERTa model)"),zye.forEach(t),h5o=i(O),Uu=n(O,"LI",{});var Wye=s(Uu);Ide=n(Wye,"STRONG",{});var qst=s(Ide);p5o=r(qst,"xlm-roberta-xl"),qst.forEach(t),_5o=r(Wye," \u2014 "),$j=n(Wye,"A",{href:!0});var jst=s($j);u5o=r(jst,"XLMRobertaXLForMaskedLM"),jst.forEach(t),b5o=r(Wye," (XLM-RoBERTa-XL model)"),Wye.forEach(t),v5o=i(O),Ju=n(O,"LI",{});var Qye=s(Ju);Nde=n(Qye,"STRONG",{});var Dst=s(Nde);F5o=r(Dst,"xlnet"),Dst.forEach(t),T5o=r(Qye," \u2014 "),kj=n(Qye,"A",{href:!0});var Gst=s(kj);M5o=r(Gst,"XLNetLMHeadModel"),Gst.forEach(t),E5o=r(Qye," (XLNet model)"),Qye.forEach(t),O.forEach(t),C5o=i(ra),Yu=n(ra,"P",{});var Hye=s(Yu);w5o=r(Hye,"The model is set in evaluation mode by default using "),qde=n(Hye,"CODE",{});var Ost=s(qde);A5o=r(Ost,"model.eval()"),Ost.forEach(t),y5o=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(Hye,"CODE",{});var Vst=s(jde);L5o=r(Vst,"model.train()"),Vst.forEach(t),Hye.forEach(t),x5o=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Hqe=i(f),Si=n(f,"H2",{class:!0});var KDe=s(Si);Zu=n(KDe,"A",{id:!0,class:!0,href:!0});var Xst=s(Zu);Dde=n(Xst,"SPAN",{});var zst=s(Dde);T(uA.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),$5o=i(KDe),Gde=n(KDe,"SPAN",{});var Wst=s(Gde);k5o=r(Wst,"AutoModelForCausalLM"),Wst.forEach(t),KDe.forEach(t),Uqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(bA.$$.fragment,Xs),S5o=i(Xs),Ri=n(Xs,"P",{});var NZ=s(Ri);R5o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sj=n(NZ,"A",{href:!0});var Qst=s(Sj);P5o=r(Qst,"from_pretrained()"),Qst.forEach(t),B5o=r(NZ," class method or the "),Rj=n(NZ,"A",{href:!0});var Hst=s(Rj);I5o=r(Hst,"from_config()"),Hst.forEach(t),N5o=r(NZ,` class
method.`),NZ.forEach(t),q5o=i(Xs),vA=n(Xs,"P",{});var ZDe=s(vA);j5o=r(ZDe,"This class cannot be instantiated directly using "),Ode=n(ZDe,"CODE",{});var Ust=s(Ode);D5o=r(Ust,"__init__()"),Ust.forEach(t),G5o=r(ZDe," (throws an error)."),ZDe.forEach(t),O5o=i(Xs),nt=n(Xs,"DIV",{class:!0});var V3=s(nt);T(FA.$$.fragment,V3),V5o=i(V3),Vde=n(V3,"P",{});var Jst=s(Vde);X5o=r(Jst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jst.forEach(t),z5o=i(V3),Pi=n(V3,"P",{});var qZ=s(Pi);W5o=r(qZ,`Note:
Loading a model from its configuration file does `),Xde=n(qZ,"STRONG",{});var Yst=s(Xde);Q5o=r(Yst,"not"),Yst.forEach(t),H5o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=n(qZ,"A",{href:!0});var Kst=s(Pj);U5o=r(Kst,"from_pretrained()"),Kst.forEach(t),J5o=r(qZ," to load the model weights."),qZ.forEach(t),Y5o=i(V3),T(e2.$$.fragment,V3),V3.forEach(t),K5o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(TA.$$.fragment,ta),Z5o=i(ta),zde=n(ta,"P",{});var Zst=s(zde);eCo=r(Zst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zst.forEach(t),oCo=i(ta),$a=n(ta,"P",{});var X3=s($a);rCo=r(X3,"The model class to instantiate is selected based on the "),Wde=n(X3,"CODE",{});var elt=s(Wde);tCo=r(elt,"model_type"),elt.forEach(t),aCo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Qde=n(X3,"CODE",{});var olt=s(Qde);nCo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),sCo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(X3,"CODE",{});var rlt=s(Hde);lCo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),iCo=r(X3,":"),X3.forEach(t),dCo=i(ta),z=n(ta,"UL",{});var W=s(z);o2=n(W,"LI",{});var Uye=s(o2);Ude=n(Uye,"STRONG",{});var tlt=s(Ude);cCo=r(tlt,"bart"),tlt.forEach(t),fCo=r(Uye," \u2014 "),Bj=n(Uye,"A",{href:!0});var alt=s(Bj);mCo=r(alt,"BartForCausalLM"),alt.forEach(t),gCo=r(Uye," (BART model)"),Uye.forEach(t),hCo=i(W),r2=n(W,"LI",{});var Jye=s(r2);Jde=n(Jye,"STRONG",{});var nlt=s(Jde);pCo=r(nlt,"bert"),nlt.forEach(t),_Co=r(Jye," \u2014 "),Ij=n(Jye,"A",{href:!0});var slt=s(Ij);uCo=r(slt,"BertLMHeadModel"),slt.forEach(t),bCo=r(Jye," (BERT model)"),Jye.forEach(t),vCo=i(W),t2=n(W,"LI",{});var Yye=s(t2);Yde=n(Yye,"STRONG",{});var llt=s(Yde);FCo=r(llt,"bert-generation"),llt.forEach(t),TCo=r(Yye," \u2014 "),Nj=n(Yye,"A",{href:!0});var ilt=s(Nj);MCo=r(ilt,"BertGenerationDecoder"),ilt.forEach(t),ECo=r(Yye," (Bert Generation model)"),Yye.forEach(t),CCo=i(W),a2=n(W,"LI",{});var Kye=s(a2);Kde=n(Kye,"STRONG",{});var dlt=s(Kde);wCo=r(dlt,"big_bird"),dlt.forEach(t),ACo=r(Kye," \u2014 "),qj=n(Kye,"A",{href:!0});var clt=s(qj);yCo=r(clt,"BigBirdForCausalLM"),clt.forEach(t),LCo=r(Kye," (BigBird model)"),Kye.forEach(t),xCo=i(W),n2=n(W,"LI",{});var Zye=s(n2);Zde=n(Zye,"STRONG",{});var flt=s(Zde);$Co=r(flt,"bigbird_pegasus"),flt.forEach(t),kCo=r(Zye," \u2014 "),jj=n(Zye,"A",{href:!0});var mlt=s(jj);SCo=r(mlt,"BigBirdPegasusForCausalLM"),mlt.forEach(t),RCo=r(Zye," (BigBirdPegasus model)"),Zye.forEach(t),PCo=i(W),s2=n(W,"LI",{});var eLe=s(s2);ece=n(eLe,"STRONG",{});var glt=s(ece);BCo=r(glt,"blenderbot"),glt.forEach(t),ICo=r(eLe," \u2014 "),Dj=n(eLe,"A",{href:!0});var hlt=s(Dj);NCo=r(hlt,"BlenderbotForCausalLM"),hlt.forEach(t),qCo=r(eLe," (Blenderbot model)"),eLe.forEach(t),jCo=i(W),l2=n(W,"LI",{});var oLe=s(l2);oce=n(oLe,"STRONG",{});var plt=s(oce);DCo=r(plt,"blenderbot-small"),plt.forEach(t),GCo=r(oLe," \u2014 "),Gj=n(oLe,"A",{href:!0});var _lt=s(Gj);OCo=r(_lt,"BlenderbotSmallForCausalLM"),_lt.forEach(t),VCo=r(oLe," (BlenderbotSmall model)"),oLe.forEach(t),XCo=i(W),i2=n(W,"LI",{});var rLe=s(i2);rce=n(rLe,"STRONG",{});var ult=s(rce);zCo=r(ult,"camembert"),ult.forEach(t),WCo=r(rLe," \u2014 "),Oj=n(rLe,"A",{href:!0});var blt=s(Oj);QCo=r(blt,"CamembertForCausalLM"),blt.forEach(t),HCo=r(rLe," (CamemBERT model)"),rLe.forEach(t),UCo=i(W),d2=n(W,"LI",{});var tLe=s(d2);tce=n(tLe,"STRONG",{});var vlt=s(tce);JCo=r(vlt,"ctrl"),vlt.forEach(t),YCo=r(tLe," \u2014 "),Vj=n(tLe,"A",{href:!0});var Flt=s(Vj);KCo=r(Flt,"CTRLLMHeadModel"),Flt.forEach(t),ZCo=r(tLe," (CTRL model)"),tLe.forEach(t),e3o=i(W),c2=n(W,"LI",{});var aLe=s(c2);ace=n(aLe,"STRONG",{});var Tlt=s(ace);o3o=r(Tlt,"data2vec-text"),Tlt.forEach(t),r3o=r(aLe," \u2014 "),Xj=n(aLe,"A",{href:!0});var Mlt=s(Xj);t3o=r(Mlt,"Data2VecTextForCausalLM"),Mlt.forEach(t),a3o=r(aLe," (Data2VecText model)"),aLe.forEach(t),n3o=i(W),f2=n(W,"LI",{});var nLe=s(f2);nce=n(nLe,"STRONG",{});var Elt=s(nce);s3o=r(Elt,"electra"),Elt.forEach(t),l3o=r(nLe," \u2014 "),zj=n(nLe,"A",{href:!0});var Clt=s(zj);i3o=r(Clt,"ElectraForCausalLM"),Clt.forEach(t),d3o=r(nLe," (ELECTRA model)"),nLe.forEach(t),c3o=i(W),m2=n(W,"LI",{});var sLe=s(m2);sce=n(sLe,"STRONG",{});var wlt=s(sce);f3o=r(wlt,"gpt2"),wlt.forEach(t),m3o=r(sLe," \u2014 "),Wj=n(sLe,"A",{href:!0});var Alt=s(Wj);g3o=r(Alt,"GPT2LMHeadModel"),Alt.forEach(t),h3o=r(sLe," (OpenAI GPT-2 model)"),sLe.forEach(t),p3o=i(W),g2=n(W,"LI",{});var lLe=s(g2);lce=n(lLe,"STRONG",{});var ylt=s(lce);_3o=r(ylt,"gpt_neo"),ylt.forEach(t),u3o=r(lLe," \u2014 "),Qj=n(lLe,"A",{href:!0});var Llt=s(Qj);b3o=r(Llt,"GPTNeoForCausalLM"),Llt.forEach(t),v3o=r(lLe," (GPT Neo model)"),lLe.forEach(t),F3o=i(W),h2=n(W,"LI",{});var iLe=s(h2);ice=n(iLe,"STRONG",{});var xlt=s(ice);T3o=r(xlt,"gpt_neox"),xlt.forEach(t),M3o=r(iLe," \u2014 "),Hj=n(iLe,"A",{href:!0});var $lt=s(Hj);E3o=r($lt,"GPTNeoXForCausalLM"),$lt.forEach(t),C3o=r(iLe," (GPT NeoX model)"),iLe.forEach(t),w3o=i(W),p2=n(W,"LI",{});var dLe=s(p2);dce=n(dLe,"STRONG",{});var klt=s(dce);A3o=r(klt,"gptj"),klt.forEach(t),y3o=r(dLe," \u2014 "),Uj=n(dLe,"A",{href:!0});var Slt=s(Uj);L3o=r(Slt,"GPTJForCausalLM"),Slt.forEach(t),x3o=r(dLe," (GPT-J model)"),dLe.forEach(t),$3o=i(W),_2=n(W,"LI",{});var cLe=s(_2);cce=n(cLe,"STRONG",{});var Rlt=s(cce);k3o=r(Rlt,"marian"),Rlt.forEach(t),S3o=r(cLe," \u2014 "),Jj=n(cLe,"A",{href:!0});var Plt=s(Jj);R3o=r(Plt,"MarianForCausalLM"),Plt.forEach(t),P3o=r(cLe," (Marian model)"),cLe.forEach(t),B3o=i(W),u2=n(W,"LI",{});var fLe=s(u2);fce=n(fLe,"STRONG",{});var Blt=s(fce);I3o=r(Blt,"mbart"),Blt.forEach(t),N3o=r(fLe," \u2014 "),Yj=n(fLe,"A",{href:!0});var Ilt=s(Yj);q3o=r(Ilt,"MBartForCausalLM"),Ilt.forEach(t),j3o=r(fLe," (mBART model)"),fLe.forEach(t),D3o=i(W),b2=n(W,"LI",{});var mLe=s(b2);mce=n(mLe,"STRONG",{});var Nlt=s(mce);G3o=r(Nlt,"megatron-bert"),Nlt.forEach(t),O3o=r(mLe," \u2014 "),Kj=n(mLe,"A",{href:!0});var qlt=s(Kj);V3o=r(qlt,"MegatronBertForCausalLM"),qlt.forEach(t),X3o=r(mLe," (MegatronBert model)"),mLe.forEach(t),z3o=i(W),v2=n(W,"LI",{});var gLe=s(v2);gce=n(gLe,"STRONG",{});var jlt=s(gce);W3o=r(jlt,"openai-gpt"),jlt.forEach(t),Q3o=r(gLe," \u2014 "),Zj=n(gLe,"A",{href:!0});var Dlt=s(Zj);H3o=r(Dlt,"OpenAIGPTLMHeadModel"),Dlt.forEach(t),U3o=r(gLe," (OpenAI GPT model)"),gLe.forEach(t),J3o=i(W),F2=n(W,"LI",{});var hLe=s(F2);hce=n(hLe,"STRONG",{});var Glt=s(hce);Y3o=r(Glt,"opt"),Glt.forEach(t),K3o=r(hLe," \u2014 "),eD=n(hLe,"A",{href:!0});var Olt=s(eD);Z3o=r(Olt,"OPTForCausalLM"),Olt.forEach(t),e0o=r(hLe," (OPT model)"),hLe.forEach(t),o0o=i(W),T2=n(W,"LI",{});var pLe=s(T2);pce=n(pLe,"STRONG",{});var Vlt=s(pce);r0o=r(Vlt,"pegasus"),Vlt.forEach(t),t0o=r(pLe," \u2014 "),oD=n(pLe,"A",{href:!0});var Xlt=s(oD);a0o=r(Xlt,"PegasusForCausalLM"),Xlt.forEach(t),n0o=r(pLe," (Pegasus model)"),pLe.forEach(t),s0o=i(W),M2=n(W,"LI",{});var _Le=s(M2);_ce=n(_Le,"STRONG",{});var zlt=s(_ce);l0o=r(zlt,"plbart"),zlt.forEach(t),i0o=r(_Le," \u2014 "),rD=n(_Le,"A",{href:!0});var Wlt=s(rD);d0o=r(Wlt,"PLBartForCausalLM"),Wlt.forEach(t),c0o=r(_Le," (PLBart model)"),_Le.forEach(t),f0o=i(W),E2=n(W,"LI",{});var uLe=s(E2);uce=n(uLe,"STRONG",{});var Qlt=s(uce);m0o=r(Qlt,"prophetnet"),Qlt.forEach(t),g0o=r(uLe," \u2014 "),tD=n(uLe,"A",{href:!0});var Hlt=s(tD);h0o=r(Hlt,"ProphetNetForCausalLM"),Hlt.forEach(t),p0o=r(uLe," (ProphetNet model)"),uLe.forEach(t),_0o=i(W),C2=n(W,"LI",{});var bLe=s(C2);bce=n(bLe,"STRONG",{});var Ult=s(bce);u0o=r(Ult,"qdqbert"),Ult.forEach(t),b0o=r(bLe," \u2014 "),aD=n(bLe,"A",{href:!0});var Jlt=s(aD);v0o=r(Jlt,"QDQBertLMHeadModel"),Jlt.forEach(t),F0o=r(bLe," (QDQBert model)"),bLe.forEach(t),T0o=i(W),w2=n(W,"LI",{});var vLe=s(w2);vce=n(vLe,"STRONG",{});var Ylt=s(vce);M0o=r(Ylt,"reformer"),Ylt.forEach(t),E0o=r(vLe," \u2014 "),nD=n(vLe,"A",{href:!0});var Klt=s(nD);C0o=r(Klt,"ReformerModelWithLMHead"),Klt.forEach(t),w0o=r(vLe," (Reformer model)"),vLe.forEach(t),A0o=i(W),A2=n(W,"LI",{});var FLe=s(A2);Fce=n(FLe,"STRONG",{});var Zlt=s(Fce);y0o=r(Zlt,"rembert"),Zlt.forEach(t),L0o=r(FLe," \u2014 "),sD=n(FLe,"A",{href:!0});var eit=s(sD);x0o=r(eit,"RemBertForCausalLM"),eit.forEach(t),$0o=r(FLe," (RemBERT model)"),FLe.forEach(t),k0o=i(W),y2=n(W,"LI",{});var TLe=s(y2);Tce=n(TLe,"STRONG",{});var oit=s(Tce);S0o=r(oit,"roberta"),oit.forEach(t),R0o=r(TLe," \u2014 "),lD=n(TLe,"A",{href:!0});var rit=s(lD);P0o=r(rit,"RobertaForCausalLM"),rit.forEach(t),B0o=r(TLe," (RoBERTa model)"),TLe.forEach(t),I0o=i(W),L2=n(W,"LI",{});var MLe=s(L2);Mce=n(MLe,"STRONG",{});var tit=s(Mce);N0o=r(tit,"roformer"),tit.forEach(t),q0o=r(MLe," \u2014 "),iD=n(MLe,"A",{href:!0});var ait=s(iD);j0o=r(ait,"RoFormerForCausalLM"),ait.forEach(t),D0o=r(MLe," (RoFormer model)"),MLe.forEach(t),G0o=i(W),x2=n(W,"LI",{});var ELe=s(x2);Ece=n(ELe,"STRONG",{});var nit=s(Ece);O0o=r(nit,"speech_to_text_2"),nit.forEach(t),V0o=r(ELe," \u2014 "),dD=n(ELe,"A",{href:!0});var sit=s(dD);X0o=r(sit,"Speech2Text2ForCausalLM"),sit.forEach(t),z0o=r(ELe," (Speech2Text2 model)"),ELe.forEach(t),W0o=i(W),$2=n(W,"LI",{});var CLe=s($2);Cce=n(CLe,"STRONG",{});var lit=s(Cce);Q0o=r(lit,"transfo-xl"),lit.forEach(t),H0o=r(CLe," \u2014 "),cD=n(CLe,"A",{href:!0});var iit=s(cD);U0o=r(iit,"TransfoXLLMHeadModel"),iit.forEach(t),J0o=r(CLe," (Transformer-XL model)"),CLe.forEach(t),Y0o=i(W),k2=n(W,"LI",{});var wLe=s(k2);wce=n(wLe,"STRONG",{});var dit=s(wce);K0o=r(dit,"trocr"),dit.forEach(t),Z0o=r(wLe," \u2014 "),fD=n(wLe,"A",{href:!0});var cit=s(fD);ewo=r(cit,"TrOCRForCausalLM"),cit.forEach(t),owo=r(wLe," (TrOCR model)"),wLe.forEach(t),rwo=i(W),S2=n(W,"LI",{});var ALe=s(S2);Ace=n(ALe,"STRONG",{});var fit=s(Ace);two=r(fit,"xglm"),fit.forEach(t),awo=r(ALe," \u2014 "),mD=n(ALe,"A",{href:!0});var mit=s(mD);nwo=r(mit,"XGLMForCausalLM"),mit.forEach(t),swo=r(ALe," (XGLM model)"),ALe.forEach(t),lwo=i(W),R2=n(W,"LI",{});var yLe=s(R2);yce=n(yLe,"STRONG",{});var git=s(yce);iwo=r(git,"xlm"),git.forEach(t),dwo=r(yLe," \u2014 "),gD=n(yLe,"A",{href:!0});var hit=s(gD);cwo=r(hit,"XLMWithLMHeadModel"),hit.forEach(t),fwo=r(yLe," (XLM model)"),yLe.forEach(t),mwo=i(W),P2=n(W,"LI",{});var LLe=s(P2);Lce=n(LLe,"STRONG",{});var pit=s(Lce);gwo=r(pit,"xlm-prophetnet"),pit.forEach(t),hwo=r(LLe," \u2014 "),hD=n(LLe,"A",{href:!0});var _it=s(hD);pwo=r(_it,"XLMProphetNetForCausalLM"),_it.forEach(t),_wo=r(LLe," (XLMProphetNet model)"),LLe.forEach(t),uwo=i(W),B2=n(W,"LI",{});var xLe=s(B2);xce=n(xLe,"STRONG",{});var uit=s(xce);bwo=r(uit,"xlm-roberta"),uit.forEach(t),vwo=r(xLe," \u2014 "),pD=n(xLe,"A",{href:!0});var bit=s(pD);Fwo=r(bit,"XLMRobertaForCausalLM"),bit.forEach(t),Two=r(xLe," (XLM-RoBERTa model)"),xLe.forEach(t),Mwo=i(W),I2=n(W,"LI",{});var $Le=s(I2);$ce=n($Le,"STRONG",{});var vit=s($ce);Ewo=r(vit,"xlm-roberta-xl"),vit.forEach(t),Cwo=r($Le," \u2014 "),_D=n($Le,"A",{href:!0});var Fit=s(_D);wwo=r(Fit,"XLMRobertaXLForCausalLM"),Fit.forEach(t),Awo=r($Le," (XLM-RoBERTa-XL model)"),$Le.forEach(t),ywo=i(W),N2=n(W,"LI",{});var kLe=s(N2);kce=n(kLe,"STRONG",{});var Tit=s(kce);Lwo=r(Tit,"xlnet"),Tit.forEach(t),xwo=r(kLe," \u2014 "),uD=n(kLe,"A",{href:!0});var Mit=s(uD);$wo=r(Mit,"XLNetLMHeadModel"),Mit.forEach(t),kwo=r(kLe," (XLNet model)"),kLe.forEach(t),W.forEach(t),Swo=i(ta),q2=n(ta,"P",{});var SLe=s(q2);Rwo=r(SLe,"The model is set in evaluation mode by default using "),Sce=n(SLe,"CODE",{});var Eit=s(Sce);Pwo=r(Eit,"model.eval()"),Eit.forEach(t),Bwo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(SLe,"CODE",{});var Cit=s(Rce);Iwo=r(Cit,"model.train()"),Cit.forEach(t),SLe.forEach(t),Nwo=i(ta),T(j2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Jqe=i(f),Bi=n(f,"H2",{class:!0});var eGe=s(Bi);D2=n(eGe,"A",{id:!0,class:!0,href:!0});var wit=s(D2);Pce=n(wit,"SPAN",{});var Ait=s(Pce);T(MA.$$.fragment,Ait),Ait.forEach(t),wit.forEach(t),qwo=i(eGe),Bce=n(eGe,"SPAN",{});var yit=s(Bce);jwo=r(yit,"AutoModelForMaskedLM"),yit.forEach(t),eGe.forEach(t),Yqe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(EA.$$.fragment,zs),Dwo=i(zs),Ii=n(zs,"P",{});var jZ=s(Ii);Gwo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=n(jZ,"A",{href:!0});var Lit=s(bD);Owo=r(Lit,"from_pretrained()"),Lit.forEach(t),Vwo=r(jZ," class method or the "),vD=n(jZ,"A",{href:!0});var xit=s(vD);Xwo=r(xit,"from_config()"),xit.forEach(t),zwo=r(jZ,` class
method.`),jZ.forEach(t),Wwo=i(zs),CA=n(zs,"P",{});var oGe=s(CA);Qwo=r(oGe,"This class cannot be instantiated directly using "),Ice=n(oGe,"CODE",{});var $it=s(Ice);Hwo=r($it,"__init__()"),$it.forEach(t),Uwo=r(oGe," (throws an error)."),oGe.forEach(t),Jwo=i(zs),st=n(zs,"DIV",{class:!0});var z3=s(st);T(wA.$$.fragment,z3),Ywo=i(z3),Nce=n(z3,"P",{});var kit=s(Nce);Kwo=r(kit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kit.forEach(t),Zwo=i(z3),Ni=n(z3,"P",{});var DZ=s(Ni);eAo=r(DZ,`Note:
Loading a model from its configuration file does `),qce=n(DZ,"STRONG",{});var Sit=s(qce);oAo=r(Sit,"not"),Sit.forEach(t),rAo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(DZ,"A",{href:!0});var Rit=s(FD);tAo=r(Rit,"from_pretrained()"),Rit.forEach(t),aAo=r(DZ," to load the model weights."),DZ.forEach(t),nAo=i(z3),T(G2.$$.fragment,z3),z3.forEach(t),sAo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(AA.$$.fragment,aa),lAo=i(aa),jce=n(aa,"P",{});var Pit=s(jce);iAo=r(Pit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pit.forEach(t),dAo=i(aa),ka=n(aa,"P",{});var W3=s(ka);cAo=r(W3,"The model class to instantiate is selected based on the "),Dce=n(W3,"CODE",{});var Bit=s(Dce);fAo=r(Bit,"model_type"),Bit.forEach(t),mAo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Gce=n(W3,"CODE",{});var Iit=s(Gce);gAo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),hAo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(W3,"CODE",{});var Nit=s(Oce);pAo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),_Ao=r(W3,":"),W3.forEach(t),uAo=i(aa),Q=n(aa,"UL",{});var U=s(Q);O2=n(U,"LI",{});var RLe=s(O2);Vce=n(RLe,"STRONG",{});var qit=s(Vce);bAo=r(qit,"albert"),qit.forEach(t),vAo=r(RLe," \u2014 "),TD=n(RLe,"A",{href:!0});var jit=s(TD);FAo=r(jit,"AlbertForMaskedLM"),jit.forEach(t),TAo=r(RLe," (ALBERT model)"),RLe.forEach(t),MAo=i(U),V2=n(U,"LI",{});var PLe=s(V2);Xce=n(PLe,"STRONG",{});var Dit=s(Xce);EAo=r(Dit,"bart"),Dit.forEach(t),CAo=r(PLe," \u2014 "),MD=n(PLe,"A",{href:!0});var Git=s(MD);wAo=r(Git,"BartForConditionalGeneration"),Git.forEach(t),AAo=r(PLe," (BART model)"),PLe.forEach(t),yAo=i(U),X2=n(U,"LI",{});var BLe=s(X2);zce=n(BLe,"STRONG",{});var Oit=s(zce);LAo=r(Oit,"bert"),Oit.forEach(t),xAo=r(BLe," \u2014 "),ED=n(BLe,"A",{href:!0});var Vit=s(ED);$Ao=r(Vit,"BertForMaskedLM"),Vit.forEach(t),kAo=r(BLe," (BERT model)"),BLe.forEach(t),SAo=i(U),z2=n(U,"LI",{});var ILe=s(z2);Wce=n(ILe,"STRONG",{});var Xit=s(Wce);RAo=r(Xit,"big_bird"),Xit.forEach(t),PAo=r(ILe," \u2014 "),CD=n(ILe,"A",{href:!0});var zit=s(CD);BAo=r(zit,"BigBirdForMaskedLM"),zit.forEach(t),IAo=r(ILe," (BigBird model)"),ILe.forEach(t),NAo=i(U),W2=n(U,"LI",{});var NLe=s(W2);Qce=n(NLe,"STRONG",{});var Wit=s(Qce);qAo=r(Wit,"camembert"),Wit.forEach(t),jAo=r(NLe," \u2014 "),wD=n(NLe,"A",{href:!0});var Qit=s(wD);DAo=r(Qit,"CamembertForMaskedLM"),Qit.forEach(t),GAo=r(NLe," (CamemBERT model)"),NLe.forEach(t),OAo=i(U),Q2=n(U,"LI",{});var qLe=s(Q2);Hce=n(qLe,"STRONG",{});var Hit=s(Hce);VAo=r(Hit,"convbert"),Hit.forEach(t),XAo=r(qLe," \u2014 "),AD=n(qLe,"A",{href:!0});var Uit=s(AD);zAo=r(Uit,"ConvBertForMaskedLM"),Uit.forEach(t),WAo=r(qLe," (ConvBERT model)"),qLe.forEach(t),QAo=i(U),H2=n(U,"LI",{});var jLe=s(H2);Uce=n(jLe,"STRONG",{});var Jit=s(Uce);HAo=r(Jit,"data2vec-text"),Jit.forEach(t),UAo=r(jLe," \u2014 "),yD=n(jLe,"A",{href:!0});var Yit=s(yD);JAo=r(Yit,"Data2VecTextForMaskedLM"),Yit.forEach(t),YAo=r(jLe," (Data2VecText model)"),jLe.forEach(t),KAo=i(U),U2=n(U,"LI",{});var DLe=s(U2);Jce=n(DLe,"STRONG",{});var Kit=s(Jce);ZAo=r(Kit,"deberta"),Kit.forEach(t),eyo=r(DLe," \u2014 "),LD=n(DLe,"A",{href:!0});var Zit=s(LD);oyo=r(Zit,"DebertaForMaskedLM"),Zit.forEach(t),ryo=r(DLe," (DeBERTa model)"),DLe.forEach(t),tyo=i(U),J2=n(U,"LI",{});var GLe=s(J2);Yce=n(GLe,"STRONG",{});var edt=s(Yce);ayo=r(edt,"deberta-v2"),edt.forEach(t),nyo=r(GLe," \u2014 "),xD=n(GLe,"A",{href:!0});var odt=s(xD);syo=r(odt,"DebertaV2ForMaskedLM"),odt.forEach(t),lyo=r(GLe," (DeBERTa-v2 model)"),GLe.forEach(t),iyo=i(U),Y2=n(U,"LI",{});var OLe=s(Y2);Kce=n(OLe,"STRONG",{});var rdt=s(Kce);dyo=r(rdt,"distilbert"),rdt.forEach(t),cyo=r(OLe," \u2014 "),$D=n(OLe,"A",{href:!0});var tdt=s($D);fyo=r(tdt,"DistilBertForMaskedLM"),tdt.forEach(t),myo=r(OLe," (DistilBERT model)"),OLe.forEach(t),gyo=i(U),K2=n(U,"LI",{});var VLe=s(K2);Zce=n(VLe,"STRONG",{});var adt=s(Zce);hyo=r(adt,"electra"),adt.forEach(t),pyo=r(VLe," \u2014 "),kD=n(VLe,"A",{href:!0});var ndt=s(kD);_yo=r(ndt,"ElectraForMaskedLM"),ndt.forEach(t),uyo=r(VLe," (ELECTRA model)"),VLe.forEach(t),byo=i(U),Z2=n(U,"LI",{});var XLe=s(Z2);efe=n(XLe,"STRONG",{});var sdt=s(efe);vyo=r(sdt,"flaubert"),sdt.forEach(t),Fyo=r(XLe," \u2014 "),SD=n(XLe,"A",{href:!0});var ldt=s(SD);Tyo=r(ldt,"FlaubertWithLMHeadModel"),ldt.forEach(t),Myo=r(XLe," (FlauBERT model)"),XLe.forEach(t),Eyo=i(U),e1=n(U,"LI",{});var zLe=s(e1);ofe=n(zLe,"STRONG",{});var idt=s(ofe);Cyo=r(idt,"fnet"),idt.forEach(t),wyo=r(zLe," \u2014 "),RD=n(zLe,"A",{href:!0});var ddt=s(RD);Ayo=r(ddt,"FNetForMaskedLM"),ddt.forEach(t),yyo=r(zLe," (FNet model)"),zLe.forEach(t),Lyo=i(U),o1=n(U,"LI",{});var WLe=s(o1);rfe=n(WLe,"STRONG",{});var cdt=s(rfe);xyo=r(cdt,"funnel"),cdt.forEach(t),$yo=r(WLe," \u2014 "),PD=n(WLe,"A",{href:!0});var fdt=s(PD);kyo=r(fdt,"FunnelForMaskedLM"),fdt.forEach(t),Syo=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),Ryo=i(U),r1=n(U,"LI",{});var QLe=s(r1);tfe=n(QLe,"STRONG",{});var mdt=s(tfe);Pyo=r(mdt,"ibert"),mdt.forEach(t),Byo=r(QLe," \u2014 "),BD=n(QLe,"A",{href:!0});var gdt=s(BD);Iyo=r(gdt,"IBertForMaskedLM"),gdt.forEach(t),Nyo=r(QLe," (I-BERT model)"),QLe.forEach(t),qyo=i(U),t1=n(U,"LI",{});var HLe=s(t1);afe=n(HLe,"STRONG",{});var hdt=s(afe);jyo=r(hdt,"layoutlm"),hdt.forEach(t),Dyo=r(HLe," \u2014 "),ID=n(HLe,"A",{href:!0});var pdt=s(ID);Gyo=r(pdt,"LayoutLMForMaskedLM"),pdt.forEach(t),Oyo=r(HLe," (LayoutLM model)"),HLe.forEach(t),Vyo=i(U),a1=n(U,"LI",{});var ULe=s(a1);nfe=n(ULe,"STRONG",{});var _dt=s(nfe);Xyo=r(_dt,"longformer"),_dt.forEach(t),zyo=r(ULe," \u2014 "),ND=n(ULe,"A",{href:!0});var udt=s(ND);Wyo=r(udt,"LongformerForMaskedLM"),udt.forEach(t),Qyo=r(ULe," (Longformer model)"),ULe.forEach(t),Hyo=i(U),n1=n(U,"LI",{});var JLe=s(n1);sfe=n(JLe,"STRONG",{});var bdt=s(sfe);Uyo=r(bdt,"mbart"),bdt.forEach(t),Jyo=r(JLe," \u2014 "),qD=n(JLe,"A",{href:!0});var vdt=s(qD);Yyo=r(vdt,"MBartForConditionalGeneration"),vdt.forEach(t),Kyo=r(JLe," (mBART model)"),JLe.forEach(t),Zyo=i(U),s1=n(U,"LI",{});var YLe=s(s1);lfe=n(YLe,"STRONG",{});var Fdt=s(lfe);eLo=r(Fdt,"megatron-bert"),Fdt.forEach(t),oLo=r(YLe," \u2014 "),jD=n(YLe,"A",{href:!0});var Tdt=s(jD);rLo=r(Tdt,"MegatronBertForMaskedLM"),Tdt.forEach(t),tLo=r(YLe," (MegatronBert model)"),YLe.forEach(t),aLo=i(U),l1=n(U,"LI",{});var KLe=s(l1);ife=n(KLe,"STRONG",{});var Mdt=s(ife);nLo=r(Mdt,"mobilebert"),Mdt.forEach(t),sLo=r(KLe," \u2014 "),DD=n(KLe,"A",{href:!0});var Edt=s(DD);lLo=r(Edt,"MobileBertForMaskedLM"),Edt.forEach(t),iLo=r(KLe," (MobileBERT model)"),KLe.forEach(t),dLo=i(U),i1=n(U,"LI",{});var ZLe=s(i1);dfe=n(ZLe,"STRONG",{});var Cdt=s(dfe);cLo=r(Cdt,"mpnet"),Cdt.forEach(t),fLo=r(ZLe," \u2014 "),GD=n(ZLe,"A",{href:!0});var wdt=s(GD);mLo=r(wdt,"MPNetForMaskedLM"),wdt.forEach(t),gLo=r(ZLe," (MPNet model)"),ZLe.forEach(t),hLo=i(U),d1=n(U,"LI",{});var e8e=s(d1);cfe=n(e8e,"STRONG",{});var Adt=s(cfe);pLo=r(Adt,"nystromformer"),Adt.forEach(t),_Lo=r(e8e," \u2014 "),OD=n(e8e,"A",{href:!0});var ydt=s(OD);uLo=r(ydt,"NystromformerForMaskedLM"),ydt.forEach(t),bLo=r(e8e," (Nystromformer model)"),e8e.forEach(t),vLo=i(U),c1=n(U,"LI",{});var o8e=s(c1);ffe=n(o8e,"STRONG",{});var Ldt=s(ffe);FLo=r(Ldt,"perceiver"),Ldt.forEach(t),TLo=r(o8e," \u2014 "),VD=n(o8e,"A",{href:!0});var xdt=s(VD);MLo=r(xdt,"PerceiverForMaskedLM"),xdt.forEach(t),ELo=r(o8e," (Perceiver model)"),o8e.forEach(t),CLo=i(U),f1=n(U,"LI",{});var r8e=s(f1);mfe=n(r8e,"STRONG",{});var $dt=s(mfe);wLo=r($dt,"qdqbert"),$dt.forEach(t),ALo=r(r8e," \u2014 "),XD=n(r8e,"A",{href:!0});var kdt=s(XD);yLo=r(kdt,"QDQBertForMaskedLM"),kdt.forEach(t),LLo=r(r8e," (QDQBert model)"),r8e.forEach(t),xLo=i(U),m1=n(U,"LI",{});var t8e=s(m1);gfe=n(t8e,"STRONG",{});var Sdt=s(gfe);$Lo=r(Sdt,"reformer"),Sdt.forEach(t),kLo=r(t8e," \u2014 "),zD=n(t8e,"A",{href:!0});var Rdt=s(zD);SLo=r(Rdt,"ReformerForMaskedLM"),Rdt.forEach(t),RLo=r(t8e," (Reformer model)"),t8e.forEach(t),PLo=i(U),g1=n(U,"LI",{});var a8e=s(g1);hfe=n(a8e,"STRONG",{});var Pdt=s(hfe);BLo=r(Pdt,"rembert"),Pdt.forEach(t),ILo=r(a8e," \u2014 "),WD=n(a8e,"A",{href:!0});var Bdt=s(WD);NLo=r(Bdt,"RemBertForMaskedLM"),Bdt.forEach(t),qLo=r(a8e," (RemBERT model)"),a8e.forEach(t),jLo=i(U),h1=n(U,"LI",{});var n8e=s(h1);pfe=n(n8e,"STRONG",{});var Idt=s(pfe);DLo=r(Idt,"roberta"),Idt.forEach(t),GLo=r(n8e," \u2014 "),QD=n(n8e,"A",{href:!0});var Ndt=s(QD);OLo=r(Ndt,"RobertaForMaskedLM"),Ndt.forEach(t),VLo=r(n8e," (RoBERTa model)"),n8e.forEach(t),XLo=i(U),p1=n(U,"LI",{});var s8e=s(p1);_fe=n(s8e,"STRONG",{});var qdt=s(_fe);zLo=r(qdt,"roformer"),qdt.forEach(t),WLo=r(s8e," \u2014 "),HD=n(s8e,"A",{href:!0});var jdt=s(HD);QLo=r(jdt,"RoFormerForMaskedLM"),jdt.forEach(t),HLo=r(s8e," (RoFormer model)"),s8e.forEach(t),ULo=i(U),_1=n(U,"LI",{});var l8e=s(_1);ufe=n(l8e,"STRONG",{});var Ddt=s(ufe);JLo=r(Ddt,"squeezebert"),Ddt.forEach(t),YLo=r(l8e," \u2014 "),UD=n(l8e,"A",{href:!0});var Gdt=s(UD);KLo=r(Gdt,"SqueezeBertForMaskedLM"),Gdt.forEach(t),ZLo=r(l8e," (SqueezeBERT model)"),l8e.forEach(t),e8o=i(U),u1=n(U,"LI",{});var i8e=s(u1);bfe=n(i8e,"STRONG",{});var Odt=s(bfe);o8o=r(Odt,"tapas"),Odt.forEach(t),r8o=r(i8e," \u2014 "),JD=n(i8e,"A",{href:!0});var Vdt=s(JD);t8o=r(Vdt,"TapasForMaskedLM"),Vdt.forEach(t),a8o=r(i8e," (TAPAS model)"),i8e.forEach(t),n8o=i(U),b1=n(U,"LI",{});var d8e=s(b1);vfe=n(d8e,"STRONG",{});var Xdt=s(vfe);s8o=r(Xdt,"wav2vec2"),Xdt.forEach(t),l8o=r(d8e," \u2014 "),Ffe=n(d8e,"CODE",{});var zdt=s(Ffe);i8o=r(zdt,"Wav2Vec2ForMaskedLM"),zdt.forEach(t),d8o=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),c8o=i(U),v1=n(U,"LI",{});var c8e=s(v1);Tfe=n(c8e,"STRONG",{});var Wdt=s(Tfe);f8o=r(Wdt,"xlm"),Wdt.forEach(t),m8o=r(c8e," \u2014 "),YD=n(c8e,"A",{href:!0});var Qdt=s(YD);g8o=r(Qdt,"XLMWithLMHeadModel"),Qdt.forEach(t),h8o=r(c8e," (XLM model)"),c8e.forEach(t),p8o=i(U),F1=n(U,"LI",{});var f8e=s(F1);Mfe=n(f8e,"STRONG",{});var Hdt=s(Mfe);_8o=r(Hdt,"xlm-roberta"),Hdt.forEach(t),u8o=r(f8e," \u2014 "),KD=n(f8e,"A",{href:!0});var Udt=s(KD);b8o=r(Udt,"XLMRobertaForMaskedLM"),Udt.forEach(t),v8o=r(f8e," (XLM-RoBERTa model)"),f8e.forEach(t),F8o=i(U),T1=n(U,"LI",{});var m8e=s(T1);Efe=n(m8e,"STRONG",{});var Jdt=s(Efe);T8o=r(Jdt,"xlm-roberta-xl"),Jdt.forEach(t),M8o=r(m8e," \u2014 "),ZD=n(m8e,"A",{href:!0});var Ydt=s(ZD);E8o=r(Ydt,"XLMRobertaXLForMaskedLM"),Ydt.forEach(t),C8o=r(m8e," (XLM-RoBERTa-XL model)"),m8e.forEach(t),w8o=i(U),M1=n(U,"LI",{});var g8e=s(M1);Cfe=n(g8e,"STRONG",{});var Kdt=s(Cfe);A8o=r(Kdt,"yoso"),Kdt.forEach(t),y8o=r(g8e," \u2014 "),eG=n(g8e,"A",{href:!0});var Zdt=s(eG);L8o=r(Zdt,"YosoForMaskedLM"),Zdt.forEach(t),x8o=r(g8e," (YOSO model)"),g8e.forEach(t),U.forEach(t),$8o=i(aa),E1=n(aa,"P",{});var h8e=s(E1);k8o=r(h8e,"The model is set in evaluation mode by default using "),wfe=n(h8e,"CODE",{});var ect=s(wfe);S8o=r(ect,"model.eval()"),ect.forEach(t),R8o=r(h8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(h8e,"CODE",{});var oct=s(Afe);P8o=r(oct,"model.train()"),oct.forEach(t),h8e.forEach(t),B8o=i(aa),T(C1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Kqe=i(f),qi=n(f,"H2",{class:!0});var rGe=s(qi);w1=n(rGe,"A",{id:!0,class:!0,href:!0});var rct=s(w1);yfe=n(rct,"SPAN",{});var tct=s(yfe);T(yA.$$.fragment,tct),tct.forEach(t),rct.forEach(t),I8o=i(rGe),Lfe=n(rGe,"SPAN",{});var act=s(Lfe);N8o=r(act,"AutoModelForSeq2SeqLM"),act.forEach(t),rGe.forEach(t),Zqe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(LA.$$.fragment,Ws),q8o=i(Ws),ji=n(Ws,"P",{});var GZ=s(ji);j8o=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(GZ,"A",{href:!0});var nct=s(oG);D8o=r(nct,"from_pretrained()"),nct.forEach(t),G8o=r(GZ," class method or the "),rG=n(GZ,"A",{href:!0});var sct=s(rG);O8o=r(sct,"from_config()"),sct.forEach(t),V8o=r(GZ,` class
method.`),GZ.forEach(t),X8o=i(Ws),xA=n(Ws,"P",{});var tGe=s(xA);z8o=r(tGe,"This class cannot be instantiated directly using "),xfe=n(tGe,"CODE",{});var lct=s(xfe);W8o=r(lct,"__init__()"),lct.forEach(t),Q8o=r(tGe," (throws an error)."),tGe.forEach(t),H8o=i(Ws),lt=n(Ws,"DIV",{class:!0});var Q3=s(lt);T($A.$$.fragment,Q3),U8o=i(Q3),$fe=n(Q3,"P",{});var ict=s($fe);J8o=r(ict,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ict.forEach(t),Y8o=i(Q3),Di=n(Q3,"P",{});var OZ=s(Di);K8o=r(OZ,`Note:
Loading a model from its configuration file does `),kfe=n(OZ,"STRONG",{});var dct=s(kfe);Z8o=r(dct,"not"),dct.forEach(t),exo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(OZ,"A",{href:!0});var cct=s(tG);oxo=r(cct,"from_pretrained()"),cct.forEach(t),rxo=r(OZ," to load the model weights."),OZ.forEach(t),txo=i(Q3),T(A1.$$.fragment,Q3),Q3.forEach(t),axo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(kA.$$.fragment,na),nxo=i(na),Sfe=n(na,"P",{});var fct=s(Sfe);sxo=r(fct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fct.forEach(t),lxo=i(na),Sa=n(na,"P",{});var H3=s(Sa);ixo=r(H3,"The model class to instantiate is selected based on the "),Rfe=n(H3,"CODE",{});var mct=s(Rfe);dxo=r(mct,"model_type"),mct.forEach(t),cxo=r(H3,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(H3,"CODE",{});var gct=s(Pfe);fxo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),mxo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(H3,"CODE",{});var hct=s(Bfe);gxo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),hxo=r(H3,":"),H3.forEach(t),pxo=i(na),pe=n(na,"UL",{});var be=s(pe);y1=n(be,"LI",{});var p8e=s(y1);Ife=n(p8e,"STRONG",{});var pct=s(Ife);_xo=r(pct,"bart"),pct.forEach(t),uxo=r(p8e," \u2014 "),aG=n(p8e,"A",{href:!0});var _ct=s(aG);bxo=r(_ct,"BartForConditionalGeneration"),_ct.forEach(t),vxo=r(p8e," (BART model)"),p8e.forEach(t),Fxo=i(be),L1=n(be,"LI",{});var _8e=s(L1);Nfe=n(_8e,"STRONG",{});var uct=s(Nfe);Txo=r(uct,"bigbird_pegasus"),uct.forEach(t),Mxo=r(_8e," \u2014 "),nG=n(_8e,"A",{href:!0});var bct=s(nG);Exo=r(bct,"BigBirdPegasusForConditionalGeneration"),bct.forEach(t),Cxo=r(_8e," (BigBirdPegasus model)"),_8e.forEach(t),wxo=i(be),x1=n(be,"LI",{});var u8e=s(x1);qfe=n(u8e,"STRONG",{});var vct=s(qfe);Axo=r(vct,"blenderbot"),vct.forEach(t),yxo=r(u8e," \u2014 "),sG=n(u8e,"A",{href:!0});var Fct=s(sG);Lxo=r(Fct,"BlenderbotForConditionalGeneration"),Fct.forEach(t),xxo=r(u8e," (Blenderbot model)"),u8e.forEach(t),$xo=i(be),$1=n(be,"LI",{});var b8e=s($1);jfe=n(b8e,"STRONG",{});var Tct=s(jfe);kxo=r(Tct,"blenderbot-small"),Tct.forEach(t),Sxo=r(b8e," \u2014 "),lG=n(b8e,"A",{href:!0});var Mct=s(lG);Rxo=r(Mct,"BlenderbotSmallForConditionalGeneration"),Mct.forEach(t),Pxo=r(b8e," (BlenderbotSmall model)"),b8e.forEach(t),Bxo=i(be),k1=n(be,"LI",{});var v8e=s(k1);Dfe=n(v8e,"STRONG",{});var Ect=s(Dfe);Ixo=r(Ect,"encoder-decoder"),Ect.forEach(t),Nxo=r(v8e," \u2014 "),iG=n(v8e,"A",{href:!0});var Cct=s(iG);qxo=r(Cct,"EncoderDecoderModel"),Cct.forEach(t),jxo=r(v8e," (Encoder decoder model)"),v8e.forEach(t),Dxo=i(be),S1=n(be,"LI",{});var F8e=s(S1);Gfe=n(F8e,"STRONG",{});var wct=s(Gfe);Gxo=r(wct,"fsmt"),wct.forEach(t),Oxo=r(F8e," \u2014 "),dG=n(F8e,"A",{href:!0});var Act=s(dG);Vxo=r(Act,"FSMTForConditionalGeneration"),Act.forEach(t),Xxo=r(F8e," (FairSeq Machine-Translation model)"),F8e.forEach(t),zxo=i(be),R1=n(be,"LI",{});var T8e=s(R1);Ofe=n(T8e,"STRONG",{});var yct=s(Ofe);Wxo=r(yct,"led"),yct.forEach(t),Qxo=r(T8e," \u2014 "),cG=n(T8e,"A",{href:!0});var Lct=s(cG);Hxo=r(Lct,"LEDForConditionalGeneration"),Lct.forEach(t),Uxo=r(T8e," (LED model)"),T8e.forEach(t),Jxo=i(be),P1=n(be,"LI",{});var M8e=s(P1);Vfe=n(M8e,"STRONG",{});var xct=s(Vfe);Yxo=r(xct,"longt5"),xct.forEach(t),Kxo=r(M8e," \u2014 "),fG=n(M8e,"A",{href:!0});var $ct=s(fG);Zxo=r($ct,"LongT5ForConditionalGeneration"),$ct.forEach(t),e$o=r(M8e," (LongT5 model)"),M8e.forEach(t),o$o=i(be),B1=n(be,"LI",{});var E8e=s(B1);Xfe=n(E8e,"STRONG",{});var kct=s(Xfe);r$o=r(kct,"m2m_100"),kct.forEach(t),t$o=r(E8e," \u2014 "),mG=n(E8e,"A",{href:!0});var Sct=s(mG);a$o=r(Sct,"M2M100ForConditionalGeneration"),Sct.forEach(t),n$o=r(E8e," (M2M100 model)"),E8e.forEach(t),s$o=i(be),I1=n(be,"LI",{});var C8e=s(I1);zfe=n(C8e,"STRONG",{});var Rct=s(zfe);l$o=r(Rct,"marian"),Rct.forEach(t),i$o=r(C8e," \u2014 "),gG=n(C8e,"A",{href:!0});var Pct=s(gG);d$o=r(Pct,"MarianMTModel"),Pct.forEach(t),c$o=r(C8e," (Marian model)"),C8e.forEach(t),f$o=i(be),N1=n(be,"LI",{});var w8e=s(N1);Wfe=n(w8e,"STRONG",{});var Bct=s(Wfe);m$o=r(Bct,"mbart"),Bct.forEach(t),g$o=r(w8e," \u2014 "),hG=n(w8e,"A",{href:!0});var Ict=s(hG);h$o=r(Ict,"MBartForConditionalGeneration"),Ict.forEach(t),p$o=r(w8e," (mBART model)"),w8e.forEach(t),_$o=i(be),q1=n(be,"LI",{});var A8e=s(q1);Qfe=n(A8e,"STRONG",{});var Nct=s(Qfe);u$o=r(Nct,"mt5"),Nct.forEach(t),b$o=r(A8e," \u2014 "),pG=n(A8e,"A",{href:!0});var qct=s(pG);v$o=r(qct,"MT5ForConditionalGeneration"),qct.forEach(t),F$o=r(A8e," (mT5 model)"),A8e.forEach(t),T$o=i(be),j1=n(be,"LI",{});var y8e=s(j1);Hfe=n(y8e,"STRONG",{});var jct=s(Hfe);M$o=r(jct,"pegasus"),jct.forEach(t),E$o=r(y8e," \u2014 "),_G=n(y8e,"A",{href:!0});var Dct=s(_G);C$o=r(Dct,"PegasusForConditionalGeneration"),Dct.forEach(t),w$o=r(y8e," (Pegasus model)"),y8e.forEach(t),A$o=i(be),D1=n(be,"LI",{});var L8e=s(D1);Ufe=n(L8e,"STRONG",{});var Gct=s(Ufe);y$o=r(Gct,"plbart"),Gct.forEach(t),L$o=r(L8e," \u2014 "),uG=n(L8e,"A",{href:!0});var Oct=s(uG);x$o=r(Oct,"PLBartForConditionalGeneration"),Oct.forEach(t),$$o=r(L8e," (PLBart model)"),L8e.forEach(t),k$o=i(be),G1=n(be,"LI",{});var x8e=s(G1);Jfe=n(x8e,"STRONG",{});var Vct=s(Jfe);S$o=r(Vct,"prophetnet"),Vct.forEach(t),R$o=r(x8e," \u2014 "),bG=n(x8e,"A",{href:!0});var Xct=s(bG);P$o=r(Xct,"ProphetNetForConditionalGeneration"),Xct.forEach(t),B$o=r(x8e," (ProphetNet model)"),x8e.forEach(t),I$o=i(be),O1=n(be,"LI",{});var $8e=s(O1);Yfe=n($8e,"STRONG",{});var zct=s(Yfe);N$o=r(zct,"t5"),zct.forEach(t),q$o=r($8e," \u2014 "),vG=n($8e,"A",{href:!0});var Wct=s(vG);j$o=r(Wct,"T5ForConditionalGeneration"),Wct.forEach(t),D$o=r($8e," (T5 model)"),$8e.forEach(t),G$o=i(be),V1=n(be,"LI",{});var k8e=s(V1);Kfe=n(k8e,"STRONG",{});var Qct=s(Kfe);O$o=r(Qct,"xlm-prophetnet"),Qct.forEach(t),V$o=r(k8e," \u2014 "),FG=n(k8e,"A",{href:!0});var Hct=s(FG);X$o=r(Hct,"XLMProphetNetForConditionalGeneration"),Hct.forEach(t),z$o=r(k8e," (XLMProphetNet model)"),k8e.forEach(t),be.forEach(t),W$o=i(na),X1=n(na,"P",{});var S8e=s(X1);Q$o=r(S8e,"The model is set in evaluation mode by default using "),Zfe=n(S8e,"CODE",{});var Uct=s(Zfe);H$o=r(Uct,"model.eval()"),Uct.forEach(t),U$o=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(S8e,"CODE",{});var Jct=s(eme);J$o=r(Jct,"model.train()"),Jct.forEach(t),S8e.forEach(t),Y$o=i(na),T(z1.$$.fragment,na),na.forEach(t),Ws.forEach(t),eje=i(f),Gi=n(f,"H2",{class:!0});var aGe=s(Gi);W1=n(aGe,"A",{id:!0,class:!0,href:!0});var Yct=s(W1);ome=n(Yct,"SPAN",{});var Kct=s(ome);T(SA.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),K$o=i(aGe),rme=n(aGe,"SPAN",{});var Zct=s(rme);Z$o=r(Zct,"AutoModelForSequenceClassification"),Zct.forEach(t),aGe.forEach(t),oje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(RA.$$.fragment,Qs),eko=i(Qs),Oi=n(Qs,"P",{});var VZ=s(Oi);oko=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TG=n(VZ,"A",{href:!0});var eft=s(TG);rko=r(eft,"from_pretrained()"),eft.forEach(t),tko=r(VZ," class method or the "),MG=n(VZ,"A",{href:!0});var oft=s(MG);ako=r(oft,"from_config()"),oft.forEach(t),nko=r(VZ,` class
method.`),VZ.forEach(t),sko=i(Qs),PA=n(Qs,"P",{});var nGe=s(PA);lko=r(nGe,"This class cannot be instantiated directly using "),tme=n(nGe,"CODE",{});var rft=s(tme);iko=r(rft,"__init__()"),rft.forEach(t),dko=r(nGe," (throws an error)."),nGe.forEach(t),cko=i(Qs),it=n(Qs,"DIV",{class:!0});var U3=s(it);T(BA.$$.fragment,U3),fko=i(U3),ame=n(U3,"P",{});var tft=s(ame);mko=r(tft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tft.forEach(t),gko=i(U3),Vi=n(U3,"P",{});var XZ=s(Vi);hko=r(XZ,`Note:
Loading a model from its configuration file does `),nme=n(XZ,"STRONG",{});var aft=s(nme);pko=r(aft,"not"),aft.forEach(t),_ko=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(XZ,"A",{href:!0});var nft=s(EG);uko=r(nft,"from_pretrained()"),nft.forEach(t),bko=r(XZ," to load the model weights."),XZ.forEach(t),vko=i(U3),T(Q1.$$.fragment,U3),U3.forEach(t),Fko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(IA.$$.fragment,sa),Tko=i(sa),sme=n(sa,"P",{});var sft=s(sme);Mko=r(sft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sft.forEach(t),Eko=i(sa),Ra=n(sa,"P",{});var J3=s(Ra);Cko=r(J3,"The model class to instantiate is selected based on the "),lme=n(J3,"CODE",{});var lft=s(lme);wko=r(lft,"model_type"),lft.forEach(t),Ako=r(J3,` property of the config object (either
passed as an argument or loaded from `),ime=n(J3,"CODE",{});var ift=s(ime);yko=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),Lko=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(J3,"CODE",{});var dft=s(dme);xko=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),$ko=r(J3,":"),J3.forEach(t),kko=i(sa),N=n(sa,"UL",{});var j=s(N);H1=n(j,"LI",{});var R8e=s(H1);cme=n(R8e,"STRONG",{});var cft=s(cme);Sko=r(cft,"albert"),cft.forEach(t),Rko=r(R8e," \u2014 "),CG=n(R8e,"A",{href:!0});var fft=s(CG);Pko=r(fft,"AlbertForSequenceClassification"),fft.forEach(t),Bko=r(R8e," (ALBERT model)"),R8e.forEach(t),Iko=i(j),U1=n(j,"LI",{});var P8e=s(U1);fme=n(P8e,"STRONG",{});var mft=s(fme);Nko=r(mft,"bart"),mft.forEach(t),qko=r(P8e," \u2014 "),wG=n(P8e,"A",{href:!0});var gft=s(wG);jko=r(gft,"BartForSequenceClassification"),gft.forEach(t),Dko=r(P8e," (BART model)"),P8e.forEach(t),Gko=i(j),J1=n(j,"LI",{});var B8e=s(J1);mme=n(B8e,"STRONG",{});var hft=s(mme);Oko=r(hft,"bert"),hft.forEach(t),Vko=r(B8e," \u2014 "),AG=n(B8e,"A",{href:!0});var pft=s(AG);Xko=r(pft,"BertForSequenceClassification"),pft.forEach(t),zko=r(B8e," (BERT model)"),B8e.forEach(t),Wko=i(j),Y1=n(j,"LI",{});var I8e=s(Y1);gme=n(I8e,"STRONG",{});var _ft=s(gme);Qko=r(_ft,"big_bird"),_ft.forEach(t),Hko=r(I8e," \u2014 "),yG=n(I8e,"A",{href:!0});var uft=s(yG);Uko=r(uft,"BigBirdForSequenceClassification"),uft.forEach(t),Jko=r(I8e," (BigBird model)"),I8e.forEach(t),Yko=i(j),K1=n(j,"LI",{});var N8e=s(K1);hme=n(N8e,"STRONG",{});var bft=s(hme);Kko=r(bft,"bigbird_pegasus"),bft.forEach(t),Zko=r(N8e," \u2014 "),LG=n(N8e,"A",{href:!0});var vft=s(LG);eSo=r(vft,"BigBirdPegasusForSequenceClassification"),vft.forEach(t),oSo=r(N8e," (BigBirdPegasus model)"),N8e.forEach(t),rSo=i(j),Z1=n(j,"LI",{});var q8e=s(Z1);pme=n(q8e,"STRONG",{});var Fft=s(pme);tSo=r(Fft,"camembert"),Fft.forEach(t),aSo=r(q8e," \u2014 "),xG=n(q8e,"A",{href:!0});var Tft=s(xG);nSo=r(Tft,"CamembertForSequenceClassification"),Tft.forEach(t),sSo=r(q8e," (CamemBERT model)"),q8e.forEach(t),lSo=i(j),eb=n(j,"LI",{});var j8e=s(eb);_me=n(j8e,"STRONG",{});var Mft=s(_me);iSo=r(Mft,"canine"),Mft.forEach(t),dSo=r(j8e," \u2014 "),$G=n(j8e,"A",{href:!0});var Eft=s($G);cSo=r(Eft,"CanineForSequenceClassification"),Eft.forEach(t),fSo=r(j8e," (Canine model)"),j8e.forEach(t),mSo=i(j),ob=n(j,"LI",{});var D8e=s(ob);ume=n(D8e,"STRONG",{});var Cft=s(ume);gSo=r(Cft,"convbert"),Cft.forEach(t),hSo=r(D8e," \u2014 "),kG=n(D8e,"A",{href:!0});var wft=s(kG);pSo=r(wft,"ConvBertForSequenceClassification"),wft.forEach(t),_So=r(D8e," (ConvBERT model)"),D8e.forEach(t),uSo=i(j),rb=n(j,"LI",{});var G8e=s(rb);bme=n(G8e,"STRONG",{});var Aft=s(bme);bSo=r(Aft,"ctrl"),Aft.forEach(t),vSo=r(G8e," \u2014 "),SG=n(G8e,"A",{href:!0});var yft=s(SG);FSo=r(yft,"CTRLForSequenceClassification"),yft.forEach(t),TSo=r(G8e," (CTRL model)"),G8e.forEach(t),MSo=i(j),tb=n(j,"LI",{});var O8e=s(tb);vme=n(O8e,"STRONG",{});var Lft=s(vme);ESo=r(Lft,"data2vec-text"),Lft.forEach(t),CSo=r(O8e," \u2014 "),RG=n(O8e,"A",{href:!0});var xft=s(RG);wSo=r(xft,"Data2VecTextForSequenceClassification"),xft.forEach(t),ASo=r(O8e," (Data2VecText model)"),O8e.forEach(t),ySo=i(j),ab=n(j,"LI",{});var V8e=s(ab);Fme=n(V8e,"STRONG",{});var $ft=s(Fme);LSo=r($ft,"deberta"),$ft.forEach(t),xSo=r(V8e," \u2014 "),PG=n(V8e,"A",{href:!0});var kft=s(PG);$So=r(kft,"DebertaForSequenceClassification"),kft.forEach(t),kSo=r(V8e," (DeBERTa model)"),V8e.forEach(t),SSo=i(j),nb=n(j,"LI",{});var X8e=s(nb);Tme=n(X8e,"STRONG",{});var Sft=s(Tme);RSo=r(Sft,"deberta-v2"),Sft.forEach(t),PSo=r(X8e," \u2014 "),BG=n(X8e,"A",{href:!0});var Rft=s(BG);BSo=r(Rft,"DebertaV2ForSequenceClassification"),Rft.forEach(t),ISo=r(X8e," (DeBERTa-v2 model)"),X8e.forEach(t),NSo=i(j),sb=n(j,"LI",{});var z8e=s(sb);Mme=n(z8e,"STRONG",{});var Pft=s(Mme);qSo=r(Pft,"distilbert"),Pft.forEach(t),jSo=r(z8e," \u2014 "),IG=n(z8e,"A",{href:!0});var Bft=s(IG);DSo=r(Bft,"DistilBertForSequenceClassification"),Bft.forEach(t),GSo=r(z8e," (DistilBERT model)"),z8e.forEach(t),OSo=i(j),lb=n(j,"LI",{});var W8e=s(lb);Eme=n(W8e,"STRONG",{});var Ift=s(Eme);VSo=r(Ift,"electra"),Ift.forEach(t),XSo=r(W8e," \u2014 "),NG=n(W8e,"A",{href:!0});var Nft=s(NG);zSo=r(Nft,"ElectraForSequenceClassification"),Nft.forEach(t),WSo=r(W8e," (ELECTRA model)"),W8e.forEach(t),QSo=i(j),ib=n(j,"LI",{});var Q8e=s(ib);Cme=n(Q8e,"STRONG",{});var qft=s(Cme);HSo=r(qft,"flaubert"),qft.forEach(t),USo=r(Q8e," \u2014 "),qG=n(Q8e,"A",{href:!0});var jft=s(qG);JSo=r(jft,"FlaubertForSequenceClassification"),jft.forEach(t),YSo=r(Q8e," (FlauBERT model)"),Q8e.forEach(t),KSo=i(j),db=n(j,"LI",{});var H8e=s(db);wme=n(H8e,"STRONG",{});var Dft=s(wme);ZSo=r(Dft,"fnet"),Dft.forEach(t),eRo=r(H8e," \u2014 "),jG=n(H8e,"A",{href:!0});var Gft=s(jG);oRo=r(Gft,"FNetForSequenceClassification"),Gft.forEach(t),rRo=r(H8e," (FNet model)"),H8e.forEach(t),tRo=i(j),cb=n(j,"LI",{});var U8e=s(cb);Ame=n(U8e,"STRONG",{});var Oft=s(Ame);aRo=r(Oft,"funnel"),Oft.forEach(t),nRo=r(U8e," \u2014 "),DG=n(U8e,"A",{href:!0});var Vft=s(DG);sRo=r(Vft,"FunnelForSequenceClassification"),Vft.forEach(t),lRo=r(U8e," (Funnel Transformer model)"),U8e.forEach(t),iRo=i(j),fb=n(j,"LI",{});var J8e=s(fb);yme=n(J8e,"STRONG",{});var Xft=s(yme);dRo=r(Xft,"gpt2"),Xft.forEach(t),cRo=r(J8e," \u2014 "),GG=n(J8e,"A",{href:!0});var zft=s(GG);fRo=r(zft,"GPT2ForSequenceClassification"),zft.forEach(t),mRo=r(J8e," (OpenAI GPT-2 model)"),J8e.forEach(t),gRo=i(j),mb=n(j,"LI",{});var Y8e=s(mb);Lme=n(Y8e,"STRONG",{});var Wft=s(Lme);hRo=r(Wft,"gpt_neo"),Wft.forEach(t),pRo=r(Y8e," \u2014 "),OG=n(Y8e,"A",{href:!0});var Qft=s(OG);_Ro=r(Qft,"GPTNeoForSequenceClassification"),Qft.forEach(t),uRo=r(Y8e," (GPT Neo model)"),Y8e.forEach(t),bRo=i(j),gb=n(j,"LI",{});var K8e=s(gb);xme=n(K8e,"STRONG",{});var Hft=s(xme);vRo=r(Hft,"gptj"),Hft.forEach(t),FRo=r(K8e," \u2014 "),VG=n(K8e,"A",{href:!0});var Uft=s(VG);TRo=r(Uft,"GPTJForSequenceClassification"),Uft.forEach(t),MRo=r(K8e," (GPT-J model)"),K8e.forEach(t),ERo=i(j),hb=n(j,"LI",{});var Z8e=s(hb);$me=n(Z8e,"STRONG",{});var Jft=s($me);CRo=r(Jft,"ibert"),Jft.forEach(t),wRo=r(Z8e," \u2014 "),XG=n(Z8e,"A",{href:!0});var Yft=s(XG);ARo=r(Yft,"IBertForSequenceClassification"),Yft.forEach(t),yRo=r(Z8e," (I-BERT model)"),Z8e.forEach(t),LRo=i(j),pb=n(j,"LI",{});var exe=s(pb);kme=n(exe,"STRONG",{});var Kft=s(kme);xRo=r(Kft,"layoutlm"),Kft.forEach(t),$Ro=r(exe," \u2014 "),zG=n(exe,"A",{href:!0});var Zft=s(zG);kRo=r(Zft,"LayoutLMForSequenceClassification"),Zft.forEach(t),SRo=r(exe," (LayoutLM model)"),exe.forEach(t),RRo=i(j),_b=n(j,"LI",{});var oxe=s(_b);Sme=n(oxe,"STRONG",{});var emt=s(Sme);PRo=r(emt,"layoutlmv2"),emt.forEach(t),BRo=r(oxe," \u2014 "),WG=n(oxe,"A",{href:!0});var omt=s(WG);IRo=r(omt,"LayoutLMv2ForSequenceClassification"),omt.forEach(t),NRo=r(oxe," (LayoutLMv2 model)"),oxe.forEach(t),qRo=i(j),ub=n(j,"LI",{});var rxe=s(ub);Rme=n(rxe,"STRONG",{});var rmt=s(Rme);jRo=r(rmt,"layoutlmv3"),rmt.forEach(t),DRo=r(rxe," \u2014 "),QG=n(rxe,"A",{href:!0});var tmt=s(QG);GRo=r(tmt,"LayoutLMv3ForSequenceClassification"),tmt.forEach(t),ORo=r(rxe," (LayoutLMv3 model)"),rxe.forEach(t),VRo=i(j),bb=n(j,"LI",{});var txe=s(bb);Pme=n(txe,"STRONG",{});var amt=s(Pme);XRo=r(amt,"led"),amt.forEach(t),zRo=r(txe," \u2014 "),HG=n(txe,"A",{href:!0});var nmt=s(HG);WRo=r(nmt,"LEDForSequenceClassification"),nmt.forEach(t),QRo=r(txe," (LED model)"),txe.forEach(t),HRo=i(j),vb=n(j,"LI",{});var axe=s(vb);Bme=n(axe,"STRONG",{});var smt=s(Bme);URo=r(smt,"longformer"),smt.forEach(t),JRo=r(axe," \u2014 "),UG=n(axe,"A",{href:!0});var lmt=s(UG);YRo=r(lmt,"LongformerForSequenceClassification"),lmt.forEach(t),KRo=r(axe," (Longformer model)"),axe.forEach(t),ZRo=i(j),Fb=n(j,"LI",{});var nxe=s(Fb);Ime=n(nxe,"STRONG",{});var imt=s(Ime);ePo=r(imt,"mbart"),imt.forEach(t),oPo=r(nxe," \u2014 "),JG=n(nxe,"A",{href:!0});var dmt=s(JG);rPo=r(dmt,"MBartForSequenceClassification"),dmt.forEach(t),tPo=r(nxe," (mBART model)"),nxe.forEach(t),aPo=i(j),Tb=n(j,"LI",{});var sxe=s(Tb);Nme=n(sxe,"STRONG",{});var cmt=s(Nme);nPo=r(cmt,"megatron-bert"),cmt.forEach(t),sPo=r(sxe," \u2014 "),YG=n(sxe,"A",{href:!0});var fmt=s(YG);lPo=r(fmt,"MegatronBertForSequenceClassification"),fmt.forEach(t),iPo=r(sxe," (MegatronBert model)"),sxe.forEach(t),dPo=i(j),Mb=n(j,"LI",{});var lxe=s(Mb);qme=n(lxe,"STRONG",{});var mmt=s(qme);cPo=r(mmt,"mobilebert"),mmt.forEach(t),fPo=r(lxe," \u2014 "),KG=n(lxe,"A",{href:!0});var gmt=s(KG);mPo=r(gmt,"MobileBertForSequenceClassification"),gmt.forEach(t),gPo=r(lxe," (MobileBERT model)"),lxe.forEach(t),hPo=i(j),Eb=n(j,"LI",{});var ixe=s(Eb);jme=n(ixe,"STRONG",{});var hmt=s(jme);pPo=r(hmt,"mpnet"),hmt.forEach(t),_Po=r(ixe," \u2014 "),ZG=n(ixe,"A",{href:!0});var pmt=s(ZG);uPo=r(pmt,"MPNetForSequenceClassification"),pmt.forEach(t),bPo=r(ixe," (MPNet model)"),ixe.forEach(t),vPo=i(j),Cb=n(j,"LI",{});var dxe=s(Cb);Dme=n(dxe,"STRONG",{});var _mt=s(Dme);FPo=r(_mt,"nystromformer"),_mt.forEach(t),TPo=r(dxe," \u2014 "),eO=n(dxe,"A",{href:!0});var umt=s(eO);MPo=r(umt,"NystromformerForSequenceClassification"),umt.forEach(t),EPo=r(dxe," (Nystromformer model)"),dxe.forEach(t),CPo=i(j),wb=n(j,"LI",{});var cxe=s(wb);Gme=n(cxe,"STRONG",{});var bmt=s(Gme);wPo=r(bmt,"openai-gpt"),bmt.forEach(t),APo=r(cxe," \u2014 "),oO=n(cxe,"A",{href:!0});var vmt=s(oO);yPo=r(vmt,"OpenAIGPTForSequenceClassification"),vmt.forEach(t),LPo=r(cxe," (OpenAI GPT model)"),cxe.forEach(t),xPo=i(j),Ab=n(j,"LI",{});var fxe=s(Ab);Ome=n(fxe,"STRONG",{});var Fmt=s(Ome);$Po=r(Fmt,"perceiver"),Fmt.forEach(t),kPo=r(fxe," \u2014 "),rO=n(fxe,"A",{href:!0});var Tmt=s(rO);SPo=r(Tmt,"PerceiverForSequenceClassification"),Tmt.forEach(t),RPo=r(fxe," (Perceiver model)"),fxe.forEach(t),PPo=i(j),yb=n(j,"LI",{});var mxe=s(yb);Vme=n(mxe,"STRONG",{});var Mmt=s(Vme);BPo=r(Mmt,"plbart"),Mmt.forEach(t),IPo=r(mxe," \u2014 "),tO=n(mxe,"A",{href:!0});var Emt=s(tO);NPo=r(Emt,"PLBartForSequenceClassification"),Emt.forEach(t),qPo=r(mxe," (PLBart model)"),mxe.forEach(t),jPo=i(j),Lb=n(j,"LI",{});var gxe=s(Lb);Xme=n(gxe,"STRONG",{});var Cmt=s(Xme);DPo=r(Cmt,"qdqbert"),Cmt.forEach(t),GPo=r(gxe," \u2014 "),aO=n(gxe,"A",{href:!0});var wmt=s(aO);OPo=r(wmt,"QDQBertForSequenceClassification"),wmt.forEach(t),VPo=r(gxe," (QDQBert model)"),gxe.forEach(t),XPo=i(j),xb=n(j,"LI",{});var hxe=s(xb);zme=n(hxe,"STRONG",{});var Amt=s(zme);zPo=r(Amt,"reformer"),Amt.forEach(t),WPo=r(hxe," \u2014 "),nO=n(hxe,"A",{href:!0});var ymt=s(nO);QPo=r(ymt,"ReformerForSequenceClassification"),ymt.forEach(t),HPo=r(hxe," (Reformer model)"),hxe.forEach(t),UPo=i(j),$b=n(j,"LI",{});var pxe=s($b);Wme=n(pxe,"STRONG",{});var Lmt=s(Wme);JPo=r(Lmt,"rembert"),Lmt.forEach(t),YPo=r(pxe," \u2014 "),sO=n(pxe,"A",{href:!0});var xmt=s(sO);KPo=r(xmt,"RemBertForSequenceClassification"),xmt.forEach(t),ZPo=r(pxe," (RemBERT model)"),pxe.forEach(t),eBo=i(j),kb=n(j,"LI",{});var _xe=s(kb);Qme=n(_xe,"STRONG",{});var $mt=s(Qme);oBo=r($mt,"roberta"),$mt.forEach(t),rBo=r(_xe," \u2014 "),lO=n(_xe,"A",{href:!0});var kmt=s(lO);tBo=r(kmt,"RobertaForSequenceClassification"),kmt.forEach(t),aBo=r(_xe," (RoBERTa model)"),_xe.forEach(t),nBo=i(j),Sb=n(j,"LI",{});var uxe=s(Sb);Hme=n(uxe,"STRONG",{});var Smt=s(Hme);sBo=r(Smt,"roformer"),Smt.forEach(t),lBo=r(uxe," \u2014 "),iO=n(uxe,"A",{href:!0});var Rmt=s(iO);iBo=r(Rmt,"RoFormerForSequenceClassification"),Rmt.forEach(t),dBo=r(uxe," (RoFormer model)"),uxe.forEach(t),cBo=i(j),Rb=n(j,"LI",{});var bxe=s(Rb);Ume=n(bxe,"STRONG",{});var Pmt=s(Ume);fBo=r(Pmt,"squeezebert"),Pmt.forEach(t),mBo=r(bxe," \u2014 "),dO=n(bxe,"A",{href:!0});var Bmt=s(dO);gBo=r(Bmt,"SqueezeBertForSequenceClassification"),Bmt.forEach(t),hBo=r(bxe," (SqueezeBERT model)"),bxe.forEach(t),pBo=i(j),Pb=n(j,"LI",{});var vxe=s(Pb);Jme=n(vxe,"STRONG",{});var Imt=s(Jme);_Bo=r(Imt,"tapas"),Imt.forEach(t),uBo=r(vxe," \u2014 "),cO=n(vxe,"A",{href:!0});var Nmt=s(cO);bBo=r(Nmt,"TapasForSequenceClassification"),Nmt.forEach(t),vBo=r(vxe," (TAPAS model)"),vxe.forEach(t),FBo=i(j),Bb=n(j,"LI",{});var Fxe=s(Bb);Yme=n(Fxe,"STRONG",{});var qmt=s(Yme);TBo=r(qmt,"transfo-xl"),qmt.forEach(t),MBo=r(Fxe," \u2014 "),fO=n(Fxe,"A",{href:!0});var jmt=s(fO);EBo=r(jmt,"TransfoXLForSequenceClassification"),jmt.forEach(t),CBo=r(Fxe," (Transformer-XL model)"),Fxe.forEach(t),wBo=i(j),Ib=n(j,"LI",{});var Txe=s(Ib);Kme=n(Txe,"STRONG",{});var Dmt=s(Kme);ABo=r(Dmt,"xlm"),Dmt.forEach(t),yBo=r(Txe," \u2014 "),mO=n(Txe,"A",{href:!0});var Gmt=s(mO);LBo=r(Gmt,"XLMForSequenceClassification"),Gmt.forEach(t),xBo=r(Txe," (XLM model)"),Txe.forEach(t),$Bo=i(j),Nb=n(j,"LI",{});var Mxe=s(Nb);Zme=n(Mxe,"STRONG",{});var Omt=s(Zme);kBo=r(Omt,"xlm-roberta"),Omt.forEach(t),SBo=r(Mxe," \u2014 "),gO=n(Mxe,"A",{href:!0});var Vmt=s(gO);RBo=r(Vmt,"XLMRobertaForSequenceClassification"),Vmt.forEach(t),PBo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),BBo=i(j),qb=n(j,"LI",{});var Exe=s(qb);ege=n(Exe,"STRONG",{});var Xmt=s(ege);IBo=r(Xmt,"xlm-roberta-xl"),Xmt.forEach(t),NBo=r(Exe," \u2014 "),hO=n(Exe,"A",{href:!0});var zmt=s(hO);qBo=r(zmt,"XLMRobertaXLForSequenceClassification"),zmt.forEach(t),jBo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),DBo=i(j),jb=n(j,"LI",{});var Cxe=s(jb);oge=n(Cxe,"STRONG",{});var Wmt=s(oge);GBo=r(Wmt,"xlnet"),Wmt.forEach(t),OBo=r(Cxe," \u2014 "),pO=n(Cxe,"A",{href:!0});var Qmt=s(pO);VBo=r(Qmt,"XLNetForSequenceClassification"),Qmt.forEach(t),XBo=r(Cxe," (XLNet model)"),Cxe.forEach(t),zBo=i(j),Db=n(j,"LI",{});var wxe=s(Db);rge=n(wxe,"STRONG",{});var Hmt=s(rge);WBo=r(Hmt,"yoso"),Hmt.forEach(t),QBo=r(wxe," \u2014 "),_O=n(wxe,"A",{href:!0});var Umt=s(_O);HBo=r(Umt,"YosoForSequenceClassification"),Umt.forEach(t),UBo=r(wxe," (YOSO model)"),wxe.forEach(t),j.forEach(t),JBo=i(sa),Gb=n(sa,"P",{});var Axe=s(Gb);YBo=r(Axe,"The model is set in evaluation mode by default using "),tge=n(Axe,"CODE",{});var Jmt=s(tge);KBo=r(Jmt,"model.eval()"),Jmt.forEach(t),ZBo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(Axe,"CODE",{});var Ymt=s(age);eIo=r(Ymt,"model.train()"),Ymt.forEach(t),Axe.forEach(t),oIo=i(sa),T(Ob.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),rje=i(f),Xi=n(f,"H2",{class:!0});var sGe=s(Xi);Vb=n(sGe,"A",{id:!0,class:!0,href:!0});var Kmt=s(Vb);nge=n(Kmt,"SPAN",{});var Zmt=s(nge);T(NA.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),rIo=i(sGe),sge=n(sGe,"SPAN",{});var egt=s(sge);tIo=r(egt,"AutoModelForMultipleChoice"),egt.forEach(t),sGe.forEach(t),tje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(qA.$$.fragment,Hs),aIo=i(Hs),zi=n(Hs,"P",{});var zZ=s(zi);nIo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uO=n(zZ,"A",{href:!0});var ogt=s(uO);sIo=r(ogt,"from_pretrained()"),ogt.forEach(t),lIo=r(zZ," class method or the "),bO=n(zZ,"A",{href:!0});var rgt=s(bO);iIo=r(rgt,"from_config()"),rgt.forEach(t),dIo=r(zZ,` class
method.`),zZ.forEach(t),cIo=i(Hs),jA=n(Hs,"P",{});var lGe=s(jA);fIo=r(lGe,"This class cannot be instantiated directly using "),lge=n(lGe,"CODE",{});var tgt=s(lge);mIo=r(tgt,"__init__()"),tgt.forEach(t),gIo=r(lGe," (throws an error)."),lGe.forEach(t),hIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Y3=s(dt);T(DA.$$.fragment,Y3),pIo=i(Y3),ige=n(Y3,"P",{});var agt=s(ige);_Io=r(agt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),agt.forEach(t),uIo=i(Y3),Wi=n(Y3,"P",{});var WZ=s(Wi);bIo=r(WZ,`Note:
Loading a model from its configuration file does `),dge=n(WZ,"STRONG",{});var ngt=s(dge);vIo=r(ngt,"not"),ngt.forEach(t),FIo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(WZ,"A",{href:!0});var sgt=s(vO);TIo=r(sgt,"from_pretrained()"),sgt.forEach(t),MIo=r(WZ," to load the model weights."),WZ.forEach(t),EIo=i(Y3),T(Xb.$$.fragment,Y3),Y3.forEach(t),CIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(GA.$$.fragment,la),wIo=i(la),cge=n(la,"P",{});var lgt=s(cge);AIo=r(lgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lgt.forEach(t),yIo=i(la),Pa=n(la,"P",{});var K3=s(Pa);LIo=r(K3,"The model class to instantiate is selected based on the "),fge=n(K3,"CODE",{});var igt=s(fge);xIo=r(igt,"model_type"),igt.forEach(t),$Io=r(K3,` property of the config object (either
passed as an argument or loaded from `),mge=n(K3,"CODE",{});var dgt=s(mge);kIo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),SIo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(K3,"CODE",{});var cgt=s(gge);RIo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),PIo=r(K3,":"),K3.forEach(t),BIo=i(la),K=n(la,"UL",{});var ee=s(K);zb=n(ee,"LI",{});var yxe=s(zb);hge=n(yxe,"STRONG",{});var fgt=s(hge);IIo=r(fgt,"albert"),fgt.forEach(t),NIo=r(yxe," \u2014 "),FO=n(yxe,"A",{href:!0});var mgt=s(FO);qIo=r(mgt,"AlbertForMultipleChoice"),mgt.forEach(t),jIo=r(yxe," (ALBERT model)"),yxe.forEach(t),DIo=i(ee),Wb=n(ee,"LI",{});var Lxe=s(Wb);pge=n(Lxe,"STRONG",{});var ggt=s(pge);GIo=r(ggt,"bert"),ggt.forEach(t),OIo=r(Lxe," \u2014 "),TO=n(Lxe,"A",{href:!0});var hgt=s(TO);VIo=r(hgt,"BertForMultipleChoice"),hgt.forEach(t),XIo=r(Lxe," (BERT model)"),Lxe.forEach(t),zIo=i(ee),Qb=n(ee,"LI",{});var xxe=s(Qb);_ge=n(xxe,"STRONG",{});var pgt=s(_ge);WIo=r(pgt,"big_bird"),pgt.forEach(t),QIo=r(xxe," \u2014 "),MO=n(xxe,"A",{href:!0});var _gt=s(MO);HIo=r(_gt,"BigBirdForMultipleChoice"),_gt.forEach(t),UIo=r(xxe," (BigBird model)"),xxe.forEach(t),JIo=i(ee),Hb=n(ee,"LI",{});var $xe=s(Hb);uge=n($xe,"STRONG",{});var ugt=s(uge);YIo=r(ugt,"camembert"),ugt.forEach(t),KIo=r($xe," \u2014 "),EO=n($xe,"A",{href:!0});var bgt=s(EO);ZIo=r(bgt,"CamembertForMultipleChoice"),bgt.forEach(t),eNo=r($xe," (CamemBERT model)"),$xe.forEach(t),oNo=i(ee),Ub=n(ee,"LI",{});var kxe=s(Ub);bge=n(kxe,"STRONG",{});var vgt=s(bge);rNo=r(vgt,"canine"),vgt.forEach(t),tNo=r(kxe," \u2014 "),CO=n(kxe,"A",{href:!0});var Fgt=s(CO);aNo=r(Fgt,"CanineForMultipleChoice"),Fgt.forEach(t),nNo=r(kxe," (Canine model)"),kxe.forEach(t),sNo=i(ee),Jb=n(ee,"LI",{});var Sxe=s(Jb);vge=n(Sxe,"STRONG",{});var Tgt=s(vge);lNo=r(Tgt,"convbert"),Tgt.forEach(t),iNo=r(Sxe," \u2014 "),wO=n(Sxe,"A",{href:!0});var Mgt=s(wO);dNo=r(Mgt,"ConvBertForMultipleChoice"),Mgt.forEach(t),cNo=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),fNo=i(ee),Yb=n(ee,"LI",{});var Rxe=s(Yb);Fge=n(Rxe,"STRONG",{});var Egt=s(Fge);mNo=r(Egt,"data2vec-text"),Egt.forEach(t),gNo=r(Rxe," \u2014 "),AO=n(Rxe,"A",{href:!0});var Cgt=s(AO);hNo=r(Cgt,"Data2VecTextForMultipleChoice"),Cgt.forEach(t),pNo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),_No=i(ee),Kb=n(ee,"LI",{});var Pxe=s(Kb);Tge=n(Pxe,"STRONG",{});var wgt=s(Tge);uNo=r(wgt,"deberta-v2"),wgt.forEach(t),bNo=r(Pxe," \u2014 "),yO=n(Pxe,"A",{href:!0});var Agt=s(yO);vNo=r(Agt,"DebertaV2ForMultipleChoice"),Agt.forEach(t),FNo=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),TNo=i(ee),Zb=n(ee,"LI",{});var Bxe=s(Zb);Mge=n(Bxe,"STRONG",{});var ygt=s(Mge);MNo=r(ygt,"distilbert"),ygt.forEach(t),ENo=r(Bxe," \u2014 "),LO=n(Bxe,"A",{href:!0});var Lgt=s(LO);CNo=r(Lgt,"DistilBertForMultipleChoice"),Lgt.forEach(t),wNo=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),ANo=i(ee),ev=n(ee,"LI",{});var Ixe=s(ev);Ege=n(Ixe,"STRONG",{});var xgt=s(Ege);yNo=r(xgt,"electra"),xgt.forEach(t),LNo=r(Ixe," \u2014 "),xO=n(Ixe,"A",{href:!0});var $gt=s(xO);xNo=r($gt,"ElectraForMultipleChoice"),$gt.forEach(t),$No=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),kNo=i(ee),ov=n(ee,"LI",{});var Nxe=s(ov);Cge=n(Nxe,"STRONG",{});var kgt=s(Cge);SNo=r(kgt,"flaubert"),kgt.forEach(t),RNo=r(Nxe," \u2014 "),$O=n(Nxe,"A",{href:!0});var Sgt=s($O);PNo=r(Sgt,"FlaubertForMultipleChoice"),Sgt.forEach(t),BNo=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),INo=i(ee),rv=n(ee,"LI",{});var qxe=s(rv);wge=n(qxe,"STRONG",{});var Rgt=s(wge);NNo=r(Rgt,"fnet"),Rgt.forEach(t),qNo=r(qxe," \u2014 "),kO=n(qxe,"A",{href:!0});var Pgt=s(kO);jNo=r(Pgt,"FNetForMultipleChoice"),Pgt.forEach(t),DNo=r(qxe," (FNet model)"),qxe.forEach(t),GNo=i(ee),tv=n(ee,"LI",{});var jxe=s(tv);Age=n(jxe,"STRONG",{});var Bgt=s(Age);ONo=r(Bgt,"funnel"),Bgt.forEach(t),VNo=r(jxe," \u2014 "),SO=n(jxe,"A",{href:!0});var Igt=s(SO);XNo=r(Igt,"FunnelForMultipleChoice"),Igt.forEach(t),zNo=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),WNo=i(ee),av=n(ee,"LI",{});var Dxe=s(av);yge=n(Dxe,"STRONG",{});var Ngt=s(yge);QNo=r(Ngt,"ibert"),Ngt.forEach(t),HNo=r(Dxe," \u2014 "),RO=n(Dxe,"A",{href:!0});var qgt=s(RO);UNo=r(qgt,"IBertForMultipleChoice"),qgt.forEach(t),JNo=r(Dxe," (I-BERT model)"),Dxe.forEach(t),YNo=i(ee),nv=n(ee,"LI",{});var Gxe=s(nv);Lge=n(Gxe,"STRONG",{});var jgt=s(Lge);KNo=r(jgt,"longformer"),jgt.forEach(t),ZNo=r(Gxe," \u2014 "),PO=n(Gxe,"A",{href:!0});var Dgt=s(PO);eqo=r(Dgt,"LongformerForMultipleChoice"),Dgt.forEach(t),oqo=r(Gxe," (Longformer model)"),Gxe.forEach(t),rqo=i(ee),sv=n(ee,"LI",{});var Oxe=s(sv);xge=n(Oxe,"STRONG",{});var Ggt=s(xge);tqo=r(Ggt,"megatron-bert"),Ggt.forEach(t),aqo=r(Oxe," \u2014 "),BO=n(Oxe,"A",{href:!0});var Ogt=s(BO);nqo=r(Ogt,"MegatronBertForMultipleChoice"),Ogt.forEach(t),sqo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),lqo=i(ee),lv=n(ee,"LI",{});var Vxe=s(lv);$ge=n(Vxe,"STRONG",{});var Vgt=s($ge);iqo=r(Vgt,"mobilebert"),Vgt.forEach(t),dqo=r(Vxe," \u2014 "),IO=n(Vxe,"A",{href:!0});var Xgt=s(IO);cqo=r(Xgt,"MobileBertForMultipleChoice"),Xgt.forEach(t),fqo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),mqo=i(ee),iv=n(ee,"LI",{});var Xxe=s(iv);kge=n(Xxe,"STRONG",{});var zgt=s(kge);gqo=r(zgt,"mpnet"),zgt.forEach(t),hqo=r(Xxe," \u2014 "),NO=n(Xxe,"A",{href:!0});var Wgt=s(NO);pqo=r(Wgt,"MPNetForMultipleChoice"),Wgt.forEach(t),_qo=r(Xxe," (MPNet model)"),Xxe.forEach(t),uqo=i(ee),dv=n(ee,"LI",{});var zxe=s(dv);Sge=n(zxe,"STRONG",{});var Qgt=s(Sge);bqo=r(Qgt,"nystromformer"),Qgt.forEach(t),vqo=r(zxe," \u2014 "),qO=n(zxe,"A",{href:!0});var Hgt=s(qO);Fqo=r(Hgt,"NystromformerForMultipleChoice"),Hgt.forEach(t),Tqo=r(zxe," (Nystromformer model)"),zxe.forEach(t),Mqo=i(ee),cv=n(ee,"LI",{});var Wxe=s(cv);Rge=n(Wxe,"STRONG",{});var Ugt=s(Rge);Eqo=r(Ugt,"qdqbert"),Ugt.forEach(t),Cqo=r(Wxe," \u2014 "),jO=n(Wxe,"A",{href:!0});var Jgt=s(jO);wqo=r(Jgt,"QDQBertForMultipleChoice"),Jgt.forEach(t),Aqo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),yqo=i(ee),fv=n(ee,"LI",{});var Qxe=s(fv);Pge=n(Qxe,"STRONG",{});var Ygt=s(Pge);Lqo=r(Ygt,"rembert"),Ygt.forEach(t),xqo=r(Qxe," \u2014 "),DO=n(Qxe,"A",{href:!0});var Kgt=s(DO);$qo=r(Kgt,"RemBertForMultipleChoice"),Kgt.forEach(t),kqo=r(Qxe," (RemBERT model)"),Qxe.forEach(t),Sqo=i(ee),mv=n(ee,"LI",{});var Hxe=s(mv);Bge=n(Hxe,"STRONG",{});var Zgt=s(Bge);Rqo=r(Zgt,"roberta"),Zgt.forEach(t),Pqo=r(Hxe," \u2014 "),GO=n(Hxe,"A",{href:!0});var eht=s(GO);Bqo=r(eht,"RobertaForMultipleChoice"),eht.forEach(t),Iqo=r(Hxe," (RoBERTa model)"),Hxe.forEach(t),Nqo=i(ee),gv=n(ee,"LI",{});var Uxe=s(gv);Ige=n(Uxe,"STRONG",{});var oht=s(Ige);qqo=r(oht,"roformer"),oht.forEach(t),jqo=r(Uxe," \u2014 "),OO=n(Uxe,"A",{href:!0});var rht=s(OO);Dqo=r(rht,"RoFormerForMultipleChoice"),rht.forEach(t),Gqo=r(Uxe," (RoFormer model)"),Uxe.forEach(t),Oqo=i(ee),hv=n(ee,"LI",{});var Jxe=s(hv);Nge=n(Jxe,"STRONG",{});var tht=s(Nge);Vqo=r(tht,"squeezebert"),tht.forEach(t),Xqo=r(Jxe," \u2014 "),VO=n(Jxe,"A",{href:!0});var aht=s(VO);zqo=r(aht,"SqueezeBertForMultipleChoice"),aht.forEach(t),Wqo=r(Jxe," (SqueezeBERT model)"),Jxe.forEach(t),Qqo=i(ee),pv=n(ee,"LI",{});var Yxe=s(pv);qge=n(Yxe,"STRONG",{});var nht=s(qge);Hqo=r(nht,"xlm"),nht.forEach(t),Uqo=r(Yxe," \u2014 "),XO=n(Yxe,"A",{href:!0});var sht=s(XO);Jqo=r(sht,"XLMForMultipleChoice"),sht.forEach(t),Yqo=r(Yxe," (XLM model)"),Yxe.forEach(t),Kqo=i(ee),_v=n(ee,"LI",{});var Kxe=s(_v);jge=n(Kxe,"STRONG",{});var lht=s(jge);Zqo=r(lht,"xlm-roberta"),lht.forEach(t),ejo=r(Kxe," \u2014 "),zO=n(Kxe,"A",{href:!0});var iht=s(zO);ojo=r(iht,"XLMRobertaForMultipleChoice"),iht.forEach(t),rjo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),tjo=i(ee),uv=n(ee,"LI",{});var Zxe=s(uv);Dge=n(Zxe,"STRONG",{});var dht=s(Dge);ajo=r(dht,"xlm-roberta-xl"),dht.forEach(t),njo=r(Zxe," \u2014 "),WO=n(Zxe,"A",{href:!0});var cht=s(WO);sjo=r(cht,"XLMRobertaXLForMultipleChoice"),cht.forEach(t),ljo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),ijo=i(ee),bv=n(ee,"LI",{});var e$e=s(bv);Gge=n(e$e,"STRONG",{});var fht=s(Gge);djo=r(fht,"xlnet"),fht.forEach(t),cjo=r(e$e," \u2014 "),QO=n(e$e,"A",{href:!0});var mht=s(QO);fjo=r(mht,"XLNetForMultipleChoice"),mht.forEach(t),mjo=r(e$e," (XLNet model)"),e$e.forEach(t),gjo=i(ee),vv=n(ee,"LI",{});var o$e=s(vv);Oge=n(o$e,"STRONG",{});var ght=s(Oge);hjo=r(ght,"yoso"),ght.forEach(t),pjo=r(o$e," \u2014 "),HO=n(o$e,"A",{href:!0});var hht=s(HO);_jo=r(hht,"YosoForMultipleChoice"),hht.forEach(t),ujo=r(o$e," (YOSO model)"),o$e.forEach(t),ee.forEach(t),bjo=i(la),Fv=n(la,"P",{});var r$e=s(Fv);vjo=r(r$e,"The model is set in evaluation mode by default using "),Vge=n(r$e,"CODE",{});var pht=s(Vge);Fjo=r(pht,"model.eval()"),pht.forEach(t),Tjo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(r$e,"CODE",{});var _ht=s(Xge);Mjo=r(_ht,"model.train()"),_ht.forEach(t),r$e.forEach(t),Ejo=i(la),T(Tv.$$.fragment,la),la.forEach(t),Hs.forEach(t),aje=i(f),Qi=n(f,"H2",{class:!0});var iGe=s(Qi);Mv=n(iGe,"A",{id:!0,class:!0,href:!0});var uht=s(Mv);zge=n(uht,"SPAN",{});var bht=s(zge);T(OA.$$.fragment,bht),bht.forEach(t),uht.forEach(t),Cjo=i(iGe),Wge=n(iGe,"SPAN",{});var vht=s(Wge);wjo=r(vht,"AutoModelForNextSentencePrediction"),vht.forEach(t),iGe.forEach(t),nje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(VA.$$.fragment,Us),Ajo=i(Us),Hi=n(Us,"P",{});var QZ=s(Hi);yjo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UO=n(QZ,"A",{href:!0});var Fht=s(UO);Ljo=r(Fht,"from_pretrained()"),Fht.forEach(t),xjo=r(QZ," class method or the "),JO=n(QZ,"A",{href:!0});var Tht=s(JO);$jo=r(Tht,"from_config()"),Tht.forEach(t),kjo=r(QZ,` class
method.`),QZ.forEach(t),Sjo=i(Us),XA=n(Us,"P",{});var dGe=s(XA);Rjo=r(dGe,"This class cannot be instantiated directly using "),Qge=n(dGe,"CODE",{});var Mht=s(Qge);Pjo=r(Mht,"__init__()"),Mht.forEach(t),Bjo=r(dGe," (throws an error)."),dGe.forEach(t),Ijo=i(Us),ct=n(Us,"DIV",{class:!0});var Z3=s(ct);T(zA.$$.fragment,Z3),Njo=i(Z3),Hge=n(Z3,"P",{});var Eht=s(Hge);qjo=r(Eht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Eht.forEach(t),jjo=i(Z3),Ui=n(Z3,"P",{});var HZ=s(Ui);Djo=r(HZ,`Note:
Loading a model from its configuration file does `),Uge=n(HZ,"STRONG",{});var Cht=s(Uge);Gjo=r(Cht,"not"),Cht.forEach(t),Ojo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(HZ,"A",{href:!0});var wht=s(YO);Vjo=r(wht,"from_pretrained()"),wht.forEach(t),Xjo=r(HZ," to load the model weights."),HZ.forEach(t),zjo=i(Z3),T(Ev.$$.fragment,Z3),Z3.forEach(t),Wjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(WA.$$.fragment,ia),Qjo=i(ia),Jge=n(ia,"P",{});var Aht=s(Jge);Hjo=r(Aht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Aht.forEach(t),Ujo=i(ia),Ba=n(ia,"P",{});var e0=s(Ba);Jjo=r(e0,"The model class to instantiate is selected based on the "),Yge=n(e0,"CODE",{});var yht=s(Yge);Yjo=r(yht,"model_type"),yht.forEach(t),Kjo=r(e0,` property of the config object (either
passed as an argument or loaded from `),Kge=n(e0,"CODE",{});var Lht=s(Kge);Zjo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),eDo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(e0,"CODE",{});var xht=s(Zge);oDo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),rDo=r(e0,":"),e0.forEach(t),tDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);Cv=n(Js,"LI",{});var t$e=s(Cv);ehe=n(t$e,"STRONG",{});var $ht=s(ehe);aDo=r($ht,"bert"),$ht.forEach(t),nDo=r(t$e," \u2014 "),KO=n(t$e,"A",{href:!0});var kht=s(KO);sDo=r(kht,"BertForNextSentencePrediction"),kht.forEach(t),lDo=r(t$e," (BERT model)"),t$e.forEach(t),iDo=i(Js),wv=n(Js,"LI",{});var a$e=s(wv);ohe=n(a$e,"STRONG",{});var Sht=s(ohe);dDo=r(Sht,"fnet"),Sht.forEach(t),cDo=r(a$e," \u2014 "),ZO=n(a$e,"A",{href:!0});var Rht=s(ZO);fDo=r(Rht,"FNetForNextSentencePrediction"),Rht.forEach(t),mDo=r(a$e," (FNet model)"),a$e.forEach(t),gDo=i(Js),Av=n(Js,"LI",{});var n$e=s(Av);rhe=n(n$e,"STRONG",{});var Pht=s(rhe);hDo=r(Pht,"megatron-bert"),Pht.forEach(t),pDo=r(n$e," \u2014 "),eV=n(n$e,"A",{href:!0});var Bht=s(eV);_Do=r(Bht,"MegatronBertForNextSentencePrediction"),Bht.forEach(t),uDo=r(n$e," (MegatronBert model)"),n$e.forEach(t),bDo=i(Js),yv=n(Js,"LI",{});var s$e=s(yv);the=n(s$e,"STRONG",{});var Iht=s(the);vDo=r(Iht,"mobilebert"),Iht.forEach(t),FDo=r(s$e," \u2014 "),oV=n(s$e,"A",{href:!0});var Nht=s(oV);TDo=r(Nht,"MobileBertForNextSentencePrediction"),Nht.forEach(t),MDo=r(s$e," (MobileBERT model)"),s$e.forEach(t),EDo=i(Js),Lv=n(Js,"LI",{});var l$e=s(Lv);ahe=n(l$e,"STRONG",{});var qht=s(ahe);CDo=r(qht,"qdqbert"),qht.forEach(t),wDo=r(l$e," \u2014 "),rV=n(l$e,"A",{href:!0});var jht=s(rV);ADo=r(jht,"QDQBertForNextSentencePrediction"),jht.forEach(t),yDo=r(l$e," (QDQBert model)"),l$e.forEach(t),Js.forEach(t),LDo=i(ia),xv=n(ia,"P",{});var i$e=s(xv);xDo=r(i$e,"The model is set in evaluation mode by default using "),nhe=n(i$e,"CODE",{});var Dht=s(nhe);$Do=r(Dht,"model.eval()"),Dht.forEach(t),kDo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(i$e,"CODE",{});var Ght=s(she);SDo=r(Ght,"model.train()"),Ght.forEach(t),i$e.forEach(t),RDo=i(ia),T($v.$$.fragment,ia),ia.forEach(t),Us.forEach(t),sje=i(f),Ji=n(f,"H2",{class:!0});var cGe=s(Ji);kv=n(cGe,"A",{id:!0,class:!0,href:!0});var Oht=s(kv);lhe=n(Oht,"SPAN",{});var Vht=s(lhe);T(QA.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),PDo=i(cGe),ihe=n(cGe,"SPAN",{});var Xht=s(ihe);BDo=r(Xht,"AutoModelForTokenClassification"),Xht.forEach(t),cGe.forEach(t),lje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(HA.$$.fragment,Ys),IDo=i(Ys),Yi=n(Ys,"P",{});var UZ=s(Yi);NDo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tV=n(UZ,"A",{href:!0});var zht=s(tV);qDo=r(zht,"from_pretrained()"),zht.forEach(t),jDo=r(UZ," class method or the "),aV=n(UZ,"A",{href:!0});var Wht=s(aV);DDo=r(Wht,"from_config()"),Wht.forEach(t),GDo=r(UZ,` class
method.`),UZ.forEach(t),ODo=i(Ys),UA=n(Ys,"P",{});var fGe=s(UA);VDo=r(fGe,"This class cannot be instantiated directly using "),dhe=n(fGe,"CODE",{});var Qht=s(dhe);XDo=r(Qht,"__init__()"),Qht.forEach(t),zDo=r(fGe," (throws an error)."),fGe.forEach(t),WDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var o0=s(ft);T(JA.$$.fragment,o0),QDo=i(o0),che=n(o0,"P",{});var Hht=s(che);HDo=r(Hht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hht.forEach(t),UDo=i(o0),Ki=n(o0,"P",{});var JZ=s(Ki);JDo=r(JZ,`Note:
Loading a model from its configuration file does `),fhe=n(JZ,"STRONG",{});var Uht=s(fhe);YDo=r(Uht,"not"),Uht.forEach(t),KDo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(JZ,"A",{href:!0});var Jht=s(nV);ZDo=r(Jht,"from_pretrained()"),Jht.forEach(t),eGo=r(JZ," to load the model weights."),JZ.forEach(t),oGo=i(o0),T(Sv.$$.fragment,o0),o0.forEach(t),rGo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(YA.$$.fragment,da),tGo=i(da),mhe=n(da,"P",{});var Yht=s(mhe);aGo=r(Yht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yht.forEach(t),nGo=i(da),Ia=n(da,"P",{});var r0=s(Ia);sGo=r(r0,"The model class to instantiate is selected based on the "),ghe=n(r0,"CODE",{});var Kht=s(ghe);lGo=r(Kht,"model_type"),Kht.forEach(t),iGo=r(r0,` property of the config object (either
passed as an argument or loaded from `),hhe=n(r0,"CODE",{});var Zht=s(hhe);dGo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),cGo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(r0,"CODE",{});var ept=s(phe);fGo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),mGo=r(r0,":"),r0.forEach(t),gGo=i(da),H=n(da,"UL",{});var J=s(H);Rv=n(J,"LI",{});var d$e=s(Rv);_he=n(d$e,"STRONG",{});var opt=s(_he);hGo=r(opt,"albert"),opt.forEach(t),pGo=r(d$e," \u2014 "),sV=n(d$e,"A",{href:!0});var rpt=s(sV);_Go=r(rpt,"AlbertForTokenClassification"),rpt.forEach(t),uGo=r(d$e," (ALBERT model)"),d$e.forEach(t),bGo=i(J),Pv=n(J,"LI",{});var c$e=s(Pv);uhe=n(c$e,"STRONG",{});var tpt=s(uhe);vGo=r(tpt,"bert"),tpt.forEach(t),FGo=r(c$e," \u2014 "),lV=n(c$e,"A",{href:!0});var apt=s(lV);TGo=r(apt,"BertForTokenClassification"),apt.forEach(t),MGo=r(c$e," (BERT model)"),c$e.forEach(t),EGo=i(J),Bv=n(J,"LI",{});var f$e=s(Bv);bhe=n(f$e,"STRONG",{});var npt=s(bhe);CGo=r(npt,"big_bird"),npt.forEach(t),wGo=r(f$e," \u2014 "),iV=n(f$e,"A",{href:!0});var spt=s(iV);AGo=r(spt,"BigBirdForTokenClassification"),spt.forEach(t),yGo=r(f$e," (BigBird model)"),f$e.forEach(t),LGo=i(J),Iv=n(J,"LI",{});var m$e=s(Iv);vhe=n(m$e,"STRONG",{});var lpt=s(vhe);xGo=r(lpt,"camembert"),lpt.forEach(t),$Go=r(m$e," \u2014 "),dV=n(m$e,"A",{href:!0});var ipt=s(dV);kGo=r(ipt,"CamembertForTokenClassification"),ipt.forEach(t),SGo=r(m$e," (CamemBERT model)"),m$e.forEach(t),RGo=i(J),Nv=n(J,"LI",{});var g$e=s(Nv);Fhe=n(g$e,"STRONG",{});var dpt=s(Fhe);PGo=r(dpt,"canine"),dpt.forEach(t),BGo=r(g$e," \u2014 "),cV=n(g$e,"A",{href:!0});var cpt=s(cV);IGo=r(cpt,"CanineForTokenClassification"),cpt.forEach(t),NGo=r(g$e," (Canine model)"),g$e.forEach(t),qGo=i(J),qv=n(J,"LI",{});var h$e=s(qv);The=n(h$e,"STRONG",{});var fpt=s(The);jGo=r(fpt,"convbert"),fpt.forEach(t),DGo=r(h$e," \u2014 "),fV=n(h$e,"A",{href:!0});var mpt=s(fV);GGo=r(mpt,"ConvBertForTokenClassification"),mpt.forEach(t),OGo=r(h$e," (ConvBERT model)"),h$e.forEach(t),VGo=i(J),jv=n(J,"LI",{});var p$e=s(jv);Mhe=n(p$e,"STRONG",{});var gpt=s(Mhe);XGo=r(gpt,"data2vec-text"),gpt.forEach(t),zGo=r(p$e," \u2014 "),mV=n(p$e,"A",{href:!0});var hpt=s(mV);WGo=r(hpt,"Data2VecTextForTokenClassification"),hpt.forEach(t),QGo=r(p$e," (Data2VecText model)"),p$e.forEach(t),HGo=i(J),Dv=n(J,"LI",{});var _$e=s(Dv);Ehe=n(_$e,"STRONG",{});var ppt=s(Ehe);UGo=r(ppt,"deberta"),ppt.forEach(t),JGo=r(_$e," \u2014 "),gV=n(_$e,"A",{href:!0});var _pt=s(gV);YGo=r(_pt,"DebertaForTokenClassification"),_pt.forEach(t),KGo=r(_$e," (DeBERTa model)"),_$e.forEach(t),ZGo=i(J),Gv=n(J,"LI",{});var u$e=s(Gv);Che=n(u$e,"STRONG",{});var upt=s(Che);eOo=r(upt,"deberta-v2"),upt.forEach(t),oOo=r(u$e," \u2014 "),hV=n(u$e,"A",{href:!0});var bpt=s(hV);rOo=r(bpt,"DebertaV2ForTokenClassification"),bpt.forEach(t),tOo=r(u$e," (DeBERTa-v2 model)"),u$e.forEach(t),aOo=i(J),Ov=n(J,"LI",{});var b$e=s(Ov);whe=n(b$e,"STRONG",{});var vpt=s(whe);nOo=r(vpt,"distilbert"),vpt.forEach(t),sOo=r(b$e," \u2014 "),pV=n(b$e,"A",{href:!0});var Fpt=s(pV);lOo=r(Fpt,"DistilBertForTokenClassification"),Fpt.forEach(t),iOo=r(b$e," (DistilBERT model)"),b$e.forEach(t),dOo=i(J),Vv=n(J,"LI",{});var v$e=s(Vv);Ahe=n(v$e,"STRONG",{});var Tpt=s(Ahe);cOo=r(Tpt,"electra"),Tpt.forEach(t),fOo=r(v$e," \u2014 "),_V=n(v$e,"A",{href:!0});var Mpt=s(_V);mOo=r(Mpt,"ElectraForTokenClassification"),Mpt.forEach(t),gOo=r(v$e," (ELECTRA model)"),v$e.forEach(t),hOo=i(J),Xv=n(J,"LI",{});var F$e=s(Xv);yhe=n(F$e,"STRONG",{});var Ept=s(yhe);pOo=r(Ept,"flaubert"),Ept.forEach(t),_Oo=r(F$e," \u2014 "),uV=n(F$e,"A",{href:!0});var Cpt=s(uV);uOo=r(Cpt,"FlaubertForTokenClassification"),Cpt.forEach(t),bOo=r(F$e," (FlauBERT model)"),F$e.forEach(t),vOo=i(J),zv=n(J,"LI",{});var T$e=s(zv);Lhe=n(T$e,"STRONG",{});var wpt=s(Lhe);FOo=r(wpt,"fnet"),wpt.forEach(t),TOo=r(T$e," \u2014 "),bV=n(T$e,"A",{href:!0});var Apt=s(bV);MOo=r(Apt,"FNetForTokenClassification"),Apt.forEach(t),EOo=r(T$e," (FNet model)"),T$e.forEach(t),COo=i(J),Wv=n(J,"LI",{});var M$e=s(Wv);xhe=n(M$e,"STRONG",{});var ypt=s(xhe);wOo=r(ypt,"funnel"),ypt.forEach(t),AOo=r(M$e," \u2014 "),vV=n(M$e,"A",{href:!0});var Lpt=s(vV);yOo=r(Lpt,"FunnelForTokenClassification"),Lpt.forEach(t),LOo=r(M$e," (Funnel Transformer model)"),M$e.forEach(t),xOo=i(J),Qv=n(J,"LI",{});var E$e=s(Qv);$he=n(E$e,"STRONG",{});var xpt=s($he);$Oo=r(xpt,"gpt2"),xpt.forEach(t),kOo=r(E$e," \u2014 "),FV=n(E$e,"A",{href:!0});var $pt=s(FV);SOo=r($pt,"GPT2ForTokenClassification"),$pt.forEach(t),ROo=r(E$e," (OpenAI GPT-2 model)"),E$e.forEach(t),POo=i(J),Hv=n(J,"LI",{});var C$e=s(Hv);khe=n(C$e,"STRONG",{});var kpt=s(khe);BOo=r(kpt,"ibert"),kpt.forEach(t),IOo=r(C$e," \u2014 "),TV=n(C$e,"A",{href:!0});var Spt=s(TV);NOo=r(Spt,"IBertForTokenClassification"),Spt.forEach(t),qOo=r(C$e," (I-BERT model)"),C$e.forEach(t),jOo=i(J),Uv=n(J,"LI",{});var w$e=s(Uv);She=n(w$e,"STRONG",{});var Rpt=s(She);DOo=r(Rpt,"layoutlm"),Rpt.forEach(t),GOo=r(w$e," \u2014 "),MV=n(w$e,"A",{href:!0});var Ppt=s(MV);OOo=r(Ppt,"LayoutLMForTokenClassification"),Ppt.forEach(t),VOo=r(w$e," (LayoutLM model)"),w$e.forEach(t),XOo=i(J),Jv=n(J,"LI",{});var A$e=s(Jv);Rhe=n(A$e,"STRONG",{});var Bpt=s(Rhe);zOo=r(Bpt,"layoutlmv2"),Bpt.forEach(t),WOo=r(A$e," \u2014 "),EV=n(A$e,"A",{href:!0});var Ipt=s(EV);QOo=r(Ipt,"LayoutLMv2ForTokenClassification"),Ipt.forEach(t),HOo=r(A$e," (LayoutLMv2 model)"),A$e.forEach(t),UOo=i(J),Yv=n(J,"LI",{});var y$e=s(Yv);Phe=n(y$e,"STRONG",{});var Npt=s(Phe);JOo=r(Npt,"layoutlmv3"),Npt.forEach(t),YOo=r(y$e," \u2014 "),CV=n(y$e,"A",{href:!0});var qpt=s(CV);KOo=r(qpt,"LayoutLMv3ForTokenClassification"),qpt.forEach(t),ZOo=r(y$e," (LayoutLMv3 model)"),y$e.forEach(t),eVo=i(J),Kv=n(J,"LI",{});var L$e=s(Kv);Bhe=n(L$e,"STRONG",{});var jpt=s(Bhe);oVo=r(jpt,"longformer"),jpt.forEach(t),rVo=r(L$e," \u2014 "),wV=n(L$e,"A",{href:!0});var Dpt=s(wV);tVo=r(Dpt,"LongformerForTokenClassification"),Dpt.forEach(t),aVo=r(L$e," (Longformer model)"),L$e.forEach(t),nVo=i(J),Zv=n(J,"LI",{});var x$e=s(Zv);Ihe=n(x$e,"STRONG",{});var Gpt=s(Ihe);sVo=r(Gpt,"megatron-bert"),Gpt.forEach(t),lVo=r(x$e," \u2014 "),AV=n(x$e,"A",{href:!0});var Opt=s(AV);iVo=r(Opt,"MegatronBertForTokenClassification"),Opt.forEach(t),dVo=r(x$e," (MegatronBert model)"),x$e.forEach(t),cVo=i(J),eF=n(J,"LI",{});var $$e=s(eF);Nhe=n($$e,"STRONG",{});var Vpt=s(Nhe);fVo=r(Vpt,"mobilebert"),Vpt.forEach(t),mVo=r($$e," \u2014 "),yV=n($$e,"A",{href:!0});var Xpt=s(yV);gVo=r(Xpt,"MobileBertForTokenClassification"),Xpt.forEach(t),hVo=r($$e," (MobileBERT model)"),$$e.forEach(t),pVo=i(J),oF=n(J,"LI",{});var k$e=s(oF);qhe=n(k$e,"STRONG",{});var zpt=s(qhe);_Vo=r(zpt,"mpnet"),zpt.forEach(t),uVo=r(k$e," \u2014 "),LV=n(k$e,"A",{href:!0});var Wpt=s(LV);bVo=r(Wpt,"MPNetForTokenClassification"),Wpt.forEach(t),vVo=r(k$e," (MPNet model)"),k$e.forEach(t),FVo=i(J),rF=n(J,"LI",{});var S$e=s(rF);jhe=n(S$e,"STRONG",{});var Qpt=s(jhe);TVo=r(Qpt,"nystromformer"),Qpt.forEach(t),MVo=r(S$e," \u2014 "),xV=n(S$e,"A",{href:!0});var Hpt=s(xV);EVo=r(Hpt,"NystromformerForTokenClassification"),Hpt.forEach(t),CVo=r(S$e," (Nystromformer model)"),S$e.forEach(t),wVo=i(J),tF=n(J,"LI",{});var R$e=s(tF);Dhe=n(R$e,"STRONG",{});var Upt=s(Dhe);AVo=r(Upt,"qdqbert"),Upt.forEach(t),yVo=r(R$e," \u2014 "),$V=n(R$e,"A",{href:!0});var Jpt=s($V);LVo=r(Jpt,"QDQBertForTokenClassification"),Jpt.forEach(t),xVo=r(R$e," (QDQBert model)"),R$e.forEach(t),$Vo=i(J),aF=n(J,"LI",{});var P$e=s(aF);Ghe=n(P$e,"STRONG",{});var Ypt=s(Ghe);kVo=r(Ypt,"rembert"),Ypt.forEach(t),SVo=r(P$e," \u2014 "),kV=n(P$e,"A",{href:!0});var Kpt=s(kV);RVo=r(Kpt,"RemBertForTokenClassification"),Kpt.forEach(t),PVo=r(P$e," (RemBERT model)"),P$e.forEach(t),BVo=i(J),nF=n(J,"LI",{});var B$e=s(nF);Ohe=n(B$e,"STRONG",{});var Zpt=s(Ohe);IVo=r(Zpt,"roberta"),Zpt.forEach(t),NVo=r(B$e," \u2014 "),SV=n(B$e,"A",{href:!0});var e_t=s(SV);qVo=r(e_t,"RobertaForTokenClassification"),e_t.forEach(t),jVo=r(B$e," (RoBERTa model)"),B$e.forEach(t),DVo=i(J),sF=n(J,"LI",{});var I$e=s(sF);Vhe=n(I$e,"STRONG",{});var o_t=s(Vhe);GVo=r(o_t,"roformer"),o_t.forEach(t),OVo=r(I$e," \u2014 "),RV=n(I$e,"A",{href:!0});var r_t=s(RV);VVo=r(r_t,"RoFormerForTokenClassification"),r_t.forEach(t),XVo=r(I$e," (RoFormer model)"),I$e.forEach(t),zVo=i(J),lF=n(J,"LI",{});var N$e=s(lF);Xhe=n(N$e,"STRONG",{});var t_t=s(Xhe);WVo=r(t_t,"squeezebert"),t_t.forEach(t),QVo=r(N$e," \u2014 "),PV=n(N$e,"A",{href:!0});var a_t=s(PV);HVo=r(a_t,"SqueezeBertForTokenClassification"),a_t.forEach(t),UVo=r(N$e," (SqueezeBERT model)"),N$e.forEach(t),JVo=i(J),iF=n(J,"LI",{});var q$e=s(iF);zhe=n(q$e,"STRONG",{});var n_t=s(zhe);YVo=r(n_t,"xlm"),n_t.forEach(t),KVo=r(q$e," \u2014 "),BV=n(q$e,"A",{href:!0});var s_t=s(BV);ZVo=r(s_t,"XLMForTokenClassification"),s_t.forEach(t),eXo=r(q$e," (XLM model)"),q$e.forEach(t),oXo=i(J),dF=n(J,"LI",{});var j$e=s(dF);Whe=n(j$e,"STRONG",{});var l_t=s(Whe);rXo=r(l_t,"xlm-roberta"),l_t.forEach(t),tXo=r(j$e," \u2014 "),IV=n(j$e,"A",{href:!0});var i_t=s(IV);aXo=r(i_t,"XLMRobertaForTokenClassification"),i_t.forEach(t),nXo=r(j$e," (XLM-RoBERTa model)"),j$e.forEach(t),sXo=i(J),cF=n(J,"LI",{});var D$e=s(cF);Qhe=n(D$e,"STRONG",{});var d_t=s(Qhe);lXo=r(d_t,"xlm-roberta-xl"),d_t.forEach(t),iXo=r(D$e," \u2014 "),NV=n(D$e,"A",{href:!0});var c_t=s(NV);dXo=r(c_t,"XLMRobertaXLForTokenClassification"),c_t.forEach(t),cXo=r(D$e," (XLM-RoBERTa-XL model)"),D$e.forEach(t),fXo=i(J),fF=n(J,"LI",{});var G$e=s(fF);Hhe=n(G$e,"STRONG",{});var f_t=s(Hhe);mXo=r(f_t,"xlnet"),f_t.forEach(t),gXo=r(G$e," \u2014 "),qV=n(G$e,"A",{href:!0});var m_t=s(qV);hXo=r(m_t,"XLNetForTokenClassification"),m_t.forEach(t),pXo=r(G$e," (XLNet model)"),G$e.forEach(t),_Xo=i(J),mF=n(J,"LI",{});var O$e=s(mF);Uhe=n(O$e,"STRONG",{});var g_t=s(Uhe);uXo=r(g_t,"yoso"),g_t.forEach(t),bXo=r(O$e," \u2014 "),jV=n(O$e,"A",{href:!0});var h_t=s(jV);vXo=r(h_t,"YosoForTokenClassification"),h_t.forEach(t),FXo=r(O$e," (YOSO model)"),O$e.forEach(t),J.forEach(t),TXo=i(da),gF=n(da,"P",{});var V$e=s(gF);MXo=r(V$e,"The model is set in evaluation mode by default using "),Jhe=n(V$e,"CODE",{});var p_t=s(Jhe);EXo=r(p_t,"model.eval()"),p_t.forEach(t),CXo=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(V$e,"CODE",{});var __t=s(Yhe);wXo=r(__t,"model.train()"),__t.forEach(t),V$e.forEach(t),AXo=i(da),T(hF.$$.fragment,da),da.forEach(t),Ys.forEach(t),ije=i(f),Zi=n(f,"H2",{class:!0});var mGe=s(Zi);pF=n(mGe,"A",{id:!0,class:!0,href:!0});var u_t=s(pF);Khe=n(u_t,"SPAN",{});var b_t=s(Khe);T(KA.$$.fragment,b_t),b_t.forEach(t),u_t.forEach(t),yXo=i(mGe),Zhe=n(mGe,"SPAN",{});var v_t=s(Zhe);LXo=r(v_t,"AutoModelForQuestionAnswering"),v_t.forEach(t),mGe.forEach(t),dje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(ZA.$$.fragment,Ks),xXo=i(Ks),ed=n(Ks,"P",{});var YZ=s(ed);$Xo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DV=n(YZ,"A",{href:!0});var F_t=s(DV);kXo=r(F_t,"from_pretrained()"),F_t.forEach(t),SXo=r(YZ," class method or the "),GV=n(YZ,"A",{href:!0});var T_t=s(GV);RXo=r(T_t,"from_config()"),T_t.forEach(t),PXo=r(YZ,` class
method.`),YZ.forEach(t),BXo=i(Ks),ey=n(Ks,"P",{});var gGe=s(ey);IXo=r(gGe,"This class cannot be instantiated directly using "),epe=n(gGe,"CODE",{});var M_t=s(epe);NXo=r(M_t,"__init__()"),M_t.forEach(t),qXo=r(gGe," (throws an error)."),gGe.forEach(t),jXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var t0=s(mt);T(oy.$$.fragment,t0),DXo=i(t0),ope=n(t0,"P",{});var E_t=s(ope);GXo=r(E_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E_t.forEach(t),OXo=i(t0),od=n(t0,"P",{});var KZ=s(od);VXo=r(KZ,`Note:
Loading a model from its configuration file does `),rpe=n(KZ,"STRONG",{});var C_t=s(rpe);XXo=r(C_t,"not"),C_t.forEach(t),zXo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(KZ,"A",{href:!0});var w_t=s(OV);WXo=r(w_t,"from_pretrained()"),w_t.forEach(t),QXo=r(KZ," to load the model weights."),KZ.forEach(t),HXo=i(t0),T(_F.$$.fragment,t0),t0.forEach(t),UXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(ry.$$.fragment,ca),JXo=i(ca),tpe=n(ca,"P",{});var A_t=s(tpe);YXo=r(A_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A_t.forEach(t),KXo=i(ca),Na=n(ca,"P",{});var a0=s(Na);ZXo=r(a0,"The model class to instantiate is selected based on the "),ape=n(a0,"CODE",{});var y_t=s(ape);ezo=r(y_t,"model_type"),y_t.forEach(t),ozo=r(a0,` property of the config object (either
passed as an argument or loaded from `),npe=n(a0,"CODE",{});var L_t=s(npe);rzo=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),tzo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(a0,"CODE",{});var x_t=s(spe);azo=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),nzo=r(a0,":"),a0.forEach(t),szo=i(ca),V=n(ca,"UL",{});var X=s(V);uF=n(X,"LI",{});var X$e=s(uF);lpe=n(X$e,"STRONG",{});var $_t=s(lpe);lzo=r($_t,"albert"),$_t.forEach(t),izo=r(X$e," \u2014 "),VV=n(X$e,"A",{href:!0});var k_t=s(VV);dzo=r(k_t,"AlbertForQuestionAnswering"),k_t.forEach(t),czo=r(X$e," (ALBERT model)"),X$e.forEach(t),fzo=i(X),bF=n(X,"LI",{});var z$e=s(bF);ipe=n(z$e,"STRONG",{});var S_t=s(ipe);mzo=r(S_t,"bart"),S_t.forEach(t),gzo=r(z$e," \u2014 "),XV=n(z$e,"A",{href:!0});var R_t=s(XV);hzo=r(R_t,"BartForQuestionAnswering"),R_t.forEach(t),pzo=r(z$e," (BART model)"),z$e.forEach(t),_zo=i(X),vF=n(X,"LI",{});var W$e=s(vF);dpe=n(W$e,"STRONG",{});var P_t=s(dpe);uzo=r(P_t,"bert"),P_t.forEach(t),bzo=r(W$e," \u2014 "),zV=n(W$e,"A",{href:!0});var B_t=s(zV);vzo=r(B_t,"BertForQuestionAnswering"),B_t.forEach(t),Fzo=r(W$e," (BERT model)"),W$e.forEach(t),Tzo=i(X),FF=n(X,"LI",{});var Q$e=s(FF);cpe=n(Q$e,"STRONG",{});var I_t=s(cpe);Mzo=r(I_t,"big_bird"),I_t.forEach(t),Ezo=r(Q$e," \u2014 "),WV=n(Q$e,"A",{href:!0});var N_t=s(WV);Czo=r(N_t,"BigBirdForQuestionAnswering"),N_t.forEach(t),wzo=r(Q$e," (BigBird model)"),Q$e.forEach(t),Azo=i(X),TF=n(X,"LI",{});var H$e=s(TF);fpe=n(H$e,"STRONG",{});var q_t=s(fpe);yzo=r(q_t,"bigbird_pegasus"),q_t.forEach(t),Lzo=r(H$e," \u2014 "),QV=n(H$e,"A",{href:!0});var j_t=s(QV);xzo=r(j_t,"BigBirdPegasusForQuestionAnswering"),j_t.forEach(t),$zo=r(H$e," (BigBirdPegasus model)"),H$e.forEach(t),kzo=i(X),MF=n(X,"LI",{});var U$e=s(MF);mpe=n(U$e,"STRONG",{});var D_t=s(mpe);Szo=r(D_t,"camembert"),D_t.forEach(t),Rzo=r(U$e," \u2014 "),HV=n(U$e,"A",{href:!0});var G_t=s(HV);Pzo=r(G_t,"CamembertForQuestionAnswering"),G_t.forEach(t),Bzo=r(U$e," (CamemBERT model)"),U$e.forEach(t),Izo=i(X),EF=n(X,"LI",{});var J$e=s(EF);gpe=n(J$e,"STRONG",{});var O_t=s(gpe);Nzo=r(O_t,"canine"),O_t.forEach(t),qzo=r(J$e," \u2014 "),UV=n(J$e,"A",{href:!0});var V_t=s(UV);jzo=r(V_t,"CanineForQuestionAnswering"),V_t.forEach(t),Dzo=r(J$e," (Canine model)"),J$e.forEach(t),Gzo=i(X),CF=n(X,"LI",{});var Y$e=s(CF);hpe=n(Y$e,"STRONG",{});var X_t=s(hpe);Ozo=r(X_t,"convbert"),X_t.forEach(t),Vzo=r(Y$e," \u2014 "),JV=n(Y$e,"A",{href:!0});var z_t=s(JV);Xzo=r(z_t,"ConvBertForQuestionAnswering"),z_t.forEach(t),zzo=r(Y$e," (ConvBERT model)"),Y$e.forEach(t),Wzo=i(X),wF=n(X,"LI",{});var K$e=s(wF);ppe=n(K$e,"STRONG",{});var W_t=s(ppe);Qzo=r(W_t,"data2vec-text"),W_t.forEach(t),Hzo=r(K$e," \u2014 "),YV=n(K$e,"A",{href:!0});var Q_t=s(YV);Uzo=r(Q_t,"Data2VecTextForQuestionAnswering"),Q_t.forEach(t),Jzo=r(K$e," (Data2VecText model)"),K$e.forEach(t),Yzo=i(X),AF=n(X,"LI",{});var Z$e=s(AF);_pe=n(Z$e,"STRONG",{});var H_t=s(_pe);Kzo=r(H_t,"deberta"),H_t.forEach(t),Zzo=r(Z$e," \u2014 "),KV=n(Z$e,"A",{href:!0});var U_t=s(KV);eWo=r(U_t,"DebertaForQuestionAnswering"),U_t.forEach(t),oWo=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),rWo=i(X),yF=n(X,"LI",{});var eke=s(yF);upe=n(eke,"STRONG",{});var J_t=s(upe);tWo=r(J_t,"deberta-v2"),J_t.forEach(t),aWo=r(eke," \u2014 "),ZV=n(eke,"A",{href:!0});var Y_t=s(ZV);nWo=r(Y_t,"DebertaV2ForQuestionAnswering"),Y_t.forEach(t),sWo=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),lWo=i(X),LF=n(X,"LI",{});var oke=s(LF);bpe=n(oke,"STRONG",{});var K_t=s(bpe);iWo=r(K_t,"distilbert"),K_t.forEach(t),dWo=r(oke," \u2014 "),eX=n(oke,"A",{href:!0});var Z_t=s(eX);cWo=r(Z_t,"DistilBertForQuestionAnswering"),Z_t.forEach(t),fWo=r(oke," (DistilBERT model)"),oke.forEach(t),mWo=i(X),xF=n(X,"LI",{});var rke=s(xF);vpe=n(rke,"STRONG",{});var eut=s(vpe);gWo=r(eut,"electra"),eut.forEach(t),hWo=r(rke," \u2014 "),oX=n(rke,"A",{href:!0});var out=s(oX);pWo=r(out,"ElectraForQuestionAnswering"),out.forEach(t),_Wo=r(rke," (ELECTRA model)"),rke.forEach(t),uWo=i(X),$F=n(X,"LI",{});var tke=s($F);Fpe=n(tke,"STRONG",{});var rut=s(Fpe);bWo=r(rut,"flaubert"),rut.forEach(t),vWo=r(tke," \u2014 "),rX=n(tke,"A",{href:!0});var tut=s(rX);FWo=r(tut,"FlaubertForQuestionAnsweringSimple"),tut.forEach(t),TWo=r(tke," (FlauBERT model)"),tke.forEach(t),MWo=i(X),kF=n(X,"LI",{});var ake=s(kF);Tpe=n(ake,"STRONG",{});var aut=s(Tpe);EWo=r(aut,"fnet"),aut.forEach(t),CWo=r(ake," \u2014 "),tX=n(ake,"A",{href:!0});var nut=s(tX);wWo=r(nut,"FNetForQuestionAnswering"),nut.forEach(t),AWo=r(ake," (FNet model)"),ake.forEach(t),yWo=i(X),SF=n(X,"LI",{});var nke=s(SF);Mpe=n(nke,"STRONG",{});var sut=s(Mpe);LWo=r(sut,"funnel"),sut.forEach(t),xWo=r(nke," \u2014 "),aX=n(nke,"A",{href:!0});var lut=s(aX);$Wo=r(lut,"FunnelForQuestionAnswering"),lut.forEach(t),kWo=r(nke," (Funnel Transformer model)"),nke.forEach(t),SWo=i(X),RF=n(X,"LI",{});var ske=s(RF);Epe=n(ske,"STRONG",{});var iut=s(Epe);RWo=r(iut,"gptj"),iut.forEach(t),PWo=r(ske," \u2014 "),nX=n(ske,"A",{href:!0});var dut=s(nX);BWo=r(dut,"GPTJForQuestionAnswering"),dut.forEach(t),IWo=r(ske," (GPT-J model)"),ske.forEach(t),NWo=i(X),PF=n(X,"LI",{});var lke=s(PF);Cpe=n(lke,"STRONG",{});var cut=s(Cpe);qWo=r(cut,"ibert"),cut.forEach(t),jWo=r(lke," \u2014 "),sX=n(lke,"A",{href:!0});var fut=s(sX);DWo=r(fut,"IBertForQuestionAnswering"),fut.forEach(t),GWo=r(lke," (I-BERT model)"),lke.forEach(t),OWo=i(X),BF=n(X,"LI",{});var ike=s(BF);wpe=n(ike,"STRONG",{});var mut=s(wpe);VWo=r(mut,"layoutlmv2"),mut.forEach(t),XWo=r(ike," \u2014 "),lX=n(ike,"A",{href:!0});var gut=s(lX);zWo=r(gut,"LayoutLMv2ForQuestionAnswering"),gut.forEach(t),WWo=r(ike," (LayoutLMv2 model)"),ike.forEach(t),QWo=i(X),IF=n(X,"LI",{});var dke=s(IF);Ape=n(dke,"STRONG",{});var hut=s(Ape);HWo=r(hut,"layoutlmv3"),hut.forEach(t),UWo=r(dke," \u2014 "),iX=n(dke,"A",{href:!0});var put=s(iX);JWo=r(put,"LayoutLMv3ForQuestionAnswering"),put.forEach(t),YWo=r(dke," (LayoutLMv3 model)"),dke.forEach(t),KWo=i(X),NF=n(X,"LI",{});var cke=s(NF);ype=n(cke,"STRONG",{});var _ut=s(ype);ZWo=r(_ut,"led"),_ut.forEach(t),eQo=r(cke," \u2014 "),dX=n(cke,"A",{href:!0});var uut=s(dX);oQo=r(uut,"LEDForQuestionAnswering"),uut.forEach(t),rQo=r(cke," (LED model)"),cke.forEach(t),tQo=i(X),qF=n(X,"LI",{});var fke=s(qF);Lpe=n(fke,"STRONG",{});var but=s(Lpe);aQo=r(but,"longformer"),but.forEach(t),nQo=r(fke," \u2014 "),cX=n(fke,"A",{href:!0});var vut=s(cX);sQo=r(vut,"LongformerForQuestionAnswering"),vut.forEach(t),lQo=r(fke," (Longformer model)"),fke.forEach(t),iQo=i(X),jF=n(X,"LI",{});var mke=s(jF);xpe=n(mke,"STRONG",{});var Fut=s(xpe);dQo=r(Fut,"lxmert"),Fut.forEach(t),cQo=r(mke," \u2014 "),fX=n(mke,"A",{href:!0});var Tut=s(fX);fQo=r(Tut,"LxmertForQuestionAnswering"),Tut.forEach(t),mQo=r(mke," (LXMERT model)"),mke.forEach(t),gQo=i(X),DF=n(X,"LI",{});var gke=s(DF);$pe=n(gke,"STRONG",{});var Mut=s($pe);hQo=r(Mut,"mbart"),Mut.forEach(t),pQo=r(gke," \u2014 "),mX=n(gke,"A",{href:!0});var Eut=s(mX);_Qo=r(Eut,"MBartForQuestionAnswering"),Eut.forEach(t),uQo=r(gke," (mBART model)"),gke.forEach(t),bQo=i(X),GF=n(X,"LI",{});var hke=s(GF);kpe=n(hke,"STRONG",{});var Cut=s(kpe);vQo=r(Cut,"megatron-bert"),Cut.forEach(t),FQo=r(hke," \u2014 "),gX=n(hke,"A",{href:!0});var wut=s(gX);TQo=r(wut,"MegatronBertForQuestionAnswering"),wut.forEach(t),MQo=r(hke," (MegatronBert model)"),hke.forEach(t),EQo=i(X),OF=n(X,"LI",{});var pke=s(OF);Spe=n(pke,"STRONG",{});var Aut=s(Spe);CQo=r(Aut,"mobilebert"),Aut.forEach(t),wQo=r(pke," \u2014 "),hX=n(pke,"A",{href:!0});var yut=s(hX);AQo=r(yut,"MobileBertForQuestionAnswering"),yut.forEach(t),yQo=r(pke," (MobileBERT model)"),pke.forEach(t),LQo=i(X),VF=n(X,"LI",{});var _ke=s(VF);Rpe=n(_ke,"STRONG",{});var Lut=s(Rpe);xQo=r(Lut,"mpnet"),Lut.forEach(t),$Qo=r(_ke," \u2014 "),pX=n(_ke,"A",{href:!0});var xut=s(pX);kQo=r(xut,"MPNetForQuestionAnswering"),xut.forEach(t),SQo=r(_ke," (MPNet model)"),_ke.forEach(t),RQo=i(X),XF=n(X,"LI",{});var uke=s(XF);Ppe=n(uke,"STRONG",{});var $ut=s(Ppe);PQo=r($ut,"nystromformer"),$ut.forEach(t),BQo=r(uke," \u2014 "),_X=n(uke,"A",{href:!0});var kut=s(_X);IQo=r(kut,"NystromformerForQuestionAnswering"),kut.forEach(t),NQo=r(uke," (Nystromformer model)"),uke.forEach(t),qQo=i(X),zF=n(X,"LI",{});var bke=s(zF);Bpe=n(bke,"STRONG",{});var Sut=s(Bpe);jQo=r(Sut,"qdqbert"),Sut.forEach(t),DQo=r(bke," \u2014 "),uX=n(bke,"A",{href:!0});var Rut=s(uX);GQo=r(Rut,"QDQBertForQuestionAnswering"),Rut.forEach(t),OQo=r(bke," (QDQBert model)"),bke.forEach(t),VQo=i(X),WF=n(X,"LI",{});var vke=s(WF);Ipe=n(vke,"STRONG",{});var Put=s(Ipe);XQo=r(Put,"reformer"),Put.forEach(t),zQo=r(vke," \u2014 "),bX=n(vke,"A",{href:!0});var But=s(bX);WQo=r(But,"ReformerForQuestionAnswering"),But.forEach(t),QQo=r(vke," (Reformer model)"),vke.forEach(t),HQo=i(X),QF=n(X,"LI",{});var Fke=s(QF);Npe=n(Fke,"STRONG",{});var Iut=s(Npe);UQo=r(Iut,"rembert"),Iut.forEach(t),JQo=r(Fke," \u2014 "),vX=n(Fke,"A",{href:!0});var Nut=s(vX);YQo=r(Nut,"RemBertForQuestionAnswering"),Nut.forEach(t),KQo=r(Fke," (RemBERT model)"),Fke.forEach(t),ZQo=i(X),HF=n(X,"LI",{});var Tke=s(HF);qpe=n(Tke,"STRONG",{});var qut=s(qpe);eHo=r(qut,"roberta"),qut.forEach(t),oHo=r(Tke," \u2014 "),FX=n(Tke,"A",{href:!0});var jut=s(FX);rHo=r(jut,"RobertaForQuestionAnswering"),jut.forEach(t),tHo=r(Tke," (RoBERTa model)"),Tke.forEach(t),aHo=i(X),UF=n(X,"LI",{});var Mke=s(UF);jpe=n(Mke,"STRONG",{});var Dut=s(jpe);nHo=r(Dut,"roformer"),Dut.forEach(t),sHo=r(Mke," \u2014 "),TX=n(Mke,"A",{href:!0});var Gut=s(TX);lHo=r(Gut,"RoFormerForQuestionAnswering"),Gut.forEach(t),iHo=r(Mke," (RoFormer model)"),Mke.forEach(t),dHo=i(X),JF=n(X,"LI",{});var Eke=s(JF);Dpe=n(Eke,"STRONG",{});var Out=s(Dpe);cHo=r(Out,"splinter"),Out.forEach(t),fHo=r(Eke," \u2014 "),MX=n(Eke,"A",{href:!0});var Vut=s(MX);mHo=r(Vut,"SplinterForQuestionAnswering"),Vut.forEach(t),gHo=r(Eke," (Splinter model)"),Eke.forEach(t),hHo=i(X),YF=n(X,"LI",{});var Cke=s(YF);Gpe=n(Cke,"STRONG",{});var Xut=s(Gpe);pHo=r(Xut,"squeezebert"),Xut.forEach(t),_Ho=r(Cke," \u2014 "),EX=n(Cke,"A",{href:!0});var zut=s(EX);uHo=r(zut,"SqueezeBertForQuestionAnswering"),zut.forEach(t),bHo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),vHo=i(X),KF=n(X,"LI",{});var wke=s(KF);Ope=n(wke,"STRONG",{});var Wut=s(Ope);FHo=r(Wut,"xlm"),Wut.forEach(t),THo=r(wke," \u2014 "),CX=n(wke,"A",{href:!0});var Qut=s(CX);MHo=r(Qut,"XLMForQuestionAnsweringSimple"),Qut.forEach(t),EHo=r(wke," (XLM model)"),wke.forEach(t),CHo=i(X),ZF=n(X,"LI",{});var Ake=s(ZF);Vpe=n(Ake,"STRONG",{});var Hut=s(Vpe);wHo=r(Hut,"xlm-roberta"),Hut.forEach(t),AHo=r(Ake," \u2014 "),wX=n(Ake,"A",{href:!0});var Uut=s(wX);yHo=r(Uut,"XLMRobertaForQuestionAnswering"),Uut.forEach(t),LHo=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),xHo=i(X),e6=n(X,"LI",{});var yke=s(e6);Xpe=n(yke,"STRONG",{});var Jut=s(Xpe);$Ho=r(Jut,"xlm-roberta-xl"),Jut.forEach(t),kHo=r(yke," \u2014 "),AX=n(yke,"A",{href:!0});var Yut=s(AX);SHo=r(Yut,"XLMRobertaXLForQuestionAnswering"),Yut.forEach(t),RHo=r(yke," (XLM-RoBERTa-XL model)"),yke.forEach(t),PHo=i(X),o6=n(X,"LI",{});var Lke=s(o6);zpe=n(Lke,"STRONG",{});var Kut=s(zpe);BHo=r(Kut,"xlnet"),Kut.forEach(t),IHo=r(Lke," \u2014 "),yX=n(Lke,"A",{href:!0});var Zut=s(yX);NHo=r(Zut,"XLNetForQuestionAnsweringSimple"),Zut.forEach(t),qHo=r(Lke," (XLNet model)"),Lke.forEach(t),jHo=i(X),r6=n(X,"LI",{});var xke=s(r6);Wpe=n(xke,"STRONG",{});var e2t=s(Wpe);DHo=r(e2t,"yoso"),e2t.forEach(t),GHo=r(xke," \u2014 "),LX=n(xke,"A",{href:!0});var o2t=s(LX);OHo=r(o2t,"YosoForQuestionAnswering"),o2t.forEach(t),VHo=r(xke," (YOSO model)"),xke.forEach(t),X.forEach(t),XHo=i(ca),t6=n(ca,"P",{});var $ke=s(t6);zHo=r($ke,"The model is set in evaluation mode by default using "),Qpe=n($ke,"CODE",{});var r2t=s(Qpe);WHo=r(r2t,"model.eval()"),r2t.forEach(t),QHo=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n($ke,"CODE",{});var t2t=s(Hpe);HHo=r(t2t,"model.train()"),t2t.forEach(t),$ke.forEach(t),UHo=i(ca),T(a6.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),cje=i(f),rd=n(f,"H2",{class:!0});var hGe=s(rd);n6=n(hGe,"A",{id:!0,class:!0,href:!0});var a2t=s(n6);Upe=n(a2t,"SPAN",{});var n2t=s(Upe);T(ty.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),JHo=i(hGe),Jpe=n(hGe,"SPAN",{});var s2t=s(Jpe);YHo=r(s2t,"AutoModelForTableQuestionAnswering"),s2t.forEach(t),hGe.forEach(t),fje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(ay.$$.fragment,Zs),KHo=i(Zs),td=n(Zs,"P",{});var ZZ=s(td);ZHo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xX=n(ZZ,"A",{href:!0});var l2t=s(xX);eUo=r(l2t,"from_pretrained()"),l2t.forEach(t),oUo=r(ZZ," class method or the "),$X=n(ZZ,"A",{href:!0});var i2t=s($X);rUo=r(i2t,"from_config()"),i2t.forEach(t),tUo=r(ZZ,` class
method.`),ZZ.forEach(t),aUo=i(Zs),ny=n(Zs,"P",{});var pGe=s(ny);nUo=r(pGe,"This class cannot be instantiated directly using "),Ype=n(pGe,"CODE",{});var d2t=s(Ype);sUo=r(d2t,"__init__()"),d2t.forEach(t),lUo=r(pGe," (throws an error)."),pGe.forEach(t),iUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var n0=s(gt);T(sy.$$.fragment,n0),dUo=i(n0),Kpe=n(n0,"P",{});var c2t=s(Kpe);cUo=r(c2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),c2t.forEach(t),fUo=i(n0),ad=n(n0,"P",{});var eee=s(ad);mUo=r(eee,`Note:
Loading a model from its configuration file does `),Zpe=n(eee,"STRONG",{});var f2t=s(Zpe);gUo=r(f2t,"not"),f2t.forEach(t),hUo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(eee,"A",{href:!0});var m2t=s(kX);pUo=r(m2t,"from_pretrained()"),m2t.forEach(t),_Uo=r(eee," to load the model weights."),eee.forEach(t),uUo=i(n0),T(s6.$$.fragment,n0),n0.forEach(t),bUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(ly.$$.fragment,fa),vUo=i(fa),e_e=n(fa,"P",{});var g2t=s(e_e);FUo=r(g2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),g2t.forEach(t),TUo=i(fa),qa=n(fa,"P",{});var s0=s(qa);MUo=r(s0,"The model class to instantiate is selected based on the "),o_e=n(s0,"CODE",{});var h2t=s(o_e);EUo=r(h2t,"model_type"),h2t.forEach(t),CUo=r(s0,` property of the config object (either
passed as an argument or loaded from `),r_e=n(s0,"CODE",{});var p2t=s(r_e);wUo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),AUo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(s0,"CODE",{});var _2t=s(t_e);yUo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),LUo=r(s0,":"),s0.forEach(t),xUo=i(fa),a_e=n(fa,"UL",{});var u2t=s(a_e);l6=n(u2t,"LI",{});var kke=s(l6);n_e=n(kke,"STRONG",{});var b2t=s(n_e);$Uo=r(b2t,"tapas"),b2t.forEach(t),kUo=r(kke," \u2014 "),SX=n(kke,"A",{href:!0});var v2t=s(SX);SUo=r(v2t,"TapasForQuestionAnswering"),v2t.forEach(t),RUo=r(kke," (TAPAS model)"),kke.forEach(t),u2t.forEach(t),PUo=i(fa),i6=n(fa,"P",{});var Ske=s(i6);BUo=r(Ske,"The model is set in evaluation mode by default using "),s_e=n(Ske,"CODE",{});var F2t=s(s_e);IUo=r(F2t,"model.eval()"),F2t.forEach(t),NUo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(Ske,"CODE",{});var T2t=s(l_e);qUo=r(T2t,"model.train()"),T2t.forEach(t),Ske.forEach(t),jUo=i(fa),T(d6.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),mje=i(f),nd=n(f,"H2",{class:!0});var _Ge=s(nd);c6=n(_Ge,"A",{id:!0,class:!0,href:!0});var M2t=s(c6);i_e=n(M2t,"SPAN",{});var E2t=s(i_e);T(iy.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),DUo=i(_Ge),d_e=n(_Ge,"SPAN",{});var C2t=s(d_e);GUo=r(C2t,"AutoModelForImageClassification"),C2t.forEach(t),_Ge.forEach(t),gje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(dy.$$.fragment,el),OUo=i(el),sd=n(el,"P",{});var oee=s(sd);VUo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RX=n(oee,"A",{href:!0});var w2t=s(RX);XUo=r(w2t,"from_pretrained()"),w2t.forEach(t),zUo=r(oee," class method or the "),PX=n(oee,"A",{href:!0});var A2t=s(PX);WUo=r(A2t,"from_config()"),A2t.forEach(t),QUo=r(oee,` class
method.`),oee.forEach(t),HUo=i(el),cy=n(el,"P",{});var uGe=s(cy);UUo=r(uGe,"This class cannot be instantiated directly using "),c_e=n(uGe,"CODE",{});var y2t=s(c_e);JUo=r(y2t,"__init__()"),y2t.forEach(t),YUo=r(uGe," (throws an error)."),uGe.forEach(t),KUo=i(el),ht=n(el,"DIV",{class:!0});var l0=s(ht);T(fy.$$.fragment,l0),ZUo=i(l0),f_e=n(l0,"P",{});var L2t=s(f_e);eJo=r(L2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),L2t.forEach(t),oJo=i(l0),ld=n(l0,"P",{});var ree=s(ld);rJo=r(ree,`Note:
Loading a model from its configuration file does `),m_e=n(ree,"STRONG",{});var x2t=s(m_e);tJo=r(x2t,"not"),x2t.forEach(t),aJo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(ree,"A",{href:!0});var $2t=s(BX);nJo=r($2t,"from_pretrained()"),$2t.forEach(t),sJo=r(ree," to load the model weights."),ree.forEach(t),lJo=i(l0),T(f6.$$.fragment,l0),l0.forEach(t),iJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(my.$$.fragment,ma),dJo=i(ma),g_e=n(ma,"P",{});var k2t=s(g_e);cJo=r(k2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),k2t.forEach(t),fJo=i(ma),ja=n(ma,"P",{});var i0=s(ja);mJo=r(i0,"The model class to instantiate is selected based on the "),h_e=n(i0,"CODE",{});var S2t=s(h_e);gJo=r(S2t,"model_type"),S2t.forEach(t),hJo=r(i0,` property of the config object (either
passed as an argument or loaded from `),p_e=n(i0,"CODE",{});var R2t=s(p_e);pJo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),_Jo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(i0,"CODE",{});var P2t=s(__e);uJo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),bJo=r(i0,":"),i0.forEach(t),vJo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);m6=n(Me,"LI",{});var Rke=s(m6);u_e=n(Rke,"STRONG",{});var B2t=s(u_e);FJo=r(B2t,"beit"),B2t.forEach(t),TJo=r(Rke," \u2014 "),IX=n(Rke,"A",{href:!0});var I2t=s(IX);MJo=r(I2t,"BeitForImageClassification"),I2t.forEach(t),EJo=r(Rke," (BEiT model)"),Rke.forEach(t),CJo=i(Me),g6=n(Me,"LI",{});var Pke=s(g6);b_e=n(Pke,"STRONG",{});var N2t=s(b_e);wJo=r(N2t,"convnext"),N2t.forEach(t),AJo=r(Pke," \u2014 "),NX=n(Pke,"A",{href:!0});var q2t=s(NX);yJo=r(q2t,"ConvNextForImageClassification"),q2t.forEach(t),LJo=r(Pke," (ConvNext model)"),Pke.forEach(t),xJo=i(Me),h6=n(Me,"LI",{});var Bke=s(h6);v_e=n(Bke,"STRONG",{});var j2t=s(v_e);$Jo=r(j2t,"cvt"),j2t.forEach(t),kJo=r(Bke," \u2014 "),qX=n(Bke,"A",{href:!0});var D2t=s(qX);SJo=r(D2t,"CvtForImageClassification"),D2t.forEach(t),RJo=r(Bke," (CvT model)"),Bke.forEach(t),PJo=i(Me),p6=n(Me,"LI",{});var Ike=s(p6);F_e=n(Ike,"STRONG",{});var G2t=s(F_e);BJo=r(G2t,"data2vec-vision"),G2t.forEach(t),IJo=r(Ike," \u2014 "),jX=n(Ike,"A",{href:!0});var O2t=s(jX);NJo=r(O2t,"Data2VecVisionForImageClassification"),O2t.forEach(t),qJo=r(Ike," (Data2VecVision model)"),Ike.forEach(t),jJo=i(Me),Is=n(Me,"LI",{});var K$=s(Is);T_e=n(K$,"STRONG",{});var V2t=s(T_e);DJo=r(V2t,"deit"),V2t.forEach(t),GJo=r(K$," \u2014 "),DX=n(K$,"A",{href:!0});var X2t=s(DX);OJo=r(X2t,"DeiTForImageClassification"),X2t.forEach(t),VJo=r(K$," or "),GX=n(K$,"A",{href:!0});var z2t=s(GX);XJo=r(z2t,"DeiTForImageClassificationWithTeacher"),z2t.forEach(t),zJo=r(K$," (DeiT model)"),K$.forEach(t),WJo=i(Me),_6=n(Me,"LI",{});var Nke=s(_6);M_e=n(Nke,"STRONG",{});var W2t=s(M_e);QJo=r(W2t,"imagegpt"),W2t.forEach(t),HJo=r(Nke," \u2014 "),OX=n(Nke,"A",{href:!0});var Q2t=s(OX);UJo=r(Q2t,"ImageGPTForImageClassification"),Q2t.forEach(t),JJo=r(Nke," (ImageGPT model)"),Nke.forEach(t),YJo=i(Me),pt=n(Me,"LI",{});var pf=s(pt);E_e=n(pf,"STRONG",{});var H2t=s(E_e);KJo=r(H2t,"perceiver"),H2t.forEach(t),ZJo=r(pf," \u2014 "),VX=n(pf,"A",{href:!0});var U2t=s(VX);eYo=r(U2t,"PerceiverForImageClassificationLearned"),U2t.forEach(t),oYo=r(pf," or "),XX=n(pf,"A",{href:!0});var J2t=s(XX);rYo=r(J2t,"PerceiverForImageClassificationFourier"),J2t.forEach(t),tYo=r(pf," or "),zX=n(pf,"A",{href:!0});var Y2t=s(zX);aYo=r(Y2t,"PerceiverForImageClassificationConvProcessing"),Y2t.forEach(t),nYo=r(pf," (Perceiver model)"),pf.forEach(t),sYo=i(Me),u6=n(Me,"LI",{});var qke=s(u6);C_e=n(qke,"STRONG",{});var K2t=s(C_e);lYo=r(K2t,"poolformer"),K2t.forEach(t),iYo=r(qke," \u2014 "),WX=n(qke,"A",{href:!0});var Z2t=s(WX);dYo=r(Z2t,"PoolFormerForImageClassification"),Z2t.forEach(t),cYo=r(qke," (PoolFormer model)"),qke.forEach(t),fYo=i(Me),b6=n(Me,"LI",{});var jke=s(b6);w_e=n(jke,"STRONG",{});var e1t=s(w_e);mYo=r(e1t,"regnet"),e1t.forEach(t),gYo=r(jke," \u2014 "),QX=n(jke,"A",{href:!0});var o1t=s(QX);hYo=r(o1t,"RegNetForImageClassification"),o1t.forEach(t),pYo=r(jke," (RegNet model)"),jke.forEach(t),_Yo=i(Me),v6=n(Me,"LI",{});var Dke=s(v6);A_e=n(Dke,"STRONG",{});var r1t=s(A_e);uYo=r(r1t,"resnet"),r1t.forEach(t),bYo=r(Dke," \u2014 "),HX=n(Dke,"A",{href:!0});var t1t=s(HX);vYo=r(t1t,"ResNetForImageClassification"),t1t.forEach(t),FYo=r(Dke," (ResNet model)"),Dke.forEach(t),TYo=i(Me),F6=n(Me,"LI",{});var Gke=s(F6);y_e=n(Gke,"STRONG",{});var a1t=s(y_e);MYo=r(a1t,"segformer"),a1t.forEach(t),EYo=r(Gke," \u2014 "),UX=n(Gke,"A",{href:!0});var n1t=s(UX);CYo=r(n1t,"SegformerForImageClassification"),n1t.forEach(t),wYo=r(Gke," (SegFormer model)"),Gke.forEach(t),AYo=i(Me),T6=n(Me,"LI",{});var Oke=s(T6);L_e=n(Oke,"STRONG",{});var s1t=s(L_e);yYo=r(s1t,"swin"),s1t.forEach(t),LYo=r(Oke," \u2014 "),JX=n(Oke,"A",{href:!0});var l1t=s(JX);xYo=r(l1t,"SwinForImageClassification"),l1t.forEach(t),$Yo=r(Oke," (Swin model)"),Oke.forEach(t),kYo=i(Me),M6=n(Me,"LI",{});var Vke=s(M6);x_e=n(Vke,"STRONG",{});var i1t=s(x_e);SYo=r(i1t,"van"),i1t.forEach(t),RYo=r(Vke," \u2014 "),YX=n(Vke,"A",{href:!0});var d1t=s(YX);PYo=r(d1t,"VanForImageClassification"),d1t.forEach(t),BYo=r(Vke," (VAN model)"),Vke.forEach(t),IYo=i(Me),E6=n(Me,"LI",{});var Xke=s(E6);$_e=n(Xke,"STRONG",{});var c1t=s($_e);NYo=r(c1t,"vit"),c1t.forEach(t),qYo=r(Xke," \u2014 "),KX=n(Xke,"A",{href:!0});var f1t=s(KX);jYo=r(f1t,"ViTForImageClassification"),f1t.forEach(t),DYo=r(Xke," (ViT model)"),Xke.forEach(t),Me.forEach(t),GYo=i(ma),C6=n(ma,"P",{});var zke=s(C6);OYo=r(zke,"The model is set in evaluation mode by default using "),k_e=n(zke,"CODE",{});var m1t=s(k_e);VYo=r(m1t,"model.eval()"),m1t.forEach(t),XYo=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(zke,"CODE",{});var g1t=s(S_e);zYo=r(g1t,"model.train()"),g1t.forEach(t),zke.forEach(t),WYo=i(ma),T(w6.$$.fragment,ma),ma.forEach(t),el.forEach(t),hje=i(f),id=n(f,"H2",{class:!0});var bGe=s(id);A6=n(bGe,"A",{id:!0,class:!0,href:!0});var h1t=s(A6);R_e=n(h1t,"SPAN",{});var p1t=s(R_e);T(gy.$$.fragment,p1t),p1t.forEach(t),h1t.forEach(t),QYo=i(bGe),P_e=n(bGe,"SPAN",{});var _1t=s(P_e);HYo=r(_1t,"AutoModelForVision2Seq"),_1t.forEach(t),bGe.forEach(t),pje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(hy.$$.fragment,ol),UYo=i(ol),dd=n(ol,"P",{});var tee=s(dd);JYo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZX=n(tee,"A",{href:!0});var u1t=s(ZX);YYo=r(u1t,"from_pretrained()"),u1t.forEach(t),KYo=r(tee," class method or the "),ez=n(tee,"A",{href:!0});var b1t=s(ez);ZYo=r(b1t,"from_config()"),b1t.forEach(t),eKo=r(tee,` class
method.`),tee.forEach(t),oKo=i(ol),py=n(ol,"P",{});var vGe=s(py);rKo=r(vGe,"This class cannot be instantiated directly using "),B_e=n(vGe,"CODE",{});var v1t=s(B_e);tKo=r(v1t,"__init__()"),v1t.forEach(t),aKo=r(vGe," (throws an error)."),vGe.forEach(t),nKo=i(ol),_t=n(ol,"DIV",{class:!0});var d0=s(_t);T(_y.$$.fragment,d0),sKo=i(d0),I_e=n(d0,"P",{});var F1t=s(I_e);lKo=r(F1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F1t.forEach(t),iKo=i(d0),cd=n(d0,"P",{});var aee=s(cd);dKo=r(aee,`Note:
Loading a model from its configuration file does `),N_e=n(aee,"STRONG",{});var T1t=s(N_e);cKo=r(T1t,"not"),T1t.forEach(t),fKo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(aee,"A",{href:!0});var M1t=s(oz);mKo=r(M1t,"from_pretrained()"),M1t.forEach(t),gKo=r(aee," to load the model weights."),aee.forEach(t),hKo=i(d0),T(y6.$$.fragment,d0),d0.forEach(t),pKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(uy.$$.fragment,ga),_Ko=i(ga),q_e=n(ga,"P",{});var E1t=s(q_e);uKo=r(E1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),E1t.forEach(t),bKo=i(ga),Da=n(ga,"P",{});var c0=s(Da);vKo=r(c0,"The model class to instantiate is selected based on the "),j_e=n(c0,"CODE",{});var C1t=s(j_e);FKo=r(C1t,"model_type"),C1t.forEach(t),TKo=r(c0,` property of the config object (either
passed as an argument or loaded from `),D_e=n(c0,"CODE",{});var w1t=s(D_e);MKo=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),EKo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(c0,"CODE",{});var A1t=s(G_e);CKo=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),wKo=r(c0,":"),c0.forEach(t),AKo=i(ga),O_e=n(ga,"UL",{});var y1t=s(O_e);L6=n(y1t,"LI",{});var Wke=s(L6);V_e=n(Wke,"STRONG",{});var L1t=s(V_e);yKo=r(L1t,"vision-encoder-decoder"),L1t.forEach(t),LKo=r(Wke," \u2014 "),rz=n(Wke,"A",{href:!0});var x1t=s(rz);xKo=r(x1t,"VisionEncoderDecoderModel"),x1t.forEach(t),$Ko=r(Wke," (Vision Encoder decoder model)"),Wke.forEach(t),y1t.forEach(t),kKo=i(ga),x6=n(ga,"P",{});var Qke=s(x6);SKo=r(Qke,"The model is set in evaluation mode by default using "),X_e=n(Qke,"CODE",{});var $1t=s(X_e);RKo=r($1t,"model.eval()"),$1t.forEach(t),PKo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(Qke,"CODE",{});var k1t=s(z_e);BKo=r(k1t,"model.train()"),k1t.forEach(t),Qke.forEach(t),IKo=i(ga),T($6.$$.fragment,ga),ga.forEach(t),ol.forEach(t),_je=i(f),fd=n(f,"H2",{class:!0});var FGe=s(fd);k6=n(FGe,"A",{id:!0,class:!0,href:!0});var S1t=s(k6);W_e=n(S1t,"SPAN",{});var R1t=s(W_e);T(by.$$.fragment,R1t),R1t.forEach(t),S1t.forEach(t),NKo=i(FGe),Q_e=n(FGe,"SPAN",{});var P1t=s(Q_e);qKo=r(P1t,"AutoModelForAudioClassification"),P1t.forEach(t),FGe.forEach(t),uje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(vy.$$.fragment,rl),jKo=i(rl),md=n(rl,"P",{});var nee=s(md);DKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tz=n(nee,"A",{href:!0});var B1t=s(tz);GKo=r(B1t,"from_pretrained()"),B1t.forEach(t),OKo=r(nee," class method or the "),az=n(nee,"A",{href:!0});var I1t=s(az);VKo=r(I1t,"from_config()"),I1t.forEach(t),XKo=r(nee,` class
method.`),nee.forEach(t),zKo=i(rl),Fy=n(rl,"P",{});var TGe=s(Fy);WKo=r(TGe,"This class cannot be instantiated directly using "),H_e=n(TGe,"CODE",{});var N1t=s(H_e);QKo=r(N1t,"__init__()"),N1t.forEach(t),HKo=r(TGe," (throws an error)."),TGe.forEach(t),UKo=i(rl),ut=n(rl,"DIV",{class:!0});var f0=s(ut);T(Ty.$$.fragment,f0),JKo=i(f0),U_e=n(f0,"P",{});var q1t=s(U_e);YKo=r(q1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),q1t.forEach(t),KKo=i(f0),gd=n(f0,"P",{});var see=s(gd);ZKo=r(see,`Note:
Loading a model from its configuration file does `),J_e=n(see,"STRONG",{});var j1t=s(J_e);eZo=r(j1t,"not"),j1t.forEach(t),oZo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(see,"A",{href:!0});var D1t=s(nz);rZo=r(D1t,"from_pretrained()"),D1t.forEach(t),tZo=r(see," to load the model weights."),see.forEach(t),aZo=i(f0),T(S6.$$.fragment,f0),f0.forEach(t),nZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(My.$$.fragment,ha),sZo=i(ha),Y_e=n(ha,"P",{});var G1t=s(Y_e);lZo=r(G1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),G1t.forEach(t),iZo=i(ha),Ga=n(ha,"P",{});var m0=s(Ga);dZo=r(m0,"The model class to instantiate is selected based on the "),K_e=n(m0,"CODE",{});var O1t=s(K_e);cZo=r(O1t,"model_type"),O1t.forEach(t),fZo=r(m0,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(m0,"CODE",{});var V1t=s(Z_e);mZo=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),gZo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(m0,"CODE",{});var X1t=s(eue);hZo=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),pZo=r(m0,":"),m0.forEach(t),_Zo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);R6=n(Ve,"LI",{});var Hke=s(R6);oue=n(Hke,"STRONG",{});var z1t=s(oue);uZo=r(z1t,"data2vec-audio"),z1t.forEach(t),bZo=r(Hke," \u2014 "),sz=n(Hke,"A",{href:!0});var W1t=s(sz);vZo=r(W1t,"Data2VecAudioForSequenceClassification"),W1t.forEach(t),FZo=r(Hke," (Data2VecAudio model)"),Hke.forEach(t),TZo=i(Ve),P6=n(Ve,"LI",{});var Uke=s(P6);rue=n(Uke,"STRONG",{});var Q1t=s(rue);MZo=r(Q1t,"hubert"),Q1t.forEach(t),EZo=r(Uke," \u2014 "),lz=n(Uke,"A",{href:!0});var H1t=s(lz);CZo=r(H1t,"HubertForSequenceClassification"),H1t.forEach(t),wZo=r(Uke," (Hubert model)"),Uke.forEach(t),AZo=i(Ve),B6=n(Ve,"LI",{});var Jke=s(B6);tue=n(Jke,"STRONG",{});var U1t=s(tue);yZo=r(U1t,"sew"),U1t.forEach(t),LZo=r(Jke," \u2014 "),iz=n(Jke,"A",{href:!0});var J1t=s(iz);xZo=r(J1t,"SEWForSequenceClassification"),J1t.forEach(t),$Zo=r(Jke," (SEW model)"),Jke.forEach(t),kZo=i(Ve),I6=n(Ve,"LI",{});var Yke=s(I6);aue=n(Yke,"STRONG",{});var Y1t=s(aue);SZo=r(Y1t,"sew-d"),Y1t.forEach(t),RZo=r(Yke," \u2014 "),dz=n(Yke,"A",{href:!0});var K1t=s(dz);PZo=r(K1t,"SEWDForSequenceClassification"),K1t.forEach(t),BZo=r(Yke," (SEW-D model)"),Yke.forEach(t),IZo=i(Ve),N6=n(Ve,"LI",{});var Kke=s(N6);nue=n(Kke,"STRONG",{});var Z1t=s(nue);NZo=r(Z1t,"unispeech"),Z1t.forEach(t),qZo=r(Kke," \u2014 "),cz=n(Kke,"A",{href:!0});var ebt=s(cz);jZo=r(ebt,"UniSpeechForSequenceClassification"),ebt.forEach(t),DZo=r(Kke," (UniSpeech model)"),Kke.forEach(t),GZo=i(Ve),q6=n(Ve,"LI",{});var Zke=s(q6);sue=n(Zke,"STRONG",{});var obt=s(sue);OZo=r(obt,"unispeech-sat"),obt.forEach(t),VZo=r(Zke," \u2014 "),fz=n(Zke,"A",{href:!0});var rbt=s(fz);XZo=r(rbt,"UniSpeechSatForSequenceClassification"),rbt.forEach(t),zZo=r(Zke," (UniSpeechSat model)"),Zke.forEach(t),WZo=i(Ve),j6=n(Ve,"LI",{});var eSe=s(j6);lue=n(eSe,"STRONG",{});var tbt=s(lue);QZo=r(tbt,"wav2vec2"),tbt.forEach(t),HZo=r(eSe," \u2014 "),mz=n(eSe,"A",{href:!0});var abt=s(mz);UZo=r(abt,"Wav2Vec2ForSequenceClassification"),abt.forEach(t),JZo=r(eSe," (Wav2Vec2 model)"),eSe.forEach(t),YZo=i(Ve),D6=n(Ve,"LI",{});var oSe=s(D6);iue=n(oSe,"STRONG",{});var nbt=s(iue);KZo=r(nbt,"wav2vec2-conformer"),nbt.forEach(t),ZZo=r(oSe," \u2014 "),gz=n(oSe,"A",{href:!0});var sbt=s(gz);eer=r(sbt,"Wav2Vec2ConformerForSequenceClassification"),sbt.forEach(t),oer=r(oSe," (Wav2Vec2-Conformer model)"),oSe.forEach(t),rer=i(Ve),G6=n(Ve,"LI",{});var rSe=s(G6);due=n(rSe,"STRONG",{});var lbt=s(due);ter=r(lbt,"wavlm"),lbt.forEach(t),aer=r(rSe," \u2014 "),hz=n(rSe,"A",{href:!0});var ibt=s(hz);ner=r(ibt,"WavLMForSequenceClassification"),ibt.forEach(t),ser=r(rSe," (WavLM model)"),rSe.forEach(t),Ve.forEach(t),ler=i(ha),O6=n(ha,"P",{});var tSe=s(O6);ier=r(tSe,"The model is set in evaluation mode by default using "),cue=n(tSe,"CODE",{});var dbt=s(cue);der=r(dbt,"model.eval()"),dbt.forEach(t),cer=r(tSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(tSe,"CODE",{});var cbt=s(fue);fer=r(cbt,"model.train()"),cbt.forEach(t),tSe.forEach(t),mer=i(ha),T(V6.$$.fragment,ha),ha.forEach(t),rl.forEach(t),bje=i(f),hd=n(f,"H2",{class:!0});var MGe=s(hd);X6=n(MGe,"A",{id:!0,class:!0,href:!0});var fbt=s(X6);mue=n(fbt,"SPAN",{});var mbt=s(mue);T(Ey.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),ger=i(MGe),gue=n(MGe,"SPAN",{});var gbt=s(gue);her=r(gbt,"AutoModelForAudioFrameClassification"),gbt.forEach(t),MGe.forEach(t),vje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(Cy.$$.fragment,tl),per=i(tl),pd=n(tl,"P",{});var lee=s(pd);_er=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pz=n(lee,"A",{href:!0});var hbt=s(pz);uer=r(hbt,"from_pretrained()"),hbt.forEach(t),ber=r(lee," class method or the "),_z=n(lee,"A",{href:!0});var pbt=s(_z);ver=r(pbt,"from_config()"),pbt.forEach(t),Fer=r(lee,` class
method.`),lee.forEach(t),Ter=i(tl),wy=n(tl,"P",{});var EGe=s(wy);Mer=r(EGe,"This class cannot be instantiated directly using "),hue=n(EGe,"CODE",{});var _bt=s(hue);Eer=r(_bt,"__init__()"),_bt.forEach(t),Cer=r(EGe," (throws an error)."),EGe.forEach(t),wer=i(tl),bt=n(tl,"DIV",{class:!0});var g0=s(bt);T(Ay.$$.fragment,g0),Aer=i(g0),pue=n(g0,"P",{});var ubt=s(pue);yer=r(ubt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ubt.forEach(t),Ler=i(g0),_d=n(g0,"P",{});var iee=s(_d);xer=r(iee,`Note:
Loading a model from its configuration file does `),_ue=n(iee,"STRONG",{});var bbt=s(_ue);$er=r(bbt,"not"),bbt.forEach(t),ker=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(iee,"A",{href:!0});var vbt=s(uz);Ser=r(vbt,"from_pretrained()"),vbt.forEach(t),Rer=r(iee," to load the model weights."),iee.forEach(t),Per=i(g0),T(z6.$$.fragment,g0),g0.forEach(t),Ber=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(yy.$$.fragment,pa),Ier=i(pa),uue=n(pa,"P",{});var Fbt=s(uue);Ner=r(Fbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fbt.forEach(t),qer=i(pa),Oa=n(pa,"P",{});var h0=s(Oa);jer=r(h0,"The model class to instantiate is selected based on the "),bue=n(h0,"CODE",{});var Tbt=s(bue);Der=r(Tbt,"model_type"),Tbt.forEach(t),Ger=r(h0,` property of the config object (either
passed as an argument or loaded from `),vue=n(h0,"CODE",{});var Mbt=s(vue);Oer=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),Ver=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(h0,"CODE",{});var Ebt=s(Fue);Xer=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),zer=r(h0,":"),h0.forEach(t),Wer=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);W6=n(al,"LI",{});var aSe=s(W6);Tue=n(aSe,"STRONG",{});var Cbt=s(Tue);Qer=r(Cbt,"data2vec-audio"),Cbt.forEach(t),Her=r(aSe," \u2014 "),bz=n(aSe,"A",{href:!0});var wbt=s(bz);Uer=r(wbt,"Data2VecAudioForAudioFrameClassification"),wbt.forEach(t),Jer=r(aSe," (Data2VecAudio model)"),aSe.forEach(t),Yer=i(al),Q6=n(al,"LI",{});var nSe=s(Q6);Mue=n(nSe,"STRONG",{});var Abt=s(Mue);Ker=r(Abt,"unispeech-sat"),Abt.forEach(t),Zer=r(nSe," \u2014 "),vz=n(nSe,"A",{href:!0});var ybt=s(vz);eor=r(ybt,"UniSpeechSatForAudioFrameClassification"),ybt.forEach(t),oor=r(nSe," (UniSpeechSat model)"),nSe.forEach(t),ror=i(al),H6=n(al,"LI",{});var sSe=s(H6);Eue=n(sSe,"STRONG",{});var Lbt=s(Eue);tor=r(Lbt,"wav2vec2"),Lbt.forEach(t),aor=r(sSe," \u2014 "),Fz=n(sSe,"A",{href:!0});var xbt=s(Fz);nor=r(xbt,"Wav2Vec2ForAudioFrameClassification"),xbt.forEach(t),sor=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),lor=i(al),U6=n(al,"LI",{});var lSe=s(U6);Cue=n(lSe,"STRONG",{});var $bt=s(Cue);ior=r($bt,"wav2vec2-conformer"),$bt.forEach(t),dor=r(lSe," \u2014 "),Tz=n(lSe,"A",{href:!0});var kbt=s(Tz);cor=r(kbt,"Wav2Vec2ConformerForAudioFrameClassification"),kbt.forEach(t),mor=r(lSe," (Wav2Vec2-Conformer model)"),lSe.forEach(t),gor=i(al),J6=n(al,"LI",{});var iSe=s(J6);wue=n(iSe,"STRONG",{});var Sbt=s(wue);hor=r(Sbt,"wavlm"),Sbt.forEach(t),por=r(iSe," \u2014 "),Mz=n(iSe,"A",{href:!0});var Rbt=s(Mz);_or=r(Rbt,"WavLMForAudioFrameClassification"),Rbt.forEach(t),uor=r(iSe," (WavLM model)"),iSe.forEach(t),al.forEach(t),bor=i(pa),Y6=n(pa,"P",{});var dSe=s(Y6);vor=r(dSe,"The model is set in evaluation mode by default using "),Aue=n(dSe,"CODE",{});var Pbt=s(Aue);For=r(Pbt,"model.eval()"),Pbt.forEach(t),Tor=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(dSe,"CODE",{});var Bbt=s(yue);Mor=r(Bbt,"model.train()"),Bbt.forEach(t),dSe.forEach(t),Eor=i(pa),T(K6.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Fje=i(f),ud=n(f,"H2",{class:!0});var CGe=s(ud);Z6=n(CGe,"A",{id:!0,class:!0,href:!0});var Ibt=s(Z6);Lue=n(Ibt,"SPAN",{});var Nbt=s(Lue);T(Ly.$$.fragment,Nbt),Nbt.forEach(t),Ibt.forEach(t),Cor=i(CGe),xue=n(CGe,"SPAN",{});var qbt=s(xue);wor=r(qbt,"AutoModelForCTC"),qbt.forEach(t),CGe.forEach(t),Tje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(xy.$$.fragment,nl),Aor=i(nl),bd=n(nl,"P",{});var dee=s(bd);yor=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ez=n(dee,"A",{href:!0});var jbt=s(Ez);Lor=r(jbt,"from_pretrained()"),jbt.forEach(t),xor=r(dee," class method or the "),Cz=n(dee,"A",{href:!0});var Dbt=s(Cz);$or=r(Dbt,"from_config()"),Dbt.forEach(t),kor=r(dee,` class
method.`),dee.forEach(t),Sor=i(nl),$y=n(nl,"P",{});var wGe=s($y);Ror=r(wGe,"This class cannot be instantiated directly using "),$ue=n(wGe,"CODE",{});var Gbt=s($ue);Por=r(Gbt,"__init__()"),Gbt.forEach(t),Bor=r(wGe," (throws an error)."),wGe.forEach(t),Ior=i(nl),vt=n(nl,"DIV",{class:!0});var p0=s(vt);T(ky.$$.fragment,p0),Nor=i(p0),kue=n(p0,"P",{});var Obt=s(kue);qor=r(Obt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Obt.forEach(t),jor=i(p0),vd=n(p0,"P",{});var cee=s(vd);Dor=r(cee,`Note:
Loading a model from its configuration file does `),Sue=n(cee,"STRONG",{});var Vbt=s(Sue);Gor=r(Vbt,"not"),Vbt.forEach(t),Oor=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(cee,"A",{href:!0});var Xbt=s(wz);Vor=r(Xbt,"from_pretrained()"),Xbt.forEach(t),Xor=r(cee," to load the model weights."),cee.forEach(t),zor=i(p0),T(eT.$$.fragment,p0),p0.forEach(t),Wor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(Sy.$$.fragment,_a),Qor=i(_a),Rue=n(_a,"P",{});var zbt=s(Rue);Hor=r(zbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zbt.forEach(t),Uor=i(_a),Va=n(_a,"P",{});var _0=s(Va);Jor=r(_0,"The model class to instantiate is selected based on the "),Pue=n(_0,"CODE",{});var Wbt=s(Pue);Yor=r(Wbt,"model_type"),Wbt.forEach(t),Kor=r(_0,` property of the config object (either
passed as an argument or loaded from `),Bue=n(_0,"CODE",{});var Qbt=s(Bue);Zor=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),err=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(_0,"CODE",{});var Hbt=s(Iue);orr=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),rrr=r(_0,":"),_0.forEach(t),trr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);oT=n(Xe,"LI",{});var cSe=s(oT);Nue=n(cSe,"STRONG",{});var Ubt=s(Nue);arr=r(Ubt,"data2vec-audio"),Ubt.forEach(t),nrr=r(cSe," \u2014 "),Az=n(cSe,"A",{href:!0});var Jbt=s(Az);srr=r(Jbt,"Data2VecAudioForCTC"),Jbt.forEach(t),lrr=r(cSe," (Data2VecAudio model)"),cSe.forEach(t),irr=i(Xe),rT=n(Xe,"LI",{});var fSe=s(rT);que=n(fSe,"STRONG",{});var Ybt=s(que);drr=r(Ybt,"hubert"),Ybt.forEach(t),crr=r(fSe," \u2014 "),yz=n(fSe,"A",{href:!0});var Kbt=s(yz);frr=r(Kbt,"HubertForCTC"),Kbt.forEach(t),mrr=r(fSe," (Hubert model)"),fSe.forEach(t),grr=i(Xe),tT=n(Xe,"LI",{});var mSe=s(tT);jue=n(mSe,"STRONG",{});var Zbt=s(jue);hrr=r(Zbt,"sew"),Zbt.forEach(t),prr=r(mSe," \u2014 "),Lz=n(mSe,"A",{href:!0});var evt=s(Lz);_rr=r(evt,"SEWForCTC"),evt.forEach(t),urr=r(mSe," (SEW model)"),mSe.forEach(t),brr=i(Xe),aT=n(Xe,"LI",{});var gSe=s(aT);Due=n(gSe,"STRONG",{});var ovt=s(Due);vrr=r(ovt,"sew-d"),ovt.forEach(t),Frr=r(gSe," \u2014 "),xz=n(gSe,"A",{href:!0});var rvt=s(xz);Trr=r(rvt,"SEWDForCTC"),rvt.forEach(t),Mrr=r(gSe," (SEW-D model)"),gSe.forEach(t),Err=i(Xe),nT=n(Xe,"LI",{});var hSe=s(nT);Gue=n(hSe,"STRONG",{});var tvt=s(Gue);Crr=r(tvt,"unispeech"),tvt.forEach(t),wrr=r(hSe," \u2014 "),$z=n(hSe,"A",{href:!0});var avt=s($z);Arr=r(avt,"UniSpeechForCTC"),avt.forEach(t),yrr=r(hSe," (UniSpeech model)"),hSe.forEach(t),Lrr=i(Xe),sT=n(Xe,"LI",{});var pSe=s(sT);Oue=n(pSe,"STRONG",{});var nvt=s(Oue);xrr=r(nvt,"unispeech-sat"),nvt.forEach(t),$rr=r(pSe," \u2014 "),kz=n(pSe,"A",{href:!0});var svt=s(kz);krr=r(svt,"UniSpeechSatForCTC"),svt.forEach(t),Srr=r(pSe," (UniSpeechSat model)"),pSe.forEach(t),Rrr=i(Xe),lT=n(Xe,"LI",{});var _Se=s(lT);Vue=n(_Se,"STRONG",{});var lvt=s(Vue);Prr=r(lvt,"wav2vec2"),lvt.forEach(t),Brr=r(_Se," \u2014 "),Sz=n(_Se,"A",{href:!0});var ivt=s(Sz);Irr=r(ivt,"Wav2Vec2ForCTC"),ivt.forEach(t),Nrr=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),qrr=i(Xe),iT=n(Xe,"LI",{});var uSe=s(iT);Xue=n(uSe,"STRONG",{});var dvt=s(Xue);jrr=r(dvt,"wav2vec2-conformer"),dvt.forEach(t),Drr=r(uSe," \u2014 "),Rz=n(uSe,"A",{href:!0});var cvt=s(Rz);Grr=r(cvt,"Wav2Vec2ConformerForCTC"),cvt.forEach(t),Orr=r(uSe," (Wav2Vec2-Conformer model)"),uSe.forEach(t),Vrr=i(Xe),dT=n(Xe,"LI",{});var bSe=s(dT);zue=n(bSe,"STRONG",{});var fvt=s(zue);Xrr=r(fvt,"wavlm"),fvt.forEach(t),zrr=r(bSe," \u2014 "),Pz=n(bSe,"A",{href:!0});var mvt=s(Pz);Wrr=r(mvt,"WavLMForCTC"),mvt.forEach(t),Qrr=r(bSe," (WavLM model)"),bSe.forEach(t),Xe.forEach(t),Hrr=i(_a),cT=n(_a,"P",{});var vSe=s(cT);Urr=r(vSe,"The model is set in evaluation mode by default using "),Wue=n(vSe,"CODE",{});var gvt=s(Wue);Jrr=r(gvt,"model.eval()"),gvt.forEach(t),Yrr=r(vSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(vSe,"CODE",{});var hvt=s(Que);Krr=r(hvt,"model.train()"),hvt.forEach(t),vSe.forEach(t),Zrr=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Mje=i(f),Fd=n(f,"H2",{class:!0});var AGe=s(Fd);mT=n(AGe,"A",{id:!0,class:!0,href:!0});var pvt=s(mT);Hue=n(pvt,"SPAN",{});var _vt=s(Hue);T(Ry.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),etr=i(AGe),Uue=n(AGe,"SPAN",{});var uvt=s(Uue);otr=r(uvt,"AutoModelForSpeechSeq2Seq"),uvt.forEach(t),AGe.forEach(t),Eje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Py.$$.fragment,sl),rtr=i(sl),Td=n(sl,"P",{});var fee=s(Td);ttr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Bz=n(fee,"A",{href:!0});var bvt=s(Bz);atr=r(bvt,"from_pretrained()"),bvt.forEach(t),ntr=r(fee," class method or the "),Iz=n(fee,"A",{href:!0});var vvt=s(Iz);str=r(vvt,"from_config()"),vvt.forEach(t),ltr=r(fee,` class
method.`),fee.forEach(t),itr=i(sl),By=n(sl,"P",{});var yGe=s(By);dtr=r(yGe,"This class cannot be instantiated directly using "),Jue=n(yGe,"CODE",{});var Fvt=s(Jue);ctr=r(Fvt,"__init__()"),Fvt.forEach(t),ftr=r(yGe," (throws an error)."),yGe.forEach(t),mtr=i(sl),Ft=n(sl,"DIV",{class:!0});var u0=s(Ft);T(Iy.$$.fragment,u0),gtr=i(u0),Yue=n(u0,"P",{});var Tvt=s(Yue);htr=r(Tvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tvt.forEach(t),ptr=i(u0),Md=n(u0,"P",{});var mee=s(Md);_tr=r(mee,`Note:
Loading a model from its configuration file does `),Kue=n(mee,"STRONG",{});var Mvt=s(Kue);utr=r(Mvt,"not"),Mvt.forEach(t),btr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(mee,"A",{href:!0});var Evt=s(Nz);vtr=r(Evt,"from_pretrained()"),Evt.forEach(t),Ftr=r(mee," to load the model weights."),mee.forEach(t),Ttr=i(u0),T(gT.$$.fragment,u0),u0.forEach(t),Mtr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(Ny.$$.fragment,ua),Etr=i(ua),Zue=n(ua,"P",{});var Cvt=s(Zue);Ctr=r(Cvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cvt.forEach(t),wtr=i(ua),Xa=n(ua,"P",{});var b0=s(Xa);Atr=r(b0,"The model class to instantiate is selected based on the "),e2e=n(b0,"CODE",{});var wvt=s(e2e);ytr=r(wvt,"model_type"),wvt.forEach(t),Ltr=r(b0,` property of the config object (either
passed as an argument or loaded from `),o2e=n(b0,"CODE",{});var Avt=s(o2e);xtr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),$tr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(b0,"CODE",{});var yvt=s(r2e);ktr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),Str=r(b0,":"),b0.forEach(t),Rtr=i(ua),qy=n(ua,"UL",{});var LGe=s(qy);hT=n(LGe,"LI",{});var FSe=s(hT);t2e=n(FSe,"STRONG",{});var Lvt=s(t2e);Ptr=r(Lvt,"speech-encoder-decoder"),Lvt.forEach(t),Btr=r(FSe," \u2014 "),qz=n(FSe,"A",{href:!0});var xvt=s(qz);Itr=r(xvt,"SpeechEncoderDecoderModel"),xvt.forEach(t),Ntr=r(FSe," (Speech Encoder decoder model)"),FSe.forEach(t),qtr=i(LGe),pT=n(LGe,"LI",{});var TSe=s(pT);a2e=n(TSe,"STRONG",{});var $vt=s(a2e);jtr=r($vt,"speech_to_text"),$vt.forEach(t),Dtr=r(TSe," \u2014 "),jz=n(TSe,"A",{href:!0});var kvt=s(jz);Gtr=r(kvt,"Speech2TextForConditionalGeneration"),kvt.forEach(t),Otr=r(TSe," (Speech2Text model)"),TSe.forEach(t),LGe.forEach(t),Vtr=i(ua),_T=n(ua,"P",{});var MSe=s(_T);Xtr=r(MSe,"The model is set in evaluation mode by default using "),n2e=n(MSe,"CODE",{});var Svt=s(n2e);ztr=r(Svt,"model.eval()"),Svt.forEach(t),Wtr=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(MSe,"CODE",{});var Rvt=s(s2e);Qtr=r(Rvt,"model.train()"),Rvt.forEach(t),MSe.forEach(t),Htr=i(ua),T(uT.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Cje=i(f),Ed=n(f,"H2",{class:!0});var xGe=s(Ed);bT=n(xGe,"A",{id:!0,class:!0,href:!0});var Pvt=s(bT);l2e=n(Pvt,"SPAN",{});var Bvt=s(l2e);T(jy.$$.fragment,Bvt),Bvt.forEach(t),Pvt.forEach(t),Utr=i(xGe),i2e=n(xGe,"SPAN",{});var Ivt=s(i2e);Jtr=r(Ivt,"AutoModelForAudioXVector"),Ivt.forEach(t),xGe.forEach(t),wje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Dy.$$.fragment,ll),Ytr=i(ll),Cd=n(ll,"P",{});var gee=s(Cd);Ktr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dz=n(gee,"A",{href:!0});var Nvt=s(Dz);Ztr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),ear=r(gee," class method or the "),Gz=n(gee,"A",{href:!0});var qvt=s(Gz);oar=r(qvt,"from_config()"),qvt.forEach(t),rar=r(gee,` class
method.`),gee.forEach(t),tar=i(ll),Gy=n(ll,"P",{});var $Ge=s(Gy);aar=r($Ge,"This class cannot be instantiated directly using "),d2e=n($Ge,"CODE",{});var jvt=s(d2e);nar=r(jvt,"__init__()"),jvt.forEach(t),sar=r($Ge," (throws an error)."),$Ge.forEach(t),lar=i(ll),Tt=n(ll,"DIV",{class:!0});var v0=s(Tt);T(Oy.$$.fragment,v0),iar=i(v0),c2e=n(v0,"P",{});var Dvt=s(c2e);dar=r(Dvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dvt.forEach(t),car=i(v0),wd=n(v0,"P",{});var hee=s(wd);far=r(hee,`Note:
Loading a model from its configuration file does `),f2e=n(hee,"STRONG",{});var Gvt=s(f2e);mar=r(Gvt,"not"),Gvt.forEach(t),gar=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(hee,"A",{href:!0});var Ovt=s(Oz);har=r(Ovt,"from_pretrained()"),Ovt.forEach(t),par=r(hee," to load the model weights."),hee.forEach(t),_ar=i(v0),T(vT.$$.fragment,v0),v0.forEach(t),uar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Vy.$$.fragment,ba),bar=i(ba),m2e=n(ba,"P",{});var Vvt=s(m2e);Far=r(Vvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vvt.forEach(t),Tar=i(ba),za=n(ba,"P",{});var F0=s(za);Mar=r(F0,"The model class to instantiate is selected based on the "),g2e=n(F0,"CODE",{});var Xvt=s(g2e);Ear=r(Xvt,"model_type"),Xvt.forEach(t),Car=r(F0,` property of the config object (either
passed as an argument or loaded from `),h2e=n(F0,"CODE",{});var zvt=s(h2e);war=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),Aar=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(F0,"CODE",{});var Wvt=s(p2e);yar=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),Lar=r(F0,":"),F0.forEach(t),xar=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);FT=n(il,"LI",{});var ESe=s(FT);_2e=n(ESe,"STRONG",{});var Qvt=s(_2e);$ar=r(Qvt,"data2vec-audio"),Qvt.forEach(t),kar=r(ESe," \u2014 "),Vz=n(ESe,"A",{href:!0});var Hvt=s(Vz);Sar=r(Hvt,"Data2VecAudioForXVector"),Hvt.forEach(t),Rar=r(ESe," (Data2VecAudio model)"),ESe.forEach(t),Par=i(il),TT=n(il,"LI",{});var CSe=s(TT);u2e=n(CSe,"STRONG",{});var Uvt=s(u2e);Bar=r(Uvt,"unispeech-sat"),Uvt.forEach(t),Iar=r(CSe," \u2014 "),Xz=n(CSe,"A",{href:!0});var Jvt=s(Xz);Nar=r(Jvt,"UniSpeechSatForXVector"),Jvt.forEach(t),qar=r(CSe," (UniSpeechSat model)"),CSe.forEach(t),jar=i(il),MT=n(il,"LI",{});var wSe=s(MT);b2e=n(wSe,"STRONG",{});var Yvt=s(b2e);Dar=r(Yvt,"wav2vec2"),Yvt.forEach(t),Gar=r(wSe," \u2014 "),zz=n(wSe,"A",{href:!0});var Kvt=s(zz);Oar=r(Kvt,"Wav2Vec2ForXVector"),Kvt.forEach(t),Var=r(wSe," (Wav2Vec2 model)"),wSe.forEach(t),Xar=i(il),ET=n(il,"LI",{});var ASe=s(ET);v2e=n(ASe,"STRONG",{});var Zvt=s(v2e);zar=r(Zvt,"wav2vec2-conformer"),Zvt.forEach(t),War=r(ASe," \u2014 "),Wz=n(ASe,"A",{href:!0});var eFt=s(Wz);Qar=r(eFt,"Wav2Vec2ConformerForXVector"),eFt.forEach(t),Har=r(ASe," (Wav2Vec2-Conformer model)"),ASe.forEach(t),Uar=i(il),CT=n(il,"LI",{});var ySe=s(CT);F2e=n(ySe,"STRONG",{});var oFt=s(F2e);Jar=r(oFt,"wavlm"),oFt.forEach(t),Yar=r(ySe," \u2014 "),Qz=n(ySe,"A",{href:!0});var rFt=s(Qz);Kar=r(rFt,"WavLMForXVector"),rFt.forEach(t),Zar=r(ySe," (WavLM model)"),ySe.forEach(t),il.forEach(t),enr=i(ba),wT=n(ba,"P",{});var LSe=s(wT);onr=r(LSe,"The model is set in evaluation mode by default using "),T2e=n(LSe,"CODE",{});var tFt=s(T2e);rnr=r(tFt,"model.eval()"),tFt.forEach(t),tnr=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=n(LSe,"CODE",{});var aFt=s(M2e);anr=r(aFt,"model.train()"),aFt.forEach(t),LSe.forEach(t),nnr=i(ba),T(AT.$$.fragment,ba),ba.forEach(t),ll.forEach(t),Aje=i(f),Ad=n(f,"H2",{class:!0});var kGe=s(Ad);yT=n(kGe,"A",{id:!0,class:!0,href:!0});var nFt=s(yT);E2e=n(nFt,"SPAN",{});var sFt=s(E2e);T(Xy.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),snr=i(kGe),C2e=n(kGe,"SPAN",{});var lFt=s(C2e);lnr=r(lFt,"AutoModelForMaskedImageModeling"),lFt.forEach(t),kGe.forEach(t),yje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(zy.$$.fragment,dl),inr=i(dl),yd=n(dl,"P",{});var pee=s(yd);dnr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Hz=n(pee,"A",{href:!0});var iFt=s(Hz);cnr=r(iFt,"from_pretrained()"),iFt.forEach(t),fnr=r(pee," class method or the "),Uz=n(pee,"A",{href:!0});var dFt=s(Uz);mnr=r(dFt,"from_config()"),dFt.forEach(t),gnr=r(pee,` class
method.`),pee.forEach(t),hnr=i(dl),Wy=n(dl,"P",{});var SGe=s(Wy);pnr=r(SGe,"This class cannot be instantiated directly using "),w2e=n(SGe,"CODE",{});var cFt=s(w2e);_nr=r(cFt,"__init__()"),cFt.forEach(t),unr=r(SGe," (throws an error)."),SGe.forEach(t),bnr=i(dl),Mt=n(dl,"DIV",{class:!0});var T0=s(Mt);T(Qy.$$.fragment,T0),vnr=i(T0),A2e=n(T0,"P",{});var fFt=s(A2e);Fnr=r(fFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fFt.forEach(t),Tnr=i(T0),Ld=n(T0,"P",{});var _ee=s(Ld);Mnr=r(_ee,`Note:
Loading a model from its configuration file does `),y2e=n(_ee,"STRONG",{});var mFt=s(y2e);Enr=r(mFt,"not"),mFt.forEach(t),Cnr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(_ee,"A",{href:!0});var gFt=s(Jz);wnr=r(gFt,"from_pretrained()"),gFt.forEach(t),Anr=r(_ee," to load the model weights."),_ee.forEach(t),ynr=i(T0),T(LT.$$.fragment,T0),T0.forEach(t),Lnr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(Hy.$$.fragment,va),xnr=i(va),L2e=n(va,"P",{});var hFt=s(L2e);$nr=r(hFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hFt.forEach(t),knr=i(va),Wa=n(va,"P",{});var M0=s(Wa);Snr=r(M0,"The model class to instantiate is selected based on the "),x2e=n(M0,"CODE",{});var pFt=s(x2e);Rnr=r(pFt,"model_type"),pFt.forEach(t),Pnr=r(M0,` property of the config object (either
passed as an argument or loaded from `),$2e=n(M0,"CODE",{});var _Ft=s($2e);Bnr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),Inr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(M0,"CODE",{});var uFt=s(k2e);Nnr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),qnr=r(M0,":"),M0.forEach(t),jnr=i(va),xd=n(va,"UL",{});var uee=s(xd);xT=n(uee,"LI",{});var xSe=s(xT);S2e=n(xSe,"STRONG",{});var bFt=s(S2e);Dnr=r(bFt,"deit"),bFt.forEach(t),Gnr=r(xSe," \u2014 "),Yz=n(xSe,"A",{href:!0});var vFt=s(Yz);Onr=r(vFt,"DeiTForMaskedImageModeling"),vFt.forEach(t),Vnr=r(xSe," (DeiT model)"),xSe.forEach(t),Xnr=i(uee),$T=n(uee,"LI",{});var $Se=s($T);R2e=n($Se,"STRONG",{});var FFt=s(R2e);znr=r(FFt,"swin"),FFt.forEach(t),Wnr=r($Se," \u2014 "),Kz=n($Se,"A",{href:!0});var TFt=s(Kz);Qnr=r(TFt,"SwinForMaskedImageModeling"),TFt.forEach(t),Hnr=r($Se," (Swin model)"),$Se.forEach(t),Unr=i(uee),kT=n(uee,"LI",{});var kSe=s(kT);P2e=n(kSe,"STRONG",{});var MFt=s(P2e);Jnr=r(MFt,"vit"),MFt.forEach(t),Ynr=r(kSe," \u2014 "),Zz=n(kSe,"A",{href:!0});var EFt=s(Zz);Knr=r(EFt,"ViTForMaskedImageModeling"),EFt.forEach(t),Znr=r(kSe," (ViT model)"),kSe.forEach(t),uee.forEach(t),esr=i(va),ST=n(va,"P",{});var SSe=s(ST);osr=r(SSe,"The model is set in evaluation mode by default using "),B2e=n(SSe,"CODE",{});var CFt=s(B2e);rsr=r(CFt,"model.eval()"),CFt.forEach(t),tsr=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(SSe,"CODE",{});var wFt=s(I2e);asr=r(wFt,"model.train()"),wFt.forEach(t),SSe.forEach(t),nsr=i(va),T(RT.$$.fragment,va),va.forEach(t),dl.forEach(t),Lje=i(f),$d=n(f,"H2",{class:!0});var RGe=s($d);PT=n(RGe,"A",{id:!0,class:!0,href:!0});var AFt=s(PT);N2e=n(AFt,"SPAN",{});var yFt=s(N2e);T(Uy.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),ssr=i(RGe),q2e=n(RGe,"SPAN",{});var LFt=s(q2e);lsr=r(LFt,"AutoModelForObjectDetection"),LFt.forEach(t),RGe.forEach(t),xje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(Jy.$$.fragment,cl),isr=i(cl),kd=n(cl,"P",{});var bee=s(kd);dsr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eW=n(bee,"A",{href:!0});var xFt=s(eW);csr=r(xFt,"from_pretrained()"),xFt.forEach(t),fsr=r(bee," class method or the "),oW=n(bee,"A",{href:!0});var $Ft=s(oW);msr=r($Ft,"from_config()"),$Ft.forEach(t),gsr=r(bee,` class
method.`),bee.forEach(t),hsr=i(cl),Yy=n(cl,"P",{});var PGe=s(Yy);psr=r(PGe,"This class cannot be instantiated directly using "),j2e=n(PGe,"CODE",{});var kFt=s(j2e);_sr=r(kFt,"__init__()"),kFt.forEach(t),usr=r(PGe," (throws an error)."),PGe.forEach(t),bsr=i(cl),Et=n(cl,"DIV",{class:!0});var E0=s(Et);T(Ky.$$.fragment,E0),vsr=i(E0),D2e=n(E0,"P",{});var SFt=s(D2e);Fsr=r(SFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SFt.forEach(t),Tsr=i(E0),Sd=n(E0,"P",{});var vee=s(Sd);Msr=r(vee,`Note:
Loading a model from its configuration file does `),G2e=n(vee,"STRONG",{});var RFt=s(G2e);Esr=r(RFt,"not"),RFt.forEach(t),Csr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(vee,"A",{href:!0});var PFt=s(rW);wsr=r(PFt,"from_pretrained()"),PFt.forEach(t),Asr=r(vee," to load the model weights."),vee.forEach(t),ysr=i(E0),T(BT.$$.fragment,E0),E0.forEach(t),Lsr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(Zy.$$.fragment,Fa),xsr=i(Fa),O2e=n(Fa,"P",{});var BFt=s(O2e);$sr=r(BFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BFt.forEach(t),ksr=i(Fa),Qa=n(Fa,"P",{});var C0=s(Qa);Ssr=r(C0,"The model class to instantiate is selected based on the "),V2e=n(C0,"CODE",{});var IFt=s(V2e);Rsr=r(IFt,"model_type"),IFt.forEach(t),Psr=r(C0,` property of the config object (either
passed as an argument or loaded from `),X2e=n(C0,"CODE",{});var NFt=s(X2e);Bsr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),Isr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(C0,"CODE",{});var qFt=s(z2e);Nsr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),qsr=r(C0,":"),C0.forEach(t),jsr=i(Fa),eL=n(Fa,"UL",{});var BGe=s(eL);IT=n(BGe,"LI",{});var RSe=s(IT);W2e=n(RSe,"STRONG",{});var jFt=s(W2e);Dsr=r(jFt,"detr"),jFt.forEach(t),Gsr=r(RSe," \u2014 "),tW=n(RSe,"A",{href:!0});var DFt=s(tW);Osr=r(DFt,"DetrForObjectDetection"),DFt.forEach(t),Vsr=r(RSe," (DETR model)"),RSe.forEach(t),Xsr=i(BGe),NT=n(BGe,"LI",{});var PSe=s(NT);Q2e=n(PSe,"STRONG",{});var GFt=s(Q2e);zsr=r(GFt,"yolos"),GFt.forEach(t),Wsr=r(PSe," \u2014 "),aW=n(PSe,"A",{href:!0});var OFt=s(aW);Qsr=r(OFt,"YolosForObjectDetection"),OFt.forEach(t),Hsr=r(PSe," (YOLOS model)"),PSe.forEach(t),BGe.forEach(t),Usr=i(Fa),qT=n(Fa,"P",{});var BSe=s(qT);Jsr=r(BSe,"The model is set in evaluation mode by default using "),H2e=n(BSe,"CODE",{});var VFt=s(H2e);Ysr=r(VFt,"model.eval()"),VFt.forEach(t),Ksr=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(BSe,"CODE",{});var XFt=s(U2e);Zsr=r(XFt,"model.train()"),XFt.forEach(t),BSe.forEach(t),elr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),$je=i(f),Rd=n(f,"H2",{class:!0});var IGe=s(Rd);DT=n(IGe,"A",{id:!0,class:!0,href:!0});var zFt=s(DT);J2e=n(zFt,"SPAN",{});var WFt=s(J2e);T(oL.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),olr=i(IGe),Y2e=n(IGe,"SPAN",{});var QFt=s(Y2e);rlr=r(QFt,"AutoModelForImageSegmentation"),QFt.forEach(t),IGe.forEach(t),kje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(rL.$$.fragment,fl),tlr=i(fl),Pd=n(fl,"P",{});var Fee=s(Pd);alr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nW=n(Fee,"A",{href:!0});var HFt=s(nW);nlr=r(HFt,"from_pretrained()"),HFt.forEach(t),slr=r(Fee," class method or the "),sW=n(Fee,"A",{href:!0});var UFt=s(sW);llr=r(UFt,"from_config()"),UFt.forEach(t),ilr=r(Fee,` class
method.`),Fee.forEach(t),dlr=i(fl),tL=n(fl,"P",{});var NGe=s(tL);clr=r(NGe,"This class cannot be instantiated directly using "),K2e=n(NGe,"CODE",{});var JFt=s(K2e);flr=r(JFt,"__init__()"),JFt.forEach(t),mlr=r(NGe," (throws an error)."),NGe.forEach(t),glr=i(fl),Ct=n(fl,"DIV",{class:!0});var w0=s(Ct);T(aL.$$.fragment,w0),hlr=i(w0),Z2e=n(w0,"P",{});var YFt=s(Z2e);plr=r(YFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YFt.forEach(t),_lr=i(w0),Bd=n(w0,"P",{});var Tee=s(Bd);ulr=r(Tee,`Note:
Loading a model from its configuration file does `),e1e=n(Tee,"STRONG",{});var KFt=s(e1e);blr=r(KFt,"not"),KFt.forEach(t),vlr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(Tee,"A",{href:!0});var ZFt=s(lW);Flr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),Tlr=r(Tee," to load the model weights."),Tee.forEach(t),Mlr=i(w0),T(GT.$$.fragment,w0),w0.forEach(t),Elr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(nL.$$.fragment,Ta),Clr=i(Ta),o1e=n(Ta,"P",{});var e6t=s(o1e);wlr=r(e6t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),e6t.forEach(t),Alr=i(Ta),Ha=n(Ta,"P",{});var A0=s(Ha);ylr=r(A0,"The model class to instantiate is selected based on the "),r1e=n(A0,"CODE",{});var o6t=s(r1e);Llr=r(o6t,"model_type"),o6t.forEach(t),xlr=r(A0,` property of the config object (either
passed as an argument or loaded from `),t1e=n(A0,"CODE",{});var r6t=s(t1e);$lr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),klr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(A0,"CODE",{});var t6t=s(a1e);Slr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Rlr=r(A0,":"),A0.forEach(t),Plr=i(Ta),n1e=n(Ta,"UL",{});var a6t=s(n1e);OT=n(a6t,"LI",{});var ISe=s(OT);s1e=n(ISe,"STRONG",{});var n6t=s(s1e);Blr=r(n6t,"detr"),n6t.forEach(t),Ilr=r(ISe," \u2014 "),iW=n(ISe,"A",{href:!0});var s6t=s(iW);Nlr=r(s6t,"DetrForSegmentation"),s6t.forEach(t),qlr=r(ISe," (DETR model)"),ISe.forEach(t),a6t.forEach(t),jlr=i(Ta),VT=n(Ta,"P",{});var NSe=s(VT);Dlr=r(NSe,"The model is set in evaluation mode by default using "),l1e=n(NSe,"CODE",{});var l6t=s(l1e);Glr=r(l6t,"model.eval()"),l6t.forEach(t),Olr=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(NSe,"CODE",{});var i6t=s(i1e);Vlr=r(i6t,"model.train()"),i6t.forEach(t),NSe.forEach(t),Xlr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Sje=i(f),Id=n(f,"H2",{class:!0});var qGe=s(Id);zT=n(qGe,"A",{id:!0,class:!0,href:!0});var d6t=s(zT);d1e=n(d6t,"SPAN",{});var c6t=s(d1e);T(sL.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),zlr=i(qGe),c1e=n(qGe,"SPAN",{});var f6t=s(c1e);Wlr=r(f6t,"AutoModelForSemanticSegmentation"),f6t.forEach(t),qGe.forEach(t),Rje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(lL.$$.fragment,ml),Qlr=i(ml),Nd=n(ml,"P",{});var Mee=s(Nd);Hlr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dW=n(Mee,"A",{href:!0});var m6t=s(dW);Ulr=r(m6t,"from_pretrained()"),m6t.forEach(t),Jlr=r(Mee," class method or the "),cW=n(Mee,"A",{href:!0});var g6t=s(cW);Ylr=r(g6t,"from_config()"),g6t.forEach(t),Klr=r(Mee,` class
method.`),Mee.forEach(t),Zlr=i(ml),iL=n(ml,"P",{});var jGe=s(iL);eir=r(jGe,"This class cannot be instantiated directly using "),f1e=n(jGe,"CODE",{});var h6t=s(f1e);oir=r(h6t,"__init__()"),h6t.forEach(t),rir=r(jGe," (throws an error)."),jGe.forEach(t),tir=i(ml),wt=n(ml,"DIV",{class:!0});var y0=s(wt);T(dL.$$.fragment,y0),air=i(y0),m1e=n(y0,"P",{});var p6t=s(m1e);nir=r(p6t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),p6t.forEach(t),sir=i(y0),qd=n(y0,"P",{});var Eee=s(qd);lir=r(Eee,`Note:
Loading a model from its configuration file does `),g1e=n(Eee,"STRONG",{});var _6t=s(g1e);iir=r(_6t,"not"),_6t.forEach(t),dir=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Eee,"A",{href:!0});var u6t=s(fW);cir=r(u6t,"from_pretrained()"),u6t.forEach(t),fir=r(Eee," to load the model weights."),Eee.forEach(t),mir=i(y0),T(WT.$$.fragment,y0),y0.forEach(t),gir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(cL.$$.fragment,Ma),hir=i(Ma),h1e=n(Ma,"P",{});var b6t=s(h1e);pir=r(b6t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),b6t.forEach(t),_ir=i(Ma),Ua=n(Ma,"P",{});var L0=s(Ua);uir=r(L0,"The model class to instantiate is selected based on the "),p1e=n(L0,"CODE",{});var v6t=s(p1e);bir=r(v6t,"model_type"),v6t.forEach(t),vir=r(L0,` property of the config object (either
passed as an argument or loaded from `),_1e=n(L0,"CODE",{});var F6t=s(_1e);Fir=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),Tir=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(L0,"CODE",{});var T6t=s(u1e);Mir=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),Eir=r(L0,":"),L0.forEach(t),Cir=i(Ma),Ja=n(Ma,"UL",{});var x0=s(Ja);QT=n(x0,"LI",{});var qSe=s(QT);b1e=n(qSe,"STRONG",{});var M6t=s(b1e);wir=r(M6t,"beit"),M6t.forEach(t),Air=r(qSe," \u2014 "),mW=n(qSe,"A",{href:!0});var E6t=s(mW);yir=r(E6t,"BeitForSemanticSegmentation"),E6t.forEach(t),Lir=r(qSe," (BEiT model)"),qSe.forEach(t),xir=i(x0),HT=n(x0,"LI",{});var jSe=s(HT);v1e=n(jSe,"STRONG",{});var C6t=s(v1e);$ir=r(C6t,"data2vec-vision"),C6t.forEach(t),kir=r(jSe," \u2014 "),gW=n(jSe,"A",{href:!0});var w6t=s(gW);Sir=r(w6t,"Data2VecVisionForSemanticSegmentation"),w6t.forEach(t),Rir=r(jSe," (Data2VecVision model)"),jSe.forEach(t),Pir=i(x0),UT=n(x0,"LI",{});var DSe=s(UT);F1e=n(DSe,"STRONG",{});var A6t=s(F1e);Bir=r(A6t,"dpt"),A6t.forEach(t),Iir=r(DSe," \u2014 "),hW=n(DSe,"A",{href:!0});var y6t=s(hW);Nir=r(y6t,"DPTForSemanticSegmentation"),y6t.forEach(t),qir=r(DSe," (DPT model)"),DSe.forEach(t),jir=i(x0),JT=n(x0,"LI",{});var GSe=s(JT);T1e=n(GSe,"STRONG",{});var L6t=s(T1e);Dir=r(L6t,"segformer"),L6t.forEach(t),Gir=r(GSe," \u2014 "),pW=n(GSe,"A",{href:!0});var x6t=s(pW);Oir=r(x6t,"SegformerForSemanticSegmentation"),x6t.forEach(t),Vir=r(GSe," (SegFormer model)"),GSe.forEach(t),x0.forEach(t),Xir=i(Ma),YT=n(Ma,"P",{});var OSe=s(YT);zir=r(OSe,"The model is set in evaluation mode by default using "),M1e=n(OSe,"CODE",{});var $6t=s(M1e);Wir=r($6t,"model.eval()"),$6t.forEach(t),Qir=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=n(OSe,"CODE",{});var k6t=s(E1e);Hir=r(k6t,"model.train()"),k6t.forEach(t),OSe.forEach(t),Uir=i(Ma),T(KT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),Pje=i(f),jd=n(f,"H2",{class:!0});var DGe=s(jd);ZT=n(DGe,"A",{id:!0,class:!0,href:!0});var S6t=s(ZT);C1e=n(S6t,"SPAN",{});var R6t=s(C1e);T(fL.$$.fragment,R6t),R6t.forEach(t),S6t.forEach(t),Jir=i(DGe),w1e=n(DGe,"SPAN",{});var P6t=s(w1e);Yir=r(P6t,"AutoModelForInstanceSegmentation"),P6t.forEach(t),DGe.forEach(t),Bje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(mL.$$.fragment,gl),Kir=i(gl),Dd=n(gl,"P",{});var Cee=s(Dd);Zir=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_W=n(Cee,"A",{href:!0});var B6t=s(_W);edr=r(B6t,"from_pretrained()"),B6t.forEach(t),odr=r(Cee," class method or the "),uW=n(Cee,"A",{href:!0});var I6t=s(uW);rdr=r(I6t,"from_config()"),I6t.forEach(t),tdr=r(Cee,` class
method.`),Cee.forEach(t),adr=i(gl),gL=n(gl,"P",{});var GGe=s(gL);ndr=r(GGe,"This class cannot be instantiated directly using "),A1e=n(GGe,"CODE",{});var N6t=s(A1e);sdr=r(N6t,"__init__()"),N6t.forEach(t),ldr=r(GGe," (throws an error)."),GGe.forEach(t),idr=i(gl),At=n(gl,"DIV",{class:!0});var $0=s(At);T(hL.$$.fragment,$0),ddr=i($0),y1e=n($0,"P",{});var q6t=s(y1e);cdr=r(q6t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),q6t.forEach(t),fdr=i($0),Gd=n($0,"P",{});var wee=s(Gd);mdr=r(wee,`Note:
Loading a model from its configuration file does `),L1e=n(wee,"STRONG",{});var j6t=s(L1e);gdr=r(j6t,"not"),j6t.forEach(t),hdr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(wee,"A",{href:!0});var D6t=s(bW);pdr=r(D6t,"from_pretrained()"),D6t.forEach(t),_dr=r(wee," to load the model weights."),wee.forEach(t),udr=i($0),T(e7.$$.fragment,$0),$0.forEach(t),bdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(pL.$$.fragment,Ea),vdr=i(Ea),x1e=n(Ea,"P",{});var G6t=s(x1e);Fdr=r(G6t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),G6t.forEach(t),Tdr=i(Ea),Ya=n(Ea,"P",{});var k0=s(Ya);Mdr=r(k0,"The model class to instantiate is selected based on the "),$1e=n(k0,"CODE",{});var O6t=s($1e);Edr=r(O6t,"model_type"),O6t.forEach(t),Cdr=r(k0,` property of the config object (either
passed as an argument or loaded from `),k1e=n(k0,"CODE",{});var V6t=s(k1e);wdr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),Adr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(k0,"CODE",{});var X6t=s(S1e);ydr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),Ldr=r(k0,":"),k0.forEach(t),xdr=i(Ea),R1e=n(Ea,"UL",{});var z6t=s(R1e);o7=n(z6t,"LI",{});var VSe=s(o7);P1e=n(VSe,"STRONG",{});var W6t=s(P1e);$dr=r(W6t,"maskformer"),W6t.forEach(t),kdr=r(VSe," \u2014 "),vW=n(VSe,"A",{href:!0});var Q6t=s(vW);Sdr=r(Q6t,"MaskFormerForInstanceSegmentation"),Q6t.forEach(t),Rdr=r(VSe," (MaskFormer model)"),VSe.forEach(t),z6t.forEach(t),Pdr=i(Ea),r7=n(Ea,"P",{});var XSe=s(r7);Bdr=r(XSe,"The model is set in evaluation mode by default using "),B1e=n(XSe,"CODE",{});var H6t=s(B1e);Idr=r(H6t,"model.eval()"),H6t.forEach(t),Ndr=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(XSe,"CODE",{});var U6t=s(I1e);qdr=r(U6t,"model.train()"),U6t.forEach(t),XSe.forEach(t),jdr=i(Ea),T(t7.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Ije=i(f),Od=n(f,"H2",{class:!0});var OGe=s(Od);a7=n(OGe,"A",{id:!0,class:!0,href:!0});var J6t=s(a7);N1e=n(J6t,"SPAN",{});var Y6t=s(N1e);T(_L.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),Ddr=i(OGe),q1e=n(OGe,"SPAN",{});var K6t=s(q1e);Gdr=r(K6t,"TFAutoModel"),K6t.forEach(t),OGe.forEach(t),Nje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(uL.$$.fragment,hl),Odr=i(hl),Vd=n(hl,"P",{});var Aee=s(Vd);Vdr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FW=n(Aee,"A",{href:!0});var Z6t=s(FW);Xdr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),zdr=r(Aee," class method or the "),TW=n(Aee,"A",{href:!0});var eTt=s(TW);Wdr=r(eTt,"from_config()"),eTt.forEach(t),Qdr=r(Aee,` class
method.`),Aee.forEach(t),Hdr=i(hl),bL=n(hl,"P",{});var VGe=s(bL);Udr=r(VGe,"This class cannot be instantiated directly using "),j1e=n(VGe,"CODE",{});var oTt=s(j1e);Jdr=r(oTt,"__init__()"),oTt.forEach(t),Ydr=r(VGe," (throws an error)."),VGe.forEach(t),Kdr=i(hl),yt=n(hl,"DIV",{class:!0});var S0=s(yt);T(vL.$$.fragment,S0),Zdr=i(S0),D1e=n(S0,"P",{});var rTt=s(D1e);ecr=r(rTt,"Instantiates one of the base model classes of the library from a configuration."),rTt.forEach(t),ocr=i(S0),Xd=n(S0,"P",{});var yee=s(Xd);rcr=r(yee,`Note:
Loading a model from its configuration file does `),G1e=n(yee,"STRONG",{});var tTt=s(G1e);tcr=r(tTt,"not"),tTt.forEach(t),acr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(yee,"A",{href:!0});var aTt=s(MW);ncr=r(aTt,"from_pretrained()"),aTt.forEach(t),scr=r(yee," to load the model weights."),yee.forEach(t),lcr=i(S0),T(n7.$$.fragment,S0),S0.forEach(t),icr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(FL.$$.fragment,pl),dcr=i(pl),O1e=n(pl,"P",{});var nTt=s(O1e);ccr=r(nTt,"Instantiate one of the base model classes of the library from a pretrained model."),nTt.forEach(t),fcr=i(pl),Ka=n(pl,"P",{});var R0=s(Ka);mcr=r(R0,"The model class to instantiate is selected based on the "),V1e=n(R0,"CODE",{});var sTt=s(V1e);gcr=r(sTt,"model_type"),sTt.forEach(t),hcr=r(R0,` property of the config object (either
passed as an argument or loaded from `),X1e=n(R0,"CODE",{});var lTt=s(X1e);pcr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),_cr=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(R0,"CODE",{});var iTt=s(z1e);ucr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),bcr=r(R0,":"),R0.forEach(t),vcr=i(pl),q=n(pl,"UL",{});var D=s(q);s7=n(D,"LI",{});var zSe=s(s7);W1e=n(zSe,"STRONG",{});var dTt=s(W1e);Fcr=r(dTt,"albert"),dTt.forEach(t),Tcr=r(zSe," \u2014 "),EW=n(zSe,"A",{href:!0});var cTt=s(EW);Mcr=r(cTt,"TFAlbertModel"),cTt.forEach(t),Ecr=r(zSe," (ALBERT model)"),zSe.forEach(t),Ccr=i(D),l7=n(D,"LI",{});var WSe=s(l7);Q1e=n(WSe,"STRONG",{});var fTt=s(Q1e);wcr=r(fTt,"bart"),fTt.forEach(t),Acr=r(WSe," \u2014 "),CW=n(WSe,"A",{href:!0});var mTt=s(CW);ycr=r(mTt,"TFBartModel"),mTt.forEach(t),Lcr=r(WSe," (BART model)"),WSe.forEach(t),xcr=i(D),i7=n(D,"LI",{});var QSe=s(i7);H1e=n(QSe,"STRONG",{});var gTt=s(H1e);$cr=r(gTt,"bert"),gTt.forEach(t),kcr=r(QSe," \u2014 "),wW=n(QSe,"A",{href:!0});var hTt=s(wW);Scr=r(hTt,"TFBertModel"),hTt.forEach(t),Rcr=r(QSe," (BERT model)"),QSe.forEach(t),Pcr=i(D),d7=n(D,"LI",{});var HSe=s(d7);U1e=n(HSe,"STRONG",{});var pTt=s(U1e);Bcr=r(pTt,"blenderbot"),pTt.forEach(t),Icr=r(HSe," \u2014 "),AW=n(HSe,"A",{href:!0});var _Tt=s(AW);Ncr=r(_Tt,"TFBlenderbotModel"),_Tt.forEach(t),qcr=r(HSe," (Blenderbot model)"),HSe.forEach(t),jcr=i(D),c7=n(D,"LI",{});var USe=s(c7);J1e=n(USe,"STRONG",{});var uTt=s(J1e);Dcr=r(uTt,"blenderbot-small"),uTt.forEach(t),Gcr=r(USe," \u2014 "),yW=n(USe,"A",{href:!0});var bTt=s(yW);Ocr=r(bTt,"TFBlenderbotSmallModel"),bTt.forEach(t),Vcr=r(USe," (BlenderbotSmall model)"),USe.forEach(t),Xcr=i(D),f7=n(D,"LI",{});var JSe=s(f7);Y1e=n(JSe,"STRONG",{});var vTt=s(Y1e);zcr=r(vTt,"camembert"),vTt.forEach(t),Wcr=r(JSe," \u2014 "),LW=n(JSe,"A",{href:!0});var FTt=s(LW);Qcr=r(FTt,"TFCamembertModel"),FTt.forEach(t),Hcr=r(JSe," (CamemBERT model)"),JSe.forEach(t),Ucr=i(D),m7=n(D,"LI",{});var YSe=s(m7);K1e=n(YSe,"STRONG",{});var TTt=s(K1e);Jcr=r(TTt,"clip"),TTt.forEach(t),Ycr=r(YSe," \u2014 "),xW=n(YSe,"A",{href:!0});var MTt=s(xW);Kcr=r(MTt,"TFCLIPModel"),MTt.forEach(t),Zcr=r(YSe," (CLIP model)"),YSe.forEach(t),efr=i(D),g7=n(D,"LI",{});var KSe=s(g7);Z1e=n(KSe,"STRONG",{});var ETt=s(Z1e);ofr=r(ETt,"convbert"),ETt.forEach(t),rfr=r(KSe," \u2014 "),$W=n(KSe,"A",{href:!0});var CTt=s($W);tfr=r(CTt,"TFConvBertModel"),CTt.forEach(t),afr=r(KSe," (ConvBERT model)"),KSe.forEach(t),nfr=i(D),h7=n(D,"LI",{});var ZSe=s(h7);ebe=n(ZSe,"STRONG",{});var wTt=s(ebe);sfr=r(wTt,"convnext"),wTt.forEach(t),lfr=r(ZSe," \u2014 "),kW=n(ZSe,"A",{href:!0});var ATt=s(kW);ifr=r(ATt,"TFConvNextModel"),ATt.forEach(t),dfr=r(ZSe," (ConvNext model)"),ZSe.forEach(t),cfr=i(D),p7=n(D,"LI",{});var eRe=s(p7);obe=n(eRe,"STRONG",{});var yTt=s(obe);ffr=r(yTt,"ctrl"),yTt.forEach(t),mfr=r(eRe," \u2014 "),SW=n(eRe,"A",{href:!0});var LTt=s(SW);gfr=r(LTt,"TFCTRLModel"),LTt.forEach(t),hfr=r(eRe," (CTRL model)"),eRe.forEach(t),pfr=i(D),_7=n(D,"LI",{});var oRe=s(_7);rbe=n(oRe,"STRONG",{});var xTt=s(rbe);_fr=r(xTt,"data2vec-vision"),xTt.forEach(t),ufr=r(oRe," \u2014 "),RW=n(oRe,"A",{href:!0});var $Tt=s(RW);bfr=r($Tt,"TFData2VecVisionModel"),$Tt.forEach(t),vfr=r(oRe," (Data2VecVision model)"),oRe.forEach(t),Ffr=i(D),u7=n(D,"LI",{});var rRe=s(u7);tbe=n(rRe,"STRONG",{});var kTt=s(tbe);Tfr=r(kTt,"deberta"),kTt.forEach(t),Mfr=r(rRe," \u2014 "),PW=n(rRe,"A",{href:!0});var STt=s(PW);Efr=r(STt,"TFDebertaModel"),STt.forEach(t),Cfr=r(rRe," (DeBERTa model)"),rRe.forEach(t),wfr=i(D),b7=n(D,"LI",{});var tRe=s(b7);abe=n(tRe,"STRONG",{});var RTt=s(abe);Afr=r(RTt,"deberta-v2"),RTt.forEach(t),yfr=r(tRe," \u2014 "),BW=n(tRe,"A",{href:!0});var PTt=s(BW);Lfr=r(PTt,"TFDebertaV2Model"),PTt.forEach(t),xfr=r(tRe," (DeBERTa-v2 model)"),tRe.forEach(t),$fr=i(D),v7=n(D,"LI",{});var aRe=s(v7);nbe=n(aRe,"STRONG",{});var BTt=s(nbe);kfr=r(BTt,"distilbert"),BTt.forEach(t),Sfr=r(aRe," \u2014 "),IW=n(aRe,"A",{href:!0});var ITt=s(IW);Rfr=r(ITt,"TFDistilBertModel"),ITt.forEach(t),Pfr=r(aRe," (DistilBERT model)"),aRe.forEach(t),Bfr=i(D),F7=n(D,"LI",{});var nRe=s(F7);sbe=n(nRe,"STRONG",{});var NTt=s(sbe);Ifr=r(NTt,"dpr"),NTt.forEach(t),Nfr=r(nRe," \u2014 "),NW=n(nRe,"A",{href:!0});var qTt=s(NW);qfr=r(qTt,"TFDPRQuestionEncoder"),qTt.forEach(t),jfr=r(nRe," (DPR model)"),nRe.forEach(t),Dfr=i(D),T7=n(D,"LI",{});var sRe=s(T7);lbe=n(sRe,"STRONG",{});var jTt=s(lbe);Gfr=r(jTt,"electra"),jTt.forEach(t),Ofr=r(sRe," \u2014 "),qW=n(sRe,"A",{href:!0});var DTt=s(qW);Vfr=r(DTt,"TFElectraModel"),DTt.forEach(t),Xfr=r(sRe," (ELECTRA model)"),sRe.forEach(t),zfr=i(D),M7=n(D,"LI",{});var lRe=s(M7);ibe=n(lRe,"STRONG",{});var GTt=s(ibe);Wfr=r(GTt,"flaubert"),GTt.forEach(t),Qfr=r(lRe," \u2014 "),jW=n(lRe,"A",{href:!0});var OTt=s(jW);Hfr=r(OTt,"TFFlaubertModel"),OTt.forEach(t),Ufr=r(lRe," (FlauBERT model)"),lRe.forEach(t),Jfr=i(D),Ns=n(D,"LI",{});var Z$=s(Ns);dbe=n(Z$,"STRONG",{});var VTt=s(dbe);Yfr=r(VTt,"funnel"),VTt.forEach(t),Kfr=r(Z$," \u2014 "),DW=n(Z$,"A",{href:!0});var XTt=s(DW);Zfr=r(XTt,"TFFunnelModel"),XTt.forEach(t),emr=r(Z$," or "),GW=n(Z$,"A",{href:!0});var zTt=s(GW);omr=r(zTt,"TFFunnelBaseModel"),zTt.forEach(t),rmr=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),tmr=i(D),E7=n(D,"LI",{});var iRe=s(E7);cbe=n(iRe,"STRONG",{});var WTt=s(cbe);amr=r(WTt,"gpt2"),WTt.forEach(t),nmr=r(iRe," \u2014 "),OW=n(iRe,"A",{href:!0});var QTt=s(OW);smr=r(QTt,"TFGPT2Model"),QTt.forEach(t),lmr=r(iRe," (OpenAI GPT-2 model)"),iRe.forEach(t),imr=i(D),C7=n(D,"LI",{});var dRe=s(C7);fbe=n(dRe,"STRONG",{});var HTt=s(fbe);dmr=r(HTt,"gptj"),HTt.forEach(t),cmr=r(dRe," \u2014 "),VW=n(dRe,"A",{href:!0});var UTt=s(VW);fmr=r(UTt,"TFGPTJModel"),UTt.forEach(t),mmr=r(dRe," (GPT-J model)"),dRe.forEach(t),gmr=i(D),w7=n(D,"LI",{});var cRe=s(w7);mbe=n(cRe,"STRONG",{});var JTt=s(mbe);hmr=r(JTt,"hubert"),JTt.forEach(t),pmr=r(cRe," \u2014 "),XW=n(cRe,"A",{href:!0});var YTt=s(XW);_mr=r(YTt,"TFHubertModel"),YTt.forEach(t),umr=r(cRe," (Hubert model)"),cRe.forEach(t),bmr=i(D),A7=n(D,"LI",{});var fRe=s(A7);gbe=n(fRe,"STRONG",{});var KTt=s(gbe);vmr=r(KTt,"layoutlm"),KTt.forEach(t),Fmr=r(fRe," \u2014 "),zW=n(fRe,"A",{href:!0});var ZTt=s(zW);Tmr=r(ZTt,"TFLayoutLMModel"),ZTt.forEach(t),Mmr=r(fRe," (LayoutLM model)"),fRe.forEach(t),Emr=i(D),y7=n(D,"LI",{});var mRe=s(y7);hbe=n(mRe,"STRONG",{});var e7t=s(hbe);Cmr=r(e7t,"led"),e7t.forEach(t),wmr=r(mRe," \u2014 "),WW=n(mRe,"A",{href:!0});var o7t=s(WW);Amr=r(o7t,"TFLEDModel"),o7t.forEach(t),ymr=r(mRe," (LED model)"),mRe.forEach(t),Lmr=i(D),L7=n(D,"LI",{});var gRe=s(L7);pbe=n(gRe,"STRONG",{});var r7t=s(pbe);xmr=r(r7t,"longformer"),r7t.forEach(t),$mr=r(gRe," \u2014 "),QW=n(gRe,"A",{href:!0});var t7t=s(QW);kmr=r(t7t,"TFLongformerModel"),t7t.forEach(t),Smr=r(gRe," (Longformer model)"),gRe.forEach(t),Rmr=i(D),x7=n(D,"LI",{});var hRe=s(x7);_be=n(hRe,"STRONG",{});var a7t=s(_be);Pmr=r(a7t,"lxmert"),a7t.forEach(t),Bmr=r(hRe," \u2014 "),HW=n(hRe,"A",{href:!0});var n7t=s(HW);Imr=r(n7t,"TFLxmertModel"),n7t.forEach(t),Nmr=r(hRe," (LXMERT model)"),hRe.forEach(t),qmr=i(D),$7=n(D,"LI",{});var pRe=s($7);ube=n(pRe,"STRONG",{});var s7t=s(ube);jmr=r(s7t,"marian"),s7t.forEach(t),Dmr=r(pRe," \u2014 "),UW=n(pRe,"A",{href:!0});var l7t=s(UW);Gmr=r(l7t,"TFMarianModel"),l7t.forEach(t),Omr=r(pRe," (Marian model)"),pRe.forEach(t),Vmr=i(D),k7=n(D,"LI",{});var _Re=s(k7);bbe=n(_Re,"STRONG",{});var i7t=s(bbe);Xmr=r(i7t,"mbart"),i7t.forEach(t),zmr=r(_Re," \u2014 "),JW=n(_Re,"A",{href:!0});var d7t=s(JW);Wmr=r(d7t,"TFMBartModel"),d7t.forEach(t),Qmr=r(_Re," (mBART model)"),_Re.forEach(t),Hmr=i(D),S7=n(D,"LI",{});var uRe=s(S7);vbe=n(uRe,"STRONG",{});var c7t=s(vbe);Umr=r(c7t,"mobilebert"),c7t.forEach(t),Jmr=r(uRe," \u2014 "),YW=n(uRe,"A",{href:!0});var f7t=s(YW);Ymr=r(f7t,"TFMobileBertModel"),f7t.forEach(t),Kmr=r(uRe," (MobileBERT model)"),uRe.forEach(t),Zmr=i(D),R7=n(D,"LI",{});var bRe=s(R7);Fbe=n(bRe,"STRONG",{});var m7t=s(Fbe);egr=r(m7t,"mpnet"),m7t.forEach(t),ogr=r(bRe," \u2014 "),KW=n(bRe,"A",{href:!0});var g7t=s(KW);rgr=r(g7t,"TFMPNetModel"),g7t.forEach(t),tgr=r(bRe," (MPNet model)"),bRe.forEach(t),agr=i(D),P7=n(D,"LI",{});var vRe=s(P7);Tbe=n(vRe,"STRONG",{});var h7t=s(Tbe);ngr=r(h7t,"mt5"),h7t.forEach(t),sgr=r(vRe," \u2014 "),ZW=n(vRe,"A",{href:!0});var p7t=s(ZW);lgr=r(p7t,"TFMT5Model"),p7t.forEach(t),igr=r(vRe," (mT5 model)"),vRe.forEach(t),dgr=i(D),B7=n(D,"LI",{});var FRe=s(B7);Mbe=n(FRe,"STRONG",{});var _7t=s(Mbe);cgr=r(_7t,"openai-gpt"),_7t.forEach(t),fgr=r(FRe," \u2014 "),eQ=n(FRe,"A",{href:!0});var u7t=s(eQ);mgr=r(u7t,"TFOpenAIGPTModel"),u7t.forEach(t),ggr=r(FRe," (OpenAI GPT model)"),FRe.forEach(t),hgr=i(D),I7=n(D,"LI",{});var TRe=s(I7);Ebe=n(TRe,"STRONG",{});var b7t=s(Ebe);pgr=r(b7t,"pegasus"),b7t.forEach(t),_gr=r(TRe," \u2014 "),oQ=n(TRe,"A",{href:!0});var v7t=s(oQ);ugr=r(v7t,"TFPegasusModel"),v7t.forEach(t),bgr=r(TRe," (Pegasus model)"),TRe.forEach(t),vgr=i(D),N7=n(D,"LI",{});var MRe=s(N7);Cbe=n(MRe,"STRONG",{});var F7t=s(Cbe);Fgr=r(F7t,"rembert"),F7t.forEach(t),Tgr=r(MRe," \u2014 "),rQ=n(MRe,"A",{href:!0});var T7t=s(rQ);Mgr=r(T7t,"TFRemBertModel"),T7t.forEach(t),Egr=r(MRe," (RemBERT model)"),MRe.forEach(t),Cgr=i(D),q7=n(D,"LI",{});var ERe=s(q7);wbe=n(ERe,"STRONG",{});var M7t=s(wbe);wgr=r(M7t,"roberta"),M7t.forEach(t),Agr=r(ERe," \u2014 "),tQ=n(ERe,"A",{href:!0});var E7t=s(tQ);ygr=r(E7t,"TFRobertaModel"),E7t.forEach(t),Lgr=r(ERe," (RoBERTa model)"),ERe.forEach(t),xgr=i(D),j7=n(D,"LI",{});var CRe=s(j7);Abe=n(CRe,"STRONG",{});var C7t=s(Abe);$gr=r(C7t,"roformer"),C7t.forEach(t),kgr=r(CRe," \u2014 "),aQ=n(CRe,"A",{href:!0});var w7t=s(aQ);Sgr=r(w7t,"TFRoFormerModel"),w7t.forEach(t),Rgr=r(CRe," (RoFormer model)"),CRe.forEach(t),Pgr=i(D),D7=n(D,"LI",{});var wRe=s(D7);ybe=n(wRe,"STRONG",{});var A7t=s(ybe);Bgr=r(A7t,"speech_to_text"),A7t.forEach(t),Igr=r(wRe," \u2014 "),nQ=n(wRe,"A",{href:!0});var y7t=s(nQ);Ngr=r(y7t,"TFSpeech2TextModel"),y7t.forEach(t),qgr=r(wRe," (Speech2Text model)"),wRe.forEach(t),jgr=i(D),G7=n(D,"LI",{});var ARe=s(G7);Lbe=n(ARe,"STRONG",{});var L7t=s(Lbe);Dgr=r(L7t,"swin"),L7t.forEach(t),Ggr=r(ARe," \u2014 "),sQ=n(ARe,"A",{href:!0});var x7t=s(sQ);Ogr=r(x7t,"TFSwinModel"),x7t.forEach(t),Vgr=r(ARe," (Swin model)"),ARe.forEach(t),Xgr=i(D),O7=n(D,"LI",{});var yRe=s(O7);xbe=n(yRe,"STRONG",{});var $7t=s(xbe);zgr=r($7t,"t5"),$7t.forEach(t),Wgr=r(yRe," \u2014 "),lQ=n(yRe,"A",{href:!0});var k7t=s(lQ);Qgr=r(k7t,"TFT5Model"),k7t.forEach(t),Hgr=r(yRe," (T5 model)"),yRe.forEach(t),Ugr=i(D),V7=n(D,"LI",{});var LRe=s(V7);$be=n(LRe,"STRONG",{});var S7t=s($be);Jgr=r(S7t,"tapas"),S7t.forEach(t),Ygr=r(LRe," \u2014 "),iQ=n(LRe,"A",{href:!0});var R7t=s(iQ);Kgr=r(R7t,"TFTapasModel"),R7t.forEach(t),Zgr=r(LRe," (TAPAS model)"),LRe.forEach(t),ehr=i(D),X7=n(D,"LI",{});var xRe=s(X7);kbe=n(xRe,"STRONG",{});var P7t=s(kbe);ohr=r(P7t,"transfo-xl"),P7t.forEach(t),rhr=r(xRe," \u2014 "),dQ=n(xRe,"A",{href:!0});var B7t=s(dQ);thr=r(B7t,"TFTransfoXLModel"),B7t.forEach(t),ahr=r(xRe," (Transformer-XL model)"),xRe.forEach(t),nhr=i(D),z7=n(D,"LI",{});var $Re=s(z7);Sbe=n($Re,"STRONG",{});var I7t=s(Sbe);shr=r(I7t,"vit"),I7t.forEach(t),lhr=r($Re," \u2014 "),cQ=n($Re,"A",{href:!0});var N7t=s(cQ);ihr=r(N7t,"TFViTModel"),N7t.forEach(t),dhr=r($Re," (ViT model)"),$Re.forEach(t),chr=i(D),W7=n(D,"LI",{});var kRe=s(W7);Rbe=n(kRe,"STRONG",{});var q7t=s(Rbe);fhr=r(q7t,"vit_mae"),q7t.forEach(t),mhr=r(kRe," \u2014 "),fQ=n(kRe,"A",{href:!0});var j7t=s(fQ);ghr=r(j7t,"TFViTMAEModel"),j7t.forEach(t),hhr=r(kRe," (ViTMAE model)"),kRe.forEach(t),phr=i(D),Q7=n(D,"LI",{});var SRe=s(Q7);Pbe=n(SRe,"STRONG",{});var D7t=s(Pbe);_hr=r(D7t,"wav2vec2"),D7t.forEach(t),uhr=r(SRe," \u2014 "),mQ=n(SRe,"A",{href:!0});var G7t=s(mQ);bhr=r(G7t,"TFWav2Vec2Model"),G7t.forEach(t),vhr=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),Fhr=i(D),H7=n(D,"LI",{});var RRe=s(H7);Bbe=n(RRe,"STRONG",{});var O7t=s(Bbe);Thr=r(O7t,"xlm"),O7t.forEach(t),Mhr=r(RRe," \u2014 "),gQ=n(RRe,"A",{href:!0});var V7t=s(gQ);Ehr=r(V7t,"TFXLMModel"),V7t.forEach(t),Chr=r(RRe," (XLM model)"),RRe.forEach(t),whr=i(D),U7=n(D,"LI",{});var PRe=s(U7);Ibe=n(PRe,"STRONG",{});var X7t=s(Ibe);Ahr=r(X7t,"xlm-roberta"),X7t.forEach(t),yhr=r(PRe," \u2014 "),hQ=n(PRe,"A",{href:!0});var z7t=s(hQ);Lhr=r(z7t,"TFXLMRobertaModel"),z7t.forEach(t),xhr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),$hr=i(D),J7=n(D,"LI",{});var BRe=s(J7);Nbe=n(BRe,"STRONG",{});var W7t=s(Nbe);khr=r(W7t,"xlnet"),W7t.forEach(t),Shr=r(BRe," \u2014 "),pQ=n(BRe,"A",{href:!0});var Q7t=s(pQ);Rhr=r(Q7t,"TFXLNetModel"),Q7t.forEach(t),Phr=r(BRe," (XLNet model)"),BRe.forEach(t),D.forEach(t),Bhr=i(pl),T(Y7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),qje=i(f),zd=n(f,"H2",{class:!0});var XGe=s(zd);K7=n(XGe,"A",{id:!0,class:!0,href:!0});var H7t=s(K7);qbe=n(H7t,"SPAN",{});var U7t=s(qbe);T(TL.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),Ihr=i(XGe),jbe=n(XGe,"SPAN",{});var J7t=s(jbe);Nhr=r(J7t,"TFAutoModelForPreTraining"),J7t.forEach(t),XGe.forEach(t),jje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(ML.$$.fragment,_l),qhr=i(_l),Wd=n(_l,"P",{});var Lee=s(Wd);jhr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=n(Lee,"A",{href:!0});var Y7t=s(_Q);Dhr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),Ghr=r(Lee," class method or the "),uQ=n(Lee,"A",{href:!0});var K7t=s(uQ);Ohr=r(K7t,"from_config()"),K7t.forEach(t),Vhr=r(Lee,` class
method.`),Lee.forEach(t),Xhr=i(_l),EL=n(_l,"P",{});var zGe=s(EL);zhr=r(zGe,"This class cannot be instantiated directly using "),Dbe=n(zGe,"CODE",{});var Z7t=s(Dbe);Whr=r(Z7t,"__init__()"),Z7t.forEach(t),Qhr=r(zGe," (throws an error)."),zGe.forEach(t),Hhr=i(_l),Lt=n(_l,"DIV",{class:!0});var P0=s(Lt);T(CL.$$.fragment,P0),Uhr=i(P0),Gbe=n(P0,"P",{});var e9t=s(Gbe);Jhr=r(e9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e9t.forEach(t),Yhr=i(P0),Qd=n(P0,"P",{});var xee=s(Qd);Khr=r(xee,`Note:
Loading a model from its configuration file does `),Obe=n(xee,"STRONG",{});var o9t=s(Obe);Zhr=r(o9t,"not"),o9t.forEach(t),epr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(xee,"A",{href:!0});var r9t=s(bQ);opr=r(r9t,"from_pretrained()"),r9t.forEach(t),rpr=r(xee," to load the model weights."),xee.forEach(t),tpr=i(P0),T(Z7.$$.fragment,P0),P0.forEach(t),apr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(wL.$$.fragment,ul),npr=i(ul),Vbe=n(ul,"P",{});var t9t=s(Vbe);spr=r(t9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t9t.forEach(t),lpr=i(ul),Za=n(ul,"P",{});var B0=s(Za);ipr=r(B0,"The model class to instantiate is selected based on the "),Xbe=n(B0,"CODE",{});var a9t=s(Xbe);dpr=r(a9t,"model_type"),a9t.forEach(t),cpr=r(B0,` property of the config object (either
passed as an argument or loaded from `),zbe=n(B0,"CODE",{});var n9t=s(zbe);fpr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),mpr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(B0,"CODE",{});var s9t=s(Wbe);gpr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),hpr=r(B0,":"),B0.forEach(t),ppr=i(ul),se=n(ul,"UL",{});var le=s(se);e9=n(le,"LI",{});var IRe=s(e9);Qbe=n(IRe,"STRONG",{});var l9t=s(Qbe);_pr=r(l9t,"albert"),l9t.forEach(t),upr=r(IRe," \u2014 "),vQ=n(IRe,"A",{href:!0});var i9t=s(vQ);bpr=r(i9t,"TFAlbertForPreTraining"),i9t.forEach(t),vpr=r(IRe," (ALBERT model)"),IRe.forEach(t),Fpr=i(le),o9=n(le,"LI",{});var NRe=s(o9);Hbe=n(NRe,"STRONG",{});var d9t=s(Hbe);Tpr=r(d9t,"bart"),d9t.forEach(t),Mpr=r(NRe," \u2014 "),FQ=n(NRe,"A",{href:!0});var c9t=s(FQ);Epr=r(c9t,"TFBartForConditionalGeneration"),c9t.forEach(t),Cpr=r(NRe," (BART model)"),NRe.forEach(t),wpr=i(le),r9=n(le,"LI",{});var qRe=s(r9);Ube=n(qRe,"STRONG",{});var f9t=s(Ube);Apr=r(f9t,"bert"),f9t.forEach(t),ypr=r(qRe," \u2014 "),TQ=n(qRe,"A",{href:!0});var m9t=s(TQ);Lpr=r(m9t,"TFBertForPreTraining"),m9t.forEach(t),xpr=r(qRe," (BERT model)"),qRe.forEach(t),$pr=i(le),t9=n(le,"LI",{});var jRe=s(t9);Jbe=n(jRe,"STRONG",{});var g9t=s(Jbe);kpr=r(g9t,"camembert"),g9t.forEach(t),Spr=r(jRe," \u2014 "),MQ=n(jRe,"A",{href:!0});var h9t=s(MQ);Rpr=r(h9t,"TFCamembertForMaskedLM"),h9t.forEach(t),Ppr=r(jRe," (CamemBERT model)"),jRe.forEach(t),Bpr=i(le),a9=n(le,"LI",{});var DRe=s(a9);Ybe=n(DRe,"STRONG",{});var p9t=s(Ybe);Ipr=r(p9t,"ctrl"),p9t.forEach(t),Npr=r(DRe," \u2014 "),EQ=n(DRe,"A",{href:!0});var _9t=s(EQ);qpr=r(_9t,"TFCTRLLMHeadModel"),_9t.forEach(t),jpr=r(DRe," (CTRL model)"),DRe.forEach(t),Dpr=i(le),n9=n(le,"LI",{});var GRe=s(n9);Kbe=n(GRe,"STRONG",{});var u9t=s(Kbe);Gpr=r(u9t,"distilbert"),u9t.forEach(t),Opr=r(GRe," \u2014 "),CQ=n(GRe,"A",{href:!0});var b9t=s(CQ);Vpr=r(b9t,"TFDistilBertForMaskedLM"),b9t.forEach(t),Xpr=r(GRe," (DistilBERT model)"),GRe.forEach(t),zpr=i(le),s9=n(le,"LI",{});var ORe=s(s9);Zbe=n(ORe,"STRONG",{});var v9t=s(Zbe);Wpr=r(v9t,"electra"),v9t.forEach(t),Qpr=r(ORe," \u2014 "),wQ=n(ORe,"A",{href:!0});var F9t=s(wQ);Hpr=r(F9t,"TFElectraForPreTraining"),F9t.forEach(t),Upr=r(ORe," (ELECTRA model)"),ORe.forEach(t),Jpr=i(le),l9=n(le,"LI",{});var VRe=s(l9);eve=n(VRe,"STRONG",{});var T9t=s(eve);Ypr=r(T9t,"flaubert"),T9t.forEach(t),Kpr=r(VRe," \u2014 "),AQ=n(VRe,"A",{href:!0});var M9t=s(AQ);Zpr=r(M9t,"TFFlaubertWithLMHeadModel"),M9t.forEach(t),e_r=r(VRe," (FlauBERT model)"),VRe.forEach(t),o_r=i(le),i9=n(le,"LI",{});var XRe=s(i9);ove=n(XRe,"STRONG",{});var E9t=s(ove);r_r=r(E9t,"funnel"),E9t.forEach(t),t_r=r(XRe," \u2014 "),yQ=n(XRe,"A",{href:!0});var C9t=s(yQ);a_r=r(C9t,"TFFunnelForPreTraining"),C9t.forEach(t),n_r=r(XRe," (Funnel Transformer model)"),XRe.forEach(t),s_r=i(le),d9=n(le,"LI",{});var zRe=s(d9);rve=n(zRe,"STRONG",{});var w9t=s(rve);l_r=r(w9t,"gpt2"),w9t.forEach(t),i_r=r(zRe," \u2014 "),LQ=n(zRe,"A",{href:!0});var A9t=s(LQ);d_r=r(A9t,"TFGPT2LMHeadModel"),A9t.forEach(t),c_r=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),f_r=i(le),c9=n(le,"LI",{});var WRe=s(c9);tve=n(WRe,"STRONG",{});var y9t=s(tve);m_r=r(y9t,"layoutlm"),y9t.forEach(t),g_r=r(WRe," \u2014 "),xQ=n(WRe,"A",{href:!0});var L9t=s(xQ);h_r=r(L9t,"TFLayoutLMForMaskedLM"),L9t.forEach(t),p_r=r(WRe," (LayoutLM model)"),WRe.forEach(t),__r=i(le),f9=n(le,"LI",{});var QRe=s(f9);ave=n(QRe,"STRONG",{});var x9t=s(ave);u_r=r(x9t,"lxmert"),x9t.forEach(t),b_r=r(QRe," \u2014 "),$Q=n(QRe,"A",{href:!0});var $9t=s($Q);v_r=r($9t,"TFLxmertForPreTraining"),$9t.forEach(t),F_r=r(QRe," (LXMERT model)"),QRe.forEach(t),T_r=i(le),m9=n(le,"LI",{});var HRe=s(m9);nve=n(HRe,"STRONG",{});var k9t=s(nve);M_r=r(k9t,"mobilebert"),k9t.forEach(t),E_r=r(HRe," \u2014 "),kQ=n(HRe,"A",{href:!0});var S9t=s(kQ);C_r=r(S9t,"TFMobileBertForPreTraining"),S9t.forEach(t),w_r=r(HRe," (MobileBERT model)"),HRe.forEach(t),A_r=i(le),g9=n(le,"LI",{});var URe=s(g9);sve=n(URe,"STRONG",{});var R9t=s(sve);y_r=r(R9t,"mpnet"),R9t.forEach(t),L_r=r(URe," \u2014 "),SQ=n(URe,"A",{href:!0});var P9t=s(SQ);x_r=r(P9t,"TFMPNetForMaskedLM"),P9t.forEach(t),$_r=r(URe," (MPNet model)"),URe.forEach(t),k_r=i(le),h9=n(le,"LI",{});var JRe=s(h9);lve=n(JRe,"STRONG",{});var B9t=s(lve);S_r=r(B9t,"openai-gpt"),B9t.forEach(t),R_r=r(JRe," \u2014 "),RQ=n(JRe,"A",{href:!0});var I9t=s(RQ);P_r=r(I9t,"TFOpenAIGPTLMHeadModel"),I9t.forEach(t),B_r=r(JRe," (OpenAI GPT model)"),JRe.forEach(t),I_r=i(le),p9=n(le,"LI",{});var YRe=s(p9);ive=n(YRe,"STRONG",{});var N9t=s(ive);N_r=r(N9t,"roberta"),N9t.forEach(t),q_r=r(YRe," \u2014 "),PQ=n(YRe,"A",{href:!0});var q9t=s(PQ);j_r=r(q9t,"TFRobertaForMaskedLM"),q9t.forEach(t),D_r=r(YRe," (RoBERTa model)"),YRe.forEach(t),G_r=i(le),_9=n(le,"LI",{});var KRe=s(_9);dve=n(KRe,"STRONG",{});var j9t=s(dve);O_r=r(j9t,"t5"),j9t.forEach(t),V_r=r(KRe," \u2014 "),BQ=n(KRe,"A",{href:!0});var D9t=s(BQ);X_r=r(D9t,"TFT5ForConditionalGeneration"),D9t.forEach(t),z_r=r(KRe," (T5 model)"),KRe.forEach(t),W_r=i(le),u9=n(le,"LI",{});var ZRe=s(u9);cve=n(ZRe,"STRONG",{});var G9t=s(cve);Q_r=r(G9t,"tapas"),G9t.forEach(t),H_r=r(ZRe," \u2014 "),IQ=n(ZRe,"A",{href:!0});var O9t=s(IQ);U_r=r(O9t,"TFTapasForMaskedLM"),O9t.forEach(t),J_r=r(ZRe," (TAPAS model)"),ZRe.forEach(t),Y_r=i(le),b9=n(le,"LI",{});var ePe=s(b9);fve=n(ePe,"STRONG",{});var V9t=s(fve);K_r=r(V9t,"transfo-xl"),V9t.forEach(t),Z_r=r(ePe," \u2014 "),NQ=n(ePe,"A",{href:!0});var X9t=s(NQ);eur=r(X9t,"TFTransfoXLLMHeadModel"),X9t.forEach(t),our=r(ePe," (Transformer-XL model)"),ePe.forEach(t),rur=i(le),v9=n(le,"LI",{});var oPe=s(v9);mve=n(oPe,"STRONG",{});var z9t=s(mve);tur=r(z9t,"vit_mae"),z9t.forEach(t),aur=r(oPe," \u2014 "),qQ=n(oPe,"A",{href:!0});var W9t=s(qQ);nur=r(W9t,"TFViTMAEForPreTraining"),W9t.forEach(t),sur=r(oPe," (ViTMAE model)"),oPe.forEach(t),lur=i(le),F9=n(le,"LI",{});var rPe=s(F9);gve=n(rPe,"STRONG",{});var Q9t=s(gve);iur=r(Q9t,"xlm"),Q9t.forEach(t),dur=r(rPe," \u2014 "),jQ=n(rPe,"A",{href:!0});var H9t=s(jQ);cur=r(H9t,"TFXLMWithLMHeadModel"),H9t.forEach(t),fur=r(rPe," (XLM model)"),rPe.forEach(t),mur=i(le),T9=n(le,"LI",{});var tPe=s(T9);hve=n(tPe,"STRONG",{});var U9t=s(hve);gur=r(U9t,"xlm-roberta"),U9t.forEach(t),hur=r(tPe," \u2014 "),DQ=n(tPe,"A",{href:!0});var J9t=s(DQ);pur=r(J9t,"TFXLMRobertaForMaskedLM"),J9t.forEach(t),_ur=r(tPe," (XLM-RoBERTa model)"),tPe.forEach(t),uur=i(le),M9=n(le,"LI",{});var aPe=s(M9);pve=n(aPe,"STRONG",{});var Y9t=s(pve);bur=r(Y9t,"xlnet"),Y9t.forEach(t),vur=r(aPe," \u2014 "),GQ=n(aPe,"A",{href:!0});var K9t=s(GQ);Fur=r(K9t,"TFXLNetLMHeadModel"),K9t.forEach(t),Tur=r(aPe," (XLNet model)"),aPe.forEach(t),le.forEach(t),Mur=i(ul),T(E9.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Dje=i(f),Hd=n(f,"H2",{class:!0});var WGe=s(Hd);C9=n(WGe,"A",{id:!0,class:!0,href:!0});var Z9t=s(C9);_ve=n(Z9t,"SPAN",{});var eMt=s(_ve);T(AL.$$.fragment,eMt),eMt.forEach(t),Z9t.forEach(t),Eur=i(WGe),uve=n(WGe,"SPAN",{});var oMt=s(uve);Cur=r(oMt,"TFAutoModelForCausalLM"),oMt.forEach(t),WGe.forEach(t),Gje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(yL.$$.fragment,bl),wur=i(bl),Ud=n(bl,"P",{});var $ee=s(Ud);Aur=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=n($ee,"A",{href:!0});var rMt=s(OQ);yur=r(rMt,"from_pretrained()"),rMt.forEach(t),Lur=r($ee," class method or the "),VQ=n($ee,"A",{href:!0});var tMt=s(VQ);xur=r(tMt,"from_config()"),tMt.forEach(t),$ur=r($ee,` class
method.`),$ee.forEach(t),kur=i(bl),LL=n(bl,"P",{});var QGe=s(LL);Sur=r(QGe,"This class cannot be instantiated directly using "),bve=n(QGe,"CODE",{});var aMt=s(bve);Rur=r(aMt,"__init__()"),aMt.forEach(t),Pur=r(QGe," (throws an error)."),QGe.forEach(t),Bur=i(bl),xt=n(bl,"DIV",{class:!0});var I0=s(xt);T(xL.$$.fragment,I0),Iur=i(I0),vve=n(I0,"P",{});var nMt=s(vve);Nur=r(nMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nMt.forEach(t),qur=i(I0),Jd=n(I0,"P",{});var kee=s(Jd);jur=r(kee,`Note:
Loading a model from its configuration file does `),Fve=n(kee,"STRONG",{});var sMt=s(Fve);Dur=r(sMt,"not"),sMt.forEach(t),Gur=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(kee,"A",{href:!0});var lMt=s(XQ);Our=r(lMt,"from_pretrained()"),lMt.forEach(t),Vur=r(kee," to load the model weights."),kee.forEach(t),Xur=i(I0),T(w9.$$.fragment,I0),I0.forEach(t),zur=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T($L.$$.fragment,vl),Wur=i(vl),Tve=n(vl,"P",{});var iMt=s(Tve);Qur=r(iMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iMt.forEach(t),Hur=i(vl),en=n(vl,"P",{});var N0=s(en);Uur=r(N0,"The model class to instantiate is selected based on the "),Mve=n(N0,"CODE",{});var dMt=s(Mve);Jur=r(dMt,"model_type"),dMt.forEach(t),Yur=r(N0,` property of the config object (either
passed as an argument or loaded from `),Eve=n(N0,"CODE",{});var cMt=s(Eve);Kur=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),Zur=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(N0,"CODE",{});var fMt=s(Cve);e2r=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),o2r=r(N0,":"),N0.forEach(t),r2r=i(vl),Ee=n(vl,"UL",{});var we=s(Ee);A9=n(we,"LI",{});var nPe=s(A9);wve=n(nPe,"STRONG",{});var mMt=s(wve);t2r=r(mMt,"bert"),mMt.forEach(t),a2r=r(nPe," \u2014 "),zQ=n(nPe,"A",{href:!0});var gMt=s(zQ);n2r=r(gMt,"TFBertLMHeadModel"),gMt.forEach(t),s2r=r(nPe," (BERT model)"),nPe.forEach(t),l2r=i(we),y9=n(we,"LI",{});var sPe=s(y9);Ave=n(sPe,"STRONG",{});var hMt=s(Ave);i2r=r(hMt,"camembert"),hMt.forEach(t),d2r=r(sPe," \u2014 "),WQ=n(sPe,"A",{href:!0});var pMt=s(WQ);c2r=r(pMt,"TFCamembertForCausalLM"),pMt.forEach(t),f2r=r(sPe," (CamemBERT model)"),sPe.forEach(t),m2r=i(we),L9=n(we,"LI",{});var lPe=s(L9);yve=n(lPe,"STRONG",{});var _Mt=s(yve);g2r=r(_Mt,"ctrl"),_Mt.forEach(t),h2r=r(lPe," \u2014 "),QQ=n(lPe,"A",{href:!0});var uMt=s(QQ);p2r=r(uMt,"TFCTRLLMHeadModel"),uMt.forEach(t),_2r=r(lPe," (CTRL model)"),lPe.forEach(t),u2r=i(we),x9=n(we,"LI",{});var iPe=s(x9);Lve=n(iPe,"STRONG",{});var bMt=s(Lve);b2r=r(bMt,"gpt2"),bMt.forEach(t),v2r=r(iPe," \u2014 "),HQ=n(iPe,"A",{href:!0});var vMt=s(HQ);F2r=r(vMt,"TFGPT2LMHeadModel"),vMt.forEach(t),T2r=r(iPe," (OpenAI GPT-2 model)"),iPe.forEach(t),M2r=i(we),$9=n(we,"LI",{});var dPe=s($9);xve=n(dPe,"STRONG",{});var FMt=s(xve);E2r=r(FMt,"gptj"),FMt.forEach(t),C2r=r(dPe," \u2014 "),UQ=n(dPe,"A",{href:!0});var TMt=s(UQ);w2r=r(TMt,"TFGPTJForCausalLM"),TMt.forEach(t),A2r=r(dPe," (GPT-J model)"),dPe.forEach(t),y2r=i(we),k9=n(we,"LI",{});var cPe=s(k9);$ve=n(cPe,"STRONG",{});var MMt=s($ve);L2r=r(MMt,"openai-gpt"),MMt.forEach(t),x2r=r(cPe," \u2014 "),JQ=n(cPe,"A",{href:!0});var EMt=s(JQ);$2r=r(EMt,"TFOpenAIGPTLMHeadModel"),EMt.forEach(t),k2r=r(cPe," (OpenAI GPT model)"),cPe.forEach(t),S2r=i(we),S9=n(we,"LI",{});var fPe=s(S9);kve=n(fPe,"STRONG",{});var CMt=s(kve);R2r=r(CMt,"rembert"),CMt.forEach(t),P2r=r(fPe," \u2014 "),YQ=n(fPe,"A",{href:!0});var wMt=s(YQ);B2r=r(wMt,"TFRemBertForCausalLM"),wMt.forEach(t),I2r=r(fPe," (RemBERT model)"),fPe.forEach(t),N2r=i(we),R9=n(we,"LI",{});var mPe=s(R9);Sve=n(mPe,"STRONG",{});var AMt=s(Sve);q2r=r(AMt,"roberta"),AMt.forEach(t),j2r=r(mPe," \u2014 "),KQ=n(mPe,"A",{href:!0});var yMt=s(KQ);D2r=r(yMt,"TFRobertaForCausalLM"),yMt.forEach(t),G2r=r(mPe," (RoBERTa model)"),mPe.forEach(t),O2r=i(we),P9=n(we,"LI",{});var gPe=s(P9);Rve=n(gPe,"STRONG",{});var LMt=s(Rve);V2r=r(LMt,"roformer"),LMt.forEach(t),X2r=r(gPe," \u2014 "),ZQ=n(gPe,"A",{href:!0});var xMt=s(ZQ);z2r=r(xMt,"TFRoFormerForCausalLM"),xMt.forEach(t),W2r=r(gPe," (RoFormer model)"),gPe.forEach(t),Q2r=i(we),B9=n(we,"LI",{});var hPe=s(B9);Pve=n(hPe,"STRONG",{});var $Mt=s(Pve);H2r=r($Mt,"transfo-xl"),$Mt.forEach(t),U2r=r(hPe," \u2014 "),eH=n(hPe,"A",{href:!0});var kMt=s(eH);J2r=r(kMt,"TFTransfoXLLMHeadModel"),kMt.forEach(t),Y2r=r(hPe," (Transformer-XL model)"),hPe.forEach(t),K2r=i(we),I9=n(we,"LI",{});var pPe=s(I9);Bve=n(pPe,"STRONG",{});var SMt=s(Bve);Z2r=r(SMt,"xlm"),SMt.forEach(t),e1r=r(pPe," \u2014 "),oH=n(pPe,"A",{href:!0});var RMt=s(oH);o1r=r(RMt,"TFXLMWithLMHeadModel"),RMt.forEach(t),r1r=r(pPe," (XLM model)"),pPe.forEach(t),t1r=i(we),N9=n(we,"LI",{});var _Pe=s(N9);Ive=n(_Pe,"STRONG",{});var PMt=s(Ive);a1r=r(PMt,"xlnet"),PMt.forEach(t),n1r=r(_Pe," \u2014 "),rH=n(_Pe,"A",{href:!0});var BMt=s(rH);s1r=r(BMt,"TFXLNetLMHeadModel"),BMt.forEach(t),l1r=r(_Pe," (XLNet model)"),_Pe.forEach(t),we.forEach(t),i1r=i(vl),T(q9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Oje=i(f),Yd=n(f,"H2",{class:!0});var HGe=s(Yd);j9=n(HGe,"A",{id:!0,class:!0,href:!0});var IMt=s(j9);Nve=n(IMt,"SPAN",{});var NMt=s(Nve);T(kL.$$.fragment,NMt),NMt.forEach(t),IMt.forEach(t),d1r=i(HGe),qve=n(HGe,"SPAN",{});var qMt=s(qve);c1r=r(qMt,"TFAutoModelForImageClassification"),qMt.forEach(t),HGe.forEach(t),Vje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(SL.$$.fragment,Fl),f1r=i(Fl),Kd=n(Fl,"P",{});var See=s(Kd);m1r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tH=n(See,"A",{href:!0});var jMt=s(tH);g1r=r(jMt,"from_pretrained()"),jMt.forEach(t),h1r=r(See," class method or the "),aH=n(See,"A",{href:!0});var DMt=s(aH);p1r=r(DMt,"from_config()"),DMt.forEach(t),_1r=r(See,` class
method.`),See.forEach(t),u1r=i(Fl),RL=n(Fl,"P",{});var UGe=s(RL);b1r=r(UGe,"This class cannot be instantiated directly using "),jve=n(UGe,"CODE",{});var GMt=s(jve);v1r=r(GMt,"__init__()"),GMt.forEach(t),F1r=r(UGe," (throws an error)."),UGe.forEach(t),T1r=i(Fl),$t=n(Fl,"DIV",{class:!0});var q0=s($t);T(PL.$$.fragment,q0),M1r=i(q0),Dve=n(q0,"P",{});var OMt=s(Dve);E1r=r(OMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),OMt.forEach(t),C1r=i(q0),Zd=n(q0,"P",{});var Ree=s(Zd);w1r=r(Ree,`Note:
Loading a model from its configuration file does `),Gve=n(Ree,"STRONG",{});var VMt=s(Gve);A1r=r(VMt,"not"),VMt.forEach(t),y1r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(Ree,"A",{href:!0});var XMt=s(nH);L1r=r(XMt,"from_pretrained()"),XMt.forEach(t),x1r=r(Ree," to load the model weights."),Ree.forEach(t),$1r=i(q0),T(D9.$$.fragment,q0),q0.forEach(t),k1r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(BL.$$.fragment,Tl),S1r=i(Tl),Ove=n(Tl,"P",{});var zMt=s(Ove);R1r=r(zMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zMt.forEach(t),P1r=i(Tl),on=n(Tl,"P",{});var j0=s(on);B1r=r(j0,"The model class to instantiate is selected based on the "),Vve=n(j0,"CODE",{});var WMt=s(Vve);I1r=r(WMt,"model_type"),WMt.forEach(t),N1r=r(j0,` property of the config object (either
passed as an argument or loaded from `),Xve=n(j0,"CODE",{});var QMt=s(Xve);q1r=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),j1r=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(j0,"CODE",{});var HMt=s(zve);D1r=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),G1r=r(j0,":"),j0.forEach(t),O1r=i(Tl),rn=n(Tl,"UL",{});var D0=s(rn);G9=n(D0,"LI",{});var uPe=s(G9);Wve=n(uPe,"STRONG",{});var UMt=s(Wve);V1r=r(UMt,"convnext"),UMt.forEach(t),X1r=r(uPe," \u2014 "),sH=n(uPe,"A",{href:!0});var JMt=s(sH);z1r=r(JMt,"TFConvNextForImageClassification"),JMt.forEach(t),W1r=r(uPe," (ConvNext model)"),uPe.forEach(t),Q1r=i(D0),O9=n(D0,"LI",{});var bPe=s(O9);Qve=n(bPe,"STRONG",{});var YMt=s(Qve);H1r=r(YMt,"data2vec-vision"),YMt.forEach(t),U1r=r(bPe," \u2014 "),lH=n(bPe,"A",{href:!0});var KMt=s(lH);J1r=r(KMt,"TFData2VecVisionForImageClassification"),KMt.forEach(t),Y1r=r(bPe," (Data2VecVision model)"),bPe.forEach(t),K1r=i(D0),V9=n(D0,"LI",{});var vPe=s(V9);Hve=n(vPe,"STRONG",{});var ZMt=s(Hve);Z1r=r(ZMt,"swin"),ZMt.forEach(t),ebr=r(vPe," \u2014 "),iH=n(vPe,"A",{href:!0});var e4t=s(iH);obr=r(e4t,"TFSwinForImageClassification"),e4t.forEach(t),rbr=r(vPe," (Swin model)"),vPe.forEach(t),tbr=i(D0),X9=n(D0,"LI",{});var FPe=s(X9);Uve=n(FPe,"STRONG",{});var o4t=s(Uve);abr=r(o4t,"vit"),o4t.forEach(t),nbr=r(FPe," \u2014 "),dH=n(FPe,"A",{href:!0});var r4t=s(dH);sbr=r(r4t,"TFViTForImageClassification"),r4t.forEach(t),lbr=r(FPe," (ViT model)"),FPe.forEach(t),D0.forEach(t),ibr=i(Tl),T(z9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Xje=i(f),ec=n(f,"H2",{class:!0});var JGe=s(ec);W9=n(JGe,"A",{id:!0,class:!0,href:!0});var t4t=s(W9);Jve=n(t4t,"SPAN",{});var a4t=s(Jve);T(IL.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),dbr=i(JGe),Yve=n(JGe,"SPAN",{});var n4t=s(Yve);cbr=r(n4t,"TFAutoModelForMaskedLM"),n4t.forEach(t),JGe.forEach(t),zje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(NL.$$.fragment,Ml),fbr=i(Ml),oc=n(Ml,"P",{});var Pee=s(oc);mbr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cH=n(Pee,"A",{href:!0});var s4t=s(cH);gbr=r(s4t,"from_pretrained()"),s4t.forEach(t),hbr=r(Pee," class method or the "),fH=n(Pee,"A",{href:!0});var l4t=s(fH);pbr=r(l4t,"from_config()"),l4t.forEach(t),_br=r(Pee,` class
method.`),Pee.forEach(t),ubr=i(Ml),qL=n(Ml,"P",{});var YGe=s(qL);bbr=r(YGe,"This class cannot be instantiated directly using "),Kve=n(YGe,"CODE",{});var i4t=s(Kve);vbr=r(i4t,"__init__()"),i4t.forEach(t),Fbr=r(YGe," (throws an error)."),YGe.forEach(t),Tbr=i(Ml),kt=n(Ml,"DIV",{class:!0});var G0=s(kt);T(jL.$$.fragment,G0),Mbr=i(G0),Zve=n(G0,"P",{});var d4t=s(Zve);Ebr=r(d4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d4t.forEach(t),Cbr=i(G0),rc=n(G0,"P",{});var Bee=s(rc);wbr=r(Bee,`Note:
Loading a model from its configuration file does `),eFe=n(Bee,"STRONG",{});var c4t=s(eFe);Abr=r(c4t,"not"),c4t.forEach(t),ybr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(Bee,"A",{href:!0});var f4t=s(mH);Lbr=r(f4t,"from_pretrained()"),f4t.forEach(t),xbr=r(Bee," to load the model weights."),Bee.forEach(t),$br=i(G0),T(Q9.$$.fragment,G0),G0.forEach(t),kbr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(DL.$$.fragment,El),Sbr=i(El),oFe=n(El,"P",{});var m4t=s(oFe);Rbr=r(m4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m4t.forEach(t),Pbr=i(El),tn=n(El,"P",{});var O0=s(tn);Bbr=r(O0,"The model class to instantiate is selected based on the "),rFe=n(O0,"CODE",{});var g4t=s(rFe);Ibr=r(g4t,"model_type"),g4t.forEach(t),Nbr=r(O0,` property of the config object (either
passed as an argument or loaded from `),tFe=n(O0,"CODE",{});var h4t=s(tFe);qbr=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),jbr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(O0,"CODE",{});var p4t=s(aFe);Dbr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),Gbr=r(O0,":"),O0.forEach(t),Obr=i(El),ie=n(El,"UL",{});var fe=s(ie);H9=n(fe,"LI",{});var TPe=s(H9);nFe=n(TPe,"STRONG",{});var _4t=s(nFe);Vbr=r(_4t,"albert"),_4t.forEach(t),Xbr=r(TPe," \u2014 "),gH=n(TPe,"A",{href:!0});var u4t=s(gH);zbr=r(u4t,"TFAlbertForMaskedLM"),u4t.forEach(t),Wbr=r(TPe," (ALBERT model)"),TPe.forEach(t),Qbr=i(fe),U9=n(fe,"LI",{});var MPe=s(U9);sFe=n(MPe,"STRONG",{});var b4t=s(sFe);Hbr=r(b4t,"bert"),b4t.forEach(t),Ubr=r(MPe," \u2014 "),hH=n(MPe,"A",{href:!0});var v4t=s(hH);Jbr=r(v4t,"TFBertForMaskedLM"),v4t.forEach(t),Ybr=r(MPe," (BERT model)"),MPe.forEach(t),Kbr=i(fe),J9=n(fe,"LI",{});var EPe=s(J9);lFe=n(EPe,"STRONG",{});var F4t=s(lFe);Zbr=r(F4t,"camembert"),F4t.forEach(t),evr=r(EPe," \u2014 "),pH=n(EPe,"A",{href:!0});var T4t=s(pH);ovr=r(T4t,"TFCamembertForMaskedLM"),T4t.forEach(t),rvr=r(EPe," (CamemBERT model)"),EPe.forEach(t),tvr=i(fe),Y9=n(fe,"LI",{});var CPe=s(Y9);iFe=n(CPe,"STRONG",{});var M4t=s(iFe);avr=r(M4t,"convbert"),M4t.forEach(t),nvr=r(CPe," \u2014 "),_H=n(CPe,"A",{href:!0});var E4t=s(_H);svr=r(E4t,"TFConvBertForMaskedLM"),E4t.forEach(t),lvr=r(CPe," (ConvBERT model)"),CPe.forEach(t),ivr=i(fe),K9=n(fe,"LI",{});var wPe=s(K9);dFe=n(wPe,"STRONG",{});var C4t=s(dFe);dvr=r(C4t,"deberta"),C4t.forEach(t),cvr=r(wPe," \u2014 "),uH=n(wPe,"A",{href:!0});var w4t=s(uH);fvr=r(w4t,"TFDebertaForMaskedLM"),w4t.forEach(t),mvr=r(wPe," (DeBERTa model)"),wPe.forEach(t),gvr=i(fe),Z9=n(fe,"LI",{});var APe=s(Z9);cFe=n(APe,"STRONG",{});var A4t=s(cFe);hvr=r(A4t,"deberta-v2"),A4t.forEach(t),pvr=r(APe," \u2014 "),bH=n(APe,"A",{href:!0});var y4t=s(bH);_vr=r(y4t,"TFDebertaV2ForMaskedLM"),y4t.forEach(t),uvr=r(APe," (DeBERTa-v2 model)"),APe.forEach(t),bvr=i(fe),eM=n(fe,"LI",{});var yPe=s(eM);fFe=n(yPe,"STRONG",{});var L4t=s(fFe);vvr=r(L4t,"distilbert"),L4t.forEach(t),Fvr=r(yPe," \u2014 "),vH=n(yPe,"A",{href:!0});var x4t=s(vH);Tvr=r(x4t,"TFDistilBertForMaskedLM"),x4t.forEach(t),Mvr=r(yPe," (DistilBERT model)"),yPe.forEach(t),Evr=i(fe),oM=n(fe,"LI",{});var LPe=s(oM);mFe=n(LPe,"STRONG",{});var $4t=s(mFe);Cvr=r($4t,"electra"),$4t.forEach(t),wvr=r(LPe," \u2014 "),FH=n(LPe,"A",{href:!0});var k4t=s(FH);Avr=r(k4t,"TFElectraForMaskedLM"),k4t.forEach(t),yvr=r(LPe," (ELECTRA model)"),LPe.forEach(t),Lvr=i(fe),rM=n(fe,"LI",{});var xPe=s(rM);gFe=n(xPe,"STRONG",{});var S4t=s(gFe);xvr=r(S4t,"flaubert"),S4t.forEach(t),$vr=r(xPe," \u2014 "),TH=n(xPe,"A",{href:!0});var R4t=s(TH);kvr=r(R4t,"TFFlaubertWithLMHeadModel"),R4t.forEach(t),Svr=r(xPe," (FlauBERT model)"),xPe.forEach(t),Rvr=i(fe),tM=n(fe,"LI",{});var $Pe=s(tM);hFe=n($Pe,"STRONG",{});var P4t=s(hFe);Pvr=r(P4t,"funnel"),P4t.forEach(t),Bvr=r($Pe," \u2014 "),MH=n($Pe,"A",{href:!0});var B4t=s(MH);Ivr=r(B4t,"TFFunnelForMaskedLM"),B4t.forEach(t),Nvr=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),qvr=i(fe),aM=n(fe,"LI",{});var kPe=s(aM);pFe=n(kPe,"STRONG",{});var I4t=s(pFe);jvr=r(I4t,"layoutlm"),I4t.forEach(t),Dvr=r(kPe," \u2014 "),EH=n(kPe,"A",{href:!0});var N4t=s(EH);Gvr=r(N4t,"TFLayoutLMForMaskedLM"),N4t.forEach(t),Ovr=r(kPe," (LayoutLM model)"),kPe.forEach(t),Vvr=i(fe),nM=n(fe,"LI",{});var SPe=s(nM);_Fe=n(SPe,"STRONG",{});var q4t=s(_Fe);Xvr=r(q4t,"longformer"),q4t.forEach(t),zvr=r(SPe," \u2014 "),CH=n(SPe,"A",{href:!0});var j4t=s(CH);Wvr=r(j4t,"TFLongformerForMaskedLM"),j4t.forEach(t),Qvr=r(SPe," (Longformer model)"),SPe.forEach(t),Hvr=i(fe),sM=n(fe,"LI",{});var RPe=s(sM);uFe=n(RPe,"STRONG",{});var D4t=s(uFe);Uvr=r(D4t,"mobilebert"),D4t.forEach(t),Jvr=r(RPe," \u2014 "),wH=n(RPe,"A",{href:!0});var G4t=s(wH);Yvr=r(G4t,"TFMobileBertForMaskedLM"),G4t.forEach(t),Kvr=r(RPe," (MobileBERT model)"),RPe.forEach(t),Zvr=i(fe),lM=n(fe,"LI",{});var PPe=s(lM);bFe=n(PPe,"STRONG",{});var O4t=s(bFe);eFr=r(O4t,"mpnet"),O4t.forEach(t),oFr=r(PPe," \u2014 "),AH=n(PPe,"A",{href:!0});var V4t=s(AH);rFr=r(V4t,"TFMPNetForMaskedLM"),V4t.forEach(t),tFr=r(PPe," (MPNet model)"),PPe.forEach(t),aFr=i(fe),iM=n(fe,"LI",{});var BPe=s(iM);vFe=n(BPe,"STRONG",{});var X4t=s(vFe);nFr=r(X4t,"rembert"),X4t.forEach(t),sFr=r(BPe," \u2014 "),yH=n(BPe,"A",{href:!0});var z4t=s(yH);lFr=r(z4t,"TFRemBertForMaskedLM"),z4t.forEach(t),iFr=r(BPe," (RemBERT model)"),BPe.forEach(t),dFr=i(fe),dM=n(fe,"LI",{});var IPe=s(dM);FFe=n(IPe,"STRONG",{});var W4t=s(FFe);cFr=r(W4t,"roberta"),W4t.forEach(t),fFr=r(IPe," \u2014 "),LH=n(IPe,"A",{href:!0});var Q4t=s(LH);mFr=r(Q4t,"TFRobertaForMaskedLM"),Q4t.forEach(t),gFr=r(IPe," (RoBERTa model)"),IPe.forEach(t),hFr=i(fe),cM=n(fe,"LI",{});var NPe=s(cM);TFe=n(NPe,"STRONG",{});var H4t=s(TFe);pFr=r(H4t,"roformer"),H4t.forEach(t),_Fr=r(NPe," \u2014 "),xH=n(NPe,"A",{href:!0});var U4t=s(xH);uFr=r(U4t,"TFRoFormerForMaskedLM"),U4t.forEach(t),bFr=r(NPe," (RoFormer model)"),NPe.forEach(t),vFr=i(fe),fM=n(fe,"LI",{});var qPe=s(fM);MFe=n(qPe,"STRONG",{});var J4t=s(MFe);FFr=r(J4t,"tapas"),J4t.forEach(t),TFr=r(qPe," \u2014 "),$H=n(qPe,"A",{href:!0});var Y4t=s($H);MFr=r(Y4t,"TFTapasForMaskedLM"),Y4t.forEach(t),EFr=r(qPe," (TAPAS model)"),qPe.forEach(t),CFr=i(fe),mM=n(fe,"LI",{});var jPe=s(mM);EFe=n(jPe,"STRONG",{});var K4t=s(EFe);wFr=r(K4t,"xlm"),K4t.forEach(t),AFr=r(jPe," \u2014 "),kH=n(jPe,"A",{href:!0});var Z4t=s(kH);yFr=r(Z4t,"TFXLMWithLMHeadModel"),Z4t.forEach(t),LFr=r(jPe," (XLM model)"),jPe.forEach(t),xFr=i(fe),gM=n(fe,"LI",{});var DPe=s(gM);CFe=n(DPe,"STRONG",{});var eEt=s(CFe);$Fr=r(eEt,"xlm-roberta"),eEt.forEach(t),kFr=r(DPe," \u2014 "),SH=n(DPe,"A",{href:!0});var oEt=s(SH);SFr=r(oEt,"TFXLMRobertaForMaskedLM"),oEt.forEach(t),RFr=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),fe.forEach(t),PFr=i(El),T(hM.$$.fragment,El),El.forEach(t),Ml.forEach(t),Wje=i(f),tc=n(f,"H2",{class:!0});var KGe=s(tc);pM=n(KGe,"A",{id:!0,class:!0,href:!0});var rEt=s(pM);wFe=n(rEt,"SPAN",{});var tEt=s(wFe);T(GL.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),BFr=i(KGe),AFe=n(KGe,"SPAN",{});var aEt=s(AFe);IFr=r(aEt,"TFAutoModelForSeq2SeqLM"),aEt.forEach(t),KGe.forEach(t),Qje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(OL.$$.fragment,Cl),NFr=i(Cl),ac=n(Cl,"P",{});var Iee=s(ac);qFr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RH=n(Iee,"A",{href:!0});var nEt=s(RH);jFr=r(nEt,"from_pretrained()"),nEt.forEach(t),DFr=r(Iee," class method or the "),PH=n(Iee,"A",{href:!0});var sEt=s(PH);GFr=r(sEt,"from_config()"),sEt.forEach(t),OFr=r(Iee,` class
method.`),Iee.forEach(t),VFr=i(Cl),VL=n(Cl,"P",{});var ZGe=s(VL);XFr=r(ZGe,"This class cannot be instantiated directly using "),yFe=n(ZGe,"CODE",{});var lEt=s(yFe);zFr=r(lEt,"__init__()"),lEt.forEach(t),WFr=r(ZGe," (throws an error)."),ZGe.forEach(t),QFr=i(Cl),St=n(Cl,"DIV",{class:!0});var V0=s(St);T(XL.$$.fragment,V0),HFr=i(V0),LFe=n(V0,"P",{});var iEt=s(LFe);UFr=r(iEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iEt.forEach(t),JFr=i(V0),nc=n(V0,"P",{});var Nee=s(nc);YFr=r(Nee,`Note:
Loading a model from its configuration file does `),xFe=n(Nee,"STRONG",{});var dEt=s(xFe);KFr=r(dEt,"not"),dEt.forEach(t),ZFr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Nee,"A",{href:!0});var cEt=s(BH);e6r=r(cEt,"from_pretrained()"),cEt.forEach(t),o6r=r(Nee," to load the model weights."),Nee.forEach(t),r6r=i(V0),T(_M.$$.fragment,V0),V0.forEach(t),t6r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(zL.$$.fragment,wl),a6r=i(wl),$Fe=n(wl,"P",{});var fEt=s($Fe);n6r=r(fEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fEt.forEach(t),s6r=i(wl),an=n(wl,"P",{});var X0=s(an);l6r=r(X0,"The model class to instantiate is selected based on the "),kFe=n(X0,"CODE",{});var mEt=s(kFe);i6r=r(mEt,"model_type"),mEt.forEach(t),d6r=r(X0,` property of the config object (either
passed as an argument or loaded from `),SFe=n(X0,"CODE",{});var gEt=s(SFe);c6r=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),f6r=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(X0,"CODE",{});var hEt=s(RFe);m6r=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),g6r=r(X0,":"),X0.forEach(t),h6r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);uM=n(Be,"LI",{});var GPe=s(uM);PFe=n(GPe,"STRONG",{});var pEt=s(PFe);p6r=r(pEt,"bart"),pEt.forEach(t),_6r=r(GPe," \u2014 "),IH=n(GPe,"A",{href:!0});var _Et=s(IH);u6r=r(_Et,"TFBartForConditionalGeneration"),_Et.forEach(t),b6r=r(GPe," (BART model)"),GPe.forEach(t),v6r=i(Be),bM=n(Be,"LI",{});var OPe=s(bM);BFe=n(OPe,"STRONG",{});var uEt=s(BFe);F6r=r(uEt,"blenderbot"),uEt.forEach(t),T6r=r(OPe," \u2014 "),NH=n(OPe,"A",{href:!0});var bEt=s(NH);M6r=r(bEt,"TFBlenderbotForConditionalGeneration"),bEt.forEach(t),E6r=r(OPe," (Blenderbot model)"),OPe.forEach(t),C6r=i(Be),vM=n(Be,"LI",{});var VPe=s(vM);IFe=n(VPe,"STRONG",{});var vEt=s(IFe);w6r=r(vEt,"blenderbot-small"),vEt.forEach(t),A6r=r(VPe," \u2014 "),qH=n(VPe,"A",{href:!0});var FEt=s(qH);y6r=r(FEt,"TFBlenderbotSmallForConditionalGeneration"),FEt.forEach(t),L6r=r(VPe," (BlenderbotSmall model)"),VPe.forEach(t),x6r=i(Be),FM=n(Be,"LI",{});var XPe=s(FM);NFe=n(XPe,"STRONG",{});var TEt=s(NFe);$6r=r(TEt,"encoder-decoder"),TEt.forEach(t),k6r=r(XPe," \u2014 "),jH=n(XPe,"A",{href:!0});var MEt=s(jH);S6r=r(MEt,"TFEncoderDecoderModel"),MEt.forEach(t),R6r=r(XPe," (Encoder decoder model)"),XPe.forEach(t),P6r=i(Be),TM=n(Be,"LI",{});var zPe=s(TM);qFe=n(zPe,"STRONG",{});var EEt=s(qFe);B6r=r(EEt,"led"),EEt.forEach(t),I6r=r(zPe," \u2014 "),DH=n(zPe,"A",{href:!0});var CEt=s(DH);N6r=r(CEt,"TFLEDForConditionalGeneration"),CEt.forEach(t),q6r=r(zPe," (LED model)"),zPe.forEach(t),j6r=i(Be),MM=n(Be,"LI",{});var WPe=s(MM);jFe=n(WPe,"STRONG",{});var wEt=s(jFe);D6r=r(wEt,"marian"),wEt.forEach(t),G6r=r(WPe," \u2014 "),GH=n(WPe,"A",{href:!0});var AEt=s(GH);O6r=r(AEt,"TFMarianMTModel"),AEt.forEach(t),V6r=r(WPe," (Marian model)"),WPe.forEach(t),X6r=i(Be),EM=n(Be,"LI",{});var QPe=s(EM);DFe=n(QPe,"STRONG",{});var yEt=s(DFe);z6r=r(yEt,"mbart"),yEt.forEach(t),W6r=r(QPe," \u2014 "),OH=n(QPe,"A",{href:!0});var LEt=s(OH);Q6r=r(LEt,"TFMBartForConditionalGeneration"),LEt.forEach(t),H6r=r(QPe," (mBART model)"),QPe.forEach(t),U6r=i(Be),CM=n(Be,"LI",{});var HPe=s(CM);GFe=n(HPe,"STRONG",{});var xEt=s(GFe);J6r=r(xEt,"mt5"),xEt.forEach(t),Y6r=r(HPe," \u2014 "),VH=n(HPe,"A",{href:!0});var $Et=s(VH);K6r=r($Et,"TFMT5ForConditionalGeneration"),$Et.forEach(t),Z6r=r(HPe," (mT5 model)"),HPe.forEach(t),eTr=i(Be),wM=n(Be,"LI",{});var UPe=s(wM);OFe=n(UPe,"STRONG",{});var kEt=s(OFe);oTr=r(kEt,"pegasus"),kEt.forEach(t),rTr=r(UPe," \u2014 "),XH=n(UPe,"A",{href:!0});var SEt=s(XH);tTr=r(SEt,"TFPegasusForConditionalGeneration"),SEt.forEach(t),aTr=r(UPe," (Pegasus model)"),UPe.forEach(t),nTr=i(Be),AM=n(Be,"LI",{});var JPe=s(AM);VFe=n(JPe,"STRONG",{});var REt=s(VFe);sTr=r(REt,"t5"),REt.forEach(t),lTr=r(JPe," \u2014 "),zH=n(JPe,"A",{href:!0});var PEt=s(zH);iTr=r(PEt,"TFT5ForConditionalGeneration"),PEt.forEach(t),dTr=r(JPe," (T5 model)"),JPe.forEach(t),Be.forEach(t),cTr=i(wl),T(yM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Hje=i(f),sc=n(f,"H2",{class:!0});var eOe=s(sc);LM=n(eOe,"A",{id:!0,class:!0,href:!0});var BEt=s(LM);XFe=n(BEt,"SPAN",{});var IEt=s(XFe);T(WL.$$.fragment,IEt),IEt.forEach(t),BEt.forEach(t),fTr=i(eOe),zFe=n(eOe,"SPAN",{});var NEt=s(zFe);mTr=r(NEt,"TFAutoModelForSequenceClassification"),NEt.forEach(t),eOe.forEach(t),Uje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(QL.$$.fragment,Al),gTr=i(Al),lc=n(Al,"P",{});var qee=s(lc);hTr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WH=n(qee,"A",{href:!0});var qEt=s(WH);pTr=r(qEt,"from_pretrained()"),qEt.forEach(t),_Tr=r(qee," class method or the "),QH=n(qee,"A",{href:!0});var jEt=s(QH);uTr=r(jEt,"from_config()"),jEt.forEach(t),bTr=r(qee,` class
method.`),qee.forEach(t),vTr=i(Al),HL=n(Al,"P",{});var oOe=s(HL);FTr=r(oOe,"This class cannot be instantiated directly using "),WFe=n(oOe,"CODE",{});var DEt=s(WFe);TTr=r(DEt,"__init__()"),DEt.forEach(t),MTr=r(oOe," (throws an error)."),oOe.forEach(t),ETr=i(Al),Rt=n(Al,"DIV",{class:!0});var z0=s(Rt);T(UL.$$.fragment,z0),CTr=i(z0),QFe=n(z0,"P",{});var GEt=s(QFe);wTr=r(GEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GEt.forEach(t),ATr=i(z0),ic=n(z0,"P",{});var jee=s(ic);yTr=r(jee,`Note:
Loading a model from its configuration file does `),HFe=n(jee,"STRONG",{});var OEt=s(HFe);LTr=r(OEt,"not"),OEt.forEach(t),xTr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(jee,"A",{href:!0});var VEt=s(HH);$Tr=r(VEt,"from_pretrained()"),VEt.forEach(t),kTr=r(jee," to load the model weights."),jee.forEach(t),STr=i(z0),T(xM.$$.fragment,z0),z0.forEach(t),RTr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(JL.$$.fragment,yl),PTr=i(yl),UFe=n(yl,"P",{});var XEt=s(UFe);BTr=r(XEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XEt.forEach(t),ITr=i(yl),nn=n(yl,"P",{});var W0=s(nn);NTr=r(W0,"The model class to instantiate is selected based on the "),JFe=n(W0,"CODE",{});var zEt=s(JFe);qTr=r(zEt,"model_type"),zEt.forEach(t),jTr=r(W0,` property of the config object (either
passed as an argument or loaded from `),YFe=n(W0,"CODE",{});var WEt=s(YFe);DTr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),GTr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(W0,"CODE",{});var QEt=s(KFe);OTr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),VTr=r(W0,":"),W0.forEach(t),XTr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);$M=n(ae,"LI",{});var YPe=s($M);ZFe=n(YPe,"STRONG",{});var HEt=s(ZFe);zTr=r(HEt,"albert"),HEt.forEach(t),WTr=r(YPe," \u2014 "),UH=n(YPe,"A",{href:!0});var UEt=s(UH);QTr=r(UEt,"TFAlbertForSequenceClassification"),UEt.forEach(t),HTr=r(YPe," (ALBERT model)"),YPe.forEach(t),UTr=i(ae),kM=n(ae,"LI",{});var KPe=s(kM);e6e=n(KPe,"STRONG",{});var JEt=s(e6e);JTr=r(JEt,"bert"),JEt.forEach(t),YTr=r(KPe," \u2014 "),JH=n(KPe,"A",{href:!0});var YEt=s(JH);KTr=r(YEt,"TFBertForSequenceClassification"),YEt.forEach(t),ZTr=r(KPe," (BERT model)"),KPe.forEach(t),e7r=i(ae),SM=n(ae,"LI",{});var ZPe=s(SM);o6e=n(ZPe,"STRONG",{});var KEt=s(o6e);o7r=r(KEt,"camembert"),KEt.forEach(t),r7r=r(ZPe," \u2014 "),YH=n(ZPe,"A",{href:!0});var ZEt=s(YH);t7r=r(ZEt,"TFCamembertForSequenceClassification"),ZEt.forEach(t),a7r=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),n7r=i(ae),RM=n(ae,"LI",{});var eBe=s(RM);r6e=n(eBe,"STRONG",{});var e5t=s(r6e);s7r=r(e5t,"convbert"),e5t.forEach(t),l7r=r(eBe," \u2014 "),KH=n(eBe,"A",{href:!0});var o5t=s(KH);i7r=r(o5t,"TFConvBertForSequenceClassification"),o5t.forEach(t),d7r=r(eBe," (ConvBERT model)"),eBe.forEach(t),c7r=i(ae),PM=n(ae,"LI",{});var oBe=s(PM);t6e=n(oBe,"STRONG",{});var r5t=s(t6e);f7r=r(r5t,"ctrl"),r5t.forEach(t),m7r=r(oBe," \u2014 "),ZH=n(oBe,"A",{href:!0});var t5t=s(ZH);g7r=r(t5t,"TFCTRLForSequenceClassification"),t5t.forEach(t),h7r=r(oBe," (CTRL model)"),oBe.forEach(t),p7r=i(ae),BM=n(ae,"LI",{});var rBe=s(BM);a6e=n(rBe,"STRONG",{});var a5t=s(a6e);_7r=r(a5t,"deberta"),a5t.forEach(t),u7r=r(rBe," \u2014 "),eU=n(rBe,"A",{href:!0});var n5t=s(eU);b7r=r(n5t,"TFDebertaForSequenceClassification"),n5t.forEach(t),v7r=r(rBe," (DeBERTa model)"),rBe.forEach(t),F7r=i(ae),IM=n(ae,"LI",{});var tBe=s(IM);n6e=n(tBe,"STRONG",{});var s5t=s(n6e);T7r=r(s5t,"deberta-v2"),s5t.forEach(t),M7r=r(tBe," \u2014 "),oU=n(tBe,"A",{href:!0});var l5t=s(oU);E7r=r(l5t,"TFDebertaV2ForSequenceClassification"),l5t.forEach(t),C7r=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),w7r=i(ae),NM=n(ae,"LI",{});var aBe=s(NM);s6e=n(aBe,"STRONG",{});var i5t=s(s6e);A7r=r(i5t,"distilbert"),i5t.forEach(t),y7r=r(aBe," \u2014 "),rU=n(aBe,"A",{href:!0});var d5t=s(rU);L7r=r(d5t,"TFDistilBertForSequenceClassification"),d5t.forEach(t),x7r=r(aBe," (DistilBERT model)"),aBe.forEach(t),$7r=i(ae),qM=n(ae,"LI",{});var nBe=s(qM);l6e=n(nBe,"STRONG",{});var c5t=s(l6e);k7r=r(c5t,"electra"),c5t.forEach(t),S7r=r(nBe," \u2014 "),tU=n(nBe,"A",{href:!0});var f5t=s(tU);R7r=r(f5t,"TFElectraForSequenceClassification"),f5t.forEach(t),P7r=r(nBe," (ELECTRA model)"),nBe.forEach(t),B7r=i(ae),jM=n(ae,"LI",{});var sBe=s(jM);i6e=n(sBe,"STRONG",{});var m5t=s(i6e);I7r=r(m5t,"flaubert"),m5t.forEach(t),N7r=r(sBe," \u2014 "),aU=n(sBe,"A",{href:!0});var g5t=s(aU);q7r=r(g5t,"TFFlaubertForSequenceClassification"),g5t.forEach(t),j7r=r(sBe," (FlauBERT model)"),sBe.forEach(t),D7r=i(ae),DM=n(ae,"LI",{});var lBe=s(DM);d6e=n(lBe,"STRONG",{});var h5t=s(d6e);G7r=r(h5t,"funnel"),h5t.forEach(t),O7r=r(lBe," \u2014 "),nU=n(lBe,"A",{href:!0});var p5t=s(nU);V7r=r(p5t,"TFFunnelForSequenceClassification"),p5t.forEach(t),X7r=r(lBe," (Funnel Transformer model)"),lBe.forEach(t),z7r=i(ae),GM=n(ae,"LI",{});var iBe=s(GM);c6e=n(iBe,"STRONG",{});var _5t=s(c6e);W7r=r(_5t,"gpt2"),_5t.forEach(t),Q7r=r(iBe," \u2014 "),sU=n(iBe,"A",{href:!0});var u5t=s(sU);H7r=r(u5t,"TFGPT2ForSequenceClassification"),u5t.forEach(t),U7r=r(iBe," (OpenAI GPT-2 model)"),iBe.forEach(t),J7r=i(ae),OM=n(ae,"LI",{});var dBe=s(OM);f6e=n(dBe,"STRONG",{});var b5t=s(f6e);Y7r=r(b5t,"gptj"),b5t.forEach(t),K7r=r(dBe," \u2014 "),lU=n(dBe,"A",{href:!0});var v5t=s(lU);Z7r=r(v5t,"TFGPTJForSequenceClassification"),v5t.forEach(t),e9r=r(dBe," (GPT-J model)"),dBe.forEach(t),o9r=i(ae),VM=n(ae,"LI",{});var cBe=s(VM);m6e=n(cBe,"STRONG",{});var F5t=s(m6e);r9r=r(F5t,"layoutlm"),F5t.forEach(t),t9r=r(cBe," \u2014 "),iU=n(cBe,"A",{href:!0});var T5t=s(iU);a9r=r(T5t,"TFLayoutLMForSequenceClassification"),T5t.forEach(t),n9r=r(cBe," (LayoutLM model)"),cBe.forEach(t),s9r=i(ae),XM=n(ae,"LI",{});var fBe=s(XM);g6e=n(fBe,"STRONG",{});var M5t=s(g6e);l9r=r(M5t,"longformer"),M5t.forEach(t),i9r=r(fBe," \u2014 "),dU=n(fBe,"A",{href:!0});var E5t=s(dU);d9r=r(E5t,"TFLongformerForSequenceClassification"),E5t.forEach(t),c9r=r(fBe," (Longformer model)"),fBe.forEach(t),f9r=i(ae),zM=n(ae,"LI",{});var mBe=s(zM);h6e=n(mBe,"STRONG",{});var C5t=s(h6e);m9r=r(C5t,"mobilebert"),C5t.forEach(t),g9r=r(mBe," \u2014 "),cU=n(mBe,"A",{href:!0});var w5t=s(cU);h9r=r(w5t,"TFMobileBertForSequenceClassification"),w5t.forEach(t),p9r=r(mBe," (MobileBERT model)"),mBe.forEach(t),_9r=i(ae),WM=n(ae,"LI",{});var gBe=s(WM);p6e=n(gBe,"STRONG",{});var A5t=s(p6e);u9r=r(A5t,"mpnet"),A5t.forEach(t),b9r=r(gBe," \u2014 "),fU=n(gBe,"A",{href:!0});var y5t=s(fU);v9r=r(y5t,"TFMPNetForSequenceClassification"),y5t.forEach(t),F9r=r(gBe," (MPNet model)"),gBe.forEach(t),T9r=i(ae),QM=n(ae,"LI",{});var hBe=s(QM);_6e=n(hBe,"STRONG",{});var L5t=s(_6e);M9r=r(L5t,"openai-gpt"),L5t.forEach(t),E9r=r(hBe," \u2014 "),mU=n(hBe,"A",{href:!0});var x5t=s(mU);C9r=r(x5t,"TFOpenAIGPTForSequenceClassification"),x5t.forEach(t),w9r=r(hBe," (OpenAI GPT model)"),hBe.forEach(t),A9r=i(ae),HM=n(ae,"LI",{});var pBe=s(HM);u6e=n(pBe,"STRONG",{});var $5t=s(u6e);y9r=r($5t,"rembert"),$5t.forEach(t),L9r=r(pBe," \u2014 "),gU=n(pBe,"A",{href:!0});var k5t=s(gU);x9r=r(k5t,"TFRemBertForSequenceClassification"),k5t.forEach(t),$9r=r(pBe," (RemBERT model)"),pBe.forEach(t),k9r=i(ae),UM=n(ae,"LI",{});var _Be=s(UM);b6e=n(_Be,"STRONG",{});var S5t=s(b6e);S9r=r(S5t,"roberta"),S5t.forEach(t),R9r=r(_Be," \u2014 "),hU=n(_Be,"A",{href:!0});var R5t=s(hU);P9r=r(R5t,"TFRobertaForSequenceClassification"),R5t.forEach(t),B9r=r(_Be," (RoBERTa model)"),_Be.forEach(t),I9r=i(ae),JM=n(ae,"LI",{});var uBe=s(JM);v6e=n(uBe,"STRONG",{});var P5t=s(v6e);N9r=r(P5t,"roformer"),P5t.forEach(t),q9r=r(uBe," \u2014 "),pU=n(uBe,"A",{href:!0});var B5t=s(pU);j9r=r(B5t,"TFRoFormerForSequenceClassification"),B5t.forEach(t),D9r=r(uBe," (RoFormer model)"),uBe.forEach(t),G9r=i(ae),YM=n(ae,"LI",{});var bBe=s(YM);F6e=n(bBe,"STRONG",{});var I5t=s(F6e);O9r=r(I5t,"tapas"),I5t.forEach(t),V9r=r(bBe," \u2014 "),_U=n(bBe,"A",{href:!0});var N5t=s(_U);X9r=r(N5t,"TFTapasForSequenceClassification"),N5t.forEach(t),z9r=r(bBe," (TAPAS model)"),bBe.forEach(t),W9r=i(ae),KM=n(ae,"LI",{});var vBe=s(KM);T6e=n(vBe,"STRONG",{});var q5t=s(T6e);Q9r=r(q5t,"transfo-xl"),q5t.forEach(t),H9r=r(vBe," \u2014 "),uU=n(vBe,"A",{href:!0});var j5t=s(uU);U9r=r(j5t,"TFTransfoXLForSequenceClassification"),j5t.forEach(t),J9r=r(vBe," (Transformer-XL model)"),vBe.forEach(t),Y9r=i(ae),ZM=n(ae,"LI",{});var FBe=s(ZM);M6e=n(FBe,"STRONG",{});var D5t=s(M6e);K9r=r(D5t,"xlm"),D5t.forEach(t),Z9r=r(FBe," \u2014 "),bU=n(FBe,"A",{href:!0});var G5t=s(bU);eMr=r(G5t,"TFXLMForSequenceClassification"),G5t.forEach(t),oMr=r(FBe," (XLM model)"),FBe.forEach(t),rMr=i(ae),e4=n(ae,"LI",{});var TBe=s(e4);E6e=n(TBe,"STRONG",{});var O5t=s(E6e);tMr=r(O5t,"xlm-roberta"),O5t.forEach(t),aMr=r(TBe," \u2014 "),vU=n(TBe,"A",{href:!0});var V5t=s(vU);nMr=r(V5t,"TFXLMRobertaForSequenceClassification"),V5t.forEach(t),sMr=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),lMr=i(ae),o4=n(ae,"LI",{});var MBe=s(o4);C6e=n(MBe,"STRONG",{});var X5t=s(C6e);iMr=r(X5t,"xlnet"),X5t.forEach(t),dMr=r(MBe," \u2014 "),FU=n(MBe,"A",{href:!0});var z5t=s(FU);cMr=r(z5t,"TFXLNetForSequenceClassification"),z5t.forEach(t),fMr=r(MBe," (XLNet model)"),MBe.forEach(t),ae.forEach(t),mMr=i(yl),T(r4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Jje=i(f),dc=n(f,"H2",{class:!0});var rOe=s(dc);t4=n(rOe,"A",{id:!0,class:!0,href:!0});var W5t=s(t4);w6e=n(W5t,"SPAN",{});var Q5t=s(w6e);T(YL.$$.fragment,Q5t),Q5t.forEach(t),W5t.forEach(t),gMr=i(rOe),A6e=n(rOe,"SPAN",{});var H5t=s(A6e);hMr=r(H5t,"TFAutoModelForMultipleChoice"),H5t.forEach(t),rOe.forEach(t),Yje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(KL.$$.fragment,Ll),pMr=i(Ll),cc=n(Ll,"P",{});var Dee=s(cc);_Mr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),TU=n(Dee,"A",{href:!0});var U5t=s(TU);uMr=r(U5t,"from_pretrained()"),U5t.forEach(t),bMr=r(Dee," class method or the "),MU=n(Dee,"A",{href:!0});var J5t=s(MU);vMr=r(J5t,"from_config()"),J5t.forEach(t),FMr=r(Dee,` class
method.`),Dee.forEach(t),TMr=i(Ll),ZL=n(Ll,"P",{});var tOe=s(ZL);MMr=r(tOe,"This class cannot be instantiated directly using "),y6e=n(tOe,"CODE",{});var Y5t=s(y6e);EMr=r(Y5t,"__init__()"),Y5t.forEach(t),CMr=r(tOe," (throws an error)."),tOe.forEach(t),wMr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var Q0=s(Pt);T(e8.$$.fragment,Q0),AMr=i(Q0),L6e=n(Q0,"P",{});var K5t=s(L6e);yMr=r(K5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K5t.forEach(t),LMr=i(Q0),fc=n(Q0,"P",{});var Gee=s(fc);xMr=r(Gee,`Note:
Loading a model from its configuration file does `),x6e=n(Gee,"STRONG",{});var Z5t=s(x6e);$Mr=r(Z5t,"not"),Z5t.forEach(t),kMr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(Gee,"A",{href:!0});var eCt=s(EU);SMr=r(eCt,"from_pretrained()"),eCt.forEach(t),RMr=r(Gee," to load the model weights."),Gee.forEach(t),PMr=i(Q0),T(a4.$$.fragment,Q0),Q0.forEach(t),BMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(o8.$$.fragment,xl),IMr=i(xl),$6e=n(xl,"P",{});var oCt=s($6e);NMr=r(oCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oCt.forEach(t),qMr=i(xl),sn=n(xl,"P",{});var H0=s(sn);jMr=r(H0,"The model class to instantiate is selected based on the "),k6e=n(H0,"CODE",{});var rCt=s(k6e);DMr=r(rCt,"model_type"),rCt.forEach(t),GMr=r(H0,` property of the config object (either
passed as an argument or loaded from `),S6e=n(H0,"CODE",{});var tCt=s(S6e);OMr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),VMr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(H0,"CODE",{});var aCt=s(R6e);XMr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),zMr=r(H0,":"),H0.forEach(t),WMr=i(xl),_e=n(xl,"UL",{});var ve=s(_e);n4=n(ve,"LI",{});var EBe=s(n4);P6e=n(EBe,"STRONG",{});var nCt=s(P6e);QMr=r(nCt,"albert"),nCt.forEach(t),HMr=r(EBe," \u2014 "),CU=n(EBe,"A",{href:!0});var sCt=s(CU);UMr=r(sCt,"TFAlbertForMultipleChoice"),sCt.forEach(t),JMr=r(EBe," (ALBERT model)"),EBe.forEach(t),YMr=i(ve),s4=n(ve,"LI",{});var CBe=s(s4);B6e=n(CBe,"STRONG",{});var lCt=s(B6e);KMr=r(lCt,"bert"),lCt.forEach(t),ZMr=r(CBe," \u2014 "),wU=n(CBe,"A",{href:!0});var iCt=s(wU);e4r=r(iCt,"TFBertForMultipleChoice"),iCt.forEach(t),o4r=r(CBe," (BERT model)"),CBe.forEach(t),r4r=i(ve),l4=n(ve,"LI",{});var wBe=s(l4);I6e=n(wBe,"STRONG",{});var dCt=s(I6e);t4r=r(dCt,"camembert"),dCt.forEach(t),a4r=r(wBe," \u2014 "),AU=n(wBe,"A",{href:!0});var cCt=s(AU);n4r=r(cCt,"TFCamembertForMultipleChoice"),cCt.forEach(t),s4r=r(wBe," (CamemBERT model)"),wBe.forEach(t),l4r=i(ve),i4=n(ve,"LI",{});var ABe=s(i4);N6e=n(ABe,"STRONG",{});var fCt=s(N6e);i4r=r(fCt,"convbert"),fCt.forEach(t),d4r=r(ABe," \u2014 "),yU=n(ABe,"A",{href:!0});var mCt=s(yU);c4r=r(mCt,"TFConvBertForMultipleChoice"),mCt.forEach(t),f4r=r(ABe," (ConvBERT model)"),ABe.forEach(t),m4r=i(ve),d4=n(ve,"LI",{});var yBe=s(d4);q6e=n(yBe,"STRONG",{});var gCt=s(q6e);g4r=r(gCt,"distilbert"),gCt.forEach(t),h4r=r(yBe," \u2014 "),LU=n(yBe,"A",{href:!0});var hCt=s(LU);p4r=r(hCt,"TFDistilBertForMultipleChoice"),hCt.forEach(t),_4r=r(yBe," (DistilBERT model)"),yBe.forEach(t),u4r=i(ve),c4=n(ve,"LI",{});var LBe=s(c4);j6e=n(LBe,"STRONG",{});var pCt=s(j6e);b4r=r(pCt,"electra"),pCt.forEach(t),v4r=r(LBe," \u2014 "),xU=n(LBe,"A",{href:!0});var _Ct=s(xU);F4r=r(_Ct,"TFElectraForMultipleChoice"),_Ct.forEach(t),T4r=r(LBe," (ELECTRA model)"),LBe.forEach(t),M4r=i(ve),f4=n(ve,"LI",{});var xBe=s(f4);D6e=n(xBe,"STRONG",{});var uCt=s(D6e);E4r=r(uCt,"flaubert"),uCt.forEach(t),C4r=r(xBe," \u2014 "),$U=n(xBe,"A",{href:!0});var bCt=s($U);w4r=r(bCt,"TFFlaubertForMultipleChoice"),bCt.forEach(t),A4r=r(xBe," (FlauBERT model)"),xBe.forEach(t),y4r=i(ve),m4=n(ve,"LI",{});var $Be=s(m4);G6e=n($Be,"STRONG",{});var vCt=s(G6e);L4r=r(vCt,"funnel"),vCt.forEach(t),x4r=r($Be," \u2014 "),kU=n($Be,"A",{href:!0});var FCt=s(kU);$4r=r(FCt,"TFFunnelForMultipleChoice"),FCt.forEach(t),k4r=r($Be," (Funnel Transformer model)"),$Be.forEach(t),S4r=i(ve),g4=n(ve,"LI",{});var kBe=s(g4);O6e=n(kBe,"STRONG",{});var TCt=s(O6e);R4r=r(TCt,"longformer"),TCt.forEach(t),P4r=r(kBe," \u2014 "),SU=n(kBe,"A",{href:!0});var MCt=s(SU);B4r=r(MCt,"TFLongformerForMultipleChoice"),MCt.forEach(t),I4r=r(kBe," (Longformer model)"),kBe.forEach(t),N4r=i(ve),h4=n(ve,"LI",{});var SBe=s(h4);V6e=n(SBe,"STRONG",{});var ECt=s(V6e);q4r=r(ECt,"mobilebert"),ECt.forEach(t),j4r=r(SBe," \u2014 "),RU=n(SBe,"A",{href:!0});var CCt=s(RU);D4r=r(CCt,"TFMobileBertForMultipleChoice"),CCt.forEach(t),G4r=r(SBe," (MobileBERT model)"),SBe.forEach(t),O4r=i(ve),p4=n(ve,"LI",{});var RBe=s(p4);X6e=n(RBe,"STRONG",{});var wCt=s(X6e);V4r=r(wCt,"mpnet"),wCt.forEach(t),X4r=r(RBe," \u2014 "),PU=n(RBe,"A",{href:!0});var ACt=s(PU);z4r=r(ACt,"TFMPNetForMultipleChoice"),ACt.forEach(t),W4r=r(RBe," (MPNet model)"),RBe.forEach(t),Q4r=i(ve),_4=n(ve,"LI",{});var PBe=s(_4);z6e=n(PBe,"STRONG",{});var yCt=s(z6e);H4r=r(yCt,"rembert"),yCt.forEach(t),U4r=r(PBe," \u2014 "),BU=n(PBe,"A",{href:!0});var LCt=s(BU);J4r=r(LCt,"TFRemBertForMultipleChoice"),LCt.forEach(t),Y4r=r(PBe," (RemBERT model)"),PBe.forEach(t),K4r=i(ve),u4=n(ve,"LI",{});var BBe=s(u4);W6e=n(BBe,"STRONG",{});var xCt=s(W6e);Z4r=r(xCt,"roberta"),xCt.forEach(t),eEr=r(BBe," \u2014 "),IU=n(BBe,"A",{href:!0});var $Ct=s(IU);oEr=r($Ct,"TFRobertaForMultipleChoice"),$Ct.forEach(t),rEr=r(BBe," (RoBERTa model)"),BBe.forEach(t),tEr=i(ve),b4=n(ve,"LI",{});var IBe=s(b4);Q6e=n(IBe,"STRONG",{});var kCt=s(Q6e);aEr=r(kCt,"roformer"),kCt.forEach(t),nEr=r(IBe," \u2014 "),NU=n(IBe,"A",{href:!0});var SCt=s(NU);sEr=r(SCt,"TFRoFormerForMultipleChoice"),SCt.forEach(t),lEr=r(IBe," (RoFormer model)"),IBe.forEach(t),iEr=i(ve),v4=n(ve,"LI",{});var NBe=s(v4);H6e=n(NBe,"STRONG",{});var RCt=s(H6e);dEr=r(RCt,"xlm"),RCt.forEach(t),cEr=r(NBe," \u2014 "),qU=n(NBe,"A",{href:!0});var PCt=s(qU);fEr=r(PCt,"TFXLMForMultipleChoice"),PCt.forEach(t),mEr=r(NBe," (XLM model)"),NBe.forEach(t),gEr=i(ve),F4=n(ve,"LI",{});var qBe=s(F4);U6e=n(qBe,"STRONG",{});var BCt=s(U6e);hEr=r(BCt,"xlm-roberta"),BCt.forEach(t),pEr=r(qBe," \u2014 "),jU=n(qBe,"A",{href:!0});var ICt=s(jU);_Er=r(ICt,"TFXLMRobertaForMultipleChoice"),ICt.forEach(t),uEr=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),bEr=i(ve),T4=n(ve,"LI",{});var jBe=s(T4);J6e=n(jBe,"STRONG",{});var NCt=s(J6e);vEr=r(NCt,"xlnet"),NCt.forEach(t),FEr=r(jBe," \u2014 "),DU=n(jBe,"A",{href:!0});var qCt=s(DU);TEr=r(qCt,"TFXLNetForMultipleChoice"),qCt.forEach(t),MEr=r(jBe," (XLNet model)"),jBe.forEach(t),ve.forEach(t),EEr=i(xl),T(M4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Kje=i(f),mc=n(f,"H2",{class:!0});var aOe=s(mc);E4=n(aOe,"A",{id:!0,class:!0,href:!0});var jCt=s(E4);Y6e=n(jCt,"SPAN",{});var DCt=s(Y6e);T(r8.$$.fragment,DCt),DCt.forEach(t),jCt.forEach(t),CEr=i(aOe),K6e=n(aOe,"SPAN",{});var GCt=s(K6e);wEr=r(GCt,"TFAutoModelForNextSentencePrediction"),GCt.forEach(t),aOe.forEach(t),Zje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(t8.$$.fragment,$l),AEr=i($l),gc=n($l,"P",{});var Oee=s(gc);yEr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GU=n(Oee,"A",{href:!0});var OCt=s(GU);LEr=r(OCt,"from_pretrained()"),OCt.forEach(t),xEr=r(Oee," class method or the "),OU=n(Oee,"A",{href:!0});var VCt=s(OU);$Er=r(VCt,"from_config()"),VCt.forEach(t),kEr=r(Oee,` class
method.`),Oee.forEach(t),SEr=i($l),a8=n($l,"P",{});var nOe=s(a8);REr=r(nOe,"This class cannot be instantiated directly using "),Z6e=n(nOe,"CODE",{});var XCt=s(Z6e);PEr=r(XCt,"__init__()"),XCt.forEach(t),BEr=r(nOe," (throws an error)."),nOe.forEach(t),IEr=i($l),Bt=n($l,"DIV",{class:!0});var U0=s(Bt);T(n8.$$.fragment,U0),NEr=i(U0),eTe=n(U0,"P",{});var zCt=s(eTe);qEr=r(zCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zCt.forEach(t),jEr=i(U0),hc=n(U0,"P",{});var Vee=s(hc);DEr=r(Vee,`Note:
Loading a model from its configuration file does `),oTe=n(Vee,"STRONG",{});var WCt=s(oTe);GEr=r(WCt,"not"),WCt.forEach(t),OEr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Vee,"A",{href:!0});var QCt=s(VU);VEr=r(QCt,"from_pretrained()"),QCt.forEach(t),XEr=r(Vee," to load the model weights."),Vee.forEach(t),zEr=i(U0),T(C4.$$.fragment,U0),U0.forEach(t),WEr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(s8.$$.fragment,kl),QEr=i(kl),rTe=n(kl,"P",{});var HCt=s(rTe);HEr=r(HCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HCt.forEach(t),UEr=i(kl),ln=n(kl,"P",{});var J0=s(ln);JEr=r(J0,"The model class to instantiate is selected based on the "),tTe=n(J0,"CODE",{});var UCt=s(tTe);YEr=r(UCt,"model_type"),UCt.forEach(t),KEr=r(J0,` property of the config object (either
passed as an argument or loaded from `),aTe=n(J0,"CODE",{});var JCt=s(aTe);ZEr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),e5r=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(J0,"CODE",{});var YCt=s(nTe);o5r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),r5r=r(J0,":"),J0.forEach(t),t5r=i(kl),l8=n(kl,"UL",{});var sOe=s(l8);w4=n(sOe,"LI",{});var DBe=s(w4);sTe=n(DBe,"STRONG",{});var KCt=s(sTe);a5r=r(KCt,"bert"),KCt.forEach(t),n5r=r(DBe," \u2014 "),XU=n(DBe,"A",{href:!0});var ZCt=s(XU);s5r=r(ZCt,"TFBertForNextSentencePrediction"),ZCt.forEach(t),l5r=r(DBe," (BERT model)"),DBe.forEach(t),i5r=i(sOe),A4=n(sOe,"LI",{});var GBe=s(A4);lTe=n(GBe,"STRONG",{});var e3t=s(lTe);d5r=r(e3t,"mobilebert"),e3t.forEach(t),c5r=r(GBe," \u2014 "),zU=n(GBe,"A",{href:!0});var o3t=s(zU);f5r=r(o3t,"TFMobileBertForNextSentencePrediction"),o3t.forEach(t),m5r=r(GBe," (MobileBERT model)"),GBe.forEach(t),sOe.forEach(t),g5r=i(kl),T(y4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),eDe=i(f),pc=n(f,"H2",{class:!0});var lOe=s(pc);L4=n(lOe,"A",{id:!0,class:!0,href:!0});var r3t=s(L4);iTe=n(r3t,"SPAN",{});var t3t=s(iTe);T(i8.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),h5r=i(lOe),dTe=n(lOe,"SPAN",{});var a3t=s(dTe);p5r=r(a3t,"TFAutoModelForTableQuestionAnswering"),a3t.forEach(t),lOe.forEach(t),oDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(d8.$$.fragment,Sl),_5r=i(Sl),_c=n(Sl,"P",{});var Xee=s(_c);u5r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WU=n(Xee,"A",{href:!0});var n3t=s(WU);b5r=r(n3t,"from_pretrained()"),n3t.forEach(t),v5r=r(Xee," class method or the "),QU=n(Xee,"A",{href:!0});var s3t=s(QU);F5r=r(s3t,"from_config()"),s3t.forEach(t),T5r=r(Xee,` class
method.`),Xee.forEach(t),M5r=i(Sl),c8=n(Sl,"P",{});var iOe=s(c8);E5r=r(iOe,"This class cannot be instantiated directly using "),cTe=n(iOe,"CODE",{});var l3t=s(cTe);C5r=r(l3t,"__init__()"),l3t.forEach(t),w5r=r(iOe," (throws an error)."),iOe.forEach(t),A5r=i(Sl),It=n(Sl,"DIV",{class:!0});var Y0=s(It);T(f8.$$.fragment,Y0),y5r=i(Y0),fTe=n(Y0,"P",{});var i3t=s(fTe);L5r=r(i3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),i3t.forEach(t),x5r=i(Y0),uc=n(Y0,"P",{});var zee=s(uc);$5r=r(zee,`Note:
Loading a model from its configuration file does `),mTe=n(zee,"STRONG",{});var d3t=s(mTe);k5r=r(d3t,"not"),d3t.forEach(t),S5r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=n(zee,"A",{href:!0});var c3t=s(HU);R5r=r(c3t,"from_pretrained()"),c3t.forEach(t),P5r=r(zee," to load the model weights."),zee.forEach(t),B5r=i(Y0),T(x4.$$.fragment,Y0),Y0.forEach(t),I5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(m8.$$.fragment,Rl),N5r=i(Rl),gTe=n(Rl,"P",{});var f3t=s(gTe);q5r=r(f3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),f3t.forEach(t),j5r=i(Rl),dn=n(Rl,"P",{});var K0=s(dn);D5r=r(K0,"The model class to instantiate is selected based on the "),hTe=n(K0,"CODE",{});var m3t=s(hTe);G5r=r(m3t,"model_type"),m3t.forEach(t),O5r=r(K0,` property of the config object (either
passed as an argument or loaded from `),pTe=n(K0,"CODE",{});var g3t=s(pTe);V5r=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),X5r=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(K0,"CODE",{});var h3t=s(_Te);z5r=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),W5r=r(K0,":"),K0.forEach(t),Q5r=i(Rl),uTe=n(Rl,"UL",{});var p3t=s(uTe);$4=n(p3t,"LI",{});var OBe=s($4);bTe=n(OBe,"STRONG",{});var _3t=s(bTe);H5r=r(_3t,"tapas"),_3t.forEach(t),U5r=r(OBe," \u2014 "),UU=n(OBe,"A",{href:!0});var u3t=s(UU);J5r=r(u3t,"TFTapasForQuestionAnswering"),u3t.forEach(t),Y5r=r(OBe," (TAPAS model)"),OBe.forEach(t),p3t.forEach(t),K5r=i(Rl),T(k4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),rDe=i(f),bc=n(f,"H2",{class:!0});var dOe=s(bc);S4=n(dOe,"A",{id:!0,class:!0,href:!0});var b3t=s(S4);vTe=n(b3t,"SPAN",{});var v3t=s(vTe);T(g8.$$.fragment,v3t),v3t.forEach(t),b3t.forEach(t),Z5r=i(dOe),FTe=n(dOe,"SPAN",{});var F3t=s(FTe);eCr=r(F3t,"TFAutoModelForTokenClassification"),F3t.forEach(t),dOe.forEach(t),tDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(h8.$$.fragment,Pl),oCr=i(Pl),vc=n(Pl,"P",{});var Wee=s(vc);rCr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JU=n(Wee,"A",{href:!0});var T3t=s(JU);tCr=r(T3t,"from_pretrained()"),T3t.forEach(t),aCr=r(Wee," class method or the "),YU=n(Wee,"A",{href:!0});var M3t=s(YU);nCr=r(M3t,"from_config()"),M3t.forEach(t),sCr=r(Wee,` class
method.`),Wee.forEach(t),lCr=i(Pl),p8=n(Pl,"P",{});var cOe=s(p8);iCr=r(cOe,"This class cannot be instantiated directly using "),TTe=n(cOe,"CODE",{});var E3t=s(TTe);dCr=r(E3t,"__init__()"),E3t.forEach(t),cCr=r(cOe," (throws an error)."),cOe.forEach(t),fCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Z0=s(Nt);T(_8.$$.fragment,Z0),mCr=i(Z0),MTe=n(Z0,"P",{});var C3t=s(MTe);gCr=r(C3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),C3t.forEach(t),hCr=i(Z0),Fc=n(Z0,"P",{});var Qee=s(Fc);pCr=r(Qee,`Note:
Loading a model from its configuration file does `),ETe=n(Qee,"STRONG",{});var w3t=s(ETe);_Cr=r(w3t,"not"),w3t.forEach(t),uCr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(Qee,"A",{href:!0});var A3t=s(KU);bCr=r(A3t,"from_pretrained()"),A3t.forEach(t),vCr=r(Qee," to load the model weights."),Qee.forEach(t),FCr=i(Z0),T(R4.$$.fragment,Z0),Z0.forEach(t),TCr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(u8.$$.fragment,Bl),MCr=i(Bl),CTe=n(Bl,"P",{});var y3t=s(CTe);ECr=r(y3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y3t.forEach(t),CCr=i(Bl),cn=n(Bl,"P",{});var ew=s(cn);wCr=r(ew,"The model class to instantiate is selected based on the "),wTe=n(ew,"CODE",{});var L3t=s(wTe);ACr=r(L3t,"model_type"),L3t.forEach(t),yCr=r(ew,` property of the config object (either
passed as an argument or loaded from `),ATe=n(ew,"CODE",{});var x3t=s(ATe);LCr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),xCr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(ew,"CODE",{});var $3t=s(yTe);$Cr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),kCr=r(ew,":"),ew.forEach(t),SCr=i(Bl),de=n(Bl,"UL",{});var me=s(de);P4=n(me,"LI",{});var VBe=s(P4);LTe=n(VBe,"STRONG",{});var k3t=s(LTe);RCr=r(k3t,"albert"),k3t.forEach(t),PCr=r(VBe," \u2014 "),ZU=n(VBe,"A",{href:!0});var S3t=s(ZU);BCr=r(S3t,"TFAlbertForTokenClassification"),S3t.forEach(t),ICr=r(VBe," (ALBERT model)"),VBe.forEach(t),NCr=i(me),B4=n(me,"LI",{});var XBe=s(B4);xTe=n(XBe,"STRONG",{});var R3t=s(xTe);qCr=r(R3t,"bert"),R3t.forEach(t),jCr=r(XBe," \u2014 "),eJ=n(XBe,"A",{href:!0});var P3t=s(eJ);DCr=r(P3t,"TFBertForTokenClassification"),P3t.forEach(t),GCr=r(XBe," (BERT model)"),XBe.forEach(t),OCr=i(me),I4=n(me,"LI",{});var zBe=s(I4);$Te=n(zBe,"STRONG",{});var B3t=s($Te);VCr=r(B3t,"camembert"),B3t.forEach(t),XCr=r(zBe," \u2014 "),oJ=n(zBe,"A",{href:!0});var I3t=s(oJ);zCr=r(I3t,"TFCamembertForTokenClassification"),I3t.forEach(t),WCr=r(zBe," (CamemBERT model)"),zBe.forEach(t),QCr=i(me),N4=n(me,"LI",{});var WBe=s(N4);kTe=n(WBe,"STRONG",{});var N3t=s(kTe);HCr=r(N3t,"convbert"),N3t.forEach(t),UCr=r(WBe," \u2014 "),rJ=n(WBe,"A",{href:!0});var q3t=s(rJ);JCr=r(q3t,"TFConvBertForTokenClassification"),q3t.forEach(t),YCr=r(WBe," (ConvBERT model)"),WBe.forEach(t),KCr=i(me),q4=n(me,"LI",{});var QBe=s(q4);STe=n(QBe,"STRONG",{});var j3t=s(STe);ZCr=r(j3t,"deberta"),j3t.forEach(t),e3r=r(QBe," \u2014 "),tJ=n(QBe,"A",{href:!0});var D3t=s(tJ);o3r=r(D3t,"TFDebertaForTokenClassification"),D3t.forEach(t),r3r=r(QBe," (DeBERTa model)"),QBe.forEach(t),t3r=i(me),j4=n(me,"LI",{});var HBe=s(j4);RTe=n(HBe,"STRONG",{});var G3t=s(RTe);a3r=r(G3t,"deberta-v2"),G3t.forEach(t),n3r=r(HBe," \u2014 "),aJ=n(HBe,"A",{href:!0});var O3t=s(aJ);s3r=r(O3t,"TFDebertaV2ForTokenClassification"),O3t.forEach(t),l3r=r(HBe," (DeBERTa-v2 model)"),HBe.forEach(t),i3r=i(me),D4=n(me,"LI",{});var UBe=s(D4);PTe=n(UBe,"STRONG",{});var V3t=s(PTe);d3r=r(V3t,"distilbert"),V3t.forEach(t),c3r=r(UBe," \u2014 "),nJ=n(UBe,"A",{href:!0});var X3t=s(nJ);f3r=r(X3t,"TFDistilBertForTokenClassification"),X3t.forEach(t),m3r=r(UBe," (DistilBERT model)"),UBe.forEach(t),g3r=i(me),G4=n(me,"LI",{});var JBe=s(G4);BTe=n(JBe,"STRONG",{});var z3t=s(BTe);h3r=r(z3t,"electra"),z3t.forEach(t),p3r=r(JBe," \u2014 "),sJ=n(JBe,"A",{href:!0});var W3t=s(sJ);_3r=r(W3t,"TFElectraForTokenClassification"),W3t.forEach(t),u3r=r(JBe," (ELECTRA model)"),JBe.forEach(t),b3r=i(me),O4=n(me,"LI",{});var YBe=s(O4);ITe=n(YBe,"STRONG",{});var Q3t=s(ITe);v3r=r(Q3t,"flaubert"),Q3t.forEach(t),F3r=r(YBe," \u2014 "),lJ=n(YBe,"A",{href:!0});var H3t=s(lJ);T3r=r(H3t,"TFFlaubertForTokenClassification"),H3t.forEach(t),M3r=r(YBe," (FlauBERT model)"),YBe.forEach(t),E3r=i(me),V4=n(me,"LI",{});var KBe=s(V4);NTe=n(KBe,"STRONG",{});var U3t=s(NTe);C3r=r(U3t,"funnel"),U3t.forEach(t),w3r=r(KBe," \u2014 "),iJ=n(KBe,"A",{href:!0});var J3t=s(iJ);A3r=r(J3t,"TFFunnelForTokenClassification"),J3t.forEach(t),y3r=r(KBe," (Funnel Transformer model)"),KBe.forEach(t),L3r=i(me),X4=n(me,"LI",{});var ZBe=s(X4);qTe=n(ZBe,"STRONG",{});var Y3t=s(qTe);x3r=r(Y3t,"layoutlm"),Y3t.forEach(t),$3r=r(ZBe," \u2014 "),dJ=n(ZBe,"A",{href:!0});var K3t=s(dJ);k3r=r(K3t,"TFLayoutLMForTokenClassification"),K3t.forEach(t),S3r=r(ZBe," (LayoutLM model)"),ZBe.forEach(t),R3r=i(me),z4=n(me,"LI",{});var eIe=s(z4);jTe=n(eIe,"STRONG",{});var Z3t=s(jTe);P3r=r(Z3t,"longformer"),Z3t.forEach(t),B3r=r(eIe," \u2014 "),cJ=n(eIe,"A",{href:!0});var e0t=s(cJ);I3r=r(e0t,"TFLongformerForTokenClassification"),e0t.forEach(t),N3r=r(eIe," (Longformer model)"),eIe.forEach(t),q3r=i(me),W4=n(me,"LI",{});var oIe=s(W4);DTe=n(oIe,"STRONG",{});var o0t=s(DTe);j3r=r(o0t,"mobilebert"),o0t.forEach(t),D3r=r(oIe," \u2014 "),fJ=n(oIe,"A",{href:!0});var r0t=s(fJ);G3r=r(r0t,"TFMobileBertForTokenClassification"),r0t.forEach(t),O3r=r(oIe," (MobileBERT model)"),oIe.forEach(t),V3r=i(me),Q4=n(me,"LI",{});var rIe=s(Q4);GTe=n(rIe,"STRONG",{});var t0t=s(GTe);X3r=r(t0t,"mpnet"),t0t.forEach(t),z3r=r(rIe," \u2014 "),mJ=n(rIe,"A",{href:!0});var a0t=s(mJ);W3r=r(a0t,"TFMPNetForTokenClassification"),a0t.forEach(t),Q3r=r(rIe," (MPNet model)"),rIe.forEach(t),H3r=i(me),H4=n(me,"LI",{});var tIe=s(H4);OTe=n(tIe,"STRONG",{});var n0t=s(OTe);U3r=r(n0t,"rembert"),n0t.forEach(t),J3r=r(tIe," \u2014 "),gJ=n(tIe,"A",{href:!0});var s0t=s(gJ);Y3r=r(s0t,"TFRemBertForTokenClassification"),s0t.forEach(t),K3r=r(tIe," (RemBERT model)"),tIe.forEach(t),Z3r=i(me),U4=n(me,"LI",{});var aIe=s(U4);VTe=n(aIe,"STRONG",{});var l0t=s(VTe);e0r=r(l0t,"roberta"),l0t.forEach(t),o0r=r(aIe," \u2014 "),hJ=n(aIe,"A",{href:!0});var i0t=s(hJ);r0r=r(i0t,"TFRobertaForTokenClassification"),i0t.forEach(t),t0r=r(aIe," (RoBERTa model)"),aIe.forEach(t),a0r=i(me),J4=n(me,"LI",{});var nIe=s(J4);XTe=n(nIe,"STRONG",{});var d0t=s(XTe);n0r=r(d0t,"roformer"),d0t.forEach(t),s0r=r(nIe," \u2014 "),pJ=n(nIe,"A",{href:!0});var c0t=s(pJ);l0r=r(c0t,"TFRoFormerForTokenClassification"),c0t.forEach(t),i0r=r(nIe," (RoFormer model)"),nIe.forEach(t),d0r=i(me),Y4=n(me,"LI",{});var sIe=s(Y4);zTe=n(sIe,"STRONG",{});var f0t=s(zTe);c0r=r(f0t,"xlm"),f0t.forEach(t),f0r=r(sIe," \u2014 "),_J=n(sIe,"A",{href:!0});var m0t=s(_J);m0r=r(m0t,"TFXLMForTokenClassification"),m0t.forEach(t),g0r=r(sIe," (XLM model)"),sIe.forEach(t),h0r=i(me),K4=n(me,"LI",{});var lIe=s(K4);WTe=n(lIe,"STRONG",{});var g0t=s(WTe);p0r=r(g0t,"xlm-roberta"),g0t.forEach(t),_0r=r(lIe," \u2014 "),uJ=n(lIe,"A",{href:!0});var h0t=s(uJ);u0r=r(h0t,"TFXLMRobertaForTokenClassification"),h0t.forEach(t),b0r=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),v0r=i(me),Z4=n(me,"LI",{});var iIe=s(Z4);QTe=n(iIe,"STRONG",{});var p0t=s(QTe);F0r=r(p0t,"xlnet"),p0t.forEach(t),T0r=r(iIe," \u2014 "),bJ=n(iIe,"A",{href:!0});var _0t=s(bJ);M0r=r(_0t,"TFXLNetForTokenClassification"),_0t.forEach(t),E0r=r(iIe," (XLNet model)"),iIe.forEach(t),me.forEach(t),C0r=i(Bl),T(eE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),aDe=i(f),Tc=n(f,"H2",{class:!0});var fOe=s(Tc);oE=n(fOe,"A",{id:!0,class:!0,href:!0});var u0t=s(oE);HTe=n(u0t,"SPAN",{});var b0t=s(HTe);T(b8.$$.fragment,b0t),b0t.forEach(t),u0t.forEach(t),w0r=i(fOe),UTe=n(fOe,"SPAN",{});var v0t=s(UTe);A0r=r(v0t,"TFAutoModelForQuestionAnswering"),v0t.forEach(t),fOe.forEach(t),nDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(v8.$$.fragment,Il),y0r=i(Il),Mc=n(Il,"P",{});var Hee=s(Mc);L0r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vJ=n(Hee,"A",{href:!0});var F0t=s(vJ);x0r=r(F0t,"from_pretrained()"),F0t.forEach(t),$0r=r(Hee," class method or the "),FJ=n(Hee,"A",{href:!0});var T0t=s(FJ);k0r=r(T0t,"from_config()"),T0t.forEach(t),S0r=r(Hee,` class
method.`),Hee.forEach(t),R0r=i(Il),F8=n(Il,"P",{});var mOe=s(F8);P0r=r(mOe,"This class cannot be instantiated directly using "),JTe=n(mOe,"CODE",{});var M0t=s(JTe);B0r=r(M0t,"__init__()"),M0t.forEach(t),I0r=r(mOe," (throws an error)."),mOe.forEach(t),N0r=i(Il),qt=n(Il,"DIV",{class:!0});var ow=s(qt);T(T8.$$.fragment,ow),q0r=i(ow),YTe=n(ow,"P",{});var E0t=s(YTe);j0r=r(E0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E0t.forEach(t),D0r=i(ow),Ec=n(ow,"P",{});var Uee=s(Ec);G0r=r(Uee,`Note:
Loading a model from its configuration file does `),KTe=n(Uee,"STRONG",{});var C0t=s(KTe);O0r=r(C0t,"not"),C0t.forEach(t),V0r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Uee,"A",{href:!0});var w0t=s(TJ);X0r=r(w0t,"from_pretrained()"),w0t.forEach(t),z0r=r(Uee," to load the model weights."),Uee.forEach(t),W0r=i(ow),T(rE.$$.fragment,ow),ow.forEach(t),Q0r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(M8.$$.fragment,Nl),H0r=i(Nl),ZTe=n(Nl,"P",{});var A0t=s(ZTe);U0r=r(A0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A0t.forEach(t),J0r=i(Nl),fn=n(Nl,"P",{});var rw=s(fn);Y0r=r(rw,"The model class to instantiate is selected based on the "),e7e=n(rw,"CODE",{});var y0t=s(e7e);K0r=r(y0t,"model_type"),y0t.forEach(t),Z0r=r(rw,` property of the config object (either
passed as an argument or loaded from `),o7e=n(rw,"CODE",{});var L0t=s(o7e);ewr=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),owr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(rw,"CODE",{});var x0t=s(r7e);rwr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),twr=r(rw,":"),rw.forEach(t),awr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);tE=n(ge,"LI",{});var dIe=s(tE);t7e=n(dIe,"STRONG",{});var $0t=s(t7e);nwr=r($0t,"albert"),$0t.forEach(t),swr=r(dIe," \u2014 "),MJ=n(dIe,"A",{href:!0});var k0t=s(MJ);lwr=r(k0t,"TFAlbertForQuestionAnswering"),k0t.forEach(t),iwr=r(dIe," (ALBERT model)"),dIe.forEach(t),dwr=i(ge),aE=n(ge,"LI",{});var cIe=s(aE);a7e=n(cIe,"STRONG",{});var S0t=s(a7e);cwr=r(S0t,"bert"),S0t.forEach(t),fwr=r(cIe," \u2014 "),EJ=n(cIe,"A",{href:!0});var R0t=s(EJ);mwr=r(R0t,"TFBertForQuestionAnswering"),R0t.forEach(t),gwr=r(cIe," (BERT model)"),cIe.forEach(t),hwr=i(ge),nE=n(ge,"LI",{});var fIe=s(nE);n7e=n(fIe,"STRONG",{});var P0t=s(n7e);pwr=r(P0t,"camembert"),P0t.forEach(t),_wr=r(fIe," \u2014 "),CJ=n(fIe,"A",{href:!0});var B0t=s(CJ);uwr=r(B0t,"TFCamembertForQuestionAnswering"),B0t.forEach(t),bwr=r(fIe," (CamemBERT model)"),fIe.forEach(t),vwr=i(ge),sE=n(ge,"LI",{});var mIe=s(sE);s7e=n(mIe,"STRONG",{});var I0t=s(s7e);Fwr=r(I0t,"convbert"),I0t.forEach(t),Twr=r(mIe," \u2014 "),wJ=n(mIe,"A",{href:!0});var N0t=s(wJ);Mwr=r(N0t,"TFConvBertForQuestionAnswering"),N0t.forEach(t),Ewr=r(mIe," (ConvBERT model)"),mIe.forEach(t),Cwr=i(ge),lE=n(ge,"LI",{});var gIe=s(lE);l7e=n(gIe,"STRONG",{});var q0t=s(l7e);wwr=r(q0t,"deberta"),q0t.forEach(t),Awr=r(gIe," \u2014 "),AJ=n(gIe,"A",{href:!0});var j0t=s(AJ);ywr=r(j0t,"TFDebertaForQuestionAnswering"),j0t.forEach(t),Lwr=r(gIe," (DeBERTa model)"),gIe.forEach(t),xwr=i(ge),iE=n(ge,"LI",{});var hIe=s(iE);i7e=n(hIe,"STRONG",{});var D0t=s(i7e);$wr=r(D0t,"deberta-v2"),D0t.forEach(t),kwr=r(hIe," \u2014 "),yJ=n(hIe,"A",{href:!0});var G0t=s(yJ);Swr=r(G0t,"TFDebertaV2ForQuestionAnswering"),G0t.forEach(t),Rwr=r(hIe," (DeBERTa-v2 model)"),hIe.forEach(t),Pwr=i(ge),dE=n(ge,"LI",{});var pIe=s(dE);d7e=n(pIe,"STRONG",{});var O0t=s(d7e);Bwr=r(O0t,"distilbert"),O0t.forEach(t),Iwr=r(pIe," \u2014 "),LJ=n(pIe,"A",{href:!0});var V0t=s(LJ);Nwr=r(V0t,"TFDistilBertForQuestionAnswering"),V0t.forEach(t),qwr=r(pIe," (DistilBERT model)"),pIe.forEach(t),jwr=i(ge),cE=n(ge,"LI",{});var _Ie=s(cE);c7e=n(_Ie,"STRONG",{});var X0t=s(c7e);Dwr=r(X0t,"electra"),X0t.forEach(t),Gwr=r(_Ie," \u2014 "),xJ=n(_Ie,"A",{href:!0});var z0t=s(xJ);Owr=r(z0t,"TFElectraForQuestionAnswering"),z0t.forEach(t),Vwr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),Xwr=i(ge),fE=n(ge,"LI",{});var uIe=s(fE);f7e=n(uIe,"STRONG",{});var W0t=s(f7e);zwr=r(W0t,"flaubert"),W0t.forEach(t),Wwr=r(uIe," \u2014 "),$J=n(uIe,"A",{href:!0});var Q0t=s($J);Qwr=r(Q0t,"TFFlaubertForQuestionAnsweringSimple"),Q0t.forEach(t),Hwr=r(uIe," (FlauBERT model)"),uIe.forEach(t),Uwr=i(ge),mE=n(ge,"LI",{});var bIe=s(mE);m7e=n(bIe,"STRONG",{});var H0t=s(m7e);Jwr=r(H0t,"funnel"),H0t.forEach(t),Ywr=r(bIe," \u2014 "),kJ=n(bIe,"A",{href:!0});var U0t=s(kJ);Kwr=r(U0t,"TFFunnelForQuestionAnswering"),U0t.forEach(t),Zwr=r(bIe," (Funnel Transformer model)"),bIe.forEach(t),eAr=i(ge),gE=n(ge,"LI",{});var vIe=s(gE);g7e=n(vIe,"STRONG",{});var J0t=s(g7e);oAr=r(J0t,"gptj"),J0t.forEach(t),rAr=r(vIe," \u2014 "),SJ=n(vIe,"A",{href:!0});var Y0t=s(SJ);tAr=r(Y0t,"TFGPTJForQuestionAnswering"),Y0t.forEach(t),aAr=r(vIe," (GPT-J model)"),vIe.forEach(t),nAr=i(ge),hE=n(ge,"LI",{});var FIe=s(hE);h7e=n(FIe,"STRONG",{});var K0t=s(h7e);sAr=r(K0t,"longformer"),K0t.forEach(t),lAr=r(FIe," \u2014 "),RJ=n(FIe,"A",{href:!0});var Z0t=s(RJ);iAr=r(Z0t,"TFLongformerForQuestionAnswering"),Z0t.forEach(t),dAr=r(FIe," (Longformer model)"),FIe.forEach(t),cAr=i(ge),pE=n(ge,"LI",{});var TIe=s(pE);p7e=n(TIe,"STRONG",{});var ewt=s(p7e);fAr=r(ewt,"mobilebert"),ewt.forEach(t),mAr=r(TIe," \u2014 "),PJ=n(TIe,"A",{href:!0});var owt=s(PJ);gAr=r(owt,"TFMobileBertForQuestionAnswering"),owt.forEach(t),hAr=r(TIe," (MobileBERT model)"),TIe.forEach(t),pAr=i(ge),_E=n(ge,"LI",{});var MIe=s(_E);_7e=n(MIe,"STRONG",{});var rwt=s(_7e);_Ar=r(rwt,"mpnet"),rwt.forEach(t),uAr=r(MIe," \u2014 "),BJ=n(MIe,"A",{href:!0});var twt=s(BJ);bAr=r(twt,"TFMPNetForQuestionAnswering"),twt.forEach(t),vAr=r(MIe," (MPNet model)"),MIe.forEach(t),FAr=i(ge),uE=n(ge,"LI",{});var EIe=s(uE);u7e=n(EIe,"STRONG",{});var awt=s(u7e);TAr=r(awt,"rembert"),awt.forEach(t),MAr=r(EIe," \u2014 "),IJ=n(EIe,"A",{href:!0});var nwt=s(IJ);EAr=r(nwt,"TFRemBertForQuestionAnswering"),nwt.forEach(t),CAr=r(EIe," (RemBERT model)"),EIe.forEach(t),wAr=i(ge),bE=n(ge,"LI",{});var CIe=s(bE);b7e=n(CIe,"STRONG",{});var swt=s(b7e);AAr=r(swt,"roberta"),swt.forEach(t),yAr=r(CIe," \u2014 "),NJ=n(CIe,"A",{href:!0});var lwt=s(NJ);LAr=r(lwt,"TFRobertaForQuestionAnswering"),lwt.forEach(t),xAr=r(CIe," (RoBERTa model)"),CIe.forEach(t),$Ar=i(ge),vE=n(ge,"LI",{});var wIe=s(vE);v7e=n(wIe,"STRONG",{});var iwt=s(v7e);kAr=r(iwt,"roformer"),iwt.forEach(t),SAr=r(wIe," \u2014 "),qJ=n(wIe,"A",{href:!0});var dwt=s(qJ);RAr=r(dwt,"TFRoFormerForQuestionAnswering"),dwt.forEach(t),PAr=r(wIe," (RoFormer model)"),wIe.forEach(t),BAr=i(ge),FE=n(ge,"LI",{});var AIe=s(FE);F7e=n(AIe,"STRONG",{});var cwt=s(F7e);IAr=r(cwt,"xlm"),cwt.forEach(t),NAr=r(AIe," \u2014 "),jJ=n(AIe,"A",{href:!0});var fwt=s(jJ);qAr=r(fwt,"TFXLMForQuestionAnsweringSimple"),fwt.forEach(t),jAr=r(AIe," (XLM model)"),AIe.forEach(t),DAr=i(ge),TE=n(ge,"LI",{});var yIe=s(TE);T7e=n(yIe,"STRONG",{});var mwt=s(T7e);GAr=r(mwt,"xlm-roberta"),mwt.forEach(t),OAr=r(yIe," \u2014 "),DJ=n(yIe,"A",{href:!0});var gwt=s(DJ);VAr=r(gwt,"TFXLMRobertaForQuestionAnswering"),gwt.forEach(t),XAr=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),zAr=i(ge),ME=n(ge,"LI",{});var LIe=s(ME);M7e=n(LIe,"STRONG",{});var hwt=s(M7e);WAr=r(hwt,"xlnet"),hwt.forEach(t),QAr=r(LIe," \u2014 "),GJ=n(LIe,"A",{href:!0});var pwt=s(GJ);HAr=r(pwt,"TFXLNetForQuestionAnsweringSimple"),pwt.forEach(t),UAr=r(LIe," (XLNet model)"),LIe.forEach(t),ge.forEach(t),JAr=i(Nl),T(EE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),sDe=i(f),Cc=n(f,"H2",{class:!0});var gOe=s(Cc);CE=n(gOe,"A",{id:!0,class:!0,href:!0});var _wt=s(CE);E7e=n(_wt,"SPAN",{});var uwt=s(E7e);T(E8.$$.fragment,uwt),uwt.forEach(t),_wt.forEach(t),YAr=i(gOe),C7e=n(gOe,"SPAN",{});var bwt=s(C7e);KAr=r(bwt,"TFAutoModelForVision2Seq"),bwt.forEach(t),gOe.forEach(t),lDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(C8.$$.fragment,ql),ZAr=i(ql),wc=n(ql,"P",{});var Jee=s(wc);eyr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OJ=n(Jee,"A",{href:!0});var vwt=s(OJ);oyr=r(vwt,"from_pretrained()"),vwt.forEach(t),ryr=r(Jee," class method or the "),VJ=n(Jee,"A",{href:!0});var Fwt=s(VJ);tyr=r(Fwt,"from_config()"),Fwt.forEach(t),ayr=r(Jee,` class
method.`),Jee.forEach(t),nyr=i(ql),w8=n(ql,"P",{});var hOe=s(w8);syr=r(hOe,"This class cannot be instantiated directly using "),w7e=n(hOe,"CODE",{});var Twt=s(w7e);lyr=r(Twt,"__init__()"),Twt.forEach(t),iyr=r(hOe," (throws an error)."),hOe.forEach(t),dyr=i(ql),jt=n(ql,"DIV",{class:!0});var tw=s(jt);T(A8.$$.fragment,tw),cyr=i(tw),A7e=n(tw,"P",{});var Mwt=s(A7e);fyr=r(Mwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mwt.forEach(t),myr=i(tw),Ac=n(tw,"P",{});var Yee=s(Ac);gyr=r(Yee,`Note:
Loading a model from its configuration file does `),y7e=n(Yee,"STRONG",{});var Ewt=s(y7e);hyr=r(Ewt,"not"),Ewt.forEach(t),pyr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(Yee,"A",{href:!0});var Cwt=s(XJ);_yr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),uyr=r(Yee," to load the model weights."),Yee.forEach(t),byr=i(tw),T(wE.$$.fragment,tw),tw.forEach(t),vyr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(y8.$$.fragment,jl),Fyr=i(jl),L7e=n(jl,"P",{});var wwt=s(L7e);Tyr=r(wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wwt.forEach(t),Myr=i(jl),mn=n(jl,"P",{});var aw=s(mn);Eyr=r(aw,"The model class to instantiate is selected based on the "),x7e=n(aw,"CODE",{});var Awt=s(x7e);Cyr=r(Awt,"model_type"),Awt.forEach(t),wyr=r(aw,` property of the config object (either
passed as an argument or loaded from `),$7e=n(aw,"CODE",{});var ywt=s($7e);Ayr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),yyr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(aw,"CODE",{});var Lwt=s(k7e);Lyr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),xyr=r(aw,":"),aw.forEach(t),$yr=i(jl),S7e=n(jl,"UL",{});var xwt=s(S7e);AE=n(xwt,"LI",{});var xIe=s(AE);R7e=n(xIe,"STRONG",{});var $wt=s(R7e);kyr=r($wt,"vision-encoder-decoder"),$wt.forEach(t),Syr=r(xIe," \u2014 "),zJ=n(xIe,"A",{href:!0});var kwt=s(zJ);Ryr=r(kwt,"TFVisionEncoderDecoderModel"),kwt.forEach(t),Pyr=r(xIe," (Vision Encoder decoder model)"),xIe.forEach(t),xwt.forEach(t),Byr=i(jl),T(yE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),iDe=i(f),yc=n(f,"H2",{class:!0});var pOe=s(yc);LE=n(pOe,"A",{id:!0,class:!0,href:!0});var Swt=s(LE);P7e=n(Swt,"SPAN",{});var Rwt=s(P7e);T(L8.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),Iyr=i(pOe),B7e=n(pOe,"SPAN",{});var Pwt=s(B7e);Nyr=r(Pwt,"TFAutoModelForSpeechSeq2Seq"),Pwt.forEach(t),pOe.forEach(t),dDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(x8.$$.fragment,Dl),qyr=i(Dl),Lc=n(Dl,"P",{});var Kee=s(Lc);jyr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WJ=n(Kee,"A",{href:!0});var Bwt=s(WJ);Dyr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),Gyr=r(Kee," class method or the "),QJ=n(Kee,"A",{href:!0});var Iwt=s(QJ);Oyr=r(Iwt,"from_config()"),Iwt.forEach(t),Vyr=r(Kee,` class
method.`),Kee.forEach(t),Xyr=i(Dl),$8=n(Dl,"P",{});var _Oe=s($8);zyr=r(_Oe,"This class cannot be instantiated directly using "),I7e=n(_Oe,"CODE",{});var Nwt=s(I7e);Wyr=r(Nwt,"__init__()"),Nwt.forEach(t),Qyr=r(_Oe," (throws an error)."),_Oe.forEach(t),Hyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var nw=s(Dt);T(k8.$$.fragment,nw),Uyr=i(nw),N7e=n(nw,"P",{});var qwt=s(N7e);Jyr=r(qwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qwt.forEach(t),Yyr=i(nw),xc=n(nw,"P",{});var Zee=s(xc);Kyr=r(Zee,`Note:
Loading a model from its configuration file does `),q7e=n(Zee,"STRONG",{});var jwt=s(q7e);Zyr=r(jwt,"not"),jwt.forEach(t),eLr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(Zee,"A",{href:!0});var Dwt=s(HJ);oLr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),rLr=r(Zee," to load the model weights."),Zee.forEach(t),tLr=i(nw),T(xE.$$.fragment,nw),nw.forEach(t),aLr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(S8.$$.fragment,Gl),nLr=i(Gl),j7e=n(Gl,"P",{});var Gwt=s(j7e);sLr=r(Gwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gwt.forEach(t),lLr=i(Gl),gn=n(Gl,"P",{});var sw=s(gn);iLr=r(sw,"The model class to instantiate is selected based on the "),D7e=n(sw,"CODE",{});var Owt=s(D7e);dLr=r(Owt,"model_type"),Owt.forEach(t),cLr=r(sw,` property of the config object (either
passed as an argument or loaded from `),G7e=n(sw,"CODE",{});var Vwt=s(G7e);fLr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),mLr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(sw,"CODE",{});var Xwt=s(O7e);gLr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),hLr=r(sw,":"),sw.forEach(t),pLr=i(Gl),V7e=n(Gl,"UL",{});var zwt=s(V7e);$E=n(zwt,"LI",{});var $Ie=s($E);X7e=n($Ie,"STRONG",{});var Wwt=s(X7e);_Lr=r(Wwt,"speech_to_text"),Wwt.forEach(t),uLr=r($Ie," \u2014 "),UJ=n($Ie,"A",{href:!0});var Qwt=s(UJ);bLr=r(Qwt,"TFSpeech2TextForConditionalGeneration"),Qwt.forEach(t),vLr=r($Ie," (Speech2Text model)"),$Ie.forEach(t),zwt.forEach(t),FLr=i(Gl),T(kE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),cDe=i(f),$c=n(f,"H2",{class:!0});var uOe=s($c);SE=n(uOe,"A",{id:!0,class:!0,href:!0});var Hwt=s(SE);z7e=n(Hwt,"SPAN",{});var Uwt=s(z7e);T(R8.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),TLr=i(uOe),W7e=n(uOe,"SPAN",{});var Jwt=s(W7e);MLr=r(Jwt,"FlaxAutoModel"),Jwt.forEach(t),uOe.forEach(t),fDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(P8.$$.fragment,Ol),ELr=i(Ol),kc=n(Ol,"P",{});var eoe=s(kc);CLr=r(eoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JJ=n(eoe,"A",{href:!0});var Ywt=s(JJ);wLr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),ALr=r(eoe," class method or the "),YJ=n(eoe,"A",{href:!0});var Kwt=s(YJ);yLr=r(Kwt,"from_config()"),Kwt.forEach(t),LLr=r(eoe,` class
method.`),eoe.forEach(t),xLr=i(Ol),B8=n(Ol,"P",{});var bOe=s(B8);$Lr=r(bOe,"This class cannot be instantiated directly using "),Q7e=n(bOe,"CODE",{});var Zwt=s(Q7e);kLr=r(Zwt,"__init__()"),Zwt.forEach(t),SLr=r(bOe," (throws an error)."),bOe.forEach(t),RLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var lw=s(Gt);T(I8.$$.fragment,lw),PLr=i(lw),H7e=n(lw,"P",{});var eAt=s(H7e);BLr=r(eAt,"Instantiates one of the base model classes of the library from a configuration."),eAt.forEach(t),ILr=i(lw),Sc=n(lw,"P",{});var ooe=s(Sc);NLr=r(ooe,`Note:
Loading a model from its configuration file does `),U7e=n(ooe,"STRONG",{});var oAt=s(U7e);qLr=r(oAt,"not"),oAt.forEach(t),jLr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(ooe,"A",{href:!0});var rAt=s(KJ);DLr=r(rAt,"from_pretrained()"),rAt.forEach(t),GLr=r(ooe," to load the model weights."),ooe.forEach(t),OLr=i(lw),T(RE.$$.fragment,lw),lw.forEach(t),VLr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(N8.$$.fragment,Vl),XLr=i(Vl),J7e=n(Vl,"P",{});var tAt=s(J7e);zLr=r(tAt,"Instantiate one of the base model classes of the library from a pretrained model."),tAt.forEach(t),WLr=i(Vl),hn=n(Vl,"P",{});var iw=s(hn);QLr=r(iw,"The model class to instantiate is selected based on the "),Y7e=n(iw,"CODE",{});var aAt=s(Y7e);HLr=r(aAt,"model_type"),aAt.forEach(t),ULr=r(iw,` property of the config object (either
passed as an argument or loaded from `),K7e=n(iw,"CODE",{});var nAt=s(K7e);JLr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),YLr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(iw,"CODE",{});var sAt=s(Z7e);KLr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),ZLr=r(iw,":"),iw.forEach(t),e8r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);PE=n(ne,"LI",{});var kIe=s(PE);e9e=n(kIe,"STRONG",{});var lAt=s(e9e);o8r=r(lAt,"albert"),lAt.forEach(t),r8r=r(kIe," \u2014 "),ZJ=n(kIe,"A",{href:!0});var iAt=s(ZJ);t8r=r(iAt,"FlaxAlbertModel"),iAt.forEach(t),a8r=r(kIe," (ALBERT model)"),kIe.forEach(t),n8r=i(ne),BE=n(ne,"LI",{});var SIe=s(BE);o9e=n(SIe,"STRONG",{});var dAt=s(o9e);s8r=r(dAt,"bart"),dAt.forEach(t),l8r=r(SIe," \u2014 "),eY=n(SIe,"A",{href:!0});var cAt=s(eY);i8r=r(cAt,"FlaxBartModel"),cAt.forEach(t),d8r=r(SIe," (BART model)"),SIe.forEach(t),c8r=i(ne),IE=n(ne,"LI",{});var RIe=s(IE);r9e=n(RIe,"STRONG",{});var fAt=s(r9e);f8r=r(fAt,"beit"),fAt.forEach(t),m8r=r(RIe," \u2014 "),oY=n(RIe,"A",{href:!0});var mAt=s(oY);g8r=r(mAt,"FlaxBeitModel"),mAt.forEach(t),h8r=r(RIe," (BEiT model)"),RIe.forEach(t),p8r=i(ne),NE=n(ne,"LI",{});var PIe=s(NE);t9e=n(PIe,"STRONG",{});var gAt=s(t9e);_8r=r(gAt,"bert"),gAt.forEach(t),u8r=r(PIe," \u2014 "),rY=n(PIe,"A",{href:!0});var hAt=s(rY);b8r=r(hAt,"FlaxBertModel"),hAt.forEach(t),v8r=r(PIe," (BERT model)"),PIe.forEach(t),F8r=i(ne),qE=n(ne,"LI",{});var BIe=s(qE);a9e=n(BIe,"STRONG",{});var pAt=s(a9e);T8r=r(pAt,"big_bird"),pAt.forEach(t),M8r=r(BIe," \u2014 "),tY=n(BIe,"A",{href:!0});var _At=s(tY);E8r=r(_At,"FlaxBigBirdModel"),_At.forEach(t),C8r=r(BIe," (BigBird model)"),BIe.forEach(t),w8r=i(ne),jE=n(ne,"LI",{});var IIe=s(jE);n9e=n(IIe,"STRONG",{});var uAt=s(n9e);A8r=r(uAt,"blenderbot"),uAt.forEach(t),y8r=r(IIe," \u2014 "),aY=n(IIe,"A",{href:!0});var bAt=s(aY);L8r=r(bAt,"FlaxBlenderbotModel"),bAt.forEach(t),x8r=r(IIe," (Blenderbot model)"),IIe.forEach(t),$8r=i(ne),DE=n(ne,"LI",{});var NIe=s(DE);s9e=n(NIe,"STRONG",{});var vAt=s(s9e);k8r=r(vAt,"blenderbot-small"),vAt.forEach(t),S8r=r(NIe," \u2014 "),nY=n(NIe,"A",{href:!0});var FAt=s(nY);R8r=r(FAt,"FlaxBlenderbotSmallModel"),FAt.forEach(t),P8r=r(NIe," (BlenderbotSmall model)"),NIe.forEach(t),B8r=i(ne),GE=n(ne,"LI",{});var qIe=s(GE);l9e=n(qIe,"STRONG",{});var TAt=s(l9e);I8r=r(TAt,"clip"),TAt.forEach(t),N8r=r(qIe," \u2014 "),sY=n(qIe,"A",{href:!0});var MAt=s(sY);q8r=r(MAt,"FlaxCLIPModel"),MAt.forEach(t),j8r=r(qIe," (CLIP model)"),qIe.forEach(t),D8r=i(ne),OE=n(ne,"LI",{});var jIe=s(OE);i9e=n(jIe,"STRONG",{});var EAt=s(i9e);G8r=r(EAt,"distilbert"),EAt.forEach(t),O8r=r(jIe," \u2014 "),lY=n(jIe,"A",{href:!0});var CAt=s(lY);V8r=r(CAt,"FlaxDistilBertModel"),CAt.forEach(t),X8r=r(jIe," (DistilBERT model)"),jIe.forEach(t),z8r=i(ne),VE=n(ne,"LI",{});var DIe=s(VE);d9e=n(DIe,"STRONG",{});var wAt=s(d9e);W8r=r(wAt,"electra"),wAt.forEach(t),Q8r=r(DIe," \u2014 "),iY=n(DIe,"A",{href:!0});var AAt=s(iY);H8r=r(AAt,"FlaxElectraModel"),AAt.forEach(t),U8r=r(DIe," (ELECTRA model)"),DIe.forEach(t),J8r=i(ne),XE=n(ne,"LI",{});var GIe=s(XE);c9e=n(GIe,"STRONG",{});var yAt=s(c9e);Y8r=r(yAt,"gpt2"),yAt.forEach(t),K8r=r(GIe," \u2014 "),dY=n(GIe,"A",{href:!0});var LAt=s(dY);Z8r=r(LAt,"FlaxGPT2Model"),LAt.forEach(t),exr=r(GIe," (OpenAI GPT-2 model)"),GIe.forEach(t),oxr=i(ne),zE=n(ne,"LI",{});var OIe=s(zE);f9e=n(OIe,"STRONG",{});var xAt=s(f9e);rxr=r(xAt,"gpt_neo"),xAt.forEach(t),txr=r(OIe," \u2014 "),cY=n(OIe,"A",{href:!0});var $At=s(cY);axr=r($At,"FlaxGPTNeoModel"),$At.forEach(t),nxr=r(OIe," (GPT Neo model)"),OIe.forEach(t),sxr=i(ne),WE=n(ne,"LI",{});var VIe=s(WE);m9e=n(VIe,"STRONG",{});var kAt=s(m9e);lxr=r(kAt,"gptj"),kAt.forEach(t),ixr=r(VIe," \u2014 "),fY=n(VIe,"A",{href:!0});var SAt=s(fY);dxr=r(SAt,"FlaxGPTJModel"),SAt.forEach(t),cxr=r(VIe," (GPT-J model)"),VIe.forEach(t),fxr=i(ne),QE=n(ne,"LI",{});var XIe=s(QE);g9e=n(XIe,"STRONG",{});var RAt=s(g9e);mxr=r(RAt,"longt5"),RAt.forEach(t),gxr=r(XIe," \u2014 "),mY=n(XIe,"A",{href:!0});var PAt=s(mY);hxr=r(PAt,"FlaxLongT5Model"),PAt.forEach(t),pxr=r(XIe," (LongT5 model)"),XIe.forEach(t),_xr=i(ne),HE=n(ne,"LI",{});var zIe=s(HE);h9e=n(zIe,"STRONG",{});var BAt=s(h9e);uxr=r(BAt,"marian"),BAt.forEach(t),bxr=r(zIe," \u2014 "),gY=n(zIe,"A",{href:!0});var IAt=s(gY);vxr=r(IAt,"FlaxMarianModel"),IAt.forEach(t),Fxr=r(zIe," (Marian model)"),zIe.forEach(t),Txr=i(ne),UE=n(ne,"LI",{});var WIe=s(UE);p9e=n(WIe,"STRONG",{});var NAt=s(p9e);Mxr=r(NAt,"mbart"),NAt.forEach(t),Exr=r(WIe," \u2014 "),hY=n(WIe,"A",{href:!0});var qAt=s(hY);Cxr=r(qAt,"FlaxMBartModel"),qAt.forEach(t),wxr=r(WIe," (mBART model)"),WIe.forEach(t),Axr=i(ne),JE=n(ne,"LI",{});var QIe=s(JE);_9e=n(QIe,"STRONG",{});var jAt=s(_9e);yxr=r(jAt,"mt5"),jAt.forEach(t),Lxr=r(QIe," \u2014 "),pY=n(QIe,"A",{href:!0});var DAt=s(pY);xxr=r(DAt,"FlaxMT5Model"),DAt.forEach(t),$xr=r(QIe," (mT5 model)"),QIe.forEach(t),kxr=i(ne),YE=n(ne,"LI",{});var HIe=s(YE);u9e=n(HIe,"STRONG",{});var GAt=s(u9e);Sxr=r(GAt,"pegasus"),GAt.forEach(t),Rxr=r(HIe," \u2014 "),_Y=n(HIe,"A",{href:!0});var OAt=s(_Y);Pxr=r(OAt,"FlaxPegasusModel"),OAt.forEach(t),Bxr=r(HIe," (Pegasus model)"),HIe.forEach(t),Ixr=i(ne),KE=n(ne,"LI",{});var UIe=s(KE);b9e=n(UIe,"STRONG",{});var VAt=s(b9e);Nxr=r(VAt,"roberta"),VAt.forEach(t),qxr=r(UIe," \u2014 "),uY=n(UIe,"A",{href:!0});var XAt=s(uY);jxr=r(XAt,"FlaxRobertaModel"),XAt.forEach(t),Dxr=r(UIe," (RoBERTa model)"),UIe.forEach(t),Gxr=i(ne),ZE=n(ne,"LI",{});var JIe=s(ZE);v9e=n(JIe,"STRONG",{});var zAt=s(v9e);Oxr=r(zAt,"roformer"),zAt.forEach(t),Vxr=r(JIe," \u2014 "),bY=n(JIe,"A",{href:!0});var WAt=s(bY);Xxr=r(WAt,"FlaxRoFormerModel"),WAt.forEach(t),zxr=r(JIe," (RoFormer model)"),JIe.forEach(t),Wxr=i(ne),e5=n(ne,"LI",{});var YIe=s(e5);F9e=n(YIe,"STRONG",{});var QAt=s(F9e);Qxr=r(QAt,"t5"),QAt.forEach(t),Hxr=r(YIe," \u2014 "),vY=n(YIe,"A",{href:!0});var HAt=s(vY);Uxr=r(HAt,"FlaxT5Model"),HAt.forEach(t),Jxr=r(YIe," (T5 model)"),YIe.forEach(t),Yxr=i(ne),o5=n(ne,"LI",{});var KIe=s(o5);T9e=n(KIe,"STRONG",{});var UAt=s(T9e);Kxr=r(UAt,"vision-text-dual-encoder"),UAt.forEach(t),Zxr=r(KIe," \u2014 "),FY=n(KIe,"A",{href:!0});var JAt=s(FY);e$r=r(JAt,"FlaxVisionTextDualEncoderModel"),JAt.forEach(t),o$r=r(KIe," (VisionTextDualEncoder model)"),KIe.forEach(t),r$r=i(ne),r5=n(ne,"LI",{});var ZIe=s(r5);M9e=n(ZIe,"STRONG",{});var YAt=s(M9e);t$r=r(YAt,"vit"),YAt.forEach(t),a$r=r(ZIe," \u2014 "),TY=n(ZIe,"A",{href:!0});var KAt=s(TY);n$r=r(KAt,"FlaxViTModel"),KAt.forEach(t),s$r=r(ZIe," (ViT model)"),ZIe.forEach(t),l$r=i(ne),t5=n(ne,"LI",{});var eNe=s(t5);E9e=n(eNe,"STRONG",{});var ZAt=s(E9e);i$r=r(ZAt,"wav2vec2"),ZAt.forEach(t),d$r=r(eNe," \u2014 "),MY=n(eNe,"A",{href:!0});var eyt=s(MY);c$r=r(eyt,"FlaxWav2Vec2Model"),eyt.forEach(t),f$r=r(eNe," (Wav2Vec2 model)"),eNe.forEach(t),m$r=i(ne),a5=n(ne,"LI",{});var oNe=s(a5);C9e=n(oNe,"STRONG",{});var oyt=s(C9e);g$r=r(oyt,"xglm"),oyt.forEach(t),h$r=r(oNe," \u2014 "),EY=n(oNe,"A",{href:!0});var ryt=s(EY);p$r=r(ryt,"FlaxXGLMModel"),ryt.forEach(t),_$r=r(oNe," (XGLM model)"),oNe.forEach(t),u$r=i(ne),n5=n(ne,"LI",{});var rNe=s(n5);w9e=n(rNe,"STRONG",{});var tyt=s(w9e);b$r=r(tyt,"xlm-roberta"),tyt.forEach(t),v$r=r(rNe," \u2014 "),CY=n(rNe,"A",{href:!0});var ayt=s(CY);F$r=r(ayt,"FlaxXLMRobertaModel"),ayt.forEach(t),T$r=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),ne.forEach(t),M$r=i(Vl),T(s5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),mDe=i(f),Rc=n(f,"H2",{class:!0});var vOe=s(Rc);l5=n(vOe,"A",{id:!0,class:!0,href:!0});var nyt=s(l5);A9e=n(nyt,"SPAN",{});var syt=s(A9e);T(q8.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),E$r=i(vOe),y9e=n(vOe,"SPAN",{});var lyt=s(y9e);C$r=r(lyt,"FlaxAutoModelForCausalLM"),lyt.forEach(t),vOe.forEach(t),gDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(j8.$$.fragment,Xl),w$r=i(Xl),Pc=n(Xl,"P",{});var roe=s(Pc);A$r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wY=n(roe,"A",{href:!0});var iyt=s(wY);y$r=r(iyt,"from_pretrained()"),iyt.forEach(t),L$r=r(roe," class method or the "),AY=n(roe,"A",{href:!0});var dyt=s(AY);x$r=r(dyt,"from_config()"),dyt.forEach(t),$$r=r(roe,` class
method.`),roe.forEach(t),k$r=i(Xl),D8=n(Xl,"P",{});var FOe=s(D8);S$r=r(FOe,"This class cannot be instantiated directly using "),L9e=n(FOe,"CODE",{});var cyt=s(L9e);R$r=r(cyt,"__init__()"),cyt.forEach(t),P$r=r(FOe," (throws an error)."),FOe.forEach(t),B$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var dw=s(Ot);T(G8.$$.fragment,dw),I$r=i(dw),x9e=n(dw,"P",{});var fyt=s(x9e);N$r=r(fyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fyt.forEach(t),q$r=i(dw),Bc=n(dw,"P",{});var toe=s(Bc);j$r=r(toe,`Note:
Loading a model from its configuration file does `),$9e=n(toe,"STRONG",{});var myt=s($9e);D$r=r(myt,"not"),myt.forEach(t),G$r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(toe,"A",{href:!0});var gyt=s(yY);O$r=r(gyt,"from_pretrained()"),gyt.forEach(t),V$r=r(toe," to load the model weights."),toe.forEach(t),X$r=i(dw),T(i5.$$.fragment,dw),dw.forEach(t),z$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(O8.$$.fragment,zl),W$r=i(zl),k9e=n(zl,"P",{});var hyt=s(k9e);Q$r=r(hyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hyt.forEach(t),H$r=i(zl),pn=n(zl,"P",{});var cw=s(pn);U$r=r(cw,"The model class to instantiate is selected based on the "),S9e=n(cw,"CODE",{});var pyt=s(S9e);J$r=r(pyt,"model_type"),pyt.forEach(t),Y$r=r(cw,` property of the config object (either
passed as an argument or loaded from `),R9e=n(cw,"CODE",{});var _yt=s(R9e);K$r=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),Z$r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=n(cw,"CODE",{});var uyt=s(P9e);ekr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),okr=r(cw,":"),cw.forEach(t),rkr=i(zl),Pe=n(zl,"UL",{});var ze=s(Pe);d5=n(ze,"LI",{});var tNe=s(d5);B9e=n(tNe,"STRONG",{});var byt=s(B9e);tkr=r(byt,"bart"),byt.forEach(t),akr=r(tNe," \u2014 "),LY=n(tNe,"A",{href:!0});var vyt=s(LY);nkr=r(vyt,"FlaxBartForCausalLM"),vyt.forEach(t),skr=r(tNe," (BART model)"),tNe.forEach(t),lkr=i(ze),c5=n(ze,"LI",{});var aNe=s(c5);I9e=n(aNe,"STRONG",{});var Fyt=s(I9e);ikr=r(Fyt,"bert"),Fyt.forEach(t),dkr=r(aNe," \u2014 "),xY=n(aNe,"A",{href:!0});var Tyt=s(xY);ckr=r(Tyt,"FlaxBertForCausalLM"),Tyt.forEach(t),fkr=r(aNe," (BERT model)"),aNe.forEach(t),mkr=i(ze),f5=n(ze,"LI",{});var nNe=s(f5);N9e=n(nNe,"STRONG",{});var Myt=s(N9e);gkr=r(Myt,"big_bird"),Myt.forEach(t),hkr=r(nNe," \u2014 "),$Y=n(nNe,"A",{href:!0});var Eyt=s($Y);pkr=r(Eyt,"FlaxBigBirdForCausalLM"),Eyt.forEach(t),_kr=r(nNe," (BigBird model)"),nNe.forEach(t),ukr=i(ze),m5=n(ze,"LI",{});var sNe=s(m5);q9e=n(sNe,"STRONG",{});var Cyt=s(q9e);bkr=r(Cyt,"electra"),Cyt.forEach(t),vkr=r(sNe," \u2014 "),kY=n(sNe,"A",{href:!0});var wyt=s(kY);Fkr=r(wyt,"FlaxElectraForCausalLM"),wyt.forEach(t),Tkr=r(sNe," (ELECTRA model)"),sNe.forEach(t),Mkr=i(ze),g5=n(ze,"LI",{});var lNe=s(g5);j9e=n(lNe,"STRONG",{});var Ayt=s(j9e);Ekr=r(Ayt,"gpt2"),Ayt.forEach(t),Ckr=r(lNe," \u2014 "),SY=n(lNe,"A",{href:!0});var yyt=s(SY);wkr=r(yyt,"FlaxGPT2LMHeadModel"),yyt.forEach(t),Akr=r(lNe," (OpenAI GPT-2 model)"),lNe.forEach(t),ykr=i(ze),h5=n(ze,"LI",{});var iNe=s(h5);D9e=n(iNe,"STRONG",{});var Lyt=s(D9e);Lkr=r(Lyt,"gpt_neo"),Lyt.forEach(t),xkr=r(iNe," \u2014 "),RY=n(iNe,"A",{href:!0});var xyt=s(RY);$kr=r(xyt,"FlaxGPTNeoForCausalLM"),xyt.forEach(t),kkr=r(iNe," (GPT Neo model)"),iNe.forEach(t),Skr=i(ze),p5=n(ze,"LI",{});var dNe=s(p5);G9e=n(dNe,"STRONG",{});var $yt=s(G9e);Rkr=r($yt,"gptj"),$yt.forEach(t),Pkr=r(dNe," \u2014 "),PY=n(dNe,"A",{href:!0});var kyt=s(PY);Bkr=r(kyt,"FlaxGPTJForCausalLM"),kyt.forEach(t),Ikr=r(dNe," (GPT-J model)"),dNe.forEach(t),Nkr=i(ze),_5=n(ze,"LI",{});var cNe=s(_5);O9e=n(cNe,"STRONG",{});var Syt=s(O9e);qkr=r(Syt,"roberta"),Syt.forEach(t),jkr=r(cNe," \u2014 "),BY=n(cNe,"A",{href:!0});var Ryt=s(BY);Dkr=r(Ryt,"FlaxRobertaForCausalLM"),Ryt.forEach(t),Gkr=r(cNe," (RoBERTa model)"),cNe.forEach(t),Okr=i(ze),u5=n(ze,"LI",{});var fNe=s(u5);V9e=n(fNe,"STRONG",{});var Pyt=s(V9e);Vkr=r(Pyt,"xglm"),Pyt.forEach(t),Xkr=r(fNe," \u2014 "),IY=n(fNe,"A",{href:!0});var Byt=s(IY);zkr=r(Byt,"FlaxXGLMForCausalLM"),Byt.forEach(t),Wkr=r(fNe," (XGLM model)"),fNe.forEach(t),ze.forEach(t),Qkr=i(zl),T(b5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),hDe=i(f),Ic=n(f,"H2",{class:!0});var TOe=s(Ic);v5=n(TOe,"A",{id:!0,class:!0,href:!0});var Iyt=s(v5);X9e=n(Iyt,"SPAN",{});var Nyt=s(X9e);T(V8.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),Hkr=i(TOe),z9e=n(TOe,"SPAN",{});var qyt=s(z9e);Ukr=r(qyt,"FlaxAutoModelForPreTraining"),qyt.forEach(t),TOe.forEach(t),pDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(X8.$$.fragment,Wl),Jkr=i(Wl),Nc=n(Wl,"P",{});var aoe=s(Nc);Ykr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NY=n(aoe,"A",{href:!0});var jyt=s(NY);Kkr=r(jyt,"from_pretrained()"),jyt.forEach(t),Zkr=r(aoe," class method or the "),qY=n(aoe,"A",{href:!0});var Dyt=s(qY);eSr=r(Dyt,"from_config()"),Dyt.forEach(t),oSr=r(aoe,` class
method.`),aoe.forEach(t),rSr=i(Wl),z8=n(Wl,"P",{});var MOe=s(z8);tSr=r(MOe,"This class cannot be instantiated directly using "),W9e=n(MOe,"CODE",{});var Gyt=s(W9e);aSr=r(Gyt,"__init__()"),Gyt.forEach(t),nSr=r(MOe," (throws an error)."),MOe.forEach(t),sSr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var fw=s(Vt);T(W8.$$.fragment,fw),lSr=i(fw),Q9e=n(fw,"P",{});var Oyt=s(Q9e);iSr=r(Oyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oyt.forEach(t),dSr=i(fw),qc=n(fw,"P",{});var noe=s(qc);cSr=r(noe,`Note:
Loading a model from its configuration file does `),H9e=n(noe,"STRONG",{});var Vyt=s(H9e);fSr=r(Vyt,"not"),Vyt.forEach(t),mSr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(noe,"A",{href:!0});var Xyt=s(jY);gSr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),hSr=r(noe," to load the model weights."),noe.forEach(t),pSr=i(fw),T(F5.$$.fragment,fw),fw.forEach(t),_Sr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(Q8.$$.fragment,Ql),uSr=i(Ql),U9e=n(Ql,"P",{});var zyt=s(U9e);bSr=r(zyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zyt.forEach(t),vSr=i(Ql),_n=n(Ql,"P",{});var mw=s(_n);FSr=r(mw,"The model class to instantiate is selected based on the "),J9e=n(mw,"CODE",{});var Wyt=s(J9e);TSr=r(Wyt,"model_type"),Wyt.forEach(t),MSr=r(mw,` property of the config object (either
passed as an argument or loaded from `),Y9e=n(mw,"CODE",{});var Qyt=s(Y9e);ESr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),CSr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=n(mw,"CODE",{});var Hyt=s(K9e);wSr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),ASr=r(mw,":"),mw.forEach(t),ySr=i(Ql),Te=n(Ql,"UL",{});var Ce=s(Te);T5=n(Ce,"LI",{});var mNe=s(T5);Z9e=n(mNe,"STRONG",{});var Uyt=s(Z9e);LSr=r(Uyt,"albert"),Uyt.forEach(t),xSr=r(mNe," \u2014 "),DY=n(mNe,"A",{href:!0});var Jyt=s(DY);$Sr=r(Jyt,"FlaxAlbertForPreTraining"),Jyt.forEach(t),kSr=r(mNe," (ALBERT model)"),mNe.forEach(t),SSr=i(Ce),M5=n(Ce,"LI",{});var gNe=s(M5);eMe=n(gNe,"STRONG",{});var Yyt=s(eMe);RSr=r(Yyt,"bart"),Yyt.forEach(t),PSr=r(gNe," \u2014 "),GY=n(gNe,"A",{href:!0});var Kyt=s(GY);BSr=r(Kyt,"FlaxBartForConditionalGeneration"),Kyt.forEach(t),ISr=r(gNe," (BART model)"),gNe.forEach(t),NSr=i(Ce),E5=n(Ce,"LI",{});var hNe=s(E5);oMe=n(hNe,"STRONG",{});var Zyt=s(oMe);qSr=r(Zyt,"bert"),Zyt.forEach(t),jSr=r(hNe," \u2014 "),OY=n(hNe,"A",{href:!0});var eLt=s(OY);DSr=r(eLt,"FlaxBertForPreTraining"),eLt.forEach(t),GSr=r(hNe," (BERT model)"),hNe.forEach(t),OSr=i(Ce),C5=n(Ce,"LI",{});var pNe=s(C5);rMe=n(pNe,"STRONG",{});var oLt=s(rMe);VSr=r(oLt,"big_bird"),oLt.forEach(t),XSr=r(pNe," \u2014 "),VY=n(pNe,"A",{href:!0});var rLt=s(VY);zSr=r(rLt,"FlaxBigBirdForPreTraining"),rLt.forEach(t),WSr=r(pNe," (BigBird model)"),pNe.forEach(t),QSr=i(Ce),w5=n(Ce,"LI",{});var _Ne=s(w5);tMe=n(_Ne,"STRONG",{});var tLt=s(tMe);HSr=r(tLt,"electra"),tLt.forEach(t),USr=r(_Ne," \u2014 "),XY=n(_Ne,"A",{href:!0});var aLt=s(XY);JSr=r(aLt,"FlaxElectraForPreTraining"),aLt.forEach(t),YSr=r(_Ne," (ELECTRA model)"),_Ne.forEach(t),KSr=i(Ce),A5=n(Ce,"LI",{});var uNe=s(A5);aMe=n(uNe,"STRONG",{});var nLt=s(aMe);ZSr=r(nLt,"longt5"),nLt.forEach(t),eRr=r(uNe," \u2014 "),zY=n(uNe,"A",{href:!0});var sLt=s(zY);oRr=r(sLt,"FlaxLongT5ForConditionalGeneration"),sLt.forEach(t),rRr=r(uNe," (LongT5 model)"),uNe.forEach(t),tRr=i(Ce),y5=n(Ce,"LI",{});var bNe=s(y5);nMe=n(bNe,"STRONG",{});var lLt=s(nMe);aRr=r(lLt,"mbart"),lLt.forEach(t),nRr=r(bNe," \u2014 "),WY=n(bNe,"A",{href:!0});var iLt=s(WY);sRr=r(iLt,"FlaxMBartForConditionalGeneration"),iLt.forEach(t),lRr=r(bNe," (mBART model)"),bNe.forEach(t),iRr=i(Ce),L5=n(Ce,"LI",{});var vNe=s(L5);sMe=n(vNe,"STRONG",{});var dLt=s(sMe);dRr=r(dLt,"mt5"),dLt.forEach(t),cRr=r(vNe," \u2014 "),QY=n(vNe,"A",{href:!0});var cLt=s(QY);fRr=r(cLt,"FlaxMT5ForConditionalGeneration"),cLt.forEach(t),mRr=r(vNe," (mT5 model)"),vNe.forEach(t),gRr=i(Ce),x5=n(Ce,"LI",{});var FNe=s(x5);lMe=n(FNe,"STRONG",{});var fLt=s(lMe);hRr=r(fLt,"roberta"),fLt.forEach(t),pRr=r(FNe," \u2014 "),HY=n(FNe,"A",{href:!0});var mLt=s(HY);_Rr=r(mLt,"FlaxRobertaForMaskedLM"),mLt.forEach(t),uRr=r(FNe," (RoBERTa model)"),FNe.forEach(t),bRr=i(Ce),$5=n(Ce,"LI",{});var TNe=s($5);iMe=n(TNe,"STRONG",{});var gLt=s(iMe);vRr=r(gLt,"roformer"),gLt.forEach(t),FRr=r(TNe," \u2014 "),UY=n(TNe,"A",{href:!0});var hLt=s(UY);TRr=r(hLt,"FlaxRoFormerForMaskedLM"),hLt.forEach(t),MRr=r(TNe," (RoFormer model)"),TNe.forEach(t),ERr=i(Ce),k5=n(Ce,"LI",{});var MNe=s(k5);dMe=n(MNe,"STRONG",{});var pLt=s(dMe);CRr=r(pLt,"t5"),pLt.forEach(t),wRr=r(MNe," \u2014 "),JY=n(MNe,"A",{href:!0});var _Lt=s(JY);ARr=r(_Lt,"FlaxT5ForConditionalGeneration"),_Lt.forEach(t),yRr=r(MNe," (T5 model)"),MNe.forEach(t),LRr=i(Ce),S5=n(Ce,"LI",{});var ENe=s(S5);cMe=n(ENe,"STRONG",{});var uLt=s(cMe);xRr=r(uLt,"wav2vec2"),uLt.forEach(t),$Rr=r(ENe," \u2014 "),YY=n(ENe,"A",{href:!0});var bLt=s(YY);kRr=r(bLt,"FlaxWav2Vec2ForPreTraining"),bLt.forEach(t),SRr=r(ENe," (Wav2Vec2 model)"),ENe.forEach(t),RRr=i(Ce),R5=n(Ce,"LI",{});var CNe=s(R5);fMe=n(CNe,"STRONG",{});var vLt=s(fMe);PRr=r(vLt,"xlm-roberta"),vLt.forEach(t),BRr=r(CNe," \u2014 "),KY=n(CNe,"A",{href:!0});var FLt=s(KY);IRr=r(FLt,"FlaxXLMRobertaForMaskedLM"),FLt.forEach(t),NRr=r(CNe," (XLM-RoBERTa model)"),CNe.forEach(t),Ce.forEach(t),qRr=i(Ql),T(P5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),_De=i(f),jc=n(f,"H2",{class:!0});var EOe=s(jc);B5=n(EOe,"A",{id:!0,class:!0,href:!0});var TLt=s(B5);mMe=n(TLt,"SPAN",{});var MLt=s(mMe);T(H8.$$.fragment,MLt),MLt.forEach(t),TLt.forEach(t),jRr=i(EOe),gMe=n(EOe,"SPAN",{});var ELt=s(gMe);DRr=r(ELt,"FlaxAutoModelForMaskedLM"),ELt.forEach(t),EOe.forEach(t),uDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(U8.$$.fragment,Hl),GRr=i(Hl),Dc=n(Hl,"P",{});var soe=s(Dc);ORr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZY=n(soe,"A",{href:!0});var CLt=s(ZY);VRr=r(CLt,"from_pretrained()"),CLt.forEach(t),XRr=r(soe," class method or the "),eK=n(soe,"A",{href:!0});var wLt=s(eK);zRr=r(wLt,"from_config()"),wLt.forEach(t),WRr=r(soe,` class
method.`),soe.forEach(t),QRr=i(Hl),J8=n(Hl,"P",{});var COe=s(J8);HRr=r(COe,"This class cannot be instantiated directly using "),hMe=n(COe,"CODE",{});var ALt=s(hMe);URr=r(ALt,"__init__()"),ALt.forEach(t),JRr=r(COe," (throws an error)."),COe.forEach(t),YRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var gw=s(Xt);T(Y8.$$.fragment,gw),KRr=i(gw),pMe=n(gw,"P",{});var yLt=s(pMe);ZRr=r(yLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yLt.forEach(t),ePr=i(gw),Gc=n(gw,"P",{});var loe=s(Gc);oPr=r(loe,`Note:
Loading a model from its configuration file does `),_Me=n(loe,"STRONG",{});var LLt=s(_Me);rPr=r(LLt,"not"),LLt.forEach(t),tPr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(loe,"A",{href:!0});var xLt=s(oK);aPr=r(xLt,"from_pretrained()"),xLt.forEach(t),nPr=r(loe," to load the model weights."),loe.forEach(t),sPr=i(gw),T(I5.$$.fragment,gw),gw.forEach(t),lPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(K8.$$.fragment,Ul),iPr=i(Ul),uMe=n(Ul,"P",{});var $Lt=s(uMe);dPr=r($Lt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Lt.forEach(t),cPr=i(Ul),un=n(Ul,"P",{});var hw=s(un);fPr=r(hw,"The model class to instantiate is selected based on the "),bMe=n(hw,"CODE",{});var kLt=s(bMe);mPr=r(kLt,"model_type"),kLt.forEach(t),gPr=r(hw,` property of the config object (either
passed as an argument or loaded from `),vMe=n(hw,"CODE",{});var SLt=s(vMe);hPr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),pPr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(hw,"CODE",{});var RLt=s(FMe);_Pr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),uPr=r(hw,":"),hw.forEach(t),bPr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);N5=n(Ie,"LI",{});var wNe=s(N5);TMe=n(wNe,"STRONG",{});var PLt=s(TMe);vPr=r(PLt,"albert"),PLt.forEach(t),FPr=r(wNe," \u2014 "),rK=n(wNe,"A",{href:!0});var BLt=s(rK);TPr=r(BLt,"FlaxAlbertForMaskedLM"),BLt.forEach(t),MPr=r(wNe," (ALBERT model)"),wNe.forEach(t),EPr=i(Ie),q5=n(Ie,"LI",{});var ANe=s(q5);MMe=n(ANe,"STRONG",{});var ILt=s(MMe);CPr=r(ILt,"bart"),ILt.forEach(t),wPr=r(ANe," \u2014 "),tK=n(ANe,"A",{href:!0});var NLt=s(tK);APr=r(NLt,"FlaxBartForConditionalGeneration"),NLt.forEach(t),yPr=r(ANe," (BART model)"),ANe.forEach(t),LPr=i(Ie),j5=n(Ie,"LI",{});var yNe=s(j5);EMe=n(yNe,"STRONG",{});var qLt=s(EMe);xPr=r(qLt,"bert"),qLt.forEach(t),$Pr=r(yNe," \u2014 "),aK=n(yNe,"A",{href:!0});var jLt=s(aK);kPr=r(jLt,"FlaxBertForMaskedLM"),jLt.forEach(t),SPr=r(yNe," (BERT model)"),yNe.forEach(t),RPr=i(Ie),D5=n(Ie,"LI",{});var LNe=s(D5);CMe=n(LNe,"STRONG",{});var DLt=s(CMe);PPr=r(DLt,"big_bird"),DLt.forEach(t),BPr=r(LNe," \u2014 "),nK=n(LNe,"A",{href:!0});var GLt=s(nK);IPr=r(GLt,"FlaxBigBirdForMaskedLM"),GLt.forEach(t),NPr=r(LNe," (BigBird model)"),LNe.forEach(t),qPr=i(Ie),G5=n(Ie,"LI",{});var xNe=s(G5);wMe=n(xNe,"STRONG",{});var OLt=s(wMe);jPr=r(OLt,"distilbert"),OLt.forEach(t),DPr=r(xNe," \u2014 "),sK=n(xNe,"A",{href:!0});var VLt=s(sK);GPr=r(VLt,"FlaxDistilBertForMaskedLM"),VLt.forEach(t),OPr=r(xNe," (DistilBERT model)"),xNe.forEach(t),VPr=i(Ie),O5=n(Ie,"LI",{});var $Ne=s(O5);AMe=n($Ne,"STRONG",{});var XLt=s(AMe);XPr=r(XLt,"electra"),XLt.forEach(t),zPr=r($Ne," \u2014 "),lK=n($Ne,"A",{href:!0});var zLt=s(lK);WPr=r(zLt,"FlaxElectraForMaskedLM"),zLt.forEach(t),QPr=r($Ne," (ELECTRA model)"),$Ne.forEach(t),HPr=i(Ie),V5=n(Ie,"LI",{});var kNe=s(V5);yMe=n(kNe,"STRONG",{});var WLt=s(yMe);UPr=r(WLt,"mbart"),WLt.forEach(t),JPr=r(kNe," \u2014 "),iK=n(kNe,"A",{href:!0});var QLt=s(iK);YPr=r(QLt,"FlaxMBartForConditionalGeneration"),QLt.forEach(t),KPr=r(kNe," (mBART model)"),kNe.forEach(t),ZPr=i(Ie),X5=n(Ie,"LI",{});var SNe=s(X5);LMe=n(SNe,"STRONG",{});var HLt=s(LMe);eBr=r(HLt,"roberta"),HLt.forEach(t),oBr=r(SNe," \u2014 "),dK=n(SNe,"A",{href:!0});var ULt=s(dK);rBr=r(ULt,"FlaxRobertaForMaskedLM"),ULt.forEach(t),tBr=r(SNe," (RoBERTa model)"),SNe.forEach(t),aBr=i(Ie),z5=n(Ie,"LI",{});var RNe=s(z5);xMe=n(RNe,"STRONG",{});var JLt=s(xMe);nBr=r(JLt,"roformer"),JLt.forEach(t),sBr=r(RNe," \u2014 "),cK=n(RNe,"A",{href:!0});var YLt=s(cK);lBr=r(YLt,"FlaxRoFormerForMaskedLM"),YLt.forEach(t),iBr=r(RNe," (RoFormer model)"),RNe.forEach(t),dBr=i(Ie),W5=n(Ie,"LI",{});var PNe=s(W5);$Me=n(PNe,"STRONG",{});var KLt=s($Me);cBr=r(KLt,"xlm-roberta"),KLt.forEach(t),fBr=r(PNe," \u2014 "),fK=n(PNe,"A",{href:!0});var ZLt=s(fK);mBr=r(ZLt,"FlaxXLMRobertaForMaskedLM"),ZLt.forEach(t),gBr=r(PNe," (XLM-RoBERTa model)"),PNe.forEach(t),Ie.forEach(t),hBr=i(Ul),T(Q5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),bDe=i(f),Oc=n(f,"H2",{class:!0});var wOe=s(Oc);H5=n(wOe,"A",{id:!0,class:!0,href:!0});var e8t=s(H5);kMe=n(e8t,"SPAN",{});var o8t=s(kMe);T(Z8.$$.fragment,o8t),o8t.forEach(t),e8t.forEach(t),pBr=i(wOe),SMe=n(wOe,"SPAN",{});var r8t=s(SMe);_Br=r(r8t,"FlaxAutoModelForSeq2SeqLM"),r8t.forEach(t),wOe.forEach(t),vDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(ex.$$.fragment,Jl),uBr=i(Jl),Vc=n(Jl,"P",{});var ioe=s(Vc);bBr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mK=n(ioe,"A",{href:!0});var t8t=s(mK);vBr=r(t8t,"from_pretrained()"),t8t.forEach(t),FBr=r(ioe," class method or the "),gK=n(ioe,"A",{href:!0});var a8t=s(gK);TBr=r(a8t,"from_config()"),a8t.forEach(t),MBr=r(ioe,` class
method.`),ioe.forEach(t),EBr=i(Jl),ox=n(Jl,"P",{});var AOe=s(ox);CBr=r(AOe,"This class cannot be instantiated directly using "),RMe=n(AOe,"CODE",{});var n8t=s(RMe);wBr=r(n8t,"__init__()"),n8t.forEach(t),ABr=r(AOe," (throws an error)."),AOe.forEach(t),yBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var pw=s(zt);T(rx.$$.fragment,pw),LBr=i(pw),PMe=n(pw,"P",{});var s8t=s(PMe);xBr=r(s8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s8t.forEach(t),$Br=i(pw),Xc=n(pw,"P",{});var doe=s(Xc);kBr=r(doe,`Note:
Loading a model from its configuration file does `),BMe=n(doe,"STRONG",{});var l8t=s(BMe);SBr=r(l8t,"not"),l8t.forEach(t),RBr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(doe,"A",{href:!0});var i8t=s(hK);PBr=r(i8t,"from_pretrained()"),i8t.forEach(t),BBr=r(doe," to load the model weights."),doe.forEach(t),IBr=i(pw),T(U5.$$.fragment,pw),pw.forEach(t),NBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(tx.$$.fragment,Yl),qBr=i(Yl),IMe=n(Yl,"P",{});var d8t=s(IMe);jBr=r(d8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d8t.forEach(t),DBr=i(Yl),bn=n(Yl,"P",{});var _w=s(bn);GBr=r(_w,"The model class to instantiate is selected based on the "),NMe=n(_w,"CODE",{});var c8t=s(NMe);OBr=r(c8t,"model_type"),c8t.forEach(t),VBr=r(_w,` property of the config object (either
passed as an argument or loaded from `),qMe=n(_w,"CODE",{});var f8t=s(qMe);XBr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),zBr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(_w,"CODE",{});var m8t=s(jMe);WBr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),QBr=r(_w,":"),_w.forEach(t),HBr=i(Yl),xe=n(Yl,"UL",{});var Ne=s(xe);J5=n(Ne,"LI",{});var BNe=s(J5);DMe=n(BNe,"STRONG",{});var g8t=s(DMe);UBr=r(g8t,"bart"),g8t.forEach(t),JBr=r(BNe," \u2014 "),pK=n(BNe,"A",{href:!0});var h8t=s(pK);YBr=r(h8t,"FlaxBartForConditionalGeneration"),h8t.forEach(t),KBr=r(BNe," (BART model)"),BNe.forEach(t),ZBr=i(Ne),Y5=n(Ne,"LI",{});var INe=s(Y5);GMe=n(INe,"STRONG",{});var p8t=s(GMe);eIr=r(p8t,"blenderbot"),p8t.forEach(t),oIr=r(INe," \u2014 "),_K=n(INe,"A",{href:!0});var _8t=s(_K);rIr=r(_8t,"FlaxBlenderbotForConditionalGeneration"),_8t.forEach(t),tIr=r(INe," (Blenderbot model)"),INe.forEach(t),aIr=i(Ne),K5=n(Ne,"LI",{});var NNe=s(K5);OMe=n(NNe,"STRONG",{});var u8t=s(OMe);nIr=r(u8t,"blenderbot-small"),u8t.forEach(t),sIr=r(NNe," \u2014 "),uK=n(NNe,"A",{href:!0});var b8t=s(uK);lIr=r(b8t,"FlaxBlenderbotSmallForConditionalGeneration"),b8t.forEach(t),iIr=r(NNe," (BlenderbotSmall model)"),NNe.forEach(t),dIr=i(Ne),Z5=n(Ne,"LI",{});var qNe=s(Z5);VMe=n(qNe,"STRONG",{});var v8t=s(VMe);cIr=r(v8t,"encoder-decoder"),v8t.forEach(t),fIr=r(qNe," \u2014 "),bK=n(qNe,"A",{href:!0});var F8t=s(bK);mIr=r(F8t,"FlaxEncoderDecoderModel"),F8t.forEach(t),gIr=r(qNe," (Encoder decoder model)"),qNe.forEach(t),hIr=i(Ne),eC=n(Ne,"LI",{});var jNe=s(eC);XMe=n(jNe,"STRONG",{});var T8t=s(XMe);pIr=r(T8t,"longt5"),T8t.forEach(t),_Ir=r(jNe," \u2014 "),vK=n(jNe,"A",{href:!0});var M8t=s(vK);uIr=r(M8t,"FlaxLongT5ForConditionalGeneration"),M8t.forEach(t),bIr=r(jNe," (LongT5 model)"),jNe.forEach(t),vIr=i(Ne),oC=n(Ne,"LI",{});var DNe=s(oC);zMe=n(DNe,"STRONG",{});var E8t=s(zMe);FIr=r(E8t,"marian"),E8t.forEach(t),TIr=r(DNe," \u2014 "),FK=n(DNe,"A",{href:!0});var C8t=s(FK);MIr=r(C8t,"FlaxMarianMTModel"),C8t.forEach(t),EIr=r(DNe," (Marian model)"),DNe.forEach(t),CIr=i(Ne),rC=n(Ne,"LI",{});var GNe=s(rC);WMe=n(GNe,"STRONG",{});var w8t=s(WMe);wIr=r(w8t,"mbart"),w8t.forEach(t),AIr=r(GNe," \u2014 "),TK=n(GNe,"A",{href:!0});var A8t=s(TK);yIr=r(A8t,"FlaxMBartForConditionalGeneration"),A8t.forEach(t),LIr=r(GNe," (mBART model)"),GNe.forEach(t),xIr=i(Ne),tC=n(Ne,"LI",{});var ONe=s(tC);QMe=n(ONe,"STRONG",{});var y8t=s(QMe);$Ir=r(y8t,"mt5"),y8t.forEach(t),kIr=r(ONe," \u2014 "),MK=n(ONe,"A",{href:!0});var L8t=s(MK);SIr=r(L8t,"FlaxMT5ForConditionalGeneration"),L8t.forEach(t),RIr=r(ONe," (mT5 model)"),ONe.forEach(t),PIr=i(Ne),aC=n(Ne,"LI",{});var VNe=s(aC);HMe=n(VNe,"STRONG",{});var x8t=s(HMe);BIr=r(x8t,"pegasus"),x8t.forEach(t),IIr=r(VNe," \u2014 "),EK=n(VNe,"A",{href:!0});var $8t=s(EK);NIr=r($8t,"FlaxPegasusForConditionalGeneration"),$8t.forEach(t),qIr=r(VNe," (Pegasus model)"),VNe.forEach(t),jIr=i(Ne),nC=n(Ne,"LI",{});var XNe=s(nC);UMe=n(XNe,"STRONG",{});var k8t=s(UMe);DIr=r(k8t,"t5"),k8t.forEach(t),GIr=r(XNe," \u2014 "),CK=n(XNe,"A",{href:!0});var S8t=s(CK);OIr=r(S8t,"FlaxT5ForConditionalGeneration"),S8t.forEach(t),VIr=r(XNe," (T5 model)"),XNe.forEach(t),Ne.forEach(t),XIr=i(Yl),T(sC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),FDe=i(f),zc=n(f,"H2",{class:!0});var yOe=s(zc);lC=n(yOe,"A",{id:!0,class:!0,href:!0});var R8t=s(lC);JMe=n(R8t,"SPAN",{});var P8t=s(JMe);T(ax.$$.fragment,P8t),P8t.forEach(t),R8t.forEach(t),zIr=i(yOe),YMe=n(yOe,"SPAN",{});var B8t=s(YMe);WIr=r(B8t,"FlaxAutoModelForSequenceClassification"),B8t.forEach(t),yOe.forEach(t),TDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(nx.$$.fragment,Kl),QIr=i(Kl),Wc=n(Kl,"P",{});var coe=s(Wc);HIr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=n(coe,"A",{href:!0});var I8t=s(wK);UIr=r(I8t,"from_pretrained()"),I8t.forEach(t),JIr=r(coe," class method or the "),AK=n(coe,"A",{href:!0});var N8t=s(AK);YIr=r(N8t,"from_config()"),N8t.forEach(t),KIr=r(coe,` class
method.`),coe.forEach(t),ZIr=i(Kl),sx=n(Kl,"P",{});var LOe=s(sx);eNr=r(LOe,"This class cannot be instantiated directly using "),KMe=n(LOe,"CODE",{});var q8t=s(KMe);oNr=r(q8t,"__init__()"),q8t.forEach(t),rNr=r(LOe," (throws an error)."),LOe.forEach(t),tNr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var uw=s(Wt);T(lx.$$.fragment,uw),aNr=i(uw),ZMe=n(uw,"P",{});var j8t=s(ZMe);nNr=r(j8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j8t.forEach(t),sNr=i(uw),Qc=n(uw,"P",{});var foe=s(Qc);lNr=r(foe,`Note:
Loading a model from its configuration file does `),e4e=n(foe,"STRONG",{});var D8t=s(e4e);iNr=r(D8t,"not"),D8t.forEach(t),dNr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(foe,"A",{href:!0});var G8t=s(yK);cNr=r(G8t,"from_pretrained()"),G8t.forEach(t),fNr=r(foe," to load the model weights."),foe.forEach(t),mNr=i(uw),T(iC.$$.fragment,uw),uw.forEach(t),gNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(ix.$$.fragment,Zl),hNr=i(Zl),o4e=n(Zl,"P",{});var O8t=s(o4e);pNr=r(O8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O8t.forEach(t),_Nr=i(Zl),vn=n(Zl,"P",{});var bw=s(vn);uNr=r(bw,"The model class to instantiate is selected based on the "),r4e=n(bw,"CODE",{});var V8t=s(r4e);bNr=r(V8t,"model_type"),V8t.forEach(t),vNr=r(bw,` property of the config object (either
passed as an argument or loaded from `),t4e=n(bw,"CODE",{});var X8t=s(t4e);FNr=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),TNr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(bw,"CODE",{});var z8t=s(a4e);MNr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),ENr=r(bw,":"),bw.forEach(t),CNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);dC=n(qe,"LI",{});var zNe=s(dC);n4e=n(zNe,"STRONG",{});var W8t=s(n4e);wNr=r(W8t,"albert"),W8t.forEach(t),ANr=r(zNe," \u2014 "),LK=n(zNe,"A",{href:!0});var Q8t=s(LK);yNr=r(Q8t,"FlaxAlbertForSequenceClassification"),Q8t.forEach(t),LNr=r(zNe," (ALBERT model)"),zNe.forEach(t),xNr=i(qe),cC=n(qe,"LI",{});var WNe=s(cC);s4e=n(WNe,"STRONG",{});var H8t=s(s4e);$Nr=r(H8t,"bart"),H8t.forEach(t),kNr=r(WNe," \u2014 "),xK=n(WNe,"A",{href:!0});var U8t=s(xK);SNr=r(U8t,"FlaxBartForSequenceClassification"),U8t.forEach(t),RNr=r(WNe," (BART model)"),WNe.forEach(t),PNr=i(qe),fC=n(qe,"LI",{});var QNe=s(fC);l4e=n(QNe,"STRONG",{});var J8t=s(l4e);BNr=r(J8t,"bert"),J8t.forEach(t),INr=r(QNe," \u2014 "),$K=n(QNe,"A",{href:!0});var Y8t=s($K);NNr=r(Y8t,"FlaxBertForSequenceClassification"),Y8t.forEach(t),qNr=r(QNe," (BERT model)"),QNe.forEach(t),jNr=i(qe),mC=n(qe,"LI",{});var HNe=s(mC);i4e=n(HNe,"STRONG",{});var K8t=s(i4e);DNr=r(K8t,"big_bird"),K8t.forEach(t),GNr=r(HNe," \u2014 "),kK=n(HNe,"A",{href:!0});var Z8t=s(kK);ONr=r(Z8t,"FlaxBigBirdForSequenceClassification"),Z8t.forEach(t),VNr=r(HNe," (BigBird model)"),HNe.forEach(t),XNr=i(qe),gC=n(qe,"LI",{});var UNe=s(gC);d4e=n(UNe,"STRONG",{});var ext=s(d4e);zNr=r(ext,"distilbert"),ext.forEach(t),WNr=r(UNe," \u2014 "),SK=n(UNe,"A",{href:!0});var oxt=s(SK);QNr=r(oxt,"FlaxDistilBertForSequenceClassification"),oxt.forEach(t),HNr=r(UNe," (DistilBERT model)"),UNe.forEach(t),UNr=i(qe),hC=n(qe,"LI",{});var JNe=s(hC);c4e=n(JNe,"STRONG",{});var rxt=s(c4e);JNr=r(rxt,"electra"),rxt.forEach(t),YNr=r(JNe," \u2014 "),RK=n(JNe,"A",{href:!0});var txt=s(RK);KNr=r(txt,"FlaxElectraForSequenceClassification"),txt.forEach(t),ZNr=r(JNe," (ELECTRA model)"),JNe.forEach(t),eqr=i(qe),pC=n(qe,"LI",{});var YNe=s(pC);f4e=n(YNe,"STRONG",{});var axt=s(f4e);oqr=r(axt,"mbart"),axt.forEach(t),rqr=r(YNe," \u2014 "),PK=n(YNe,"A",{href:!0});var nxt=s(PK);tqr=r(nxt,"FlaxMBartForSequenceClassification"),nxt.forEach(t),aqr=r(YNe," (mBART model)"),YNe.forEach(t),nqr=i(qe),_C=n(qe,"LI",{});var KNe=s(_C);m4e=n(KNe,"STRONG",{});var sxt=s(m4e);sqr=r(sxt,"roberta"),sxt.forEach(t),lqr=r(KNe," \u2014 "),BK=n(KNe,"A",{href:!0});var lxt=s(BK);iqr=r(lxt,"FlaxRobertaForSequenceClassification"),lxt.forEach(t),dqr=r(KNe," (RoBERTa model)"),KNe.forEach(t),cqr=i(qe),uC=n(qe,"LI",{});var ZNe=s(uC);g4e=n(ZNe,"STRONG",{});var ixt=s(g4e);fqr=r(ixt,"roformer"),ixt.forEach(t),mqr=r(ZNe," \u2014 "),IK=n(ZNe,"A",{href:!0});var dxt=s(IK);gqr=r(dxt,"FlaxRoFormerForSequenceClassification"),dxt.forEach(t),hqr=r(ZNe," (RoFormer model)"),ZNe.forEach(t),pqr=i(qe),bC=n(qe,"LI",{});var eqe=s(bC);h4e=n(eqe,"STRONG",{});var cxt=s(h4e);_qr=r(cxt,"xlm-roberta"),cxt.forEach(t),uqr=r(eqe," \u2014 "),NK=n(eqe,"A",{href:!0});var fxt=s(NK);bqr=r(fxt,"FlaxXLMRobertaForSequenceClassification"),fxt.forEach(t),vqr=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),qe.forEach(t),Fqr=i(Zl),T(vC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),MDe=i(f),Hc=n(f,"H2",{class:!0});var xOe=s(Hc);FC=n(xOe,"A",{id:!0,class:!0,href:!0});var mxt=s(FC);p4e=n(mxt,"SPAN",{});var gxt=s(p4e);T(dx.$$.fragment,gxt),gxt.forEach(t),mxt.forEach(t),Tqr=i(xOe),_4e=n(xOe,"SPAN",{});var hxt=s(_4e);Mqr=r(hxt,"FlaxAutoModelForQuestionAnswering"),hxt.forEach(t),xOe.forEach(t),EDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(cx.$$.fragment,ei),Eqr=i(ei),Uc=n(ei,"P",{});var moe=s(Uc);Cqr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=n(moe,"A",{href:!0});var pxt=s(qK);wqr=r(pxt,"from_pretrained()"),pxt.forEach(t),Aqr=r(moe," class method or the "),jK=n(moe,"A",{href:!0});var _xt=s(jK);yqr=r(_xt,"from_config()"),_xt.forEach(t),Lqr=r(moe,` class
method.`),moe.forEach(t),xqr=i(ei),fx=n(ei,"P",{});var $Oe=s(fx);$qr=r($Oe,"This class cannot be instantiated directly using "),u4e=n($Oe,"CODE",{});var uxt=s(u4e);kqr=r(uxt,"__init__()"),uxt.forEach(t),Sqr=r($Oe," (throws an error)."),$Oe.forEach(t),Rqr=i(ei),Qt=n(ei,"DIV",{class:!0});var vw=s(Qt);T(mx.$$.fragment,vw),Pqr=i(vw),b4e=n(vw,"P",{});var bxt=s(b4e);Bqr=r(bxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bxt.forEach(t),Iqr=i(vw),Jc=n(vw,"P",{});var goe=s(Jc);Nqr=r(goe,`Note:
Loading a model from its configuration file does `),v4e=n(goe,"STRONG",{});var vxt=s(v4e);qqr=r(vxt,"not"),vxt.forEach(t),jqr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(goe,"A",{href:!0});var Fxt=s(DK);Dqr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),Gqr=r(goe," to load the model weights."),goe.forEach(t),Oqr=i(vw),T(TC.$$.fragment,vw),vw.forEach(t),Vqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(gx.$$.fragment,oi),Xqr=i(oi),F4e=n(oi,"P",{});var Txt=s(F4e);zqr=r(Txt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Txt.forEach(t),Wqr=i(oi),Fn=n(oi,"P",{});var Fw=s(Fn);Qqr=r(Fw,"The model class to instantiate is selected based on the "),T4e=n(Fw,"CODE",{});var Mxt=s(T4e);Hqr=r(Mxt,"model_type"),Mxt.forEach(t),Uqr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),M4e=n(Fw,"CODE",{});var Ext=s(M4e);Jqr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),Yqr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(Fw,"CODE",{});var Cxt=s(E4e);Kqr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),Zqr=r(Fw,":"),Fw.forEach(t),ejr=i(oi),ke=n(oi,"UL",{});var je=s(ke);MC=n(je,"LI",{});var oqe=s(MC);C4e=n(oqe,"STRONG",{});var wxt=s(C4e);ojr=r(wxt,"albert"),wxt.forEach(t),rjr=r(oqe," \u2014 "),GK=n(oqe,"A",{href:!0});var Axt=s(GK);tjr=r(Axt,"FlaxAlbertForQuestionAnswering"),Axt.forEach(t),ajr=r(oqe," (ALBERT model)"),oqe.forEach(t),njr=i(je),EC=n(je,"LI",{});var rqe=s(EC);w4e=n(rqe,"STRONG",{});var yxt=s(w4e);sjr=r(yxt,"bart"),yxt.forEach(t),ljr=r(rqe," \u2014 "),OK=n(rqe,"A",{href:!0});var Lxt=s(OK);ijr=r(Lxt,"FlaxBartForQuestionAnswering"),Lxt.forEach(t),djr=r(rqe," (BART model)"),rqe.forEach(t),cjr=i(je),CC=n(je,"LI",{});var tqe=s(CC);A4e=n(tqe,"STRONG",{});var xxt=s(A4e);fjr=r(xxt,"bert"),xxt.forEach(t),mjr=r(tqe," \u2014 "),VK=n(tqe,"A",{href:!0});var $xt=s(VK);gjr=r($xt,"FlaxBertForQuestionAnswering"),$xt.forEach(t),hjr=r(tqe," (BERT model)"),tqe.forEach(t),pjr=i(je),wC=n(je,"LI",{});var aqe=s(wC);y4e=n(aqe,"STRONG",{});var kxt=s(y4e);_jr=r(kxt,"big_bird"),kxt.forEach(t),ujr=r(aqe," \u2014 "),XK=n(aqe,"A",{href:!0});var Sxt=s(XK);bjr=r(Sxt,"FlaxBigBirdForQuestionAnswering"),Sxt.forEach(t),vjr=r(aqe," (BigBird model)"),aqe.forEach(t),Fjr=i(je),AC=n(je,"LI",{});var nqe=s(AC);L4e=n(nqe,"STRONG",{});var Rxt=s(L4e);Tjr=r(Rxt,"distilbert"),Rxt.forEach(t),Mjr=r(nqe," \u2014 "),zK=n(nqe,"A",{href:!0});var Pxt=s(zK);Ejr=r(Pxt,"FlaxDistilBertForQuestionAnswering"),Pxt.forEach(t),Cjr=r(nqe," (DistilBERT model)"),nqe.forEach(t),wjr=i(je),yC=n(je,"LI",{});var sqe=s(yC);x4e=n(sqe,"STRONG",{});var Bxt=s(x4e);Ajr=r(Bxt,"electra"),Bxt.forEach(t),yjr=r(sqe," \u2014 "),WK=n(sqe,"A",{href:!0});var Ixt=s(WK);Ljr=r(Ixt,"FlaxElectraForQuestionAnswering"),Ixt.forEach(t),xjr=r(sqe," (ELECTRA model)"),sqe.forEach(t),$jr=i(je),LC=n(je,"LI",{});var lqe=s(LC);$4e=n(lqe,"STRONG",{});var Nxt=s($4e);kjr=r(Nxt,"mbart"),Nxt.forEach(t),Sjr=r(lqe," \u2014 "),QK=n(lqe,"A",{href:!0});var qxt=s(QK);Rjr=r(qxt,"FlaxMBartForQuestionAnswering"),qxt.forEach(t),Pjr=r(lqe," (mBART model)"),lqe.forEach(t),Bjr=i(je),xC=n(je,"LI",{});var iqe=s(xC);k4e=n(iqe,"STRONG",{});var jxt=s(k4e);Ijr=r(jxt,"roberta"),jxt.forEach(t),Njr=r(iqe," \u2014 "),HK=n(iqe,"A",{href:!0});var Dxt=s(HK);qjr=r(Dxt,"FlaxRobertaForQuestionAnswering"),Dxt.forEach(t),jjr=r(iqe," (RoBERTa model)"),iqe.forEach(t),Djr=i(je),$C=n(je,"LI",{});var dqe=s($C);S4e=n(dqe,"STRONG",{});var Gxt=s(S4e);Gjr=r(Gxt,"roformer"),Gxt.forEach(t),Ojr=r(dqe," \u2014 "),UK=n(dqe,"A",{href:!0});var Oxt=s(UK);Vjr=r(Oxt,"FlaxRoFormerForQuestionAnswering"),Oxt.forEach(t),Xjr=r(dqe," (RoFormer model)"),dqe.forEach(t),zjr=i(je),kC=n(je,"LI",{});var cqe=s(kC);R4e=n(cqe,"STRONG",{});var Vxt=s(R4e);Wjr=r(Vxt,"xlm-roberta"),Vxt.forEach(t),Qjr=r(cqe," \u2014 "),JK=n(cqe,"A",{href:!0});var Xxt=s(JK);Hjr=r(Xxt,"FlaxXLMRobertaForQuestionAnswering"),Xxt.forEach(t),Ujr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),je.forEach(t),Jjr=i(oi),T(SC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),CDe=i(f),Yc=n(f,"H2",{class:!0});var kOe=s(Yc);RC=n(kOe,"A",{id:!0,class:!0,href:!0});var zxt=s(RC);P4e=n(zxt,"SPAN",{});var Wxt=s(P4e);T(hx.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),Yjr=i(kOe),B4e=n(kOe,"SPAN",{});var Qxt=s(B4e);Kjr=r(Qxt,"FlaxAutoModelForTokenClassification"),Qxt.forEach(t),kOe.forEach(t),wDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(px.$$.fragment,ri),Zjr=i(ri),Kc=n(ri,"P",{});var hoe=s(Kc);eDr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=n(hoe,"A",{href:!0});var Hxt=s(YK);oDr=r(Hxt,"from_pretrained()"),Hxt.forEach(t),rDr=r(hoe," class method or the "),KK=n(hoe,"A",{href:!0});var Uxt=s(KK);tDr=r(Uxt,"from_config()"),Uxt.forEach(t),aDr=r(hoe,` class
method.`),hoe.forEach(t),nDr=i(ri),_x=n(ri,"P",{});var SOe=s(_x);sDr=r(SOe,"This class cannot be instantiated directly using "),I4e=n(SOe,"CODE",{});var Jxt=s(I4e);lDr=r(Jxt,"__init__()"),Jxt.forEach(t),iDr=r(SOe," (throws an error)."),SOe.forEach(t),dDr=i(ri),Ht=n(ri,"DIV",{class:!0});var Tw=s(Ht);T(ux.$$.fragment,Tw),cDr=i(Tw),N4e=n(Tw,"P",{});var Yxt=s(N4e);fDr=r(Yxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yxt.forEach(t),mDr=i(Tw),Zc=n(Tw,"P",{});var poe=s(Zc);gDr=r(poe,`Note:
Loading a model from its configuration file does `),q4e=n(poe,"STRONG",{});var Kxt=s(q4e);hDr=r(Kxt,"not"),Kxt.forEach(t),pDr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(poe,"A",{href:!0});var Zxt=s(ZK);_Dr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),uDr=r(poe," to load the model weights."),poe.forEach(t),bDr=i(Tw),T(PC.$$.fragment,Tw),Tw.forEach(t),vDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(bx.$$.fragment,ti),FDr=i(ti),j4e=n(ti,"P",{});var e$t=s(j4e);TDr=r(e$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e$t.forEach(t),MDr=i(ti),Tn=n(ti,"P",{});var Mw=s(Tn);EDr=r(Mw,"The model class to instantiate is selected based on the "),D4e=n(Mw,"CODE",{});var o$t=s(D4e);CDr=r(o$t,"model_type"),o$t.forEach(t),wDr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),G4e=n(Mw,"CODE",{});var r$t=s(G4e);ADr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),yDr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(Mw,"CODE",{});var t$t=s(O4e);LDr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),xDr=r(Mw,":"),Mw.forEach(t),$Dr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);BC=n(Fo,"LI",{});var fqe=s(BC);V4e=n(fqe,"STRONG",{});var a$t=s(V4e);kDr=r(a$t,"albert"),a$t.forEach(t),SDr=r(fqe," \u2014 "),eZ=n(fqe,"A",{href:!0});var n$t=s(eZ);RDr=r(n$t,"FlaxAlbertForTokenClassification"),n$t.forEach(t),PDr=r(fqe," (ALBERT model)"),fqe.forEach(t),BDr=i(Fo),IC=n(Fo,"LI",{});var mqe=s(IC);X4e=n(mqe,"STRONG",{});var s$t=s(X4e);IDr=r(s$t,"bert"),s$t.forEach(t),NDr=r(mqe," \u2014 "),oZ=n(mqe,"A",{href:!0});var l$t=s(oZ);qDr=r(l$t,"FlaxBertForTokenClassification"),l$t.forEach(t),jDr=r(mqe," (BERT model)"),mqe.forEach(t),DDr=i(Fo),NC=n(Fo,"LI",{});var gqe=s(NC);z4e=n(gqe,"STRONG",{});var i$t=s(z4e);GDr=r(i$t,"big_bird"),i$t.forEach(t),ODr=r(gqe," \u2014 "),rZ=n(gqe,"A",{href:!0});var d$t=s(rZ);VDr=r(d$t,"FlaxBigBirdForTokenClassification"),d$t.forEach(t),XDr=r(gqe," (BigBird model)"),gqe.forEach(t),zDr=i(Fo),qC=n(Fo,"LI",{});var hqe=s(qC);W4e=n(hqe,"STRONG",{});var c$t=s(W4e);WDr=r(c$t,"distilbert"),c$t.forEach(t),QDr=r(hqe," \u2014 "),tZ=n(hqe,"A",{href:!0});var f$t=s(tZ);HDr=r(f$t,"FlaxDistilBertForTokenClassification"),f$t.forEach(t),UDr=r(hqe," (DistilBERT model)"),hqe.forEach(t),JDr=i(Fo),jC=n(Fo,"LI",{});var pqe=s(jC);Q4e=n(pqe,"STRONG",{});var m$t=s(Q4e);YDr=r(m$t,"electra"),m$t.forEach(t),KDr=r(pqe," \u2014 "),aZ=n(pqe,"A",{href:!0});var g$t=s(aZ);ZDr=r(g$t,"FlaxElectraForTokenClassification"),g$t.forEach(t),eGr=r(pqe," (ELECTRA model)"),pqe.forEach(t),oGr=i(Fo),DC=n(Fo,"LI",{});var _qe=s(DC);H4e=n(_qe,"STRONG",{});var h$t=s(H4e);rGr=r(h$t,"roberta"),h$t.forEach(t),tGr=r(_qe," \u2014 "),nZ=n(_qe,"A",{href:!0});var p$t=s(nZ);aGr=r(p$t,"FlaxRobertaForTokenClassification"),p$t.forEach(t),nGr=r(_qe," (RoBERTa model)"),_qe.forEach(t),sGr=i(Fo),GC=n(Fo,"LI",{});var uqe=s(GC);U4e=n(uqe,"STRONG",{});var _$t=s(U4e);lGr=r(_$t,"roformer"),_$t.forEach(t),iGr=r(uqe," \u2014 "),sZ=n(uqe,"A",{href:!0});var u$t=s(sZ);dGr=r(u$t,"FlaxRoFormerForTokenClassification"),u$t.forEach(t),cGr=r(uqe," (RoFormer model)"),uqe.forEach(t),fGr=i(Fo),OC=n(Fo,"LI",{});var bqe=s(OC);J4e=n(bqe,"STRONG",{});var b$t=s(J4e);mGr=r(b$t,"xlm-roberta"),b$t.forEach(t),gGr=r(bqe," \u2014 "),lZ=n(bqe,"A",{href:!0});var v$t=s(lZ);hGr=r(v$t,"FlaxXLMRobertaForTokenClassification"),v$t.forEach(t),pGr=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),Fo.forEach(t),_Gr=i(ti),T(VC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ADe=i(f),ef=n(f,"H2",{class:!0});var ROe=s(ef);XC=n(ROe,"A",{id:!0,class:!0,href:!0});var F$t=s(XC);Y4e=n(F$t,"SPAN",{});var T$t=s(Y4e);T(vx.$$.fragment,T$t),T$t.forEach(t),F$t.forEach(t),uGr=i(ROe),K4e=n(ROe,"SPAN",{});var M$t=s(K4e);bGr=r(M$t,"FlaxAutoModelForMultipleChoice"),M$t.forEach(t),ROe.forEach(t),yDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Fx.$$.fragment,ai),vGr=i(ai),of=n(ai,"P",{});var _oe=s(of);FGr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=n(_oe,"A",{href:!0});var E$t=s(iZ);TGr=r(E$t,"from_pretrained()"),E$t.forEach(t),MGr=r(_oe," class method or the "),dZ=n(_oe,"A",{href:!0});var C$t=s(dZ);EGr=r(C$t,"from_config()"),C$t.forEach(t),CGr=r(_oe,` class
method.`),_oe.forEach(t),wGr=i(ai),Tx=n(ai,"P",{});var POe=s(Tx);AGr=r(POe,"This class cannot be instantiated directly using "),Z4e=n(POe,"CODE",{});var w$t=s(Z4e);yGr=r(w$t,"__init__()"),w$t.forEach(t),LGr=r(POe," (throws an error)."),POe.forEach(t),xGr=i(ai),Ut=n(ai,"DIV",{class:!0});var Ew=s(Ut);T(Mx.$$.fragment,Ew),$Gr=i(Ew),eEe=n(Ew,"P",{});var A$t=s(eEe);kGr=r(A$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A$t.forEach(t),SGr=i(Ew),rf=n(Ew,"P",{});var uoe=s(rf);RGr=r(uoe,`Note:
Loading a model from its configuration file does `),oEe=n(uoe,"STRONG",{});var y$t=s(oEe);PGr=r(y$t,"not"),y$t.forEach(t),BGr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(uoe,"A",{href:!0});var L$t=s(cZ);IGr=r(L$t,"from_pretrained()"),L$t.forEach(t),NGr=r(uoe," to load the model weights."),uoe.forEach(t),qGr=i(Ew),T(zC.$$.fragment,Ew),Ew.forEach(t),jGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Ex.$$.fragment,ni),DGr=i(ni),rEe=n(ni,"P",{});var x$t=s(rEe);GGr=r(x$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x$t.forEach(t),OGr=i(ni),Mn=n(ni,"P",{});var Cw=s(Mn);VGr=r(Cw,"The model class to instantiate is selected based on the "),tEe=n(Cw,"CODE",{});var $$t=s(tEe);XGr=r($$t,"model_type"),$$t.forEach(t),zGr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),aEe=n(Cw,"CODE",{});var k$t=s(aEe);WGr=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),QGr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n(Cw,"CODE",{});var S$t=s(nEe);HGr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),UGr=r(Cw,":"),Cw.forEach(t),JGr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);WC=n(To,"LI",{});var vqe=s(WC);sEe=n(vqe,"STRONG",{});var R$t=s(sEe);YGr=r(R$t,"albert"),R$t.forEach(t),KGr=r(vqe," \u2014 "),fZ=n(vqe,"A",{href:!0});var P$t=s(fZ);ZGr=r(P$t,"FlaxAlbertForMultipleChoice"),P$t.forEach(t),eOr=r(vqe," (ALBERT model)"),vqe.forEach(t),oOr=i(To),QC=n(To,"LI",{});var Fqe=s(QC);lEe=n(Fqe,"STRONG",{});var B$t=s(lEe);rOr=r(B$t,"bert"),B$t.forEach(t),tOr=r(Fqe," \u2014 "),mZ=n(Fqe,"A",{href:!0});var I$t=s(mZ);aOr=r(I$t,"FlaxBertForMultipleChoice"),I$t.forEach(t),nOr=r(Fqe," (BERT model)"),Fqe.forEach(t),sOr=i(To),HC=n(To,"LI",{});var Tqe=s(HC);iEe=n(Tqe,"STRONG",{});var N$t=s(iEe);lOr=r(N$t,"big_bird"),N$t.forEach(t),iOr=r(Tqe," \u2014 "),gZ=n(Tqe,"A",{href:!0});var q$t=s(gZ);dOr=r(q$t,"FlaxBigBirdForMultipleChoice"),q$t.forEach(t),cOr=r(Tqe," (BigBird model)"),Tqe.forEach(t),fOr=i(To),UC=n(To,"LI",{});var Mqe=s(UC);dEe=n(Mqe,"STRONG",{});var j$t=s(dEe);mOr=r(j$t,"distilbert"),j$t.forEach(t),gOr=r(Mqe," \u2014 "),hZ=n(Mqe,"A",{href:!0});var D$t=s(hZ);hOr=r(D$t,"FlaxDistilBertForMultipleChoice"),D$t.forEach(t),pOr=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),_Or=i(To),JC=n(To,"LI",{});var Eqe=s(JC);cEe=n(Eqe,"STRONG",{});var G$t=s(cEe);uOr=r(G$t,"electra"),G$t.forEach(t),bOr=r(Eqe," \u2014 "),pZ=n(Eqe,"A",{href:!0});var O$t=s(pZ);vOr=r(O$t,"FlaxElectraForMultipleChoice"),O$t.forEach(t),FOr=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),TOr=i(To),YC=n(To,"LI",{});var Cqe=s(YC);fEe=n(Cqe,"STRONG",{});var V$t=s(fEe);MOr=r(V$t,"roberta"),V$t.forEach(t),EOr=r(Cqe," \u2014 "),_Z=n(Cqe,"A",{href:!0});var X$t=s(_Z);COr=r(X$t,"FlaxRobertaForMultipleChoice"),X$t.forEach(t),wOr=r(Cqe," (RoBERTa model)"),Cqe.forEach(t),AOr=i(To),KC=n(To,"LI",{});var wqe=s(KC);mEe=n(wqe,"STRONG",{});var z$t=s(mEe);yOr=r(z$t,"roformer"),z$t.forEach(t),LOr=r(wqe," \u2014 "),uZ=n(wqe,"A",{href:!0});var W$t=s(uZ);xOr=r(W$t,"FlaxRoFormerForMultipleChoice"),W$t.forEach(t),$Or=r(wqe," (RoFormer model)"),wqe.forEach(t),kOr=i(To),ZC=n(To,"LI",{});var Aqe=s(ZC);gEe=n(Aqe,"STRONG",{});var Q$t=s(gEe);SOr=r(Q$t,"xlm-roberta"),Q$t.forEach(t),ROr=r(Aqe," \u2014 "),bZ=n(Aqe,"A",{href:!0});var H$t=s(bZ);POr=r(H$t,"FlaxXLMRobertaForMultipleChoice"),H$t.forEach(t),BOr=r(Aqe," (XLM-RoBERTa model)"),Aqe.forEach(t),To.forEach(t),IOr=i(ni),T(e3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),LDe=i(f),tf=n(f,"H2",{class:!0});var BOe=s(tf);o3=n(BOe,"A",{id:!0,class:!0,href:!0});var U$t=s(o3);hEe=n(U$t,"SPAN",{});var J$t=s(hEe);T(Cx.$$.fragment,J$t),J$t.forEach(t),U$t.forEach(t),NOr=i(BOe),pEe=n(BOe,"SPAN",{});var Y$t=s(pEe);qOr=r(Y$t,"FlaxAutoModelForNextSentencePrediction"),Y$t.forEach(t),BOe.forEach(t),xDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(wx.$$.fragment,si),jOr=i(si),af=n(si,"P",{});var boe=s(af);DOr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=n(boe,"A",{href:!0});var K$t=s(vZ);GOr=r(K$t,"from_pretrained()"),K$t.forEach(t),OOr=r(boe," class method or the "),FZ=n(boe,"A",{href:!0});var Z$t=s(FZ);VOr=r(Z$t,"from_config()"),Z$t.forEach(t),XOr=r(boe,` class
method.`),boe.forEach(t),zOr=i(si),Ax=n(si,"P",{});var IOe=s(Ax);WOr=r(IOe,"This class cannot be instantiated directly using "),_Ee=n(IOe,"CODE",{});var ekt=s(_Ee);QOr=r(ekt,"__init__()"),ekt.forEach(t),HOr=r(IOe," (throws an error)."),IOe.forEach(t),UOr=i(si),Jt=n(si,"DIV",{class:!0});var ww=s(Jt);T(yx.$$.fragment,ww),JOr=i(ww),uEe=n(ww,"P",{});var okt=s(uEe);YOr=r(okt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),okt.forEach(t),KOr=i(ww),nf=n(ww,"P",{});var voe=s(nf);ZOr=r(voe,`Note:
Loading a model from its configuration file does `),bEe=n(voe,"STRONG",{});var rkt=s(bEe);eVr=r(rkt,"not"),rkt.forEach(t),oVr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(voe,"A",{href:!0});var tkt=s(TZ);rVr=r(tkt,"from_pretrained()"),tkt.forEach(t),tVr=r(voe," to load the model weights."),voe.forEach(t),aVr=i(ww),T(r3.$$.fragment,ww),ww.forEach(t),nVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Lx.$$.fragment,li),sVr=i(li),vEe=n(li,"P",{});var akt=s(vEe);lVr=r(akt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),akt.forEach(t),iVr=i(li),En=n(li,"P",{});var Aw=s(En);dVr=r(Aw,"The model class to instantiate is selected based on the "),FEe=n(Aw,"CODE",{});var nkt=s(FEe);cVr=r(nkt,"model_type"),nkt.forEach(t),fVr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),TEe=n(Aw,"CODE",{});var skt=s(TEe);mVr=r(skt,"pretrained_model_name_or_path"),skt.forEach(t),gVr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(Aw,"CODE",{});var lkt=s(MEe);hVr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),pVr=r(Aw,":"),Aw.forEach(t),_Vr=i(li),EEe=n(li,"UL",{});var ikt=s(EEe);t3=n(ikt,"LI",{});var yqe=s(t3);CEe=n(yqe,"STRONG",{});var dkt=s(CEe);uVr=r(dkt,"bert"),dkt.forEach(t),bVr=r(yqe," \u2014 "),MZ=n(yqe,"A",{href:!0});var ckt=s(MZ);vVr=r(ckt,"FlaxBertForNextSentencePrediction"),ckt.forEach(t),FVr=r(yqe," (BERT model)"),yqe.forEach(t),ikt.forEach(t),TVr=i(li),T(a3.$$.fragment,li),li.forEach(t),si.forEach(t),$De=i(f),sf=n(f,"H2",{class:!0});var NOe=s(sf);n3=n(NOe,"A",{id:!0,class:!0,href:!0});var fkt=s(n3);wEe=n(fkt,"SPAN",{});var mkt=s(wEe);T(xx.$$.fragment,mkt),mkt.forEach(t),fkt.forEach(t),MVr=i(NOe),AEe=n(NOe,"SPAN",{});var gkt=s(AEe);EVr=r(gkt,"FlaxAutoModelForImageClassification"),gkt.forEach(t),NOe.forEach(t),kDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T($x.$$.fragment,ii),CVr=i(ii),lf=n(ii,"P",{});var Foe=s(lf);wVr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=n(Foe,"A",{href:!0});var hkt=s(EZ);AVr=r(hkt,"from_pretrained()"),hkt.forEach(t),yVr=r(Foe," class method or the "),CZ=n(Foe,"A",{href:!0});var pkt=s(CZ);LVr=r(pkt,"from_config()"),pkt.forEach(t),xVr=r(Foe,` class
method.`),Foe.forEach(t),$Vr=i(ii),kx=n(ii,"P",{});var qOe=s(kx);kVr=r(qOe,"This class cannot be instantiated directly using "),yEe=n(qOe,"CODE",{});var _kt=s(yEe);SVr=r(_kt,"__init__()"),_kt.forEach(t),RVr=r(qOe," (throws an error)."),qOe.forEach(t),PVr=i(ii),Yt=n(ii,"DIV",{class:!0});var yw=s(Yt);T(Sx.$$.fragment,yw),BVr=i(yw),LEe=n(yw,"P",{});var ukt=s(LEe);IVr=r(ukt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ukt.forEach(t),NVr=i(yw),df=n(yw,"P",{});var Toe=s(df);qVr=r(Toe,`Note:
Loading a model from its configuration file does `),xEe=n(Toe,"STRONG",{});var bkt=s(xEe);jVr=r(bkt,"not"),bkt.forEach(t),DVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Toe,"A",{href:!0});var vkt=s(wZ);GVr=r(vkt,"from_pretrained()"),vkt.forEach(t),OVr=r(Toe," to load the model weights."),Toe.forEach(t),VVr=i(yw),T(s3.$$.fragment,yw),yw.forEach(t),XVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Rx.$$.fragment,di),zVr=i(di),$Ee=n(di,"P",{});var Fkt=s($Ee);WVr=r(Fkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fkt.forEach(t),QVr=i(di),Cn=n(di,"P",{});var Lw=s(Cn);HVr=r(Lw,"The model class to instantiate is selected based on the "),kEe=n(Lw,"CODE",{});var Tkt=s(kEe);UVr=r(Tkt,"model_type"),Tkt.forEach(t),JVr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),SEe=n(Lw,"CODE",{});var Mkt=s(SEe);YVr=r(Mkt,"pretrained_model_name_or_path"),Mkt.forEach(t),KVr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(Lw,"CODE",{});var Ekt=s(REe);ZVr=r(Ekt,"pretrained_model_name_or_path"),Ekt.forEach(t),eXr=r(Lw,":"),Lw.forEach(t),oXr=i(di),Px=n(di,"UL",{});var jOe=s(Px);l3=n(jOe,"LI",{});var Lqe=s(l3);PEe=n(Lqe,"STRONG",{});var Ckt=s(PEe);rXr=r(Ckt,"beit"),Ckt.forEach(t),tXr=r(Lqe," \u2014 "),AZ=n(Lqe,"A",{href:!0});var wkt=s(AZ);aXr=r(wkt,"FlaxBeitForImageClassification"),wkt.forEach(t),nXr=r(Lqe," (BEiT model)"),Lqe.forEach(t),sXr=i(jOe),i3=n(jOe,"LI",{});var xqe=s(i3);BEe=n(xqe,"STRONG",{});var Akt=s(BEe);lXr=r(Akt,"vit"),Akt.forEach(t),iXr=r(xqe," \u2014 "),yZ=n(xqe,"A",{href:!0});var ykt=s(yZ);dXr=r(ykt,"FlaxViTForImageClassification"),ykt.forEach(t),cXr=r(xqe," (ViT model)"),xqe.forEach(t),jOe.forEach(t),fXr=i(di),T(d3.$$.fragment,di),di.forEach(t),ii.forEach(t),SDe=i(f),cf=n(f,"H2",{class:!0});var DOe=s(cf);c3=n(DOe,"A",{id:!0,class:!0,href:!0});var Lkt=s(c3);IEe=n(Lkt,"SPAN",{});var xkt=s(IEe);T(Bx.$$.fragment,xkt),xkt.forEach(t),Lkt.forEach(t),mXr=i(DOe),NEe=n(DOe,"SPAN",{});var $kt=s(NEe);gXr=r($kt,"FlaxAutoModelForVision2Seq"),$kt.forEach(t),DOe.forEach(t),RDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Ix.$$.fragment,ci),hXr=i(ci),ff=n(ci,"P",{});var Moe=s(ff);pXr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=n(Moe,"A",{href:!0});var kkt=s(LZ);_Xr=r(kkt,"from_pretrained()"),kkt.forEach(t),uXr=r(Moe," class method or the "),xZ=n(Moe,"A",{href:!0});var Skt=s(xZ);bXr=r(Skt,"from_config()"),Skt.forEach(t),vXr=r(Moe,` class
method.`),Moe.forEach(t),FXr=i(ci),Nx=n(ci,"P",{});var GOe=s(Nx);TXr=r(GOe,"This class cannot be instantiated directly using "),qEe=n(GOe,"CODE",{});var Rkt=s(qEe);MXr=r(Rkt,"__init__()"),Rkt.forEach(t),EXr=r(GOe," (throws an error)."),GOe.forEach(t),CXr=i(ci),Kt=n(ci,"DIV",{class:!0});var xw=s(Kt);T(qx.$$.fragment,xw),wXr=i(xw),jEe=n(xw,"P",{});var Pkt=s(jEe);AXr=r(Pkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pkt.forEach(t),yXr=i(xw),mf=n(xw,"P",{});var Eoe=s(mf);LXr=r(Eoe,`Note:
Loading a model from its configuration file does `),DEe=n(Eoe,"STRONG",{});var Bkt=s(DEe);xXr=r(Bkt,"not"),Bkt.forEach(t),$Xr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Eoe,"A",{href:!0});var Ikt=s($Z);kXr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),SXr=r(Eoe," to load the model weights."),Eoe.forEach(t),RXr=i(xw),T(f3.$$.fragment,xw),xw.forEach(t),PXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(jx.$$.fragment,fi),BXr=i(fi),GEe=n(fi,"P",{});var Nkt=s(GEe);IXr=r(Nkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nkt.forEach(t),NXr=i(fi),wn=n(fi,"P",{});var $w=s(wn);qXr=r($w,"The model class to instantiate is selected based on the "),OEe=n($w,"CODE",{});var qkt=s(OEe);jXr=r(qkt,"model_type"),qkt.forEach(t),DXr=r($w,` property of the config object (either
passed as an argument or loaded from `),VEe=n($w,"CODE",{});var jkt=s(VEe);GXr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),OXr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n($w,"CODE",{});var Dkt=s(XEe);VXr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),XXr=r($w,":"),$w.forEach(t),zXr=i(fi),zEe=n(fi,"UL",{});var Gkt=s(zEe);m3=n(Gkt,"LI",{});var $qe=s(m3);WEe=n($qe,"STRONG",{});var Okt=s(WEe);WXr=r(Okt,"vision-encoder-decoder"),Okt.forEach(t),QXr=r($qe," \u2014 "),kZ=n($qe,"A",{href:!0});var Vkt=s(kZ);HXr=r(Vkt,"FlaxVisionEncoderDecoderModel"),Vkt.forEach(t),UXr=r($qe," (Vision Encoder decoder model)"),$qe.forEach(t),Gkt.forEach(t),JXr=i(fi),T(g3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(QRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D2,"id","transformers.AutoModelForMaskedLM"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSeq2SeqLM"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSequenceClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForMultipleChoice"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForNextSentencePrediction"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForTokenClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForQuestionAnswering"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.AutoModelForTableQuestionAnswering"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.AutoModelForImageClassification"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.AutoModelForVision2Seq"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.AutoModelForAudioClassification"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X6,"id","transformers.AutoModelForAudioFrameClassification"),c(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X6,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.AutoModelForCTC"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForAudioXVector"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForObjectDetection"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.TFAutoModel"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForPreTraining"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C9,"id","transformers.TFAutoModelForCausalLM"),c(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C9,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j9,"id","transformers.TFAutoModelForImageClassification"),c(j9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j9,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W9,"id","transformers.TFAutoModelForMaskedLM"),c(W9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W9,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.TFAutoModelForSequenceClassification"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForMultipleChoice"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.TFAutoModelForTokenClassification"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForQuestionAnswering"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForVision2Seq"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.FlaxAutoModel"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModelForCausalLM"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForPreTraining"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForMaskedLM"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForTokenClassification"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(iZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(vZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForImageClassification"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(EZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yZ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForVision2Seq"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(LZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,kw),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,Sw),e(We,Ln),e(We,xn),e(xn,Rw),e(We,_i),e(We,$n),e($n,Pw),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ek),e(Ae,bi),e(bi,ok),e(Ae,rk),b(f,Eo,u),b(f,wa,u),e(wa,tk),e(wa,vf),e(vf,ak),e(wa,OOe),b(f,kqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Coe),M(Bw,Coe,null),e(vi,VOe),e(vi,woe),e(woe,XOe),b(f,Sqe,u),b(f,kn,u),e(kn,zOe),e(kn,Aoe),e(Aoe,WOe),e(kn,QOe),e(kn,yoe),e(yoe,HOe),e(kn,UOe),b(f,Rqe,u),M(Iw,f,u),b(f,Pqe,u),b(f,nk,u),e(nk,JOe),b(f,Bqe,u),M(Tf,f,u),b(f,Iqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Loe),M(Nw,Loe,null),e(Fi,YOe),e(Fi,xoe),e(xoe,KOe),b(f,Nqe,u),b(f,Co,u),M(qw,Co,null),e(Co,ZOe),e(Co,jw),e(jw,eVe),e(jw,sk),e(sk,oVe),e(jw,rVe),e(Co,tVe),e(Co,Dw),e(Dw,aVe),e(Dw,$oe),e($oe,nVe),e(Dw,sVe),e(Co,lVe),e(Co,Er),M(Gw,Er,null),e(Er,iVe),e(Er,koe),e(koe,dVe),e(Er,cVe),e(Er,Ti),e(Ti,fVe),e(Ti,Soe),e(Soe,mVe),e(Ti,gVe),e(Ti,Roe),e(Roe,hVe),e(Ti,pVe),e(Er,_Ve),e(Er,A),e(A,Ef),e(Ef,Poe),e(Poe,uVe),e(Ef,bVe),e(Ef,lk),e(lk,vVe),e(Ef,FVe),e(A,TVe),e(A,Cf),e(Cf,Boe),e(Boe,MVe),e(Cf,EVe),e(Cf,ik),e(ik,CVe),e(Cf,wVe),e(A,AVe),e(A,wf),e(wf,Ioe),e(Ioe,yVe),e(wf,LVe),e(wf,dk),e(dk,xVe),e(wf,$Ve),e(A,kVe),e(A,Af),e(Af,Noe),e(Noe,SVe),e(Af,RVe),e(Af,ck),e(ck,PVe),e(Af,BVe),e(A,IVe),e(A,yf),e(yf,qoe),e(qoe,NVe),e(yf,qVe),e(yf,fk),e(fk,jVe),e(yf,DVe),e(A,GVe),e(A,Lf),e(Lf,joe),e(joe,OVe),e(Lf,VVe),e(Lf,mk),e(mk,XVe),e(Lf,zVe),e(A,WVe),e(A,xf),e(xf,Doe),e(Doe,QVe),e(xf,HVe),e(xf,gk),e(gk,UVe),e(xf,JVe),e(A,YVe),e(A,$f),e($f,Goe),e(Goe,KVe),e($f,ZVe),e($f,hk),e(hk,eXe),e($f,oXe),e(A,rXe),e(A,kf),e(kf,Ooe),e(Ooe,tXe),e(kf,aXe),e(kf,pk),e(pk,nXe),e(kf,sXe),e(A,lXe),e(A,Sf),e(Sf,Voe),e(Voe,iXe),e(Sf,dXe),e(Sf,_k),e(_k,cXe),e(Sf,fXe),e(A,mXe),e(A,Rf),e(Rf,Xoe),e(Xoe,gXe),e(Rf,hXe),e(Rf,uk),e(uk,pXe),e(Rf,_Xe),e(A,uXe),e(A,Pf),e(Pf,zoe),e(zoe,bXe),e(Pf,vXe),e(Pf,bk),e(bk,FXe),e(Pf,TXe),e(A,MXe),e(A,Bf),e(Bf,Woe),e(Woe,EXe),e(Bf,CXe),e(Bf,vk),e(vk,wXe),e(Bf,AXe),e(A,yXe),e(A,If),e(If,Qoe),e(Qoe,LXe),e(If,xXe),e(If,Fk),e(Fk,$Xe),e(If,kXe),e(A,SXe),e(A,Nf),e(Nf,Hoe),e(Hoe,RXe),e(Nf,PXe),e(Nf,Tk),e(Tk,BXe),e(Nf,IXe),e(A,NXe),e(A,qf),e(qf,Uoe),e(Uoe,qXe),e(qf,jXe),e(qf,Mk),e(Mk,DXe),e(qf,GXe),e(A,OXe),e(A,jf),e(jf,Joe),e(Joe,VXe),e(jf,XXe),e(jf,Ek),e(Ek,zXe),e(jf,WXe),e(A,QXe),e(A,Df),e(Df,Yoe),e(Yoe,HXe),e(Df,UXe),e(Df,Ck),e(Ck,JXe),e(Df,YXe),e(A,KXe),e(A,Gf),e(Gf,Koe),e(Koe,ZXe),e(Gf,eze),e(Gf,wk),e(wk,oze),e(Gf,rze),e(A,tze),e(A,Of),e(Of,Zoe),e(Zoe,aze),e(Of,nze),e(Of,Ak),e(Ak,sze),e(Of,lze),e(A,ize),e(A,Vf),e(Vf,ere),e(ere,dze),e(Vf,cze),e(Vf,yk),e(yk,fze),e(Vf,mze),e(A,gze),e(A,Xf),e(Xf,ore),e(ore,hze),e(Xf,pze),e(Xf,Lk),e(Lk,_ze),e(Xf,uze),e(A,bze),e(A,zf),e(zf,rre),e(rre,vze),e(zf,Fze),e(zf,xk),e(xk,Tze),e(zf,Mze),e(A,Eze),e(A,Wf),e(Wf,tre),e(tre,Cze),e(Wf,wze),e(Wf,$k),e($k,Aze),e(Wf,yze),e(A,Lze),e(A,Qf),e(Qf,are),e(are,xze),e(Qf,$ze),e(Qf,kk),e(kk,kze),e(Qf,Sze),e(A,Rze),e(A,Hf),e(Hf,nre),e(nre,Pze),e(Hf,Bze),e(Hf,Sk),e(Sk,Ize),e(Hf,Nze),e(A,qze),e(A,Uf),e(Uf,sre),e(sre,jze),e(Uf,Dze),e(Uf,Rk),e(Rk,Gze),e(Uf,Oze),e(A,Vze),e(A,Jf),e(Jf,lre),e(lre,Xze),e(Jf,zze),e(Jf,Pk),e(Pk,Wze),e(Jf,Qze),e(A,Hze),e(A,Yf),e(Yf,ire),e(ire,Uze),e(Yf,Jze),e(Yf,Bk),e(Bk,Yze),e(Yf,Kze),e(A,Zze),e(A,Kf),e(Kf,dre),e(dre,eWe),e(Kf,oWe),e(Kf,Ik),e(Ik,rWe),e(Kf,tWe),e(A,aWe),e(A,Zf),e(Zf,cre),e(cre,nWe),e(Zf,sWe),e(Zf,Nk),e(Nk,lWe),e(Zf,iWe),e(A,dWe),e(A,em),e(em,fre),e(fre,cWe),e(em,fWe),e(em,qk),e(qk,mWe),e(em,gWe),e(A,hWe),e(A,om),e(om,mre),e(mre,pWe),e(om,_We),e(om,jk),e(jk,uWe),e(om,bWe),e(A,vWe),e(A,rm),e(rm,gre),e(gre,FWe),e(rm,TWe),e(rm,Dk),e(Dk,MWe),e(rm,EWe),e(A,CWe),e(A,tm),e(tm,hre),e(hre,wWe),e(tm,AWe),e(tm,Gk),e(Gk,yWe),e(tm,LWe),e(A,xWe),e(A,am),e(am,pre),e(pre,$We),e(am,kWe),e(am,Ok),e(Ok,SWe),e(am,RWe),e(A,PWe),e(A,nm),e(nm,_re),e(_re,BWe),e(nm,IWe),e(nm,Vk),e(Vk,NWe),e(nm,qWe),e(A,jWe),e(A,sm),e(sm,ure),e(ure,DWe),e(sm,GWe),e(sm,Xk),e(Xk,OWe),e(sm,VWe),e(A,XWe),e(A,lm),e(lm,bre),e(bre,zWe),e(lm,WWe),e(lm,zk),e(zk,QWe),e(lm,HWe),e(A,UWe),e(A,im),e(im,vre),e(vre,JWe),e(im,YWe),e(im,Wk),e(Wk,KWe),e(im,ZWe),e(A,eQe),e(A,dm),e(dm,Fre),e(Fre,oQe),e(dm,rQe),e(dm,Qk),e(Qk,tQe),e(dm,aQe),e(A,nQe),e(A,cm),e(cm,Tre),e(Tre,sQe),e(cm,lQe),e(cm,Hk),e(Hk,iQe),e(cm,dQe),e(A,cQe),e(A,fm),e(fm,Mre),e(Mre,fQe),e(fm,mQe),e(fm,Uk),e(Uk,gQe),e(fm,hQe),e(A,pQe),e(A,mm),e(mm,Ere),e(Ere,_Qe),e(mm,uQe),e(mm,Jk),e(Jk,bQe),e(mm,vQe),e(A,FQe),e(A,gm),e(gm,Cre),e(Cre,TQe),e(gm,MQe),e(gm,Yk),e(Yk,EQe),e(gm,CQe),e(A,wQe),e(A,hm),e(hm,wre),e(wre,AQe),e(hm,yQe),e(hm,Kk),e(Kk,LQe),e(hm,xQe),e(A,$Qe),e(A,pm),e(pm,Are),e(Are,kQe),e(pm,SQe),e(pm,Zk),e(Zk,RQe),e(pm,PQe),e(A,BQe),e(A,_m),e(_m,yre),e(yre,IQe),e(_m,NQe),e(_m,eS),e(eS,qQe),e(_m,jQe),e(A,DQe),e(A,um),e(um,Lre),e(Lre,GQe),e(um,OQe),e(um,oS),e(oS,VQe),e(um,XQe),e(A,zQe),e(A,bm),e(bm,xre),e(xre,WQe),e(bm,QQe),e(bm,rS),e(rS,HQe),e(bm,UQe),e(A,JQe),e(A,vm),e(vm,$re),e($re,YQe),e(vm,KQe),e(vm,tS),e(tS,ZQe),e(vm,eHe),e(A,oHe),e(A,Fm),e(Fm,kre),e(kre,rHe),e(Fm,tHe),e(Fm,aS),e(aS,aHe),e(Fm,nHe),e(A,sHe),e(A,Tm),e(Tm,Sre),e(Sre,lHe),e(Tm,iHe),e(Tm,nS),e(nS,dHe),e(Tm,cHe),e(A,fHe),e(A,Mm),e(Mm,Rre),e(Rre,mHe),e(Mm,gHe),e(Mm,sS),e(sS,hHe),e(Mm,pHe),e(A,_He),e(A,Em),e(Em,Pre),e(Pre,uHe),e(Em,bHe),e(Em,lS),e(lS,vHe),e(Em,FHe),e(A,THe),e(A,Cm),e(Cm,Bre),e(Bre,MHe),e(Cm,EHe),e(Cm,iS),e(iS,CHe),e(Cm,wHe),e(A,AHe),e(A,wm),e(wm,Ire),e(Ire,yHe),e(wm,LHe),e(wm,dS),e(dS,xHe),e(wm,$He),e(A,kHe),e(A,Am),e(Am,Nre),e(Nre,SHe),e(Am,RHe),e(Am,cS),e(cS,PHe),e(Am,BHe),e(A,IHe),e(A,ym),e(ym,qre),e(qre,NHe),e(ym,qHe),e(ym,fS),e(fS,jHe),e(ym,DHe),e(A,GHe),e(A,Lm),e(Lm,jre),e(jre,OHe),e(Lm,VHe),e(Lm,mS),e(mS,XHe),e(Lm,zHe),e(A,WHe),e(A,xm),e(xm,Dre),e(Dre,QHe),e(xm,HHe),e(xm,gS),e(gS,UHe),e(xm,JHe),e(A,YHe),e(A,$m),e($m,Gre),e(Gre,KHe),e($m,ZHe),e($m,hS),e(hS,eUe),e($m,oUe),e(A,rUe),e(A,km),e(km,Ore),e(Ore,tUe),e(km,aUe),e(km,pS),e(pS,nUe),e(km,sUe),e(A,lUe),e(A,Sm),e(Sm,Vre),e(Vre,iUe),e(Sm,dUe),e(Sm,_S),e(_S,cUe),e(Sm,fUe),e(A,mUe),e(A,Rm),e(Rm,Xre),e(Xre,gUe),e(Rm,hUe),e(Rm,uS),e(uS,pUe),e(Rm,_Ue),e(A,uUe),e(A,Pm),e(Pm,zre),e(zre,bUe),e(Pm,vUe),e(Pm,bS),e(bS,FUe),e(Pm,TUe),e(A,MUe),e(A,Bm),e(Bm,Wre),e(Wre,EUe),e(Bm,CUe),e(Bm,vS),e(vS,wUe),e(Bm,AUe),e(A,yUe),e(A,Im),e(Im,Qre),e(Qre,LUe),e(Im,xUe),e(Im,FS),e(FS,$Ue),e(Im,kUe),e(A,SUe),e(A,Nm),e(Nm,Hre),e(Hre,RUe),e(Nm,PUe),e(Nm,TS),e(TS,BUe),e(Nm,IUe),e(A,NUe),e(A,qm),e(qm,Ure),e(Ure,qUe),e(qm,jUe),e(qm,MS),e(MS,DUe),e(qm,GUe),e(A,OUe),e(A,jm),e(jm,Jre),e(Jre,VUe),e(jm,XUe),e(jm,ES),e(ES,zUe),e(jm,WUe),e(A,QUe),e(A,Dm),e(Dm,Yre),e(Yre,HUe),e(Dm,UUe),e(Dm,CS),e(CS,JUe),e(Dm,YUe),e(A,KUe),e(A,Gm),e(Gm,Kre),e(Kre,ZUe),e(Gm,eJe),e(Gm,wS),e(wS,oJe),e(Gm,rJe),e(A,tJe),e(A,Om),e(Om,Zre),e(Zre,aJe),e(Om,nJe),e(Om,AS),e(AS,sJe),e(Om,lJe),e(A,iJe),e(A,Vm),e(Vm,ete),e(ete,dJe),e(Vm,cJe),e(Vm,yS),e(yS,fJe),e(Vm,mJe),e(A,gJe),e(A,Xm),e(Xm,ote),e(ote,hJe),e(Xm,pJe),e(Xm,LS),e(LS,_Je),e(Xm,uJe),e(A,bJe),e(A,zm),e(zm,rte),e(rte,vJe),e(zm,FJe),e(zm,xS),e(xS,TJe),e(zm,MJe),e(A,EJe),e(A,Wm),e(Wm,tte),e(tte,CJe),e(Wm,wJe),e(Wm,$S),e($S,AJe),e(Wm,yJe),e(A,LJe),e(A,Qm),e(Qm,ate),e(ate,xJe),e(Qm,$Je),e(Qm,kS),e(kS,kJe),e(Qm,SJe),e(A,RJe),e(A,Hm),e(Hm,nte),e(nte,PJe),e(Hm,BJe),e(Hm,SS),e(SS,IJe),e(Hm,NJe),e(A,qJe),e(A,Um),e(Um,ste),e(ste,jJe),e(Um,DJe),e(Um,RS),e(RS,GJe),e(Um,OJe),e(A,VJe),e(A,Jm),e(Jm,lte),e(lte,XJe),e(Jm,zJe),e(Jm,PS),e(PS,WJe),e(Jm,QJe),e(A,HJe),e(A,Ym),e(Ym,ite),e(ite,UJe),e(Ym,JJe),e(Ym,BS),e(BS,YJe),e(Ym,KJe),e(A,ZJe),e(A,Km),e(Km,dte),e(dte,eYe),e(Km,oYe),e(Km,IS),e(IS,rYe),e(Km,tYe),e(A,aYe),e(A,Zm),e(Zm,cte),e(cte,nYe),e(Zm,sYe),e(Zm,NS),e(NS,lYe),e(Zm,iYe),e(A,dYe),e(A,eg),e(eg,fte),e(fte,cYe),e(eg,fYe),e(eg,qS),e(qS,mYe),e(eg,gYe),e(A,hYe),e(A,og),e(og,mte),e(mte,pYe),e(og,_Ye),e(og,jS),e(jS,uYe),e(og,bYe),e(A,vYe),e(A,rg),e(rg,gte),e(gte,FYe),e(rg,TYe),e(rg,DS),e(DS,MYe),e(rg,EYe),e(A,CYe),e(A,tg),e(tg,hte),e(hte,wYe),e(tg,AYe),e(tg,GS),e(GS,yYe),e(tg,LYe),e(A,xYe),e(A,ag),e(ag,pte),e(pte,$Ye),e(ag,kYe),e(ag,OS),e(OS,SYe),e(ag,RYe),e(A,PYe),e(A,ng),e(ng,_te),e(_te,BYe),e(ng,IYe),e(ng,VS),e(VS,NYe),e(ng,qYe),e(A,jYe),e(A,sg),e(sg,ute),e(ute,DYe),e(sg,GYe),e(sg,XS),e(XS,OYe),e(sg,VYe),e(A,XYe),e(A,lg),e(lg,bte),e(bte,zYe),e(lg,WYe),e(lg,zS),e(zS,QYe),e(lg,HYe),e(A,UYe),e(A,ig),e(ig,vte),e(vte,JYe),e(ig,YYe),e(ig,WS),e(WS,KYe),e(ig,ZYe),e(A,eKe),e(A,dg),e(dg,Fte),e(Fte,oKe),e(dg,rKe),e(dg,QS),e(QS,tKe),e(dg,aKe),e(A,nKe),e(A,cg),e(cg,Tte),e(Tte,sKe),e(cg,lKe),e(cg,HS),e(HS,iKe),e(cg,dKe),e(A,cKe),e(A,fg),e(fg,Mte),e(Mte,fKe),e(fg,mKe),e(fg,US),e(US,gKe),e(fg,hKe),e(A,pKe),e(A,mg),e(mg,Ete),e(Ete,_Ke),e(mg,uKe),e(mg,JS),e(JS,bKe),e(mg,vKe),e(A,FKe),e(A,gg),e(gg,Cte),e(Cte,TKe),e(gg,MKe),e(gg,YS),e(YS,EKe),e(gg,CKe),e(A,wKe),e(A,hg),e(hg,wte),e(wte,AKe),e(hg,yKe),e(hg,KS),e(KS,LKe),e(hg,xKe),e(A,$Ke),e(A,pg),e(pg,Ate),e(Ate,kKe),e(pg,SKe),e(pg,ZS),e(ZS,RKe),e(pg,PKe),e(A,BKe),e(A,_g),e(_g,yte),e(yte,IKe),e(_g,NKe),e(_g,eR),e(eR,qKe),e(_g,jKe),e(A,DKe),e(A,ug),e(ug,Lte),e(Lte,GKe),e(ug,OKe),e(ug,oR),e(oR,VKe),e(ug,XKe),e(A,zKe),e(A,bg),e(bg,xte),e(xte,WKe),e(bg,QKe),e(bg,rR),e(rR,HKe),e(bg,UKe),e(A,JKe),e(A,vg),e(vg,$te),e($te,YKe),e(vg,KKe),e(vg,tR),e(tR,ZKe),e(vg,eZe),e(A,oZe),e(A,Fg),e(Fg,kte),e(kte,rZe),e(Fg,tZe),e(Fg,aR),e(aR,aZe),e(Fg,nZe),e(A,sZe),e(A,Tg),e(Tg,Ste),e(Ste,lZe),e(Tg,iZe),e(Tg,nR),e(nR,dZe),e(Tg,cZe),e(A,fZe),e(A,Mg),e(Mg,Rte),e(Rte,mZe),e(Mg,gZe),e(Mg,sR),e(sR,hZe),e(Mg,pZe),e(A,_Ze),e(A,Eg),e(Eg,Pte),e(Pte,uZe),e(Eg,bZe),e(Eg,lR),e(lR,vZe),e(Eg,FZe),e(A,TZe),e(A,Cg),e(Cg,Bte),e(Bte,MZe),e(Cg,EZe),e(Cg,iR),e(iR,CZe),e(Cg,wZe),e(Er,AZe),M(wg,Er,null),e(Co,yZe),e(Co,Ag),M(Ow,Ag,null),e(Ag,LZe),e(Ag,Ite),e(Ite,xZe),b(f,qqe,u),b(f,Mi,u),e(Mi,yg),e(yg,Nte),M(Vw,Nte,null),e(Mi,$Ze),e(Mi,qte),e(qte,kZe),b(f,jqe,u),b(f,wo,u),M(Xw,wo,null),e(wo,SZe),e(wo,zw),e(zw,RZe),e(zw,dR),e(dR,PZe),e(zw,BZe),e(wo,IZe),e(wo,Ww),e(Ww,NZe),e(Ww,jte),e(jte,qZe),e(Ww,jZe),e(wo,DZe),e(wo,Cr),M(Qw,Cr,null),e(Cr,GZe),e(Cr,Dte),e(Dte,OZe),e(Cr,VZe),e(Cr,Aa),e(Aa,XZe),e(Aa,Gte),e(Gte,zZe),e(Aa,WZe),e(Aa,Ote),e(Ote,QZe),e(Aa,HZe),e(Aa,Vte),e(Vte,UZe),e(Aa,JZe),e(Cr,YZe),e(Cr,k),e(k,Sn),e(Sn,Xte),e(Xte,KZe),e(Sn,ZZe),e(Sn,cR),e(cR,eeo),e(Sn,oeo),e(Sn,fR),e(fR,reo),e(Sn,teo),e(k,aeo),e(k,Rn),e(Rn,zte),e(zte,neo),e(Rn,seo),e(Rn,mR),e(mR,leo),e(Rn,ieo),e(Rn,gR),e(gR,deo),e(Rn,ceo),e(k,feo),e(k,Pn),e(Pn,Wte),e(Wte,meo),e(Pn,geo),e(Pn,hR),e(hR,heo),e(Pn,peo),e(Pn,pR),e(pR,_eo),e(Pn,ueo),e(k,beo),e(k,Lg),e(Lg,Qte),e(Qte,veo),e(Lg,Feo),e(Lg,_R),e(_R,Teo),e(Lg,Meo),e(k,Eeo),e(k,Bn),e(Bn,Hte),e(Hte,Ceo),e(Bn,weo),e(Bn,uR),e(uR,Aeo),e(Bn,yeo),e(Bn,bR),e(bR,Leo),e(Bn,xeo),e(k,$eo),e(k,xg),e(xg,Ute),e(Ute,keo),e(xg,Seo),e(xg,vR),e(vR,Reo),e(xg,Peo),e(k,Beo),e(k,$g),e($g,Jte),e(Jte,Ieo),e($g,Neo),e($g,FR),e(FR,qeo),e($g,jeo),e(k,Deo),e(k,kg),e(kg,Yte),e(Yte,Geo),e(kg,Oeo),e(kg,TR),e(TR,Veo),e(kg,Xeo),e(k,zeo),e(k,In),e(In,Kte),e(Kte,Weo),e(In,Qeo),e(In,MR),e(MR,Heo),e(In,Ueo),e(In,ER),e(ER,Jeo),e(In,Yeo),e(k,Keo),e(k,Nn),e(Nn,Zte),e(Zte,Zeo),e(Nn,eoo),e(Nn,CR),e(CR,ooo),e(Nn,roo),e(Nn,wR),e(wR,too),e(Nn,aoo),e(k,noo),e(k,qn),e(qn,eae),e(eae,soo),e(qn,loo),e(qn,AR),e(AR,ioo),e(qn,doo),e(qn,yR),e(yR,coo),e(qn,foo),e(k,moo),e(k,Sg),e(Sg,oae),e(oae,goo),e(Sg,hoo),e(Sg,LR),e(LR,poo),e(Sg,_oo),e(k,uoo),e(k,Rg),e(Rg,rae),e(rae,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,jn),e(jn,tae),e(tae,Eoo),e(jn,Coo),e(jn,$R),e($R,woo),e(jn,Aoo),e(jn,kR),e(kR,yoo),e(jn,Loo),e(k,xoo),e(k,Pg),e(Pg,aae),e(aae,$oo),e(Pg,koo),e(Pg,SR),e(SR,Soo),e(Pg,Roo),e(k,Poo),e(k,Dn),e(Dn,nae),e(nae,Boo),e(Dn,Ioo),e(Dn,RR),e(RR,Noo),e(Dn,qoo),e(Dn,PR),e(PR,joo),e(Dn,Doo),e(k,Goo),e(k,Gn),e(Gn,sae),e(sae,Ooo),e(Gn,Voo),e(Gn,BR),e(BR,Xoo),e(Gn,zoo),e(Gn,IR),e(IR,Woo),e(Gn,Qoo),e(k,Hoo),e(k,On),e(On,lae),e(lae,Uoo),e(On,Joo),e(On,NR),e(NR,Yoo),e(On,Koo),e(On,qR),e(qR,Zoo),e(On,ero),e(k,oro),e(k,Bg),e(Bg,iae),e(iae,rro),e(Bg,tro),e(Bg,jR),e(jR,aro),e(Bg,nro),e(k,sro),e(k,Vn),e(Vn,dae),e(dae,lro),e(Vn,iro),e(Vn,DR),e(DR,dro),e(Vn,cro),e(Vn,GR),e(GR,fro),e(Vn,mro),e(k,gro),e(k,Xn),e(Xn,cae),e(cae,hro),e(Xn,pro),e(Xn,OR),e(OR,_ro),e(Xn,uro),e(Xn,VR),e(VR,bro),e(Xn,vro),e(k,Fro),e(k,zn),e(zn,fae),e(fae,Tro),e(zn,Mro),e(zn,XR),e(XR,Ero),e(zn,Cro),e(zn,zR),e(zR,wro),e(zn,Aro),e(k,yro),e(k,Wn),e(Wn,mae),e(mae,Lro),e(Wn,xro),e(Wn,WR),e(WR,$ro),e(Wn,kro),e(Wn,QR),e(QR,Sro),e(Wn,Rro),e(k,Pro),e(k,Qn),e(Qn,gae),e(gae,Bro),e(Qn,Iro),e(Qn,HR),e(HR,Nro),e(Qn,qro),e(Qn,UR),e(UR,jro),e(Qn,Dro),e(k,Gro),e(k,Hn),e(Hn,hae),e(hae,Oro),e(Hn,Vro),e(Hn,JR),e(JR,Xro),e(Hn,zro),e(Hn,YR),e(YR,Wro),e(Hn,Qro),e(k,Hro),e(k,Ig),e(Ig,pae),e(pae,Uro),e(Ig,Jro),e(Ig,KR),e(KR,Yro),e(Ig,Kro),e(k,Zro),e(k,Un),e(Un,_ae),e(_ae,eto),e(Un,oto),e(Un,ZR),e(ZR,rto),e(Un,tto),e(Un,eP),e(eP,ato),e(Un,nto),e(k,sto),e(k,Ng),e(Ng,uae),e(uae,lto),e(Ng,ito),e(Ng,oP),e(oP,dto),e(Ng,cto),e(k,fto),e(k,Jn),e(Jn,bae),e(bae,mto),e(Jn,gto),e(Jn,rP),e(rP,hto),e(Jn,pto),e(Jn,tP),e(tP,_to),e(Jn,uto),e(k,bto),e(k,Yn),e(Yn,vae),e(vae,vto),e(Yn,Fto),e(Yn,aP),e(aP,Tto),e(Yn,Mto),e(Yn,nP),e(nP,Eto),e(Yn,Cto),e(k,wto),e(k,Kn),e(Kn,Fae),e(Fae,Ato),e(Kn,yto),e(Kn,sP),e(sP,Lto),e(Kn,xto),e(Kn,lP),e(lP,$to),e(Kn,kto),e(k,Sto),e(k,qg),e(qg,Tae),e(Tae,Rto),e(qg,Pto),e(qg,iP),e(iP,Bto),e(qg,Ito),e(k,Nto),e(k,Zn),e(Zn,Mae),e(Mae,qto),e(Zn,jto),e(Zn,dP),e(dP,Dto),e(Zn,Gto),e(Zn,cP),e(cP,Oto),e(Zn,Vto),e(k,Xto),e(k,es),e(es,Eae),e(Eae,zto),e(es,Wto),e(es,fP),e(fP,Qto),e(es,Hto),e(es,mP),e(mP,Uto),e(es,Jto),e(k,Yto),e(k,jg),e(jg,Cae),e(Cae,Kto),e(jg,Zto),e(jg,gP),e(gP,eao),e(jg,oao),e(k,rao),e(k,os),e(os,wae),e(wae,tao),e(os,aao),e(os,hP),e(hP,nao),e(os,sao),e(os,pP),e(pP,lao),e(os,iao),e(k,dao),e(k,rs),e(rs,Aae),e(Aae,cao),e(rs,fao),e(rs,_P),e(_P,mao),e(rs,gao),e(rs,uP),e(uP,hao),e(rs,pao),e(k,_ao),e(k,ts),e(ts,yae),e(yae,uao),e(ts,bao),e(ts,bP),e(bP,vao),e(ts,Fao),e(ts,vP),e(vP,Tao),e(ts,Mao),e(k,Eao),e(k,as),e(as,Lae),e(Lae,Cao),e(as,wao),e(as,FP),e(FP,Aao),e(as,yao),e(as,TP),e(TP,Lao),e(as,xao),e(k,$ao),e(k,ns),e(ns,xae),e(xae,kao),e(ns,Sao),e(ns,MP),e(MP,Rao),e(ns,Pao),e(ns,EP),e(EP,Bao),e(ns,Iao),e(k,Nao),e(k,ss),e(ss,$ae),e($ae,qao),e(ss,jao),e(ss,CP),e(CP,Dao),e(ss,Gao),e(ss,wP),e(wP,Oao),e(ss,Vao),e(k,Xao),e(k,ls),e(ls,kae),e(kae,zao),e(ls,Wao),e(ls,AP),e(AP,Qao),e(ls,Hao),e(ls,yP),e(yP,Uao),e(ls,Jao),e(k,Yao),e(k,is),e(is,Sae),e(Sae,Kao),e(is,Zao),e(is,LP),e(LP,eno),e(is,ono),e(is,xP),e(xP,rno),e(is,tno),e(k,ano),e(k,Dg),e(Dg,Rae),e(Rae,nno),e(Dg,sno),e(Dg,$P),e($P,lno),e(Dg,ino),e(k,dno),e(k,ds),e(ds,Pae),e(Pae,cno),e(ds,fno),e(ds,kP),e(kP,mno),e(ds,gno),e(ds,SP),e(SP,hno),e(ds,pno),e(k,_no),e(k,Gg),e(Gg,Bae),e(Bae,uno),e(Gg,bno),e(Gg,RP),e(RP,vno),e(Gg,Fno),e(k,Tno),e(k,Og),e(Og,Iae),e(Iae,Mno),e(Og,Eno),e(Og,PP),e(PP,Cno),e(Og,wno),e(k,Ano),e(k,cs),e(cs,Nae),e(Nae,yno),e(cs,Lno),e(cs,BP),e(BP,xno),e(cs,$no),e(cs,IP),e(IP,kno),e(cs,Sno),e(k,Rno),e(k,fs),e(fs,qae),e(qae,Pno),e(fs,Bno),e(fs,NP),e(NP,Ino),e(fs,Nno),e(fs,qP),e(qP,qno),e(fs,jno),e(k,Dno),e(k,ms),e(ms,jae),e(jae,Gno),e(ms,Ono),e(ms,jP),e(jP,Vno),e(ms,Xno),e(ms,DP),e(DP,zno),e(ms,Wno),e(k,Qno),e(k,Vg),e(Vg,Dae),e(Dae,Hno),e(Vg,Uno),e(Vg,GP),e(GP,Jno),e(Vg,Yno),e(k,Kno),e(k,gs),e(gs,Gae),e(Gae,Zno),e(gs,eso),e(gs,OP),e(OP,oso),e(gs,rso),e(gs,VP),e(VP,tso),e(gs,aso),e(k,nso),e(k,hs),e(hs,Oae),e(Oae,sso),e(hs,lso),e(hs,XP),e(XP,iso),e(hs,dso),e(hs,zP),e(zP,cso),e(hs,fso),e(k,mso),e(k,ps),e(ps,Vae),e(Vae,gso),e(ps,hso),e(ps,WP),e(WP,pso),e(ps,_so),e(ps,QP),e(QP,uso),e(ps,bso),e(k,vso),e(k,_s),e(_s,Xae),e(Xae,Fso),e(_s,Tso),e(_s,HP),e(HP,Mso),e(_s,Eso),e(_s,UP),e(UP,Cso),e(_s,wso),e(k,Aso),e(k,us),e(us,zae),e(zae,yso),e(us,Lso),e(us,JP),e(JP,xso),e(us,$so),e(us,YP),e(YP,kso),e(us,Sso),e(k,Rso),e(k,Xg),e(Xg,Wae),e(Wae,Pso),e(Xg,Bso),e(Xg,KP),e(KP,Iso),e(Xg,Nso),e(k,qso),e(k,bs),e(bs,Qae),e(Qae,jso),e(bs,Dso),e(bs,ZP),e(ZP,Gso),e(bs,Oso),e(bs,eB),e(eB,Vso),e(bs,Xso),e(k,zso),e(k,zg),e(zg,Hae),e(Hae,Wso),e(zg,Qso),e(zg,oB),e(oB,Hso),e(zg,Uso),e(k,Jso),e(k,Wg),e(Wg,Uae),e(Uae,Yso),e(Wg,Kso),e(Wg,rB),e(rB,Zso),e(Wg,elo),e(k,olo),e(k,Qg),e(Qg,Jae),e(Jae,rlo),e(Qg,tlo),e(Qg,tB),e(tB,alo),e(Qg,nlo),e(k,slo),e(k,Hg),e(Hg,Yae),e(Yae,llo),e(Hg,ilo),e(Hg,aB),e(aB,dlo),e(Hg,clo),e(k,flo),e(k,vs),e(vs,Kae),e(Kae,mlo),e(vs,glo),e(vs,nB),e(nB,hlo),e(vs,plo),e(vs,sB),e(sB,_lo),e(vs,ulo),e(k,blo),e(k,Ug),e(Ug,Zae),e(Zae,vlo),e(Ug,Flo),e(Ug,lB),e(lB,Tlo),e(Ug,Mlo),e(k,Elo),e(k,Fs),e(Fs,ene),e(ene,Clo),e(Fs,wlo),e(Fs,iB),e(iB,Alo),e(Fs,ylo),e(Fs,dB),e(dB,Llo),e(Fs,xlo),e(k,$lo),e(k,Ts),e(Ts,one),e(one,klo),e(Ts,Slo),e(Ts,cB),e(cB,Rlo),e(Ts,Plo),e(Ts,fB),e(fB,Blo),e(Ts,Ilo),e(k,Nlo),e(k,Ms),e(Ms,rne),e(rne,qlo),e(Ms,jlo),e(Ms,mB),e(mB,Dlo),e(Ms,Glo),e(Ms,gB),e(gB,Olo),e(Ms,Vlo),e(k,Xlo),e(k,Es),e(Es,tne),e(tne,zlo),e(Es,Wlo),e(Es,hB),e(hB,Qlo),e(Es,Hlo),e(Es,pB),e(pB,Ulo),e(Es,Jlo),e(k,Ylo),e(k,Cs),e(Cs,ane),e(ane,Klo),e(Cs,Zlo),e(Cs,_B),e(_B,eio),e(Cs,oio),e(Cs,uB),e(uB,rio),e(Cs,tio),e(k,aio),e(k,ws),e(ws,nne),e(nne,nio),e(ws,sio),e(ws,bB),e(bB,lio),e(ws,iio),e(ws,vB),e(vB,dio),e(ws,cio),e(k,fio),e(k,Jg),e(Jg,sne),e(sne,mio),e(Jg,gio),e(Jg,FB),e(FB,hio),e(Jg,pio),e(k,_io),e(k,Yg),e(Yg,lne),e(lne,uio),e(Yg,bio),e(Yg,TB),e(TB,vio),e(Yg,Fio),e(k,Tio),e(k,As),e(As,ine),e(ine,Mio),e(As,Eio),e(As,MB),e(MB,Cio),e(As,wio),e(As,EB),e(EB,Aio),e(As,yio),e(k,Lio),e(k,ys),e(ys,dne),e(dne,xio),e(ys,$io),e(ys,CB),e(CB,kio),e(ys,Sio),e(ys,wB),e(wB,Rio),e(ys,Pio),e(k,Bio),e(k,Ls),e(Ls,cne),e(cne,Iio),e(Ls,Nio),e(Ls,AB),e(AB,qio),e(Ls,jio),e(Ls,yB),e(yB,Dio),e(Ls,Gio),e(k,Oio),e(k,Kg),e(Kg,fne),e(fne,Vio),e(Kg,Xio),e(Kg,LB),e(LB,zio),e(Kg,Wio),e(k,Qio),e(k,Zg),e(Zg,mne),e(mne,Hio),e(Zg,Uio),e(Zg,xB),e(xB,Jio),e(Zg,Yio),e(k,Kio),e(k,eh),e(eh,gne),e(gne,Zio),e(eh,edo),e(eh,$B),e($B,odo),e(eh,rdo),e(k,tdo),e(k,xs),e(xs,hne),e(hne,ado),e(xs,ndo),e(xs,kB),e(kB,sdo),e(xs,ldo),e(xs,SB),e(SB,ido),e(xs,ddo),e(k,cdo),e(k,oh),e(oh,pne),e(pne,fdo),e(oh,mdo),e(oh,RB),e(RB,gdo),e(oh,hdo),e(k,pdo),e(k,rh),e(rh,_ne),e(_ne,_do),e(rh,udo),e(rh,PB),e(PB,bdo),e(rh,vdo),e(k,Fdo),e(k,th),e(th,une),e(une,Tdo),e(th,Mdo),e(th,BB),e(BB,Edo),e(th,Cdo),e(k,wdo),e(k,$s),e($s,bne),e(bne,Ado),e($s,ydo),e($s,IB),e(IB,Ldo),e($s,xdo),e($s,NB),e(NB,$do),e($s,kdo),e(k,Sdo),e(k,ah),e(ah,vne),e(vne,Rdo),e(ah,Pdo),e(ah,qB),e(qB,Bdo),e(ah,Ido),e(k,Ndo),e(k,nh),e(nh,Fne),e(Fne,qdo),e(nh,jdo),e(nh,jB),e(jB,Ddo),e(nh,Gdo),e(k,Odo),e(k,ks),e(ks,Tne),e(Tne,Vdo),e(ks,Xdo),e(ks,DB),e(DB,zdo),e(ks,Wdo),e(ks,GB),e(GB,Qdo),e(ks,Hdo),e(k,Udo),e(k,Ss),e(Ss,Mne),e(Mne,Jdo),e(Ss,Ydo),e(Ss,OB),e(OB,Kdo),e(Ss,Zdo),e(Ss,VB),e(VB,eco),e(Ss,oco),e(k,rco),e(k,Rs),e(Rs,Ene),e(Ene,tco),e(Rs,aco),e(Rs,XB),e(XB,nco),e(Rs,sco),e(Rs,zB),e(zB,lco),e(Rs,ico),e(k,dco),e(k,Ps),e(Ps,Cne),e(Cne,cco),e(Ps,fco),e(Ps,WB),e(WB,mco),e(Ps,gco),e(Ps,QB),e(QB,hco),e(Ps,pco),e(Cr,_co),M(sh,Cr,null),e(wo,uco),e(wo,lh),M(Hw,lh,null),e(lh,bco),e(lh,wne),e(wne,vco),b(f,Dqe,u),b(f,Ei,u),e(Ei,ih),e(ih,Ane),M(Uw,Ane,null),e(Ei,Fco),e(Ei,yne),e(yne,Tco),b(f,Gqe,u),b(f,Ao,u),M(Jw,Ao,null),e(Ao,Mco),e(Ao,Yw),e(Yw,Eco),e(Yw,HB),e(HB,Cco),e(Yw,wco),e(Ao,Aco),e(Ao,Kw),e(Kw,yco),e(Kw,Lne),e(Lne,Lco),e(Kw,xco),e(Ao,$co),e(Ao,He),M(Zw,He,null),e(He,kco),e(He,xne),e(xne,Sco),e(He,Rco),e(He,ya),e(ya,Pco),e(ya,$ne),e($ne,Bco),e(ya,Ico),e(ya,kne),e(kne,Nco),e(ya,qco),e(ya,Sne),e(Sne,jco),e(ya,Dco),e(He,Gco),e(He,Y),e(Y,dh),e(dh,Rne),e(Rne,Oco),e(dh,Vco),e(dh,UB),e(UB,Xco),e(dh,zco),e(Y,Wco),e(Y,ch),e(ch,Pne),e(Pne,Qco),e(ch,Hco),e(ch,JB),e(JB,Uco),e(ch,Jco),e(Y,Yco),e(Y,fh),e(fh,Bne),e(Bne,Kco),e(fh,Zco),e(fh,YB),e(YB,efo),e(fh,ofo),e(Y,rfo),e(Y,mh),e(mh,Ine),e(Ine,tfo),e(mh,afo),e(mh,KB),e(KB,nfo),e(mh,sfo),e(Y,lfo),e(Y,gh),e(gh,Nne),e(Nne,ifo),e(gh,dfo),e(gh,ZB),e(ZB,cfo),e(gh,ffo),e(Y,mfo),e(Y,hh),e(hh,qne),e(qne,gfo),e(hh,hfo),e(hh,eI),e(eI,pfo),e(hh,_fo),e(Y,ufo),e(Y,ph),e(ph,jne),e(jne,bfo),e(ph,vfo),e(ph,oI),e(oI,Ffo),e(ph,Tfo),e(Y,Mfo),e(Y,_h),e(_h,Dne),e(Dne,Efo),e(_h,Cfo),e(_h,rI),e(rI,wfo),e(_h,Afo),e(Y,yfo),e(Y,uh),e(uh,Gne),e(Gne,Lfo),e(uh,xfo),e(uh,tI),e(tI,$fo),e(uh,kfo),e(Y,Sfo),e(Y,bh),e(bh,One),e(One,Rfo),e(bh,Pfo),e(bh,aI),e(aI,Bfo),e(bh,Ifo),e(Y,Nfo),e(Y,vh),e(vh,Vne),e(Vne,qfo),e(vh,jfo),e(vh,nI),e(nI,Dfo),e(vh,Gfo),e(Y,Ofo),e(Y,Fh),e(Fh,Xne),e(Xne,Vfo),e(Fh,Xfo),e(Fh,sI),e(sI,zfo),e(Fh,Wfo),e(Y,Qfo),e(Y,Th),e(Th,zne),e(zne,Hfo),e(Th,Ufo),e(Th,lI),e(lI,Jfo),e(Th,Yfo),e(Y,Kfo),e(Y,Mh),e(Mh,Wne),e(Wne,Zfo),e(Mh,emo),e(Mh,iI),e(iI,omo),e(Mh,rmo),e(Y,tmo),e(Y,Eh),e(Eh,Qne),e(Qne,amo),e(Eh,nmo),e(Eh,dI),e(dI,smo),e(Eh,lmo),e(Y,imo),e(Y,Ch),e(Ch,Hne),e(Hne,dmo),e(Ch,cmo),e(Ch,cI),e(cI,fmo),e(Ch,mmo),e(Y,gmo),e(Y,wh),e(wh,Une),e(Une,hmo),e(wh,pmo),e(wh,fI),e(fI,_mo),e(wh,umo),e(Y,bmo),e(Y,Ah),e(Ah,Jne),e(Jne,vmo),e(Ah,Fmo),e(Ah,mI),e(mI,Tmo),e(Ah,Mmo),e(Y,Emo),e(Y,yh),e(yh,Yne),e(Yne,Cmo),e(yh,wmo),e(yh,gI),e(gI,Amo),e(yh,ymo),e(Y,Lmo),e(Y,Lh),e(Lh,Kne),e(Kne,xmo),e(Lh,$mo),e(Lh,hI),e(hI,kmo),e(Lh,Smo),e(Y,Rmo),e(Y,xh),e(xh,Zne),e(Zne,Pmo),e(xh,Bmo),e(xh,pI),e(pI,Imo),e(xh,Nmo),e(Y,qmo),e(Y,$h),e($h,ese),e(ese,jmo),e($h,Dmo),e($h,_I),e(_I,Gmo),e($h,Omo),e(Y,Vmo),e(Y,kh),e(kh,ose),e(ose,Xmo),e(kh,zmo),e(kh,uI),e(uI,Wmo),e(kh,Qmo),e(Y,Hmo),e(Y,Sh),e(Sh,rse),e(rse,Umo),e(Sh,Jmo),e(Sh,bI),e(bI,Ymo),e(Sh,Kmo),e(Y,Zmo),e(Y,Rh),e(Rh,tse),e(tse,ego),e(Rh,ogo),e(Rh,vI),e(vI,rgo),e(Rh,tgo),e(Y,ago),e(Y,Ph),e(Ph,ase),e(ase,ngo),e(Ph,sgo),e(Ph,FI),e(FI,lgo),e(Ph,igo),e(Y,dgo),e(Y,Bh),e(Bh,nse),e(nse,cgo),e(Bh,fgo),e(Bh,TI),e(TI,mgo),e(Bh,ggo),e(Y,hgo),e(Y,Ih),e(Ih,sse),e(sse,pgo),e(Ih,_go),e(Ih,MI),e(MI,ugo),e(Ih,bgo),e(Y,vgo),e(Y,Nh),e(Nh,lse),e(lse,Fgo),e(Nh,Tgo),e(Nh,EI),e(EI,Mgo),e(Nh,Ego),e(He,Cgo),M(qh,He,null),e(He,wgo),M(jh,He,null),e(Ao,Ago),e(Ao,Dh),M(eA,Dh,null),e(Dh,ygo),e(Dh,ise),e(ise,Lgo),b(f,Oqe,u),b(f,Ci,u),e(Ci,Gh),e(Gh,dse),M(oA,dse,null),e(Ci,xgo),e(Ci,cse),e(cse,$go),b(f,Vqe,u),b(f,yo,u),M(rA,yo,null),e(yo,kgo),e(yo,tA),e(tA,Sgo),e(tA,CI),e(CI,Rgo),e(tA,Pgo),e(yo,Bgo),e(yo,aA),e(aA,Igo),e(aA,fse),e(fse,Ngo),e(aA,qgo),e(yo,jgo),e(yo,Ue),M(nA,Ue,null),e(Ue,Dgo),e(Ue,mse),e(mse,Ggo),e(Ue,Ogo),e(Ue,wi),e(wi,Vgo),e(wi,gse),e(gse,Xgo),e(wi,zgo),e(wi,hse),e(hse,Wgo),e(wi,Qgo),e(Ue,Hgo),e(Ue,he),e(he,Oh),e(Oh,pse),e(pse,Ugo),e(Oh,Jgo),e(Oh,wI),e(wI,Ygo),e(Oh,Kgo),e(he,Zgo),e(he,Vh),e(Vh,_se),e(_se,eho),e(Vh,oho),e(Vh,use),e(use,rho),e(Vh,tho),e(he,aho),e(he,Xh),e(Xh,bse),e(bse,nho),e(Xh,sho),e(Xh,AI),e(AI,lho),e(Xh,iho),e(he,dho),e(he,zh),e(zh,vse),e(vse,cho),e(zh,fho),e(zh,yI),e(yI,mho),e(zh,gho),e(he,hho),e(he,Wh),e(Wh,Fse),e(Fse,pho),e(Wh,_ho),e(Wh,LI),e(LI,uho),e(Wh,bho),e(he,vho),e(he,Qh),e(Qh,Tse),e(Tse,Fho),e(Qh,Tho),e(Qh,xI),e(xI,Mho),e(Qh,Eho),e(he,Cho),e(he,Hh),e(Hh,Mse),e(Mse,who),e(Hh,Aho),e(Hh,$I),e($I,yho),e(Hh,Lho),e(he,xho),e(he,Uh),e(Uh,Ese),e(Ese,$ho),e(Uh,kho),e(Uh,kI),e(kI,Sho),e(Uh,Rho),e(he,Pho),e(he,Jh),e(Jh,Cse),e(Cse,Bho),e(Jh,Iho),e(Jh,SI),e(SI,Nho),e(Jh,qho),e(he,jho),e(he,Yh),e(Yh,wse),e(wse,Dho),e(Yh,Gho),e(Yh,RI),e(RI,Oho),e(Yh,Vho),e(he,Xho),e(he,Kh),e(Kh,Ase),e(Ase,zho),e(Kh,Who),e(Kh,PI),e(PI,Qho),e(Kh,Hho),e(he,Uho),e(he,Zh),e(Zh,yse),e(yse,Jho),e(Zh,Yho),e(Zh,BI),e(BI,Kho),e(Zh,Zho),e(he,epo),e(he,ep),e(ep,Lse),e(Lse,opo),e(ep,rpo),e(ep,II),e(II,tpo),e(ep,apo),e(he,npo),e(he,op),e(op,xse),e(xse,spo),e(op,lpo),e(op,NI),e(NI,ipo),e(op,dpo),e(he,cpo),e(he,rp),e(rp,$se),e($se,fpo),e(rp,mpo),e(rp,qI),e(qI,gpo),e(rp,hpo),e(he,ppo),e(he,tp),e(tp,kse),e(kse,_po),e(tp,upo),e(tp,jI),e(jI,bpo),e(tp,vpo),e(he,Fpo),e(he,ap),e(ap,Sse),e(Sse,Tpo),e(ap,Mpo),e(ap,DI),e(DI,Epo),e(ap,Cpo),e(Ue,wpo),M(np,Ue,null),e(Ue,Apo),M(sp,Ue,null),e(yo,ypo),e(yo,lp),M(sA,lp,null),e(lp,Lpo),e(lp,Rse),e(Rse,xpo),b(f,Xqe,u),b(f,Ai,u),e(Ai,ip),e(ip,Pse),M(lA,Pse,null),e(Ai,$po),e(Ai,Bse),e(Bse,kpo),b(f,zqe,u),b(f,Lo,u),M(iA,Lo,null),e(Lo,Spo),e(Lo,yi),e(yi,Rpo),e(yi,GI),e(GI,Ppo),e(yi,Bpo),e(yi,OI),e(OI,Ipo),e(yi,Npo),e(Lo,qpo),e(Lo,dA),e(dA,jpo),e(dA,Ise),e(Ise,Dpo),e(dA,Gpo),e(Lo,Opo),e(Lo,tt),M(cA,tt,null),e(tt,Vpo),e(tt,Nse),e(Nse,Xpo),e(tt,zpo),e(tt,Li),e(Li,Wpo),e(Li,qse),e(qse,Qpo),e(Li,Hpo),e(Li,VI),e(VI,Upo),e(Li,Jpo),e(tt,Ypo),M(dp,tt,null),e(Lo,Kpo),e(Lo,Je),M(fA,Je,null),e(Je,Zpo),e(Je,jse),e(jse,e_o),e(Je,o_o),e(Je,La),e(La,r_o),e(La,Dse),e(Dse,t_o),e(La,a_o),e(La,Gse),e(Gse,n_o),e(La,s_o),e(La,Ose),e(Ose,l_o),e(La,i_o),e(Je,d_o),e(Je,x),e(x,cp),e(cp,Vse),e(Vse,c_o),e(cp,f_o),e(cp,XI),e(XI,m_o),e(cp,g_o),e(x,h_o),e(x,fp),e(fp,Xse),e(Xse,p_o),e(fp,__o),e(fp,zI),e(zI,u_o),e(fp,b_o),e(x,v_o),e(x,mp),e(mp,zse),e(zse,F_o),e(mp,T_o),e(mp,WI),e(WI,M_o),e(mp,E_o),e(x,C_o),e(x,gp),e(gp,Wse),e(Wse,w_o),e(gp,A_o),e(gp,QI),e(QI,y_o),e(gp,L_o),e(x,x_o),e(x,hp),e(hp,Qse),e(Qse,$_o),e(hp,k_o),e(hp,HI),e(HI,S_o),e(hp,R_o),e(x,P_o),e(x,pp),e(pp,Hse),e(Hse,B_o),e(pp,I_o),e(pp,UI),e(UI,N_o),e(pp,q_o),e(x,j_o),e(x,_p),e(_p,Use),e(Use,D_o),e(_p,G_o),e(_p,JI),e(JI,O_o),e(_p,V_o),e(x,X_o),e(x,up),e(up,Jse),e(Jse,z_o),e(up,W_o),e(up,YI),e(YI,Q_o),e(up,H_o),e(x,U_o),e(x,bp),e(bp,Yse),e(Yse,J_o),e(bp,Y_o),e(bp,KI),e(KI,K_o),e(bp,Z_o),e(x,euo),e(x,vp),e(vp,Kse),e(Kse,ouo),e(vp,ruo),e(vp,ZI),e(ZI,tuo),e(vp,auo),e(x,nuo),e(x,Fp),e(Fp,Zse),e(Zse,suo),e(Fp,luo),e(Fp,eN),e(eN,iuo),e(Fp,duo),e(x,cuo),e(x,Tp),e(Tp,ele),e(ele,fuo),e(Tp,muo),e(Tp,oN),e(oN,guo),e(Tp,huo),e(x,puo),e(x,Mp),e(Mp,ole),e(ole,_uo),e(Mp,uuo),e(Mp,rN),e(rN,buo),e(Mp,vuo),e(x,Fuo),e(x,Ep),e(Ep,rle),e(rle,Tuo),e(Ep,Muo),e(Ep,tN),e(tN,Euo),e(Ep,Cuo),e(x,wuo),e(x,Cp),e(Cp,tle),e(tle,Auo),e(Cp,yuo),e(Cp,aN),e(aN,Luo),e(Cp,xuo),e(x,$uo),e(x,wp),e(wp,ale),e(ale,kuo),e(wp,Suo),e(wp,nN),e(nN,Ruo),e(wp,Puo),e(x,Buo),e(x,Ap),e(Ap,nle),e(nle,Iuo),e(Ap,Nuo),e(Ap,sN),e(sN,quo),e(Ap,juo),e(x,Duo),e(x,yp),e(yp,sle),e(sle,Guo),e(yp,Ouo),e(yp,lN),e(lN,Vuo),e(yp,Xuo),e(x,zuo),e(x,Lp),e(Lp,lle),e(lle,Wuo),e(Lp,Quo),e(Lp,iN),e(iN,Huo),e(Lp,Uuo),e(x,Juo),e(x,xp),e(xp,ile),e(ile,Yuo),e(xp,Kuo),e(xp,dN),e(dN,Zuo),e(xp,e2o),e(x,o2o),e(x,$p),e($p,dle),e(dle,r2o),e($p,t2o),e($p,cN),e(cN,a2o),e($p,n2o),e(x,s2o),e(x,kp),e(kp,cle),e(cle,l2o),e(kp,i2o),e(kp,fN),e(fN,d2o),e(kp,c2o),e(x,f2o),e(x,Sp),e(Sp,fle),e(fle,m2o),e(Sp,g2o),e(Sp,mN),e(mN,h2o),e(Sp,p2o),e(x,_2o),e(x,Rp),e(Rp,mle),e(mle,u2o),e(Rp,b2o),e(Rp,gN),e(gN,v2o),e(Rp,F2o),e(x,T2o),e(x,Pp),e(Pp,gle),e(gle,M2o),e(Pp,E2o),e(Pp,hN),e(hN,C2o),e(Pp,w2o),e(x,A2o),e(x,Bp),e(Bp,hle),e(hle,y2o),e(Bp,L2o),e(Bp,pN),e(pN,x2o),e(Bp,$2o),e(x,k2o),e(x,Ip),e(Ip,ple),e(ple,S2o),e(Ip,R2o),e(Ip,_N),e(_N,P2o),e(Ip,B2o),e(x,I2o),e(x,Np),e(Np,_le),e(_le,N2o),e(Np,q2o),e(Np,uN),e(uN,j2o),e(Np,D2o),e(x,G2o),e(x,qp),e(qp,ule),e(ule,O2o),e(qp,V2o),e(qp,bN),e(bN,X2o),e(qp,z2o),e(x,W2o),e(x,jp),e(jp,ble),e(ble,Q2o),e(jp,H2o),e(jp,vN),e(vN,U2o),e(jp,J2o),e(x,Y2o),e(x,Dp),e(Dp,vle),e(vle,K2o),e(Dp,Z2o),e(Dp,FN),e(FN,e1o),e(Dp,o1o),e(x,r1o),e(x,Gp),e(Gp,Fle),e(Fle,t1o),e(Gp,a1o),e(Gp,TN),e(TN,n1o),e(Gp,s1o),e(x,l1o),e(x,Bs),e(Bs,Tle),e(Tle,i1o),e(Bs,d1o),e(Bs,MN),e(MN,c1o),e(Bs,f1o),e(Bs,EN),e(EN,m1o),e(Bs,g1o),e(x,h1o),e(x,Op),e(Op,Mle),e(Mle,p1o),e(Op,_1o),e(Op,CN),e(CN,u1o),e(Op,b1o),e(x,v1o),e(x,Vp),e(Vp,Ele),e(Ele,F1o),e(Vp,T1o),e(Vp,wN),e(wN,M1o),e(Vp,E1o),e(x,C1o),e(x,Xp),e(Xp,Cle),e(Cle,w1o),e(Xp,A1o),e(Xp,AN),e(AN,y1o),e(Xp,L1o),e(x,x1o),e(x,zp),e(zp,wle),e(wle,$1o),e(zp,k1o),e(zp,yN),e(yN,S1o),e(zp,R1o),e(x,P1o),e(x,Wp),e(Wp,Ale),e(Ale,B1o),e(Wp,I1o),e(Wp,LN),e(LN,N1o),e(Wp,q1o),e(x,j1o),e(x,Qp),e(Qp,yle),e(yle,D1o),e(Qp,G1o),e(Qp,xN),e(xN,O1o),e(Qp,V1o),e(x,X1o),e(x,Hp),e(Hp,Lle),e(Lle,z1o),e(Hp,W1o),e(Hp,$N),e($N,Q1o),e(Hp,H1o),e(x,U1o),e(x,Up),e(Up,xle),e(xle,J1o),e(Up,Y1o),e(Up,kN),e(kN,K1o),e(Up,Z1o),e(x,ebo),e(x,Jp),e(Jp,$le),e($le,obo),e(Jp,rbo),e(Jp,SN),e(SN,tbo),e(Jp,abo),e(x,nbo),e(x,Yp),e(Yp,kle),e(kle,sbo),e(Yp,lbo),e(Yp,RN),e(RN,ibo),e(Yp,dbo),e(x,cbo),e(x,Kp),e(Kp,Sle),e(Sle,fbo),e(Kp,mbo),e(Kp,PN),e(PN,gbo),e(Kp,hbo),e(x,pbo),e(x,Zp),e(Zp,Rle),e(Rle,_bo),e(Zp,ubo),e(Zp,BN),e(BN,bbo),e(Zp,vbo),e(x,Fbo),e(x,e_),e(e_,Ple),e(Ple,Tbo),e(e_,Mbo),e(e_,IN),e(IN,Ebo),e(e_,Cbo),e(x,wbo),e(x,o_),e(o_,Ble),e(Ble,Abo),e(o_,ybo),e(o_,NN),e(NN,Lbo),e(o_,xbo),e(x,$bo),e(x,r_),e(r_,Ile),e(Ile,kbo),e(r_,Sbo),e(r_,qN),e(qN,Rbo),e(r_,Pbo),e(x,Bbo),e(x,t_),e(t_,Nle),e(Nle,Ibo),e(t_,Nbo),e(t_,jN),e(jN,qbo),e(t_,jbo),e(x,Dbo),e(x,a_),e(a_,qle),e(qle,Gbo),e(a_,Obo),e(a_,DN),e(DN,Vbo),e(a_,Xbo),e(x,zbo),e(x,n_),e(n_,jle),e(jle,Wbo),e(n_,Qbo),e(n_,GN),e(GN,Hbo),e(n_,Ubo),e(x,Jbo),e(x,s_),e(s_,Dle),e(Dle,Ybo),e(s_,Kbo),e(s_,ON),e(ON,Zbo),e(s_,evo),e(x,ovo),e(x,l_),e(l_,Gle),e(Gle,rvo),e(l_,tvo),e(l_,VN),e(VN,avo),e(l_,nvo),e(x,svo),e(x,i_),e(i_,Ole),e(Ole,lvo),e(i_,ivo),e(i_,XN),e(XN,dvo),e(i_,cvo),e(x,fvo),e(x,d_),e(d_,Vle),e(Vle,mvo),e(d_,gvo),e(d_,zN),e(zN,hvo),e(d_,pvo),e(x,_vo),e(x,c_),e(c_,Xle),e(Xle,uvo),e(c_,bvo),e(c_,WN),e(WN,vvo),e(c_,Fvo),e(x,Tvo),e(x,f_),e(f_,zle),e(zle,Mvo),e(f_,Evo),e(f_,QN),e(QN,Cvo),e(f_,wvo),e(x,Avo),e(x,m_),e(m_,Wle),e(Wle,yvo),e(m_,Lvo),e(m_,HN),e(HN,xvo),e(m_,$vo),e(x,kvo),e(x,g_),e(g_,Qle),e(Qle,Svo),e(g_,Rvo),e(g_,UN),e(UN,Pvo),e(g_,Bvo),e(x,Ivo),e(x,h_),e(h_,Hle),e(Hle,Nvo),e(h_,qvo),e(h_,JN),e(JN,jvo),e(h_,Dvo),e(x,Gvo),e(x,p_),e(p_,Ule),e(Ule,Ovo),e(p_,Vvo),e(p_,YN),e(YN,Xvo),e(p_,zvo),e(x,Wvo),e(x,__),e(__,Jle),e(Jle,Qvo),e(__,Hvo),e(__,KN),e(KN,Uvo),e(__,Jvo),e(x,Yvo),e(x,u_),e(u_,Yle),e(Yle,Kvo),e(u_,Zvo),e(u_,ZN),e(ZN,eFo),e(u_,oFo),e(x,rFo),e(x,b_),e(b_,Kle),e(Kle,tFo),e(b_,aFo),e(b_,eq),e(eq,nFo),e(b_,sFo),e(x,lFo),e(x,v_),e(v_,Zle),e(Zle,iFo),e(v_,dFo),e(v_,oq),e(oq,cFo),e(v_,fFo),e(x,mFo),e(x,F_),e(F_,eie),e(eie,gFo),e(F_,hFo),e(F_,rq),e(rq,pFo),e(F_,_Fo),e(x,uFo),e(x,T_),e(T_,oie),e(oie,bFo),e(T_,vFo),e(T_,tq),e(tq,FFo),e(T_,TFo),e(x,MFo),e(x,M_),e(M_,rie),e(rie,EFo),e(M_,CFo),e(M_,aq),e(aq,wFo),e(M_,AFo),e(x,yFo),e(x,E_),e(E_,tie),e(tie,LFo),e(E_,xFo),e(E_,nq),e(nq,$Fo),e(E_,kFo),e(x,SFo),e(x,C_),e(C_,aie),e(aie,RFo),e(C_,PFo),e(C_,sq),e(sq,BFo),e(C_,IFo),e(x,NFo),e(x,w_),e(w_,nie),e(nie,qFo),e(w_,jFo),e(w_,lq),e(lq,DFo),e(w_,GFo),e(x,OFo),e(x,A_),e(A_,sie),e(sie,VFo),e(A_,XFo),e(A_,iq),e(iq,zFo),e(A_,WFo),e(x,QFo),e(x,y_),e(y_,lie),e(lie,HFo),e(y_,UFo),e(y_,dq),e(dq,JFo),e(y_,YFo),e(x,KFo),e(x,L_),e(L_,iie),e(iie,ZFo),e(L_,e6o),e(L_,cq),e(cq,o6o),e(L_,r6o),e(x,t6o),e(x,x_),e(x_,die),e(die,a6o),e(x_,n6o),e(x_,fq),e(fq,s6o),e(x_,l6o),e(x,i6o),e(x,$_),e($_,cie),e(cie,d6o),e($_,c6o),e($_,mq),e(mq,f6o),e($_,m6o),e(x,g6o),e(x,k_),e(k_,fie),e(fie,h6o),e(k_,p6o),e(k_,gq),e(gq,_6o),e(k_,u6o),e(x,b6o),e(x,S_),e(S_,mie),e(mie,v6o),e(S_,F6o),e(S_,hq),e(hq,T6o),e(S_,M6o),e(x,E6o),e(x,R_),e(R_,gie),e(gie,C6o),e(R_,w6o),e(R_,pq),e(pq,A6o),e(R_,y6o),e(x,L6o),e(x,P_),e(P_,hie),e(hie,x6o),e(P_,$6o),e(P_,_q),e(_q,k6o),e(P_,S6o),e(x,R6o),e(x,B_),e(B_,pie),e(pie,P6o),e(B_,B6o),e(B_,uq),e(uq,I6o),e(B_,N6o),e(x,q6o),e(x,I_),e(I_,_ie),e(_ie,j6o),e(I_,D6o),e(I_,bq),e(bq,G6o),e(I_,O6o),e(x,V6o),e(x,N_),e(N_,uie),e(uie,X6o),e(N_,z6o),e(N_,vq),e(vq,W6o),e(N_,Q6o),e(x,H6o),e(x,q_),e(q_,bie),e(bie,U6o),e(q_,J6o),e(q_,Fq),e(Fq,Y6o),e(q_,K6o),e(x,Z6o),e(x,j_),e(j_,vie),e(vie,eTo),e(j_,oTo),e(j_,Tq),e(Tq,rTo),e(j_,tTo),e(x,aTo),e(x,D_),e(D_,Fie),e(Fie,nTo),e(D_,sTo),e(D_,Mq),e(Mq,lTo),e(D_,iTo),e(x,dTo),e(x,G_),e(G_,Tie),e(Tie,cTo),e(G_,fTo),e(G_,Eq),e(Eq,mTo),e(G_,gTo),e(x,hTo),e(x,O_),e(O_,Mie),e(Mie,pTo),e(O_,_To),e(O_,Cq),e(Cq,uTo),e(O_,bTo),e(x,vTo),e(x,V_),e(V_,Eie),e(Eie,FTo),e(V_,TTo),e(V_,wq),e(wq,MTo),e(V_,ETo),e(x,CTo),e(x,X_),e(X_,Cie),e(Cie,wTo),e(X_,ATo),e(X_,Aq),e(Aq,yTo),e(X_,LTo),e(x,xTo),e(x,z_),e(z_,wie),e(wie,$To),e(z_,kTo),e(z_,yq),e(yq,STo),e(z_,RTo),e(x,PTo),e(x,W_),e(W_,Aie),e(Aie,BTo),e(W_,ITo),e(W_,Lq),e(Lq,NTo),e(W_,qTo),e(x,jTo),e(x,Q_),e(Q_,yie),e(yie,DTo),e(Q_,GTo),e(Q_,xq),e(xq,OTo),e(Q_,VTo),e(x,XTo),e(x,H_),e(H_,Lie),e(Lie,zTo),e(H_,WTo),e(H_,$q),e($q,QTo),e(H_,HTo),e(x,UTo),e(x,U_),e(U_,xie),e(xie,JTo),e(U_,YTo),e(U_,kq),e(kq,KTo),e(U_,ZTo),e(x,e7o),e(x,J_),e(J_,$ie),e($ie,o7o),e(J_,r7o),e(J_,Sq),e(Sq,t7o),e(J_,a7o),e(x,n7o),e(x,Y_),e(Y_,kie),e(kie,s7o),e(Y_,l7o),e(Y_,Rq),e(Rq,i7o),e(Y_,d7o),e(x,c7o),e(x,K_),e(K_,Sie),e(Sie,f7o),e(K_,m7o),e(K_,Pq),e(Pq,g7o),e(K_,h7o),e(x,p7o),e(x,Z_),e(Z_,Rie),e(Rie,_7o),e(Z_,u7o),e(Z_,Bq),e(Bq,b7o),e(Z_,v7o),e(x,F7o),e(x,eu),e(eu,Pie),e(Pie,T7o),e(eu,M7o),e(eu,Iq),e(Iq,E7o),e(eu,C7o),e(x,w7o),e(x,ou),e(ou,Bie),e(Bie,A7o),e(ou,y7o),e(ou,Nq),e(Nq,L7o),e(ou,x7o),e(x,$7o),e(x,ru),e(ru,Iie),e(Iie,k7o),e(ru,S7o),e(ru,qq),e(qq,R7o),e(ru,P7o),e(x,B7o),e(x,tu),e(tu,Nie),e(Nie,I7o),e(tu,N7o),e(tu,jq),e(jq,q7o),e(tu,j7o),e(Je,D7o),e(Je,au),e(au,G7o),e(au,qie),e(qie,O7o),e(au,V7o),e(au,jie),e(jie,X7o),e(Je,z7o),M(nu,Je,null),b(f,Wqe,u),b(f,xi,u),e(xi,su),e(su,Die),M(mA,Die,null),e(xi,W7o),e(xi,Gie),e(Gie,Q7o),b(f,Qqe,u),b(f,xo,u),M(gA,xo,null),e(xo,H7o),e(xo,$i),e($i,U7o),e($i,Dq),e(Dq,J7o),e($i,Y7o),e($i,Gq),e(Gq,K7o),e($i,Z7o),e(xo,e9o),e(xo,hA),e(hA,o9o),e(hA,Oie),e(Oie,r9o),e(hA,t9o),e(xo,a9o),e(xo,at),M(pA,at,null),e(at,n9o),e(at,Vie),e(Vie,s9o),e(at,l9o),e(at,ki),e(ki,i9o),e(ki,Xie),e(Xie,d9o),e(ki,c9o),e(ki,Oq),e(Oq,f9o),e(ki,m9o),e(at,g9o),M(lu,at,null),e(xo,h9o),e(xo,Ye),M(_A,Ye,null),e(Ye,p9o),e(Ye,zie),e(zie,_9o),e(Ye,u9o),e(Ye,xa),e(xa,b9o),e(xa,Wie),e(Wie,v9o),e(xa,F9o),e(xa,Qie),e(Qie,T9o),e(xa,M9o),e(xa,Hie),e(Hie,E9o),e(xa,C9o),e(Ye,w9o),e(Ye,G),e(G,iu),e(iu,Uie),e(Uie,A9o),e(iu,y9o),e(iu,Vq),e(Vq,L9o),e(iu,x9o),e(G,$9o),e(G,du),e(du,Jie),e(Jie,k9o),e(du,S9o),e(du,Xq),e(Xq,R9o),e(du,P9o),e(G,B9o),e(G,cu),e(cu,Yie),e(Yie,I9o),e(cu,N9o),e(cu,zq),e(zq,q9o),e(cu,j9o),e(G,D9o),e(G,fu),e(fu,Kie),e(Kie,G9o),e(fu,O9o),e(fu,Wq),e(Wq,V9o),e(fu,X9o),e(G,z9o),e(G,mu),e(mu,Zie),e(Zie,W9o),e(mu,Q9o),e(mu,Qq),e(Qq,H9o),e(mu,U9o),e(G,J9o),e(G,gu),e(gu,ede),e(ede,Y9o),e(gu,K9o),e(gu,Hq),e(Hq,Z9o),e(gu,eMo),e(G,oMo),e(G,hu),e(hu,ode),e(ode,rMo),e(hu,tMo),e(hu,Uq),e(Uq,aMo),e(hu,nMo),e(G,sMo),e(G,pu),e(pu,rde),e(rde,lMo),e(pu,iMo),e(pu,Jq),e(Jq,dMo),e(pu,cMo),e(G,fMo),e(G,_u),e(_u,tde),e(tde,mMo),e(_u,gMo),e(_u,Yq),e(Yq,hMo),e(_u,pMo),e(G,_Mo),e(G,uu),e(uu,ade),e(ade,uMo),e(uu,bMo),e(uu,Kq),e(Kq,vMo),e(uu,FMo),e(G,TMo),e(G,bu),e(bu,nde),e(nde,MMo),e(bu,EMo),e(bu,Zq),e(Zq,CMo),e(bu,wMo),e(G,AMo),e(G,vu),e(vu,sde),e(sde,yMo),e(vu,LMo),e(vu,ej),e(ej,xMo),e(vu,$Mo),e(G,kMo),e(G,Fu),e(Fu,lde),e(lde,SMo),e(Fu,RMo),e(Fu,oj),e(oj,PMo),e(Fu,BMo),e(G,IMo),e(G,Tu),e(Tu,ide),e(ide,NMo),e(Tu,qMo),e(Tu,rj),e(rj,jMo),e(Tu,DMo),e(G,GMo),e(G,Mu),e(Mu,dde),e(dde,OMo),e(Mu,VMo),e(Mu,tj),e(tj,XMo),e(Mu,zMo),e(G,WMo),e(G,Eu),e(Eu,cde),e(cde,QMo),e(Eu,HMo),e(Eu,aj),e(aj,UMo),e(Eu,JMo),e(G,YMo),e(G,Cu),e(Cu,fde),e(fde,KMo),e(Cu,ZMo),e(Cu,nj),e(nj,e4o),e(Cu,o4o),e(G,r4o),e(G,wu),e(wu,mde),e(mde,t4o),e(wu,a4o),e(wu,sj),e(sj,n4o),e(wu,s4o),e(G,l4o),e(G,Au),e(Au,gde),e(gde,i4o),e(Au,d4o),e(Au,lj),e(lj,c4o),e(Au,f4o),e(G,m4o),e(G,yu),e(yu,hde),e(hde,g4o),e(yu,h4o),e(yu,ij),e(ij,p4o),e(yu,_4o),e(G,u4o),e(G,Lu),e(Lu,pde),e(pde,b4o),e(Lu,v4o),e(Lu,dj),e(dj,F4o),e(Lu,T4o),e(G,M4o),e(G,xu),e(xu,_de),e(_de,E4o),e(xu,C4o),e(xu,cj),e(cj,w4o),e(xu,A4o),e(G,y4o),e(G,$u),e($u,ude),e(ude,L4o),e($u,x4o),e($u,fj),e(fj,$4o),e($u,k4o),e(G,S4o),e(G,ku),e(ku,bde),e(bde,R4o),e(ku,P4o),e(ku,mj),e(mj,B4o),e(ku,I4o),e(G,N4o),e(G,Su),e(Su,vde),e(vde,q4o),e(Su,j4o),e(Su,gj),e(gj,D4o),e(Su,G4o),e(G,O4o),e(G,Ru),e(Ru,Fde),e(Fde,V4o),e(Ru,X4o),e(Ru,hj),e(hj,z4o),e(Ru,W4o),e(G,Q4o),e(G,Pu),e(Pu,Tde),e(Tde,H4o),e(Pu,U4o),e(Pu,pj),e(pj,J4o),e(Pu,Y4o),e(G,K4o),e(G,Bu),e(Bu,Mde),e(Mde,Z4o),e(Bu,eEo),e(Bu,_j),e(_j,oEo),e(Bu,rEo),e(G,tEo),e(G,Iu),e(Iu,Ede),e(Ede,aEo),e(Iu,nEo),e(Iu,uj),e(uj,sEo),e(Iu,lEo),e(G,iEo),e(G,Nu),e(Nu,Cde),e(Cde,dEo),e(Nu,cEo),e(Nu,bj),e(bj,fEo),e(Nu,mEo),e(G,gEo),e(G,qu),e(qu,wde),e(wde,hEo),e(qu,pEo),e(qu,vj),e(vj,_Eo),e(qu,uEo),e(G,bEo),e(G,ju),e(ju,Ade),e(Ade,vEo),e(ju,FEo),e(ju,Fj),e(Fj,TEo),e(ju,MEo),e(G,EEo),e(G,Du),e(Du,yde),e(yde,CEo),e(Du,wEo),e(Du,Tj),e(Tj,AEo),e(Du,yEo),e(G,LEo),e(G,Gu),e(Gu,Lde),e(Lde,xEo),e(Gu,$Eo),e(Gu,Mj),e(Mj,kEo),e(Gu,SEo),e(G,REo),e(G,Ou),e(Ou,xde),e(xde,PEo),e(Ou,BEo),e(Ou,Ej),e(Ej,IEo),e(Ou,NEo),e(G,qEo),e(G,Vu),e(Vu,$de),e($de,jEo),e(Vu,DEo),e(Vu,Cj),e(Cj,GEo),e(Vu,OEo),e(G,VEo),e(G,Xu),e(Xu,kde),e(kde,XEo),e(Xu,zEo),e(Xu,wj),e(wj,WEo),e(Xu,QEo),e(G,HEo),e(G,zu),e(zu,Sde),e(Sde,UEo),e(zu,JEo),e(zu,Aj),e(Aj,YEo),e(zu,KEo),e(G,ZEo),e(G,Wu),e(Wu,Rde),e(Rde,e5o),e(Wu,o5o),e(Wu,yj),e(yj,r5o),e(Wu,t5o),e(G,a5o),e(G,Qu),e(Qu,Pde),e(Pde,n5o),e(Qu,s5o),e(Qu,Lj),e(Lj,l5o),e(Qu,i5o),e(G,d5o),e(G,Hu),e(Hu,Bde),e(Bde,c5o),e(Hu,f5o),e(Hu,xj),e(xj,m5o),e(Hu,g5o),e(G,h5o),e(G,Uu),e(Uu,Ide),e(Ide,p5o),e(Uu,_5o),e(Uu,$j),e($j,u5o),e(Uu,b5o),e(G,v5o),e(G,Ju),e(Ju,Nde),e(Nde,F5o),e(Ju,T5o),e(Ju,kj),e(kj,M5o),e(Ju,E5o),e(Ye,C5o),e(Ye,Yu),e(Yu,w5o),e(Yu,qde),e(qde,A5o),e(Yu,y5o),e(Yu,jde),e(jde,L5o),e(Ye,x5o),M(Ku,Ye,null),b(f,Hqe,u),b(f,Si,u),e(Si,Zu),e(Zu,Dde),M(uA,Dde,null),e(Si,$5o),e(Si,Gde),e(Gde,k5o),b(f,Uqe,u),b(f,$o,u),M(bA,$o,null),e($o,S5o),e($o,Ri),e(Ri,R5o),e(Ri,Sj),e(Sj,P5o),e(Ri,B5o),e(Ri,Rj),e(Rj,I5o),e(Ri,N5o),e($o,q5o),e($o,vA),e(vA,j5o),e(vA,Ode),e(Ode,D5o),e(vA,G5o),e($o,O5o),e($o,nt),M(FA,nt,null),e(nt,V5o),e(nt,Vde),e(Vde,X5o),e(nt,z5o),e(nt,Pi),e(Pi,W5o),e(Pi,Xde),e(Xde,Q5o),e(Pi,H5o),e(Pi,Pj),e(Pj,U5o),e(Pi,J5o),e(nt,Y5o),M(e2,nt,null),e($o,K5o),e($o,Ke),M(TA,Ke,null),e(Ke,Z5o),e(Ke,zde),e(zde,eCo),e(Ke,oCo),e(Ke,$a),e($a,rCo),e($a,Wde),e(Wde,tCo),e($a,aCo),e($a,Qde),e(Qde,nCo),e($a,sCo),e($a,Hde),e(Hde,lCo),e($a,iCo),e(Ke,dCo),e(Ke,z),e(z,o2),e(o2,Ude),e(Ude,cCo),e(o2,fCo),e(o2,Bj),e(Bj,mCo),e(o2,gCo),e(z,hCo),e(z,r2),e(r2,Jde),e(Jde,pCo),e(r2,_Co),e(r2,Ij),e(Ij,uCo),e(r2,bCo),e(z,vCo),e(z,t2),e(t2,Yde),e(Yde,FCo),e(t2,TCo),e(t2,Nj),e(Nj,MCo),e(t2,ECo),e(z,CCo),e(z,a2),e(a2,Kde),e(Kde,wCo),e(a2,ACo),e(a2,qj),e(qj,yCo),e(a2,LCo),e(z,xCo),e(z,n2),e(n2,Zde),e(Zde,$Co),e(n2,kCo),e(n2,jj),e(jj,SCo),e(n2,RCo),e(z,PCo),e(z,s2),e(s2,ece),e(ece,BCo),e(s2,ICo),e(s2,Dj),e(Dj,NCo),e(s2,qCo),e(z,jCo),e(z,l2),e(l2,oce),e(oce,DCo),e(l2,GCo),e(l2,Gj),e(Gj,OCo),e(l2,VCo),e(z,XCo),e(z,i2),e(i2,rce),e(rce,zCo),e(i2,WCo),e(i2,Oj),e(Oj,QCo),e(i2,HCo),e(z,UCo),e(z,d2),e(d2,tce),e(tce,JCo),e(d2,YCo),e(d2,Vj),e(Vj,KCo),e(d2,ZCo),e(z,e3o),e(z,c2),e(c2,ace),e(ace,o3o),e(c2,r3o),e(c2,Xj),e(Xj,t3o),e(c2,a3o),e(z,n3o),e(z,f2),e(f2,nce),e(nce,s3o),e(f2,l3o),e(f2,zj),e(zj,i3o),e(f2,d3o),e(z,c3o),e(z,m2),e(m2,sce),e(sce,f3o),e(m2,m3o),e(m2,Wj),e(Wj,g3o),e(m2,h3o),e(z,p3o),e(z,g2),e(g2,lce),e(lce,_3o),e(g2,u3o),e(g2,Qj),e(Qj,b3o),e(g2,v3o),e(z,F3o),e(z,h2),e(h2,ice),e(ice,T3o),e(h2,M3o),e(h2,Hj),e(Hj,E3o),e(h2,C3o),e(z,w3o),e(z,p2),e(p2,dce),e(dce,A3o),e(p2,y3o),e(p2,Uj),e(Uj,L3o),e(p2,x3o),e(z,$3o),e(z,_2),e(_2,cce),e(cce,k3o),e(_2,S3o),e(_2,Jj),e(Jj,R3o),e(_2,P3o),e(z,B3o),e(z,u2),e(u2,fce),e(fce,I3o),e(u2,N3o),e(u2,Yj),e(Yj,q3o),e(u2,j3o),e(z,D3o),e(z,b2),e(b2,mce),e(mce,G3o),e(b2,O3o),e(b2,Kj),e(Kj,V3o),e(b2,X3o),e(z,z3o),e(z,v2),e(v2,gce),e(gce,W3o),e(v2,Q3o),e(v2,Zj),e(Zj,H3o),e(v2,U3o),e(z,J3o),e(z,F2),e(F2,hce),e(hce,Y3o),e(F2,K3o),e(F2,eD),e(eD,Z3o),e(F2,e0o),e(z,o0o),e(z,T2),e(T2,pce),e(pce,r0o),e(T2,t0o),e(T2,oD),e(oD,a0o),e(T2,n0o),e(z,s0o),e(z,M2),e(M2,_ce),e(_ce,l0o),e(M2,i0o),e(M2,rD),e(rD,d0o),e(M2,c0o),e(z,f0o),e(z,E2),e(E2,uce),e(uce,m0o),e(E2,g0o),e(E2,tD),e(tD,h0o),e(E2,p0o),e(z,_0o),e(z,C2),e(C2,bce),e(bce,u0o),e(C2,b0o),e(C2,aD),e(aD,v0o),e(C2,F0o),e(z,T0o),e(z,w2),e(w2,vce),e(vce,M0o),e(w2,E0o),e(w2,nD),e(nD,C0o),e(w2,w0o),e(z,A0o),e(z,A2),e(A2,Fce),e(Fce,y0o),e(A2,L0o),e(A2,sD),e(sD,x0o),e(A2,$0o),e(z,k0o),e(z,y2),e(y2,Tce),e(Tce,S0o),e(y2,R0o),e(y2,lD),e(lD,P0o),e(y2,B0o),e(z,I0o),e(z,L2),e(L2,Mce),e(Mce,N0o),e(L2,q0o),e(L2,iD),e(iD,j0o),e(L2,D0o),e(z,G0o),e(z,x2),e(x2,Ece),e(Ece,O0o),e(x2,V0o),e(x2,dD),e(dD,X0o),e(x2,z0o),e(z,W0o),e(z,$2),e($2,Cce),e(Cce,Q0o),e($2,H0o),e($2,cD),e(cD,U0o),e($2,J0o),e(z,Y0o),e(z,k2),e(k2,wce),e(wce,K0o),e(k2,Z0o),e(k2,fD),e(fD,ewo),e(k2,owo),e(z,rwo),e(z,S2),e(S2,Ace),e(Ace,two),e(S2,awo),e(S2,mD),e(mD,nwo),e(S2,swo),e(z,lwo),e(z,R2),e(R2,yce),e(yce,iwo),e(R2,dwo),e(R2,gD),e(gD,cwo),e(R2,fwo),e(z,mwo),e(z,P2),e(P2,Lce),e(Lce,gwo),e(P2,hwo),e(P2,hD),e(hD,pwo),e(P2,_wo),e(z,uwo),e(z,B2),e(B2,xce),e(xce,bwo),e(B2,vwo),e(B2,pD),e(pD,Fwo),e(B2,Two),e(z,Mwo),e(z,I2),e(I2,$ce),e($ce,Ewo),e(I2,Cwo),e(I2,_D),e(_D,wwo),e(I2,Awo),e(z,ywo),e(z,N2),e(N2,kce),e(kce,Lwo),e(N2,xwo),e(N2,uD),e(uD,$wo),e(N2,kwo),e(Ke,Swo),e(Ke,q2),e(q2,Rwo),e(q2,Sce),e(Sce,Pwo),e(q2,Bwo),e(q2,Rce),e(Rce,Iwo),e(Ke,Nwo),M(j2,Ke,null),b(f,Jqe,u),b(f,Bi,u),e(Bi,D2),e(D2,Pce),M(MA,Pce,null),e(Bi,qwo),e(Bi,Bce),e(Bce,jwo),b(f,Yqe,u),b(f,ko,u),M(EA,ko,null),e(ko,Dwo),e(ko,Ii),e(Ii,Gwo),e(Ii,bD),e(bD,Owo),e(Ii,Vwo),e(Ii,vD),e(vD,Xwo),e(Ii,zwo),e(ko,Wwo),e(ko,CA),e(CA,Qwo),e(CA,Ice),e(Ice,Hwo),e(CA,Uwo),e(ko,Jwo),e(ko,st),M(wA,st,null),e(st,Ywo),e(st,Nce),e(Nce,Kwo),e(st,Zwo),e(st,Ni),e(Ni,eAo),e(Ni,qce),e(qce,oAo),e(Ni,rAo),e(Ni,FD),e(FD,tAo),e(Ni,aAo),e(st,nAo),M(G2,st,null),e(ko,sAo),e(ko,Ze),M(AA,Ze,null),e(Ze,lAo),e(Ze,jce),e(jce,iAo),e(Ze,dAo),e(Ze,ka),e(ka,cAo),e(ka,Dce),e(Dce,fAo),e(ka,mAo),e(ka,Gce),e(Gce,gAo),e(ka,hAo),e(ka,Oce),e(Oce,pAo),e(ka,_Ao),e(Ze,uAo),e(Ze,Q),e(Q,O2),e(O2,Vce),e(Vce,bAo),e(O2,vAo),e(O2,TD),e(TD,FAo),e(O2,TAo),e(Q,MAo),e(Q,V2),e(V2,Xce),e(Xce,EAo),e(V2,CAo),e(V2,MD),e(MD,wAo),e(V2,AAo),e(Q,yAo),e(Q,X2),e(X2,zce),e(zce,LAo),e(X2,xAo),e(X2,ED),e(ED,$Ao),e(X2,kAo),e(Q,SAo),e(Q,z2),e(z2,Wce),e(Wce,RAo),e(z2,PAo),e(z2,CD),e(CD,BAo),e(z2,IAo),e(Q,NAo),e(Q,W2),e(W2,Qce),e(Qce,qAo),e(W2,jAo),e(W2,wD),e(wD,DAo),e(W2,GAo),e(Q,OAo),e(Q,Q2),e(Q2,Hce),e(Hce,VAo),e(Q2,XAo),e(Q2,AD),e(AD,zAo),e(Q2,WAo),e(Q,QAo),e(Q,H2),e(H2,Uce),e(Uce,HAo),e(H2,UAo),e(H2,yD),e(yD,JAo),e(H2,YAo),e(Q,KAo),e(Q,U2),e(U2,Jce),e(Jce,ZAo),e(U2,eyo),e(U2,LD),e(LD,oyo),e(U2,ryo),e(Q,tyo),e(Q,J2),e(J2,Yce),e(Yce,ayo),e(J2,nyo),e(J2,xD),e(xD,syo),e(J2,lyo),e(Q,iyo),e(Q,Y2),e(Y2,Kce),e(Kce,dyo),e(Y2,cyo),e(Y2,$D),e($D,fyo),e(Y2,myo),e(Q,gyo),e(Q,K2),e(K2,Zce),e(Zce,hyo),e(K2,pyo),e(K2,kD),e(kD,_yo),e(K2,uyo),e(Q,byo),e(Q,Z2),e(Z2,efe),e(efe,vyo),e(Z2,Fyo),e(Z2,SD),e(SD,Tyo),e(Z2,Myo),e(Q,Eyo),e(Q,e1),e(e1,ofe),e(ofe,Cyo),e(e1,wyo),e(e1,RD),e(RD,Ayo),e(e1,yyo),e(Q,Lyo),e(Q,o1),e(o1,rfe),e(rfe,xyo),e(o1,$yo),e(o1,PD),e(PD,kyo),e(o1,Syo),e(Q,Ryo),e(Q,r1),e(r1,tfe),e(tfe,Pyo),e(r1,Byo),e(r1,BD),e(BD,Iyo),e(r1,Nyo),e(Q,qyo),e(Q,t1),e(t1,afe),e(afe,jyo),e(t1,Dyo),e(t1,ID),e(ID,Gyo),e(t1,Oyo),e(Q,Vyo),e(Q,a1),e(a1,nfe),e(nfe,Xyo),e(a1,zyo),e(a1,ND),e(ND,Wyo),e(a1,Qyo),e(Q,Hyo),e(Q,n1),e(n1,sfe),e(sfe,Uyo),e(n1,Jyo),e(n1,qD),e(qD,Yyo),e(n1,Kyo),e(Q,Zyo),e(Q,s1),e(s1,lfe),e(lfe,eLo),e(s1,oLo),e(s1,jD),e(jD,rLo),e(s1,tLo),e(Q,aLo),e(Q,l1),e(l1,ife),e(ife,nLo),e(l1,sLo),e(l1,DD),e(DD,lLo),e(l1,iLo),e(Q,dLo),e(Q,i1),e(i1,dfe),e(dfe,cLo),e(i1,fLo),e(i1,GD),e(GD,mLo),e(i1,gLo),e(Q,hLo),e(Q,d1),e(d1,cfe),e(cfe,pLo),e(d1,_Lo),e(d1,OD),e(OD,uLo),e(d1,bLo),e(Q,vLo),e(Q,c1),e(c1,ffe),e(ffe,FLo),e(c1,TLo),e(c1,VD),e(VD,MLo),e(c1,ELo),e(Q,CLo),e(Q,f1),e(f1,mfe),e(mfe,wLo),e(f1,ALo),e(f1,XD),e(XD,yLo),e(f1,LLo),e(Q,xLo),e(Q,m1),e(m1,gfe),e(gfe,$Lo),e(m1,kLo),e(m1,zD),e(zD,SLo),e(m1,RLo),e(Q,PLo),e(Q,g1),e(g1,hfe),e(hfe,BLo),e(g1,ILo),e(g1,WD),e(WD,NLo),e(g1,qLo),e(Q,jLo),e(Q,h1),e(h1,pfe),e(pfe,DLo),e(h1,GLo),e(h1,QD),e(QD,OLo),e(h1,VLo),e(Q,XLo),e(Q,p1),e(p1,_fe),e(_fe,zLo),e(p1,WLo),e(p1,HD),e(HD,QLo),e(p1,HLo),e(Q,ULo),e(Q,_1),e(_1,ufe),e(ufe,JLo),e(_1,YLo),e(_1,UD),e(UD,KLo),e(_1,ZLo),e(Q,e8o),e(Q,u1),e(u1,bfe),e(bfe,o8o),e(u1,r8o),e(u1,JD),e(JD,t8o),e(u1,a8o),e(Q,n8o),e(Q,b1),e(b1,vfe),e(vfe,s8o),e(b1,l8o),e(b1,Ffe),e(Ffe,i8o),e(b1,d8o),e(Q,c8o),e(Q,v1),e(v1,Tfe),e(Tfe,f8o),e(v1,m8o),e(v1,YD),e(YD,g8o),e(v1,h8o),e(Q,p8o),e(Q,F1),e(F1,Mfe),e(Mfe,_8o),e(F1,u8o),e(F1,KD),e(KD,b8o),e(F1,v8o),e(Q,F8o),e(Q,T1),e(T1,Efe),e(Efe,T8o),e(T1,M8o),e(T1,ZD),e(ZD,E8o),e(T1,C8o),e(Q,w8o),e(Q,M1),e(M1,Cfe),e(Cfe,A8o),e(M1,y8o),e(M1,eG),e(eG,L8o),e(M1,x8o),e(Ze,$8o),e(Ze,E1),e(E1,k8o),e(E1,wfe),e(wfe,S8o),e(E1,R8o),e(E1,Afe),e(Afe,P8o),e(Ze,B8o),M(C1,Ze,null),b(f,Kqe,u),b(f,qi,u),e(qi,w1),e(w1,yfe),M(yA,yfe,null),e(qi,I8o),e(qi,Lfe),e(Lfe,N8o),b(f,Zqe,u),b(f,So,u),M(LA,So,null),e(So,q8o),e(So,ji),e(ji,j8o),e(ji,oG),e(oG,D8o),e(ji,G8o),e(ji,rG),e(rG,O8o),e(ji,V8o),e(So,X8o),e(So,xA),e(xA,z8o),e(xA,xfe),e(xfe,W8o),e(xA,Q8o),e(So,H8o),e(So,lt),M($A,lt,null),e(lt,U8o),e(lt,$fe),e($fe,J8o),e(lt,Y8o),e(lt,Di),e(Di,K8o),e(Di,kfe),e(kfe,Z8o),e(Di,exo),e(Di,tG),e(tG,oxo),e(Di,rxo),e(lt,txo),M(A1,lt,null),e(So,axo),e(So,eo),M(kA,eo,null),e(eo,nxo),e(eo,Sfe),e(Sfe,sxo),e(eo,lxo),e(eo,Sa),e(Sa,ixo),e(Sa,Rfe),e(Rfe,dxo),e(Sa,cxo),e(Sa,Pfe),e(Pfe,fxo),e(Sa,mxo),e(Sa,Bfe),e(Bfe,gxo),e(Sa,hxo),e(eo,pxo),e(eo,pe),e(pe,y1),e(y1,Ife),e(Ife,_xo),e(y1,uxo),e(y1,aG),e(aG,bxo),e(y1,vxo),e(pe,Fxo),e(pe,L1),e(L1,Nfe),e(Nfe,Txo),e(L1,Mxo),e(L1,nG),e(nG,Exo),e(L1,Cxo),e(pe,wxo),e(pe,x1),e(x1,qfe),e(qfe,Axo),e(x1,yxo),e(x1,sG),e(sG,Lxo),e(x1,xxo),e(pe,$xo),e(pe,$1),e($1,jfe),e(jfe,kxo),e($1,Sxo),e($1,lG),e(lG,Rxo),e($1,Pxo),e(pe,Bxo),e(pe,k1),e(k1,Dfe),e(Dfe,Ixo),e(k1,Nxo),e(k1,iG),e(iG,qxo),e(k1,jxo),e(pe,Dxo),e(pe,S1),e(S1,Gfe),e(Gfe,Gxo),e(S1,Oxo),e(S1,dG),e(dG,Vxo),e(S1,Xxo),e(pe,zxo),e(pe,R1),e(R1,Ofe),e(Ofe,Wxo),e(R1,Qxo),e(R1,cG),e(cG,Hxo),e(R1,Uxo),e(pe,Jxo),e(pe,P1),e(P1,Vfe),e(Vfe,Yxo),e(P1,Kxo),e(P1,fG),e(fG,Zxo),e(P1,e$o),e(pe,o$o),e(pe,B1),e(B1,Xfe),e(Xfe,r$o),e(B1,t$o),e(B1,mG),e(mG,a$o),e(B1,n$o),e(pe,s$o),e(pe,I1),e(I1,zfe),e(zfe,l$o),e(I1,i$o),e(I1,gG),e(gG,d$o),e(I1,c$o),e(pe,f$o),e(pe,N1),e(N1,Wfe),e(Wfe,m$o),e(N1,g$o),e(N1,hG),e(hG,h$o),e(N1,p$o),e(pe,_$o),e(pe,q1),e(q1,Qfe),e(Qfe,u$o),e(q1,b$o),e(q1,pG),e(pG,v$o),e(q1,F$o),e(pe,T$o),e(pe,j1),e(j1,Hfe),e(Hfe,M$o),e(j1,E$o),e(j1,_G),e(_G,C$o),e(j1,w$o),e(pe,A$o),e(pe,D1),e(D1,Ufe),e(Ufe,y$o),e(D1,L$o),e(D1,uG),e(uG,x$o),e(D1,$$o),e(pe,k$o),e(pe,G1),e(G1,Jfe),e(Jfe,S$o),e(G1,R$o),e(G1,bG),e(bG,P$o),e(G1,B$o),e(pe,I$o),e(pe,O1),e(O1,Yfe),e(Yfe,N$o),e(O1,q$o),e(O1,vG),e(vG,j$o),e(O1,D$o),e(pe,G$o),e(pe,V1),e(V1,Kfe),e(Kfe,O$o),e(V1,V$o),e(V1,FG),e(FG,X$o),e(V1,z$o),e(eo,W$o),e(eo,X1),e(X1,Q$o),e(X1,Zfe),e(Zfe,H$o),e(X1,U$o),e(X1,eme),e(eme,J$o),e(eo,Y$o),M(z1,eo,null),b(f,eje,u),b(f,Gi,u),e(Gi,W1),e(W1,ome),M(SA,ome,null),e(Gi,K$o),e(Gi,rme),e(rme,Z$o),b(f,oje,u),b(f,Ro,u),M(RA,Ro,null),e(Ro,eko),e(Ro,Oi),e(Oi,oko),e(Oi,TG),e(TG,rko),e(Oi,tko),e(Oi,MG),e(MG,ako),e(Oi,nko),e(Ro,sko),e(Ro,PA),e(PA,lko),e(PA,tme),e(tme,iko),e(PA,dko),e(Ro,cko),e(Ro,it),M(BA,it,null),e(it,fko),e(it,ame),e(ame,mko),e(it,gko),e(it,Vi),e(Vi,hko),e(Vi,nme),e(nme,pko),e(Vi,_ko),e(Vi,EG),e(EG,uko),e(Vi,bko),e(it,vko),M(Q1,it,null),e(Ro,Fko),e(Ro,oo),M(IA,oo,null),e(oo,Tko),e(oo,sme),e(sme,Mko),e(oo,Eko),e(oo,Ra),e(Ra,Cko),e(Ra,lme),e(lme,wko),e(Ra,Ako),e(Ra,ime),e(ime,yko),e(Ra,Lko),e(Ra,dme),e(dme,xko),e(Ra,$ko),e(oo,kko),e(oo,N),e(N,H1),e(H1,cme),e(cme,Sko),e(H1,Rko),e(H1,CG),e(CG,Pko),e(H1,Bko),e(N,Iko),e(N,U1),e(U1,fme),e(fme,Nko),e(U1,qko),e(U1,wG),e(wG,jko),e(U1,Dko),e(N,Gko),e(N,J1),e(J1,mme),e(mme,Oko),e(J1,Vko),e(J1,AG),e(AG,Xko),e(J1,zko),e(N,Wko),e(N,Y1),e(Y1,gme),e(gme,Qko),e(Y1,Hko),e(Y1,yG),e(yG,Uko),e(Y1,Jko),e(N,Yko),e(N,K1),e(K1,hme),e(hme,Kko),e(K1,Zko),e(K1,LG),e(LG,eSo),e(K1,oSo),e(N,rSo),e(N,Z1),e(Z1,pme),e(pme,tSo),e(Z1,aSo),e(Z1,xG),e(xG,nSo),e(Z1,sSo),e(N,lSo),e(N,eb),e(eb,_me),e(_me,iSo),e(eb,dSo),e(eb,$G),e($G,cSo),e(eb,fSo),e(N,mSo),e(N,ob),e(ob,ume),e(ume,gSo),e(ob,hSo),e(ob,kG),e(kG,pSo),e(ob,_So),e(N,uSo),e(N,rb),e(rb,bme),e(bme,bSo),e(rb,vSo),e(rb,SG),e(SG,FSo),e(rb,TSo),e(N,MSo),e(N,tb),e(tb,vme),e(vme,ESo),e(tb,CSo),e(tb,RG),e(RG,wSo),e(tb,ASo),e(N,ySo),e(N,ab),e(ab,Fme),e(Fme,LSo),e(ab,xSo),e(ab,PG),e(PG,$So),e(ab,kSo),e(N,SSo),e(N,nb),e(nb,Tme),e(Tme,RSo),e(nb,PSo),e(nb,BG),e(BG,BSo),e(nb,ISo),e(N,NSo),e(N,sb),e(sb,Mme),e(Mme,qSo),e(sb,jSo),e(sb,IG),e(IG,DSo),e(sb,GSo),e(N,OSo),e(N,lb),e(lb,Eme),e(Eme,VSo),e(lb,XSo),e(lb,NG),e(NG,zSo),e(lb,WSo),e(N,QSo),e(N,ib),e(ib,Cme),e(Cme,HSo),e(ib,USo),e(ib,qG),e(qG,JSo),e(ib,YSo),e(N,KSo),e(N,db),e(db,wme),e(wme,ZSo),e(db,eRo),e(db,jG),e(jG,oRo),e(db,rRo),e(N,tRo),e(N,cb),e(cb,Ame),e(Ame,aRo),e(cb,nRo),e(cb,DG),e(DG,sRo),e(cb,lRo),e(N,iRo),e(N,fb),e(fb,yme),e(yme,dRo),e(fb,cRo),e(fb,GG),e(GG,fRo),e(fb,mRo),e(N,gRo),e(N,mb),e(mb,Lme),e(Lme,hRo),e(mb,pRo),e(mb,OG),e(OG,_Ro),e(mb,uRo),e(N,bRo),e(N,gb),e(gb,xme),e(xme,vRo),e(gb,FRo),e(gb,VG),e(VG,TRo),e(gb,MRo),e(N,ERo),e(N,hb),e(hb,$me),e($me,CRo),e(hb,wRo),e(hb,XG),e(XG,ARo),e(hb,yRo),e(N,LRo),e(N,pb),e(pb,kme),e(kme,xRo),e(pb,$Ro),e(pb,zG),e(zG,kRo),e(pb,SRo),e(N,RRo),e(N,_b),e(_b,Sme),e(Sme,PRo),e(_b,BRo),e(_b,WG),e(WG,IRo),e(_b,NRo),e(N,qRo),e(N,ub),e(ub,Rme),e(Rme,jRo),e(ub,DRo),e(ub,QG),e(QG,GRo),e(ub,ORo),e(N,VRo),e(N,bb),e(bb,Pme),e(Pme,XRo),e(bb,zRo),e(bb,HG),e(HG,WRo),e(bb,QRo),e(N,HRo),e(N,vb),e(vb,Bme),e(Bme,URo),e(vb,JRo),e(vb,UG),e(UG,YRo),e(vb,KRo),e(N,ZRo),e(N,Fb),e(Fb,Ime),e(Ime,ePo),e(Fb,oPo),e(Fb,JG),e(JG,rPo),e(Fb,tPo),e(N,aPo),e(N,Tb),e(Tb,Nme),e(Nme,nPo),e(Tb,sPo),e(Tb,YG),e(YG,lPo),e(Tb,iPo),e(N,dPo),e(N,Mb),e(Mb,qme),e(qme,cPo),e(Mb,fPo),e(Mb,KG),e(KG,mPo),e(Mb,gPo),e(N,hPo),e(N,Eb),e(Eb,jme),e(jme,pPo),e(Eb,_Po),e(Eb,ZG),e(ZG,uPo),e(Eb,bPo),e(N,vPo),e(N,Cb),e(Cb,Dme),e(Dme,FPo),e(Cb,TPo),e(Cb,eO),e(eO,MPo),e(Cb,EPo),e(N,CPo),e(N,wb),e(wb,Gme),e(Gme,wPo),e(wb,APo),e(wb,oO),e(oO,yPo),e(wb,LPo),e(N,xPo),e(N,Ab),e(Ab,Ome),e(Ome,$Po),e(Ab,kPo),e(Ab,rO),e(rO,SPo),e(Ab,RPo),e(N,PPo),e(N,yb),e(yb,Vme),e(Vme,BPo),e(yb,IPo),e(yb,tO),e(tO,NPo),e(yb,qPo),e(N,jPo),e(N,Lb),e(Lb,Xme),e(Xme,DPo),e(Lb,GPo),e(Lb,aO),e(aO,OPo),e(Lb,VPo),e(N,XPo),e(N,xb),e(xb,zme),e(zme,zPo),e(xb,WPo),e(xb,nO),e(nO,QPo),e(xb,HPo),e(N,UPo),e(N,$b),e($b,Wme),e(Wme,JPo),e($b,YPo),e($b,sO),e(sO,KPo),e($b,ZPo),e(N,eBo),e(N,kb),e(kb,Qme),e(Qme,oBo),e(kb,rBo),e(kb,lO),e(lO,tBo),e(kb,aBo),e(N,nBo),e(N,Sb),e(Sb,Hme),e(Hme,sBo),e(Sb,lBo),e(Sb,iO),e(iO,iBo),e(Sb,dBo),e(N,cBo),e(N,Rb),e(Rb,Ume),e(Ume,fBo),e(Rb,mBo),e(Rb,dO),e(dO,gBo),e(Rb,hBo),e(N,pBo),e(N,Pb),e(Pb,Jme),e(Jme,_Bo),e(Pb,uBo),e(Pb,cO),e(cO,bBo),e(Pb,vBo),e(N,FBo),e(N,Bb),e(Bb,Yme),e(Yme,TBo),e(Bb,MBo),e(Bb,fO),e(fO,EBo),e(Bb,CBo),e(N,wBo),e(N,Ib),e(Ib,Kme),e(Kme,ABo),e(Ib,yBo),e(Ib,mO),e(mO,LBo),e(Ib,xBo),e(N,$Bo),e(N,Nb),e(Nb,Zme),e(Zme,kBo),e(Nb,SBo),e(Nb,gO),e(gO,RBo),e(Nb,PBo),e(N,BBo),e(N,qb),e(qb,ege),e(ege,IBo),e(qb,NBo),e(qb,hO),e(hO,qBo),e(qb,jBo),e(N,DBo),e(N,jb),e(jb,oge),e(oge,GBo),e(jb,OBo),e(jb,pO),e(pO,VBo),e(jb,XBo),e(N,zBo),e(N,Db),e(Db,rge),e(rge,WBo),e(Db,QBo),e(Db,_O),e(_O,HBo),e(Db,UBo),e(oo,JBo),e(oo,Gb),e(Gb,YBo),e(Gb,tge),e(tge,KBo),e(Gb,ZBo),e(Gb,age),e(age,eIo),e(oo,oIo),M(Ob,oo,null),b(f,rje,u),b(f,Xi,u),e(Xi,Vb),e(Vb,nge),M(NA,nge,null),e(Xi,rIo),e(Xi,sge),e(sge,tIo),b(f,tje,u),b(f,Po,u),M(qA,Po,null),e(Po,aIo),e(Po,zi),e(zi,nIo),e(zi,uO),e(uO,sIo),e(zi,lIo),e(zi,bO),e(bO,iIo),e(zi,dIo),e(Po,cIo),e(Po,jA),e(jA,fIo),e(jA,lge),e(lge,mIo),e(jA,gIo),e(Po,hIo),e(Po,dt),M(DA,dt,null),e(dt,pIo),e(dt,ige),e(ige,_Io),e(dt,uIo),e(dt,Wi),e(Wi,bIo),e(Wi,dge),e(dge,vIo),e(Wi,FIo),e(Wi,vO),e(vO,TIo),e(Wi,MIo),e(dt,EIo),M(Xb,dt,null),e(Po,CIo),e(Po,ro),M(GA,ro,null),e(ro,wIo),e(ro,cge),e(cge,AIo),e(ro,yIo),e(ro,Pa),e(Pa,LIo),e(Pa,fge),e(fge,xIo),e(Pa,$Io),e(Pa,mge),e(mge,kIo),e(Pa,SIo),e(Pa,gge),e(gge,RIo),e(Pa,PIo),e(ro,BIo),e(ro,K),e(K,zb),e(zb,hge),e(hge,IIo),e(zb,NIo),e(zb,FO),e(FO,qIo),e(zb,jIo),e(K,DIo),e(K,Wb),e(Wb,pge),e(pge,GIo),e(Wb,OIo),e(Wb,TO),e(TO,VIo),e(Wb,XIo),e(K,zIo),e(K,Qb),e(Qb,_ge),e(_ge,WIo),e(Qb,QIo),e(Qb,MO),e(MO,HIo),e(Qb,UIo),e(K,JIo),e(K,Hb),e(Hb,uge),e(uge,YIo),e(Hb,KIo),e(Hb,EO),e(EO,ZIo),e(Hb,eNo),e(K,oNo),e(K,Ub),e(Ub,bge),e(bge,rNo),e(Ub,tNo),e(Ub,CO),e(CO,aNo),e(Ub,nNo),e(K,sNo),e(K,Jb),e(Jb,vge),e(vge,lNo),e(Jb,iNo),e(Jb,wO),e(wO,dNo),e(Jb,cNo),e(K,fNo),e(K,Yb),e(Yb,Fge),e(Fge,mNo),e(Yb,gNo),e(Yb,AO),e(AO,hNo),e(Yb,pNo),e(K,_No),e(K,Kb),e(Kb,Tge),e(Tge,uNo),e(Kb,bNo),e(Kb,yO),e(yO,vNo),e(Kb,FNo),e(K,TNo),e(K,Zb),e(Zb,Mge),e(Mge,MNo),e(Zb,ENo),e(Zb,LO),e(LO,CNo),e(Zb,wNo),e(K,ANo),e(K,ev),e(ev,Ege),e(Ege,yNo),e(ev,LNo),e(ev,xO),e(xO,xNo),e(ev,$No),e(K,kNo),e(K,ov),e(ov,Cge),e(Cge,SNo),e(ov,RNo),e(ov,$O),e($O,PNo),e(ov,BNo),e(K,INo),e(K,rv),e(rv,wge),e(wge,NNo),e(rv,qNo),e(rv,kO),e(kO,jNo),e(rv,DNo),e(K,GNo),e(K,tv),e(tv,Age),e(Age,ONo),e(tv,VNo),e(tv,SO),e(SO,XNo),e(tv,zNo),e(K,WNo),e(K,av),e(av,yge),e(yge,QNo),e(av,HNo),e(av,RO),e(RO,UNo),e(av,JNo),e(K,YNo),e(K,nv),e(nv,Lge),e(Lge,KNo),e(nv,ZNo),e(nv,PO),e(PO,eqo),e(nv,oqo),e(K,rqo),e(K,sv),e(sv,xge),e(xge,tqo),e(sv,aqo),e(sv,BO),e(BO,nqo),e(sv,sqo),e(K,lqo),e(K,lv),e(lv,$ge),e($ge,iqo),e(lv,dqo),e(lv,IO),e(IO,cqo),e(lv,fqo),e(K,mqo),e(K,iv),e(iv,kge),e(kge,gqo),e(iv,hqo),e(iv,NO),e(NO,pqo),e(iv,_qo),e(K,uqo),e(K,dv),e(dv,Sge),e(Sge,bqo),e(dv,vqo),e(dv,qO),e(qO,Fqo),e(dv,Tqo),e(K,Mqo),e(K,cv),e(cv,Rge),e(Rge,Eqo),e(cv,Cqo),e(cv,jO),e(jO,wqo),e(cv,Aqo),e(K,yqo),e(K,fv),e(fv,Pge),e(Pge,Lqo),e(fv,xqo),e(fv,DO),e(DO,$qo),e(fv,kqo),e(K,Sqo),e(K,mv),e(mv,Bge),e(Bge,Rqo),e(mv,Pqo),e(mv,GO),e(GO,Bqo),e(mv,Iqo),e(K,Nqo),e(K,gv),e(gv,Ige),e(Ige,qqo),e(gv,jqo),e(gv,OO),e(OO,Dqo),e(gv,Gqo),e(K,Oqo),e(K,hv),e(hv,Nge),e(Nge,Vqo),e(hv,Xqo),e(hv,VO),e(VO,zqo),e(hv,Wqo),e(K,Qqo),e(K,pv),e(pv,qge),e(qge,Hqo),e(pv,Uqo),e(pv,XO),e(XO,Jqo),e(pv,Yqo),e(K,Kqo),e(K,_v),e(_v,jge),e(jge,Zqo),e(_v,ejo),e(_v,zO),e(zO,ojo),e(_v,rjo),e(K,tjo),e(K,uv),e(uv,Dge),e(Dge,ajo),e(uv,njo),e(uv,WO),e(WO,sjo),e(uv,ljo),e(K,ijo),e(K,bv),e(bv,Gge),e(Gge,djo),e(bv,cjo),e(bv,QO),e(QO,fjo),e(bv,mjo),e(K,gjo),e(K,vv),e(vv,Oge),e(Oge,hjo),e(vv,pjo),e(vv,HO),e(HO,_jo),e(vv,ujo),e(ro,bjo),e(ro,Fv),e(Fv,vjo),e(Fv,Vge),e(Vge,Fjo),e(Fv,Tjo),e(Fv,Xge),e(Xge,Mjo),e(ro,Ejo),M(Tv,ro,null),b(f,aje,u),b(f,Qi,u),e(Qi,Mv),e(Mv,zge),M(OA,zge,null),e(Qi,Cjo),e(Qi,Wge),e(Wge,wjo),b(f,nje,u),b(f,Bo,u),M(VA,Bo,null),e(Bo,Ajo),e(Bo,Hi),e(Hi,yjo),e(Hi,UO),e(UO,Ljo),e(Hi,xjo),e(Hi,JO),e(JO,$jo),e(Hi,kjo),e(Bo,Sjo),e(Bo,XA),e(XA,Rjo),e(XA,Qge),e(Qge,Pjo),e(XA,Bjo),e(Bo,Ijo),e(Bo,ct),M(zA,ct,null),e(ct,Njo),e(ct,Hge),e(Hge,qjo),e(ct,jjo),e(ct,Ui),e(Ui,Djo),e(Ui,Uge),e(Uge,Gjo),e(Ui,Ojo),e(Ui,YO),e(YO,Vjo),e(Ui,Xjo),e(ct,zjo),M(Ev,ct,null),e(Bo,Wjo),e(Bo,to),M(WA,to,null),e(to,Qjo),e(to,Jge),e(Jge,Hjo),e(to,Ujo),e(to,Ba),e(Ba,Jjo),e(Ba,Yge),e(Yge,Yjo),e(Ba,Kjo),e(Ba,Kge),e(Kge,Zjo),e(Ba,eDo),e(Ba,Zge),e(Zge,oDo),e(Ba,rDo),e(to,tDo),e(to,Yr),e(Yr,Cv),e(Cv,ehe),e(ehe,aDo),e(Cv,nDo),e(Cv,KO),e(KO,sDo),e(Cv,lDo),e(Yr,iDo),e(Yr,wv),e(wv,ohe),e(ohe,dDo),e(wv,cDo),e(wv,ZO),e(ZO,fDo),e(wv,mDo),e(Yr,gDo),e(Yr,Av),e(Av,rhe),e(rhe,hDo),e(Av,pDo),e(Av,eV),e(eV,_Do),e(Av,uDo),e(Yr,bDo),e(Yr,yv),e(yv,the),e(the,vDo),e(yv,FDo),e(yv,oV),e(oV,TDo),e(yv,MDo),e(Yr,EDo),e(Yr,Lv),e(Lv,ahe),e(ahe,CDo),e(Lv,wDo),e(Lv,rV),e(rV,ADo),e(Lv,yDo),e(to,LDo),e(to,xv),e(xv,xDo),e(xv,nhe),e(nhe,$Do),e(xv,kDo),e(xv,she),e(she,SDo),e(to,RDo),M($v,to,null),b(f,sje,u),b(f,Ji,u),e(Ji,kv),e(kv,lhe),M(QA,lhe,null),e(Ji,PDo),e(Ji,ihe),e(ihe,BDo),b(f,lje,u),b(f,Io,u),M(HA,Io,null),e(Io,IDo),e(Io,Yi),e(Yi,NDo),e(Yi,tV),e(tV,qDo),e(Yi,jDo),e(Yi,aV),e(aV,DDo),e(Yi,GDo),e(Io,ODo),e(Io,UA),e(UA,VDo),e(UA,dhe),e(dhe,XDo),e(UA,zDo),e(Io,WDo),e(Io,ft),M(JA,ft,null),e(ft,QDo),e(ft,che),e(che,HDo),e(ft,UDo),e(ft,Ki),e(Ki,JDo),e(Ki,fhe),e(fhe,YDo),e(Ki,KDo),e(Ki,nV),e(nV,ZDo),e(Ki,eGo),e(ft,oGo),M(Sv,ft,null),e(Io,rGo),e(Io,ao),M(YA,ao,null),e(ao,tGo),e(ao,mhe),e(mhe,aGo),e(ao,nGo),e(ao,Ia),e(Ia,sGo),e(Ia,ghe),e(ghe,lGo),e(Ia,iGo),e(Ia,hhe),e(hhe,dGo),e(Ia,cGo),e(Ia,phe),e(phe,fGo),e(Ia,mGo),e(ao,gGo),e(ao,H),e(H,Rv),e(Rv,_he),e(_he,hGo),e(Rv,pGo),e(Rv,sV),e(sV,_Go),e(Rv,uGo),e(H,bGo),e(H,Pv),e(Pv,uhe),e(uhe,vGo),e(Pv,FGo),e(Pv,lV),e(lV,TGo),e(Pv,MGo),e(H,EGo),e(H,Bv),e(Bv,bhe),e(bhe,CGo),e(Bv,wGo),e(Bv,iV),e(iV,AGo),e(Bv,yGo),e(H,LGo),e(H,Iv),e(Iv,vhe),e(vhe,xGo),e(Iv,$Go),e(Iv,dV),e(dV,kGo),e(Iv,SGo),e(H,RGo),e(H,Nv),e(Nv,Fhe),e(Fhe,PGo),e(Nv,BGo),e(Nv,cV),e(cV,IGo),e(Nv,NGo),e(H,qGo),e(H,qv),e(qv,The),e(The,jGo),e(qv,DGo),e(qv,fV),e(fV,GGo),e(qv,OGo),e(H,VGo),e(H,jv),e(jv,Mhe),e(Mhe,XGo),e(jv,zGo),e(jv,mV),e(mV,WGo),e(jv,QGo),e(H,HGo),e(H,Dv),e(Dv,Ehe),e(Ehe,UGo),e(Dv,JGo),e(Dv,gV),e(gV,YGo),e(Dv,KGo),e(H,ZGo),e(H,Gv),e(Gv,Che),e(Che,eOo),e(Gv,oOo),e(Gv,hV),e(hV,rOo),e(Gv,tOo),e(H,aOo),e(H,Ov),e(Ov,whe),e(whe,nOo),e(Ov,sOo),e(Ov,pV),e(pV,lOo),e(Ov,iOo),e(H,dOo),e(H,Vv),e(Vv,Ahe),e(Ahe,cOo),e(Vv,fOo),e(Vv,_V),e(_V,mOo),e(Vv,gOo),e(H,hOo),e(H,Xv),e(Xv,yhe),e(yhe,pOo),e(Xv,_Oo),e(Xv,uV),e(uV,uOo),e(Xv,bOo),e(H,vOo),e(H,zv),e(zv,Lhe),e(Lhe,FOo),e(zv,TOo),e(zv,bV),e(bV,MOo),e(zv,EOo),e(H,COo),e(H,Wv),e(Wv,xhe),e(xhe,wOo),e(Wv,AOo),e(Wv,vV),e(vV,yOo),e(Wv,LOo),e(H,xOo),e(H,Qv),e(Qv,$he),e($he,$Oo),e(Qv,kOo),e(Qv,FV),e(FV,SOo),e(Qv,ROo),e(H,POo),e(H,Hv),e(Hv,khe),e(khe,BOo),e(Hv,IOo),e(Hv,TV),e(TV,NOo),e(Hv,qOo),e(H,jOo),e(H,Uv),e(Uv,She),e(She,DOo),e(Uv,GOo),e(Uv,MV),e(MV,OOo),e(Uv,VOo),e(H,XOo),e(H,Jv),e(Jv,Rhe),e(Rhe,zOo),e(Jv,WOo),e(Jv,EV),e(EV,QOo),e(Jv,HOo),e(H,UOo),e(H,Yv),e(Yv,Phe),e(Phe,JOo),e(Yv,YOo),e(Yv,CV),e(CV,KOo),e(Yv,ZOo),e(H,eVo),e(H,Kv),e(Kv,Bhe),e(Bhe,oVo),e(Kv,rVo),e(Kv,wV),e(wV,tVo),e(Kv,aVo),e(H,nVo),e(H,Zv),e(Zv,Ihe),e(Ihe,sVo),e(Zv,lVo),e(Zv,AV),e(AV,iVo),e(Zv,dVo),e(H,cVo),e(H,eF),e(eF,Nhe),e(Nhe,fVo),e(eF,mVo),e(eF,yV),e(yV,gVo),e(eF,hVo),e(H,pVo),e(H,oF),e(oF,qhe),e(qhe,_Vo),e(oF,uVo),e(oF,LV),e(LV,bVo),e(oF,vVo),e(H,FVo),e(H,rF),e(rF,jhe),e(jhe,TVo),e(rF,MVo),e(rF,xV),e(xV,EVo),e(rF,CVo),e(H,wVo),e(H,tF),e(tF,Dhe),e(Dhe,AVo),e(tF,yVo),e(tF,$V),e($V,LVo),e(tF,xVo),e(H,$Vo),e(H,aF),e(aF,Ghe),e(Ghe,kVo),e(aF,SVo),e(aF,kV),e(kV,RVo),e(aF,PVo),e(H,BVo),e(H,nF),e(nF,Ohe),e(Ohe,IVo),e(nF,NVo),e(nF,SV),e(SV,qVo),e(nF,jVo),e(H,DVo),e(H,sF),e(sF,Vhe),e(Vhe,GVo),e(sF,OVo),e(sF,RV),e(RV,VVo),e(sF,XVo),e(H,zVo),e(H,lF),e(lF,Xhe),e(Xhe,WVo),e(lF,QVo),e(lF,PV),e(PV,HVo),e(lF,UVo),e(H,JVo),e(H,iF),e(iF,zhe),e(zhe,YVo),e(iF,KVo),e(iF,BV),e(BV,ZVo),e(iF,eXo),e(H,oXo),e(H,dF),e(dF,Whe),e(Whe,rXo),e(dF,tXo),e(dF,IV),e(IV,aXo),e(dF,nXo),e(H,sXo),e(H,cF),e(cF,Qhe),e(Qhe,lXo),e(cF,iXo),e(cF,NV),e(NV,dXo),e(cF,cXo),e(H,fXo),e(H,fF),e(fF,Hhe),e(Hhe,mXo),e(fF,gXo),e(fF,qV),e(qV,hXo),e(fF,pXo),e(H,_Xo),e(H,mF),e(mF,Uhe),e(Uhe,uXo),e(mF,bXo),e(mF,jV),e(jV,vXo),e(mF,FXo),e(ao,TXo),e(ao,gF),e(gF,MXo),e(gF,Jhe),e(Jhe,EXo),e(gF,CXo),e(gF,Yhe),e(Yhe,wXo),e(ao,AXo),M(hF,ao,null),b(f,ije,u),b(f,Zi,u),e(Zi,pF),e(pF,Khe),M(KA,Khe,null),e(Zi,yXo),e(Zi,Zhe),e(Zhe,LXo),b(f,dje,u),b(f,No,u),M(ZA,No,null),e(No,xXo),e(No,ed),e(ed,$Xo),e(ed,DV),e(DV,kXo),e(ed,SXo),e(ed,GV),e(GV,RXo),e(ed,PXo),e(No,BXo),e(No,ey),e(ey,IXo),e(ey,epe),e(epe,NXo),e(ey,qXo),e(No,jXo),e(No,mt),M(oy,mt,null),e(mt,DXo),e(mt,ope),e(ope,GXo),e(mt,OXo),e(mt,od),e(od,VXo),e(od,rpe),e(rpe,XXo),e(od,zXo),e(od,OV),e(OV,WXo),e(od,QXo),e(mt,HXo),M(_F,mt,null),e(No,UXo),e(No,no),M(ry,no,null),e(no,JXo),e(no,tpe),e(tpe,YXo),e(no,KXo),e(no,Na),e(Na,ZXo),e(Na,ape),e(ape,ezo),e(Na,ozo),e(Na,npe),e(npe,rzo),e(Na,tzo),e(Na,spe),e(spe,azo),e(Na,nzo),e(no,szo),e(no,V),e(V,uF),e(uF,lpe),e(lpe,lzo),e(uF,izo),e(uF,VV),e(VV,dzo),e(uF,czo),e(V,fzo),e(V,bF),e(bF,ipe),e(ipe,mzo),e(bF,gzo),e(bF,XV),e(XV,hzo),e(bF,pzo),e(V,_zo),e(V,vF),e(vF,dpe),e(dpe,uzo),e(vF,bzo),e(vF,zV),e(zV,vzo),e(vF,Fzo),e(V,Tzo),e(V,FF),e(FF,cpe),e(cpe,Mzo),e(FF,Ezo),e(FF,WV),e(WV,Czo),e(FF,wzo),e(V,Azo),e(V,TF),e(TF,fpe),e(fpe,yzo),e(TF,Lzo),e(TF,QV),e(QV,xzo),e(TF,$zo),e(V,kzo),e(V,MF),e(MF,mpe),e(mpe,Szo),e(MF,Rzo),e(MF,HV),e(HV,Pzo),e(MF,Bzo),e(V,Izo),e(V,EF),e(EF,gpe),e(gpe,Nzo),e(EF,qzo),e(EF,UV),e(UV,jzo),e(EF,Dzo),e(V,Gzo),e(V,CF),e(CF,hpe),e(hpe,Ozo),e(CF,Vzo),e(CF,JV),e(JV,Xzo),e(CF,zzo),e(V,Wzo),e(V,wF),e(wF,ppe),e(ppe,Qzo),e(wF,Hzo),e(wF,YV),e(YV,Uzo),e(wF,Jzo),e(V,Yzo),e(V,AF),e(AF,_pe),e(_pe,Kzo),e(AF,Zzo),e(AF,KV),e(KV,eWo),e(AF,oWo),e(V,rWo),e(V,yF),e(yF,upe),e(upe,tWo),e(yF,aWo),e(yF,ZV),e(ZV,nWo),e(yF,sWo),e(V,lWo),e(V,LF),e(LF,bpe),e(bpe,iWo),e(LF,dWo),e(LF,eX),e(eX,cWo),e(LF,fWo),e(V,mWo),e(V,xF),e(xF,vpe),e(vpe,gWo),e(xF,hWo),e(xF,oX),e(oX,pWo),e(xF,_Wo),e(V,uWo),e(V,$F),e($F,Fpe),e(Fpe,bWo),e($F,vWo),e($F,rX),e(rX,FWo),e($F,TWo),e(V,MWo),e(V,kF),e(kF,Tpe),e(Tpe,EWo),e(kF,CWo),e(kF,tX),e(tX,wWo),e(kF,AWo),e(V,yWo),e(V,SF),e(SF,Mpe),e(Mpe,LWo),e(SF,xWo),e(SF,aX),e(aX,$Wo),e(SF,kWo),e(V,SWo),e(V,RF),e(RF,Epe),e(Epe,RWo),e(RF,PWo),e(RF,nX),e(nX,BWo),e(RF,IWo),e(V,NWo),e(V,PF),e(PF,Cpe),e(Cpe,qWo),e(PF,jWo),e(PF,sX),e(sX,DWo),e(PF,GWo),e(V,OWo),e(V,BF),e(BF,wpe),e(wpe,VWo),e(BF,XWo),e(BF,lX),e(lX,zWo),e(BF,WWo),e(V,QWo),e(V,IF),e(IF,Ape),e(Ape,HWo),e(IF,UWo),e(IF,iX),e(iX,JWo),e(IF,YWo),e(V,KWo),e(V,NF),e(NF,ype),e(ype,ZWo),e(NF,eQo),e(NF,dX),e(dX,oQo),e(NF,rQo),e(V,tQo),e(V,qF),e(qF,Lpe),e(Lpe,aQo),e(qF,nQo),e(qF,cX),e(cX,sQo),e(qF,lQo),e(V,iQo),e(V,jF),e(jF,xpe),e(xpe,dQo),e(jF,cQo),e(jF,fX),e(fX,fQo),e(jF,mQo),e(V,gQo),e(V,DF),e(DF,$pe),e($pe,hQo),e(DF,pQo),e(DF,mX),e(mX,_Qo),e(DF,uQo),e(V,bQo),e(V,GF),e(GF,kpe),e(kpe,vQo),e(GF,FQo),e(GF,gX),e(gX,TQo),e(GF,MQo),e(V,EQo),e(V,OF),e(OF,Spe),e(Spe,CQo),e(OF,wQo),e(OF,hX),e(hX,AQo),e(OF,yQo),e(V,LQo),e(V,VF),e(VF,Rpe),e(Rpe,xQo),e(VF,$Qo),e(VF,pX),e(pX,kQo),e(VF,SQo),e(V,RQo),e(V,XF),e(XF,Ppe),e(Ppe,PQo),e(XF,BQo),e(XF,_X),e(_X,IQo),e(XF,NQo),e(V,qQo),e(V,zF),e(zF,Bpe),e(Bpe,jQo),e(zF,DQo),e(zF,uX),e(uX,GQo),e(zF,OQo),e(V,VQo),e(V,WF),e(WF,Ipe),e(Ipe,XQo),e(WF,zQo),e(WF,bX),e(bX,WQo),e(WF,QQo),e(V,HQo),e(V,QF),e(QF,Npe),e(Npe,UQo),e(QF,JQo),e(QF,vX),e(vX,YQo),e(QF,KQo),e(V,ZQo),e(V,HF),e(HF,qpe),e(qpe,eHo),e(HF,oHo),e(HF,FX),e(FX,rHo),e(HF,tHo),e(V,aHo),e(V,UF),e(UF,jpe),e(jpe,nHo),e(UF,sHo),e(UF,TX),e(TX,lHo),e(UF,iHo),e(V,dHo),e(V,JF),e(JF,Dpe),e(Dpe,cHo),e(JF,fHo),e(JF,MX),e(MX,mHo),e(JF,gHo),e(V,hHo),e(V,YF),e(YF,Gpe),e(Gpe,pHo),e(YF,_Ho),e(YF,EX),e(EX,uHo),e(YF,bHo),e(V,vHo),e(V,KF),e(KF,Ope),e(Ope,FHo),e(KF,THo),e(KF,CX),e(CX,MHo),e(KF,EHo),e(V,CHo),e(V,ZF),e(ZF,Vpe),e(Vpe,wHo),e(ZF,AHo),e(ZF,wX),e(wX,yHo),e(ZF,LHo),e(V,xHo),e(V,e6),e(e6,Xpe),e(Xpe,$Ho),e(e6,kHo),e(e6,AX),e(AX,SHo),e(e6,RHo),e(V,PHo),e(V,o6),e(o6,zpe),e(zpe,BHo),e(o6,IHo),e(o6,yX),e(yX,NHo),e(o6,qHo),e(V,jHo),e(V,r6),e(r6,Wpe),e(Wpe,DHo),e(r6,GHo),e(r6,LX),e(LX,OHo),e(r6,VHo),e(no,XHo),e(no,t6),e(t6,zHo),e(t6,Qpe),e(Qpe,WHo),e(t6,QHo),e(t6,Hpe),e(Hpe,HHo),e(no,UHo),M(a6,no,null),b(f,cje,u),b(f,rd,u),e(rd,n6),e(n6,Upe),M(ty,Upe,null),e(rd,JHo),e(rd,Jpe),e(Jpe,YHo),b(f,fje,u),b(f,qo,u),M(ay,qo,null),e(qo,KHo),e(qo,td),e(td,ZHo),e(td,xX),e(xX,eUo),e(td,oUo),e(td,$X),e($X,rUo),e(td,tUo),e(qo,aUo),e(qo,ny),e(ny,nUo),e(ny,Ype),e(Ype,sUo),e(ny,lUo),e(qo,iUo),e(qo,gt),M(sy,gt,null),e(gt,dUo),e(gt,Kpe),e(Kpe,cUo),e(gt,fUo),e(gt,ad),e(ad,mUo),e(ad,Zpe),e(Zpe,gUo),e(ad,hUo),e(ad,kX),e(kX,pUo),e(ad,_Uo),e(gt,uUo),M(s6,gt,null),e(qo,bUo),e(qo,so),M(ly,so,null),e(so,vUo),e(so,e_e),e(e_e,FUo),e(so,TUo),e(so,qa),e(qa,MUo),e(qa,o_e),e(o_e,EUo),e(qa,CUo),e(qa,r_e),e(r_e,wUo),e(qa,AUo),e(qa,t_e),e(t_e,yUo),e(qa,LUo),e(so,xUo),e(so,a_e),e(a_e,l6),e(l6,n_e),e(n_e,$Uo),e(l6,kUo),e(l6,SX),e(SX,SUo),e(l6,RUo),e(so,PUo),e(so,i6),e(i6,BUo),e(i6,s_e),e(s_e,IUo),e(i6,NUo),e(i6,l_e),e(l_e,qUo),e(so,jUo),M(d6,so,null),b(f,mje,u),b(f,nd,u),e(nd,c6),e(c6,i_e),M(iy,i_e,null),e(nd,DUo),e(nd,d_e),e(d_e,GUo),b(f,gje,u),b(f,jo,u),M(dy,jo,null),e(jo,OUo),e(jo,sd),e(sd,VUo),e(sd,RX),e(RX,XUo),e(sd,zUo),e(sd,PX),e(PX,WUo),e(sd,QUo),e(jo,HUo),e(jo,cy),e(cy,UUo),e(cy,c_e),e(c_e,JUo),e(cy,YUo),e(jo,KUo),e(jo,ht),M(fy,ht,null),e(ht,ZUo),e(ht,f_e),e(f_e,eJo),e(ht,oJo),e(ht,ld),e(ld,rJo),e(ld,m_e),e(m_e,tJo),e(ld,aJo),e(ld,BX),e(BX,nJo),e(ld,sJo),e(ht,lJo),M(f6,ht,null),e(jo,iJo),e(jo,lo),M(my,lo,null),e(lo,dJo),e(lo,g_e),e(g_e,cJo),e(lo,fJo),e(lo,ja),e(ja,mJo),e(ja,h_e),e(h_e,gJo),e(ja,hJo),e(ja,p_e),e(p_e,pJo),e(ja,_Jo),e(ja,__e),e(__e,uJo),e(ja,bJo),e(lo,vJo),e(lo,Fe),e(Fe,m6),e(m6,u_e),e(u_e,FJo),e(m6,TJo),e(m6,IX),e(IX,MJo),e(m6,EJo),e(Fe,CJo),e(Fe,g6),e(g6,b_e),e(b_e,wJo),e(g6,AJo),e(g6,NX),e(NX,yJo),e(g6,LJo),e(Fe,xJo),e(Fe,h6),e(h6,v_e),e(v_e,$Jo),e(h6,kJo),e(h6,qX),e(qX,SJo),e(h6,RJo),e(Fe,PJo),e(Fe,p6),e(p6,F_e),e(F_e,BJo),e(p6,IJo),e(p6,jX),e(jX,NJo),e(p6,qJo),e(Fe,jJo),e(Fe,Is),e(Is,T_e),e(T_e,DJo),e(Is,GJo),e(Is,DX),e(DX,OJo),e(Is,VJo),e(Is,GX),e(GX,XJo),e(Is,zJo),e(Fe,WJo),e(Fe,_6),e(_6,M_e),e(M_e,QJo),e(_6,HJo),e(_6,OX),e(OX,UJo),e(_6,JJo),e(Fe,YJo),e(Fe,pt),e(pt,E_e),e(E_e,KJo),e(pt,ZJo),e(pt,VX),e(VX,eYo),e(pt,oYo),e(pt,XX),e(XX,rYo),e(pt,tYo),e(pt,zX),e(zX,aYo),e(pt,nYo),e(Fe,sYo),e(Fe,u6),e(u6,C_e),e(C_e,lYo),e(u6,iYo),e(u6,WX),e(WX,dYo),e(u6,cYo),e(Fe,fYo),e(Fe,b6),e(b6,w_e),e(w_e,mYo),e(b6,gYo),e(b6,QX),e(QX,hYo),e(b6,pYo),e(Fe,_Yo),e(Fe,v6),e(v6,A_e),e(A_e,uYo),e(v6,bYo),e(v6,HX),e(HX,vYo),e(v6,FYo),e(Fe,TYo),e(Fe,F6),e(F6,y_e),e(y_e,MYo),e(F6,EYo),e(F6,UX),e(UX,CYo),e(F6,wYo),e(Fe,AYo),e(Fe,T6),e(T6,L_e),e(L_e,yYo),e(T6,LYo),e(T6,JX),e(JX,xYo),e(T6,$Yo),e(Fe,kYo),e(Fe,M6),e(M6,x_e),e(x_e,SYo),e(M6,RYo),e(M6,YX),e(YX,PYo),e(M6,BYo),e(Fe,IYo),e(Fe,E6),e(E6,$_e),e($_e,NYo),e(E6,qYo),e(E6,KX),e(KX,jYo),e(E6,DYo),e(lo,GYo),e(lo,C6),e(C6,OYo),e(C6,k_e),e(k_e,VYo),e(C6,XYo),e(C6,S_e),e(S_e,zYo),e(lo,WYo),M(w6,lo,null),b(f,hje,u),b(f,id,u),e(id,A6),e(A6,R_e),M(gy,R_e,null),e(id,QYo),e(id,P_e),e(P_e,HYo),b(f,pje,u),b(f,Do,u),M(hy,Do,null),e(Do,UYo),e(Do,dd),e(dd,JYo),e(dd,ZX),e(ZX,YYo),e(dd,KYo),e(dd,ez),e(ez,ZYo),e(dd,eKo),e(Do,oKo),e(Do,py),e(py,rKo),e(py,B_e),e(B_e,tKo),e(py,aKo),e(Do,nKo),e(Do,_t),M(_y,_t,null),e(_t,sKo),e(_t,I_e),e(I_e,lKo),e(_t,iKo),e(_t,cd),e(cd,dKo),e(cd,N_e),e(N_e,cKo),e(cd,fKo),e(cd,oz),e(oz,mKo),e(cd,gKo),e(_t,hKo),M(y6,_t,null),e(Do,pKo),e(Do,io),M(uy,io,null),e(io,_Ko),e(io,q_e),e(q_e,uKo),e(io,bKo),e(io,Da),e(Da,vKo),e(Da,j_e),e(j_e,FKo),e(Da,TKo),e(Da,D_e),e(D_e,MKo),e(Da,EKo),e(Da,G_e),e(G_e,CKo),e(Da,wKo),e(io,AKo),e(io,O_e),e(O_e,L6),e(L6,V_e),e(V_e,yKo),e(L6,LKo),e(L6,rz),e(rz,xKo),e(L6,$Ko),e(io,kKo),e(io,x6),e(x6,SKo),e(x6,X_e),e(X_e,RKo),e(x6,PKo),e(x6,z_e),e(z_e,BKo),e(io,IKo),M($6,io,null),b(f,_je,u),b(f,fd,u),e(fd,k6),e(k6,W_e),M(by,W_e,null),e(fd,NKo),e(fd,Q_e),e(Q_e,qKo),b(f,uje,u),b(f,Go,u),M(vy,Go,null),e(Go,jKo),e(Go,md),e(md,DKo),e(md,tz),e(tz,GKo),e(md,OKo),e(md,az),e(az,VKo),e(md,XKo),e(Go,zKo),e(Go,Fy),e(Fy,WKo),e(Fy,H_e),e(H_e,QKo),e(Fy,HKo),e(Go,UKo),e(Go,ut),M(Ty,ut,null),e(ut,JKo),e(ut,U_e),e(U_e,YKo),e(ut,KKo),e(ut,gd),e(gd,ZKo),e(gd,J_e),e(J_e,eZo),e(gd,oZo),e(gd,nz),e(nz,rZo),e(gd,tZo),e(ut,aZo),M(S6,ut,null),e(Go,nZo),e(Go,co),M(My,co,null),e(co,sZo),e(co,Y_e),e(Y_e,lZo),e(co,iZo),e(co,Ga),e(Ga,dZo),e(Ga,K_e),e(K_e,cZo),e(Ga,fZo),e(Ga,Z_e),e(Z_e,mZo),e(Ga,gZo),e(Ga,eue),e(eue,hZo),e(Ga,pZo),e(co,_Zo),e(co,Se),e(Se,R6),e(R6,oue),e(oue,uZo),e(R6,bZo),e(R6,sz),e(sz,vZo),e(R6,FZo),e(Se,TZo),e(Se,P6),e(P6,rue),e(rue,MZo),e(P6,EZo),e(P6,lz),e(lz,CZo),e(P6,wZo),e(Se,AZo),e(Se,B6),e(B6,tue),e(tue,yZo),e(B6,LZo),e(B6,iz),e(iz,xZo),e(B6,$Zo),e(Se,kZo),e(Se,I6),e(I6,aue),e(aue,SZo),e(I6,RZo),e(I6,dz),e(dz,PZo),e(I6,BZo),e(Se,IZo),e(Se,N6),e(N6,nue),e(nue,NZo),e(N6,qZo),e(N6,cz),e(cz,jZo),e(N6,DZo),e(Se,GZo),e(Se,q6),e(q6,sue),e(sue,OZo),e(q6,VZo),e(q6,fz),e(fz,XZo),e(q6,zZo),e(Se,WZo),e(Se,j6),e(j6,lue),e(lue,QZo),e(j6,HZo),e(j6,mz),e(mz,UZo),e(j6,JZo),e(Se,YZo),e(Se,D6),e(D6,iue),e(iue,KZo),e(D6,ZZo),e(D6,gz),e(gz,eer),e(D6,oer),e(Se,rer),e(Se,G6),e(G6,due),e(due,ter),e(G6,aer),e(G6,hz),e(hz,ner),e(G6,ser),e(co,ler),e(co,O6),e(O6,ier),e(O6,cue),e(cue,der),e(O6,cer),e(O6,fue),e(fue,fer),e(co,mer),M(V6,co,null),b(f,bje,u),b(f,hd,u),e(hd,X6),e(X6,mue),M(Ey,mue,null),e(hd,ger),e(hd,gue),e(gue,her),b(f,vje,u),b(f,Oo,u),M(Cy,Oo,null),e(Oo,per),e(Oo,pd),e(pd,_er),e(pd,pz),e(pz,uer),e(pd,ber),e(pd,_z),e(_z,ver),e(pd,Fer),e(Oo,Ter),e(Oo,wy),e(wy,Mer),e(wy,hue),e(hue,Eer),e(wy,Cer),e(Oo,wer),e(Oo,bt),M(Ay,bt,null),e(bt,Aer),e(bt,pue),e(pue,yer),e(bt,Ler),e(bt,_d),e(_d,xer),e(_d,_ue),e(_ue,$er),e(_d,ker),e(_d,uz),e(uz,Ser),e(_d,Rer),e(bt,Per),M(z6,bt,null),e(Oo,Ber),e(Oo,fo),M(yy,fo,null),e(fo,Ier),e(fo,uue),e(uue,Ner),e(fo,qer),e(fo,Oa),e(Oa,jer),e(Oa,bue),e(bue,Der),e(Oa,Ger),e(Oa,vue),e(vue,Oer),e(Oa,Ver),e(Oa,Fue),e(Fue,Xer),e(Oa,zer),e(fo,Wer),e(fo,Kr),e(Kr,W6),e(W6,Tue),e(Tue,Qer),e(W6,Her),e(W6,bz),e(bz,Uer),e(W6,Jer),e(Kr,Yer),e(Kr,Q6),e(Q6,Mue),e(Mue,Ker),e(Q6,Zer),e(Q6,vz),e(vz,eor),e(Q6,oor),e(Kr,ror),e(Kr,H6),e(H6,Eue),e(Eue,tor),e(H6,aor),e(H6,Fz),e(Fz,nor),e(H6,sor),e(Kr,lor),e(Kr,U6),e(U6,Cue),e(Cue,ior),e(U6,dor),e(U6,Tz),e(Tz,cor),e(U6,mor),e(Kr,gor),e(Kr,J6),e(J6,wue),e(wue,hor),e(J6,por),e(J6,Mz),e(Mz,_or),e(J6,uor),e(fo,bor),e(fo,Y6),e(Y6,vor),e(Y6,Aue),e(Aue,For),e(Y6,Tor),e(Y6,yue),e(yue,Mor),e(fo,Eor),M(K6,fo,null),b(f,Fje,u),b(f,ud,u),e(ud,Z6),e(Z6,Lue),M(Ly,Lue,null),e(ud,Cor),e(ud,xue),e(xue,wor),b(f,Tje,u),b(f,Vo,u),M(xy,Vo,null),e(Vo,Aor),e(Vo,bd),e(bd,yor),e(bd,Ez),e(Ez,Lor),e(bd,xor),e(bd,Cz),e(Cz,$or),e(bd,kor),e(Vo,Sor),e(Vo,$y),e($y,Ror),e($y,$ue),e($ue,Por),e($y,Bor),e(Vo,Ior),e(Vo,vt),M(ky,vt,null),e(vt,Nor),e(vt,kue),e(kue,qor),e(vt,jor),e(vt,vd),e(vd,Dor),e(vd,Sue),e(Sue,Gor),e(vd,Oor),e(vd,wz),e(wz,Vor),e(vd,Xor),e(vt,zor),M(eT,vt,null),e(Vo,Wor),e(Vo,mo),M(Sy,mo,null),e(mo,Qor),e(mo,Rue),e(Rue,Hor),e(mo,Uor),e(mo,Va),e(Va,Jor),e(Va,Pue),e(Pue,Yor),e(Va,Kor),e(Va,Bue),e(Bue,Zor),e(Va,err),e(Va,Iue),e(Iue,orr),e(Va,rrr),e(mo,trr),e(mo,Re),e(Re,oT),e(oT,Nue),e(Nue,arr),e(oT,nrr),e(oT,Az),e(Az,srr),e(oT,lrr),e(Re,irr),e(Re,rT),e(rT,que),e(que,drr),e(rT,crr),e(rT,yz),e(yz,frr),e(rT,mrr),e(Re,grr),e(Re,tT),e(tT,jue),e(jue,hrr),e(tT,prr),e(tT,Lz),e(Lz,_rr),e(tT,urr),e(Re,brr),e(Re,aT),e(aT,Due),e(Due,vrr),e(aT,Frr),e(aT,xz),e(xz,Trr),e(aT,Mrr),e(Re,Err),e(Re,nT),e(nT,Gue),e(Gue,Crr),e(nT,wrr),e(nT,$z),e($z,Arr),e(nT,yrr),e(Re,Lrr),e(Re,sT),e(sT,Oue),e(Oue,xrr),e(sT,$rr),e(sT,kz),e(kz,krr),e(sT,Srr),e(Re,Rrr),e(Re,lT),e(lT,Vue),e(Vue,Prr),e(lT,Brr),e(lT,Sz),e(Sz,Irr),e(lT,Nrr),e(Re,qrr),e(Re,iT),e(iT,Xue),e(Xue,jrr),e(iT,Drr),e(iT,Rz),e(Rz,Grr),e(iT,Orr),e(Re,Vrr),e(Re,dT),e(dT,zue),e(zue,Xrr),e(dT,zrr),e(dT,Pz),e(Pz,Wrr),e(dT,Qrr),e(mo,Hrr),e(mo,cT),e(cT,Urr),e(cT,Wue),e(Wue,Jrr),e(cT,Yrr),e(cT,Que),e(Que,Krr),e(mo,Zrr),M(fT,mo,null),b(f,Mje,u),b(f,Fd,u),e(Fd,mT),e(mT,Hue),M(Ry,Hue,null),e(Fd,etr),e(Fd,Uue),e(Uue,otr),b(f,Eje,u),b(f,Xo,u),M(Py,Xo,null),e(Xo,rtr),e(Xo,Td),e(Td,ttr),e(Td,Bz),e(Bz,atr),e(Td,ntr),e(Td,Iz),e(Iz,str),e(Td,ltr),e(Xo,itr),e(Xo,By),e(By,dtr),e(By,Jue),e(Jue,ctr),e(By,ftr),e(Xo,mtr),e(Xo,Ft),M(Iy,Ft,null),e(Ft,gtr),e(Ft,Yue),e(Yue,htr),e(Ft,ptr),e(Ft,Md),e(Md,_tr),e(Md,Kue),e(Kue,utr),e(Md,btr),e(Md,Nz),e(Nz,vtr),e(Md,Ftr),e(Ft,Ttr),M(gT,Ft,null),e(Xo,Mtr),e(Xo,go),M(Ny,go,null),e(go,Etr),e(go,Zue),e(Zue,Ctr),e(go,wtr),e(go,Xa),e(Xa,Atr),e(Xa,e2e),e(e2e,ytr),e(Xa,Ltr),e(Xa,o2e),e(o2e,xtr),e(Xa,$tr),e(Xa,r2e),e(r2e,ktr),e(Xa,Str),e(go,Rtr),e(go,qy),e(qy,hT),e(hT,t2e),e(t2e,Ptr),e(hT,Btr),e(hT,qz),e(qz,Itr),e(hT,Ntr),e(qy,qtr),e(qy,pT),e(pT,a2e),e(a2e,jtr),e(pT,Dtr),e(pT,jz),e(jz,Gtr),e(pT,Otr),e(go,Vtr),e(go,_T),e(_T,Xtr),e(_T,n2e),e(n2e,ztr),e(_T,Wtr),e(_T,s2e),e(s2e,Qtr),e(go,Htr),M(uT,go,null),b(f,Cje,u),b(f,Ed,u),e(Ed,bT),e(bT,l2e),M(jy,l2e,null),e(Ed,Utr),e(Ed,i2e),e(i2e,Jtr),b(f,wje,u),b(f,zo,u),M(Dy,zo,null),e(zo,Ytr),e(zo,Cd),e(Cd,Ktr),e(Cd,Dz),e(Dz,Ztr),e(Cd,ear),e(Cd,Gz),e(Gz,oar),e(Cd,rar),e(zo,tar),e(zo,Gy),e(Gy,aar),e(Gy,d2e),e(d2e,nar),e(Gy,sar),e(zo,lar),e(zo,Tt),M(Oy,Tt,null),e(Tt,iar),e(Tt,c2e),e(c2e,dar),e(Tt,car),e(Tt,wd),e(wd,far),e(wd,f2e),e(f2e,mar),e(wd,gar),e(wd,Oz),e(Oz,har),e(wd,par),e(Tt,_ar),M(vT,Tt,null),e(zo,uar),e(zo,ho),M(Vy,ho,null),e(ho,bar),e(ho,m2e),e(m2e,Far),e(ho,Tar),e(ho,za),e(za,Mar),e(za,g2e),e(g2e,Ear),e(za,Car),e(za,h2e),e(h2e,war),e(za,Aar),e(za,p2e),e(p2e,yar),e(za,Lar),e(ho,xar),e(ho,Zr),e(Zr,FT),e(FT,_2e),e(_2e,$ar),e(FT,kar),e(FT,Vz),e(Vz,Sar),e(FT,Rar),e(Zr,Par),e(Zr,TT),e(TT,u2e),e(u2e,Bar),e(TT,Iar),e(TT,Xz),e(Xz,Nar),e(TT,qar),e(Zr,jar),e(Zr,MT),e(MT,b2e),e(b2e,Dar),e(MT,Gar),e(MT,zz),e(zz,Oar),e(MT,Var),e(Zr,Xar),e(Zr,ET),e(ET,v2e),e(v2e,zar),e(ET,War),e(ET,Wz),e(Wz,Qar),e(ET,Har),e(Zr,Uar),e(Zr,CT),e(CT,F2e),e(F2e,Jar),e(CT,Yar),e(CT,Qz),e(Qz,Kar),e(CT,Zar),e(ho,enr),e(ho,wT),e(wT,onr),e(wT,T2e),e(T2e,rnr),e(wT,tnr),e(wT,M2e),e(M2e,anr),e(ho,nnr),M(AT,ho,null),b(f,Aje,u),b(f,Ad,u),e(Ad,yT),e(yT,E2e),M(Xy,E2e,null),e(Ad,snr),e(Ad,C2e),e(C2e,lnr),b(f,yje,u),b(f,Wo,u),M(zy,Wo,null),e(Wo,inr),e(Wo,yd),e(yd,dnr),e(yd,Hz),e(Hz,cnr),e(yd,fnr),e(yd,Uz),e(Uz,mnr),e(yd,gnr),e(Wo,hnr),e(Wo,Wy),e(Wy,pnr),e(Wy,w2e),e(w2e,_nr),e(Wy,unr),e(Wo,bnr),e(Wo,Mt),M(Qy,Mt,null),e(Mt,vnr),e(Mt,A2e),e(A2e,Fnr),e(Mt,Tnr),e(Mt,Ld),e(Ld,Mnr),e(Ld,y2e),e(y2e,Enr),e(Ld,Cnr),e(Ld,Jz),e(Jz,wnr),e(Ld,Anr),e(Mt,ynr),M(LT,Mt,null),e(Wo,Lnr),e(Wo,po),M(Hy,po,null),e(po,xnr),e(po,L2e),e(L2e,$nr),e(po,knr),e(po,Wa),e(Wa,Snr),e(Wa,x2e),e(x2e,Rnr),e(Wa,Pnr),e(Wa,$2e),e($2e,Bnr),e(Wa,Inr),e(Wa,k2e),e(k2e,Nnr),e(Wa,qnr),e(po,jnr),e(po,xd),e(xd,xT),e(xT,S2e),e(S2e,Dnr),e(xT,Gnr),e(xT,Yz),e(Yz,Onr),e(xT,Vnr),e(xd,Xnr),e(xd,$T),e($T,R2e),e(R2e,znr),e($T,Wnr),e($T,Kz),e(Kz,Qnr),e($T,Hnr),e(xd,Unr),e(xd,kT),e(kT,P2e),e(P2e,Jnr),e(kT,Ynr),e(kT,Zz),e(Zz,Knr),e(kT,Znr),e(po,esr),e(po,ST),e(ST,osr),e(ST,B2e),e(B2e,rsr),e(ST,tsr),e(ST,I2e),e(I2e,asr),e(po,nsr),M(RT,po,null),b(f,Lje,u),b(f,$d,u),e($d,PT),e(PT,N2e),M(Uy,N2e,null),e($d,ssr),e($d,q2e),e(q2e,lsr),b(f,xje,u),b(f,Qo,u),M(Jy,Qo,null),e(Qo,isr),e(Qo,kd),e(kd,dsr),e(kd,eW),e(eW,csr),e(kd,fsr),e(kd,oW),e(oW,msr),e(kd,gsr),e(Qo,hsr),e(Qo,Yy),e(Yy,psr),e(Yy,j2e),e(j2e,_sr),e(Yy,usr),e(Qo,bsr),e(Qo,Et),M(Ky,Et,null),e(Et,vsr),e(Et,D2e),e(D2e,Fsr),e(Et,Tsr),e(Et,Sd),e(Sd,Msr),e(Sd,G2e),e(G2e,Esr),e(Sd,Csr),e(Sd,rW),e(rW,wsr),e(Sd,Asr),e(Et,ysr),M(BT,Et,null),e(Qo,Lsr),e(Qo,_o),M(Zy,_o,null),e(_o,xsr),e(_o,O2e),e(O2e,$sr),e(_o,ksr),e(_o,Qa),e(Qa,Ssr),e(Qa,V2e),e(V2e,Rsr),e(Qa,Psr),e(Qa,X2e),e(X2e,Bsr),e(Qa,Isr),e(Qa,z2e),e(z2e,Nsr),e(Qa,qsr),e(_o,jsr),e(_o,eL),e(eL,IT),e(IT,W2e),e(W2e,Dsr),e(IT,Gsr),e(IT,tW),e(tW,Osr),e(IT,Vsr),e(eL,Xsr),e(eL,NT),e(NT,Q2e),e(Q2e,zsr),e(NT,Wsr),e(NT,aW),e(aW,Qsr),e(NT,Hsr),e(_o,Usr),e(_o,qT),e(qT,Jsr),e(qT,H2e),e(H2e,Ysr),e(qT,Ksr),e(qT,U2e),e(U2e,Zsr),e(_o,elr),M(jT,_o,null),b(f,$je,u),b(f,Rd,u),e(Rd,DT),e(DT,J2e),M(oL,J2e,null),e(Rd,olr),e(Rd,Y2e),e(Y2e,rlr),b(f,kje,u),b(f,Ho,u),M(rL,Ho,null),e(Ho,tlr),e(Ho,Pd),e(Pd,alr),e(Pd,nW),e(nW,nlr),e(Pd,slr),e(Pd,sW),e(sW,llr),e(Pd,ilr),e(Ho,dlr),e(Ho,tL),e(tL,clr),e(tL,K2e),e(K2e,flr),e(tL,mlr),e(Ho,glr),e(Ho,Ct),M(aL,Ct,null),e(Ct,hlr),e(Ct,Z2e),e(Z2e,plr),e(Ct,_lr),e(Ct,Bd),e(Bd,ulr),e(Bd,e1e),e(e1e,blr),e(Bd,vlr),e(Bd,lW),e(lW,Flr),e(Bd,Tlr),e(Ct,Mlr),M(GT,Ct,null),e(Ho,Elr),e(Ho,uo),M(nL,uo,null),e(uo,Clr),e(uo,o1e),e(o1e,wlr),e(uo,Alr),e(uo,Ha),e(Ha,ylr),e(Ha,r1e),e(r1e,Llr),e(Ha,xlr),e(Ha,t1e),e(t1e,$lr),e(Ha,klr),e(Ha,a1e),e(a1e,Slr),e(Ha,Rlr),e(uo,Plr),e(uo,n1e),e(n1e,OT),e(OT,s1e),e(s1e,Blr),e(OT,Ilr),e(OT,iW),e(iW,Nlr),e(OT,qlr),e(uo,jlr),e(uo,VT),e(VT,Dlr),e(VT,l1e),e(l1e,Glr),e(VT,Olr),e(VT,i1e),e(i1e,Vlr),e(uo,Xlr),M(XT,uo,null),b(f,Sje,u),b(f,Id,u),e(Id,zT),e(zT,d1e),M(sL,d1e,null),e(Id,zlr),e(Id,c1e),e(c1e,Wlr),b(f,Rje,u),b(f,Uo,u),M(lL,Uo,null),e(Uo,Qlr),e(Uo,Nd),e(Nd,Hlr),e(Nd,dW),e(dW,Ulr),e(Nd,Jlr),e(Nd,cW),e(cW,Ylr),e(Nd,Klr),e(Uo,Zlr),e(Uo,iL),e(iL,eir),e(iL,f1e),e(f1e,oir),e(iL,rir),e(Uo,tir),e(Uo,wt),M(dL,wt,null),e(wt,air),e(wt,m1e),e(m1e,nir),e(wt,sir),e(wt,qd),e(qd,lir),e(qd,g1e),e(g1e,iir),e(qd,dir),e(qd,fW),e(fW,cir),e(qd,fir),e(wt,mir),M(WT,wt,null),e(Uo,gir),e(Uo,bo),M(cL,bo,null),e(bo,hir),e(bo,h1e),e(h1e,pir),e(bo,_ir),e(bo,Ua),e(Ua,uir),e(Ua,p1e),e(p1e,bir),e(Ua,vir),e(Ua,_1e),e(_1e,Fir),e(Ua,Tir),e(Ua,u1e),e(u1e,Mir),e(Ua,Eir),e(bo,Cir),e(bo,Ja),e(Ja,QT),e(QT,b1e),e(b1e,wir),e(QT,Air),e(QT,mW),e(mW,yir),e(QT,Lir),e(Ja,xir),e(Ja,HT),e(HT,v1e),e(v1e,$ir),e(HT,kir),e(HT,gW),e(gW,Sir),e(HT,Rir),e(Ja,Pir),e(Ja,UT),e(UT,F1e),e(F1e,Bir),e(UT,Iir),e(UT,hW),e(hW,Nir),e(UT,qir),e(Ja,jir),e(Ja,JT),e(JT,T1e),e(T1e,Dir),e(JT,Gir),e(JT,pW),e(pW,Oir),e(JT,Vir),e(bo,Xir),e(bo,YT),e(YT,zir),e(YT,M1e),e(M1e,Wir),e(YT,Qir),e(YT,E1e),e(E1e,Hir),e(bo,Uir),M(KT,bo,null),b(f,Pje,u),b(f,jd,u),e(jd,ZT),e(ZT,C1e),M(fL,C1e,null),e(jd,Jir),e(jd,w1e),e(w1e,Yir),b(f,Bje,u),b(f,Jo,u),M(mL,Jo,null),e(Jo,Kir),e(Jo,Dd),e(Dd,Zir),e(Dd,_W),e(_W,edr),e(Dd,odr),e(Dd,uW),e(uW,rdr),e(Dd,tdr),e(Jo,adr),e(Jo,gL),e(gL,ndr),e(gL,A1e),e(A1e,sdr),e(gL,ldr),e(Jo,idr),e(Jo,At),M(hL,At,null),e(At,ddr),e(At,y1e),e(y1e,cdr),e(At,fdr),e(At,Gd),e(Gd,mdr),e(Gd,L1e),e(L1e,gdr),e(Gd,hdr),e(Gd,bW),e(bW,pdr),e(Gd,_dr),e(At,udr),M(e7,At,null),e(Jo,bdr),e(Jo,vo),M(pL,vo,null),e(vo,vdr),e(vo,x1e),e(x1e,Fdr),e(vo,Tdr),e(vo,Ya),e(Ya,Mdr),e(Ya,$1e),e($1e,Edr),e(Ya,Cdr),e(Ya,k1e),e(k1e,wdr),e(Ya,Adr),e(Ya,S1e),e(S1e,ydr),e(Ya,Ldr),e(vo,xdr),e(vo,R1e),e(R1e,o7),e(o7,P1e),e(P1e,$dr),e(o7,kdr),e(o7,vW),e(vW,Sdr),e(o7,Rdr),e(vo,Pdr),e(vo,r7),e(r7,Bdr),e(r7,B1e),e(B1e,Idr),e(r7,Ndr),e(r7,I1e),e(I1e,qdr),e(vo,jdr),M(t7,vo,null),b(f,Ije,u),b(f,Od,u),e(Od,a7),e(a7,N1e),M(_L,N1e,null),e(Od,Ddr),e(Od,q1e),e(q1e,Gdr),b(f,Nje,u),b(f,Yo,u),M(uL,Yo,null),e(Yo,Odr),e(Yo,Vd),e(Vd,Vdr),e(Vd,FW),e(FW,Xdr),e(Vd,zdr),e(Vd,TW),e(TW,Wdr),e(Vd,Qdr),e(Yo,Hdr),e(Yo,bL),e(bL,Udr),e(bL,j1e),e(j1e,Jdr),e(bL,Ydr),e(Yo,Kdr),e(Yo,yt),M(vL,yt,null),e(yt,Zdr),e(yt,D1e),e(D1e,ecr),e(yt,ocr),e(yt,Xd),e(Xd,rcr),e(Xd,G1e),e(G1e,tcr),e(Xd,acr),e(Xd,MW),e(MW,ncr),e(Xd,scr),e(yt,lcr),M(n7,yt,null),e(Yo,icr),e(Yo,wr),M(FL,wr,null),e(wr,dcr),e(wr,O1e),e(O1e,ccr),e(wr,fcr),e(wr,Ka),e(Ka,mcr),e(Ka,V1e),e(V1e,gcr),e(Ka,hcr),e(Ka,X1e),e(X1e,pcr),e(Ka,_cr),e(Ka,z1e),e(z1e,ucr),e(Ka,bcr),e(wr,vcr),e(wr,q),e(q,s7),e(s7,W1e),e(W1e,Fcr),e(s7,Tcr),e(s7,EW),e(EW,Mcr),e(s7,Ecr),e(q,Ccr),e(q,l7),e(l7,Q1e),e(Q1e,wcr),e(l7,Acr),e(l7,CW),e(CW,ycr),e(l7,Lcr),e(q,xcr),e(q,i7),e(i7,H1e),e(H1e,$cr),e(i7,kcr),e(i7,wW),e(wW,Scr),e(i7,Rcr),e(q,Pcr),e(q,d7),e(d7,U1e),e(U1e,Bcr),e(d7,Icr),e(d7,AW),e(AW,Ncr),e(d7,qcr),e(q,jcr),e(q,c7),e(c7,J1e),e(J1e,Dcr),e(c7,Gcr),e(c7,yW),e(yW,Ocr),e(c7,Vcr),e(q,Xcr),e(q,f7),e(f7,Y1e),e(Y1e,zcr),e(f7,Wcr),e(f7,LW),e(LW,Qcr),e(f7,Hcr),e(q,Ucr),e(q,m7),e(m7,K1e),e(K1e,Jcr),e(m7,Ycr),e(m7,xW),e(xW,Kcr),e(m7,Zcr),e(q,efr),e(q,g7),e(g7,Z1e),e(Z1e,ofr),e(g7,rfr),e(g7,$W),e($W,tfr),e(g7,afr),e(q,nfr),e(q,h7),e(h7,ebe),e(ebe,sfr),e(h7,lfr),e(h7,kW),e(kW,ifr),e(h7,dfr),e(q,cfr),e(q,p7),e(p7,obe),e(obe,ffr),e(p7,mfr),e(p7,SW),e(SW,gfr),e(p7,hfr),e(q,pfr),e(q,_7),e(_7,rbe),e(rbe,_fr),e(_7,ufr),e(_7,RW),e(RW,bfr),e(_7,vfr),e(q,Ffr),e(q,u7),e(u7,tbe),e(tbe,Tfr),e(u7,Mfr),e(u7,PW),e(PW,Efr),e(u7,Cfr),e(q,wfr),e(q,b7),e(b7,abe),e(abe,Afr),e(b7,yfr),e(b7,BW),e(BW,Lfr),e(b7,xfr),e(q,$fr),e(q,v7),e(v7,nbe),e(nbe,kfr),e(v7,Sfr),e(v7,IW),e(IW,Rfr),e(v7,Pfr),e(q,Bfr),e(q,F7),e(F7,sbe),e(sbe,Ifr),e(F7,Nfr),e(F7,NW),e(NW,qfr),e(F7,jfr),e(q,Dfr),e(q,T7),e(T7,lbe),e(lbe,Gfr),e(T7,Ofr),e(T7,qW),e(qW,Vfr),e(T7,Xfr),e(q,zfr),e(q,M7),e(M7,ibe),e(ibe,Wfr),e(M7,Qfr),e(M7,jW),e(jW,Hfr),e(M7,Ufr),e(q,Jfr),e(q,Ns),e(Ns,dbe),e(dbe,Yfr),e(Ns,Kfr),e(Ns,DW),e(DW,Zfr),e(Ns,emr),e(Ns,GW),e(GW,omr),e(Ns,rmr),e(q,tmr),e(q,E7),e(E7,cbe),e(cbe,amr),e(E7,nmr),e(E7,OW),e(OW,smr),e(E7,lmr),e(q,imr),e(q,C7),e(C7,fbe),e(fbe,dmr),e(C7,cmr),e(C7,VW),e(VW,fmr),e(C7,mmr),e(q,gmr),e(q,w7),e(w7,mbe),e(mbe,hmr),e(w7,pmr),e(w7,XW),e(XW,_mr),e(w7,umr),e(q,bmr),e(q,A7),e(A7,gbe),e(gbe,vmr),e(A7,Fmr),e(A7,zW),e(zW,Tmr),e(A7,Mmr),e(q,Emr),e(q,y7),e(y7,hbe),e(hbe,Cmr),e(y7,wmr),e(y7,WW),e(WW,Amr),e(y7,ymr),e(q,Lmr),e(q,L7),e(L7,pbe),e(pbe,xmr),e(L7,$mr),e(L7,QW),e(QW,kmr),e(L7,Smr),e(q,Rmr),e(q,x7),e(x7,_be),e(_be,Pmr),e(x7,Bmr),e(x7,HW),e(HW,Imr),e(x7,Nmr),e(q,qmr),e(q,$7),e($7,ube),e(ube,jmr),e($7,Dmr),e($7,UW),e(UW,Gmr),e($7,Omr),e(q,Vmr),e(q,k7),e(k7,bbe),e(bbe,Xmr),e(k7,zmr),e(k7,JW),e(JW,Wmr),e(k7,Qmr),e(q,Hmr),e(q,S7),e(S7,vbe),e(vbe,Umr),e(S7,Jmr),e(S7,YW),e(YW,Ymr),e(S7,Kmr),e(q,Zmr),e(q,R7),e(R7,Fbe),e(Fbe,egr),e(R7,ogr),e(R7,KW),e(KW,rgr),e(R7,tgr),e(q,agr),e(q,P7),e(P7,Tbe),e(Tbe,ngr),e(P7,sgr),e(P7,ZW),e(ZW,lgr),e(P7,igr),e(q,dgr),e(q,B7),e(B7,Mbe),e(Mbe,cgr),e(B7,fgr),e(B7,eQ),e(eQ,mgr),e(B7,ggr),e(q,hgr),e(q,I7),e(I7,Ebe),e(Ebe,pgr),e(I7,_gr),e(I7,oQ),e(oQ,ugr),e(I7,bgr),e(q,vgr),e(q,N7),e(N7,Cbe),e(Cbe,Fgr),e(N7,Tgr),e(N7,rQ),e(rQ,Mgr),e(N7,Egr),e(q,Cgr),e(q,q7),e(q7,wbe),e(wbe,wgr),e(q7,Agr),e(q7,tQ),e(tQ,ygr),e(q7,Lgr),e(q,xgr),e(q,j7),e(j7,Abe),e(Abe,$gr),e(j7,kgr),e(j7,aQ),e(aQ,Sgr),e(j7,Rgr),e(q,Pgr),e(q,D7),e(D7,ybe),e(ybe,Bgr),e(D7,Igr),e(D7,nQ),e(nQ,Ngr),e(D7,qgr),e(q,jgr),e(q,G7),e(G7,Lbe),e(Lbe,Dgr),e(G7,Ggr),e(G7,sQ),e(sQ,Ogr),e(G7,Vgr),e(q,Xgr),e(q,O7),e(O7,xbe),e(xbe,zgr),e(O7,Wgr),e(O7,lQ),e(lQ,Qgr),e(O7,Hgr),e(q,Ugr),e(q,V7),e(V7,$be),e($be,Jgr),e(V7,Ygr),e(V7,iQ),e(iQ,Kgr),e(V7,Zgr),e(q,ehr),e(q,X7),e(X7,kbe),e(kbe,ohr),e(X7,rhr),e(X7,dQ),e(dQ,thr),e(X7,ahr),e(q,nhr),e(q,z7),e(z7,Sbe),e(Sbe,shr),e(z7,lhr),e(z7,cQ),e(cQ,ihr),e(z7,dhr),e(q,chr),e(q,W7),e(W7,Rbe),e(Rbe,fhr),e(W7,mhr),e(W7,fQ),e(fQ,ghr),e(W7,hhr),e(q,phr),e(q,Q7),e(Q7,Pbe),e(Pbe,_hr),e(Q7,uhr),e(Q7,mQ),e(mQ,bhr),e(Q7,vhr),e(q,Fhr),e(q,H7),e(H7,Bbe),e(Bbe,Thr),e(H7,Mhr),e(H7,gQ),e(gQ,Ehr),e(H7,Chr),e(q,whr),e(q,U7),e(U7,Ibe),e(Ibe,Ahr),e(U7,yhr),e(U7,hQ),e(hQ,Lhr),e(U7,xhr),e(q,$hr),e(q,J7),e(J7,Nbe),e(Nbe,khr),e(J7,Shr),e(J7,pQ),e(pQ,Rhr),e(J7,Phr),e(wr,Bhr),M(Y7,wr,null),b(f,qje,u),b(f,zd,u),e(zd,K7),e(K7,qbe),M(TL,qbe,null),e(zd,Ihr),e(zd,jbe),e(jbe,Nhr),b(f,jje,u),b(f,Ko,u),M(ML,Ko,null),e(Ko,qhr),e(Ko,Wd),e(Wd,jhr),e(Wd,_Q),e(_Q,Dhr),e(Wd,Ghr),e(Wd,uQ),e(uQ,Ohr),e(Wd,Vhr),e(Ko,Xhr),e(Ko,EL),e(EL,zhr),e(EL,Dbe),e(Dbe,Whr),e(EL,Qhr),e(Ko,Hhr),e(Ko,Lt),M(CL,Lt,null),e(Lt,Uhr),e(Lt,Gbe),e(Gbe,Jhr),e(Lt,Yhr),e(Lt,Qd),e(Qd,Khr),e(Qd,Obe),e(Obe,Zhr),e(Qd,epr),e(Qd,bQ),e(bQ,opr),e(Qd,rpr),e(Lt,tpr),M(Z7,Lt,null),e(Ko,apr),e(Ko,Ar),M(wL,Ar,null),e(Ar,npr),e(Ar,Vbe),e(Vbe,spr),e(Ar,lpr),e(Ar,Za),e(Za,ipr),e(Za,Xbe),e(Xbe,dpr),e(Za,cpr),e(Za,zbe),e(zbe,fpr),e(Za,mpr),e(Za,Wbe),e(Wbe,gpr),e(Za,hpr),e(Ar,ppr),e(Ar,se),e(se,e9),e(e9,Qbe),e(Qbe,_pr),e(e9,upr),e(e9,vQ),e(vQ,bpr),e(e9,vpr),e(se,Fpr),e(se,o9),e(o9,Hbe),e(Hbe,Tpr),e(o9,Mpr),e(o9,FQ),e(FQ,Epr),e(o9,Cpr),e(se,wpr),e(se,r9),e(r9,Ube),e(Ube,Apr),e(r9,ypr),e(r9,TQ),e(TQ,Lpr),e(r9,xpr),e(se,$pr),e(se,t9),e(t9,Jbe),e(Jbe,kpr),e(t9,Spr),e(t9,MQ),e(MQ,Rpr),e(t9,Ppr),e(se,Bpr),e(se,a9),e(a9,Ybe),e(Ybe,Ipr),e(a9,Npr),e(a9,EQ),e(EQ,qpr),e(a9,jpr),e(se,Dpr),e(se,n9),e(n9,Kbe),e(Kbe,Gpr),e(n9,Opr),e(n9,CQ),e(CQ,Vpr),e(n9,Xpr),e(se,zpr),e(se,s9),e(s9,Zbe),e(Zbe,Wpr),e(s9,Qpr),e(s9,wQ),e(wQ,Hpr),e(s9,Upr),e(se,Jpr),e(se,l9),e(l9,eve),e(eve,Ypr),e(l9,Kpr),e(l9,AQ),e(AQ,Zpr),e(l9,e_r),e(se,o_r),e(se,i9),e(i9,ove),e(ove,r_r),e(i9,t_r),e(i9,yQ),e(yQ,a_r),e(i9,n_r),e(se,s_r),e(se,d9),e(d9,rve),e(rve,l_r),e(d9,i_r),e(d9,LQ),e(LQ,d_r),e(d9,c_r),e(se,f_r),e(se,c9),e(c9,tve),e(tve,m_r),e(c9,g_r),e(c9,xQ),e(xQ,h_r),e(c9,p_r),e(se,__r),e(se,f9),e(f9,ave),e(ave,u_r),e(f9,b_r),e(f9,$Q),e($Q,v_r),e(f9,F_r),e(se,T_r),e(se,m9),e(m9,nve),e(nve,M_r),e(m9,E_r),e(m9,kQ),e(kQ,C_r),e(m9,w_r),e(se,A_r),e(se,g9),e(g9,sve),e(sve,y_r),e(g9,L_r),e(g9,SQ),e(SQ,x_r),e(g9,$_r),e(se,k_r),e(se,h9),e(h9,lve),e(lve,S_r),e(h9,R_r),e(h9,RQ),e(RQ,P_r),e(h9,B_r),e(se,I_r),e(se,p9),e(p9,ive),e(ive,N_r),e(p9,q_r),e(p9,PQ),e(PQ,j_r),e(p9,D_r),e(se,G_r),e(se,_9),e(_9,dve),e(dve,O_r),e(_9,V_r),e(_9,BQ),e(BQ,X_r),e(_9,z_r),e(se,W_r),e(se,u9),e(u9,cve),e(cve,Q_r),e(u9,H_r),e(u9,IQ),e(IQ,U_r),e(u9,J_r),e(se,Y_r),e(se,b9),e(b9,fve),e(fve,K_r),e(b9,Z_r),e(b9,NQ),e(NQ,eur),e(b9,our),e(se,rur),e(se,v9),e(v9,mve),e(mve,tur),e(v9,aur),e(v9,qQ),e(qQ,nur),e(v9,sur),e(se,lur),e(se,F9),e(F9,gve),e(gve,iur),e(F9,dur),e(F9,jQ),e(jQ,cur),e(F9,fur),e(se,mur),e(se,T9),e(T9,hve),e(hve,gur),e(T9,hur),e(T9,DQ),e(DQ,pur),e(T9,_ur),e(se,uur),e(se,M9),e(M9,pve),e(pve,bur),e(M9,vur),e(M9,GQ),e(GQ,Fur),e(M9,Tur),e(Ar,Mur),M(E9,Ar,null),b(f,Dje,u),b(f,Hd,u),e(Hd,C9),e(C9,_ve),M(AL,_ve,null),e(Hd,Eur),e(Hd,uve),e(uve,Cur),b(f,Gje,u),b(f,Zo,u),M(yL,Zo,null),e(Zo,wur),e(Zo,Ud),e(Ud,Aur),e(Ud,OQ),e(OQ,yur),e(Ud,Lur),e(Ud,VQ),e(VQ,xur),e(Ud,$ur),e(Zo,kur),e(Zo,LL),e(LL,Sur),e(LL,bve),e(bve,Rur),e(LL,Pur),e(Zo,Bur),e(Zo,xt),M(xL,xt,null),e(xt,Iur),e(xt,vve),e(vve,Nur),e(xt,qur),e(xt,Jd),e(Jd,jur),e(Jd,Fve),e(Fve,Dur),e(Jd,Gur),e(Jd,XQ),e(XQ,Our),e(Jd,Vur),e(xt,Xur),M(w9,xt,null),e(Zo,zur),e(Zo,yr),M($L,yr,null),e(yr,Wur),e(yr,Tve),e(Tve,Qur),e(yr,Hur),e(yr,en),e(en,Uur),e(en,Mve),e(Mve,Jur),e(en,Yur),e(en,Eve),e(Eve,Kur),e(en,Zur),e(en,Cve),e(Cve,e2r),e(en,o2r),e(yr,r2r),e(yr,Ee),e(Ee,A9),e(A9,wve),e(wve,t2r),e(A9,a2r),e(A9,zQ),e(zQ,n2r),e(A9,s2r),e(Ee,l2r),e(Ee,y9),e(y9,Ave),e(Ave,i2r),e(y9,d2r),e(y9,WQ),e(WQ,c2r),e(y9,f2r),e(Ee,m2r),e(Ee,L9),e(L9,yve),e(yve,g2r),e(L9,h2r),e(L9,QQ),e(QQ,p2r),e(L9,_2r),e(Ee,u2r),e(Ee,x9),e(x9,Lve),e(Lve,b2r),e(x9,v2r),e(x9,HQ),e(HQ,F2r),e(x9,T2r),e(Ee,M2r),e(Ee,$9),e($9,xve),e(xve,E2r),e($9,C2r),e($9,UQ),e(UQ,w2r),e($9,A2r),e(Ee,y2r),e(Ee,k9),e(k9,$ve),e($ve,L2r),e(k9,x2r),e(k9,JQ),e(JQ,$2r),e(k9,k2r),e(Ee,S2r),e(Ee,S9),e(S9,kve),e(kve,R2r),e(S9,P2r),e(S9,YQ),e(YQ,B2r),e(S9,I2r),e(Ee,N2r),e(Ee,R9),e(R9,Sve),e(Sve,q2r),e(R9,j2r),e(R9,KQ),e(KQ,D2r),e(R9,G2r),e(Ee,O2r),e(Ee,P9),e(P9,Rve),e(Rve,V2r),e(P9,X2r),e(P9,ZQ),e(ZQ,z2r),e(P9,W2r),e(Ee,Q2r),e(Ee,B9),e(B9,Pve),e(Pve,H2r),e(B9,U2r),e(B9,eH),e(eH,J2r),e(B9,Y2r),e(Ee,K2r),e(Ee,I9),e(I9,Bve),e(Bve,Z2r),e(I9,e1r),e(I9,oH),e(oH,o1r),e(I9,r1r),e(Ee,t1r),e(Ee,N9),e(N9,Ive),e(Ive,a1r),e(N9,n1r),e(N9,rH),e(rH,s1r),e(N9,l1r),e(yr,i1r),M(q9,yr,null),b(f,Oje,u),b(f,Yd,u),e(Yd,j9),e(j9,Nve),M(kL,Nve,null),e(Yd,d1r),e(Yd,qve),e(qve,c1r),b(f,Vje,u),b(f,er,u),M(SL,er,null),e(er,f1r),e(er,Kd),e(Kd,m1r),e(Kd,tH),e(tH,g1r),e(Kd,h1r),e(Kd,aH),e(aH,p1r),e(Kd,_1r),e(er,u1r),e(er,RL),e(RL,b1r),e(RL,jve),e(jve,v1r),e(RL,F1r),e(er,T1r),e(er,$t),M(PL,$t,null),e($t,M1r),e($t,Dve),e(Dve,E1r),e($t,C1r),e($t,Zd),e(Zd,w1r),e(Zd,Gve),e(Gve,A1r),e(Zd,y1r),e(Zd,nH),e(nH,L1r),e(Zd,x1r),e($t,$1r),M(D9,$t,null),e(er,k1r),e(er,Lr),M(BL,Lr,null),e(Lr,S1r),e(Lr,Ove),e(Ove,R1r),e(Lr,P1r),e(Lr,on),e(on,B1r),e(on,Vve),e(Vve,I1r),e(on,N1r),e(on,Xve),e(Xve,q1r),e(on,j1r),e(on,zve),e(zve,D1r),e(on,G1r),e(Lr,O1r),e(Lr,rn),e(rn,G9),e(G9,Wve),e(Wve,V1r),e(G9,X1r),e(G9,sH),e(sH,z1r),e(G9,W1r),e(rn,Q1r),e(rn,O9),e(O9,Qve),e(Qve,H1r),e(O9,U1r),e(O9,lH),e(lH,J1r),e(O9,Y1r),e(rn,K1r),e(rn,V9),e(V9,Hve),e(Hve,Z1r),e(V9,ebr),e(V9,iH),e(iH,obr),e(V9,rbr),e(rn,tbr),e(rn,X9),e(X9,Uve),e(Uve,abr),e(X9,nbr),e(X9,dH),e(dH,sbr),e(X9,lbr),e(Lr,ibr),M(z9,Lr,null),b(f,Xje,u),b(f,ec,u),e(ec,W9),e(W9,Jve),M(IL,Jve,null),e(ec,dbr),e(ec,Yve),e(Yve,cbr),b(f,zje,u),b(f,or,u),M(NL,or,null),e(or,fbr),e(or,oc),e(oc,mbr),e(oc,cH),e(cH,gbr),e(oc,hbr),e(oc,fH),e(fH,pbr),e(oc,_br),e(or,ubr),e(or,qL),e(qL,bbr),e(qL,Kve),e(Kve,vbr),e(qL,Fbr),e(or,Tbr),e(or,kt),M(jL,kt,null),e(kt,Mbr),e(kt,Zve),e(Zve,Ebr),e(kt,Cbr),e(kt,rc),e(rc,wbr),e(rc,eFe),e(eFe,Abr),e(rc,ybr),e(rc,mH),e(mH,Lbr),e(rc,xbr),e(kt,$br),M(Q9,kt,null),e(or,kbr),e(or,xr),M(DL,xr,null),e(xr,Sbr),e(xr,oFe),e(oFe,Rbr),e(xr,Pbr),e(xr,tn),e(tn,Bbr),e(tn,rFe),e(rFe,Ibr),e(tn,Nbr),e(tn,tFe),e(tFe,qbr),e(tn,jbr),e(tn,aFe),e(aFe,Dbr),e(tn,Gbr),e(xr,Obr),e(xr,ie),e(ie,H9),e(H9,nFe),e(nFe,Vbr),e(H9,Xbr),e(H9,gH),e(gH,zbr),e(H9,Wbr),e(ie,Qbr),e(ie,U9),e(U9,sFe),e(sFe,Hbr),e(U9,Ubr),e(U9,hH),e(hH,Jbr),e(U9,Ybr),e(ie,Kbr),e(ie,J9),e(J9,lFe),e(lFe,Zbr),e(J9,evr),e(J9,pH),e(pH,ovr),e(J9,rvr),e(ie,tvr),e(ie,Y9),e(Y9,iFe),e(iFe,avr),e(Y9,nvr),e(Y9,_H),e(_H,svr),e(Y9,lvr),e(ie,ivr),e(ie,K9),e(K9,dFe),e(dFe,dvr),e(K9,cvr),e(K9,uH),e(uH,fvr),e(K9,mvr),e(ie,gvr),e(ie,Z9),e(Z9,cFe),e(cFe,hvr),e(Z9,pvr),e(Z9,bH),e(bH,_vr),e(Z9,uvr),e(ie,bvr),e(ie,eM),e(eM,fFe),e(fFe,vvr),e(eM,Fvr),e(eM,vH),e(vH,Tvr),e(eM,Mvr),e(ie,Evr),e(ie,oM),e(oM,mFe),e(mFe,Cvr),e(oM,wvr),e(oM,FH),e(FH,Avr),e(oM,yvr),e(ie,Lvr),e(ie,rM),e(rM,gFe),e(gFe,xvr),e(rM,$vr),e(rM,TH),e(TH,kvr),e(rM,Svr),e(ie,Rvr),e(ie,tM),e(tM,hFe),e(hFe,Pvr),e(tM,Bvr),e(tM,MH),e(MH,Ivr),e(tM,Nvr),e(ie,qvr),e(ie,aM),e(aM,pFe),e(pFe,jvr),e(aM,Dvr),e(aM,EH),e(EH,Gvr),e(aM,Ovr),e(ie,Vvr),e(ie,nM),e(nM,_Fe),e(_Fe,Xvr),e(nM,zvr),e(nM,CH),e(CH,Wvr),e(nM,Qvr),e(ie,Hvr),e(ie,sM),e(sM,uFe),e(uFe,Uvr),e(sM,Jvr),e(sM,wH),e(wH,Yvr),e(sM,Kvr),e(ie,Zvr),e(ie,lM),e(lM,bFe),e(bFe,eFr),e(lM,oFr),e(lM,AH),e(AH,rFr),e(lM,tFr),e(ie,aFr),e(ie,iM),e(iM,vFe),e(vFe,nFr),e(iM,sFr),e(iM,yH),e(yH,lFr),e(iM,iFr),e(ie,dFr),e(ie,dM),e(dM,FFe),e(FFe,cFr),e(dM,fFr),e(dM,LH),e(LH,mFr),e(dM,gFr),e(ie,hFr),e(ie,cM),e(cM,TFe),e(TFe,pFr),e(cM,_Fr),e(cM,xH),e(xH,uFr),e(cM,bFr),e(ie,vFr),e(ie,fM),e(fM,MFe),e(MFe,FFr),e(fM,TFr),e(fM,$H),e($H,MFr),e(fM,EFr),e(ie,CFr),e(ie,mM),e(mM,EFe),e(EFe,wFr),e(mM,AFr),e(mM,kH),e(kH,yFr),e(mM,LFr),e(ie,xFr),e(ie,gM),e(gM,CFe),e(CFe,$Fr),e(gM,kFr),e(gM,SH),e(SH,SFr),e(gM,RFr),e(xr,PFr),M(hM,xr,null),b(f,Wje,u),b(f,tc,u),e(tc,pM),e(pM,wFe),M(GL,wFe,null),e(tc,BFr),e(tc,AFe),e(AFe,IFr),b(f,Qje,u),b(f,rr,u),M(OL,rr,null),e(rr,NFr),e(rr,ac),e(ac,qFr),e(ac,RH),e(RH,jFr),e(ac,DFr),e(ac,PH),e(PH,GFr),e(ac,OFr),e(rr,VFr),e(rr,VL),e(VL,XFr),e(VL,yFe),e(yFe,zFr),e(VL,WFr),e(rr,QFr),e(rr,St),M(XL,St,null),e(St,HFr),e(St,LFe),e(LFe,UFr),e(St,JFr),e(St,nc),e(nc,YFr),e(nc,xFe),e(xFe,KFr),e(nc,ZFr),e(nc,BH),e(BH,e6r),e(nc,o6r),e(St,r6r),M(_M,St,null),e(rr,t6r),e(rr,$r),M(zL,$r,null),e($r,a6r),e($r,$Fe),e($Fe,n6r),e($r,s6r),e($r,an),e(an,l6r),e(an,kFe),e(kFe,i6r),e(an,d6r),e(an,SFe),e(SFe,c6r),e(an,f6r),e(an,RFe),e(RFe,m6r),e(an,g6r),e($r,h6r),e($r,ye),e(ye,uM),e(uM,PFe),e(PFe,p6r),e(uM,_6r),e(uM,IH),e(IH,u6r),e(uM,b6r),e(ye,v6r),e(ye,bM),e(bM,BFe),e(BFe,F6r),e(bM,T6r),e(bM,NH),e(NH,M6r),e(bM,E6r),e(ye,C6r),e(ye,vM),e(vM,IFe),e(IFe,w6r),e(vM,A6r),e(vM,qH),e(qH,y6r),e(vM,L6r),e(ye,x6r),e(ye,FM),e(FM,NFe),e(NFe,$6r),e(FM,k6r),e(FM,jH),e(jH,S6r),e(FM,R6r),e(ye,P6r),e(ye,TM),e(TM,qFe),e(qFe,B6r),e(TM,I6r),e(TM,DH),e(DH,N6r),e(TM,q6r),e(ye,j6r),e(ye,MM),e(MM,jFe),e(jFe,D6r),e(MM,G6r),e(MM,GH),e(GH,O6r),e(MM,V6r),e(ye,X6r),e(ye,EM),e(EM,DFe),e(DFe,z6r),e(EM,W6r),e(EM,OH),e(OH,Q6r),e(EM,H6r),e(ye,U6r),e(ye,CM),e(CM,GFe),e(GFe,J6r),e(CM,Y6r),e(CM,VH),e(VH,K6r),e(CM,Z6r),e(ye,eTr),e(ye,wM),e(wM,OFe),e(OFe,oTr),e(wM,rTr),e(wM,XH),e(XH,tTr),e(wM,aTr),e(ye,nTr),e(ye,AM),e(AM,VFe),e(VFe,sTr),e(AM,lTr),e(AM,zH),e(zH,iTr),e(AM,dTr),e($r,cTr),M(yM,$r,null),b(f,Hje,u),b(f,sc,u),e(sc,LM),e(LM,XFe),M(WL,XFe,null),e(sc,fTr),e(sc,zFe),e(zFe,mTr),b(f,Uje,u),b(f,tr,u),M(QL,tr,null),e(tr,gTr),e(tr,lc),e(lc,hTr),e(lc,WH),e(WH,pTr),e(lc,_Tr),e(lc,QH),e(QH,uTr),e(lc,bTr),e(tr,vTr),e(tr,HL),e(HL,FTr),e(HL,WFe),e(WFe,TTr),e(HL,MTr),e(tr,ETr),e(tr,Rt),M(UL,Rt,null),e(Rt,CTr),e(Rt,QFe),e(QFe,wTr),e(Rt,ATr),e(Rt,ic),e(ic,yTr),e(ic,HFe),e(HFe,LTr),e(ic,xTr),e(ic,HH),e(HH,$Tr),e(ic,kTr),e(Rt,STr),M(xM,Rt,null),e(tr,RTr),e(tr,kr),M(JL,kr,null),e(kr,PTr),e(kr,UFe),e(UFe,BTr),e(kr,ITr),e(kr,nn),e(nn,NTr),e(nn,JFe),e(JFe,qTr),e(nn,jTr),e(nn,YFe),e(YFe,DTr),e(nn,GTr),e(nn,KFe),e(KFe,OTr),e(nn,VTr),e(kr,XTr),e(kr,oe),e(oe,$M),e($M,ZFe),e(ZFe,zTr),e($M,WTr),e($M,UH),e(UH,QTr),e($M,HTr),e(oe,UTr),e(oe,kM),e(kM,e6e),e(e6e,JTr),e(kM,YTr),e(kM,JH),e(JH,KTr),e(kM,ZTr),e(oe,e7r),e(oe,SM),e(SM,o6e),e(o6e,o7r),e(SM,r7r),e(SM,YH),e(YH,t7r),e(SM,a7r),e(oe,n7r),e(oe,RM),e(RM,r6e),e(r6e,s7r),e(RM,l7r),e(RM,KH),e(KH,i7r),e(RM,d7r),e(oe,c7r),e(oe,PM),e(PM,t6e),e(t6e,f7r),e(PM,m7r),e(PM,ZH),e(ZH,g7r),e(PM,h7r),e(oe,p7r),e(oe,BM),e(BM,a6e),e(a6e,_7r),e(BM,u7r),e(BM,eU),e(eU,b7r),e(BM,v7r),e(oe,F7r),e(oe,IM),e(IM,n6e),e(n6e,T7r),e(IM,M7r),e(IM,oU),e(oU,E7r),e(IM,C7r),e(oe,w7r),e(oe,NM),e(NM,s6e),e(s6e,A7r),e(NM,y7r),e(NM,rU),e(rU,L7r),e(NM,x7r),e(oe,$7r),e(oe,qM),e(qM,l6e),e(l6e,k7r),e(qM,S7r),e(qM,tU),e(tU,R7r),e(qM,P7r),e(oe,B7r),e(oe,jM),e(jM,i6e),e(i6e,I7r),e(jM,N7r),e(jM,aU),e(aU,q7r),e(jM,j7r),e(oe,D7r),e(oe,DM),e(DM,d6e),e(d6e,G7r),e(DM,O7r),e(DM,nU),e(nU,V7r),e(DM,X7r),e(oe,z7r),e(oe,GM),e(GM,c6e),e(c6e,W7r),e(GM,Q7r),e(GM,sU),e(sU,H7r),e(GM,U7r),e(oe,J7r),e(oe,OM),e(OM,f6e),e(f6e,Y7r),e(OM,K7r),e(OM,lU),e(lU,Z7r),e(OM,e9r),e(oe,o9r),e(oe,VM),e(VM,m6e),e(m6e,r9r),e(VM,t9r),e(VM,iU),e(iU,a9r),e(VM,n9r),e(oe,s9r),e(oe,XM),e(XM,g6e),e(g6e,l9r),e(XM,i9r),e(XM,dU),e(dU,d9r),e(XM,c9r),e(oe,f9r),e(oe,zM),e(zM,h6e),e(h6e,m9r),e(zM,g9r),e(zM,cU),e(cU,h9r),e(zM,p9r),e(oe,_9r),e(oe,WM),e(WM,p6e),e(p6e,u9r),e(WM,b9r),e(WM,fU),e(fU,v9r),e(WM,F9r),e(oe,T9r),e(oe,QM),e(QM,_6e),e(_6e,M9r),e(QM,E9r),e(QM,mU),e(mU,C9r),e(QM,w9r),e(oe,A9r),e(oe,HM),e(HM,u6e),e(u6e,y9r),e(HM,L9r),e(HM,gU),e(gU,x9r),e(HM,$9r),e(oe,k9r),e(oe,UM),e(UM,b6e),e(b6e,S9r),e(UM,R9r),e(UM,hU),e(hU,P9r),e(UM,B9r),e(oe,I9r),e(oe,JM),e(JM,v6e),e(v6e,N9r),e(JM,q9r),e(JM,pU),e(pU,j9r),e(JM,D9r),e(oe,G9r),e(oe,YM),e(YM,F6e),e(F6e,O9r),e(YM,V9r),e(YM,_U),e(_U,X9r),e(YM,z9r),e(oe,W9r),e(oe,KM),e(KM,T6e),e(T6e,Q9r),e(KM,H9r),e(KM,uU),e(uU,U9r),e(KM,J9r),e(oe,Y9r),e(oe,ZM),e(ZM,M6e),e(M6e,K9r),e(ZM,Z9r),e(ZM,bU),e(bU,eMr),e(ZM,oMr),e(oe,rMr),e(oe,e4),e(e4,E6e),e(E6e,tMr),e(e4,aMr),e(e4,vU),e(vU,nMr),e(e4,sMr),e(oe,lMr),e(oe,o4),e(o4,C6e),e(C6e,iMr),e(o4,dMr),e(o4,FU),e(FU,cMr),e(o4,fMr),e(kr,mMr),M(r4,kr,null),b(f,Jje,u),b(f,dc,u),e(dc,t4),e(t4,w6e),M(YL,w6e,null),e(dc,gMr),e(dc,A6e),e(A6e,hMr),b(f,Yje,u),b(f,ar,u),M(KL,ar,null),e(ar,pMr),e(ar,cc),e(cc,_Mr),e(cc,TU),e(TU,uMr),e(cc,bMr),e(cc,MU),e(MU,vMr),e(cc,FMr),e(ar,TMr),e(ar,ZL),e(ZL,MMr),e(ZL,y6e),e(y6e,EMr),e(ZL,CMr),e(ar,wMr),e(ar,Pt),M(e8,Pt,null),e(Pt,AMr),e(Pt,L6e),e(L6e,yMr),e(Pt,LMr),e(Pt,fc),e(fc,xMr),e(fc,x6e),e(x6e,$Mr),e(fc,kMr),e(fc,EU),e(EU,SMr),e(fc,RMr),e(Pt,PMr),M(a4,Pt,null),e(ar,BMr),e(ar,Sr),M(o8,Sr,null),e(Sr,IMr),e(Sr,$6e),e($6e,NMr),e(Sr,qMr),e(Sr,sn),e(sn,jMr),e(sn,k6e),e(k6e,DMr),e(sn,GMr),e(sn,S6e),e(S6e,OMr),e(sn,VMr),e(sn,R6e),e(R6e,XMr),e(sn,zMr),e(Sr,WMr),e(Sr,_e),e(_e,n4),e(n4,P6e),e(P6e,QMr),e(n4,HMr),e(n4,CU),e(CU,UMr),e(n4,JMr),e(_e,YMr),e(_e,s4),e(s4,B6e),e(B6e,KMr),e(s4,ZMr),e(s4,wU),e(wU,e4r),e(s4,o4r),e(_e,r4r),e(_e,l4),e(l4,I6e),e(I6e,t4r),e(l4,a4r),e(l4,AU),e(AU,n4r),e(l4,s4r),e(_e,l4r),e(_e,i4),e(i4,N6e),e(N6e,i4r),e(i4,d4r),e(i4,yU),e(yU,c4r),e(i4,f4r),e(_e,m4r),e(_e,d4),e(d4,q6e),e(q6e,g4r),e(d4,h4r),e(d4,LU),e(LU,p4r),e(d4,_4r),e(_e,u4r),e(_e,c4),e(c4,j6e),e(j6e,b4r),e(c4,v4r),e(c4,xU),e(xU,F4r),e(c4,T4r),e(_e,M4r),e(_e,f4),e(f4,D6e),e(D6e,E4r),e(f4,C4r),e(f4,$U),e($U,w4r),e(f4,A4r),e(_e,y4r),e(_e,m4),e(m4,G6e),e(G6e,L4r),e(m4,x4r),e(m4,kU),e(kU,$4r),e(m4,k4r),e(_e,S4r),e(_e,g4),e(g4,O6e),e(O6e,R4r),e(g4,P4r),e(g4,SU),e(SU,B4r),e(g4,I4r),e(_e,N4r),e(_e,h4),e(h4,V6e),e(V6e,q4r),e(h4,j4r),e(h4,RU),e(RU,D4r),e(h4,G4r),e(_e,O4r),e(_e,p4),e(p4,X6e),e(X6e,V4r),e(p4,X4r),e(p4,PU),e(PU,z4r),e(p4,W4r),e(_e,Q4r),e(_e,_4),e(_4,z6e),e(z6e,H4r),e(_4,U4r),e(_4,BU),e(BU,J4r),e(_4,Y4r),e(_e,K4r),e(_e,u4),e(u4,W6e),e(W6e,Z4r),e(u4,eEr),e(u4,IU),e(IU,oEr),e(u4,rEr),e(_e,tEr),e(_e,b4),e(b4,Q6e),e(Q6e,aEr),e(b4,nEr),e(b4,NU),e(NU,sEr),e(b4,lEr),e(_e,iEr),e(_e,v4),e(v4,H6e),e(H6e,dEr),e(v4,cEr),e(v4,qU),e(qU,fEr),e(v4,mEr),e(_e,gEr),e(_e,F4),e(F4,U6e),e(U6e,hEr),e(F4,pEr),e(F4,jU),e(jU,_Er),e(F4,uEr),e(_e,bEr),e(_e,T4),e(T4,J6e),e(J6e,vEr),e(T4,FEr),e(T4,DU),e(DU,TEr),e(T4,MEr),e(Sr,EEr),M(M4,Sr,null),b(f,Kje,u),b(f,mc,u),e(mc,E4),e(E4,Y6e),M(r8,Y6e,null),e(mc,CEr),e(mc,K6e),e(K6e,wEr),b(f,Zje,u),b(f,nr,u),M(t8,nr,null),e(nr,AEr),e(nr,gc),e(gc,yEr),e(gc,GU),e(GU,LEr),e(gc,xEr),e(gc,OU),e(OU,$Er),e(gc,kEr),e(nr,SEr),e(nr,a8),e(a8,REr),e(a8,Z6e),e(Z6e,PEr),e(a8,BEr),e(nr,IEr),e(nr,Bt),M(n8,Bt,null),e(Bt,NEr),e(Bt,eTe),e(eTe,qEr),e(Bt,jEr),e(Bt,hc),e(hc,DEr),e(hc,oTe),e(oTe,GEr),e(hc,OEr),e(hc,VU),e(VU,VEr),e(hc,XEr),e(Bt,zEr),M(C4,Bt,null),e(nr,WEr),e(nr,Rr),M(s8,Rr,null),e(Rr,QEr),e(Rr,rTe),e(rTe,HEr),e(Rr,UEr),e(Rr,ln),e(ln,JEr),e(ln,tTe),e(tTe,YEr),e(ln,KEr),e(ln,aTe),e(aTe,ZEr),e(ln,e5r),e(ln,nTe),e(nTe,o5r),e(ln,r5r),e(Rr,t5r),e(Rr,l8),e(l8,w4),e(w4,sTe),e(sTe,a5r),e(w4,n5r),e(w4,XU),e(XU,s5r),e(w4,l5r),e(l8,i5r),e(l8,A4),e(A4,lTe),e(lTe,d5r),e(A4,c5r),e(A4,zU),e(zU,f5r),e(A4,m5r),e(Rr,g5r),M(y4,Rr,null),b(f,eDe,u),b(f,pc,u),e(pc,L4),e(L4,iTe),M(i8,iTe,null),e(pc,h5r),e(pc,dTe),e(dTe,p5r),b(f,oDe,u),b(f,sr,u),M(d8,sr,null),e(sr,_5r),e(sr,_c),e(_c,u5r),e(_c,WU),e(WU,b5r),e(_c,v5r),e(_c,QU),e(QU,F5r),e(_c,T5r),e(sr,M5r),e(sr,c8),e(c8,E5r),e(c8,cTe),e(cTe,C5r),e(c8,w5r),e(sr,A5r),e(sr,It),M(f8,It,null),e(It,y5r),e(It,fTe),e(fTe,L5r),e(It,x5r),e(It,uc),e(uc,$5r),e(uc,mTe),e(mTe,k5r),e(uc,S5r),e(uc,HU),e(HU,R5r),e(uc,P5r),e(It,B5r),M(x4,It,null),e(sr,I5r),e(sr,Pr),M(m8,Pr,null),e(Pr,N5r),e(Pr,gTe),e(gTe,q5r),e(Pr,j5r),e(Pr,dn),e(dn,D5r),e(dn,hTe),e(hTe,G5r),e(dn,O5r),e(dn,pTe),e(pTe,V5r),e(dn,X5r),e(dn,_Te),e(_Te,z5r),e(dn,W5r),e(Pr,Q5r),e(Pr,uTe),e(uTe,$4),e($4,bTe),e(bTe,H5r),e($4,U5r),e($4,UU),e(UU,J5r),e($4,Y5r),e(Pr,K5r),M(k4,Pr,null),b(f,rDe,u),b(f,bc,u),e(bc,S4),e(S4,vTe),M(g8,vTe,null),e(bc,Z5r),e(bc,FTe),e(FTe,eCr),b(f,tDe,u),b(f,lr,u),M(h8,lr,null),e(lr,oCr),e(lr,vc),e(vc,rCr),e(vc,JU),e(JU,tCr),e(vc,aCr),e(vc,YU),e(YU,nCr),e(vc,sCr),e(lr,lCr),e(lr,p8),e(p8,iCr),e(p8,TTe),e(TTe,dCr),e(p8,cCr),e(lr,fCr),e(lr,Nt),M(_8,Nt,null),e(Nt,mCr),e(Nt,MTe),e(MTe,gCr),e(Nt,hCr),e(Nt,Fc),e(Fc,pCr),e(Fc,ETe),e(ETe,_Cr),e(Fc,uCr),e(Fc,KU),e(KU,bCr),e(Fc,vCr),e(Nt,FCr),M(R4,Nt,null),e(lr,TCr),e(lr,Br),M(u8,Br,null),e(Br,MCr),e(Br,CTe),e(CTe,ECr),e(Br,CCr),e(Br,cn),e(cn,wCr),e(cn,wTe),e(wTe,ACr),e(cn,yCr),e(cn,ATe),e(ATe,LCr),e(cn,xCr),e(cn,yTe),e(yTe,$Cr),e(cn,kCr),e(Br,SCr),e(Br,de),e(de,P4),e(P4,LTe),e(LTe,RCr),e(P4,PCr),e(P4,ZU),e(ZU,BCr),e(P4,ICr),e(de,NCr),e(de,B4),e(B4,xTe),e(xTe,qCr),e(B4,jCr),e(B4,eJ),e(eJ,DCr),e(B4,GCr),e(de,OCr),e(de,I4),e(I4,$Te),e($Te,VCr),e(I4,XCr),e(I4,oJ),e(oJ,zCr),e(I4,WCr),e(de,QCr),e(de,N4),e(N4,kTe),e(kTe,HCr),e(N4,UCr),e(N4,rJ),e(rJ,JCr),e(N4,YCr),e(de,KCr),e(de,q4),e(q4,STe),e(STe,ZCr),e(q4,e3r),e(q4,tJ),e(tJ,o3r),e(q4,r3r),e(de,t3r),e(de,j4),e(j4,RTe),e(RTe,a3r),e(j4,n3r),e(j4,aJ),e(aJ,s3r),e(j4,l3r),e(de,i3r),e(de,D4),e(D4,PTe),e(PTe,d3r),e(D4,c3r),e(D4,nJ),e(nJ,f3r),e(D4,m3r),e(de,g3r),e(de,G4),e(G4,BTe),e(BTe,h3r),e(G4,p3r),e(G4,sJ),e(sJ,_3r),e(G4,u3r),e(de,b3r),e(de,O4),e(O4,ITe),e(ITe,v3r),e(O4,F3r),e(O4,lJ),e(lJ,T3r),e(O4,M3r),e(de,E3r),e(de,V4),e(V4,NTe),e(NTe,C3r),e(V4,w3r),e(V4,iJ),e(iJ,A3r),e(V4,y3r),e(de,L3r),e(de,X4),e(X4,qTe),e(qTe,x3r),e(X4,$3r),e(X4,dJ),e(dJ,k3r),e(X4,S3r),e(de,R3r),e(de,z4),e(z4,jTe),e(jTe,P3r),e(z4,B3r),e(z4,cJ),e(cJ,I3r),e(z4,N3r),e(de,q3r),e(de,W4),e(W4,DTe),e(DTe,j3r),e(W4,D3r),e(W4,fJ),e(fJ,G3r),e(W4,O3r),e(de,V3r),e(de,Q4),e(Q4,GTe),e(GTe,X3r),e(Q4,z3r),e(Q4,mJ),e(mJ,W3r),e(Q4,Q3r),e(de,H3r),e(de,H4),e(H4,OTe),e(OTe,U3r),e(H4,J3r),e(H4,gJ),e(gJ,Y3r),e(H4,K3r),e(de,Z3r),e(de,U4),e(U4,VTe),e(VTe,e0r),e(U4,o0r),e(U4,hJ),e(hJ,r0r),e(U4,t0r),e(de,a0r),e(de,J4),e(J4,XTe),e(XTe,n0r),e(J4,s0r),e(J4,pJ),e(pJ,l0r),e(J4,i0r),e(de,d0r),e(de,Y4),e(Y4,zTe),e(zTe,c0r),e(Y4,f0r),e(Y4,_J),e(_J,m0r),e(Y4,g0r),e(de,h0r),e(de,K4),e(K4,WTe),e(WTe,p0r),e(K4,_0r),e(K4,uJ),e(uJ,u0r),e(K4,b0r),e(de,v0r),e(de,Z4),e(Z4,QTe),e(QTe,F0r),e(Z4,T0r),e(Z4,bJ),e(bJ,M0r),e(Z4,E0r),e(Br,C0r),M(eE,Br,null),b(f,aDe,u),b(f,Tc,u),e(Tc,oE),e(oE,HTe),M(b8,HTe,null),e(Tc,w0r),e(Tc,UTe),e(UTe,A0r),b(f,nDe,u),b(f,ir,u),M(v8,ir,null),e(ir,y0r),e(ir,Mc),e(Mc,L0r),e(Mc,vJ),e(vJ,x0r),e(Mc,$0r),e(Mc,FJ),e(FJ,k0r),e(Mc,S0r),e(ir,R0r),e(ir,F8),e(F8,P0r),e(F8,JTe),e(JTe,B0r),e(F8,I0r),e(ir,N0r),e(ir,qt),M(T8,qt,null),e(qt,q0r),e(qt,YTe),e(YTe,j0r),e(qt,D0r),e(qt,Ec),e(Ec,G0r),e(Ec,KTe),e(KTe,O0r),e(Ec,V0r),e(Ec,TJ),e(TJ,X0r),e(Ec,z0r),e(qt,W0r),M(rE,qt,null),e(ir,Q0r),e(ir,Ir),M(M8,Ir,null),e(Ir,H0r),e(Ir,ZTe),e(ZTe,U0r),e(Ir,J0r),e(Ir,fn),e(fn,Y0r),e(fn,e7e),e(e7e,K0r),e(fn,Z0r),e(fn,o7e),e(o7e,ewr),e(fn,owr),e(fn,r7e),e(r7e,rwr),e(fn,twr),e(Ir,awr),e(Ir,ce),e(ce,tE),e(tE,t7e),e(t7e,nwr),e(tE,swr),e(tE,MJ),e(MJ,lwr),e(tE,iwr),e(ce,dwr),e(ce,aE),e(aE,a7e),e(a7e,cwr),e(aE,fwr),e(aE,EJ),e(EJ,mwr),e(aE,gwr),e(ce,hwr),e(ce,nE),e(nE,n7e),e(n7e,pwr),e(nE,_wr),e(nE,CJ),e(CJ,uwr),e(nE,bwr),e(ce,vwr),e(ce,sE),e(sE,s7e),e(s7e,Fwr),e(sE,Twr),e(sE,wJ),e(wJ,Mwr),e(sE,Ewr),e(ce,Cwr),e(ce,lE),e(lE,l7e),e(l7e,wwr),e(lE,Awr),e(lE,AJ),e(AJ,ywr),e(lE,Lwr),e(ce,xwr),e(ce,iE),e(iE,i7e),e(i7e,$wr),e(iE,kwr),e(iE,yJ),e(yJ,Swr),e(iE,Rwr),e(ce,Pwr),e(ce,dE),e(dE,d7e),e(d7e,Bwr),e(dE,Iwr),e(dE,LJ),e(LJ,Nwr),e(dE,qwr),e(ce,jwr),e(ce,cE),e(cE,c7e),e(c7e,Dwr),e(cE,Gwr),e(cE,xJ),e(xJ,Owr),e(cE,Vwr),e(ce,Xwr),e(ce,fE),e(fE,f7e),e(f7e,zwr),e(fE,Wwr),e(fE,$J),e($J,Qwr),e(fE,Hwr),e(ce,Uwr),e(ce,mE),e(mE,m7e),e(m7e,Jwr),e(mE,Ywr),e(mE,kJ),e(kJ,Kwr),e(mE,Zwr),e(ce,eAr),e(ce,gE),e(gE,g7e),e(g7e,oAr),e(gE,rAr),e(gE,SJ),e(SJ,tAr),e(gE,aAr),e(ce,nAr),e(ce,hE),e(hE,h7e),e(h7e,sAr),e(hE,lAr),e(hE,RJ),e(RJ,iAr),e(hE,dAr),e(ce,cAr),e(ce,pE),e(pE,p7e),e(p7e,fAr),e(pE,mAr),e(pE,PJ),e(PJ,gAr),e(pE,hAr),e(ce,pAr),e(ce,_E),e(_E,_7e),e(_7e,_Ar),e(_E,uAr),e(_E,BJ),e(BJ,bAr),e(_E,vAr),e(ce,FAr),e(ce,uE),e(uE,u7e),e(u7e,TAr),e(uE,MAr),e(uE,IJ),e(IJ,EAr),e(uE,CAr),e(ce,wAr),e(ce,bE),e(bE,b7e),e(b7e,AAr),e(bE,yAr),e(bE,NJ),e(NJ,LAr),e(bE,xAr),e(ce,$Ar),e(ce,vE),e(vE,v7e),e(v7e,kAr),e(vE,SAr),e(vE,qJ),e(qJ,RAr),e(vE,PAr),e(ce,BAr),e(ce,FE),e(FE,F7e),e(F7e,IAr),e(FE,NAr),e(FE,jJ),e(jJ,qAr),e(FE,jAr),e(ce,DAr),e(ce,TE),e(TE,T7e),e(T7e,GAr),e(TE,OAr),e(TE,DJ),e(DJ,VAr),e(TE,XAr),e(ce,zAr),e(ce,ME),e(ME,M7e),e(M7e,WAr),e(ME,QAr),e(ME,GJ),e(GJ,HAr),e(ME,UAr),e(Ir,JAr),M(EE,Ir,null),b(f,sDe,u),b(f,Cc,u),e(Cc,CE),e(CE,E7e),M(E8,E7e,null),e(Cc,YAr),e(Cc,C7e),e(C7e,KAr),b(f,lDe,u),b(f,dr,u),M(C8,dr,null),e(dr,ZAr),e(dr,wc),e(wc,eyr),e(wc,OJ),e(OJ,oyr),e(wc,ryr),e(wc,VJ),e(VJ,tyr),e(wc,ayr),e(dr,nyr),e(dr,w8),e(w8,syr),e(w8,w7e),e(w7e,lyr),e(w8,iyr),e(dr,dyr),e(dr,jt),M(A8,jt,null),e(jt,cyr),e(jt,A7e),e(A7e,fyr),e(jt,myr),e(jt,Ac),e(Ac,gyr),e(Ac,y7e),e(y7e,hyr),e(Ac,pyr),e(Ac,XJ),e(XJ,_yr),e(Ac,uyr),e(jt,byr),M(wE,jt,null),e(dr,vyr),e(dr,Nr),M(y8,Nr,null),e(Nr,Fyr),e(Nr,L7e),e(L7e,Tyr),e(Nr,Myr),e(Nr,mn),e(mn,Eyr),e(mn,x7e),e(x7e,Cyr),e(mn,wyr),e(mn,$7e),e($7e,Ayr),e(mn,yyr),e(mn,k7e),e(k7e,Lyr),e(mn,xyr),e(Nr,$yr),e(Nr,S7e),e(S7e,AE),e(AE,R7e),e(R7e,kyr),e(AE,Syr),e(AE,zJ),e(zJ,Ryr),e(AE,Pyr),e(Nr,Byr),M(yE,Nr,null),b(f,iDe,u),b(f,yc,u),e(yc,LE),e(LE,P7e),M(L8,P7e,null),e(yc,Iyr),e(yc,B7e),e(B7e,Nyr),b(f,dDe,u),b(f,cr,u),M(x8,cr,null),e(cr,qyr),e(cr,Lc),e(Lc,jyr),e(Lc,WJ),e(WJ,Dyr),e(Lc,Gyr),e(Lc,QJ),e(QJ,Oyr),e(Lc,Vyr),e(cr,Xyr),e(cr,$8),e($8,zyr),e($8,I7e),e(I7e,Wyr),e($8,Qyr),e(cr,Hyr),e(cr,Dt),M(k8,Dt,null),e(Dt,Uyr),e(Dt,N7e),e(N7e,Jyr),e(Dt,Yyr),e(Dt,xc),e(xc,Kyr),e(xc,q7e),e(q7e,Zyr),e(xc,eLr),e(xc,HJ),e(HJ,oLr),e(xc,rLr),e(Dt,tLr),M(xE,Dt,null),e(cr,aLr),e(cr,qr),M(S8,qr,null),e(qr,nLr),e(qr,j7e),e(j7e,sLr),e(qr,lLr),e(qr,gn),e(gn,iLr),e(gn,D7e),e(D7e,dLr),e(gn,cLr),e(gn,G7e),e(G7e,fLr),e(gn,mLr),e(gn,O7e),e(O7e,gLr),e(gn,hLr),e(qr,pLr),e(qr,V7e),e(V7e,$E),e($E,X7e),e(X7e,_Lr),e($E,uLr),e($E,UJ),e(UJ,bLr),e($E,vLr),e(qr,FLr),M(kE,qr,null),b(f,cDe,u),b(f,$c,u),e($c,SE),e(SE,z7e),M(R8,z7e,null),e($c,TLr),e($c,W7e),e(W7e,MLr),b(f,fDe,u),b(f,fr,u),M(P8,fr,null),e(fr,ELr),e(fr,kc),e(kc,CLr),e(kc,JJ),e(JJ,wLr),e(kc,ALr),e(kc,YJ),e(YJ,yLr),e(kc,LLr),e(fr,xLr),e(fr,B8),e(B8,$Lr),e(B8,Q7e),e(Q7e,kLr),e(B8,SLr),e(fr,RLr),e(fr,Gt),M(I8,Gt,null),e(Gt,PLr),e(Gt,H7e),e(H7e,BLr),e(Gt,ILr),e(Gt,Sc),e(Sc,NLr),e(Sc,U7e),e(U7e,qLr),e(Sc,jLr),e(Sc,KJ),e(KJ,DLr),e(Sc,GLr),e(Gt,OLr),M(RE,Gt,null),e(fr,VLr),e(fr,jr),M(N8,jr,null),e(jr,XLr),e(jr,J7e),e(J7e,zLr),e(jr,WLr),e(jr,hn),e(hn,QLr),e(hn,Y7e),e(Y7e,HLr),e(hn,ULr),e(hn,K7e),e(K7e,JLr),e(hn,YLr),e(hn,Z7e),e(Z7e,KLr),e(hn,ZLr),e(jr,e8r),e(jr,re),e(re,PE),e(PE,e9e),e(e9e,o8r),e(PE,r8r),e(PE,ZJ),e(ZJ,t8r),e(PE,a8r),e(re,n8r),e(re,BE),e(BE,o9e),e(o9e,s8r),e(BE,l8r),e(BE,eY),e(eY,i8r),e(BE,d8r),e(re,c8r),e(re,IE),e(IE,r9e),e(r9e,f8r),e(IE,m8r),e(IE,oY),e(oY,g8r),e(IE,h8r),e(re,p8r),e(re,NE),e(NE,t9e),e(t9e,_8r),e(NE,u8r),e(NE,rY),e(rY,b8r),e(NE,v8r),e(re,F8r),e(re,qE),e(qE,a9e),e(a9e,T8r),e(qE,M8r),e(qE,tY),e(tY,E8r),e(qE,C8r),e(re,w8r),e(re,jE),e(jE,n9e),e(n9e,A8r),e(jE,y8r),e(jE,aY),e(aY,L8r),e(jE,x8r),e(re,$8r),e(re,DE),e(DE,s9e),e(s9e,k8r),e(DE,S8r),e(DE,nY),e(nY,R8r),e(DE,P8r),e(re,B8r),e(re,GE),e(GE,l9e),e(l9e,I8r),e(GE,N8r),e(GE,sY),e(sY,q8r),e(GE,j8r),e(re,D8r),e(re,OE),e(OE,i9e),e(i9e,G8r),e(OE,O8r),e(OE,lY),e(lY,V8r),e(OE,X8r),e(re,z8r),e(re,VE),e(VE,d9e),e(d9e,W8r),e(VE,Q8r),e(VE,iY),e(iY,H8r),e(VE,U8r),e(re,J8r),e(re,XE),e(XE,c9e),e(c9e,Y8r),e(XE,K8r),e(XE,dY),e(dY,Z8r),e(XE,exr),e(re,oxr),e(re,zE),e(zE,f9e),e(f9e,rxr),e(zE,txr),e(zE,cY),e(cY,axr),e(zE,nxr),e(re,sxr),e(re,WE),e(WE,m9e),e(m9e,lxr),e(WE,ixr),e(WE,fY),e(fY,dxr),e(WE,cxr),e(re,fxr),e(re,QE),e(QE,g9e),e(g9e,mxr),e(QE,gxr),e(QE,mY),e(mY,hxr),e(QE,pxr),e(re,_xr),e(re,HE),e(HE,h9e),e(h9e,uxr),e(HE,bxr),e(HE,gY),e(gY,vxr),e(HE,Fxr),e(re,Txr),e(re,UE),e(UE,p9e),e(p9e,Mxr),e(UE,Exr),e(UE,hY),e(hY,Cxr),e(UE,wxr),e(re,Axr),e(re,JE),e(JE,_9e),e(_9e,yxr),e(JE,Lxr),e(JE,pY),e(pY,xxr),e(JE,$xr),e(re,kxr),e(re,YE),e(YE,u9e),e(u9e,Sxr),e(YE,Rxr),e(YE,_Y),e(_Y,Pxr),e(YE,Bxr),e(re,Ixr),e(re,KE),e(KE,b9e),e(b9e,Nxr),e(KE,qxr),e(KE,uY),e(uY,jxr),e(KE,Dxr),e(re,Gxr),e(re,ZE),e(ZE,v9e),e(v9e,Oxr),e(ZE,Vxr),e(ZE,bY),e(bY,Xxr),e(ZE,zxr),e(re,Wxr),e(re,e5),e(e5,F9e),e(F9e,Qxr),e(e5,Hxr),e(e5,vY),e(vY,Uxr),e(e5,Jxr),e(re,Yxr),e(re,o5),e(o5,T9e),e(T9e,Kxr),e(o5,Zxr),e(o5,FY),e(FY,e$r),e(o5,o$r),e(re,r$r),e(re,r5),e(r5,M9e),e(M9e,t$r),e(r5,a$r),e(r5,TY),e(TY,n$r),e(r5,s$r),e(re,l$r),e(re,t5),e(t5,E9e),e(E9e,i$r),e(t5,d$r),e(t5,MY),e(MY,c$r),e(t5,f$r),e(re,m$r),e(re,a5),e(a5,C9e),e(C9e,g$r),e(a5,h$r),e(a5,EY),e(EY,p$r),e(a5,_$r),e(re,u$r),e(re,n5),e(n5,w9e),e(w9e,b$r),e(n5,v$r),e(n5,CY),e(CY,F$r),e(n5,T$r),e(jr,M$r),M(s5,jr,null),b(f,mDe,u),b(f,Rc,u),e(Rc,l5),e(l5,A9e),M(q8,A9e,null),e(Rc,E$r),e(Rc,y9e),e(y9e,C$r),b(f,gDe,u),b(f,mr,u),M(j8,mr,null),e(mr,w$r),e(mr,Pc),e(Pc,A$r),e(Pc,wY),e(wY,y$r),e(Pc,L$r),e(Pc,AY),e(AY,x$r),e(Pc,$$r),e(mr,k$r),e(mr,D8),e(D8,S$r),e(D8,L9e),e(L9e,R$r),e(D8,P$r),e(mr,B$r),e(mr,Ot),M(G8,Ot,null),e(Ot,I$r),e(Ot,x9e),e(x9e,N$r),e(Ot,q$r),e(Ot,Bc),e(Bc,j$r),e(Bc,$9e),e($9e,D$r),e(Bc,G$r),e(Bc,yY),e(yY,O$r),e(Bc,V$r),e(Ot,X$r),M(i5,Ot,null),e(mr,z$r),e(mr,Dr),M(O8,Dr,null),e(Dr,W$r),e(Dr,k9e),e(k9e,Q$r),e(Dr,H$r),e(Dr,pn),e(pn,U$r),e(pn,S9e),e(S9e,J$r),e(pn,Y$r),e(pn,R9e),e(R9e,K$r),e(pn,Z$r),e(pn,P9e),e(P9e,ekr),e(pn,okr),e(Dr,rkr),e(Dr,Pe),e(Pe,d5),e(d5,B9e),e(B9e,tkr),e(d5,akr),e(d5,LY),e(LY,nkr),e(d5,skr),e(Pe,lkr),e(Pe,c5),e(c5,I9e),e(I9e,ikr),e(c5,dkr),e(c5,xY),e(xY,ckr),e(c5,fkr),e(Pe,mkr),e(Pe,f5),e(f5,N9e),e(N9e,gkr),e(f5,hkr),e(f5,$Y),e($Y,pkr),e(f5,_kr),e(Pe,ukr),e(Pe,m5),e(m5,q9e),e(q9e,bkr),e(m5,vkr),e(m5,kY),e(kY,Fkr),e(m5,Tkr),e(Pe,Mkr),e(Pe,g5),e(g5,j9e),e(j9e,Ekr),e(g5,Ckr),e(g5,SY),e(SY,wkr),e(g5,Akr),e(Pe,ykr),e(Pe,h5),e(h5,D9e),e(D9e,Lkr),e(h5,xkr),e(h5,RY),e(RY,$kr),e(h5,kkr),e(Pe,Skr),e(Pe,p5),e(p5,G9e),e(G9e,Rkr),e(p5,Pkr),e(p5,PY),e(PY,Bkr),e(p5,Ikr),e(Pe,Nkr),e(Pe,_5),e(_5,O9e),e(O9e,qkr),e(_5,jkr),e(_5,BY),e(BY,Dkr),e(_5,Gkr),e(Pe,Okr),e(Pe,u5),e(u5,V9e),e(V9e,Vkr),e(u5,Xkr),e(u5,IY),e(IY,zkr),e(u5,Wkr),e(Dr,Qkr),M(b5,Dr,null),b(f,hDe,u),b(f,Ic,u),e(Ic,v5),e(v5,X9e),M(V8,X9e,null),e(Ic,Hkr),e(Ic,z9e),e(z9e,Ukr),b(f,pDe,u),b(f,gr,u),M(X8,gr,null),e(gr,Jkr),e(gr,Nc),e(Nc,Ykr),e(Nc,NY),e(NY,Kkr),e(Nc,Zkr),e(Nc,qY),e(qY,eSr),e(Nc,oSr),e(gr,rSr),e(gr,z8),e(z8,tSr),e(z8,W9e),e(W9e,aSr),e(z8,nSr),e(gr,sSr),e(gr,Vt),M(W8,Vt,null),e(Vt,lSr),e(Vt,Q9e),e(Q9e,iSr),e(Vt,dSr),e(Vt,qc),e(qc,cSr),e(qc,H9e),e(H9e,fSr),e(qc,mSr),e(qc,jY),e(jY,gSr),e(qc,hSr),e(Vt,pSr),M(F5,Vt,null),e(gr,_Sr),e(gr,Gr),M(Q8,Gr,null),e(Gr,uSr),e(Gr,U9e),e(U9e,bSr),e(Gr,vSr),e(Gr,_n),e(_n,FSr),e(_n,J9e),e(J9e,TSr),e(_n,MSr),e(_n,Y9e),e(Y9e,ESr),e(_n,CSr),e(_n,K9e),e(K9e,wSr),e(_n,ASr),e(Gr,ySr),e(Gr,Te),e(Te,T5),e(T5,Z9e),e(Z9e,LSr),e(T5,xSr),e(T5,DY),e(DY,$Sr),e(T5,kSr),e(Te,SSr),e(Te,M5),e(M5,eMe),e(eMe,RSr),e(M5,PSr),e(M5,GY),e(GY,BSr),e(M5,ISr),e(Te,NSr),e(Te,E5),e(E5,oMe),e(oMe,qSr),e(E5,jSr),e(E5,OY),e(OY,DSr),e(E5,GSr),e(Te,OSr),e(Te,C5),e(C5,rMe),e(rMe,VSr),e(C5,XSr),e(C5,VY),e(VY,zSr),e(C5,WSr),e(Te,QSr),e(Te,w5),e(w5,tMe),e(tMe,HSr),e(w5,USr),e(w5,XY),e(XY,JSr),e(w5,YSr),e(Te,KSr),e(Te,A5),e(A5,aMe),e(aMe,ZSr),e(A5,eRr),e(A5,zY),e(zY,oRr),e(A5,rRr),e(Te,tRr),e(Te,y5),e(y5,nMe),e(nMe,aRr),e(y5,nRr),e(y5,WY),e(WY,sRr),e(y5,lRr),e(Te,iRr),e(Te,L5),e(L5,sMe),e(sMe,dRr),e(L5,cRr),e(L5,QY),e(QY,fRr),e(L5,mRr),e(Te,gRr),e(Te,x5),e(x5,lMe),e(lMe,hRr),e(x5,pRr),e(x5,HY),e(HY,_Rr),e(x5,uRr),e(Te,bRr),e(Te,$5),e($5,iMe),e(iMe,vRr),e($5,FRr),e($5,UY),e(UY,TRr),e($5,MRr),e(Te,ERr),e(Te,k5),e(k5,dMe),e(dMe,CRr),e(k5,wRr),e(k5,JY),e(JY,ARr),e(k5,yRr),e(Te,LRr),e(Te,S5),e(S5,cMe),e(cMe,xRr),e(S5,$Rr),e(S5,YY),e(YY,kRr),e(S5,SRr),e(Te,RRr),e(Te,R5),e(R5,fMe),e(fMe,PRr),e(R5,BRr),e(R5,KY),e(KY,IRr),e(R5,NRr),e(Gr,qRr),M(P5,Gr,null),b(f,_De,u),b(f,jc,u),e(jc,B5),e(B5,mMe),M(H8,mMe,null),e(jc,jRr),e(jc,gMe),e(gMe,DRr),b(f,uDe,u),b(f,hr,u),M(U8,hr,null),e(hr,GRr),e(hr,Dc),e(Dc,ORr),e(Dc,ZY),e(ZY,VRr),e(Dc,XRr),e(Dc,eK),e(eK,zRr),e(Dc,WRr),e(hr,QRr),e(hr,J8),e(J8,HRr),e(J8,hMe),e(hMe,URr),e(J8,JRr),e(hr,YRr),e(hr,Xt),M(Y8,Xt,null),e(Xt,KRr),e(Xt,pMe),e(pMe,ZRr),e(Xt,ePr),e(Xt,Gc),e(Gc,oPr),e(Gc,_Me),e(_Me,rPr),e(Gc,tPr),e(Gc,oK),e(oK,aPr),e(Gc,nPr),e(Xt,sPr),M(I5,Xt,null),e(hr,lPr),e(hr,Or),M(K8,Or,null),e(Or,iPr),e(Or,uMe),e(uMe,dPr),e(Or,cPr),e(Or,un),e(un,fPr),e(un,bMe),e(bMe,mPr),e(un,gPr),e(un,vMe),e(vMe,hPr),e(un,pPr),e(un,FMe),e(FMe,_Pr),e(un,uPr),e(Or,bPr),e(Or,Le),e(Le,N5),e(N5,TMe),e(TMe,vPr),e(N5,FPr),e(N5,rK),e(rK,TPr),e(N5,MPr),e(Le,EPr),e(Le,q5),e(q5,MMe),e(MMe,CPr),e(q5,wPr),e(q5,tK),e(tK,APr),e(q5,yPr),e(Le,LPr),e(Le,j5),e(j5,EMe),e(EMe,xPr),e(j5,$Pr),e(j5,aK),e(aK,kPr),e(j5,SPr),e(Le,RPr),e(Le,D5),e(D5,CMe),e(CMe,PPr),e(D5,BPr),e(D5,nK),e(nK,IPr),e(D5,NPr),e(Le,qPr),e(Le,G5),e(G5,wMe),e(wMe,jPr),e(G5,DPr),e(G5,sK),e(sK,GPr),e(G5,OPr),e(Le,VPr),e(Le,O5),e(O5,AMe),e(AMe,XPr),e(O5,zPr),e(O5,lK),e(lK,WPr),e(O5,QPr),e(Le,HPr),e(Le,V5),e(V5,yMe),e(yMe,UPr),e(V5,JPr),e(V5,iK),e(iK,YPr),e(V5,KPr),e(Le,ZPr),e(Le,X5),e(X5,LMe),e(LMe,eBr),e(X5,oBr),e(X5,dK),e(dK,rBr),e(X5,tBr),e(Le,aBr),e(Le,z5),e(z5,xMe),e(xMe,nBr),e(z5,sBr),e(z5,cK),e(cK,lBr),e(z5,iBr),e(Le,dBr),e(Le,W5),e(W5,$Me),e($Me,cBr),e(W5,fBr),e(W5,fK),e(fK,mBr),e(W5,gBr),e(Or,hBr),M(Q5,Or,null),b(f,bDe,u),b(f,Oc,u),e(Oc,H5),e(H5,kMe),M(Z8,kMe,null),e(Oc,pBr),e(Oc,SMe),e(SMe,_Br),b(f,vDe,u),b(f,pr,u),M(ex,pr,null),e(pr,uBr),e(pr,Vc),e(Vc,bBr),e(Vc,mK),e(mK,vBr),e(Vc,FBr),e(Vc,gK),e(gK,TBr),e(Vc,MBr),e(pr,EBr),e(pr,ox),e(ox,CBr),e(ox,RMe),e(RMe,wBr),e(ox,ABr),e(pr,yBr),e(pr,zt),M(rx,zt,null),e(zt,LBr),e(zt,PMe),e(PMe,xBr),e(zt,$Br),e(zt,Xc),e(Xc,kBr),e(Xc,BMe),e(BMe,SBr),e(Xc,RBr),e(Xc,hK),e(hK,PBr),e(Xc,BBr),e(zt,IBr),M(U5,zt,null),e(pr,NBr),e(pr,Vr),M(tx,Vr,null),e(Vr,qBr),e(Vr,IMe),e(IMe,jBr),e(Vr,DBr),e(Vr,bn),e(bn,GBr),e(bn,NMe),e(NMe,OBr),e(bn,VBr),e(bn,qMe),e(qMe,XBr),e(bn,zBr),e(bn,jMe),e(jMe,WBr),e(bn,QBr),e(Vr,HBr),e(Vr,xe),e(xe,J5),e(J5,DMe),e(DMe,UBr),e(J5,JBr),e(J5,pK),e(pK,YBr),e(J5,KBr),e(xe,ZBr),e(xe,Y5),e(Y5,GMe),e(GMe,eIr),e(Y5,oIr),e(Y5,_K),e(_K,rIr),e(Y5,tIr),e(xe,aIr),e(xe,K5),e(K5,OMe),e(OMe,nIr),e(K5,sIr),e(K5,uK),e(uK,lIr),e(K5,iIr),e(xe,dIr),e(xe,Z5),e(Z5,VMe),e(VMe,cIr),e(Z5,fIr),e(Z5,bK),e(bK,mIr),e(Z5,gIr),e(xe,hIr),e(xe,eC),e(eC,XMe),e(XMe,pIr),e(eC,_Ir),e(eC,vK),e(vK,uIr),e(eC,bIr),e(xe,vIr),e(xe,oC),e(oC,zMe),e(zMe,FIr),e(oC,TIr),e(oC,FK),e(FK,MIr),e(oC,EIr),e(xe,CIr),e(xe,rC),e(rC,WMe),e(WMe,wIr),e(rC,AIr),e(rC,TK),e(TK,yIr),e(rC,LIr),e(xe,xIr),e(xe,tC),e(tC,QMe),e(QMe,$Ir),e(tC,kIr),e(tC,MK),e(MK,SIr),e(tC,RIr),e(xe,PIr),e(xe,aC),e(aC,HMe),e(HMe,BIr),e(aC,IIr),e(aC,EK),e(EK,NIr),e(aC,qIr),e(xe,jIr),e(xe,nC),e(nC,UMe),e(UMe,DIr),e(nC,GIr),e(nC,CK),e(CK,OIr),e(nC,VIr),e(Vr,XIr),M(sC,Vr,null),b(f,FDe,u),b(f,zc,u),e(zc,lC),e(lC,JMe),M(ax,JMe,null),e(zc,zIr),e(zc,YMe),e(YMe,WIr),b(f,TDe,u),b(f,_r,u),M(nx,_r,null),e(_r,QIr),e(_r,Wc),e(Wc,HIr),e(Wc,wK),e(wK,UIr),e(Wc,JIr),e(Wc,AK),e(AK,YIr),e(Wc,KIr),e(_r,ZIr),e(_r,sx),e(sx,eNr),e(sx,KMe),e(KMe,oNr),e(sx,rNr),e(_r,tNr),e(_r,Wt),M(lx,Wt,null),e(Wt,aNr),e(Wt,ZMe),e(ZMe,nNr),e(Wt,sNr),e(Wt,Qc),e(Qc,lNr),e(Qc,e4e),e(e4e,iNr),e(Qc,dNr),e(Qc,yK),e(yK,cNr),e(Qc,fNr),e(Wt,mNr),M(iC,Wt,null),e(_r,gNr),e(_r,Xr),M(ix,Xr,null),e(Xr,hNr),e(Xr,o4e),e(o4e,pNr),e(Xr,_Nr),e(Xr,vn),e(vn,uNr),e(vn,r4e),e(r4e,bNr),e(vn,vNr),e(vn,t4e),e(t4e,FNr),e(vn,TNr),e(vn,a4e),e(a4e,MNr),e(vn,ENr),e(Xr,CNr),e(Xr,$e),e($e,dC),e(dC,n4e),e(n4e,wNr),e(dC,ANr),e(dC,LK),e(LK,yNr),e(dC,LNr),e($e,xNr),e($e,cC),e(cC,s4e),e(s4e,$Nr),e(cC,kNr),e(cC,xK),e(xK,SNr),e(cC,RNr),e($e,PNr),e($e,fC),e(fC,l4e),e(l4e,BNr),e(fC,INr),e(fC,$K),e($K,NNr),e(fC,qNr),e($e,jNr),e($e,mC),e(mC,i4e),e(i4e,DNr),e(mC,GNr),e(mC,kK),e(kK,ONr),e(mC,VNr),e($e,XNr),e($e,gC),e(gC,d4e),e(d4e,zNr),e(gC,WNr),e(gC,SK),e(SK,QNr),e(gC,HNr),e($e,UNr),e($e,hC),e(hC,c4e),e(c4e,JNr),e(hC,YNr),e(hC,RK),e(RK,KNr),e(hC,ZNr),e($e,eqr),e($e,pC),e(pC,f4e),e(f4e,oqr),e(pC,rqr),e(pC,PK),e(PK,tqr),e(pC,aqr),e($e,nqr),e($e,_C),e(_C,m4e),e(m4e,sqr),e(_C,lqr),e(_C,BK),e(BK,iqr),e(_C,dqr),e($e,cqr),e($e,uC),e(uC,g4e),e(g4e,fqr),e(uC,mqr),e(uC,IK),e(IK,gqr),e(uC,hqr),e($e,pqr),e($e,bC),e(bC,h4e),e(h4e,_qr),e(bC,uqr),e(bC,NK),e(NK,bqr),e(bC,vqr),e(Xr,Fqr),M(vC,Xr,null),b(f,MDe,u),b(f,Hc,u),e(Hc,FC),e(FC,p4e),M(dx,p4e,null),e(Hc,Tqr),e(Hc,_4e),e(_4e,Mqr),b(f,EDe,u),b(f,ur,u),M(cx,ur,null),e(ur,Eqr),e(ur,Uc),e(Uc,Cqr),e(Uc,qK),e(qK,wqr),e(Uc,Aqr),e(Uc,jK),e(jK,yqr),e(Uc,Lqr),e(ur,xqr),e(ur,fx),e(fx,$qr),e(fx,u4e),e(u4e,kqr),e(fx,Sqr),e(ur,Rqr),e(ur,Qt),M(mx,Qt,null),e(Qt,Pqr),e(Qt,b4e),e(b4e,Bqr),e(Qt,Iqr),e(Qt,Jc),e(Jc,Nqr),e(Jc,v4e),e(v4e,qqr),e(Jc,jqr),e(Jc,DK),e(DK,Dqr),e(Jc,Gqr),e(Qt,Oqr),M(TC,Qt,null),e(ur,Vqr),e(ur,zr),M(gx,zr,null),e(zr,Xqr),e(zr,F4e),e(F4e,zqr),e(zr,Wqr),e(zr,Fn),e(Fn,Qqr),e(Fn,T4e),e(T4e,Hqr),e(Fn,Uqr),e(Fn,M4e),e(M4e,Jqr),e(Fn,Yqr),e(Fn,E4e),e(E4e,Kqr),e(Fn,Zqr),e(zr,ejr),e(zr,ke),e(ke,MC),e(MC,C4e),e(C4e,ojr),e(MC,rjr),e(MC,GK),e(GK,tjr),e(MC,ajr),e(ke,njr),e(ke,EC),e(EC,w4e),e(w4e,sjr),e(EC,ljr),e(EC,OK),e(OK,ijr),e(EC,djr),e(ke,cjr),e(ke,CC),e(CC,A4e),e(A4e,fjr),e(CC,mjr),e(CC,VK),e(VK,gjr),e(CC,hjr),e(ke,pjr),e(ke,wC),e(wC,y4e),e(y4e,_jr),e(wC,ujr),e(wC,XK),e(XK,bjr),e(wC,vjr),e(ke,Fjr),e(ke,AC),e(AC,L4e),e(L4e,Tjr),e(AC,Mjr),e(AC,zK),e(zK,Ejr),e(AC,Cjr),e(ke,wjr),e(ke,yC),e(yC,x4e),e(x4e,Ajr),e(yC,yjr),e(yC,WK),e(WK,Ljr),e(yC,xjr),e(ke,$jr),e(ke,LC),e(LC,$4e),e($4e,kjr),e(LC,Sjr),e(LC,QK),e(QK,Rjr),e(LC,Pjr),e(ke,Bjr),e(ke,xC),e(xC,k4e),e(k4e,Ijr),e(xC,Njr),e(xC,HK),e(HK,qjr),e(xC,jjr),e(ke,Djr),e(ke,$C),e($C,S4e),e(S4e,Gjr),e($C,Ojr),e($C,UK),e(UK,Vjr),e($C,Xjr),e(ke,zjr),e(ke,kC),e(kC,R4e),e(R4e,Wjr),e(kC,Qjr),e(kC,JK),e(JK,Hjr),e(kC,Ujr),e(zr,Jjr),M(SC,zr,null),b(f,CDe,u),b(f,Yc,u),e(Yc,RC),e(RC,P4e),M(hx,P4e,null),e(Yc,Yjr),e(Yc,B4e),e(B4e,Kjr),b(f,wDe,u),b(f,br,u),M(px,br,null),e(br,Zjr),e(br,Kc),e(Kc,eDr),e(Kc,YK),e(YK,oDr),e(Kc,rDr),e(Kc,KK),e(KK,tDr),e(Kc,aDr),e(br,nDr),e(br,_x),e(_x,sDr),e(_x,I4e),e(I4e,lDr),e(_x,iDr),e(br,dDr),e(br,Ht),M(ux,Ht,null),e(Ht,cDr),e(Ht,N4e),e(N4e,fDr),e(Ht,mDr),e(Ht,Zc),e(Zc,gDr),e(Zc,q4e),e(q4e,hDr),e(Zc,pDr),e(Zc,ZK),e(ZK,_Dr),e(Zc,uDr),e(Ht,bDr),M(PC,Ht,null),e(br,vDr),e(br,Wr),M(bx,Wr,null),e(Wr,FDr),e(Wr,j4e),e(j4e,TDr),e(Wr,MDr),e(Wr,Tn),e(Tn,EDr),e(Tn,D4e),e(D4e,CDr),e(Tn,wDr),e(Tn,G4e),e(G4e,ADr),e(Tn,yDr),e(Tn,O4e),e(O4e,LDr),e(Tn,xDr),e(Wr,$Dr),e(Wr,Ge),e(Ge,BC),e(BC,V4e),e(V4e,kDr),e(BC,SDr),e(BC,eZ),e(eZ,RDr),e(BC,PDr),e(Ge,BDr),e(Ge,IC),e(IC,X4e),e(X4e,IDr),e(IC,NDr),e(IC,oZ),e(oZ,qDr),e(IC,jDr),e(Ge,DDr),e(Ge,NC),e(NC,z4e),e(z4e,GDr),e(NC,ODr),e(NC,rZ),e(rZ,VDr),e(NC,XDr),e(Ge,zDr),e(Ge,qC),e(qC,W4e),e(W4e,WDr),e(qC,QDr),e(qC,tZ),e(tZ,HDr),e(qC,UDr),e(Ge,JDr),e(Ge,jC),e(jC,Q4e),e(Q4e,YDr),e(jC,KDr),e(jC,aZ),e(aZ,ZDr),e(jC,eGr),e(Ge,oGr),e(Ge,DC),e(DC,H4e),e(H4e,rGr),e(DC,tGr),e(DC,nZ),e(nZ,aGr),e(DC,nGr),e(Ge,sGr),e(Ge,GC),e(GC,U4e),e(U4e,lGr),e(GC,iGr),e(GC,sZ),e(sZ,dGr),e(GC,cGr),e(Ge,fGr),e(Ge,OC),e(OC,J4e),e(J4e,mGr),e(OC,gGr),e(OC,lZ),e(lZ,hGr),e(OC,pGr),e(Wr,_Gr),M(VC,Wr,null),b(f,ADe,u),b(f,ef,u),e(ef,XC),e(XC,Y4e),M(vx,Y4e,null),e(ef,uGr),e(ef,K4e),e(K4e,bGr),b(f,yDe,u),b(f,vr,u),M(Fx,vr,null),e(vr,vGr),e(vr,of),e(of,FGr),e(of,iZ),e(iZ,TGr),e(of,MGr),e(of,dZ),e(dZ,EGr),e(of,CGr),e(vr,wGr),e(vr,Tx),e(Tx,AGr),e(Tx,Z4e),e(Z4e,yGr),e(Tx,LGr),e(vr,xGr),e(vr,Ut),M(Mx,Ut,null),e(Ut,$Gr),e(Ut,eEe),e(eEe,kGr),e(Ut,SGr),e(Ut,rf),e(rf,RGr),e(rf,oEe),e(oEe,PGr),e(rf,BGr),e(rf,cZ),e(cZ,IGr),e(rf,NGr),e(Ut,qGr),M(zC,Ut,null),e(vr,jGr),e(vr,Qr),M(Ex,Qr,null),e(Qr,DGr),e(Qr,rEe),e(rEe,GGr),e(Qr,OGr),e(Qr,Mn),e(Mn,VGr),e(Mn,tEe),e(tEe,XGr),e(Mn,zGr),e(Mn,aEe),e(aEe,WGr),e(Mn,QGr),e(Mn,nEe),e(nEe,HGr),e(Mn,UGr),e(Qr,JGr),e(Qr,Oe),e(Oe,WC),e(WC,sEe),e(sEe,YGr),e(WC,KGr),e(WC,fZ),e(fZ,ZGr),e(WC,eOr),e(Oe,oOr),e(Oe,QC),e(QC,lEe),e(lEe,rOr),e(QC,tOr),e(QC,mZ),e(mZ,aOr),e(QC,nOr),e(Oe,sOr),e(Oe,HC),e(HC,iEe),e(iEe,lOr),e(HC,iOr),e(HC,gZ),e(gZ,dOr),e(HC,cOr),e(Oe,fOr),e(Oe,UC),e(UC,dEe),e(dEe,mOr),e(UC,gOr),e(UC,hZ),e(hZ,hOr),e(UC,pOr),e(Oe,_Or),e(Oe,JC),e(JC,cEe),e(cEe,uOr),e(JC,bOr),e(JC,pZ),e(pZ,vOr),e(JC,FOr),e(Oe,TOr),e(Oe,YC),e(YC,fEe),e(fEe,MOr),e(YC,EOr),e(YC,_Z),e(_Z,COr),e(YC,wOr),e(Oe,AOr),e(Oe,KC),e(KC,mEe),e(mEe,yOr),e(KC,LOr),e(KC,uZ),e(uZ,xOr),e(KC,$Or),e(Oe,kOr),e(Oe,ZC),e(ZC,gEe),e(gEe,SOr),e(ZC,ROr),e(ZC,bZ),e(bZ,POr),e(ZC,BOr),e(Qr,IOr),M(e3,Qr,null),b(f,LDe,u),b(f,tf,u),e(tf,o3),e(o3,hEe),M(Cx,hEe,null),e(tf,NOr),e(tf,pEe),e(pEe,qOr),b(f,xDe,u),b(f,Fr,u),M(wx,Fr,null),e(Fr,jOr),e(Fr,af),e(af,DOr),e(af,vZ),e(vZ,GOr),e(af,OOr),e(af,FZ),e(FZ,VOr),e(af,XOr),e(Fr,zOr),e(Fr,Ax),e(Ax,WOr),e(Ax,_Ee),e(_Ee,QOr),e(Ax,HOr),e(Fr,UOr),e(Fr,Jt),M(yx,Jt,null),e(Jt,JOr),e(Jt,uEe),e(uEe,YOr),e(Jt,KOr),e(Jt,nf),e(nf,ZOr),e(nf,bEe),e(bEe,eVr),e(nf,oVr),e(nf,TZ),e(TZ,rVr),e(nf,tVr),e(Jt,aVr),M(r3,Jt,null),e(Fr,nVr),e(Fr,Hr),M(Lx,Hr,null),e(Hr,sVr),e(Hr,vEe),e(vEe,lVr),e(Hr,iVr),e(Hr,En),e(En,dVr),e(En,FEe),e(FEe,cVr),e(En,fVr),e(En,TEe),e(TEe,mVr),e(En,gVr),e(En,MEe),e(MEe,hVr),e(En,pVr),e(Hr,_Vr),e(Hr,EEe),e(EEe,t3),e(t3,CEe),e(CEe,uVr),e(t3,bVr),e(t3,MZ),e(MZ,vVr),e(t3,FVr),e(Hr,TVr),M(a3,Hr,null),b(f,$De,u),b(f,sf,u),e(sf,n3),e(n3,wEe),M(xx,wEe,null),e(sf,MVr),e(sf,AEe),e(AEe,EVr),b(f,kDe,u),b(f,Tr,u),M($x,Tr,null),e(Tr,CVr),e(Tr,lf),e(lf,wVr),e(lf,EZ),e(EZ,AVr),e(lf,yVr),e(lf,CZ),e(CZ,LVr),e(lf,xVr),e(Tr,$Vr),e(Tr,kx),e(kx,kVr),e(kx,yEe),e(yEe,SVr),e(kx,RVr),e(Tr,PVr),e(Tr,Yt),M(Sx,Yt,null),e(Yt,BVr),e(Yt,LEe),e(LEe,IVr),e(Yt,NVr),e(Yt,df),e(df,qVr),e(df,xEe),e(xEe,jVr),e(df,DVr),e(df,wZ),e(wZ,GVr),e(df,OVr),e(Yt,VVr),M(s3,Yt,null),e(Tr,XVr),e(Tr,Ur),M(Rx,Ur,null),e(Ur,zVr),e(Ur,$Ee),e($Ee,WVr),e(Ur,QVr),e(Ur,Cn),e(Cn,HVr),e(Cn,kEe),e(kEe,UVr),e(Cn,JVr),e(Cn,SEe),e(SEe,YVr),e(Cn,KVr),e(Cn,REe),e(REe,ZVr),e(Cn,eXr),e(Ur,oXr),e(Ur,Px),e(Px,l3),e(l3,PEe),e(PEe,rXr),e(l3,tXr),e(l3,AZ),e(AZ,aXr),e(l3,nXr),e(Px,sXr),e(Px,i3),e(i3,BEe),e(BEe,lXr),e(i3,iXr),e(i3,yZ),e(yZ,dXr),e(i3,cXr),e(Ur,fXr),M(d3,Ur,null),b(f,SDe,u),b(f,cf,u),e(cf,c3),e(c3,IEe),M(Bx,IEe,null),e(cf,mXr),e(cf,NEe),e(NEe,gXr),b(f,RDe,u),b(f,Mr,u),M(Ix,Mr,null),e(Mr,hXr),e(Mr,ff),e(ff,pXr),e(ff,LZ),e(LZ,_Xr),e(ff,uXr),e(ff,xZ),e(xZ,bXr),e(ff,vXr),e(Mr,FXr),e(Mr,Nx),e(Nx,TXr),e(Nx,qEe),e(qEe,MXr),e(Nx,EXr),e(Mr,CXr),e(Mr,Kt),M(qx,Kt,null),e(Kt,wXr),e(Kt,jEe),e(jEe,AXr),e(Kt,yXr),e(Kt,mf),e(mf,LXr),e(mf,DEe),e(DEe,xXr),e(mf,$Xr),e(mf,$Z),e($Z,kXr),e(mf,SXr),e(Kt,RXr),M(f3,Kt,null),e(Mr,PXr),e(Mr,Jr),M(jx,Jr,null),e(Jr,BXr),e(Jr,GEe),e(GEe,IXr),e(Jr,NXr),e(Jr,wn),e(wn,qXr),e(wn,OEe),e(OEe,jXr),e(wn,DXr),e(wn,VEe),e(VEe,GXr),e(wn,OXr),e(wn,XEe),e(XEe,VXr),e(wn,XXr),e(Jr,zXr),e(Jr,zEe),e(zEe,m3),e(m3,WEe),e(WEe,WXr),e(m3,QXr),e(m3,kZ),e(kZ,HXr),e(m3,UXr),e(Jr,JXr),M(g3,Jr,null),PDe=!0},p(f,[u]){const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),Tf.$set(Dx);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),wg.$set(QEe);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),sh.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),qh.$set(UEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),jh.$set(Gx);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),np.$set(JEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),dp.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),nu.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),lu.$set(ZEe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Ku.$set(Ox);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),e2.$set(e5e);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),j2.$set(Vx);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),G2.$set(o5e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),C1.$set(Xx);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),A1.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),z1.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),Q1.$set(a5e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Ob.$set(gf);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),Xb.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),Tv.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),Ev.$set(l5e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),$v.$set(zx);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),Sv.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),hF.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),_F.$set(c5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),a6.$set(et);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),s6.$set(Wx);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),d6.$set(f5e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),f6.$set(Qx);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),w6.$set(m5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),y6.$set(ot);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),$6.$set(g5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),S6.$set(hf);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),V6.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),z6.$set(p5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),K6.$set(y);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),eT.$set(h3);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),fT.$set(_5e);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),gT.$set(u5e);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),uT.$set(p3);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),vT.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),AT.$set(v5e);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),LT.$set(_3);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),RT.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),BT.$set(T5e);const u3={};u&2&&(u3.$$scope={dirty:u,ctx:f}),jT.$set(u3);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),GT.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),XT.$set(E5e);const b3={};u&2&&(b3.$$scope={dirty:u,ctx:f}),WT.$set(b3);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),KT.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),e7.$set(w5e);const v3={};u&2&&(v3.$$scope={dirty:u,ctx:f}),t7.$set(v3);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),n7.$set(A5e);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),Y7.$set(y5e);const F3={};u&2&&(F3.$$scope={dirty:u,ctx:f}),Z7.$set(F3);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),E9.$set(L5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),w9.$set(x5e);const T3={};u&2&&(T3.$$scope={dirty:u,ctx:f}),q9.$set(T3);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),D9.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),z9.$set(k5e);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),Q9.$set(M3);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),hM.$set(S5e);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),_M.$set(R5e);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),yM.$set(E3);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),xM.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),r4.$set(B5e);const C3={};u&2&&(C3.$$scope={dirty:u,ctx:f}),a4.$set(C3);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),M4.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),C4.$set(N5e);const w3={};u&2&&(w3.$$scope={dirty:u,ctx:f}),y4.$set(w3);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),x4.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),k4.$set(j5e);const A3={};u&2&&(A3.$$scope={dirty:u,ctx:f}),R4.$set(A3);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),eE.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),rE.$set(G5e);const y3={};u&2&&(y3.$$scope={dirty:u,ctx:f}),EE.$set(y3);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),wE.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),yE.$set(V5e);const L3={};u&2&&(L3.$$scope={dirty:u,ctx:f}),xE.$set(L3);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),kE.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),RE.$set(z5e);const x3={};u&2&&(x3.$$scope={dirty:u,ctx:f}),s5.$set(x3);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),i5.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),b5.$set(Q5e);const $3={};u&2&&($3.$$scope={dirty:u,ctx:f}),F5.$set($3);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),P5.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),I5.$set(U5e);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),Q5.$set(k3);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),U5.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),sC.$set(Y5e);const S3={};u&2&&(S3.$$scope={dirty:u,ctx:f}),iC.$set(S3);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),vC.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),TC.$set(Z5e);const R3={};u&2&&(R3.$$scope={dirty:u,ctx:f}),SC.$set(R3);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),PC.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),VC.$set(oCe);const P3={};u&2&&(P3.$$scope={dirty:u,ctx:f}),zC.$set(P3);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),e3.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),r3.$set(tCe);const B3={};u&2&&(B3.$$scope={dirty:u,ctx:f}),a3.$set(B3);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),s3.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),d3.$set(nCe);const I3={};u&2&&(I3.$$scope={dirty:u,ctx:f}),f3.$set(I3);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),g3.$set(sCe)},i(f){PDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(Bw.$$.fragment,f),E(Iw.$$.fragment,f),E(Tf.$$.fragment,f),E(Nw.$$.fragment,f),E(qw.$$.fragment,f),E(Gw.$$.fragment,f),E(wg.$$.fragment,f),E(Ow.$$.fragment,f),E(Vw.$$.fragment,f),E(Xw.$$.fragment,f),E(Qw.$$.fragment,f),E(sh.$$.fragment,f),E(Hw.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Zw.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(nA.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(cA.$$.fragment,f),E(dp.$$.fragment,f),E(fA.$$.fragment,f),E(nu.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(pA.$$.fragment,f),E(lu.$$.fragment,f),E(_A.$$.fragment,f),E(Ku.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(FA.$$.fragment,f),E(e2.$$.fragment,f),E(TA.$$.fragment,f),E(j2.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(wA.$$.fragment,f),E(G2.$$.fragment,f),E(AA.$$.fragment,f),E(C1.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E($A.$$.fragment,f),E(A1.$$.fragment,f),E(kA.$$.fragment,f),E(z1.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(Q1.$$.fragment,f),E(IA.$$.fragment,f),E(Ob.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(DA.$$.fragment,f),E(Xb.$$.fragment,f),E(GA.$$.fragment,f),E(Tv.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(Ev.$$.fragment,f),E(WA.$$.fragment,f),E($v.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(Sv.$$.fragment,f),E(YA.$$.fragment,f),E(hF.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(_F.$$.fragment,f),E(ry.$$.fragment,f),E(a6.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(s6.$$.fragment,f),E(ly.$$.fragment,f),E(d6.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(f6.$$.fragment,f),E(my.$$.fragment,f),E(w6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(y6.$$.fragment,f),E(uy.$$.fragment,f),E($6.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(S6.$$.fragment,f),E(My.$$.fragment,f),E(V6.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(z6.$$.fragment,f),E(yy.$$.fragment,f),E(K6.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(eT.$$.fragment,f),E(Sy.$$.fragment,f),E(fT.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(gT.$$.fragment,f),E(Ny.$$.fragment,f),E(uT.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(vT.$$.fragment,f),E(Vy.$$.fragment,f),E(AT.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(LT.$$.fragment,f),E(Hy.$$.fragment,f),E(RT.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(BT.$$.fragment,f),E(Zy.$$.fragment,f),E(jT.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(GT.$$.fragment,f),E(nL.$$.fragment,f),E(XT.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(WT.$$.fragment,f),E(cL.$$.fragment,f),E(KT.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(e7.$$.fragment,f),E(pL.$$.fragment,f),E(t7.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(n7.$$.fragment,f),E(FL.$$.fragment,f),E(Y7.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(Z7.$$.fragment,f),E(wL.$$.fragment,f),E(E9.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(w9.$$.fragment,f),E($L.$$.fragment,f),E(q9.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(D9.$$.fragment,f),E(BL.$$.fragment,f),E(z9.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Q9.$$.fragment,f),E(DL.$$.fragment,f),E(hM.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(_M.$$.fragment,f),E(zL.$$.fragment,f),E(yM.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(xM.$$.fragment,f),E(JL.$$.fragment,f),E(r4.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(a4.$$.fragment,f),E(o8.$$.fragment,f),E(M4.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(C4.$$.fragment,f),E(s8.$$.fragment,f),E(y4.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(x4.$$.fragment,f),E(m8.$$.fragment,f),E(k4.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(R4.$$.fragment,f),E(u8.$$.fragment,f),E(eE.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(rE.$$.fragment,f),E(M8.$$.fragment,f),E(EE.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(wE.$$.fragment,f),E(y8.$$.fragment,f),E(yE.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(xE.$$.fragment,f),E(S8.$$.fragment,f),E(kE.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(RE.$$.fragment,f),E(N8.$$.fragment,f),E(s5.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(i5.$$.fragment,f),E(O8.$$.fragment,f),E(b5.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(F5.$$.fragment,f),E(Q8.$$.fragment,f),E(P5.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(I5.$$.fragment,f),E(K8.$$.fragment,f),E(Q5.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(U5.$$.fragment,f),E(tx.$$.fragment,f),E(sC.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(iC.$$.fragment,f),E(ix.$$.fragment,f),E(vC.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(TC.$$.fragment,f),E(gx.$$.fragment,f),E(SC.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(PC.$$.fragment,f),E(bx.$$.fragment,f),E(VC.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(zC.$$.fragment,f),E(Ex.$$.fragment,f),E(e3.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(r3.$$.fragment,f),E(Lx.$$.fragment,f),E(a3.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(s3.$$.fragment,f),E(Rx.$$.fragment,f),E(d3.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(f3.$$.fragment,f),E(jx.$$.fragment,f),E(g3.$$.fragment,f),PDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(Bw.$$.fragment,f),C(Iw.$$.fragment,f),C(Tf.$$.fragment,f),C(Nw.$$.fragment,f),C(qw.$$.fragment,f),C(Gw.$$.fragment,f),C(wg.$$.fragment,f),C(Ow.$$.fragment,f),C(Vw.$$.fragment,f),C(Xw.$$.fragment,f),C(Qw.$$.fragment,f),C(sh.$$.fragment,f),C(Hw.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Zw.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(nA.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(cA.$$.fragment,f),C(dp.$$.fragment,f),C(fA.$$.fragment,f),C(nu.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(pA.$$.fragment,f),C(lu.$$.fragment,f),C(_A.$$.fragment,f),C(Ku.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(FA.$$.fragment,f),C(e2.$$.fragment,f),C(TA.$$.fragment,f),C(j2.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(wA.$$.fragment,f),C(G2.$$.fragment,f),C(AA.$$.fragment,f),C(C1.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C($A.$$.fragment,f),C(A1.$$.fragment,f),C(kA.$$.fragment,f),C(z1.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(Q1.$$.fragment,f),C(IA.$$.fragment,f),C(Ob.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(DA.$$.fragment,f),C(Xb.$$.fragment,f),C(GA.$$.fragment,f),C(Tv.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(Ev.$$.fragment,f),C(WA.$$.fragment,f),C($v.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(Sv.$$.fragment,f),C(YA.$$.fragment,f),C(hF.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(_F.$$.fragment,f),C(ry.$$.fragment,f),C(a6.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(s6.$$.fragment,f),C(ly.$$.fragment,f),C(d6.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(f6.$$.fragment,f),C(my.$$.fragment,f),C(w6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(y6.$$.fragment,f),C(uy.$$.fragment,f),C($6.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(S6.$$.fragment,f),C(My.$$.fragment,f),C(V6.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(z6.$$.fragment,f),C(yy.$$.fragment,f),C(K6.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(eT.$$.fragment,f),C(Sy.$$.fragment,f),C(fT.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(gT.$$.fragment,f),C(Ny.$$.fragment,f),C(uT.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(vT.$$.fragment,f),C(Vy.$$.fragment,f),C(AT.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(LT.$$.fragment,f),C(Hy.$$.fragment,f),C(RT.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(BT.$$.fragment,f),C(Zy.$$.fragment,f),C(jT.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(GT.$$.fragment,f),C(nL.$$.fragment,f),C(XT.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(WT.$$.fragment,f),C(cL.$$.fragment,f),C(KT.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(e7.$$.fragment,f),C(pL.$$.fragment,f),C(t7.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(n7.$$.fragment,f),C(FL.$$.fragment,f),C(Y7.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(Z7.$$.fragment,f),C(wL.$$.fragment,f),C(E9.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(w9.$$.fragment,f),C($L.$$.fragment,f),C(q9.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(D9.$$.fragment,f),C(BL.$$.fragment,f),C(z9.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Q9.$$.fragment,f),C(DL.$$.fragment,f),C(hM.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(_M.$$.fragment,f),C(zL.$$.fragment,f),C(yM.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(xM.$$.fragment,f),C(JL.$$.fragment,f),C(r4.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(a4.$$.fragment,f),C(o8.$$.fragment,f),C(M4.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(C4.$$.fragment,f),C(s8.$$.fragment,f),C(y4.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(x4.$$.fragment,f),C(m8.$$.fragment,f),C(k4.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(R4.$$.fragment,f),C(u8.$$.fragment,f),C(eE.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(rE.$$.fragment,f),C(M8.$$.fragment,f),C(EE.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(wE.$$.fragment,f),C(y8.$$.fragment,f),C(yE.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(xE.$$.fragment,f),C(S8.$$.fragment,f),C(kE.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(RE.$$.fragment,f),C(N8.$$.fragment,f),C(s5.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(i5.$$.fragment,f),C(O8.$$.fragment,f),C(b5.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(F5.$$.fragment,f),C(Q8.$$.fragment,f),C(P5.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(I5.$$.fragment,f),C(K8.$$.fragment,f),C(Q5.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(U5.$$.fragment,f),C(tx.$$.fragment,f),C(sC.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(iC.$$.fragment,f),C(ix.$$.fragment,f),C(vC.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(TC.$$.fragment,f),C(gx.$$.fragment,f),C(SC.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(PC.$$.fragment,f),C(bx.$$.fragment,f),C(VC.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(zC.$$.fragment,f),C(Ex.$$.fragment,f),C(e3.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(r3.$$.fragment,f),C(Lx.$$.fragment,f),C(a3.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(s3.$$.fragment,f),C(Rx.$$.fragment,f),C(d3.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(f3.$$.fragment,f),C(jx.$$.fragment,f),C(g3.$$.fragment,f),PDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(kqe),f&&t(vi),w(Bw),f&&t(Sqe),f&&t(kn),f&&t(Rqe),w(Iw,f),f&&t(Pqe),f&&t(nk),f&&t(Bqe),w(Tf,f),f&&t(Iqe),f&&t(Fi),w(Nw),f&&t(Nqe),f&&t(Co),w(qw),w(Gw),w(wg),w(Ow),f&&t(qqe),f&&t(Mi),w(Vw),f&&t(jqe),f&&t(wo),w(Xw),w(Qw),w(sh),w(Hw),f&&t(Dqe),f&&t(Ei),w(Uw),f&&t(Gqe),f&&t(Ao),w(Jw),w(Zw),w(qh),w(jh),w(eA),f&&t(Oqe),f&&t(Ci),w(oA),f&&t(Vqe),f&&t(yo),w(rA),w(nA),w(np),w(sp),w(sA),f&&t(Xqe),f&&t(Ai),w(lA),f&&t(zqe),f&&t(Lo),w(iA),w(cA),w(dp),w(fA),w(nu),f&&t(Wqe),f&&t(xi),w(mA),f&&t(Qqe),f&&t(xo),w(gA),w(pA),w(lu),w(_A),w(Ku),f&&t(Hqe),f&&t(Si),w(uA),f&&t(Uqe),f&&t($o),w(bA),w(FA),w(e2),w(TA),w(j2),f&&t(Jqe),f&&t(Bi),w(MA),f&&t(Yqe),f&&t(ko),w(EA),w(wA),w(G2),w(AA),w(C1),f&&t(Kqe),f&&t(qi),w(yA),f&&t(Zqe),f&&t(So),w(LA),w($A),w(A1),w(kA),w(z1),f&&t(eje),f&&t(Gi),w(SA),f&&t(oje),f&&t(Ro),w(RA),w(BA),w(Q1),w(IA),w(Ob),f&&t(rje),f&&t(Xi),w(NA),f&&t(tje),f&&t(Po),w(qA),w(DA),w(Xb),w(GA),w(Tv),f&&t(aje),f&&t(Qi),w(OA),f&&t(nje),f&&t(Bo),w(VA),w(zA),w(Ev),w(WA),w($v),f&&t(sje),f&&t(Ji),w(QA),f&&t(lje),f&&t(Io),w(HA),w(JA),w(Sv),w(YA),w(hF),f&&t(ije),f&&t(Zi),w(KA),f&&t(dje),f&&t(No),w(ZA),w(oy),w(_F),w(ry),w(a6),f&&t(cje),f&&t(rd),w(ty),f&&t(fje),f&&t(qo),w(ay),w(sy),w(s6),w(ly),w(d6),f&&t(mje),f&&t(nd),w(iy),f&&t(gje),f&&t(jo),w(dy),w(fy),w(f6),w(my),w(w6),f&&t(hje),f&&t(id),w(gy),f&&t(pje),f&&t(Do),w(hy),w(_y),w(y6),w(uy),w($6),f&&t(_je),f&&t(fd),w(by),f&&t(uje),f&&t(Go),w(vy),w(Ty),w(S6),w(My),w(V6),f&&t(bje),f&&t(hd),w(Ey),f&&t(vje),f&&t(Oo),w(Cy),w(Ay),w(z6),w(yy),w(K6),f&&t(Fje),f&&t(ud),w(Ly),f&&t(Tje),f&&t(Vo),w(xy),w(ky),w(eT),w(Sy),w(fT),f&&t(Mje),f&&t(Fd),w(Ry),f&&t(Eje),f&&t(Xo),w(Py),w(Iy),w(gT),w(Ny),w(uT),f&&t(Cje),f&&t(Ed),w(jy),f&&t(wje),f&&t(zo),w(Dy),w(Oy),w(vT),w(Vy),w(AT),f&&t(Aje),f&&t(Ad),w(Xy),f&&t(yje),f&&t(Wo),w(zy),w(Qy),w(LT),w(Hy),w(RT),f&&t(Lje),f&&t($d),w(Uy),f&&t(xje),f&&t(Qo),w(Jy),w(Ky),w(BT),w(Zy),w(jT),f&&t($je),f&&t(Rd),w(oL),f&&t(kje),f&&t(Ho),w(rL),w(aL),w(GT),w(nL),w(XT),f&&t(Sje),f&&t(Id),w(sL),f&&t(Rje),f&&t(Uo),w(lL),w(dL),w(WT),w(cL),w(KT),f&&t(Pje),f&&t(jd),w(fL),f&&t(Bje),f&&t(Jo),w(mL),w(hL),w(e7),w(pL),w(t7),f&&t(Ije),f&&t(Od),w(_L),f&&t(Nje),f&&t(Yo),w(uL),w(vL),w(n7),w(FL),w(Y7),f&&t(qje),f&&t(zd),w(TL),f&&t(jje),f&&t(Ko),w(ML),w(CL),w(Z7),w(wL),w(E9),f&&t(Dje),f&&t(Hd),w(AL),f&&t(Gje),f&&t(Zo),w(yL),w(xL),w(w9),w($L),w(q9),f&&t(Oje),f&&t(Yd),w(kL),f&&t(Vje),f&&t(er),w(SL),w(PL),w(D9),w(BL),w(z9),f&&t(Xje),f&&t(ec),w(IL),f&&t(zje),f&&t(or),w(NL),w(jL),w(Q9),w(DL),w(hM),f&&t(Wje),f&&t(tc),w(GL),f&&t(Qje),f&&t(rr),w(OL),w(XL),w(_M),w(zL),w(yM),f&&t(Hje),f&&t(sc),w(WL),f&&t(Uje),f&&t(tr),w(QL),w(UL),w(xM),w(JL),w(r4),f&&t(Jje),f&&t(dc),w(YL),f&&t(Yje),f&&t(ar),w(KL),w(e8),w(a4),w(o8),w(M4),f&&t(Kje),f&&t(mc),w(r8),f&&t(Zje),f&&t(nr),w(t8),w(n8),w(C4),w(s8),w(y4),f&&t(eDe),f&&t(pc),w(i8),f&&t(oDe),f&&t(sr),w(d8),w(f8),w(x4),w(m8),w(k4),f&&t(rDe),f&&t(bc),w(g8),f&&t(tDe),f&&t(lr),w(h8),w(_8),w(R4),w(u8),w(eE),f&&t(aDe),f&&t(Tc),w(b8),f&&t(nDe),f&&t(ir),w(v8),w(T8),w(rE),w(M8),w(EE),f&&t(sDe),f&&t(Cc),w(E8),f&&t(lDe),f&&t(dr),w(C8),w(A8),w(wE),w(y8),w(yE),f&&t(iDe),f&&t(yc),w(L8),f&&t(dDe),f&&t(cr),w(x8),w(k8),w(xE),w(S8),w(kE),f&&t(cDe),f&&t($c),w(R8),f&&t(fDe),f&&t(fr),w(P8),w(I8),w(RE),w(N8),w(s5),f&&t(mDe),f&&t(Rc),w(q8),f&&t(gDe),f&&t(mr),w(j8),w(G8),w(i5),w(O8),w(b5),f&&t(hDe),f&&t(Ic),w(V8),f&&t(pDe),f&&t(gr),w(X8),w(W8),w(F5),w(Q8),w(P5),f&&t(_De),f&&t(jc),w(H8),f&&t(uDe),f&&t(hr),w(U8),w(Y8),w(I5),w(K8),w(Q5),f&&t(bDe),f&&t(Oc),w(Z8),f&&t(vDe),f&&t(pr),w(ex),w(rx),w(U5),w(tx),w(sC),f&&t(FDe),f&&t(zc),w(ax),f&&t(TDe),f&&t(_r),w(nx),w(lx),w(iC),w(ix),w(vC),f&&t(MDe),f&&t(Hc),w(dx),f&&t(EDe),f&&t(ur),w(cx),w(mx),w(TC),w(gx),w(SC),f&&t(CDe),f&&t(Yc),w(hx),f&&t(wDe),f&&t(br),w(px),w(ux),w(PC),w(bx),w(VC),f&&t(ADe),f&&t(ef),w(vx),f&&t(yDe),f&&t(vr),w(Fx),w(Mx),w(zC),w(Ex),w(e3),f&&t(LDe),f&&t(tf),w(Cx),f&&t(xDe),f&&t(Fr),w(wx),w(yx),w(r3),w(Lx),w(a3),f&&t($De),f&&t(sf),w(xx),f&&t(kDe),f&&t(Tr),w($x),w(Sx),w(s3),w(Rx),w(d3),f&&t(SDe),f&&t(cf),w(Bx),f&&t(RDe),f&&t(Mr),w(Ix),w(qx),w(f3),w(jx),w(g3)}}}const QRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function HRt(L){return Hkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oPt extends Xkt{constructor(g){super();zkt(this,g,HRt,WRt,Wkt,{})}}export{oPt as default,QRt as metadata};
