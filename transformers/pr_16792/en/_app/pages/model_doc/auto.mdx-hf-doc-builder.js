import{S as vBt,i as FBt,s as TBt,e as a,k as l,w as F,t as o,M as MBt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as EBt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as zQr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function CBt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,Hw,bf,Oe,We,_i,Ln,Uw,yn,xn,Jw,ui,$n,Yw,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),Hw=o(")."),bf=l(),Oe=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),Uw=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),Jw=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),Yw=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var bk=s(p);m=r(bk,"NewModelConfig"),bk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var vk=s(gi);uf=r(vk,"model_type"),vk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var Fk=s(hi);pi=r(Fk,'"new-model"'),Fk.forEach(t),Hw=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Oe=n(Qe,"P",{});var Eo=s(Oe);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),Uw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var Tk=s(yn);xn=r(Tk,"PreTrainedModel"),Tk.forEach(t),Jw=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),Yw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var Mk=s(bi);vf=r(Mk,"NewModelConfig"),Mk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,Hw),b(Qe,bf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,_i),e(_i,Ln),e(Oe,Uw),e(Oe,yn),e(yn,xn),e(Oe,Jw),e(Oe,ui),e(ui,$n),e(Oe,Yw),e(Oe,bi),e(bi,vf),e(Oe,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Oe)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Nt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TNt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,Hw,bf,Oe,We,_i,Ln,Uw,yn,xn,Jw,ui,$n,Yw,bi,vf,Ca,Qe,Ae,bk,vi,vk,Fk,Eo,wa,Tk,Ff,Mk,tXe,Wje,Fi,Tf,sre,Kw,aXe,lre,nXe,Qje,kn,sXe,ire,lXe,iXe,dre,dXe,cXe,Hje,Zw,Uje,Ek,fXe,Jje,Mf,Yje,Ti,Ef,cre,eA,mXe,fre,gXe,Kje,Co,oA,hXe,rA,pXe,Ck,_Xe,uXe,bXe,tA,vXe,mre,FXe,TXe,MXe,Er,aA,EXe,gre,CXe,wXe,Mi,AXe,hre,LXe,yXe,pre,xXe,$Xe,kXe,A,Cf,_re,SXe,RXe,wk,PXe,BXe,IXe,wf,ure,NXe,qXe,Ak,jXe,DXe,GXe,Af,bre,OXe,VXe,Lk,XXe,zXe,WXe,Lf,vre,QXe,HXe,yk,UXe,JXe,YXe,yf,Fre,KXe,ZXe,xk,eze,oze,rze,xf,Tre,tze,aze,$k,nze,sze,lze,$f,Mre,ize,dze,kk,cze,fze,mze,kf,Ere,gze,hze,Sk,pze,_ze,uze,Sf,Cre,bze,vze,Rk,Fze,Tze,Mze,Rf,wre,Eze,Cze,Pk,wze,Aze,Lze,Pf,Are,yze,xze,Bk,$ze,kze,Sze,Bf,Lre,Rze,Pze,Ik,Bze,Ize,Nze,If,yre,qze,jze,Nk,Dze,Gze,Oze,Nf,xre,Vze,Xze,qk,zze,Wze,Qze,qf,$re,Hze,Uze,jk,Jze,Yze,Kze,jf,kre,Zze,eWe,Dk,oWe,rWe,tWe,Df,Sre,aWe,nWe,Gk,sWe,lWe,iWe,Gf,Rre,dWe,cWe,Ok,fWe,mWe,gWe,Of,Pre,hWe,pWe,Vk,_We,uWe,bWe,Vf,Bre,vWe,FWe,Xk,TWe,MWe,EWe,Xf,Ire,CWe,wWe,zk,AWe,LWe,yWe,zf,Nre,xWe,$We,Wk,kWe,SWe,RWe,Wf,qre,PWe,BWe,Qk,IWe,NWe,qWe,Qf,jre,jWe,DWe,Hk,GWe,OWe,VWe,Hf,Dre,XWe,zWe,Uk,WWe,QWe,HWe,Uf,Gre,UWe,JWe,Jk,YWe,KWe,ZWe,Jf,Ore,eQe,oQe,Yk,rQe,tQe,aQe,Yf,Vre,nQe,sQe,Kk,lQe,iQe,dQe,Kf,Xre,cQe,fQe,Zk,mQe,gQe,hQe,Zf,zre,pQe,_Qe,eS,uQe,bQe,vQe,em,Wre,FQe,TQe,oS,MQe,EQe,CQe,om,Qre,wQe,AQe,rS,LQe,yQe,xQe,rm,Hre,$Qe,kQe,tS,SQe,RQe,PQe,tm,Ure,BQe,IQe,aS,NQe,qQe,jQe,am,Jre,DQe,GQe,nS,OQe,VQe,XQe,nm,Yre,zQe,WQe,sS,QQe,HQe,UQe,sm,Kre,JQe,YQe,lS,KQe,ZQe,eHe,lm,Zre,oHe,rHe,iS,tHe,aHe,nHe,im,ete,sHe,lHe,dS,iHe,dHe,cHe,dm,ote,fHe,mHe,cS,gHe,hHe,pHe,cm,rte,_He,uHe,fS,bHe,vHe,FHe,fm,tte,THe,MHe,mS,EHe,CHe,wHe,mm,ate,AHe,LHe,gS,yHe,xHe,$He,gm,nte,kHe,SHe,hS,RHe,PHe,BHe,hm,ste,IHe,NHe,pS,qHe,jHe,DHe,pm,lte,GHe,OHe,_S,VHe,XHe,zHe,_m,ite,WHe,QHe,uS,HHe,UHe,JHe,um,dte,YHe,KHe,bS,ZHe,eUe,oUe,bm,cte,rUe,tUe,vS,aUe,nUe,sUe,vm,fte,lUe,iUe,FS,dUe,cUe,fUe,Fm,mte,mUe,gUe,TS,hUe,pUe,_Ue,Tm,gte,uUe,bUe,MS,vUe,FUe,TUe,Mm,hte,MUe,EUe,ES,CUe,wUe,AUe,Em,pte,LUe,yUe,CS,xUe,$Ue,kUe,Cm,_te,SUe,RUe,wS,PUe,BUe,IUe,wm,ute,NUe,qUe,AS,jUe,DUe,GUe,Am,bte,OUe,VUe,LS,XUe,zUe,WUe,Lm,vte,QUe,HUe,yS,UUe,JUe,YUe,ym,Fte,KUe,ZUe,xS,eJe,oJe,rJe,xm,Tte,tJe,aJe,$S,nJe,sJe,lJe,$m,Mte,iJe,dJe,kS,cJe,fJe,mJe,km,Ete,gJe,hJe,SS,pJe,_Je,uJe,Sm,Cte,bJe,vJe,RS,FJe,TJe,MJe,Rm,wte,EJe,CJe,PS,wJe,AJe,LJe,Pm,Ate,yJe,xJe,BS,$Je,kJe,SJe,Bm,Lte,RJe,PJe,IS,BJe,IJe,NJe,Im,yte,qJe,jJe,NS,DJe,GJe,OJe,Nm,xte,VJe,XJe,qS,zJe,WJe,QJe,qm,$te,HJe,UJe,jS,JJe,YJe,KJe,jm,kte,ZJe,eYe,DS,oYe,rYe,tYe,Dm,Ste,aYe,nYe,GS,sYe,lYe,iYe,Gm,Rte,dYe,cYe,OS,fYe,mYe,gYe,Om,Pte,hYe,pYe,VS,_Ye,uYe,bYe,Vm,Bte,vYe,FYe,XS,TYe,MYe,EYe,Xm,Ite,CYe,wYe,zS,AYe,LYe,yYe,zm,Nte,xYe,$Ye,WS,kYe,SYe,RYe,Wm,qte,PYe,BYe,QS,IYe,NYe,qYe,Qm,jte,jYe,DYe,HS,GYe,OYe,VYe,Hm,Dte,XYe,zYe,US,WYe,QYe,HYe,Um,Gte,UYe,JYe,JS,YYe,KYe,ZYe,Jm,Ote,eKe,oKe,YS,rKe,tKe,aKe,Ym,Vte,nKe,sKe,KS,lKe,iKe,dKe,Km,Xte,cKe,fKe,ZS,mKe,gKe,hKe,Zm,zte,pKe,_Ke,eR,uKe,bKe,vKe,eg,Wte,FKe,TKe,oR,MKe,EKe,CKe,og,Qte,wKe,AKe,rR,LKe,yKe,xKe,rg,Hte,$Ke,kKe,tR,SKe,RKe,PKe,tg,Ute,BKe,IKe,aR,NKe,qKe,jKe,ag,Jte,DKe,GKe,nR,OKe,VKe,XKe,ng,Yte,zKe,WKe,sR,QKe,HKe,UKe,sg,Kte,JKe,YKe,lR,KKe,ZKe,eZe,lg,Zte,oZe,rZe,iR,tZe,aZe,nZe,ig,eae,sZe,lZe,dR,iZe,dZe,cZe,dg,oae,fZe,mZe,cR,gZe,hZe,pZe,cg,rae,_Ze,uZe,fR,bZe,vZe,FZe,fg,tae,TZe,MZe,mR,EZe,CZe,wZe,mg,aae,AZe,LZe,gR,yZe,xZe,$Ze,gg,nae,kZe,SZe,hR,RZe,PZe,BZe,hg,sae,IZe,NZe,pR,qZe,jZe,DZe,pg,lae,GZe,OZe,_R,VZe,XZe,zZe,_g,iae,WZe,QZe,uR,HZe,UZe,JZe,ug,dae,YZe,KZe,bR,ZZe,eeo,oeo,bg,cae,reo,teo,vR,aeo,neo,seo,vg,fae,leo,ieo,FR,deo,ceo,feo,Fg,mae,meo,geo,TR,heo,peo,_eo,Tg,gae,ueo,beo,MR,veo,Feo,Teo,Mg,hae,Meo,Eeo,ER,Ceo,weo,Aeo,Eg,pae,Leo,yeo,CR,xeo,$eo,keo,Cg,_ae,Seo,Reo,wR,Peo,Beo,Ieo,wg,uae,Neo,qeo,AR,jeo,Deo,Geo,Ag,bae,Oeo,Veo,LR,Xeo,zeo,Weo,Lg,vae,Qeo,Heo,yR,Ueo,Jeo,Yeo,yg,Fae,Keo,Zeo,xR,eoo,ooo,roo,xg,too,$g,nA,aoo,Tae,noo,Zje,Ei,kg,Mae,sA,soo,Eae,loo,eDe,wo,lA,ioo,iA,doo,$R,coo,foo,moo,dA,goo,Cae,hoo,poo,_oo,Cr,cA,uoo,wae,boo,voo,Aa,Foo,Aae,Too,Moo,Lae,Eoo,Coo,yae,woo,Aoo,Loo,k,Sn,xae,yoo,xoo,kR,$oo,koo,SR,Soo,Roo,Poo,Rn,$ae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Pn,kae,Ooo,Voo,BR,Xoo,zoo,IR,Woo,Qoo,Hoo,Sg,Sae,Uoo,Joo,NR,Yoo,Koo,Zoo,Bn,Rae,ero,oro,qR,rro,tro,jR,aro,nro,sro,Rg,Pae,lro,iro,DR,dro,cro,fro,Pg,Bae,mro,gro,GR,hro,pro,_ro,Bg,Iae,uro,bro,OR,vro,Fro,Tro,In,Nae,Mro,Ero,VR,Cro,wro,XR,Aro,Lro,yro,Nn,qae,xro,$ro,zR,kro,Sro,WR,Rro,Pro,Bro,qn,jae,Iro,Nro,QR,qro,jro,HR,Dro,Gro,Oro,Ig,Dae,Vro,Xro,UR,zro,Wro,Qro,Ng,Gae,Hro,Uro,JR,Jro,Yro,Kro,qg,Oae,Zro,eto,YR,oto,rto,tto,jn,Vae,ato,nto,KR,sto,lto,ZR,ito,dto,cto,jg,Xae,fto,mto,eP,gto,hto,pto,Dn,zae,_to,uto,oP,bto,vto,rP,Fto,Tto,Mto,Gn,Wae,Eto,Cto,tP,wto,Ato,aP,Lto,yto,xto,On,Qae,$to,kto,nP,Sto,Rto,sP,Pto,Bto,Ito,Dg,Hae,Nto,qto,lP,jto,Dto,Gto,Vn,Uae,Oto,Vto,iP,Xto,zto,dP,Wto,Qto,Hto,Xn,Jae,Uto,Jto,cP,Yto,Kto,fP,Zto,eao,oao,zn,Yae,rao,tao,mP,aao,nao,gP,sao,lao,iao,Wn,Kae,dao,cao,hP,fao,mao,pP,gao,hao,pao,Qn,Zae,_ao,uao,_P,bao,vao,uP,Fao,Tao,Mao,Hn,ene,Eao,Cao,bP,wao,Aao,vP,Lao,yao,xao,Gg,one,$ao,kao,FP,Sao,Rao,Pao,Un,rne,Bao,Iao,TP,Nao,qao,MP,jao,Dao,Gao,Og,tne,Oao,Vao,EP,Xao,zao,Wao,Jn,ane,Qao,Hao,CP,Uao,Jao,wP,Yao,Kao,Zao,Yn,nne,eno,ono,AP,rno,tno,LP,ano,nno,sno,Kn,sne,lno,ino,yP,dno,cno,xP,fno,mno,gno,Vg,lne,hno,pno,$P,_no,uno,bno,Zn,ine,vno,Fno,kP,Tno,Mno,SP,Eno,Cno,wno,es,dne,Ano,Lno,RP,yno,xno,PP,$no,kno,Sno,Xg,cne,Rno,Pno,BP,Bno,Ino,Nno,os,fne,qno,jno,IP,Dno,Gno,NP,Ono,Vno,Xno,rs,mne,zno,Wno,qP,Qno,Hno,jP,Uno,Jno,Yno,ts,gne,Kno,Zno,DP,eso,oso,GP,rso,tso,aso,as,hne,nso,sso,OP,lso,iso,VP,dso,cso,fso,ns,pne,mso,gso,XP,hso,pso,zP,_so,uso,bso,ss,_ne,vso,Fso,WP,Tso,Mso,QP,Eso,Cso,wso,ls,une,Aso,Lso,HP,yso,xso,UP,$so,kso,Sso,is,bne,Rso,Pso,JP,Bso,Iso,YP,Nso,qso,jso,zg,vne,Dso,Gso,KP,Oso,Vso,Xso,ds,Fne,zso,Wso,ZP,Qso,Hso,eB,Uso,Jso,Yso,Wg,Tne,Kso,Zso,oB,elo,olo,rlo,Qg,Mne,tlo,alo,rB,nlo,slo,llo,cs,Ene,ilo,dlo,tB,clo,flo,aB,mlo,glo,hlo,fs,Cne,plo,_lo,nB,ulo,blo,sB,vlo,Flo,Tlo,ms,wne,Mlo,Elo,lB,Clo,wlo,iB,Alo,Llo,ylo,Hg,Ane,xlo,$lo,dB,klo,Slo,Rlo,gs,Lne,Plo,Blo,cB,Ilo,Nlo,fB,qlo,jlo,Dlo,hs,yne,Glo,Olo,mB,Vlo,Xlo,gB,zlo,Wlo,Qlo,ps,xne,Hlo,Ulo,hB,Jlo,Ylo,pB,Klo,Zlo,eio,_s,$ne,oio,rio,_B,tio,aio,uB,nio,sio,lio,us,kne,iio,dio,bB,cio,fio,vB,mio,gio,hio,Ug,Sne,pio,_io,FB,uio,bio,vio,bs,Rne,Fio,Tio,TB,Mio,Eio,MB,Cio,wio,Aio,Jg,Pne,Lio,yio,EB,xio,$io,kio,Yg,Bne,Sio,Rio,CB,Pio,Bio,Iio,Kg,Ine,Nio,qio,wB,jio,Dio,Gio,Zg,Nne,Oio,Vio,AB,Xio,zio,Wio,vs,qne,Qio,Hio,LB,Uio,Jio,yB,Yio,Kio,Zio,eh,jne,edo,odo,xB,rdo,tdo,ado,Fs,Dne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,fdo,Ts,Gne,mdo,gdo,SB,hdo,pdo,RB,_do,udo,bdo,Ms,One,vdo,Fdo,PB,Tdo,Mdo,BB,Edo,Cdo,wdo,Es,Vne,Ado,Ldo,IB,ydo,xdo,NB,$do,kdo,Sdo,Cs,Xne,Rdo,Pdo,qB,Bdo,Ido,jB,Ndo,qdo,jdo,ws,zne,Ddo,Gdo,DB,Odo,Vdo,GB,Xdo,zdo,Wdo,oh,Wne,Qdo,Hdo,OB,Udo,Jdo,Ydo,rh,Qne,Kdo,Zdo,VB,eco,oco,rco,As,Hne,tco,aco,XB,nco,sco,zB,lco,ico,dco,Ls,Une,cco,fco,WB,mco,gco,QB,hco,pco,_co,ys,Jne,uco,bco,HB,vco,Fco,UB,Tco,Mco,Eco,th,Yne,Cco,wco,JB,Aco,Lco,yco,ah,Kne,xco,$co,YB,kco,Sco,Rco,nh,Zne,Pco,Bco,KB,Ico,Nco,qco,xs,ese,jco,Dco,ZB,Gco,Oco,eI,Vco,Xco,zco,sh,ose,Wco,Qco,oI,Hco,Uco,Jco,lh,rse,Yco,Kco,rI,Zco,efo,ofo,ih,tse,rfo,tfo,tI,afo,nfo,sfo,$s,ase,lfo,ifo,aI,dfo,cfo,nI,ffo,mfo,gfo,dh,nse,hfo,pfo,sI,_fo,ufo,bfo,ch,sse,vfo,Ffo,lI,Tfo,Mfo,Efo,ks,lse,Cfo,wfo,iI,Afo,Lfo,dI,yfo,xfo,$fo,Ss,ise,kfo,Sfo,cI,Rfo,Pfo,fI,Bfo,Ifo,Nfo,Rs,dse,qfo,jfo,mI,Dfo,Gfo,gI,Ofo,Vfo,Xfo,Ps,cse,zfo,Wfo,hI,Qfo,Hfo,pI,Ufo,Jfo,Yfo,fh,Kfo,mh,fA,Zfo,fse,emo,oDe,Ci,gh,mse,mA,omo,gse,rmo,rDe,Ao,gA,tmo,hA,amo,_I,nmo,smo,lmo,pA,imo,hse,dmo,cmo,fmo,He,_A,mmo,pse,gmo,hmo,La,pmo,_se,_mo,umo,use,bmo,vmo,bse,Fmo,Tmo,Mmo,Y,hh,vse,Emo,Cmo,uI,wmo,Amo,Lmo,ph,Fse,ymo,xmo,bI,$mo,kmo,Smo,_h,Tse,Rmo,Pmo,vI,Bmo,Imo,Nmo,uh,Mse,qmo,jmo,FI,Dmo,Gmo,Omo,bh,Ese,Vmo,Xmo,TI,zmo,Wmo,Qmo,vh,Cse,Hmo,Umo,MI,Jmo,Ymo,Kmo,Fh,wse,Zmo,ego,EI,ogo,rgo,tgo,Th,Ase,ago,ngo,CI,sgo,lgo,igo,Mh,Lse,dgo,cgo,wI,fgo,mgo,ggo,Eh,yse,hgo,pgo,AI,_go,ugo,bgo,Ch,xse,vgo,Fgo,LI,Tgo,Mgo,Ego,wh,$se,Cgo,wgo,yI,Ago,Lgo,ygo,Ah,kse,xgo,$go,xI,kgo,Sgo,Rgo,Lh,Sse,Pgo,Bgo,$I,Igo,Ngo,qgo,yh,Rse,jgo,Dgo,kI,Ggo,Ogo,Vgo,xh,Pse,Xgo,zgo,SI,Wgo,Qgo,Hgo,$h,Bse,Ugo,Jgo,RI,Ygo,Kgo,Zgo,kh,Ise,eho,oho,PI,rho,tho,aho,Sh,Nse,nho,sho,BI,lho,iho,dho,Rh,qse,cho,fho,II,mho,gho,hho,Ph,jse,pho,_ho,NI,uho,bho,vho,Bh,Dse,Fho,Tho,qI,Mho,Eho,Cho,Ih,Gse,who,Aho,jI,Lho,yho,xho,Nh,Ose,$ho,kho,DI,Sho,Rho,Pho,qh,Vse,Bho,Iho,GI,Nho,qho,jho,jh,Xse,Dho,Gho,OI,Oho,Vho,Xho,Dh,zse,zho,Who,VI,Qho,Hho,Uho,Gh,Wse,Jho,Yho,XI,Kho,Zho,epo,Oh,Qse,opo,rpo,zI,tpo,apo,npo,Vh,Hse,spo,lpo,WI,ipo,dpo,cpo,Xh,Use,fpo,mpo,QI,gpo,hpo,ppo,zh,_po,Wh,upo,Qh,uA,bpo,Jse,vpo,tDe,wi,Hh,Yse,bA,Fpo,Kse,Tpo,aDe,Lo,vA,Mpo,FA,Epo,HI,Cpo,wpo,Apo,TA,Lpo,Zse,ypo,xpo,$po,Ue,MA,kpo,ele,Spo,Rpo,Ai,Ppo,ole,Bpo,Ipo,rle,Npo,qpo,jpo,he,Uh,tle,Dpo,Gpo,UI,Opo,Vpo,Xpo,Jh,ale,zpo,Wpo,nle,Qpo,Hpo,Upo,Yh,sle,Jpo,Ypo,JI,Kpo,Zpo,e_o,Kh,lle,o_o,r_o,YI,t_o,a_o,n_o,Zh,ile,s_o,l_o,KI,i_o,d_o,c_o,ep,dle,f_o,m_o,ZI,g_o,h_o,p_o,op,cle,__o,u_o,eN,b_o,v_o,F_o,rp,fle,T_o,M_o,oN,E_o,C_o,w_o,tp,mle,A_o,L_o,rN,y_o,x_o,$_o,ap,gle,k_o,S_o,tN,R_o,P_o,B_o,np,hle,I_o,N_o,aN,q_o,j_o,D_o,sp,ple,G_o,O_o,nN,V_o,X_o,z_o,lp,_le,W_o,Q_o,sN,H_o,U_o,J_o,ip,ule,Y_o,K_o,lN,Z_o,euo,ouo,dp,ble,ruo,tuo,iN,auo,nuo,suo,cp,vle,luo,iuo,dN,duo,cuo,fuo,fp,Fle,muo,guo,cN,huo,puo,_uo,mp,uuo,gp,buo,hp,EA,vuo,Tle,Fuo,nDe,Li,pp,Mle,CA,Tuo,Ele,Muo,sDe,yo,wA,Euo,yi,Cuo,fN,wuo,Auo,mN,Luo,yuo,xuo,AA,$uo,Cle,kuo,Suo,Ruo,tt,LA,Puo,wle,Buo,Iuo,xi,Nuo,Ale,quo,juo,gN,Duo,Guo,Ouo,_p,Vuo,Je,yA,Xuo,Lle,zuo,Wuo,ya,Quo,yle,Huo,Uuo,xle,Juo,Yuo,$le,Kuo,Zuo,e2o,y,up,kle,o2o,r2o,hN,t2o,a2o,n2o,bp,Sle,s2o,l2o,pN,i2o,d2o,c2o,vp,Rle,f2o,m2o,_N,g2o,h2o,p2o,Fp,Ple,_2o,u2o,uN,b2o,v2o,F2o,Tp,Ble,T2o,M2o,bN,E2o,C2o,w2o,Mp,Ile,A2o,L2o,vN,y2o,x2o,$2o,Ep,Nle,k2o,S2o,FN,R2o,P2o,B2o,Cp,qle,I2o,N2o,TN,q2o,j2o,D2o,wp,jle,G2o,O2o,MN,V2o,X2o,z2o,Ap,Dle,W2o,Q2o,EN,H2o,U2o,J2o,Lp,Gle,Y2o,K2o,CN,Z2o,e1o,o1o,yp,Ole,r1o,t1o,wN,a1o,n1o,s1o,xp,Vle,l1o,i1o,AN,d1o,c1o,f1o,$p,Xle,m1o,g1o,LN,h1o,p1o,_1o,kp,zle,u1o,b1o,yN,v1o,F1o,T1o,Sp,Wle,M1o,E1o,xN,C1o,w1o,A1o,Rp,Qle,L1o,y1o,$N,x1o,$1o,k1o,Pp,Hle,S1o,R1o,kN,P1o,B1o,I1o,Bp,Ule,N1o,q1o,SN,j1o,D1o,G1o,Ip,Jle,O1o,V1o,RN,X1o,z1o,W1o,Np,Yle,Q1o,H1o,PN,U1o,J1o,Y1o,qp,Kle,K1o,Z1o,BN,ebo,obo,rbo,jp,Zle,tbo,abo,IN,nbo,sbo,lbo,Dp,eie,ibo,dbo,NN,cbo,fbo,mbo,Gp,oie,gbo,hbo,qN,pbo,_bo,ubo,Op,rie,bbo,vbo,jN,Fbo,Tbo,Mbo,Vp,tie,Ebo,Cbo,DN,wbo,Abo,Lbo,Xp,aie,ybo,xbo,GN,$bo,kbo,Sbo,zp,nie,Rbo,Pbo,ON,Bbo,Ibo,Nbo,Wp,sie,qbo,jbo,VN,Dbo,Gbo,Obo,Qp,lie,Vbo,Xbo,XN,zbo,Wbo,Qbo,Hp,iie,Hbo,Ubo,zN,Jbo,Ybo,Kbo,Up,die,Zbo,evo,WN,ovo,rvo,tvo,Bs,cie,avo,nvo,QN,svo,lvo,HN,ivo,dvo,cvo,Jp,fie,fvo,mvo,UN,gvo,hvo,pvo,Yp,mie,_vo,uvo,JN,bvo,vvo,Fvo,Kp,gie,Tvo,Mvo,YN,Evo,Cvo,wvo,Zp,hie,Avo,Lvo,KN,yvo,xvo,$vo,e_,pie,kvo,Svo,ZN,Rvo,Pvo,Bvo,o_,_ie,Ivo,Nvo,eq,qvo,jvo,Dvo,r_,uie,Gvo,Ovo,oq,Vvo,Xvo,zvo,t_,bie,Wvo,Qvo,rq,Hvo,Uvo,Jvo,a_,vie,Yvo,Kvo,tq,Zvo,eFo,oFo,n_,Fie,rFo,tFo,aq,aFo,nFo,sFo,s_,Tie,lFo,iFo,nq,dFo,cFo,fFo,l_,Mie,mFo,gFo,sq,hFo,pFo,_Fo,i_,Eie,uFo,bFo,lq,vFo,FFo,TFo,d_,Cie,MFo,EFo,iq,CFo,wFo,AFo,c_,wie,LFo,yFo,dq,xFo,$Fo,kFo,f_,Aie,SFo,RFo,cq,PFo,BFo,IFo,m_,Lie,NFo,qFo,fq,jFo,DFo,GFo,g_,yie,OFo,VFo,mq,XFo,zFo,WFo,h_,xie,QFo,HFo,gq,UFo,JFo,YFo,p_,$ie,KFo,ZFo,hq,e6o,o6o,r6o,__,kie,t6o,a6o,pq,n6o,s6o,l6o,u_,Sie,i6o,d6o,_q,c6o,f6o,m6o,b_,Rie,g6o,h6o,uq,p6o,_6o,u6o,v_,Pie,b6o,v6o,bq,F6o,T6o,M6o,F_,Bie,E6o,C6o,vq,w6o,A6o,L6o,T_,Iie,y6o,x6o,Fq,$6o,k6o,S6o,M_,Nie,R6o,P6o,Tq,B6o,I6o,N6o,E_,qie,q6o,j6o,Mq,D6o,G6o,O6o,C_,jie,V6o,X6o,Eq,z6o,W6o,Q6o,w_,Die,H6o,U6o,Cq,J6o,Y6o,K6o,A_,Gie,Z6o,eTo,wq,oTo,rTo,tTo,L_,Oie,aTo,nTo,Aq,sTo,lTo,iTo,y_,Vie,dTo,cTo,Lq,fTo,mTo,gTo,x_,Xie,hTo,pTo,yq,_To,uTo,bTo,$_,zie,vTo,FTo,xq,TTo,MTo,ETo,k_,Wie,CTo,wTo,$q,ATo,LTo,yTo,S_,Qie,xTo,$To,kq,kTo,STo,RTo,R_,Hie,PTo,BTo,Sq,ITo,NTo,qTo,P_,Uie,jTo,DTo,Rq,GTo,OTo,VTo,B_,Jie,XTo,zTo,Pq,WTo,QTo,HTo,I_,Yie,UTo,JTo,Bq,YTo,KTo,ZTo,N_,Kie,e7o,o7o,Iq,r7o,t7o,a7o,q_,Zie,n7o,s7o,Nq,l7o,i7o,d7o,j_,ede,c7o,f7o,qq,m7o,g7o,h7o,D_,ode,p7o,_7o,jq,u7o,b7o,v7o,G_,rde,F7o,T7o,Dq,M7o,E7o,C7o,O_,tde,w7o,A7o,Gq,L7o,y7o,x7o,V_,ade,$7o,k7o,Oq,S7o,R7o,P7o,X_,nde,B7o,I7o,Vq,N7o,q7o,j7o,z_,sde,D7o,G7o,Xq,O7o,V7o,X7o,W_,lde,z7o,W7o,zq,Q7o,H7o,U7o,Q_,ide,J7o,Y7o,Wq,K7o,Z7o,e9o,H_,dde,o9o,r9o,Qq,t9o,a9o,n9o,U_,cde,s9o,l9o,Hq,i9o,d9o,c9o,J_,fde,f9o,m9o,Uq,g9o,h9o,p9o,Y_,mde,_9o,u9o,Jq,b9o,v9o,F9o,K_,gde,T9o,M9o,Yq,E9o,C9o,w9o,Z_,hde,A9o,L9o,Kq,y9o,x9o,$9o,eu,pde,k9o,S9o,Zq,R9o,P9o,B9o,ou,_de,I9o,N9o,ej,q9o,j9o,D9o,ru,ude,G9o,O9o,oj,V9o,X9o,z9o,tu,bde,W9o,Q9o,rj,H9o,U9o,J9o,au,vde,Y9o,K9o,tj,Z9o,eMo,oMo,nu,Fde,rMo,tMo,aj,aMo,nMo,sMo,su,Tde,lMo,iMo,nj,dMo,cMo,fMo,lu,Mde,mMo,gMo,sj,hMo,pMo,_Mo,iu,Ede,uMo,bMo,lj,vMo,FMo,TMo,du,Cde,MMo,EMo,ij,CMo,wMo,AMo,cu,wde,LMo,yMo,dj,xMo,$Mo,kMo,fu,Ade,SMo,RMo,cj,PMo,BMo,IMo,mu,Lde,NMo,qMo,fj,jMo,DMo,GMo,gu,yde,OMo,VMo,mj,XMo,zMo,WMo,hu,QMo,xde,HMo,UMo,$de,JMo,YMo,pu,lDe,$i,_u,kde,xA,KMo,Sde,ZMo,iDe,xo,$A,e4o,ki,o4o,gj,r4o,t4o,hj,a4o,n4o,s4o,kA,l4o,Rde,i4o,d4o,c4o,at,SA,f4o,Pde,m4o,g4o,Si,h4o,Bde,p4o,_4o,pj,u4o,b4o,v4o,uu,F4o,Ye,RA,T4o,Ide,M4o,E4o,xa,C4o,Nde,w4o,A4o,qde,L4o,y4o,jde,x4o,$4o,k4o,G,bu,Dde,S4o,R4o,_j,P4o,B4o,I4o,vu,Gde,N4o,q4o,uj,j4o,D4o,G4o,Fu,Ode,O4o,V4o,bj,X4o,z4o,W4o,Tu,Vde,Q4o,H4o,vj,U4o,J4o,Y4o,Mu,Xde,K4o,Z4o,Fj,eEo,oEo,rEo,Eu,zde,tEo,aEo,Tj,nEo,sEo,lEo,Cu,Wde,iEo,dEo,Mj,cEo,fEo,mEo,wu,Qde,gEo,hEo,Ej,pEo,_Eo,uEo,Au,Hde,bEo,vEo,Cj,FEo,TEo,MEo,Lu,Ude,EEo,CEo,wj,wEo,AEo,LEo,yu,Jde,yEo,xEo,Aj,$Eo,kEo,SEo,xu,Yde,REo,PEo,Lj,BEo,IEo,NEo,$u,Kde,qEo,jEo,yj,DEo,GEo,OEo,ku,Zde,VEo,XEo,xj,zEo,WEo,QEo,Su,ece,HEo,UEo,$j,JEo,YEo,KEo,Ru,oce,ZEo,eCo,kj,oCo,rCo,tCo,Pu,rce,aCo,nCo,Sj,sCo,lCo,iCo,Bu,tce,dCo,cCo,Rj,fCo,mCo,gCo,Iu,ace,hCo,pCo,Pj,_Co,uCo,bCo,Nu,nce,vCo,FCo,Bj,TCo,MCo,ECo,qu,sce,CCo,wCo,Ij,ACo,LCo,yCo,ju,lce,xCo,$Co,Nj,kCo,SCo,RCo,Du,ice,PCo,BCo,qj,ICo,NCo,qCo,Gu,dce,jCo,DCo,jj,GCo,OCo,VCo,Ou,cce,XCo,zCo,Dj,WCo,QCo,HCo,Vu,fce,UCo,JCo,Gj,YCo,KCo,ZCo,Xu,mce,e5o,o5o,Oj,r5o,t5o,a5o,zu,gce,n5o,s5o,Vj,l5o,i5o,d5o,Wu,hce,c5o,f5o,Xj,m5o,g5o,h5o,Qu,pce,p5o,_5o,zj,u5o,b5o,v5o,Hu,_ce,F5o,T5o,Wj,M5o,E5o,C5o,Uu,uce,w5o,A5o,Qj,L5o,y5o,x5o,Ju,bce,$5o,k5o,Hj,S5o,R5o,P5o,Yu,vce,B5o,I5o,Uj,N5o,q5o,j5o,Ku,Fce,D5o,G5o,Jj,O5o,V5o,X5o,Zu,Tce,z5o,W5o,Yj,Q5o,H5o,U5o,e2,Mce,J5o,Y5o,Kj,K5o,Z5o,e3o,o2,Ece,o3o,r3o,Zj,t3o,a3o,n3o,r2,Cce,s3o,l3o,eD,i3o,d3o,c3o,t2,wce,f3o,m3o,oD,g3o,h3o,p3o,a2,Ace,_3o,u3o,rD,b3o,v3o,F3o,n2,Lce,T3o,M3o,tD,E3o,C3o,w3o,s2,yce,A3o,L3o,aD,y3o,x3o,$3o,l2,k3o,xce,S3o,R3o,$ce,P3o,B3o,i2,dDe,Ri,d2,kce,PA,I3o,Sce,N3o,cDe,$o,BA,q3o,Pi,j3o,nD,D3o,G3o,sD,O3o,V3o,X3o,IA,z3o,Rce,W3o,Q3o,H3o,nt,NA,U3o,Pce,J3o,Y3o,Bi,K3o,Bce,Z3o,e0o,lD,o0o,r0o,t0o,c2,a0o,Ke,qA,n0o,Ice,s0o,l0o,$a,i0o,Nce,d0o,c0o,qce,f0o,m0o,jce,g0o,h0o,p0o,z,f2,Dce,_0o,u0o,iD,b0o,v0o,F0o,m2,Gce,T0o,M0o,dD,E0o,C0o,w0o,g2,Oce,A0o,L0o,cD,y0o,x0o,$0o,h2,Vce,k0o,S0o,fD,R0o,P0o,B0o,p2,Xce,I0o,N0o,mD,q0o,j0o,D0o,_2,zce,G0o,O0o,gD,V0o,X0o,z0o,u2,Wce,W0o,Q0o,hD,H0o,U0o,J0o,b2,Qce,Y0o,K0o,pD,Z0o,ewo,owo,v2,Hce,rwo,two,_D,awo,nwo,swo,F2,Uce,lwo,iwo,uD,dwo,cwo,fwo,T2,Jce,mwo,gwo,bD,hwo,pwo,_wo,M2,Yce,uwo,bwo,vD,vwo,Fwo,Two,E2,Kce,Mwo,Ewo,FD,Cwo,wwo,Awo,C2,Zce,Lwo,ywo,TD,xwo,$wo,kwo,w2,efe,Swo,Rwo,MD,Pwo,Bwo,Iwo,A2,ofe,Nwo,qwo,ED,jwo,Dwo,Gwo,L2,rfe,Owo,Vwo,CD,Xwo,zwo,Wwo,y2,tfe,Qwo,Hwo,wD,Uwo,Jwo,Ywo,x2,afe,Kwo,Zwo,AD,eAo,oAo,rAo,$2,nfe,tAo,aAo,LD,nAo,sAo,lAo,k2,sfe,iAo,dAo,yD,cAo,fAo,mAo,S2,lfe,gAo,hAo,xD,pAo,_Ao,uAo,R2,ife,bAo,vAo,$D,FAo,TAo,MAo,P2,dfe,EAo,CAo,kD,wAo,AAo,LAo,B2,cfe,yAo,xAo,SD,$Ao,kAo,SAo,I2,ffe,RAo,PAo,RD,BAo,IAo,NAo,N2,mfe,qAo,jAo,PD,DAo,GAo,OAo,q2,gfe,VAo,XAo,BD,zAo,WAo,QAo,j2,hfe,HAo,UAo,ID,JAo,YAo,KAo,D2,pfe,ZAo,eLo,ND,oLo,rLo,tLo,G2,_fe,aLo,nLo,qD,sLo,lLo,iLo,O2,ufe,dLo,cLo,jD,fLo,mLo,gLo,V2,bfe,hLo,pLo,DD,_Lo,uLo,bLo,X2,vfe,vLo,FLo,GD,TLo,MLo,ELo,z2,Ffe,CLo,wLo,OD,ALo,LLo,yLo,W2,Tfe,xLo,$Lo,VD,kLo,SLo,RLo,Q2,Mfe,PLo,BLo,XD,ILo,NLo,qLo,H2,Efe,jLo,DLo,zD,GLo,OLo,VLo,U2,XLo,Cfe,zLo,WLo,wfe,QLo,HLo,J2,fDe,Ii,Y2,Afe,jA,ULo,Lfe,JLo,mDe,ko,DA,YLo,Ni,KLo,WD,ZLo,eyo,QD,oyo,ryo,tyo,GA,ayo,yfe,nyo,syo,lyo,st,OA,iyo,xfe,dyo,cyo,qi,fyo,$fe,myo,gyo,HD,hyo,pyo,_yo,K2,uyo,Ze,VA,byo,kfe,vyo,Fyo,ka,Tyo,Sfe,Myo,Eyo,Rfe,Cyo,wyo,Pfe,Ayo,Lyo,yyo,Q,Z2,Bfe,xyo,$yo,UD,kyo,Syo,Ryo,e1,Ife,Pyo,Byo,JD,Iyo,Nyo,qyo,o1,Nfe,jyo,Dyo,YD,Gyo,Oyo,Vyo,r1,qfe,Xyo,zyo,KD,Wyo,Qyo,Hyo,t1,jfe,Uyo,Jyo,ZD,Yyo,Kyo,Zyo,a1,Dfe,e8o,o8o,eG,r8o,t8o,a8o,n1,Gfe,n8o,s8o,oG,l8o,i8o,d8o,s1,Ofe,c8o,f8o,rG,m8o,g8o,h8o,l1,Vfe,p8o,_8o,tG,u8o,b8o,v8o,i1,Xfe,F8o,T8o,aG,M8o,E8o,C8o,d1,zfe,w8o,A8o,nG,L8o,y8o,x8o,c1,Wfe,$8o,k8o,sG,S8o,R8o,P8o,f1,Qfe,B8o,I8o,lG,N8o,q8o,j8o,m1,Hfe,D8o,G8o,iG,O8o,V8o,X8o,g1,Ufe,z8o,W8o,dG,Q8o,H8o,U8o,h1,Jfe,J8o,Y8o,cG,K8o,Z8o,exo,p1,Yfe,oxo,rxo,fG,txo,axo,nxo,_1,Kfe,sxo,lxo,mG,ixo,dxo,cxo,u1,Zfe,fxo,mxo,gG,gxo,hxo,pxo,b1,eme,_xo,uxo,hG,bxo,vxo,Fxo,v1,ome,Txo,Mxo,pG,Exo,Cxo,wxo,F1,rme,Axo,Lxo,_G,yxo,xxo,$xo,T1,tme,kxo,Sxo,uG,Rxo,Pxo,Bxo,M1,ame,Ixo,Nxo,bG,qxo,jxo,Dxo,E1,nme,Gxo,Oxo,vG,Vxo,Xxo,zxo,C1,sme,Wxo,Qxo,FG,Hxo,Uxo,Jxo,w1,lme,Yxo,Kxo,TG,Zxo,e$o,o$o,A1,ime,r$o,t$o,MG,a$o,n$o,s$o,L1,dme,l$o,i$o,EG,d$o,c$o,f$o,y1,cme,m$o,g$o,CG,h$o,p$o,_$o,x1,fme,u$o,b$o,wG,v$o,F$o,T$o,$1,mme,M$o,E$o,gme,C$o,w$o,A$o,k1,hme,L$o,y$o,AG,x$o,$$o,k$o,S1,pme,S$o,R$o,LG,P$o,B$o,I$o,R1,_me,N$o,q$o,yG,j$o,D$o,G$o,P1,ume,O$o,V$o,xG,X$o,z$o,W$o,B1,Q$o,bme,H$o,U$o,vme,J$o,Y$o,I1,gDe,ji,N1,Fme,XA,K$o,Tme,Z$o,hDe,So,zA,eko,Di,oko,$G,rko,tko,kG,ako,nko,sko,WA,lko,Mme,iko,dko,cko,lt,QA,fko,Eme,mko,gko,Gi,hko,Cme,pko,_ko,SG,uko,bko,vko,q1,Fko,eo,HA,Tko,wme,Mko,Eko,Sa,Cko,Ame,wko,Ako,Lme,Lko,yko,yme,xko,$ko,kko,pe,j1,xme,Sko,Rko,RG,Pko,Bko,Iko,D1,$me,Nko,qko,PG,jko,Dko,Gko,G1,kme,Oko,Vko,BG,Xko,zko,Wko,O1,Sme,Qko,Hko,IG,Uko,Jko,Yko,V1,Rme,Kko,Zko,NG,eSo,oSo,rSo,X1,Pme,tSo,aSo,qG,nSo,sSo,lSo,z1,Bme,iSo,dSo,jG,cSo,fSo,mSo,W1,Ime,gSo,hSo,DG,pSo,_So,uSo,Q1,Nme,bSo,vSo,GG,FSo,TSo,MSo,H1,qme,ESo,CSo,OG,wSo,ASo,LSo,U1,jme,ySo,xSo,VG,$So,kSo,SSo,J1,Dme,RSo,PSo,XG,BSo,ISo,NSo,Y1,Gme,qSo,jSo,zG,DSo,GSo,OSo,K1,Ome,VSo,XSo,WG,zSo,WSo,QSo,Z1,Vme,HSo,USo,QG,JSo,YSo,KSo,eb,Xme,ZSo,eRo,HG,oRo,rRo,tRo,ob,zme,aRo,nRo,UG,sRo,lRo,iRo,rb,dRo,Wme,cRo,fRo,Qme,mRo,gRo,tb,pDe,Oi,ab,Hme,UA,hRo,Ume,pRo,_De,Ro,JA,_Ro,Vi,uRo,JG,bRo,vRo,YG,FRo,TRo,MRo,YA,ERo,Jme,CRo,wRo,ARo,it,KA,LRo,Yme,yRo,xRo,Xi,$Ro,Kme,kRo,SRo,KG,RRo,PRo,BRo,nb,IRo,oo,ZA,NRo,Zme,qRo,jRo,Ra,DRo,ege,GRo,ORo,oge,VRo,XRo,rge,zRo,WRo,QRo,N,sb,tge,HRo,URo,ZG,JRo,YRo,KRo,lb,age,ZRo,ePo,eO,oPo,rPo,tPo,ib,nge,aPo,nPo,oO,sPo,lPo,iPo,db,sge,dPo,cPo,rO,fPo,mPo,gPo,cb,lge,hPo,pPo,tO,_Po,uPo,bPo,fb,ige,vPo,FPo,aO,TPo,MPo,EPo,mb,dge,CPo,wPo,nO,APo,LPo,yPo,gb,cge,xPo,$Po,sO,kPo,SPo,RPo,hb,fge,PPo,BPo,lO,IPo,NPo,qPo,pb,mge,jPo,DPo,iO,GPo,OPo,VPo,_b,gge,XPo,zPo,dO,WPo,QPo,HPo,ub,hge,UPo,JPo,cO,YPo,KPo,ZPo,bb,pge,eBo,oBo,fO,rBo,tBo,aBo,vb,_ge,nBo,sBo,mO,lBo,iBo,dBo,Fb,uge,cBo,fBo,gO,mBo,gBo,hBo,Tb,bge,pBo,_Bo,hO,uBo,bBo,vBo,Mb,vge,FBo,TBo,pO,MBo,EBo,CBo,Eb,Fge,wBo,ABo,_O,LBo,yBo,xBo,Cb,Tge,$Bo,kBo,uO,SBo,RBo,PBo,wb,Mge,BBo,IBo,bO,NBo,qBo,jBo,Ab,Ege,DBo,GBo,vO,OBo,VBo,XBo,Lb,Cge,zBo,WBo,FO,QBo,HBo,UBo,yb,wge,JBo,YBo,TO,KBo,ZBo,eIo,xb,Age,oIo,rIo,MO,tIo,aIo,nIo,$b,Lge,sIo,lIo,EO,iIo,dIo,cIo,kb,yge,fIo,mIo,CO,gIo,hIo,pIo,Sb,xge,_Io,uIo,wO,bIo,vIo,FIo,Rb,$ge,TIo,MIo,AO,EIo,CIo,wIo,Pb,kge,AIo,LIo,LO,yIo,xIo,$Io,Bb,Sge,kIo,SIo,yO,RIo,PIo,BIo,Ib,Rge,IIo,NIo,xO,qIo,jIo,DIo,Nb,Pge,GIo,OIo,$O,VIo,XIo,zIo,qb,Bge,WIo,QIo,kO,HIo,UIo,JIo,jb,Ige,YIo,KIo,SO,ZIo,eNo,oNo,Db,Nge,rNo,tNo,RO,aNo,nNo,sNo,Gb,qge,lNo,iNo,PO,dNo,cNo,fNo,Ob,jge,mNo,gNo,BO,hNo,pNo,_No,Vb,Dge,uNo,bNo,IO,vNo,FNo,TNo,Xb,Gge,MNo,ENo,NO,CNo,wNo,ANo,zb,Oge,LNo,yNo,qO,xNo,$No,kNo,Wb,Vge,SNo,RNo,jO,PNo,BNo,INo,Qb,Xge,NNo,qNo,DO,jNo,DNo,GNo,Hb,zge,ONo,VNo,GO,XNo,zNo,WNo,Ub,Wge,QNo,HNo,OO,UNo,JNo,YNo,Jb,Qge,KNo,ZNo,VO,eqo,oqo,rqo,Yb,Hge,tqo,aqo,XO,nqo,sqo,lqo,Kb,Uge,iqo,dqo,zO,cqo,fqo,mqo,Zb,gqo,Jge,hqo,pqo,Yge,_qo,uqo,ev,uDe,zi,ov,Kge,eL,bqo,Zge,vqo,bDe,Po,oL,Fqo,Wi,Tqo,WO,Mqo,Eqo,QO,Cqo,wqo,Aqo,rL,Lqo,ehe,yqo,xqo,$qo,dt,tL,kqo,ohe,Sqo,Rqo,Qi,Pqo,rhe,Bqo,Iqo,HO,Nqo,qqo,jqo,rv,Dqo,ro,aL,Gqo,the,Oqo,Vqo,Pa,Xqo,ahe,zqo,Wqo,nhe,Qqo,Hqo,she,Uqo,Jqo,Yqo,Z,tv,lhe,Kqo,Zqo,UO,ejo,ojo,rjo,av,ihe,tjo,ajo,JO,njo,sjo,ljo,nv,dhe,ijo,djo,YO,cjo,fjo,mjo,sv,che,gjo,hjo,KO,pjo,_jo,ujo,lv,fhe,bjo,vjo,ZO,Fjo,Tjo,Mjo,iv,mhe,Ejo,Cjo,eV,wjo,Ajo,Ljo,dv,ghe,yjo,xjo,oV,$jo,kjo,Sjo,cv,hhe,Rjo,Pjo,rV,Bjo,Ijo,Njo,fv,phe,qjo,jjo,tV,Djo,Gjo,Ojo,mv,_he,Vjo,Xjo,aV,zjo,Wjo,Qjo,gv,uhe,Hjo,Ujo,nV,Jjo,Yjo,Kjo,hv,bhe,Zjo,eDo,sV,oDo,rDo,tDo,pv,vhe,aDo,nDo,lV,sDo,lDo,iDo,_v,Fhe,dDo,cDo,iV,fDo,mDo,gDo,uv,The,hDo,pDo,dV,_Do,uDo,bDo,bv,Mhe,vDo,FDo,cV,TDo,MDo,EDo,vv,Ehe,CDo,wDo,fV,ADo,LDo,yDo,Fv,Che,xDo,$Do,mV,kDo,SDo,RDo,Tv,whe,PDo,BDo,gV,IDo,NDo,qDo,Mv,Ahe,jDo,DDo,hV,GDo,ODo,VDo,Ev,Lhe,XDo,zDo,pV,WDo,QDo,HDo,Cv,yhe,UDo,JDo,_V,YDo,KDo,ZDo,wv,xhe,eGo,oGo,uV,rGo,tGo,aGo,Av,$he,nGo,sGo,bV,lGo,iGo,dGo,Lv,khe,cGo,fGo,vV,mGo,gGo,hGo,yv,She,pGo,_Go,FV,uGo,bGo,vGo,xv,Rhe,FGo,TGo,TV,MGo,EGo,CGo,$v,Phe,wGo,AGo,MV,LGo,yGo,xGo,kv,Bhe,$Go,kGo,EV,SGo,RGo,PGo,Sv,BGo,Ihe,IGo,NGo,Nhe,qGo,jGo,Rv,vDe,Hi,Pv,qhe,nL,DGo,jhe,GGo,FDe,Bo,sL,OGo,Ui,VGo,CV,XGo,zGo,wV,WGo,QGo,HGo,lL,UGo,Dhe,JGo,YGo,KGo,ct,iL,ZGo,Ghe,eOo,oOo,Ji,rOo,Ohe,tOo,aOo,AV,nOo,sOo,lOo,Bv,iOo,to,dL,dOo,Vhe,cOo,fOo,Ba,mOo,Xhe,gOo,hOo,zhe,pOo,_Oo,Whe,uOo,bOo,vOo,Yr,Iv,Qhe,FOo,TOo,LV,MOo,EOo,COo,Nv,Hhe,wOo,AOo,yV,LOo,yOo,xOo,qv,Uhe,$Oo,kOo,xV,SOo,ROo,POo,jv,Jhe,BOo,IOo,$V,NOo,qOo,jOo,Dv,Yhe,DOo,GOo,kV,OOo,VOo,XOo,Gv,zOo,Khe,WOo,QOo,Zhe,HOo,UOo,Ov,TDe,Yi,Vv,epe,cL,JOo,ope,YOo,MDe,Io,fL,KOo,Ki,ZOo,SV,eVo,oVo,RV,rVo,tVo,aVo,mL,nVo,rpe,sVo,lVo,iVo,ft,gL,dVo,tpe,cVo,fVo,Zi,mVo,ape,gVo,hVo,PV,pVo,_Vo,uVo,Xv,bVo,ao,hL,vVo,npe,FVo,TVo,Ia,MVo,spe,EVo,CVo,lpe,wVo,AVo,ipe,LVo,yVo,xVo,U,zv,dpe,$Vo,kVo,BV,SVo,RVo,PVo,Wv,cpe,BVo,IVo,IV,NVo,qVo,jVo,Qv,fpe,DVo,GVo,NV,OVo,VVo,XVo,Hv,mpe,zVo,WVo,qV,QVo,HVo,UVo,Uv,gpe,JVo,YVo,jV,KVo,ZVo,eXo,Jv,hpe,oXo,rXo,DV,tXo,aXo,nXo,Yv,ppe,sXo,lXo,GV,iXo,dXo,cXo,Kv,_pe,fXo,mXo,OV,gXo,hXo,pXo,Zv,upe,_Xo,uXo,VV,bXo,vXo,FXo,eF,bpe,TXo,MXo,XV,EXo,CXo,wXo,oF,vpe,AXo,LXo,zV,yXo,xXo,$Xo,rF,Fpe,kXo,SXo,WV,RXo,PXo,BXo,tF,Tpe,IXo,NXo,QV,qXo,jXo,DXo,aF,Mpe,GXo,OXo,HV,VXo,XXo,zXo,nF,Epe,WXo,QXo,UV,HXo,UXo,JXo,sF,Cpe,YXo,KXo,JV,ZXo,ezo,ozo,lF,wpe,rzo,tzo,YV,azo,nzo,szo,iF,Ape,lzo,izo,KV,dzo,czo,fzo,dF,Lpe,mzo,gzo,ZV,hzo,pzo,_zo,cF,ype,uzo,bzo,eX,vzo,Fzo,Tzo,fF,xpe,Mzo,Ezo,oX,Czo,wzo,Azo,mF,$pe,Lzo,yzo,rX,xzo,$zo,kzo,gF,kpe,Szo,Rzo,tX,Pzo,Bzo,Izo,hF,Spe,Nzo,qzo,aX,jzo,Dzo,Gzo,pF,Rpe,Ozo,Vzo,nX,Xzo,zzo,Wzo,_F,Ppe,Qzo,Hzo,sX,Uzo,Jzo,Yzo,uF,Bpe,Kzo,Zzo,lX,eWo,oWo,rWo,bF,Ipe,tWo,aWo,iX,nWo,sWo,lWo,vF,Npe,iWo,dWo,dX,cWo,fWo,mWo,FF,qpe,gWo,hWo,cX,pWo,_Wo,uWo,TF,jpe,bWo,vWo,fX,FWo,TWo,MWo,MF,Dpe,EWo,CWo,mX,wWo,AWo,LWo,EF,Gpe,yWo,xWo,gX,$Wo,kWo,SWo,CF,Ope,RWo,PWo,hX,BWo,IWo,NWo,wF,qWo,Vpe,jWo,DWo,Xpe,GWo,OWo,AF,EDe,ed,LF,zpe,pL,VWo,Wpe,XWo,CDe,No,_L,zWo,od,WWo,pX,QWo,HWo,_X,UWo,JWo,YWo,uL,KWo,Qpe,ZWo,eQo,oQo,mt,bL,rQo,Hpe,tQo,aQo,rd,nQo,Upe,sQo,lQo,uX,iQo,dQo,cQo,yF,fQo,no,vL,mQo,Jpe,gQo,hQo,Na,pQo,Ype,_Qo,uQo,Kpe,bQo,vQo,Zpe,FQo,TQo,MQo,V,xF,e_e,EQo,CQo,bX,wQo,AQo,LQo,$F,o_e,yQo,xQo,vX,$Qo,kQo,SQo,kF,r_e,RQo,PQo,FX,BQo,IQo,NQo,SF,t_e,qQo,jQo,TX,DQo,GQo,OQo,RF,a_e,VQo,XQo,MX,zQo,WQo,QQo,PF,n_e,HQo,UQo,EX,JQo,YQo,KQo,BF,s_e,ZQo,eHo,CX,oHo,rHo,tHo,IF,l_e,aHo,nHo,wX,sHo,lHo,iHo,NF,i_e,dHo,cHo,AX,fHo,mHo,gHo,qF,d_e,hHo,pHo,LX,_Ho,uHo,bHo,jF,c_e,vHo,FHo,yX,THo,MHo,EHo,DF,f_e,CHo,wHo,xX,AHo,LHo,yHo,GF,m_e,xHo,$Ho,$X,kHo,SHo,RHo,OF,g_e,PHo,BHo,kX,IHo,NHo,qHo,VF,h_e,jHo,DHo,SX,GHo,OHo,VHo,XF,p_e,XHo,zHo,RX,WHo,QHo,HHo,zF,__e,UHo,JHo,PX,YHo,KHo,ZHo,WF,u_e,eUo,oUo,BX,rUo,tUo,aUo,QF,b_e,nUo,sUo,IX,lUo,iUo,dUo,HF,v_e,cUo,fUo,NX,mUo,gUo,hUo,UF,F_e,pUo,_Uo,qX,uUo,bUo,vUo,JF,T_e,FUo,TUo,jX,MUo,EUo,CUo,YF,M_e,wUo,AUo,DX,LUo,yUo,xUo,KF,E_e,$Uo,kUo,GX,SUo,RUo,PUo,ZF,C_e,BUo,IUo,OX,NUo,qUo,jUo,e6,w_e,DUo,GUo,VX,OUo,VUo,XUo,o6,A_e,zUo,WUo,XX,QUo,HUo,UUo,r6,L_e,JUo,YUo,zX,KUo,ZUo,eJo,t6,y_e,oJo,rJo,WX,tJo,aJo,nJo,a6,x_e,sJo,lJo,QX,iJo,dJo,cJo,n6,$_e,fJo,mJo,HX,gJo,hJo,pJo,s6,k_e,_Jo,uJo,UX,bJo,vJo,FJo,l6,S_e,TJo,MJo,JX,EJo,CJo,wJo,i6,R_e,AJo,LJo,YX,yJo,xJo,$Jo,d6,P_e,kJo,SJo,KX,RJo,PJo,BJo,c6,B_e,IJo,NJo,ZX,qJo,jJo,DJo,f6,I_e,GJo,OJo,ez,VJo,XJo,zJo,m6,N_e,WJo,QJo,oz,HJo,UJo,JJo,g6,q_e,YJo,KJo,rz,ZJo,eYo,oYo,h6,j_e,rYo,tYo,tz,aYo,nYo,sYo,p6,lYo,D_e,iYo,dYo,G_e,cYo,fYo,_6,wDe,td,u6,O_e,FL,mYo,V_e,gYo,ADe,qo,TL,hYo,ad,pYo,az,_Yo,uYo,nz,bYo,vYo,FYo,ML,TYo,X_e,MYo,EYo,CYo,gt,EL,wYo,z_e,AYo,LYo,nd,yYo,W_e,xYo,$Yo,sz,kYo,SYo,RYo,b6,PYo,so,CL,BYo,Q_e,IYo,NYo,qa,qYo,H_e,jYo,DYo,U_e,GYo,OYo,J_e,VYo,XYo,zYo,Y_e,v6,K_e,WYo,QYo,lz,HYo,UYo,JYo,F6,YYo,Z_e,KYo,ZYo,eue,eKo,oKo,T6,LDe,sd,M6,oue,wL,rKo,rue,tKo,yDe,jo,AL,aKo,ld,nKo,iz,sKo,lKo,dz,iKo,dKo,cKo,LL,fKo,tue,mKo,gKo,hKo,ht,yL,pKo,aue,_Ko,uKo,id,bKo,nue,vKo,FKo,cz,TKo,MKo,EKo,E6,CKo,lo,xL,wKo,sue,AKo,LKo,ja,yKo,lue,xKo,$Ko,iue,kKo,SKo,due,RKo,PKo,BKo,Fe,C6,cue,IKo,NKo,fz,qKo,jKo,DKo,w6,fue,GKo,OKo,mz,VKo,XKo,zKo,A6,mue,WKo,QKo,gz,HKo,UKo,JKo,L6,gue,YKo,KKo,hz,ZKo,eZo,oZo,Is,hue,rZo,tZo,pz,aZo,nZo,_z,sZo,lZo,iZo,y6,pue,dZo,cZo,uz,fZo,mZo,gZo,Ns,_ue,hZo,pZo,bz,_Zo,uZo,vz,bZo,vZo,FZo,pt,uue,TZo,MZo,Fz,EZo,CZo,Tz,wZo,AZo,Mz,LZo,yZo,xZo,x6,bue,$Zo,kZo,Ez,SZo,RZo,PZo,$6,vue,BZo,IZo,Cz,NZo,qZo,jZo,k6,Fue,DZo,GZo,wz,OZo,VZo,XZo,S6,Tue,zZo,WZo,Az,QZo,HZo,UZo,R6,Mue,JZo,YZo,Lz,KZo,ZZo,eer,P6,Eue,oer,rer,yz,ter,aer,ner,B6,Cue,ser,ler,xz,ier,der,cer,I6,fer,wue,mer,ger,Aue,her,per,N6,xDe,dd,q6,Lue,$L,_er,yue,uer,$De,Do,kL,ber,cd,ver,$z,Fer,Ter,kz,Mer,Eer,Cer,SL,wer,xue,Aer,Ler,yer,_t,RL,xer,$ue,$er,ker,fd,Ser,kue,Rer,Per,Sz,Ber,Ier,Ner,j6,qer,io,PL,jer,Sue,Der,Ger,Da,Oer,Rue,Ver,Xer,Pue,zer,Wer,Bue,Qer,Her,Uer,Iue,D6,Nue,Jer,Yer,Rz,Ker,Zer,eor,G6,oor,que,ror,tor,jue,aor,nor,O6,kDe,md,V6,Due,BL,sor,Gue,lor,SDe,Go,IL,ior,gd,dor,Pz,cor,mor,Bz,gor,hor,por,NL,_or,Oue,uor,bor,vor,ut,qL,For,Vue,Tor,Mor,hd,Eor,Xue,Cor,wor,Iz,Aor,Lor,yor,X6,xor,co,jL,$or,zue,kor,Sor,Ga,Ror,Wue,Por,Bor,Que,Ior,Nor,Hue,qor,jor,Dor,Pe,z6,Uue,Gor,Oor,Nz,Vor,Xor,zor,W6,Jue,Wor,Qor,qz,Hor,Uor,Jor,Q6,Yue,Yor,Kor,jz,Zor,err,orr,H6,Kue,rrr,trr,Dz,arr,nrr,srr,U6,Zue,lrr,irr,Gz,drr,crr,frr,J6,e2e,mrr,grr,Oz,hrr,prr,_rr,Y6,o2e,urr,brr,Vz,vrr,Frr,Trr,K6,r2e,Mrr,Err,Xz,Crr,wrr,Arr,Z6,t2e,Lrr,yrr,zz,xrr,$rr,krr,eT,Srr,a2e,Rrr,Prr,n2e,Brr,Irr,oT,RDe,pd,rT,s2e,DL,Nrr,l2e,qrr,PDe,Oo,GL,jrr,_d,Drr,Wz,Grr,Orr,Qz,Vrr,Xrr,zrr,OL,Wrr,i2e,Qrr,Hrr,Urr,bt,VL,Jrr,d2e,Yrr,Krr,ud,Zrr,c2e,etr,otr,Hz,rtr,ttr,atr,tT,ntr,fo,XL,str,f2e,ltr,itr,Oa,dtr,m2e,ctr,ftr,g2e,mtr,gtr,h2e,htr,ptr,_tr,Kr,aT,p2e,utr,btr,Uz,vtr,Ftr,Ttr,nT,_2e,Mtr,Etr,Jz,Ctr,wtr,Atr,sT,u2e,Ltr,ytr,Yz,xtr,$tr,ktr,lT,b2e,Str,Rtr,Kz,Ptr,Btr,Itr,iT,v2e,Ntr,qtr,Zz,jtr,Dtr,Gtr,dT,Otr,F2e,Vtr,Xtr,T2e,ztr,Wtr,cT,BDe,bd,fT,M2e,zL,Qtr,E2e,Htr,IDe,Vo,WL,Utr,vd,Jtr,eW,Ytr,Ktr,oW,Ztr,ear,oar,QL,rar,C2e,tar,aar,nar,vt,HL,sar,w2e,lar,iar,Fd,dar,A2e,car,far,rW,mar,gar,har,mT,par,mo,UL,_ar,L2e,uar,bar,Va,Far,y2e,Tar,Mar,x2e,Ear,Car,$2e,war,Aar,Lar,Le,gT,k2e,yar,xar,tW,$ar,kar,Sar,hT,S2e,Rar,Par,aW,Bar,Iar,Nar,pT,R2e,qar,jar,nW,Dar,Gar,Oar,_T,P2e,Var,Xar,sW,zar,War,Qar,uT,B2e,Har,Uar,lW,Jar,Yar,Kar,bT,I2e,Zar,enr,iW,onr,rnr,tnr,vT,N2e,anr,nnr,dW,snr,lnr,inr,FT,q2e,dnr,cnr,cW,fnr,mnr,gnr,TT,j2e,hnr,pnr,fW,_nr,unr,bnr,MT,D2e,vnr,Fnr,mW,Tnr,Mnr,Enr,ET,Cnr,G2e,wnr,Anr,O2e,Lnr,ynr,CT,NDe,Td,wT,V2e,JL,xnr,X2e,$nr,qDe,Xo,YL,knr,Md,Snr,gW,Rnr,Pnr,hW,Bnr,Inr,Nnr,KL,qnr,z2e,jnr,Dnr,Gnr,Ft,ZL,Onr,W2e,Vnr,Xnr,Ed,znr,Q2e,Wnr,Qnr,pW,Hnr,Unr,Jnr,AT,Ynr,go,ey,Knr,H2e,Znr,esr,Xa,osr,U2e,rsr,tsr,J2e,asr,nsr,Y2e,ssr,lsr,isr,oy,LT,K2e,dsr,csr,_W,fsr,msr,gsr,yT,Z2e,hsr,psr,uW,_sr,usr,bsr,xT,vsr,e1e,Fsr,Tsr,o1e,Msr,Esr,$T,jDe,Cd,kT,r1e,ry,Csr,t1e,wsr,DDe,zo,ty,Asr,wd,Lsr,bW,ysr,xsr,vW,$sr,ksr,Ssr,ay,Rsr,a1e,Psr,Bsr,Isr,Tt,ny,Nsr,n1e,qsr,jsr,Ad,Dsr,s1e,Gsr,Osr,FW,Vsr,Xsr,zsr,ST,Wsr,ho,sy,Qsr,l1e,Hsr,Usr,za,Jsr,i1e,Ysr,Ksr,d1e,Zsr,elr,c1e,olr,rlr,tlr,Zr,RT,f1e,alr,nlr,TW,slr,llr,ilr,PT,m1e,dlr,clr,MW,flr,mlr,glr,BT,g1e,hlr,plr,EW,_lr,ulr,blr,IT,h1e,vlr,Flr,CW,Tlr,Mlr,Elr,NT,p1e,Clr,wlr,wW,Alr,Llr,ylr,qT,xlr,_1e,$lr,klr,u1e,Slr,Rlr,jT,GDe,Ld,DT,b1e,ly,Plr,v1e,Blr,ODe,Wo,iy,Ilr,yd,Nlr,AW,qlr,jlr,LW,Dlr,Glr,Olr,dy,Vlr,F1e,Xlr,zlr,Wlr,Mt,cy,Qlr,T1e,Hlr,Ulr,xd,Jlr,M1e,Ylr,Klr,yW,Zlr,eir,oir,GT,rir,po,fy,tir,E1e,air,nir,Wa,sir,C1e,lir,iir,w1e,dir,cir,A1e,fir,mir,gir,$d,OT,L1e,hir,pir,xW,_ir,uir,bir,VT,y1e,vir,Fir,$W,Tir,Mir,Eir,XT,x1e,Cir,wir,kW,Air,Lir,yir,zT,xir,$1e,$ir,kir,k1e,Sir,Rir,WT,VDe,kd,QT,S1e,my,Pir,R1e,Bir,XDe,Qo,gy,Iir,Sd,Nir,SW,qir,jir,RW,Dir,Gir,Oir,hy,Vir,P1e,Xir,zir,Wir,Et,py,Qir,B1e,Hir,Uir,Rd,Jir,I1e,Yir,Kir,PW,Zir,edr,odr,HT,rdr,_o,_y,tdr,N1e,adr,ndr,Qa,sdr,q1e,ldr,idr,j1e,ddr,cdr,D1e,fdr,mdr,gdr,uy,UT,G1e,hdr,pdr,BW,_dr,udr,bdr,JT,O1e,vdr,Fdr,IW,Tdr,Mdr,Edr,YT,Cdr,V1e,wdr,Adr,X1e,Ldr,ydr,KT,zDe,Pd,ZT,z1e,by,xdr,W1e,$dr,WDe,Ho,vy,kdr,Bd,Sdr,NW,Rdr,Pdr,qW,Bdr,Idr,Ndr,Fy,qdr,Q1e,jdr,Ddr,Gdr,Ct,Ty,Odr,H1e,Vdr,Xdr,Id,zdr,U1e,Wdr,Qdr,jW,Hdr,Udr,Jdr,e7,Ydr,uo,My,Kdr,J1e,Zdr,ecr,Ha,ocr,Y1e,rcr,tcr,K1e,acr,ncr,Z1e,scr,lcr,icr,ebe,o7,obe,dcr,ccr,DW,fcr,mcr,gcr,r7,hcr,rbe,pcr,_cr,tbe,ucr,bcr,t7,QDe,Nd,a7,abe,Ey,vcr,nbe,Fcr,HDe,Uo,Cy,Tcr,qd,Mcr,GW,Ecr,Ccr,OW,wcr,Acr,Lcr,wy,ycr,sbe,xcr,$cr,kcr,wt,Ay,Scr,lbe,Rcr,Pcr,jd,Bcr,ibe,Icr,Ncr,VW,qcr,jcr,Dcr,n7,Gcr,bo,Ly,Ocr,dbe,Vcr,Xcr,Ua,zcr,cbe,Wcr,Qcr,fbe,Hcr,Ucr,mbe,Jcr,Ycr,Kcr,Ja,s7,gbe,Zcr,efr,XW,ofr,rfr,tfr,l7,hbe,afr,nfr,zW,sfr,lfr,ifr,i7,pbe,dfr,cfr,WW,ffr,mfr,gfr,d7,_be,hfr,pfr,QW,_fr,ufr,bfr,c7,vfr,ube,Ffr,Tfr,bbe,Mfr,Efr,f7,UDe,Dd,m7,vbe,yy,Cfr,Fbe,wfr,JDe,Jo,xy,Afr,Gd,Lfr,HW,yfr,xfr,UW,$fr,kfr,Sfr,$y,Rfr,Tbe,Pfr,Bfr,Ifr,At,ky,Nfr,Mbe,qfr,jfr,Od,Dfr,Ebe,Gfr,Ofr,JW,Vfr,Xfr,zfr,g7,Wfr,vo,Sy,Qfr,Cbe,Hfr,Ufr,Ya,Jfr,wbe,Yfr,Kfr,Abe,Zfr,emr,Lbe,omr,rmr,tmr,ybe,h7,xbe,amr,nmr,YW,smr,lmr,imr,p7,dmr,$be,cmr,fmr,kbe,mmr,gmr,_7,YDe,Vd,u7,Sbe,Ry,hmr,Rbe,pmr,KDe,Yo,Py,_mr,Xd,umr,KW,bmr,vmr,ZW,Fmr,Tmr,Mmr,By,Emr,Pbe,Cmr,wmr,Amr,Lt,Iy,Lmr,Bbe,ymr,xmr,zd,$mr,Ibe,kmr,Smr,eQ,Rmr,Pmr,Bmr,b7,Imr,wr,Ny,Nmr,Nbe,qmr,jmr,Ka,Dmr,qbe,Gmr,Omr,jbe,Vmr,Xmr,Dbe,zmr,Wmr,Qmr,q,v7,Gbe,Hmr,Umr,oQ,Jmr,Ymr,Kmr,F7,Obe,Zmr,egr,rQ,ogr,rgr,tgr,T7,Vbe,agr,ngr,tQ,sgr,lgr,igr,M7,Xbe,dgr,cgr,aQ,fgr,mgr,ggr,E7,zbe,hgr,pgr,nQ,_gr,ugr,bgr,C7,Wbe,vgr,Fgr,sQ,Tgr,Mgr,Egr,w7,Qbe,Cgr,wgr,lQ,Agr,Lgr,ygr,A7,Hbe,xgr,$gr,iQ,kgr,Sgr,Rgr,L7,Ube,Pgr,Bgr,dQ,Igr,Ngr,qgr,y7,Jbe,jgr,Dgr,cQ,Ggr,Ogr,Vgr,x7,Ybe,Xgr,zgr,fQ,Wgr,Qgr,Hgr,$7,Kbe,Ugr,Jgr,mQ,Ygr,Kgr,Zgr,k7,Zbe,ehr,ohr,gQ,rhr,thr,ahr,S7,eve,nhr,shr,hQ,lhr,ihr,dhr,R7,ove,chr,fhr,pQ,mhr,ghr,hhr,P7,rve,phr,_hr,_Q,uhr,bhr,vhr,B7,tve,Fhr,Thr,uQ,Mhr,Ehr,Chr,qs,ave,whr,Ahr,bQ,Lhr,yhr,vQ,xhr,$hr,khr,I7,nve,Shr,Rhr,FQ,Phr,Bhr,Ihr,N7,sve,Nhr,qhr,TQ,jhr,Dhr,Ghr,q7,lve,Ohr,Vhr,MQ,Xhr,zhr,Whr,j7,ive,Qhr,Hhr,EQ,Uhr,Jhr,Yhr,D7,dve,Khr,Zhr,CQ,epr,opr,rpr,G7,cve,tpr,apr,wQ,npr,spr,lpr,O7,fve,ipr,dpr,AQ,cpr,fpr,mpr,V7,mve,gpr,hpr,LQ,ppr,_pr,upr,X7,gve,bpr,vpr,yQ,Fpr,Tpr,Mpr,z7,hve,Epr,Cpr,xQ,wpr,Apr,Lpr,W7,pve,ypr,xpr,$Q,$pr,kpr,Spr,Q7,_ve,Rpr,Ppr,kQ,Bpr,Ipr,Npr,H7,uve,qpr,jpr,SQ,Dpr,Gpr,Opr,U7,bve,Vpr,Xpr,RQ,zpr,Wpr,Qpr,J7,vve,Hpr,Upr,PQ,Jpr,Ypr,Kpr,Y7,Fve,Zpr,e_r,BQ,o_r,r_r,t_r,K7,Tve,a_r,n_r,IQ,s_r,l_r,i_r,Z7,Mve,d_r,c_r,NQ,f_r,m_r,g_r,e9,Eve,h_r,p_r,qQ,__r,u_r,b_r,o9,Cve,v_r,F_r,jQ,T_r,M_r,E_r,r9,wve,C_r,w_r,DQ,A_r,L_r,y_r,t9,Ave,x_r,$_r,GQ,k_r,S_r,R_r,a9,Lve,P_r,B_r,OQ,I_r,N_r,q_r,n9,yve,j_r,D_r,VQ,G_r,O_r,V_r,s9,xve,X_r,z_r,XQ,W_r,Q_r,H_r,l9,$ve,U_r,J_r,zQ,Y_r,K_r,Z_r,i9,kve,eur,our,WQ,rur,tur,aur,d9,Sve,nur,sur,QQ,lur,iur,dur,c9,Rve,cur,fur,HQ,mur,gur,hur,f9,ZDe,Wd,m9,Pve,qy,pur,Bve,_ur,eGe,Ko,jy,uur,Qd,bur,UQ,vur,Fur,JQ,Tur,Mur,Eur,Dy,Cur,Ive,wur,Aur,Lur,yt,Gy,yur,Nve,xur,$ur,Hd,kur,qve,Sur,Rur,YQ,Pur,Bur,Iur,g9,Nur,Ar,Oy,qur,jve,jur,Dur,Za,Gur,Dve,Our,Vur,Gve,Xur,zur,Ove,Wur,Qur,Hur,se,h9,Vve,Uur,Jur,KQ,Yur,Kur,Zur,p9,Xve,e2r,o2r,ZQ,r2r,t2r,a2r,_9,zve,n2r,s2r,eH,l2r,i2r,d2r,u9,Wve,c2r,f2r,oH,m2r,g2r,h2r,b9,Qve,p2r,_2r,rH,u2r,b2r,v2r,v9,Hve,F2r,T2r,tH,M2r,E2r,C2r,F9,Uve,w2r,A2r,aH,L2r,y2r,x2r,T9,Jve,$2r,k2r,nH,S2r,R2r,P2r,M9,Yve,B2r,I2r,sH,N2r,q2r,j2r,E9,Kve,D2r,G2r,lH,O2r,V2r,X2r,C9,Zve,z2r,W2r,iH,Q2r,H2r,U2r,w9,eFe,J2r,Y2r,dH,K2r,Z2r,e1r,A9,oFe,o1r,r1r,cH,t1r,a1r,n1r,L9,rFe,s1r,l1r,fH,i1r,d1r,c1r,y9,tFe,f1r,m1r,mH,g1r,h1r,p1r,x9,aFe,_1r,u1r,gH,b1r,v1r,F1r,$9,nFe,T1r,M1r,hH,E1r,C1r,w1r,k9,sFe,A1r,L1r,pH,y1r,x1r,$1r,S9,lFe,k1r,S1r,_H,R1r,P1r,B1r,R9,iFe,I1r,N1r,uH,q1r,j1r,D1r,P9,dFe,G1r,O1r,bH,V1r,X1r,z1r,B9,cFe,W1r,Q1r,vH,H1r,U1r,J1r,I9,fFe,Y1r,K1r,FH,Z1r,ebr,obr,N9,oGe,Ud,q9,mFe,Vy,rbr,gFe,tbr,rGe,Zo,Xy,abr,Jd,nbr,TH,sbr,lbr,MH,ibr,dbr,cbr,zy,fbr,hFe,mbr,gbr,hbr,xt,Wy,pbr,pFe,_br,ubr,Yd,bbr,_Fe,vbr,Fbr,EH,Tbr,Mbr,Ebr,j9,Cbr,Lr,Qy,wbr,uFe,Abr,Lbr,en,ybr,bFe,xbr,$br,vFe,kbr,Sbr,FFe,Rbr,Pbr,Bbr,Me,D9,TFe,Ibr,Nbr,CH,qbr,jbr,Dbr,G9,MFe,Gbr,Obr,wH,Vbr,Xbr,zbr,O9,EFe,Wbr,Qbr,AH,Hbr,Ubr,Jbr,V9,CFe,Ybr,Kbr,LH,Zbr,evr,ovr,X9,wFe,rvr,tvr,yH,avr,nvr,svr,z9,AFe,lvr,ivr,xH,dvr,cvr,fvr,W9,LFe,mvr,gvr,$H,hvr,pvr,_vr,Q9,yFe,uvr,bvr,kH,vvr,Fvr,Tvr,H9,xFe,Mvr,Evr,SH,Cvr,wvr,Avr,U9,$Fe,Lvr,yvr,RH,xvr,$vr,kvr,J9,kFe,Svr,Rvr,PH,Pvr,Bvr,Ivr,Y9,SFe,Nvr,qvr,BH,jvr,Dvr,Gvr,K9,RFe,Ovr,Vvr,IH,Xvr,zvr,Wvr,Z9,tGe,Kd,eM,PFe,Hy,Qvr,BFe,Hvr,aGe,er,Uy,Uvr,Zd,Jvr,NH,Yvr,Kvr,qH,Zvr,eFr,oFr,Jy,rFr,IFe,tFr,aFr,nFr,$t,Yy,sFr,NFe,lFr,iFr,ec,dFr,qFe,cFr,fFr,jH,mFr,gFr,hFr,oM,pFr,yr,Ky,_Fr,jFe,uFr,bFr,on,vFr,DFe,FFr,TFr,GFe,MFr,EFr,OFe,CFr,wFr,AFr,rn,rM,VFe,LFr,yFr,DH,xFr,$Fr,kFr,tM,XFe,SFr,RFr,GH,PFr,BFr,IFr,aM,zFe,NFr,qFr,OH,jFr,DFr,GFr,nM,WFe,OFr,VFr,VH,XFr,zFr,WFr,sM,nGe,oc,lM,QFe,Zy,QFr,HFe,HFr,sGe,or,e8,UFr,rc,JFr,XH,YFr,KFr,zH,ZFr,e6r,o6r,o8,r6r,UFe,t6r,a6r,n6r,kt,r8,s6r,JFe,l6r,i6r,tc,d6r,YFe,c6r,f6r,WH,m6r,g6r,h6r,iM,p6r,xr,t8,_6r,KFe,u6r,b6r,tn,v6r,ZFe,F6r,T6r,e6e,M6r,E6r,o6e,C6r,w6r,A6r,ie,dM,r6e,L6r,y6r,QH,x6r,$6r,k6r,cM,t6e,S6r,R6r,HH,P6r,B6r,I6r,fM,a6e,N6r,q6r,UH,j6r,D6r,G6r,mM,n6e,O6r,V6r,JH,X6r,z6r,W6r,gM,s6e,Q6r,H6r,YH,U6r,J6r,Y6r,hM,l6e,K6r,Z6r,KH,eTr,oTr,rTr,pM,i6e,tTr,aTr,ZH,nTr,sTr,lTr,_M,d6e,iTr,dTr,eU,cTr,fTr,mTr,uM,c6e,gTr,hTr,oU,pTr,_Tr,uTr,bM,f6e,bTr,vTr,rU,FTr,TTr,MTr,vM,m6e,ETr,CTr,tU,wTr,ATr,LTr,FM,g6e,yTr,xTr,aU,$Tr,kTr,STr,TM,h6e,RTr,PTr,nU,BTr,ITr,NTr,MM,p6e,qTr,jTr,sU,DTr,GTr,OTr,EM,_6e,VTr,XTr,lU,zTr,WTr,QTr,CM,u6e,HTr,UTr,iU,JTr,YTr,KTr,wM,b6e,ZTr,e7r,dU,o7r,r7r,t7r,AM,v6e,a7r,n7r,cU,s7r,l7r,i7r,LM,F6e,d7r,c7r,fU,f7r,m7r,g7r,yM,T6e,h7r,p7r,mU,_7r,u7r,b7r,xM,lGe,ac,$M,M6e,a8,v7r,E6e,F7r,iGe,rr,n8,T7r,nc,M7r,gU,E7r,C7r,hU,w7r,A7r,L7r,s8,y7r,C6e,x7r,$7r,k7r,St,l8,S7r,w6e,R7r,P7r,sc,B7r,A6e,I7r,N7r,pU,q7r,j7r,D7r,kM,G7r,$r,i8,O7r,L6e,V7r,X7r,an,z7r,y6e,W7r,Q7r,x6e,H7r,U7r,$6e,J7r,Y7r,K7r,ye,SM,k6e,Z7r,e9r,_U,o9r,r9r,t9r,RM,S6e,a9r,n9r,uU,s9r,l9r,i9r,PM,R6e,d9r,c9r,bU,f9r,m9r,g9r,BM,P6e,h9r,p9r,vU,_9r,u9r,b9r,IM,B6e,v9r,F9r,FU,T9r,M9r,E9r,NM,I6e,C9r,w9r,TU,A9r,L9r,y9r,qM,N6e,x9r,$9r,MU,k9r,S9r,R9r,jM,q6e,P9r,B9r,EU,I9r,N9r,q9r,DM,j6e,j9r,D9r,CU,G9r,O9r,V9r,GM,D6e,X9r,z9r,wU,W9r,Q9r,H9r,OM,dGe,lc,VM,G6e,d8,U9r,O6e,J9r,cGe,tr,c8,Y9r,ic,K9r,AU,Z9r,eMr,LU,oMr,rMr,tMr,f8,aMr,V6e,nMr,sMr,lMr,Rt,m8,iMr,X6e,dMr,cMr,dc,fMr,z6e,mMr,gMr,yU,hMr,pMr,_Mr,XM,uMr,kr,g8,bMr,W6e,vMr,FMr,nn,TMr,Q6e,MMr,EMr,H6e,CMr,wMr,U6e,AMr,LMr,yMr,re,zM,J6e,xMr,$Mr,xU,kMr,SMr,RMr,WM,Y6e,PMr,BMr,$U,IMr,NMr,qMr,QM,K6e,jMr,DMr,kU,GMr,OMr,VMr,HM,Z6e,XMr,zMr,SU,WMr,QMr,HMr,UM,eTe,UMr,JMr,RU,YMr,KMr,ZMr,JM,oTe,e4r,o4r,PU,r4r,t4r,a4r,YM,rTe,n4r,s4r,BU,l4r,i4r,d4r,KM,tTe,c4r,f4r,IU,m4r,g4r,h4r,ZM,aTe,p4r,_4r,NU,u4r,b4r,v4r,e4,nTe,F4r,T4r,qU,M4r,E4r,C4r,o4,sTe,w4r,A4r,jU,L4r,y4r,x4r,r4,lTe,$4r,k4r,DU,S4r,R4r,P4r,t4,iTe,B4r,I4r,GU,N4r,q4r,j4r,a4,dTe,D4r,G4r,OU,O4r,V4r,X4r,n4,cTe,z4r,W4r,VU,Q4r,H4r,U4r,s4,fTe,J4r,Y4r,XU,K4r,Z4r,eEr,l4,mTe,oEr,rEr,zU,tEr,aEr,nEr,i4,gTe,sEr,lEr,WU,iEr,dEr,cEr,d4,hTe,fEr,mEr,QU,gEr,hEr,pEr,c4,pTe,_Er,uEr,HU,bEr,vEr,FEr,f4,_Te,TEr,MEr,UU,EEr,CEr,wEr,m4,uTe,AEr,LEr,JU,yEr,xEr,$Er,g4,bTe,kEr,SEr,YU,REr,PEr,BEr,h4,vTe,IEr,NEr,KU,qEr,jEr,DEr,p4,FTe,GEr,OEr,ZU,VEr,XEr,zEr,_4,TTe,WEr,QEr,eJ,HEr,UEr,JEr,u4,fGe,cc,b4,MTe,h8,YEr,ETe,KEr,mGe,ar,p8,ZEr,fc,eCr,oJ,oCr,rCr,rJ,tCr,aCr,nCr,_8,sCr,CTe,lCr,iCr,dCr,Pt,u8,cCr,wTe,fCr,mCr,mc,gCr,ATe,hCr,pCr,tJ,_Cr,uCr,bCr,v4,vCr,Sr,b8,FCr,LTe,TCr,MCr,sn,ECr,yTe,CCr,wCr,xTe,ACr,LCr,$Te,yCr,xCr,$Cr,_e,F4,kTe,kCr,SCr,aJ,RCr,PCr,BCr,T4,STe,ICr,NCr,nJ,qCr,jCr,DCr,M4,RTe,GCr,OCr,sJ,VCr,XCr,zCr,E4,PTe,WCr,QCr,lJ,HCr,UCr,JCr,C4,BTe,YCr,KCr,iJ,ZCr,e5r,o5r,w4,ITe,r5r,t5r,dJ,a5r,n5r,s5r,A4,NTe,l5r,i5r,cJ,d5r,c5r,f5r,L4,qTe,m5r,g5r,fJ,h5r,p5r,_5r,y4,jTe,u5r,b5r,mJ,v5r,F5r,T5r,x4,DTe,M5r,E5r,gJ,C5r,w5r,A5r,$4,GTe,L5r,y5r,hJ,x5r,$5r,k5r,k4,OTe,S5r,R5r,pJ,P5r,B5r,I5r,S4,VTe,N5r,q5r,_J,j5r,D5r,G5r,R4,XTe,O5r,V5r,uJ,X5r,z5r,W5r,P4,zTe,Q5r,H5r,bJ,U5r,J5r,Y5r,B4,WTe,K5r,Z5r,vJ,e3r,o3r,r3r,I4,QTe,t3r,a3r,FJ,n3r,s3r,l3r,N4,gGe,gc,q4,HTe,v8,i3r,UTe,d3r,hGe,nr,F8,c3r,hc,f3r,TJ,m3r,g3r,MJ,h3r,p3r,_3r,T8,u3r,JTe,b3r,v3r,F3r,Bt,M8,T3r,YTe,M3r,E3r,pc,C3r,KTe,w3r,A3r,EJ,L3r,y3r,x3r,j4,$3r,Rr,E8,k3r,ZTe,S3r,R3r,ln,P3r,e7e,B3r,I3r,o7e,N3r,q3r,r7e,j3r,D3r,G3r,C8,D4,t7e,O3r,V3r,CJ,X3r,z3r,W3r,G4,a7e,Q3r,H3r,wJ,U3r,J3r,Y3r,O4,pGe,_c,V4,n7e,w8,K3r,s7e,Z3r,_Ge,sr,A8,e0r,uc,o0r,AJ,r0r,t0r,LJ,a0r,n0r,s0r,L8,l0r,l7e,i0r,d0r,c0r,It,y8,f0r,i7e,m0r,g0r,bc,h0r,d7e,p0r,_0r,yJ,u0r,b0r,v0r,X4,F0r,Pr,x8,T0r,c7e,M0r,E0r,dn,C0r,f7e,w0r,A0r,m7e,L0r,y0r,g7e,x0r,$0r,k0r,h7e,z4,p7e,S0r,R0r,xJ,P0r,B0r,I0r,W4,uGe,vc,Q4,_7e,$8,N0r,u7e,q0r,bGe,lr,k8,j0r,Fc,D0r,$J,G0r,O0r,kJ,V0r,X0r,z0r,S8,W0r,b7e,Q0r,H0r,U0r,Nt,R8,J0r,v7e,Y0r,K0r,Tc,Z0r,F7e,ewr,owr,SJ,rwr,twr,awr,H4,nwr,Br,P8,swr,T7e,lwr,iwr,cn,dwr,M7e,cwr,fwr,E7e,mwr,gwr,C7e,hwr,pwr,_wr,de,U4,w7e,uwr,bwr,RJ,vwr,Fwr,Twr,J4,A7e,Mwr,Ewr,PJ,Cwr,wwr,Awr,Y4,L7e,Lwr,ywr,BJ,xwr,$wr,kwr,K4,y7e,Swr,Rwr,IJ,Pwr,Bwr,Iwr,Z4,x7e,Nwr,qwr,NJ,jwr,Dwr,Gwr,eE,$7e,Owr,Vwr,qJ,Xwr,zwr,Wwr,oE,k7e,Qwr,Hwr,jJ,Uwr,Jwr,Ywr,rE,S7e,Kwr,Zwr,DJ,eAr,oAr,rAr,tE,R7e,tAr,aAr,GJ,nAr,sAr,lAr,aE,P7e,iAr,dAr,OJ,cAr,fAr,mAr,nE,B7e,gAr,hAr,VJ,pAr,_Ar,uAr,sE,I7e,bAr,vAr,XJ,FAr,TAr,MAr,lE,N7e,EAr,CAr,zJ,wAr,AAr,LAr,iE,q7e,yAr,xAr,WJ,$Ar,kAr,SAr,dE,j7e,RAr,PAr,QJ,BAr,IAr,NAr,cE,D7e,qAr,jAr,HJ,DAr,GAr,OAr,fE,G7e,VAr,XAr,UJ,zAr,WAr,QAr,mE,O7e,HAr,UAr,JJ,JAr,YAr,KAr,gE,V7e,ZAr,eLr,YJ,oLr,rLr,tLr,hE,X7e,aLr,nLr,KJ,sLr,lLr,iLr,pE,vGe,Mc,_E,z7e,B8,dLr,W7e,cLr,FGe,ir,I8,fLr,Ec,mLr,ZJ,gLr,hLr,eY,pLr,_Lr,uLr,N8,bLr,Q7e,vLr,FLr,TLr,qt,q8,MLr,H7e,ELr,CLr,Cc,wLr,U7e,ALr,LLr,oY,yLr,xLr,$Lr,uE,kLr,Ir,j8,SLr,J7e,RLr,PLr,fn,BLr,Y7e,ILr,NLr,K7e,qLr,jLr,Z7e,DLr,GLr,OLr,ce,bE,e9e,VLr,XLr,rY,zLr,WLr,QLr,vE,o9e,HLr,ULr,tY,JLr,YLr,KLr,FE,r9e,ZLr,eyr,aY,oyr,ryr,tyr,TE,t9e,ayr,nyr,nY,syr,lyr,iyr,ME,a9e,dyr,cyr,sY,fyr,myr,gyr,EE,n9e,hyr,pyr,lY,_yr,uyr,byr,CE,s9e,vyr,Fyr,iY,Tyr,Myr,Eyr,wE,l9e,Cyr,wyr,dY,Ayr,Lyr,yyr,AE,i9e,xyr,$yr,cY,kyr,Syr,Ryr,LE,d9e,Pyr,Byr,fY,Iyr,Nyr,qyr,yE,c9e,jyr,Dyr,mY,Gyr,Oyr,Vyr,xE,f9e,Xyr,zyr,gY,Wyr,Qyr,Hyr,$E,m9e,Uyr,Jyr,hY,Yyr,Kyr,Zyr,kE,g9e,e8r,o8r,pY,r8r,t8r,a8r,SE,h9e,n8r,s8r,_Y,l8r,i8r,d8r,RE,p9e,c8r,f8r,uY,m8r,g8r,h8r,PE,_9e,p8r,_8r,bY,u8r,b8r,v8r,BE,u9e,F8r,T8r,vY,M8r,E8r,C8r,IE,b9e,w8r,A8r,FY,L8r,y8r,x8r,NE,v9e,$8r,k8r,TY,S8r,R8r,P8r,qE,TGe,wc,jE,F9e,D8,B8r,T9e,I8r,MGe,dr,G8,N8r,Ac,q8r,MY,j8r,D8r,EY,G8r,O8r,V8r,O8,X8r,M9e,z8r,W8r,Q8r,jt,V8,H8r,E9e,U8r,J8r,Lc,Y8r,C9e,K8r,Z8r,CY,exr,oxr,rxr,DE,txr,Nr,X8,axr,w9e,nxr,sxr,mn,lxr,A9e,ixr,dxr,L9e,cxr,fxr,y9e,mxr,gxr,hxr,x9e,GE,$9e,pxr,_xr,wY,uxr,bxr,vxr,OE,EGe,yc,VE,k9e,z8,Fxr,S9e,Txr,CGe,cr,W8,Mxr,xc,Exr,AY,Cxr,wxr,LY,Axr,Lxr,yxr,Q8,xxr,R9e,$xr,kxr,Sxr,Dt,H8,Rxr,P9e,Pxr,Bxr,$c,Ixr,B9e,Nxr,qxr,yY,jxr,Dxr,Gxr,XE,Oxr,qr,U8,Vxr,I9e,Xxr,zxr,gn,Wxr,N9e,Qxr,Hxr,q9e,Uxr,Jxr,j9e,Yxr,Kxr,Zxr,D9e,zE,G9e,e$r,o$r,xY,r$r,t$r,a$r,WE,wGe,kc,QE,O9e,J8,n$r,V9e,s$r,AGe,fr,Y8,l$r,Sc,i$r,$Y,d$r,c$r,kY,f$r,m$r,g$r,K8,h$r,X9e,p$r,_$r,u$r,Gt,Z8,b$r,z9e,v$r,F$r,Rc,T$r,W9e,M$r,E$r,SY,C$r,w$r,A$r,HE,L$r,jr,ex,y$r,Q9e,x$r,$$r,hn,k$r,H9e,S$r,R$r,U9e,P$r,B$r,J9e,I$r,N$r,q$r,oe,UE,Y9e,j$r,D$r,RY,G$r,O$r,V$r,JE,K9e,X$r,z$r,PY,W$r,Q$r,H$r,YE,Z9e,U$r,J$r,BY,Y$r,K$r,Z$r,KE,eMe,ekr,okr,IY,rkr,tkr,akr,ZE,oMe,nkr,skr,NY,lkr,ikr,dkr,eC,rMe,ckr,fkr,qY,mkr,gkr,hkr,oC,tMe,pkr,_kr,jY,ukr,bkr,vkr,rC,aMe,Fkr,Tkr,DY,Mkr,Ekr,Ckr,tC,nMe,wkr,Akr,GY,Lkr,ykr,xkr,aC,sMe,$kr,kkr,OY,Skr,Rkr,Pkr,nC,lMe,Bkr,Ikr,VY,Nkr,qkr,jkr,sC,iMe,Dkr,Gkr,XY,Okr,Vkr,Xkr,lC,dMe,zkr,Wkr,zY,Qkr,Hkr,Ukr,iC,cMe,Jkr,Ykr,WY,Kkr,Zkr,eSr,dC,fMe,oSr,rSr,QY,tSr,aSr,nSr,cC,mMe,sSr,lSr,HY,iSr,dSr,cSr,fC,gMe,fSr,mSr,UY,gSr,hSr,pSr,mC,hMe,_Sr,uSr,JY,bSr,vSr,FSr,gC,pMe,TSr,MSr,YY,ESr,CSr,wSr,hC,_Me,ASr,LSr,KY,ySr,xSr,$Sr,pC,uMe,kSr,SSr,ZY,RSr,PSr,BSr,_C,bMe,ISr,NSr,eK,qSr,jSr,DSr,uC,vMe,GSr,OSr,oK,VSr,XSr,zSr,bC,FMe,WSr,QSr,rK,HSr,USr,JSr,vC,TMe,YSr,KSr,tK,ZSr,eRr,oRr,FC,MMe,rRr,tRr,aK,aRr,nRr,sRr,TC,EMe,lRr,iRr,nK,dRr,cRr,fRr,MC,LGe,Pc,EC,CMe,ox,mRr,wMe,gRr,yGe,mr,rx,hRr,Bc,pRr,sK,_Rr,uRr,lK,bRr,vRr,FRr,tx,TRr,AMe,MRr,ERr,CRr,Ot,ax,wRr,LMe,ARr,LRr,Ic,yRr,yMe,xRr,$Rr,iK,kRr,SRr,RRr,CC,PRr,Dr,nx,BRr,xMe,IRr,NRr,pn,qRr,$Me,jRr,DRr,kMe,GRr,ORr,SMe,VRr,XRr,zRr,xe,wC,RMe,WRr,QRr,dK,HRr,URr,JRr,AC,PMe,YRr,KRr,cK,ZRr,ePr,oPr,LC,BMe,rPr,tPr,fK,aPr,nPr,sPr,yC,IMe,lPr,iPr,mK,dPr,cPr,fPr,xC,NMe,mPr,gPr,gK,hPr,pPr,_Pr,$C,qMe,uPr,bPr,hK,vPr,FPr,TPr,kC,jMe,MPr,EPr,pK,CPr,wPr,APr,SC,DMe,LPr,yPr,_K,xPr,$Pr,kPr,RC,GMe,SPr,RPr,uK,PPr,BPr,IPr,PC,OMe,NPr,qPr,bK,jPr,DPr,GPr,BC,xGe,Nc,IC,VMe,sx,OPr,XMe,VPr,$Ge,gr,lx,XPr,qc,zPr,vK,WPr,QPr,FK,HPr,UPr,JPr,ix,YPr,zMe,KPr,ZPr,eBr,Vt,dx,oBr,WMe,rBr,tBr,jc,aBr,QMe,nBr,sBr,TK,lBr,iBr,dBr,NC,cBr,Gr,cx,fBr,HMe,mBr,gBr,_n,hBr,UMe,pBr,_Br,JMe,uBr,bBr,YMe,vBr,FBr,TBr,Ee,qC,KMe,MBr,EBr,MK,CBr,wBr,ABr,jC,ZMe,LBr,yBr,EK,xBr,$Br,kBr,DC,e4e,SBr,RBr,CK,PBr,BBr,IBr,GC,o4e,NBr,qBr,wK,jBr,DBr,GBr,OC,r4e,OBr,VBr,AK,XBr,zBr,WBr,VC,t4e,QBr,HBr,LK,UBr,JBr,YBr,XC,a4e,KBr,ZBr,yK,eIr,oIr,rIr,zC,n4e,tIr,aIr,xK,nIr,sIr,lIr,WC,s4e,iIr,dIr,$K,cIr,fIr,mIr,QC,l4e,gIr,hIr,kK,pIr,_Ir,uIr,HC,i4e,bIr,vIr,SK,FIr,TIr,MIr,UC,d4e,EIr,CIr,RK,wIr,AIr,LIr,JC,c4e,yIr,xIr,PK,$Ir,kIr,SIr,YC,kGe,Dc,KC,f4e,fx,RIr,m4e,PIr,SGe,hr,mx,BIr,Gc,IIr,BK,NIr,qIr,IK,jIr,DIr,GIr,gx,OIr,g4e,VIr,XIr,zIr,Xt,hx,WIr,h4e,QIr,HIr,Oc,UIr,p4e,JIr,YIr,NK,KIr,ZIr,eNr,ZC,oNr,Or,px,rNr,_4e,tNr,aNr,un,nNr,u4e,sNr,lNr,b4e,iNr,dNr,v4e,cNr,fNr,mNr,$e,e5,F4e,gNr,hNr,qK,pNr,_Nr,uNr,o5,T4e,bNr,vNr,jK,FNr,TNr,MNr,r5,M4e,ENr,CNr,DK,wNr,ANr,LNr,t5,E4e,yNr,xNr,GK,$Nr,kNr,SNr,a5,C4e,RNr,PNr,OK,BNr,INr,NNr,n5,w4e,qNr,jNr,VK,DNr,GNr,ONr,s5,A4e,VNr,XNr,XK,zNr,WNr,QNr,l5,L4e,HNr,UNr,zK,JNr,YNr,KNr,i5,y4e,ZNr,eqr,WK,oqr,rqr,tqr,d5,x4e,aqr,nqr,QK,sqr,lqr,iqr,c5,RGe,Vc,f5,$4e,_x,dqr,k4e,cqr,PGe,pr,ux,fqr,Xc,mqr,HK,gqr,hqr,UK,pqr,_qr,uqr,bx,bqr,S4e,vqr,Fqr,Tqr,zt,vx,Mqr,R4e,Eqr,Cqr,zc,wqr,P4e,Aqr,Lqr,JK,yqr,xqr,$qr,m5,kqr,Vr,Fx,Sqr,B4e,Rqr,Pqr,bn,Bqr,I4e,Iqr,Nqr,N4e,qqr,jqr,q4e,Dqr,Gqr,Oqr,ke,g5,j4e,Vqr,Xqr,YK,zqr,Wqr,Qqr,h5,D4e,Hqr,Uqr,KK,Jqr,Yqr,Kqr,p5,G4e,Zqr,ejr,ZK,ojr,rjr,tjr,_5,O4e,ajr,njr,eZ,sjr,ljr,ijr,u5,V4e,djr,cjr,oZ,fjr,mjr,gjr,b5,X4e,hjr,pjr,rZ,_jr,ujr,bjr,v5,z4e,vjr,Fjr,tZ,Tjr,Mjr,Ejr,F5,W4e,Cjr,wjr,aZ,Ajr,Ljr,yjr,T5,Q4e,xjr,$jr,nZ,kjr,Sjr,Rjr,M5,H4e,Pjr,Bjr,sZ,Ijr,Njr,qjr,E5,BGe,Wc,C5,U4e,Tx,jjr,J4e,Djr,IGe,_r,Mx,Gjr,Qc,Ojr,lZ,Vjr,Xjr,iZ,zjr,Wjr,Qjr,Ex,Hjr,Y4e,Ujr,Jjr,Yjr,Wt,Cx,Kjr,K4e,Zjr,eDr,Hc,oDr,Z4e,rDr,tDr,dZ,aDr,nDr,sDr,w5,lDr,Xr,wx,iDr,eEe,dDr,cDr,vn,fDr,oEe,mDr,gDr,rEe,hDr,pDr,tEe,_Dr,uDr,bDr,Se,A5,aEe,vDr,FDr,cZ,TDr,MDr,EDr,L5,nEe,CDr,wDr,fZ,ADr,LDr,yDr,y5,sEe,xDr,$Dr,mZ,kDr,SDr,RDr,x5,lEe,PDr,BDr,gZ,IDr,NDr,qDr,$5,iEe,jDr,DDr,hZ,GDr,ODr,VDr,k5,dEe,XDr,zDr,pZ,WDr,QDr,HDr,S5,cEe,UDr,JDr,_Z,YDr,KDr,ZDr,R5,fEe,eGr,oGr,uZ,rGr,tGr,aGr,P5,mEe,nGr,sGr,bZ,lGr,iGr,dGr,B5,gEe,cGr,fGr,vZ,mGr,gGr,hGr,I5,NGe,Uc,N5,hEe,Ax,pGr,pEe,_Gr,qGe,ur,Lx,uGr,Jc,bGr,FZ,vGr,FGr,TZ,TGr,MGr,EGr,yx,CGr,_Ee,wGr,AGr,LGr,Qt,xx,yGr,uEe,xGr,$Gr,Yc,kGr,bEe,SGr,RGr,MZ,PGr,BGr,IGr,q5,NGr,zr,$x,qGr,vEe,jGr,DGr,Fn,GGr,FEe,OGr,VGr,TEe,XGr,zGr,MEe,WGr,QGr,HGr,Re,j5,EEe,UGr,JGr,EZ,YGr,KGr,ZGr,D5,CEe,eOr,oOr,CZ,rOr,tOr,aOr,G5,wEe,nOr,sOr,wZ,lOr,iOr,dOr,O5,AEe,cOr,fOr,AZ,mOr,gOr,hOr,V5,LEe,pOr,_Or,LZ,uOr,bOr,vOr,X5,yEe,FOr,TOr,yZ,MOr,EOr,COr,z5,xEe,wOr,AOr,xZ,LOr,yOr,xOr,W5,$Ee,$Or,kOr,$Z,SOr,ROr,POr,Q5,kEe,BOr,IOr,kZ,NOr,qOr,jOr,H5,SEe,DOr,GOr,SZ,OOr,VOr,XOr,U5,jGe,Kc,J5,REe,kx,zOr,PEe,WOr,DGe,br,Sx,QOr,Zc,HOr,RZ,UOr,JOr,PZ,YOr,KOr,ZOr,Rx,eVr,BEe,oVr,rVr,tVr,Ht,Px,aVr,IEe,nVr,sVr,ef,lVr,NEe,iVr,dVr,BZ,cVr,fVr,mVr,Y5,gVr,Wr,Bx,hVr,qEe,pVr,_Vr,Tn,uVr,jEe,bVr,vVr,DEe,FVr,TVr,GEe,MVr,EVr,CVr,Ve,K5,OEe,wVr,AVr,IZ,LVr,yVr,xVr,Z5,VEe,$Vr,kVr,NZ,SVr,RVr,PVr,e3,XEe,BVr,IVr,qZ,NVr,qVr,jVr,o3,zEe,DVr,GVr,jZ,OVr,VVr,XVr,r3,WEe,zVr,WVr,DZ,QVr,HVr,UVr,t3,QEe,JVr,YVr,GZ,KVr,ZVr,eXr,a3,HEe,oXr,rXr,OZ,tXr,aXr,nXr,n3,UEe,sXr,lXr,VZ,iXr,dXr,cXr,s3,GGe,of,l3,JEe,Ix,fXr,YEe,mXr,OGe,vr,Nx,gXr,rf,hXr,XZ,pXr,_Xr,zZ,uXr,bXr,vXr,qx,FXr,KEe,TXr,MXr,EXr,Ut,jx,CXr,ZEe,wXr,AXr,tf,LXr,eCe,yXr,xXr,WZ,$Xr,kXr,SXr,i3,RXr,Qr,Dx,PXr,oCe,BXr,IXr,Mn,NXr,rCe,qXr,jXr,tCe,DXr,GXr,aCe,OXr,VXr,XXr,Xe,d3,nCe,zXr,WXr,QZ,QXr,HXr,UXr,c3,sCe,JXr,YXr,HZ,KXr,ZXr,ezr,f3,lCe,ozr,rzr,UZ,tzr,azr,nzr,m3,iCe,szr,lzr,JZ,izr,dzr,czr,g3,dCe,fzr,mzr,YZ,gzr,hzr,pzr,h3,cCe,_zr,uzr,KZ,bzr,vzr,Fzr,p3,fCe,Tzr,Mzr,ZZ,Ezr,Czr,wzr,_3,mCe,Azr,Lzr,eee,yzr,xzr,$zr,u3,VGe,af,b3,gCe,Gx,kzr,hCe,Szr,XGe,Fr,Ox,Rzr,nf,Pzr,oee,Bzr,Izr,ree,Nzr,qzr,jzr,Vx,Dzr,pCe,Gzr,Ozr,Vzr,Jt,Xx,Xzr,_Ce,zzr,Wzr,sf,Qzr,uCe,Hzr,Uzr,tee,Jzr,Yzr,Kzr,v3,Zzr,Hr,zx,eWr,bCe,oWr,rWr,En,tWr,vCe,aWr,nWr,FCe,sWr,lWr,TCe,iWr,dWr,cWr,MCe,F3,ECe,fWr,mWr,aee,gWr,hWr,pWr,T3,zGe,lf,M3,CCe,Wx,_Wr,wCe,uWr,WGe,Tr,Qx,bWr,df,vWr,nee,FWr,TWr,see,MWr,EWr,CWr,Hx,wWr,ACe,AWr,LWr,yWr,Yt,Ux,xWr,LCe,$Wr,kWr,cf,SWr,yCe,RWr,PWr,lee,BWr,IWr,NWr,E3,qWr,Ur,Jx,jWr,xCe,DWr,GWr,Cn,OWr,$Ce,VWr,XWr,kCe,zWr,WWr,SCe,QWr,HWr,UWr,Yx,C3,RCe,JWr,YWr,iee,KWr,ZWr,eQr,w3,PCe,oQr,rQr,dee,tQr,aQr,nQr,A3,QGe,ff,L3,BCe,Kx,sQr,ICe,lQr,HGe,Mr,Zx,iQr,mf,dQr,cee,cQr,fQr,fee,mQr,gQr,hQr,e$,pQr,NCe,_Qr,uQr,bQr,Kt,o$,vQr,qCe,FQr,TQr,gf,MQr,jCe,EQr,CQr,mee,wQr,AQr,LQr,y3,yQr,Jr,r$,xQr,DCe,$Qr,kQr,wn,SQr,GCe,RQr,PQr,OCe,BQr,IQr,VCe,NQr,qQr,jQr,XCe,x3,zCe,DQr,GQr,gee,OQr,VQr,XQr,$3,UGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Kw=new te({}),Zw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new zQr({props:{warning:!0,$$slots:{default:[CBt]},$$scope:{ctx:x}}}),eA=new te({}),oA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L594"}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L617"}}),xg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),nA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L740"}}),sA=new te({}),lA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L398"}}),cA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L412"}}),fh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),fA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L611"}}),mA=new te({}),gA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),zh=new zQr({props:{$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Wh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),uA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),bA=new te({}),vA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L88"}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L102"}}),mp=new zQr({props:{$$slots:{default:[xBt]},$$scope:{ctx:x}}}),gp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),EA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L255"}}),CA=new te({}),wA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L747"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_p=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),xA=new te({}),$A=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L754"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),PA=new te({}),BA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L769"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),jA=new te({}),DA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L776"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),XA=new te({}),zA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L783"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),UA=new te({}),JA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L792"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L826"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L833"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L819"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),pL=new te({}),_L=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L801"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),FL=new te({}),TL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L808"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[KBt]},$$scope:{ctx:x}}}),wL=new te({}),AL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L842"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ZBt]},$$scope:{ctx:x}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eIt]},$$scope:{ctx:x}}}),$L=new te({}),kL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L881"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[oIt]},$$scope:{ctx:x}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rIt]},$$scope:{ctx:x}}}),BL=new te({}),IL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L888"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[tIt]},$$scope:{ctx:x}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[aIt]},$$scope:{ctx:x}}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L911"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[nIt]},$$scope:{ctx:x}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[sIt]},$$scope:{ctx:x}}}),zL=new te({}),WL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L895"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[lIt]},$$scope:{ctx:x}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[iIt]},$$scope:{ctx:x}}}),JL=new te({}),YL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L902"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[dIt]},$$scope:{ctx:x}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[cIt]},$$scope:{ctx:x}}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L920"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[fIt]},$$scope:{ctx:x}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[mIt]},$$scope:{ctx:x}}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L927"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[gIt]},$$scope:{ctx:x}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[hIt]},$$scope:{ctx:x}}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L874"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[pIt]},$$scope:{ctx:x}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_It]},$$scope:{ctx:x}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L849"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[uIt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[bIt]},$$scope:{ctx:x}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L856"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[vIt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[FIt]},$$scope:{ctx:x}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L865"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[TIt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[MIt]},$$scope:{ctx:x}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[EIt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[CIt]},$$scope:{ctx:x}}}),qy=new te({}),jy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[wIt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[AIt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[LIt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yIt]},$$scope:{ctx:x}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[xIt]},$$scope:{ctx:x}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$It]},$$scope:{ctx:x}}}),Zy=new te({}),e8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[kIt]},$$scope:{ctx:x}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SIt]},$$scope:{ctx:x}}}),a8=new te({}),n8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RIt]},$$scope:{ctx:x}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PIt]},$$scope:{ctx:x}}}),d8=new te({}),c8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BIt]},$$scope:{ctx:x}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IIt]},$$scope:{ctx:x}}}),h8=new te({}),p8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[NIt]},$$scope:{ctx:x}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qIt]},$$scope:{ctx:x}}}),v8=new te({}),F8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jIt]},$$scope:{ctx:x}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DIt]},$$scope:{ctx:x}}}),w8=new te({}),A8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[GIt]},$$scope:{ctx:x}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[OIt]},$$scope:{ctx:x}}}),$8=new te({}),k8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[VIt]},$$scope:{ctx:x}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XIt]},$$scope:{ctx:x}}}),B8=new te({}),I8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zIt]},$$scope:{ctx:x}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WIt]},$$scope:{ctx:x}}}),D8=new te({}),G8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[QIt]},$$scope:{ctx:x}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[HIt]},$$scope:{ctx:x}}}),z8=new te({}),W8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[UIt]},$$scope:{ctx:x}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[JIt]},$$scope:{ctx:x}}}),J8=new te({}),Y8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[YIt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[KIt]},$$scope:{ctx:x}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ZIt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[eNt]},$$scope:{ctx:x}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[oNt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rNt]},$$scope:{ctx:x}}}),fx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[tNt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aNt]},$$scope:{ctx:x}}}),_x=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nNt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sNt]},$$scope:{ctx:x}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[lNt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iNt]},$$scope:{ctx:x}}}),Ax=new te({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dNt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cNt]},$$scope:{ctx:x}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[fNt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mNt]},$$scope:{ctx:x}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gNt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hNt]},$$scope:{ctx:x}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pNt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_Nt]},$$scope:{ctx:x}}}),Wx=new te({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[uNt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bNt]},$$scope:{ctx:x}}}),Kx=new te({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[vNt]},$$scope:{ctx:x}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FNt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),Hw=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),Uw=o("AutoConfig"),yn=o(", "),xn=a("a"),Jw=o("AutoModel"),ui=o(`, and
`),$n=a("a"),Yw=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),bk=o("will create a model that is an instance of "),vi=a("a"),vk=o("BertModel"),Fk=o("."),Eo=l(),wa=a("p"),Tk=o("There is one class of "),Ff=a("code"),Mk=o("AutoModel"),tXe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Wje=l(),Fi=a("h2"),Tf=a("a"),sre=a("span"),F(Kw.$$.fragment),aXe=l(),lre=a("span"),nXe=o("Extending the Auto Classes"),Qje=l(),kn=a("p"),sXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ire=a("code"),lXe=o("NewModel"),iXe=o(", make sure you have a "),dre=a("code"),dXe=o("NewModelConfig"),cXe=o(` then you can add those to the auto
classes like this:`),Hje=l(),F(Zw.$$.fragment),Uje=l(),Ek=a("p"),fXe=o("You will then be able to use the auto classes like you would usually do!"),Jje=l(),F(Mf.$$.fragment),Yje=l(),Ti=a("h2"),Ef=a("a"),cre=a("span"),F(eA.$$.fragment),mXe=l(),fre=a("span"),gXe=o("AutoConfig"),Kje=l(),Co=a("div"),F(oA.$$.fragment),hXe=l(),rA=a("p"),pXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ck=a("a"),_Xe=o("from_pretrained()"),uXe=o(" class method."),bXe=l(),tA=a("p"),vXe=o("This class cannot be instantiated directly using "),mre=a("code"),FXe=o("__init__()"),TXe=o(" (throws an error)."),MXe=l(),Er=a("div"),F(aA.$$.fragment),EXe=l(),gre=a("p"),CXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),wXe=l(),Mi=a("p"),AXe=o("The configuration class to instantiate is selected based on the "),hre=a("code"),LXe=o("model_type"),yXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pre=a("code"),xXe=o("pretrained_model_name_or_path"),$Xe=o(":"),kXe=l(),A=a("ul"),Cf=a("li"),_re=a("strong"),SXe=o("albert"),RXe=o(" \u2014 "),wk=a("a"),PXe=o("AlbertConfig"),BXe=o(" (ALBERT model)"),IXe=l(),wf=a("li"),ure=a("strong"),NXe=o("bart"),qXe=o(" \u2014 "),Ak=a("a"),jXe=o("BartConfig"),DXe=o(" (BART model)"),GXe=l(),Af=a("li"),bre=a("strong"),OXe=o("beit"),VXe=o(" \u2014 "),Lk=a("a"),XXe=o("BeitConfig"),zXe=o(" (BEiT model)"),WXe=l(),Lf=a("li"),vre=a("strong"),QXe=o("bert"),HXe=o(" \u2014 "),yk=a("a"),UXe=o("BertConfig"),JXe=o(" (BERT model)"),YXe=l(),yf=a("li"),Fre=a("strong"),KXe=o("bert-generation"),ZXe=o(" \u2014 "),xk=a("a"),eze=o("BertGenerationConfig"),oze=o(" (Bert Generation model)"),rze=l(),xf=a("li"),Tre=a("strong"),tze=o("big_bird"),aze=o(" \u2014 "),$k=a("a"),nze=o("BigBirdConfig"),sze=o(" (BigBird model)"),lze=l(),$f=a("li"),Mre=a("strong"),ize=o("bigbird_pegasus"),dze=o(" \u2014 "),kk=a("a"),cze=o("BigBirdPegasusConfig"),fze=o(" (BigBird-Pegasus model)"),mze=l(),kf=a("li"),Ere=a("strong"),gze=o("blenderbot"),hze=o(" \u2014 "),Sk=a("a"),pze=o("BlenderbotConfig"),_ze=o(" (Blenderbot model)"),uze=l(),Sf=a("li"),Cre=a("strong"),bze=o("blenderbot-small"),vze=o(" \u2014 "),Rk=a("a"),Fze=o("BlenderbotSmallConfig"),Tze=o(" (BlenderbotSmall model)"),Mze=l(),Rf=a("li"),wre=a("strong"),Eze=o("bloom"),Cze=o(" \u2014 "),Pk=a("a"),wze=o("BloomConfig"),Aze=o(" (BLOOM model)"),Lze=l(),Pf=a("li"),Are=a("strong"),yze=o("camembert"),xze=o(" \u2014 "),Bk=a("a"),$ze=o("CamembertConfig"),kze=o(" (CamemBERT model)"),Sze=l(),Bf=a("li"),Lre=a("strong"),Rze=o("canine"),Pze=o(" \u2014 "),Ik=a("a"),Bze=o("CanineConfig"),Ize=o(" (CANINE model)"),Nze=l(),If=a("li"),yre=a("strong"),qze=o("clip"),jze=o(" \u2014 "),Nk=a("a"),Dze=o("CLIPConfig"),Gze=o(" (CLIP model)"),Oze=l(),Nf=a("li"),xre=a("strong"),Vze=o("convbert"),Xze=o(" \u2014 "),qk=a("a"),zze=o("ConvBertConfig"),Wze=o(" (ConvBERT model)"),Qze=l(),qf=a("li"),$re=a("strong"),Hze=o("convnext"),Uze=o(" \u2014 "),jk=a("a"),Jze=o("ConvNextConfig"),Yze=o(" (ConvNeXT model)"),Kze=l(),jf=a("li"),kre=a("strong"),Zze=o("ctrl"),eWe=o(" \u2014 "),Dk=a("a"),oWe=o("CTRLConfig"),rWe=o(" (CTRL model)"),tWe=l(),Df=a("li"),Sre=a("strong"),aWe=o("cvt"),nWe=o(" \u2014 "),Gk=a("a"),sWe=o("CvtConfig"),lWe=o(" (CvT model)"),iWe=l(),Gf=a("li"),Rre=a("strong"),dWe=o("data2vec-audio"),cWe=o(" \u2014 "),Ok=a("a"),fWe=o("Data2VecAudioConfig"),mWe=o(" (Data2VecAudio model)"),gWe=l(),Of=a("li"),Pre=a("strong"),hWe=o("data2vec-text"),pWe=o(" \u2014 "),Vk=a("a"),_We=o("Data2VecTextConfig"),uWe=o(" (Data2VecText model)"),bWe=l(),Vf=a("li"),Bre=a("strong"),vWe=o("data2vec-vision"),FWe=o(" \u2014 "),Xk=a("a"),TWe=o("Data2VecVisionConfig"),MWe=o(" (Data2VecVision model)"),EWe=l(),Xf=a("li"),Ire=a("strong"),CWe=o("deberta"),wWe=o(" \u2014 "),zk=a("a"),AWe=o("DebertaConfig"),LWe=o(" (DeBERTa model)"),yWe=l(),zf=a("li"),Nre=a("strong"),xWe=o("deberta-v2"),$We=o(" \u2014 "),Wk=a("a"),kWe=o("DebertaV2Config"),SWe=o(" (DeBERTa-v2 model)"),RWe=l(),Wf=a("li"),qre=a("strong"),PWe=o("decision_transformer"),BWe=o(" \u2014 "),Qk=a("a"),IWe=o("DecisionTransformerConfig"),NWe=o(" (Decision Transformer model)"),qWe=l(),Qf=a("li"),jre=a("strong"),jWe=o("deit"),DWe=o(" \u2014 "),Hk=a("a"),GWe=o("DeiTConfig"),OWe=o(" (DeiT model)"),VWe=l(),Hf=a("li"),Dre=a("strong"),XWe=o("detr"),zWe=o(" \u2014 "),Uk=a("a"),WWe=o("DetrConfig"),QWe=o(" (DETR model)"),HWe=l(),Uf=a("li"),Gre=a("strong"),UWe=o("distilbert"),JWe=o(" \u2014 "),Jk=a("a"),YWe=o("DistilBertConfig"),KWe=o(" (DistilBERT model)"),ZWe=l(),Jf=a("li"),Ore=a("strong"),eQe=o("dpr"),oQe=o(" \u2014 "),Yk=a("a"),rQe=o("DPRConfig"),tQe=o(" (DPR model)"),aQe=l(),Yf=a("li"),Vre=a("strong"),nQe=o("dpt"),sQe=o(" \u2014 "),Kk=a("a"),lQe=o("DPTConfig"),iQe=o(" (DPT model)"),dQe=l(),Kf=a("li"),Xre=a("strong"),cQe=o("electra"),fQe=o(" \u2014 "),Zk=a("a"),mQe=o("ElectraConfig"),gQe=o(" (ELECTRA model)"),hQe=l(),Zf=a("li"),zre=a("strong"),pQe=o("encoder-decoder"),_Qe=o(" \u2014 "),eS=a("a"),uQe=o("EncoderDecoderConfig"),bQe=o(" (Encoder decoder model)"),vQe=l(),em=a("li"),Wre=a("strong"),FQe=o("flaubert"),TQe=o(" \u2014 "),oS=a("a"),MQe=o("FlaubertConfig"),EQe=o(" (FlauBERT model)"),CQe=l(),om=a("li"),Qre=a("strong"),wQe=o("flava"),AQe=o(" \u2014 "),rS=a("a"),LQe=o("FlavaConfig"),yQe=o(" (FLAVA model)"),xQe=l(),rm=a("li"),Hre=a("strong"),$Qe=o("fnet"),kQe=o(" \u2014 "),tS=a("a"),SQe=o("FNetConfig"),RQe=o(" (FNet model)"),PQe=l(),tm=a("li"),Ure=a("strong"),BQe=o("fsmt"),IQe=o(" \u2014 "),aS=a("a"),NQe=o("FSMTConfig"),qQe=o(" (FairSeq Machine-Translation model)"),jQe=l(),am=a("li"),Jre=a("strong"),DQe=o("funnel"),GQe=o(" \u2014 "),nS=a("a"),OQe=o("FunnelConfig"),VQe=o(" (Funnel Transformer model)"),XQe=l(),nm=a("li"),Yre=a("strong"),zQe=o("glpn"),WQe=o(" \u2014 "),sS=a("a"),QQe=o("GLPNConfig"),HQe=o(" (GLPN model)"),UQe=l(),sm=a("li"),Kre=a("strong"),JQe=o("gpt2"),YQe=o(" \u2014 "),lS=a("a"),KQe=o("GPT2Config"),ZQe=o(" (OpenAI GPT-2 model)"),eHe=l(),lm=a("li"),Zre=a("strong"),oHe=o("gpt_neo"),rHe=o(" \u2014 "),iS=a("a"),tHe=o("GPTNeoConfig"),aHe=o(" (GPT Neo model)"),nHe=l(),im=a("li"),ete=a("strong"),sHe=o("gpt_neox"),lHe=o(" \u2014 "),dS=a("a"),iHe=o("GPTNeoXConfig"),dHe=o(" (GPT NeoX model)"),cHe=l(),dm=a("li"),ote=a("strong"),fHe=o("gptj"),mHe=o(" \u2014 "),cS=a("a"),gHe=o("GPTJConfig"),hHe=o(" (GPT-J model)"),pHe=l(),cm=a("li"),rte=a("strong"),_He=o("hubert"),uHe=o(" \u2014 "),fS=a("a"),bHe=o("HubertConfig"),vHe=o(" (Hubert model)"),FHe=l(),fm=a("li"),tte=a("strong"),THe=o("ibert"),MHe=o(" \u2014 "),mS=a("a"),EHe=o("IBertConfig"),CHe=o(" (I-BERT model)"),wHe=l(),mm=a("li"),ate=a("strong"),AHe=o("imagegpt"),LHe=o(" \u2014 "),gS=a("a"),yHe=o("ImageGPTConfig"),xHe=o(" (ImageGPT model)"),$He=l(),gm=a("li"),nte=a("strong"),kHe=o("layoutlm"),SHe=o(" \u2014 "),hS=a("a"),RHe=o("LayoutLMConfig"),PHe=o(" (LayoutLM model)"),BHe=l(),hm=a("li"),ste=a("strong"),IHe=o("layoutlmv2"),NHe=o(" \u2014 "),pS=a("a"),qHe=o("LayoutLMv2Config"),jHe=o(" (LayoutLMv2 model)"),DHe=l(),pm=a("li"),lte=a("strong"),GHe=o("layoutlmv3"),OHe=o(" \u2014 "),_S=a("a"),VHe=o("LayoutLMv3Config"),XHe=o(" (LayoutLMv3 model)"),zHe=l(),_m=a("li"),ite=a("strong"),WHe=o("led"),QHe=o(" \u2014 "),uS=a("a"),HHe=o("LEDConfig"),UHe=o(" (LED model)"),JHe=l(),um=a("li"),dte=a("strong"),YHe=o("levit"),KHe=o(" \u2014 "),bS=a("a"),ZHe=o("LevitConfig"),eUe=o(" (LeViT model)"),oUe=l(),bm=a("li"),cte=a("strong"),rUe=o("longformer"),tUe=o(" \u2014 "),vS=a("a"),aUe=o("LongformerConfig"),nUe=o(" (Longformer model)"),sUe=l(),vm=a("li"),fte=a("strong"),lUe=o("longt5"),iUe=o(" \u2014 "),FS=a("a"),dUe=o("LongT5Config"),cUe=o(" (LongT5 model)"),fUe=l(),Fm=a("li"),mte=a("strong"),mUe=o("luke"),gUe=o(" \u2014 "),TS=a("a"),hUe=o("LukeConfig"),pUe=o(" (LUKE model)"),_Ue=l(),Tm=a("li"),gte=a("strong"),uUe=o("lxmert"),bUe=o(" \u2014 "),MS=a("a"),vUe=o("LxmertConfig"),FUe=o(" (LXMERT model)"),TUe=l(),Mm=a("li"),hte=a("strong"),MUe=o("m2m_100"),EUe=o(" \u2014 "),ES=a("a"),CUe=o("M2M100Config"),wUe=o(" (M2M100 model)"),AUe=l(),Em=a("li"),pte=a("strong"),LUe=o("marian"),yUe=o(" \u2014 "),CS=a("a"),xUe=o("MarianConfig"),$Ue=o(" (Marian model)"),kUe=l(),Cm=a("li"),_te=a("strong"),SUe=o("maskformer"),RUe=o(" \u2014 "),wS=a("a"),PUe=o("MaskFormerConfig"),BUe=o(" (MaskFormer model)"),IUe=l(),wm=a("li"),ute=a("strong"),NUe=o("mbart"),qUe=o(" \u2014 "),AS=a("a"),jUe=o("MBartConfig"),DUe=o(" (mBART model)"),GUe=l(),Am=a("li"),bte=a("strong"),OUe=o("mctct"),VUe=o(" \u2014 "),LS=a("a"),XUe=o("MCTCTConfig"),zUe=o(" (M-CTC-T model)"),WUe=l(),Lm=a("li"),vte=a("strong"),QUe=o("megatron-bert"),HUe=o(" \u2014 "),yS=a("a"),UUe=o("MegatronBertConfig"),JUe=o(" (Megatron-BERT model)"),YUe=l(),ym=a("li"),Fte=a("strong"),KUe=o("mobilebert"),ZUe=o(" \u2014 "),xS=a("a"),eJe=o("MobileBertConfig"),oJe=o(" (MobileBERT model)"),rJe=l(),xm=a("li"),Tte=a("strong"),tJe=o("mpnet"),aJe=o(" \u2014 "),$S=a("a"),nJe=o("MPNetConfig"),sJe=o(" (MPNet model)"),lJe=l(),$m=a("li"),Mte=a("strong"),iJe=o("mt5"),dJe=o(" \u2014 "),kS=a("a"),cJe=o("MT5Config"),fJe=o(" (MT5 model)"),mJe=l(),km=a("li"),Ete=a("strong"),gJe=o("nystromformer"),hJe=o(" \u2014 "),SS=a("a"),pJe=o("NystromformerConfig"),_Je=o(" (Nystr\xF6mformer model)"),uJe=l(),Sm=a("li"),Cte=a("strong"),bJe=o("openai-gpt"),vJe=o(" \u2014 "),RS=a("a"),FJe=o("OpenAIGPTConfig"),TJe=o(" (OpenAI GPT model)"),MJe=l(),Rm=a("li"),wte=a("strong"),EJe=o("opt"),CJe=o(" \u2014 "),PS=a("a"),wJe=o("OPTConfig"),AJe=o(" (OPT model)"),LJe=l(),Pm=a("li"),Ate=a("strong"),yJe=o("pegasus"),xJe=o(" \u2014 "),BS=a("a"),$Je=o("PegasusConfig"),kJe=o(" (Pegasus model)"),SJe=l(),Bm=a("li"),Lte=a("strong"),RJe=o("perceiver"),PJe=o(" \u2014 "),IS=a("a"),BJe=o("PerceiverConfig"),IJe=o(" (Perceiver model)"),NJe=l(),Im=a("li"),yte=a("strong"),qJe=o("plbart"),jJe=o(" \u2014 "),NS=a("a"),DJe=o("PLBartConfig"),GJe=o(" (PLBart model)"),OJe=l(),Nm=a("li"),xte=a("strong"),VJe=o("poolformer"),XJe=o(" \u2014 "),qS=a("a"),zJe=o("PoolFormerConfig"),WJe=o(" (PoolFormer model)"),QJe=l(),qm=a("li"),$te=a("strong"),HJe=o("prophetnet"),UJe=o(" \u2014 "),jS=a("a"),JJe=o("ProphetNetConfig"),YJe=o(" (ProphetNet model)"),KJe=l(),jm=a("li"),kte=a("strong"),ZJe=o("qdqbert"),eYe=o(" \u2014 "),DS=a("a"),oYe=o("QDQBertConfig"),rYe=o(" (QDQBert model)"),tYe=l(),Dm=a("li"),Ste=a("strong"),aYe=o("rag"),nYe=o(" \u2014 "),GS=a("a"),sYe=o("RagConfig"),lYe=o(" (RAG model)"),iYe=l(),Gm=a("li"),Rte=a("strong"),dYe=o("realm"),cYe=o(" \u2014 "),OS=a("a"),fYe=o("RealmConfig"),mYe=o(" (REALM model)"),gYe=l(),Om=a("li"),Pte=a("strong"),hYe=o("reformer"),pYe=o(" \u2014 "),VS=a("a"),_Ye=o("ReformerConfig"),uYe=o(" (Reformer model)"),bYe=l(),Vm=a("li"),Bte=a("strong"),vYe=o("regnet"),FYe=o(" \u2014 "),XS=a("a"),TYe=o("RegNetConfig"),MYe=o(" (RegNet model)"),EYe=l(),Xm=a("li"),Ite=a("strong"),CYe=o("rembert"),wYe=o(" \u2014 "),zS=a("a"),AYe=o("RemBertConfig"),LYe=o(" (RemBERT model)"),yYe=l(),zm=a("li"),Nte=a("strong"),xYe=o("resnet"),$Ye=o(" \u2014 "),WS=a("a"),kYe=o("ResNetConfig"),SYe=o(" (ResNet model)"),RYe=l(),Wm=a("li"),qte=a("strong"),PYe=o("retribert"),BYe=o(" \u2014 "),QS=a("a"),IYe=o("RetriBertConfig"),NYe=o(" (RetriBERT model)"),qYe=l(),Qm=a("li"),jte=a("strong"),jYe=o("roberta"),DYe=o(" \u2014 "),HS=a("a"),GYe=o("RobertaConfig"),OYe=o(" (RoBERTa model)"),VYe=l(),Hm=a("li"),Dte=a("strong"),XYe=o("roformer"),zYe=o(" \u2014 "),US=a("a"),WYe=o("RoFormerConfig"),QYe=o(" (RoFormer model)"),HYe=l(),Um=a("li"),Gte=a("strong"),UYe=o("segformer"),JYe=o(" \u2014 "),JS=a("a"),YYe=o("SegformerConfig"),KYe=o(" (SegFormer model)"),ZYe=l(),Jm=a("li"),Ote=a("strong"),eKe=o("sew"),oKe=o(" \u2014 "),YS=a("a"),rKe=o("SEWConfig"),tKe=o(" (SEW model)"),aKe=l(),Ym=a("li"),Vte=a("strong"),nKe=o("sew-d"),sKe=o(" \u2014 "),KS=a("a"),lKe=o("SEWDConfig"),iKe=o(" (SEW-D model)"),dKe=l(),Km=a("li"),Xte=a("strong"),cKe=o("speech-encoder-decoder"),fKe=o(" \u2014 "),ZS=a("a"),mKe=o("SpeechEncoderDecoderConfig"),gKe=o(" (Speech Encoder decoder model)"),hKe=l(),Zm=a("li"),zte=a("strong"),pKe=o("speech_to_text"),_Ke=o(" \u2014 "),eR=a("a"),uKe=o("Speech2TextConfig"),bKe=o(" (Speech2Text model)"),vKe=l(),eg=a("li"),Wte=a("strong"),FKe=o("speech_to_text_2"),TKe=o(" \u2014 "),oR=a("a"),MKe=o("Speech2Text2Config"),EKe=o(" (Speech2Text2 model)"),CKe=l(),og=a("li"),Qte=a("strong"),wKe=o("splinter"),AKe=o(" \u2014 "),rR=a("a"),LKe=o("SplinterConfig"),yKe=o(" (Splinter model)"),xKe=l(),rg=a("li"),Hte=a("strong"),$Ke=o("squeezebert"),kKe=o(" \u2014 "),tR=a("a"),SKe=o("SqueezeBertConfig"),RKe=o(" (SqueezeBERT model)"),PKe=l(),tg=a("li"),Ute=a("strong"),BKe=o("swin"),IKe=o(" \u2014 "),aR=a("a"),NKe=o("SwinConfig"),qKe=o(" (Swin Transformer model)"),jKe=l(),ag=a("li"),Jte=a("strong"),DKe=o("t5"),GKe=o(" \u2014 "),nR=a("a"),OKe=o("T5Config"),VKe=o(" (T5 model)"),XKe=l(),ng=a("li"),Yte=a("strong"),zKe=o("tapas"),WKe=o(" \u2014 "),sR=a("a"),QKe=o("TapasConfig"),HKe=o(" (TAPAS model)"),UKe=l(),sg=a("li"),Kte=a("strong"),JKe=o("trajectory_transformer"),YKe=o(" \u2014 "),lR=a("a"),KKe=o("TrajectoryTransformerConfig"),ZKe=o(" (Trajectory Transformer model)"),eZe=l(),lg=a("li"),Zte=a("strong"),oZe=o("transfo-xl"),rZe=o(" \u2014 "),iR=a("a"),tZe=o("TransfoXLConfig"),aZe=o(" (Transformer-XL model)"),nZe=l(),ig=a("li"),eae=a("strong"),sZe=o("trocr"),lZe=o(" \u2014 "),dR=a("a"),iZe=o("TrOCRConfig"),dZe=o(" (TrOCR model)"),cZe=l(),dg=a("li"),oae=a("strong"),fZe=o("unispeech"),mZe=o(" \u2014 "),cR=a("a"),gZe=o("UniSpeechConfig"),hZe=o(" (UniSpeech model)"),pZe=l(),cg=a("li"),rae=a("strong"),_Ze=o("unispeech-sat"),uZe=o(" \u2014 "),fR=a("a"),bZe=o("UniSpeechSatConfig"),vZe=o(" (UniSpeechSat model)"),FZe=l(),fg=a("li"),tae=a("strong"),TZe=o("van"),MZe=o(" \u2014 "),mR=a("a"),EZe=o("VanConfig"),CZe=o(" (VAN model)"),wZe=l(),mg=a("li"),aae=a("strong"),AZe=o("vilt"),LZe=o(" \u2014 "),gR=a("a"),yZe=o("ViltConfig"),xZe=o(" (ViLT model)"),$Ze=l(),gg=a("li"),nae=a("strong"),kZe=o("vision-encoder-decoder"),SZe=o(" \u2014 "),hR=a("a"),RZe=o("VisionEncoderDecoderConfig"),PZe=o(" (Vision Encoder decoder model)"),BZe=l(),hg=a("li"),sae=a("strong"),IZe=o("vision-text-dual-encoder"),NZe=o(" \u2014 "),pR=a("a"),qZe=o("VisionTextDualEncoderConfig"),jZe=o(" (VisionTextDualEncoder model)"),DZe=l(),pg=a("li"),lae=a("strong"),GZe=o("visual_bert"),OZe=o(" \u2014 "),_R=a("a"),VZe=o("VisualBertConfig"),XZe=o(" (VisualBERT model)"),zZe=l(),_g=a("li"),iae=a("strong"),WZe=o("vit"),QZe=o(" \u2014 "),uR=a("a"),HZe=o("ViTConfig"),UZe=o(" (ViT model)"),JZe=l(),ug=a("li"),dae=a("strong"),YZe=o("vit_mae"),KZe=o(" \u2014 "),bR=a("a"),ZZe=o("ViTMAEConfig"),eeo=o(" (ViTMAE model)"),oeo=l(),bg=a("li"),cae=a("strong"),reo=o("wav2vec2"),teo=o(" \u2014 "),vR=a("a"),aeo=o("Wav2Vec2Config"),neo=o(" (Wav2Vec2 model)"),seo=l(),vg=a("li"),fae=a("strong"),leo=o("wav2vec2-conformer"),ieo=o(" \u2014 "),FR=a("a"),deo=o("Wav2Vec2ConformerConfig"),ceo=o(" (Wav2Vec2-Conformer model)"),feo=l(),Fg=a("li"),mae=a("strong"),meo=o("wavlm"),geo=o(" \u2014 "),TR=a("a"),heo=o("WavLMConfig"),peo=o(" (WavLM model)"),_eo=l(),Tg=a("li"),gae=a("strong"),ueo=o("xglm"),beo=o(" \u2014 "),MR=a("a"),veo=o("XGLMConfig"),Feo=o(" (XGLM model)"),Teo=l(),Mg=a("li"),hae=a("strong"),Meo=o("xlm"),Eeo=o(" \u2014 "),ER=a("a"),Ceo=o("XLMConfig"),weo=o(" (XLM model)"),Aeo=l(),Eg=a("li"),pae=a("strong"),Leo=o("xlm-prophetnet"),yeo=o(" \u2014 "),CR=a("a"),xeo=o("XLMProphetNetConfig"),$eo=o(" (XLM-ProphetNet model)"),keo=l(),Cg=a("li"),_ae=a("strong"),Seo=o("xlm-roberta"),Reo=o(" \u2014 "),wR=a("a"),Peo=o("XLMRobertaConfig"),Beo=o(" (XLM-RoBERTa model)"),Ieo=l(),wg=a("li"),uae=a("strong"),Neo=o("xlm-roberta-xl"),qeo=o(" \u2014 "),AR=a("a"),jeo=o("XLMRobertaXLConfig"),Deo=o(" (XLM-RoBERTa-XL model)"),Geo=l(),Ag=a("li"),bae=a("strong"),Oeo=o("xlnet"),Veo=o(" \u2014 "),LR=a("a"),Xeo=o("XLNetConfig"),zeo=o(" (XLNet model)"),Weo=l(),Lg=a("li"),vae=a("strong"),Qeo=o("yolos"),Heo=o(" \u2014 "),yR=a("a"),Ueo=o("YolosConfig"),Jeo=o(" (YOLOS model)"),Yeo=l(),yg=a("li"),Fae=a("strong"),Keo=o("yoso"),Zeo=o(" \u2014 "),xR=a("a"),eoo=o("YosoConfig"),ooo=o(" (YOSO model)"),roo=l(),F(xg.$$.fragment),too=l(),$g=a("div"),F(nA.$$.fragment),aoo=l(),Tae=a("p"),noo=o("Register a new configuration for this class."),Zje=l(),Ei=a("h2"),kg=a("a"),Mae=a("span"),F(sA.$$.fragment),soo=l(),Eae=a("span"),loo=o("AutoTokenizer"),eDe=l(),wo=a("div"),F(lA.$$.fragment),ioo=l(),iA=a("p"),doo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$R=a("a"),coo=o("AutoTokenizer.from_pretrained()"),foo=o(" class method."),moo=l(),dA=a("p"),goo=o("This class cannot be instantiated directly using "),Cae=a("code"),hoo=o("__init__()"),poo=o(" (throws an error)."),_oo=l(),Cr=a("div"),F(cA.$$.fragment),uoo=l(),wae=a("p"),boo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),voo=l(),Aa=a("p"),Foo=o("The tokenizer class to instantiate is selected based on the "),Aae=a("code"),Too=o("model_type"),Moo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Eoo=o("pretrained_model_name_or_path"),Coo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=a("code"),woo=o("pretrained_model_name_or_path"),Aoo=o(":"),Loo=l(),k=a("ul"),Sn=a("li"),xae=a("strong"),yoo=o("albert"),xoo=o(" \u2014 "),kR=a("a"),$oo=o("AlbertTokenizer"),koo=o(" or "),SR=a("a"),Soo=o("AlbertTokenizerFast"),Roo=o(" (ALBERT model)"),Poo=l(),Rn=a("li"),$ae=a("strong"),Boo=o("bart"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("BartTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("BartTokenizerFast"),Doo=o(" (BART model)"),Goo=l(),Pn=a("li"),kae=a("strong"),Ooo=o("barthez"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("BarthezTokenizer"),zoo=o(" or "),IR=a("a"),Woo=o("BarthezTokenizerFast"),Qoo=o(" (BARThez model)"),Hoo=l(),Sg=a("li"),Sae=a("strong"),Uoo=o("bartpho"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("BartphoTokenizer"),Koo=o(" (BARTpho model)"),Zoo=l(),Bn=a("li"),Rae=a("strong"),ero=o("bert"),oro=o(" \u2014 "),qR=a("a"),rro=o("BertTokenizer"),tro=o(" or "),jR=a("a"),aro=o("BertTokenizerFast"),nro=o(" (BERT model)"),sro=l(),Rg=a("li"),Pae=a("strong"),lro=o("bert-generation"),iro=o(" \u2014 "),DR=a("a"),dro=o("BertGenerationTokenizer"),cro=o(" (Bert Generation model)"),fro=l(),Pg=a("li"),Bae=a("strong"),mro=o("bert-japanese"),gro=o(" \u2014 "),GR=a("a"),hro=o("BertJapaneseTokenizer"),pro=o(" (BertJapanese model)"),_ro=l(),Bg=a("li"),Iae=a("strong"),uro=o("bertweet"),bro=o(" \u2014 "),OR=a("a"),vro=o("BertweetTokenizer"),Fro=o(" (BERTweet model)"),Tro=l(),In=a("li"),Nae=a("strong"),Mro=o("big_bird"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("BigBirdTokenizer"),wro=o(" or "),XR=a("a"),Aro=o("BigBirdTokenizerFast"),Lro=o(" (BigBird model)"),yro=l(),Nn=a("li"),qae=a("strong"),xro=o("bigbird_pegasus"),$ro=o(" \u2014 "),zR=a("a"),kro=o("PegasusTokenizer"),Sro=o(" or "),WR=a("a"),Rro=o("PegasusTokenizerFast"),Pro=o(" (BigBird-Pegasus model)"),Bro=l(),qn=a("li"),jae=a("strong"),Iro=o("blenderbot"),Nro=o(" \u2014 "),QR=a("a"),qro=o("BlenderbotTokenizer"),jro=o(" or "),HR=a("a"),Dro=o("BlenderbotTokenizerFast"),Gro=o(" (Blenderbot model)"),Oro=l(),Ig=a("li"),Dae=a("strong"),Vro=o("blenderbot-small"),Xro=o(" \u2014 "),UR=a("a"),zro=o("BlenderbotSmallTokenizer"),Wro=o(" (BlenderbotSmall model)"),Qro=l(),Ng=a("li"),Gae=a("strong"),Hro=o("bloom"),Uro=o(" \u2014 "),JR=a("a"),Jro=o("BloomTokenizerFast"),Yro=o(" (BLOOM model)"),Kro=l(),qg=a("li"),Oae=a("strong"),Zro=o("byt5"),eto=o(" \u2014 "),YR=a("a"),oto=o("ByT5Tokenizer"),rto=o(" (ByT5 model)"),tto=l(),jn=a("li"),Vae=a("strong"),ato=o("camembert"),nto=o(" \u2014 "),KR=a("a"),sto=o("CamembertTokenizer"),lto=o(" or "),ZR=a("a"),ito=o("CamembertTokenizerFast"),dto=o(" (CamemBERT model)"),cto=l(),jg=a("li"),Xae=a("strong"),fto=o("canine"),mto=o(" \u2014 "),eP=a("a"),gto=o("CanineTokenizer"),hto=o(" (CANINE model)"),pto=l(),Dn=a("li"),zae=a("strong"),_to=o("clip"),uto=o(" \u2014 "),oP=a("a"),bto=o("CLIPTokenizer"),vto=o(" or "),rP=a("a"),Fto=o("CLIPTokenizerFast"),Tto=o(" (CLIP model)"),Mto=l(),Gn=a("li"),Wae=a("strong"),Eto=o("convbert"),Cto=o(" \u2014 "),tP=a("a"),wto=o("ConvBertTokenizer"),Ato=o(" or "),aP=a("a"),Lto=o("ConvBertTokenizerFast"),yto=o(" (ConvBERT model)"),xto=l(),On=a("li"),Qae=a("strong"),$to=o("cpm"),kto=o(" \u2014 "),nP=a("a"),Sto=o("CpmTokenizer"),Rto=o(" or "),sP=a("a"),Pto=o("CpmTokenizerFast"),Bto=o(" (CPM model)"),Ito=l(),Dg=a("li"),Hae=a("strong"),Nto=o("ctrl"),qto=o(" \u2014 "),lP=a("a"),jto=o("CTRLTokenizer"),Dto=o(" (CTRL model)"),Gto=l(),Vn=a("li"),Uae=a("strong"),Oto=o("data2vec-text"),Vto=o(" \u2014 "),iP=a("a"),Xto=o("RobertaTokenizer"),zto=o(" or "),dP=a("a"),Wto=o("RobertaTokenizerFast"),Qto=o(" (Data2VecText model)"),Hto=l(),Xn=a("li"),Jae=a("strong"),Uto=o("deberta"),Jto=o(" \u2014 "),cP=a("a"),Yto=o("DebertaTokenizer"),Kto=o(" or "),fP=a("a"),Zto=o("DebertaTokenizerFast"),eao=o(" (DeBERTa model)"),oao=l(),zn=a("li"),Yae=a("strong"),rao=o("deberta-v2"),tao=o(" \u2014 "),mP=a("a"),aao=o("DebertaV2Tokenizer"),nao=o(" or "),gP=a("a"),sao=o("DebertaV2TokenizerFast"),lao=o(" (DeBERTa-v2 model)"),iao=l(),Wn=a("li"),Kae=a("strong"),dao=o("distilbert"),cao=o(" \u2014 "),hP=a("a"),fao=o("DistilBertTokenizer"),mao=o(" or "),pP=a("a"),gao=o("DistilBertTokenizerFast"),hao=o(" (DistilBERT model)"),pao=l(),Qn=a("li"),Zae=a("strong"),_ao=o("dpr"),uao=o(" \u2014 "),_P=a("a"),bao=o("DPRQuestionEncoderTokenizer"),vao=o(" or "),uP=a("a"),Fao=o("DPRQuestionEncoderTokenizerFast"),Tao=o(" (DPR model)"),Mao=l(),Hn=a("li"),ene=a("strong"),Eao=o("electra"),Cao=o(" \u2014 "),bP=a("a"),wao=o("ElectraTokenizer"),Aao=o(" or "),vP=a("a"),Lao=o("ElectraTokenizerFast"),yao=o(" (ELECTRA model)"),xao=l(),Gg=a("li"),one=a("strong"),$ao=o("flaubert"),kao=o(" \u2014 "),FP=a("a"),Sao=o("FlaubertTokenizer"),Rao=o(" (FlauBERT model)"),Pao=l(),Un=a("li"),rne=a("strong"),Bao=o("fnet"),Iao=o(" \u2014 "),TP=a("a"),Nao=o("FNetTokenizer"),qao=o(" or "),MP=a("a"),jao=o("FNetTokenizerFast"),Dao=o(" (FNet model)"),Gao=l(),Og=a("li"),tne=a("strong"),Oao=o("fsmt"),Vao=o(" \u2014 "),EP=a("a"),Xao=o("FSMTTokenizer"),zao=o(" (FairSeq Machine-Translation model)"),Wao=l(),Jn=a("li"),ane=a("strong"),Qao=o("funnel"),Hao=o(" \u2014 "),CP=a("a"),Uao=o("FunnelTokenizer"),Jao=o(" or "),wP=a("a"),Yao=o("FunnelTokenizerFast"),Kao=o(" (Funnel Transformer model)"),Zao=l(),Yn=a("li"),nne=a("strong"),eno=o("gpt2"),ono=o(" \u2014 "),AP=a("a"),rno=o("GPT2Tokenizer"),tno=o(" or "),LP=a("a"),ano=o("GPT2TokenizerFast"),nno=o(" (OpenAI GPT-2 model)"),sno=l(),Kn=a("li"),sne=a("strong"),lno=o("gpt_neo"),ino=o(" \u2014 "),yP=a("a"),dno=o("GPT2Tokenizer"),cno=o(" or "),xP=a("a"),fno=o("GPT2TokenizerFast"),mno=o(" (GPT Neo model)"),gno=l(),Vg=a("li"),lne=a("strong"),hno=o("gpt_neox"),pno=o(" \u2014 "),$P=a("a"),_no=o("GPTNeoXTokenizerFast"),uno=o(" (GPT NeoX model)"),bno=l(),Zn=a("li"),ine=a("strong"),vno=o("gptj"),Fno=o(" \u2014 "),kP=a("a"),Tno=o("GPT2Tokenizer"),Mno=o(" or "),SP=a("a"),Eno=o("GPT2TokenizerFast"),Cno=o(" (GPT-J model)"),wno=l(),es=a("li"),dne=a("strong"),Ano=o("herbert"),Lno=o(" \u2014 "),RP=a("a"),yno=o("HerbertTokenizer"),xno=o(" or "),PP=a("a"),$no=o("HerbertTokenizerFast"),kno=o(" (HerBERT model)"),Sno=l(),Xg=a("li"),cne=a("strong"),Rno=o("hubert"),Pno=o(" \u2014 "),BP=a("a"),Bno=o("Wav2Vec2CTCTokenizer"),Ino=o(" (Hubert model)"),Nno=l(),os=a("li"),fne=a("strong"),qno=o("ibert"),jno=o(" \u2014 "),IP=a("a"),Dno=o("RobertaTokenizer"),Gno=o(" or "),NP=a("a"),Ono=o("RobertaTokenizerFast"),Vno=o(" (I-BERT model)"),Xno=l(),rs=a("li"),mne=a("strong"),zno=o("layoutlm"),Wno=o(" \u2014 "),qP=a("a"),Qno=o("LayoutLMTokenizer"),Hno=o(" or "),jP=a("a"),Uno=o("LayoutLMTokenizerFast"),Jno=o(" (LayoutLM model)"),Yno=l(),ts=a("li"),gne=a("strong"),Kno=o("layoutlmv2"),Zno=o(" \u2014 "),DP=a("a"),eso=o("LayoutLMv2Tokenizer"),oso=o(" or "),GP=a("a"),rso=o("LayoutLMv2TokenizerFast"),tso=o(" (LayoutLMv2 model)"),aso=l(),as=a("li"),hne=a("strong"),nso=o("layoutlmv3"),sso=o(" \u2014 "),OP=a("a"),lso=o("LayoutLMv3Tokenizer"),iso=o(" or "),VP=a("a"),dso=o("LayoutLMv3TokenizerFast"),cso=o(" (LayoutLMv3 model)"),fso=l(),ns=a("li"),pne=a("strong"),mso=o("layoutxlm"),gso=o(" \u2014 "),XP=a("a"),hso=o("LayoutXLMTokenizer"),pso=o(" or "),zP=a("a"),_so=o("LayoutXLMTokenizerFast"),uso=o(" (LayoutXLM model)"),bso=l(),ss=a("li"),_ne=a("strong"),vso=o("led"),Fso=o(" \u2014 "),WP=a("a"),Tso=o("LEDTokenizer"),Mso=o(" or "),QP=a("a"),Eso=o("LEDTokenizerFast"),Cso=o(" (LED model)"),wso=l(),ls=a("li"),une=a("strong"),Aso=o("longformer"),Lso=o(" \u2014 "),HP=a("a"),yso=o("LongformerTokenizer"),xso=o(" or "),UP=a("a"),$so=o("LongformerTokenizerFast"),kso=o(" (Longformer model)"),Sso=l(),is=a("li"),bne=a("strong"),Rso=o("longt5"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("T5Tokenizer"),Iso=o(" or "),YP=a("a"),Nso=o("T5TokenizerFast"),qso=o(" (LongT5 model)"),jso=l(),zg=a("li"),vne=a("strong"),Dso=o("luke"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("LukeTokenizer"),Vso=o(" (LUKE model)"),Xso=l(),ds=a("li"),Fne=a("strong"),zso=o("lxmert"),Wso=o(" \u2014 "),ZP=a("a"),Qso=o("LxmertTokenizer"),Hso=o(" or "),eB=a("a"),Uso=o("LxmertTokenizerFast"),Jso=o(" (LXMERT model)"),Yso=l(),Wg=a("li"),Tne=a("strong"),Kso=o("m2m_100"),Zso=o(" \u2014 "),oB=a("a"),elo=o("M2M100Tokenizer"),olo=o(" (M2M100 model)"),rlo=l(),Qg=a("li"),Mne=a("strong"),tlo=o("marian"),alo=o(" \u2014 "),rB=a("a"),nlo=o("MarianTokenizer"),slo=o(" (Marian model)"),llo=l(),cs=a("li"),Ene=a("strong"),ilo=o("mbart"),dlo=o(" \u2014 "),tB=a("a"),clo=o("MBartTokenizer"),flo=o(" or "),aB=a("a"),mlo=o("MBartTokenizerFast"),glo=o(" (mBART model)"),hlo=l(),fs=a("li"),Cne=a("strong"),plo=o("mbart50"),_lo=o(" \u2014 "),nB=a("a"),ulo=o("MBart50Tokenizer"),blo=o(" or "),sB=a("a"),vlo=o("MBart50TokenizerFast"),Flo=o(" (mBART-50 model)"),Tlo=l(),ms=a("li"),wne=a("strong"),Mlo=o("megatron-bert"),Elo=o(" \u2014 "),lB=a("a"),Clo=o("BertTokenizer"),wlo=o(" or "),iB=a("a"),Alo=o("BertTokenizerFast"),Llo=o(" (Megatron-BERT model)"),ylo=l(),Hg=a("li"),Ane=a("strong"),xlo=o("mluke"),$lo=o(" \u2014 "),dB=a("a"),klo=o("MLukeTokenizer"),Slo=o(" (mLUKE model)"),Rlo=l(),gs=a("li"),Lne=a("strong"),Plo=o("mobilebert"),Blo=o(" \u2014 "),cB=a("a"),Ilo=o("MobileBertTokenizer"),Nlo=o(" or "),fB=a("a"),qlo=o("MobileBertTokenizerFast"),jlo=o(" (MobileBERT model)"),Dlo=l(),hs=a("li"),yne=a("strong"),Glo=o("mpnet"),Olo=o(" \u2014 "),mB=a("a"),Vlo=o("MPNetTokenizer"),Xlo=o(" or "),gB=a("a"),zlo=o("MPNetTokenizerFast"),Wlo=o(" (MPNet model)"),Qlo=l(),ps=a("li"),xne=a("strong"),Hlo=o("mt5"),Ulo=o(" \u2014 "),hB=a("a"),Jlo=o("MT5Tokenizer"),Ylo=o(" or "),pB=a("a"),Klo=o("MT5TokenizerFast"),Zlo=o(" (MT5 model)"),eio=l(),_s=a("li"),$ne=a("strong"),oio=o("nystromformer"),rio=o(" \u2014 "),_B=a("a"),tio=o("AlbertTokenizer"),aio=o(" or "),uB=a("a"),nio=o("AlbertTokenizerFast"),sio=o(" (Nystr\xF6mformer model)"),lio=l(),us=a("li"),kne=a("strong"),iio=o("openai-gpt"),dio=o(" \u2014 "),bB=a("a"),cio=o("OpenAIGPTTokenizer"),fio=o(" or "),vB=a("a"),mio=o("OpenAIGPTTokenizerFast"),gio=o(" (OpenAI GPT model)"),hio=l(),Ug=a("li"),Sne=a("strong"),pio=o("opt"),_io=o(" \u2014 "),FB=a("a"),uio=o("GPT2Tokenizer"),bio=o(" (OPT model)"),vio=l(),bs=a("li"),Rne=a("strong"),Fio=o("pegasus"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("PegasusTokenizer"),Eio=o(" or "),MB=a("a"),Cio=o("PegasusTokenizerFast"),wio=o(" (Pegasus model)"),Aio=l(),Jg=a("li"),Pne=a("strong"),Lio=o("perceiver"),yio=o(" \u2014 "),EB=a("a"),xio=o("PerceiverTokenizer"),$io=o(" (Perceiver model)"),kio=l(),Yg=a("li"),Bne=a("strong"),Sio=o("phobert"),Rio=o(" \u2014 "),CB=a("a"),Pio=o("PhobertTokenizer"),Bio=o(" (PhoBERT model)"),Iio=l(),Kg=a("li"),Ine=a("strong"),Nio=o("plbart"),qio=o(" \u2014 "),wB=a("a"),jio=o("PLBartTokenizer"),Dio=o(" (PLBart model)"),Gio=l(),Zg=a("li"),Nne=a("strong"),Oio=o("prophetnet"),Vio=o(" \u2014 "),AB=a("a"),Xio=o("ProphetNetTokenizer"),zio=o(" (ProphetNet model)"),Wio=l(),vs=a("li"),qne=a("strong"),Qio=o("qdqbert"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("BertTokenizer"),Jio=o(" or "),yB=a("a"),Yio=o("BertTokenizerFast"),Kio=o(" (QDQBert model)"),Zio=l(),eh=a("li"),jne=a("strong"),edo=o("rag"),odo=o(" \u2014 "),xB=a("a"),rdo=o("RagTokenizer"),tdo=o(" (RAG model)"),ado=l(),Fs=a("li"),Dne=a("strong"),ndo=o("realm"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("RealmTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("RealmTokenizerFast"),cdo=o(" (REALM model)"),fdo=l(),Ts=a("li"),Gne=a("strong"),mdo=o("reformer"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("ReformerTokenizer"),pdo=o(" or "),RB=a("a"),_do=o("ReformerTokenizerFast"),udo=o(" (Reformer model)"),bdo=l(),Ms=a("li"),One=a("strong"),vdo=o("rembert"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("RemBertTokenizer"),Mdo=o(" or "),BB=a("a"),Edo=o("RemBertTokenizerFast"),Cdo=o(" (RemBERT model)"),wdo=l(),Es=a("li"),Vne=a("strong"),Ado=o("retribert"),Ldo=o(" \u2014 "),IB=a("a"),ydo=o("RetriBertTokenizer"),xdo=o(" or "),NB=a("a"),$do=o("RetriBertTokenizerFast"),kdo=o(" (RetriBERT model)"),Sdo=l(),Cs=a("li"),Xne=a("strong"),Rdo=o("roberta"),Pdo=o(" \u2014 "),qB=a("a"),Bdo=o("RobertaTokenizer"),Ido=o(" or "),jB=a("a"),Ndo=o("RobertaTokenizerFast"),qdo=o(" (RoBERTa model)"),jdo=l(),ws=a("li"),zne=a("strong"),Ddo=o("roformer"),Gdo=o(" \u2014 "),DB=a("a"),Odo=o("RoFormerTokenizer"),Vdo=o(" or "),GB=a("a"),Xdo=o("RoFormerTokenizerFast"),zdo=o(" (RoFormer model)"),Wdo=l(),oh=a("li"),Wne=a("strong"),Qdo=o("speech_to_text"),Hdo=o(" \u2014 "),OB=a("a"),Udo=o("Speech2TextTokenizer"),Jdo=o(" (Speech2Text model)"),Ydo=l(),rh=a("li"),Qne=a("strong"),Kdo=o("speech_to_text_2"),Zdo=o(" \u2014 "),VB=a("a"),eco=o("Speech2Text2Tokenizer"),oco=o(" (Speech2Text2 model)"),rco=l(),As=a("li"),Hne=a("strong"),tco=o("splinter"),aco=o(" \u2014 "),XB=a("a"),nco=o("SplinterTokenizer"),sco=o(" or "),zB=a("a"),lco=o("SplinterTokenizerFast"),ico=o(" (Splinter model)"),dco=l(),Ls=a("li"),Une=a("strong"),cco=o("squeezebert"),fco=o(" \u2014 "),WB=a("a"),mco=o("SqueezeBertTokenizer"),gco=o(" or "),QB=a("a"),hco=o("SqueezeBertTokenizerFast"),pco=o(" (SqueezeBERT model)"),_co=l(),ys=a("li"),Jne=a("strong"),uco=o("t5"),bco=o(" \u2014 "),HB=a("a"),vco=o("T5Tokenizer"),Fco=o(" or "),UB=a("a"),Tco=o("T5TokenizerFast"),Mco=o(" (T5 model)"),Eco=l(),th=a("li"),Yne=a("strong"),Cco=o("tapas"),wco=o(" \u2014 "),JB=a("a"),Aco=o("TapasTokenizer"),Lco=o(" (TAPAS model)"),yco=l(),ah=a("li"),Kne=a("strong"),xco=o("tapex"),$co=o(" \u2014 "),YB=a("a"),kco=o("TapexTokenizer"),Sco=o(" (TAPEX model)"),Rco=l(),nh=a("li"),Zne=a("strong"),Pco=o("transfo-xl"),Bco=o(" \u2014 "),KB=a("a"),Ico=o("TransfoXLTokenizer"),Nco=o(" (Transformer-XL model)"),qco=l(),xs=a("li"),ese=a("strong"),jco=o("visual_bert"),Dco=o(" \u2014 "),ZB=a("a"),Gco=o("BertTokenizer"),Oco=o(" or "),eI=a("a"),Vco=o("BertTokenizerFast"),Xco=o(" (VisualBERT model)"),zco=l(),sh=a("li"),ose=a("strong"),Wco=o("wav2vec2"),Qco=o(" \u2014 "),oI=a("a"),Hco=o("Wav2Vec2CTCTokenizer"),Uco=o(" (Wav2Vec2 model)"),Jco=l(),lh=a("li"),rse=a("strong"),Yco=o("wav2vec2-conformer"),Kco=o(" \u2014 "),rI=a("a"),Zco=o("Wav2Vec2CTCTokenizer"),efo=o(" (Wav2Vec2-Conformer model)"),ofo=l(),ih=a("li"),tse=a("strong"),rfo=o("wav2vec2_phoneme"),tfo=o(" \u2014 "),tI=a("a"),afo=o("Wav2Vec2PhonemeCTCTokenizer"),nfo=o(" (Wav2Vec2Phoneme model)"),sfo=l(),$s=a("li"),ase=a("strong"),lfo=o("xglm"),ifo=o(" \u2014 "),aI=a("a"),dfo=o("XGLMTokenizer"),cfo=o(" or "),nI=a("a"),ffo=o("XGLMTokenizerFast"),mfo=o(" (XGLM model)"),gfo=l(),dh=a("li"),nse=a("strong"),hfo=o("xlm"),pfo=o(" \u2014 "),sI=a("a"),_fo=o("XLMTokenizer"),ufo=o(" (XLM model)"),bfo=l(),ch=a("li"),sse=a("strong"),vfo=o("xlm-prophetnet"),Ffo=o(" \u2014 "),lI=a("a"),Tfo=o("XLMProphetNetTokenizer"),Mfo=o(" (XLM-ProphetNet model)"),Efo=l(),ks=a("li"),lse=a("strong"),Cfo=o("xlm-roberta"),wfo=o(" \u2014 "),iI=a("a"),Afo=o("XLMRobertaTokenizer"),Lfo=o(" or "),dI=a("a"),yfo=o("XLMRobertaTokenizerFast"),xfo=o(" (XLM-RoBERTa model)"),$fo=l(),Ss=a("li"),ise=a("strong"),kfo=o("xlm-roberta-xl"),Sfo=o(" \u2014 "),cI=a("a"),Rfo=o("RobertaTokenizer"),Pfo=o(" or "),fI=a("a"),Bfo=o("RobertaTokenizerFast"),Ifo=o(" (XLM-RoBERTa-XL model)"),Nfo=l(),Rs=a("li"),dse=a("strong"),qfo=o("xlnet"),jfo=o(" \u2014 "),mI=a("a"),Dfo=o("XLNetTokenizer"),Gfo=o(" or "),gI=a("a"),Ofo=o("XLNetTokenizerFast"),Vfo=o(" (XLNet model)"),Xfo=l(),Ps=a("li"),cse=a("strong"),zfo=o("yoso"),Wfo=o(" \u2014 "),hI=a("a"),Qfo=o("AlbertTokenizer"),Hfo=o(" or "),pI=a("a"),Ufo=o("AlbertTokenizerFast"),Jfo=o(" (YOSO model)"),Yfo=l(),F(fh.$$.fragment),Kfo=l(),mh=a("div"),F(fA.$$.fragment),Zfo=l(),fse=a("p"),emo=o("Register a new tokenizer in this mapping."),oDe=l(),Ci=a("h2"),gh=a("a"),mse=a("span"),F(mA.$$.fragment),omo=l(),gse=a("span"),rmo=o("AutoFeatureExtractor"),rDe=l(),Ao=a("div"),F(gA.$$.fragment),tmo=l(),hA=a("p"),amo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_I=a("a"),nmo=o("AutoFeatureExtractor.from_pretrained()"),smo=o(" class method."),lmo=l(),pA=a("p"),imo=o("This class cannot be instantiated directly using "),hse=a("code"),dmo=o("__init__()"),cmo=o(" (throws an error)."),fmo=l(),He=a("div"),F(_A.$$.fragment),mmo=l(),pse=a("p"),gmo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hmo=l(),La=a("p"),pmo=o("The feature extractor class to instantiate is selected based on the "),_se=a("code"),_mo=o("model_type"),umo=o(` property of the config object
(either passed as an argument or loaded from `),use=a("code"),bmo=o("pretrained_model_name_or_path"),vmo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bse=a("code"),Fmo=o("pretrained_model_name_or_path"),Tmo=o(":"),Mmo=l(),Y=a("ul"),hh=a("li"),vse=a("strong"),Emo=o("beit"),Cmo=o(" \u2014 "),uI=a("a"),wmo=o("BeitFeatureExtractor"),Amo=o(" (BEiT model)"),Lmo=l(),ph=a("li"),Fse=a("strong"),ymo=o("clip"),xmo=o(" \u2014 "),bI=a("a"),$mo=o("CLIPFeatureExtractor"),kmo=o(" (CLIP model)"),Smo=l(),_h=a("li"),Tse=a("strong"),Rmo=o("convnext"),Pmo=o(" \u2014 "),vI=a("a"),Bmo=o("ConvNextFeatureExtractor"),Imo=o(" (ConvNeXT model)"),Nmo=l(),uh=a("li"),Mse=a("strong"),qmo=o("cvt"),jmo=o(" \u2014 "),FI=a("a"),Dmo=o("ConvNextFeatureExtractor"),Gmo=o(" (CvT model)"),Omo=l(),bh=a("li"),Ese=a("strong"),Vmo=o("data2vec-audio"),Xmo=o(" \u2014 "),TI=a("a"),zmo=o("Wav2Vec2FeatureExtractor"),Wmo=o(" (Data2VecAudio model)"),Qmo=l(),vh=a("li"),Cse=a("strong"),Hmo=o("data2vec-vision"),Umo=o(" \u2014 "),MI=a("a"),Jmo=o("BeitFeatureExtractor"),Ymo=o(" (Data2VecVision model)"),Kmo=l(),Fh=a("li"),wse=a("strong"),Zmo=o("deit"),ego=o(" \u2014 "),EI=a("a"),ogo=o("DeiTFeatureExtractor"),rgo=o(" (DeiT model)"),tgo=l(),Th=a("li"),Ase=a("strong"),ago=o("detr"),ngo=o(" \u2014 "),CI=a("a"),sgo=o("DetrFeatureExtractor"),lgo=o(" (DETR model)"),igo=l(),Mh=a("li"),Lse=a("strong"),dgo=o("dpt"),cgo=o(" \u2014 "),wI=a("a"),fgo=o("DPTFeatureExtractor"),mgo=o(" (DPT model)"),ggo=l(),Eh=a("li"),yse=a("strong"),hgo=o("flava"),pgo=o(" \u2014 "),AI=a("a"),_go=o("FlavaFeatureExtractor"),ugo=o(" (FLAVA model)"),bgo=l(),Ch=a("li"),xse=a("strong"),vgo=o("glpn"),Fgo=o(" \u2014 "),LI=a("a"),Tgo=o("GLPNFeatureExtractor"),Mgo=o(" (GLPN model)"),Ego=l(),wh=a("li"),$se=a("strong"),Cgo=o("hubert"),wgo=o(" \u2014 "),yI=a("a"),Ago=o("Wav2Vec2FeatureExtractor"),Lgo=o(" (Hubert model)"),ygo=l(),Ah=a("li"),kse=a("strong"),xgo=o("imagegpt"),$go=o(" \u2014 "),xI=a("a"),kgo=o("ImageGPTFeatureExtractor"),Sgo=o(" (ImageGPT model)"),Rgo=l(),Lh=a("li"),Sse=a("strong"),Pgo=o("layoutlmv2"),Bgo=o(" \u2014 "),$I=a("a"),Igo=o("LayoutLMv2FeatureExtractor"),Ngo=o(" (LayoutLMv2 model)"),qgo=l(),yh=a("li"),Rse=a("strong"),jgo=o("layoutlmv3"),Dgo=o(" \u2014 "),kI=a("a"),Ggo=o("LayoutLMv3FeatureExtractor"),Ogo=o(" (LayoutLMv3 model)"),Vgo=l(),xh=a("li"),Pse=a("strong"),Xgo=o("levit"),zgo=o(" \u2014 "),SI=a("a"),Wgo=o("LevitFeatureExtractor"),Qgo=o(" (LeViT model)"),Hgo=l(),$h=a("li"),Bse=a("strong"),Ugo=o("maskformer"),Jgo=o(" \u2014 "),RI=a("a"),Ygo=o("MaskFormerFeatureExtractor"),Kgo=o(" (MaskFormer model)"),Zgo=l(),kh=a("li"),Ise=a("strong"),eho=o("mctct"),oho=o(" \u2014 "),PI=a("a"),rho=o("MCTCTFeatureExtractor"),tho=o(" (M-CTC-T model)"),aho=l(),Sh=a("li"),Nse=a("strong"),nho=o("perceiver"),sho=o(" \u2014 "),BI=a("a"),lho=o("PerceiverFeatureExtractor"),iho=o(" (Perceiver model)"),dho=l(),Rh=a("li"),qse=a("strong"),cho=o("poolformer"),fho=o(" \u2014 "),II=a("a"),mho=o("PoolFormerFeatureExtractor"),gho=o(" (PoolFormer model)"),hho=l(),Ph=a("li"),jse=a("strong"),pho=o("regnet"),_ho=o(" \u2014 "),NI=a("a"),uho=o("ConvNextFeatureExtractor"),bho=o(" (RegNet model)"),vho=l(),Bh=a("li"),Dse=a("strong"),Fho=o("resnet"),Tho=o(" \u2014 "),qI=a("a"),Mho=o("ConvNextFeatureExtractor"),Eho=o(" (ResNet model)"),Cho=l(),Ih=a("li"),Gse=a("strong"),who=o("segformer"),Aho=o(" \u2014 "),jI=a("a"),Lho=o("SegformerFeatureExtractor"),yho=o(" (SegFormer model)"),xho=l(),Nh=a("li"),Ose=a("strong"),$ho=o("speech_to_text"),kho=o(" \u2014 "),DI=a("a"),Sho=o("Speech2TextFeatureExtractor"),Rho=o(" (Speech2Text model)"),Pho=l(),qh=a("li"),Vse=a("strong"),Bho=o("swin"),Iho=o(" \u2014 "),GI=a("a"),Nho=o("ViTFeatureExtractor"),qho=o(" (Swin Transformer model)"),jho=l(),jh=a("li"),Xse=a("strong"),Dho=o("van"),Gho=o(" \u2014 "),OI=a("a"),Oho=o("ConvNextFeatureExtractor"),Vho=o(" (VAN model)"),Xho=l(),Dh=a("li"),zse=a("strong"),zho=o("vit"),Who=o(" \u2014 "),VI=a("a"),Qho=o("ViTFeatureExtractor"),Hho=o(" (ViT model)"),Uho=l(),Gh=a("li"),Wse=a("strong"),Jho=o("vit_mae"),Yho=o(" \u2014 "),XI=a("a"),Kho=o("ViTFeatureExtractor"),Zho=o(" (ViTMAE model)"),epo=l(),Oh=a("li"),Qse=a("strong"),opo=o("wav2vec2"),rpo=o(" \u2014 "),zI=a("a"),tpo=o("Wav2Vec2FeatureExtractor"),apo=o(" (Wav2Vec2 model)"),npo=l(),Vh=a("li"),Hse=a("strong"),spo=o("wav2vec2-conformer"),lpo=o(" \u2014 "),WI=a("a"),ipo=o("Wav2Vec2FeatureExtractor"),dpo=o(" (Wav2Vec2-Conformer model)"),cpo=l(),Xh=a("li"),Use=a("strong"),fpo=o("yolos"),mpo=o(" \u2014 "),QI=a("a"),gpo=o("YolosFeatureExtractor"),hpo=o(" (YOLOS model)"),ppo=l(),F(zh.$$.fragment),_po=l(),F(Wh.$$.fragment),upo=l(),Qh=a("div"),F(uA.$$.fragment),bpo=l(),Jse=a("p"),vpo=o("Register a new feature extractor for this class."),tDe=l(),wi=a("h2"),Hh=a("a"),Yse=a("span"),F(bA.$$.fragment),Fpo=l(),Kse=a("span"),Tpo=o("AutoProcessor"),aDe=l(),Lo=a("div"),F(vA.$$.fragment),Mpo=l(),FA=a("p"),Epo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HI=a("a"),Cpo=o("AutoProcessor.from_pretrained()"),wpo=o(" class method."),Apo=l(),TA=a("p"),Lpo=o("This class cannot be instantiated directly using "),Zse=a("code"),ypo=o("__init__()"),xpo=o(" (throws an error)."),$po=l(),Ue=a("div"),F(MA.$$.fragment),kpo=l(),ele=a("p"),Spo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rpo=l(),Ai=a("p"),Ppo=o("The processor class to instantiate is selected based on the "),ole=a("code"),Bpo=o("model_type"),Ipo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),Npo=o("pretrained_model_name_or_path"),qpo=o(" if possible):"),jpo=l(),he=a("ul"),Uh=a("li"),tle=a("strong"),Dpo=o("clip"),Gpo=o(" \u2014 "),UI=a("a"),Opo=o("CLIPProcessor"),Vpo=o(" (CLIP model)"),Xpo=l(),Jh=a("li"),ale=a("strong"),zpo=o("flava"),Wpo=o(" \u2014 "),nle=a("code"),Qpo=o("FLAVAProcessor"),Hpo=o(" (FLAVA model)"),Upo=l(),Yh=a("li"),sle=a("strong"),Jpo=o("layoutlmv2"),Ypo=o(" \u2014 "),JI=a("a"),Kpo=o("LayoutLMv2Processor"),Zpo=o(" (LayoutLMv2 model)"),e_o=l(),Kh=a("li"),lle=a("strong"),o_o=o("layoutlmv3"),r_o=o(" \u2014 "),YI=a("a"),t_o=o("LayoutLMv3Processor"),a_o=o(" (LayoutLMv3 model)"),n_o=l(),Zh=a("li"),ile=a("strong"),s_o=o("layoutxlm"),l_o=o(" \u2014 "),KI=a("a"),i_o=o("LayoutXLMProcessor"),d_o=o(" (LayoutXLM model)"),c_o=l(),ep=a("li"),dle=a("strong"),f_o=o("sew"),m_o=o(" \u2014 "),ZI=a("a"),g_o=o("Wav2Vec2Processor"),h_o=o(" (SEW model)"),p_o=l(),op=a("li"),cle=a("strong"),__o=o("sew-d"),u_o=o(" \u2014 "),eN=a("a"),b_o=o("Wav2Vec2Processor"),v_o=o(" (SEW-D model)"),F_o=l(),rp=a("li"),fle=a("strong"),T_o=o("speech_to_text"),M_o=o(" \u2014 "),oN=a("a"),E_o=o("Speech2TextProcessor"),C_o=o(" (Speech2Text model)"),w_o=l(),tp=a("li"),mle=a("strong"),A_o=o("speech_to_text_2"),L_o=o(" \u2014 "),rN=a("a"),y_o=o("Speech2Text2Processor"),x_o=o(" (Speech2Text2 model)"),$_o=l(),ap=a("li"),gle=a("strong"),k_o=o("trocr"),S_o=o(" \u2014 "),tN=a("a"),R_o=o("TrOCRProcessor"),P_o=o(" (TrOCR model)"),B_o=l(),np=a("li"),hle=a("strong"),I_o=o("unispeech"),N_o=o(" \u2014 "),aN=a("a"),q_o=o("Wav2Vec2Processor"),j_o=o(" (UniSpeech model)"),D_o=l(),sp=a("li"),ple=a("strong"),G_o=o("unispeech-sat"),O_o=o(" \u2014 "),nN=a("a"),V_o=o("Wav2Vec2Processor"),X_o=o(" (UniSpeechSat model)"),z_o=l(),lp=a("li"),_le=a("strong"),W_o=o("vilt"),Q_o=o(" \u2014 "),sN=a("a"),H_o=o("ViltProcessor"),U_o=o(" (ViLT model)"),J_o=l(),ip=a("li"),ule=a("strong"),Y_o=o("vision-text-dual-encoder"),K_o=o(" \u2014 "),lN=a("a"),Z_o=o("VisionTextDualEncoderProcessor"),euo=o(" (VisionTextDualEncoder model)"),ouo=l(),dp=a("li"),ble=a("strong"),ruo=o("wav2vec2"),tuo=o(" \u2014 "),iN=a("a"),auo=o("Wav2Vec2Processor"),nuo=o(" (Wav2Vec2 model)"),suo=l(),cp=a("li"),vle=a("strong"),luo=o("wav2vec2-conformer"),iuo=o(" \u2014 "),dN=a("a"),duo=o("Wav2Vec2Processor"),cuo=o(" (Wav2Vec2-Conformer model)"),fuo=l(),fp=a("li"),Fle=a("strong"),muo=o("wavlm"),guo=o(" \u2014 "),cN=a("a"),huo=o("Wav2Vec2Processor"),puo=o(" (WavLM model)"),_uo=l(),F(mp.$$.fragment),uuo=l(),F(gp.$$.fragment),buo=l(),hp=a("div"),F(EA.$$.fragment),vuo=l(),Tle=a("p"),Fuo=o("Register a new processor for this class."),nDe=l(),Li=a("h2"),pp=a("a"),Mle=a("span"),F(CA.$$.fragment),Tuo=l(),Ele=a("span"),Muo=o("AutoModel"),sDe=l(),yo=a("div"),F(wA.$$.fragment),Euo=l(),yi=a("p"),Cuo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fN=a("a"),wuo=o("from_pretrained()"),Auo=o(" class method or the "),mN=a("a"),Luo=o("from_config()"),yuo=o(` class
method.`),xuo=l(),AA=a("p"),$uo=o("This class cannot be instantiated directly using "),Cle=a("code"),kuo=o("__init__()"),Suo=o(" (throws an error)."),Ruo=l(),tt=a("div"),F(LA.$$.fragment),Puo=l(),wle=a("p"),Buo=o("Instantiates one of the base model classes of the library from a configuration."),Iuo=l(),xi=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),quo=o("not"),juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),Duo=o("from_pretrained()"),Guo=o(" to load the model weights."),Ouo=l(),F(_p.$$.fragment),Vuo=l(),Je=a("div"),F(yA.$$.fragment),Xuo=l(),Lle=a("p"),zuo=o("Instantiate one of the base model classes of the library from a pretrained model."),Wuo=l(),ya=a("p"),Quo=o("The model class to instantiate is selected based on the "),yle=a("code"),Huo=o("model_type"),Uuo=o(` property of the config object (either
passed as an argument or loaded from `),xle=a("code"),Juo=o("pretrained_model_name_or_path"),Yuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),Kuo=o("pretrained_model_name_or_path"),Zuo=o(":"),e2o=l(),y=a("ul"),up=a("li"),kle=a("strong"),o2o=o("albert"),r2o=o(" \u2014 "),hN=a("a"),t2o=o("AlbertModel"),a2o=o(" (ALBERT model)"),n2o=l(),bp=a("li"),Sle=a("strong"),s2o=o("bart"),l2o=o(" \u2014 "),pN=a("a"),i2o=o("BartModel"),d2o=o(" (BART model)"),c2o=l(),vp=a("li"),Rle=a("strong"),f2o=o("beit"),m2o=o(" \u2014 "),_N=a("a"),g2o=o("BeitModel"),h2o=o(" (BEiT model)"),p2o=l(),Fp=a("li"),Ple=a("strong"),_2o=o("bert"),u2o=o(" \u2014 "),uN=a("a"),b2o=o("BertModel"),v2o=o(" (BERT model)"),F2o=l(),Tp=a("li"),Ble=a("strong"),T2o=o("bert-generation"),M2o=o(" \u2014 "),bN=a("a"),E2o=o("BertGenerationEncoder"),C2o=o(" (Bert Generation model)"),w2o=l(),Mp=a("li"),Ile=a("strong"),A2o=o("big_bird"),L2o=o(" \u2014 "),vN=a("a"),y2o=o("BigBirdModel"),x2o=o(" (BigBird model)"),$2o=l(),Ep=a("li"),Nle=a("strong"),k2o=o("bigbird_pegasus"),S2o=o(" \u2014 "),FN=a("a"),R2o=o("BigBirdPegasusModel"),P2o=o(" (BigBird-Pegasus model)"),B2o=l(),Cp=a("li"),qle=a("strong"),I2o=o("blenderbot"),N2o=o(" \u2014 "),TN=a("a"),q2o=o("BlenderbotModel"),j2o=o(" (Blenderbot model)"),D2o=l(),wp=a("li"),jle=a("strong"),G2o=o("blenderbot-small"),O2o=o(" \u2014 "),MN=a("a"),V2o=o("BlenderbotSmallModel"),X2o=o(" (BlenderbotSmall model)"),z2o=l(),Ap=a("li"),Dle=a("strong"),W2o=o("bloom"),Q2o=o(" \u2014 "),EN=a("a"),H2o=o("BloomModel"),U2o=o(" (BLOOM model)"),J2o=l(),Lp=a("li"),Gle=a("strong"),Y2o=o("camembert"),K2o=o(" \u2014 "),CN=a("a"),Z2o=o("CamembertModel"),e1o=o(" (CamemBERT model)"),o1o=l(),yp=a("li"),Ole=a("strong"),r1o=o("canine"),t1o=o(" \u2014 "),wN=a("a"),a1o=o("CanineModel"),n1o=o(" (CANINE model)"),s1o=l(),xp=a("li"),Vle=a("strong"),l1o=o("clip"),i1o=o(" \u2014 "),AN=a("a"),d1o=o("CLIPModel"),c1o=o(" (CLIP model)"),f1o=l(),$p=a("li"),Xle=a("strong"),m1o=o("convbert"),g1o=o(" \u2014 "),LN=a("a"),h1o=o("ConvBertModel"),p1o=o(" (ConvBERT model)"),_1o=l(),kp=a("li"),zle=a("strong"),u1o=o("convnext"),b1o=o(" \u2014 "),yN=a("a"),v1o=o("ConvNextModel"),F1o=o(" (ConvNeXT model)"),T1o=l(),Sp=a("li"),Wle=a("strong"),M1o=o("ctrl"),E1o=o(" \u2014 "),xN=a("a"),C1o=o("CTRLModel"),w1o=o(" (CTRL model)"),A1o=l(),Rp=a("li"),Qle=a("strong"),L1o=o("cvt"),y1o=o(" \u2014 "),$N=a("a"),x1o=o("CvtModel"),$1o=o(" (CvT model)"),k1o=l(),Pp=a("li"),Hle=a("strong"),S1o=o("data2vec-audio"),R1o=o(" \u2014 "),kN=a("a"),P1o=o("Data2VecAudioModel"),B1o=o(" (Data2VecAudio model)"),I1o=l(),Bp=a("li"),Ule=a("strong"),N1o=o("data2vec-text"),q1o=o(" \u2014 "),SN=a("a"),j1o=o("Data2VecTextModel"),D1o=o(" (Data2VecText model)"),G1o=l(),Ip=a("li"),Jle=a("strong"),O1o=o("data2vec-vision"),V1o=o(" \u2014 "),RN=a("a"),X1o=o("Data2VecVisionModel"),z1o=o(" (Data2VecVision model)"),W1o=l(),Np=a("li"),Yle=a("strong"),Q1o=o("deberta"),H1o=o(" \u2014 "),PN=a("a"),U1o=o("DebertaModel"),J1o=o(" (DeBERTa model)"),Y1o=l(),qp=a("li"),Kle=a("strong"),K1o=o("deberta-v2"),Z1o=o(" \u2014 "),BN=a("a"),ebo=o("DebertaV2Model"),obo=o(" (DeBERTa-v2 model)"),rbo=l(),jp=a("li"),Zle=a("strong"),tbo=o("decision_transformer"),abo=o(" \u2014 "),IN=a("a"),nbo=o("DecisionTransformerModel"),sbo=o(" (Decision Transformer model)"),lbo=l(),Dp=a("li"),eie=a("strong"),ibo=o("deit"),dbo=o(" \u2014 "),NN=a("a"),cbo=o("DeiTModel"),fbo=o(" (DeiT model)"),mbo=l(),Gp=a("li"),oie=a("strong"),gbo=o("detr"),hbo=o(" \u2014 "),qN=a("a"),pbo=o("DetrModel"),_bo=o(" (DETR model)"),ubo=l(),Op=a("li"),rie=a("strong"),bbo=o("distilbert"),vbo=o(" \u2014 "),jN=a("a"),Fbo=o("DistilBertModel"),Tbo=o(" (DistilBERT model)"),Mbo=l(),Vp=a("li"),tie=a("strong"),Ebo=o("dpr"),Cbo=o(" \u2014 "),DN=a("a"),wbo=o("DPRQuestionEncoder"),Abo=o(" (DPR model)"),Lbo=l(),Xp=a("li"),aie=a("strong"),ybo=o("dpt"),xbo=o(" \u2014 "),GN=a("a"),$bo=o("DPTModel"),kbo=o(" (DPT model)"),Sbo=l(),zp=a("li"),nie=a("strong"),Rbo=o("electra"),Pbo=o(" \u2014 "),ON=a("a"),Bbo=o("ElectraModel"),Ibo=o(" (ELECTRA model)"),Nbo=l(),Wp=a("li"),sie=a("strong"),qbo=o("flaubert"),jbo=o(" \u2014 "),VN=a("a"),Dbo=o("FlaubertModel"),Gbo=o(" (FlauBERT model)"),Obo=l(),Qp=a("li"),lie=a("strong"),Vbo=o("flava"),Xbo=o(" \u2014 "),XN=a("a"),zbo=o("FlavaModel"),Wbo=o(" (FLAVA model)"),Qbo=l(),Hp=a("li"),iie=a("strong"),Hbo=o("fnet"),Ubo=o(" \u2014 "),zN=a("a"),Jbo=o("FNetModel"),Ybo=o(" (FNet model)"),Kbo=l(),Up=a("li"),die=a("strong"),Zbo=o("fsmt"),evo=o(" \u2014 "),WN=a("a"),ovo=o("FSMTModel"),rvo=o(" (FairSeq Machine-Translation model)"),tvo=l(),Bs=a("li"),cie=a("strong"),avo=o("funnel"),nvo=o(" \u2014 "),QN=a("a"),svo=o("FunnelModel"),lvo=o(" or "),HN=a("a"),ivo=o("FunnelBaseModel"),dvo=o(" (Funnel Transformer model)"),cvo=l(),Jp=a("li"),fie=a("strong"),fvo=o("glpn"),mvo=o(" \u2014 "),UN=a("a"),gvo=o("GLPNModel"),hvo=o(" (GLPN model)"),pvo=l(),Yp=a("li"),mie=a("strong"),_vo=o("gpt2"),uvo=o(" \u2014 "),JN=a("a"),bvo=o("GPT2Model"),vvo=o(" (OpenAI GPT-2 model)"),Fvo=l(),Kp=a("li"),gie=a("strong"),Tvo=o("gpt_neo"),Mvo=o(" \u2014 "),YN=a("a"),Evo=o("GPTNeoModel"),Cvo=o(" (GPT Neo model)"),wvo=l(),Zp=a("li"),hie=a("strong"),Avo=o("gpt_neox"),Lvo=o(" \u2014 "),KN=a("a"),yvo=o("GPTNeoXModel"),xvo=o(" (GPT NeoX model)"),$vo=l(),e_=a("li"),pie=a("strong"),kvo=o("gptj"),Svo=o(" \u2014 "),ZN=a("a"),Rvo=o("GPTJModel"),Pvo=o(" (GPT-J model)"),Bvo=l(),o_=a("li"),_ie=a("strong"),Ivo=o("hubert"),Nvo=o(" \u2014 "),eq=a("a"),qvo=o("HubertModel"),jvo=o(" (Hubert model)"),Dvo=l(),r_=a("li"),uie=a("strong"),Gvo=o("ibert"),Ovo=o(" \u2014 "),oq=a("a"),Vvo=o("IBertModel"),Xvo=o(" (I-BERT model)"),zvo=l(),t_=a("li"),bie=a("strong"),Wvo=o("imagegpt"),Qvo=o(" \u2014 "),rq=a("a"),Hvo=o("ImageGPTModel"),Uvo=o(" (ImageGPT model)"),Jvo=l(),a_=a("li"),vie=a("strong"),Yvo=o("layoutlm"),Kvo=o(" \u2014 "),tq=a("a"),Zvo=o("LayoutLMModel"),eFo=o(" (LayoutLM model)"),oFo=l(),n_=a("li"),Fie=a("strong"),rFo=o("layoutlmv2"),tFo=o(" \u2014 "),aq=a("a"),aFo=o("LayoutLMv2Model"),nFo=o(" (LayoutLMv2 model)"),sFo=l(),s_=a("li"),Tie=a("strong"),lFo=o("layoutlmv3"),iFo=o(" \u2014 "),nq=a("a"),dFo=o("LayoutLMv3Model"),cFo=o(" (LayoutLMv3 model)"),fFo=l(),l_=a("li"),Mie=a("strong"),mFo=o("led"),gFo=o(" \u2014 "),sq=a("a"),hFo=o("LEDModel"),pFo=o(" (LED model)"),_Fo=l(),i_=a("li"),Eie=a("strong"),uFo=o("levit"),bFo=o(" \u2014 "),lq=a("a"),vFo=o("LevitModel"),FFo=o(" (LeViT model)"),TFo=l(),d_=a("li"),Cie=a("strong"),MFo=o("longformer"),EFo=o(" \u2014 "),iq=a("a"),CFo=o("LongformerModel"),wFo=o(" (Longformer model)"),AFo=l(),c_=a("li"),wie=a("strong"),LFo=o("longt5"),yFo=o(" \u2014 "),dq=a("a"),xFo=o("LongT5Model"),$Fo=o(" (LongT5 model)"),kFo=l(),f_=a("li"),Aie=a("strong"),SFo=o("luke"),RFo=o(" \u2014 "),cq=a("a"),PFo=o("LukeModel"),BFo=o(" (LUKE model)"),IFo=l(),m_=a("li"),Lie=a("strong"),NFo=o("lxmert"),qFo=o(" \u2014 "),fq=a("a"),jFo=o("LxmertModel"),DFo=o(" (LXMERT model)"),GFo=l(),g_=a("li"),yie=a("strong"),OFo=o("m2m_100"),VFo=o(" \u2014 "),mq=a("a"),XFo=o("M2M100Model"),zFo=o(" (M2M100 model)"),WFo=l(),h_=a("li"),xie=a("strong"),QFo=o("marian"),HFo=o(" \u2014 "),gq=a("a"),UFo=o("MarianModel"),JFo=o(" (Marian model)"),YFo=l(),p_=a("li"),$ie=a("strong"),KFo=o("maskformer"),ZFo=o(" \u2014 "),hq=a("a"),e6o=o("MaskFormerModel"),o6o=o(" (MaskFormer model)"),r6o=l(),__=a("li"),kie=a("strong"),t6o=o("mbart"),a6o=o(" \u2014 "),pq=a("a"),n6o=o("MBartModel"),s6o=o(" (mBART model)"),l6o=l(),u_=a("li"),Sie=a("strong"),i6o=o("mctct"),d6o=o(" \u2014 "),_q=a("a"),c6o=o("MCTCTModel"),f6o=o(" (M-CTC-T model)"),m6o=l(),b_=a("li"),Rie=a("strong"),g6o=o("megatron-bert"),h6o=o(" \u2014 "),uq=a("a"),p6o=o("MegatronBertModel"),_6o=o(" (Megatron-BERT model)"),u6o=l(),v_=a("li"),Pie=a("strong"),b6o=o("mobilebert"),v6o=o(" \u2014 "),bq=a("a"),F6o=o("MobileBertModel"),T6o=o(" (MobileBERT model)"),M6o=l(),F_=a("li"),Bie=a("strong"),E6o=o("mpnet"),C6o=o(" \u2014 "),vq=a("a"),w6o=o("MPNetModel"),A6o=o(" (MPNet model)"),L6o=l(),T_=a("li"),Iie=a("strong"),y6o=o("mt5"),x6o=o(" \u2014 "),Fq=a("a"),$6o=o("MT5Model"),k6o=o(" (MT5 model)"),S6o=l(),M_=a("li"),Nie=a("strong"),R6o=o("nystromformer"),P6o=o(" \u2014 "),Tq=a("a"),B6o=o("NystromformerModel"),I6o=o(" (Nystr\xF6mformer model)"),N6o=l(),E_=a("li"),qie=a("strong"),q6o=o("openai-gpt"),j6o=o(" \u2014 "),Mq=a("a"),D6o=o("OpenAIGPTModel"),G6o=o(" (OpenAI GPT model)"),O6o=l(),C_=a("li"),jie=a("strong"),V6o=o("opt"),X6o=o(" \u2014 "),Eq=a("a"),z6o=o("OPTModel"),W6o=o(" (OPT model)"),Q6o=l(),w_=a("li"),Die=a("strong"),H6o=o("pegasus"),U6o=o(" \u2014 "),Cq=a("a"),J6o=o("PegasusModel"),Y6o=o(" (Pegasus model)"),K6o=l(),A_=a("li"),Gie=a("strong"),Z6o=o("perceiver"),eTo=o(" \u2014 "),wq=a("a"),oTo=o("PerceiverModel"),rTo=o(" (Perceiver model)"),tTo=l(),L_=a("li"),Oie=a("strong"),aTo=o("plbart"),nTo=o(" \u2014 "),Aq=a("a"),sTo=o("PLBartModel"),lTo=o(" (PLBart model)"),iTo=l(),y_=a("li"),Vie=a("strong"),dTo=o("poolformer"),cTo=o(" \u2014 "),Lq=a("a"),fTo=o("PoolFormerModel"),mTo=o(" (PoolFormer model)"),gTo=l(),x_=a("li"),Xie=a("strong"),hTo=o("prophetnet"),pTo=o(" \u2014 "),yq=a("a"),_To=o("ProphetNetModel"),uTo=o(" (ProphetNet model)"),bTo=l(),$_=a("li"),zie=a("strong"),vTo=o("qdqbert"),FTo=o(" \u2014 "),xq=a("a"),TTo=o("QDQBertModel"),MTo=o(" (QDQBert model)"),ETo=l(),k_=a("li"),Wie=a("strong"),CTo=o("reformer"),wTo=o(" \u2014 "),$q=a("a"),ATo=o("ReformerModel"),LTo=o(" (Reformer model)"),yTo=l(),S_=a("li"),Qie=a("strong"),xTo=o("regnet"),$To=o(" \u2014 "),kq=a("a"),kTo=o("RegNetModel"),STo=o(" (RegNet model)"),RTo=l(),R_=a("li"),Hie=a("strong"),PTo=o("rembert"),BTo=o(" \u2014 "),Sq=a("a"),ITo=o("RemBertModel"),NTo=o(" (RemBERT model)"),qTo=l(),P_=a("li"),Uie=a("strong"),jTo=o("resnet"),DTo=o(" \u2014 "),Rq=a("a"),GTo=o("ResNetModel"),OTo=o(" (ResNet model)"),VTo=l(),B_=a("li"),Jie=a("strong"),XTo=o("retribert"),zTo=o(" \u2014 "),Pq=a("a"),WTo=o("RetriBertModel"),QTo=o(" (RetriBERT model)"),HTo=l(),I_=a("li"),Yie=a("strong"),UTo=o("roberta"),JTo=o(" \u2014 "),Bq=a("a"),YTo=o("RobertaModel"),KTo=o(" (RoBERTa model)"),ZTo=l(),N_=a("li"),Kie=a("strong"),e7o=o("roformer"),o7o=o(" \u2014 "),Iq=a("a"),r7o=o("RoFormerModel"),t7o=o(" (RoFormer model)"),a7o=l(),q_=a("li"),Zie=a("strong"),n7o=o("segformer"),s7o=o(" \u2014 "),Nq=a("a"),l7o=o("SegformerModel"),i7o=o(" (SegFormer model)"),d7o=l(),j_=a("li"),ede=a("strong"),c7o=o("sew"),f7o=o(" \u2014 "),qq=a("a"),m7o=o("SEWModel"),g7o=o(" (SEW model)"),h7o=l(),D_=a("li"),ode=a("strong"),p7o=o("sew-d"),_7o=o(" \u2014 "),jq=a("a"),u7o=o("SEWDModel"),b7o=o(" (SEW-D model)"),v7o=l(),G_=a("li"),rde=a("strong"),F7o=o("speech_to_text"),T7o=o(" \u2014 "),Dq=a("a"),M7o=o("Speech2TextModel"),E7o=o(" (Speech2Text model)"),C7o=l(),O_=a("li"),tde=a("strong"),w7o=o("splinter"),A7o=o(" \u2014 "),Gq=a("a"),L7o=o("SplinterModel"),y7o=o(" (Splinter model)"),x7o=l(),V_=a("li"),ade=a("strong"),$7o=o("squeezebert"),k7o=o(" \u2014 "),Oq=a("a"),S7o=o("SqueezeBertModel"),R7o=o(" (SqueezeBERT model)"),P7o=l(),X_=a("li"),nde=a("strong"),B7o=o("swin"),I7o=o(" \u2014 "),Vq=a("a"),N7o=o("SwinModel"),q7o=o(" (Swin Transformer model)"),j7o=l(),z_=a("li"),sde=a("strong"),D7o=o("t5"),G7o=o(" \u2014 "),Xq=a("a"),O7o=o("T5Model"),V7o=o(" (T5 model)"),X7o=l(),W_=a("li"),lde=a("strong"),z7o=o("tapas"),W7o=o(" \u2014 "),zq=a("a"),Q7o=o("TapasModel"),H7o=o(" (TAPAS model)"),U7o=l(),Q_=a("li"),ide=a("strong"),J7o=o("trajectory_transformer"),Y7o=o(" \u2014 "),Wq=a("a"),K7o=o("TrajectoryTransformerModel"),Z7o=o(" (Trajectory Transformer model)"),e9o=l(),H_=a("li"),dde=a("strong"),o9o=o("transfo-xl"),r9o=o(" \u2014 "),Qq=a("a"),t9o=o("TransfoXLModel"),a9o=o(" (Transformer-XL model)"),n9o=l(),U_=a("li"),cde=a("strong"),s9o=o("unispeech"),l9o=o(" \u2014 "),Hq=a("a"),i9o=o("UniSpeechModel"),d9o=o(" (UniSpeech model)"),c9o=l(),J_=a("li"),fde=a("strong"),f9o=o("unispeech-sat"),m9o=o(" \u2014 "),Uq=a("a"),g9o=o("UniSpeechSatModel"),h9o=o(" (UniSpeechSat model)"),p9o=l(),Y_=a("li"),mde=a("strong"),_9o=o("van"),u9o=o(" \u2014 "),Jq=a("a"),b9o=o("VanModel"),v9o=o(" (VAN model)"),F9o=l(),K_=a("li"),gde=a("strong"),T9o=o("vilt"),M9o=o(" \u2014 "),Yq=a("a"),E9o=o("ViltModel"),C9o=o(" (ViLT model)"),w9o=l(),Z_=a("li"),hde=a("strong"),A9o=o("vision-text-dual-encoder"),L9o=o(" \u2014 "),Kq=a("a"),y9o=o("VisionTextDualEncoderModel"),x9o=o(" (VisionTextDualEncoder model)"),$9o=l(),eu=a("li"),pde=a("strong"),k9o=o("visual_bert"),S9o=o(" \u2014 "),Zq=a("a"),R9o=o("VisualBertModel"),P9o=o(" (VisualBERT model)"),B9o=l(),ou=a("li"),_de=a("strong"),I9o=o("vit"),N9o=o(" \u2014 "),ej=a("a"),q9o=o("ViTModel"),j9o=o(" (ViT model)"),D9o=l(),ru=a("li"),ude=a("strong"),G9o=o("vit_mae"),O9o=o(" \u2014 "),oj=a("a"),V9o=o("ViTMAEModel"),X9o=o(" (ViTMAE model)"),z9o=l(),tu=a("li"),bde=a("strong"),W9o=o("wav2vec2"),Q9o=o(" \u2014 "),rj=a("a"),H9o=o("Wav2Vec2Model"),U9o=o(" (Wav2Vec2 model)"),J9o=l(),au=a("li"),vde=a("strong"),Y9o=o("wav2vec2-conformer"),K9o=o(" \u2014 "),tj=a("a"),Z9o=o("Wav2Vec2ConformerModel"),eMo=o(" (Wav2Vec2-Conformer model)"),oMo=l(),nu=a("li"),Fde=a("strong"),rMo=o("wavlm"),tMo=o(" \u2014 "),aj=a("a"),aMo=o("WavLMModel"),nMo=o(" (WavLM model)"),sMo=l(),su=a("li"),Tde=a("strong"),lMo=o("xglm"),iMo=o(" \u2014 "),nj=a("a"),dMo=o("XGLMModel"),cMo=o(" (XGLM model)"),fMo=l(),lu=a("li"),Mde=a("strong"),mMo=o("xlm"),gMo=o(" \u2014 "),sj=a("a"),hMo=o("XLMModel"),pMo=o(" (XLM model)"),_Mo=l(),iu=a("li"),Ede=a("strong"),uMo=o("xlm-prophetnet"),bMo=o(" \u2014 "),lj=a("a"),vMo=o("XLMProphetNetModel"),FMo=o(" (XLM-ProphetNet model)"),TMo=l(),du=a("li"),Cde=a("strong"),MMo=o("xlm-roberta"),EMo=o(" \u2014 "),ij=a("a"),CMo=o("XLMRobertaModel"),wMo=o(" (XLM-RoBERTa model)"),AMo=l(),cu=a("li"),wde=a("strong"),LMo=o("xlm-roberta-xl"),yMo=o(" \u2014 "),dj=a("a"),xMo=o("XLMRobertaXLModel"),$Mo=o(" (XLM-RoBERTa-XL model)"),kMo=l(),fu=a("li"),Ade=a("strong"),SMo=o("xlnet"),RMo=o(" \u2014 "),cj=a("a"),PMo=o("XLNetModel"),BMo=o(" (XLNet model)"),IMo=l(),mu=a("li"),Lde=a("strong"),NMo=o("yolos"),qMo=o(" \u2014 "),fj=a("a"),jMo=o("YolosModel"),DMo=o(" (YOLOS model)"),GMo=l(),gu=a("li"),yde=a("strong"),OMo=o("yoso"),VMo=o(" \u2014 "),mj=a("a"),XMo=o("YosoModel"),zMo=o(" (YOSO model)"),WMo=l(),hu=a("p"),QMo=o("The model is set in evaluation mode by default using "),xde=a("code"),HMo=o("model.eval()"),UMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),JMo=o("model.train()"),YMo=l(),F(pu.$$.fragment),lDe=l(),$i=a("h2"),_u=a("a"),kde=a("span"),F(xA.$$.fragment),KMo=l(),Sde=a("span"),ZMo=o("AutoModelForPreTraining"),iDe=l(),xo=a("div"),F($A.$$.fragment),e4o=l(),ki=a("p"),o4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gj=a("a"),r4o=o("from_pretrained()"),t4o=o(" class method or the "),hj=a("a"),a4o=o("from_config()"),n4o=o(` class
method.`),s4o=l(),kA=a("p"),l4o=o("This class cannot be instantiated directly using "),Rde=a("code"),i4o=o("__init__()"),d4o=o(" (throws an error)."),c4o=l(),at=a("div"),F(SA.$$.fragment),f4o=l(),Pde=a("p"),m4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g4o=l(),Si=a("p"),h4o=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),p4o=o("not"),_4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=a("a"),u4o=o("from_pretrained()"),b4o=o(" to load the model weights."),v4o=l(),F(uu.$$.fragment),F4o=l(),Ye=a("div"),F(RA.$$.fragment),T4o=l(),Ide=a("p"),M4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E4o=l(),xa=a("p"),C4o=o("The model class to instantiate is selected based on the "),Nde=a("code"),w4o=o("model_type"),A4o=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),L4o=o("pretrained_model_name_or_path"),y4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),x4o=o("pretrained_model_name_or_path"),$4o=o(":"),k4o=l(),G=a("ul"),bu=a("li"),Dde=a("strong"),S4o=o("albert"),R4o=o(" \u2014 "),_j=a("a"),P4o=o("AlbertForPreTraining"),B4o=o(" (ALBERT model)"),I4o=l(),vu=a("li"),Gde=a("strong"),N4o=o("bart"),q4o=o(" \u2014 "),uj=a("a"),j4o=o("BartForConditionalGeneration"),D4o=o(" (BART model)"),G4o=l(),Fu=a("li"),Ode=a("strong"),O4o=o("bert"),V4o=o(" \u2014 "),bj=a("a"),X4o=o("BertForPreTraining"),z4o=o(" (BERT model)"),W4o=l(),Tu=a("li"),Vde=a("strong"),Q4o=o("big_bird"),H4o=o(" \u2014 "),vj=a("a"),U4o=o("BigBirdForPreTraining"),J4o=o(" (BigBird model)"),Y4o=l(),Mu=a("li"),Xde=a("strong"),K4o=o("bloom"),Z4o=o(" \u2014 "),Fj=a("a"),eEo=o("BloomForCausalLM"),oEo=o(" (BLOOM model)"),rEo=l(),Eu=a("li"),zde=a("strong"),tEo=o("camembert"),aEo=o(" \u2014 "),Tj=a("a"),nEo=o("CamembertForMaskedLM"),sEo=o(" (CamemBERT model)"),lEo=l(),Cu=a("li"),Wde=a("strong"),iEo=o("ctrl"),dEo=o(" \u2014 "),Mj=a("a"),cEo=o("CTRLLMHeadModel"),fEo=o(" (CTRL model)"),mEo=l(),wu=a("li"),Qde=a("strong"),gEo=o("data2vec-text"),hEo=o(" \u2014 "),Ej=a("a"),pEo=o("Data2VecTextForMaskedLM"),_Eo=o(" (Data2VecText model)"),uEo=l(),Au=a("li"),Hde=a("strong"),bEo=o("deberta"),vEo=o(" \u2014 "),Cj=a("a"),FEo=o("DebertaForMaskedLM"),TEo=o(" (DeBERTa model)"),MEo=l(),Lu=a("li"),Ude=a("strong"),EEo=o("deberta-v2"),CEo=o(" \u2014 "),wj=a("a"),wEo=o("DebertaV2ForMaskedLM"),AEo=o(" (DeBERTa-v2 model)"),LEo=l(),yu=a("li"),Jde=a("strong"),yEo=o("distilbert"),xEo=o(" \u2014 "),Aj=a("a"),$Eo=o("DistilBertForMaskedLM"),kEo=o(" (DistilBERT model)"),SEo=l(),xu=a("li"),Yde=a("strong"),REo=o("electra"),PEo=o(" \u2014 "),Lj=a("a"),BEo=o("ElectraForPreTraining"),IEo=o(" (ELECTRA model)"),NEo=l(),$u=a("li"),Kde=a("strong"),qEo=o("flaubert"),jEo=o(" \u2014 "),yj=a("a"),DEo=o("FlaubertWithLMHeadModel"),GEo=o(" (FlauBERT model)"),OEo=l(),ku=a("li"),Zde=a("strong"),VEo=o("flava"),XEo=o(" \u2014 "),xj=a("a"),zEo=o("FlavaForPreTraining"),WEo=o(" (FLAVA model)"),QEo=l(),Su=a("li"),ece=a("strong"),HEo=o("fnet"),UEo=o(" \u2014 "),$j=a("a"),JEo=o("FNetForPreTraining"),YEo=o(" (FNet model)"),KEo=l(),Ru=a("li"),oce=a("strong"),ZEo=o("fsmt"),eCo=o(" \u2014 "),kj=a("a"),oCo=o("FSMTForConditionalGeneration"),rCo=o(" (FairSeq Machine-Translation model)"),tCo=l(),Pu=a("li"),rce=a("strong"),aCo=o("funnel"),nCo=o(" \u2014 "),Sj=a("a"),sCo=o("FunnelForPreTraining"),lCo=o(" (Funnel Transformer model)"),iCo=l(),Bu=a("li"),tce=a("strong"),dCo=o("gpt2"),cCo=o(" \u2014 "),Rj=a("a"),fCo=o("GPT2LMHeadModel"),mCo=o(" (OpenAI GPT-2 model)"),gCo=l(),Iu=a("li"),ace=a("strong"),hCo=o("ibert"),pCo=o(" \u2014 "),Pj=a("a"),_Co=o("IBertForMaskedLM"),uCo=o(" (I-BERT model)"),bCo=l(),Nu=a("li"),nce=a("strong"),vCo=o("layoutlm"),FCo=o(" \u2014 "),Bj=a("a"),TCo=o("LayoutLMForMaskedLM"),MCo=o(" (LayoutLM model)"),ECo=l(),qu=a("li"),sce=a("strong"),CCo=o("longformer"),wCo=o(" \u2014 "),Ij=a("a"),ACo=o("LongformerForMaskedLM"),LCo=o(" (Longformer model)"),yCo=l(),ju=a("li"),lce=a("strong"),xCo=o("lxmert"),$Co=o(" \u2014 "),Nj=a("a"),kCo=o("LxmertForPreTraining"),SCo=o(" (LXMERT model)"),RCo=l(),Du=a("li"),ice=a("strong"),PCo=o("megatron-bert"),BCo=o(" \u2014 "),qj=a("a"),ICo=o("MegatronBertForPreTraining"),NCo=o(" (Megatron-BERT model)"),qCo=l(),Gu=a("li"),dce=a("strong"),jCo=o("mobilebert"),DCo=o(" \u2014 "),jj=a("a"),GCo=o("MobileBertForPreTraining"),OCo=o(" (MobileBERT model)"),VCo=l(),Ou=a("li"),cce=a("strong"),XCo=o("mpnet"),zCo=o(" \u2014 "),Dj=a("a"),WCo=o("MPNetForMaskedLM"),QCo=o(" (MPNet model)"),HCo=l(),Vu=a("li"),fce=a("strong"),UCo=o("openai-gpt"),JCo=o(" \u2014 "),Gj=a("a"),YCo=o("OpenAIGPTLMHeadModel"),KCo=o(" (OpenAI GPT model)"),ZCo=l(),Xu=a("li"),mce=a("strong"),e5o=o("retribert"),o5o=o(" \u2014 "),Oj=a("a"),r5o=o("RetriBertModel"),t5o=o(" (RetriBERT model)"),a5o=l(),zu=a("li"),gce=a("strong"),n5o=o("roberta"),s5o=o(" \u2014 "),Vj=a("a"),l5o=o("RobertaForMaskedLM"),i5o=o(" (RoBERTa model)"),d5o=l(),Wu=a("li"),hce=a("strong"),c5o=o("splinter"),f5o=o(" \u2014 "),Xj=a("a"),m5o=o("SplinterForPreTraining"),g5o=o(" (Splinter model)"),h5o=l(),Qu=a("li"),pce=a("strong"),p5o=o("squeezebert"),_5o=o(" \u2014 "),zj=a("a"),u5o=o("SqueezeBertForMaskedLM"),b5o=o(" (SqueezeBERT model)"),v5o=l(),Hu=a("li"),_ce=a("strong"),F5o=o("t5"),T5o=o(" \u2014 "),Wj=a("a"),M5o=o("T5ForConditionalGeneration"),E5o=o(" (T5 model)"),C5o=l(),Uu=a("li"),uce=a("strong"),w5o=o("tapas"),A5o=o(" \u2014 "),Qj=a("a"),L5o=o("TapasForMaskedLM"),y5o=o(" (TAPAS model)"),x5o=l(),Ju=a("li"),bce=a("strong"),$5o=o("transfo-xl"),k5o=o(" \u2014 "),Hj=a("a"),S5o=o("TransfoXLLMHeadModel"),R5o=o(" (Transformer-XL model)"),P5o=l(),Yu=a("li"),vce=a("strong"),B5o=o("unispeech"),I5o=o(" \u2014 "),Uj=a("a"),N5o=o("UniSpeechForPreTraining"),q5o=o(" (UniSpeech model)"),j5o=l(),Ku=a("li"),Fce=a("strong"),D5o=o("unispeech-sat"),G5o=o(" \u2014 "),Jj=a("a"),O5o=o("UniSpeechSatForPreTraining"),V5o=o(" (UniSpeechSat model)"),X5o=l(),Zu=a("li"),Tce=a("strong"),z5o=o("visual_bert"),W5o=o(" \u2014 "),Yj=a("a"),Q5o=o("VisualBertForPreTraining"),H5o=o(" (VisualBERT model)"),U5o=l(),e2=a("li"),Mce=a("strong"),J5o=o("vit_mae"),Y5o=o(" \u2014 "),Kj=a("a"),K5o=o("ViTMAEForPreTraining"),Z5o=o(" (ViTMAE model)"),e3o=l(),o2=a("li"),Ece=a("strong"),o3o=o("wav2vec2"),r3o=o(" \u2014 "),Zj=a("a"),t3o=o("Wav2Vec2ForPreTraining"),a3o=o(" (Wav2Vec2 model)"),n3o=l(),r2=a("li"),Cce=a("strong"),s3o=o("wav2vec2-conformer"),l3o=o(" \u2014 "),eD=a("a"),i3o=o("Wav2Vec2ConformerForPreTraining"),d3o=o(" (Wav2Vec2-Conformer model)"),c3o=l(),t2=a("li"),wce=a("strong"),f3o=o("xlm"),m3o=o(" \u2014 "),oD=a("a"),g3o=o("XLMWithLMHeadModel"),h3o=o(" (XLM model)"),p3o=l(),a2=a("li"),Ace=a("strong"),_3o=o("xlm-roberta"),u3o=o(" \u2014 "),rD=a("a"),b3o=o("XLMRobertaForMaskedLM"),v3o=o(" (XLM-RoBERTa model)"),F3o=l(),n2=a("li"),Lce=a("strong"),T3o=o("xlm-roberta-xl"),M3o=o(" \u2014 "),tD=a("a"),E3o=o("XLMRobertaXLForMaskedLM"),C3o=o(" (XLM-RoBERTa-XL model)"),w3o=l(),s2=a("li"),yce=a("strong"),A3o=o("xlnet"),L3o=o(" \u2014 "),aD=a("a"),y3o=o("XLNetLMHeadModel"),x3o=o(" (XLNet model)"),$3o=l(),l2=a("p"),k3o=o("The model is set in evaluation mode by default using "),xce=a("code"),S3o=o("model.eval()"),R3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),P3o=o("model.train()"),B3o=l(),F(i2.$$.fragment),dDe=l(),Ri=a("h2"),d2=a("a"),kce=a("span"),F(PA.$$.fragment),I3o=l(),Sce=a("span"),N3o=o("AutoModelForCausalLM"),cDe=l(),$o=a("div"),F(BA.$$.fragment),q3o=l(),Pi=a("p"),j3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nD=a("a"),D3o=o("from_pretrained()"),G3o=o(" class method or the "),sD=a("a"),O3o=o("from_config()"),V3o=o(` class
method.`),X3o=l(),IA=a("p"),z3o=o("This class cannot be instantiated directly using "),Rce=a("code"),W3o=o("__init__()"),Q3o=o(" (throws an error)."),H3o=l(),nt=a("div"),F(NA.$$.fragment),U3o=l(),Pce=a("p"),J3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y3o=l(),Bi=a("p"),K3o=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),Z3o=o("not"),e0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),o0o=o("from_pretrained()"),r0o=o(" to load the model weights."),t0o=l(),F(c2.$$.fragment),a0o=l(),Ke=a("div"),F(qA.$$.fragment),n0o=l(),Ice=a("p"),s0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l0o=l(),$a=a("p"),i0o=o("The model class to instantiate is selected based on the "),Nce=a("code"),d0o=o("model_type"),c0o=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),f0o=o("pretrained_model_name_or_path"),m0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),g0o=o("pretrained_model_name_or_path"),h0o=o(":"),p0o=l(),z=a("ul"),f2=a("li"),Dce=a("strong"),_0o=o("bart"),u0o=o(" \u2014 "),iD=a("a"),b0o=o("BartForCausalLM"),v0o=o(" (BART model)"),F0o=l(),m2=a("li"),Gce=a("strong"),T0o=o("bert"),M0o=o(" \u2014 "),dD=a("a"),E0o=o("BertLMHeadModel"),C0o=o(" (BERT model)"),w0o=l(),g2=a("li"),Oce=a("strong"),A0o=o("bert-generation"),L0o=o(" \u2014 "),cD=a("a"),y0o=o("BertGenerationDecoder"),x0o=o(" (Bert Generation model)"),$0o=l(),h2=a("li"),Vce=a("strong"),k0o=o("big_bird"),S0o=o(" \u2014 "),fD=a("a"),R0o=o("BigBirdForCausalLM"),P0o=o(" (BigBird model)"),B0o=l(),p2=a("li"),Xce=a("strong"),I0o=o("bigbird_pegasus"),N0o=o(" \u2014 "),mD=a("a"),q0o=o("BigBirdPegasusForCausalLM"),j0o=o(" (BigBird-Pegasus model)"),D0o=l(),_2=a("li"),zce=a("strong"),G0o=o("blenderbot"),O0o=o(" \u2014 "),gD=a("a"),V0o=o("BlenderbotForCausalLM"),X0o=o(" (Blenderbot model)"),z0o=l(),u2=a("li"),Wce=a("strong"),W0o=o("blenderbot-small"),Q0o=o(" \u2014 "),hD=a("a"),H0o=o("BlenderbotSmallForCausalLM"),U0o=o(" (BlenderbotSmall model)"),J0o=l(),b2=a("li"),Qce=a("strong"),Y0o=o("bloom"),K0o=o(" \u2014 "),pD=a("a"),Z0o=o("BloomForCausalLM"),ewo=o(" (BLOOM model)"),owo=l(),v2=a("li"),Hce=a("strong"),rwo=o("camembert"),two=o(" \u2014 "),_D=a("a"),awo=o("CamembertForCausalLM"),nwo=o(" (CamemBERT model)"),swo=l(),F2=a("li"),Uce=a("strong"),lwo=o("ctrl"),iwo=o(" \u2014 "),uD=a("a"),dwo=o("CTRLLMHeadModel"),cwo=o(" (CTRL model)"),fwo=l(),T2=a("li"),Jce=a("strong"),mwo=o("data2vec-text"),gwo=o(" \u2014 "),bD=a("a"),hwo=o("Data2VecTextForCausalLM"),pwo=o(" (Data2VecText model)"),_wo=l(),M2=a("li"),Yce=a("strong"),uwo=o("electra"),bwo=o(" \u2014 "),vD=a("a"),vwo=o("ElectraForCausalLM"),Fwo=o(" (ELECTRA model)"),Two=l(),E2=a("li"),Kce=a("strong"),Mwo=o("gpt2"),Ewo=o(" \u2014 "),FD=a("a"),Cwo=o("GPT2LMHeadModel"),wwo=o(" (OpenAI GPT-2 model)"),Awo=l(),C2=a("li"),Zce=a("strong"),Lwo=o("gpt_neo"),ywo=o(" \u2014 "),TD=a("a"),xwo=o("GPTNeoForCausalLM"),$wo=o(" (GPT Neo model)"),kwo=l(),w2=a("li"),efe=a("strong"),Swo=o("gpt_neox"),Rwo=o(" \u2014 "),MD=a("a"),Pwo=o("GPTNeoXForCausalLM"),Bwo=o(" (GPT NeoX model)"),Iwo=l(),A2=a("li"),ofe=a("strong"),Nwo=o("gptj"),qwo=o(" \u2014 "),ED=a("a"),jwo=o("GPTJForCausalLM"),Dwo=o(" (GPT-J model)"),Gwo=l(),L2=a("li"),rfe=a("strong"),Owo=o("marian"),Vwo=o(" \u2014 "),CD=a("a"),Xwo=o("MarianForCausalLM"),zwo=o(" (Marian model)"),Wwo=l(),y2=a("li"),tfe=a("strong"),Qwo=o("mbart"),Hwo=o(" \u2014 "),wD=a("a"),Uwo=o("MBartForCausalLM"),Jwo=o(" (mBART model)"),Ywo=l(),x2=a("li"),afe=a("strong"),Kwo=o("megatron-bert"),Zwo=o(" \u2014 "),AD=a("a"),eAo=o("MegatronBertForCausalLM"),oAo=o(" (Megatron-BERT model)"),rAo=l(),$2=a("li"),nfe=a("strong"),tAo=o("openai-gpt"),aAo=o(" \u2014 "),LD=a("a"),nAo=o("OpenAIGPTLMHeadModel"),sAo=o(" (OpenAI GPT model)"),lAo=l(),k2=a("li"),sfe=a("strong"),iAo=o("opt"),dAo=o(" \u2014 "),yD=a("a"),cAo=o("OPTForCausalLM"),fAo=o(" (OPT model)"),mAo=l(),S2=a("li"),lfe=a("strong"),gAo=o("pegasus"),hAo=o(" \u2014 "),xD=a("a"),pAo=o("PegasusForCausalLM"),_Ao=o(" (Pegasus model)"),uAo=l(),R2=a("li"),ife=a("strong"),bAo=o("plbart"),vAo=o(" \u2014 "),$D=a("a"),FAo=o("PLBartForCausalLM"),TAo=o(" (PLBart model)"),MAo=l(),P2=a("li"),dfe=a("strong"),EAo=o("prophetnet"),CAo=o(" \u2014 "),kD=a("a"),wAo=o("ProphetNetForCausalLM"),AAo=o(" (ProphetNet model)"),LAo=l(),B2=a("li"),cfe=a("strong"),yAo=o("qdqbert"),xAo=o(" \u2014 "),SD=a("a"),$Ao=o("QDQBertLMHeadModel"),kAo=o(" (QDQBert model)"),SAo=l(),I2=a("li"),ffe=a("strong"),RAo=o("reformer"),PAo=o(" \u2014 "),RD=a("a"),BAo=o("ReformerModelWithLMHead"),IAo=o(" (Reformer model)"),NAo=l(),N2=a("li"),mfe=a("strong"),qAo=o("rembert"),jAo=o(" \u2014 "),PD=a("a"),DAo=o("RemBertForCausalLM"),GAo=o(" (RemBERT model)"),OAo=l(),q2=a("li"),gfe=a("strong"),VAo=o("roberta"),XAo=o(" \u2014 "),BD=a("a"),zAo=o("RobertaForCausalLM"),WAo=o(" (RoBERTa model)"),QAo=l(),j2=a("li"),hfe=a("strong"),HAo=o("roformer"),UAo=o(" \u2014 "),ID=a("a"),JAo=o("RoFormerForCausalLM"),YAo=o(" (RoFormer model)"),KAo=l(),D2=a("li"),pfe=a("strong"),ZAo=o("speech_to_text_2"),eLo=o(" \u2014 "),ND=a("a"),oLo=o("Speech2Text2ForCausalLM"),rLo=o(" (Speech2Text2 model)"),tLo=l(),G2=a("li"),_fe=a("strong"),aLo=o("transfo-xl"),nLo=o(" \u2014 "),qD=a("a"),sLo=o("TransfoXLLMHeadModel"),lLo=o(" (Transformer-XL model)"),iLo=l(),O2=a("li"),ufe=a("strong"),dLo=o("trocr"),cLo=o(" \u2014 "),jD=a("a"),fLo=o("TrOCRForCausalLM"),mLo=o(" (TrOCR model)"),gLo=l(),V2=a("li"),bfe=a("strong"),hLo=o("xglm"),pLo=o(" \u2014 "),DD=a("a"),_Lo=o("XGLMForCausalLM"),uLo=o(" (XGLM model)"),bLo=l(),X2=a("li"),vfe=a("strong"),vLo=o("xlm"),FLo=o(" \u2014 "),GD=a("a"),TLo=o("XLMWithLMHeadModel"),MLo=o(" (XLM model)"),ELo=l(),z2=a("li"),Ffe=a("strong"),CLo=o("xlm-prophetnet"),wLo=o(" \u2014 "),OD=a("a"),ALo=o("XLMProphetNetForCausalLM"),LLo=o(" (XLM-ProphetNet model)"),yLo=l(),W2=a("li"),Tfe=a("strong"),xLo=o("xlm-roberta"),$Lo=o(" \u2014 "),VD=a("a"),kLo=o("XLMRobertaForCausalLM"),SLo=o(" (XLM-RoBERTa model)"),RLo=l(),Q2=a("li"),Mfe=a("strong"),PLo=o("xlm-roberta-xl"),BLo=o(" \u2014 "),XD=a("a"),ILo=o("XLMRobertaXLForCausalLM"),NLo=o(" (XLM-RoBERTa-XL model)"),qLo=l(),H2=a("li"),Efe=a("strong"),jLo=o("xlnet"),DLo=o(" \u2014 "),zD=a("a"),GLo=o("XLNetLMHeadModel"),OLo=o(" (XLNet model)"),VLo=l(),U2=a("p"),XLo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),zLo=o("model.eval()"),WLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),QLo=o("model.train()"),HLo=l(),F(J2.$$.fragment),fDe=l(),Ii=a("h2"),Y2=a("a"),Afe=a("span"),F(jA.$$.fragment),ULo=l(),Lfe=a("span"),JLo=o("AutoModelForMaskedLM"),mDe=l(),ko=a("div"),F(DA.$$.fragment),YLo=l(),Ni=a("p"),KLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WD=a("a"),ZLo=o("from_pretrained()"),eyo=o(" class method or the "),QD=a("a"),oyo=o("from_config()"),ryo=o(` class
method.`),tyo=l(),GA=a("p"),ayo=o("This class cannot be instantiated directly using "),yfe=a("code"),nyo=o("__init__()"),syo=o(" (throws an error)."),lyo=l(),st=a("div"),F(OA.$$.fragment),iyo=l(),xfe=a("p"),dyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cyo=l(),qi=a("p"),fyo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),myo=o("not"),gyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),hyo=o("from_pretrained()"),pyo=o(" to load the model weights."),_yo=l(),F(K2.$$.fragment),uyo=l(),Ze=a("div"),F(VA.$$.fragment),byo=l(),kfe=a("p"),vyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fyo=l(),ka=a("p"),Tyo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),Myo=o("model_type"),Eyo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),Cyo=o("pretrained_model_name_or_path"),wyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),Ayo=o("pretrained_model_name_or_path"),Lyo=o(":"),yyo=l(),Q=a("ul"),Z2=a("li"),Bfe=a("strong"),xyo=o("albert"),$yo=o(" \u2014 "),UD=a("a"),kyo=o("AlbertForMaskedLM"),Syo=o(" (ALBERT model)"),Ryo=l(),e1=a("li"),Ife=a("strong"),Pyo=o("bart"),Byo=o(" \u2014 "),JD=a("a"),Iyo=o("BartForConditionalGeneration"),Nyo=o(" (BART model)"),qyo=l(),o1=a("li"),Nfe=a("strong"),jyo=o("bert"),Dyo=o(" \u2014 "),YD=a("a"),Gyo=o("BertForMaskedLM"),Oyo=o(" (BERT model)"),Vyo=l(),r1=a("li"),qfe=a("strong"),Xyo=o("big_bird"),zyo=o(" \u2014 "),KD=a("a"),Wyo=o("BigBirdForMaskedLM"),Qyo=o(" (BigBird model)"),Hyo=l(),t1=a("li"),jfe=a("strong"),Uyo=o("camembert"),Jyo=o(" \u2014 "),ZD=a("a"),Yyo=o("CamembertForMaskedLM"),Kyo=o(" (CamemBERT model)"),Zyo=l(),a1=a("li"),Dfe=a("strong"),e8o=o("convbert"),o8o=o(" \u2014 "),eG=a("a"),r8o=o("ConvBertForMaskedLM"),t8o=o(" (ConvBERT model)"),a8o=l(),n1=a("li"),Gfe=a("strong"),n8o=o("data2vec-text"),s8o=o(" \u2014 "),oG=a("a"),l8o=o("Data2VecTextForMaskedLM"),i8o=o(" (Data2VecText model)"),d8o=l(),s1=a("li"),Ofe=a("strong"),c8o=o("deberta"),f8o=o(" \u2014 "),rG=a("a"),m8o=o("DebertaForMaskedLM"),g8o=o(" (DeBERTa model)"),h8o=l(),l1=a("li"),Vfe=a("strong"),p8o=o("deberta-v2"),_8o=o(" \u2014 "),tG=a("a"),u8o=o("DebertaV2ForMaskedLM"),b8o=o(" (DeBERTa-v2 model)"),v8o=l(),i1=a("li"),Xfe=a("strong"),F8o=o("distilbert"),T8o=o(" \u2014 "),aG=a("a"),M8o=o("DistilBertForMaskedLM"),E8o=o(" (DistilBERT model)"),C8o=l(),d1=a("li"),zfe=a("strong"),w8o=o("electra"),A8o=o(" \u2014 "),nG=a("a"),L8o=o("ElectraForMaskedLM"),y8o=o(" (ELECTRA model)"),x8o=l(),c1=a("li"),Wfe=a("strong"),$8o=o("flaubert"),k8o=o(" \u2014 "),sG=a("a"),S8o=o("FlaubertWithLMHeadModel"),R8o=o(" (FlauBERT model)"),P8o=l(),f1=a("li"),Qfe=a("strong"),B8o=o("fnet"),I8o=o(" \u2014 "),lG=a("a"),N8o=o("FNetForMaskedLM"),q8o=o(" (FNet model)"),j8o=l(),m1=a("li"),Hfe=a("strong"),D8o=o("funnel"),G8o=o(" \u2014 "),iG=a("a"),O8o=o("FunnelForMaskedLM"),V8o=o(" (Funnel Transformer model)"),X8o=l(),g1=a("li"),Ufe=a("strong"),z8o=o("ibert"),W8o=o(" \u2014 "),dG=a("a"),Q8o=o("IBertForMaskedLM"),H8o=o(" (I-BERT model)"),U8o=l(),h1=a("li"),Jfe=a("strong"),J8o=o("layoutlm"),Y8o=o(" \u2014 "),cG=a("a"),K8o=o("LayoutLMForMaskedLM"),Z8o=o(" (LayoutLM model)"),exo=l(),p1=a("li"),Yfe=a("strong"),oxo=o("longformer"),rxo=o(" \u2014 "),fG=a("a"),txo=o("LongformerForMaskedLM"),axo=o(" (Longformer model)"),nxo=l(),_1=a("li"),Kfe=a("strong"),sxo=o("luke"),lxo=o(" \u2014 "),mG=a("a"),ixo=o("LukeForMaskedLM"),dxo=o(" (LUKE model)"),cxo=l(),u1=a("li"),Zfe=a("strong"),fxo=o("mbart"),mxo=o(" \u2014 "),gG=a("a"),gxo=o("MBartForConditionalGeneration"),hxo=o(" (mBART model)"),pxo=l(),b1=a("li"),eme=a("strong"),_xo=o("megatron-bert"),uxo=o(" \u2014 "),hG=a("a"),bxo=o("MegatronBertForMaskedLM"),vxo=o(" (Megatron-BERT model)"),Fxo=l(),v1=a("li"),ome=a("strong"),Txo=o("mobilebert"),Mxo=o(" \u2014 "),pG=a("a"),Exo=o("MobileBertForMaskedLM"),Cxo=o(" (MobileBERT model)"),wxo=l(),F1=a("li"),rme=a("strong"),Axo=o("mpnet"),Lxo=o(" \u2014 "),_G=a("a"),yxo=o("MPNetForMaskedLM"),xxo=o(" (MPNet model)"),$xo=l(),T1=a("li"),tme=a("strong"),kxo=o("nystromformer"),Sxo=o(" \u2014 "),uG=a("a"),Rxo=o("NystromformerForMaskedLM"),Pxo=o(" (Nystr\xF6mformer model)"),Bxo=l(),M1=a("li"),ame=a("strong"),Ixo=o("perceiver"),Nxo=o(" \u2014 "),bG=a("a"),qxo=o("PerceiverForMaskedLM"),jxo=o(" (Perceiver model)"),Dxo=l(),E1=a("li"),nme=a("strong"),Gxo=o("qdqbert"),Oxo=o(" \u2014 "),vG=a("a"),Vxo=o("QDQBertForMaskedLM"),Xxo=o(" (QDQBert model)"),zxo=l(),C1=a("li"),sme=a("strong"),Wxo=o("reformer"),Qxo=o(" \u2014 "),FG=a("a"),Hxo=o("ReformerForMaskedLM"),Uxo=o(" (Reformer model)"),Jxo=l(),w1=a("li"),lme=a("strong"),Yxo=o("rembert"),Kxo=o(" \u2014 "),TG=a("a"),Zxo=o("RemBertForMaskedLM"),e$o=o(" (RemBERT model)"),o$o=l(),A1=a("li"),ime=a("strong"),r$o=o("roberta"),t$o=o(" \u2014 "),MG=a("a"),a$o=o("RobertaForMaskedLM"),n$o=o(" (RoBERTa model)"),s$o=l(),L1=a("li"),dme=a("strong"),l$o=o("roformer"),i$o=o(" \u2014 "),EG=a("a"),d$o=o("RoFormerForMaskedLM"),c$o=o(" (RoFormer model)"),f$o=l(),y1=a("li"),cme=a("strong"),m$o=o("squeezebert"),g$o=o(" \u2014 "),CG=a("a"),h$o=o("SqueezeBertForMaskedLM"),p$o=o(" (SqueezeBERT model)"),_$o=l(),x1=a("li"),fme=a("strong"),u$o=o("tapas"),b$o=o(" \u2014 "),wG=a("a"),v$o=o("TapasForMaskedLM"),F$o=o(" (TAPAS model)"),T$o=l(),$1=a("li"),mme=a("strong"),M$o=o("wav2vec2"),E$o=o(" \u2014 "),gme=a("code"),C$o=o("Wav2Vec2ForMaskedLM"),w$o=o(" (Wav2Vec2 model)"),A$o=l(),k1=a("li"),hme=a("strong"),L$o=o("xlm"),y$o=o(" \u2014 "),AG=a("a"),x$o=o("XLMWithLMHeadModel"),$$o=o(" (XLM model)"),k$o=l(),S1=a("li"),pme=a("strong"),S$o=o("xlm-roberta"),R$o=o(" \u2014 "),LG=a("a"),P$o=o("XLMRobertaForMaskedLM"),B$o=o(" (XLM-RoBERTa model)"),I$o=l(),R1=a("li"),_me=a("strong"),N$o=o("xlm-roberta-xl"),q$o=o(" \u2014 "),yG=a("a"),j$o=o("XLMRobertaXLForMaskedLM"),D$o=o(" (XLM-RoBERTa-XL model)"),G$o=l(),P1=a("li"),ume=a("strong"),O$o=o("yoso"),V$o=o(" \u2014 "),xG=a("a"),X$o=o("YosoForMaskedLM"),z$o=o(" (YOSO model)"),W$o=l(),B1=a("p"),Q$o=o("The model is set in evaluation mode by default using "),bme=a("code"),H$o=o("model.eval()"),U$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),J$o=o("model.train()"),Y$o=l(),F(I1.$$.fragment),gDe=l(),ji=a("h2"),N1=a("a"),Fme=a("span"),F(XA.$$.fragment),K$o=l(),Tme=a("span"),Z$o=o("AutoModelForSeq2SeqLM"),hDe=l(),So=a("div"),F(zA.$$.fragment),eko=l(),Di=a("p"),oko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$G=a("a"),rko=o("from_pretrained()"),tko=o(" class method or the "),kG=a("a"),ako=o("from_config()"),nko=o(` class
method.`),sko=l(),WA=a("p"),lko=o("This class cannot be instantiated directly using "),Mme=a("code"),iko=o("__init__()"),dko=o(" (throws an error)."),cko=l(),lt=a("div"),F(QA.$$.fragment),fko=l(),Eme=a("p"),mko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gko=l(),Gi=a("p"),hko=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),pko=o("not"),_ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),uko=o("from_pretrained()"),bko=o(" to load the model weights."),vko=l(),F(q1.$$.fragment),Fko=l(),eo=a("div"),F(HA.$$.fragment),Tko=l(),wme=a("p"),Mko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Eko=l(),Sa=a("p"),Cko=o("The model class to instantiate is selected based on the "),Ame=a("code"),wko=o("model_type"),Ako=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),Lko=o("pretrained_model_name_or_path"),yko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),xko=o("pretrained_model_name_or_path"),$ko=o(":"),kko=l(),pe=a("ul"),j1=a("li"),xme=a("strong"),Sko=o("bart"),Rko=o(" \u2014 "),RG=a("a"),Pko=o("BartForConditionalGeneration"),Bko=o(" (BART model)"),Iko=l(),D1=a("li"),$me=a("strong"),Nko=o("bigbird_pegasus"),qko=o(" \u2014 "),PG=a("a"),jko=o("BigBirdPegasusForConditionalGeneration"),Dko=o(" (BigBird-Pegasus model)"),Gko=l(),G1=a("li"),kme=a("strong"),Oko=o("blenderbot"),Vko=o(" \u2014 "),BG=a("a"),Xko=o("BlenderbotForConditionalGeneration"),zko=o(" (Blenderbot model)"),Wko=l(),O1=a("li"),Sme=a("strong"),Qko=o("blenderbot-small"),Hko=o(" \u2014 "),IG=a("a"),Uko=o("BlenderbotSmallForConditionalGeneration"),Jko=o(" (BlenderbotSmall model)"),Yko=l(),V1=a("li"),Rme=a("strong"),Kko=o("encoder-decoder"),Zko=o(" \u2014 "),NG=a("a"),eSo=o("EncoderDecoderModel"),oSo=o(" (Encoder decoder model)"),rSo=l(),X1=a("li"),Pme=a("strong"),tSo=o("fsmt"),aSo=o(" \u2014 "),qG=a("a"),nSo=o("FSMTForConditionalGeneration"),sSo=o(" (FairSeq Machine-Translation model)"),lSo=l(),z1=a("li"),Bme=a("strong"),iSo=o("led"),dSo=o(" \u2014 "),jG=a("a"),cSo=o("LEDForConditionalGeneration"),fSo=o(" (LED model)"),mSo=l(),W1=a("li"),Ime=a("strong"),gSo=o("longt5"),hSo=o(" \u2014 "),DG=a("a"),pSo=o("LongT5ForConditionalGeneration"),_So=o(" (LongT5 model)"),uSo=l(),Q1=a("li"),Nme=a("strong"),bSo=o("m2m_100"),vSo=o(" \u2014 "),GG=a("a"),FSo=o("M2M100ForConditionalGeneration"),TSo=o(" (M2M100 model)"),MSo=l(),H1=a("li"),qme=a("strong"),ESo=o("marian"),CSo=o(" \u2014 "),OG=a("a"),wSo=o("MarianMTModel"),ASo=o(" (Marian model)"),LSo=l(),U1=a("li"),jme=a("strong"),ySo=o("mbart"),xSo=o(" \u2014 "),VG=a("a"),$So=o("MBartForConditionalGeneration"),kSo=o(" (mBART model)"),SSo=l(),J1=a("li"),Dme=a("strong"),RSo=o("mt5"),PSo=o(" \u2014 "),XG=a("a"),BSo=o("MT5ForConditionalGeneration"),ISo=o(" (MT5 model)"),NSo=l(),Y1=a("li"),Gme=a("strong"),qSo=o("pegasus"),jSo=o(" \u2014 "),zG=a("a"),DSo=o("PegasusForConditionalGeneration"),GSo=o(" (Pegasus model)"),OSo=l(),K1=a("li"),Ome=a("strong"),VSo=o("plbart"),XSo=o(" \u2014 "),WG=a("a"),zSo=o("PLBartForConditionalGeneration"),WSo=o(" (PLBart model)"),QSo=l(),Z1=a("li"),Vme=a("strong"),HSo=o("prophetnet"),USo=o(" \u2014 "),QG=a("a"),JSo=o("ProphetNetForConditionalGeneration"),YSo=o(" (ProphetNet model)"),KSo=l(),eb=a("li"),Xme=a("strong"),ZSo=o("t5"),eRo=o(" \u2014 "),HG=a("a"),oRo=o("T5ForConditionalGeneration"),rRo=o(" (T5 model)"),tRo=l(),ob=a("li"),zme=a("strong"),aRo=o("xlm-prophetnet"),nRo=o(" \u2014 "),UG=a("a"),sRo=o("XLMProphetNetForConditionalGeneration"),lRo=o(" (XLM-ProphetNet model)"),iRo=l(),rb=a("p"),dRo=o("The model is set in evaluation mode by default using "),Wme=a("code"),cRo=o("model.eval()"),fRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),mRo=o("model.train()"),gRo=l(),F(tb.$$.fragment),pDe=l(),Oi=a("h2"),ab=a("a"),Hme=a("span"),F(UA.$$.fragment),hRo=l(),Ume=a("span"),pRo=o("AutoModelForSequenceClassification"),_De=l(),Ro=a("div"),F(JA.$$.fragment),_Ro=l(),Vi=a("p"),uRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JG=a("a"),bRo=o("from_pretrained()"),vRo=o(" class method or the "),YG=a("a"),FRo=o("from_config()"),TRo=o(` class
method.`),MRo=l(),YA=a("p"),ERo=o("This class cannot be instantiated directly using "),Jme=a("code"),CRo=o("__init__()"),wRo=o(" (throws an error)."),ARo=l(),it=a("div"),F(KA.$$.fragment),LRo=l(),Yme=a("p"),yRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xRo=l(),Xi=a("p"),$Ro=o(`Note:
Loading a model from its configuration file does `),Kme=a("strong"),kRo=o("not"),SRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),RRo=o("from_pretrained()"),PRo=o(" to load the model weights."),BRo=l(),F(nb.$$.fragment),IRo=l(),oo=a("div"),F(ZA.$$.fragment),NRo=l(),Zme=a("p"),qRo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jRo=l(),Ra=a("p"),DRo=o("The model class to instantiate is selected based on the "),ege=a("code"),GRo=o("model_type"),ORo=o(` property of the config object (either
passed as an argument or loaded from `),oge=a("code"),VRo=o("pretrained_model_name_or_path"),XRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=a("code"),zRo=o("pretrained_model_name_or_path"),WRo=o(":"),QRo=l(),N=a("ul"),sb=a("li"),tge=a("strong"),HRo=o("albert"),URo=o(" \u2014 "),ZG=a("a"),JRo=o("AlbertForSequenceClassification"),YRo=o(" (ALBERT model)"),KRo=l(),lb=a("li"),age=a("strong"),ZRo=o("bart"),ePo=o(" \u2014 "),eO=a("a"),oPo=o("BartForSequenceClassification"),rPo=o(" (BART model)"),tPo=l(),ib=a("li"),nge=a("strong"),aPo=o("bert"),nPo=o(" \u2014 "),oO=a("a"),sPo=o("BertForSequenceClassification"),lPo=o(" (BERT model)"),iPo=l(),db=a("li"),sge=a("strong"),dPo=o("big_bird"),cPo=o(" \u2014 "),rO=a("a"),fPo=o("BigBirdForSequenceClassification"),mPo=o(" (BigBird model)"),gPo=l(),cb=a("li"),lge=a("strong"),hPo=o("bigbird_pegasus"),pPo=o(" \u2014 "),tO=a("a"),_Po=o("BigBirdPegasusForSequenceClassification"),uPo=o(" (BigBird-Pegasus model)"),bPo=l(),fb=a("li"),ige=a("strong"),vPo=o("camembert"),FPo=o(" \u2014 "),aO=a("a"),TPo=o("CamembertForSequenceClassification"),MPo=o(" (CamemBERT model)"),EPo=l(),mb=a("li"),dge=a("strong"),CPo=o("canine"),wPo=o(" \u2014 "),nO=a("a"),APo=o("CanineForSequenceClassification"),LPo=o(" (CANINE model)"),yPo=l(),gb=a("li"),cge=a("strong"),xPo=o("convbert"),$Po=o(" \u2014 "),sO=a("a"),kPo=o("ConvBertForSequenceClassification"),SPo=o(" (ConvBERT model)"),RPo=l(),hb=a("li"),fge=a("strong"),PPo=o("ctrl"),BPo=o(" \u2014 "),lO=a("a"),IPo=o("CTRLForSequenceClassification"),NPo=o(" (CTRL model)"),qPo=l(),pb=a("li"),mge=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),iO=a("a"),GPo=o("Data2VecTextForSequenceClassification"),OPo=o(" (Data2VecText model)"),VPo=l(),_b=a("li"),gge=a("strong"),XPo=o("deberta"),zPo=o(" \u2014 "),dO=a("a"),WPo=o("DebertaForSequenceClassification"),QPo=o(" (DeBERTa model)"),HPo=l(),ub=a("li"),hge=a("strong"),UPo=o("deberta-v2"),JPo=o(" \u2014 "),cO=a("a"),YPo=o("DebertaV2ForSequenceClassification"),KPo=o(" (DeBERTa-v2 model)"),ZPo=l(),bb=a("li"),pge=a("strong"),eBo=o("distilbert"),oBo=o(" \u2014 "),fO=a("a"),rBo=o("DistilBertForSequenceClassification"),tBo=o(" (DistilBERT model)"),aBo=l(),vb=a("li"),_ge=a("strong"),nBo=o("electra"),sBo=o(" \u2014 "),mO=a("a"),lBo=o("ElectraForSequenceClassification"),iBo=o(" (ELECTRA model)"),dBo=l(),Fb=a("li"),uge=a("strong"),cBo=o("flaubert"),fBo=o(" \u2014 "),gO=a("a"),mBo=o("FlaubertForSequenceClassification"),gBo=o(" (FlauBERT model)"),hBo=l(),Tb=a("li"),bge=a("strong"),pBo=o("fnet"),_Bo=o(" \u2014 "),hO=a("a"),uBo=o("FNetForSequenceClassification"),bBo=o(" (FNet model)"),vBo=l(),Mb=a("li"),vge=a("strong"),FBo=o("funnel"),TBo=o(" \u2014 "),pO=a("a"),MBo=o("FunnelForSequenceClassification"),EBo=o(" (Funnel Transformer model)"),CBo=l(),Eb=a("li"),Fge=a("strong"),wBo=o("gpt2"),ABo=o(" \u2014 "),_O=a("a"),LBo=o("GPT2ForSequenceClassification"),yBo=o(" (OpenAI GPT-2 model)"),xBo=l(),Cb=a("li"),Tge=a("strong"),$Bo=o("gpt_neo"),kBo=o(" \u2014 "),uO=a("a"),SBo=o("GPTNeoForSequenceClassification"),RBo=o(" (GPT Neo model)"),PBo=l(),wb=a("li"),Mge=a("strong"),BBo=o("gptj"),IBo=o(" \u2014 "),bO=a("a"),NBo=o("GPTJForSequenceClassification"),qBo=o(" (GPT-J model)"),jBo=l(),Ab=a("li"),Ege=a("strong"),DBo=o("ibert"),GBo=o(" \u2014 "),vO=a("a"),OBo=o("IBertForSequenceClassification"),VBo=o(" (I-BERT model)"),XBo=l(),Lb=a("li"),Cge=a("strong"),zBo=o("layoutlm"),WBo=o(" \u2014 "),FO=a("a"),QBo=o("LayoutLMForSequenceClassification"),HBo=o(" (LayoutLM model)"),UBo=l(),yb=a("li"),wge=a("strong"),JBo=o("layoutlmv2"),YBo=o(" \u2014 "),TO=a("a"),KBo=o("LayoutLMv2ForSequenceClassification"),ZBo=o(" (LayoutLMv2 model)"),eIo=l(),xb=a("li"),Age=a("strong"),oIo=o("layoutlmv3"),rIo=o(" \u2014 "),MO=a("a"),tIo=o("LayoutLMv3ForSequenceClassification"),aIo=o(" (LayoutLMv3 model)"),nIo=l(),$b=a("li"),Lge=a("strong"),sIo=o("led"),lIo=o(" \u2014 "),EO=a("a"),iIo=o("LEDForSequenceClassification"),dIo=o(" (LED model)"),cIo=l(),kb=a("li"),yge=a("strong"),fIo=o("longformer"),mIo=o(" \u2014 "),CO=a("a"),gIo=o("LongformerForSequenceClassification"),hIo=o(" (Longformer model)"),pIo=l(),Sb=a("li"),xge=a("strong"),_Io=o("mbart"),uIo=o(" \u2014 "),wO=a("a"),bIo=o("MBartForSequenceClassification"),vIo=o(" (mBART model)"),FIo=l(),Rb=a("li"),$ge=a("strong"),TIo=o("megatron-bert"),MIo=o(" \u2014 "),AO=a("a"),EIo=o("MegatronBertForSequenceClassification"),CIo=o(" (Megatron-BERT model)"),wIo=l(),Pb=a("li"),kge=a("strong"),AIo=o("mobilebert"),LIo=o(" \u2014 "),LO=a("a"),yIo=o("MobileBertForSequenceClassification"),xIo=o(" (MobileBERT model)"),$Io=l(),Bb=a("li"),Sge=a("strong"),kIo=o("mpnet"),SIo=o(" \u2014 "),yO=a("a"),RIo=o("MPNetForSequenceClassification"),PIo=o(" (MPNet model)"),BIo=l(),Ib=a("li"),Rge=a("strong"),IIo=o("nystromformer"),NIo=o(" \u2014 "),xO=a("a"),qIo=o("NystromformerForSequenceClassification"),jIo=o(" (Nystr\xF6mformer model)"),DIo=l(),Nb=a("li"),Pge=a("strong"),GIo=o("openai-gpt"),OIo=o(" \u2014 "),$O=a("a"),VIo=o("OpenAIGPTForSequenceClassification"),XIo=o(" (OpenAI GPT model)"),zIo=l(),qb=a("li"),Bge=a("strong"),WIo=o("perceiver"),QIo=o(" \u2014 "),kO=a("a"),HIo=o("PerceiverForSequenceClassification"),UIo=o(" (Perceiver model)"),JIo=l(),jb=a("li"),Ige=a("strong"),YIo=o("plbart"),KIo=o(" \u2014 "),SO=a("a"),ZIo=o("PLBartForSequenceClassification"),eNo=o(" (PLBart model)"),oNo=l(),Db=a("li"),Nge=a("strong"),rNo=o("qdqbert"),tNo=o(" \u2014 "),RO=a("a"),aNo=o("QDQBertForSequenceClassification"),nNo=o(" (QDQBert model)"),sNo=l(),Gb=a("li"),qge=a("strong"),lNo=o("reformer"),iNo=o(" \u2014 "),PO=a("a"),dNo=o("ReformerForSequenceClassification"),cNo=o(" (Reformer model)"),fNo=l(),Ob=a("li"),jge=a("strong"),mNo=o("rembert"),gNo=o(" \u2014 "),BO=a("a"),hNo=o("RemBertForSequenceClassification"),pNo=o(" (RemBERT model)"),_No=l(),Vb=a("li"),Dge=a("strong"),uNo=o("roberta"),bNo=o(" \u2014 "),IO=a("a"),vNo=o("RobertaForSequenceClassification"),FNo=o(" (RoBERTa model)"),TNo=l(),Xb=a("li"),Gge=a("strong"),MNo=o("roformer"),ENo=o(" \u2014 "),NO=a("a"),CNo=o("RoFormerForSequenceClassification"),wNo=o(" (RoFormer model)"),ANo=l(),zb=a("li"),Oge=a("strong"),LNo=o("squeezebert"),yNo=o(" \u2014 "),qO=a("a"),xNo=o("SqueezeBertForSequenceClassification"),$No=o(" (SqueezeBERT model)"),kNo=l(),Wb=a("li"),Vge=a("strong"),SNo=o("tapas"),RNo=o(" \u2014 "),jO=a("a"),PNo=o("TapasForSequenceClassification"),BNo=o(" (TAPAS model)"),INo=l(),Qb=a("li"),Xge=a("strong"),NNo=o("transfo-xl"),qNo=o(" \u2014 "),DO=a("a"),jNo=o("TransfoXLForSequenceClassification"),DNo=o(" (Transformer-XL model)"),GNo=l(),Hb=a("li"),zge=a("strong"),ONo=o("xlm"),VNo=o(" \u2014 "),GO=a("a"),XNo=o("XLMForSequenceClassification"),zNo=o(" (XLM model)"),WNo=l(),Ub=a("li"),Wge=a("strong"),QNo=o("xlm-roberta"),HNo=o(" \u2014 "),OO=a("a"),UNo=o("XLMRobertaForSequenceClassification"),JNo=o(" (XLM-RoBERTa model)"),YNo=l(),Jb=a("li"),Qge=a("strong"),KNo=o("xlm-roberta-xl"),ZNo=o(" \u2014 "),VO=a("a"),eqo=o("XLMRobertaXLForSequenceClassification"),oqo=o(" (XLM-RoBERTa-XL model)"),rqo=l(),Yb=a("li"),Hge=a("strong"),tqo=o("xlnet"),aqo=o(" \u2014 "),XO=a("a"),nqo=o("XLNetForSequenceClassification"),sqo=o(" (XLNet model)"),lqo=l(),Kb=a("li"),Uge=a("strong"),iqo=o("yoso"),dqo=o(" \u2014 "),zO=a("a"),cqo=o("YosoForSequenceClassification"),fqo=o(" (YOSO model)"),mqo=l(),Zb=a("p"),gqo=o("The model is set in evaluation mode by default using "),Jge=a("code"),hqo=o("model.eval()"),pqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),_qo=o("model.train()"),uqo=l(),F(ev.$$.fragment),uDe=l(),zi=a("h2"),ov=a("a"),Kge=a("span"),F(eL.$$.fragment),bqo=l(),Zge=a("span"),vqo=o("AutoModelForMultipleChoice"),bDe=l(),Po=a("div"),F(oL.$$.fragment),Fqo=l(),Wi=a("p"),Tqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WO=a("a"),Mqo=o("from_pretrained()"),Eqo=o(" class method or the "),QO=a("a"),Cqo=o("from_config()"),wqo=o(` class
method.`),Aqo=l(),rL=a("p"),Lqo=o("This class cannot be instantiated directly using "),ehe=a("code"),yqo=o("__init__()"),xqo=o(" (throws an error)."),$qo=l(),dt=a("div"),F(tL.$$.fragment),kqo=l(),ohe=a("p"),Sqo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rqo=l(),Qi=a("p"),Pqo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),Bqo=o("not"),Iqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),Nqo=o("from_pretrained()"),qqo=o(" to load the model weights."),jqo=l(),F(rv.$$.fragment),Dqo=l(),ro=a("div"),F(aL.$$.fragment),Gqo=l(),the=a("p"),Oqo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vqo=l(),Pa=a("p"),Xqo=o("The model class to instantiate is selected based on the "),ahe=a("code"),zqo=o("model_type"),Wqo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),Qqo=o("pretrained_model_name_or_path"),Hqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),Uqo=o("pretrained_model_name_or_path"),Jqo=o(":"),Yqo=l(),Z=a("ul"),tv=a("li"),lhe=a("strong"),Kqo=o("albert"),Zqo=o(" \u2014 "),UO=a("a"),ejo=o("AlbertForMultipleChoice"),ojo=o(" (ALBERT model)"),rjo=l(),av=a("li"),ihe=a("strong"),tjo=o("bert"),ajo=o(" \u2014 "),JO=a("a"),njo=o("BertForMultipleChoice"),sjo=o(" (BERT model)"),ljo=l(),nv=a("li"),dhe=a("strong"),ijo=o("big_bird"),djo=o(" \u2014 "),YO=a("a"),cjo=o("BigBirdForMultipleChoice"),fjo=o(" (BigBird model)"),mjo=l(),sv=a("li"),che=a("strong"),gjo=o("camembert"),hjo=o(" \u2014 "),KO=a("a"),pjo=o("CamembertForMultipleChoice"),_jo=o(" (CamemBERT model)"),ujo=l(),lv=a("li"),fhe=a("strong"),bjo=o("canine"),vjo=o(" \u2014 "),ZO=a("a"),Fjo=o("CanineForMultipleChoice"),Tjo=o(" (CANINE model)"),Mjo=l(),iv=a("li"),mhe=a("strong"),Ejo=o("convbert"),Cjo=o(" \u2014 "),eV=a("a"),wjo=o("ConvBertForMultipleChoice"),Ajo=o(" (ConvBERT model)"),Ljo=l(),dv=a("li"),ghe=a("strong"),yjo=o("data2vec-text"),xjo=o(" \u2014 "),oV=a("a"),$jo=o("Data2VecTextForMultipleChoice"),kjo=o(" (Data2VecText model)"),Sjo=l(),cv=a("li"),hhe=a("strong"),Rjo=o("deberta-v2"),Pjo=o(" \u2014 "),rV=a("a"),Bjo=o("DebertaV2ForMultipleChoice"),Ijo=o(" (DeBERTa-v2 model)"),Njo=l(),fv=a("li"),phe=a("strong"),qjo=o("distilbert"),jjo=o(" \u2014 "),tV=a("a"),Djo=o("DistilBertForMultipleChoice"),Gjo=o(" (DistilBERT model)"),Ojo=l(),mv=a("li"),_he=a("strong"),Vjo=o("electra"),Xjo=o(" \u2014 "),aV=a("a"),zjo=o("ElectraForMultipleChoice"),Wjo=o(" (ELECTRA model)"),Qjo=l(),gv=a("li"),uhe=a("strong"),Hjo=o("flaubert"),Ujo=o(" \u2014 "),nV=a("a"),Jjo=o("FlaubertForMultipleChoice"),Yjo=o(" (FlauBERT model)"),Kjo=l(),hv=a("li"),bhe=a("strong"),Zjo=o("fnet"),eDo=o(" \u2014 "),sV=a("a"),oDo=o("FNetForMultipleChoice"),rDo=o(" (FNet model)"),tDo=l(),pv=a("li"),vhe=a("strong"),aDo=o("funnel"),nDo=o(" \u2014 "),lV=a("a"),sDo=o("FunnelForMultipleChoice"),lDo=o(" (Funnel Transformer model)"),iDo=l(),_v=a("li"),Fhe=a("strong"),dDo=o("ibert"),cDo=o(" \u2014 "),iV=a("a"),fDo=o("IBertForMultipleChoice"),mDo=o(" (I-BERT model)"),gDo=l(),uv=a("li"),The=a("strong"),hDo=o("longformer"),pDo=o(" \u2014 "),dV=a("a"),_Do=o("LongformerForMultipleChoice"),uDo=o(" (Longformer model)"),bDo=l(),bv=a("li"),Mhe=a("strong"),vDo=o("megatron-bert"),FDo=o(" \u2014 "),cV=a("a"),TDo=o("MegatronBertForMultipleChoice"),MDo=o(" (Megatron-BERT model)"),EDo=l(),vv=a("li"),Ehe=a("strong"),CDo=o("mobilebert"),wDo=o(" \u2014 "),fV=a("a"),ADo=o("MobileBertForMultipleChoice"),LDo=o(" (MobileBERT model)"),yDo=l(),Fv=a("li"),Che=a("strong"),xDo=o("mpnet"),$Do=o(" \u2014 "),mV=a("a"),kDo=o("MPNetForMultipleChoice"),SDo=o(" (MPNet model)"),RDo=l(),Tv=a("li"),whe=a("strong"),PDo=o("nystromformer"),BDo=o(" \u2014 "),gV=a("a"),IDo=o("NystromformerForMultipleChoice"),NDo=o(" (Nystr\xF6mformer model)"),qDo=l(),Mv=a("li"),Ahe=a("strong"),jDo=o("qdqbert"),DDo=o(" \u2014 "),hV=a("a"),GDo=o("QDQBertForMultipleChoice"),ODo=o(" (QDQBert model)"),VDo=l(),Ev=a("li"),Lhe=a("strong"),XDo=o("rembert"),zDo=o(" \u2014 "),pV=a("a"),WDo=o("RemBertForMultipleChoice"),QDo=o(" (RemBERT model)"),HDo=l(),Cv=a("li"),yhe=a("strong"),UDo=o("roberta"),JDo=o(" \u2014 "),_V=a("a"),YDo=o("RobertaForMultipleChoice"),KDo=o(" (RoBERTa model)"),ZDo=l(),wv=a("li"),xhe=a("strong"),eGo=o("roformer"),oGo=o(" \u2014 "),uV=a("a"),rGo=o("RoFormerForMultipleChoice"),tGo=o(" (RoFormer model)"),aGo=l(),Av=a("li"),$he=a("strong"),nGo=o("squeezebert"),sGo=o(" \u2014 "),bV=a("a"),lGo=o("SqueezeBertForMultipleChoice"),iGo=o(" (SqueezeBERT model)"),dGo=l(),Lv=a("li"),khe=a("strong"),cGo=o("xlm"),fGo=o(" \u2014 "),vV=a("a"),mGo=o("XLMForMultipleChoice"),gGo=o(" (XLM model)"),hGo=l(),yv=a("li"),She=a("strong"),pGo=o("xlm-roberta"),_Go=o(" \u2014 "),FV=a("a"),uGo=o("XLMRobertaForMultipleChoice"),bGo=o(" (XLM-RoBERTa model)"),vGo=l(),xv=a("li"),Rhe=a("strong"),FGo=o("xlm-roberta-xl"),TGo=o(" \u2014 "),TV=a("a"),MGo=o("XLMRobertaXLForMultipleChoice"),EGo=o(" (XLM-RoBERTa-XL model)"),CGo=l(),$v=a("li"),Phe=a("strong"),wGo=o("xlnet"),AGo=o(" \u2014 "),MV=a("a"),LGo=o("XLNetForMultipleChoice"),yGo=o(" (XLNet model)"),xGo=l(),kv=a("li"),Bhe=a("strong"),$Go=o("yoso"),kGo=o(" \u2014 "),EV=a("a"),SGo=o("YosoForMultipleChoice"),RGo=o(" (YOSO model)"),PGo=l(),Sv=a("p"),BGo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),IGo=o("model.eval()"),NGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),qGo=o("model.train()"),jGo=l(),F(Rv.$$.fragment),vDe=l(),Hi=a("h2"),Pv=a("a"),qhe=a("span"),F(nL.$$.fragment),DGo=l(),jhe=a("span"),GGo=o("AutoModelForNextSentencePrediction"),FDe=l(),Bo=a("div"),F(sL.$$.fragment),OGo=l(),Ui=a("p"),VGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CV=a("a"),XGo=o("from_pretrained()"),zGo=o(" class method or the "),wV=a("a"),WGo=o("from_config()"),QGo=o(` class
method.`),HGo=l(),lL=a("p"),UGo=o("This class cannot be instantiated directly using "),Dhe=a("code"),JGo=o("__init__()"),YGo=o(" (throws an error)."),KGo=l(),ct=a("div"),F(iL.$$.fragment),ZGo=l(),Ghe=a("p"),eOo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oOo=l(),Ji=a("p"),rOo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),tOo=o("not"),aOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nOo=o("from_pretrained()"),sOo=o(" to load the model weights."),lOo=l(),F(Bv.$$.fragment),iOo=l(),to=a("div"),F(dL.$$.fragment),dOo=l(),Vhe=a("p"),cOo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fOo=l(),Ba=a("p"),mOo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),Yr=a("ul"),Iv=a("li"),Qhe=a("strong"),FOo=o("bert"),TOo=o(" \u2014 "),LV=a("a"),MOo=o("BertForNextSentencePrediction"),EOo=o(" (BERT model)"),COo=l(),Nv=a("li"),Hhe=a("strong"),wOo=o("fnet"),AOo=o(" \u2014 "),yV=a("a"),LOo=o("FNetForNextSentencePrediction"),yOo=o(" (FNet model)"),xOo=l(),qv=a("li"),Uhe=a("strong"),$Oo=o("megatron-bert"),kOo=o(" \u2014 "),xV=a("a"),SOo=o("MegatronBertForNextSentencePrediction"),ROo=o(" (Megatron-BERT model)"),POo=l(),jv=a("li"),Jhe=a("strong"),BOo=o("mobilebert"),IOo=o(" \u2014 "),$V=a("a"),NOo=o("MobileBertForNextSentencePrediction"),qOo=o(" (MobileBERT model)"),jOo=l(),Dv=a("li"),Yhe=a("strong"),DOo=o("qdqbert"),GOo=o(" \u2014 "),kV=a("a"),OOo=o("QDQBertForNextSentencePrediction"),VOo=o(" (QDQBert model)"),XOo=l(),Gv=a("p"),zOo=o("The model is set in evaluation mode by default using "),Khe=a("code"),WOo=o("model.eval()"),QOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),HOo=o("model.train()"),UOo=l(),F(Ov.$$.fragment),TDe=l(),Yi=a("h2"),Vv=a("a"),epe=a("span"),F(cL.$$.fragment),JOo=l(),ope=a("span"),YOo=o("AutoModelForTokenClassification"),MDe=l(),Io=a("div"),F(fL.$$.fragment),KOo=l(),Ki=a("p"),ZOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SV=a("a"),eVo=o("from_pretrained()"),oVo=o(" class method or the "),RV=a("a"),rVo=o("from_config()"),tVo=o(` class
method.`),aVo=l(),mL=a("p"),nVo=o("This class cannot be instantiated directly using "),rpe=a("code"),sVo=o("__init__()"),lVo=o(" (throws an error)."),iVo=l(),ft=a("div"),F(gL.$$.fragment),dVo=l(),tpe=a("p"),cVo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fVo=l(),Zi=a("p"),mVo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),gVo=o("not"),hVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),pVo=o("from_pretrained()"),_Vo=o(" to load the model weights."),uVo=l(),F(Xv.$$.fragment),bVo=l(),ao=a("div"),F(hL.$$.fragment),vVo=l(),npe=a("p"),FVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TVo=l(),Ia=a("p"),MVo=o("The model class to instantiate is selected based on the "),spe=a("code"),EVo=o("model_type"),CVo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),LVo=o("pretrained_model_name_or_path"),yVo=o(":"),xVo=l(),U=a("ul"),zv=a("li"),dpe=a("strong"),$Vo=o("albert"),kVo=o(" \u2014 "),BV=a("a"),SVo=o("AlbertForTokenClassification"),RVo=o(" (ALBERT model)"),PVo=l(),Wv=a("li"),cpe=a("strong"),BVo=o("bert"),IVo=o(" \u2014 "),IV=a("a"),NVo=o("BertForTokenClassification"),qVo=o(" (BERT model)"),jVo=l(),Qv=a("li"),fpe=a("strong"),DVo=o("big_bird"),GVo=o(" \u2014 "),NV=a("a"),OVo=o("BigBirdForTokenClassification"),VVo=o(" (BigBird model)"),XVo=l(),Hv=a("li"),mpe=a("strong"),zVo=o("camembert"),WVo=o(" \u2014 "),qV=a("a"),QVo=o("CamembertForTokenClassification"),HVo=o(" (CamemBERT model)"),UVo=l(),Uv=a("li"),gpe=a("strong"),JVo=o("canine"),YVo=o(" \u2014 "),jV=a("a"),KVo=o("CanineForTokenClassification"),ZVo=o(" (CANINE model)"),eXo=l(),Jv=a("li"),hpe=a("strong"),oXo=o("convbert"),rXo=o(" \u2014 "),DV=a("a"),tXo=o("ConvBertForTokenClassification"),aXo=o(" (ConvBERT model)"),nXo=l(),Yv=a("li"),ppe=a("strong"),sXo=o("data2vec-text"),lXo=o(" \u2014 "),GV=a("a"),iXo=o("Data2VecTextForTokenClassification"),dXo=o(" (Data2VecText model)"),cXo=l(),Kv=a("li"),_pe=a("strong"),fXo=o("deberta"),mXo=o(" \u2014 "),OV=a("a"),gXo=o("DebertaForTokenClassification"),hXo=o(" (DeBERTa model)"),pXo=l(),Zv=a("li"),upe=a("strong"),_Xo=o("deberta-v2"),uXo=o(" \u2014 "),VV=a("a"),bXo=o("DebertaV2ForTokenClassification"),vXo=o(" (DeBERTa-v2 model)"),FXo=l(),eF=a("li"),bpe=a("strong"),TXo=o("distilbert"),MXo=o(" \u2014 "),XV=a("a"),EXo=o("DistilBertForTokenClassification"),CXo=o(" (DistilBERT model)"),wXo=l(),oF=a("li"),vpe=a("strong"),AXo=o("electra"),LXo=o(" \u2014 "),zV=a("a"),yXo=o("ElectraForTokenClassification"),xXo=o(" (ELECTRA model)"),$Xo=l(),rF=a("li"),Fpe=a("strong"),kXo=o("flaubert"),SXo=o(" \u2014 "),WV=a("a"),RXo=o("FlaubertForTokenClassification"),PXo=o(" (FlauBERT model)"),BXo=l(),tF=a("li"),Tpe=a("strong"),IXo=o("fnet"),NXo=o(" \u2014 "),QV=a("a"),qXo=o("FNetForTokenClassification"),jXo=o(" (FNet model)"),DXo=l(),aF=a("li"),Mpe=a("strong"),GXo=o("funnel"),OXo=o(" \u2014 "),HV=a("a"),VXo=o("FunnelForTokenClassification"),XXo=o(" (Funnel Transformer model)"),zXo=l(),nF=a("li"),Epe=a("strong"),WXo=o("gpt2"),QXo=o(" \u2014 "),UV=a("a"),HXo=o("GPT2ForTokenClassification"),UXo=o(" (OpenAI GPT-2 model)"),JXo=l(),sF=a("li"),Cpe=a("strong"),YXo=o("ibert"),KXo=o(" \u2014 "),JV=a("a"),ZXo=o("IBertForTokenClassification"),ezo=o(" (I-BERT model)"),ozo=l(),lF=a("li"),wpe=a("strong"),rzo=o("layoutlm"),tzo=o(" \u2014 "),YV=a("a"),azo=o("LayoutLMForTokenClassification"),nzo=o(" (LayoutLM model)"),szo=l(),iF=a("li"),Ape=a("strong"),lzo=o("layoutlmv2"),izo=o(" \u2014 "),KV=a("a"),dzo=o("LayoutLMv2ForTokenClassification"),czo=o(" (LayoutLMv2 model)"),fzo=l(),dF=a("li"),Lpe=a("strong"),mzo=o("layoutlmv3"),gzo=o(" \u2014 "),ZV=a("a"),hzo=o("LayoutLMv3ForTokenClassification"),pzo=o(" (LayoutLMv3 model)"),_zo=l(),cF=a("li"),ype=a("strong"),uzo=o("longformer"),bzo=o(" \u2014 "),eX=a("a"),vzo=o("LongformerForTokenClassification"),Fzo=o(" (Longformer model)"),Tzo=l(),fF=a("li"),xpe=a("strong"),Mzo=o("megatron-bert"),Ezo=o(" \u2014 "),oX=a("a"),Czo=o("MegatronBertForTokenClassification"),wzo=o(" (Megatron-BERT model)"),Azo=l(),mF=a("li"),$pe=a("strong"),Lzo=o("mobilebert"),yzo=o(" \u2014 "),rX=a("a"),xzo=o("MobileBertForTokenClassification"),$zo=o(" (MobileBERT model)"),kzo=l(),gF=a("li"),kpe=a("strong"),Szo=o("mpnet"),Rzo=o(" \u2014 "),tX=a("a"),Pzo=o("MPNetForTokenClassification"),Bzo=o(" (MPNet model)"),Izo=l(),hF=a("li"),Spe=a("strong"),Nzo=o("nystromformer"),qzo=o(" \u2014 "),aX=a("a"),jzo=o("NystromformerForTokenClassification"),Dzo=o(" (Nystr\xF6mformer model)"),Gzo=l(),pF=a("li"),Rpe=a("strong"),Ozo=o("qdqbert"),Vzo=o(" \u2014 "),nX=a("a"),Xzo=o("QDQBertForTokenClassification"),zzo=o(" (QDQBert model)"),Wzo=l(),_F=a("li"),Ppe=a("strong"),Qzo=o("rembert"),Hzo=o(" \u2014 "),sX=a("a"),Uzo=o("RemBertForTokenClassification"),Jzo=o(" (RemBERT model)"),Yzo=l(),uF=a("li"),Bpe=a("strong"),Kzo=o("roberta"),Zzo=o(" \u2014 "),lX=a("a"),eWo=o("RobertaForTokenClassification"),oWo=o(" (RoBERTa model)"),rWo=l(),bF=a("li"),Ipe=a("strong"),tWo=o("roformer"),aWo=o(" \u2014 "),iX=a("a"),nWo=o("RoFormerForTokenClassification"),sWo=o(" (RoFormer model)"),lWo=l(),vF=a("li"),Npe=a("strong"),iWo=o("squeezebert"),dWo=o(" \u2014 "),dX=a("a"),cWo=o("SqueezeBertForTokenClassification"),fWo=o(" (SqueezeBERT model)"),mWo=l(),FF=a("li"),qpe=a("strong"),gWo=o("xlm"),hWo=o(" \u2014 "),cX=a("a"),pWo=o("XLMForTokenClassification"),_Wo=o(" (XLM model)"),uWo=l(),TF=a("li"),jpe=a("strong"),bWo=o("xlm-roberta"),vWo=o(" \u2014 "),fX=a("a"),FWo=o("XLMRobertaForTokenClassification"),TWo=o(" (XLM-RoBERTa model)"),MWo=l(),MF=a("li"),Dpe=a("strong"),EWo=o("xlm-roberta-xl"),CWo=o(" \u2014 "),mX=a("a"),wWo=o("XLMRobertaXLForTokenClassification"),AWo=o(" (XLM-RoBERTa-XL model)"),LWo=l(),EF=a("li"),Gpe=a("strong"),yWo=o("xlnet"),xWo=o(" \u2014 "),gX=a("a"),$Wo=o("XLNetForTokenClassification"),kWo=o(" (XLNet model)"),SWo=l(),CF=a("li"),Ope=a("strong"),RWo=o("yoso"),PWo=o(" \u2014 "),hX=a("a"),BWo=o("YosoForTokenClassification"),IWo=o(" (YOSO model)"),NWo=l(),wF=a("p"),qWo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),jWo=o("model.eval()"),DWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),GWo=o("model.train()"),OWo=l(),F(AF.$$.fragment),EDe=l(),ed=a("h2"),LF=a("a"),zpe=a("span"),F(pL.$$.fragment),VWo=l(),Wpe=a("span"),XWo=o("AutoModelForQuestionAnswering"),CDe=l(),No=a("div"),F(_L.$$.fragment),zWo=l(),od=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pX=a("a"),QWo=o("from_pretrained()"),HWo=o(" class method or the "),_X=a("a"),UWo=o("from_config()"),JWo=o(` class
method.`),YWo=l(),uL=a("p"),KWo=o("This class cannot be instantiated directly using "),Qpe=a("code"),ZWo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),mt=a("div"),F(bL.$$.fragment),rQo=l(),Hpe=a("p"),tQo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aQo=l(),rd=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),iQo=o("from_pretrained()"),dQo=o(" to load the model weights."),cQo=l(),F(yF.$$.fragment),fQo=l(),no=a("div"),F(vL.$$.fragment),mQo=l(),Jpe=a("p"),gQo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hQo=l(),Na=a("p"),pQo=o("The model class to instantiate is selected based on the "),Ype=a("code"),_Qo=o("model_type"),uQo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),bQo=o("pretrained_model_name_or_path"),vQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),FQo=o("pretrained_model_name_or_path"),TQo=o(":"),MQo=l(),V=a("ul"),xF=a("li"),e_e=a("strong"),EQo=o("albert"),CQo=o(" \u2014 "),bX=a("a"),wQo=o("AlbertForQuestionAnswering"),AQo=o(" (ALBERT model)"),LQo=l(),$F=a("li"),o_e=a("strong"),yQo=o("bart"),xQo=o(" \u2014 "),vX=a("a"),$Qo=o("BartForQuestionAnswering"),kQo=o(" (BART model)"),SQo=l(),kF=a("li"),r_e=a("strong"),RQo=o("bert"),PQo=o(" \u2014 "),FX=a("a"),BQo=o("BertForQuestionAnswering"),IQo=o(" (BERT model)"),NQo=l(),SF=a("li"),t_e=a("strong"),qQo=o("big_bird"),jQo=o(" \u2014 "),TX=a("a"),DQo=o("BigBirdForQuestionAnswering"),GQo=o(" (BigBird model)"),OQo=l(),RF=a("li"),a_e=a("strong"),VQo=o("bigbird_pegasus"),XQo=o(" \u2014 "),MX=a("a"),zQo=o("BigBirdPegasusForQuestionAnswering"),WQo=o(" (BigBird-Pegasus model)"),QQo=l(),PF=a("li"),n_e=a("strong"),HQo=o("camembert"),UQo=o(" \u2014 "),EX=a("a"),JQo=o("CamembertForQuestionAnswering"),YQo=o(" (CamemBERT model)"),KQo=l(),BF=a("li"),s_e=a("strong"),ZQo=o("canine"),eHo=o(" \u2014 "),CX=a("a"),oHo=o("CanineForQuestionAnswering"),rHo=o(" (CANINE model)"),tHo=l(),IF=a("li"),l_e=a("strong"),aHo=o("convbert"),nHo=o(" \u2014 "),wX=a("a"),sHo=o("ConvBertForQuestionAnswering"),lHo=o(" (ConvBERT model)"),iHo=l(),NF=a("li"),i_e=a("strong"),dHo=o("data2vec-text"),cHo=o(" \u2014 "),AX=a("a"),fHo=o("Data2VecTextForQuestionAnswering"),mHo=o(" (Data2VecText model)"),gHo=l(),qF=a("li"),d_e=a("strong"),hHo=o("deberta"),pHo=o(" \u2014 "),LX=a("a"),_Ho=o("DebertaForQuestionAnswering"),uHo=o(" (DeBERTa model)"),bHo=l(),jF=a("li"),c_e=a("strong"),vHo=o("deberta-v2"),FHo=o(" \u2014 "),yX=a("a"),THo=o("DebertaV2ForQuestionAnswering"),MHo=o(" (DeBERTa-v2 model)"),EHo=l(),DF=a("li"),f_e=a("strong"),CHo=o("distilbert"),wHo=o(" \u2014 "),xX=a("a"),AHo=o("DistilBertForQuestionAnswering"),LHo=o(" (DistilBERT model)"),yHo=l(),GF=a("li"),m_e=a("strong"),xHo=o("electra"),$Ho=o(" \u2014 "),$X=a("a"),kHo=o("ElectraForQuestionAnswering"),SHo=o(" (ELECTRA model)"),RHo=l(),OF=a("li"),g_e=a("strong"),PHo=o("flaubert"),BHo=o(" \u2014 "),kX=a("a"),IHo=o("FlaubertForQuestionAnsweringSimple"),NHo=o(" (FlauBERT model)"),qHo=l(),VF=a("li"),h_e=a("strong"),jHo=o("fnet"),DHo=o(" \u2014 "),SX=a("a"),GHo=o("FNetForQuestionAnswering"),OHo=o(" (FNet model)"),VHo=l(),XF=a("li"),p_e=a("strong"),XHo=o("funnel"),zHo=o(" \u2014 "),RX=a("a"),WHo=o("FunnelForQuestionAnswering"),QHo=o(" (Funnel Transformer model)"),HHo=l(),zF=a("li"),__e=a("strong"),UHo=o("gptj"),JHo=o(" \u2014 "),PX=a("a"),YHo=o("GPTJForQuestionAnswering"),KHo=o(" (GPT-J model)"),ZHo=l(),WF=a("li"),u_e=a("strong"),eUo=o("ibert"),oUo=o(" \u2014 "),BX=a("a"),rUo=o("IBertForQuestionAnswering"),tUo=o(" (I-BERT model)"),aUo=l(),QF=a("li"),b_e=a("strong"),nUo=o("layoutlmv2"),sUo=o(" \u2014 "),IX=a("a"),lUo=o("LayoutLMv2ForQuestionAnswering"),iUo=o(" (LayoutLMv2 model)"),dUo=l(),HF=a("li"),v_e=a("strong"),cUo=o("layoutlmv3"),fUo=o(" \u2014 "),NX=a("a"),mUo=o("LayoutLMv3ForQuestionAnswering"),gUo=o(" (LayoutLMv3 model)"),hUo=l(),UF=a("li"),F_e=a("strong"),pUo=o("led"),_Uo=o(" \u2014 "),qX=a("a"),uUo=o("LEDForQuestionAnswering"),bUo=o(" (LED model)"),vUo=l(),JF=a("li"),T_e=a("strong"),FUo=o("longformer"),TUo=o(" \u2014 "),jX=a("a"),MUo=o("LongformerForQuestionAnswering"),EUo=o(" (Longformer model)"),CUo=l(),YF=a("li"),M_e=a("strong"),wUo=o("lxmert"),AUo=o(" \u2014 "),DX=a("a"),LUo=o("LxmertForQuestionAnswering"),yUo=o(" (LXMERT model)"),xUo=l(),KF=a("li"),E_e=a("strong"),$Uo=o("mbart"),kUo=o(" \u2014 "),GX=a("a"),SUo=o("MBartForQuestionAnswering"),RUo=o(" (mBART model)"),PUo=l(),ZF=a("li"),C_e=a("strong"),BUo=o("megatron-bert"),IUo=o(" \u2014 "),OX=a("a"),NUo=o("MegatronBertForQuestionAnswering"),qUo=o(" (Megatron-BERT model)"),jUo=l(),e6=a("li"),w_e=a("strong"),DUo=o("mobilebert"),GUo=o(" \u2014 "),VX=a("a"),OUo=o("MobileBertForQuestionAnswering"),VUo=o(" (MobileBERT model)"),XUo=l(),o6=a("li"),A_e=a("strong"),zUo=o("mpnet"),WUo=o(" \u2014 "),XX=a("a"),QUo=o("MPNetForQuestionAnswering"),HUo=o(" (MPNet model)"),UUo=l(),r6=a("li"),L_e=a("strong"),JUo=o("nystromformer"),YUo=o(" \u2014 "),zX=a("a"),KUo=o("NystromformerForQuestionAnswering"),ZUo=o(" (Nystr\xF6mformer model)"),eJo=l(),t6=a("li"),y_e=a("strong"),oJo=o("qdqbert"),rJo=o(" \u2014 "),WX=a("a"),tJo=o("QDQBertForQuestionAnswering"),aJo=o(" (QDQBert model)"),nJo=l(),a6=a("li"),x_e=a("strong"),sJo=o("reformer"),lJo=o(" \u2014 "),QX=a("a"),iJo=o("ReformerForQuestionAnswering"),dJo=o(" (Reformer model)"),cJo=l(),n6=a("li"),$_e=a("strong"),fJo=o("rembert"),mJo=o(" \u2014 "),HX=a("a"),gJo=o("RemBertForQuestionAnswering"),hJo=o(" (RemBERT model)"),pJo=l(),s6=a("li"),k_e=a("strong"),_Jo=o("roberta"),uJo=o(" \u2014 "),UX=a("a"),bJo=o("RobertaForQuestionAnswering"),vJo=o(" (RoBERTa model)"),FJo=l(),l6=a("li"),S_e=a("strong"),TJo=o("roformer"),MJo=o(" \u2014 "),JX=a("a"),EJo=o("RoFormerForQuestionAnswering"),CJo=o(" (RoFormer model)"),wJo=l(),i6=a("li"),R_e=a("strong"),AJo=o("splinter"),LJo=o(" \u2014 "),YX=a("a"),yJo=o("SplinterForQuestionAnswering"),xJo=o(" (Splinter model)"),$Jo=l(),d6=a("li"),P_e=a("strong"),kJo=o("squeezebert"),SJo=o(" \u2014 "),KX=a("a"),RJo=o("SqueezeBertForQuestionAnswering"),PJo=o(" (SqueezeBERT model)"),BJo=l(),c6=a("li"),B_e=a("strong"),IJo=o("xlm"),NJo=o(" \u2014 "),ZX=a("a"),qJo=o("XLMForQuestionAnsweringSimple"),jJo=o(" (XLM model)"),DJo=l(),f6=a("li"),I_e=a("strong"),GJo=o("xlm-roberta"),OJo=o(" \u2014 "),ez=a("a"),VJo=o("XLMRobertaForQuestionAnswering"),XJo=o(" (XLM-RoBERTa model)"),zJo=l(),m6=a("li"),N_e=a("strong"),WJo=o("xlm-roberta-xl"),QJo=o(" \u2014 "),oz=a("a"),HJo=o("XLMRobertaXLForQuestionAnswering"),UJo=o(" (XLM-RoBERTa-XL model)"),JJo=l(),g6=a("li"),q_e=a("strong"),YJo=o("xlnet"),KJo=o(" \u2014 "),rz=a("a"),ZJo=o("XLNetForQuestionAnsweringSimple"),eYo=o(" (XLNet model)"),oYo=l(),h6=a("li"),j_e=a("strong"),rYo=o("yoso"),tYo=o(" \u2014 "),tz=a("a"),aYo=o("YosoForQuestionAnswering"),nYo=o(" (YOSO model)"),sYo=l(),p6=a("p"),lYo=o("The model is set in evaluation mode by default using "),D_e=a("code"),iYo=o("model.eval()"),dYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),cYo=o("model.train()"),fYo=l(),F(_6.$$.fragment),wDe=l(),td=a("h2"),u6=a("a"),O_e=a("span"),F(FL.$$.fragment),mYo=l(),V_e=a("span"),gYo=o("AutoModelForTableQuestionAnswering"),ADe=l(),qo=a("div"),F(TL.$$.fragment),hYo=l(),ad=a("p"),pYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),az=a("a"),_Yo=o("from_pretrained()"),uYo=o(" class method or the "),nz=a("a"),bYo=o("from_config()"),vYo=o(` class
method.`),FYo=l(),ML=a("p"),TYo=o("This class cannot be instantiated directly using "),X_e=a("code"),MYo=o("__init__()"),EYo=o(" (throws an error)."),CYo=l(),gt=a("div"),F(EL.$$.fragment),wYo=l(),z_e=a("p"),AYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LYo=l(),nd=a("p"),yYo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),xYo=o("not"),$Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),kYo=o("from_pretrained()"),SYo=o(" to load the model weights."),RYo=l(),F(b6.$$.fragment),PYo=l(),so=a("div"),F(CL.$$.fragment),BYo=l(),Q_e=a("p"),IYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NYo=l(),qa=a("p"),qYo=o("The model class to instantiate is selected based on the "),H_e=a("code"),jYo=o("model_type"),DYo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),GYo=o("pretrained_model_name_or_path"),OYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(":"),zYo=l(),Y_e=a("ul"),v6=a("li"),K_e=a("strong"),WYo=o("tapas"),QYo=o(" \u2014 "),lz=a("a"),HYo=o("TapasForQuestionAnswering"),UYo=o(" (TAPAS model)"),JYo=l(),F6=a("p"),YYo=o("The model is set in evaluation mode by default using "),Z_e=a("code"),KYo=o("model.eval()"),ZYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),eKo=o("model.train()"),oKo=l(),F(T6.$$.fragment),LDe=l(),sd=a("h2"),M6=a("a"),oue=a("span"),F(wL.$$.fragment),rKo=l(),rue=a("span"),tKo=o("AutoModelForImageClassification"),yDe=l(),jo=a("div"),F(AL.$$.fragment),aKo=l(),ld=a("p"),nKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iz=a("a"),sKo=o("from_pretrained()"),lKo=o(" class method or the "),dz=a("a"),iKo=o("from_config()"),dKo=o(` class
method.`),cKo=l(),LL=a("p"),fKo=o("This class cannot be instantiated directly using "),tue=a("code"),mKo=o("__init__()"),gKo=o(" (throws an error)."),hKo=l(),ht=a("div"),F(yL.$$.fragment),pKo=l(),aue=a("p"),_Ko=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uKo=l(),id=a("p"),bKo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),vKo=o("not"),FKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),TKo=o("from_pretrained()"),MKo=o(" to load the model weights."),EKo=l(),F(E6.$$.fragment),CKo=l(),lo=a("div"),F(xL.$$.fragment),wKo=l(),sue=a("p"),AKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LKo=l(),ja=a("p"),yKo=o("The model class to instantiate is selected based on the "),lue=a("code"),xKo=o("model_type"),$Ko=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),kKo=o("pretrained_model_name_or_path"),SKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),RKo=o("pretrained_model_name_or_path"),PKo=o(":"),BKo=l(),Fe=a("ul"),C6=a("li"),cue=a("strong"),IKo=o("beit"),NKo=o(" \u2014 "),fz=a("a"),qKo=o("BeitForImageClassification"),jKo=o(" (BEiT model)"),DKo=l(),w6=a("li"),fue=a("strong"),GKo=o("convnext"),OKo=o(" \u2014 "),mz=a("a"),VKo=o("ConvNextForImageClassification"),XKo=o(" (ConvNeXT model)"),zKo=l(),A6=a("li"),mue=a("strong"),WKo=o("cvt"),QKo=o(" \u2014 "),gz=a("a"),HKo=o("CvtForImageClassification"),UKo=o(" (CvT model)"),JKo=l(),L6=a("li"),gue=a("strong"),YKo=o("data2vec-vision"),KKo=o(" \u2014 "),hz=a("a"),ZKo=o("Data2VecVisionForImageClassification"),eZo=o(" (Data2VecVision model)"),oZo=l(),Is=a("li"),hue=a("strong"),rZo=o("deit"),tZo=o(" \u2014 "),pz=a("a"),aZo=o("DeiTForImageClassification"),nZo=o(" or "),_z=a("a"),sZo=o("DeiTForImageClassificationWithTeacher"),lZo=o(" (DeiT model)"),iZo=l(),y6=a("li"),pue=a("strong"),dZo=o("imagegpt"),cZo=o(" \u2014 "),uz=a("a"),fZo=o("ImageGPTForImageClassification"),mZo=o(" (ImageGPT model)"),gZo=l(),Ns=a("li"),_ue=a("strong"),hZo=o("levit"),pZo=o(" \u2014 "),bz=a("a"),_Zo=o("LevitForImageClassification"),uZo=o(" or "),vz=a("a"),bZo=o("LevitForImageClassificationWithTeacher"),vZo=o(" (LeViT model)"),FZo=l(),pt=a("li"),uue=a("strong"),TZo=o("perceiver"),MZo=o(" \u2014 "),Fz=a("a"),EZo=o("PerceiverForImageClassificationLearned"),CZo=o(" or "),Tz=a("a"),wZo=o("PerceiverForImageClassificationFourier"),AZo=o(" or "),Mz=a("a"),LZo=o("PerceiverForImageClassificationConvProcessing"),yZo=o(" (Perceiver model)"),xZo=l(),x6=a("li"),bue=a("strong"),$Zo=o("poolformer"),kZo=o(" \u2014 "),Ez=a("a"),SZo=o("PoolFormerForImageClassification"),RZo=o(" (PoolFormer model)"),PZo=l(),$6=a("li"),vue=a("strong"),BZo=o("regnet"),IZo=o(" \u2014 "),Cz=a("a"),NZo=o("RegNetForImageClassification"),qZo=o(" (RegNet model)"),jZo=l(),k6=a("li"),Fue=a("strong"),DZo=o("resnet"),GZo=o(" \u2014 "),wz=a("a"),OZo=o("ResNetForImageClassification"),VZo=o(" (ResNet model)"),XZo=l(),S6=a("li"),Tue=a("strong"),zZo=o("segformer"),WZo=o(" \u2014 "),Az=a("a"),QZo=o("SegformerForImageClassification"),HZo=o(" (SegFormer model)"),UZo=l(),R6=a("li"),Mue=a("strong"),JZo=o("swin"),YZo=o(" \u2014 "),Lz=a("a"),KZo=o("SwinForImageClassification"),ZZo=o(" (Swin Transformer model)"),eer=l(),P6=a("li"),Eue=a("strong"),oer=o("van"),rer=o(" \u2014 "),yz=a("a"),ter=o("VanForImageClassification"),aer=o(" (VAN model)"),ner=l(),B6=a("li"),Cue=a("strong"),ser=o("vit"),ler=o(" \u2014 "),xz=a("a"),ier=o("ViTForImageClassification"),der=o(" (ViT model)"),cer=l(),I6=a("p"),fer=o("The model is set in evaluation mode by default using "),wue=a("code"),mer=o("model.eval()"),ger=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),her=o("model.train()"),per=l(),F(N6.$$.fragment),xDe=l(),dd=a("h2"),q6=a("a"),Lue=a("span"),F($L.$$.fragment),_er=l(),yue=a("span"),uer=o("AutoModelForVision2Seq"),$De=l(),Do=a("div"),F(kL.$$.fragment),ber=l(),cd=a("p"),ver=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$z=a("a"),Fer=o("from_pretrained()"),Ter=o(" class method or the "),kz=a("a"),Mer=o("from_config()"),Eer=o(` class
method.`),Cer=l(),SL=a("p"),wer=o("This class cannot be instantiated directly using "),xue=a("code"),Aer=o("__init__()"),Ler=o(" (throws an error)."),yer=l(),_t=a("div"),F(RL.$$.fragment),xer=l(),$ue=a("p"),$er=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ker=l(),fd=a("p"),Ser=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),Rer=o("not"),Per=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),Ber=o("from_pretrained()"),Ier=o(" to load the model weights."),Ner=l(),F(j6.$$.fragment),qer=l(),io=a("div"),F(PL.$$.fragment),jer=l(),Sue=a("p"),Der=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ger=l(),Da=a("p"),Oer=o("The model class to instantiate is selected based on the "),Rue=a("code"),Ver=o("model_type"),Xer=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),zer=o("pretrained_model_name_or_path"),Wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Qer=o("pretrained_model_name_or_path"),Her=o(":"),Uer=l(),Iue=a("ul"),D6=a("li"),Nue=a("strong"),Jer=o("vision-encoder-decoder"),Yer=o(" \u2014 "),Rz=a("a"),Ker=o("VisionEncoderDecoderModel"),Zer=o(" (Vision Encoder decoder model)"),eor=l(),G6=a("p"),oor=o("The model is set in evaluation mode by default using "),que=a("code"),ror=o("model.eval()"),tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),aor=o("model.train()"),nor=l(),F(O6.$$.fragment),kDe=l(),md=a("h2"),V6=a("a"),Due=a("span"),F(BL.$$.fragment),sor=l(),Gue=a("span"),lor=o("AutoModelForAudioClassification"),SDe=l(),Go=a("div"),F(IL.$$.fragment),ior=l(),gd=a("p"),dor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Pz=a("a"),cor=o("from_pretrained()"),mor=o(" class method or the "),Bz=a("a"),gor=o("from_config()"),hor=o(` class
method.`),por=l(),NL=a("p"),_or=o("This class cannot be instantiated directly using "),Oue=a("code"),uor=o("__init__()"),bor=o(" (throws an error)."),vor=l(),ut=a("div"),F(qL.$$.fragment),For=l(),Vue=a("p"),Tor=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mor=l(),hd=a("p"),Eor=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),Cor=o("not"),wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Aor=o("from_pretrained()"),Lor=o(" to load the model weights."),yor=l(),F(X6.$$.fragment),xor=l(),co=a("div"),F(jL.$$.fragment),$or=l(),zue=a("p"),kor=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Sor=l(),Ga=a("p"),Ror=o("The model class to instantiate is selected based on the "),Wue=a("code"),Por=o("model_type"),Bor=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),qor=o("pretrained_model_name_or_path"),jor=o(":"),Dor=l(),Pe=a("ul"),z6=a("li"),Uue=a("strong"),Gor=o("data2vec-audio"),Oor=o(" \u2014 "),Nz=a("a"),Vor=o("Data2VecAudioForSequenceClassification"),Xor=o(" (Data2VecAudio model)"),zor=l(),W6=a("li"),Jue=a("strong"),Wor=o("hubert"),Qor=o(" \u2014 "),qz=a("a"),Hor=o("HubertForSequenceClassification"),Uor=o(" (Hubert model)"),Jor=l(),Q6=a("li"),Yue=a("strong"),Yor=o("sew"),Kor=o(" \u2014 "),jz=a("a"),Zor=o("SEWForSequenceClassification"),err=o(" (SEW model)"),orr=l(),H6=a("li"),Kue=a("strong"),rrr=o("sew-d"),trr=o(" \u2014 "),Dz=a("a"),arr=o("SEWDForSequenceClassification"),nrr=o(" (SEW-D model)"),srr=l(),U6=a("li"),Zue=a("strong"),lrr=o("unispeech"),irr=o(" \u2014 "),Gz=a("a"),drr=o("UniSpeechForSequenceClassification"),crr=o(" (UniSpeech model)"),frr=l(),J6=a("li"),e2e=a("strong"),mrr=o("unispeech-sat"),grr=o(" \u2014 "),Oz=a("a"),hrr=o("UniSpeechSatForSequenceClassification"),prr=o(" (UniSpeechSat model)"),_rr=l(),Y6=a("li"),o2e=a("strong"),urr=o("wav2vec2"),brr=o(" \u2014 "),Vz=a("a"),vrr=o("Wav2Vec2ForSequenceClassification"),Frr=o(" (Wav2Vec2 model)"),Trr=l(),K6=a("li"),r2e=a("strong"),Mrr=o("wav2vec2-conformer"),Err=o(" \u2014 "),Xz=a("a"),Crr=o("Wav2Vec2ConformerForSequenceClassification"),wrr=o(" (Wav2Vec2-Conformer model)"),Arr=l(),Z6=a("li"),t2e=a("strong"),Lrr=o("wavlm"),yrr=o(" \u2014 "),zz=a("a"),xrr=o("WavLMForSequenceClassification"),$rr=o(" (WavLM model)"),krr=l(),eT=a("p"),Srr=o("The model is set in evaluation mode by default using "),a2e=a("code"),Rrr=o("model.eval()"),Prr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),Brr=o("model.train()"),Irr=l(),F(oT.$$.fragment),RDe=l(),pd=a("h2"),rT=a("a"),s2e=a("span"),F(DL.$$.fragment),Nrr=l(),l2e=a("span"),qrr=o("AutoModelForAudioFrameClassification"),PDe=l(),Oo=a("div"),F(GL.$$.fragment),jrr=l(),_d=a("p"),Drr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wz=a("a"),Grr=o("from_pretrained()"),Orr=o(" class method or the "),Qz=a("a"),Vrr=o("from_config()"),Xrr=o(` class
method.`),zrr=l(),OL=a("p"),Wrr=o("This class cannot be instantiated directly using "),i2e=a("code"),Qrr=o("__init__()"),Hrr=o(" (throws an error)."),Urr=l(),bt=a("div"),F(VL.$$.fragment),Jrr=l(),d2e=a("p"),Yrr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Krr=l(),ud=a("p"),Zrr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),etr=o("not"),otr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),rtr=o("from_pretrained()"),ttr=o(" to load the model weights."),atr=l(),F(tT.$$.fragment),ntr=l(),fo=a("div"),F(XL.$$.fragment),str=l(),f2e=a("p"),ltr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),itr=l(),Oa=a("p"),dtr=o("The model class to instantiate is selected based on the "),m2e=a("code"),ctr=o("model_type"),ftr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),mtr=o("pretrained_model_name_or_path"),gtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(":"),_tr=l(),Kr=a("ul"),aT=a("li"),p2e=a("strong"),utr=o("data2vec-audio"),btr=o(" \u2014 "),Uz=a("a"),vtr=o("Data2VecAudioForAudioFrameClassification"),Ftr=o(" (Data2VecAudio model)"),Ttr=l(),nT=a("li"),_2e=a("strong"),Mtr=o("unispeech-sat"),Etr=o(" \u2014 "),Jz=a("a"),Ctr=o("UniSpeechSatForAudioFrameClassification"),wtr=o(" (UniSpeechSat model)"),Atr=l(),sT=a("li"),u2e=a("strong"),Ltr=o("wav2vec2"),ytr=o(" \u2014 "),Yz=a("a"),xtr=o("Wav2Vec2ForAudioFrameClassification"),$tr=o(" (Wav2Vec2 model)"),ktr=l(),lT=a("li"),b2e=a("strong"),Str=o("wav2vec2-conformer"),Rtr=o(" \u2014 "),Kz=a("a"),Ptr=o("Wav2Vec2ConformerForAudioFrameClassification"),Btr=o(" (Wav2Vec2-Conformer model)"),Itr=l(),iT=a("li"),v2e=a("strong"),Ntr=o("wavlm"),qtr=o(" \u2014 "),Zz=a("a"),jtr=o("WavLMForAudioFrameClassification"),Dtr=o(" (WavLM model)"),Gtr=l(),dT=a("p"),Otr=o("The model is set in evaluation mode by default using "),F2e=a("code"),Vtr=o("model.eval()"),Xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),ztr=o("model.train()"),Wtr=l(),F(cT.$$.fragment),BDe=l(),bd=a("h2"),fT=a("a"),M2e=a("span"),F(zL.$$.fragment),Qtr=l(),E2e=a("span"),Htr=o("AutoModelForCTC"),IDe=l(),Vo=a("div"),F(WL.$$.fragment),Utr=l(),vd=a("p"),Jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),eW=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" class method or the "),oW=a("a"),Ztr=o("from_config()"),ear=o(` class
method.`),oar=l(),QL=a("p"),rar=o("This class cannot be instantiated directly using "),C2e=a("code"),tar=o("__init__()"),aar=o(" (throws an error)."),nar=l(),vt=a("div"),F(HL.$$.fragment),sar=l(),w2e=a("p"),lar=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),iar=l(),Fd=a("p"),dar=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),car=o("not"),far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),mar=o("from_pretrained()"),gar=o(" to load the model weights."),har=l(),F(mT.$$.fragment),par=l(),mo=a("div"),F(UL.$$.fragment),_ar=l(),L2e=a("p"),uar=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bar=l(),Va=a("p"),Far=o("The model class to instantiate is selected based on the "),y2e=a("code"),Tar=o("model_type"),Mar=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(":"),Lar=l(),Le=a("ul"),gT=a("li"),k2e=a("strong"),yar=o("data2vec-audio"),xar=o(" \u2014 "),tW=a("a"),$ar=o("Data2VecAudioForCTC"),kar=o(" (Data2VecAudio model)"),Sar=l(),hT=a("li"),S2e=a("strong"),Rar=o("hubert"),Par=o(" \u2014 "),aW=a("a"),Bar=o("HubertForCTC"),Iar=o(" (Hubert model)"),Nar=l(),pT=a("li"),R2e=a("strong"),qar=o("mctct"),jar=o(" \u2014 "),nW=a("a"),Dar=o("MCTCTForCTC"),Gar=o(" (M-CTC-T model)"),Oar=l(),_T=a("li"),P2e=a("strong"),Var=o("sew"),Xar=o(" \u2014 "),sW=a("a"),zar=o("SEWForCTC"),War=o(" (SEW model)"),Qar=l(),uT=a("li"),B2e=a("strong"),Har=o("sew-d"),Uar=o(" \u2014 "),lW=a("a"),Jar=o("SEWDForCTC"),Yar=o(" (SEW-D model)"),Kar=l(),bT=a("li"),I2e=a("strong"),Zar=o("unispeech"),enr=o(" \u2014 "),iW=a("a"),onr=o("UniSpeechForCTC"),rnr=o(" (UniSpeech model)"),tnr=l(),vT=a("li"),N2e=a("strong"),anr=o("unispeech-sat"),nnr=o(" \u2014 "),dW=a("a"),snr=o("UniSpeechSatForCTC"),lnr=o(" (UniSpeechSat model)"),inr=l(),FT=a("li"),q2e=a("strong"),dnr=o("wav2vec2"),cnr=o(" \u2014 "),cW=a("a"),fnr=o("Wav2Vec2ForCTC"),mnr=o(" (Wav2Vec2 model)"),gnr=l(),TT=a("li"),j2e=a("strong"),hnr=o("wav2vec2-conformer"),pnr=o(" \u2014 "),fW=a("a"),_nr=o("Wav2Vec2ConformerForCTC"),unr=o(" (Wav2Vec2-Conformer model)"),bnr=l(),MT=a("li"),D2e=a("strong"),vnr=o("wavlm"),Fnr=o(" \u2014 "),mW=a("a"),Tnr=o("WavLMForCTC"),Mnr=o(" (WavLM model)"),Enr=l(),ET=a("p"),Cnr=o("The model is set in evaluation mode by default using "),G2e=a("code"),wnr=o("model.eval()"),Anr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),Lnr=o("model.train()"),ynr=l(),F(CT.$$.fragment),NDe=l(),Td=a("h2"),wT=a("a"),V2e=a("span"),F(JL.$$.fragment),xnr=l(),X2e=a("span"),$nr=o("AutoModelForSpeechSeq2Seq"),qDe=l(),Xo=a("div"),F(YL.$$.fragment),knr=l(),Md=a("p"),Snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gW=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" class method or the "),hW=a("a"),Bnr=o("from_config()"),Inr=o(` class
method.`),Nnr=l(),KL=a("p"),qnr=o("This class cannot be instantiated directly using "),z2e=a("code"),jnr=o("__init__()"),Dnr=o(" (throws an error)."),Gnr=l(),Ft=a("div"),F(ZL.$$.fragment),Onr=l(),W2e=a("p"),Vnr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xnr=l(),Ed=a("p"),znr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),Wnr=o("not"),Qnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Hnr=o("from_pretrained()"),Unr=o(" to load the model weights."),Jnr=l(),F(AT.$$.fragment),Ynr=l(),go=a("div"),F(ey.$$.fragment),Knr=l(),H2e=a("p"),Znr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),esr=l(),Xa=a("p"),osr=o("The model class to instantiate is selected based on the "),U2e=a("code"),rsr=o("model_type"),tsr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),ssr=o("pretrained_model_name_or_path"),lsr=o(":"),isr=l(),oy=a("ul"),LT=a("li"),K2e=a("strong"),dsr=o("speech-encoder-decoder"),csr=o(" \u2014 "),_W=a("a"),fsr=o("SpeechEncoderDecoderModel"),msr=o(" (Speech Encoder decoder model)"),gsr=l(),yT=a("li"),Z2e=a("strong"),hsr=o("speech_to_text"),psr=o(" \u2014 "),uW=a("a"),_sr=o("Speech2TextForConditionalGeneration"),usr=o(" (Speech2Text model)"),bsr=l(),xT=a("p"),vsr=o("The model is set in evaluation mode by default using "),e1e=a("code"),Fsr=o("model.eval()"),Tsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Msr=o("model.train()"),Esr=l(),F($T.$$.fragment),jDe=l(),Cd=a("h2"),kT=a("a"),r1e=a("span"),F(ry.$$.fragment),Csr=l(),t1e=a("span"),wsr=o("AutoModelForAudioXVector"),DDe=l(),zo=a("div"),F(ty.$$.fragment),Asr=l(),wd=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bW=a("a"),ysr=o("from_pretrained()"),xsr=o(" class method or the "),vW=a("a"),$sr=o("from_config()"),ksr=o(` class
method.`),Ssr=l(),ay=a("p"),Rsr=o("This class cannot be instantiated directly using "),a1e=a("code"),Psr=o("__init__()"),Bsr=o(" (throws an error)."),Isr=l(),Tt=a("div"),F(ny.$$.fragment),Nsr=l(),n1e=a("p"),qsr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jsr=l(),Ad=a("p"),Dsr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Gsr=o("not"),Osr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" to load the model weights."),zsr=l(),F(ST.$$.fragment),Wsr=l(),ho=a("div"),F(sy.$$.fragment),Qsr=l(),l1e=a("p"),Hsr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Usr=l(),za=a("p"),Jsr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Ysr=o("model_type"),Ksr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(":"),tlr=l(),Zr=a("ul"),RT=a("li"),f1e=a("strong"),alr=o("data2vec-audio"),nlr=o(" \u2014 "),TW=a("a"),slr=o("Data2VecAudioForXVector"),llr=o(" (Data2VecAudio model)"),ilr=l(),PT=a("li"),m1e=a("strong"),dlr=o("unispeech-sat"),clr=o(" \u2014 "),MW=a("a"),flr=o("UniSpeechSatForXVector"),mlr=o(" (UniSpeechSat model)"),glr=l(),BT=a("li"),g1e=a("strong"),hlr=o("wav2vec2"),plr=o(" \u2014 "),EW=a("a"),_lr=o("Wav2Vec2ForXVector"),ulr=o(" (Wav2Vec2 model)"),blr=l(),IT=a("li"),h1e=a("strong"),vlr=o("wav2vec2-conformer"),Flr=o(" \u2014 "),CW=a("a"),Tlr=o("Wav2Vec2ConformerForXVector"),Mlr=o(" (Wav2Vec2-Conformer model)"),Elr=l(),NT=a("li"),p1e=a("strong"),Clr=o("wavlm"),wlr=o(" \u2014 "),wW=a("a"),Alr=o("WavLMForXVector"),Llr=o(" (WavLM model)"),ylr=l(),qT=a("p"),xlr=o("The model is set in evaluation mode by default using "),_1e=a("code"),$lr=o("model.eval()"),klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),Slr=o("model.train()"),Rlr=l(),F(jT.$$.fragment),GDe=l(),Ld=a("h2"),DT=a("a"),b1e=a("span"),F(ly.$$.fragment),Plr=l(),v1e=a("span"),Blr=o("AutoModelForMaskedImageModeling"),ODe=l(),Wo=a("div"),F(iy.$$.fragment),Ilr=l(),yd=a("p"),Nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AW=a("a"),qlr=o("from_pretrained()"),jlr=o(" class method or the "),LW=a("a"),Dlr=o("from_config()"),Glr=o(` class
method.`),Olr=l(),dy=a("p"),Vlr=o("This class cannot be instantiated directly using "),F1e=a("code"),Xlr=o("__init__()"),zlr=o(" (throws an error)."),Wlr=l(),Mt=a("div"),F(cy.$$.fragment),Qlr=l(),T1e=a("p"),Hlr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ulr=l(),xd=a("p"),Jlr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),Ylr=o("not"),Klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Zlr=o("from_pretrained()"),eir=o(" to load the model weights."),oir=l(),F(GT.$$.fragment),rir=l(),po=a("div"),F(fy.$$.fragment),tir=l(),E1e=a("p"),air=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nir=l(),Wa=a("p"),sir=o("The model class to instantiate is selected based on the "),C1e=a("code"),lir=o("model_type"),iir=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),dir=o("pretrained_model_name_or_path"),cir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(":"),gir=l(),$d=a("ul"),OT=a("li"),L1e=a("strong"),hir=o("deit"),pir=o(" \u2014 "),xW=a("a"),_ir=o("DeiTForMaskedImageModeling"),uir=o(" (DeiT model)"),bir=l(),VT=a("li"),y1e=a("strong"),vir=o("swin"),Fir=o(" \u2014 "),$W=a("a"),Tir=o("SwinForMaskedImageModeling"),Mir=o(" (Swin Transformer model)"),Eir=l(),XT=a("li"),x1e=a("strong"),Cir=o("vit"),wir=o(" \u2014 "),kW=a("a"),Air=o("ViTForMaskedImageModeling"),Lir=o(" (ViT model)"),yir=l(),zT=a("p"),xir=o("The model is set in evaluation mode by default using "),$1e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),Sir=o("model.train()"),Rir=l(),F(WT.$$.fragment),VDe=l(),kd=a("h2"),QT=a("a"),S1e=a("span"),F(my.$$.fragment),Pir=l(),R1e=a("span"),Bir=o("AutoModelForObjectDetection"),XDe=l(),Qo=a("div"),F(gy.$$.fragment),Iir=l(),Sd=a("p"),Nir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SW=a("a"),qir=o("from_pretrained()"),jir=o(" class method or the "),RW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),hy=a("p"),Vir=o("This class cannot be instantiated directly using "),P1e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),Et=a("div"),F(py.$$.fragment),Qir=l(),B1e=a("p"),Hir=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Uir=l(),Rd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(HT.$$.fragment),rdr=l(),_o=a("div"),F(_y.$$.fragment),tdr=l(),N1e=a("p"),adr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ndr=l(),Qa=a("p"),sdr=o("The model class to instantiate is selected based on the "),q1e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),uy=a("ul"),UT=a("li"),G1e=a("strong"),hdr=o("detr"),pdr=o(" \u2014 "),BW=a("a"),_dr=o("DetrForObjectDetection"),udr=o(" (DETR model)"),bdr=l(),JT=a("li"),O1e=a("strong"),vdr=o("yolos"),Fdr=o(" \u2014 "),IW=a("a"),Tdr=o("YolosForObjectDetection"),Mdr=o(" (YOLOS model)"),Edr=l(),YT=a("p"),Cdr=o("The model is set in evaluation mode by default using "),V1e=a("code"),wdr=o("model.eval()"),Adr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),Ldr=o("model.train()"),ydr=l(),F(KT.$$.fragment),zDe=l(),Pd=a("h2"),ZT=a("a"),z1e=a("span"),F(by.$$.fragment),xdr=l(),W1e=a("span"),$dr=o("AutoModelForImageSegmentation"),WDe=l(),Ho=a("div"),F(vy.$$.fragment),kdr=l(),Bd=a("p"),Sdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NW=a("a"),Rdr=o("from_pretrained()"),Pdr=o(" class method or the "),qW=a("a"),Bdr=o("from_config()"),Idr=o(` class
method.`),Ndr=l(),Fy=a("p"),qdr=o("This class cannot be instantiated directly using "),Q1e=a("code"),jdr=o("__init__()"),Ddr=o(" (throws an error)."),Gdr=l(),Ct=a("div"),F(Ty.$$.fragment),Odr=l(),H1e=a("p"),Vdr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Xdr=l(),Id=a("p"),zdr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),Wdr=o("not"),Qdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Hdr=o("from_pretrained()"),Udr=o(" to load the model weights."),Jdr=l(),F(e7.$$.fragment),Ydr=l(),uo=a("div"),F(My.$$.fragment),Kdr=l(),J1e=a("p"),Zdr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ecr=l(),Ha=a("p"),ocr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),rcr=o("model_type"),tcr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(":"),icr=l(),ebe=a("ul"),o7=a("li"),obe=a("strong"),dcr=o("detr"),ccr=o(" \u2014 "),DW=a("a"),fcr=o("DetrForSegmentation"),mcr=o(" (DETR model)"),gcr=l(),r7=a("p"),hcr=o("The model is set in evaluation mode by default using "),rbe=a("code"),pcr=o("model.eval()"),_cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),ucr=o("model.train()"),bcr=l(),F(t7.$$.fragment),QDe=l(),Nd=a("h2"),a7=a("a"),abe=a("span"),F(Ey.$$.fragment),vcr=l(),nbe=a("span"),Fcr=o("AutoModelForSemanticSegmentation"),HDe=l(),Uo=a("div"),F(Cy.$$.fragment),Tcr=l(),qd=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GW=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),OW=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),Lcr=l(),wy=a("p"),ycr=o("This class cannot be instantiated directly using "),sbe=a("code"),xcr=o("__init__()"),$cr=o(" (throws an error)."),kcr=l(),wt=a("div"),F(Ay.$$.fragment),Scr=l(),lbe=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pcr=l(),jd=a("p"),Bcr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),Icr=o("not"),Ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),qcr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),F(n7.$$.fragment),Gcr=l(),bo=a("div"),F(Ly.$$.fragment),Ocr=l(),dbe=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xcr=l(),Ua=a("p"),zcr=o("The model class to instantiate is selected based on the "),cbe=a("code"),Wcr=o("model_type"),Qcr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),Ja=a("ul"),s7=a("li"),gbe=a("strong"),Zcr=o("beit"),efr=o(" \u2014 "),XW=a("a"),ofr=o("BeitForSemanticSegmentation"),rfr=o(" (BEiT model)"),tfr=l(),l7=a("li"),hbe=a("strong"),afr=o("data2vec-vision"),nfr=o(" \u2014 "),zW=a("a"),sfr=o("Data2VecVisionForSemanticSegmentation"),lfr=o(" (Data2VecVision model)"),ifr=l(),i7=a("li"),pbe=a("strong"),dfr=o("dpt"),cfr=o(" \u2014 "),WW=a("a"),ffr=o("DPTForSemanticSegmentation"),mfr=o(" (DPT model)"),gfr=l(),d7=a("li"),_be=a("strong"),hfr=o("segformer"),pfr=o(" \u2014 "),QW=a("a"),_fr=o("SegformerForSemanticSegmentation"),ufr=o(" (SegFormer model)"),bfr=l(),c7=a("p"),vfr=o("The model is set in evaluation mode by default using "),ube=a("code"),Ffr=o("model.eval()"),Tfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=a("code"),Mfr=o("model.train()"),Efr=l(),F(f7.$$.fragment),UDe=l(),Dd=a("h2"),m7=a("a"),vbe=a("span"),F(yy.$$.fragment),Cfr=l(),Fbe=a("span"),wfr=o("AutoModelForInstanceSegmentation"),JDe=l(),Jo=a("div"),F(xy.$$.fragment),Afr=l(),Gd=a("p"),Lfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HW=a("a"),yfr=o("from_pretrained()"),xfr=o(" class method or the "),UW=a("a"),$fr=o("from_config()"),kfr=o(` class
method.`),Sfr=l(),$y=a("p"),Rfr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Pfr=o("__init__()"),Bfr=o(" (throws an error)."),Ifr=l(),At=a("div"),F(ky.$$.fragment),Nfr=l(),Mbe=a("p"),qfr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jfr=l(),Od=a("p"),Dfr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Gfr=o("not"),Ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Vfr=o("from_pretrained()"),Xfr=o(" to load the model weights."),zfr=l(),F(g7.$$.fragment),Wfr=l(),vo=a("div"),F(Sy.$$.fragment),Qfr=l(),Cbe=a("p"),Hfr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ufr=l(),Ya=a("p"),Jfr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Yfr=o("model_type"),Kfr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),Zfr=o("pretrained_model_name_or_path"),emr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),omr=o("pretrained_model_name_or_path"),rmr=o(":"),tmr=l(),ybe=a("ul"),h7=a("li"),xbe=a("strong"),amr=o("maskformer"),nmr=o(" \u2014 "),YW=a("a"),smr=o("MaskFormerForInstanceSegmentation"),lmr=o(" (MaskFormer model)"),imr=l(),p7=a("p"),dmr=o("The model is set in evaluation mode by default using "),$be=a("code"),cmr=o("model.eval()"),fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=a("code"),mmr=o("model.train()"),gmr=l(),F(_7.$$.fragment),YDe=l(),Vd=a("h2"),u7=a("a"),Sbe=a("span"),F(Ry.$$.fragment),hmr=l(),Rbe=a("span"),pmr=o("TFAutoModel"),KDe=l(),Yo=a("div"),F(Py.$$.fragment),_mr=l(),Xd=a("p"),umr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KW=a("a"),bmr=o("from_pretrained()"),vmr=o(" class method or the "),ZW=a("a"),Fmr=o("from_config()"),Tmr=o(` class
method.`),Mmr=l(),By=a("p"),Emr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Cmr=o("__init__()"),wmr=o(" (throws an error)."),Amr=l(),Lt=a("div"),F(Iy.$$.fragment),Lmr=l(),Bbe=a("p"),ymr=o("Instantiates one of the base model classes of the library from a configuration."),xmr=l(),zd=a("p"),$mr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),kmr=o("not"),Smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),Rmr=o("from_pretrained()"),Pmr=o(" to load the model weights."),Bmr=l(),F(b7.$$.fragment),Imr=l(),wr=a("div"),F(Ny.$$.fragment),Nmr=l(),Nbe=a("p"),qmr=o("Instantiate one of the base model classes of the library from a pretrained model."),jmr=l(),Ka=a("p"),Dmr=o("The model class to instantiate is selected based on the "),qbe=a("code"),Gmr=o("model_type"),Omr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),zmr=o("pretrained_model_name_or_path"),Wmr=o(":"),Qmr=l(),q=a("ul"),v7=a("li"),Gbe=a("strong"),Hmr=o("albert"),Umr=o(" \u2014 "),oQ=a("a"),Jmr=o("TFAlbertModel"),Ymr=o(" (ALBERT model)"),Kmr=l(),F7=a("li"),Obe=a("strong"),Zmr=o("bart"),egr=o(" \u2014 "),rQ=a("a"),ogr=o("TFBartModel"),rgr=o(" (BART model)"),tgr=l(),T7=a("li"),Vbe=a("strong"),agr=o("bert"),ngr=o(" \u2014 "),tQ=a("a"),sgr=o("TFBertModel"),lgr=o(" (BERT model)"),igr=l(),M7=a("li"),Xbe=a("strong"),dgr=o("blenderbot"),cgr=o(" \u2014 "),aQ=a("a"),fgr=o("TFBlenderbotModel"),mgr=o(" (Blenderbot model)"),ggr=l(),E7=a("li"),zbe=a("strong"),hgr=o("blenderbot-small"),pgr=o(" \u2014 "),nQ=a("a"),_gr=o("TFBlenderbotSmallModel"),ugr=o(" (BlenderbotSmall model)"),bgr=l(),C7=a("li"),Wbe=a("strong"),vgr=o("camembert"),Fgr=o(" \u2014 "),sQ=a("a"),Tgr=o("TFCamembertModel"),Mgr=o(" (CamemBERT model)"),Egr=l(),w7=a("li"),Qbe=a("strong"),Cgr=o("clip"),wgr=o(" \u2014 "),lQ=a("a"),Agr=o("TFCLIPModel"),Lgr=o(" (CLIP model)"),ygr=l(),A7=a("li"),Hbe=a("strong"),xgr=o("convbert"),$gr=o(" \u2014 "),iQ=a("a"),kgr=o("TFConvBertModel"),Sgr=o(" (ConvBERT model)"),Rgr=l(),L7=a("li"),Ube=a("strong"),Pgr=o("convnext"),Bgr=o(" \u2014 "),dQ=a("a"),Igr=o("TFConvNextModel"),Ngr=o(" (ConvNeXT model)"),qgr=l(),y7=a("li"),Jbe=a("strong"),jgr=o("ctrl"),Dgr=o(" \u2014 "),cQ=a("a"),Ggr=o("TFCTRLModel"),Ogr=o(" (CTRL model)"),Vgr=l(),x7=a("li"),Ybe=a("strong"),Xgr=o("data2vec-vision"),zgr=o(" \u2014 "),fQ=a("a"),Wgr=o("TFData2VecVisionModel"),Qgr=o(" (Data2VecVision model)"),Hgr=l(),$7=a("li"),Kbe=a("strong"),Ugr=o("deberta"),Jgr=o(" \u2014 "),mQ=a("a"),Ygr=o("TFDebertaModel"),Kgr=o(" (DeBERTa model)"),Zgr=l(),k7=a("li"),Zbe=a("strong"),ehr=o("deberta-v2"),ohr=o(" \u2014 "),gQ=a("a"),rhr=o("TFDebertaV2Model"),thr=o(" (DeBERTa-v2 model)"),ahr=l(),S7=a("li"),eve=a("strong"),nhr=o("distilbert"),shr=o(" \u2014 "),hQ=a("a"),lhr=o("TFDistilBertModel"),ihr=o(" (DistilBERT model)"),dhr=l(),R7=a("li"),ove=a("strong"),chr=o("dpr"),fhr=o(" \u2014 "),pQ=a("a"),mhr=o("TFDPRQuestionEncoder"),ghr=o(" (DPR model)"),hhr=l(),P7=a("li"),rve=a("strong"),phr=o("electra"),_hr=o(" \u2014 "),_Q=a("a"),uhr=o("TFElectraModel"),bhr=o(" (ELECTRA model)"),vhr=l(),B7=a("li"),tve=a("strong"),Fhr=o("flaubert"),Thr=o(" \u2014 "),uQ=a("a"),Mhr=o("TFFlaubertModel"),Ehr=o(" (FlauBERT model)"),Chr=l(),qs=a("li"),ave=a("strong"),whr=o("funnel"),Ahr=o(" \u2014 "),bQ=a("a"),Lhr=o("TFFunnelModel"),yhr=o(" or "),vQ=a("a"),xhr=o("TFFunnelBaseModel"),$hr=o(" (Funnel Transformer model)"),khr=l(),I7=a("li"),nve=a("strong"),Shr=o("gpt2"),Rhr=o(" \u2014 "),FQ=a("a"),Phr=o("TFGPT2Model"),Bhr=o(" (OpenAI GPT-2 model)"),Ihr=l(),N7=a("li"),sve=a("strong"),Nhr=o("gptj"),qhr=o(" \u2014 "),TQ=a("a"),jhr=o("TFGPTJModel"),Dhr=o(" (GPT-J model)"),Ghr=l(),q7=a("li"),lve=a("strong"),Ohr=o("hubert"),Vhr=o(" \u2014 "),MQ=a("a"),Xhr=o("TFHubertModel"),zhr=o(" (Hubert model)"),Whr=l(),j7=a("li"),ive=a("strong"),Qhr=o("layoutlm"),Hhr=o(" \u2014 "),EQ=a("a"),Uhr=o("TFLayoutLMModel"),Jhr=o(" (LayoutLM model)"),Yhr=l(),D7=a("li"),dve=a("strong"),Khr=o("led"),Zhr=o(" \u2014 "),CQ=a("a"),epr=o("TFLEDModel"),opr=o(" (LED model)"),rpr=l(),G7=a("li"),cve=a("strong"),tpr=o("longformer"),apr=o(" \u2014 "),wQ=a("a"),npr=o("TFLongformerModel"),spr=o(" (Longformer model)"),lpr=l(),O7=a("li"),fve=a("strong"),ipr=o("lxmert"),dpr=o(" \u2014 "),AQ=a("a"),cpr=o("TFLxmertModel"),fpr=o(" (LXMERT model)"),mpr=l(),V7=a("li"),mve=a("strong"),gpr=o("marian"),hpr=o(" \u2014 "),LQ=a("a"),ppr=o("TFMarianModel"),_pr=o(" (Marian model)"),upr=l(),X7=a("li"),gve=a("strong"),bpr=o("mbart"),vpr=o(" \u2014 "),yQ=a("a"),Fpr=o("TFMBartModel"),Tpr=o(" (mBART model)"),Mpr=l(),z7=a("li"),hve=a("strong"),Epr=o("mobilebert"),Cpr=o(" \u2014 "),xQ=a("a"),wpr=o("TFMobileBertModel"),Apr=o(" (MobileBERT model)"),Lpr=l(),W7=a("li"),pve=a("strong"),ypr=o("mpnet"),xpr=o(" \u2014 "),$Q=a("a"),$pr=o("TFMPNetModel"),kpr=o(" (MPNet model)"),Spr=l(),Q7=a("li"),_ve=a("strong"),Rpr=o("mt5"),Ppr=o(" \u2014 "),kQ=a("a"),Bpr=o("TFMT5Model"),Ipr=o(" (MT5 model)"),Npr=l(),H7=a("li"),uve=a("strong"),qpr=o("openai-gpt"),jpr=o(" \u2014 "),SQ=a("a"),Dpr=o("TFOpenAIGPTModel"),Gpr=o(" (OpenAI GPT model)"),Opr=l(),U7=a("li"),bve=a("strong"),Vpr=o("opt"),Xpr=o(" \u2014 "),RQ=a("a"),zpr=o("TFOPTModel"),Wpr=o(" (OPT model)"),Qpr=l(),J7=a("li"),vve=a("strong"),Hpr=o("pegasus"),Upr=o(" \u2014 "),PQ=a("a"),Jpr=o("TFPegasusModel"),Ypr=o(" (Pegasus model)"),Kpr=l(),Y7=a("li"),Fve=a("strong"),Zpr=o("rembert"),e_r=o(" \u2014 "),BQ=a("a"),o_r=o("TFRemBertModel"),r_r=o(" (RemBERT model)"),t_r=l(),K7=a("li"),Tve=a("strong"),a_r=o("roberta"),n_r=o(" \u2014 "),IQ=a("a"),s_r=o("TFRobertaModel"),l_r=o(" (RoBERTa model)"),i_r=l(),Z7=a("li"),Mve=a("strong"),d_r=o("roformer"),c_r=o(" \u2014 "),NQ=a("a"),f_r=o("TFRoFormerModel"),m_r=o(" (RoFormer model)"),g_r=l(),e9=a("li"),Eve=a("strong"),h_r=o("speech_to_text"),p_r=o(" \u2014 "),qQ=a("a"),__r=o("TFSpeech2TextModel"),u_r=o(" (Speech2Text model)"),b_r=l(),o9=a("li"),Cve=a("strong"),v_r=o("swin"),F_r=o(" \u2014 "),jQ=a("a"),T_r=o("TFSwinModel"),M_r=o(" (Swin Transformer model)"),E_r=l(),r9=a("li"),wve=a("strong"),C_r=o("t5"),w_r=o(" \u2014 "),DQ=a("a"),A_r=o("TFT5Model"),L_r=o(" (T5 model)"),y_r=l(),t9=a("li"),Ave=a("strong"),x_r=o("tapas"),$_r=o(" \u2014 "),GQ=a("a"),k_r=o("TFTapasModel"),S_r=o(" (TAPAS model)"),R_r=l(),a9=a("li"),Lve=a("strong"),P_r=o("transfo-xl"),B_r=o(" \u2014 "),OQ=a("a"),I_r=o("TFTransfoXLModel"),N_r=o(" (Transformer-XL model)"),q_r=l(),n9=a("li"),yve=a("strong"),j_r=o("vit"),D_r=o(" \u2014 "),VQ=a("a"),G_r=o("TFViTModel"),O_r=o(" (ViT model)"),V_r=l(),s9=a("li"),xve=a("strong"),X_r=o("vit_mae"),z_r=o(" \u2014 "),XQ=a("a"),W_r=o("TFViTMAEModel"),Q_r=o(" (ViTMAE model)"),H_r=l(),l9=a("li"),$ve=a("strong"),U_r=o("wav2vec2"),J_r=o(" \u2014 "),zQ=a("a"),Y_r=o("TFWav2Vec2Model"),K_r=o(" (Wav2Vec2 model)"),Z_r=l(),i9=a("li"),kve=a("strong"),eur=o("xlm"),our=o(" \u2014 "),WQ=a("a"),rur=o("TFXLMModel"),tur=o(" (XLM model)"),aur=l(),d9=a("li"),Sve=a("strong"),nur=o("xlm-roberta"),sur=o(" \u2014 "),QQ=a("a"),lur=o("TFXLMRobertaModel"),iur=o(" (XLM-RoBERTa model)"),dur=l(),c9=a("li"),Rve=a("strong"),cur=o("xlnet"),fur=o(" \u2014 "),HQ=a("a"),mur=o("TFXLNetModel"),gur=o(" (XLNet model)"),hur=l(),F(f9.$$.fragment),ZDe=l(),Wd=a("h2"),m9=a("a"),Pve=a("span"),F(qy.$$.fragment),pur=l(),Bve=a("span"),_ur=o("TFAutoModelForPreTraining"),eGe=l(),Ko=a("div"),F(jy.$$.fragment),uur=l(),Qd=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),JQ=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),Dy=a("p"),Cur=o("This class cannot be instantiated directly using "),Ive=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),yt=a("div"),F(Gy.$$.fragment),yur=l(),Nve=a("p"),xur=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$ur=l(),Hd=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(g9.$$.fragment),Nur=l(),Ar=a("div"),F(Oy.$$.fragment),qur=l(),jve=a("p"),jur=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dur=l(),Za=a("p"),Gur=o("The model class to instantiate is selected based on the "),Dve=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(":"),Hur=l(),se=a("ul"),h9=a("li"),Vve=a("strong"),Uur=o("albert"),Jur=o(" \u2014 "),KQ=a("a"),Yur=o("TFAlbertForPreTraining"),Kur=o(" (ALBERT model)"),Zur=l(),p9=a("li"),Xve=a("strong"),e2r=o("bart"),o2r=o(" \u2014 "),ZQ=a("a"),r2r=o("TFBartForConditionalGeneration"),t2r=o(" (BART model)"),a2r=l(),_9=a("li"),zve=a("strong"),n2r=o("bert"),s2r=o(" \u2014 "),eH=a("a"),l2r=o("TFBertForPreTraining"),i2r=o(" (BERT model)"),d2r=l(),u9=a("li"),Wve=a("strong"),c2r=o("camembert"),f2r=o(" \u2014 "),oH=a("a"),m2r=o("TFCamembertForMaskedLM"),g2r=o(" (CamemBERT model)"),h2r=l(),b9=a("li"),Qve=a("strong"),p2r=o("ctrl"),_2r=o(" \u2014 "),rH=a("a"),u2r=o("TFCTRLLMHeadModel"),b2r=o(" (CTRL model)"),v2r=l(),v9=a("li"),Hve=a("strong"),F2r=o("distilbert"),T2r=o(" \u2014 "),tH=a("a"),M2r=o("TFDistilBertForMaskedLM"),E2r=o(" (DistilBERT model)"),C2r=l(),F9=a("li"),Uve=a("strong"),w2r=o("electra"),A2r=o(" \u2014 "),aH=a("a"),L2r=o("TFElectraForPreTraining"),y2r=o(" (ELECTRA model)"),x2r=l(),T9=a("li"),Jve=a("strong"),$2r=o("flaubert"),k2r=o(" \u2014 "),nH=a("a"),S2r=o("TFFlaubertWithLMHeadModel"),R2r=o(" (FlauBERT model)"),P2r=l(),M9=a("li"),Yve=a("strong"),B2r=o("funnel"),I2r=o(" \u2014 "),sH=a("a"),N2r=o("TFFunnelForPreTraining"),q2r=o(" (Funnel Transformer model)"),j2r=l(),E9=a("li"),Kve=a("strong"),D2r=o("gpt2"),G2r=o(" \u2014 "),lH=a("a"),O2r=o("TFGPT2LMHeadModel"),V2r=o(" (OpenAI GPT-2 model)"),X2r=l(),C9=a("li"),Zve=a("strong"),z2r=o("layoutlm"),W2r=o(" \u2014 "),iH=a("a"),Q2r=o("TFLayoutLMForMaskedLM"),H2r=o(" (LayoutLM model)"),U2r=l(),w9=a("li"),eFe=a("strong"),J2r=o("lxmert"),Y2r=o(" \u2014 "),dH=a("a"),K2r=o("TFLxmertForPreTraining"),Z2r=o(" (LXMERT model)"),e1r=l(),A9=a("li"),oFe=a("strong"),o1r=o("mobilebert"),r1r=o(" \u2014 "),cH=a("a"),t1r=o("TFMobileBertForPreTraining"),a1r=o(" (MobileBERT model)"),n1r=l(),L9=a("li"),rFe=a("strong"),s1r=o("mpnet"),l1r=o(" \u2014 "),fH=a("a"),i1r=o("TFMPNetForMaskedLM"),d1r=o(" (MPNet model)"),c1r=l(),y9=a("li"),tFe=a("strong"),f1r=o("openai-gpt"),m1r=o(" \u2014 "),mH=a("a"),g1r=o("TFOpenAIGPTLMHeadModel"),h1r=o(" (OpenAI GPT model)"),p1r=l(),x9=a("li"),aFe=a("strong"),_1r=o("roberta"),u1r=o(" \u2014 "),gH=a("a"),b1r=o("TFRobertaForMaskedLM"),v1r=o(" (RoBERTa model)"),F1r=l(),$9=a("li"),nFe=a("strong"),T1r=o("t5"),M1r=o(" \u2014 "),hH=a("a"),E1r=o("TFT5ForConditionalGeneration"),C1r=o(" (T5 model)"),w1r=l(),k9=a("li"),sFe=a("strong"),A1r=o("tapas"),L1r=o(" \u2014 "),pH=a("a"),y1r=o("TFTapasForMaskedLM"),x1r=o(" (TAPAS model)"),$1r=l(),S9=a("li"),lFe=a("strong"),k1r=o("transfo-xl"),S1r=o(" \u2014 "),_H=a("a"),R1r=o("TFTransfoXLLMHeadModel"),P1r=o(" (Transformer-XL model)"),B1r=l(),R9=a("li"),iFe=a("strong"),I1r=o("vit_mae"),N1r=o(" \u2014 "),uH=a("a"),q1r=o("TFViTMAEForPreTraining"),j1r=o(" (ViTMAE model)"),D1r=l(),P9=a("li"),dFe=a("strong"),G1r=o("xlm"),O1r=o(" \u2014 "),bH=a("a"),V1r=o("TFXLMWithLMHeadModel"),X1r=o(" (XLM model)"),z1r=l(),B9=a("li"),cFe=a("strong"),W1r=o("xlm-roberta"),Q1r=o(" \u2014 "),vH=a("a"),H1r=o("TFXLMRobertaForMaskedLM"),U1r=o(" (XLM-RoBERTa model)"),J1r=l(),I9=a("li"),fFe=a("strong"),Y1r=o("xlnet"),K1r=o(" \u2014 "),FH=a("a"),Z1r=o("TFXLNetLMHeadModel"),ebr=o(" (XLNet model)"),obr=l(),F(N9.$$.fragment),oGe=l(),Ud=a("h2"),q9=a("a"),mFe=a("span"),F(Vy.$$.fragment),rbr=l(),gFe=a("span"),tbr=o("TFAutoModelForCausalLM"),rGe=l(),Zo=a("div"),F(Xy.$$.fragment),abr=l(),Jd=a("p"),nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TH=a("a"),sbr=o("from_pretrained()"),lbr=o(" class method or the "),MH=a("a"),ibr=o("from_config()"),dbr=o(` class
method.`),cbr=l(),zy=a("p"),fbr=o("This class cannot be instantiated directly using "),hFe=a("code"),mbr=o("__init__()"),gbr=o(" (throws an error)."),hbr=l(),xt=a("div"),F(Wy.$$.fragment),pbr=l(),pFe=a("p"),_br=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ubr=l(),Yd=a("p"),bbr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),vbr=o("not"),Fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" to load the model weights."),Ebr=l(),F(j9.$$.fragment),Cbr=l(),Lr=a("div"),F(Qy.$$.fragment),wbr=l(),uFe=a("p"),Abr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lbr=l(),en=a("p"),ybr=o("The model class to instantiate is selected based on the "),bFe=a("code"),xbr=o("model_type"),$br=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),Rbr=o("pretrained_model_name_or_path"),Pbr=o(":"),Bbr=l(),Me=a("ul"),D9=a("li"),TFe=a("strong"),Ibr=o("bert"),Nbr=o(" \u2014 "),CH=a("a"),qbr=o("TFBertLMHeadModel"),jbr=o(" (BERT model)"),Dbr=l(),G9=a("li"),MFe=a("strong"),Gbr=o("camembert"),Obr=o(" \u2014 "),wH=a("a"),Vbr=o("TFCamembertForCausalLM"),Xbr=o(" (CamemBERT model)"),zbr=l(),O9=a("li"),EFe=a("strong"),Wbr=o("ctrl"),Qbr=o(" \u2014 "),AH=a("a"),Hbr=o("TFCTRLLMHeadModel"),Ubr=o(" (CTRL model)"),Jbr=l(),V9=a("li"),CFe=a("strong"),Ybr=o("gpt2"),Kbr=o(" \u2014 "),LH=a("a"),Zbr=o("TFGPT2LMHeadModel"),evr=o(" (OpenAI GPT-2 model)"),ovr=l(),X9=a("li"),wFe=a("strong"),rvr=o("gptj"),tvr=o(" \u2014 "),yH=a("a"),avr=o("TFGPTJForCausalLM"),nvr=o(" (GPT-J model)"),svr=l(),z9=a("li"),AFe=a("strong"),lvr=o("openai-gpt"),ivr=o(" \u2014 "),xH=a("a"),dvr=o("TFOpenAIGPTLMHeadModel"),cvr=o(" (OpenAI GPT model)"),fvr=l(),W9=a("li"),LFe=a("strong"),mvr=o("opt"),gvr=o(" \u2014 "),$H=a("a"),hvr=o("TFOPTForCausalLM"),pvr=o(" (OPT model)"),_vr=l(),Q9=a("li"),yFe=a("strong"),uvr=o("rembert"),bvr=o(" \u2014 "),kH=a("a"),vvr=o("TFRemBertForCausalLM"),Fvr=o(" (RemBERT model)"),Tvr=l(),H9=a("li"),xFe=a("strong"),Mvr=o("roberta"),Evr=o(" \u2014 "),SH=a("a"),Cvr=o("TFRobertaForCausalLM"),wvr=o(" (RoBERTa model)"),Avr=l(),U9=a("li"),$Fe=a("strong"),Lvr=o("roformer"),yvr=o(" \u2014 "),RH=a("a"),xvr=o("TFRoFormerForCausalLM"),$vr=o(" (RoFormer model)"),kvr=l(),J9=a("li"),kFe=a("strong"),Svr=o("transfo-xl"),Rvr=o(" \u2014 "),PH=a("a"),Pvr=o("TFTransfoXLLMHeadModel"),Bvr=o(" (Transformer-XL model)"),Ivr=l(),Y9=a("li"),SFe=a("strong"),Nvr=o("xlm"),qvr=o(" \u2014 "),BH=a("a"),jvr=o("TFXLMWithLMHeadModel"),Dvr=o(" (XLM model)"),Gvr=l(),K9=a("li"),RFe=a("strong"),Ovr=o("xlnet"),Vvr=o(" \u2014 "),IH=a("a"),Xvr=o("TFXLNetLMHeadModel"),zvr=o(" (XLNet model)"),Wvr=l(),F(Z9.$$.fragment),tGe=l(),Kd=a("h2"),eM=a("a"),PFe=a("span"),F(Hy.$$.fragment),Qvr=l(),BFe=a("span"),Hvr=o("TFAutoModelForImageClassification"),aGe=l(),er=a("div"),F(Uy.$$.fragment),Uvr=l(),Zd=a("p"),Jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" class method or the "),qH=a("a"),Zvr=o("from_config()"),eFr=o(` class
method.`),oFr=l(),Jy=a("p"),rFr=o("This class cannot be instantiated directly using "),IFe=a("code"),tFr=o("__init__()"),aFr=o(" (throws an error)."),nFr=l(),$t=a("div"),F(Yy.$$.fragment),sFr=l(),NFe=a("p"),lFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iFr=l(),ec=a("p"),dFr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),cFr=o("not"),fFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),mFr=o("from_pretrained()"),gFr=o(" to load the model weights."),hFr=l(),F(oM.$$.fragment),pFr=l(),yr=a("div"),F(Ky.$$.fragment),_Fr=l(),jFe=a("p"),uFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bFr=l(),on=a("p"),vFr=o("The model class to instantiate is selected based on the "),DFe=a("code"),FFr=o("model_type"),TFr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(":"),AFr=l(),rn=a("ul"),rM=a("li"),VFe=a("strong"),LFr=o("convnext"),yFr=o(" \u2014 "),DH=a("a"),xFr=o("TFConvNextForImageClassification"),$Fr=o(" (ConvNeXT model)"),kFr=l(),tM=a("li"),XFe=a("strong"),SFr=o("data2vec-vision"),RFr=o(" \u2014 "),GH=a("a"),PFr=o("TFData2VecVisionForImageClassification"),BFr=o(" (Data2VecVision model)"),IFr=l(),aM=a("li"),zFe=a("strong"),NFr=o("swin"),qFr=o(" \u2014 "),OH=a("a"),jFr=o("TFSwinForImageClassification"),DFr=o(" (Swin Transformer model)"),GFr=l(),nM=a("li"),WFe=a("strong"),OFr=o("vit"),VFr=o(" \u2014 "),VH=a("a"),XFr=o("TFViTForImageClassification"),zFr=o(" (ViT model)"),WFr=l(),F(sM.$$.fragment),nGe=l(),oc=a("h2"),lM=a("a"),QFe=a("span"),F(Zy.$$.fragment),QFr=l(),HFe=a("span"),HFr=o("TFAutoModelForMaskedLM"),sGe=l(),or=a("div"),F(e8.$$.fragment),UFr=l(),rc=a("p"),JFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XH=a("a"),YFr=o("from_pretrained()"),KFr=o(" class method or the "),zH=a("a"),ZFr=o("from_config()"),e6r=o(` class
method.`),o6r=l(),o8=a("p"),r6r=o("This class cannot be instantiated directly using "),UFe=a("code"),t6r=o("__init__()"),a6r=o(" (throws an error)."),n6r=l(),kt=a("div"),F(r8.$$.fragment),s6r=l(),JFe=a("p"),l6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i6r=l(),tc=a("p"),d6r=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),c6r=o("not"),f6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),m6r=o("from_pretrained()"),g6r=o(" to load the model weights."),h6r=l(),F(iM.$$.fragment),p6r=l(),xr=a("div"),F(t8.$$.fragment),_6r=l(),KFe=a("p"),u6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b6r=l(),tn=a("p"),v6r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),F6r=o("model_type"),T6r=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),C6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),ie=a("ul"),dM=a("li"),r6e=a("strong"),L6r=o("albert"),y6r=o(" \u2014 "),QH=a("a"),x6r=o("TFAlbertForMaskedLM"),$6r=o(" (ALBERT model)"),k6r=l(),cM=a("li"),t6e=a("strong"),S6r=o("bert"),R6r=o(" \u2014 "),HH=a("a"),P6r=o("TFBertForMaskedLM"),B6r=o(" (BERT model)"),I6r=l(),fM=a("li"),a6e=a("strong"),N6r=o("camembert"),q6r=o(" \u2014 "),UH=a("a"),j6r=o("TFCamembertForMaskedLM"),D6r=o(" (CamemBERT model)"),G6r=l(),mM=a("li"),n6e=a("strong"),O6r=o("convbert"),V6r=o(" \u2014 "),JH=a("a"),X6r=o("TFConvBertForMaskedLM"),z6r=o(" (ConvBERT model)"),W6r=l(),gM=a("li"),s6e=a("strong"),Q6r=o("deberta"),H6r=o(" \u2014 "),YH=a("a"),U6r=o("TFDebertaForMaskedLM"),J6r=o(" (DeBERTa model)"),Y6r=l(),hM=a("li"),l6e=a("strong"),K6r=o("deberta-v2"),Z6r=o(" \u2014 "),KH=a("a"),eTr=o("TFDebertaV2ForMaskedLM"),oTr=o(" (DeBERTa-v2 model)"),rTr=l(),pM=a("li"),i6e=a("strong"),tTr=o("distilbert"),aTr=o(" \u2014 "),ZH=a("a"),nTr=o("TFDistilBertForMaskedLM"),sTr=o(" (DistilBERT model)"),lTr=l(),_M=a("li"),d6e=a("strong"),iTr=o("electra"),dTr=o(" \u2014 "),eU=a("a"),cTr=o("TFElectraForMaskedLM"),fTr=o(" (ELECTRA model)"),mTr=l(),uM=a("li"),c6e=a("strong"),gTr=o("flaubert"),hTr=o(" \u2014 "),oU=a("a"),pTr=o("TFFlaubertWithLMHeadModel"),_Tr=o(" (FlauBERT model)"),uTr=l(),bM=a("li"),f6e=a("strong"),bTr=o("funnel"),vTr=o(" \u2014 "),rU=a("a"),FTr=o("TFFunnelForMaskedLM"),TTr=o(" (Funnel Transformer model)"),MTr=l(),vM=a("li"),m6e=a("strong"),ETr=o("layoutlm"),CTr=o(" \u2014 "),tU=a("a"),wTr=o("TFLayoutLMForMaskedLM"),ATr=o(" (LayoutLM model)"),LTr=l(),FM=a("li"),g6e=a("strong"),yTr=o("longformer"),xTr=o(" \u2014 "),aU=a("a"),$Tr=o("TFLongformerForMaskedLM"),kTr=o(" (Longformer model)"),STr=l(),TM=a("li"),h6e=a("strong"),RTr=o("mobilebert"),PTr=o(" \u2014 "),nU=a("a"),BTr=o("TFMobileBertForMaskedLM"),ITr=o(" (MobileBERT model)"),NTr=l(),MM=a("li"),p6e=a("strong"),qTr=o("mpnet"),jTr=o(" \u2014 "),sU=a("a"),DTr=o("TFMPNetForMaskedLM"),GTr=o(" (MPNet model)"),OTr=l(),EM=a("li"),_6e=a("strong"),VTr=o("rembert"),XTr=o(" \u2014 "),lU=a("a"),zTr=o("TFRemBertForMaskedLM"),WTr=o(" (RemBERT model)"),QTr=l(),CM=a("li"),u6e=a("strong"),HTr=o("roberta"),UTr=o(" \u2014 "),iU=a("a"),JTr=o("TFRobertaForMaskedLM"),YTr=o(" (RoBERTa model)"),KTr=l(),wM=a("li"),b6e=a("strong"),ZTr=o("roformer"),e7r=o(" \u2014 "),dU=a("a"),o7r=o("TFRoFormerForMaskedLM"),r7r=o(" (RoFormer model)"),t7r=l(),AM=a("li"),v6e=a("strong"),a7r=o("tapas"),n7r=o(" \u2014 "),cU=a("a"),s7r=o("TFTapasForMaskedLM"),l7r=o(" (TAPAS model)"),i7r=l(),LM=a("li"),F6e=a("strong"),d7r=o("xlm"),c7r=o(" \u2014 "),fU=a("a"),f7r=o("TFXLMWithLMHeadModel"),m7r=o(" (XLM model)"),g7r=l(),yM=a("li"),T6e=a("strong"),h7r=o("xlm-roberta"),p7r=o(" \u2014 "),mU=a("a"),_7r=o("TFXLMRobertaForMaskedLM"),u7r=o(" (XLM-RoBERTa model)"),b7r=l(),F(xM.$$.fragment),lGe=l(),ac=a("h2"),$M=a("a"),M6e=a("span"),F(a8.$$.fragment),v7r=l(),E6e=a("span"),F7r=o("TFAutoModelForSeq2SeqLM"),iGe=l(),rr=a("div"),F(n8.$$.fragment),T7r=l(),nc=a("p"),M7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gU=a("a"),E7r=o("from_pretrained()"),C7r=o(" class method or the "),hU=a("a"),w7r=o("from_config()"),A7r=o(` class
method.`),L7r=l(),s8=a("p"),y7r=o("This class cannot be instantiated directly using "),C6e=a("code"),x7r=o("__init__()"),$7r=o(" (throws an error)."),k7r=l(),St=a("div"),F(l8.$$.fragment),S7r=l(),w6e=a("p"),R7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P7r=l(),sc=a("p"),B7r=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),I7r=o("not"),N7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),q7r=o("from_pretrained()"),j7r=o(" to load the model weights."),D7r=l(),F(kM.$$.fragment),G7r=l(),$r=a("div"),F(i8.$$.fragment),O7r=l(),L6e=a("p"),V7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X7r=l(),an=a("p"),z7r=o("The model class to instantiate is selected based on the "),y6e=a("code"),W7r=o("model_type"),Q7r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(":"),K7r=l(),ye=a("ul"),SM=a("li"),k6e=a("strong"),Z7r=o("bart"),e9r=o(" \u2014 "),_U=a("a"),o9r=o("TFBartForConditionalGeneration"),r9r=o(" (BART model)"),t9r=l(),RM=a("li"),S6e=a("strong"),a9r=o("blenderbot"),n9r=o(" \u2014 "),uU=a("a"),s9r=o("TFBlenderbotForConditionalGeneration"),l9r=o(" (Blenderbot model)"),i9r=l(),PM=a("li"),R6e=a("strong"),d9r=o("blenderbot-small"),c9r=o(" \u2014 "),bU=a("a"),f9r=o("TFBlenderbotSmallForConditionalGeneration"),m9r=o(" (BlenderbotSmall model)"),g9r=l(),BM=a("li"),P6e=a("strong"),h9r=o("encoder-decoder"),p9r=o(" \u2014 "),vU=a("a"),_9r=o("TFEncoderDecoderModel"),u9r=o(" (Encoder decoder model)"),b9r=l(),IM=a("li"),B6e=a("strong"),v9r=o("led"),F9r=o(" \u2014 "),FU=a("a"),T9r=o("TFLEDForConditionalGeneration"),M9r=o(" (LED model)"),E9r=l(),NM=a("li"),I6e=a("strong"),C9r=o("marian"),w9r=o(" \u2014 "),TU=a("a"),A9r=o("TFMarianMTModel"),L9r=o(" (Marian model)"),y9r=l(),qM=a("li"),N6e=a("strong"),x9r=o("mbart"),$9r=o(" \u2014 "),MU=a("a"),k9r=o("TFMBartForConditionalGeneration"),S9r=o(" (mBART model)"),R9r=l(),jM=a("li"),q6e=a("strong"),P9r=o("mt5"),B9r=o(" \u2014 "),EU=a("a"),I9r=o("TFMT5ForConditionalGeneration"),N9r=o(" (MT5 model)"),q9r=l(),DM=a("li"),j6e=a("strong"),j9r=o("pegasus"),D9r=o(" \u2014 "),CU=a("a"),G9r=o("TFPegasusForConditionalGeneration"),O9r=o(" (Pegasus model)"),V9r=l(),GM=a("li"),D6e=a("strong"),X9r=o("t5"),z9r=o(" \u2014 "),wU=a("a"),W9r=o("TFT5ForConditionalGeneration"),Q9r=o(" (T5 model)"),H9r=l(),F(OM.$$.fragment),dGe=l(),lc=a("h2"),VM=a("a"),G6e=a("span"),F(d8.$$.fragment),U9r=l(),O6e=a("span"),J9r=o("TFAutoModelForSequenceClassification"),cGe=l(),tr=a("div"),F(c8.$$.fragment),Y9r=l(),ic=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AU=a("a"),Z9r=o("from_pretrained()"),eMr=o(" class method or the "),LU=a("a"),oMr=o("from_config()"),rMr=o(` class
method.`),tMr=l(),f8=a("p"),aMr=o("This class cannot be instantiated directly using "),V6e=a("code"),nMr=o("__init__()"),sMr=o(" (throws an error)."),lMr=l(),Rt=a("div"),F(m8.$$.fragment),iMr=l(),X6e=a("p"),dMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cMr=l(),dc=a("p"),fMr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),mMr=o("not"),gMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),hMr=o("from_pretrained()"),pMr=o(" to load the model weights."),_Mr=l(),F(XM.$$.fragment),uMr=l(),kr=a("div"),F(g8.$$.fragment),bMr=l(),W6e=a("p"),vMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FMr=l(),nn=a("p"),TMr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),MMr=o("model_type"),EMr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),AMr=o("pretrained_model_name_or_path"),LMr=o(":"),yMr=l(),re=a("ul"),zM=a("li"),J6e=a("strong"),xMr=o("albert"),$Mr=o(" \u2014 "),xU=a("a"),kMr=o("TFAlbertForSequenceClassification"),SMr=o(" (ALBERT model)"),RMr=l(),WM=a("li"),Y6e=a("strong"),PMr=o("bert"),BMr=o(" \u2014 "),$U=a("a"),IMr=o("TFBertForSequenceClassification"),NMr=o(" (BERT model)"),qMr=l(),QM=a("li"),K6e=a("strong"),jMr=o("camembert"),DMr=o(" \u2014 "),kU=a("a"),GMr=o("TFCamembertForSequenceClassification"),OMr=o(" (CamemBERT model)"),VMr=l(),HM=a("li"),Z6e=a("strong"),XMr=o("convbert"),zMr=o(" \u2014 "),SU=a("a"),WMr=o("TFConvBertForSequenceClassification"),QMr=o(" (ConvBERT model)"),HMr=l(),UM=a("li"),eTe=a("strong"),UMr=o("ctrl"),JMr=o(" \u2014 "),RU=a("a"),YMr=o("TFCTRLForSequenceClassification"),KMr=o(" (CTRL model)"),ZMr=l(),JM=a("li"),oTe=a("strong"),e4r=o("deberta"),o4r=o(" \u2014 "),PU=a("a"),r4r=o("TFDebertaForSequenceClassification"),t4r=o(" (DeBERTa model)"),a4r=l(),YM=a("li"),rTe=a("strong"),n4r=o("deberta-v2"),s4r=o(" \u2014 "),BU=a("a"),l4r=o("TFDebertaV2ForSequenceClassification"),i4r=o(" (DeBERTa-v2 model)"),d4r=l(),KM=a("li"),tTe=a("strong"),c4r=o("distilbert"),f4r=o(" \u2014 "),IU=a("a"),m4r=o("TFDistilBertForSequenceClassification"),g4r=o(" (DistilBERT model)"),h4r=l(),ZM=a("li"),aTe=a("strong"),p4r=o("electra"),_4r=o(" \u2014 "),NU=a("a"),u4r=o("TFElectraForSequenceClassification"),b4r=o(" (ELECTRA model)"),v4r=l(),e4=a("li"),nTe=a("strong"),F4r=o("flaubert"),T4r=o(" \u2014 "),qU=a("a"),M4r=o("TFFlaubertForSequenceClassification"),E4r=o(" (FlauBERT model)"),C4r=l(),o4=a("li"),sTe=a("strong"),w4r=o("funnel"),A4r=o(" \u2014 "),jU=a("a"),L4r=o("TFFunnelForSequenceClassification"),y4r=o(" (Funnel Transformer model)"),x4r=l(),r4=a("li"),lTe=a("strong"),$4r=o("gpt2"),k4r=o(" \u2014 "),DU=a("a"),S4r=o("TFGPT2ForSequenceClassification"),R4r=o(" (OpenAI GPT-2 model)"),P4r=l(),t4=a("li"),iTe=a("strong"),B4r=o("gptj"),I4r=o(" \u2014 "),GU=a("a"),N4r=o("TFGPTJForSequenceClassification"),q4r=o(" (GPT-J model)"),j4r=l(),a4=a("li"),dTe=a("strong"),D4r=o("layoutlm"),G4r=o(" \u2014 "),OU=a("a"),O4r=o("TFLayoutLMForSequenceClassification"),V4r=o(" (LayoutLM model)"),X4r=l(),n4=a("li"),cTe=a("strong"),z4r=o("longformer"),W4r=o(" \u2014 "),VU=a("a"),Q4r=o("TFLongformerForSequenceClassification"),H4r=o(" (Longformer model)"),U4r=l(),s4=a("li"),fTe=a("strong"),J4r=o("mobilebert"),Y4r=o(" \u2014 "),XU=a("a"),K4r=o("TFMobileBertForSequenceClassification"),Z4r=o(" (MobileBERT model)"),eEr=l(),l4=a("li"),mTe=a("strong"),oEr=o("mpnet"),rEr=o(" \u2014 "),zU=a("a"),tEr=o("TFMPNetForSequenceClassification"),aEr=o(" (MPNet model)"),nEr=l(),i4=a("li"),gTe=a("strong"),sEr=o("openai-gpt"),lEr=o(" \u2014 "),WU=a("a"),iEr=o("TFOpenAIGPTForSequenceClassification"),dEr=o(" (OpenAI GPT model)"),cEr=l(),d4=a("li"),hTe=a("strong"),fEr=o("rembert"),mEr=o(" \u2014 "),QU=a("a"),gEr=o("TFRemBertForSequenceClassification"),hEr=o(" (RemBERT model)"),pEr=l(),c4=a("li"),pTe=a("strong"),_Er=o("roberta"),uEr=o(" \u2014 "),HU=a("a"),bEr=o("TFRobertaForSequenceClassification"),vEr=o(" (RoBERTa model)"),FEr=l(),f4=a("li"),_Te=a("strong"),TEr=o("roformer"),MEr=o(" \u2014 "),UU=a("a"),EEr=o("TFRoFormerForSequenceClassification"),CEr=o(" (RoFormer model)"),wEr=l(),m4=a("li"),uTe=a("strong"),AEr=o("tapas"),LEr=o(" \u2014 "),JU=a("a"),yEr=o("TFTapasForSequenceClassification"),xEr=o(" (TAPAS model)"),$Er=l(),g4=a("li"),bTe=a("strong"),kEr=o("transfo-xl"),SEr=o(" \u2014 "),YU=a("a"),REr=o("TFTransfoXLForSequenceClassification"),PEr=o(" (Transformer-XL model)"),BEr=l(),h4=a("li"),vTe=a("strong"),IEr=o("xlm"),NEr=o(" \u2014 "),KU=a("a"),qEr=o("TFXLMForSequenceClassification"),jEr=o(" (XLM model)"),DEr=l(),p4=a("li"),FTe=a("strong"),GEr=o("xlm-roberta"),OEr=o(" \u2014 "),ZU=a("a"),VEr=o("TFXLMRobertaForSequenceClassification"),XEr=o(" (XLM-RoBERTa model)"),zEr=l(),_4=a("li"),TTe=a("strong"),WEr=o("xlnet"),QEr=o(" \u2014 "),eJ=a("a"),HEr=o("TFXLNetForSequenceClassification"),UEr=o(" (XLNet model)"),JEr=l(),F(u4.$$.fragment),fGe=l(),cc=a("h2"),b4=a("a"),MTe=a("span"),F(h8.$$.fragment),YEr=l(),ETe=a("span"),KEr=o("TFAutoModelForMultipleChoice"),mGe=l(),ar=a("div"),F(p8.$$.fragment),ZEr=l(),fc=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oJ=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),rJ=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),_8=a("p"),sCr=o("This class cannot be instantiated directly using "),CTe=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),Pt=a("div"),F(u8.$$.fragment),cCr=l(),wTe=a("p"),fCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mCr=l(),mc=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),_Cr=o("from_pretrained()"),uCr=o(" to load the model weights."),bCr=l(),F(v4.$$.fragment),vCr=l(),Sr=a("div"),F(b8.$$.fragment),FCr=l(),LTe=a("p"),TCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MCr=l(),sn=a("p"),ECr=o("The model class to instantiate is selected based on the "),yTe=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),yCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),_e=a("ul"),F4=a("li"),kTe=a("strong"),kCr=o("albert"),SCr=o(" \u2014 "),aJ=a("a"),RCr=o("TFAlbertForMultipleChoice"),PCr=o(" (ALBERT model)"),BCr=l(),T4=a("li"),STe=a("strong"),ICr=o("bert"),NCr=o(" \u2014 "),nJ=a("a"),qCr=o("TFBertForMultipleChoice"),jCr=o(" (BERT model)"),DCr=l(),M4=a("li"),RTe=a("strong"),GCr=o("camembert"),OCr=o(" \u2014 "),sJ=a("a"),VCr=o("TFCamembertForMultipleChoice"),XCr=o(" (CamemBERT model)"),zCr=l(),E4=a("li"),PTe=a("strong"),WCr=o("convbert"),QCr=o(" \u2014 "),lJ=a("a"),HCr=o("TFConvBertForMultipleChoice"),UCr=o(" (ConvBERT model)"),JCr=l(),C4=a("li"),BTe=a("strong"),YCr=o("distilbert"),KCr=o(" \u2014 "),iJ=a("a"),ZCr=o("TFDistilBertForMultipleChoice"),e5r=o(" (DistilBERT model)"),o5r=l(),w4=a("li"),ITe=a("strong"),r5r=o("electra"),t5r=o(" \u2014 "),dJ=a("a"),a5r=o("TFElectraForMultipleChoice"),n5r=o(" (ELECTRA model)"),s5r=l(),A4=a("li"),NTe=a("strong"),l5r=o("flaubert"),i5r=o(" \u2014 "),cJ=a("a"),d5r=o("TFFlaubertForMultipleChoice"),c5r=o(" (FlauBERT model)"),f5r=l(),L4=a("li"),qTe=a("strong"),m5r=o("funnel"),g5r=o(" \u2014 "),fJ=a("a"),h5r=o("TFFunnelForMultipleChoice"),p5r=o(" (Funnel Transformer model)"),_5r=l(),y4=a("li"),jTe=a("strong"),u5r=o("longformer"),b5r=o(" \u2014 "),mJ=a("a"),v5r=o("TFLongformerForMultipleChoice"),F5r=o(" (Longformer model)"),T5r=l(),x4=a("li"),DTe=a("strong"),M5r=o("mobilebert"),E5r=o(" \u2014 "),gJ=a("a"),C5r=o("TFMobileBertForMultipleChoice"),w5r=o(" (MobileBERT model)"),A5r=l(),$4=a("li"),GTe=a("strong"),L5r=o("mpnet"),y5r=o(" \u2014 "),hJ=a("a"),x5r=o("TFMPNetForMultipleChoice"),$5r=o(" (MPNet model)"),k5r=l(),k4=a("li"),OTe=a("strong"),S5r=o("rembert"),R5r=o(" \u2014 "),pJ=a("a"),P5r=o("TFRemBertForMultipleChoice"),B5r=o(" (RemBERT model)"),I5r=l(),S4=a("li"),VTe=a("strong"),N5r=o("roberta"),q5r=o(" \u2014 "),_J=a("a"),j5r=o("TFRobertaForMultipleChoice"),D5r=o(" (RoBERTa model)"),G5r=l(),R4=a("li"),XTe=a("strong"),O5r=o("roformer"),V5r=o(" \u2014 "),uJ=a("a"),X5r=o("TFRoFormerForMultipleChoice"),z5r=o(" (RoFormer model)"),W5r=l(),P4=a("li"),zTe=a("strong"),Q5r=o("xlm"),H5r=o(" \u2014 "),bJ=a("a"),U5r=o("TFXLMForMultipleChoice"),J5r=o(" (XLM model)"),Y5r=l(),B4=a("li"),WTe=a("strong"),K5r=o("xlm-roberta"),Z5r=o(" \u2014 "),vJ=a("a"),e3r=o("TFXLMRobertaForMultipleChoice"),o3r=o(" (XLM-RoBERTa model)"),r3r=l(),I4=a("li"),QTe=a("strong"),t3r=o("xlnet"),a3r=o(" \u2014 "),FJ=a("a"),n3r=o("TFXLNetForMultipleChoice"),s3r=o(" (XLNet model)"),l3r=l(),F(N4.$$.fragment),gGe=l(),gc=a("h2"),q4=a("a"),HTe=a("span"),F(v8.$$.fragment),i3r=l(),UTe=a("span"),d3r=o("TFAutoModelForNextSentencePrediction"),hGe=l(),nr=a("div"),F(F8.$$.fragment),c3r=l(),hc=a("p"),f3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TJ=a("a"),m3r=o("from_pretrained()"),g3r=o(" class method or the "),MJ=a("a"),h3r=o("from_config()"),p3r=o(` class
method.`),_3r=l(),T8=a("p"),u3r=o("This class cannot be instantiated directly using "),JTe=a("code"),b3r=o("__init__()"),v3r=o(" (throws an error)."),F3r=l(),Bt=a("div"),F(M8.$$.fragment),T3r=l(),YTe=a("p"),M3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E3r=l(),pc=a("p"),C3r=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),w3r=o("not"),A3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),L3r=o("from_pretrained()"),y3r=o(" to load the model weights."),x3r=l(),F(j4.$$.fragment),$3r=l(),Rr=a("div"),F(E8.$$.fragment),k3r=l(),ZTe=a("p"),S3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),R3r=l(),ln=a("p"),P3r=o("The model class to instantiate is selected based on the "),e7e=a("code"),B3r=o("model_type"),I3r=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),N3r=o("pretrained_model_name_or_path"),q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(":"),G3r=l(),C8=a("ul"),D4=a("li"),t7e=a("strong"),O3r=o("bert"),V3r=o(" \u2014 "),CJ=a("a"),X3r=o("TFBertForNextSentencePrediction"),z3r=o(" (BERT model)"),W3r=l(),G4=a("li"),a7e=a("strong"),Q3r=o("mobilebert"),H3r=o(" \u2014 "),wJ=a("a"),U3r=o("TFMobileBertForNextSentencePrediction"),J3r=o(" (MobileBERT model)"),Y3r=l(),F(O4.$$.fragment),pGe=l(),_c=a("h2"),V4=a("a"),n7e=a("span"),F(w8.$$.fragment),K3r=l(),s7e=a("span"),Z3r=o("TFAutoModelForTableQuestionAnswering"),_Ge=l(),sr=a("div"),F(A8.$$.fragment),e0r=l(),uc=a("p"),o0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AJ=a("a"),r0r=o("from_pretrained()"),t0r=o(" class method or the "),LJ=a("a"),a0r=o("from_config()"),n0r=o(` class
method.`),s0r=l(),L8=a("p"),l0r=o("This class cannot be instantiated directly using "),l7e=a("code"),i0r=o("__init__()"),d0r=o(" (throws an error)."),c0r=l(),It=a("div"),F(y8.$$.fragment),f0r=l(),i7e=a("p"),m0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),g0r=l(),bc=a("p"),h0r=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),p0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),u0r=o("from_pretrained()"),b0r=o(" to load the model weights."),v0r=l(),F(X4.$$.fragment),F0r=l(),Pr=a("div"),F(x8.$$.fragment),T0r=l(),c7e=a("p"),M0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E0r=l(),dn=a("p"),C0r=o("The model class to instantiate is selected based on the "),f7e=a("code"),w0r=o("model_type"),A0r=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),L0r=o("pretrained_model_name_or_path"),y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),x0r=o("pretrained_model_name_or_path"),$0r=o(":"),k0r=l(),h7e=a("ul"),z4=a("li"),p7e=a("strong"),S0r=o("tapas"),R0r=o(" \u2014 "),xJ=a("a"),P0r=o("TFTapasForQuestionAnswering"),B0r=o(" (TAPAS model)"),I0r=l(),F(W4.$$.fragment),uGe=l(),vc=a("h2"),Q4=a("a"),_7e=a("span"),F($8.$$.fragment),N0r=l(),u7e=a("span"),q0r=o("TFAutoModelForTokenClassification"),bGe=l(),lr=a("div"),F(k8.$$.fragment),j0r=l(),Fc=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$J=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),kJ=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),S8=a("p"),W0r=o("This class cannot be instantiated directly using "),b7e=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),Nt=a("div"),F(R8.$$.fragment),J0r=l(),v7e=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K0r=l(),Tc=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),ewr=o("not"),owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),rwr=o("from_pretrained()"),twr=o(" to load the model weights."),awr=l(),F(H4.$$.fragment),nwr=l(),Br=a("div"),F(P8.$$.fragment),swr=l(),T7e=a("p"),lwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iwr=l(),cn=a("p"),dwr=o("The model class to instantiate is selected based on the "),M7e=a("code"),cwr=o("model_type"),fwr=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),mwr=o("pretrained_model_name_or_path"),gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(":"),_wr=l(),de=a("ul"),U4=a("li"),w7e=a("strong"),uwr=o("albert"),bwr=o(" \u2014 "),RJ=a("a"),vwr=o("TFAlbertForTokenClassification"),Fwr=o(" (ALBERT model)"),Twr=l(),J4=a("li"),A7e=a("strong"),Mwr=o("bert"),Ewr=o(" \u2014 "),PJ=a("a"),Cwr=o("TFBertForTokenClassification"),wwr=o(" (BERT model)"),Awr=l(),Y4=a("li"),L7e=a("strong"),Lwr=o("camembert"),ywr=o(" \u2014 "),BJ=a("a"),xwr=o("TFCamembertForTokenClassification"),$wr=o(" (CamemBERT model)"),kwr=l(),K4=a("li"),y7e=a("strong"),Swr=o("convbert"),Rwr=o(" \u2014 "),IJ=a("a"),Pwr=o("TFConvBertForTokenClassification"),Bwr=o(" (ConvBERT model)"),Iwr=l(),Z4=a("li"),x7e=a("strong"),Nwr=o("deberta"),qwr=o(" \u2014 "),NJ=a("a"),jwr=o("TFDebertaForTokenClassification"),Dwr=o(" (DeBERTa model)"),Gwr=l(),eE=a("li"),$7e=a("strong"),Owr=o("deberta-v2"),Vwr=o(" \u2014 "),qJ=a("a"),Xwr=o("TFDebertaV2ForTokenClassification"),zwr=o(" (DeBERTa-v2 model)"),Wwr=l(),oE=a("li"),k7e=a("strong"),Qwr=o("distilbert"),Hwr=o(" \u2014 "),jJ=a("a"),Uwr=o("TFDistilBertForTokenClassification"),Jwr=o(" (DistilBERT model)"),Ywr=l(),rE=a("li"),S7e=a("strong"),Kwr=o("electra"),Zwr=o(" \u2014 "),DJ=a("a"),eAr=o("TFElectraForTokenClassification"),oAr=o(" (ELECTRA model)"),rAr=l(),tE=a("li"),R7e=a("strong"),tAr=o("flaubert"),aAr=o(" \u2014 "),GJ=a("a"),nAr=o("TFFlaubertForTokenClassification"),sAr=o(" (FlauBERT model)"),lAr=l(),aE=a("li"),P7e=a("strong"),iAr=o("funnel"),dAr=o(" \u2014 "),OJ=a("a"),cAr=o("TFFunnelForTokenClassification"),fAr=o(" (Funnel Transformer model)"),mAr=l(),nE=a("li"),B7e=a("strong"),gAr=o("layoutlm"),hAr=o(" \u2014 "),VJ=a("a"),pAr=o("TFLayoutLMForTokenClassification"),_Ar=o(" (LayoutLM model)"),uAr=l(),sE=a("li"),I7e=a("strong"),bAr=o("longformer"),vAr=o(" \u2014 "),XJ=a("a"),FAr=o("TFLongformerForTokenClassification"),TAr=o(" (Longformer model)"),MAr=l(),lE=a("li"),N7e=a("strong"),EAr=o("mobilebert"),CAr=o(" \u2014 "),zJ=a("a"),wAr=o("TFMobileBertForTokenClassification"),AAr=o(" (MobileBERT model)"),LAr=l(),iE=a("li"),q7e=a("strong"),yAr=o("mpnet"),xAr=o(" \u2014 "),WJ=a("a"),$Ar=o("TFMPNetForTokenClassification"),kAr=o(" (MPNet model)"),SAr=l(),dE=a("li"),j7e=a("strong"),RAr=o("rembert"),PAr=o(" \u2014 "),QJ=a("a"),BAr=o("TFRemBertForTokenClassification"),IAr=o(" (RemBERT model)"),NAr=l(),cE=a("li"),D7e=a("strong"),qAr=o("roberta"),jAr=o(" \u2014 "),HJ=a("a"),DAr=o("TFRobertaForTokenClassification"),GAr=o(" (RoBERTa model)"),OAr=l(),fE=a("li"),G7e=a("strong"),VAr=o("roformer"),XAr=o(" \u2014 "),UJ=a("a"),zAr=o("TFRoFormerForTokenClassification"),WAr=o(" (RoFormer model)"),QAr=l(),mE=a("li"),O7e=a("strong"),HAr=o("xlm"),UAr=o(" \u2014 "),JJ=a("a"),JAr=o("TFXLMForTokenClassification"),YAr=o(" (XLM model)"),KAr=l(),gE=a("li"),V7e=a("strong"),ZAr=o("xlm-roberta"),eLr=o(" \u2014 "),YJ=a("a"),oLr=o("TFXLMRobertaForTokenClassification"),rLr=o(" (XLM-RoBERTa model)"),tLr=l(),hE=a("li"),X7e=a("strong"),aLr=o("xlnet"),nLr=o(" \u2014 "),KJ=a("a"),sLr=o("TFXLNetForTokenClassification"),lLr=o(" (XLNet model)"),iLr=l(),F(pE.$$.fragment),vGe=l(),Mc=a("h2"),_E=a("a"),z7e=a("span"),F(B8.$$.fragment),dLr=l(),W7e=a("span"),cLr=o("TFAutoModelForQuestionAnswering"),FGe=l(),ir=a("div"),F(I8.$$.fragment),fLr=l(),Ec=a("p"),mLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" class method or the "),eY=a("a"),pLr=o("from_config()"),_Lr=o(` class
method.`),uLr=l(),N8=a("p"),bLr=o("This class cannot be instantiated directly using "),Q7e=a("code"),vLr=o("__init__()"),FLr=o(" (throws an error)."),TLr=l(),qt=a("div"),F(q8.$$.fragment),MLr=l(),H7e=a("p"),ELr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CLr=l(),Cc=a("p"),wLr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),ALr=o("not"),LLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),yLr=o("from_pretrained()"),xLr=o(" to load the model weights."),$Lr=l(),F(uE.$$.fragment),kLr=l(),Ir=a("div"),F(j8.$$.fragment),SLr=l(),J7e=a("p"),RLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PLr=l(),fn=a("p"),BLr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),ILr=o("model_type"),NLr=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),qLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),ce=a("ul"),bE=a("li"),e9e=a("strong"),VLr=o("albert"),XLr=o(" \u2014 "),rY=a("a"),zLr=o("TFAlbertForQuestionAnswering"),WLr=o(" (ALBERT model)"),QLr=l(),vE=a("li"),o9e=a("strong"),HLr=o("bert"),ULr=o(" \u2014 "),tY=a("a"),JLr=o("TFBertForQuestionAnswering"),YLr=o(" (BERT model)"),KLr=l(),FE=a("li"),r9e=a("strong"),ZLr=o("camembert"),eyr=o(" \u2014 "),aY=a("a"),oyr=o("TFCamembertForQuestionAnswering"),ryr=o(" (CamemBERT model)"),tyr=l(),TE=a("li"),t9e=a("strong"),ayr=o("convbert"),nyr=o(" \u2014 "),nY=a("a"),syr=o("TFConvBertForQuestionAnswering"),lyr=o(" (ConvBERT model)"),iyr=l(),ME=a("li"),a9e=a("strong"),dyr=o("deberta"),cyr=o(" \u2014 "),sY=a("a"),fyr=o("TFDebertaForQuestionAnswering"),myr=o(" (DeBERTa model)"),gyr=l(),EE=a("li"),n9e=a("strong"),hyr=o("deberta-v2"),pyr=o(" \u2014 "),lY=a("a"),_yr=o("TFDebertaV2ForQuestionAnswering"),uyr=o(" (DeBERTa-v2 model)"),byr=l(),CE=a("li"),s9e=a("strong"),vyr=o("distilbert"),Fyr=o(" \u2014 "),iY=a("a"),Tyr=o("TFDistilBertForQuestionAnswering"),Myr=o(" (DistilBERT model)"),Eyr=l(),wE=a("li"),l9e=a("strong"),Cyr=o("electra"),wyr=o(" \u2014 "),dY=a("a"),Ayr=o("TFElectraForQuestionAnswering"),Lyr=o(" (ELECTRA model)"),yyr=l(),AE=a("li"),i9e=a("strong"),xyr=o("flaubert"),$yr=o(" \u2014 "),cY=a("a"),kyr=o("TFFlaubertForQuestionAnsweringSimple"),Syr=o(" (FlauBERT model)"),Ryr=l(),LE=a("li"),d9e=a("strong"),Pyr=o("funnel"),Byr=o(" \u2014 "),fY=a("a"),Iyr=o("TFFunnelForQuestionAnswering"),Nyr=o(" (Funnel Transformer model)"),qyr=l(),yE=a("li"),c9e=a("strong"),jyr=o("gptj"),Dyr=o(" \u2014 "),mY=a("a"),Gyr=o("TFGPTJForQuestionAnswering"),Oyr=o(" (GPT-J model)"),Vyr=l(),xE=a("li"),f9e=a("strong"),Xyr=o("longformer"),zyr=o(" \u2014 "),gY=a("a"),Wyr=o("TFLongformerForQuestionAnswering"),Qyr=o(" (Longformer model)"),Hyr=l(),$E=a("li"),m9e=a("strong"),Uyr=o("mobilebert"),Jyr=o(" \u2014 "),hY=a("a"),Yyr=o("TFMobileBertForQuestionAnswering"),Kyr=o(" (MobileBERT model)"),Zyr=l(),kE=a("li"),g9e=a("strong"),e8r=o("mpnet"),o8r=o(" \u2014 "),pY=a("a"),r8r=o("TFMPNetForQuestionAnswering"),t8r=o(" (MPNet model)"),a8r=l(),SE=a("li"),h9e=a("strong"),n8r=o("rembert"),s8r=o(" \u2014 "),_Y=a("a"),l8r=o("TFRemBertForQuestionAnswering"),i8r=o(" (RemBERT model)"),d8r=l(),RE=a("li"),p9e=a("strong"),c8r=o("roberta"),f8r=o(" \u2014 "),uY=a("a"),m8r=o("TFRobertaForQuestionAnswering"),g8r=o(" (RoBERTa model)"),h8r=l(),PE=a("li"),_9e=a("strong"),p8r=o("roformer"),_8r=o(" \u2014 "),bY=a("a"),u8r=o("TFRoFormerForQuestionAnswering"),b8r=o(" (RoFormer model)"),v8r=l(),BE=a("li"),u9e=a("strong"),F8r=o("xlm"),T8r=o(" \u2014 "),vY=a("a"),M8r=o("TFXLMForQuestionAnsweringSimple"),E8r=o(" (XLM model)"),C8r=l(),IE=a("li"),b9e=a("strong"),w8r=o("xlm-roberta"),A8r=o(" \u2014 "),FY=a("a"),L8r=o("TFXLMRobertaForQuestionAnswering"),y8r=o(" (XLM-RoBERTa model)"),x8r=l(),NE=a("li"),v9e=a("strong"),$8r=o("xlnet"),k8r=o(" \u2014 "),TY=a("a"),S8r=o("TFXLNetForQuestionAnsweringSimple"),R8r=o(" (XLNet model)"),P8r=l(),F(qE.$$.fragment),TGe=l(),wc=a("h2"),jE=a("a"),F9e=a("span"),F(D8.$$.fragment),B8r=l(),T9e=a("span"),I8r=o("TFAutoModelForVision2Seq"),MGe=l(),dr=a("div"),F(G8.$$.fragment),N8r=l(),Ac=a("p"),q8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MY=a("a"),j8r=o("from_pretrained()"),D8r=o(" class method or the "),EY=a("a"),G8r=o("from_config()"),O8r=o(` class
method.`),V8r=l(),O8=a("p"),X8r=o("This class cannot be instantiated directly using "),M9e=a("code"),z8r=o("__init__()"),W8r=o(" (throws an error)."),Q8r=l(),jt=a("div"),F(V8.$$.fragment),H8r=l(),E9e=a("p"),U8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J8r=l(),Lc=a("p"),Y8r=o(`Note:
Loading a model from its configuration file does `),C9e=a("strong"),K8r=o("not"),Z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),exr=o("from_pretrained()"),oxr=o(" to load the model weights."),rxr=l(),F(DE.$$.fragment),txr=l(),Nr=a("div"),F(X8.$$.fragment),axr=l(),w9e=a("p"),nxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sxr=l(),mn=a("p"),lxr=o("The model class to instantiate is selected based on the "),A9e=a("code"),ixr=o("model_type"),dxr=o(` property of the config object (either
passed as an argument or loaded from `),L9e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y9e=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(":"),hxr=l(),x9e=a("ul"),GE=a("li"),$9e=a("strong"),pxr=o("vision-encoder-decoder"),_xr=o(" \u2014 "),wY=a("a"),uxr=o("TFVisionEncoderDecoderModel"),bxr=o(" (Vision Encoder decoder model)"),vxr=l(),F(OE.$$.fragment),EGe=l(),yc=a("h2"),VE=a("a"),k9e=a("span"),F(z8.$$.fragment),Fxr=l(),S9e=a("span"),Txr=o("TFAutoModelForSpeechSeq2Seq"),CGe=l(),cr=a("div"),F(W8.$$.fragment),Mxr=l(),xc=a("p"),Exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AY=a("a"),Cxr=o("from_pretrained()"),wxr=o(" class method or the "),LY=a("a"),Axr=o("from_config()"),Lxr=o(` class
method.`),yxr=l(),Q8=a("p"),xxr=o("This class cannot be instantiated directly using "),R9e=a("code"),$xr=o("__init__()"),kxr=o(" (throws an error)."),Sxr=l(),Dt=a("div"),F(H8.$$.fragment),Rxr=l(),P9e=a("p"),Pxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bxr=l(),$c=a("p"),Ixr=o(`Note:
Loading a model from its configuration file does `),B9e=a("strong"),Nxr=o("not"),qxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),jxr=o("from_pretrained()"),Dxr=o(" to load the model weights."),Gxr=l(),F(XE.$$.fragment),Oxr=l(),qr=a("div"),F(U8.$$.fragment),Vxr=l(),I9e=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zxr=l(),gn=a("p"),Wxr=o("The model class to instantiate is selected based on the "),N9e=a("code"),Qxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),q9e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),D9e=a("ul"),zE=a("li"),G9e=a("strong"),e$r=o("speech_to_text"),o$r=o(" \u2014 "),xY=a("a"),r$r=o("TFSpeech2TextForConditionalGeneration"),t$r=o(" (Speech2Text model)"),a$r=l(),F(WE.$$.fragment),wGe=l(),kc=a("h2"),QE=a("a"),O9e=a("span"),F(J8.$$.fragment),n$r=l(),V9e=a("span"),s$r=o("FlaxAutoModel"),AGe=l(),fr=a("div"),F(Y8.$$.fragment),l$r=l(),Sc=a("p"),i$r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Y=a("a"),d$r=o("from_pretrained()"),c$r=o(" class method or the "),kY=a("a"),f$r=o("from_config()"),m$r=o(` class
method.`),g$r=l(),K8=a("p"),h$r=o("This class cannot be instantiated directly using "),X9e=a("code"),p$r=o("__init__()"),_$r=o(" (throws an error)."),u$r=l(),Gt=a("div"),F(Z8.$$.fragment),b$r=l(),z9e=a("p"),v$r=o("Instantiates one of the base model classes of the library from a configuration."),F$r=l(),Rc=a("p"),T$r=o(`Note:
Loading a model from its configuration file does `),W9e=a("strong"),M$r=o("not"),E$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=a("a"),C$r=o("from_pretrained()"),w$r=o(" to load the model weights."),A$r=l(),F(HE.$$.fragment),L$r=l(),jr=a("div"),F(ex.$$.fragment),y$r=l(),Q9e=a("p"),x$r=o("Instantiate one of the base model classes of the library from a pretrained model."),$$r=l(),hn=a("p"),k$r=o("The model class to instantiate is selected based on the "),H9e=a("code"),S$r=o("model_type"),R$r=o(` property of the config object (either
passed as an argument or loaded from `),U9e=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=a("code"),I$r=o("pretrained_model_name_or_path"),N$r=o(":"),q$r=l(),oe=a("ul"),UE=a("li"),Y9e=a("strong"),j$r=o("albert"),D$r=o(" \u2014 "),RY=a("a"),G$r=o("FlaxAlbertModel"),O$r=o(" (ALBERT model)"),V$r=l(),JE=a("li"),K9e=a("strong"),X$r=o("bart"),z$r=o(" \u2014 "),PY=a("a"),W$r=o("FlaxBartModel"),Q$r=o(" (BART model)"),H$r=l(),YE=a("li"),Z9e=a("strong"),U$r=o("beit"),J$r=o(" \u2014 "),BY=a("a"),Y$r=o("FlaxBeitModel"),K$r=o(" (BEiT model)"),Z$r=l(),KE=a("li"),eMe=a("strong"),ekr=o("bert"),okr=o(" \u2014 "),IY=a("a"),rkr=o("FlaxBertModel"),tkr=o(" (BERT model)"),akr=l(),ZE=a("li"),oMe=a("strong"),nkr=o("big_bird"),skr=o(" \u2014 "),NY=a("a"),lkr=o("FlaxBigBirdModel"),ikr=o(" (BigBird model)"),dkr=l(),eC=a("li"),rMe=a("strong"),ckr=o("blenderbot"),fkr=o(" \u2014 "),qY=a("a"),mkr=o("FlaxBlenderbotModel"),gkr=o(" (Blenderbot model)"),hkr=l(),oC=a("li"),tMe=a("strong"),pkr=o("blenderbot-small"),_kr=o(" \u2014 "),jY=a("a"),ukr=o("FlaxBlenderbotSmallModel"),bkr=o(" (BlenderbotSmall model)"),vkr=l(),rC=a("li"),aMe=a("strong"),Fkr=o("clip"),Tkr=o(" \u2014 "),DY=a("a"),Mkr=o("FlaxCLIPModel"),Ekr=o(" (CLIP model)"),Ckr=l(),tC=a("li"),nMe=a("strong"),wkr=o("distilbert"),Akr=o(" \u2014 "),GY=a("a"),Lkr=o("FlaxDistilBertModel"),ykr=o(" (DistilBERT model)"),xkr=l(),aC=a("li"),sMe=a("strong"),$kr=o("electra"),kkr=o(" \u2014 "),OY=a("a"),Skr=o("FlaxElectraModel"),Rkr=o(" (ELECTRA model)"),Pkr=l(),nC=a("li"),lMe=a("strong"),Bkr=o("gpt2"),Ikr=o(" \u2014 "),VY=a("a"),Nkr=o("FlaxGPT2Model"),qkr=o(" (OpenAI GPT-2 model)"),jkr=l(),sC=a("li"),iMe=a("strong"),Dkr=o("gpt_neo"),Gkr=o(" \u2014 "),XY=a("a"),Okr=o("FlaxGPTNeoModel"),Vkr=o(" (GPT Neo model)"),Xkr=l(),lC=a("li"),dMe=a("strong"),zkr=o("gptj"),Wkr=o(" \u2014 "),zY=a("a"),Qkr=o("FlaxGPTJModel"),Hkr=o(" (GPT-J model)"),Ukr=l(),iC=a("li"),cMe=a("strong"),Jkr=o("longt5"),Ykr=o(" \u2014 "),WY=a("a"),Kkr=o("FlaxLongT5Model"),Zkr=o(" (LongT5 model)"),eSr=l(),dC=a("li"),fMe=a("strong"),oSr=o("marian"),rSr=o(" \u2014 "),QY=a("a"),tSr=o("FlaxMarianModel"),aSr=o(" (Marian model)"),nSr=l(),cC=a("li"),mMe=a("strong"),sSr=o("mbart"),lSr=o(" \u2014 "),HY=a("a"),iSr=o("FlaxMBartModel"),dSr=o(" (mBART model)"),cSr=l(),fC=a("li"),gMe=a("strong"),fSr=o("mt5"),mSr=o(" \u2014 "),UY=a("a"),gSr=o("FlaxMT5Model"),hSr=o(" (MT5 model)"),pSr=l(),mC=a("li"),hMe=a("strong"),_Sr=o("opt"),uSr=o(" \u2014 "),JY=a("a"),bSr=o("FlaxOPTModel"),vSr=o(" (OPT model)"),FSr=l(),gC=a("li"),pMe=a("strong"),TSr=o("pegasus"),MSr=o(" \u2014 "),YY=a("a"),ESr=o("FlaxPegasusModel"),CSr=o(" (Pegasus model)"),wSr=l(),hC=a("li"),_Me=a("strong"),ASr=o("roberta"),LSr=o(" \u2014 "),KY=a("a"),ySr=o("FlaxRobertaModel"),xSr=o(" (RoBERTa model)"),$Sr=l(),pC=a("li"),uMe=a("strong"),kSr=o("roformer"),SSr=o(" \u2014 "),ZY=a("a"),RSr=o("FlaxRoFormerModel"),PSr=o(" (RoFormer model)"),BSr=l(),_C=a("li"),bMe=a("strong"),ISr=o("t5"),NSr=o(" \u2014 "),eK=a("a"),qSr=o("FlaxT5Model"),jSr=o(" (T5 model)"),DSr=l(),uC=a("li"),vMe=a("strong"),GSr=o("vision-text-dual-encoder"),OSr=o(" \u2014 "),oK=a("a"),VSr=o("FlaxVisionTextDualEncoderModel"),XSr=o(" (VisionTextDualEncoder model)"),zSr=l(),bC=a("li"),FMe=a("strong"),WSr=o("vit"),QSr=o(" \u2014 "),rK=a("a"),HSr=o("FlaxViTModel"),USr=o(" (ViT model)"),JSr=l(),vC=a("li"),TMe=a("strong"),YSr=o("wav2vec2"),KSr=o(" \u2014 "),tK=a("a"),ZSr=o("FlaxWav2Vec2Model"),eRr=o(" (Wav2Vec2 model)"),oRr=l(),FC=a("li"),MMe=a("strong"),rRr=o("xglm"),tRr=o(" \u2014 "),aK=a("a"),aRr=o("FlaxXGLMModel"),nRr=o(" (XGLM model)"),sRr=l(),TC=a("li"),EMe=a("strong"),lRr=o("xlm-roberta"),iRr=o(" \u2014 "),nK=a("a"),dRr=o("FlaxXLMRobertaModel"),cRr=o(" (XLM-RoBERTa model)"),fRr=l(),F(MC.$$.fragment),LGe=l(),Pc=a("h2"),EC=a("a"),CMe=a("span"),F(ox.$$.fragment),mRr=l(),wMe=a("span"),gRr=o("FlaxAutoModelForCausalLM"),yGe=l(),mr=a("div"),F(rx.$$.fragment),hRr=l(),Bc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),lK=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),tx=a("p"),TRr=o("This class cannot be instantiated directly using "),AMe=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Ot=a("div"),F(ax.$$.fragment),wRr=l(),LMe=a("p"),ARr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LRr=l(),Ic=a("p"),yRr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(CC.$$.fragment),PRr=l(),Dr=a("div"),F(nx.$$.fragment),BRr=l(),xMe=a("p"),IRr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NRr=l(),pn=a("p"),qRr=o("The model class to instantiate is selected based on the "),$Me=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),xe=a("ul"),wC=a("li"),RMe=a("strong"),WRr=o("bart"),QRr=o(" \u2014 "),dK=a("a"),HRr=o("FlaxBartForCausalLM"),URr=o(" (BART model)"),JRr=l(),AC=a("li"),PMe=a("strong"),YRr=o("bert"),KRr=o(" \u2014 "),cK=a("a"),ZRr=o("FlaxBertForCausalLM"),ePr=o(" (BERT model)"),oPr=l(),LC=a("li"),BMe=a("strong"),rPr=o("big_bird"),tPr=o(" \u2014 "),fK=a("a"),aPr=o("FlaxBigBirdForCausalLM"),nPr=o(" (BigBird model)"),sPr=l(),yC=a("li"),IMe=a("strong"),lPr=o("electra"),iPr=o(" \u2014 "),mK=a("a"),dPr=o("FlaxElectraForCausalLM"),cPr=o(" (ELECTRA model)"),fPr=l(),xC=a("li"),NMe=a("strong"),mPr=o("gpt2"),gPr=o(" \u2014 "),gK=a("a"),hPr=o("FlaxGPT2LMHeadModel"),pPr=o(" (OpenAI GPT-2 model)"),_Pr=l(),$C=a("li"),qMe=a("strong"),uPr=o("gpt_neo"),bPr=o(" \u2014 "),hK=a("a"),vPr=o("FlaxGPTNeoForCausalLM"),FPr=o(" (GPT Neo model)"),TPr=l(),kC=a("li"),jMe=a("strong"),MPr=o("gptj"),EPr=o(" \u2014 "),pK=a("a"),CPr=o("FlaxGPTJForCausalLM"),wPr=o(" (GPT-J model)"),APr=l(),SC=a("li"),DMe=a("strong"),LPr=o("opt"),yPr=o(" \u2014 "),_K=a("a"),xPr=o("FlaxOPTForCausalLM"),$Pr=o(" (OPT model)"),kPr=l(),RC=a("li"),GMe=a("strong"),SPr=o("roberta"),RPr=o(" \u2014 "),uK=a("a"),PPr=o("FlaxRobertaForCausalLM"),BPr=o(" (RoBERTa model)"),IPr=l(),PC=a("li"),OMe=a("strong"),NPr=o("xglm"),qPr=o(" \u2014 "),bK=a("a"),jPr=o("FlaxXGLMForCausalLM"),DPr=o(" (XGLM model)"),GPr=l(),F(BC.$$.fragment),xGe=l(),Nc=a("h2"),IC=a("a"),VMe=a("span"),F(sx.$$.fragment),OPr=l(),XMe=a("span"),VPr=o("FlaxAutoModelForPreTraining"),$Ge=l(),gr=a("div"),F(lx.$$.fragment),XPr=l(),qc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),FK=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),ix=a("p"),YPr=o("This class cannot be instantiated directly using "),zMe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Vt=a("div"),F(dx.$$.fragment),oBr=l(),WMe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tBr=l(),jc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(NC.$$.fragment),cBr=l(),Gr=a("div"),F(cx.$$.fragment),fBr=l(),HMe=a("p"),mBr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gBr=l(),_n=a("p"),hBr=o("The model class to instantiate is selected based on the "),UMe=a("code"),pBr=o("model_type"),_Br=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),uBr=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),Ee=a("ul"),qC=a("li"),KMe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),MK=a("a"),CBr=o("FlaxAlbertForPreTraining"),wBr=o(" (ALBERT model)"),ABr=l(),jC=a("li"),ZMe=a("strong"),LBr=o("bart"),yBr=o(" \u2014 "),EK=a("a"),xBr=o("FlaxBartForConditionalGeneration"),$Br=o(" (BART model)"),kBr=l(),DC=a("li"),e4e=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),CK=a("a"),PBr=o("FlaxBertForPreTraining"),BBr=o(" (BERT model)"),IBr=l(),GC=a("li"),o4e=a("strong"),NBr=o("big_bird"),qBr=o(" \u2014 "),wK=a("a"),jBr=o("FlaxBigBirdForPreTraining"),DBr=o(" (BigBird model)"),GBr=l(),OC=a("li"),r4e=a("strong"),OBr=o("electra"),VBr=o(" \u2014 "),AK=a("a"),XBr=o("FlaxElectraForPreTraining"),zBr=o(" (ELECTRA model)"),WBr=l(),VC=a("li"),t4e=a("strong"),QBr=o("longt5"),HBr=o(" \u2014 "),LK=a("a"),UBr=o("FlaxLongT5ForConditionalGeneration"),JBr=o(" (LongT5 model)"),YBr=l(),XC=a("li"),a4e=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),yK=a("a"),eIr=o("FlaxMBartForConditionalGeneration"),oIr=o(" (mBART model)"),rIr=l(),zC=a("li"),n4e=a("strong"),tIr=o("mt5"),aIr=o(" \u2014 "),xK=a("a"),nIr=o("FlaxMT5ForConditionalGeneration"),sIr=o(" (MT5 model)"),lIr=l(),WC=a("li"),s4e=a("strong"),iIr=o("roberta"),dIr=o(" \u2014 "),$K=a("a"),cIr=o("FlaxRobertaForMaskedLM"),fIr=o(" (RoBERTa model)"),mIr=l(),QC=a("li"),l4e=a("strong"),gIr=o("roformer"),hIr=o(" \u2014 "),kK=a("a"),pIr=o("FlaxRoFormerForMaskedLM"),_Ir=o(" (RoFormer model)"),uIr=l(),HC=a("li"),i4e=a("strong"),bIr=o("t5"),vIr=o(" \u2014 "),SK=a("a"),FIr=o("FlaxT5ForConditionalGeneration"),TIr=o(" (T5 model)"),MIr=l(),UC=a("li"),d4e=a("strong"),EIr=o("wav2vec2"),CIr=o(" \u2014 "),RK=a("a"),wIr=o("FlaxWav2Vec2ForPreTraining"),AIr=o(" (Wav2Vec2 model)"),LIr=l(),JC=a("li"),c4e=a("strong"),yIr=o("xlm-roberta"),xIr=o(" \u2014 "),PK=a("a"),$Ir=o("FlaxXLMRobertaForMaskedLM"),kIr=o(" (XLM-RoBERTa model)"),SIr=l(),F(YC.$$.fragment),kGe=l(),Dc=a("h2"),KC=a("a"),f4e=a("span"),F(fx.$$.fragment),RIr=l(),m4e=a("span"),PIr=o("FlaxAutoModelForMaskedLM"),SGe=l(),hr=a("div"),F(mx.$$.fragment),BIr=l(),Gc=a("p"),IIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BK=a("a"),NIr=o("from_pretrained()"),qIr=o(" class method or the "),IK=a("a"),jIr=o("from_config()"),DIr=o(` class
method.`),GIr=l(),gx=a("p"),OIr=o("This class cannot be instantiated directly using "),g4e=a("code"),VIr=o("__init__()"),XIr=o(" (throws an error)."),zIr=l(),Xt=a("div"),F(hx.$$.fragment),WIr=l(),h4e=a("p"),QIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HIr=l(),Oc=a("p"),UIr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),JIr=o("not"),YIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),KIr=o("from_pretrained()"),ZIr=o(" to load the model weights."),eNr=l(),F(ZC.$$.fragment),oNr=l(),Or=a("div"),F(px.$$.fragment),rNr=l(),_4e=a("p"),tNr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aNr=l(),un=a("p"),nNr=o("The model class to instantiate is selected based on the "),u4e=a("code"),sNr=o("model_type"),lNr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),iNr=o("pretrained_model_name_or_path"),dNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),cNr=o("pretrained_model_name_or_path"),fNr=o(":"),mNr=l(),$e=a("ul"),e5=a("li"),F4e=a("strong"),gNr=o("albert"),hNr=o(" \u2014 "),qK=a("a"),pNr=o("FlaxAlbertForMaskedLM"),_Nr=o(" (ALBERT model)"),uNr=l(),o5=a("li"),T4e=a("strong"),bNr=o("bart"),vNr=o(" \u2014 "),jK=a("a"),FNr=o("FlaxBartForConditionalGeneration"),TNr=o(" (BART model)"),MNr=l(),r5=a("li"),M4e=a("strong"),ENr=o("bert"),CNr=o(" \u2014 "),DK=a("a"),wNr=o("FlaxBertForMaskedLM"),ANr=o(" (BERT model)"),LNr=l(),t5=a("li"),E4e=a("strong"),yNr=o("big_bird"),xNr=o(" \u2014 "),GK=a("a"),$Nr=o("FlaxBigBirdForMaskedLM"),kNr=o(" (BigBird model)"),SNr=l(),a5=a("li"),C4e=a("strong"),RNr=o("distilbert"),PNr=o(" \u2014 "),OK=a("a"),BNr=o("FlaxDistilBertForMaskedLM"),INr=o(" (DistilBERT model)"),NNr=l(),n5=a("li"),w4e=a("strong"),qNr=o("electra"),jNr=o(" \u2014 "),VK=a("a"),DNr=o("FlaxElectraForMaskedLM"),GNr=o(" (ELECTRA model)"),ONr=l(),s5=a("li"),A4e=a("strong"),VNr=o("mbart"),XNr=o(" \u2014 "),XK=a("a"),zNr=o("FlaxMBartForConditionalGeneration"),WNr=o(" (mBART model)"),QNr=l(),l5=a("li"),L4e=a("strong"),HNr=o("roberta"),UNr=o(" \u2014 "),zK=a("a"),JNr=o("FlaxRobertaForMaskedLM"),YNr=o(" (RoBERTa model)"),KNr=l(),i5=a("li"),y4e=a("strong"),ZNr=o("roformer"),eqr=o(" \u2014 "),WK=a("a"),oqr=o("FlaxRoFormerForMaskedLM"),rqr=o(" (RoFormer model)"),tqr=l(),d5=a("li"),x4e=a("strong"),aqr=o("xlm-roberta"),nqr=o(" \u2014 "),QK=a("a"),sqr=o("FlaxXLMRobertaForMaskedLM"),lqr=o(" (XLM-RoBERTa model)"),iqr=l(),F(c5.$$.fragment),RGe=l(),Vc=a("h2"),f5=a("a"),$4e=a("span"),F(_x.$$.fragment),dqr=l(),k4e=a("span"),cqr=o("FlaxAutoModelForSeq2SeqLM"),PGe=l(),pr=a("div"),F(ux.$$.fragment),fqr=l(),Xc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HK=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),UK=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),bx=a("p"),bqr=o("This class cannot be instantiated directly using "),S4e=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),zt=a("div"),F(vx.$$.fragment),Mqr=l(),R4e=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cqr=l(),zc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),Aqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),yqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(m5.$$.fragment),kqr=l(),Vr=a("div"),F(Fx.$$.fragment),Sqr=l(),B4e=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Pqr=l(),bn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),I4e=a("code"),Iqr=o("model_type"),Nqr=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),ke=a("ul"),g5=a("li"),j4e=a("strong"),Vqr=o("bart"),Xqr=o(" \u2014 "),YK=a("a"),zqr=o("FlaxBartForConditionalGeneration"),Wqr=o(" (BART model)"),Qqr=l(),h5=a("li"),D4e=a("strong"),Hqr=o("blenderbot"),Uqr=o(" \u2014 "),KK=a("a"),Jqr=o("FlaxBlenderbotForConditionalGeneration"),Yqr=o(" (Blenderbot model)"),Kqr=l(),p5=a("li"),G4e=a("strong"),Zqr=o("blenderbot-small"),ejr=o(" \u2014 "),ZK=a("a"),ojr=o("FlaxBlenderbotSmallForConditionalGeneration"),rjr=o(" (BlenderbotSmall model)"),tjr=l(),_5=a("li"),O4e=a("strong"),ajr=o("encoder-decoder"),njr=o(" \u2014 "),eZ=a("a"),sjr=o("FlaxEncoderDecoderModel"),ljr=o(" (Encoder decoder model)"),ijr=l(),u5=a("li"),V4e=a("strong"),djr=o("longt5"),cjr=o(" \u2014 "),oZ=a("a"),fjr=o("FlaxLongT5ForConditionalGeneration"),mjr=o(" (LongT5 model)"),gjr=l(),b5=a("li"),X4e=a("strong"),hjr=o("marian"),pjr=o(" \u2014 "),rZ=a("a"),_jr=o("FlaxMarianMTModel"),ujr=o(" (Marian model)"),bjr=l(),v5=a("li"),z4e=a("strong"),vjr=o("mbart"),Fjr=o(" \u2014 "),tZ=a("a"),Tjr=o("FlaxMBartForConditionalGeneration"),Mjr=o(" (mBART model)"),Ejr=l(),F5=a("li"),W4e=a("strong"),Cjr=o("mt5"),wjr=o(" \u2014 "),aZ=a("a"),Ajr=o("FlaxMT5ForConditionalGeneration"),Ljr=o(" (MT5 model)"),yjr=l(),T5=a("li"),Q4e=a("strong"),xjr=o("pegasus"),$jr=o(" \u2014 "),nZ=a("a"),kjr=o("FlaxPegasusForConditionalGeneration"),Sjr=o(" (Pegasus model)"),Rjr=l(),M5=a("li"),H4e=a("strong"),Pjr=o("t5"),Bjr=o(" \u2014 "),sZ=a("a"),Ijr=o("FlaxT5ForConditionalGeneration"),Njr=o(" (T5 model)"),qjr=l(),F(E5.$$.fragment),BGe=l(),Wc=a("h2"),C5=a("a"),U4e=a("span"),F(Tx.$$.fragment),jjr=l(),J4e=a("span"),Djr=o("FlaxAutoModelForSequenceClassification"),IGe=l(),_r=a("div"),F(Mx.$$.fragment),Gjr=l(),Qc=a("p"),Ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lZ=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" class method or the "),iZ=a("a"),zjr=o("from_config()"),Wjr=o(` class
method.`),Qjr=l(),Ex=a("p"),Hjr=o("This class cannot be instantiated directly using "),Y4e=a("code"),Ujr=o("__init__()"),Jjr=o(" (throws an error)."),Yjr=l(),Wt=a("div"),F(Cx.$$.fragment),Kjr=l(),K4e=a("p"),Zjr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eDr=l(),Hc=a("p"),oDr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),rDr=o("not"),tDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),aDr=o("from_pretrained()"),nDr=o(" to load the model weights."),sDr=l(),F(w5.$$.fragment),lDr=l(),Xr=a("div"),F(wx.$$.fragment),iDr=l(),eEe=a("p"),dDr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cDr=l(),vn=a("p"),fDr=o("The model class to instantiate is selected based on the "),oEe=a("code"),mDr=o("model_type"),gDr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),hDr=o("pretrained_model_name_or_path"),pDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),_Dr=o("pretrained_model_name_or_path"),uDr=o(":"),bDr=l(),Se=a("ul"),A5=a("li"),aEe=a("strong"),vDr=o("albert"),FDr=o(" \u2014 "),cZ=a("a"),TDr=o("FlaxAlbertForSequenceClassification"),MDr=o(" (ALBERT model)"),EDr=l(),L5=a("li"),nEe=a("strong"),CDr=o("bart"),wDr=o(" \u2014 "),fZ=a("a"),ADr=o("FlaxBartForSequenceClassification"),LDr=o(" (BART model)"),yDr=l(),y5=a("li"),sEe=a("strong"),xDr=o("bert"),$Dr=o(" \u2014 "),mZ=a("a"),kDr=o("FlaxBertForSequenceClassification"),SDr=o(" (BERT model)"),RDr=l(),x5=a("li"),lEe=a("strong"),PDr=o("big_bird"),BDr=o(" \u2014 "),gZ=a("a"),IDr=o("FlaxBigBirdForSequenceClassification"),NDr=o(" (BigBird model)"),qDr=l(),$5=a("li"),iEe=a("strong"),jDr=o("distilbert"),DDr=o(" \u2014 "),hZ=a("a"),GDr=o("FlaxDistilBertForSequenceClassification"),ODr=o(" (DistilBERT model)"),VDr=l(),k5=a("li"),dEe=a("strong"),XDr=o("electra"),zDr=o(" \u2014 "),pZ=a("a"),WDr=o("FlaxElectraForSequenceClassification"),QDr=o(" (ELECTRA model)"),HDr=l(),S5=a("li"),cEe=a("strong"),UDr=o("mbart"),JDr=o(" \u2014 "),_Z=a("a"),YDr=o("FlaxMBartForSequenceClassification"),KDr=o(" (mBART model)"),ZDr=l(),R5=a("li"),fEe=a("strong"),eGr=o("roberta"),oGr=o(" \u2014 "),uZ=a("a"),rGr=o("FlaxRobertaForSequenceClassification"),tGr=o(" (RoBERTa model)"),aGr=l(),P5=a("li"),mEe=a("strong"),nGr=o("roformer"),sGr=o(" \u2014 "),bZ=a("a"),lGr=o("FlaxRoFormerForSequenceClassification"),iGr=o(" (RoFormer model)"),dGr=l(),B5=a("li"),gEe=a("strong"),cGr=o("xlm-roberta"),fGr=o(" \u2014 "),vZ=a("a"),mGr=o("FlaxXLMRobertaForSequenceClassification"),gGr=o(" (XLM-RoBERTa model)"),hGr=l(),F(I5.$$.fragment),NGe=l(),Uc=a("h2"),N5=a("a"),hEe=a("span"),F(Ax.$$.fragment),pGr=l(),pEe=a("span"),_Gr=o("FlaxAutoModelForQuestionAnswering"),qGe=l(),ur=a("div"),F(Lx.$$.fragment),uGr=l(),Jc=a("p"),bGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FZ=a("a"),vGr=o("from_pretrained()"),FGr=o(" class method or the "),TZ=a("a"),TGr=o("from_config()"),MGr=o(` class
method.`),EGr=l(),yx=a("p"),CGr=o("This class cannot be instantiated directly using "),_Ee=a("code"),wGr=o("__init__()"),AGr=o(" (throws an error)."),LGr=l(),Qt=a("div"),F(xx.$$.fragment),yGr=l(),uEe=a("p"),xGr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Gr=l(),Yc=a("p"),kGr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),SGr=o("not"),RGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),PGr=o("from_pretrained()"),BGr=o(" to load the model weights."),IGr=l(),F(q5.$$.fragment),NGr=l(),zr=a("div"),F($x.$$.fragment),qGr=l(),vEe=a("p"),jGr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DGr=l(),Fn=a("p"),GGr=o("The model class to instantiate is selected based on the "),FEe=a("code"),OGr=o("model_type"),VGr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),XGr=o("pretrained_model_name_or_path"),zGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(":"),HGr=l(),Re=a("ul"),j5=a("li"),EEe=a("strong"),UGr=o("albert"),JGr=o(" \u2014 "),EZ=a("a"),YGr=o("FlaxAlbertForQuestionAnswering"),KGr=o(" (ALBERT model)"),ZGr=l(),D5=a("li"),CEe=a("strong"),eOr=o("bart"),oOr=o(" \u2014 "),CZ=a("a"),rOr=o("FlaxBartForQuestionAnswering"),tOr=o(" (BART model)"),aOr=l(),G5=a("li"),wEe=a("strong"),nOr=o("bert"),sOr=o(" \u2014 "),wZ=a("a"),lOr=o("FlaxBertForQuestionAnswering"),iOr=o(" (BERT model)"),dOr=l(),O5=a("li"),AEe=a("strong"),cOr=o("big_bird"),fOr=o(" \u2014 "),AZ=a("a"),mOr=o("FlaxBigBirdForQuestionAnswering"),gOr=o(" (BigBird model)"),hOr=l(),V5=a("li"),LEe=a("strong"),pOr=o("distilbert"),_Or=o(" \u2014 "),LZ=a("a"),uOr=o("FlaxDistilBertForQuestionAnswering"),bOr=o(" (DistilBERT model)"),vOr=l(),X5=a("li"),yEe=a("strong"),FOr=o("electra"),TOr=o(" \u2014 "),yZ=a("a"),MOr=o("FlaxElectraForQuestionAnswering"),EOr=o(" (ELECTRA model)"),COr=l(),z5=a("li"),xEe=a("strong"),wOr=o("mbart"),AOr=o(" \u2014 "),xZ=a("a"),LOr=o("FlaxMBartForQuestionAnswering"),yOr=o(" (mBART model)"),xOr=l(),W5=a("li"),$Ee=a("strong"),$Or=o("roberta"),kOr=o(" \u2014 "),$Z=a("a"),SOr=o("FlaxRobertaForQuestionAnswering"),ROr=o(" (RoBERTa model)"),POr=l(),Q5=a("li"),kEe=a("strong"),BOr=o("roformer"),IOr=o(" \u2014 "),kZ=a("a"),NOr=o("FlaxRoFormerForQuestionAnswering"),qOr=o(" (RoFormer model)"),jOr=l(),H5=a("li"),SEe=a("strong"),DOr=o("xlm-roberta"),GOr=o(" \u2014 "),SZ=a("a"),OOr=o("FlaxXLMRobertaForQuestionAnswering"),VOr=o(" (XLM-RoBERTa model)"),XOr=l(),F(U5.$$.fragment),jGe=l(),Kc=a("h2"),J5=a("a"),REe=a("span"),F(kx.$$.fragment),zOr=l(),PEe=a("span"),WOr=o("FlaxAutoModelForTokenClassification"),DGe=l(),br=a("div"),F(Sx.$$.fragment),QOr=l(),Zc=a("p"),HOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RZ=a("a"),UOr=o("from_pretrained()"),JOr=o(" class method or the "),PZ=a("a"),YOr=o("from_config()"),KOr=o(` class
method.`),ZOr=l(),Rx=a("p"),eVr=o("This class cannot be instantiated directly using "),BEe=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Ht=a("div"),F(Px.$$.fragment),aVr=l(),IEe=a("p"),nVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sVr=l(),ef=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),cVr=o("from_pretrained()"),fVr=o(" to load the model weights."),mVr=l(),F(Y5.$$.fragment),gVr=l(),Wr=a("div"),F(Bx.$$.fragment),hVr=l(),qEe=a("p"),pVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Vr=l(),Tn=a("p"),uVr=o("The model class to instantiate is selected based on the "),jEe=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),Ve=a("ul"),K5=a("li"),OEe=a("strong"),wVr=o("albert"),AVr=o(" \u2014 "),IZ=a("a"),LVr=o("FlaxAlbertForTokenClassification"),yVr=o(" (ALBERT model)"),xVr=l(),Z5=a("li"),VEe=a("strong"),$Vr=o("bert"),kVr=o(" \u2014 "),NZ=a("a"),SVr=o("FlaxBertForTokenClassification"),RVr=o(" (BERT model)"),PVr=l(),e3=a("li"),XEe=a("strong"),BVr=o("big_bird"),IVr=o(" \u2014 "),qZ=a("a"),NVr=o("FlaxBigBirdForTokenClassification"),qVr=o(" (BigBird model)"),jVr=l(),o3=a("li"),zEe=a("strong"),DVr=o("distilbert"),GVr=o(" \u2014 "),jZ=a("a"),OVr=o("FlaxDistilBertForTokenClassification"),VVr=o(" (DistilBERT model)"),XVr=l(),r3=a("li"),WEe=a("strong"),zVr=o("electra"),WVr=o(" \u2014 "),DZ=a("a"),QVr=o("FlaxElectraForTokenClassification"),HVr=o(" (ELECTRA model)"),UVr=l(),t3=a("li"),QEe=a("strong"),JVr=o("roberta"),YVr=o(" \u2014 "),GZ=a("a"),KVr=o("FlaxRobertaForTokenClassification"),ZVr=o(" (RoBERTa model)"),eXr=l(),a3=a("li"),HEe=a("strong"),oXr=o("roformer"),rXr=o(" \u2014 "),OZ=a("a"),tXr=o("FlaxRoFormerForTokenClassification"),aXr=o(" (RoFormer model)"),nXr=l(),n3=a("li"),UEe=a("strong"),sXr=o("xlm-roberta"),lXr=o(" \u2014 "),VZ=a("a"),iXr=o("FlaxXLMRobertaForTokenClassification"),dXr=o(" (XLM-RoBERTa model)"),cXr=l(),F(s3.$$.fragment),GGe=l(),of=a("h2"),l3=a("a"),JEe=a("span"),F(Ix.$$.fragment),fXr=l(),YEe=a("span"),mXr=o("FlaxAutoModelForMultipleChoice"),OGe=l(),vr=a("div"),F(Nx.$$.fragment),gXr=l(),rf=a("p"),hXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=a("a"),pXr=o("from_pretrained()"),_Xr=o(" class method or the "),zZ=a("a"),uXr=o("from_config()"),bXr=o(` class
method.`),vXr=l(),qx=a("p"),FXr=o("This class cannot be instantiated directly using "),KEe=a("code"),TXr=o("__init__()"),MXr=o(" (throws an error)."),EXr=l(),Ut=a("div"),F(jx.$$.fragment),CXr=l(),ZEe=a("p"),wXr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AXr=l(),tf=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),yXr=o("not"),xXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),$Xr=o("from_pretrained()"),kXr=o(" to load the model weights."),SXr=l(),F(i3.$$.fragment),RXr=l(),Qr=a("div"),F(Dx.$$.fragment),PXr=l(),oCe=a("p"),BXr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IXr=l(),Mn=a("p"),NXr=o("The model class to instantiate is selected based on the "),rCe=a("code"),qXr=o("model_type"),jXr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),DXr=o("pretrained_model_name_or_path"),GXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(":"),XXr=l(),Xe=a("ul"),d3=a("li"),nCe=a("strong"),zXr=o("albert"),WXr=o(" \u2014 "),QZ=a("a"),QXr=o("FlaxAlbertForMultipleChoice"),HXr=o(" (ALBERT model)"),UXr=l(),c3=a("li"),sCe=a("strong"),JXr=o("bert"),YXr=o(" \u2014 "),HZ=a("a"),KXr=o("FlaxBertForMultipleChoice"),ZXr=o(" (BERT model)"),ezr=l(),f3=a("li"),lCe=a("strong"),ozr=o("big_bird"),rzr=o(" \u2014 "),UZ=a("a"),tzr=o("FlaxBigBirdForMultipleChoice"),azr=o(" (BigBird model)"),nzr=l(),m3=a("li"),iCe=a("strong"),szr=o("distilbert"),lzr=o(" \u2014 "),JZ=a("a"),izr=o("FlaxDistilBertForMultipleChoice"),dzr=o(" (DistilBERT model)"),czr=l(),g3=a("li"),dCe=a("strong"),fzr=o("electra"),mzr=o(" \u2014 "),YZ=a("a"),gzr=o("FlaxElectraForMultipleChoice"),hzr=o(" (ELECTRA model)"),pzr=l(),h3=a("li"),cCe=a("strong"),_zr=o("roberta"),uzr=o(" \u2014 "),KZ=a("a"),bzr=o("FlaxRobertaForMultipleChoice"),vzr=o(" (RoBERTa model)"),Fzr=l(),p3=a("li"),fCe=a("strong"),Tzr=o("roformer"),Mzr=o(" \u2014 "),ZZ=a("a"),Ezr=o("FlaxRoFormerForMultipleChoice"),Czr=o(" (RoFormer model)"),wzr=l(),_3=a("li"),mCe=a("strong"),Azr=o("xlm-roberta"),Lzr=o(" \u2014 "),eee=a("a"),yzr=o("FlaxXLMRobertaForMultipleChoice"),xzr=o(" (XLM-RoBERTa model)"),$zr=l(),F(u3.$$.fragment),VGe=l(),af=a("h2"),b3=a("a"),gCe=a("span"),F(Gx.$$.fragment),kzr=l(),hCe=a("span"),Szr=o("FlaxAutoModelForNextSentencePrediction"),XGe=l(),Fr=a("div"),F(Ox.$$.fragment),Rzr=l(),nf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oee=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),ree=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),Vx=a("p"),Dzr=o("This class cannot be instantiated directly using "),pCe=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Jt=a("div"),F(Xx.$$.fragment),Xzr=l(),_Ce=a("p"),zzr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wzr=l(),sf=a("p"),Qzr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),Hzr=o("not"),Uzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(v3.$$.fragment),Zzr=l(),Hr=a("div"),F(zx.$$.fragment),eWr=l(),bCe=a("p"),oWr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rWr=l(),En=a("p"),tWr=o("The model class to instantiate is selected based on the "),vCe=a("code"),aWr=o("model_type"),nWr=o(` property of the config object (either
passed as an argument or loaded from `),FCe=a("code"),sWr=o("pretrained_model_name_or_path"),lWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(":"),cWr=l(),MCe=a("ul"),F3=a("li"),ECe=a("strong"),fWr=o("bert"),mWr=o(" \u2014 "),aee=a("a"),gWr=o("FlaxBertForNextSentencePrediction"),hWr=o(" (BERT model)"),pWr=l(),F(T3.$$.fragment),zGe=l(),lf=a("h2"),M3=a("a"),CCe=a("span"),F(Wx.$$.fragment),_Wr=l(),wCe=a("span"),uWr=o("FlaxAutoModelForImageClassification"),WGe=l(),Tr=a("div"),F(Qx.$$.fragment),bWr=l(),df=a("p"),vWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nee=a("a"),FWr=o("from_pretrained()"),TWr=o(" class method or the "),see=a("a"),MWr=o("from_config()"),EWr=o(` class
method.`),CWr=l(),Hx=a("p"),wWr=o("This class cannot be instantiated directly using "),ACe=a("code"),AWr=o("__init__()"),LWr=o(" (throws an error)."),yWr=l(),Yt=a("div"),F(Ux.$$.fragment),xWr=l(),LCe=a("p"),$Wr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kWr=l(),cf=a("p"),SWr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),RWr=o("not"),PWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("a"),BWr=o("from_pretrained()"),IWr=o(" to load the model weights."),NWr=l(),F(E3.$$.fragment),qWr=l(),Ur=a("div"),F(Jx.$$.fragment),jWr=l(),xCe=a("p"),DWr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GWr=l(),Cn=a("p"),OWr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),VWr=o("model_type"),XWr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),zWr=o("pretrained_model_name_or_path"),WWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),QWr=o("pretrained_model_name_or_path"),HWr=o(":"),UWr=l(),Yx=a("ul"),C3=a("li"),RCe=a("strong"),JWr=o("beit"),YWr=o(" \u2014 "),iee=a("a"),KWr=o("FlaxBeitForImageClassification"),ZWr=o(" (BEiT model)"),eQr=l(),w3=a("li"),PCe=a("strong"),oQr=o("vit"),rQr=o(" \u2014 "),dee=a("a"),tQr=o("FlaxViTForImageClassification"),aQr=o(" (ViT model)"),nQr=l(),F(A3.$$.fragment),QGe=l(),ff=a("h2"),L3=a("a"),BCe=a("span"),F(Kx.$$.fragment),sQr=l(),ICe=a("span"),lQr=o("FlaxAutoModelForVision2Seq"),HGe=l(),Mr=a("div"),F(Zx.$$.fragment),iQr=l(),mf=a("p"),dQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cee=a("a"),cQr=o("from_pretrained()"),fQr=o(" class method or the "),fee=a("a"),mQr=o("from_config()"),gQr=o(` class
method.`),hQr=l(),e$=a("p"),pQr=o("This class cannot be instantiated directly using "),NCe=a("code"),_Qr=o("__init__()"),uQr=o(" (throws an error)."),bQr=l(),Kt=a("div"),F(o$.$$.fragment),vQr=l(),qCe=a("p"),FQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TQr=l(),gf=a("p"),MQr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),EQr=o("not"),CQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),wQr=o("from_pretrained()"),AQr=o(" to load the model weights."),LQr=l(),F(y3.$$.fragment),yQr=l(),Jr=a("div"),F(r$.$$.fragment),xQr=l(),DCe=a("p"),$Qr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kQr=l(),wn=a("p"),SQr=o("The model class to instantiate is selected based on the "),GCe=a("code"),RQr=o("model_type"),PQr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),BQr=o("pretrained_model_name_or_path"),IQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),NQr=o("pretrained_model_name_or_path"),qQr=o(":"),jQr=l(),XCe=a("ul"),x3=a("li"),zCe=a("strong"),DQr=o("vision-encoder-decoder"),GQr=o(" \u2014 "),gee=a("a"),OQr=o("FlaxVisionEncoderDecoderModel"),VQr=o(" (Vision Encoder decoder model)"),XQr=l(),F($3.$$.fragment),this.h()},l(f){const u=MBt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var t$=s(p);m=n(t$,"A",{id:!0,class:!0,href:!0});var WCe=s(m);_=n(WCe,"SPAN",{});var QCe=s(_);T(d.$$.fragment,QCe),QCe.forEach(t),WCe.forEach(t),h=i(t$),Mo=n(t$,"SPAN",{});var HCe=s(Mo);gi=r(HCe,"Auto Classes"),HCe.forEach(t),t$.forEach(t),uf=i(f),rt=n(f,"P",{});var a$=s(rt);hi=r(a$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(a$,"CODE",{});var UCe=s(pi);Hw=r(UCe,"from_pretrained()"),UCe.forEach(t),bf=r(a$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),a$.forEach(t),Oe=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var JCe=s(Ln);Uw=r(JCe,"AutoConfig"),JCe.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var YCe=s(xn);Jw=r(YCe,"AutoModel"),YCe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var KCe=s($n);Yw=r(KCe,"AutoTokenizer"),KCe.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var n$=s(Ae);bk=r(n$,"will create a model that is an instance of "),vi=n(n$,"A",{href:!0});var ZCe=s(vi);vk=r(ZCe,"BertModel"),ZCe.forEach(t),Fk=r(n$,"."),n$.forEach(t),Eo=i(f),wa=n(f,"P",{});var s$=s(wa);Tk=r(s$,"There is one class of "),Ff=n(s$,"CODE",{});var e5e=s(Ff);Mk=r(e5e,"AutoModel"),e5e.forEach(t),tXe=r(s$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),s$.forEach(t),Wje=i(f),Fi=n(f,"H2",{class:!0});var l$=s(Fi);Tf=n(l$,"A",{id:!0,class:!0,href:!0});var o5e=s(Tf);sre=n(o5e,"SPAN",{});var r5e=s(sre);T(Kw.$$.fragment,r5e),r5e.forEach(t),o5e.forEach(t),aXe=i(l$),lre=n(l$,"SPAN",{});var t5e=s(lre);nXe=r(t5e,"Extending the Auto Classes"),t5e.forEach(t),l$.forEach(t),Qje=i(f),kn=n(f,"P",{});var hf=s(kn);sXe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ire=n(hf,"CODE",{});var a5e=s(ire);lXe=r(a5e,"NewModel"),a5e.forEach(t),iXe=r(hf,", make sure you have a "),dre=n(hf,"CODE",{});var n5e=s(dre);dXe=r(n5e,"NewModelConfig"),n5e.forEach(t),cXe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),Hje=i(f),T(Zw.$$.fragment,f),Uje=i(f),Ek=n(f,"P",{});var s5e=s(Ek);fXe=r(s5e,"You will then be able to use the auto classes like you would usually do!"),s5e.forEach(t),Jje=i(f),T(Mf.$$.fragment,f),Yje=i(f),Ti=n(f,"H2",{class:!0});var i$=s(Ti);Ef=n(i$,"A",{id:!0,class:!0,href:!0});var l5e=s(Ef);cre=n(l5e,"SPAN",{});var i5e=s(cre);T(eA.$$.fragment,i5e),i5e.forEach(t),l5e.forEach(t),mXe=i(i$),fre=n(i$,"SPAN",{});var d5e=s(fre);gXe=r(d5e,"AutoConfig"),d5e.forEach(t),i$.forEach(t),Kje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(oA.$$.fragment,et),hXe=i(et),rA=n(et,"P",{});var d$=s(rA);pXe=r(d$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ck=n(d$,"A",{href:!0});var c5e=s(Ck);_Xe=r(c5e,"from_pretrained()"),c5e.forEach(t),uXe=r(d$," class method."),d$.forEach(t),bXe=i(et),tA=n(et,"P",{});var c$=s(tA);vXe=r(c$,"This class cannot be instantiated directly using "),mre=n(c$,"CODE",{});var f5e=s(mre);FXe=r(f5e,"__init__()"),f5e.forEach(t),TXe=r(c$," (throws an error)."),c$.forEach(t),MXe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(aA.$$.fragment,ot),EXe=i(ot),gre=n(ot,"P",{});var m5e=s(gre);CXe=r(m5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m5e.forEach(t),wXe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);AXe=r(pf,"The configuration class to instantiate is selected based on the "),hre=n(pf,"CODE",{});var g5e=s(hre);LXe=r(g5e,"model_type"),g5e.forEach(t),yXe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pre=n(pf,"CODE",{});var h5e=s(pre);xXe=r(h5e,"pretrained_model_name_or_path"),h5e.forEach(t),$Xe=r(pf,":"),pf.forEach(t),kXe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var k3=s(Cf);_re=n(k3,"STRONG",{});var p5e=s(_re);SXe=r(p5e,"albert"),p5e.forEach(t),RXe=r(k3," \u2014 "),wk=n(k3,"A",{href:!0});var _5e=s(wk);PXe=r(_5e,"AlbertConfig"),_5e.forEach(t),BXe=r(k3," (ALBERT model)"),k3.forEach(t),IXe=i(L),wf=n(L,"LI",{});var S3=s(wf);ure=n(S3,"STRONG",{});var u5e=s(ure);NXe=r(u5e,"bart"),u5e.forEach(t),qXe=r(S3," \u2014 "),Ak=n(S3,"A",{href:!0});var b5e=s(Ak);jXe=r(b5e,"BartConfig"),b5e.forEach(t),DXe=r(S3," (BART model)"),S3.forEach(t),GXe=i(L),Af=n(L,"LI",{});var R3=s(Af);bre=n(R3,"STRONG",{});var v5e=s(bre);OXe=r(v5e,"beit"),v5e.forEach(t),VXe=r(R3," \u2014 "),Lk=n(R3,"A",{href:!0});var F5e=s(Lk);XXe=r(F5e,"BeitConfig"),F5e.forEach(t),zXe=r(R3," (BEiT model)"),R3.forEach(t),WXe=i(L),Lf=n(L,"LI",{});var P3=s(Lf);vre=n(P3,"STRONG",{});var T5e=s(vre);QXe=r(T5e,"bert"),T5e.forEach(t),HXe=r(P3," \u2014 "),yk=n(P3,"A",{href:!0});var M5e=s(yk);UXe=r(M5e,"BertConfig"),M5e.forEach(t),JXe=r(P3," (BERT model)"),P3.forEach(t),YXe=i(L),yf=n(L,"LI",{});var B3=s(yf);Fre=n(B3,"STRONG",{});var E5e=s(Fre);KXe=r(E5e,"bert-generation"),E5e.forEach(t),ZXe=r(B3," \u2014 "),xk=n(B3,"A",{href:!0});var C5e=s(xk);eze=r(C5e,"BertGenerationConfig"),C5e.forEach(t),oze=r(B3," (Bert Generation model)"),B3.forEach(t),rze=i(L),xf=n(L,"LI",{});var I3=s(xf);Tre=n(I3,"STRONG",{});var w5e=s(Tre);tze=r(w5e,"big_bird"),w5e.forEach(t),aze=r(I3," \u2014 "),$k=n(I3,"A",{href:!0});var A5e=s($k);nze=r(A5e,"BigBirdConfig"),A5e.forEach(t),sze=r(I3," (BigBird model)"),I3.forEach(t),lze=i(L),$f=n(L,"LI",{});var N3=s($f);Mre=n(N3,"STRONG",{});var L5e=s(Mre);ize=r(L5e,"bigbird_pegasus"),L5e.forEach(t),dze=r(N3," \u2014 "),kk=n(N3,"A",{href:!0});var y5e=s(kk);cze=r(y5e,"BigBirdPegasusConfig"),y5e.forEach(t),fze=r(N3," (BigBird-Pegasus model)"),N3.forEach(t),mze=i(L),kf=n(L,"LI",{});var q3=s(kf);Ere=n(q3,"STRONG",{});var x5e=s(Ere);gze=r(x5e,"blenderbot"),x5e.forEach(t),hze=r(q3," \u2014 "),Sk=n(q3,"A",{href:!0});var $5e=s(Sk);pze=r($5e,"BlenderbotConfig"),$5e.forEach(t),_ze=r(q3," (Blenderbot model)"),q3.forEach(t),uze=i(L),Sf=n(L,"LI",{});var j3=s(Sf);Cre=n(j3,"STRONG",{});var k5e=s(Cre);bze=r(k5e,"blenderbot-small"),k5e.forEach(t),vze=r(j3," \u2014 "),Rk=n(j3,"A",{href:!0});var S5e=s(Rk);Fze=r(S5e,"BlenderbotSmallConfig"),S5e.forEach(t),Tze=r(j3," (BlenderbotSmall model)"),j3.forEach(t),Mze=i(L),Rf=n(L,"LI",{});var D3=s(Rf);wre=n(D3,"STRONG",{});var R5e=s(wre);Eze=r(R5e,"bloom"),R5e.forEach(t),Cze=r(D3," \u2014 "),Pk=n(D3,"A",{href:!0});var P5e=s(Pk);wze=r(P5e,"BloomConfig"),P5e.forEach(t),Aze=r(D3," (BLOOM model)"),D3.forEach(t),Lze=i(L),Pf=n(L,"LI",{});var G3=s(Pf);Are=n(G3,"STRONG",{});var B5e=s(Are);yze=r(B5e,"camembert"),B5e.forEach(t),xze=r(G3," \u2014 "),Bk=n(G3,"A",{href:!0});var I5e=s(Bk);$ze=r(I5e,"CamembertConfig"),I5e.forEach(t),kze=r(G3," (CamemBERT model)"),G3.forEach(t),Sze=i(L),Bf=n(L,"LI",{});var O3=s(Bf);Lre=n(O3,"STRONG",{});var N5e=s(Lre);Rze=r(N5e,"canine"),N5e.forEach(t),Pze=r(O3," \u2014 "),Ik=n(O3,"A",{href:!0});var q5e=s(Ik);Bze=r(q5e,"CanineConfig"),q5e.forEach(t),Ize=r(O3," (CANINE model)"),O3.forEach(t),Nze=i(L),If=n(L,"LI",{});var V3=s(If);yre=n(V3,"STRONG",{});var j5e=s(yre);qze=r(j5e,"clip"),j5e.forEach(t),jze=r(V3," \u2014 "),Nk=n(V3,"A",{href:!0});var D5e=s(Nk);Dze=r(D5e,"CLIPConfig"),D5e.forEach(t),Gze=r(V3," (CLIP model)"),V3.forEach(t),Oze=i(L),Nf=n(L,"LI",{});var X3=s(Nf);xre=n(X3,"STRONG",{});var G5e=s(xre);Vze=r(G5e,"convbert"),G5e.forEach(t),Xze=r(X3," \u2014 "),qk=n(X3,"A",{href:!0});var O5e=s(qk);zze=r(O5e,"ConvBertConfig"),O5e.forEach(t),Wze=r(X3," (ConvBERT model)"),X3.forEach(t),Qze=i(L),qf=n(L,"LI",{});var z3=s(qf);$re=n(z3,"STRONG",{});var V5e=s($re);Hze=r(V5e,"convnext"),V5e.forEach(t),Uze=r(z3," \u2014 "),jk=n(z3,"A",{href:!0});var X5e=s(jk);Jze=r(X5e,"ConvNextConfig"),X5e.forEach(t),Yze=r(z3," (ConvNeXT model)"),z3.forEach(t),Kze=i(L),jf=n(L,"LI",{});var W3=s(jf);kre=n(W3,"STRONG",{});var z5e=s(kre);Zze=r(z5e,"ctrl"),z5e.forEach(t),eWe=r(W3," \u2014 "),Dk=n(W3,"A",{href:!0});var W5e=s(Dk);oWe=r(W5e,"CTRLConfig"),W5e.forEach(t),rWe=r(W3," (CTRL model)"),W3.forEach(t),tWe=i(L),Df=n(L,"LI",{});var Q3=s(Df);Sre=n(Q3,"STRONG",{});var Q5e=s(Sre);aWe=r(Q5e,"cvt"),Q5e.forEach(t),nWe=r(Q3," \u2014 "),Gk=n(Q3,"A",{href:!0});var H5e=s(Gk);sWe=r(H5e,"CvtConfig"),H5e.forEach(t),lWe=r(Q3," (CvT model)"),Q3.forEach(t),iWe=i(L),Gf=n(L,"LI",{});var H3=s(Gf);Rre=n(H3,"STRONG",{});var U5e=s(Rre);dWe=r(U5e,"data2vec-audio"),U5e.forEach(t),cWe=r(H3," \u2014 "),Ok=n(H3,"A",{href:!0});var J5e=s(Ok);fWe=r(J5e,"Data2VecAudioConfig"),J5e.forEach(t),mWe=r(H3," (Data2VecAudio model)"),H3.forEach(t),gWe=i(L),Of=n(L,"LI",{});var U3=s(Of);Pre=n(U3,"STRONG",{});var Y5e=s(Pre);hWe=r(Y5e,"data2vec-text"),Y5e.forEach(t),pWe=r(U3," \u2014 "),Vk=n(U3,"A",{href:!0});var K5e=s(Vk);_We=r(K5e,"Data2VecTextConfig"),K5e.forEach(t),uWe=r(U3," (Data2VecText model)"),U3.forEach(t),bWe=i(L),Vf=n(L,"LI",{});var J3=s(Vf);Bre=n(J3,"STRONG",{});var Z5e=s(Bre);vWe=r(Z5e,"data2vec-vision"),Z5e.forEach(t),FWe=r(J3," \u2014 "),Xk=n(J3,"A",{href:!0});var e3e=s(Xk);TWe=r(e3e,"Data2VecVisionConfig"),e3e.forEach(t),MWe=r(J3," (Data2VecVision model)"),J3.forEach(t),EWe=i(L),Xf=n(L,"LI",{});var Y3=s(Xf);Ire=n(Y3,"STRONG",{});var o3e=s(Ire);CWe=r(o3e,"deberta"),o3e.forEach(t),wWe=r(Y3," \u2014 "),zk=n(Y3,"A",{href:!0});var r3e=s(zk);AWe=r(r3e,"DebertaConfig"),r3e.forEach(t),LWe=r(Y3," (DeBERTa model)"),Y3.forEach(t),yWe=i(L),zf=n(L,"LI",{});var K3=s(zf);Nre=n(K3,"STRONG",{});var t3e=s(Nre);xWe=r(t3e,"deberta-v2"),t3e.forEach(t),$We=r(K3," \u2014 "),Wk=n(K3,"A",{href:!0});var a3e=s(Wk);kWe=r(a3e,"DebertaV2Config"),a3e.forEach(t),SWe=r(K3," (DeBERTa-v2 model)"),K3.forEach(t),RWe=i(L),Wf=n(L,"LI",{});var Z3=s(Wf);qre=n(Z3,"STRONG",{});var n3e=s(qre);PWe=r(n3e,"decision_transformer"),n3e.forEach(t),BWe=r(Z3," \u2014 "),Qk=n(Z3,"A",{href:!0});var WQr=s(Qk);IWe=r(WQr,"DecisionTransformerConfig"),WQr.forEach(t),NWe=r(Z3," (Decision Transformer model)"),Z3.forEach(t),qWe=i(L),Qf=n(L,"LI",{});var s3e=s(Qf);jre=n(s3e,"STRONG",{});var QQr=s(jre);jWe=r(QQr,"deit"),QQr.forEach(t),DWe=r(s3e," \u2014 "),Hk=n(s3e,"A",{href:!0});var HQr=s(Hk);GWe=r(HQr,"DeiTConfig"),HQr.forEach(t),OWe=r(s3e," (DeiT model)"),s3e.forEach(t),VWe=i(L),Hf=n(L,"LI",{});var l3e=s(Hf);Dre=n(l3e,"STRONG",{});var UQr=s(Dre);XWe=r(UQr,"detr"),UQr.forEach(t),zWe=r(l3e," \u2014 "),Uk=n(l3e,"A",{href:!0});var JQr=s(Uk);WWe=r(JQr,"DetrConfig"),JQr.forEach(t),QWe=r(l3e," (DETR model)"),l3e.forEach(t),HWe=i(L),Uf=n(L,"LI",{});var i3e=s(Uf);Gre=n(i3e,"STRONG",{});var YQr=s(Gre);UWe=r(YQr,"distilbert"),YQr.forEach(t),JWe=r(i3e," \u2014 "),Jk=n(i3e,"A",{href:!0});var KQr=s(Jk);YWe=r(KQr,"DistilBertConfig"),KQr.forEach(t),KWe=r(i3e," (DistilBERT model)"),i3e.forEach(t),ZWe=i(L),Jf=n(L,"LI",{});var d3e=s(Jf);Ore=n(d3e,"STRONG",{});var ZQr=s(Ore);eQe=r(ZQr,"dpr"),ZQr.forEach(t),oQe=r(d3e," \u2014 "),Yk=n(d3e,"A",{href:!0});var eHr=s(Yk);rQe=r(eHr,"DPRConfig"),eHr.forEach(t),tQe=r(d3e," (DPR model)"),d3e.forEach(t),aQe=i(L),Yf=n(L,"LI",{});var c3e=s(Yf);Vre=n(c3e,"STRONG",{});var oHr=s(Vre);nQe=r(oHr,"dpt"),oHr.forEach(t),sQe=r(c3e," \u2014 "),Kk=n(c3e,"A",{href:!0});var rHr=s(Kk);lQe=r(rHr,"DPTConfig"),rHr.forEach(t),iQe=r(c3e," (DPT model)"),c3e.forEach(t),dQe=i(L),Kf=n(L,"LI",{});var f3e=s(Kf);Xre=n(f3e,"STRONG",{});var tHr=s(Xre);cQe=r(tHr,"electra"),tHr.forEach(t),fQe=r(f3e," \u2014 "),Zk=n(f3e,"A",{href:!0});var aHr=s(Zk);mQe=r(aHr,"ElectraConfig"),aHr.forEach(t),gQe=r(f3e," (ELECTRA model)"),f3e.forEach(t),hQe=i(L),Zf=n(L,"LI",{});var m3e=s(Zf);zre=n(m3e,"STRONG",{});var nHr=s(zre);pQe=r(nHr,"encoder-decoder"),nHr.forEach(t),_Qe=r(m3e," \u2014 "),eS=n(m3e,"A",{href:!0});var sHr=s(eS);uQe=r(sHr,"EncoderDecoderConfig"),sHr.forEach(t),bQe=r(m3e," (Encoder decoder model)"),m3e.forEach(t),vQe=i(L),em=n(L,"LI",{});var g3e=s(em);Wre=n(g3e,"STRONG",{});var lHr=s(Wre);FQe=r(lHr,"flaubert"),lHr.forEach(t),TQe=r(g3e," \u2014 "),oS=n(g3e,"A",{href:!0});var iHr=s(oS);MQe=r(iHr,"FlaubertConfig"),iHr.forEach(t),EQe=r(g3e," (FlauBERT model)"),g3e.forEach(t),CQe=i(L),om=n(L,"LI",{});var h3e=s(om);Qre=n(h3e,"STRONG",{});var dHr=s(Qre);wQe=r(dHr,"flava"),dHr.forEach(t),AQe=r(h3e," \u2014 "),rS=n(h3e,"A",{href:!0});var cHr=s(rS);LQe=r(cHr,"FlavaConfig"),cHr.forEach(t),yQe=r(h3e," (FLAVA model)"),h3e.forEach(t),xQe=i(L),rm=n(L,"LI",{});var p3e=s(rm);Hre=n(p3e,"STRONG",{});var fHr=s(Hre);$Qe=r(fHr,"fnet"),fHr.forEach(t),kQe=r(p3e," \u2014 "),tS=n(p3e,"A",{href:!0});var mHr=s(tS);SQe=r(mHr,"FNetConfig"),mHr.forEach(t),RQe=r(p3e," (FNet model)"),p3e.forEach(t),PQe=i(L),tm=n(L,"LI",{});var _3e=s(tm);Ure=n(_3e,"STRONG",{});var gHr=s(Ure);BQe=r(gHr,"fsmt"),gHr.forEach(t),IQe=r(_3e," \u2014 "),aS=n(_3e,"A",{href:!0});var hHr=s(aS);NQe=r(hHr,"FSMTConfig"),hHr.forEach(t),qQe=r(_3e," (FairSeq Machine-Translation model)"),_3e.forEach(t),jQe=i(L),am=n(L,"LI",{});var u3e=s(am);Jre=n(u3e,"STRONG",{});var pHr=s(Jre);DQe=r(pHr,"funnel"),pHr.forEach(t),GQe=r(u3e," \u2014 "),nS=n(u3e,"A",{href:!0});var _Hr=s(nS);OQe=r(_Hr,"FunnelConfig"),_Hr.forEach(t),VQe=r(u3e," (Funnel Transformer model)"),u3e.forEach(t),XQe=i(L),nm=n(L,"LI",{});var b3e=s(nm);Yre=n(b3e,"STRONG",{});var uHr=s(Yre);zQe=r(uHr,"glpn"),uHr.forEach(t),WQe=r(b3e," \u2014 "),sS=n(b3e,"A",{href:!0});var bHr=s(sS);QQe=r(bHr,"GLPNConfig"),bHr.forEach(t),HQe=r(b3e," (GLPN model)"),b3e.forEach(t),UQe=i(L),sm=n(L,"LI",{});var v3e=s(sm);Kre=n(v3e,"STRONG",{});var vHr=s(Kre);JQe=r(vHr,"gpt2"),vHr.forEach(t),YQe=r(v3e," \u2014 "),lS=n(v3e,"A",{href:!0});var FHr=s(lS);KQe=r(FHr,"GPT2Config"),FHr.forEach(t),ZQe=r(v3e," (OpenAI GPT-2 model)"),v3e.forEach(t),eHe=i(L),lm=n(L,"LI",{});var F3e=s(lm);Zre=n(F3e,"STRONG",{});var THr=s(Zre);oHe=r(THr,"gpt_neo"),THr.forEach(t),rHe=r(F3e," \u2014 "),iS=n(F3e,"A",{href:!0});var MHr=s(iS);tHe=r(MHr,"GPTNeoConfig"),MHr.forEach(t),aHe=r(F3e," (GPT Neo model)"),F3e.forEach(t),nHe=i(L),im=n(L,"LI",{});var T3e=s(im);ete=n(T3e,"STRONG",{});var EHr=s(ete);sHe=r(EHr,"gpt_neox"),EHr.forEach(t),lHe=r(T3e," \u2014 "),dS=n(T3e,"A",{href:!0});var CHr=s(dS);iHe=r(CHr,"GPTNeoXConfig"),CHr.forEach(t),dHe=r(T3e," (GPT NeoX model)"),T3e.forEach(t),cHe=i(L),dm=n(L,"LI",{});var M3e=s(dm);ote=n(M3e,"STRONG",{});var wHr=s(ote);fHe=r(wHr,"gptj"),wHr.forEach(t),mHe=r(M3e," \u2014 "),cS=n(M3e,"A",{href:!0});var AHr=s(cS);gHe=r(AHr,"GPTJConfig"),AHr.forEach(t),hHe=r(M3e," (GPT-J model)"),M3e.forEach(t),pHe=i(L),cm=n(L,"LI",{});var E3e=s(cm);rte=n(E3e,"STRONG",{});var LHr=s(rte);_He=r(LHr,"hubert"),LHr.forEach(t),uHe=r(E3e," \u2014 "),fS=n(E3e,"A",{href:!0});var yHr=s(fS);bHe=r(yHr,"HubertConfig"),yHr.forEach(t),vHe=r(E3e," (Hubert model)"),E3e.forEach(t),FHe=i(L),fm=n(L,"LI",{});var C3e=s(fm);tte=n(C3e,"STRONG",{});var xHr=s(tte);THe=r(xHr,"ibert"),xHr.forEach(t),MHe=r(C3e," \u2014 "),mS=n(C3e,"A",{href:!0});var $Hr=s(mS);EHe=r($Hr,"IBertConfig"),$Hr.forEach(t),CHe=r(C3e," (I-BERT model)"),C3e.forEach(t),wHe=i(L),mm=n(L,"LI",{});var w3e=s(mm);ate=n(w3e,"STRONG",{});var kHr=s(ate);AHe=r(kHr,"imagegpt"),kHr.forEach(t),LHe=r(w3e," \u2014 "),gS=n(w3e,"A",{href:!0});var SHr=s(gS);yHe=r(SHr,"ImageGPTConfig"),SHr.forEach(t),xHe=r(w3e," (ImageGPT model)"),w3e.forEach(t),$He=i(L),gm=n(L,"LI",{});var A3e=s(gm);nte=n(A3e,"STRONG",{});var RHr=s(nte);kHe=r(RHr,"layoutlm"),RHr.forEach(t),SHe=r(A3e," \u2014 "),hS=n(A3e,"A",{href:!0});var PHr=s(hS);RHe=r(PHr,"LayoutLMConfig"),PHr.forEach(t),PHe=r(A3e," (LayoutLM model)"),A3e.forEach(t),BHe=i(L),hm=n(L,"LI",{});var L3e=s(hm);ste=n(L3e,"STRONG",{});var BHr=s(ste);IHe=r(BHr,"layoutlmv2"),BHr.forEach(t),NHe=r(L3e," \u2014 "),pS=n(L3e,"A",{href:!0});var IHr=s(pS);qHe=r(IHr,"LayoutLMv2Config"),IHr.forEach(t),jHe=r(L3e," (LayoutLMv2 model)"),L3e.forEach(t),DHe=i(L),pm=n(L,"LI",{});var y3e=s(pm);lte=n(y3e,"STRONG",{});var NHr=s(lte);GHe=r(NHr,"layoutlmv3"),NHr.forEach(t),OHe=r(y3e," \u2014 "),_S=n(y3e,"A",{href:!0});var qHr=s(_S);VHe=r(qHr,"LayoutLMv3Config"),qHr.forEach(t),XHe=r(y3e," (LayoutLMv3 model)"),y3e.forEach(t),zHe=i(L),_m=n(L,"LI",{});var x3e=s(_m);ite=n(x3e,"STRONG",{});var jHr=s(ite);WHe=r(jHr,"led"),jHr.forEach(t),QHe=r(x3e," \u2014 "),uS=n(x3e,"A",{href:!0});var DHr=s(uS);HHe=r(DHr,"LEDConfig"),DHr.forEach(t),UHe=r(x3e," (LED model)"),x3e.forEach(t),JHe=i(L),um=n(L,"LI",{});var $3e=s(um);dte=n($3e,"STRONG",{});var GHr=s(dte);YHe=r(GHr,"levit"),GHr.forEach(t),KHe=r($3e," \u2014 "),bS=n($3e,"A",{href:!0});var OHr=s(bS);ZHe=r(OHr,"LevitConfig"),OHr.forEach(t),eUe=r($3e," (LeViT model)"),$3e.forEach(t),oUe=i(L),bm=n(L,"LI",{});var k3e=s(bm);cte=n(k3e,"STRONG",{});var VHr=s(cte);rUe=r(VHr,"longformer"),VHr.forEach(t),tUe=r(k3e," \u2014 "),vS=n(k3e,"A",{href:!0});var XHr=s(vS);aUe=r(XHr,"LongformerConfig"),XHr.forEach(t),nUe=r(k3e," (Longformer model)"),k3e.forEach(t),sUe=i(L),vm=n(L,"LI",{});var S3e=s(vm);fte=n(S3e,"STRONG",{});var zHr=s(fte);lUe=r(zHr,"longt5"),zHr.forEach(t),iUe=r(S3e," \u2014 "),FS=n(S3e,"A",{href:!0});var WHr=s(FS);dUe=r(WHr,"LongT5Config"),WHr.forEach(t),cUe=r(S3e," (LongT5 model)"),S3e.forEach(t),fUe=i(L),Fm=n(L,"LI",{});var R3e=s(Fm);mte=n(R3e,"STRONG",{});var QHr=s(mte);mUe=r(QHr,"luke"),QHr.forEach(t),gUe=r(R3e," \u2014 "),TS=n(R3e,"A",{href:!0});var HHr=s(TS);hUe=r(HHr,"LukeConfig"),HHr.forEach(t),pUe=r(R3e," (LUKE model)"),R3e.forEach(t),_Ue=i(L),Tm=n(L,"LI",{});var P3e=s(Tm);gte=n(P3e,"STRONG",{});var UHr=s(gte);uUe=r(UHr,"lxmert"),UHr.forEach(t),bUe=r(P3e," \u2014 "),MS=n(P3e,"A",{href:!0});var JHr=s(MS);vUe=r(JHr,"LxmertConfig"),JHr.forEach(t),FUe=r(P3e," (LXMERT model)"),P3e.forEach(t),TUe=i(L),Mm=n(L,"LI",{});var B3e=s(Mm);hte=n(B3e,"STRONG",{});var YHr=s(hte);MUe=r(YHr,"m2m_100"),YHr.forEach(t),EUe=r(B3e," \u2014 "),ES=n(B3e,"A",{href:!0});var KHr=s(ES);CUe=r(KHr,"M2M100Config"),KHr.forEach(t),wUe=r(B3e," (M2M100 model)"),B3e.forEach(t),AUe=i(L),Em=n(L,"LI",{});var I3e=s(Em);pte=n(I3e,"STRONG",{});var ZHr=s(pte);LUe=r(ZHr,"marian"),ZHr.forEach(t),yUe=r(I3e," \u2014 "),CS=n(I3e,"A",{href:!0});var eUr=s(CS);xUe=r(eUr,"MarianConfig"),eUr.forEach(t),$Ue=r(I3e," (Marian model)"),I3e.forEach(t),kUe=i(L),Cm=n(L,"LI",{});var N3e=s(Cm);_te=n(N3e,"STRONG",{});var oUr=s(_te);SUe=r(oUr,"maskformer"),oUr.forEach(t),RUe=r(N3e," \u2014 "),wS=n(N3e,"A",{href:!0});var rUr=s(wS);PUe=r(rUr,"MaskFormerConfig"),rUr.forEach(t),BUe=r(N3e," (MaskFormer model)"),N3e.forEach(t),IUe=i(L),wm=n(L,"LI",{});var q3e=s(wm);ute=n(q3e,"STRONG",{});var tUr=s(ute);NUe=r(tUr,"mbart"),tUr.forEach(t),qUe=r(q3e," \u2014 "),AS=n(q3e,"A",{href:!0});var aUr=s(AS);jUe=r(aUr,"MBartConfig"),aUr.forEach(t),DUe=r(q3e," (mBART model)"),q3e.forEach(t),GUe=i(L),Am=n(L,"LI",{});var j3e=s(Am);bte=n(j3e,"STRONG",{});var nUr=s(bte);OUe=r(nUr,"mctct"),nUr.forEach(t),VUe=r(j3e," \u2014 "),LS=n(j3e,"A",{href:!0});var sUr=s(LS);XUe=r(sUr,"MCTCTConfig"),sUr.forEach(t),zUe=r(j3e," (M-CTC-T model)"),j3e.forEach(t),WUe=i(L),Lm=n(L,"LI",{});var D3e=s(Lm);vte=n(D3e,"STRONG",{});var lUr=s(vte);QUe=r(lUr,"megatron-bert"),lUr.forEach(t),HUe=r(D3e," \u2014 "),yS=n(D3e,"A",{href:!0});var iUr=s(yS);UUe=r(iUr,"MegatronBertConfig"),iUr.forEach(t),JUe=r(D3e," (Megatron-BERT model)"),D3e.forEach(t),YUe=i(L),ym=n(L,"LI",{});var G3e=s(ym);Fte=n(G3e,"STRONG",{});var dUr=s(Fte);KUe=r(dUr,"mobilebert"),dUr.forEach(t),ZUe=r(G3e," \u2014 "),xS=n(G3e,"A",{href:!0});var cUr=s(xS);eJe=r(cUr,"MobileBertConfig"),cUr.forEach(t),oJe=r(G3e," (MobileBERT model)"),G3e.forEach(t),rJe=i(L),xm=n(L,"LI",{});var O3e=s(xm);Tte=n(O3e,"STRONG",{});var fUr=s(Tte);tJe=r(fUr,"mpnet"),fUr.forEach(t),aJe=r(O3e," \u2014 "),$S=n(O3e,"A",{href:!0});var mUr=s($S);nJe=r(mUr,"MPNetConfig"),mUr.forEach(t),sJe=r(O3e," (MPNet model)"),O3e.forEach(t),lJe=i(L),$m=n(L,"LI",{});var V3e=s($m);Mte=n(V3e,"STRONG",{});var gUr=s(Mte);iJe=r(gUr,"mt5"),gUr.forEach(t),dJe=r(V3e," \u2014 "),kS=n(V3e,"A",{href:!0});var hUr=s(kS);cJe=r(hUr,"MT5Config"),hUr.forEach(t),fJe=r(V3e," (MT5 model)"),V3e.forEach(t),mJe=i(L),km=n(L,"LI",{});var X3e=s(km);Ete=n(X3e,"STRONG",{});var pUr=s(Ete);gJe=r(pUr,"nystromformer"),pUr.forEach(t),hJe=r(X3e," \u2014 "),SS=n(X3e,"A",{href:!0});var _Ur=s(SS);pJe=r(_Ur,"NystromformerConfig"),_Ur.forEach(t),_Je=r(X3e," (Nystr\xF6mformer model)"),X3e.forEach(t),uJe=i(L),Sm=n(L,"LI",{});var z3e=s(Sm);Cte=n(z3e,"STRONG",{});var uUr=s(Cte);bJe=r(uUr,"openai-gpt"),uUr.forEach(t),vJe=r(z3e," \u2014 "),RS=n(z3e,"A",{href:!0});var bUr=s(RS);FJe=r(bUr,"OpenAIGPTConfig"),bUr.forEach(t),TJe=r(z3e," (OpenAI GPT model)"),z3e.forEach(t),MJe=i(L),Rm=n(L,"LI",{});var W3e=s(Rm);wte=n(W3e,"STRONG",{});var vUr=s(wte);EJe=r(vUr,"opt"),vUr.forEach(t),CJe=r(W3e," \u2014 "),PS=n(W3e,"A",{href:!0});var FUr=s(PS);wJe=r(FUr,"OPTConfig"),FUr.forEach(t),AJe=r(W3e," (OPT model)"),W3e.forEach(t),LJe=i(L),Pm=n(L,"LI",{});var Q3e=s(Pm);Ate=n(Q3e,"STRONG",{});var TUr=s(Ate);yJe=r(TUr,"pegasus"),TUr.forEach(t),xJe=r(Q3e," \u2014 "),BS=n(Q3e,"A",{href:!0});var MUr=s(BS);$Je=r(MUr,"PegasusConfig"),MUr.forEach(t),kJe=r(Q3e," (Pegasus model)"),Q3e.forEach(t),SJe=i(L),Bm=n(L,"LI",{});var H3e=s(Bm);Lte=n(H3e,"STRONG",{});var EUr=s(Lte);RJe=r(EUr,"perceiver"),EUr.forEach(t),PJe=r(H3e," \u2014 "),IS=n(H3e,"A",{href:!0});var CUr=s(IS);BJe=r(CUr,"PerceiverConfig"),CUr.forEach(t),IJe=r(H3e," (Perceiver model)"),H3e.forEach(t),NJe=i(L),Im=n(L,"LI",{});var U3e=s(Im);yte=n(U3e,"STRONG",{});var wUr=s(yte);qJe=r(wUr,"plbart"),wUr.forEach(t),jJe=r(U3e," \u2014 "),NS=n(U3e,"A",{href:!0});var AUr=s(NS);DJe=r(AUr,"PLBartConfig"),AUr.forEach(t),GJe=r(U3e," (PLBart model)"),U3e.forEach(t),OJe=i(L),Nm=n(L,"LI",{});var J3e=s(Nm);xte=n(J3e,"STRONG",{});var LUr=s(xte);VJe=r(LUr,"poolformer"),LUr.forEach(t),XJe=r(J3e," \u2014 "),qS=n(J3e,"A",{href:!0});var yUr=s(qS);zJe=r(yUr,"PoolFormerConfig"),yUr.forEach(t),WJe=r(J3e," (PoolFormer model)"),J3e.forEach(t),QJe=i(L),qm=n(L,"LI",{});var Y3e=s(qm);$te=n(Y3e,"STRONG",{});var xUr=s($te);HJe=r(xUr,"prophetnet"),xUr.forEach(t),UJe=r(Y3e," \u2014 "),jS=n(Y3e,"A",{href:!0});var $Ur=s(jS);JJe=r($Ur,"ProphetNetConfig"),$Ur.forEach(t),YJe=r(Y3e," (ProphetNet model)"),Y3e.forEach(t),KJe=i(L),jm=n(L,"LI",{});var K3e=s(jm);kte=n(K3e,"STRONG",{});var kUr=s(kte);ZJe=r(kUr,"qdqbert"),kUr.forEach(t),eYe=r(K3e," \u2014 "),DS=n(K3e,"A",{href:!0});var SUr=s(DS);oYe=r(SUr,"QDQBertConfig"),SUr.forEach(t),rYe=r(K3e," (QDQBert model)"),K3e.forEach(t),tYe=i(L),Dm=n(L,"LI",{});var Z3e=s(Dm);Ste=n(Z3e,"STRONG",{});var RUr=s(Ste);aYe=r(RUr,"rag"),RUr.forEach(t),nYe=r(Z3e," \u2014 "),GS=n(Z3e,"A",{href:!0});var PUr=s(GS);sYe=r(PUr,"RagConfig"),PUr.forEach(t),lYe=r(Z3e," (RAG model)"),Z3e.forEach(t),iYe=i(L),Gm=n(L,"LI",{});var e0e=s(Gm);Rte=n(e0e,"STRONG",{});var BUr=s(Rte);dYe=r(BUr,"realm"),BUr.forEach(t),cYe=r(e0e," \u2014 "),OS=n(e0e,"A",{href:!0});var IUr=s(OS);fYe=r(IUr,"RealmConfig"),IUr.forEach(t),mYe=r(e0e," (REALM model)"),e0e.forEach(t),gYe=i(L),Om=n(L,"LI",{});var o0e=s(Om);Pte=n(o0e,"STRONG",{});var NUr=s(Pte);hYe=r(NUr,"reformer"),NUr.forEach(t),pYe=r(o0e," \u2014 "),VS=n(o0e,"A",{href:!0});var qUr=s(VS);_Ye=r(qUr,"ReformerConfig"),qUr.forEach(t),uYe=r(o0e," (Reformer model)"),o0e.forEach(t),bYe=i(L),Vm=n(L,"LI",{});var r0e=s(Vm);Bte=n(r0e,"STRONG",{});var jUr=s(Bte);vYe=r(jUr,"regnet"),jUr.forEach(t),FYe=r(r0e," \u2014 "),XS=n(r0e,"A",{href:!0});var DUr=s(XS);TYe=r(DUr,"RegNetConfig"),DUr.forEach(t),MYe=r(r0e," (RegNet model)"),r0e.forEach(t),EYe=i(L),Xm=n(L,"LI",{});var t0e=s(Xm);Ite=n(t0e,"STRONG",{});var GUr=s(Ite);CYe=r(GUr,"rembert"),GUr.forEach(t),wYe=r(t0e," \u2014 "),zS=n(t0e,"A",{href:!0});var OUr=s(zS);AYe=r(OUr,"RemBertConfig"),OUr.forEach(t),LYe=r(t0e," (RemBERT model)"),t0e.forEach(t),yYe=i(L),zm=n(L,"LI",{});var a0e=s(zm);Nte=n(a0e,"STRONG",{});var VUr=s(Nte);xYe=r(VUr,"resnet"),VUr.forEach(t),$Ye=r(a0e," \u2014 "),WS=n(a0e,"A",{href:!0});var XUr=s(WS);kYe=r(XUr,"ResNetConfig"),XUr.forEach(t),SYe=r(a0e," (ResNet model)"),a0e.forEach(t),RYe=i(L),Wm=n(L,"LI",{});var n0e=s(Wm);qte=n(n0e,"STRONG",{});var zUr=s(qte);PYe=r(zUr,"retribert"),zUr.forEach(t),BYe=r(n0e," \u2014 "),QS=n(n0e,"A",{href:!0});var WUr=s(QS);IYe=r(WUr,"RetriBertConfig"),WUr.forEach(t),NYe=r(n0e," (RetriBERT model)"),n0e.forEach(t),qYe=i(L),Qm=n(L,"LI",{});var s0e=s(Qm);jte=n(s0e,"STRONG",{});var QUr=s(jte);jYe=r(QUr,"roberta"),QUr.forEach(t),DYe=r(s0e," \u2014 "),HS=n(s0e,"A",{href:!0});var HUr=s(HS);GYe=r(HUr,"RobertaConfig"),HUr.forEach(t),OYe=r(s0e," (RoBERTa model)"),s0e.forEach(t),VYe=i(L),Hm=n(L,"LI",{});var l0e=s(Hm);Dte=n(l0e,"STRONG",{});var UUr=s(Dte);XYe=r(UUr,"roformer"),UUr.forEach(t),zYe=r(l0e," \u2014 "),US=n(l0e,"A",{href:!0});var JUr=s(US);WYe=r(JUr,"RoFormerConfig"),JUr.forEach(t),QYe=r(l0e," (RoFormer model)"),l0e.forEach(t),HYe=i(L),Um=n(L,"LI",{});var i0e=s(Um);Gte=n(i0e,"STRONG",{});var YUr=s(Gte);UYe=r(YUr,"segformer"),YUr.forEach(t),JYe=r(i0e," \u2014 "),JS=n(i0e,"A",{href:!0});var KUr=s(JS);YYe=r(KUr,"SegformerConfig"),KUr.forEach(t),KYe=r(i0e," (SegFormer model)"),i0e.forEach(t),ZYe=i(L),Jm=n(L,"LI",{});var d0e=s(Jm);Ote=n(d0e,"STRONG",{});var ZUr=s(Ote);eKe=r(ZUr,"sew"),ZUr.forEach(t),oKe=r(d0e," \u2014 "),YS=n(d0e,"A",{href:!0});var eJr=s(YS);rKe=r(eJr,"SEWConfig"),eJr.forEach(t),tKe=r(d0e," (SEW model)"),d0e.forEach(t),aKe=i(L),Ym=n(L,"LI",{});var c0e=s(Ym);Vte=n(c0e,"STRONG",{});var oJr=s(Vte);nKe=r(oJr,"sew-d"),oJr.forEach(t),sKe=r(c0e," \u2014 "),KS=n(c0e,"A",{href:!0});var rJr=s(KS);lKe=r(rJr,"SEWDConfig"),rJr.forEach(t),iKe=r(c0e," (SEW-D model)"),c0e.forEach(t),dKe=i(L),Km=n(L,"LI",{});var f0e=s(Km);Xte=n(f0e,"STRONG",{});var tJr=s(Xte);cKe=r(tJr,"speech-encoder-decoder"),tJr.forEach(t),fKe=r(f0e," \u2014 "),ZS=n(f0e,"A",{href:!0});var aJr=s(ZS);mKe=r(aJr,"SpeechEncoderDecoderConfig"),aJr.forEach(t),gKe=r(f0e," (Speech Encoder decoder model)"),f0e.forEach(t),hKe=i(L),Zm=n(L,"LI",{});var m0e=s(Zm);zte=n(m0e,"STRONG",{});var nJr=s(zte);pKe=r(nJr,"speech_to_text"),nJr.forEach(t),_Ke=r(m0e," \u2014 "),eR=n(m0e,"A",{href:!0});var sJr=s(eR);uKe=r(sJr,"Speech2TextConfig"),sJr.forEach(t),bKe=r(m0e," (Speech2Text model)"),m0e.forEach(t),vKe=i(L),eg=n(L,"LI",{});var g0e=s(eg);Wte=n(g0e,"STRONG",{});var lJr=s(Wte);FKe=r(lJr,"speech_to_text_2"),lJr.forEach(t),TKe=r(g0e," \u2014 "),oR=n(g0e,"A",{href:!0});var iJr=s(oR);MKe=r(iJr,"Speech2Text2Config"),iJr.forEach(t),EKe=r(g0e," (Speech2Text2 model)"),g0e.forEach(t),CKe=i(L),og=n(L,"LI",{});var h0e=s(og);Qte=n(h0e,"STRONG",{});var dJr=s(Qte);wKe=r(dJr,"splinter"),dJr.forEach(t),AKe=r(h0e," \u2014 "),rR=n(h0e,"A",{href:!0});var cJr=s(rR);LKe=r(cJr,"SplinterConfig"),cJr.forEach(t),yKe=r(h0e," (Splinter model)"),h0e.forEach(t),xKe=i(L),rg=n(L,"LI",{});var p0e=s(rg);Hte=n(p0e,"STRONG",{});var fJr=s(Hte);$Ke=r(fJr,"squeezebert"),fJr.forEach(t),kKe=r(p0e," \u2014 "),tR=n(p0e,"A",{href:!0});var mJr=s(tR);SKe=r(mJr,"SqueezeBertConfig"),mJr.forEach(t),RKe=r(p0e," (SqueezeBERT model)"),p0e.forEach(t),PKe=i(L),tg=n(L,"LI",{});var _0e=s(tg);Ute=n(_0e,"STRONG",{});var gJr=s(Ute);BKe=r(gJr,"swin"),gJr.forEach(t),IKe=r(_0e," \u2014 "),aR=n(_0e,"A",{href:!0});var hJr=s(aR);NKe=r(hJr,"SwinConfig"),hJr.forEach(t),qKe=r(_0e," (Swin Transformer model)"),_0e.forEach(t),jKe=i(L),ag=n(L,"LI",{});var u0e=s(ag);Jte=n(u0e,"STRONG",{});var pJr=s(Jte);DKe=r(pJr,"t5"),pJr.forEach(t),GKe=r(u0e," \u2014 "),nR=n(u0e,"A",{href:!0});var _Jr=s(nR);OKe=r(_Jr,"T5Config"),_Jr.forEach(t),VKe=r(u0e," (T5 model)"),u0e.forEach(t),XKe=i(L),ng=n(L,"LI",{});var b0e=s(ng);Yte=n(b0e,"STRONG",{});var uJr=s(Yte);zKe=r(uJr,"tapas"),uJr.forEach(t),WKe=r(b0e," \u2014 "),sR=n(b0e,"A",{href:!0});var bJr=s(sR);QKe=r(bJr,"TapasConfig"),bJr.forEach(t),HKe=r(b0e," (TAPAS model)"),b0e.forEach(t),UKe=i(L),sg=n(L,"LI",{});var v0e=s(sg);Kte=n(v0e,"STRONG",{});var vJr=s(Kte);JKe=r(vJr,"trajectory_transformer"),vJr.forEach(t),YKe=r(v0e," \u2014 "),lR=n(v0e,"A",{href:!0});var FJr=s(lR);KKe=r(FJr,"TrajectoryTransformerConfig"),FJr.forEach(t),ZKe=r(v0e," (Trajectory Transformer model)"),v0e.forEach(t),eZe=i(L),lg=n(L,"LI",{});var F0e=s(lg);Zte=n(F0e,"STRONG",{});var TJr=s(Zte);oZe=r(TJr,"transfo-xl"),TJr.forEach(t),rZe=r(F0e," \u2014 "),iR=n(F0e,"A",{href:!0});var MJr=s(iR);tZe=r(MJr,"TransfoXLConfig"),MJr.forEach(t),aZe=r(F0e," (Transformer-XL model)"),F0e.forEach(t),nZe=i(L),ig=n(L,"LI",{});var T0e=s(ig);eae=n(T0e,"STRONG",{});var EJr=s(eae);sZe=r(EJr,"trocr"),EJr.forEach(t),lZe=r(T0e," \u2014 "),dR=n(T0e,"A",{href:!0});var CJr=s(dR);iZe=r(CJr,"TrOCRConfig"),CJr.forEach(t),dZe=r(T0e," (TrOCR model)"),T0e.forEach(t),cZe=i(L),dg=n(L,"LI",{});var M0e=s(dg);oae=n(M0e,"STRONG",{});var wJr=s(oae);fZe=r(wJr,"unispeech"),wJr.forEach(t),mZe=r(M0e," \u2014 "),cR=n(M0e,"A",{href:!0});var AJr=s(cR);gZe=r(AJr,"UniSpeechConfig"),AJr.forEach(t),hZe=r(M0e," (UniSpeech model)"),M0e.forEach(t),pZe=i(L),cg=n(L,"LI",{});var E0e=s(cg);rae=n(E0e,"STRONG",{});var LJr=s(rae);_Ze=r(LJr,"unispeech-sat"),LJr.forEach(t),uZe=r(E0e," \u2014 "),fR=n(E0e,"A",{href:!0});var yJr=s(fR);bZe=r(yJr,"UniSpeechSatConfig"),yJr.forEach(t),vZe=r(E0e," (UniSpeechSat model)"),E0e.forEach(t),FZe=i(L),fg=n(L,"LI",{});var C0e=s(fg);tae=n(C0e,"STRONG",{});var xJr=s(tae);TZe=r(xJr,"van"),xJr.forEach(t),MZe=r(C0e," \u2014 "),mR=n(C0e,"A",{href:!0});var $Jr=s(mR);EZe=r($Jr,"VanConfig"),$Jr.forEach(t),CZe=r(C0e," (VAN model)"),C0e.forEach(t),wZe=i(L),mg=n(L,"LI",{});var w0e=s(mg);aae=n(w0e,"STRONG",{});var kJr=s(aae);AZe=r(kJr,"vilt"),kJr.forEach(t),LZe=r(w0e," \u2014 "),gR=n(w0e,"A",{href:!0});var SJr=s(gR);yZe=r(SJr,"ViltConfig"),SJr.forEach(t),xZe=r(w0e," (ViLT model)"),w0e.forEach(t),$Ze=i(L),gg=n(L,"LI",{});var A0e=s(gg);nae=n(A0e,"STRONG",{});var RJr=s(nae);kZe=r(RJr,"vision-encoder-decoder"),RJr.forEach(t),SZe=r(A0e," \u2014 "),hR=n(A0e,"A",{href:!0});var PJr=s(hR);RZe=r(PJr,"VisionEncoderDecoderConfig"),PJr.forEach(t),PZe=r(A0e," (Vision Encoder decoder model)"),A0e.forEach(t),BZe=i(L),hg=n(L,"LI",{});var L0e=s(hg);sae=n(L0e,"STRONG",{});var BJr=s(sae);IZe=r(BJr,"vision-text-dual-encoder"),BJr.forEach(t),NZe=r(L0e," \u2014 "),pR=n(L0e,"A",{href:!0});var IJr=s(pR);qZe=r(IJr,"VisionTextDualEncoderConfig"),IJr.forEach(t),jZe=r(L0e," (VisionTextDualEncoder model)"),L0e.forEach(t),DZe=i(L),pg=n(L,"LI",{});var y0e=s(pg);lae=n(y0e,"STRONG",{});var NJr=s(lae);GZe=r(NJr,"visual_bert"),NJr.forEach(t),OZe=r(y0e," \u2014 "),_R=n(y0e,"A",{href:!0});var qJr=s(_R);VZe=r(qJr,"VisualBertConfig"),qJr.forEach(t),XZe=r(y0e," (VisualBERT model)"),y0e.forEach(t),zZe=i(L),_g=n(L,"LI",{});var x0e=s(_g);iae=n(x0e,"STRONG",{});var jJr=s(iae);WZe=r(jJr,"vit"),jJr.forEach(t),QZe=r(x0e," \u2014 "),uR=n(x0e,"A",{href:!0});var DJr=s(uR);HZe=r(DJr,"ViTConfig"),DJr.forEach(t),UZe=r(x0e," (ViT model)"),x0e.forEach(t),JZe=i(L),ug=n(L,"LI",{});var $0e=s(ug);dae=n($0e,"STRONG",{});var GJr=s(dae);YZe=r(GJr,"vit_mae"),GJr.forEach(t),KZe=r($0e," \u2014 "),bR=n($0e,"A",{href:!0});var OJr=s(bR);ZZe=r(OJr,"ViTMAEConfig"),OJr.forEach(t),eeo=r($0e," (ViTMAE model)"),$0e.forEach(t),oeo=i(L),bg=n(L,"LI",{});var k0e=s(bg);cae=n(k0e,"STRONG",{});var VJr=s(cae);reo=r(VJr,"wav2vec2"),VJr.forEach(t),teo=r(k0e," \u2014 "),vR=n(k0e,"A",{href:!0});var XJr=s(vR);aeo=r(XJr,"Wav2Vec2Config"),XJr.forEach(t),neo=r(k0e," (Wav2Vec2 model)"),k0e.forEach(t),seo=i(L),vg=n(L,"LI",{});var S0e=s(vg);fae=n(S0e,"STRONG",{});var zJr=s(fae);leo=r(zJr,"wav2vec2-conformer"),zJr.forEach(t),ieo=r(S0e," \u2014 "),FR=n(S0e,"A",{href:!0});var WJr=s(FR);deo=r(WJr,"Wav2Vec2ConformerConfig"),WJr.forEach(t),ceo=r(S0e," (Wav2Vec2-Conformer model)"),S0e.forEach(t),feo=i(L),Fg=n(L,"LI",{});var R0e=s(Fg);mae=n(R0e,"STRONG",{});var QJr=s(mae);meo=r(QJr,"wavlm"),QJr.forEach(t),geo=r(R0e," \u2014 "),TR=n(R0e,"A",{href:!0});var HJr=s(TR);heo=r(HJr,"WavLMConfig"),HJr.forEach(t),peo=r(R0e," (WavLM model)"),R0e.forEach(t),_eo=i(L),Tg=n(L,"LI",{});var P0e=s(Tg);gae=n(P0e,"STRONG",{});var UJr=s(gae);ueo=r(UJr,"xglm"),UJr.forEach(t),beo=r(P0e," \u2014 "),MR=n(P0e,"A",{href:!0});var JJr=s(MR);veo=r(JJr,"XGLMConfig"),JJr.forEach(t),Feo=r(P0e," (XGLM model)"),P0e.forEach(t),Teo=i(L),Mg=n(L,"LI",{});var B0e=s(Mg);hae=n(B0e,"STRONG",{});var YJr=s(hae);Meo=r(YJr,"xlm"),YJr.forEach(t),Eeo=r(B0e," \u2014 "),ER=n(B0e,"A",{href:!0});var KJr=s(ER);Ceo=r(KJr,"XLMConfig"),KJr.forEach(t),weo=r(B0e," (XLM model)"),B0e.forEach(t),Aeo=i(L),Eg=n(L,"LI",{});var I0e=s(Eg);pae=n(I0e,"STRONG",{});var ZJr=s(pae);Leo=r(ZJr,"xlm-prophetnet"),ZJr.forEach(t),yeo=r(I0e," \u2014 "),CR=n(I0e,"A",{href:!0});var eYr=s(CR);xeo=r(eYr,"XLMProphetNetConfig"),eYr.forEach(t),$eo=r(I0e," (XLM-ProphetNet model)"),I0e.forEach(t),keo=i(L),Cg=n(L,"LI",{});var N0e=s(Cg);_ae=n(N0e,"STRONG",{});var oYr=s(_ae);Seo=r(oYr,"xlm-roberta"),oYr.forEach(t),Reo=r(N0e," \u2014 "),wR=n(N0e,"A",{href:!0});var rYr=s(wR);Peo=r(rYr,"XLMRobertaConfig"),rYr.forEach(t),Beo=r(N0e," (XLM-RoBERTa model)"),N0e.forEach(t),Ieo=i(L),wg=n(L,"LI",{});var q0e=s(wg);uae=n(q0e,"STRONG",{});var tYr=s(uae);Neo=r(tYr,"xlm-roberta-xl"),tYr.forEach(t),qeo=r(q0e," \u2014 "),AR=n(q0e,"A",{href:!0});var aYr=s(AR);jeo=r(aYr,"XLMRobertaXLConfig"),aYr.forEach(t),Deo=r(q0e," (XLM-RoBERTa-XL model)"),q0e.forEach(t),Geo=i(L),Ag=n(L,"LI",{});var j0e=s(Ag);bae=n(j0e,"STRONG",{});var nYr=s(bae);Oeo=r(nYr,"xlnet"),nYr.forEach(t),Veo=r(j0e," \u2014 "),LR=n(j0e,"A",{href:!0});var sYr=s(LR);Xeo=r(sYr,"XLNetConfig"),sYr.forEach(t),zeo=r(j0e," (XLNet model)"),j0e.forEach(t),Weo=i(L),Lg=n(L,"LI",{});var D0e=s(Lg);vae=n(D0e,"STRONG",{});var lYr=s(vae);Qeo=r(lYr,"yolos"),lYr.forEach(t),Heo=r(D0e," \u2014 "),yR=n(D0e,"A",{href:!0});var iYr=s(yR);Ueo=r(iYr,"YolosConfig"),iYr.forEach(t),Jeo=r(D0e," (YOLOS model)"),D0e.forEach(t),Yeo=i(L),yg=n(L,"LI",{});var G0e=s(yg);Fae=n(G0e,"STRONG",{});var dYr=s(Fae);Keo=r(dYr,"yoso"),dYr.forEach(t),Zeo=r(G0e," \u2014 "),xR=n(G0e,"A",{href:!0});var cYr=s(xR);eoo=r(cYr,"YosoConfig"),cYr.forEach(t),ooo=r(G0e," (YOSO model)"),G0e.forEach(t),L.forEach(t),roo=i(ot),T(xg.$$.fragment,ot),ot.forEach(t),too=i(et),$g=n(et,"DIV",{class:!0});var JGe=s($g);T(nA.$$.fragment,JGe),aoo=i(JGe),Tae=n(JGe,"P",{});var fYr=s(Tae);noo=r(fYr,"Register a new configuration for this class."),fYr.forEach(t),JGe.forEach(t),et.forEach(t),Zje=i(f),Ei=n(f,"H2",{class:!0});var YGe=s(Ei);kg=n(YGe,"A",{id:!0,class:!0,href:!0});var mYr=s(kg);Mae=n(mYr,"SPAN",{});var gYr=s(Mae);T(sA.$$.fragment,gYr),gYr.forEach(t),mYr.forEach(t),soo=i(YGe),Eae=n(YGe,"SPAN",{});var hYr=s(Eae);loo=r(hYr,"AutoTokenizer"),hYr.forEach(t),YGe.forEach(t),eDe=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(lA.$$.fragment,js),ioo=i(js),iA=n(js,"P",{});var KGe=s(iA);doo=r(KGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$R=n(KGe,"A",{href:!0});var pYr=s($R);coo=r(pYr,"AutoTokenizer.from_pretrained()"),pYr.forEach(t),foo=r(KGe," class method."),KGe.forEach(t),moo=i(js),dA=n(js,"P",{});var ZGe=s(dA);goo=r(ZGe,"This class cannot be instantiated directly using "),Cae=n(ZGe,"CODE",{});var _Yr=s(Cae);hoo=r(_Yr,"__init__()"),_Yr.forEach(t),poo=r(ZGe," (throws an error)."),ZGe.forEach(t),_oo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(cA.$$.fragment,Ds),uoo=i(Ds),wae=n(Ds,"P",{});var uYr=s(wae);boo=r(uYr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uYr.forEach(t),voo=i(Ds),Aa=n(Ds,"P",{});var e0=s(Aa);Foo=r(e0,"The tokenizer class to instantiate is selected based on the "),Aae=n(e0,"CODE",{});var bYr=s(Aae);Too=r(bYr,"model_type"),bYr.forEach(t),Moo=r(e0,` property of the config object (either
passed as an argument or loaded from `),Lae=n(e0,"CODE",{});var vYr=s(Lae);Eoo=r(vYr,"pretrained_model_name_or_path"),vYr.forEach(t),Coo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=n(e0,"CODE",{});var FYr=s(yae);woo=r(FYr,"pretrained_model_name_or_path"),FYr.forEach(t),Aoo=r(e0,":"),e0.forEach(t),Loo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var f$=s(Sn);xae=n(f$,"STRONG",{});var TYr=s(xae);yoo=r(TYr,"albert"),TYr.forEach(t),xoo=r(f$," \u2014 "),kR=n(f$,"A",{href:!0});var MYr=s(kR);$oo=r(MYr,"AlbertTokenizer"),MYr.forEach(t),koo=r(f$," or "),SR=n(f$,"A",{href:!0});var EYr=s(SR);Soo=r(EYr,"AlbertTokenizerFast"),EYr.forEach(t),Roo=r(f$," (ALBERT model)"),f$.forEach(t),Poo=i(S),Rn=n(S,"LI",{});var m$=s(Rn);$ae=n(m$,"STRONG",{});var CYr=s($ae);Boo=r(CYr,"bart"),CYr.forEach(t),Ioo=r(m$," \u2014 "),RR=n(m$,"A",{href:!0});var wYr=s(RR);Noo=r(wYr,"BartTokenizer"),wYr.forEach(t),qoo=r(m$," or "),PR=n(m$,"A",{href:!0});var AYr=s(PR);joo=r(AYr,"BartTokenizerFast"),AYr.forEach(t),Doo=r(m$," (BART model)"),m$.forEach(t),Goo=i(S),Pn=n(S,"LI",{});var g$=s(Pn);kae=n(g$,"STRONG",{});var LYr=s(kae);Ooo=r(LYr,"barthez"),LYr.forEach(t),Voo=r(g$," \u2014 "),BR=n(g$,"A",{href:!0});var yYr=s(BR);Xoo=r(yYr,"BarthezTokenizer"),yYr.forEach(t),zoo=r(g$," or "),IR=n(g$,"A",{href:!0});var xYr=s(IR);Woo=r(xYr,"BarthezTokenizerFast"),xYr.forEach(t),Qoo=r(g$," (BARThez model)"),g$.forEach(t),Hoo=i(S),Sg=n(S,"LI",{});var O0e=s(Sg);Sae=n(O0e,"STRONG",{});var $Yr=s(Sae);Uoo=r($Yr,"bartpho"),$Yr.forEach(t),Joo=r(O0e," \u2014 "),NR=n(O0e,"A",{href:!0});var kYr=s(NR);Yoo=r(kYr,"BartphoTokenizer"),kYr.forEach(t),Koo=r(O0e," (BARTpho model)"),O0e.forEach(t),Zoo=i(S),Bn=n(S,"LI",{});var h$=s(Bn);Rae=n(h$,"STRONG",{});var SYr=s(Rae);ero=r(SYr,"bert"),SYr.forEach(t),oro=r(h$," \u2014 "),qR=n(h$,"A",{href:!0});var RYr=s(qR);rro=r(RYr,"BertTokenizer"),RYr.forEach(t),tro=r(h$," or "),jR=n(h$,"A",{href:!0});var PYr=s(jR);aro=r(PYr,"BertTokenizerFast"),PYr.forEach(t),nro=r(h$," (BERT model)"),h$.forEach(t),sro=i(S),Rg=n(S,"LI",{});var V0e=s(Rg);Pae=n(V0e,"STRONG",{});var BYr=s(Pae);lro=r(BYr,"bert-generation"),BYr.forEach(t),iro=r(V0e," \u2014 "),DR=n(V0e,"A",{href:!0});var IYr=s(DR);dro=r(IYr,"BertGenerationTokenizer"),IYr.forEach(t),cro=r(V0e," (Bert Generation model)"),V0e.forEach(t),fro=i(S),Pg=n(S,"LI",{});var X0e=s(Pg);Bae=n(X0e,"STRONG",{});var NYr=s(Bae);mro=r(NYr,"bert-japanese"),NYr.forEach(t),gro=r(X0e," \u2014 "),GR=n(X0e,"A",{href:!0});var qYr=s(GR);hro=r(qYr,"BertJapaneseTokenizer"),qYr.forEach(t),pro=r(X0e," (BertJapanese model)"),X0e.forEach(t),_ro=i(S),Bg=n(S,"LI",{});var z0e=s(Bg);Iae=n(z0e,"STRONG",{});var jYr=s(Iae);uro=r(jYr,"bertweet"),jYr.forEach(t),bro=r(z0e," \u2014 "),OR=n(z0e,"A",{href:!0});var DYr=s(OR);vro=r(DYr,"BertweetTokenizer"),DYr.forEach(t),Fro=r(z0e," (BERTweet model)"),z0e.forEach(t),Tro=i(S),In=n(S,"LI",{});var p$=s(In);Nae=n(p$,"STRONG",{});var GYr=s(Nae);Mro=r(GYr,"big_bird"),GYr.forEach(t),Ero=r(p$," \u2014 "),VR=n(p$,"A",{href:!0});var OYr=s(VR);Cro=r(OYr,"BigBirdTokenizer"),OYr.forEach(t),wro=r(p$," or "),XR=n(p$,"A",{href:!0});var VYr=s(XR);Aro=r(VYr,"BigBirdTokenizerFast"),VYr.forEach(t),Lro=r(p$," (BigBird model)"),p$.forEach(t),yro=i(S),Nn=n(S,"LI",{});var _$=s(Nn);qae=n(_$,"STRONG",{});var XYr=s(qae);xro=r(XYr,"bigbird_pegasus"),XYr.forEach(t),$ro=r(_$," \u2014 "),zR=n(_$,"A",{href:!0});var zYr=s(zR);kro=r(zYr,"PegasusTokenizer"),zYr.forEach(t),Sro=r(_$," or "),WR=n(_$,"A",{href:!0});var WYr=s(WR);Rro=r(WYr,"PegasusTokenizerFast"),WYr.forEach(t),Pro=r(_$," (BigBird-Pegasus model)"),_$.forEach(t),Bro=i(S),qn=n(S,"LI",{});var u$=s(qn);jae=n(u$,"STRONG",{});var QYr=s(jae);Iro=r(QYr,"blenderbot"),QYr.forEach(t),Nro=r(u$," \u2014 "),QR=n(u$,"A",{href:!0});var HYr=s(QR);qro=r(HYr,"BlenderbotTokenizer"),HYr.forEach(t),jro=r(u$," or "),HR=n(u$,"A",{href:!0});var UYr=s(HR);Dro=r(UYr,"BlenderbotTokenizerFast"),UYr.forEach(t),Gro=r(u$," (Blenderbot model)"),u$.forEach(t),Oro=i(S),Ig=n(S,"LI",{});var W0e=s(Ig);Dae=n(W0e,"STRONG",{});var JYr=s(Dae);Vro=r(JYr,"blenderbot-small"),JYr.forEach(t),Xro=r(W0e," \u2014 "),UR=n(W0e,"A",{href:!0});var YYr=s(UR);zro=r(YYr,"BlenderbotSmallTokenizer"),YYr.forEach(t),Wro=r(W0e," (BlenderbotSmall model)"),W0e.forEach(t),Qro=i(S),Ng=n(S,"LI",{});var Q0e=s(Ng);Gae=n(Q0e,"STRONG",{});var KYr=s(Gae);Hro=r(KYr,"bloom"),KYr.forEach(t),Uro=r(Q0e," \u2014 "),JR=n(Q0e,"A",{href:!0});var ZYr=s(JR);Jro=r(ZYr,"BloomTokenizerFast"),ZYr.forEach(t),Yro=r(Q0e," (BLOOM model)"),Q0e.forEach(t),Kro=i(S),qg=n(S,"LI",{});var H0e=s(qg);Oae=n(H0e,"STRONG",{});var eKr=s(Oae);Zro=r(eKr,"byt5"),eKr.forEach(t),eto=r(H0e," \u2014 "),YR=n(H0e,"A",{href:!0});var oKr=s(YR);oto=r(oKr,"ByT5Tokenizer"),oKr.forEach(t),rto=r(H0e," (ByT5 model)"),H0e.forEach(t),tto=i(S),jn=n(S,"LI",{});var b$=s(jn);Vae=n(b$,"STRONG",{});var rKr=s(Vae);ato=r(rKr,"camembert"),rKr.forEach(t),nto=r(b$," \u2014 "),KR=n(b$,"A",{href:!0});var tKr=s(KR);sto=r(tKr,"CamembertTokenizer"),tKr.forEach(t),lto=r(b$," or "),ZR=n(b$,"A",{href:!0});var aKr=s(ZR);ito=r(aKr,"CamembertTokenizerFast"),aKr.forEach(t),dto=r(b$," (CamemBERT model)"),b$.forEach(t),cto=i(S),jg=n(S,"LI",{});var U0e=s(jg);Xae=n(U0e,"STRONG",{});var nKr=s(Xae);fto=r(nKr,"canine"),nKr.forEach(t),mto=r(U0e," \u2014 "),eP=n(U0e,"A",{href:!0});var sKr=s(eP);gto=r(sKr,"CanineTokenizer"),sKr.forEach(t),hto=r(U0e," (CANINE model)"),U0e.forEach(t),pto=i(S),Dn=n(S,"LI",{});var v$=s(Dn);zae=n(v$,"STRONG",{});var lKr=s(zae);_to=r(lKr,"clip"),lKr.forEach(t),uto=r(v$," \u2014 "),oP=n(v$,"A",{href:!0});var iKr=s(oP);bto=r(iKr,"CLIPTokenizer"),iKr.forEach(t),vto=r(v$," or "),rP=n(v$,"A",{href:!0});var dKr=s(rP);Fto=r(dKr,"CLIPTokenizerFast"),dKr.forEach(t),Tto=r(v$," (CLIP model)"),v$.forEach(t),Mto=i(S),Gn=n(S,"LI",{});var F$=s(Gn);Wae=n(F$,"STRONG",{});var cKr=s(Wae);Eto=r(cKr,"convbert"),cKr.forEach(t),Cto=r(F$," \u2014 "),tP=n(F$,"A",{href:!0});var fKr=s(tP);wto=r(fKr,"ConvBertTokenizer"),fKr.forEach(t),Ato=r(F$," or "),aP=n(F$,"A",{href:!0});var mKr=s(aP);Lto=r(mKr,"ConvBertTokenizerFast"),mKr.forEach(t),yto=r(F$," (ConvBERT model)"),F$.forEach(t),xto=i(S),On=n(S,"LI",{});var T$=s(On);Qae=n(T$,"STRONG",{});var gKr=s(Qae);$to=r(gKr,"cpm"),gKr.forEach(t),kto=r(T$," \u2014 "),nP=n(T$,"A",{href:!0});var hKr=s(nP);Sto=r(hKr,"CpmTokenizer"),hKr.forEach(t),Rto=r(T$," or "),sP=n(T$,"A",{href:!0});var pKr=s(sP);Pto=r(pKr,"CpmTokenizerFast"),pKr.forEach(t),Bto=r(T$," (CPM model)"),T$.forEach(t),Ito=i(S),Dg=n(S,"LI",{});var J0e=s(Dg);Hae=n(J0e,"STRONG",{});var _Kr=s(Hae);Nto=r(_Kr,"ctrl"),_Kr.forEach(t),qto=r(J0e," \u2014 "),lP=n(J0e,"A",{href:!0});var uKr=s(lP);jto=r(uKr,"CTRLTokenizer"),uKr.forEach(t),Dto=r(J0e," (CTRL model)"),J0e.forEach(t),Gto=i(S),Vn=n(S,"LI",{});var M$=s(Vn);Uae=n(M$,"STRONG",{});var bKr=s(Uae);Oto=r(bKr,"data2vec-text"),bKr.forEach(t),Vto=r(M$," \u2014 "),iP=n(M$,"A",{href:!0});var vKr=s(iP);Xto=r(vKr,"RobertaTokenizer"),vKr.forEach(t),zto=r(M$," or "),dP=n(M$,"A",{href:!0});var FKr=s(dP);Wto=r(FKr,"RobertaTokenizerFast"),FKr.forEach(t),Qto=r(M$," (Data2VecText model)"),M$.forEach(t),Hto=i(S),Xn=n(S,"LI",{});var E$=s(Xn);Jae=n(E$,"STRONG",{});var TKr=s(Jae);Uto=r(TKr,"deberta"),TKr.forEach(t),Jto=r(E$," \u2014 "),cP=n(E$,"A",{href:!0});var MKr=s(cP);Yto=r(MKr,"DebertaTokenizer"),MKr.forEach(t),Kto=r(E$," or "),fP=n(E$,"A",{href:!0});var EKr=s(fP);Zto=r(EKr,"DebertaTokenizerFast"),EKr.forEach(t),eao=r(E$," (DeBERTa model)"),E$.forEach(t),oao=i(S),zn=n(S,"LI",{});var C$=s(zn);Yae=n(C$,"STRONG",{});var CKr=s(Yae);rao=r(CKr,"deberta-v2"),CKr.forEach(t),tao=r(C$," \u2014 "),mP=n(C$,"A",{href:!0});var wKr=s(mP);aao=r(wKr,"DebertaV2Tokenizer"),wKr.forEach(t),nao=r(C$," or "),gP=n(C$,"A",{href:!0});var AKr=s(gP);sao=r(AKr,"DebertaV2TokenizerFast"),AKr.forEach(t),lao=r(C$," (DeBERTa-v2 model)"),C$.forEach(t),iao=i(S),Wn=n(S,"LI",{});var w$=s(Wn);Kae=n(w$,"STRONG",{});var LKr=s(Kae);dao=r(LKr,"distilbert"),LKr.forEach(t),cao=r(w$," \u2014 "),hP=n(w$,"A",{href:!0});var yKr=s(hP);fao=r(yKr,"DistilBertTokenizer"),yKr.forEach(t),mao=r(w$," or "),pP=n(w$,"A",{href:!0});var xKr=s(pP);gao=r(xKr,"DistilBertTokenizerFast"),xKr.forEach(t),hao=r(w$," (DistilBERT model)"),w$.forEach(t),pao=i(S),Qn=n(S,"LI",{});var A$=s(Qn);Zae=n(A$,"STRONG",{});var $Kr=s(Zae);_ao=r($Kr,"dpr"),$Kr.forEach(t),uao=r(A$," \u2014 "),_P=n(A$,"A",{href:!0});var kKr=s(_P);bao=r(kKr,"DPRQuestionEncoderTokenizer"),kKr.forEach(t),vao=r(A$," or "),uP=n(A$,"A",{href:!0});var SKr=s(uP);Fao=r(SKr,"DPRQuestionEncoderTokenizerFast"),SKr.forEach(t),Tao=r(A$," (DPR model)"),A$.forEach(t),Mao=i(S),Hn=n(S,"LI",{});var L$=s(Hn);ene=n(L$,"STRONG",{});var RKr=s(ene);Eao=r(RKr,"electra"),RKr.forEach(t),Cao=r(L$," \u2014 "),bP=n(L$,"A",{href:!0});var PKr=s(bP);wao=r(PKr,"ElectraTokenizer"),PKr.forEach(t),Aao=r(L$," or "),vP=n(L$,"A",{href:!0});var BKr=s(vP);Lao=r(BKr,"ElectraTokenizerFast"),BKr.forEach(t),yao=r(L$," (ELECTRA model)"),L$.forEach(t),xao=i(S),Gg=n(S,"LI",{});var Y0e=s(Gg);one=n(Y0e,"STRONG",{});var IKr=s(one);$ao=r(IKr,"flaubert"),IKr.forEach(t),kao=r(Y0e," \u2014 "),FP=n(Y0e,"A",{href:!0});var NKr=s(FP);Sao=r(NKr,"FlaubertTokenizer"),NKr.forEach(t),Rao=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),Pao=i(S),Un=n(S,"LI",{});var y$=s(Un);rne=n(y$,"STRONG",{});var qKr=s(rne);Bao=r(qKr,"fnet"),qKr.forEach(t),Iao=r(y$," \u2014 "),TP=n(y$,"A",{href:!0});var jKr=s(TP);Nao=r(jKr,"FNetTokenizer"),jKr.forEach(t),qao=r(y$," or "),MP=n(y$,"A",{href:!0});var DKr=s(MP);jao=r(DKr,"FNetTokenizerFast"),DKr.forEach(t),Dao=r(y$," (FNet model)"),y$.forEach(t),Gao=i(S),Og=n(S,"LI",{});var K0e=s(Og);tne=n(K0e,"STRONG",{});var GKr=s(tne);Oao=r(GKr,"fsmt"),GKr.forEach(t),Vao=r(K0e," \u2014 "),EP=n(K0e,"A",{href:!0});var OKr=s(EP);Xao=r(OKr,"FSMTTokenizer"),OKr.forEach(t),zao=r(K0e," (FairSeq Machine-Translation model)"),K0e.forEach(t),Wao=i(S),Jn=n(S,"LI",{});var x$=s(Jn);ane=n(x$,"STRONG",{});var VKr=s(ane);Qao=r(VKr,"funnel"),VKr.forEach(t),Hao=r(x$," \u2014 "),CP=n(x$,"A",{href:!0});var XKr=s(CP);Uao=r(XKr,"FunnelTokenizer"),XKr.forEach(t),Jao=r(x$," or "),wP=n(x$,"A",{href:!0});var zKr=s(wP);Yao=r(zKr,"FunnelTokenizerFast"),zKr.forEach(t),Kao=r(x$," (Funnel Transformer model)"),x$.forEach(t),Zao=i(S),Yn=n(S,"LI",{});var $$=s(Yn);nne=n($$,"STRONG",{});var WKr=s(nne);eno=r(WKr,"gpt2"),WKr.forEach(t),ono=r($$," \u2014 "),AP=n($$,"A",{href:!0});var QKr=s(AP);rno=r(QKr,"GPT2Tokenizer"),QKr.forEach(t),tno=r($$," or "),LP=n($$,"A",{href:!0});var HKr=s(LP);ano=r(HKr,"GPT2TokenizerFast"),HKr.forEach(t),nno=r($$," (OpenAI GPT-2 model)"),$$.forEach(t),sno=i(S),Kn=n(S,"LI",{});var k$=s(Kn);sne=n(k$,"STRONG",{});var UKr=s(sne);lno=r(UKr,"gpt_neo"),UKr.forEach(t),ino=r(k$," \u2014 "),yP=n(k$,"A",{href:!0});var JKr=s(yP);dno=r(JKr,"GPT2Tokenizer"),JKr.forEach(t),cno=r(k$," or "),xP=n(k$,"A",{href:!0});var YKr=s(xP);fno=r(YKr,"GPT2TokenizerFast"),YKr.forEach(t),mno=r(k$," (GPT Neo model)"),k$.forEach(t),gno=i(S),Vg=n(S,"LI",{});var Z0e=s(Vg);lne=n(Z0e,"STRONG",{});var KKr=s(lne);hno=r(KKr,"gpt_neox"),KKr.forEach(t),pno=r(Z0e," \u2014 "),$P=n(Z0e,"A",{href:!0});var ZKr=s($P);_no=r(ZKr,"GPTNeoXTokenizerFast"),ZKr.forEach(t),uno=r(Z0e," (GPT NeoX model)"),Z0e.forEach(t),bno=i(S),Zn=n(S,"LI",{});var S$=s(Zn);ine=n(S$,"STRONG",{});var eZr=s(ine);vno=r(eZr,"gptj"),eZr.forEach(t),Fno=r(S$," \u2014 "),kP=n(S$,"A",{href:!0});var oZr=s(kP);Tno=r(oZr,"GPT2Tokenizer"),oZr.forEach(t),Mno=r(S$," or "),SP=n(S$,"A",{href:!0});var rZr=s(SP);Eno=r(rZr,"GPT2TokenizerFast"),rZr.forEach(t),Cno=r(S$," (GPT-J model)"),S$.forEach(t),wno=i(S),es=n(S,"LI",{});var R$=s(es);dne=n(R$,"STRONG",{});var tZr=s(dne);Ano=r(tZr,"herbert"),tZr.forEach(t),Lno=r(R$," \u2014 "),RP=n(R$,"A",{href:!0});var aZr=s(RP);yno=r(aZr,"HerbertTokenizer"),aZr.forEach(t),xno=r(R$," or "),PP=n(R$,"A",{href:!0});var nZr=s(PP);$no=r(nZr,"HerbertTokenizerFast"),nZr.forEach(t),kno=r(R$," (HerBERT model)"),R$.forEach(t),Sno=i(S),Xg=n(S,"LI",{});var ewe=s(Xg);cne=n(ewe,"STRONG",{});var sZr=s(cne);Rno=r(sZr,"hubert"),sZr.forEach(t),Pno=r(ewe," \u2014 "),BP=n(ewe,"A",{href:!0});var lZr=s(BP);Bno=r(lZr,"Wav2Vec2CTCTokenizer"),lZr.forEach(t),Ino=r(ewe," (Hubert model)"),ewe.forEach(t),Nno=i(S),os=n(S,"LI",{});var P$=s(os);fne=n(P$,"STRONG",{});var iZr=s(fne);qno=r(iZr,"ibert"),iZr.forEach(t),jno=r(P$," \u2014 "),IP=n(P$,"A",{href:!0});var dZr=s(IP);Dno=r(dZr,"RobertaTokenizer"),dZr.forEach(t),Gno=r(P$," or "),NP=n(P$,"A",{href:!0});var cZr=s(NP);Ono=r(cZr,"RobertaTokenizerFast"),cZr.forEach(t),Vno=r(P$," (I-BERT model)"),P$.forEach(t),Xno=i(S),rs=n(S,"LI",{});var B$=s(rs);mne=n(B$,"STRONG",{});var fZr=s(mne);zno=r(fZr,"layoutlm"),fZr.forEach(t),Wno=r(B$," \u2014 "),qP=n(B$,"A",{href:!0});var mZr=s(qP);Qno=r(mZr,"LayoutLMTokenizer"),mZr.forEach(t),Hno=r(B$," or "),jP=n(B$,"A",{href:!0});var gZr=s(jP);Uno=r(gZr,"LayoutLMTokenizerFast"),gZr.forEach(t),Jno=r(B$," (LayoutLM model)"),B$.forEach(t),Yno=i(S),ts=n(S,"LI",{});var I$=s(ts);gne=n(I$,"STRONG",{});var hZr=s(gne);Kno=r(hZr,"layoutlmv2"),hZr.forEach(t),Zno=r(I$," \u2014 "),DP=n(I$,"A",{href:!0});var pZr=s(DP);eso=r(pZr,"LayoutLMv2Tokenizer"),pZr.forEach(t),oso=r(I$," or "),GP=n(I$,"A",{href:!0});var _Zr=s(GP);rso=r(_Zr,"LayoutLMv2TokenizerFast"),_Zr.forEach(t),tso=r(I$," (LayoutLMv2 model)"),I$.forEach(t),aso=i(S),as=n(S,"LI",{});var N$=s(as);hne=n(N$,"STRONG",{});var uZr=s(hne);nso=r(uZr,"layoutlmv3"),uZr.forEach(t),sso=r(N$," \u2014 "),OP=n(N$,"A",{href:!0});var bZr=s(OP);lso=r(bZr,"LayoutLMv3Tokenizer"),bZr.forEach(t),iso=r(N$," or "),VP=n(N$,"A",{href:!0});var vZr=s(VP);dso=r(vZr,"LayoutLMv3TokenizerFast"),vZr.forEach(t),cso=r(N$," (LayoutLMv3 model)"),N$.forEach(t),fso=i(S),ns=n(S,"LI",{});var q$=s(ns);pne=n(q$,"STRONG",{});var FZr=s(pne);mso=r(FZr,"layoutxlm"),FZr.forEach(t),gso=r(q$," \u2014 "),XP=n(q$,"A",{href:!0});var TZr=s(XP);hso=r(TZr,"LayoutXLMTokenizer"),TZr.forEach(t),pso=r(q$," or "),zP=n(q$,"A",{href:!0});var MZr=s(zP);_so=r(MZr,"LayoutXLMTokenizerFast"),MZr.forEach(t),uso=r(q$," (LayoutXLM model)"),q$.forEach(t),bso=i(S),ss=n(S,"LI",{});var j$=s(ss);_ne=n(j$,"STRONG",{});var EZr=s(_ne);vso=r(EZr,"led"),EZr.forEach(t),Fso=r(j$," \u2014 "),WP=n(j$,"A",{href:!0});var CZr=s(WP);Tso=r(CZr,"LEDTokenizer"),CZr.forEach(t),Mso=r(j$," or "),QP=n(j$,"A",{href:!0});var wZr=s(QP);Eso=r(wZr,"LEDTokenizerFast"),wZr.forEach(t),Cso=r(j$," (LED model)"),j$.forEach(t),wso=i(S),ls=n(S,"LI",{});var D$=s(ls);une=n(D$,"STRONG",{});var AZr=s(une);Aso=r(AZr,"longformer"),AZr.forEach(t),Lso=r(D$," \u2014 "),HP=n(D$,"A",{href:!0});var LZr=s(HP);yso=r(LZr,"LongformerTokenizer"),LZr.forEach(t),xso=r(D$," or "),UP=n(D$,"A",{href:!0});var yZr=s(UP);$so=r(yZr,"LongformerTokenizerFast"),yZr.forEach(t),kso=r(D$," (Longformer model)"),D$.forEach(t),Sso=i(S),is=n(S,"LI",{});var G$=s(is);bne=n(G$,"STRONG",{});var xZr=s(bne);Rso=r(xZr,"longt5"),xZr.forEach(t),Pso=r(G$," \u2014 "),JP=n(G$,"A",{href:!0});var $Zr=s(JP);Bso=r($Zr,"T5Tokenizer"),$Zr.forEach(t),Iso=r(G$," or "),YP=n(G$,"A",{href:!0});var kZr=s(YP);Nso=r(kZr,"T5TokenizerFast"),kZr.forEach(t),qso=r(G$," (LongT5 model)"),G$.forEach(t),jso=i(S),zg=n(S,"LI",{});var owe=s(zg);vne=n(owe,"STRONG",{});var SZr=s(vne);Dso=r(SZr,"luke"),SZr.forEach(t),Gso=r(owe," \u2014 "),KP=n(owe,"A",{href:!0});var RZr=s(KP);Oso=r(RZr,"LukeTokenizer"),RZr.forEach(t),Vso=r(owe," (LUKE model)"),owe.forEach(t),Xso=i(S),ds=n(S,"LI",{});var O$=s(ds);Fne=n(O$,"STRONG",{});var PZr=s(Fne);zso=r(PZr,"lxmert"),PZr.forEach(t),Wso=r(O$," \u2014 "),ZP=n(O$,"A",{href:!0});var BZr=s(ZP);Qso=r(BZr,"LxmertTokenizer"),BZr.forEach(t),Hso=r(O$," or "),eB=n(O$,"A",{href:!0});var IZr=s(eB);Uso=r(IZr,"LxmertTokenizerFast"),IZr.forEach(t),Jso=r(O$," (LXMERT model)"),O$.forEach(t),Yso=i(S),Wg=n(S,"LI",{});var rwe=s(Wg);Tne=n(rwe,"STRONG",{});var NZr=s(Tne);Kso=r(NZr,"m2m_100"),NZr.forEach(t),Zso=r(rwe," \u2014 "),oB=n(rwe,"A",{href:!0});var qZr=s(oB);elo=r(qZr,"M2M100Tokenizer"),qZr.forEach(t),olo=r(rwe," (M2M100 model)"),rwe.forEach(t),rlo=i(S),Qg=n(S,"LI",{});var twe=s(Qg);Mne=n(twe,"STRONG",{});var jZr=s(Mne);tlo=r(jZr,"marian"),jZr.forEach(t),alo=r(twe," \u2014 "),rB=n(twe,"A",{href:!0});var DZr=s(rB);nlo=r(DZr,"MarianTokenizer"),DZr.forEach(t),slo=r(twe," (Marian model)"),twe.forEach(t),llo=i(S),cs=n(S,"LI",{});var V$=s(cs);Ene=n(V$,"STRONG",{});var GZr=s(Ene);ilo=r(GZr,"mbart"),GZr.forEach(t),dlo=r(V$," \u2014 "),tB=n(V$,"A",{href:!0});var OZr=s(tB);clo=r(OZr,"MBartTokenizer"),OZr.forEach(t),flo=r(V$," or "),aB=n(V$,"A",{href:!0});var VZr=s(aB);mlo=r(VZr,"MBartTokenizerFast"),VZr.forEach(t),glo=r(V$," (mBART model)"),V$.forEach(t),hlo=i(S),fs=n(S,"LI",{});var X$=s(fs);Cne=n(X$,"STRONG",{});var XZr=s(Cne);plo=r(XZr,"mbart50"),XZr.forEach(t),_lo=r(X$," \u2014 "),nB=n(X$,"A",{href:!0});var zZr=s(nB);ulo=r(zZr,"MBart50Tokenizer"),zZr.forEach(t),blo=r(X$," or "),sB=n(X$,"A",{href:!0});var WZr=s(sB);vlo=r(WZr,"MBart50TokenizerFast"),WZr.forEach(t),Flo=r(X$," (mBART-50 model)"),X$.forEach(t),Tlo=i(S),ms=n(S,"LI",{});var z$=s(ms);wne=n(z$,"STRONG",{});var QZr=s(wne);Mlo=r(QZr,"megatron-bert"),QZr.forEach(t),Elo=r(z$," \u2014 "),lB=n(z$,"A",{href:!0});var HZr=s(lB);Clo=r(HZr,"BertTokenizer"),HZr.forEach(t),wlo=r(z$," or "),iB=n(z$,"A",{href:!0});var UZr=s(iB);Alo=r(UZr,"BertTokenizerFast"),UZr.forEach(t),Llo=r(z$," (Megatron-BERT model)"),z$.forEach(t),ylo=i(S),Hg=n(S,"LI",{});var awe=s(Hg);Ane=n(awe,"STRONG",{});var JZr=s(Ane);xlo=r(JZr,"mluke"),JZr.forEach(t),$lo=r(awe," \u2014 "),dB=n(awe,"A",{href:!0});var YZr=s(dB);klo=r(YZr,"MLukeTokenizer"),YZr.forEach(t),Slo=r(awe," (mLUKE model)"),awe.forEach(t),Rlo=i(S),gs=n(S,"LI",{});var W$=s(gs);Lne=n(W$,"STRONG",{});var KZr=s(Lne);Plo=r(KZr,"mobilebert"),KZr.forEach(t),Blo=r(W$," \u2014 "),cB=n(W$,"A",{href:!0});var ZZr=s(cB);Ilo=r(ZZr,"MobileBertTokenizer"),ZZr.forEach(t),Nlo=r(W$," or "),fB=n(W$,"A",{href:!0});var eet=s(fB);qlo=r(eet,"MobileBertTokenizerFast"),eet.forEach(t),jlo=r(W$," (MobileBERT model)"),W$.forEach(t),Dlo=i(S),hs=n(S,"LI",{});var Q$=s(hs);yne=n(Q$,"STRONG",{});var oet=s(yne);Glo=r(oet,"mpnet"),oet.forEach(t),Olo=r(Q$," \u2014 "),mB=n(Q$,"A",{href:!0});var ret=s(mB);Vlo=r(ret,"MPNetTokenizer"),ret.forEach(t),Xlo=r(Q$," or "),gB=n(Q$,"A",{href:!0});var tet=s(gB);zlo=r(tet,"MPNetTokenizerFast"),tet.forEach(t),Wlo=r(Q$," (MPNet model)"),Q$.forEach(t),Qlo=i(S),ps=n(S,"LI",{});var H$=s(ps);xne=n(H$,"STRONG",{});var aet=s(xne);Hlo=r(aet,"mt5"),aet.forEach(t),Ulo=r(H$," \u2014 "),hB=n(H$,"A",{href:!0});var net=s(hB);Jlo=r(net,"MT5Tokenizer"),net.forEach(t),Ylo=r(H$," or "),pB=n(H$,"A",{href:!0});var set=s(pB);Klo=r(set,"MT5TokenizerFast"),set.forEach(t),Zlo=r(H$," (MT5 model)"),H$.forEach(t),eio=i(S),_s=n(S,"LI",{});var U$=s(_s);$ne=n(U$,"STRONG",{});var iet=s($ne);oio=r(iet,"nystromformer"),iet.forEach(t),rio=r(U$," \u2014 "),_B=n(U$,"A",{href:!0});var det=s(_B);tio=r(det,"AlbertTokenizer"),det.forEach(t),aio=r(U$," or "),uB=n(U$,"A",{href:!0});var cet=s(uB);nio=r(cet,"AlbertTokenizerFast"),cet.forEach(t),sio=r(U$," (Nystr\xF6mformer model)"),U$.forEach(t),lio=i(S),us=n(S,"LI",{});var J$=s(us);kne=n(J$,"STRONG",{});var fet=s(kne);iio=r(fet,"openai-gpt"),fet.forEach(t),dio=r(J$," \u2014 "),bB=n(J$,"A",{href:!0});var met=s(bB);cio=r(met,"OpenAIGPTTokenizer"),met.forEach(t),fio=r(J$," or "),vB=n(J$,"A",{href:!0});var get=s(vB);mio=r(get,"OpenAIGPTTokenizerFast"),get.forEach(t),gio=r(J$," (OpenAI GPT model)"),J$.forEach(t),hio=i(S),Ug=n(S,"LI",{});var nwe=s(Ug);Sne=n(nwe,"STRONG",{});var het=s(Sne);pio=r(het,"opt"),het.forEach(t),_io=r(nwe," \u2014 "),FB=n(nwe,"A",{href:!0});var pet=s(FB);uio=r(pet,"GPT2Tokenizer"),pet.forEach(t),bio=r(nwe," (OPT model)"),nwe.forEach(t),vio=i(S),bs=n(S,"LI",{});var Y$=s(bs);Rne=n(Y$,"STRONG",{});var _et=s(Rne);Fio=r(_et,"pegasus"),_et.forEach(t),Tio=r(Y$," \u2014 "),TB=n(Y$,"A",{href:!0});var uet=s(TB);Mio=r(uet,"PegasusTokenizer"),uet.forEach(t),Eio=r(Y$," or "),MB=n(Y$,"A",{href:!0});var bet=s(MB);Cio=r(bet,"PegasusTokenizerFast"),bet.forEach(t),wio=r(Y$," (Pegasus model)"),Y$.forEach(t),Aio=i(S),Jg=n(S,"LI",{});var swe=s(Jg);Pne=n(swe,"STRONG",{});var vet=s(Pne);Lio=r(vet,"perceiver"),vet.forEach(t),yio=r(swe," \u2014 "),EB=n(swe,"A",{href:!0});var Fet=s(EB);xio=r(Fet,"PerceiverTokenizer"),Fet.forEach(t),$io=r(swe," (Perceiver model)"),swe.forEach(t),kio=i(S),Yg=n(S,"LI",{});var lwe=s(Yg);Bne=n(lwe,"STRONG",{});var Tet=s(Bne);Sio=r(Tet,"phobert"),Tet.forEach(t),Rio=r(lwe," \u2014 "),CB=n(lwe,"A",{href:!0});var Met=s(CB);Pio=r(Met,"PhobertTokenizer"),Met.forEach(t),Bio=r(lwe," (PhoBERT model)"),lwe.forEach(t),Iio=i(S),Kg=n(S,"LI",{});var iwe=s(Kg);Ine=n(iwe,"STRONG",{});var Eet=s(Ine);Nio=r(Eet,"plbart"),Eet.forEach(t),qio=r(iwe," \u2014 "),wB=n(iwe,"A",{href:!0});var Cet=s(wB);jio=r(Cet,"PLBartTokenizer"),Cet.forEach(t),Dio=r(iwe," (PLBart model)"),iwe.forEach(t),Gio=i(S),Zg=n(S,"LI",{});var dwe=s(Zg);Nne=n(dwe,"STRONG",{});var wet=s(Nne);Oio=r(wet,"prophetnet"),wet.forEach(t),Vio=r(dwe," \u2014 "),AB=n(dwe,"A",{href:!0});var Aet=s(AB);Xio=r(Aet,"ProphetNetTokenizer"),Aet.forEach(t),zio=r(dwe," (ProphetNet model)"),dwe.forEach(t),Wio=i(S),vs=n(S,"LI",{});var K$=s(vs);qne=n(K$,"STRONG",{});var Let=s(qne);Qio=r(Let,"qdqbert"),Let.forEach(t),Hio=r(K$," \u2014 "),LB=n(K$,"A",{href:!0});var yet=s(LB);Uio=r(yet,"BertTokenizer"),yet.forEach(t),Jio=r(K$," or "),yB=n(K$,"A",{href:!0});var xet=s(yB);Yio=r(xet,"BertTokenizerFast"),xet.forEach(t),Kio=r(K$," (QDQBert model)"),K$.forEach(t),Zio=i(S),eh=n(S,"LI",{});var cwe=s(eh);jne=n(cwe,"STRONG",{});var $et=s(jne);edo=r($et,"rag"),$et.forEach(t),odo=r(cwe," \u2014 "),xB=n(cwe,"A",{href:!0});var ket=s(xB);rdo=r(ket,"RagTokenizer"),ket.forEach(t),tdo=r(cwe," (RAG model)"),cwe.forEach(t),ado=i(S),Fs=n(S,"LI",{});var Z$=s(Fs);Dne=n(Z$,"STRONG",{});var Set=s(Dne);ndo=r(Set,"realm"),Set.forEach(t),sdo=r(Z$," \u2014 "),$B=n(Z$,"A",{href:!0});var Ret=s($B);ldo=r(Ret,"RealmTokenizer"),Ret.forEach(t),ido=r(Z$," or "),kB=n(Z$,"A",{href:!0});var Pet=s(kB);ddo=r(Pet,"RealmTokenizerFast"),Pet.forEach(t),cdo=r(Z$," (REALM model)"),Z$.forEach(t),fdo=i(S),Ts=n(S,"LI",{});var ek=s(Ts);Gne=n(ek,"STRONG",{});var Bet=s(Gne);mdo=r(Bet,"reformer"),Bet.forEach(t),gdo=r(ek," \u2014 "),SB=n(ek,"A",{href:!0});var Iet=s(SB);hdo=r(Iet,"ReformerTokenizer"),Iet.forEach(t),pdo=r(ek," or "),RB=n(ek,"A",{href:!0});var Net=s(RB);_do=r(Net,"ReformerTokenizerFast"),Net.forEach(t),udo=r(ek," (Reformer model)"),ek.forEach(t),bdo=i(S),Ms=n(S,"LI",{});var ok=s(Ms);One=n(ok,"STRONG",{});var qet=s(One);vdo=r(qet,"rembert"),qet.forEach(t),Fdo=r(ok," \u2014 "),PB=n(ok,"A",{href:!0});var jet=s(PB);Tdo=r(jet,"RemBertTokenizer"),jet.forEach(t),Mdo=r(ok," or "),BB=n(ok,"A",{href:!0});var Det=s(BB);Edo=r(Det,"RemBertTokenizerFast"),Det.forEach(t),Cdo=r(ok," (RemBERT model)"),ok.forEach(t),wdo=i(S),Es=n(S,"LI",{});var rk=s(Es);Vne=n(rk,"STRONG",{});var Get=s(Vne);Ado=r(Get,"retribert"),Get.forEach(t),Ldo=r(rk," \u2014 "),IB=n(rk,"A",{href:!0});var Oet=s(IB);ydo=r(Oet,"RetriBertTokenizer"),Oet.forEach(t),xdo=r(rk," or "),NB=n(rk,"A",{href:!0});var Vet=s(NB);$do=r(Vet,"RetriBertTokenizerFast"),Vet.forEach(t),kdo=r(rk," (RetriBERT model)"),rk.forEach(t),Sdo=i(S),Cs=n(S,"LI",{});var tk=s(Cs);Xne=n(tk,"STRONG",{});var Xet=s(Xne);Rdo=r(Xet,"roberta"),Xet.forEach(t),Pdo=r(tk," \u2014 "),qB=n(tk,"A",{href:!0});var zet=s(qB);Bdo=r(zet,"RobertaTokenizer"),zet.forEach(t),Ido=r(tk," or "),jB=n(tk,"A",{href:!0});var Wet=s(jB);Ndo=r(Wet,"RobertaTokenizerFast"),Wet.forEach(t),qdo=r(tk," (RoBERTa model)"),tk.forEach(t),jdo=i(S),ws=n(S,"LI",{});var ak=s(ws);zne=n(ak,"STRONG",{});var Qet=s(zne);Ddo=r(Qet,"roformer"),Qet.forEach(t),Gdo=r(ak," \u2014 "),DB=n(ak,"A",{href:!0});var Het=s(DB);Odo=r(Het,"RoFormerTokenizer"),Het.forEach(t),Vdo=r(ak," or "),GB=n(ak,"A",{href:!0});var Uet=s(GB);Xdo=r(Uet,"RoFormerTokenizerFast"),Uet.forEach(t),zdo=r(ak," (RoFormer model)"),ak.forEach(t),Wdo=i(S),oh=n(S,"LI",{});var fwe=s(oh);Wne=n(fwe,"STRONG",{});var Jet=s(Wne);Qdo=r(Jet,"speech_to_text"),Jet.forEach(t),Hdo=r(fwe," \u2014 "),OB=n(fwe,"A",{href:!0});var Yet=s(OB);Udo=r(Yet,"Speech2TextTokenizer"),Yet.forEach(t),Jdo=r(fwe," (Speech2Text model)"),fwe.forEach(t),Ydo=i(S),rh=n(S,"LI",{});var mwe=s(rh);Qne=n(mwe,"STRONG",{});var Ket=s(Qne);Kdo=r(Ket,"speech_to_text_2"),Ket.forEach(t),Zdo=r(mwe," \u2014 "),VB=n(mwe,"A",{href:!0});var Zet=s(VB);eco=r(Zet,"Speech2Text2Tokenizer"),Zet.forEach(t),oco=r(mwe," (Speech2Text2 model)"),mwe.forEach(t),rco=i(S),As=n(S,"LI",{});var nk=s(As);Hne=n(nk,"STRONG",{});var eot=s(Hne);tco=r(eot,"splinter"),eot.forEach(t),aco=r(nk," \u2014 "),XB=n(nk,"A",{href:!0});var oot=s(XB);nco=r(oot,"SplinterTokenizer"),oot.forEach(t),sco=r(nk," or "),zB=n(nk,"A",{href:!0});var rot=s(zB);lco=r(rot,"SplinterTokenizerFast"),rot.forEach(t),ico=r(nk," (Splinter model)"),nk.forEach(t),dco=i(S),Ls=n(S,"LI",{});var sk=s(Ls);Une=n(sk,"STRONG",{});var tot=s(Une);cco=r(tot,"squeezebert"),tot.forEach(t),fco=r(sk," \u2014 "),WB=n(sk,"A",{href:!0});var aot=s(WB);mco=r(aot,"SqueezeBertTokenizer"),aot.forEach(t),gco=r(sk," or "),QB=n(sk,"A",{href:!0});var not=s(QB);hco=r(not,"SqueezeBertTokenizerFast"),not.forEach(t),pco=r(sk," (SqueezeBERT model)"),sk.forEach(t),_co=i(S),ys=n(S,"LI",{});var lk=s(ys);Jne=n(lk,"STRONG",{});var sot=s(Jne);uco=r(sot,"t5"),sot.forEach(t),bco=r(lk," \u2014 "),HB=n(lk,"A",{href:!0});var lot=s(HB);vco=r(lot,"T5Tokenizer"),lot.forEach(t),Fco=r(lk," or "),UB=n(lk,"A",{href:!0});var iot=s(UB);Tco=r(iot,"T5TokenizerFast"),iot.forEach(t),Mco=r(lk," (T5 model)"),lk.forEach(t),Eco=i(S),th=n(S,"LI",{});var gwe=s(th);Yne=n(gwe,"STRONG",{});var dot=s(Yne);Cco=r(dot,"tapas"),dot.forEach(t),wco=r(gwe," \u2014 "),JB=n(gwe,"A",{href:!0});var cot=s(JB);Aco=r(cot,"TapasTokenizer"),cot.forEach(t),Lco=r(gwe," (TAPAS model)"),gwe.forEach(t),yco=i(S),ah=n(S,"LI",{});var hwe=s(ah);Kne=n(hwe,"STRONG",{});var fot=s(Kne);xco=r(fot,"tapex"),fot.forEach(t),$co=r(hwe," \u2014 "),YB=n(hwe,"A",{href:!0});var mot=s(YB);kco=r(mot,"TapexTokenizer"),mot.forEach(t),Sco=r(hwe," (TAPEX model)"),hwe.forEach(t),Rco=i(S),nh=n(S,"LI",{});var pwe=s(nh);Zne=n(pwe,"STRONG",{});var got=s(Zne);Pco=r(got,"transfo-xl"),got.forEach(t),Bco=r(pwe," \u2014 "),KB=n(pwe,"A",{href:!0});var hot=s(KB);Ico=r(hot,"TransfoXLTokenizer"),hot.forEach(t),Nco=r(pwe," (Transformer-XL model)"),pwe.forEach(t),qco=i(S),xs=n(S,"LI",{});var ik=s(xs);ese=n(ik,"STRONG",{});var pot=s(ese);jco=r(pot,"visual_bert"),pot.forEach(t),Dco=r(ik," \u2014 "),ZB=n(ik,"A",{href:!0});var _ot=s(ZB);Gco=r(_ot,"BertTokenizer"),_ot.forEach(t),Oco=r(ik," or "),eI=n(ik,"A",{href:!0});var uot=s(eI);Vco=r(uot,"BertTokenizerFast"),uot.forEach(t),Xco=r(ik," (VisualBERT model)"),ik.forEach(t),zco=i(S),sh=n(S,"LI",{});var _we=s(sh);ose=n(_we,"STRONG",{});var bot=s(ose);Wco=r(bot,"wav2vec2"),bot.forEach(t),Qco=r(_we," \u2014 "),oI=n(_we,"A",{href:!0});var vot=s(oI);Hco=r(vot,"Wav2Vec2CTCTokenizer"),vot.forEach(t),Uco=r(_we," (Wav2Vec2 model)"),_we.forEach(t),Jco=i(S),lh=n(S,"LI",{});var uwe=s(lh);rse=n(uwe,"STRONG",{});var Fot=s(rse);Yco=r(Fot,"wav2vec2-conformer"),Fot.forEach(t),Kco=r(uwe," \u2014 "),rI=n(uwe,"A",{href:!0});var Tot=s(rI);Zco=r(Tot,"Wav2Vec2CTCTokenizer"),Tot.forEach(t),efo=r(uwe," (Wav2Vec2-Conformer model)"),uwe.forEach(t),ofo=i(S),ih=n(S,"LI",{});var bwe=s(ih);tse=n(bwe,"STRONG",{});var Mot=s(tse);rfo=r(Mot,"wav2vec2_phoneme"),Mot.forEach(t),tfo=r(bwe," \u2014 "),tI=n(bwe,"A",{href:!0});var Eot=s(tI);afo=r(Eot,"Wav2Vec2PhonemeCTCTokenizer"),Eot.forEach(t),nfo=r(bwe," (Wav2Vec2Phoneme model)"),bwe.forEach(t),sfo=i(S),$s=n(S,"LI",{});var dk=s($s);ase=n(dk,"STRONG",{});var Cot=s(ase);lfo=r(Cot,"xglm"),Cot.forEach(t),ifo=r(dk," \u2014 "),aI=n(dk,"A",{href:!0});var wot=s(aI);dfo=r(wot,"XGLMTokenizer"),wot.forEach(t),cfo=r(dk," or "),nI=n(dk,"A",{href:!0});var Aot=s(nI);ffo=r(Aot,"XGLMTokenizerFast"),Aot.forEach(t),mfo=r(dk," (XGLM model)"),dk.forEach(t),gfo=i(S),dh=n(S,"LI",{});var vwe=s(dh);nse=n(vwe,"STRONG",{});var Lot=s(nse);hfo=r(Lot,"xlm"),Lot.forEach(t),pfo=r(vwe," \u2014 "),sI=n(vwe,"A",{href:!0});var yot=s(sI);_fo=r(yot,"XLMTokenizer"),yot.forEach(t),ufo=r(vwe," (XLM model)"),vwe.forEach(t),bfo=i(S),ch=n(S,"LI",{});var Fwe=s(ch);sse=n(Fwe,"STRONG",{});var xot=s(sse);vfo=r(xot,"xlm-prophetnet"),xot.forEach(t),Ffo=r(Fwe," \u2014 "),lI=n(Fwe,"A",{href:!0});var $ot=s(lI);Tfo=r($ot,"XLMProphetNetTokenizer"),$ot.forEach(t),Mfo=r(Fwe," (XLM-ProphetNet model)"),Fwe.forEach(t),Efo=i(S),ks=n(S,"LI",{});var ck=s(ks);lse=n(ck,"STRONG",{});var kot=s(lse);Cfo=r(kot,"xlm-roberta"),kot.forEach(t),wfo=r(ck," \u2014 "),iI=n(ck,"A",{href:!0});var Sot=s(iI);Afo=r(Sot,"XLMRobertaTokenizer"),Sot.forEach(t),Lfo=r(ck," or "),dI=n(ck,"A",{href:!0});var Rot=s(dI);yfo=r(Rot,"XLMRobertaTokenizerFast"),Rot.forEach(t),xfo=r(ck," (XLM-RoBERTa model)"),ck.forEach(t),$fo=i(S),Ss=n(S,"LI",{});var fk=s(Ss);ise=n(fk,"STRONG",{});var Pot=s(ise);kfo=r(Pot,"xlm-roberta-xl"),Pot.forEach(t),Sfo=r(fk," \u2014 "),cI=n(fk,"A",{href:!0});var Bot=s(cI);Rfo=r(Bot,"RobertaTokenizer"),Bot.forEach(t),Pfo=r(fk," or "),fI=n(fk,"A",{href:!0});var Iot=s(fI);Bfo=r(Iot,"RobertaTokenizerFast"),Iot.forEach(t),Ifo=r(fk," (XLM-RoBERTa-XL model)"),fk.forEach(t),Nfo=i(S),Rs=n(S,"LI",{});var mk=s(Rs);dse=n(mk,"STRONG",{});var Not=s(dse);qfo=r(Not,"xlnet"),Not.forEach(t),jfo=r(mk," \u2014 "),mI=n(mk,"A",{href:!0});var qot=s(mI);Dfo=r(qot,"XLNetTokenizer"),qot.forEach(t),Gfo=r(mk," or "),gI=n(mk,"A",{href:!0});var jot=s(gI);Ofo=r(jot,"XLNetTokenizerFast"),jot.forEach(t),Vfo=r(mk," (XLNet model)"),mk.forEach(t),Xfo=i(S),Ps=n(S,"LI",{});var gk=s(Ps);cse=n(gk,"STRONG",{});var Dot=s(cse);zfo=r(Dot,"yoso"),Dot.forEach(t),Wfo=r(gk," \u2014 "),hI=n(gk,"A",{href:!0});var Got=s(hI);Qfo=r(Got,"AlbertTokenizer"),Got.forEach(t),Hfo=r(gk," or "),pI=n(gk,"A",{href:!0});var Oot=s(pI);Ufo=r(Oot,"AlbertTokenizerFast"),Oot.forEach(t),Jfo=r(gk," (YOSO model)"),gk.forEach(t),S.forEach(t),Yfo=i(Ds),T(fh.$$.fragment,Ds),Ds.forEach(t),Kfo=i(js),mh=n(js,"DIV",{class:!0});var eOe=s(mh);T(fA.$$.fragment,eOe),Zfo=i(eOe),fse=n(eOe,"P",{});var Vot=s(fse);emo=r(Vot,"Register a new tokenizer in this mapping."),Vot.forEach(t),eOe.forEach(t),js.forEach(t),oDe=i(f),Ci=n(f,"H2",{class:!0});var oOe=s(Ci);gh=n(oOe,"A",{id:!0,class:!0,href:!0});var Xot=s(gh);mse=n(Xot,"SPAN",{});var zot=s(mse);T(mA.$$.fragment,zot),zot.forEach(t),Xot.forEach(t),omo=i(oOe),gse=n(oOe,"SPAN",{});var Wot=s(gse);rmo=r(Wot,"AutoFeatureExtractor"),Wot.forEach(t),oOe.forEach(t),rDe=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(gA.$$.fragment,Gs),tmo=i(Gs),hA=n(Gs,"P",{});var rOe=s(hA);amo=r(rOe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_I=n(rOe,"A",{href:!0});var Qot=s(_I);nmo=r(Qot,"AutoFeatureExtractor.from_pretrained()"),Qot.forEach(t),smo=r(rOe," class method."),rOe.forEach(t),lmo=i(Gs),pA=n(Gs,"P",{});var tOe=s(pA);imo=r(tOe,"This class cannot be instantiated directly using "),hse=n(tOe,"CODE",{});var Hot=s(hse);dmo=r(Hot,"__init__()"),Hot.forEach(t),cmo=r(tOe," (throws an error)."),tOe.forEach(t),fmo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(_A.$$.fragment,Zt),mmo=i(Zt),pse=n(Zt,"P",{});var Uot=s(pse);gmo=r(Uot,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uot.forEach(t),hmo=i(Zt),La=n(Zt,"P",{});var o0=s(La);pmo=r(o0,"The feature extractor class to instantiate is selected based on the "),_se=n(o0,"CODE",{});var Jot=s(_se);_mo=r(Jot,"model_type"),Jot.forEach(t),umo=r(o0,` property of the config object
(either passed as an argument or loaded from `),use=n(o0,"CODE",{});var Yot=s(use);bmo=r(Yot,"pretrained_model_name_or_path"),Yot.forEach(t),vmo=r(o0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bse=n(o0,"CODE",{});var Kot=s(bse);Fmo=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),Tmo=r(o0,":"),o0.forEach(t),Mmo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);hh=n(K,"LI",{});var Twe=s(hh);vse=n(Twe,"STRONG",{});var Zot=s(vse);Emo=r(Zot,"beit"),Zot.forEach(t),Cmo=r(Twe," \u2014 "),uI=n(Twe,"A",{href:!0});var ert=s(uI);wmo=r(ert,"BeitFeatureExtractor"),ert.forEach(t),Amo=r(Twe," (BEiT model)"),Twe.forEach(t),Lmo=i(K),ph=n(K,"LI",{});var Mwe=s(ph);Fse=n(Mwe,"STRONG",{});var ort=s(Fse);ymo=r(ort,"clip"),ort.forEach(t),xmo=r(Mwe," \u2014 "),bI=n(Mwe,"A",{href:!0});var rrt=s(bI);$mo=r(rrt,"CLIPFeatureExtractor"),rrt.forEach(t),kmo=r(Mwe," (CLIP model)"),Mwe.forEach(t),Smo=i(K),_h=n(K,"LI",{});var Ewe=s(_h);Tse=n(Ewe,"STRONG",{});var trt=s(Tse);Rmo=r(trt,"convnext"),trt.forEach(t),Pmo=r(Ewe," \u2014 "),vI=n(Ewe,"A",{href:!0});var art=s(vI);Bmo=r(art,"ConvNextFeatureExtractor"),art.forEach(t),Imo=r(Ewe," (ConvNeXT model)"),Ewe.forEach(t),Nmo=i(K),uh=n(K,"LI",{});var Cwe=s(uh);Mse=n(Cwe,"STRONG",{});var nrt=s(Mse);qmo=r(nrt,"cvt"),nrt.forEach(t),jmo=r(Cwe," \u2014 "),FI=n(Cwe,"A",{href:!0});var srt=s(FI);Dmo=r(srt,"ConvNextFeatureExtractor"),srt.forEach(t),Gmo=r(Cwe," (CvT model)"),Cwe.forEach(t),Omo=i(K),bh=n(K,"LI",{});var wwe=s(bh);Ese=n(wwe,"STRONG",{});var lrt=s(Ese);Vmo=r(lrt,"data2vec-audio"),lrt.forEach(t),Xmo=r(wwe," \u2014 "),TI=n(wwe,"A",{href:!0});var irt=s(TI);zmo=r(irt,"Wav2Vec2FeatureExtractor"),irt.forEach(t),Wmo=r(wwe," (Data2VecAudio model)"),wwe.forEach(t),Qmo=i(K),vh=n(K,"LI",{});var Awe=s(vh);Cse=n(Awe,"STRONG",{});var drt=s(Cse);Hmo=r(drt,"data2vec-vision"),drt.forEach(t),Umo=r(Awe," \u2014 "),MI=n(Awe,"A",{href:!0});var crt=s(MI);Jmo=r(crt,"BeitFeatureExtractor"),crt.forEach(t),Ymo=r(Awe," (Data2VecVision model)"),Awe.forEach(t),Kmo=i(K),Fh=n(K,"LI",{});var Lwe=s(Fh);wse=n(Lwe,"STRONG",{});var frt=s(wse);Zmo=r(frt,"deit"),frt.forEach(t),ego=r(Lwe," \u2014 "),EI=n(Lwe,"A",{href:!0});var mrt=s(EI);ogo=r(mrt,"DeiTFeatureExtractor"),mrt.forEach(t),rgo=r(Lwe," (DeiT model)"),Lwe.forEach(t),tgo=i(K),Th=n(K,"LI",{});var ywe=s(Th);Ase=n(ywe,"STRONG",{});var grt=s(Ase);ago=r(grt,"detr"),grt.forEach(t),ngo=r(ywe," \u2014 "),CI=n(ywe,"A",{href:!0});var hrt=s(CI);sgo=r(hrt,"DetrFeatureExtractor"),hrt.forEach(t),lgo=r(ywe," (DETR model)"),ywe.forEach(t),igo=i(K),Mh=n(K,"LI",{});var xwe=s(Mh);Lse=n(xwe,"STRONG",{});var prt=s(Lse);dgo=r(prt,"dpt"),prt.forEach(t),cgo=r(xwe," \u2014 "),wI=n(xwe,"A",{href:!0});var _rt=s(wI);fgo=r(_rt,"DPTFeatureExtractor"),_rt.forEach(t),mgo=r(xwe," (DPT model)"),xwe.forEach(t),ggo=i(K),Eh=n(K,"LI",{});var $we=s(Eh);yse=n($we,"STRONG",{});var urt=s(yse);hgo=r(urt,"flava"),urt.forEach(t),pgo=r($we," \u2014 "),AI=n($we,"A",{href:!0});var brt=s(AI);_go=r(brt,"FlavaFeatureExtractor"),brt.forEach(t),ugo=r($we," (FLAVA model)"),$we.forEach(t),bgo=i(K),Ch=n(K,"LI",{});var kwe=s(Ch);xse=n(kwe,"STRONG",{});var vrt=s(xse);vgo=r(vrt,"glpn"),vrt.forEach(t),Fgo=r(kwe," \u2014 "),LI=n(kwe,"A",{href:!0});var Frt=s(LI);Tgo=r(Frt,"GLPNFeatureExtractor"),Frt.forEach(t),Mgo=r(kwe," (GLPN model)"),kwe.forEach(t),Ego=i(K),wh=n(K,"LI",{});var Swe=s(wh);$se=n(Swe,"STRONG",{});var Trt=s($se);Cgo=r(Trt,"hubert"),Trt.forEach(t),wgo=r(Swe," \u2014 "),yI=n(Swe,"A",{href:!0});var Mrt=s(yI);Ago=r(Mrt,"Wav2Vec2FeatureExtractor"),Mrt.forEach(t),Lgo=r(Swe," (Hubert model)"),Swe.forEach(t),ygo=i(K),Ah=n(K,"LI",{});var Rwe=s(Ah);kse=n(Rwe,"STRONG",{});var Ert=s(kse);xgo=r(Ert,"imagegpt"),Ert.forEach(t),$go=r(Rwe," \u2014 "),xI=n(Rwe,"A",{href:!0});var Crt=s(xI);kgo=r(Crt,"ImageGPTFeatureExtractor"),Crt.forEach(t),Sgo=r(Rwe," (ImageGPT model)"),Rwe.forEach(t),Rgo=i(K),Lh=n(K,"LI",{});var Pwe=s(Lh);Sse=n(Pwe,"STRONG",{});var wrt=s(Sse);Pgo=r(wrt,"layoutlmv2"),wrt.forEach(t),Bgo=r(Pwe," \u2014 "),$I=n(Pwe,"A",{href:!0});var Art=s($I);Igo=r(Art,"LayoutLMv2FeatureExtractor"),Art.forEach(t),Ngo=r(Pwe," (LayoutLMv2 model)"),Pwe.forEach(t),qgo=i(K),yh=n(K,"LI",{});var Bwe=s(yh);Rse=n(Bwe,"STRONG",{});var Lrt=s(Rse);jgo=r(Lrt,"layoutlmv3"),Lrt.forEach(t),Dgo=r(Bwe," \u2014 "),kI=n(Bwe,"A",{href:!0});var yrt=s(kI);Ggo=r(yrt,"LayoutLMv3FeatureExtractor"),yrt.forEach(t),Ogo=r(Bwe," (LayoutLMv3 model)"),Bwe.forEach(t),Vgo=i(K),xh=n(K,"LI",{});var Iwe=s(xh);Pse=n(Iwe,"STRONG",{});var xrt=s(Pse);Xgo=r(xrt,"levit"),xrt.forEach(t),zgo=r(Iwe," \u2014 "),SI=n(Iwe,"A",{href:!0});var $rt=s(SI);Wgo=r($rt,"LevitFeatureExtractor"),$rt.forEach(t),Qgo=r(Iwe," (LeViT model)"),Iwe.forEach(t),Hgo=i(K),$h=n(K,"LI",{});var Nwe=s($h);Bse=n(Nwe,"STRONG",{});var krt=s(Bse);Ugo=r(krt,"maskformer"),krt.forEach(t),Jgo=r(Nwe," \u2014 "),RI=n(Nwe,"A",{href:!0});var Srt=s(RI);Ygo=r(Srt,"MaskFormerFeatureExtractor"),Srt.forEach(t),Kgo=r(Nwe," (MaskFormer model)"),Nwe.forEach(t),Zgo=i(K),kh=n(K,"LI",{});var qwe=s(kh);Ise=n(qwe,"STRONG",{});var Rrt=s(Ise);eho=r(Rrt,"mctct"),Rrt.forEach(t),oho=r(qwe," \u2014 "),PI=n(qwe,"A",{href:!0});var Prt=s(PI);rho=r(Prt,"MCTCTFeatureExtractor"),Prt.forEach(t),tho=r(qwe," (M-CTC-T model)"),qwe.forEach(t),aho=i(K),Sh=n(K,"LI",{});var jwe=s(Sh);Nse=n(jwe,"STRONG",{});var Brt=s(Nse);nho=r(Brt,"perceiver"),Brt.forEach(t),sho=r(jwe," \u2014 "),BI=n(jwe,"A",{href:!0});var Irt=s(BI);lho=r(Irt,"PerceiverFeatureExtractor"),Irt.forEach(t),iho=r(jwe," (Perceiver model)"),jwe.forEach(t),dho=i(K),Rh=n(K,"LI",{});var Dwe=s(Rh);qse=n(Dwe,"STRONG",{});var Nrt=s(qse);cho=r(Nrt,"poolformer"),Nrt.forEach(t),fho=r(Dwe," \u2014 "),II=n(Dwe,"A",{href:!0});var qrt=s(II);mho=r(qrt,"PoolFormerFeatureExtractor"),qrt.forEach(t),gho=r(Dwe," (PoolFormer model)"),Dwe.forEach(t),hho=i(K),Ph=n(K,"LI",{});var Gwe=s(Ph);jse=n(Gwe,"STRONG",{});var jrt=s(jse);pho=r(jrt,"regnet"),jrt.forEach(t),_ho=r(Gwe," \u2014 "),NI=n(Gwe,"A",{href:!0});var Drt=s(NI);uho=r(Drt,"ConvNextFeatureExtractor"),Drt.forEach(t),bho=r(Gwe," (RegNet model)"),Gwe.forEach(t),vho=i(K),Bh=n(K,"LI",{});var Owe=s(Bh);Dse=n(Owe,"STRONG",{});var Grt=s(Dse);Fho=r(Grt,"resnet"),Grt.forEach(t),Tho=r(Owe," \u2014 "),qI=n(Owe,"A",{href:!0});var Ort=s(qI);Mho=r(Ort,"ConvNextFeatureExtractor"),Ort.forEach(t),Eho=r(Owe," (ResNet model)"),Owe.forEach(t),Cho=i(K),Ih=n(K,"LI",{});var Vwe=s(Ih);Gse=n(Vwe,"STRONG",{});var Vrt=s(Gse);who=r(Vrt,"segformer"),Vrt.forEach(t),Aho=r(Vwe," \u2014 "),jI=n(Vwe,"A",{href:!0});var Xrt=s(jI);Lho=r(Xrt,"SegformerFeatureExtractor"),Xrt.forEach(t),yho=r(Vwe," (SegFormer model)"),Vwe.forEach(t),xho=i(K),Nh=n(K,"LI",{});var Xwe=s(Nh);Ose=n(Xwe,"STRONG",{});var zrt=s(Ose);$ho=r(zrt,"speech_to_text"),zrt.forEach(t),kho=r(Xwe," \u2014 "),DI=n(Xwe,"A",{href:!0});var Wrt=s(DI);Sho=r(Wrt,"Speech2TextFeatureExtractor"),Wrt.forEach(t),Rho=r(Xwe," (Speech2Text model)"),Xwe.forEach(t),Pho=i(K),qh=n(K,"LI",{});var zwe=s(qh);Vse=n(zwe,"STRONG",{});var Qrt=s(Vse);Bho=r(Qrt,"swin"),Qrt.forEach(t),Iho=r(zwe," \u2014 "),GI=n(zwe,"A",{href:!0});var Hrt=s(GI);Nho=r(Hrt,"ViTFeatureExtractor"),Hrt.forEach(t),qho=r(zwe," (Swin Transformer model)"),zwe.forEach(t),jho=i(K),jh=n(K,"LI",{});var Wwe=s(jh);Xse=n(Wwe,"STRONG",{});var Urt=s(Xse);Dho=r(Urt,"van"),Urt.forEach(t),Gho=r(Wwe," \u2014 "),OI=n(Wwe,"A",{href:!0});var Jrt=s(OI);Oho=r(Jrt,"ConvNextFeatureExtractor"),Jrt.forEach(t),Vho=r(Wwe," (VAN model)"),Wwe.forEach(t),Xho=i(K),Dh=n(K,"LI",{});var Qwe=s(Dh);zse=n(Qwe,"STRONG",{});var Yrt=s(zse);zho=r(Yrt,"vit"),Yrt.forEach(t),Who=r(Qwe," \u2014 "),VI=n(Qwe,"A",{href:!0});var Krt=s(VI);Qho=r(Krt,"ViTFeatureExtractor"),Krt.forEach(t),Hho=r(Qwe," (ViT model)"),Qwe.forEach(t),Uho=i(K),Gh=n(K,"LI",{});var Hwe=s(Gh);Wse=n(Hwe,"STRONG",{});var Zrt=s(Wse);Jho=r(Zrt,"vit_mae"),Zrt.forEach(t),Yho=r(Hwe," \u2014 "),XI=n(Hwe,"A",{href:!0});var ett=s(XI);Kho=r(ett,"ViTFeatureExtractor"),ett.forEach(t),Zho=r(Hwe," (ViTMAE model)"),Hwe.forEach(t),epo=i(K),Oh=n(K,"LI",{});var Uwe=s(Oh);Qse=n(Uwe,"STRONG",{});var ott=s(Qse);opo=r(ott,"wav2vec2"),ott.forEach(t),rpo=r(Uwe," \u2014 "),zI=n(Uwe,"A",{href:!0});var rtt=s(zI);tpo=r(rtt,"Wav2Vec2FeatureExtractor"),rtt.forEach(t),apo=r(Uwe," (Wav2Vec2 model)"),Uwe.forEach(t),npo=i(K),Vh=n(K,"LI",{});var Jwe=s(Vh);Hse=n(Jwe,"STRONG",{});var ttt=s(Hse);spo=r(ttt,"wav2vec2-conformer"),ttt.forEach(t),lpo=r(Jwe," \u2014 "),WI=n(Jwe,"A",{href:!0});var att=s(WI);ipo=r(att,"Wav2Vec2FeatureExtractor"),att.forEach(t),dpo=r(Jwe," (Wav2Vec2-Conformer model)"),Jwe.forEach(t),cpo=i(K),Xh=n(K,"LI",{});var Ywe=s(Xh);Use=n(Ywe,"STRONG",{});var ntt=s(Use);fpo=r(ntt,"yolos"),ntt.forEach(t),mpo=r(Ywe," \u2014 "),QI=n(Ywe,"A",{href:!0});var stt=s(QI);gpo=r(stt,"YolosFeatureExtractor"),stt.forEach(t),hpo=r(Ywe," (YOLOS model)"),Ywe.forEach(t),K.forEach(t),ppo=i(Zt),T(zh.$$.fragment,Zt),_po=i(Zt),T(Wh.$$.fragment,Zt),Zt.forEach(t),upo=i(Gs),Qh=n(Gs,"DIV",{class:!0});var aOe=s(Qh);T(uA.$$.fragment,aOe),bpo=i(aOe),Jse=n(aOe,"P",{});var ltt=s(Jse);vpo=r(ltt,"Register a new feature extractor for this class."),ltt.forEach(t),aOe.forEach(t),Gs.forEach(t),tDe=i(f),wi=n(f,"H2",{class:!0});var nOe=s(wi);Hh=n(nOe,"A",{id:!0,class:!0,href:!0});var itt=s(Hh);Yse=n(itt,"SPAN",{});var dtt=s(Yse);T(bA.$$.fragment,dtt),dtt.forEach(t),itt.forEach(t),Fpo=i(nOe),Kse=n(nOe,"SPAN",{});var ctt=s(Kse);Tpo=r(ctt,"AutoProcessor"),ctt.forEach(t),nOe.forEach(t),aDe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(vA.$$.fragment,Os),Mpo=i(Os),FA=n(Os,"P",{});var sOe=s(FA);Epo=r(sOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HI=n(sOe,"A",{href:!0});var ftt=s(HI);Cpo=r(ftt,"AutoProcessor.from_pretrained()"),ftt.forEach(t),wpo=r(sOe," class method."),sOe.forEach(t),Apo=i(Os),TA=n(Os,"P",{});var lOe=s(TA);Lpo=r(lOe,"This class cannot be instantiated directly using "),Zse=n(lOe,"CODE",{});var mtt=s(Zse);ypo=r(mtt,"__init__()"),mtt.forEach(t),xpo=r(lOe," (throws an error)."),lOe.forEach(t),$po=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(MA.$$.fragment,ea),kpo=i(ea),ele=n(ea,"P",{});var gtt=s(ele);Spo=r(gtt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gtt.forEach(t),Rpo=i(ea),Ai=n(ea,"P",{});var hee=s(Ai);Ppo=r(hee,"The processor class to instantiate is selected based on the "),ole=n(hee,"CODE",{});var htt=s(ole);Bpo=r(htt,"model_type"),htt.forEach(t),Ipo=r(hee,` property of the config object (either
passed as an argument or loaded from `),rle=n(hee,"CODE",{});var ptt=s(rle);Npo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),qpo=r(hee," if possible):"),hee.forEach(t),jpo=i(ea),he=n(ea,"UL",{});var ue=s(he);Uh=n(ue,"LI",{});var Kwe=s(Uh);tle=n(Kwe,"STRONG",{});var _tt=s(tle);Dpo=r(_tt,"clip"),_tt.forEach(t),Gpo=r(Kwe," \u2014 "),UI=n(Kwe,"A",{href:!0});var utt=s(UI);Opo=r(utt,"CLIPProcessor"),utt.forEach(t),Vpo=r(Kwe," (CLIP model)"),Kwe.forEach(t),Xpo=i(ue),Jh=n(ue,"LI",{});var Zwe=s(Jh);ale=n(Zwe,"STRONG",{});var btt=s(ale);zpo=r(btt,"flava"),btt.forEach(t),Wpo=r(Zwe," \u2014 "),nle=n(Zwe,"CODE",{});var vtt=s(nle);Qpo=r(vtt,"FLAVAProcessor"),vtt.forEach(t),Hpo=r(Zwe," (FLAVA model)"),Zwe.forEach(t),Upo=i(ue),Yh=n(ue,"LI",{});var eAe=s(Yh);sle=n(eAe,"STRONG",{});var Ftt=s(sle);Jpo=r(Ftt,"layoutlmv2"),Ftt.forEach(t),Ypo=r(eAe," \u2014 "),JI=n(eAe,"A",{href:!0});var Ttt=s(JI);Kpo=r(Ttt,"LayoutLMv2Processor"),Ttt.forEach(t),Zpo=r(eAe," (LayoutLMv2 model)"),eAe.forEach(t),e_o=i(ue),Kh=n(ue,"LI",{});var oAe=s(Kh);lle=n(oAe,"STRONG",{});var Mtt=s(lle);o_o=r(Mtt,"layoutlmv3"),Mtt.forEach(t),r_o=r(oAe," \u2014 "),YI=n(oAe,"A",{href:!0});var Ett=s(YI);t_o=r(Ett,"LayoutLMv3Processor"),Ett.forEach(t),a_o=r(oAe," (LayoutLMv3 model)"),oAe.forEach(t),n_o=i(ue),Zh=n(ue,"LI",{});var rAe=s(Zh);ile=n(rAe,"STRONG",{});var Ctt=s(ile);s_o=r(Ctt,"layoutxlm"),Ctt.forEach(t),l_o=r(rAe," \u2014 "),KI=n(rAe,"A",{href:!0});var wtt=s(KI);i_o=r(wtt,"LayoutXLMProcessor"),wtt.forEach(t),d_o=r(rAe," (LayoutXLM model)"),rAe.forEach(t),c_o=i(ue),ep=n(ue,"LI",{});var tAe=s(ep);dle=n(tAe,"STRONG",{});var Att=s(dle);f_o=r(Att,"sew"),Att.forEach(t),m_o=r(tAe," \u2014 "),ZI=n(tAe,"A",{href:!0});var Ltt=s(ZI);g_o=r(Ltt,"Wav2Vec2Processor"),Ltt.forEach(t),h_o=r(tAe," (SEW model)"),tAe.forEach(t),p_o=i(ue),op=n(ue,"LI",{});var aAe=s(op);cle=n(aAe,"STRONG",{});var ytt=s(cle);__o=r(ytt,"sew-d"),ytt.forEach(t),u_o=r(aAe," \u2014 "),eN=n(aAe,"A",{href:!0});var xtt=s(eN);b_o=r(xtt,"Wav2Vec2Processor"),xtt.forEach(t),v_o=r(aAe," (SEW-D model)"),aAe.forEach(t),F_o=i(ue),rp=n(ue,"LI",{});var nAe=s(rp);fle=n(nAe,"STRONG",{});var $tt=s(fle);T_o=r($tt,"speech_to_text"),$tt.forEach(t),M_o=r(nAe," \u2014 "),oN=n(nAe,"A",{href:!0});var ktt=s(oN);E_o=r(ktt,"Speech2TextProcessor"),ktt.forEach(t),C_o=r(nAe," (Speech2Text model)"),nAe.forEach(t),w_o=i(ue),tp=n(ue,"LI",{});var sAe=s(tp);mle=n(sAe,"STRONG",{});var Stt=s(mle);A_o=r(Stt,"speech_to_text_2"),Stt.forEach(t),L_o=r(sAe," \u2014 "),rN=n(sAe,"A",{href:!0});var Rtt=s(rN);y_o=r(Rtt,"Speech2Text2Processor"),Rtt.forEach(t),x_o=r(sAe," (Speech2Text2 model)"),sAe.forEach(t),$_o=i(ue),ap=n(ue,"LI",{});var lAe=s(ap);gle=n(lAe,"STRONG",{});var Ptt=s(gle);k_o=r(Ptt,"trocr"),Ptt.forEach(t),S_o=r(lAe," \u2014 "),tN=n(lAe,"A",{href:!0});var Btt=s(tN);R_o=r(Btt,"TrOCRProcessor"),Btt.forEach(t),P_o=r(lAe," (TrOCR model)"),lAe.forEach(t),B_o=i(ue),np=n(ue,"LI",{});var iAe=s(np);hle=n(iAe,"STRONG",{});var Itt=s(hle);I_o=r(Itt,"unispeech"),Itt.forEach(t),N_o=r(iAe," \u2014 "),aN=n(iAe,"A",{href:!0});var Ntt=s(aN);q_o=r(Ntt,"Wav2Vec2Processor"),Ntt.forEach(t),j_o=r(iAe," (UniSpeech model)"),iAe.forEach(t),D_o=i(ue),sp=n(ue,"LI",{});var dAe=s(sp);ple=n(dAe,"STRONG",{});var qtt=s(ple);G_o=r(qtt,"unispeech-sat"),qtt.forEach(t),O_o=r(dAe," \u2014 "),nN=n(dAe,"A",{href:!0});var jtt=s(nN);V_o=r(jtt,"Wav2Vec2Processor"),jtt.forEach(t),X_o=r(dAe," (UniSpeechSat model)"),dAe.forEach(t),z_o=i(ue),lp=n(ue,"LI",{});var cAe=s(lp);_le=n(cAe,"STRONG",{});var Dtt=s(_le);W_o=r(Dtt,"vilt"),Dtt.forEach(t),Q_o=r(cAe," \u2014 "),sN=n(cAe,"A",{href:!0});var Gtt=s(sN);H_o=r(Gtt,"ViltProcessor"),Gtt.forEach(t),U_o=r(cAe," (ViLT model)"),cAe.forEach(t),J_o=i(ue),ip=n(ue,"LI",{});var fAe=s(ip);ule=n(fAe,"STRONG",{});var Ott=s(ule);Y_o=r(Ott,"vision-text-dual-encoder"),Ott.forEach(t),K_o=r(fAe," \u2014 "),lN=n(fAe,"A",{href:!0});var Vtt=s(lN);Z_o=r(Vtt,"VisionTextDualEncoderProcessor"),Vtt.forEach(t),euo=r(fAe," (VisionTextDualEncoder model)"),fAe.forEach(t),ouo=i(ue),dp=n(ue,"LI",{});var mAe=s(dp);ble=n(mAe,"STRONG",{});var Xtt=s(ble);ruo=r(Xtt,"wav2vec2"),Xtt.forEach(t),tuo=r(mAe," \u2014 "),iN=n(mAe,"A",{href:!0});var ztt=s(iN);auo=r(ztt,"Wav2Vec2Processor"),ztt.forEach(t),nuo=r(mAe," (Wav2Vec2 model)"),mAe.forEach(t),suo=i(ue),cp=n(ue,"LI",{});var gAe=s(cp);vle=n(gAe,"STRONG",{});var Wtt=s(vle);luo=r(Wtt,"wav2vec2-conformer"),Wtt.forEach(t),iuo=r(gAe," \u2014 "),dN=n(gAe,"A",{href:!0});var Qtt=s(dN);duo=r(Qtt,"Wav2Vec2Processor"),Qtt.forEach(t),cuo=r(gAe," (Wav2Vec2-Conformer model)"),gAe.forEach(t),fuo=i(ue),fp=n(ue,"LI",{});var hAe=s(fp);Fle=n(hAe,"STRONG",{});var Htt=s(Fle);muo=r(Htt,"wavlm"),Htt.forEach(t),guo=r(hAe," \u2014 "),cN=n(hAe,"A",{href:!0});var Utt=s(cN);huo=r(Utt,"Wav2Vec2Processor"),Utt.forEach(t),puo=r(hAe," (WavLM model)"),hAe.forEach(t),ue.forEach(t),_uo=i(ea),T(mp.$$.fragment,ea),uuo=i(ea),T(gp.$$.fragment,ea),ea.forEach(t),buo=i(Os),hp=n(Os,"DIV",{class:!0});var iOe=s(hp);T(EA.$$.fragment,iOe),vuo=i(iOe),Tle=n(iOe,"P",{});var Jtt=s(Tle);Fuo=r(Jtt,"Register a new processor for this class."),Jtt.forEach(t),iOe.forEach(t),Os.forEach(t),nDe=i(f),Li=n(f,"H2",{class:!0});var dOe=s(Li);pp=n(dOe,"A",{id:!0,class:!0,href:!0});var Ytt=s(pp);Mle=n(Ytt,"SPAN",{});var Ktt=s(Mle);T(CA.$$.fragment,Ktt),Ktt.forEach(t),Ytt.forEach(t),Tuo=i(dOe),Ele=n(dOe,"SPAN",{});var Ztt=s(Ele);Muo=r(Ztt,"AutoModel"),Ztt.forEach(t),dOe.forEach(t),sDe=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(wA.$$.fragment,Vs),Euo=i(Vs),yi=n(Vs,"P",{});var pee=s(yi);Cuo=r(pee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fN=n(pee,"A",{href:!0});var eat=s(fN);wuo=r(eat,"from_pretrained()"),eat.forEach(t),Auo=r(pee," class method or the "),mN=n(pee,"A",{href:!0});var oat=s(mN);Luo=r(oat,"from_config()"),oat.forEach(t),yuo=r(pee,` class
method.`),pee.forEach(t),xuo=i(Vs),AA=n(Vs,"P",{});var cOe=s(AA);$uo=r(cOe,"This class cannot be instantiated directly using "),Cle=n(cOe,"CODE",{});var rat=s(Cle);kuo=r(rat,"__init__()"),rat.forEach(t),Suo=r(cOe," (throws an error)."),cOe.forEach(t),Ruo=i(Vs),tt=n(Vs,"DIV",{class:!0});var r0=s(tt);T(LA.$$.fragment,r0),Puo=i(r0),wle=n(r0,"P",{});var tat=s(wle);Buo=r(tat,"Instantiates one of the base model classes of the library from a configuration."),tat.forEach(t),Iuo=i(r0),xi=n(r0,"P",{});var _ee=s(xi);Nuo=r(_ee,`Note:
Loading a model from its configuration file does `),Ale=n(_ee,"STRONG",{});var aat=s(Ale);quo=r(aat,"not"),aat.forEach(t),juo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(_ee,"A",{href:!0});var nat=s(gN);Duo=r(nat,"from_pretrained()"),nat.forEach(t),Guo=r(_ee," to load the model weights."),_ee.forEach(t),Ouo=i(r0),T(_p.$$.fragment,r0),r0.forEach(t),Vuo=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(yA.$$.fragment,oa),Xuo=i(oa),Lle=n(oa,"P",{});var sat=s(Lle);zuo=r(sat,"Instantiate one of the base model classes of the library from a pretrained model."),sat.forEach(t),Wuo=i(oa),ya=n(oa,"P",{});var t0=s(ya);Quo=r(t0,"The model class to instantiate is selected based on the "),yle=n(t0,"CODE",{});var lat=s(yle);Huo=r(lat,"model_type"),lat.forEach(t),Uuo=r(t0,` property of the config object (either
passed as an argument or loaded from `),xle=n(t0,"CODE",{});var iat=s(xle);Juo=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),Yuo=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(t0,"CODE",{});var dat=s($le);Kuo=r(dat,"pretrained_model_name_or_path"),dat.forEach(t),Zuo=r(t0,":"),t0.forEach(t),e2o=i(oa),y=n(oa,"UL",{});var $=s(y);up=n($,"LI",{});var pAe=s(up);kle=n(pAe,"STRONG",{});var cat=s(kle);o2o=r(cat,"albert"),cat.forEach(t),r2o=r(pAe," \u2014 "),hN=n(pAe,"A",{href:!0});var fat=s(hN);t2o=r(fat,"AlbertModel"),fat.forEach(t),a2o=r(pAe," (ALBERT model)"),pAe.forEach(t),n2o=i($),bp=n($,"LI",{});var _Ae=s(bp);Sle=n(_Ae,"STRONG",{});var mat=s(Sle);s2o=r(mat,"bart"),mat.forEach(t),l2o=r(_Ae," \u2014 "),pN=n(_Ae,"A",{href:!0});var gat=s(pN);i2o=r(gat,"BartModel"),gat.forEach(t),d2o=r(_Ae," (BART model)"),_Ae.forEach(t),c2o=i($),vp=n($,"LI",{});var uAe=s(vp);Rle=n(uAe,"STRONG",{});var hat=s(Rle);f2o=r(hat,"beit"),hat.forEach(t),m2o=r(uAe," \u2014 "),_N=n(uAe,"A",{href:!0});var pat=s(_N);g2o=r(pat,"BeitModel"),pat.forEach(t),h2o=r(uAe," (BEiT model)"),uAe.forEach(t),p2o=i($),Fp=n($,"LI",{});var bAe=s(Fp);Ple=n(bAe,"STRONG",{});var _at=s(Ple);_2o=r(_at,"bert"),_at.forEach(t),u2o=r(bAe," \u2014 "),uN=n(bAe,"A",{href:!0});var uat=s(uN);b2o=r(uat,"BertModel"),uat.forEach(t),v2o=r(bAe," (BERT model)"),bAe.forEach(t),F2o=i($),Tp=n($,"LI",{});var vAe=s(Tp);Ble=n(vAe,"STRONG",{});var bat=s(Ble);T2o=r(bat,"bert-generation"),bat.forEach(t),M2o=r(vAe," \u2014 "),bN=n(vAe,"A",{href:!0});var vat=s(bN);E2o=r(vat,"BertGenerationEncoder"),vat.forEach(t),C2o=r(vAe," (Bert Generation model)"),vAe.forEach(t),w2o=i($),Mp=n($,"LI",{});var FAe=s(Mp);Ile=n(FAe,"STRONG",{});var Fat=s(Ile);A2o=r(Fat,"big_bird"),Fat.forEach(t),L2o=r(FAe," \u2014 "),vN=n(FAe,"A",{href:!0});var Tat=s(vN);y2o=r(Tat,"BigBirdModel"),Tat.forEach(t),x2o=r(FAe," (BigBird model)"),FAe.forEach(t),$2o=i($),Ep=n($,"LI",{});var TAe=s(Ep);Nle=n(TAe,"STRONG",{});var Mat=s(Nle);k2o=r(Mat,"bigbird_pegasus"),Mat.forEach(t),S2o=r(TAe," \u2014 "),FN=n(TAe,"A",{href:!0});var Eat=s(FN);R2o=r(Eat,"BigBirdPegasusModel"),Eat.forEach(t),P2o=r(TAe," (BigBird-Pegasus model)"),TAe.forEach(t),B2o=i($),Cp=n($,"LI",{});var MAe=s(Cp);qle=n(MAe,"STRONG",{});var Cat=s(qle);I2o=r(Cat,"blenderbot"),Cat.forEach(t),N2o=r(MAe," \u2014 "),TN=n(MAe,"A",{href:!0});var wat=s(TN);q2o=r(wat,"BlenderbotModel"),wat.forEach(t),j2o=r(MAe," (Blenderbot model)"),MAe.forEach(t),D2o=i($),wp=n($,"LI",{});var EAe=s(wp);jle=n(EAe,"STRONG",{});var Aat=s(jle);G2o=r(Aat,"blenderbot-small"),Aat.forEach(t),O2o=r(EAe," \u2014 "),MN=n(EAe,"A",{href:!0});var Lat=s(MN);V2o=r(Lat,"BlenderbotSmallModel"),Lat.forEach(t),X2o=r(EAe," (BlenderbotSmall model)"),EAe.forEach(t),z2o=i($),Ap=n($,"LI",{});var CAe=s(Ap);Dle=n(CAe,"STRONG",{});var yat=s(Dle);W2o=r(yat,"bloom"),yat.forEach(t),Q2o=r(CAe," \u2014 "),EN=n(CAe,"A",{href:!0});var xat=s(EN);H2o=r(xat,"BloomModel"),xat.forEach(t),U2o=r(CAe," (BLOOM model)"),CAe.forEach(t),J2o=i($),Lp=n($,"LI",{});var wAe=s(Lp);Gle=n(wAe,"STRONG",{});var $at=s(Gle);Y2o=r($at,"camembert"),$at.forEach(t),K2o=r(wAe," \u2014 "),CN=n(wAe,"A",{href:!0});var kat=s(CN);Z2o=r(kat,"CamembertModel"),kat.forEach(t),e1o=r(wAe," (CamemBERT model)"),wAe.forEach(t),o1o=i($),yp=n($,"LI",{});var AAe=s(yp);Ole=n(AAe,"STRONG",{});var Sat=s(Ole);r1o=r(Sat,"canine"),Sat.forEach(t),t1o=r(AAe," \u2014 "),wN=n(AAe,"A",{href:!0});var Rat=s(wN);a1o=r(Rat,"CanineModel"),Rat.forEach(t),n1o=r(AAe," (CANINE model)"),AAe.forEach(t),s1o=i($),xp=n($,"LI",{});var LAe=s(xp);Vle=n(LAe,"STRONG",{});var Pat=s(Vle);l1o=r(Pat,"clip"),Pat.forEach(t),i1o=r(LAe," \u2014 "),AN=n(LAe,"A",{href:!0});var Bat=s(AN);d1o=r(Bat,"CLIPModel"),Bat.forEach(t),c1o=r(LAe," (CLIP model)"),LAe.forEach(t),f1o=i($),$p=n($,"LI",{});var yAe=s($p);Xle=n(yAe,"STRONG",{});var Iat=s(Xle);m1o=r(Iat,"convbert"),Iat.forEach(t),g1o=r(yAe," \u2014 "),LN=n(yAe,"A",{href:!0});var Nat=s(LN);h1o=r(Nat,"ConvBertModel"),Nat.forEach(t),p1o=r(yAe," (ConvBERT model)"),yAe.forEach(t),_1o=i($),kp=n($,"LI",{});var xAe=s(kp);zle=n(xAe,"STRONG",{});var qat=s(zle);u1o=r(qat,"convnext"),qat.forEach(t),b1o=r(xAe," \u2014 "),yN=n(xAe,"A",{href:!0});var jat=s(yN);v1o=r(jat,"ConvNextModel"),jat.forEach(t),F1o=r(xAe," (ConvNeXT model)"),xAe.forEach(t),T1o=i($),Sp=n($,"LI",{});var $Ae=s(Sp);Wle=n($Ae,"STRONG",{});var Dat=s(Wle);M1o=r(Dat,"ctrl"),Dat.forEach(t),E1o=r($Ae," \u2014 "),xN=n($Ae,"A",{href:!0});var Gat=s(xN);C1o=r(Gat,"CTRLModel"),Gat.forEach(t),w1o=r($Ae," (CTRL model)"),$Ae.forEach(t),A1o=i($),Rp=n($,"LI",{});var kAe=s(Rp);Qle=n(kAe,"STRONG",{});var Oat=s(Qle);L1o=r(Oat,"cvt"),Oat.forEach(t),y1o=r(kAe," \u2014 "),$N=n(kAe,"A",{href:!0});var Vat=s($N);x1o=r(Vat,"CvtModel"),Vat.forEach(t),$1o=r(kAe," (CvT model)"),kAe.forEach(t),k1o=i($),Pp=n($,"LI",{});var SAe=s(Pp);Hle=n(SAe,"STRONG",{});var Xat=s(Hle);S1o=r(Xat,"data2vec-audio"),Xat.forEach(t),R1o=r(SAe," \u2014 "),kN=n(SAe,"A",{href:!0});var zat=s(kN);P1o=r(zat,"Data2VecAudioModel"),zat.forEach(t),B1o=r(SAe," (Data2VecAudio model)"),SAe.forEach(t),I1o=i($),Bp=n($,"LI",{});var RAe=s(Bp);Ule=n(RAe,"STRONG",{});var Wat=s(Ule);N1o=r(Wat,"data2vec-text"),Wat.forEach(t),q1o=r(RAe," \u2014 "),SN=n(RAe,"A",{href:!0});var Qat=s(SN);j1o=r(Qat,"Data2VecTextModel"),Qat.forEach(t),D1o=r(RAe," (Data2VecText model)"),RAe.forEach(t),G1o=i($),Ip=n($,"LI",{});var PAe=s(Ip);Jle=n(PAe,"STRONG",{});var Hat=s(Jle);O1o=r(Hat,"data2vec-vision"),Hat.forEach(t),V1o=r(PAe," \u2014 "),RN=n(PAe,"A",{href:!0});var Uat=s(RN);X1o=r(Uat,"Data2VecVisionModel"),Uat.forEach(t),z1o=r(PAe," (Data2VecVision model)"),PAe.forEach(t),W1o=i($),Np=n($,"LI",{});var BAe=s(Np);Yle=n(BAe,"STRONG",{});var Jat=s(Yle);Q1o=r(Jat,"deberta"),Jat.forEach(t),H1o=r(BAe," \u2014 "),PN=n(BAe,"A",{href:!0});var Yat=s(PN);U1o=r(Yat,"DebertaModel"),Yat.forEach(t),J1o=r(BAe," (DeBERTa model)"),BAe.forEach(t),Y1o=i($),qp=n($,"LI",{});var IAe=s(qp);Kle=n(IAe,"STRONG",{});var Kat=s(Kle);K1o=r(Kat,"deberta-v2"),Kat.forEach(t),Z1o=r(IAe," \u2014 "),BN=n(IAe,"A",{href:!0});var Zat=s(BN);ebo=r(Zat,"DebertaV2Model"),Zat.forEach(t),obo=r(IAe," (DeBERTa-v2 model)"),IAe.forEach(t),rbo=i($),jp=n($,"LI",{});var NAe=s(jp);Zle=n(NAe,"STRONG",{});var ent=s(Zle);tbo=r(ent,"decision_transformer"),ent.forEach(t),abo=r(NAe," \u2014 "),IN=n(NAe,"A",{href:!0});var ont=s(IN);nbo=r(ont,"DecisionTransformerModel"),ont.forEach(t),sbo=r(NAe," (Decision Transformer model)"),NAe.forEach(t),lbo=i($),Dp=n($,"LI",{});var qAe=s(Dp);eie=n(qAe,"STRONG",{});var rnt=s(eie);ibo=r(rnt,"deit"),rnt.forEach(t),dbo=r(qAe," \u2014 "),NN=n(qAe,"A",{href:!0});var tnt=s(NN);cbo=r(tnt,"DeiTModel"),tnt.forEach(t),fbo=r(qAe," (DeiT model)"),qAe.forEach(t),mbo=i($),Gp=n($,"LI",{});var jAe=s(Gp);oie=n(jAe,"STRONG",{});var ant=s(oie);gbo=r(ant,"detr"),ant.forEach(t),hbo=r(jAe," \u2014 "),qN=n(jAe,"A",{href:!0});var nnt=s(qN);pbo=r(nnt,"DetrModel"),nnt.forEach(t),_bo=r(jAe," (DETR model)"),jAe.forEach(t),ubo=i($),Op=n($,"LI",{});var DAe=s(Op);rie=n(DAe,"STRONG",{});var snt=s(rie);bbo=r(snt,"distilbert"),snt.forEach(t),vbo=r(DAe," \u2014 "),jN=n(DAe,"A",{href:!0});var lnt=s(jN);Fbo=r(lnt,"DistilBertModel"),lnt.forEach(t),Tbo=r(DAe," (DistilBERT model)"),DAe.forEach(t),Mbo=i($),Vp=n($,"LI",{});var GAe=s(Vp);tie=n(GAe,"STRONG",{});var int=s(tie);Ebo=r(int,"dpr"),int.forEach(t),Cbo=r(GAe," \u2014 "),DN=n(GAe,"A",{href:!0});var dnt=s(DN);wbo=r(dnt,"DPRQuestionEncoder"),dnt.forEach(t),Abo=r(GAe," (DPR model)"),GAe.forEach(t),Lbo=i($),Xp=n($,"LI",{});var OAe=s(Xp);aie=n(OAe,"STRONG",{});var cnt=s(aie);ybo=r(cnt,"dpt"),cnt.forEach(t),xbo=r(OAe," \u2014 "),GN=n(OAe,"A",{href:!0});var fnt=s(GN);$bo=r(fnt,"DPTModel"),fnt.forEach(t),kbo=r(OAe," (DPT model)"),OAe.forEach(t),Sbo=i($),zp=n($,"LI",{});var VAe=s(zp);nie=n(VAe,"STRONG",{});var mnt=s(nie);Rbo=r(mnt,"electra"),mnt.forEach(t),Pbo=r(VAe," \u2014 "),ON=n(VAe,"A",{href:!0});var gnt=s(ON);Bbo=r(gnt,"ElectraModel"),gnt.forEach(t),Ibo=r(VAe," (ELECTRA model)"),VAe.forEach(t),Nbo=i($),Wp=n($,"LI",{});var XAe=s(Wp);sie=n(XAe,"STRONG",{});var hnt=s(sie);qbo=r(hnt,"flaubert"),hnt.forEach(t),jbo=r(XAe," \u2014 "),VN=n(XAe,"A",{href:!0});var pnt=s(VN);Dbo=r(pnt,"FlaubertModel"),pnt.forEach(t),Gbo=r(XAe," (FlauBERT model)"),XAe.forEach(t),Obo=i($),Qp=n($,"LI",{});var zAe=s(Qp);lie=n(zAe,"STRONG",{});var _nt=s(lie);Vbo=r(_nt,"flava"),_nt.forEach(t),Xbo=r(zAe," \u2014 "),XN=n(zAe,"A",{href:!0});var unt=s(XN);zbo=r(unt,"FlavaModel"),unt.forEach(t),Wbo=r(zAe," (FLAVA model)"),zAe.forEach(t),Qbo=i($),Hp=n($,"LI",{});var WAe=s(Hp);iie=n(WAe,"STRONG",{});var bnt=s(iie);Hbo=r(bnt,"fnet"),bnt.forEach(t),Ubo=r(WAe," \u2014 "),zN=n(WAe,"A",{href:!0});var vnt=s(zN);Jbo=r(vnt,"FNetModel"),vnt.forEach(t),Ybo=r(WAe," (FNet model)"),WAe.forEach(t),Kbo=i($),Up=n($,"LI",{});var QAe=s(Up);die=n(QAe,"STRONG",{});var Fnt=s(die);Zbo=r(Fnt,"fsmt"),Fnt.forEach(t),evo=r(QAe," \u2014 "),WN=n(QAe,"A",{href:!0});var Tnt=s(WN);ovo=r(Tnt,"FSMTModel"),Tnt.forEach(t),rvo=r(QAe," (FairSeq Machine-Translation model)"),QAe.forEach(t),tvo=i($),Bs=n($,"LI",{});var hk=s(Bs);cie=n(hk,"STRONG",{});var Mnt=s(cie);avo=r(Mnt,"funnel"),Mnt.forEach(t),nvo=r(hk," \u2014 "),QN=n(hk,"A",{href:!0});var Ent=s(QN);svo=r(Ent,"FunnelModel"),Ent.forEach(t),lvo=r(hk," or "),HN=n(hk,"A",{href:!0});var Cnt=s(HN);ivo=r(Cnt,"FunnelBaseModel"),Cnt.forEach(t),dvo=r(hk," (Funnel Transformer model)"),hk.forEach(t),cvo=i($),Jp=n($,"LI",{});var HAe=s(Jp);fie=n(HAe,"STRONG",{});var wnt=s(fie);fvo=r(wnt,"glpn"),wnt.forEach(t),mvo=r(HAe," \u2014 "),UN=n(HAe,"A",{href:!0});var Ant=s(UN);gvo=r(Ant,"GLPNModel"),Ant.forEach(t),hvo=r(HAe," (GLPN model)"),HAe.forEach(t),pvo=i($),Yp=n($,"LI",{});var UAe=s(Yp);mie=n(UAe,"STRONG",{});var Lnt=s(mie);_vo=r(Lnt,"gpt2"),Lnt.forEach(t),uvo=r(UAe," \u2014 "),JN=n(UAe,"A",{href:!0});var ynt=s(JN);bvo=r(ynt,"GPT2Model"),ynt.forEach(t),vvo=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),Fvo=i($),Kp=n($,"LI",{});var JAe=s(Kp);gie=n(JAe,"STRONG",{});var xnt=s(gie);Tvo=r(xnt,"gpt_neo"),xnt.forEach(t),Mvo=r(JAe," \u2014 "),YN=n(JAe,"A",{href:!0});var $nt=s(YN);Evo=r($nt,"GPTNeoModel"),$nt.forEach(t),Cvo=r(JAe," (GPT Neo model)"),JAe.forEach(t),wvo=i($),Zp=n($,"LI",{});var YAe=s(Zp);hie=n(YAe,"STRONG",{});var knt=s(hie);Avo=r(knt,"gpt_neox"),knt.forEach(t),Lvo=r(YAe," \u2014 "),KN=n(YAe,"A",{href:!0});var Snt=s(KN);yvo=r(Snt,"GPTNeoXModel"),Snt.forEach(t),xvo=r(YAe," (GPT NeoX model)"),YAe.forEach(t),$vo=i($),e_=n($,"LI",{});var KAe=s(e_);pie=n(KAe,"STRONG",{});var Rnt=s(pie);kvo=r(Rnt,"gptj"),Rnt.forEach(t),Svo=r(KAe," \u2014 "),ZN=n(KAe,"A",{href:!0});var Pnt=s(ZN);Rvo=r(Pnt,"GPTJModel"),Pnt.forEach(t),Pvo=r(KAe," (GPT-J model)"),KAe.forEach(t),Bvo=i($),o_=n($,"LI",{});var ZAe=s(o_);_ie=n(ZAe,"STRONG",{});var Bnt=s(_ie);Ivo=r(Bnt,"hubert"),Bnt.forEach(t),Nvo=r(ZAe," \u2014 "),eq=n(ZAe,"A",{href:!0});var Int=s(eq);qvo=r(Int,"HubertModel"),Int.forEach(t),jvo=r(ZAe," (Hubert model)"),ZAe.forEach(t),Dvo=i($),r_=n($,"LI",{});var eLe=s(r_);uie=n(eLe,"STRONG",{});var Nnt=s(uie);Gvo=r(Nnt,"ibert"),Nnt.forEach(t),Ovo=r(eLe," \u2014 "),oq=n(eLe,"A",{href:!0});var qnt=s(oq);Vvo=r(qnt,"IBertModel"),qnt.forEach(t),Xvo=r(eLe," (I-BERT model)"),eLe.forEach(t),zvo=i($),t_=n($,"LI",{});var oLe=s(t_);bie=n(oLe,"STRONG",{});var jnt=s(bie);Wvo=r(jnt,"imagegpt"),jnt.forEach(t),Qvo=r(oLe," \u2014 "),rq=n(oLe,"A",{href:!0});var Dnt=s(rq);Hvo=r(Dnt,"ImageGPTModel"),Dnt.forEach(t),Uvo=r(oLe," (ImageGPT model)"),oLe.forEach(t),Jvo=i($),a_=n($,"LI",{});var rLe=s(a_);vie=n(rLe,"STRONG",{});var Gnt=s(vie);Yvo=r(Gnt,"layoutlm"),Gnt.forEach(t),Kvo=r(rLe," \u2014 "),tq=n(rLe,"A",{href:!0});var Ont=s(tq);Zvo=r(Ont,"LayoutLMModel"),Ont.forEach(t),eFo=r(rLe," (LayoutLM model)"),rLe.forEach(t),oFo=i($),n_=n($,"LI",{});var tLe=s(n_);Fie=n(tLe,"STRONG",{});var Vnt=s(Fie);rFo=r(Vnt,"layoutlmv2"),Vnt.forEach(t),tFo=r(tLe," \u2014 "),aq=n(tLe,"A",{href:!0});var Xnt=s(aq);aFo=r(Xnt,"LayoutLMv2Model"),Xnt.forEach(t),nFo=r(tLe," (LayoutLMv2 model)"),tLe.forEach(t),sFo=i($),s_=n($,"LI",{});var aLe=s(s_);Tie=n(aLe,"STRONG",{});var znt=s(Tie);lFo=r(znt,"layoutlmv3"),znt.forEach(t),iFo=r(aLe," \u2014 "),nq=n(aLe,"A",{href:!0});var Wnt=s(nq);dFo=r(Wnt,"LayoutLMv3Model"),Wnt.forEach(t),cFo=r(aLe," (LayoutLMv3 model)"),aLe.forEach(t),fFo=i($),l_=n($,"LI",{});var nLe=s(l_);Mie=n(nLe,"STRONG",{});var Qnt=s(Mie);mFo=r(Qnt,"led"),Qnt.forEach(t),gFo=r(nLe," \u2014 "),sq=n(nLe,"A",{href:!0});var Hnt=s(sq);hFo=r(Hnt,"LEDModel"),Hnt.forEach(t),pFo=r(nLe," (LED model)"),nLe.forEach(t),_Fo=i($),i_=n($,"LI",{});var sLe=s(i_);Eie=n(sLe,"STRONG",{});var Unt=s(Eie);uFo=r(Unt,"levit"),Unt.forEach(t),bFo=r(sLe," \u2014 "),lq=n(sLe,"A",{href:!0});var Jnt=s(lq);vFo=r(Jnt,"LevitModel"),Jnt.forEach(t),FFo=r(sLe," (LeViT model)"),sLe.forEach(t),TFo=i($),d_=n($,"LI",{});var lLe=s(d_);Cie=n(lLe,"STRONG",{});var Ynt=s(Cie);MFo=r(Ynt,"longformer"),Ynt.forEach(t),EFo=r(lLe," \u2014 "),iq=n(lLe,"A",{href:!0});var Knt=s(iq);CFo=r(Knt,"LongformerModel"),Knt.forEach(t),wFo=r(lLe," (Longformer model)"),lLe.forEach(t),AFo=i($),c_=n($,"LI",{});var iLe=s(c_);wie=n(iLe,"STRONG",{});var Znt=s(wie);LFo=r(Znt,"longt5"),Znt.forEach(t),yFo=r(iLe," \u2014 "),dq=n(iLe,"A",{href:!0});var est=s(dq);xFo=r(est,"LongT5Model"),est.forEach(t),$Fo=r(iLe," (LongT5 model)"),iLe.forEach(t),kFo=i($),f_=n($,"LI",{});var dLe=s(f_);Aie=n(dLe,"STRONG",{});var ost=s(Aie);SFo=r(ost,"luke"),ost.forEach(t),RFo=r(dLe," \u2014 "),cq=n(dLe,"A",{href:!0});var rst=s(cq);PFo=r(rst,"LukeModel"),rst.forEach(t),BFo=r(dLe," (LUKE model)"),dLe.forEach(t),IFo=i($),m_=n($,"LI",{});var cLe=s(m_);Lie=n(cLe,"STRONG",{});var tst=s(Lie);NFo=r(tst,"lxmert"),tst.forEach(t),qFo=r(cLe," \u2014 "),fq=n(cLe,"A",{href:!0});var ast=s(fq);jFo=r(ast,"LxmertModel"),ast.forEach(t),DFo=r(cLe," (LXMERT model)"),cLe.forEach(t),GFo=i($),g_=n($,"LI",{});var fLe=s(g_);yie=n(fLe,"STRONG",{});var nst=s(yie);OFo=r(nst,"m2m_100"),nst.forEach(t),VFo=r(fLe," \u2014 "),mq=n(fLe,"A",{href:!0});var sst=s(mq);XFo=r(sst,"M2M100Model"),sst.forEach(t),zFo=r(fLe," (M2M100 model)"),fLe.forEach(t),WFo=i($),h_=n($,"LI",{});var mLe=s(h_);xie=n(mLe,"STRONG",{});var lst=s(xie);QFo=r(lst,"marian"),lst.forEach(t),HFo=r(mLe," \u2014 "),gq=n(mLe,"A",{href:!0});var ist=s(gq);UFo=r(ist,"MarianModel"),ist.forEach(t),JFo=r(mLe," (Marian model)"),mLe.forEach(t),YFo=i($),p_=n($,"LI",{});var gLe=s(p_);$ie=n(gLe,"STRONG",{});var dst=s($ie);KFo=r(dst,"maskformer"),dst.forEach(t),ZFo=r(gLe," \u2014 "),hq=n(gLe,"A",{href:!0});var cst=s(hq);e6o=r(cst,"MaskFormerModel"),cst.forEach(t),o6o=r(gLe," (MaskFormer model)"),gLe.forEach(t),r6o=i($),__=n($,"LI",{});var hLe=s(__);kie=n(hLe,"STRONG",{});var fst=s(kie);t6o=r(fst,"mbart"),fst.forEach(t),a6o=r(hLe," \u2014 "),pq=n(hLe,"A",{href:!0});var mst=s(pq);n6o=r(mst,"MBartModel"),mst.forEach(t),s6o=r(hLe," (mBART model)"),hLe.forEach(t),l6o=i($),u_=n($,"LI",{});var pLe=s(u_);Sie=n(pLe,"STRONG",{});var gst=s(Sie);i6o=r(gst,"mctct"),gst.forEach(t),d6o=r(pLe," \u2014 "),_q=n(pLe,"A",{href:!0});var hst=s(_q);c6o=r(hst,"MCTCTModel"),hst.forEach(t),f6o=r(pLe," (M-CTC-T model)"),pLe.forEach(t),m6o=i($),b_=n($,"LI",{});var _Le=s(b_);Rie=n(_Le,"STRONG",{});var pst=s(Rie);g6o=r(pst,"megatron-bert"),pst.forEach(t),h6o=r(_Le," \u2014 "),uq=n(_Le,"A",{href:!0});var _st=s(uq);p6o=r(_st,"MegatronBertModel"),_st.forEach(t),_6o=r(_Le," (Megatron-BERT model)"),_Le.forEach(t),u6o=i($),v_=n($,"LI",{});var uLe=s(v_);Pie=n(uLe,"STRONG",{});var ust=s(Pie);b6o=r(ust,"mobilebert"),ust.forEach(t),v6o=r(uLe," \u2014 "),bq=n(uLe,"A",{href:!0});var bst=s(bq);F6o=r(bst,"MobileBertModel"),bst.forEach(t),T6o=r(uLe," (MobileBERT model)"),uLe.forEach(t),M6o=i($),F_=n($,"LI",{});var bLe=s(F_);Bie=n(bLe,"STRONG",{});var vst=s(Bie);E6o=r(vst,"mpnet"),vst.forEach(t),C6o=r(bLe," \u2014 "),vq=n(bLe,"A",{href:!0});var Fst=s(vq);w6o=r(Fst,"MPNetModel"),Fst.forEach(t),A6o=r(bLe," (MPNet model)"),bLe.forEach(t),L6o=i($),T_=n($,"LI",{});var vLe=s(T_);Iie=n(vLe,"STRONG",{});var Tst=s(Iie);y6o=r(Tst,"mt5"),Tst.forEach(t),x6o=r(vLe," \u2014 "),Fq=n(vLe,"A",{href:!0});var Mst=s(Fq);$6o=r(Mst,"MT5Model"),Mst.forEach(t),k6o=r(vLe," (MT5 model)"),vLe.forEach(t),S6o=i($),M_=n($,"LI",{});var FLe=s(M_);Nie=n(FLe,"STRONG",{});var Est=s(Nie);R6o=r(Est,"nystromformer"),Est.forEach(t),P6o=r(FLe," \u2014 "),Tq=n(FLe,"A",{href:!0});var Cst=s(Tq);B6o=r(Cst,"NystromformerModel"),Cst.forEach(t),I6o=r(FLe," (Nystr\xF6mformer model)"),FLe.forEach(t),N6o=i($),E_=n($,"LI",{});var TLe=s(E_);qie=n(TLe,"STRONG",{});var wst=s(qie);q6o=r(wst,"openai-gpt"),wst.forEach(t),j6o=r(TLe," \u2014 "),Mq=n(TLe,"A",{href:!0});var Ast=s(Mq);D6o=r(Ast,"OpenAIGPTModel"),Ast.forEach(t),G6o=r(TLe," (OpenAI GPT model)"),TLe.forEach(t),O6o=i($),C_=n($,"LI",{});var MLe=s(C_);jie=n(MLe,"STRONG",{});var Lst=s(jie);V6o=r(Lst,"opt"),Lst.forEach(t),X6o=r(MLe," \u2014 "),Eq=n(MLe,"A",{href:!0});var yst=s(Eq);z6o=r(yst,"OPTModel"),yst.forEach(t),W6o=r(MLe," (OPT model)"),MLe.forEach(t),Q6o=i($),w_=n($,"LI",{});var ELe=s(w_);Die=n(ELe,"STRONG",{});var xst=s(Die);H6o=r(xst,"pegasus"),xst.forEach(t),U6o=r(ELe," \u2014 "),Cq=n(ELe,"A",{href:!0});var $st=s(Cq);J6o=r($st,"PegasusModel"),$st.forEach(t),Y6o=r(ELe," (Pegasus model)"),ELe.forEach(t),K6o=i($),A_=n($,"LI",{});var CLe=s(A_);Gie=n(CLe,"STRONG",{});var kst=s(Gie);Z6o=r(kst,"perceiver"),kst.forEach(t),eTo=r(CLe," \u2014 "),wq=n(CLe,"A",{href:!0});var Sst=s(wq);oTo=r(Sst,"PerceiverModel"),Sst.forEach(t),rTo=r(CLe," (Perceiver model)"),CLe.forEach(t),tTo=i($),L_=n($,"LI",{});var wLe=s(L_);Oie=n(wLe,"STRONG",{});var Rst=s(Oie);aTo=r(Rst,"plbart"),Rst.forEach(t),nTo=r(wLe," \u2014 "),Aq=n(wLe,"A",{href:!0});var Pst=s(Aq);sTo=r(Pst,"PLBartModel"),Pst.forEach(t),lTo=r(wLe," (PLBart model)"),wLe.forEach(t),iTo=i($),y_=n($,"LI",{});var ALe=s(y_);Vie=n(ALe,"STRONG",{});var Bst=s(Vie);dTo=r(Bst,"poolformer"),Bst.forEach(t),cTo=r(ALe," \u2014 "),Lq=n(ALe,"A",{href:!0});var Ist=s(Lq);fTo=r(Ist,"PoolFormerModel"),Ist.forEach(t),mTo=r(ALe," (PoolFormer model)"),ALe.forEach(t),gTo=i($),x_=n($,"LI",{});var LLe=s(x_);Xie=n(LLe,"STRONG",{});var Nst=s(Xie);hTo=r(Nst,"prophetnet"),Nst.forEach(t),pTo=r(LLe," \u2014 "),yq=n(LLe,"A",{href:!0});var qst=s(yq);_To=r(qst,"ProphetNetModel"),qst.forEach(t),uTo=r(LLe," (ProphetNet model)"),LLe.forEach(t),bTo=i($),$_=n($,"LI",{});var yLe=s($_);zie=n(yLe,"STRONG",{});var jst=s(zie);vTo=r(jst,"qdqbert"),jst.forEach(t),FTo=r(yLe," \u2014 "),xq=n(yLe,"A",{href:!0});var Dst=s(xq);TTo=r(Dst,"QDQBertModel"),Dst.forEach(t),MTo=r(yLe," (QDQBert model)"),yLe.forEach(t),ETo=i($),k_=n($,"LI",{});var xLe=s(k_);Wie=n(xLe,"STRONG",{});var Gst=s(Wie);CTo=r(Gst,"reformer"),Gst.forEach(t),wTo=r(xLe," \u2014 "),$q=n(xLe,"A",{href:!0});var Ost=s($q);ATo=r(Ost,"ReformerModel"),Ost.forEach(t),LTo=r(xLe," (Reformer model)"),xLe.forEach(t),yTo=i($),S_=n($,"LI",{});var $Le=s(S_);Qie=n($Le,"STRONG",{});var Vst=s(Qie);xTo=r(Vst,"regnet"),Vst.forEach(t),$To=r($Le," \u2014 "),kq=n($Le,"A",{href:!0});var Xst=s(kq);kTo=r(Xst,"RegNetModel"),Xst.forEach(t),STo=r($Le," (RegNet model)"),$Le.forEach(t),RTo=i($),R_=n($,"LI",{});var kLe=s(R_);Hie=n(kLe,"STRONG",{});var zst=s(Hie);PTo=r(zst,"rembert"),zst.forEach(t),BTo=r(kLe," \u2014 "),Sq=n(kLe,"A",{href:!0});var Wst=s(Sq);ITo=r(Wst,"RemBertModel"),Wst.forEach(t),NTo=r(kLe," (RemBERT model)"),kLe.forEach(t),qTo=i($),P_=n($,"LI",{});var SLe=s(P_);Uie=n(SLe,"STRONG",{});var Qst=s(Uie);jTo=r(Qst,"resnet"),Qst.forEach(t),DTo=r(SLe," \u2014 "),Rq=n(SLe,"A",{href:!0});var Hst=s(Rq);GTo=r(Hst,"ResNetModel"),Hst.forEach(t),OTo=r(SLe," (ResNet model)"),SLe.forEach(t),VTo=i($),B_=n($,"LI",{});var RLe=s(B_);Jie=n(RLe,"STRONG",{});var Ust=s(Jie);XTo=r(Ust,"retribert"),Ust.forEach(t),zTo=r(RLe," \u2014 "),Pq=n(RLe,"A",{href:!0});var Jst=s(Pq);WTo=r(Jst,"RetriBertModel"),Jst.forEach(t),QTo=r(RLe," (RetriBERT model)"),RLe.forEach(t),HTo=i($),I_=n($,"LI",{});var PLe=s(I_);Yie=n(PLe,"STRONG",{});var Yst=s(Yie);UTo=r(Yst,"roberta"),Yst.forEach(t),JTo=r(PLe," \u2014 "),Bq=n(PLe,"A",{href:!0});var Kst=s(Bq);YTo=r(Kst,"RobertaModel"),Kst.forEach(t),KTo=r(PLe," (RoBERTa model)"),PLe.forEach(t),ZTo=i($),N_=n($,"LI",{});var BLe=s(N_);Kie=n(BLe,"STRONG",{});var Zst=s(Kie);e7o=r(Zst,"roformer"),Zst.forEach(t),o7o=r(BLe," \u2014 "),Iq=n(BLe,"A",{href:!0});var elt=s(Iq);r7o=r(elt,"RoFormerModel"),elt.forEach(t),t7o=r(BLe," (RoFormer model)"),BLe.forEach(t),a7o=i($),q_=n($,"LI",{});var ILe=s(q_);Zie=n(ILe,"STRONG",{});var olt=s(Zie);n7o=r(olt,"segformer"),olt.forEach(t),s7o=r(ILe," \u2014 "),Nq=n(ILe,"A",{href:!0});var rlt=s(Nq);l7o=r(rlt,"SegformerModel"),rlt.forEach(t),i7o=r(ILe," (SegFormer model)"),ILe.forEach(t),d7o=i($),j_=n($,"LI",{});var NLe=s(j_);ede=n(NLe,"STRONG",{});var tlt=s(ede);c7o=r(tlt,"sew"),tlt.forEach(t),f7o=r(NLe," \u2014 "),qq=n(NLe,"A",{href:!0});var alt=s(qq);m7o=r(alt,"SEWModel"),alt.forEach(t),g7o=r(NLe," (SEW model)"),NLe.forEach(t),h7o=i($),D_=n($,"LI",{});var qLe=s(D_);ode=n(qLe,"STRONG",{});var nlt=s(ode);p7o=r(nlt,"sew-d"),nlt.forEach(t),_7o=r(qLe," \u2014 "),jq=n(qLe,"A",{href:!0});var slt=s(jq);u7o=r(slt,"SEWDModel"),slt.forEach(t),b7o=r(qLe," (SEW-D model)"),qLe.forEach(t),v7o=i($),G_=n($,"LI",{});var jLe=s(G_);rde=n(jLe,"STRONG",{});var llt=s(rde);F7o=r(llt,"speech_to_text"),llt.forEach(t),T7o=r(jLe," \u2014 "),Dq=n(jLe,"A",{href:!0});var ilt=s(Dq);M7o=r(ilt,"Speech2TextModel"),ilt.forEach(t),E7o=r(jLe," (Speech2Text model)"),jLe.forEach(t),C7o=i($),O_=n($,"LI",{});var DLe=s(O_);tde=n(DLe,"STRONG",{});var dlt=s(tde);w7o=r(dlt,"splinter"),dlt.forEach(t),A7o=r(DLe," \u2014 "),Gq=n(DLe,"A",{href:!0});var clt=s(Gq);L7o=r(clt,"SplinterModel"),clt.forEach(t),y7o=r(DLe," (Splinter model)"),DLe.forEach(t),x7o=i($),V_=n($,"LI",{});var GLe=s(V_);ade=n(GLe,"STRONG",{});var flt=s(ade);$7o=r(flt,"squeezebert"),flt.forEach(t),k7o=r(GLe," \u2014 "),Oq=n(GLe,"A",{href:!0});var mlt=s(Oq);S7o=r(mlt,"SqueezeBertModel"),mlt.forEach(t),R7o=r(GLe," (SqueezeBERT model)"),GLe.forEach(t),P7o=i($),X_=n($,"LI",{});var OLe=s(X_);nde=n(OLe,"STRONG",{});var glt=s(nde);B7o=r(glt,"swin"),glt.forEach(t),I7o=r(OLe," \u2014 "),Vq=n(OLe,"A",{href:!0});var hlt=s(Vq);N7o=r(hlt,"SwinModel"),hlt.forEach(t),q7o=r(OLe," (Swin Transformer model)"),OLe.forEach(t),j7o=i($),z_=n($,"LI",{});var VLe=s(z_);sde=n(VLe,"STRONG",{});var plt=s(sde);D7o=r(plt,"t5"),plt.forEach(t),G7o=r(VLe," \u2014 "),Xq=n(VLe,"A",{href:!0});var _lt=s(Xq);O7o=r(_lt,"T5Model"),_lt.forEach(t),V7o=r(VLe," (T5 model)"),VLe.forEach(t),X7o=i($),W_=n($,"LI",{});var XLe=s(W_);lde=n(XLe,"STRONG",{});var ult=s(lde);z7o=r(ult,"tapas"),ult.forEach(t),W7o=r(XLe," \u2014 "),zq=n(XLe,"A",{href:!0});var blt=s(zq);Q7o=r(blt,"TapasModel"),blt.forEach(t),H7o=r(XLe," (TAPAS model)"),XLe.forEach(t),U7o=i($),Q_=n($,"LI",{});var zLe=s(Q_);ide=n(zLe,"STRONG",{});var vlt=s(ide);J7o=r(vlt,"trajectory_transformer"),vlt.forEach(t),Y7o=r(zLe," \u2014 "),Wq=n(zLe,"A",{href:!0});var Flt=s(Wq);K7o=r(Flt,"TrajectoryTransformerModel"),Flt.forEach(t),Z7o=r(zLe," (Trajectory Transformer model)"),zLe.forEach(t),e9o=i($),H_=n($,"LI",{});var WLe=s(H_);dde=n(WLe,"STRONG",{});var Tlt=s(dde);o9o=r(Tlt,"transfo-xl"),Tlt.forEach(t),r9o=r(WLe," \u2014 "),Qq=n(WLe,"A",{href:!0});var Mlt=s(Qq);t9o=r(Mlt,"TransfoXLModel"),Mlt.forEach(t),a9o=r(WLe," (Transformer-XL model)"),WLe.forEach(t),n9o=i($),U_=n($,"LI",{});var QLe=s(U_);cde=n(QLe,"STRONG",{});var Elt=s(cde);s9o=r(Elt,"unispeech"),Elt.forEach(t),l9o=r(QLe," \u2014 "),Hq=n(QLe,"A",{href:!0});var Clt=s(Hq);i9o=r(Clt,"UniSpeechModel"),Clt.forEach(t),d9o=r(QLe," (UniSpeech model)"),QLe.forEach(t),c9o=i($),J_=n($,"LI",{});var HLe=s(J_);fde=n(HLe,"STRONG",{});var wlt=s(fde);f9o=r(wlt,"unispeech-sat"),wlt.forEach(t),m9o=r(HLe," \u2014 "),Uq=n(HLe,"A",{href:!0});var Alt=s(Uq);g9o=r(Alt,"UniSpeechSatModel"),Alt.forEach(t),h9o=r(HLe," (UniSpeechSat model)"),HLe.forEach(t),p9o=i($),Y_=n($,"LI",{});var ULe=s(Y_);mde=n(ULe,"STRONG",{});var Llt=s(mde);_9o=r(Llt,"van"),Llt.forEach(t),u9o=r(ULe," \u2014 "),Jq=n(ULe,"A",{href:!0});var ylt=s(Jq);b9o=r(ylt,"VanModel"),ylt.forEach(t),v9o=r(ULe," (VAN model)"),ULe.forEach(t),F9o=i($),K_=n($,"LI",{});var JLe=s(K_);gde=n(JLe,"STRONG",{});var xlt=s(gde);T9o=r(xlt,"vilt"),xlt.forEach(t),M9o=r(JLe," \u2014 "),Yq=n(JLe,"A",{href:!0});var $lt=s(Yq);E9o=r($lt,"ViltModel"),$lt.forEach(t),C9o=r(JLe," (ViLT model)"),JLe.forEach(t),w9o=i($),Z_=n($,"LI",{});var YLe=s(Z_);hde=n(YLe,"STRONG",{});var klt=s(hde);A9o=r(klt,"vision-text-dual-encoder"),klt.forEach(t),L9o=r(YLe," \u2014 "),Kq=n(YLe,"A",{href:!0});var Slt=s(Kq);y9o=r(Slt,"VisionTextDualEncoderModel"),Slt.forEach(t),x9o=r(YLe," (VisionTextDualEncoder model)"),YLe.forEach(t),$9o=i($),eu=n($,"LI",{});var KLe=s(eu);pde=n(KLe,"STRONG",{});var Rlt=s(pde);k9o=r(Rlt,"visual_bert"),Rlt.forEach(t),S9o=r(KLe," \u2014 "),Zq=n(KLe,"A",{href:!0});var Plt=s(Zq);R9o=r(Plt,"VisualBertModel"),Plt.forEach(t),P9o=r(KLe," (VisualBERT model)"),KLe.forEach(t),B9o=i($),ou=n($,"LI",{});var ZLe=s(ou);_de=n(ZLe,"STRONG",{});var Blt=s(_de);I9o=r(Blt,"vit"),Blt.forEach(t),N9o=r(ZLe," \u2014 "),ej=n(ZLe,"A",{href:!0});var Ilt=s(ej);q9o=r(Ilt,"ViTModel"),Ilt.forEach(t),j9o=r(ZLe," (ViT model)"),ZLe.forEach(t),D9o=i($),ru=n($,"LI",{});var eye=s(ru);ude=n(eye,"STRONG",{});var Nlt=s(ude);G9o=r(Nlt,"vit_mae"),Nlt.forEach(t),O9o=r(eye," \u2014 "),oj=n(eye,"A",{href:!0});var qlt=s(oj);V9o=r(qlt,"ViTMAEModel"),qlt.forEach(t),X9o=r(eye," (ViTMAE model)"),eye.forEach(t),z9o=i($),tu=n($,"LI",{});var oye=s(tu);bde=n(oye,"STRONG",{});var jlt=s(bde);W9o=r(jlt,"wav2vec2"),jlt.forEach(t),Q9o=r(oye," \u2014 "),rj=n(oye,"A",{href:!0});var Dlt=s(rj);H9o=r(Dlt,"Wav2Vec2Model"),Dlt.forEach(t),U9o=r(oye," (Wav2Vec2 model)"),oye.forEach(t),J9o=i($),au=n($,"LI",{});var rye=s(au);vde=n(rye,"STRONG",{});var Glt=s(vde);Y9o=r(Glt,"wav2vec2-conformer"),Glt.forEach(t),K9o=r(rye," \u2014 "),tj=n(rye,"A",{href:!0});var Olt=s(tj);Z9o=r(Olt,"Wav2Vec2ConformerModel"),Olt.forEach(t),eMo=r(rye," (Wav2Vec2-Conformer model)"),rye.forEach(t),oMo=i($),nu=n($,"LI",{});var tye=s(nu);Fde=n(tye,"STRONG",{});var Vlt=s(Fde);rMo=r(Vlt,"wavlm"),Vlt.forEach(t),tMo=r(tye," \u2014 "),aj=n(tye,"A",{href:!0});var Xlt=s(aj);aMo=r(Xlt,"WavLMModel"),Xlt.forEach(t),nMo=r(tye," (WavLM model)"),tye.forEach(t),sMo=i($),su=n($,"LI",{});var aye=s(su);Tde=n(aye,"STRONG",{});var zlt=s(Tde);lMo=r(zlt,"xglm"),zlt.forEach(t),iMo=r(aye," \u2014 "),nj=n(aye,"A",{href:!0});var Wlt=s(nj);dMo=r(Wlt,"XGLMModel"),Wlt.forEach(t),cMo=r(aye," (XGLM model)"),aye.forEach(t),fMo=i($),lu=n($,"LI",{});var nye=s(lu);Mde=n(nye,"STRONG",{});var Qlt=s(Mde);mMo=r(Qlt,"xlm"),Qlt.forEach(t),gMo=r(nye," \u2014 "),sj=n(nye,"A",{href:!0});var Hlt=s(sj);hMo=r(Hlt,"XLMModel"),Hlt.forEach(t),pMo=r(nye," (XLM model)"),nye.forEach(t),_Mo=i($),iu=n($,"LI",{});var sye=s(iu);Ede=n(sye,"STRONG",{});var Ult=s(Ede);uMo=r(Ult,"xlm-prophetnet"),Ult.forEach(t),bMo=r(sye," \u2014 "),lj=n(sye,"A",{href:!0});var Jlt=s(lj);vMo=r(Jlt,"XLMProphetNetModel"),Jlt.forEach(t),FMo=r(sye," (XLM-ProphetNet model)"),sye.forEach(t),TMo=i($),du=n($,"LI",{});var lye=s(du);Cde=n(lye,"STRONG",{});var Ylt=s(Cde);MMo=r(Ylt,"xlm-roberta"),Ylt.forEach(t),EMo=r(lye," \u2014 "),ij=n(lye,"A",{href:!0});var Klt=s(ij);CMo=r(Klt,"XLMRobertaModel"),Klt.forEach(t),wMo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),AMo=i($),cu=n($,"LI",{});var iye=s(cu);wde=n(iye,"STRONG",{});var Zlt=s(wde);LMo=r(Zlt,"xlm-roberta-xl"),Zlt.forEach(t),yMo=r(iye," \u2014 "),dj=n(iye,"A",{href:!0});var eit=s(dj);xMo=r(eit,"XLMRobertaXLModel"),eit.forEach(t),$Mo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),kMo=i($),fu=n($,"LI",{});var dye=s(fu);Ade=n(dye,"STRONG",{});var oit=s(Ade);SMo=r(oit,"xlnet"),oit.forEach(t),RMo=r(dye," \u2014 "),cj=n(dye,"A",{href:!0});var rit=s(cj);PMo=r(rit,"XLNetModel"),rit.forEach(t),BMo=r(dye," (XLNet model)"),dye.forEach(t),IMo=i($),mu=n($,"LI",{});var cye=s(mu);Lde=n(cye,"STRONG",{});var tit=s(Lde);NMo=r(tit,"yolos"),tit.forEach(t),qMo=r(cye," \u2014 "),fj=n(cye,"A",{href:!0});var ait=s(fj);jMo=r(ait,"YolosModel"),ait.forEach(t),DMo=r(cye," (YOLOS model)"),cye.forEach(t),GMo=i($),gu=n($,"LI",{});var fye=s(gu);yde=n(fye,"STRONG",{});var nit=s(yde);OMo=r(nit,"yoso"),nit.forEach(t),VMo=r(fye," \u2014 "),mj=n(fye,"A",{href:!0});var sit=s(mj);XMo=r(sit,"YosoModel"),sit.forEach(t),zMo=r(fye," (YOSO model)"),fye.forEach(t),$.forEach(t),WMo=i(oa),hu=n(oa,"P",{});var mye=s(hu);QMo=r(mye,"The model is set in evaluation mode by default using "),xde=n(mye,"CODE",{});var lit=s(xde);HMo=r(lit,"model.eval()"),lit.forEach(t),UMo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(mye,"CODE",{});var iit=s($de);JMo=r(iit,"model.train()"),iit.forEach(t),mye.forEach(t),YMo=i(oa),T(pu.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),lDe=i(f),$i=n(f,"H2",{class:!0});var fOe=s($i);_u=n(fOe,"A",{id:!0,class:!0,href:!0});var dit=s(_u);kde=n(dit,"SPAN",{});var cit=s(kde);T(xA.$$.fragment,cit),cit.forEach(t),dit.forEach(t),KMo=i(fOe),Sde=n(fOe,"SPAN",{});var fit=s(Sde);ZMo=r(fit,"AutoModelForPreTraining"),fit.forEach(t),fOe.forEach(t),iDe=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T($A.$$.fragment,Xs),e4o=i(Xs),ki=n(Xs,"P",{});var uee=s(ki);o4o=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gj=n(uee,"A",{href:!0});var mit=s(gj);r4o=r(mit,"from_pretrained()"),mit.forEach(t),t4o=r(uee," class method or the "),hj=n(uee,"A",{href:!0});var git=s(hj);a4o=r(git,"from_config()"),git.forEach(t),n4o=r(uee,` class
method.`),uee.forEach(t),s4o=i(Xs),kA=n(Xs,"P",{});var mOe=s(kA);l4o=r(mOe,"This class cannot be instantiated directly using "),Rde=n(mOe,"CODE",{});var hit=s(Rde);i4o=r(hit,"__init__()"),hit.forEach(t),d4o=r(mOe," (throws an error)."),mOe.forEach(t),c4o=i(Xs),at=n(Xs,"DIV",{class:!0});var a0=s(at);T(SA.$$.fragment,a0),f4o=i(a0),Pde=n(a0,"P",{});var pit=s(Pde);m4o=r(pit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pit.forEach(t),g4o=i(a0),Si=n(a0,"P",{});var bee=s(Si);h4o=r(bee,`Note:
Loading a model from its configuration file does `),Bde=n(bee,"STRONG",{});var _it=s(Bde);p4o=r(_it,"not"),_it.forEach(t),_4o=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=n(bee,"A",{href:!0});var uit=s(pj);u4o=r(uit,"from_pretrained()"),uit.forEach(t),b4o=r(bee," to load the model weights."),bee.forEach(t),v4o=i(a0),T(uu.$$.fragment,a0),a0.forEach(t),F4o=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(RA.$$.fragment,ra),T4o=i(ra),Ide=n(ra,"P",{});var bit=s(Ide);M4o=r(bit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bit.forEach(t),E4o=i(ra),xa=n(ra,"P",{});var n0=s(xa);C4o=r(n0,"The model class to instantiate is selected based on the "),Nde=n(n0,"CODE",{});var vit=s(Nde);w4o=r(vit,"model_type"),vit.forEach(t),A4o=r(n0,` property of the config object (either
passed as an argument or loaded from `),qde=n(n0,"CODE",{});var Fit=s(qde);L4o=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),y4o=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(n0,"CODE",{});var Tit=s(jde);x4o=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),$4o=r(n0,":"),n0.forEach(t),k4o=i(ra),G=n(ra,"UL",{});var O=s(G);bu=n(O,"LI",{});var gye=s(bu);Dde=n(gye,"STRONG",{});var Mit=s(Dde);S4o=r(Mit,"albert"),Mit.forEach(t),R4o=r(gye," \u2014 "),_j=n(gye,"A",{href:!0});var Eit=s(_j);P4o=r(Eit,"AlbertForPreTraining"),Eit.forEach(t),B4o=r(gye," (ALBERT model)"),gye.forEach(t),I4o=i(O),vu=n(O,"LI",{});var hye=s(vu);Gde=n(hye,"STRONG",{});var Cit=s(Gde);N4o=r(Cit,"bart"),Cit.forEach(t),q4o=r(hye," \u2014 "),uj=n(hye,"A",{href:!0});var wit=s(uj);j4o=r(wit,"BartForConditionalGeneration"),wit.forEach(t),D4o=r(hye," (BART model)"),hye.forEach(t),G4o=i(O),Fu=n(O,"LI",{});var pye=s(Fu);Ode=n(pye,"STRONG",{});var Ait=s(Ode);O4o=r(Ait,"bert"),Ait.forEach(t),V4o=r(pye," \u2014 "),bj=n(pye,"A",{href:!0});var Lit=s(bj);X4o=r(Lit,"BertForPreTraining"),Lit.forEach(t),z4o=r(pye," (BERT model)"),pye.forEach(t),W4o=i(O),Tu=n(O,"LI",{});var _ye=s(Tu);Vde=n(_ye,"STRONG",{});var yit=s(Vde);Q4o=r(yit,"big_bird"),yit.forEach(t),H4o=r(_ye," \u2014 "),vj=n(_ye,"A",{href:!0});var xit=s(vj);U4o=r(xit,"BigBirdForPreTraining"),xit.forEach(t),J4o=r(_ye," (BigBird model)"),_ye.forEach(t),Y4o=i(O),Mu=n(O,"LI",{});var uye=s(Mu);Xde=n(uye,"STRONG",{});var $it=s(Xde);K4o=r($it,"bloom"),$it.forEach(t),Z4o=r(uye," \u2014 "),Fj=n(uye,"A",{href:!0});var kit=s(Fj);eEo=r(kit,"BloomForCausalLM"),kit.forEach(t),oEo=r(uye," (BLOOM model)"),uye.forEach(t),rEo=i(O),Eu=n(O,"LI",{});var bye=s(Eu);zde=n(bye,"STRONG",{});var Sit=s(zde);tEo=r(Sit,"camembert"),Sit.forEach(t),aEo=r(bye," \u2014 "),Tj=n(bye,"A",{href:!0});var Rit=s(Tj);nEo=r(Rit,"CamembertForMaskedLM"),Rit.forEach(t),sEo=r(bye," (CamemBERT model)"),bye.forEach(t),lEo=i(O),Cu=n(O,"LI",{});var vye=s(Cu);Wde=n(vye,"STRONG",{});var Pit=s(Wde);iEo=r(Pit,"ctrl"),Pit.forEach(t),dEo=r(vye," \u2014 "),Mj=n(vye,"A",{href:!0});var Bit=s(Mj);cEo=r(Bit,"CTRLLMHeadModel"),Bit.forEach(t),fEo=r(vye," (CTRL model)"),vye.forEach(t),mEo=i(O),wu=n(O,"LI",{});var Fye=s(wu);Qde=n(Fye,"STRONG",{});var Iit=s(Qde);gEo=r(Iit,"data2vec-text"),Iit.forEach(t),hEo=r(Fye," \u2014 "),Ej=n(Fye,"A",{href:!0});var Nit=s(Ej);pEo=r(Nit,"Data2VecTextForMaskedLM"),Nit.forEach(t),_Eo=r(Fye," (Data2VecText model)"),Fye.forEach(t),uEo=i(O),Au=n(O,"LI",{});var Tye=s(Au);Hde=n(Tye,"STRONG",{});var qit=s(Hde);bEo=r(qit,"deberta"),qit.forEach(t),vEo=r(Tye," \u2014 "),Cj=n(Tye,"A",{href:!0});var jit=s(Cj);FEo=r(jit,"DebertaForMaskedLM"),jit.forEach(t),TEo=r(Tye," (DeBERTa model)"),Tye.forEach(t),MEo=i(O),Lu=n(O,"LI",{});var Mye=s(Lu);Ude=n(Mye,"STRONG",{});var Dit=s(Ude);EEo=r(Dit,"deberta-v2"),Dit.forEach(t),CEo=r(Mye," \u2014 "),wj=n(Mye,"A",{href:!0});var Git=s(wj);wEo=r(Git,"DebertaV2ForMaskedLM"),Git.forEach(t),AEo=r(Mye," (DeBERTa-v2 model)"),Mye.forEach(t),LEo=i(O),yu=n(O,"LI",{});var Eye=s(yu);Jde=n(Eye,"STRONG",{});var Oit=s(Jde);yEo=r(Oit,"distilbert"),Oit.forEach(t),xEo=r(Eye," \u2014 "),Aj=n(Eye,"A",{href:!0});var Vit=s(Aj);$Eo=r(Vit,"DistilBertForMaskedLM"),Vit.forEach(t),kEo=r(Eye," (DistilBERT model)"),Eye.forEach(t),SEo=i(O),xu=n(O,"LI",{});var Cye=s(xu);Yde=n(Cye,"STRONG",{});var Xit=s(Yde);REo=r(Xit,"electra"),Xit.forEach(t),PEo=r(Cye," \u2014 "),Lj=n(Cye,"A",{href:!0});var zit=s(Lj);BEo=r(zit,"ElectraForPreTraining"),zit.forEach(t),IEo=r(Cye," (ELECTRA model)"),Cye.forEach(t),NEo=i(O),$u=n(O,"LI",{});var wye=s($u);Kde=n(wye,"STRONG",{});var Wit=s(Kde);qEo=r(Wit,"flaubert"),Wit.forEach(t),jEo=r(wye," \u2014 "),yj=n(wye,"A",{href:!0});var Qit=s(yj);DEo=r(Qit,"FlaubertWithLMHeadModel"),Qit.forEach(t),GEo=r(wye," (FlauBERT model)"),wye.forEach(t),OEo=i(O),ku=n(O,"LI",{});var Aye=s(ku);Zde=n(Aye,"STRONG",{});var Hit=s(Zde);VEo=r(Hit,"flava"),Hit.forEach(t),XEo=r(Aye," \u2014 "),xj=n(Aye,"A",{href:!0});var Uit=s(xj);zEo=r(Uit,"FlavaForPreTraining"),Uit.forEach(t),WEo=r(Aye," (FLAVA model)"),Aye.forEach(t),QEo=i(O),Su=n(O,"LI",{});var Lye=s(Su);ece=n(Lye,"STRONG",{});var Jit=s(ece);HEo=r(Jit,"fnet"),Jit.forEach(t),UEo=r(Lye," \u2014 "),$j=n(Lye,"A",{href:!0});var Yit=s($j);JEo=r(Yit,"FNetForPreTraining"),Yit.forEach(t),YEo=r(Lye," (FNet model)"),Lye.forEach(t),KEo=i(O),Ru=n(O,"LI",{});var yye=s(Ru);oce=n(yye,"STRONG",{});var Kit=s(oce);ZEo=r(Kit,"fsmt"),Kit.forEach(t),eCo=r(yye," \u2014 "),kj=n(yye,"A",{href:!0});var Zit=s(kj);oCo=r(Zit,"FSMTForConditionalGeneration"),Zit.forEach(t),rCo=r(yye," (FairSeq Machine-Translation model)"),yye.forEach(t),tCo=i(O),Pu=n(O,"LI",{});var xye=s(Pu);rce=n(xye,"STRONG",{});var edt=s(rce);aCo=r(edt,"funnel"),edt.forEach(t),nCo=r(xye," \u2014 "),Sj=n(xye,"A",{href:!0});var odt=s(Sj);sCo=r(odt,"FunnelForPreTraining"),odt.forEach(t),lCo=r(xye," (Funnel Transformer model)"),xye.forEach(t),iCo=i(O),Bu=n(O,"LI",{});var $ye=s(Bu);tce=n($ye,"STRONG",{});var rdt=s(tce);dCo=r(rdt,"gpt2"),rdt.forEach(t),cCo=r($ye," \u2014 "),Rj=n($ye,"A",{href:!0});var tdt=s(Rj);fCo=r(tdt,"GPT2LMHeadModel"),tdt.forEach(t),mCo=r($ye," (OpenAI GPT-2 model)"),$ye.forEach(t),gCo=i(O),Iu=n(O,"LI",{});var kye=s(Iu);ace=n(kye,"STRONG",{});var adt=s(ace);hCo=r(adt,"ibert"),adt.forEach(t),pCo=r(kye," \u2014 "),Pj=n(kye,"A",{href:!0});var ndt=s(Pj);_Co=r(ndt,"IBertForMaskedLM"),ndt.forEach(t),uCo=r(kye," (I-BERT model)"),kye.forEach(t),bCo=i(O),Nu=n(O,"LI",{});var Sye=s(Nu);nce=n(Sye,"STRONG",{});var sdt=s(nce);vCo=r(sdt,"layoutlm"),sdt.forEach(t),FCo=r(Sye," \u2014 "),Bj=n(Sye,"A",{href:!0});var ldt=s(Bj);TCo=r(ldt,"LayoutLMForMaskedLM"),ldt.forEach(t),MCo=r(Sye," (LayoutLM model)"),Sye.forEach(t),ECo=i(O),qu=n(O,"LI",{});var Rye=s(qu);sce=n(Rye,"STRONG",{});var idt=s(sce);CCo=r(idt,"longformer"),idt.forEach(t),wCo=r(Rye," \u2014 "),Ij=n(Rye,"A",{href:!0});var ddt=s(Ij);ACo=r(ddt,"LongformerForMaskedLM"),ddt.forEach(t),LCo=r(Rye," (Longformer model)"),Rye.forEach(t),yCo=i(O),ju=n(O,"LI",{});var Pye=s(ju);lce=n(Pye,"STRONG",{});var cdt=s(lce);xCo=r(cdt,"lxmert"),cdt.forEach(t),$Co=r(Pye," \u2014 "),Nj=n(Pye,"A",{href:!0});var fdt=s(Nj);kCo=r(fdt,"LxmertForPreTraining"),fdt.forEach(t),SCo=r(Pye," (LXMERT model)"),Pye.forEach(t),RCo=i(O),Du=n(O,"LI",{});var Bye=s(Du);ice=n(Bye,"STRONG",{});var mdt=s(ice);PCo=r(mdt,"megatron-bert"),mdt.forEach(t),BCo=r(Bye," \u2014 "),qj=n(Bye,"A",{href:!0});var gdt=s(qj);ICo=r(gdt,"MegatronBertForPreTraining"),gdt.forEach(t),NCo=r(Bye," (Megatron-BERT model)"),Bye.forEach(t),qCo=i(O),Gu=n(O,"LI",{});var Iye=s(Gu);dce=n(Iye,"STRONG",{});var hdt=s(dce);jCo=r(hdt,"mobilebert"),hdt.forEach(t),DCo=r(Iye," \u2014 "),jj=n(Iye,"A",{href:!0});var pdt=s(jj);GCo=r(pdt,"MobileBertForPreTraining"),pdt.forEach(t),OCo=r(Iye," (MobileBERT model)"),Iye.forEach(t),VCo=i(O),Ou=n(O,"LI",{});var Nye=s(Ou);cce=n(Nye,"STRONG",{});var _dt=s(cce);XCo=r(_dt,"mpnet"),_dt.forEach(t),zCo=r(Nye," \u2014 "),Dj=n(Nye,"A",{href:!0});var udt=s(Dj);WCo=r(udt,"MPNetForMaskedLM"),udt.forEach(t),QCo=r(Nye," (MPNet model)"),Nye.forEach(t),HCo=i(O),Vu=n(O,"LI",{});var qye=s(Vu);fce=n(qye,"STRONG",{});var bdt=s(fce);UCo=r(bdt,"openai-gpt"),bdt.forEach(t),JCo=r(qye," \u2014 "),Gj=n(qye,"A",{href:!0});var vdt=s(Gj);YCo=r(vdt,"OpenAIGPTLMHeadModel"),vdt.forEach(t),KCo=r(qye," (OpenAI GPT model)"),qye.forEach(t),ZCo=i(O),Xu=n(O,"LI",{});var jye=s(Xu);mce=n(jye,"STRONG",{});var Fdt=s(mce);e5o=r(Fdt,"retribert"),Fdt.forEach(t),o5o=r(jye," \u2014 "),Oj=n(jye,"A",{href:!0});var Tdt=s(Oj);r5o=r(Tdt,"RetriBertModel"),Tdt.forEach(t),t5o=r(jye," (RetriBERT model)"),jye.forEach(t),a5o=i(O),zu=n(O,"LI",{});var Dye=s(zu);gce=n(Dye,"STRONG",{});var Mdt=s(gce);n5o=r(Mdt,"roberta"),Mdt.forEach(t),s5o=r(Dye," \u2014 "),Vj=n(Dye,"A",{href:!0});var Edt=s(Vj);l5o=r(Edt,"RobertaForMaskedLM"),Edt.forEach(t),i5o=r(Dye," (RoBERTa model)"),Dye.forEach(t),d5o=i(O),Wu=n(O,"LI",{});var Gye=s(Wu);hce=n(Gye,"STRONG",{});var Cdt=s(hce);c5o=r(Cdt,"splinter"),Cdt.forEach(t),f5o=r(Gye," \u2014 "),Xj=n(Gye,"A",{href:!0});var wdt=s(Xj);m5o=r(wdt,"SplinterForPreTraining"),wdt.forEach(t),g5o=r(Gye," (Splinter model)"),Gye.forEach(t),h5o=i(O),Qu=n(O,"LI",{});var Oye=s(Qu);pce=n(Oye,"STRONG",{});var Adt=s(pce);p5o=r(Adt,"squeezebert"),Adt.forEach(t),_5o=r(Oye," \u2014 "),zj=n(Oye,"A",{href:!0});var Ldt=s(zj);u5o=r(Ldt,"SqueezeBertForMaskedLM"),Ldt.forEach(t),b5o=r(Oye," (SqueezeBERT model)"),Oye.forEach(t),v5o=i(O),Hu=n(O,"LI",{});var Vye=s(Hu);_ce=n(Vye,"STRONG",{});var ydt=s(_ce);F5o=r(ydt,"t5"),ydt.forEach(t),T5o=r(Vye," \u2014 "),Wj=n(Vye,"A",{href:!0});var xdt=s(Wj);M5o=r(xdt,"T5ForConditionalGeneration"),xdt.forEach(t),E5o=r(Vye," (T5 model)"),Vye.forEach(t),C5o=i(O),Uu=n(O,"LI",{});var Xye=s(Uu);uce=n(Xye,"STRONG",{});var $dt=s(uce);w5o=r($dt,"tapas"),$dt.forEach(t),A5o=r(Xye," \u2014 "),Qj=n(Xye,"A",{href:!0});var kdt=s(Qj);L5o=r(kdt,"TapasForMaskedLM"),kdt.forEach(t),y5o=r(Xye," (TAPAS model)"),Xye.forEach(t),x5o=i(O),Ju=n(O,"LI",{});var zye=s(Ju);bce=n(zye,"STRONG",{});var Sdt=s(bce);$5o=r(Sdt,"transfo-xl"),Sdt.forEach(t),k5o=r(zye," \u2014 "),Hj=n(zye,"A",{href:!0});var Rdt=s(Hj);S5o=r(Rdt,"TransfoXLLMHeadModel"),Rdt.forEach(t),R5o=r(zye," (Transformer-XL model)"),zye.forEach(t),P5o=i(O),Yu=n(O,"LI",{});var Wye=s(Yu);vce=n(Wye,"STRONG",{});var Pdt=s(vce);B5o=r(Pdt,"unispeech"),Pdt.forEach(t),I5o=r(Wye," \u2014 "),Uj=n(Wye,"A",{href:!0});var Bdt=s(Uj);N5o=r(Bdt,"UniSpeechForPreTraining"),Bdt.forEach(t),q5o=r(Wye," (UniSpeech model)"),Wye.forEach(t),j5o=i(O),Ku=n(O,"LI",{});var Qye=s(Ku);Fce=n(Qye,"STRONG",{});var Idt=s(Fce);D5o=r(Idt,"unispeech-sat"),Idt.forEach(t),G5o=r(Qye," \u2014 "),Jj=n(Qye,"A",{href:!0});var Ndt=s(Jj);O5o=r(Ndt,"UniSpeechSatForPreTraining"),Ndt.forEach(t),V5o=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),X5o=i(O),Zu=n(O,"LI",{});var Hye=s(Zu);Tce=n(Hye,"STRONG",{});var qdt=s(Tce);z5o=r(qdt,"visual_bert"),qdt.forEach(t),W5o=r(Hye," \u2014 "),Yj=n(Hye,"A",{href:!0});var jdt=s(Yj);Q5o=r(jdt,"VisualBertForPreTraining"),jdt.forEach(t),H5o=r(Hye," (VisualBERT model)"),Hye.forEach(t),U5o=i(O),e2=n(O,"LI",{});var Uye=s(e2);Mce=n(Uye,"STRONG",{});var Ddt=s(Mce);J5o=r(Ddt,"vit_mae"),Ddt.forEach(t),Y5o=r(Uye," \u2014 "),Kj=n(Uye,"A",{href:!0});var Gdt=s(Kj);K5o=r(Gdt,"ViTMAEForPreTraining"),Gdt.forEach(t),Z5o=r(Uye," (ViTMAE model)"),Uye.forEach(t),e3o=i(O),o2=n(O,"LI",{});var Jye=s(o2);Ece=n(Jye,"STRONG",{});var Odt=s(Ece);o3o=r(Odt,"wav2vec2"),Odt.forEach(t),r3o=r(Jye," \u2014 "),Zj=n(Jye,"A",{href:!0});var Vdt=s(Zj);t3o=r(Vdt,"Wav2Vec2ForPreTraining"),Vdt.forEach(t),a3o=r(Jye," (Wav2Vec2 model)"),Jye.forEach(t),n3o=i(O),r2=n(O,"LI",{});var Yye=s(r2);Cce=n(Yye,"STRONG",{});var Xdt=s(Cce);s3o=r(Xdt,"wav2vec2-conformer"),Xdt.forEach(t),l3o=r(Yye," \u2014 "),eD=n(Yye,"A",{href:!0});var zdt=s(eD);i3o=r(zdt,"Wav2Vec2ConformerForPreTraining"),zdt.forEach(t),d3o=r(Yye," (Wav2Vec2-Conformer model)"),Yye.forEach(t),c3o=i(O),t2=n(O,"LI",{});var Kye=s(t2);wce=n(Kye,"STRONG",{});var Wdt=s(wce);f3o=r(Wdt,"xlm"),Wdt.forEach(t),m3o=r(Kye," \u2014 "),oD=n(Kye,"A",{href:!0});var Qdt=s(oD);g3o=r(Qdt,"XLMWithLMHeadModel"),Qdt.forEach(t),h3o=r(Kye," (XLM model)"),Kye.forEach(t),p3o=i(O),a2=n(O,"LI",{});var Zye=s(a2);Ace=n(Zye,"STRONG",{});var Hdt=s(Ace);_3o=r(Hdt,"xlm-roberta"),Hdt.forEach(t),u3o=r(Zye," \u2014 "),rD=n(Zye,"A",{href:!0});var Udt=s(rD);b3o=r(Udt,"XLMRobertaForMaskedLM"),Udt.forEach(t),v3o=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),F3o=i(O),n2=n(O,"LI",{});var e8e=s(n2);Lce=n(e8e,"STRONG",{});var Jdt=s(Lce);T3o=r(Jdt,"xlm-roberta-xl"),Jdt.forEach(t),M3o=r(e8e," \u2014 "),tD=n(e8e,"A",{href:!0});var Ydt=s(tD);E3o=r(Ydt,"XLMRobertaXLForMaskedLM"),Ydt.forEach(t),C3o=r(e8e," (XLM-RoBERTa-XL model)"),e8e.forEach(t),w3o=i(O),s2=n(O,"LI",{});var o8e=s(s2);yce=n(o8e,"STRONG",{});var Kdt=s(yce);A3o=r(Kdt,"xlnet"),Kdt.forEach(t),L3o=r(o8e," \u2014 "),aD=n(o8e,"A",{href:!0});var Zdt=s(aD);y3o=r(Zdt,"XLNetLMHeadModel"),Zdt.forEach(t),x3o=r(o8e," (XLNet model)"),o8e.forEach(t),O.forEach(t),$3o=i(ra),l2=n(ra,"P",{});var r8e=s(l2);k3o=r(r8e,"The model is set in evaluation mode by default using "),xce=n(r8e,"CODE",{});var ect=s(xce);S3o=r(ect,"model.eval()"),ect.forEach(t),R3o=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(r8e,"CODE",{});var oct=s($ce);P3o=r(oct,"model.train()"),oct.forEach(t),r8e.forEach(t),B3o=i(ra),T(i2.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),dDe=i(f),Ri=n(f,"H2",{class:!0});var gOe=s(Ri);d2=n(gOe,"A",{id:!0,class:!0,href:!0});var rct=s(d2);kce=n(rct,"SPAN",{});var tct=s(kce);T(PA.$$.fragment,tct),tct.forEach(t),rct.forEach(t),I3o=i(gOe),Sce=n(gOe,"SPAN",{});var act=s(Sce);N3o=r(act,"AutoModelForCausalLM"),act.forEach(t),gOe.forEach(t),cDe=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(BA.$$.fragment,zs),q3o=i(zs),Pi=n(zs,"P",{});var vee=s(Pi);j3o=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nD=n(vee,"A",{href:!0});var nct=s(nD);D3o=r(nct,"from_pretrained()"),nct.forEach(t),G3o=r(vee," class method or the "),sD=n(vee,"A",{href:!0});var sct=s(sD);O3o=r(sct,"from_config()"),sct.forEach(t),V3o=r(vee,` class
method.`),vee.forEach(t),X3o=i(zs),IA=n(zs,"P",{});var hOe=s(IA);z3o=r(hOe,"This class cannot be instantiated directly using "),Rce=n(hOe,"CODE",{});var lct=s(Rce);W3o=r(lct,"__init__()"),lct.forEach(t),Q3o=r(hOe," (throws an error)."),hOe.forEach(t),H3o=i(zs),nt=n(zs,"DIV",{class:!0});var s0=s(nt);T(NA.$$.fragment,s0),U3o=i(s0),Pce=n(s0,"P",{});var ict=s(Pce);J3o=r(ict,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ict.forEach(t),Y3o=i(s0),Bi=n(s0,"P",{});var Fee=s(Bi);K3o=r(Fee,`Note:
Loading a model from its configuration file does `),Bce=n(Fee,"STRONG",{});var dct=s(Bce);Z3o=r(dct,"not"),dct.forEach(t),e0o=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(Fee,"A",{href:!0});var cct=s(lD);o0o=r(cct,"from_pretrained()"),cct.forEach(t),r0o=r(Fee," to load the model weights."),Fee.forEach(t),t0o=i(s0),T(c2.$$.fragment,s0),s0.forEach(t),a0o=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(qA.$$.fragment,ta),n0o=i(ta),Ice=n(ta,"P",{});var fct=s(Ice);s0o=r(fct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fct.forEach(t),l0o=i(ta),$a=n(ta,"P",{});var l0=s($a);i0o=r(l0,"The model class to instantiate is selected based on the "),Nce=n(l0,"CODE",{});var mct=s(Nce);d0o=r(mct,"model_type"),mct.forEach(t),c0o=r(l0,` property of the config object (either
passed as an argument or loaded from `),qce=n(l0,"CODE",{});var gct=s(qce);f0o=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),m0o=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(l0,"CODE",{});var hct=s(jce);g0o=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),h0o=r(l0,":"),l0.forEach(t),p0o=i(ta),z=n(ta,"UL",{});var W=s(z);f2=n(W,"LI",{});var t8e=s(f2);Dce=n(t8e,"STRONG",{});var pct=s(Dce);_0o=r(pct,"bart"),pct.forEach(t),u0o=r(t8e," \u2014 "),iD=n(t8e,"A",{href:!0});var _ct=s(iD);b0o=r(_ct,"BartForCausalLM"),_ct.forEach(t),v0o=r(t8e," (BART model)"),t8e.forEach(t),F0o=i(W),m2=n(W,"LI",{});var a8e=s(m2);Gce=n(a8e,"STRONG",{});var uct=s(Gce);T0o=r(uct,"bert"),uct.forEach(t),M0o=r(a8e," \u2014 "),dD=n(a8e,"A",{href:!0});var bct=s(dD);E0o=r(bct,"BertLMHeadModel"),bct.forEach(t),C0o=r(a8e," (BERT model)"),a8e.forEach(t),w0o=i(W),g2=n(W,"LI",{});var n8e=s(g2);Oce=n(n8e,"STRONG",{});var vct=s(Oce);A0o=r(vct,"bert-generation"),vct.forEach(t),L0o=r(n8e," \u2014 "),cD=n(n8e,"A",{href:!0});var Fct=s(cD);y0o=r(Fct,"BertGenerationDecoder"),Fct.forEach(t),x0o=r(n8e," (Bert Generation model)"),n8e.forEach(t),$0o=i(W),h2=n(W,"LI",{});var s8e=s(h2);Vce=n(s8e,"STRONG",{});var Tct=s(Vce);k0o=r(Tct,"big_bird"),Tct.forEach(t),S0o=r(s8e," \u2014 "),fD=n(s8e,"A",{href:!0});var Mct=s(fD);R0o=r(Mct,"BigBirdForCausalLM"),Mct.forEach(t),P0o=r(s8e," (BigBird model)"),s8e.forEach(t),B0o=i(W),p2=n(W,"LI",{});var l8e=s(p2);Xce=n(l8e,"STRONG",{});var Ect=s(Xce);I0o=r(Ect,"bigbird_pegasus"),Ect.forEach(t),N0o=r(l8e," \u2014 "),mD=n(l8e,"A",{href:!0});var Cct=s(mD);q0o=r(Cct,"BigBirdPegasusForCausalLM"),Cct.forEach(t),j0o=r(l8e," (BigBird-Pegasus model)"),l8e.forEach(t),D0o=i(W),_2=n(W,"LI",{});var i8e=s(_2);zce=n(i8e,"STRONG",{});var wct=s(zce);G0o=r(wct,"blenderbot"),wct.forEach(t),O0o=r(i8e," \u2014 "),gD=n(i8e,"A",{href:!0});var Act=s(gD);V0o=r(Act,"BlenderbotForCausalLM"),Act.forEach(t),X0o=r(i8e," (Blenderbot model)"),i8e.forEach(t),z0o=i(W),u2=n(W,"LI",{});var d8e=s(u2);Wce=n(d8e,"STRONG",{});var Lct=s(Wce);W0o=r(Lct,"blenderbot-small"),Lct.forEach(t),Q0o=r(d8e," \u2014 "),hD=n(d8e,"A",{href:!0});var yct=s(hD);H0o=r(yct,"BlenderbotSmallForCausalLM"),yct.forEach(t),U0o=r(d8e," (BlenderbotSmall model)"),d8e.forEach(t),J0o=i(W),b2=n(W,"LI",{});var c8e=s(b2);Qce=n(c8e,"STRONG",{});var xct=s(Qce);Y0o=r(xct,"bloom"),xct.forEach(t),K0o=r(c8e," \u2014 "),pD=n(c8e,"A",{href:!0});var $ct=s(pD);Z0o=r($ct,"BloomForCausalLM"),$ct.forEach(t),ewo=r(c8e," (BLOOM model)"),c8e.forEach(t),owo=i(W),v2=n(W,"LI",{});var f8e=s(v2);Hce=n(f8e,"STRONG",{});var kct=s(Hce);rwo=r(kct,"camembert"),kct.forEach(t),two=r(f8e," \u2014 "),_D=n(f8e,"A",{href:!0});var Sct=s(_D);awo=r(Sct,"CamembertForCausalLM"),Sct.forEach(t),nwo=r(f8e," (CamemBERT model)"),f8e.forEach(t),swo=i(W),F2=n(W,"LI",{});var m8e=s(F2);Uce=n(m8e,"STRONG",{});var Rct=s(Uce);lwo=r(Rct,"ctrl"),Rct.forEach(t),iwo=r(m8e," \u2014 "),uD=n(m8e,"A",{href:!0});var Pct=s(uD);dwo=r(Pct,"CTRLLMHeadModel"),Pct.forEach(t),cwo=r(m8e," (CTRL model)"),m8e.forEach(t),fwo=i(W),T2=n(W,"LI",{});var g8e=s(T2);Jce=n(g8e,"STRONG",{});var Bct=s(Jce);mwo=r(Bct,"data2vec-text"),Bct.forEach(t),gwo=r(g8e," \u2014 "),bD=n(g8e,"A",{href:!0});var Ict=s(bD);hwo=r(Ict,"Data2VecTextForCausalLM"),Ict.forEach(t),pwo=r(g8e," (Data2VecText model)"),g8e.forEach(t),_wo=i(W),M2=n(W,"LI",{});var h8e=s(M2);Yce=n(h8e,"STRONG",{});var Nct=s(Yce);uwo=r(Nct,"electra"),Nct.forEach(t),bwo=r(h8e," \u2014 "),vD=n(h8e,"A",{href:!0});var qct=s(vD);vwo=r(qct,"ElectraForCausalLM"),qct.forEach(t),Fwo=r(h8e," (ELECTRA model)"),h8e.forEach(t),Two=i(W),E2=n(W,"LI",{});var p8e=s(E2);Kce=n(p8e,"STRONG",{});var jct=s(Kce);Mwo=r(jct,"gpt2"),jct.forEach(t),Ewo=r(p8e," \u2014 "),FD=n(p8e,"A",{href:!0});var Dct=s(FD);Cwo=r(Dct,"GPT2LMHeadModel"),Dct.forEach(t),wwo=r(p8e," (OpenAI GPT-2 model)"),p8e.forEach(t),Awo=i(W),C2=n(W,"LI",{});var _8e=s(C2);Zce=n(_8e,"STRONG",{});var Gct=s(Zce);Lwo=r(Gct,"gpt_neo"),Gct.forEach(t),ywo=r(_8e," \u2014 "),TD=n(_8e,"A",{href:!0});var Oct=s(TD);xwo=r(Oct,"GPTNeoForCausalLM"),Oct.forEach(t),$wo=r(_8e," (GPT Neo model)"),_8e.forEach(t),kwo=i(W),w2=n(W,"LI",{});var u8e=s(w2);efe=n(u8e,"STRONG",{});var Vct=s(efe);Swo=r(Vct,"gpt_neox"),Vct.forEach(t),Rwo=r(u8e," \u2014 "),MD=n(u8e,"A",{href:!0});var Xct=s(MD);Pwo=r(Xct,"GPTNeoXForCausalLM"),Xct.forEach(t),Bwo=r(u8e," (GPT NeoX model)"),u8e.forEach(t),Iwo=i(W),A2=n(W,"LI",{});var b8e=s(A2);ofe=n(b8e,"STRONG",{});var zct=s(ofe);Nwo=r(zct,"gptj"),zct.forEach(t),qwo=r(b8e," \u2014 "),ED=n(b8e,"A",{href:!0});var Wct=s(ED);jwo=r(Wct,"GPTJForCausalLM"),Wct.forEach(t),Dwo=r(b8e," (GPT-J model)"),b8e.forEach(t),Gwo=i(W),L2=n(W,"LI",{});var v8e=s(L2);rfe=n(v8e,"STRONG",{});var Qct=s(rfe);Owo=r(Qct,"marian"),Qct.forEach(t),Vwo=r(v8e," \u2014 "),CD=n(v8e,"A",{href:!0});var Hct=s(CD);Xwo=r(Hct,"MarianForCausalLM"),Hct.forEach(t),zwo=r(v8e," (Marian model)"),v8e.forEach(t),Wwo=i(W),y2=n(W,"LI",{});var F8e=s(y2);tfe=n(F8e,"STRONG",{});var Uct=s(tfe);Qwo=r(Uct,"mbart"),Uct.forEach(t),Hwo=r(F8e," \u2014 "),wD=n(F8e,"A",{href:!0});var Jct=s(wD);Uwo=r(Jct,"MBartForCausalLM"),Jct.forEach(t),Jwo=r(F8e," (mBART model)"),F8e.forEach(t),Ywo=i(W),x2=n(W,"LI",{});var T8e=s(x2);afe=n(T8e,"STRONG",{});var Yct=s(afe);Kwo=r(Yct,"megatron-bert"),Yct.forEach(t),Zwo=r(T8e," \u2014 "),AD=n(T8e,"A",{href:!0});var Kct=s(AD);eAo=r(Kct,"MegatronBertForCausalLM"),Kct.forEach(t),oAo=r(T8e," (Megatron-BERT model)"),T8e.forEach(t),rAo=i(W),$2=n(W,"LI",{});var M8e=s($2);nfe=n(M8e,"STRONG",{});var Zct=s(nfe);tAo=r(Zct,"openai-gpt"),Zct.forEach(t),aAo=r(M8e," \u2014 "),LD=n(M8e,"A",{href:!0});var eft=s(LD);nAo=r(eft,"OpenAIGPTLMHeadModel"),eft.forEach(t),sAo=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),lAo=i(W),k2=n(W,"LI",{});var E8e=s(k2);sfe=n(E8e,"STRONG",{});var oft=s(sfe);iAo=r(oft,"opt"),oft.forEach(t),dAo=r(E8e," \u2014 "),yD=n(E8e,"A",{href:!0});var rft=s(yD);cAo=r(rft,"OPTForCausalLM"),rft.forEach(t),fAo=r(E8e," (OPT model)"),E8e.forEach(t),mAo=i(W),S2=n(W,"LI",{});var C8e=s(S2);lfe=n(C8e,"STRONG",{});var tft=s(lfe);gAo=r(tft,"pegasus"),tft.forEach(t),hAo=r(C8e," \u2014 "),xD=n(C8e,"A",{href:!0});var aft=s(xD);pAo=r(aft,"PegasusForCausalLM"),aft.forEach(t),_Ao=r(C8e," (Pegasus model)"),C8e.forEach(t),uAo=i(W),R2=n(W,"LI",{});var w8e=s(R2);ife=n(w8e,"STRONG",{});var nft=s(ife);bAo=r(nft,"plbart"),nft.forEach(t),vAo=r(w8e," \u2014 "),$D=n(w8e,"A",{href:!0});var sft=s($D);FAo=r(sft,"PLBartForCausalLM"),sft.forEach(t),TAo=r(w8e," (PLBart model)"),w8e.forEach(t),MAo=i(W),P2=n(W,"LI",{});var A8e=s(P2);dfe=n(A8e,"STRONG",{});var lft=s(dfe);EAo=r(lft,"prophetnet"),lft.forEach(t),CAo=r(A8e," \u2014 "),kD=n(A8e,"A",{href:!0});var ift=s(kD);wAo=r(ift,"ProphetNetForCausalLM"),ift.forEach(t),AAo=r(A8e," (ProphetNet model)"),A8e.forEach(t),LAo=i(W),B2=n(W,"LI",{});var L8e=s(B2);cfe=n(L8e,"STRONG",{});var dft=s(cfe);yAo=r(dft,"qdqbert"),dft.forEach(t),xAo=r(L8e," \u2014 "),SD=n(L8e,"A",{href:!0});var cft=s(SD);$Ao=r(cft,"QDQBertLMHeadModel"),cft.forEach(t),kAo=r(L8e," (QDQBert model)"),L8e.forEach(t),SAo=i(W),I2=n(W,"LI",{});var y8e=s(I2);ffe=n(y8e,"STRONG",{});var fft=s(ffe);RAo=r(fft,"reformer"),fft.forEach(t),PAo=r(y8e," \u2014 "),RD=n(y8e,"A",{href:!0});var mft=s(RD);BAo=r(mft,"ReformerModelWithLMHead"),mft.forEach(t),IAo=r(y8e," (Reformer model)"),y8e.forEach(t),NAo=i(W),N2=n(W,"LI",{});var x8e=s(N2);mfe=n(x8e,"STRONG",{});var gft=s(mfe);qAo=r(gft,"rembert"),gft.forEach(t),jAo=r(x8e," \u2014 "),PD=n(x8e,"A",{href:!0});var hft=s(PD);DAo=r(hft,"RemBertForCausalLM"),hft.forEach(t),GAo=r(x8e," (RemBERT model)"),x8e.forEach(t),OAo=i(W),q2=n(W,"LI",{});var $8e=s(q2);gfe=n($8e,"STRONG",{});var pft=s(gfe);VAo=r(pft,"roberta"),pft.forEach(t),XAo=r($8e," \u2014 "),BD=n($8e,"A",{href:!0});var _ft=s(BD);zAo=r(_ft,"RobertaForCausalLM"),_ft.forEach(t),WAo=r($8e," (RoBERTa model)"),$8e.forEach(t),QAo=i(W),j2=n(W,"LI",{});var k8e=s(j2);hfe=n(k8e,"STRONG",{});var uft=s(hfe);HAo=r(uft,"roformer"),uft.forEach(t),UAo=r(k8e," \u2014 "),ID=n(k8e,"A",{href:!0});var bft=s(ID);JAo=r(bft,"RoFormerForCausalLM"),bft.forEach(t),YAo=r(k8e," (RoFormer model)"),k8e.forEach(t),KAo=i(W),D2=n(W,"LI",{});var S8e=s(D2);pfe=n(S8e,"STRONG",{});var vft=s(pfe);ZAo=r(vft,"speech_to_text_2"),vft.forEach(t),eLo=r(S8e," \u2014 "),ND=n(S8e,"A",{href:!0});var Fft=s(ND);oLo=r(Fft,"Speech2Text2ForCausalLM"),Fft.forEach(t),rLo=r(S8e," (Speech2Text2 model)"),S8e.forEach(t),tLo=i(W),G2=n(W,"LI",{});var R8e=s(G2);_fe=n(R8e,"STRONG",{});var Tft=s(_fe);aLo=r(Tft,"transfo-xl"),Tft.forEach(t),nLo=r(R8e," \u2014 "),qD=n(R8e,"A",{href:!0});var Mft=s(qD);sLo=r(Mft,"TransfoXLLMHeadModel"),Mft.forEach(t),lLo=r(R8e," (Transformer-XL model)"),R8e.forEach(t),iLo=i(W),O2=n(W,"LI",{});var P8e=s(O2);ufe=n(P8e,"STRONG",{});var Eft=s(ufe);dLo=r(Eft,"trocr"),Eft.forEach(t),cLo=r(P8e," \u2014 "),jD=n(P8e,"A",{href:!0});var Cft=s(jD);fLo=r(Cft,"TrOCRForCausalLM"),Cft.forEach(t),mLo=r(P8e," (TrOCR model)"),P8e.forEach(t),gLo=i(W),V2=n(W,"LI",{});var B8e=s(V2);bfe=n(B8e,"STRONG",{});var wft=s(bfe);hLo=r(wft,"xglm"),wft.forEach(t),pLo=r(B8e," \u2014 "),DD=n(B8e,"A",{href:!0});var Aft=s(DD);_Lo=r(Aft,"XGLMForCausalLM"),Aft.forEach(t),uLo=r(B8e," (XGLM model)"),B8e.forEach(t),bLo=i(W),X2=n(W,"LI",{});var I8e=s(X2);vfe=n(I8e,"STRONG",{});var Lft=s(vfe);vLo=r(Lft,"xlm"),Lft.forEach(t),FLo=r(I8e," \u2014 "),GD=n(I8e,"A",{href:!0});var yft=s(GD);TLo=r(yft,"XLMWithLMHeadModel"),yft.forEach(t),MLo=r(I8e," (XLM model)"),I8e.forEach(t),ELo=i(W),z2=n(W,"LI",{});var N8e=s(z2);Ffe=n(N8e,"STRONG",{});var xft=s(Ffe);CLo=r(xft,"xlm-prophetnet"),xft.forEach(t),wLo=r(N8e," \u2014 "),OD=n(N8e,"A",{href:!0});var $ft=s(OD);ALo=r($ft,"XLMProphetNetForCausalLM"),$ft.forEach(t),LLo=r(N8e," (XLM-ProphetNet model)"),N8e.forEach(t),yLo=i(W),W2=n(W,"LI",{});var q8e=s(W2);Tfe=n(q8e,"STRONG",{});var kft=s(Tfe);xLo=r(kft,"xlm-roberta"),kft.forEach(t),$Lo=r(q8e," \u2014 "),VD=n(q8e,"A",{href:!0});var Sft=s(VD);kLo=r(Sft,"XLMRobertaForCausalLM"),Sft.forEach(t),SLo=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),RLo=i(W),Q2=n(W,"LI",{});var j8e=s(Q2);Mfe=n(j8e,"STRONG",{});var Rft=s(Mfe);PLo=r(Rft,"xlm-roberta-xl"),Rft.forEach(t),BLo=r(j8e," \u2014 "),XD=n(j8e,"A",{href:!0});var Pft=s(XD);ILo=r(Pft,"XLMRobertaXLForCausalLM"),Pft.forEach(t),NLo=r(j8e," (XLM-RoBERTa-XL model)"),j8e.forEach(t),qLo=i(W),H2=n(W,"LI",{});var D8e=s(H2);Efe=n(D8e,"STRONG",{});var Bft=s(Efe);jLo=r(Bft,"xlnet"),Bft.forEach(t),DLo=r(D8e," \u2014 "),zD=n(D8e,"A",{href:!0});var Ift=s(zD);GLo=r(Ift,"XLNetLMHeadModel"),Ift.forEach(t),OLo=r(D8e," (XLNet model)"),D8e.forEach(t),W.forEach(t),VLo=i(ta),U2=n(ta,"P",{});var G8e=s(U2);XLo=r(G8e,"The model is set in evaluation mode by default using "),Cfe=n(G8e,"CODE",{});var Nft=s(Cfe);zLo=r(Nft,"model.eval()"),Nft.forEach(t),WLo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(G8e,"CODE",{});var qft=s(wfe);QLo=r(qft,"model.train()"),qft.forEach(t),G8e.forEach(t),HLo=i(ta),T(J2.$$.fragment,ta),ta.forEach(t),zs.forEach(t),fDe=i(f),Ii=n(f,"H2",{class:!0});var pOe=s(Ii);Y2=n(pOe,"A",{id:!0,class:!0,href:!0});var jft=s(Y2);Afe=n(jft,"SPAN",{});var Dft=s(Afe);T(jA.$$.fragment,Dft),Dft.forEach(t),jft.forEach(t),ULo=i(pOe),Lfe=n(pOe,"SPAN",{});var Gft=s(Lfe);JLo=r(Gft,"AutoModelForMaskedLM"),Gft.forEach(t),pOe.forEach(t),mDe=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(DA.$$.fragment,Ws),YLo=i(Ws),Ni=n(Ws,"P",{});var Tee=s(Ni);KLo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WD=n(Tee,"A",{href:!0});var Oft=s(WD);ZLo=r(Oft,"from_pretrained()"),Oft.forEach(t),eyo=r(Tee," class method or the "),QD=n(Tee,"A",{href:!0});var Vft=s(QD);oyo=r(Vft,"from_config()"),Vft.forEach(t),ryo=r(Tee,` class
method.`),Tee.forEach(t),tyo=i(Ws),GA=n(Ws,"P",{});var _Oe=s(GA);ayo=r(_Oe,"This class cannot be instantiated directly using "),yfe=n(_Oe,"CODE",{});var Xft=s(yfe);nyo=r(Xft,"__init__()"),Xft.forEach(t),syo=r(_Oe," (throws an error)."),_Oe.forEach(t),lyo=i(Ws),st=n(Ws,"DIV",{class:!0});var i0=s(st);T(OA.$$.fragment,i0),iyo=i(i0),xfe=n(i0,"P",{});var zft=s(xfe);dyo=r(zft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zft.forEach(t),cyo=i(i0),qi=n(i0,"P",{});var Mee=s(qi);fyo=r(Mee,`Note:
Loading a model from its configuration file does `),$fe=n(Mee,"STRONG",{});var Wft=s($fe);myo=r(Wft,"not"),Wft.forEach(t),gyo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(Mee,"A",{href:!0});var Qft=s(HD);hyo=r(Qft,"from_pretrained()"),Qft.forEach(t),pyo=r(Mee," to load the model weights."),Mee.forEach(t),_yo=i(i0),T(K2.$$.fragment,i0),i0.forEach(t),uyo=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(VA.$$.fragment,aa),byo=i(aa),kfe=n(aa,"P",{});var Hft=s(kfe);vyo=r(Hft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hft.forEach(t),Fyo=i(aa),ka=n(aa,"P",{});var d0=s(ka);Tyo=r(d0,"The model class to instantiate is selected based on the "),Sfe=n(d0,"CODE",{});var Uft=s(Sfe);Myo=r(Uft,"model_type"),Uft.forEach(t),Eyo=r(d0,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(d0,"CODE",{});var Jft=s(Rfe);Cyo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),wyo=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(d0,"CODE",{});var Yft=s(Pfe);Ayo=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),Lyo=r(d0,":"),d0.forEach(t),yyo=i(aa),Q=n(aa,"UL",{});var H=s(Q);Z2=n(H,"LI",{});var O8e=s(Z2);Bfe=n(O8e,"STRONG",{});var Kft=s(Bfe);xyo=r(Kft,"albert"),Kft.forEach(t),$yo=r(O8e," \u2014 "),UD=n(O8e,"A",{href:!0});var Zft=s(UD);kyo=r(Zft,"AlbertForMaskedLM"),Zft.forEach(t),Syo=r(O8e," (ALBERT model)"),O8e.forEach(t),Ryo=i(H),e1=n(H,"LI",{});var V8e=s(e1);Ife=n(V8e,"STRONG",{});var emt=s(Ife);Pyo=r(emt,"bart"),emt.forEach(t),Byo=r(V8e," \u2014 "),JD=n(V8e,"A",{href:!0});var omt=s(JD);Iyo=r(omt,"BartForConditionalGeneration"),omt.forEach(t),Nyo=r(V8e," (BART model)"),V8e.forEach(t),qyo=i(H),o1=n(H,"LI",{});var X8e=s(o1);Nfe=n(X8e,"STRONG",{});var rmt=s(Nfe);jyo=r(rmt,"bert"),rmt.forEach(t),Dyo=r(X8e," \u2014 "),YD=n(X8e,"A",{href:!0});var tmt=s(YD);Gyo=r(tmt,"BertForMaskedLM"),tmt.forEach(t),Oyo=r(X8e," (BERT model)"),X8e.forEach(t),Vyo=i(H),r1=n(H,"LI",{});var z8e=s(r1);qfe=n(z8e,"STRONG",{});var amt=s(qfe);Xyo=r(amt,"big_bird"),amt.forEach(t),zyo=r(z8e," \u2014 "),KD=n(z8e,"A",{href:!0});var nmt=s(KD);Wyo=r(nmt,"BigBirdForMaskedLM"),nmt.forEach(t),Qyo=r(z8e," (BigBird model)"),z8e.forEach(t),Hyo=i(H),t1=n(H,"LI",{});var W8e=s(t1);jfe=n(W8e,"STRONG",{});var smt=s(jfe);Uyo=r(smt,"camembert"),smt.forEach(t),Jyo=r(W8e," \u2014 "),ZD=n(W8e,"A",{href:!0});var lmt=s(ZD);Yyo=r(lmt,"CamembertForMaskedLM"),lmt.forEach(t),Kyo=r(W8e," (CamemBERT model)"),W8e.forEach(t),Zyo=i(H),a1=n(H,"LI",{});var Q8e=s(a1);Dfe=n(Q8e,"STRONG",{});var imt=s(Dfe);e8o=r(imt,"convbert"),imt.forEach(t),o8o=r(Q8e," \u2014 "),eG=n(Q8e,"A",{href:!0});var dmt=s(eG);r8o=r(dmt,"ConvBertForMaskedLM"),dmt.forEach(t),t8o=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),a8o=i(H),n1=n(H,"LI",{});var H8e=s(n1);Gfe=n(H8e,"STRONG",{});var cmt=s(Gfe);n8o=r(cmt,"data2vec-text"),cmt.forEach(t),s8o=r(H8e," \u2014 "),oG=n(H8e,"A",{href:!0});var fmt=s(oG);l8o=r(fmt,"Data2VecTextForMaskedLM"),fmt.forEach(t),i8o=r(H8e," (Data2VecText model)"),H8e.forEach(t),d8o=i(H),s1=n(H,"LI",{});var U8e=s(s1);Ofe=n(U8e,"STRONG",{});var mmt=s(Ofe);c8o=r(mmt,"deberta"),mmt.forEach(t),f8o=r(U8e," \u2014 "),rG=n(U8e,"A",{href:!0});var gmt=s(rG);m8o=r(gmt,"DebertaForMaskedLM"),gmt.forEach(t),g8o=r(U8e," (DeBERTa model)"),U8e.forEach(t),h8o=i(H),l1=n(H,"LI",{});var J8e=s(l1);Vfe=n(J8e,"STRONG",{});var hmt=s(Vfe);p8o=r(hmt,"deberta-v2"),hmt.forEach(t),_8o=r(J8e," \u2014 "),tG=n(J8e,"A",{href:!0});var pmt=s(tG);u8o=r(pmt,"DebertaV2ForMaskedLM"),pmt.forEach(t),b8o=r(J8e," (DeBERTa-v2 model)"),J8e.forEach(t),v8o=i(H),i1=n(H,"LI",{});var Y8e=s(i1);Xfe=n(Y8e,"STRONG",{});var _mt=s(Xfe);F8o=r(_mt,"distilbert"),_mt.forEach(t),T8o=r(Y8e," \u2014 "),aG=n(Y8e,"A",{href:!0});var umt=s(aG);M8o=r(umt,"DistilBertForMaskedLM"),umt.forEach(t),E8o=r(Y8e," (DistilBERT model)"),Y8e.forEach(t),C8o=i(H),d1=n(H,"LI",{});var K8e=s(d1);zfe=n(K8e,"STRONG",{});var bmt=s(zfe);w8o=r(bmt,"electra"),bmt.forEach(t),A8o=r(K8e," \u2014 "),nG=n(K8e,"A",{href:!0});var vmt=s(nG);L8o=r(vmt,"ElectraForMaskedLM"),vmt.forEach(t),y8o=r(K8e," (ELECTRA model)"),K8e.forEach(t),x8o=i(H),c1=n(H,"LI",{});var Z8e=s(c1);Wfe=n(Z8e,"STRONG",{});var Fmt=s(Wfe);$8o=r(Fmt,"flaubert"),Fmt.forEach(t),k8o=r(Z8e," \u2014 "),sG=n(Z8e,"A",{href:!0});var Tmt=s(sG);S8o=r(Tmt,"FlaubertWithLMHeadModel"),Tmt.forEach(t),R8o=r(Z8e," (FlauBERT model)"),Z8e.forEach(t),P8o=i(H),f1=n(H,"LI",{});var exe=s(f1);Qfe=n(exe,"STRONG",{});var Mmt=s(Qfe);B8o=r(Mmt,"fnet"),Mmt.forEach(t),I8o=r(exe," \u2014 "),lG=n(exe,"A",{href:!0});var Emt=s(lG);N8o=r(Emt,"FNetForMaskedLM"),Emt.forEach(t),q8o=r(exe," (FNet model)"),exe.forEach(t),j8o=i(H),m1=n(H,"LI",{});var oxe=s(m1);Hfe=n(oxe,"STRONG",{});var Cmt=s(Hfe);D8o=r(Cmt,"funnel"),Cmt.forEach(t),G8o=r(oxe," \u2014 "),iG=n(oxe,"A",{href:!0});var wmt=s(iG);O8o=r(wmt,"FunnelForMaskedLM"),wmt.forEach(t),V8o=r(oxe," (Funnel Transformer model)"),oxe.forEach(t),X8o=i(H),g1=n(H,"LI",{});var rxe=s(g1);Ufe=n(rxe,"STRONG",{});var Amt=s(Ufe);z8o=r(Amt,"ibert"),Amt.forEach(t),W8o=r(rxe," \u2014 "),dG=n(rxe,"A",{href:!0});var Lmt=s(dG);Q8o=r(Lmt,"IBertForMaskedLM"),Lmt.forEach(t),H8o=r(rxe," (I-BERT model)"),rxe.forEach(t),U8o=i(H),h1=n(H,"LI",{});var txe=s(h1);Jfe=n(txe,"STRONG",{});var ymt=s(Jfe);J8o=r(ymt,"layoutlm"),ymt.forEach(t),Y8o=r(txe," \u2014 "),cG=n(txe,"A",{href:!0});var xmt=s(cG);K8o=r(xmt,"LayoutLMForMaskedLM"),xmt.forEach(t),Z8o=r(txe," (LayoutLM model)"),txe.forEach(t),exo=i(H),p1=n(H,"LI",{});var axe=s(p1);Yfe=n(axe,"STRONG",{});var $mt=s(Yfe);oxo=r($mt,"longformer"),$mt.forEach(t),rxo=r(axe," \u2014 "),fG=n(axe,"A",{href:!0});var kmt=s(fG);txo=r(kmt,"LongformerForMaskedLM"),kmt.forEach(t),axo=r(axe," (Longformer model)"),axe.forEach(t),nxo=i(H),_1=n(H,"LI",{});var nxe=s(_1);Kfe=n(nxe,"STRONG",{});var Smt=s(Kfe);sxo=r(Smt,"luke"),Smt.forEach(t),lxo=r(nxe," \u2014 "),mG=n(nxe,"A",{href:!0});var Rmt=s(mG);ixo=r(Rmt,"LukeForMaskedLM"),Rmt.forEach(t),dxo=r(nxe," (LUKE model)"),nxe.forEach(t),cxo=i(H),u1=n(H,"LI",{});var sxe=s(u1);Zfe=n(sxe,"STRONG",{});var Pmt=s(Zfe);fxo=r(Pmt,"mbart"),Pmt.forEach(t),mxo=r(sxe," \u2014 "),gG=n(sxe,"A",{href:!0});var Bmt=s(gG);gxo=r(Bmt,"MBartForConditionalGeneration"),Bmt.forEach(t),hxo=r(sxe," (mBART model)"),sxe.forEach(t),pxo=i(H),b1=n(H,"LI",{});var lxe=s(b1);eme=n(lxe,"STRONG",{});var Imt=s(eme);_xo=r(Imt,"megatron-bert"),Imt.forEach(t),uxo=r(lxe," \u2014 "),hG=n(lxe,"A",{href:!0});var Nmt=s(hG);bxo=r(Nmt,"MegatronBertForMaskedLM"),Nmt.forEach(t),vxo=r(lxe," (Megatron-BERT model)"),lxe.forEach(t),Fxo=i(H),v1=n(H,"LI",{});var ixe=s(v1);ome=n(ixe,"STRONG",{});var qmt=s(ome);Txo=r(qmt,"mobilebert"),qmt.forEach(t),Mxo=r(ixe," \u2014 "),pG=n(ixe,"A",{href:!0});var jmt=s(pG);Exo=r(jmt,"MobileBertForMaskedLM"),jmt.forEach(t),Cxo=r(ixe," (MobileBERT model)"),ixe.forEach(t),wxo=i(H),F1=n(H,"LI",{});var dxe=s(F1);rme=n(dxe,"STRONG",{});var Dmt=s(rme);Axo=r(Dmt,"mpnet"),Dmt.forEach(t),Lxo=r(dxe," \u2014 "),_G=n(dxe,"A",{href:!0});var Gmt=s(_G);yxo=r(Gmt,"MPNetForMaskedLM"),Gmt.forEach(t),xxo=r(dxe," (MPNet model)"),dxe.forEach(t),$xo=i(H),T1=n(H,"LI",{});var cxe=s(T1);tme=n(cxe,"STRONG",{});var Omt=s(tme);kxo=r(Omt,"nystromformer"),Omt.forEach(t),Sxo=r(cxe," \u2014 "),uG=n(cxe,"A",{href:!0});var Vmt=s(uG);Rxo=r(Vmt,"NystromformerForMaskedLM"),Vmt.forEach(t),Pxo=r(cxe," (Nystr\xF6mformer model)"),cxe.forEach(t),Bxo=i(H),M1=n(H,"LI",{});var fxe=s(M1);ame=n(fxe,"STRONG",{});var Xmt=s(ame);Ixo=r(Xmt,"perceiver"),Xmt.forEach(t),Nxo=r(fxe," \u2014 "),bG=n(fxe,"A",{href:!0});var zmt=s(bG);qxo=r(zmt,"PerceiverForMaskedLM"),zmt.forEach(t),jxo=r(fxe," (Perceiver model)"),fxe.forEach(t),Dxo=i(H),E1=n(H,"LI",{});var mxe=s(E1);nme=n(mxe,"STRONG",{});var Wmt=s(nme);Gxo=r(Wmt,"qdqbert"),Wmt.forEach(t),Oxo=r(mxe," \u2014 "),vG=n(mxe,"A",{href:!0});var Qmt=s(vG);Vxo=r(Qmt,"QDQBertForMaskedLM"),Qmt.forEach(t),Xxo=r(mxe," (QDQBert model)"),mxe.forEach(t),zxo=i(H),C1=n(H,"LI",{});var gxe=s(C1);sme=n(gxe,"STRONG",{});var Hmt=s(sme);Wxo=r(Hmt,"reformer"),Hmt.forEach(t),Qxo=r(gxe," \u2014 "),FG=n(gxe,"A",{href:!0});var Umt=s(FG);Hxo=r(Umt,"ReformerForMaskedLM"),Umt.forEach(t),Uxo=r(gxe," (Reformer model)"),gxe.forEach(t),Jxo=i(H),w1=n(H,"LI",{});var hxe=s(w1);lme=n(hxe,"STRONG",{});var Jmt=s(lme);Yxo=r(Jmt,"rembert"),Jmt.forEach(t),Kxo=r(hxe," \u2014 "),TG=n(hxe,"A",{href:!0});var Ymt=s(TG);Zxo=r(Ymt,"RemBertForMaskedLM"),Ymt.forEach(t),e$o=r(hxe," (RemBERT model)"),hxe.forEach(t),o$o=i(H),A1=n(H,"LI",{});var pxe=s(A1);ime=n(pxe,"STRONG",{});var Kmt=s(ime);r$o=r(Kmt,"roberta"),Kmt.forEach(t),t$o=r(pxe," \u2014 "),MG=n(pxe,"A",{href:!0});var Zmt=s(MG);a$o=r(Zmt,"RobertaForMaskedLM"),Zmt.forEach(t),n$o=r(pxe," (RoBERTa model)"),pxe.forEach(t),s$o=i(H),L1=n(H,"LI",{});var _xe=s(L1);dme=n(_xe,"STRONG",{});var egt=s(dme);l$o=r(egt,"roformer"),egt.forEach(t),i$o=r(_xe," \u2014 "),EG=n(_xe,"A",{href:!0});var ogt=s(EG);d$o=r(ogt,"RoFormerForMaskedLM"),ogt.forEach(t),c$o=r(_xe," (RoFormer model)"),_xe.forEach(t),f$o=i(H),y1=n(H,"LI",{});var uxe=s(y1);cme=n(uxe,"STRONG",{});var rgt=s(cme);m$o=r(rgt,"squeezebert"),rgt.forEach(t),g$o=r(uxe," \u2014 "),CG=n(uxe,"A",{href:!0});var tgt=s(CG);h$o=r(tgt,"SqueezeBertForMaskedLM"),tgt.forEach(t),p$o=r(uxe," (SqueezeBERT model)"),uxe.forEach(t),_$o=i(H),x1=n(H,"LI",{});var bxe=s(x1);fme=n(bxe,"STRONG",{});var agt=s(fme);u$o=r(agt,"tapas"),agt.forEach(t),b$o=r(bxe," \u2014 "),wG=n(bxe,"A",{href:!0});var ngt=s(wG);v$o=r(ngt,"TapasForMaskedLM"),ngt.forEach(t),F$o=r(bxe," (TAPAS model)"),bxe.forEach(t),T$o=i(H),$1=n(H,"LI",{});var vxe=s($1);mme=n(vxe,"STRONG",{});var sgt=s(mme);M$o=r(sgt,"wav2vec2"),sgt.forEach(t),E$o=r(vxe," \u2014 "),gme=n(vxe,"CODE",{});var lgt=s(gme);C$o=r(lgt,"Wav2Vec2ForMaskedLM"),lgt.forEach(t),w$o=r(vxe," (Wav2Vec2 model)"),vxe.forEach(t),A$o=i(H),k1=n(H,"LI",{});var Fxe=s(k1);hme=n(Fxe,"STRONG",{});var igt=s(hme);L$o=r(igt,"xlm"),igt.forEach(t),y$o=r(Fxe," \u2014 "),AG=n(Fxe,"A",{href:!0});var dgt=s(AG);x$o=r(dgt,"XLMWithLMHeadModel"),dgt.forEach(t),$$o=r(Fxe," (XLM model)"),Fxe.forEach(t),k$o=i(H),S1=n(H,"LI",{});var Txe=s(S1);pme=n(Txe,"STRONG",{});var cgt=s(pme);S$o=r(cgt,"xlm-roberta"),cgt.forEach(t),R$o=r(Txe," \u2014 "),LG=n(Txe,"A",{href:!0});var fgt=s(LG);P$o=r(fgt,"XLMRobertaForMaskedLM"),fgt.forEach(t),B$o=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),I$o=i(H),R1=n(H,"LI",{});var Mxe=s(R1);_me=n(Mxe,"STRONG",{});var mgt=s(_me);N$o=r(mgt,"xlm-roberta-xl"),mgt.forEach(t),q$o=r(Mxe," \u2014 "),yG=n(Mxe,"A",{href:!0});var ggt=s(yG);j$o=r(ggt,"XLMRobertaXLForMaskedLM"),ggt.forEach(t),D$o=r(Mxe," (XLM-RoBERTa-XL model)"),Mxe.forEach(t),G$o=i(H),P1=n(H,"LI",{});var Exe=s(P1);ume=n(Exe,"STRONG",{});var hgt=s(ume);O$o=r(hgt,"yoso"),hgt.forEach(t),V$o=r(Exe," \u2014 "),xG=n(Exe,"A",{href:!0});var pgt=s(xG);X$o=r(pgt,"YosoForMaskedLM"),pgt.forEach(t),z$o=r(Exe," (YOSO model)"),Exe.forEach(t),H.forEach(t),W$o=i(aa),B1=n(aa,"P",{});var Cxe=s(B1);Q$o=r(Cxe,"The model is set in evaluation mode by default using "),bme=n(Cxe,"CODE",{});var _gt=s(bme);H$o=r(_gt,"model.eval()"),_gt.forEach(t),U$o=r(Cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(Cxe,"CODE",{});var ugt=s(vme);J$o=r(ugt,"model.train()"),ugt.forEach(t),Cxe.forEach(t),Y$o=i(aa),T(I1.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),gDe=i(f),ji=n(f,"H2",{class:!0});var uOe=s(ji);N1=n(uOe,"A",{id:!0,class:!0,href:!0});var bgt=s(N1);Fme=n(bgt,"SPAN",{});var vgt=s(Fme);T(XA.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),K$o=i(uOe),Tme=n(uOe,"SPAN",{});var Fgt=s(Tme);Z$o=r(Fgt,"AutoModelForSeq2SeqLM"),Fgt.forEach(t),uOe.forEach(t),hDe=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(zA.$$.fragment,Qs),eko=i(Qs),Di=n(Qs,"P",{});var Eee=s(Di);oko=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$G=n(Eee,"A",{href:!0});var Tgt=s($G);rko=r(Tgt,"from_pretrained()"),Tgt.forEach(t),tko=r(Eee," class method or the "),kG=n(Eee,"A",{href:!0});var Mgt=s(kG);ako=r(Mgt,"from_config()"),Mgt.forEach(t),nko=r(Eee,` class
method.`),Eee.forEach(t),sko=i(Qs),WA=n(Qs,"P",{});var bOe=s(WA);lko=r(bOe,"This class cannot be instantiated directly using "),Mme=n(bOe,"CODE",{});var Egt=s(Mme);iko=r(Egt,"__init__()"),Egt.forEach(t),dko=r(bOe," (throws an error)."),bOe.forEach(t),cko=i(Qs),lt=n(Qs,"DIV",{class:!0});var c0=s(lt);T(QA.$$.fragment,c0),fko=i(c0),Eme=n(c0,"P",{});var Cgt=s(Eme);mko=r(Cgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cgt.forEach(t),gko=i(c0),Gi=n(c0,"P",{});var Cee=s(Gi);hko=r(Cee,`Note:
Loading a model from its configuration file does `),Cme=n(Cee,"STRONG",{});var wgt=s(Cme);pko=r(wgt,"not"),wgt.forEach(t),_ko=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(Cee,"A",{href:!0});var Agt=s(SG);uko=r(Agt,"from_pretrained()"),Agt.forEach(t),bko=r(Cee," to load the model weights."),Cee.forEach(t),vko=i(c0),T(q1.$$.fragment,c0),c0.forEach(t),Fko=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(HA.$$.fragment,na),Tko=i(na),wme=n(na,"P",{});var Lgt=s(wme);Mko=r(Lgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lgt.forEach(t),Eko=i(na),Sa=n(na,"P",{});var f0=s(Sa);Cko=r(f0,"The model class to instantiate is selected based on the "),Ame=n(f0,"CODE",{});var ygt=s(Ame);wko=r(ygt,"model_type"),ygt.forEach(t),Ako=r(f0,` property of the config object (either
passed as an argument or loaded from `),Lme=n(f0,"CODE",{});var xgt=s(Lme);Lko=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),yko=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(f0,"CODE",{});var $gt=s(yme);xko=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),$ko=r(f0,":"),f0.forEach(t),kko=i(na),pe=n(na,"UL",{});var be=s(pe);j1=n(be,"LI",{});var wxe=s(j1);xme=n(wxe,"STRONG",{});var kgt=s(xme);Sko=r(kgt,"bart"),kgt.forEach(t),Rko=r(wxe," \u2014 "),RG=n(wxe,"A",{href:!0});var Sgt=s(RG);Pko=r(Sgt,"BartForConditionalGeneration"),Sgt.forEach(t),Bko=r(wxe," (BART model)"),wxe.forEach(t),Iko=i(be),D1=n(be,"LI",{});var Axe=s(D1);$me=n(Axe,"STRONG",{});var Rgt=s($me);Nko=r(Rgt,"bigbird_pegasus"),Rgt.forEach(t),qko=r(Axe," \u2014 "),PG=n(Axe,"A",{href:!0});var Pgt=s(PG);jko=r(Pgt,"BigBirdPegasusForConditionalGeneration"),Pgt.forEach(t),Dko=r(Axe," (BigBird-Pegasus model)"),Axe.forEach(t),Gko=i(be),G1=n(be,"LI",{});var Lxe=s(G1);kme=n(Lxe,"STRONG",{});var Bgt=s(kme);Oko=r(Bgt,"blenderbot"),Bgt.forEach(t),Vko=r(Lxe," \u2014 "),BG=n(Lxe,"A",{href:!0});var Igt=s(BG);Xko=r(Igt,"BlenderbotForConditionalGeneration"),Igt.forEach(t),zko=r(Lxe," (Blenderbot model)"),Lxe.forEach(t),Wko=i(be),O1=n(be,"LI",{});var yxe=s(O1);Sme=n(yxe,"STRONG",{});var Ngt=s(Sme);Qko=r(Ngt,"blenderbot-small"),Ngt.forEach(t),Hko=r(yxe," \u2014 "),IG=n(yxe,"A",{href:!0});var qgt=s(IG);Uko=r(qgt,"BlenderbotSmallForConditionalGeneration"),qgt.forEach(t),Jko=r(yxe," (BlenderbotSmall model)"),yxe.forEach(t),Yko=i(be),V1=n(be,"LI",{});var xxe=s(V1);Rme=n(xxe,"STRONG",{});var jgt=s(Rme);Kko=r(jgt,"encoder-decoder"),jgt.forEach(t),Zko=r(xxe," \u2014 "),NG=n(xxe,"A",{href:!0});var Dgt=s(NG);eSo=r(Dgt,"EncoderDecoderModel"),Dgt.forEach(t),oSo=r(xxe," (Encoder decoder model)"),xxe.forEach(t),rSo=i(be),X1=n(be,"LI",{});var $xe=s(X1);Pme=n($xe,"STRONG",{});var Ggt=s(Pme);tSo=r(Ggt,"fsmt"),Ggt.forEach(t),aSo=r($xe," \u2014 "),qG=n($xe,"A",{href:!0});var Ogt=s(qG);nSo=r(Ogt,"FSMTForConditionalGeneration"),Ogt.forEach(t),sSo=r($xe," (FairSeq Machine-Translation model)"),$xe.forEach(t),lSo=i(be),z1=n(be,"LI",{});var kxe=s(z1);Bme=n(kxe,"STRONG",{});var Vgt=s(Bme);iSo=r(Vgt,"led"),Vgt.forEach(t),dSo=r(kxe," \u2014 "),jG=n(kxe,"A",{href:!0});var Xgt=s(jG);cSo=r(Xgt,"LEDForConditionalGeneration"),Xgt.forEach(t),fSo=r(kxe," (LED model)"),kxe.forEach(t),mSo=i(be),W1=n(be,"LI",{});var Sxe=s(W1);Ime=n(Sxe,"STRONG",{});var zgt=s(Ime);gSo=r(zgt,"longt5"),zgt.forEach(t),hSo=r(Sxe," \u2014 "),DG=n(Sxe,"A",{href:!0});var Wgt=s(DG);pSo=r(Wgt,"LongT5ForConditionalGeneration"),Wgt.forEach(t),_So=r(Sxe," (LongT5 model)"),Sxe.forEach(t),uSo=i(be),Q1=n(be,"LI",{});var Rxe=s(Q1);Nme=n(Rxe,"STRONG",{});var Qgt=s(Nme);bSo=r(Qgt,"m2m_100"),Qgt.forEach(t),vSo=r(Rxe," \u2014 "),GG=n(Rxe,"A",{href:!0});var Hgt=s(GG);FSo=r(Hgt,"M2M100ForConditionalGeneration"),Hgt.forEach(t),TSo=r(Rxe," (M2M100 model)"),Rxe.forEach(t),MSo=i(be),H1=n(be,"LI",{});var Pxe=s(H1);qme=n(Pxe,"STRONG",{});var Ugt=s(qme);ESo=r(Ugt,"marian"),Ugt.forEach(t),CSo=r(Pxe," \u2014 "),OG=n(Pxe,"A",{href:!0});var Jgt=s(OG);wSo=r(Jgt,"MarianMTModel"),Jgt.forEach(t),ASo=r(Pxe," (Marian model)"),Pxe.forEach(t),LSo=i(be),U1=n(be,"LI",{});var Bxe=s(U1);jme=n(Bxe,"STRONG",{});var Ygt=s(jme);ySo=r(Ygt,"mbart"),Ygt.forEach(t),xSo=r(Bxe," \u2014 "),VG=n(Bxe,"A",{href:!0});var Kgt=s(VG);$So=r(Kgt,"MBartForConditionalGeneration"),Kgt.forEach(t),kSo=r(Bxe," (mBART model)"),Bxe.forEach(t),SSo=i(be),J1=n(be,"LI",{});var Ixe=s(J1);Dme=n(Ixe,"STRONG",{});var Zgt=s(Dme);RSo=r(Zgt,"mt5"),Zgt.forEach(t),PSo=r(Ixe," \u2014 "),XG=n(Ixe,"A",{href:!0});var eht=s(XG);BSo=r(eht,"MT5ForConditionalGeneration"),eht.forEach(t),ISo=r(Ixe," (MT5 model)"),Ixe.forEach(t),NSo=i(be),Y1=n(be,"LI",{});var Nxe=s(Y1);Gme=n(Nxe,"STRONG",{});var oht=s(Gme);qSo=r(oht,"pegasus"),oht.forEach(t),jSo=r(Nxe," \u2014 "),zG=n(Nxe,"A",{href:!0});var rht=s(zG);DSo=r(rht,"PegasusForConditionalGeneration"),rht.forEach(t),GSo=r(Nxe," (Pegasus model)"),Nxe.forEach(t),OSo=i(be),K1=n(be,"LI",{});var qxe=s(K1);Ome=n(qxe,"STRONG",{});var tht=s(Ome);VSo=r(tht,"plbart"),tht.forEach(t),XSo=r(qxe," \u2014 "),WG=n(qxe,"A",{href:!0});var aht=s(WG);zSo=r(aht,"PLBartForConditionalGeneration"),aht.forEach(t),WSo=r(qxe," (PLBart model)"),qxe.forEach(t),QSo=i(be),Z1=n(be,"LI",{});var jxe=s(Z1);Vme=n(jxe,"STRONG",{});var nht=s(Vme);HSo=r(nht,"prophetnet"),nht.forEach(t),USo=r(jxe," \u2014 "),QG=n(jxe,"A",{href:!0});var sht=s(QG);JSo=r(sht,"ProphetNetForConditionalGeneration"),sht.forEach(t),YSo=r(jxe," (ProphetNet model)"),jxe.forEach(t),KSo=i(be),eb=n(be,"LI",{});var Dxe=s(eb);Xme=n(Dxe,"STRONG",{});var lht=s(Xme);ZSo=r(lht,"t5"),lht.forEach(t),eRo=r(Dxe," \u2014 "),HG=n(Dxe,"A",{href:!0});var iht=s(HG);oRo=r(iht,"T5ForConditionalGeneration"),iht.forEach(t),rRo=r(Dxe," (T5 model)"),Dxe.forEach(t),tRo=i(be),ob=n(be,"LI",{});var Gxe=s(ob);zme=n(Gxe,"STRONG",{});var dht=s(zme);aRo=r(dht,"xlm-prophetnet"),dht.forEach(t),nRo=r(Gxe," \u2014 "),UG=n(Gxe,"A",{href:!0});var cht=s(UG);sRo=r(cht,"XLMProphetNetForConditionalGeneration"),cht.forEach(t),lRo=r(Gxe," (XLM-ProphetNet model)"),Gxe.forEach(t),be.forEach(t),iRo=i(na),rb=n(na,"P",{});var Oxe=s(rb);dRo=r(Oxe,"The model is set in evaluation mode by default using "),Wme=n(Oxe,"CODE",{});var fht=s(Wme);cRo=r(fht,"model.eval()"),fht.forEach(t),fRo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(Oxe,"CODE",{});var mht=s(Qme);mRo=r(mht,"model.train()"),mht.forEach(t),Oxe.forEach(t),gRo=i(na),T(tb.$$.fragment,na),na.forEach(t),Qs.forEach(t),pDe=i(f),Oi=n(f,"H2",{class:!0});var vOe=s(Oi);ab=n(vOe,"A",{id:!0,class:!0,href:!0});var ght=s(ab);Hme=n(ght,"SPAN",{});var hht=s(Hme);T(UA.$$.fragment,hht),hht.forEach(t),ght.forEach(t),hRo=i(vOe),Ume=n(vOe,"SPAN",{});var pht=s(Ume);pRo=r(pht,"AutoModelForSequenceClassification"),pht.forEach(t),vOe.forEach(t),_De=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(JA.$$.fragment,Hs),_Ro=i(Hs),Vi=n(Hs,"P",{});var wee=s(Vi);uRo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JG=n(wee,"A",{href:!0});var _ht=s(JG);bRo=r(_ht,"from_pretrained()"),_ht.forEach(t),vRo=r(wee," class method or the "),YG=n(wee,"A",{href:!0});var uht=s(YG);FRo=r(uht,"from_config()"),uht.forEach(t),TRo=r(wee,` class
method.`),wee.forEach(t),MRo=i(Hs),YA=n(Hs,"P",{});var FOe=s(YA);ERo=r(FOe,"This class cannot be instantiated directly using "),Jme=n(FOe,"CODE",{});var bht=s(Jme);CRo=r(bht,"__init__()"),bht.forEach(t),wRo=r(FOe," (throws an error)."),FOe.forEach(t),ARo=i(Hs),it=n(Hs,"DIV",{class:!0});var m0=s(it);T(KA.$$.fragment,m0),LRo=i(m0),Yme=n(m0,"P",{});var vht=s(Yme);yRo=r(vht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vht.forEach(t),xRo=i(m0),Xi=n(m0,"P",{});var Aee=s(Xi);$Ro=r(Aee,`Note:
Loading a model from its configuration file does `),Kme=n(Aee,"STRONG",{});var Fht=s(Kme);kRo=r(Fht,"not"),Fht.forEach(t),SRo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Aee,"A",{href:!0});var Tht=s(KG);RRo=r(Tht,"from_pretrained()"),Tht.forEach(t),PRo=r(Aee," to load the model weights."),Aee.forEach(t),BRo=i(m0),T(nb.$$.fragment,m0),m0.forEach(t),IRo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(ZA.$$.fragment,sa),NRo=i(sa),Zme=n(sa,"P",{});var Mht=s(Zme);qRo=r(Mht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mht.forEach(t),jRo=i(sa),Ra=n(sa,"P",{});var g0=s(Ra);DRo=r(g0,"The model class to instantiate is selected based on the "),ege=n(g0,"CODE",{});var Eht=s(ege);GRo=r(Eht,"model_type"),Eht.forEach(t),ORo=r(g0,` property of the config object (either
passed as an argument or loaded from `),oge=n(g0,"CODE",{});var Cht=s(oge);VRo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),XRo=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=n(g0,"CODE",{});var wht=s(rge);zRo=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),WRo=r(g0,":"),g0.forEach(t),QRo=i(sa),N=n(sa,"UL",{});var j=s(N);sb=n(j,"LI",{});var Vxe=s(sb);tge=n(Vxe,"STRONG",{});var Aht=s(tge);HRo=r(Aht,"albert"),Aht.forEach(t),URo=r(Vxe," \u2014 "),ZG=n(Vxe,"A",{href:!0});var Lht=s(ZG);JRo=r(Lht,"AlbertForSequenceClassification"),Lht.forEach(t),YRo=r(Vxe," (ALBERT model)"),Vxe.forEach(t),KRo=i(j),lb=n(j,"LI",{});var Xxe=s(lb);age=n(Xxe,"STRONG",{});var yht=s(age);ZRo=r(yht,"bart"),yht.forEach(t),ePo=r(Xxe," \u2014 "),eO=n(Xxe,"A",{href:!0});var xht=s(eO);oPo=r(xht,"BartForSequenceClassification"),xht.forEach(t),rPo=r(Xxe," (BART model)"),Xxe.forEach(t),tPo=i(j),ib=n(j,"LI",{});var zxe=s(ib);nge=n(zxe,"STRONG",{});var $ht=s(nge);aPo=r($ht,"bert"),$ht.forEach(t),nPo=r(zxe," \u2014 "),oO=n(zxe,"A",{href:!0});var kht=s(oO);sPo=r(kht,"BertForSequenceClassification"),kht.forEach(t),lPo=r(zxe," (BERT model)"),zxe.forEach(t),iPo=i(j),db=n(j,"LI",{});var Wxe=s(db);sge=n(Wxe,"STRONG",{});var Sht=s(sge);dPo=r(Sht,"big_bird"),Sht.forEach(t),cPo=r(Wxe," \u2014 "),rO=n(Wxe,"A",{href:!0});var Rht=s(rO);fPo=r(Rht,"BigBirdForSequenceClassification"),Rht.forEach(t),mPo=r(Wxe," (BigBird model)"),Wxe.forEach(t),gPo=i(j),cb=n(j,"LI",{});var Qxe=s(cb);lge=n(Qxe,"STRONG",{});var Pht=s(lge);hPo=r(Pht,"bigbird_pegasus"),Pht.forEach(t),pPo=r(Qxe," \u2014 "),tO=n(Qxe,"A",{href:!0});var Bht=s(tO);_Po=r(Bht,"BigBirdPegasusForSequenceClassification"),Bht.forEach(t),uPo=r(Qxe," (BigBird-Pegasus model)"),Qxe.forEach(t),bPo=i(j),fb=n(j,"LI",{});var Hxe=s(fb);ige=n(Hxe,"STRONG",{});var Iht=s(ige);vPo=r(Iht,"camembert"),Iht.forEach(t),FPo=r(Hxe," \u2014 "),aO=n(Hxe,"A",{href:!0});var Nht=s(aO);TPo=r(Nht,"CamembertForSequenceClassification"),Nht.forEach(t),MPo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),EPo=i(j),mb=n(j,"LI",{});var Uxe=s(mb);dge=n(Uxe,"STRONG",{});var qht=s(dge);CPo=r(qht,"canine"),qht.forEach(t),wPo=r(Uxe," \u2014 "),nO=n(Uxe,"A",{href:!0});var jht=s(nO);APo=r(jht,"CanineForSequenceClassification"),jht.forEach(t),LPo=r(Uxe," (CANINE model)"),Uxe.forEach(t),yPo=i(j),gb=n(j,"LI",{});var Jxe=s(gb);cge=n(Jxe,"STRONG",{});var Dht=s(cge);xPo=r(Dht,"convbert"),Dht.forEach(t),$Po=r(Jxe," \u2014 "),sO=n(Jxe,"A",{href:!0});var Ght=s(sO);kPo=r(Ght,"ConvBertForSequenceClassification"),Ght.forEach(t),SPo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),RPo=i(j),hb=n(j,"LI",{});var Yxe=s(hb);fge=n(Yxe,"STRONG",{});var Oht=s(fge);PPo=r(Oht,"ctrl"),Oht.forEach(t),BPo=r(Yxe," \u2014 "),lO=n(Yxe,"A",{href:!0});var Vht=s(lO);IPo=r(Vht,"CTRLForSequenceClassification"),Vht.forEach(t),NPo=r(Yxe," (CTRL model)"),Yxe.forEach(t),qPo=i(j),pb=n(j,"LI",{});var Kxe=s(pb);mge=n(Kxe,"STRONG",{});var Xht=s(mge);jPo=r(Xht,"data2vec-text"),Xht.forEach(t),DPo=r(Kxe," \u2014 "),iO=n(Kxe,"A",{href:!0});var zht=s(iO);GPo=r(zht,"Data2VecTextForSequenceClassification"),zht.forEach(t),OPo=r(Kxe," (Data2VecText model)"),Kxe.forEach(t),VPo=i(j),_b=n(j,"LI",{});var Zxe=s(_b);gge=n(Zxe,"STRONG",{});var Wht=s(gge);XPo=r(Wht,"deberta"),Wht.forEach(t),zPo=r(Zxe," \u2014 "),dO=n(Zxe,"A",{href:!0});var Qht=s(dO);WPo=r(Qht,"DebertaForSequenceClassification"),Qht.forEach(t),QPo=r(Zxe," (DeBERTa model)"),Zxe.forEach(t),HPo=i(j),ub=n(j,"LI",{});var e$e=s(ub);hge=n(e$e,"STRONG",{});var Hht=s(hge);UPo=r(Hht,"deberta-v2"),Hht.forEach(t),JPo=r(e$e," \u2014 "),cO=n(e$e,"A",{href:!0});var Uht=s(cO);YPo=r(Uht,"DebertaV2ForSequenceClassification"),Uht.forEach(t),KPo=r(e$e," (DeBERTa-v2 model)"),e$e.forEach(t),ZPo=i(j),bb=n(j,"LI",{});var o$e=s(bb);pge=n(o$e,"STRONG",{});var Jht=s(pge);eBo=r(Jht,"distilbert"),Jht.forEach(t),oBo=r(o$e," \u2014 "),fO=n(o$e,"A",{href:!0});var Yht=s(fO);rBo=r(Yht,"DistilBertForSequenceClassification"),Yht.forEach(t),tBo=r(o$e," (DistilBERT model)"),o$e.forEach(t),aBo=i(j),vb=n(j,"LI",{});var r$e=s(vb);_ge=n(r$e,"STRONG",{});var Kht=s(_ge);nBo=r(Kht,"electra"),Kht.forEach(t),sBo=r(r$e," \u2014 "),mO=n(r$e,"A",{href:!0});var Zht=s(mO);lBo=r(Zht,"ElectraForSequenceClassification"),Zht.forEach(t),iBo=r(r$e," (ELECTRA model)"),r$e.forEach(t),dBo=i(j),Fb=n(j,"LI",{});var t$e=s(Fb);uge=n(t$e,"STRONG",{});var ept=s(uge);cBo=r(ept,"flaubert"),ept.forEach(t),fBo=r(t$e," \u2014 "),gO=n(t$e,"A",{href:!0});var opt=s(gO);mBo=r(opt,"FlaubertForSequenceClassification"),opt.forEach(t),gBo=r(t$e," (FlauBERT model)"),t$e.forEach(t),hBo=i(j),Tb=n(j,"LI",{});var a$e=s(Tb);bge=n(a$e,"STRONG",{});var rpt=s(bge);pBo=r(rpt,"fnet"),rpt.forEach(t),_Bo=r(a$e," \u2014 "),hO=n(a$e,"A",{href:!0});var tpt=s(hO);uBo=r(tpt,"FNetForSequenceClassification"),tpt.forEach(t),bBo=r(a$e," (FNet model)"),a$e.forEach(t),vBo=i(j),Mb=n(j,"LI",{});var n$e=s(Mb);vge=n(n$e,"STRONG",{});var apt=s(vge);FBo=r(apt,"funnel"),apt.forEach(t),TBo=r(n$e," \u2014 "),pO=n(n$e,"A",{href:!0});var npt=s(pO);MBo=r(npt,"FunnelForSequenceClassification"),npt.forEach(t),EBo=r(n$e," (Funnel Transformer model)"),n$e.forEach(t),CBo=i(j),Eb=n(j,"LI",{});var s$e=s(Eb);Fge=n(s$e,"STRONG",{});var spt=s(Fge);wBo=r(spt,"gpt2"),spt.forEach(t),ABo=r(s$e," \u2014 "),_O=n(s$e,"A",{href:!0});var lpt=s(_O);LBo=r(lpt,"GPT2ForSequenceClassification"),lpt.forEach(t),yBo=r(s$e," (OpenAI GPT-2 model)"),s$e.forEach(t),xBo=i(j),Cb=n(j,"LI",{});var l$e=s(Cb);Tge=n(l$e,"STRONG",{});var ipt=s(Tge);$Bo=r(ipt,"gpt_neo"),ipt.forEach(t),kBo=r(l$e," \u2014 "),uO=n(l$e,"A",{href:!0});var dpt=s(uO);SBo=r(dpt,"GPTNeoForSequenceClassification"),dpt.forEach(t),RBo=r(l$e," (GPT Neo model)"),l$e.forEach(t),PBo=i(j),wb=n(j,"LI",{});var i$e=s(wb);Mge=n(i$e,"STRONG",{});var cpt=s(Mge);BBo=r(cpt,"gptj"),cpt.forEach(t),IBo=r(i$e," \u2014 "),bO=n(i$e,"A",{href:!0});var fpt=s(bO);NBo=r(fpt,"GPTJForSequenceClassification"),fpt.forEach(t),qBo=r(i$e," (GPT-J model)"),i$e.forEach(t),jBo=i(j),Ab=n(j,"LI",{});var d$e=s(Ab);Ege=n(d$e,"STRONG",{});var mpt=s(Ege);DBo=r(mpt,"ibert"),mpt.forEach(t),GBo=r(d$e," \u2014 "),vO=n(d$e,"A",{href:!0});var gpt=s(vO);OBo=r(gpt,"IBertForSequenceClassification"),gpt.forEach(t),VBo=r(d$e," (I-BERT model)"),d$e.forEach(t),XBo=i(j),Lb=n(j,"LI",{});var c$e=s(Lb);Cge=n(c$e,"STRONG",{});var hpt=s(Cge);zBo=r(hpt,"layoutlm"),hpt.forEach(t),WBo=r(c$e," \u2014 "),FO=n(c$e,"A",{href:!0});var ppt=s(FO);QBo=r(ppt,"LayoutLMForSequenceClassification"),ppt.forEach(t),HBo=r(c$e," (LayoutLM model)"),c$e.forEach(t),UBo=i(j),yb=n(j,"LI",{});var f$e=s(yb);wge=n(f$e,"STRONG",{});var _pt=s(wge);JBo=r(_pt,"layoutlmv2"),_pt.forEach(t),YBo=r(f$e," \u2014 "),TO=n(f$e,"A",{href:!0});var upt=s(TO);KBo=r(upt,"LayoutLMv2ForSequenceClassification"),upt.forEach(t),ZBo=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),eIo=i(j),xb=n(j,"LI",{});var m$e=s(xb);Age=n(m$e,"STRONG",{});var bpt=s(Age);oIo=r(bpt,"layoutlmv3"),bpt.forEach(t),rIo=r(m$e," \u2014 "),MO=n(m$e,"A",{href:!0});var vpt=s(MO);tIo=r(vpt,"LayoutLMv3ForSequenceClassification"),vpt.forEach(t),aIo=r(m$e," (LayoutLMv3 model)"),m$e.forEach(t),nIo=i(j),$b=n(j,"LI",{});var g$e=s($b);Lge=n(g$e,"STRONG",{});var Fpt=s(Lge);sIo=r(Fpt,"led"),Fpt.forEach(t),lIo=r(g$e," \u2014 "),EO=n(g$e,"A",{href:!0});var Tpt=s(EO);iIo=r(Tpt,"LEDForSequenceClassification"),Tpt.forEach(t),dIo=r(g$e," (LED model)"),g$e.forEach(t),cIo=i(j),kb=n(j,"LI",{});var h$e=s(kb);yge=n(h$e,"STRONG",{});var Mpt=s(yge);fIo=r(Mpt,"longformer"),Mpt.forEach(t),mIo=r(h$e," \u2014 "),CO=n(h$e,"A",{href:!0});var Ept=s(CO);gIo=r(Ept,"LongformerForSequenceClassification"),Ept.forEach(t),hIo=r(h$e," (Longformer model)"),h$e.forEach(t),pIo=i(j),Sb=n(j,"LI",{});var p$e=s(Sb);xge=n(p$e,"STRONG",{});var Cpt=s(xge);_Io=r(Cpt,"mbart"),Cpt.forEach(t),uIo=r(p$e," \u2014 "),wO=n(p$e,"A",{href:!0});var wpt=s(wO);bIo=r(wpt,"MBartForSequenceClassification"),wpt.forEach(t),vIo=r(p$e," (mBART model)"),p$e.forEach(t),FIo=i(j),Rb=n(j,"LI",{});var _$e=s(Rb);$ge=n(_$e,"STRONG",{});var Apt=s($ge);TIo=r(Apt,"megatron-bert"),Apt.forEach(t),MIo=r(_$e," \u2014 "),AO=n(_$e,"A",{href:!0});var Lpt=s(AO);EIo=r(Lpt,"MegatronBertForSequenceClassification"),Lpt.forEach(t),CIo=r(_$e," (Megatron-BERT model)"),_$e.forEach(t),wIo=i(j),Pb=n(j,"LI",{});var u$e=s(Pb);kge=n(u$e,"STRONG",{});var ypt=s(kge);AIo=r(ypt,"mobilebert"),ypt.forEach(t),LIo=r(u$e," \u2014 "),LO=n(u$e,"A",{href:!0});var xpt=s(LO);yIo=r(xpt,"MobileBertForSequenceClassification"),xpt.forEach(t),xIo=r(u$e," (MobileBERT model)"),u$e.forEach(t),$Io=i(j),Bb=n(j,"LI",{});var b$e=s(Bb);Sge=n(b$e,"STRONG",{});var $pt=s(Sge);kIo=r($pt,"mpnet"),$pt.forEach(t),SIo=r(b$e," \u2014 "),yO=n(b$e,"A",{href:!0});var kpt=s(yO);RIo=r(kpt,"MPNetForSequenceClassification"),kpt.forEach(t),PIo=r(b$e," (MPNet model)"),b$e.forEach(t),BIo=i(j),Ib=n(j,"LI",{});var v$e=s(Ib);Rge=n(v$e,"STRONG",{});var Spt=s(Rge);IIo=r(Spt,"nystromformer"),Spt.forEach(t),NIo=r(v$e," \u2014 "),xO=n(v$e,"A",{href:!0});var Rpt=s(xO);qIo=r(Rpt,"NystromformerForSequenceClassification"),Rpt.forEach(t),jIo=r(v$e," (Nystr\xF6mformer model)"),v$e.forEach(t),DIo=i(j),Nb=n(j,"LI",{});var F$e=s(Nb);Pge=n(F$e,"STRONG",{});var Ppt=s(Pge);GIo=r(Ppt,"openai-gpt"),Ppt.forEach(t),OIo=r(F$e," \u2014 "),$O=n(F$e,"A",{href:!0});var Bpt=s($O);VIo=r(Bpt,"OpenAIGPTForSequenceClassification"),Bpt.forEach(t),XIo=r(F$e," (OpenAI GPT model)"),F$e.forEach(t),zIo=i(j),qb=n(j,"LI",{});var T$e=s(qb);Bge=n(T$e,"STRONG",{});var Ipt=s(Bge);WIo=r(Ipt,"perceiver"),Ipt.forEach(t),QIo=r(T$e," \u2014 "),kO=n(T$e,"A",{href:!0});var Npt=s(kO);HIo=r(Npt,"PerceiverForSequenceClassification"),Npt.forEach(t),UIo=r(T$e," (Perceiver model)"),T$e.forEach(t),JIo=i(j),jb=n(j,"LI",{});var M$e=s(jb);Ige=n(M$e,"STRONG",{});var qpt=s(Ige);YIo=r(qpt,"plbart"),qpt.forEach(t),KIo=r(M$e," \u2014 "),SO=n(M$e,"A",{href:!0});var jpt=s(SO);ZIo=r(jpt,"PLBartForSequenceClassification"),jpt.forEach(t),eNo=r(M$e," (PLBart model)"),M$e.forEach(t),oNo=i(j),Db=n(j,"LI",{});var E$e=s(Db);Nge=n(E$e,"STRONG",{});var Dpt=s(Nge);rNo=r(Dpt,"qdqbert"),Dpt.forEach(t),tNo=r(E$e," \u2014 "),RO=n(E$e,"A",{href:!0});var Gpt=s(RO);aNo=r(Gpt,"QDQBertForSequenceClassification"),Gpt.forEach(t),nNo=r(E$e," (QDQBert model)"),E$e.forEach(t),sNo=i(j),Gb=n(j,"LI",{});var C$e=s(Gb);qge=n(C$e,"STRONG",{});var Opt=s(qge);lNo=r(Opt,"reformer"),Opt.forEach(t),iNo=r(C$e," \u2014 "),PO=n(C$e,"A",{href:!0});var Vpt=s(PO);dNo=r(Vpt,"ReformerForSequenceClassification"),Vpt.forEach(t),cNo=r(C$e," (Reformer model)"),C$e.forEach(t),fNo=i(j),Ob=n(j,"LI",{});var w$e=s(Ob);jge=n(w$e,"STRONG",{});var Xpt=s(jge);mNo=r(Xpt,"rembert"),Xpt.forEach(t),gNo=r(w$e," \u2014 "),BO=n(w$e,"A",{href:!0});var zpt=s(BO);hNo=r(zpt,"RemBertForSequenceClassification"),zpt.forEach(t),pNo=r(w$e," (RemBERT model)"),w$e.forEach(t),_No=i(j),Vb=n(j,"LI",{});var A$e=s(Vb);Dge=n(A$e,"STRONG",{});var Wpt=s(Dge);uNo=r(Wpt,"roberta"),Wpt.forEach(t),bNo=r(A$e," \u2014 "),IO=n(A$e,"A",{href:!0});var Qpt=s(IO);vNo=r(Qpt,"RobertaForSequenceClassification"),Qpt.forEach(t),FNo=r(A$e," (RoBERTa model)"),A$e.forEach(t),TNo=i(j),Xb=n(j,"LI",{});var L$e=s(Xb);Gge=n(L$e,"STRONG",{});var Hpt=s(Gge);MNo=r(Hpt,"roformer"),Hpt.forEach(t),ENo=r(L$e," \u2014 "),NO=n(L$e,"A",{href:!0});var Upt=s(NO);CNo=r(Upt,"RoFormerForSequenceClassification"),Upt.forEach(t),wNo=r(L$e," (RoFormer model)"),L$e.forEach(t),ANo=i(j),zb=n(j,"LI",{});var y$e=s(zb);Oge=n(y$e,"STRONG",{});var Jpt=s(Oge);LNo=r(Jpt,"squeezebert"),Jpt.forEach(t),yNo=r(y$e," \u2014 "),qO=n(y$e,"A",{href:!0});var Ypt=s(qO);xNo=r(Ypt,"SqueezeBertForSequenceClassification"),Ypt.forEach(t),$No=r(y$e," (SqueezeBERT model)"),y$e.forEach(t),kNo=i(j),Wb=n(j,"LI",{});var x$e=s(Wb);Vge=n(x$e,"STRONG",{});var Kpt=s(Vge);SNo=r(Kpt,"tapas"),Kpt.forEach(t),RNo=r(x$e," \u2014 "),jO=n(x$e,"A",{href:!0});var Zpt=s(jO);PNo=r(Zpt,"TapasForSequenceClassification"),Zpt.forEach(t),BNo=r(x$e," (TAPAS model)"),x$e.forEach(t),INo=i(j),Qb=n(j,"LI",{});var $$e=s(Qb);Xge=n($$e,"STRONG",{});var e_t=s(Xge);NNo=r(e_t,"transfo-xl"),e_t.forEach(t),qNo=r($$e," \u2014 "),DO=n($$e,"A",{href:!0});var o_t=s(DO);jNo=r(o_t,"TransfoXLForSequenceClassification"),o_t.forEach(t),DNo=r($$e," (Transformer-XL model)"),$$e.forEach(t),GNo=i(j),Hb=n(j,"LI",{});var k$e=s(Hb);zge=n(k$e,"STRONG",{});var r_t=s(zge);ONo=r(r_t,"xlm"),r_t.forEach(t),VNo=r(k$e," \u2014 "),GO=n(k$e,"A",{href:!0});var t_t=s(GO);XNo=r(t_t,"XLMForSequenceClassification"),t_t.forEach(t),zNo=r(k$e," (XLM model)"),k$e.forEach(t),WNo=i(j),Ub=n(j,"LI",{});var S$e=s(Ub);Wge=n(S$e,"STRONG",{});var a_t=s(Wge);QNo=r(a_t,"xlm-roberta"),a_t.forEach(t),HNo=r(S$e," \u2014 "),OO=n(S$e,"A",{href:!0});var n_t=s(OO);UNo=r(n_t,"XLMRobertaForSequenceClassification"),n_t.forEach(t),JNo=r(S$e," (XLM-RoBERTa model)"),S$e.forEach(t),YNo=i(j),Jb=n(j,"LI",{});var R$e=s(Jb);Qge=n(R$e,"STRONG",{});var s_t=s(Qge);KNo=r(s_t,"xlm-roberta-xl"),s_t.forEach(t),ZNo=r(R$e," \u2014 "),VO=n(R$e,"A",{href:!0});var l_t=s(VO);eqo=r(l_t,"XLMRobertaXLForSequenceClassification"),l_t.forEach(t),oqo=r(R$e," (XLM-RoBERTa-XL model)"),R$e.forEach(t),rqo=i(j),Yb=n(j,"LI",{});var P$e=s(Yb);Hge=n(P$e,"STRONG",{});var i_t=s(Hge);tqo=r(i_t,"xlnet"),i_t.forEach(t),aqo=r(P$e," \u2014 "),XO=n(P$e,"A",{href:!0});var d_t=s(XO);nqo=r(d_t,"XLNetForSequenceClassification"),d_t.forEach(t),sqo=r(P$e," (XLNet model)"),P$e.forEach(t),lqo=i(j),Kb=n(j,"LI",{});var B$e=s(Kb);Uge=n(B$e,"STRONG",{});var c_t=s(Uge);iqo=r(c_t,"yoso"),c_t.forEach(t),dqo=r(B$e," \u2014 "),zO=n(B$e,"A",{href:!0});var f_t=s(zO);cqo=r(f_t,"YosoForSequenceClassification"),f_t.forEach(t),fqo=r(B$e," (YOSO model)"),B$e.forEach(t),j.forEach(t),mqo=i(sa),Zb=n(sa,"P",{});var I$e=s(Zb);gqo=r(I$e,"The model is set in evaluation mode by default using "),Jge=n(I$e,"CODE",{});var m_t=s(Jge);hqo=r(m_t,"model.eval()"),m_t.forEach(t),pqo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(I$e,"CODE",{});var g_t=s(Yge);_qo=r(g_t,"model.train()"),g_t.forEach(t),I$e.forEach(t),uqo=i(sa),T(ev.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),uDe=i(f),zi=n(f,"H2",{class:!0});var TOe=s(zi);ov=n(TOe,"A",{id:!0,class:!0,href:!0});var h_t=s(ov);Kge=n(h_t,"SPAN",{});var p_t=s(Kge);T(eL.$$.fragment,p_t),p_t.forEach(t),h_t.forEach(t),bqo=i(TOe),Zge=n(TOe,"SPAN",{});var __t=s(Zge);vqo=r(__t,"AutoModelForMultipleChoice"),__t.forEach(t),TOe.forEach(t),bDe=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(oL.$$.fragment,Us),Fqo=i(Us),Wi=n(Us,"P",{});var Lee=s(Wi);Tqo=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WO=n(Lee,"A",{href:!0});var u_t=s(WO);Mqo=r(u_t,"from_pretrained()"),u_t.forEach(t),Eqo=r(Lee," class method or the "),QO=n(Lee,"A",{href:!0});var b_t=s(QO);Cqo=r(b_t,"from_config()"),b_t.forEach(t),wqo=r(Lee,` class
method.`),Lee.forEach(t),Aqo=i(Us),rL=n(Us,"P",{});var MOe=s(rL);Lqo=r(MOe,"This class cannot be instantiated directly using "),ehe=n(MOe,"CODE",{});var v_t=s(ehe);yqo=r(v_t,"__init__()"),v_t.forEach(t),xqo=r(MOe," (throws an error)."),MOe.forEach(t),$qo=i(Us),dt=n(Us,"DIV",{class:!0});var h0=s(dt);T(tL.$$.fragment,h0),kqo=i(h0),ohe=n(h0,"P",{});var F_t=s(ohe);Sqo=r(F_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F_t.forEach(t),Rqo=i(h0),Qi=n(h0,"P",{});var yee=s(Qi);Pqo=r(yee,`Note:
Loading a model from its configuration file does `),rhe=n(yee,"STRONG",{});var T_t=s(rhe);Bqo=r(T_t,"not"),T_t.forEach(t),Iqo=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(yee,"A",{href:!0});var M_t=s(HO);Nqo=r(M_t,"from_pretrained()"),M_t.forEach(t),qqo=r(yee," to load the model weights."),yee.forEach(t),jqo=i(h0),T(rv.$$.fragment,h0),h0.forEach(t),Dqo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(aL.$$.fragment,la),Gqo=i(la),the=n(la,"P",{});var E_t=s(the);Oqo=r(E_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E_t.forEach(t),Vqo=i(la),Pa=n(la,"P",{});var p0=s(Pa);Xqo=r(p0,"The model class to instantiate is selected based on the "),ahe=n(p0,"CODE",{});var C_t=s(ahe);zqo=r(C_t,"model_type"),C_t.forEach(t),Wqo=r(p0,` property of the config object (either
passed as an argument or loaded from `),nhe=n(p0,"CODE",{});var w_t=s(nhe);Qqo=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),Hqo=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(p0,"CODE",{});var A_t=s(she);Uqo=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Jqo=r(p0,":"),p0.forEach(t),Yqo=i(la),Z=n(la,"UL",{});var ee=s(Z);tv=n(ee,"LI",{});var N$e=s(tv);lhe=n(N$e,"STRONG",{});var L_t=s(lhe);Kqo=r(L_t,"albert"),L_t.forEach(t),Zqo=r(N$e," \u2014 "),UO=n(N$e,"A",{href:!0});var y_t=s(UO);ejo=r(y_t,"AlbertForMultipleChoice"),y_t.forEach(t),ojo=r(N$e," (ALBERT model)"),N$e.forEach(t),rjo=i(ee),av=n(ee,"LI",{});var q$e=s(av);ihe=n(q$e,"STRONG",{});var x_t=s(ihe);tjo=r(x_t,"bert"),x_t.forEach(t),ajo=r(q$e," \u2014 "),JO=n(q$e,"A",{href:!0});var $_t=s(JO);njo=r($_t,"BertForMultipleChoice"),$_t.forEach(t),sjo=r(q$e," (BERT model)"),q$e.forEach(t),ljo=i(ee),nv=n(ee,"LI",{});var j$e=s(nv);dhe=n(j$e,"STRONG",{});var k_t=s(dhe);ijo=r(k_t,"big_bird"),k_t.forEach(t),djo=r(j$e," \u2014 "),YO=n(j$e,"A",{href:!0});var S_t=s(YO);cjo=r(S_t,"BigBirdForMultipleChoice"),S_t.forEach(t),fjo=r(j$e," (BigBird model)"),j$e.forEach(t),mjo=i(ee),sv=n(ee,"LI",{});var D$e=s(sv);che=n(D$e,"STRONG",{});var R_t=s(che);gjo=r(R_t,"camembert"),R_t.forEach(t),hjo=r(D$e," \u2014 "),KO=n(D$e,"A",{href:!0});var P_t=s(KO);pjo=r(P_t,"CamembertForMultipleChoice"),P_t.forEach(t),_jo=r(D$e," (CamemBERT model)"),D$e.forEach(t),ujo=i(ee),lv=n(ee,"LI",{});var G$e=s(lv);fhe=n(G$e,"STRONG",{});var B_t=s(fhe);bjo=r(B_t,"canine"),B_t.forEach(t),vjo=r(G$e," \u2014 "),ZO=n(G$e,"A",{href:!0});var I_t=s(ZO);Fjo=r(I_t,"CanineForMultipleChoice"),I_t.forEach(t),Tjo=r(G$e," (CANINE model)"),G$e.forEach(t),Mjo=i(ee),iv=n(ee,"LI",{});var O$e=s(iv);mhe=n(O$e,"STRONG",{});var N_t=s(mhe);Ejo=r(N_t,"convbert"),N_t.forEach(t),Cjo=r(O$e," \u2014 "),eV=n(O$e,"A",{href:!0});var q_t=s(eV);wjo=r(q_t,"ConvBertForMultipleChoice"),q_t.forEach(t),Ajo=r(O$e," (ConvBERT model)"),O$e.forEach(t),Ljo=i(ee),dv=n(ee,"LI",{});var V$e=s(dv);ghe=n(V$e,"STRONG",{});var j_t=s(ghe);yjo=r(j_t,"data2vec-text"),j_t.forEach(t),xjo=r(V$e," \u2014 "),oV=n(V$e,"A",{href:!0});var D_t=s(oV);$jo=r(D_t,"Data2VecTextForMultipleChoice"),D_t.forEach(t),kjo=r(V$e," (Data2VecText model)"),V$e.forEach(t),Sjo=i(ee),cv=n(ee,"LI",{});var X$e=s(cv);hhe=n(X$e,"STRONG",{});var G_t=s(hhe);Rjo=r(G_t,"deberta-v2"),G_t.forEach(t),Pjo=r(X$e," \u2014 "),rV=n(X$e,"A",{href:!0});var O_t=s(rV);Bjo=r(O_t,"DebertaV2ForMultipleChoice"),O_t.forEach(t),Ijo=r(X$e," (DeBERTa-v2 model)"),X$e.forEach(t),Njo=i(ee),fv=n(ee,"LI",{});var z$e=s(fv);phe=n(z$e,"STRONG",{});var V_t=s(phe);qjo=r(V_t,"distilbert"),V_t.forEach(t),jjo=r(z$e," \u2014 "),tV=n(z$e,"A",{href:!0});var X_t=s(tV);Djo=r(X_t,"DistilBertForMultipleChoice"),X_t.forEach(t),Gjo=r(z$e," (DistilBERT model)"),z$e.forEach(t),Ojo=i(ee),mv=n(ee,"LI",{});var W$e=s(mv);_he=n(W$e,"STRONG",{});var z_t=s(_he);Vjo=r(z_t,"electra"),z_t.forEach(t),Xjo=r(W$e," \u2014 "),aV=n(W$e,"A",{href:!0});var W_t=s(aV);zjo=r(W_t,"ElectraForMultipleChoice"),W_t.forEach(t),Wjo=r(W$e," (ELECTRA model)"),W$e.forEach(t),Qjo=i(ee),gv=n(ee,"LI",{});var Q$e=s(gv);uhe=n(Q$e,"STRONG",{});var Q_t=s(uhe);Hjo=r(Q_t,"flaubert"),Q_t.forEach(t),Ujo=r(Q$e," \u2014 "),nV=n(Q$e,"A",{href:!0});var H_t=s(nV);Jjo=r(H_t,"FlaubertForMultipleChoice"),H_t.forEach(t),Yjo=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),Kjo=i(ee),hv=n(ee,"LI",{});var H$e=s(hv);bhe=n(H$e,"STRONG",{});var U_t=s(bhe);Zjo=r(U_t,"fnet"),U_t.forEach(t),eDo=r(H$e," \u2014 "),sV=n(H$e,"A",{href:!0});var J_t=s(sV);oDo=r(J_t,"FNetForMultipleChoice"),J_t.forEach(t),rDo=r(H$e," (FNet model)"),H$e.forEach(t),tDo=i(ee),pv=n(ee,"LI",{});var U$e=s(pv);vhe=n(U$e,"STRONG",{});var Y_t=s(vhe);aDo=r(Y_t,"funnel"),Y_t.forEach(t),nDo=r(U$e," \u2014 "),lV=n(U$e,"A",{href:!0});var K_t=s(lV);sDo=r(K_t,"FunnelForMultipleChoice"),K_t.forEach(t),lDo=r(U$e," (Funnel Transformer model)"),U$e.forEach(t),iDo=i(ee),_v=n(ee,"LI",{});var J$e=s(_v);Fhe=n(J$e,"STRONG",{});var Z_t=s(Fhe);dDo=r(Z_t,"ibert"),Z_t.forEach(t),cDo=r(J$e," \u2014 "),iV=n(J$e,"A",{href:!0});var eut=s(iV);fDo=r(eut,"IBertForMultipleChoice"),eut.forEach(t),mDo=r(J$e," (I-BERT model)"),J$e.forEach(t),gDo=i(ee),uv=n(ee,"LI",{});var Y$e=s(uv);The=n(Y$e,"STRONG",{});var out=s(The);hDo=r(out,"longformer"),out.forEach(t),pDo=r(Y$e," \u2014 "),dV=n(Y$e,"A",{href:!0});var rut=s(dV);_Do=r(rut,"LongformerForMultipleChoice"),rut.forEach(t),uDo=r(Y$e," (Longformer model)"),Y$e.forEach(t),bDo=i(ee),bv=n(ee,"LI",{});var K$e=s(bv);Mhe=n(K$e,"STRONG",{});var tut=s(Mhe);vDo=r(tut,"megatron-bert"),tut.forEach(t),FDo=r(K$e," \u2014 "),cV=n(K$e,"A",{href:!0});var aut=s(cV);TDo=r(aut,"MegatronBertForMultipleChoice"),aut.forEach(t),MDo=r(K$e," (Megatron-BERT model)"),K$e.forEach(t),EDo=i(ee),vv=n(ee,"LI",{});var Z$e=s(vv);Ehe=n(Z$e,"STRONG",{});var nut=s(Ehe);CDo=r(nut,"mobilebert"),nut.forEach(t),wDo=r(Z$e," \u2014 "),fV=n(Z$e,"A",{href:!0});var sut=s(fV);ADo=r(sut,"MobileBertForMultipleChoice"),sut.forEach(t),LDo=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),yDo=i(ee),Fv=n(ee,"LI",{});var eke=s(Fv);Che=n(eke,"STRONG",{});var lut=s(Che);xDo=r(lut,"mpnet"),lut.forEach(t),$Do=r(eke," \u2014 "),mV=n(eke,"A",{href:!0});var iut=s(mV);kDo=r(iut,"MPNetForMultipleChoice"),iut.forEach(t),SDo=r(eke," (MPNet model)"),eke.forEach(t),RDo=i(ee),Tv=n(ee,"LI",{});var oke=s(Tv);whe=n(oke,"STRONG",{});var dut=s(whe);PDo=r(dut,"nystromformer"),dut.forEach(t),BDo=r(oke," \u2014 "),gV=n(oke,"A",{href:!0});var cut=s(gV);IDo=r(cut,"NystromformerForMultipleChoice"),cut.forEach(t),NDo=r(oke," (Nystr\xF6mformer model)"),oke.forEach(t),qDo=i(ee),Mv=n(ee,"LI",{});var rke=s(Mv);Ahe=n(rke,"STRONG",{});var fut=s(Ahe);jDo=r(fut,"qdqbert"),fut.forEach(t),DDo=r(rke," \u2014 "),hV=n(rke,"A",{href:!0});var mut=s(hV);GDo=r(mut,"QDQBertForMultipleChoice"),mut.forEach(t),ODo=r(rke," (QDQBert model)"),rke.forEach(t),VDo=i(ee),Ev=n(ee,"LI",{});var tke=s(Ev);Lhe=n(tke,"STRONG",{});var gut=s(Lhe);XDo=r(gut,"rembert"),gut.forEach(t),zDo=r(tke," \u2014 "),pV=n(tke,"A",{href:!0});var hut=s(pV);WDo=r(hut,"RemBertForMultipleChoice"),hut.forEach(t),QDo=r(tke," (RemBERT model)"),tke.forEach(t),HDo=i(ee),Cv=n(ee,"LI",{});var ake=s(Cv);yhe=n(ake,"STRONG",{});var put=s(yhe);UDo=r(put,"roberta"),put.forEach(t),JDo=r(ake," \u2014 "),_V=n(ake,"A",{href:!0});var _ut=s(_V);YDo=r(_ut,"RobertaForMultipleChoice"),_ut.forEach(t),KDo=r(ake," (RoBERTa model)"),ake.forEach(t),ZDo=i(ee),wv=n(ee,"LI",{});var nke=s(wv);xhe=n(nke,"STRONG",{});var uut=s(xhe);eGo=r(uut,"roformer"),uut.forEach(t),oGo=r(nke," \u2014 "),uV=n(nke,"A",{href:!0});var but=s(uV);rGo=r(but,"RoFormerForMultipleChoice"),but.forEach(t),tGo=r(nke," (RoFormer model)"),nke.forEach(t),aGo=i(ee),Av=n(ee,"LI",{});var ske=s(Av);$he=n(ske,"STRONG",{});var vut=s($he);nGo=r(vut,"squeezebert"),vut.forEach(t),sGo=r(ske," \u2014 "),bV=n(ske,"A",{href:!0});var Fut=s(bV);lGo=r(Fut,"SqueezeBertForMultipleChoice"),Fut.forEach(t),iGo=r(ske," (SqueezeBERT model)"),ske.forEach(t),dGo=i(ee),Lv=n(ee,"LI",{});var lke=s(Lv);khe=n(lke,"STRONG",{});var Tut=s(khe);cGo=r(Tut,"xlm"),Tut.forEach(t),fGo=r(lke," \u2014 "),vV=n(lke,"A",{href:!0});var Mut=s(vV);mGo=r(Mut,"XLMForMultipleChoice"),Mut.forEach(t),gGo=r(lke," (XLM model)"),lke.forEach(t),hGo=i(ee),yv=n(ee,"LI",{});var ike=s(yv);She=n(ike,"STRONG",{});var Eut=s(She);pGo=r(Eut,"xlm-roberta"),Eut.forEach(t),_Go=r(ike," \u2014 "),FV=n(ike,"A",{href:!0});var Cut=s(FV);uGo=r(Cut,"XLMRobertaForMultipleChoice"),Cut.forEach(t),bGo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),vGo=i(ee),xv=n(ee,"LI",{});var dke=s(xv);Rhe=n(dke,"STRONG",{});var wut=s(Rhe);FGo=r(wut,"xlm-roberta-xl"),wut.forEach(t),TGo=r(dke," \u2014 "),TV=n(dke,"A",{href:!0});var Aut=s(TV);MGo=r(Aut,"XLMRobertaXLForMultipleChoice"),Aut.forEach(t),EGo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),CGo=i(ee),$v=n(ee,"LI",{});var cke=s($v);Phe=n(cke,"STRONG",{});var Lut=s(Phe);wGo=r(Lut,"xlnet"),Lut.forEach(t),AGo=r(cke," \u2014 "),MV=n(cke,"A",{href:!0});var yut=s(MV);LGo=r(yut,"XLNetForMultipleChoice"),yut.forEach(t),yGo=r(cke," (XLNet model)"),cke.forEach(t),xGo=i(ee),kv=n(ee,"LI",{});var fke=s(kv);Bhe=n(fke,"STRONG",{});var xut=s(Bhe);$Go=r(xut,"yoso"),xut.forEach(t),kGo=r(fke," \u2014 "),EV=n(fke,"A",{href:!0});var $ut=s(EV);SGo=r($ut,"YosoForMultipleChoice"),$ut.forEach(t),RGo=r(fke," (YOSO model)"),fke.forEach(t),ee.forEach(t),PGo=i(la),Sv=n(la,"P",{});var mke=s(Sv);BGo=r(mke,"The model is set in evaluation mode by default using "),Ihe=n(mke,"CODE",{});var kut=s(Ihe);IGo=r(kut,"model.eval()"),kut.forEach(t),NGo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(mke,"CODE",{});var Sut=s(Nhe);qGo=r(Sut,"model.train()"),Sut.forEach(t),mke.forEach(t),jGo=i(la),T(Rv.$$.fragment,la),la.forEach(t),Us.forEach(t),vDe=i(f),Hi=n(f,"H2",{class:!0});var EOe=s(Hi);Pv=n(EOe,"A",{id:!0,class:!0,href:!0});var Rut=s(Pv);qhe=n(Rut,"SPAN",{});var Put=s(qhe);T(nL.$$.fragment,Put),Put.forEach(t),Rut.forEach(t),DGo=i(EOe),jhe=n(EOe,"SPAN",{});var But=s(jhe);GGo=r(But,"AutoModelForNextSentencePrediction"),But.forEach(t),EOe.forEach(t),FDe=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(sL.$$.fragment,Js),OGo=i(Js),Ui=n(Js,"P",{});var xee=s(Ui);VGo=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CV=n(xee,"A",{href:!0});var Iut=s(CV);XGo=r(Iut,"from_pretrained()"),Iut.forEach(t),zGo=r(xee," class method or the "),wV=n(xee,"A",{href:!0});var Nut=s(wV);WGo=r(Nut,"from_config()"),Nut.forEach(t),QGo=r(xee,` class
method.`),xee.forEach(t),HGo=i(Js),lL=n(Js,"P",{});var COe=s(lL);UGo=r(COe,"This class cannot be instantiated directly using "),Dhe=n(COe,"CODE",{});var qut=s(Dhe);JGo=r(qut,"__init__()"),qut.forEach(t),YGo=r(COe," (throws an error)."),COe.forEach(t),KGo=i(Js),ct=n(Js,"DIV",{class:!0});var _0=s(ct);T(iL.$$.fragment,_0),ZGo=i(_0),Ghe=n(_0,"P",{});var jut=s(Ghe);eOo=r(jut,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jut.forEach(t),oOo=i(_0),Ji=n(_0,"P",{});var $ee=s(Ji);rOo=r($ee,`Note:
Loading a model from its configuration file does `),Ohe=n($ee,"STRONG",{});var Dut=s(Ohe);tOo=r(Dut,"not"),Dut.forEach(t),aOo=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n($ee,"A",{href:!0});var Gut=s(AV);nOo=r(Gut,"from_pretrained()"),Gut.forEach(t),sOo=r($ee," to load the model weights."),$ee.forEach(t),lOo=i(_0),T(Bv.$$.fragment,_0),_0.forEach(t),iOo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(dL.$$.fragment,ia),dOo=i(ia),Vhe=n(ia,"P",{});var Out=s(Vhe);cOo=r(Out,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Out.forEach(t),fOo=i(ia),Ba=n(ia,"P",{});var u0=s(Ba);mOo=r(u0,"The model class to instantiate is selected based on the "),Xhe=n(u0,"CODE",{});var Vut=s(Xhe);gOo=r(Vut,"model_type"),Vut.forEach(t),hOo=r(u0,` property of the config object (either
passed as an argument or loaded from `),zhe=n(u0,"CODE",{});var Xut=s(zhe);pOo=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),_Oo=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(u0,"CODE",{});var zut=s(Whe);uOo=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),bOo=r(u0,":"),u0.forEach(t),vOo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);Iv=n(Ys,"LI",{});var gke=s(Iv);Qhe=n(gke,"STRONG",{});var Wut=s(Qhe);FOo=r(Wut,"bert"),Wut.forEach(t),TOo=r(gke," \u2014 "),LV=n(gke,"A",{href:!0});var Qut=s(LV);MOo=r(Qut,"BertForNextSentencePrediction"),Qut.forEach(t),EOo=r(gke," (BERT model)"),gke.forEach(t),COo=i(Ys),Nv=n(Ys,"LI",{});var hke=s(Nv);Hhe=n(hke,"STRONG",{});var Hut=s(Hhe);wOo=r(Hut,"fnet"),Hut.forEach(t),AOo=r(hke," \u2014 "),yV=n(hke,"A",{href:!0});var Uut=s(yV);LOo=r(Uut,"FNetForNextSentencePrediction"),Uut.forEach(t),yOo=r(hke," (FNet model)"),hke.forEach(t),xOo=i(Ys),qv=n(Ys,"LI",{});var pke=s(qv);Uhe=n(pke,"STRONG",{});var Jut=s(Uhe);$Oo=r(Jut,"megatron-bert"),Jut.forEach(t),kOo=r(pke," \u2014 "),xV=n(pke,"A",{href:!0});var Yut=s(xV);SOo=r(Yut,"MegatronBertForNextSentencePrediction"),Yut.forEach(t),ROo=r(pke," (Megatron-BERT model)"),pke.forEach(t),POo=i(Ys),jv=n(Ys,"LI",{});var _ke=s(jv);Jhe=n(_ke,"STRONG",{});var Kut=s(Jhe);BOo=r(Kut,"mobilebert"),Kut.forEach(t),IOo=r(_ke," \u2014 "),$V=n(_ke,"A",{href:!0});var Zut=s($V);NOo=r(Zut,"MobileBertForNextSentencePrediction"),Zut.forEach(t),qOo=r(_ke," (MobileBERT model)"),_ke.forEach(t),jOo=i(Ys),Dv=n(Ys,"LI",{});var uke=s(Dv);Yhe=n(uke,"STRONG",{});var e2t=s(Yhe);DOo=r(e2t,"qdqbert"),e2t.forEach(t),GOo=r(uke," \u2014 "),kV=n(uke,"A",{href:!0});var o2t=s(kV);OOo=r(o2t,"QDQBertForNextSentencePrediction"),o2t.forEach(t),VOo=r(uke," (QDQBert model)"),uke.forEach(t),Ys.forEach(t),XOo=i(ia),Gv=n(ia,"P",{});var bke=s(Gv);zOo=r(bke,"The model is set in evaluation mode by default using "),Khe=n(bke,"CODE",{});var r2t=s(Khe);WOo=r(r2t,"model.eval()"),r2t.forEach(t),QOo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(bke,"CODE",{});var t2t=s(Zhe);HOo=r(t2t,"model.train()"),t2t.forEach(t),bke.forEach(t),UOo=i(ia),T(Ov.$$.fragment,ia),ia.forEach(t),Js.forEach(t),TDe=i(f),Yi=n(f,"H2",{class:!0});var wOe=s(Yi);Vv=n(wOe,"A",{id:!0,class:!0,href:!0});var a2t=s(Vv);epe=n(a2t,"SPAN",{});var n2t=s(epe);T(cL.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),JOo=i(wOe),ope=n(wOe,"SPAN",{});var s2t=s(ope);YOo=r(s2t,"AutoModelForTokenClassification"),s2t.forEach(t),wOe.forEach(t),MDe=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(fL.$$.fragment,Ks),KOo=i(Ks),Ki=n(Ks,"P",{});var kee=s(Ki);ZOo=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SV=n(kee,"A",{href:!0});var l2t=s(SV);eVo=r(l2t,"from_pretrained()"),l2t.forEach(t),oVo=r(kee," class method or the "),RV=n(kee,"A",{href:!0});var i2t=s(RV);rVo=r(i2t,"from_config()"),i2t.forEach(t),tVo=r(kee,` class
method.`),kee.forEach(t),aVo=i(Ks),mL=n(Ks,"P",{});var AOe=s(mL);nVo=r(AOe,"This class cannot be instantiated directly using "),rpe=n(AOe,"CODE",{});var d2t=s(rpe);sVo=r(d2t,"__init__()"),d2t.forEach(t),lVo=r(AOe," (throws an error)."),AOe.forEach(t),iVo=i(Ks),ft=n(Ks,"DIV",{class:!0});var b0=s(ft);T(gL.$$.fragment,b0),dVo=i(b0),tpe=n(b0,"P",{});var c2t=s(tpe);cVo=r(c2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),c2t.forEach(t),fVo=i(b0),Zi=n(b0,"P",{});var See=s(Zi);mVo=r(See,`Note:
Loading a model from its configuration file does `),ape=n(See,"STRONG",{});var f2t=s(ape);gVo=r(f2t,"not"),f2t.forEach(t),hVo=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(See,"A",{href:!0});var m2t=s(PV);pVo=r(m2t,"from_pretrained()"),m2t.forEach(t),_Vo=r(See," to load the model weights."),See.forEach(t),uVo=i(b0),T(Xv.$$.fragment,b0),b0.forEach(t),bVo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(hL.$$.fragment,da),vVo=i(da),npe=n(da,"P",{});var g2t=s(npe);FVo=r(g2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),g2t.forEach(t),TVo=i(da),Ia=n(da,"P",{});var v0=s(Ia);MVo=r(v0,"The model class to instantiate is selected based on the "),spe=n(v0,"CODE",{});var h2t=s(spe);EVo=r(h2t,"model_type"),h2t.forEach(t),CVo=r(v0,` property of the config object (either
passed as an argument or loaded from `),lpe=n(v0,"CODE",{});var p2t=s(lpe);wVo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),AVo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(v0,"CODE",{});var _2t=s(ipe);LVo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),yVo=r(v0,":"),v0.forEach(t),xVo=i(da),U=n(da,"UL",{});var J=s(U);zv=n(J,"LI",{});var vke=s(zv);dpe=n(vke,"STRONG",{});var u2t=s(dpe);$Vo=r(u2t,"albert"),u2t.forEach(t),kVo=r(vke," \u2014 "),BV=n(vke,"A",{href:!0});var b2t=s(BV);SVo=r(b2t,"AlbertForTokenClassification"),b2t.forEach(t),RVo=r(vke," (ALBERT model)"),vke.forEach(t),PVo=i(J),Wv=n(J,"LI",{});var Fke=s(Wv);cpe=n(Fke,"STRONG",{});var v2t=s(cpe);BVo=r(v2t,"bert"),v2t.forEach(t),IVo=r(Fke," \u2014 "),IV=n(Fke,"A",{href:!0});var F2t=s(IV);NVo=r(F2t,"BertForTokenClassification"),F2t.forEach(t),qVo=r(Fke," (BERT model)"),Fke.forEach(t),jVo=i(J),Qv=n(J,"LI",{});var Tke=s(Qv);fpe=n(Tke,"STRONG",{});var T2t=s(fpe);DVo=r(T2t,"big_bird"),T2t.forEach(t),GVo=r(Tke," \u2014 "),NV=n(Tke,"A",{href:!0});var M2t=s(NV);OVo=r(M2t,"BigBirdForTokenClassification"),M2t.forEach(t),VVo=r(Tke," (BigBird model)"),Tke.forEach(t),XVo=i(J),Hv=n(J,"LI",{});var Mke=s(Hv);mpe=n(Mke,"STRONG",{});var E2t=s(mpe);zVo=r(E2t,"camembert"),E2t.forEach(t),WVo=r(Mke," \u2014 "),qV=n(Mke,"A",{href:!0});var C2t=s(qV);QVo=r(C2t,"CamembertForTokenClassification"),C2t.forEach(t),HVo=r(Mke," (CamemBERT model)"),Mke.forEach(t),UVo=i(J),Uv=n(J,"LI",{});var Eke=s(Uv);gpe=n(Eke,"STRONG",{});var w2t=s(gpe);JVo=r(w2t,"canine"),w2t.forEach(t),YVo=r(Eke," \u2014 "),jV=n(Eke,"A",{href:!0});var A2t=s(jV);KVo=r(A2t,"CanineForTokenClassification"),A2t.forEach(t),ZVo=r(Eke," (CANINE model)"),Eke.forEach(t),eXo=i(J),Jv=n(J,"LI",{});var Cke=s(Jv);hpe=n(Cke,"STRONG",{});var L2t=s(hpe);oXo=r(L2t,"convbert"),L2t.forEach(t),rXo=r(Cke," \u2014 "),DV=n(Cke,"A",{href:!0});var y2t=s(DV);tXo=r(y2t,"ConvBertForTokenClassification"),y2t.forEach(t),aXo=r(Cke," (ConvBERT model)"),Cke.forEach(t),nXo=i(J),Yv=n(J,"LI",{});var wke=s(Yv);ppe=n(wke,"STRONG",{});var x2t=s(ppe);sXo=r(x2t,"data2vec-text"),x2t.forEach(t),lXo=r(wke," \u2014 "),GV=n(wke,"A",{href:!0});var $2t=s(GV);iXo=r($2t,"Data2VecTextForTokenClassification"),$2t.forEach(t),dXo=r(wke," (Data2VecText model)"),wke.forEach(t),cXo=i(J),Kv=n(J,"LI",{});var Ake=s(Kv);_pe=n(Ake,"STRONG",{});var k2t=s(_pe);fXo=r(k2t,"deberta"),k2t.forEach(t),mXo=r(Ake," \u2014 "),OV=n(Ake,"A",{href:!0});var S2t=s(OV);gXo=r(S2t,"DebertaForTokenClassification"),S2t.forEach(t),hXo=r(Ake," (DeBERTa model)"),Ake.forEach(t),pXo=i(J),Zv=n(J,"LI",{});var Lke=s(Zv);upe=n(Lke,"STRONG",{});var R2t=s(upe);_Xo=r(R2t,"deberta-v2"),R2t.forEach(t),uXo=r(Lke," \u2014 "),VV=n(Lke,"A",{href:!0});var P2t=s(VV);bXo=r(P2t,"DebertaV2ForTokenClassification"),P2t.forEach(t),vXo=r(Lke," (DeBERTa-v2 model)"),Lke.forEach(t),FXo=i(J),eF=n(J,"LI",{});var yke=s(eF);bpe=n(yke,"STRONG",{});var B2t=s(bpe);TXo=r(B2t,"distilbert"),B2t.forEach(t),MXo=r(yke," \u2014 "),XV=n(yke,"A",{href:!0});var I2t=s(XV);EXo=r(I2t,"DistilBertForTokenClassification"),I2t.forEach(t),CXo=r(yke," (DistilBERT model)"),yke.forEach(t),wXo=i(J),oF=n(J,"LI",{});var xke=s(oF);vpe=n(xke,"STRONG",{});var N2t=s(vpe);AXo=r(N2t,"electra"),N2t.forEach(t),LXo=r(xke," \u2014 "),zV=n(xke,"A",{href:!0});var q2t=s(zV);yXo=r(q2t,"ElectraForTokenClassification"),q2t.forEach(t),xXo=r(xke," (ELECTRA model)"),xke.forEach(t),$Xo=i(J),rF=n(J,"LI",{});var $ke=s(rF);Fpe=n($ke,"STRONG",{});var j2t=s(Fpe);kXo=r(j2t,"flaubert"),j2t.forEach(t),SXo=r($ke," \u2014 "),WV=n($ke,"A",{href:!0});var D2t=s(WV);RXo=r(D2t,"FlaubertForTokenClassification"),D2t.forEach(t),PXo=r($ke," (FlauBERT model)"),$ke.forEach(t),BXo=i(J),tF=n(J,"LI",{});var kke=s(tF);Tpe=n(kke,"STRONG",{});var G2t=s(Tpe);IXo=r(G2t,"fnet"),G2t.forEach(t),NXo=r(kke," \u2014 "),QV=n(kke,"A",{href:!0});var O2t=s(QV);qXo=r(O2t,"FNetForTokenClassification"),O2t.forEach(t),jXo=r(kke," (FNet model)"),kke.forEach(t),DXo=i(J),aF=n(J,"LI",{});var Ske=s(aF);Mpe=n(Ske,"STRONG",{});var V2t=s(Mpe);GXo=r(V2t,"funnel"),V2t.forEach(t),OXo=r(Ske," \u2014 "),HV=n(Ske,"A",{href:!0});var X2t=s(HV);VXo=r(X2t,"FunnelForTokenClassification"),X2t.forEach(t),XXo=r(Ske," (Funnel Transformer model)"),Ske.forEach(t),zXo=i(J),nF=n(J,"LI",{});var Rke=s(nF);Epe=n(Rke,"STRONG",{});var z2t=s(Epe);WXo=r(z2t,"gpt2"),z2t.forEach(t),QXo=r(Rke," \u2014 "),UV=n(Rke,"A",{href:!0});var W2t=s(UV);HXo=r(W2t,"GPT2ForTokenClassification"),W2t.forEach(t),UXo=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),JXo=i(J),sF=n(J,"LI",{});var Pke=s(sF);Cpe=n(Pke,"STRONG",{});var Q2t=s(Cpe);YXo=r(Q2t,"ibert"),Q2t.forEach(t),KXo=r(Pke," \u2014 "),JV=n(Pke,"A",{href:!0});var H2t=s(JV);ZXo=r(H2t,"IBertForTokenClassification"),H2t.forEach(t),ezo=r(Pke," (I-BERT model)"),Pke.forEach(t),ozo=i(J),lF=n(J,"LI",{});var Bke=s(lF);wpe=n(Bke,"STRONG",{});var U2t=s(wpe);rzo=r(U2t,"layoutlm"),U2t.forEach(t),tzo=r(Bke," \u2014 "),YV=n(Bke,"A",{href:!0});var J2t=s(YV);azo=r(J2t,"LayoutLMForTokenClassification"),J2t.forEach(t),nzo=r(Bke," (LayoutLM model)"),Bke.forEach(t),szo=i(J),iF=n(J,"LI",{});var Ike=s(iF);Ape=n(Ike,"STRONG",{});var Y2t=s(Ape);lzo=r(Y2t,"layoutlmv2"),Y2t.forEach(t),izo=r(Ike," \u2014 "),KV=n(Ike,"A",{href:!0});var K2t=s(KV);dzo=r(K2t,"LayoutLMv2ForTokenClassification"),K2t.forEach(t),czo=r(Ike," (LayoutLMv2 model)"),Ike.forEach(t),fzo=i(J),dF=n(J,"LI",{});var Nke=s(dF);Lpe=n(Nke,"STRONG",{});var Z2t=s(Lpe);mzo=r(Z2t,"layoutlmv3"),Z2t.forEach(t),gzo=r(Nke," \u2014 "),ZV=n(Nke,"A",{href:!0});var e1t=s(ZV);hzo=r(e1t,"LayoutLMv3ForTokenClassification"),e1t.forEach(t),pzo=r(Nke," (LayoutLMv3 model)"),Nke.forEach(t),_zo=i(J),cF=n(J,"LI",{});var qke=s(cF);ype=n(qke,"STRONG",{});var o1t=s(ype);uzo=r(o1t,"longformer"),o1t.forEach(t),bzo=r(qke," \u2014 "),eX=n(qke,"A",{href:!0});var r1t=s(eX);vzo=r(r1t,"LongformerForTokenClassification"),r1t.forEach(t),Fzo=r(qke," (Longformer model)"),qke.forEach(t),Tzo=i(J),fF=n(J,"LI",{});var jke=s(fF);xpe=n(jke,"STRONG",{});var t1t=s(xpe);Mzo=r(t1t,"megatron-bert"),t1t.forEach(t),Ezo=r(jke," \u2014 "),oX=n(jke,"A",{href:!0});var a1t=s(oX);Czo=r(a1t,"MegatronBertForTokenClassification"),a1t.forEach(t),wzo=r(jke," (Megatron-BERT model)"),jke.forEach(t),Azo=i(J),mF=n(J,"LI",{});var Dke=s(mF);$pe=n(Dke,"STRONG",{});var n1t=s($pe);Lzo=r(n1t,"mobilebert"),n1t.forEach(t),yzo=r(Dke," \u2014 "),rX=n(Dke,"A",{href:!0});var s1t=s(rX);xzo=r(s1t,"MobileBertForTokenClassification"),s1t.forEach(t),$zo=r(Dke," (MobileBERT model)"),Dke.forEach(t),kzo=i(J),gF=n(J,"LI",{});var Gke=s(gF);kpe=n(Gke,"STRONG",{});var l1t=s(kpe);Szo=r(l1t,"mpnet"),l1t.forEach(t),Rzo=r(Gke," \u2014 "),tX=n(Gke,"A",{href:!0});var i1t=s(tX);Pzo=r(i1t,"MPNetForTokenClassification"),i1t.forEach(t),Bzo=r(Gke," (MPNet model)"),Gke.forEach(t),Izo=i(J),hF=n(J,"LI",{});var Oke=s(hF);Spe=n(Oke,"STRONG",{});var d1t=s(Spe);Nzo=r(d1t,"nystromformer"),d1t.forEach(t),qzo=r(Oke," \u2014 "),aX=n(Oke,"A",{href:!0});var c1t=s(aX);jzo=r(c1t,"NystromformerForTokenClassification"),c1t.forEach(t),Dzo=r(Oke," (Nystr\xF6mformer model)"),Oke.forEach(t),Gzo=i(J),pF=n(J,"LI",{});var Vke=s(pF);Rpe=n(Vke,"STRONG",{});var f1t=s(Rpe);Ozo=r(f1t,"qdqbert"),f1t.forEach(t),Vzo=r(Vke," \u2014 "),nX=n(Vke,"A",{href:!0});var m1t=s(nX);Xzo=r(m1t,"QDQBertForTokenClassification"),m1t.forEach(t),zzo=r(Vke," (QDQBert model)"),Vke.forEach(t),Wzo=i(J),_F=n(J,"LI",{});var Xke=s(_F);Ppe=n(Xke,"STRONG",{});var g1t=s(Ppe);Qzo=r(g1t,"rembert"),g1t.forEach(t),Hzo=r(Xke," \u2014 "),sX=n(Xke,"A",{href:!0});var h1t=s(sX);Uzo=r(h1t,"RemBertForTokenClassification"),h1t.forEach(t),Jzo=r(Xke," (RemBERT model)"),Xke.forEach(t),Yzo=i(J),uF=n(J,"LI",{});var zke=s(uF);Bpe=n(zke,"STRONG",{});var p1t=s(Bpe);Kzo=r(p1t,"roberta"),p1t.forEach(t),Zzo=r(zke," \u2014 "),lX=n(zke,"A",{href:!0});var _1t=s(lX);eWo=r(_1t,"RobertaForTokenClassification"),_1t.forEach(t),oWo=r(zke," (RoBERTa model)"),zke.forEach(t),rWo=i(J),bF=n(J,"LI",{});var Wke=s(bF);Ipe=n(Wke,"STRONG",{});var u1t=s(Ipe);tWo=r(u1t,"roformer"),u1t.forEach(t),aWo=r(Wke," \u2014 "),iX=n(Wke,"A",{href:!0});var b1t=s(iX);nWo=r(b1t,"RoFormerForTokenClassification"),b1t.forEach(t),sWo=r(Wke," (RoFormer model)"),Wke.forEach(t),lWo=i(J),vF=n(J,"LI",{});var Qke=s(vF);Npe=n(Qke,"STRONG",{});var v1t=s(Npe);iWo=r(v1t,"squeezebert"),v1t.forEach(t),dWo=r(Qke," \u2014 "),dX=n(Qke,"A",{href:!0});var F1t=s(dX);cWo=r(F1t,"SqueezeBertForTokenClassification"),F1t.forEach(t),fWo=r(Qke," (SqueezeBERT model)"),Qke.forEach(t),mWo=i(J),FF=n(J,"LI",{});var Hke=s(FF);qpe=n(Hke,"STRONG",{});var T1t=s(qpe);gWo=r(T1t,"xlm"),T1t.forEach(t),hWo=r(Hke," \u2014 "),cX=n(Hke,"A",{href:!0});var M1t=s(cX);pWo=r(M1t,"XLMForTokenClassification"),M1t.forEach(t),_Wo=r(Hke," (XLM model)"),Hke.forEach(t),uWo=i(J),TF=n(J,"LI",{});var Uke=s(TF);jpe=n(Uke,"STRONG",{});var E1t=s(jpe);bWo=r(E1t,"xlm-roberta"),E1t.forEach(t),vWo=r(Uke," \u2014 "),fX=n(Uke,"A",{href:!0});var C1t=s(fX);FWo=r(C1t,"XLMRobertaForTokenClassification"),C1t.forEach(t),TWo=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),MWo=i(J),MF=n(J,"LI",{});var Jke=s(MF);Dpe=n(Jke,"STRONG",{});var w1t=s(Dpe);EWo=r(w1t,"xlm-roberta-xl"),w1t.forEach(t),CWo=r(Jke," \u2014 "),mX=n(Jke,"A",{href:!0});var A1t=s(mX);wWo=r(A1t,"XLMRobertaXLForTokenClassification"),A1t.forEach(t),AWo=r(Jke," (XLM-RoBERTa-XL model)"),Jke.forEach(t),LWo=i(J),EF=n(J,"LI",{});var Yke=s(EF);Gpe=n(Yke,"STRONG",{});var L1t=s(Gpe);yWo=r(L1t,"xlnet"),L1t.forEach(t),xWo=r(Yke," \u2014 "),gX=n(Yke,"A",{href:!0});var y1t=s(gX);$Wo=r(y1t,"XLNetForTokenClassification"),y1t.forEach(t),kWo=r(Yke," (XLNet model)"),Yke.forEach(t),SWo=i(J),CF=n(J,"LI",{});var Kke=s(CF);Ope=n(Kke,"STRONG",{});var x1t=s(Ope);RWo=r(x1t,"yoso"),x1t.forEach(t),PWo=r(Kke," \u2014 "),hX=n(Kke,"A",{href:!0});var $1t=s(hX);BWo=r($1t,"YosoForTokenClassification"),$1t.forEach(t),IWo=r(Kke," (YOSO model)"),Kke.forEach(t),J.forEach(t),NWo=i(da),wF=n(da,"P",{});var Zke=s(wF);qWo=r(Zke,"The model is set in evaluation mode by default using "),Vpe=n(Zke,"CODE",{});var k1t=s(Vpe);jWo=r(k1t,"model.eval()"),k1t.forEach(t),DWo=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(Zke,"CODE",{});var S1t=s(Xpe);GWo=r(S1t,"model.train()"),S1t.forEach(t),Zke.forEach(t),OWo=i(da),T(AF.$$.fragment,da),da.forEach(t),Ks.forEach(t),EDe=i(f),ed=n(f,"H2",{class:!0});var LOe=s(ed);LF=n(LOe,"A",{id:!0,class:!0,href:!0});var R1t=s(LF);zpe=n(R1t,"SPAN",{});var P1t=s(zpe);T(pL.$$.fragment,P1t),P1t.forEach(t),R1t.forEach(t),VWo=i(LOe),Wpe=n(LOe,"SPAN",{});var B1t=s(Wpe);XWo=r(B1t,"AutoModelForQuestionAnswering"),B1t.forEach(t),LOe.forEach(t),CDe=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(_L.$$.fragment,Zs),zWo=i(Zs),od=n(Zs,"P",{});var Ree=s(od);WWo=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pX=n(Ree,"A",{href:!0});var I1t=s(pX);QWo=r(I1t,"from_pretrained()"),I1t.forEach(t),HWo=r(Ree," class method or the "),_X=n(Ree,"A",{href:!0});var N1t=s(_X);UWo=r(N1t,"from_config()"),N1t.forEach(t),JWo=r(Ree,` class
method.`),Ree.forEach(t),YWo=i(Zs),uL=n(Zs,"P",{});var yOe=s(uL);KWo=r(yOe,"This class cannot be instantiated directly using "),Qpe=n(yOe,"CODE",{});var q1t=s(Qpe);ZWo=r(q1t,"__init__()"),q1t.forEach(t),eQo=r(yOe," (throws an error)."),yOe.forEach(t),oQo=i(Zs),mt=n(Zs,"DIV",{class:!0});var F0=s(mt);T(bL.$$.fragment,F0),rQo=i(F0),Hpe=n(F0,"P",{});var j1t=s(Hpe);tQo=r(j1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j1t.forEach(t),aQo=i(F0),rd=n(F0,"P",{});var Pee=s(rd);nQo=r(Pee,`Note:
Loading a model from its configuration file does `),Upe=n(Pee,"STRONG",{});var D1t=s(Upe);sQo=r(D1t,"not"),D1t.forEach(t),lQo=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(Pee,"A",{href:!0});var G1t=s(uX);iQo=r(G1t,"from_pretrained()"),G1t.forEach(t),dQo=r(Pee," to load the model weights."),Pee.forEach(t),cQo=i(F0),T(yF.$$.fragment,F0),F0.forEach(t),fQo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(vL.$$.fragment,ca),mQo=i(ca),Jpe=n(ca,"P",{});var O1t=s(Jpe);gQo=r(O1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),O1t.forEach(t),hQo=i(ca),Na=n(ca,"P",{});var T0=s(Na);pQo=r(T0,"The model class to instantiate is selected based on the "),Ype=n(T0,"CODE",{});var V1t=s(Ype);_Qo=r(V1t,"model_type"),V1t.forEach(t),uQo=r(T0,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(T0,"CODE",{});var X1t=s(Kpe);bQo=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),vQo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(T0,"CODE",{});var z1t=s(Zpe);FQo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),TQo=r(T0,":"),T0.forEach(t),MQo=i(ca),V=n(ca,"UL",{});var X=s(V);xF=n(X,"LI",{});var eSe=s(xF);e_e=n(eSe,"STRONG",{});var W1t=s(e_e);EQo=r(W1t,"albert"),W1t.forEach(t),CQo=r(eSe," \u2014 "),bX=n(eSe,"A",{href:!0});var Q1t=s(bX);wQo=r(Q1t,"AlbertForQuestionAnswering"),Q1t.forEach(t),AQo=r(eSe," (ALBERT model)"),eSe.forEach(t),LQo=i(X),$F=n(X,"LI",{});var oSe=s($F);o_e=n(oSe,"STRONG",{});var H1t=s(o_e);yQo=r(H1t,"bart"),H1t.forEach(t),xQo=r(oSe," \u2014 "),vX=n(oSe,"A",{href:!0});var U1t=s(vX);$Qo=r(U1t,"BartForQuestionAnswering"),U1t.forEach(t),kQo=r(oSe," (BART model)"),oSe.forEach(t),SQo=i(X),kF=n(X,"LI",{});var rSe=s(kF);r_e=n(rSe,"STRONG",{});var J1t=s(r_e);RQo=r(J1t,"bert"),J1t.forEach(t),PQo=r(rSe," \u2014 "),FX=n(rSe,"A",{href:!0});var Y1t=s(FX);BQo=r(Y1t,"BertForQuestionAnswering"),Y1t.forEach(t),IQo=r(rSe," (BERT model)"),rSe.forEach(t),NQo=i(X),SF=n(X,"LI",{});var tSe=s(SF);t_e=n(tSe,"STRONG",{});var K1t=s(t_e);qQo=r(K1t,"big_bird"),K1t.forEach(t),jQo=r(tSe," \u2014 "),TX=n(tSe,"A",{href:!0});var Z1t=s(TX);DQo=r(Z1t,"BigBirdForQuestionAnswering"),Z1t.forEach(t),GQo=r(tSe," (BigBird model)"),tSe.forEach(t),OQo=i(X),RF=n(X,"LI",{});var aSe=s(RF);a_e=n(aSe,"STRONG",{});var ebt=s(a_e);VQo=r(ebt,"bigbird_pegasus"),ebt.forEach(t),XQo=r(aSe," \u2014 "),MX=n(aSe,"A",{href:!0});var obt=s(MX);zQo=r(obt,"BigBirdPegasusForQuestionAnswering"),obt.forEach(t),WQo=r(aSe," (BigBird-Pegasus model)"),aSe.forEach(t),QQo=i(X),PF=n(X,"LI",{});var nSe=s(PF);n_e=n(nSe,"STRONG",{});var rbt=s(n_e);HQo=r(rbt,"camembert"),rbt.forEach(t),UQo=r(nSe," \u2014 "),EX=n(nSe,"A",{href:!0});var tbt=s(EX);JQo=r(tbt,"CamembertForQuestionAnswering"),tbt.forEach(t),YQo=r(nSe," (CamemBERT model)"),nSe.forEach(t),KQo=i(X),BF=n(X,"LI",{});var sSe=s(BF);s_e=n(sSe,"STRONG",{});var abt=s(s_e);ZQo=r(abt,"canine"),abt.forEach(t),eHo=r(sSe," \u2014 "),CX=n(sSe,"A",{href:!0});var nbt=s(CX);oHo=r(nbt,"CanineForQuestionAnswering"),nbt.forEach(t),rHo=r(sSe," (CANINE model)"),sSe.forEach(t),tHo=i(X),IF=n(X,"LI",{});var lSe=s(IF);l_e=n(lSe,"STRONG",{});var sbt=s(l_e);aHo=r(sbt,"convbert"),sbt.forEach(t),nHo=r(lSe," \u2014 "),wX=n(lSe,"A",{href:!0});var lbt=s(wX);sHo=r(lbt,"ConvBertForQuestionAnswering"),lbt.forEach(t),lHo=r(lSe," (ConvBERT model)"),lSe.forEach(t),iHo=i(X),NF=n(X,"LI",{});var iSe=s(NF);i_e=n(iSe,"STRONG",{});var ibt=s(i_e);dHo=r(ibt,"data2vec-text"),ibt.forEach(t),cHo=r(iSe," \u2014 "),AX=n(iSe,"A",{href:!0});var dbt=s(AX);fHo=r(dbt,"Data2VecTextForQuestionAnswering"),dbt.forEach(t),mHo=r(iSe," (Data2VecText model)"),iSe.forEach(t),gHo=i(X),qF=n(X,"LI",{});var dSe=s(qF);d_e=n(dSe,"STRONG",{});var cbt=s(d_e);hHo=r(cbt,"deberta"),cbt.forEach(t),pHo=r(dSe," \u2014 "),LX=n(dSe,"A",{href:!0});var fbt=s(LX);_Ho=r(fbt,"DebertaForQuestionAnswering"),fbt.forEach(t),uHo=r(dSe," (DeBERTa model)"),dSe.forEach(t),bHo=i(X),jF=n(X,"LI",{});var cSe=s(jF);c_e=n(cSe,"STRONG",{});var mbt=s(c_e);vHo=r(mbt,"deberta-v2"),mbt.forEach(t),FHo=r(cSe," \u2014 "),yX=n(cSe,"A",{href:!0});var gbt=s(yX);THo=r(gbt,"DebertaV2ForQuestionAnswering"),gbt.forEach(t),MHo=r(cSe," (DeBERTa-v2 model)"),cSe.forEach(t),EHo=i(X),DF=n(X,"LI",{});var fSe=s(DF);f_e=n(fSe,"STRONG",{});var hbt=s(f_e);CHo=r(hbt,"distilbert"),hbt.forEach(t),wHo=r(fSe," \u2014 "),xX=n(fSe,"A",{href:!0});var pbt=s(xX);AHo=r(pbt,"DistilBertForQuestionAnswering"),pbt.forEach(t),LHo=r(fSe," (DistilBERT model)"),fSe.forEach(t),yHo=i(X),GF=n(X,"LI",{});var mSe=s(GF);m_e=n(mSe,"STRONG",{});var _bt=s(m_e);xHo=r(_bt,"electra"),_bt.forEach(t),$Ho=r(mSe," \u2014 "),$X=n(mSe,"A",{href:!0});var ubt=s($X);kHo=r(ubt,"ElectraForQuestionAnswering"),ubt.forEach(t),SHo=r(mSe," (ELECTRA model)"),mSe.forEach(t),RHo=i(X),OF=n(X,"LI",{});var gSe=s(OF);g_e=n(gSe,"STRONG",{});var bbt=s(g_e);PHo=r(bbt,"flaubert"),bbt.forEach(t),BHo=r(gSe," \u2014 "),kX=n(gSe,"A",{href:!0});var vbt=s(kX);IHo=r(vbt,"FlaubertForQuestionAnsweringSimple"),vbt.forEach(t),NHo=r(gSe," (FlauBERT model)"),gSe.forEach(t),qHo=i(X),VF=n(X,"LI",{});var hSe=s(VF);h_e=n(hSe,"STRONG",{});var Fbt=s(h_e);jHo=r(Fbt,"fnet"),Fbt.forEach(t),DHo=r(hSe," \u2014 "),SX=n(hSe,"A",{href:!0});var Tbt=s(SX);GHo=r(Tbt,"FNetForQuestionAnswering"),Tbt.forEach(t),OHo=r(hSe," (FNet model)"),hSe.forEach(t),VHo=i(X),XF=n(X,"LI",{});var pSe=s(XF);p_e=n(pSe,"STRONG",{});var Mbt=s(p_e);XHo=r(Mbt,"funnel"),Mbt.forEach(t),zHo=r(pSe," \u2014 "),RX=n(pSe,"A",{href:!0});var Ebt=s(RX);WHo=r(Ebt,"FunnelForQuestionAnswering"),Ebt.forEach(t),QHo=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),HHo=i(X),zF=n(X,"LI",{});var _Se=s(zF);__e=n(_Se,"STRONG",{});var Cbt=s(__e);UHo=r(Cbt,"gptj"),Cbt.forEach(t),JHo=r(_Se," \u2014 "),PX=n(_Se,"A",{href:!0});var wbt=s(PX);YHo=r(wbt,"GPTJForQuestionAnswering"),wbt.forEach(t),KHo=r(_Se," (GPT-J model)"),_Se.forEach(t),ZHo=i(X),WF=n(X,"LI",{});var uSe=s(WF);u_e=n(uSe,"STRONG",{});var Abt=s(u_e);eUo=r(Abt,"ibert"),Abt.forEach(t),oUo=r(uSe," \u2014 "),BX=n(uSe,"A",{href:!0});var Lbt=s(BX);rUo=r(Lbt,"IBertForQuestionAnswering"),Lbt.forEach(t),tUo=r(uSe," (I-BERT model)"),uSe.forEach(t),aUo=i(X),QF=n(X,"LI",{});var bSe=s(QF);b_e=n(bSe,"STRONG",{});var ybt=s(b_e);nUo=r(ybt,"layoutlmv2"),ybt.forEach(t),sUo=r(bSe," \u2014 "),IX=n(bSe,"A",{href:!0});var xbt=s(IX);lUo=r(xbt,"LayoutLMv2ForQuestionAnswering"),xbt.forEach(t),iUo=r(bSe," (LayoutLMv2 model)"),bSe.forEach(t),dUo=i(X),HF=n(X,"LI",{});var vSe=s(HF);v_e=n(vSe,"STRONG",{});var $bt=s(v_e);cUo=r($bt,"layoutlmv3"),$bt.forEach(t),fUo=r(vSe," \u2014 "),NX=n(vSe,"A",{href:!0});var kbt=s(NX);mUo=r(kbt,"LayoutLMv3ForQuestionAnswering"),kbt.forEach(t),gUo=r(vSe," (LayoutLMv3 model)"),vSe.forEach(t),hUo=i(X),UF=n(X,"LI",{});var FSe=s(UF);F_e=n(FSe,"STRONG",{});var Sbt=s(F_e);pUo=r(Sbt,"led"),Sbt.forEach(t),_Uo=r(FSe," \u2014 "),qX=n(FSe,"A",{href:!0});var Rbt=s(qX);uUo=r(Rbt,"LEDForQuestionAnswering"),Rbt.forEach(t),bUo=r(FSe," (LED model)"),FSe.forEach(t),vUo=i(X),JF=n(X,"LI",{});var TSe=s(JF);T_e=n(TSe,"STRONG",{});var Pbt=s(T_e);FUo=r(Pbt,"longformer"),Pbt.forEach(t),TUo=r(TSe," \u2014 "),jX=n(TSe,"A",{href:!0});var Bbt=s(jX);MUo=r(Bbt,"LongformerForQuestionAnswering"),Bbt.forEach(t),EUo=r(TSe," (Longformer model)"),TSe.forEach(t),CUo=i(X),YF=n(X,"LI",{});var MSe=s(YF);M_e=n(MSe,"STRONG",{});var Ibt=s(M_e);wUo=r(Ibt,"lxmert"),Ibt.forEach(t),AUo=r(MSe," \u2014 "),DX=n(MSe,"A",{href:!0});var Nbt=s(DX);LUo=r(Nbt,"LxmertForQuestionAnswering"),Nbt.forEach(t),yUo=r(MSe," (LXMERT model)"),MSe.forEach(t),xUo=i(X),KF=n(X,"LI",{});var ESe=s(KF);E_e=n(ESe,"STRONG",{});var qbt=s(E_e);$Uo=r(qbt,"mbart"),qbt.forEach(t),kUo=r(ESe," \u2014 "),GX=n(ESe,"A",{href:!0});var jbt=s(GX);SUo=r(jbt,"MBartForQuestionAnswering"),jbt.forEach(t),RUo=r(ESe," (mBART model)"),ESe.forEach(t),PUo=i(X),ZF=n(X,"LI",{});var CSe=s(ZF);C_e=n(CSe,"STRONG",{});var Dbt=s(C_e);BUo=r(Dbt,"megatron-bert"),Dbt.forEach(t),IUo=r(CSe," \u2014 "),OX=n(CSe,"A",{href:!0});var Gbt=s(OX);NUo=r(Gbt,"MegatronBertForQuestionAnswering"),Gbt.forEach(t),qUo=r(CSe," (Megatron-BERT model)"),CSe.forEach(t),jUo=i(X),e6=n(X,"LI",{});var wSe=s(e6);w_e=n(wSe,"STRONG",{});var Obt=s(w_e);DUo=r(Obt,"mobilebert"),Obt.forEach(t),GUo=r(wSe," \u2014 "),VX=n(wSe,"A",{href:!0});var Vbt=s(VX);OUo=r(Vbt,"MobileBertForQuestionAnswering"),Vbt.forEach(t),VUo=r(wSe," (MobileBERT model)"),wSe.forEach(t),XUo=i(X),o6=n(X,"LI",{});var ASe=s(o6);A_e=n(ASe,"STRONG",{});var Xbt=s(A_e);zUo=r(Xbt,"mpnet"),Xbt.forEach(t),WUo=r(ASe," \u2014 "),XX=n(ASe,"A",{href:!0});var zbt=s(XX);QUo=r(zbt,"MPNetForQuestionAnswering"),zbt.forEach(t),HUo=r(ASe," (MPNet model)"),ASe.forEach(t),UUo=i(X),r6=n(X,"LI",{});var LSe=s(r6);L_e=n(LSe,"STRONG",{});var Wbt=s(L_e);JUo=r(Wbt,"nystromformer"),Wbt.forEach(t),YUo=r(LSe," \u2014 "),zX=n(LSe,"A",{href:!0});var Qbt=s(zX);KUo=r(Qbt,"NystromformerForQuestionAnswering"),Qbt.forEach(t),ZUo=r(LSe," (Nystr\xF6mformer model)"),LSe.forEach(t),eJo=i(X),t6=n(X,"LI",{});var ySe=s(t6);y_e=n(ySe,"STRONG",{});var Hbt=s(y_e);oJo=r(Hbt,"qdqbert"),Hbt.forEach(t),rJo=r(ySe," \u2014 "),WX=n(ySe,"A",{href:!0});var Ubt=s(WX);tJo=r(Ubt,"QDQBertForQuestionAnswering"),Ubt.forEach(t),aJo=r(ySe," (QDQBert model)"),ySe.forEach(t),nJo=i(X),a6=n(X,"LI",{});var xSe=s(a6);x_e=n(xSe,"STRONG",{});var Jbt=s(x_e);sJo=r(Jbt,"reformer"),Jbt.forEach(t),lJo=r(xSe," \u2014 "),QX=n(xSe,"A",{href:!0});var Ybt=s(QX);iJo=r(Ybt,"ReformerForQuestionAnswering"),Ybt.forEach(t),dJo=r(xSe," (Reformer model)"),xSe.forEach(t),cJo=i(X),n6=n(X,"LI",{});var $Se=s(n6);$_e=n($Se,"STRONG",{});var Kbt=s($_e);fJo=r(Kbt,"rembert"),Kbt.forEach(t),mJo=r($Se," \u2014 "),HX=n($Se,"A",{href:!0});var Zbt=s(HX);gJo=r(Zbt,"RemBertForQuestionAnswering"),Zbt.forEach(t),hJo=r($Se," (RemBERT model)"),$Se.forEach(t),pJo=i(X),s6=n(X,"LI",{});var kSe=s(s6);k_e=n(kSe,"STRONG",{});var evt=s(k_e);_Jo=r(evt,"roberta"),evt.forEach(t),uJo=r(kSe," \u2014 "),UX=n(kSe,"A",{href:!0});var ovt=s(UX);bJo=r(ovt,"RobertaForQuestionAnswering"),ovt.forEach(t),vJo=r(kSe," (RoBERTa model)"),kSe.forEach(t),FJo=i(X),l6=n(X,"LI",{});var SSe=s(l6);S_e=n(SSe,"STRONG",{});var rvt=s(S_e);TJo=r(rvt,"roformer"),rvt.forEach(t),MJo=r(SSe," \u2014 "),JX=n(SSe,"A",{href:!0});var tvt=s(JX);EJo=r(tvt,"RoFormerForQuestionAnswering"),tvt.forEach(t),CJo=r(SSe," (RoFormer model)"),SSe.forEach(t),wJo=i(X),i6=n(X,"LI",{});var RSe=s(i6);R_e=n(RSe,"STRONG",{});var avt=s(R_e);AJo=r(avt,"splinter"),avt.forEach(t),LJo=r(RSe," \u2014 "),YX=n(RSe,"A",{href:!0});var nvt=s(YX);yJo=r(nvt,"SplinterForQuestionAnswering"),nvt.forEach(t),xJo=r(RSe," (Splinter model)"),RSe.forEach(t),$Jo=i(X),d6=n(X,"LI",{});var PSe=s(d6);P_e=n(PSe,"STRONG",{});var svt=s(P_e);kJo=r(svt,"squeezebert"),svt.forEach(t),SJo=r(PSe," \u2014 "),KX=n(PSe,"A",{href:!0});var lvt=s(KX);RJo=r(lvt,"SqueezeBertForQuestionAnswering"),lvt.forEach(t),PJo=r(PSe," (SqueezeBERT model)"),PSe.forEach(t),BJo=i(X),c6=n(X,"LI",{});var BSe=s(c6);B_e=n(BSe,"STRONG",{});var ivt=s(B_e);IJo=r(ivt,"xlm"),ivt.forEach(t),NJo=r(BSe," \u2014 "),ZX=n(BSe,"A",{href:!0});var dvt=s(ZX);qJo=r(dvt,"XLMForQuestionAnsweringSimple"),dvt.forEach(t),jJo=r(BSe," (XLM model)"),BSe.forEach(t),DJo=i(X),f6=n(X,"LI",{});var ISe=s(f6);I_e=n(ISe,"STRONG",{});var cvt=s(I_e);GJo=r(cvt,"xlm-roberta"),cvt.forEach(t),OJo=r(ISe," \u2014 "),ez=n(ISe,"A",{href:!0});var fvt=s(ez);VJo=r(fvt,"XLMRobertaForQuestionAnswering"),fvt.forEach(t),XJo=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),zJo=i(X),m6=n(X,"LI",{});var NSe=s(m6);N_e=n(NSe,"STRONG",{});var mvt=s(N_e);WJo=r(mvt,"xlm-roberta-xl"),mvt.forEach(t),QJo=r(NSe," \u2014 "),oz=n(NSe,"A",{href:!0});var gvt=s(oz);HJo=r(gvt,"XLMRobertaXLForQuestionAnswering"),gvt.forEach(t),UJo=r(NSe," (XLM-RoBERTa-XL model)"),NSe.forEach(t),JJo=i(X),g6=n(X,"LI",{});var qSe=s(g6);q_e=n(qSe,"STRONG",{});var hvt=s(q_e);YJo=r(hvt,"xlnet"),hvt.forEach(t),KJo=r(qSe," \u2014 "),rz=n(qSe,"A",{href:!0});var pvt=s(rz);ZJo=r(pvt,"XLNetForQuestionAnsweringSimple"),pvt.forEach(t),eYo=r(qSe," (XLNet model)"),qSe.forEach(t),oYo=i(X),h6=n(X,"LI",{});var jSe=s(h6);j_e=n(jSe,"STRONG",{});var _vt=s(j_e);rYo=r(_vt,"yoso"),_vt.forEach(t),tYo=r(jSe," \u2014 "),tz=n(jSe,"A",{href:!0});var uvt=s(tz);aYo=r(uvt,"YosoForQuestionAnswering"),uvt.forEach(t),nYo=r(jSe," (YOSO model)"),jSe.forEach(t),X.forEach(t),sYo=i(ca),p6=n(ca,"P",{});var DSe=s(p6);lYo=r(DSe,"The model is set in evaluation mode by default using "),D_e=n(DSe,"CODE",{});var bvt=s(D_e);iYo=r(bvt,"model.eval()"),bvt.forEach(t),dYo=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(DSe,"CODE",{});var vvt=s(G_e);cYo=r(vvt,"model.train()"),vvt.forEach(t),DSe.forEach(t),fYo=i(ca),T(_6.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),wDe=i(f),td=n(f,"H2",{class:!0});var xOe=s(td);u6=n(xOe,"A",{id:!0,class:!0,href:!0});var Fvt=s(u6);O_e=n(Fvt,"SPAN",{});var Tvt=s(O_e);T(FL.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),mYo=i(xOe),V_e=n(xOe,"SPAN",{});var Mvt=s(V_e);gYo=r(Mvt,"AutoModelForTableQuestionAnswering"),Mvt.forEach(t),xOe.forEach(t),ADe=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(TL.$$.fragment,el),hYo=i(el),ad=n(el,"P",{});var Bee=s(ad);pYo=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),az=n(Bee,"A",{href:!0});var Evt=s(az);_Yo=r(Evt,"from_pretrained()"),Evt.forEach(t),uYo=r(Bee," class method or the "),nz=n(Bee,"A",{href:!0});var Cvt=s(nz);bYo=r(Cvt,"from_config()"),Cvt.forEach(t),vYo=r(Bee,` class
method.`),Bee.forEach(t),FYo=i(el),ML=n(el,"P",{});var $Oe=s(ML);TYo=r($Oe,"This class cannot be instantiated directly using "),X_e=n($Oe,"CODE",{});var wvt=s(X_e);MYo=r(wvt,"__init__()"),wvt.forEach(t),EYo=r($Oe," (throws an error)."),$Oe.forEach(t),CYo=i(el),gt=n(el,"DIV",{class:!0});var M0=s(gt);T(EL.$$.fragment,M0),wYo=i(M0),z_e=n(M0,"P",{});var Avt=s(z_e);AYo=r(Avt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Avt.forEach(t),LYo=i(M0),nd=n(M0,"P",{});var Iee=s(nd);yYo=r(Iee,`Note:
Loading a model from its configuration file does `),W_e=n(Iee,"STRONG",{});var Lvt=s(W_e);xYo=r(Lvt,"not"),Lvt.forEach(t),$Yo=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(Iee,"A",{href:!0});var yvt=s(sz);kYo=r(yvt,"from_pretrained()"),yvt.forEach(t),SYo=r(Iee," to load the model weights."),Iee.forEach(t),RYo=i(M0),T(b6.$$.fragment,M0),M0.forEach(t),PYo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(CL.$$.fragment,fa),BYo=i(fa),Q_e=n(fa,"P",{});var xvt=s(Q_e);IYo=r(xvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xvt.forEach(t),NYo=i(fa),qa=n(fa,"P",{});var E0=s(qa);qYo=r(E0,"The model class to instantiate is selected based on the "),H_e=n(E0,"CODE",{});var $vt=s(H_e);jYo=r($vt,"model_type"),$vt.forEach(t),DYo=r(E0,` property of the config object (either
passed as an argument or loaded from `),U_e=n(E0,"CODE",{});var kvt=s(U_e);GYo=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),OYo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(E0,"CODE",{});var Svt=s(J_e);VYo=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),XYo=r(E0,":"),E0.forEach(t),zYo=i(fa),Y_e=n(fa,"UL",{});var Rvt=s(Y_e);v6=n(Rvt,"LI",{});var GSe=s(v6);K_e=n(GSe,"STRONG",{});var Pvt=s(K_e);WYo=r(Pvt,"tapas"),Pvt.forEach(t),QYo=r(GSe," \u2014 "),lz=n(GSe,"A",{href:!0});var Bvt=s(lz);HYo=r(Bvt,"TapasForQuestionAnswering"),Bvt.forEach(t),UYo=r(GSe," (TAPAS model)"),GSe.forEach(t),Rvt.forEach(t),JYo=i(fa),F6=n(fa,"P",{});var OSe=s(F6);YYo=r(OSe,"The model is set in evaluation mode by default using "),Z_e=n(OSe,"CODE",{});var Ivt=s(Z_e);KYo=r(Ivt,"model.eval()"),Ivt.forEach(t),ZYo=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(OSe,"CODE",{});var Nvt=s(eue);eKo=r(Nvt,"model.train()"),Nvt.forEach(t),OSe.forEach(t),oKo=i(fa),T(T6.$$.fragment,fa),fa.forEach(t),el.forEach(t),LDe=i(f),sd=n(f,"H2",{class:!0});var kOe=s(sd);M6=n(kOe,"A",{id:!0,class:!0,href:!0});var qvt=s(M6);oue=n(qvt,"SPAN",{});var jvt=s(oue);T(wL.$$.fragment,jvt),jvt.forEach(t),qvt.forEach(t),rKo=i(kOe),rue=n(kOe,"SPAN",{});var Dvt=s(rue);tKo=r(Dvt,"AutoModelForImageClassification"),Dvt.forEach(t),kOe.forEach(t),yDe=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(AL.$$.fragment,ol),aKo=i(ol),ld=n(ol,"P",{});var Nee=s(ld);nKo=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iz=n(Nee,"A",{href:!0});var Gvt=s(iz);sKo=r(Gvt,"from_pretrained()"),Gvt.forEach(t),lKo=r(Nee," class method or the "),dz=n(Nee,"A",{href:!0});var Ovt=s(dz);iKo=r(Ovt,"from_config()"),Ovt.forEach(t),dKo=r(Nee,` class
method.`),Nee.forEach(t),cKo=i(ol),LL=n(ol,"P",{});var SOe=s(LL);fKo=r(SOe,"This class cannot be instantiated directly using "),tue=n(SOe,"CODE",{});var Vvt=s(tue);mKo=r(Vvt,"__init__()"),Vvt.forEach(t),gKo=r(SOe," (throws an error)."),SOe.forEach(t),hKo=i(ol),ht=n(ol,"DIV",{class:!0});var C0=s(ht);T(yL.$$.fragment,C0),pKo=i(C0),aue=n(C0,"P",{});var Xvt=s(aue);_Ko=r(Xvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xvt.forEach(t),uKo=i(C0),id=n(C0,"P",{});var qee=s(id);bKo=r(qee,`Note:
Loading a model from its configuration file does `),nue=n(qee,"STRONG",{});var zvt=s(nue);vKo=r(zvt,"not"),zvt.forEach(t),FKo=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(qee,"A",{href:!0});var Wvt=s(cz);TKo=r(Wvt,"from_pretrained()"),Wvt.forEach(t),MKo=r(qee," to load the model weights."),qee.forEach(t),EKo=i(C0),T(E6.$$.fragment,C0),C0.forEach(t),CKo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(xL.$$.fragment,ma),wKo=i(ma),sue=n(ma,"P",{});var Qvt=s(sue);AKo=r(Qvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qvt.forEach(t),LKo=i(ma),ja=n(ma,"P",{});var w0=s(ja);yKo=r(w0,"The model class to instantiate is selected based on the "),lue=n(w0,"CODE",{});var Hvt=s(lue);xKo=r(Hvt,"model_type"),Hvt.forEach(t),$Ko=r(w0,` property of the config object (either
passed as an argument or loaded from `),iue=n(w0,"CODE",{});var Uvt=s(iue);kKo=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),SKo=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(w0,"CODE",{});var Jvt=s(due);RKo=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),PKo=r(w0,":"),w0.forEach(t),BKo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);C6=n(Te,"LI",{});var VSe=s(C6);cue=n(VSe,"STRONG",{});var Yvt=s(cue);IKo=r(Yvt,"beit"),Yvt.forEach(t),NKo=r(VSe," \u2014 "),fz=n(VSe,"A",{href:!0});var Kvt=s(fz);qKo=r(Kvt,"BeitForImageClassification"),Kvt.forEach(t),jKo=r(VSe," (BEiT model)"),VSe.forEach(t),DKo=i(Te),w6=n(Te,"LI",{});var XSe=s(w6);fue=n(XSe,"STRONG",{});var Zvt=s(fue);GKo=r(Zvt,"convnext"),Zvt.forEach(t),OKo=r(XSe," \u2014 "),mz=n(XSe,"A",{href:!0});var eFt=s(mz);VKo=r(eFt,"ConvNextForImageClassification"),eFt.forEach(t),XKo=r(XSe," (ConvNeXT model)"),XSe.forEach(t),zKo=i(Te),A6=n(Te,"LI",{});var zSe=s(A6);mue=n(zSe,"STRONG",{});var oFt=s(mue);WKo=r(oFt,"cvt"),oFt.forEach(t),QKo=r(zSe," \u2014 "),gz=n(zSe,"A",{href:!0});var rFt=s(gz);HKo=r(rFt,"CvtForImageClassification"),rFt.forEach(t),UKo=r(zSe," (CvT model)"),zSe.forEach(t),JKo=i(Te),L6=n(Te,"LI",{});var WSe=s(L6);gue=n(WSe,"STRONG",{});var tFt=s(gue);YKo=r(tFt,"data2vec-vision"),tFt.forEach(t),KKo=r(WSe," \u2014 "),hz=n(WSe,"A",{href:!0});var aFt=s(hz);ZKo=r(aFt,"Data2VecVisionForImageClassification"),aFt.forEach(t),eZo=r(WSe," (Data2VecVision model)"),WSe.forEach(t),oZo=i(Te),Is=n(Te,"LI",{});var pk=s(Is);hue=n(pk,"STRONG",{});var nFt=s(hue);rZo=r(nFt,"deit"),nFt.forEach(t),tZo=r(pk," \u2014 "),pz=n(pk,"A",{href:!0});var sFt=s(pz);aZo=r(sFt,"DeiTForImageClassification"),sFt.forEach(t),nZo=r(pk," or "),_z=n(pk,"A",{href:!0});var lFt=s(_z);sZo=r(lFt,"DeiTForImageClassificationWithTeacher"),lFt.forEach(t),lZo=r(pk," (DeiT model)"),pk.forEach(t),iZo=i(Te),y6=n(Te,"LI",{});var QSe=s(y6);pue=n(QSe,"STRONG",{});var iFt=s(pue);dZo=r(iFt,"imagegpt"),iFt.forEach(t),cZo=r(QSe," \u2014 "),uz=n(QSe,"A",{href:!0});var dFt=s(uz);fZo=r(dFt,"ImageGPTForImageClassification"),dFt.forEach(t),mZo=r(QSe," (ImageGPT model)"),QSe.forEach(t),gZo=i(Te),Ns=n(Te,"LI",{});var _k=s(Ns);_ue=n(_k,"STRONG",{});var cFt=s(_ue);hZo=r(cFt,"levit"),cFt.forEach(t),pZo=r(_k," \u2014 "),bz=n(_k,"A",{href:!0});var fFt=s(bz);_Zo=r(fFt,"LevitForImageClassification"),fFt.forEach(t),uZo=r(_k," or "),vz=n(_k,"A",{href:!0});var mFt=s(vz);bZo=r(mFt,"LevitForImageClassificationWithTeacher"),mFt.forEach(t),vZo=r(_k," (LeViT model)"),_k.forEach(t),FZo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);uue=n(_f,"STRONG",{});var gFt=s(uue);TZo=r(gFt,"perceiver"),gFt.forEach(t),MZo=r(_f," \u2014 "),Fz=n(_f,"A",{href:!0});var hFt=s(Fz);EZo=r(hFt,"PerceiverForImageClassificationLearned"),hFt.forEach(t),CZo=r(_f," or "),Tz=n(_f,"A",{href:!0});var pFt=s(Tz);wZo=r(pFt,"PerceiverForImageClassificationFourier"),pFt.forEach(t),AZo=r(_f," or "),Mz=n(_f,"A",{href:!0});var _Ft=s(Mz);LZo=r(_Ft,"PerceiverForImageClassificationConvProcessing"),_Ft.forEach(t),yZo=r(_f," (Perceiver model)"),_f.forEach(t),xZo=i(Te),x6=n(Te,"LI",{});var HSe=s(x6);bue=n(HSe,"STRONG",{});var uFt=s(bue);$Zo=r(uFt,"poolformer"),uFt.forEach(t),kZo=r(HSe," \u2014 "),Ez=n(HSe,"A",{href:!0});var bFt=s(Ez);SZo=r(bFt,"PoolFormerForImageClassification"),bFt.forEach(t),RZo=r(HSe," (PoolFormer model)"),HSe.forEach(t),PZo=i(Te),$6=n(Te,"LI",{});var USe=s($6);vue=n(USe,"STRONG",{});var vFt=s(vue);BZo=r(vFt,"regnet"),vFt.forEach(t),IZo=r(USe," \u2014 "),Cz=n(USe,"A",{href:!0});var FFt=s(Cz);NZo=r(FFt,"RegNetForImageClassification"),FFt.forEach(t),qZo=r(USe," (RegNet model)"),USe.forEach(t),jZo=i(Te),k6=n(Te,"LI",{});var JSe=s(k6);Fue=n(JSe,"STRONG",{});var TFt=s(Fue);DZo=r(TFt,"resnet"),TFt.forEach(t),GZo=r(JSe," \u2014 "),wz=n(JSe,"A",{href:!0});var MFt=s(wz);OZo=r(MFt,"ResNetForImageClassification"),MFt.forEach(t),VZo=r(JSe," (ResNet model)"),JSe.forEach(t),XZo=i(Te),S6=n(Te,"LI",{});var YSe=s(S6);Tue=n(YSe,"STRONG",{});var EFt=s(Tue);zZo=r(EFt,"segformer"),EFt.forEach(t),WZo=r(YSe," \u2014 "),Az=n(YSe,"A",{href:!0});var CFt=s(Az);QZo=r(CFt,"SegformerForImageClassification"),CFt.forEach(t),HZo=r(YSe," (SegFormer model)"),YSe.forEach(t),UZo=i(Te),R6=n(Te,"LI",{});var KSe=s(R6);Mue=n(KSe,"STRONG",{});var wFt=s(Mue);JZo=r(wFt,"swin"),wFt.forEach(t),YZo=r(KSe," \u2014 "),Lz=n(KSe,"A",{href:!0});var AFt=s(Lz);KZo=r(AFt,"SwinForImageClassification"),AFt.forEach(t),ZZo=r(KSe," (Swin Transformer model)"),KSe.forEach(t),eer=i(Te),P6=n(Te,"LI",{});var ZSe=s(P6);Eue=n(ZSe,"STRONG",{});var LFt=s(Eue);oer=r(LFt,"van"),LFt.forEach(t),rer=r(ZSe," \u2014 "),yz=n(ZSe,"A",{href:!0});var yFt=s(yz);ter=r(yFt,"VanForImageClassification"),yFt.forEach(t),aer=r(ZSe," (VAN model)"),ZSe.forEach(t),ner=i(Te),B6=n(Te,"LI",{});var eRe=s(B6);Cue=n(eRe,"STRONG",{});var xFt=s(Cue);ser=r(xFt,"vit"),xFt.forEach(t),ler=r(eRe," \u2014 "),xz=n(eRe,"A",{href:!0});var $Ft=s(xz);ier=r($Ft,"ViTForImageClassification"),$Ft.forEach(t),der=r(eRe," (ViT model)"),eRe.forEach(t),Te.forEach(t),cer=i(ma),I6=n(ma,"P",{});var oRe=s(I6);fer=r(oRe,"The model is set in evaluation mode by default using "),wue=n(oRe,"CODE",{});var kFt=s(wue);mer=r(kFt,"model.eval()"),kFt.forEach(t),ger=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(oRe,"CODE",{});var SFt=s(Aue);her=r(SFt,"model.train()"),SFt.forEach(t),oRe.forEach(t),per=i(ma),T(N6.$$.fragment,ma),ma.forEach(t),ol.forEach(t),xDe=i(f),dd=n(f,"H2",{class:!0});var ROe=s(dd);q6=n(ROe,"A",{id:!0,class:!0,href:!0});var RFt=s(q6);Lue=n(RFt,"SPAN",{});var PFt=s(Lue);T($L.$$.fragment,PFt),PFt.forEach(t),RFt.forEach(t),_er=i(ROe),yue=n(ROe,"SPAN",{});var BFt=s(yue);uer=r(BFt,"AutoModelForVision2Seq"),BFt.forEach(t),ROe.forEach(t),$De=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(kL.$$.fragment,rl),ber=i(rl),cd=n(rl,"P",{});var jee=s(cd);ver=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$z=n(jee,"A",{href:!0});var IFt=s($z);Fer=r(IFt,"from_pretrained()"),IFt.forEach(t),Ter=r(jee," class method or the "),kz=n(jee,"A",{href:!0});var NFt=s(kz);Mer=r(NFt,"from_config()"),NFt.forEach(t),Eer=r(jee,` class
method.`),jee.forEach(t),Cer=i(rl),SL=n(rl,"P",{});var POe=s(SL);wer=r(POe,"This class cannot be instantiated directly using "),xue=n(POe,"CODE",{});var qFt=s(xue);Aer=r(qFt,"__init__()"),qFt.forEach(t),Ler=r(POe," (throws an error)."),POe.forEach(t),yer=i(rl),_t=n(rl,"DIV",{class:!0});var A0=s(_t);T(RL.$$.fragment,A0),xer=i(A0),$ue=n(A0,"P",{});var jFt=s($ue);$er=r(jFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jFt.forEach(t),ker=i(A0),fd=n(A0,"P",{});var Dee=s(fd);Ser=r(Dee,`Note:
Loading a model from its configuration file does `),kue=n(Dee,"STRONG",{});var DFt=s(kue);Rer=r(DFt,"not"),DFt.forEach(t),Per=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(Dee,"A",{href:!0});var GFt=s(Sz);Ber=r(GFt,"from_pretrained()"),GFt.forEach(t),Ier=r(Dee," to load the model weights."),Dee.forEach(t),Ner=i(A0),T(j6.$$.fragment,A0),A0.forEach(t),qer=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(PL.$$.fragment,ga),jer=i(ga),Sue=n(ga,"P",{});var OFt=s(Sue);Der=r(OFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OFt.forEach(t),Ger=i(ga),Da=n(ga,"P",{});var L0=s(Da);Oer=r(L0,"The model class to instantiate is selected based on the "),Rue=n(L0,"CODE",{});var VFt=s(Rue);Ver=r(VFt,"model_type"),VFt.forEach(t),Xer=r(L0,` property of the config object (either
passed as an argument or loaded from `),Pue=n(L0,"CODE",{});var XFt=s(Pue);zer=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),Wer=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(L0,"CODE",{});var zFt=s(Bue);Qer=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Her=r(L0,":"),L0.forEach(t),Uer=i(ga),Iue=n(ga,"UL",{});var WFt=s(Iue);D6=n(WFt,"LI",{});var rRe=s(D6);Nue=n(rRe,"STRONG",{});var QFt=s(Nue);Jer=r(QFt,"vision-encoder-decoder"),QFt.forEach(t),Yer=r(rRe," \u2014 "),Rz=n(rRe,"A",{href:!0});var HFt=s(Rz);Ker=r(HFt,"VisionEncoderDecoderModel"),HFt.forEach(t),Zer=r(rRe," (Vision Encoder decoder model)"),rRe.forEach(t),WFt.forEach(t),eor=i(ga),G6=n(ga,"P",{});var tRe=s(G6);oor=r(tRe,"The model is set in evaluation mode by default using "),que=n(tRe,"CODE",{});var UFt=s(que);ror=r(UFt,"model.eval()"),UFt.forEach(t),tor=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(tRe,"CODE",{});var JFt=s(jue);aor=r(JFt,"model.train()"),JFt.forEach(t),tRe.forEach(t),nor=i(ga),T(O6.$$.fragment,ga),ga.forEach(t),rl.forEach(t),kDe=i(f),md=n(f,"H2",{class:!0});var BOe=s(md);V6=n(BOe,"A",{id:!0,class:!0,href:!0});var YFt=s(V6);Due=n(YFt,"SPAN",{});var KFt=s(Due);T(BL.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),sor=i(BOe),Gue=n(BOe,"SPAN",{});var ZFt=s(Gue);lor=r(ZFt,"AutoModelForAudioClassification"),ZFt.forEach(t),BOe.forEach(t),SDe=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(IL.$$.fragment,tl),ior=i(tl),gd=n(tl,"P",{});var Gee=s(gd);dor=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Pz=n(Gee,"A",{href:!0});var e6t=s(Pz);cor=r(e6t,"from_pretrained()"),e6t.forEach(t),mor=r(Gee," class method or the "),Bz=n(Gee,"A",{href:!0});var o6t=s(Bz);gor=r(o6t,"from_config()"),o6t.forEach(t),hor=r(Gee,` class
method.`),Gee.forEach(t),por=i(tl),NL=n(tl,"P",{});var IOe=s(NL);_or=r(IOe,"This class cannot be instantiated directly using "),Oue=n(IOe,"CODE",{});var r6t=s(Oue);uor=r(r6t,"__init__()"),r6t.forEach(t),bor=r(IOe," (throws an error)."),IOe.forEach(t),vor=i(tl),ut=n(tl,"DIV",{class:!0});var y0=s(ut);T(qL.$$.fragment,y0),For=i(y0),Vue=n(y0,"P",{});var t6t=s(Vue);Tor=r(t6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),t6t.forEach(t),Mor=i(y0),hd=n(y0,"P",{});var Oee=s(hd);Eor=r(Oee,`Note:
Loading a model from its configuration file does `),Xue=n(Oee,"STRONG",{});var a6t=s(Xue);Cor=r(a6t,"not"),a6t.forEach(t),wor=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(Oee,"A",{href:!0});var n6t=s(Iz);Aor=r(n6t,"from_pretrained()"),n6t.forEach(t),Lor=r(Oee," to load the model weights."),Oee.forEach(t),yor=i(y0),T(X6.$$.fragment,y0),y0.forEach(t),xor=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(jL.$$.fragment,ha),$or=i(ha),zue=n(ha,"P",{});var s6t=s(zue);kor=r(s6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),s6t.forEach(t),Sor=i(ha),Ga=n(ha,"P",{});var x0=s(Ga);Ror=r(x0,"The model class to instantiate is selected based on the "),Wue=n(x0,"CODE",{});var l6t=s(Wue);Por=r(l6t,"model_type"),l6t.forEach(t),Bor=r(x0,` property of the config object (either
passed as an argument or loaded from `),Que=n(x0,"CODE",{});var i6t=s(Que);Ior=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),Nor=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(x0,"CODE",{});var d6t=s(Hue);qor=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),jor=r(x0,":"),x0.forEach(t),Dor=i(ha),Pe=n(ha,"UL",{});var ze=s(Pe);z6=n(ze,"LI",{});var aRe=s(z6);Uue=n(aRe,"STRONG",{});var c6t=s(Uue);Gor=r(c6t,"data2vec-audio"),c6t.forEach(t),Oor=r(aRe," \u2014 "),Nz=n(aRe,"A",{href:!0});var f6t=s(Nz);Vor=r(f6t,"Data2VecAudioForSequenceClassification"),f6t.forEach(t),Xor=r(aRe," (Data2VecAudio model)"),aRe.forEach(t),zor=i(ze),W6=n(ze,"LI",{});var nRe=s(W6);Jue=n(nRe,"STRONG",{});var m6t=s(Jue);Wor=r(m6t,"hubert"),m6t.forEach(t),Qor=r(nRe," \u2014 "),qz=n(nRe,"A",{href:!0});var g6t=s(qz);Hor=r(g6t,"HubertForSequenceClassification"),g6t.forEach(t),Uor=r(nRe," (Hubert model)"),nRe.forEach(t),Jor=i(ze),Q6=n(ze,"LI",{});var sRe=s(Q6);Yue=n(sRe,"STRONG",{});var h6t=s(Yue);Yor=r(h6t,"sew"),h6t.forEach(t),Kor=r(sRe," \u2014 "),jz=n(sRe,"A",{href:!0});var p6t=s(jz);Zor=r(p6t,"SEWForSequenceClassification"),p6t.forEach(t),err=r(sRe," (SEW model)"),sRe.forEach(t),orr=i(ze),H6=n(ze,"LI",{});var lRe=s(H6);Kue=n(lRe,"STRONG",{});var _6t=s(Kue);rrr=r(_6t,"sew-d"),_6t.forEach(t),trr=r(lRe," \u2014 "),Dz=n(lRe,"A",{href:!0});var u6t=s(Dz);arr=r(u6t,"SEWDForSequenceClassification"),u6t.forEach(t),nrr=r(lRe," (SEW-D model)"),lRe.forEach(t),srr=i(ze),U6=n(ze,"LI",{});var iRe=s(U6);Zue=n(iRe,"STRONG",{});var b6t=s(Zue);lrr=r(b6t,"unispeech"),b6t.forEach(t),irr=r(iRe," \u2014 "),Gz=n(iRe,"A",{href:!0});var v6t=s(Gz);drr=r(v6t,"UniSpeechForSequenceClassification"),v6t.forEach(t),crr=r(iRe," (UniSpeech model)"),iRe.forEach(t),frr=i(ze),J6=n(ze,"LI",{});var dRe=s(J6);e2e=n(dRe,"STRONG",{});var F6t=s(e2e);mrr=r(F6t,"unispeech-sat"),F6t.forEach(t),grr=r(dRe," \u2014 "),Oz=n(dRe,"A",{href:!0});var T6t=s(Oz);hrr=r(T6t,"UniSpeechSatForSequenceClassification"),T6t.forEach(t),prr=r(dRe," (UniSpeechSat model)"),dRe.forEach(t),_rr=i(ze),Y6=n(ze,"LI",{});var cRe=s(Y6);o2e=n(cRe,"STRONG",{});var M6t=s(o2e);urr=r(M6t,"wav2vec2"),M6t.forEach(t),brr=r(cRe," \u2014 "),Vz=n(cRe,"A",{href:!0});var E6t=s(Vz);vrr=r(E6t,"Wav2Vec2ForSequenceClassification"),E6t.forEach(t),Frr=r(cRe," (Wav2Vec2 model)"),cRe.forEach(t),Trr=i(ze),K6=n(ze,"LI",{});var fRe=s(K6);r2e=n(fRe,"STRONG",{});var C6t=s(r2e);Mrr=r(C6t,"wav2vec2-conformer"),C6t.forEach(t),Err=r(fRe," \u2014 "),Xz=n(fRe,"A",{href:!0});var w6t=s(Xz);Crr=r(w6t,"Wav2Vec2ConformerForSequenceClassification"),w6t.forEach(t),wrr=r(fRe," (Wav2Vec2-Conformer model)"),fRe.forEach(t),Arr=i(ze),Z6=n(ze,"LI",{});var mRe=s(Z6);t2e=n(mRe,"STRONG",{});var A6t=s(t2e);Lrr=r(A6t,"wavlm"),A6t.forEach(t),yrr=r(mRe," \u2014 "),zz=n(mRe,"A",{href:!0});var L6t=s(zz);xrr=r(L6t,"WavLMForSequenceClassification"),L6t.forEach(t),$rr=r(mRe," (WavLM model)"),mRe.forEach(t),ze.forEach(t),krr=i(ha),eT=n(ha,"P",{});var gRe=s(eT);Srr=r(gRe,"The model is set in evaluation mode by default using "),a2e=n(gRe,"CODE",{});var y6t=s(a2e);Rrr=r(y6t,"model.eval()"),y6t.forEach(t),Prr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(gRe,"CODE",{});var x6t=s(n2e);Brr=r(x6t,"model.train()"),x6t.forEach(t),gRe.forEach(t),Irr=i(ha),T(oT.$$.fragment,ha),ha.forEach(t),tl.forEach(t),RDe=i(f),pd=n(f,"H2",{class:!0});var NOe=s(pd);rT=n(NOe,"A",{id:!0,class:!0,href:!0});var $6t=s(rT);s2e=n($6t,"SPAN",{});var k6t=s(s2e);T(DL.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),Nrr=i(NOe),l2e=n(NOe,"SPAN",{});var S6t=s(l2e);qrr=r(S6t,"AutoModelForAudioFrameClassification"),S6t.forEach(t),NOe.forEach(t),PDe=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(GL.$$.fragment,al),jrr=i(al),_d=n(al,"P",{});var Vee=s(_d);Drr=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wz=n(Vee,"A",{href:!0});var R6t=s(Wz);Grr=r(R6t,"from_pretrained()"),R6t.forEach(t),Orr=r(Vee," class method or the "),Qz=n(Vee,"A",{href:!0});var P6t=s(Qz);Vrr=r(P6t,"from_config()"),P6t.forEach(t),Xrr=r(Vee,` class
method.`),Vee.forEach(t),zrr=i(al),OL=n(al,"P",{});var qOe=s(OL);Wrr=r(qOe,"This class cannot be instantiated directly using "),i2e=n(qOe,"CODE",{});var B6t=s(i2e);Qrr=r(B6t,"__init__()"),B6t.forEach(t),Hrr=r(qOe," (throws an error)."),qOe.forEach(t),Urr=i(al),bt=n(al,"DIV",{class:!0});var $0=s(bt);T(VL.$$.fragment,$0),Jrr=i($0),d2e=n($0,"P",{});var I6t=s(d2e);Yrr=r(I6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),I6t.forEach(t),Krr=i($0),ud=n($0,"P",{});var Xee=s(ud);Zrr=r(Xee,`Note:
Loading a model from its configuration file does `),c2e=n(Xee,"STRONG",{});var N6t=s(c2e);etr=r(N6t,"not"),N6t.forEach(t),otr=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(Xee,"A",{href:!0});var q6t=s(Hz);rtr=r(q6t,"from_pretrained()"),q6t.forEach(t),ttr=r(Xee," to load the model weights."),Xee.forEach(t),atr=i($0),T(tT.$$.fragment,$0),$0.forEach(t),ntr=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(XL.$$.fragment,pa),str=i(pa),f2e=n(pa,"P",{});var j6t=s(f2e);ltr=r(j6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),j6t.forEach(t),itr=i(pa),Oa=n(pa,"P",{});var k0=s(Oa);dtr=r(k0,"The model class to instantiate is selected based on the "),m2e=n(k0,"CODE",{});var D6t=s(m2e);ctr=r(D6t,"model_type"),D6t.forEach(t),ftr=r(k0,` property of the config object (either
passed as an argument or loaded from `),g2e=n(k0,"CODE",{});var G6t=s(g2e);mtr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),gtr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(k0,"CODE",{});var O6t=s(h2e);htr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),ptr=r(k0,":"),k0.forEach(t),_tr=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);aT=n(nl,"LI",{});var hRe=s(aT);p2e=n(hRe,"STRONG",{});var V6t=s(p2e);utr=r(V6t,"data2vec-audio"),V6t.forEach(t),btr=r(hRe," \u2014 "),Uz=n(hRe,"A",{href:!0});var X6t=s(Uz);vtr=r(X6t,"Data2VecAudioForAudioFrameClassification"),X6t.forEach(t),Ftr=r(hRe," (Data2VecAudio model)"),hRe.forEach(t),Ttr=i(nl),nT=n(nl,"LI",{});var pRe=s(nT);_2e=n(pRe,"STRONG",{});var z6t=s(_2e);Mtr=r(z6t,"unispeech-sat"),z6t.forEach(t),Etr=r(pRe," \u2014 "),Jz=n(pRe,"A",{href:!0});var W6t=s(Jz);Ctr=r(W6t,"UniSpeechSatForAudioFrameClassification"),W6t.forEach(t),wtr=r(pRe," (UniSpeechSat model)"),pRe.forEach(t),Atr=i(nl),sT=n(nl,"LI",{});var _Re=s(sT);u2e=n(_Re,"STRONG",{});var Q6t=s(u2e);Ltr=r(Q6t,"wav2vec2"),Q6t.forEach(t),ytr=r(_Re," \u2014 "),Yz=n(_Re,"A",{href:!0});var H6t=s(Yz);xtr=r(H6t,"Wav2Vec2ForAudioFrameClassification"),H6t.forEach(t),$tr=r(_Re," (Wav2Vec2 model)"),_Re.forEach(t),ktr=i(nl),lT=n(nl,"LI",{});var uRe=s(lT);b2e=n(uRe,"STRONG",{});var U6t=s(b2e);Str=r(U6t,"wav2vec2-conformer"),U6t.forEach(t),Rtr=r(uRe," \u2014 "),Kz=n(uRe,"A",{href:!0});var J6t=s(Kz);Ptr=r(J6t,"Wav2Vec2ConformerForAudioFrameClassification"),J6t.forEach(t),Btr=r(uRe," (Wav2Vec2-Conformer model)"),uRe.forEach(t),Itr=i(nl),iT=n(nl,"LI",{});var bRe=s(iT);v2e=n(bRe,"STRONG",{});var Y6t=s(v2e);Ntr=r(Y6t,"wavlm"),Y6t.forEach(t),qtr=r(bRe," \u2014 "),Zz=n(bRe,"A",{href:!0});var K6t=s(Zz);jtr=r(K6t,"WavLMForAudioFrameClassification"),K6t.forEach(t),Dtr=r(bRe," (WavLM model)"),bRe.forEach(t),nl.forEach(t),Gtr=i(pa),dT=n(pa,"P",{});var vRe=s(dT);Otr=r(vRe,"The model is set in evaluation mode by default using "),F2e=n(vRe,"CODE",{});var Z6t=s(F2e);Vtr=r(Z6t,"model.eval()"),Z6t.forEach(t),Xtr=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(vRe,"CODE",{});var eTt=s(T2e);ztr=r(eTt,"model.train()"),eTt.forEach(t),vRe.forEach(t),Wtr=i(pa),T(cT.$$.fragment,pa),pa.forEach(t),al.forEach(t),BDe=i(f),bd=n(f,"H2",{class:!0});var jOe=s(bd);fT=n(jOe,"A",{id:!0,class:!0,href:!0});var oTt=s(fT);M2e=n(oTt,"SPAN",{});var rTt=s(M2e);T(zL.$$.fragment,rTt),rTt.forEach(t),oTt.forEach(t),Qtr=i(jOe),E2e=n(jOe,"SPAN",{});var tTt=s(E2e);Htr=r(tTt,"AutoModelForCTC"),tTt.forEach(t),jOe.forEach(t),IDe=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(WL.$$.fragment,sl),Utr=i(sl),vd=n(sl,"P",{});var zee=s(vd);Jtr=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),eW=n(zee,"A",{href:!0});var aTt=s(eW);Ytr=r(aTt,"from_pretrained()"),aTt.forEach(t),Ktr=r(zee," class method or the "),oW=n(zee,"A",{href:!0});var nTt=s(oW);Ztr=r(nTt,"from_config()"),nTt.forEach(t),ear=r(zee,` class
method.`),zee.forEach(t),oar=i(sl),QL=n(sl,"P",{});var DOe=s(QL);rar=r(DOe,"This class cannot be instantiated directly using "),C2e=n(DOe,"CODE",{});var sTt=s(C2e);tar=r(sTt,"__init__()"),sTt.forEach(t),aar=r(DOe," (throws an error)."),DOe.forEach(t),nar=i(sl),vt=n(sl,"DIV",{class:!0});var S0=s(vt);T(HL.$$.fragment,S0),sar=i(S0),w2e=n(S0,"P",{});var lTt=s(w2e);lar=r(lTt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lTt.forEach(t),iar=i(S0),Fd=n(S0,"P",{});var Wee=s(Fd);dar=r(Wee,`Note:
Loading a model from its configuration file does `),A2e=n(Wee,"STRONG",{});var iTt=s(A2e);car=r(iTt,"not"),iTt.forEach(t),far=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(Wee,"A",{href:!0});var dTt=s(rW);mar=r(dTt,"from_pretrained()"),dTt.forEach(t),gar=r(Wee," to load the model weights."),Wee.forEach(t),har=i(S0),T(mT.$$.fragment,S0),S0.forEach(t),par=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(UL.$$.fragment,_a),_ar=i(_a),L2e=n(_a,"P",{});var cTt=s(L2e);uar=r(cTt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cTt.forEach(t),bar=i(_a),Va=n(_a,"P",{});var R0=s(Va);Far=r(R0,"The model class to instantiate is selected based on the "),y2e=n(R0,"CODE",{});var fTt=s(y2e);Tar=r(fTt,"model_type"),fTt.forEach(t),Mar=r(R0,` property of the config object (either
passed as an argument or loaded from `),x2e=n(R0,"CODE",{});var mTt=s(x2e);Ear=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),Car=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(R0,"CODE",{});var gTt=s($2e);war=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),Aar=r(R0,":"),R0.forEach(t),Lar=i(_a),Le=n(_a,"UL",{});var Be=s(Le);gT=n(Be,"LI",{});var FRe=s(gT);k2e=n(FRe,"STRONG",{});var hTt=s(k2e);yar=r(hTt,"data2vec-audio"),hTt.forEach(t),xar=r(FRe," \u2014 "),tW=n(FRe,"A",{href:!0});var pTt=s(tW);$ar=r(pTt,"Data2VecAudioForCTC"),pTt.forEach(t),kar=r(FRe," (Data2VecAudio model)"),FRe.forEach(t),Sar=i(Be),hT=n(Be,"LI",{});var TRe=s(hT);S2e=n(TRe,"STRONG",{});var _Tt=s(S2e);Rar=r(_Tt,"hubert"),_Tt.forEach(t),Par=r(TRe," \u2014 "),aW=n(TRe,"A",{href:!0});var uTt=s(aW);Bar=r(uTt,"HubertForCTC"),uTt.forEach(t),Iar=r(TRe," (Hubert model)"),TRe.forEach(t),Nar=i(Be),pT=n(Be,"LI",{});var MRe=s(pT);R2e=n(MRe,"STRONG",{});var bTt=s(R2e);qar=r(bTt,"mctct"),bTt.forEach(t),jar=r(MRe," \u2014 "),nW=n(MRe,"A",{href:!0});var vTt=s(nW);Dar=r(vTt,"MCTCTForCTC"),vTt.forEach(t),Gar=r(MRe," (M-CTC-T model)"),MRe.forEach(t),Oar=i(Be),_T=n(Be,"LI",{});var ERe=s(_T);P2e=n(ERe,"STRONG",{});var FTt=s(P2e);Var=r(FTt,"sew"),FTt.forEach(t),Xar=r(ERe," \u2014 "),sW=n(ERe,"A",{href:!0});var TTt=s(sW);zar=r(TTt,"SEWForCTC"),TTt.forEach(t),War=r(ERe," (SEW model)"),ERe.forEach(t),Qar=i(Be),uT=n(Be,"LI",{});var CRe=s(uT);B2e=n(CRe,"STRONG",{});var MTt=s(B2e);Har=r(MTt,"sew-d"),MTt.forEach(t),Uar=r(CRe," \u2014 "),lW=n(CRe,"A",{href:!0});var ETt=s(lW);Jar=r(ETt,"SEWDForCTC"),ETt.forEach(t),Yar=r(CRe," (SEW-D model)"),CRe.forEach(t),Kar=i(Be),bT=n(Be,"LI",{});var wRe=s(bT);I2e=n(wRe,"STRONG",{});var CTt=s(I2e);Zar=r(CTt,"unispeech"),CTt.forEach(t),enr=r(wRe," \u2014 "),iW=n(wRe,"A",{href:!0});var wTt=s(iW);onr=r(wTt,"UniSpeechForCTC"),wTt.forEach(t),rnr=r(wRe," (UniSpeech model)"),wRe.forEach(t),tnr=i(Be),vT=n(Be,"LI",{});var ARe=s(vT);N2e=n(ARe,"STRONG",{});var ATt=s(N2e);anr=r(ATt,"unispeech-sat"),ATt.forEach(t),nnr=r(ARe," \u2014 "),dW=n(ARe,"A",{href:!0});var LTt=s(dW);snr=r(LTt,"UniSpeechSatForCTC"),LTt.forEach(t),lnr=r(ARe," (UniSpeechSat model)"),ARe.forEach(t),inr=i(Be),FT=n(Be,"LI",{});var LRe=s(FT);q2e=n(LRe,"STRONG",{});var yTt=s(q2e);dnr=r(yTt,"wav2vec2"),yTt.forEach(t),cnr=r(LRe," \u2014 "),cW=n(LRe,"A",{href:!0});var xTt=s(cW);fnr=r(xTt,"Wav2Vec2ForCTC"),xTt.forEach(t),mnr=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),gnr=i(Be),TT=n(Be,"LI",{});var yRe=s(TT);j2e=n(yRe,"STRONG",{});var $Tt=s(j2e);hnr=r($Tt,"wav2vec2-conformer"),$Tt.forEach(t),pnr=r(yRe," \u2014 "),fW=n(yRe,"A",{href:!0});var kTt=s(fW);_nr=r(kTt,"Wav2Vec2ConformerForCTC"),kTt.forEach(t),unr=r(yRe," (Wav2Vec2-Conformer model)"),yRe.forEach(t),bnr=i(Be),MT=n(Be,"LI",{});var xRe=s(MT);D2e=n(xRe,"STRONG",{});var STt=s(D2e);vnr=r(STt,"wavlm"),STt.forEach(t),Fnr=r(xRe," \u2014 "),mW=n(xRe,"A",{href:!0});var RTt=s(mW);Tnr=r(RTt,"WavLMForCTC"),RTt.forEach(t),Mnr=r(xRe," (WavLM model)"),xRe.forEach(t),Be.forEach(t),Enr=i(_a),ET=n(_a,"P",{});var $Re=s(ET);Cnr=r($Re,"The model is set in evaluation mode by default using "),G2e=n($Re,"CODE",{});var PTt=s(G2e);wnr=r(PTt,"model.eval()"),PTt.forEach(t),Anr=r($Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n($Re,"CODE",{});var BTt=s(O2e);Lnr=r(BTt,"model.train()"),BTt.forEach(t),$Re.forEach(t),ynr=i(_a),T(CT.$$.fragment,_a),_a.forEach(t),sl.forEach(t),NDe=i(f),Td=n(f,"H2",{class:!0});var GOe=s(Td);wT=n(GOe,"A",{id:!0,class:!0,href:!0});var ITt=s(wT);V2e=n(ITt,"SPAN",{});var NTt=s(V2e);T(JL.$$.fragment,NTt),NTt.forEach(t),ITt.forEach(t),xnr=i(GOe),X2e=n(GOe,"SPAN",{});var qTt=s(X2e);$nr=r(qTt,"AutoModelForSpeechSeq2Seq"),qTt.forEach(t),GOe.forEach(t),qDe=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(YL.$$.fragment,ll),knr=i(ll),Md=n(ll,"P",{});var Qee=s(Md);Snr=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gW=n(Qee,"A",{href:!0});var jTt=s(gW);Rnr=r(jTt,"from_pretrained()"),jTt.forEach(t),Pnr=r(Qee," class method or the "),hW=n(Qee,"A",{href:!0});var DTt=s(hW);Bnr=r(DTt,"from_config()"),DTt.forEach(t),Inr=r(Qee,` class
method.`),Qee.forEach(t),Nnr=i(ll),KL=n(ll,"P",{});var OOe=s(KL);qnr=r(OOe,"This class cannot be instantiated directly using "),z2e=n(OOe,"CODE",{});var GTt=s(z2e);jnr=r(GTt,"__init__()"),GTt.forEach(t),Dnr=r(OOe," (throws an error)."),OOe.forEach(t),Gnr=i(ll),Ft=n(ll,"DIV",{class:!0});var P0=s(Ft);T(ZL.$$.fragment,P0),Onr=i(P0),W2e=n(P0,"P",{});var OTt=s(W2e);Vnr=r(OTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OTt.forEach(t),Xnr=i(P0),Ed=n(P0,"P",{});var Hee=s(Ed);znr=r(Hee,`Note:
Loading a model from its configuration file does `),Q2e=n(Hee,"STRONG",{});var VTt=s(Q2e);Wnr=r(VTt,"not"),VTt.forEach(t),Qnr=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Hee,"A",{href:!0});var XTt=s(pW);Hnr=r(XTt,"from_pretrained()"),XTt.forEach(t),Unr=r(Hee," to load the model weights."),Hee.forEach(t),Jnr=i(P0),T(AT.$$.fragment,P0),P0.forEach(t),Ynr=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(ey.$$.fragment,ua),Knr=i(ua),H2e=n(ua,"P",{});var zTt=s(H2e);Znr=r(zTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zTt.forEach(t),esr=i(ua),Xa=n(ua,"P",{});var B0=s(Xa);osr=r(B0,"The model class to instantiate is selected based on the "),U2e=n(B0,"CODE",{});var WTt=s(U2e);rsr=r(WTt,"model_type"),WTt.forEach(t),tsr=r(B0,` property of the config object (either
passed as an argument or loaded from `),J2e=n(B0,"CODE",{});var QTt=s(J2e);asr=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),nsr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(B0,"CODE",{});var HTt=s(Y2e);ssr=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),lsr=r(B0,":"),B0.forEach(t),isr=i(ua),oy=n(ua,"UL",{});var VOe=s(oy);LT=n(VOe,"LI",{});var kRe=s(LT);K2e=n(kRe,"STRONG",{});var UTt=s(K2e);dsr=r(UTt,"speech-encoder-decoder"),UTt.forEach(t),csr=r(kRe," \u2014 "),_W=n(kRe,"A",{href:!0});var JTt=s(_W);fsr=r(JTt,"SpeechEncoderDecoderModel"),JTt.forEach(t),msr=r(kRe," (Speech Encoder decoder model)"),kRe.forEach(t),gsr=i(VOe),yT=n(VOe,"LI",{});var SRe=s(yT);Z2e=n(SRe,"STRONG",{});var YTt=s(Z2e);hsr=r(YTt,"speech_to_text"),YTt.forEach(t),psr=r(SRe," \u2014 "),uW=n(SRe,"A",{href:!0});var KTt=s(uW);_sr=r(KTt,"Speech2TextForConditionalGeneration"),KTt.forEach(t),usr=r(SRe," (Speech2Text model)"),SRe.forEach(t),VOe.forEach(t),bsr=i(ua),xT=n(ua,"P",{});var RRe=s(xT);vsr=r(RRe,"The model is set in evaluation mode by default using "),e1e=n(RRe,"CODE",{});var ZTt=s(e1e);Fsr=r(ZTt,"model.eval()"),ZTt.forEach(t),Tsr=r(RRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(RRe,"CODE",{});var e7t=s(o1e);Msr=r(e7t,"model.train()"),e7t.forEach(t),RRe.forEach(t),Esr=i(ua),T($T.$$.fragment,ua),ua.forEach(t),ll.forEach(t),jDe=i(f),Cd=n(f,"H2",{class:!0});var XOe=s(Cd);kT=n(XOe,"A",{id:!0,class:!0,href:!0});var o7t=s(kT);r1e=n(o7t,"SPAN",{});var r7t=s(r1e);T(ry.$$.fragment,r7t),r7t.forEach(t),o7t.forEach(t),Csr=i(XOe),t1e=n(XOe,"SPAN",{});var t7t=s(t1e);wsr=r(t7t,"AutoModelForAudioXVector"),t7t.forEach(t),XOe.forEach(t),DDe=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(ty.$$.fragment,il),Asr=i(il),wd=n(il,"P",{});var Uee=s(wd);Lsr=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bW=n(Uee,"A",{href:!0});var a7t=s(bW);ysr=r(a7t,"from_pretrained()"),a7t.forEach(t),xsr=r(Uee," class method or the "),vW=n(Uee,"A",{href:!0});var n7t=s(vW);$sr=r(n7t,"from_config()"),n7t.forEach(t),ksr=r(Uee,` class
method.`),Uee.forEach(t),Ssr=i(il),ay=n(il,"P",{});var zOe=s(ay);Rsr=r(zOe,"This class cannot be instantiated directly using "),a1e=n(zOe,"CODE",{});var s7t=s(a1e);Psr=r(s7t,"__init__()"),s7t.forEach(t),Bsr=r(zOe," (throws an error)."),zOe.forEach(t),Isr=i(il),Tt=n(il,"DIV",{class:!0});var I0=s(Tt);T(ny.$$.fragment,I0),Nsr=i(I0),n1e=n(I0,"P",{});var l7t=s(n1e);qsr=r(l7t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l7t.forEach(t),jsr=i(I0),Ad=n(I0,"P",{});var Jee=s(Ad);Dsr=r(Jee,`Note:
Loading a model from its configuration file does `),s1e=n(Jee,"STRONG",{});var i7t=s(s1e);Gsr=r(i7t,"not"),i7t.forEach(t),Osr=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Jee,"A",{href:!0});var d7t=s(FW);Vsr=r(d7t,"from_pretrained()"),d7t.forEach(t),Xsr=r(Jee," to load the model weights."),Jee.forEach(t),zsr=i(I0),T(ST.$$.fragment,I0),I0.forEach(t),Wsr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(sy.$$.fragment,ba),Qsr=i(ba),l1e=n(ba,"P",{});var c7t=s(l1e);Hsr=r(c7t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),c7t.forEach(t),Usr=i(ba),za=n(ba,"P",{});var N0=s(za);Jsr=r(N0,"The model class to instantiate is selected based on the "),i1e=n(N0,"CODE",{});var f7t=s(i1e);Ysr=r(f7t,"model_type"),f7t.forEach(t),Ksr=r(N0,` property of the config object (either
passed as an argument or loaded from `),d1e=n(N0,"CODE",{});var m7t=s(d1e);Zsr=r(m7t,"pretrained_model_name_or_path"),m7t.forEach(t),elr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(N0,"CODE",{});var g7t=s(c1e);olr=r(g7t,"pretrained_model_name_or_path"),g7t.forEach(t),rlr=r(N0,":"),N0.forEach(t),tlr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);RT=n(dl,"LI",{});var PRe=s(RT);f1e=n(PRe,"STRONG",{});var h7t=s(f1e);alr=r(h7t,"data2vec-audio"),h7t.forEach(t),nlr=r(PRe," \u2014 "),TW=n(PRe,"A",{href:!0});var p7t=s(TW);slr=r(p7t,"Data2VecAudioForXVector"),p7t.forEach(t),llr=r(PRe," (Data2VecAudio model)"),PRe.forEach(t),ilr=i(dl),PT=n(dl,"LI",{});var BRe=s(PT);m1e=n(BRe,"STRONG",{});var _7t=s(m1e);dlr=r(_7t,"unispeech-sat"),_7t.forEach(t),clr=r(BRe," \u2014 "),MW=n(BRe,"A",{href:!0});var u7t=s(MW);flr=r(u7t,"UniSpeechSatForXVector"),u7t.forEach(t),mlr=r(BRe," (UniSpeechSat model)"),BRe.forEach(t),glr=i(dl),BT=n(dl,"LI",{});var IRe=s(BT);g1e=n(IRe,"STRONG",{});var b7t=s(g1e);hlr=r(b7t,"wav2vec2"),b7t.forEach(t),plr=r(IRe," \u2014 "),EW=n(IRe,"A",{href:!0});var v7t=s(EW);_lr=r(v7t,"Wav2Vec2ForXVector"),v7t.forEach(t),ulr=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),blr=i(dl),IT=n(dl,"LI",{});var NRe=s(IT);h1e=n(NRe,"STRONG",{});var F7t=s(h1e);vlr=r(F7t,"wav2vec2-conformer"),F7t.forEach(t),Flr=r(NRe," \u2014 "),CW=n(NRe,"A",{href:!0});var T7t=s(CW);Tlr=r(T7t,"Wav2Vec2ConformerForXVector"),T7t.forEach(t),Mlr=r(NRe," (Wav2Vec2-Conformer model)"),NRe.forEach(t),Elr=i(dl),NT=n(dl,"LI",{});var qRe=s(NT);p1e=n(qRe,"STRONG",{});var M7t=s(p1e);Clr=r(M7t,"wavlm"),M7t.forEach(t),wlr=r(qRe," \u2014 "),wW=n(qRe,"A",{href:!0});var E7t=s(wW);Alr=r(E7t,"WavLMForXVector"),E7t.forEach(t),Llr=r(qRe," (WavLM model)"),qRe.forEach(t),dl.forEach(t),ylr=i(ba),qT=n(ba,"P",{});var jRe=s(qT);xlr=r(jRe,"The model is set in evaluation mode by default using "),_1e=n(jRe,"CODE",{});var C7t=s(_1e);$lr=r(C7t,"model.eval()"),C7t.forEach(t),klr=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(jRe,"CODE",{});var w7t=s(u1e);Slr=r(w7t,"model.train()"),w7t.forEach(t),jRe.forEach(t),Rlr=i(ba),T(jT.$$.fragment,ba),ba.forEach(t),il.forEach(t),GDe=i(f),Ld=n(f,"H2",{class:!0});var WOe=s(Ld);DT=n(WOe,"A",{id:!0,class:!0,href:!0});var A7t=s(DT);b1e=n(A7t,"SPAN",{});var L7t=s(b1e);T(ly.$$.fragment,L7t),L7t.forEach(t),A7t.forEach(t),Plr=i(WOe),v1e=n(WOe,"SPAN",{});var y7t=s(v1e);Blr=r(y7t,"AutoModelForMaskedImageModeling"),y7t.forEach(t),WOe.forEach(t),ODe=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(iy.$$.fragment,cl),Ilr=i(cl),yd=n(cl,"P",{});var Yee=s(yd);Nlr=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AW=n(Yee,"A",{href:!0});var x7t=s(AW);qlr=r(x7t,"from_pretrained()"),x7t.forEach(t),jlr=r(Yee," class method or the "),LW=n(Yee,"A",{href:!0});var $7t=s(LW);Dlr=r($7t,"from_config()"),$7t.forEach(t),Glr=r(Yee,` class
method.`),Yee.forEach(t),Olr=i(cl),dy=n(cl,"P",{});var QOe=s(dy);Vlr=r(QOe,"This class cannot be instantiated directly using "),F1e=n(QOe,"CODE",{});var k7t=s(F1e);Xlr=r(k7t,"__init__()"),k7t.forEach(t),zlr=r(QOe," (throws an error)."),QOe.forEach(t),Wlr=i(cl),Mt=n(cl,"DIV",{class:!0});var q0=s(Mt);T(cy.$$.fragment,q0),Qlr=i(q0),T1e=n(q0,"P",{});var S7t=s(T1e);Hlr=r(S7t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S7t.forEach(t),Ulr=i(q0),xd=n(q0,"P",{});var Kee=s(xd);Jlr=r(Kee,`Note:
Loading a model from its configuration file does `),M1e=n(Kee,"STRONG",{});var R7t=s(M1e);Ylr=r(R7t,"not"),R7t.forEach(t),Klr=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Kee,"A",{href:!0});var P7t=s(yW);Zlr=r(P7t,"from_pretrained()"),P7t.forEach(t),eir=r(Kee," to load the model weights."),Kee.forEach(t),oir=i(q0),T(GT.$$.fragment,q0),q0.forEach(t),rir=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(fy.$$.fragment,va),tir=i(va),E1e=n(va,"P",{});var B7t=s(E1e);air=r(B7t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),B7t.forEach(t),nir=i(va),Wa=n(va,"P",{});var j0=s(Wa);sir=r(j0,"The model class to instantiate is selected based on the "),C1e=n(j0,"CODE",{});var I7t=s(C1e);lir=r(I7t,"model_type"),I7t.forEach(t),iir=r(j0,` property of the config object (either
passed as an argument or loaded from `),w1e=n(j0,"CODE",{});var N7t=s(w1e);dir=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),cir=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(j0,"CODE",{});var q7t=s(A1e);fir=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),mir=r(j0,":"),j0.forEach(t),gir=i(va),$d=n(va,"UL",{});var Zee=s($d);OT=n(Zee,"LI",{});var DRe=s(OT);L1e=n(DRe,"STRONG",{});var j7t=s(L1e);hir=r(j7t,"deit"),j7t.forEach(t),pir=r(DRe," \u2014 "),xW=n(DRe,"A",{href:!0});var D7t=s(xW);_ir=r(D7t,"DeiTForMaskedImageModeling"),D7t.forEach(t),uir=r(DRe," (DeiT model)"),DRe.forEach(t),bir=i(Zee),VT=n(Zee,"LI",{});var GRe=s(VT);y1e=n(GRe,"STRONG",{});var G7t=s(y1e);vir=r(G7t,"swin"),G7t.forEach(t),Fir=r(GRe," \u2014 "),$W=n(GRe,"A",{href:!0});var O7t=s($W);Tir=r(O7t,"SwinForMaskedImageModeling"),O7t.forEach(t),Mir=r(GRe," (Swin Transformer model)"),GRe.forEach(t),Eir=i(Zee),XT=n(Zee,"LI",{});var ORe=s(XT);x1e=n(ORe,"STRONG",{});var V7t=s(x1e);Cir=r(V7t,"vit"),V7t.forEach(t),wir=r(ORe," \u2014 "),kW=n(ORe,"A",{href:!0});var X7t=s(kW);Air=r(X7t,"ViTForMaskedImageModeling"),X7t.forEach(t),Lir=r(ORe," (ViT model)"),ORe.forEach(t),Zee.forEach(t),yir=i(va),zT=n(va,"P",{});var VRe=s(zT);xir=r(VRe,"The model is set in evaluation mode by default using "),$1e=n(VRe,"CODE",{});var z7t=s($1e);$ir=r(z7t,"model.eval()"),z7t.forEach(t),kir=r(VRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(VRe,"CODE",{});var W7t=s(k1e);Sir=r(W7t,"model.train()"),W7t.forEach(t),VRe.forEach(t),Rir=i(va),T(WT.$$.fragment,va),va.forEach(t),cl.forEach(t),VDe=i(f),kd=n(f,"H2",{class:!0});var HOe=s(kd);QT=n(HOe,"A",{id:!0,class:!0,href:!0});var Q7t=s(QT);S1e=n(Q7t,"SPAN",{});var H7t=s(S1e);T(my.$$.fragment,H7t),H7t.forEach(t),Q7t.forEach(t),Pir=i(HOe),R1e=n(HOe,"SPAN",{});var U7t=s(R1e);Bir=r(U7t,"AutoModelForObjectDetection"),U7t.forEach(t),HOe.forEach(t),XDe=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(gy.$$.fragment,fl),Iir=i(fl),Sd=n(fl,"P",{});var eoe=s(Sd);Nir=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SW=n(eoe,"A",{href:!0});var J7t=s(SW);qir=r(J7t,"from_pretrained()"),J7t.forEach(t),jir=r(eoe," class method or the "),RW=n(eoe,"A",{href:!0});var Y7t=s(RW);Dir=r(Y7t,"from_config()"),Y7t.forEach(t),Gir=r(eoe,` class
method.`),eoe.forEach(t),Oir=i(fl),hy=n(fl,"P",{});var UOe=s(hy);Vir=r(UOe,"This class cannot be instantiated directly using "),P1e=n(UOe,"CODE",{});var K7t=s(P1e);Xir=r(K7t,"__init__()"),K7t.forEach(t),zir=r(UOe," (throws an error)."),UOe.forEach(t),Wir=i(fl),Et=n(fl,"DIV",{class:!0});var D0=s(Et);T(py.$$.fragment,D0),Qir=i(D0),B1e=n(D0,"P",{});var Z7t=s(B1e);Hir=r(Z7t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Z7t.forEach(t),Uir=i(D0),Rd=n(D0,"P",{});var ooe=s(Rd);Jir=r(ooe,`Note:
Loading a model from its configuration file does `),I1e=n(ooe,"STRONG",{});var e9t=s(I1e);Yir=r(e9t,"not"),e9t.forEach(t),Kir=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(ooe,"A",{href:!0});var o9t=s(PW);Zir=r(o9t,"from_pretrained()"),o9t.forEach(t),edr=r(ooe," to load the model weights."),ooe.forEach(t),odr=i(D0),T(HT.$$.fragment,D0),D0.forEach(t),rdr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(_y.$$.fragment,Fa),tdr=i(Fa),N1e=n(Fa,"P",{});var r9t=s(N1e);adr=r(r9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),r9t.forEach(t),ndr=i(Fa),Qa=n(Fa,"P",{});var G0=s(Qa);sdr=r(G0,"The model class to instantiate is selected based on the "),q1e=n(G0,"CODE",{});var t9t=s(q1e);ldr=r(t9t,"model_type"),t9t.forEach(t),idr=r(G0,` property of the config object (either
passed as an argument or loaded from `),j1e=n(G0,"CODE",{});var a9t=s(j1e);ddr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),cdr=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(G0,"CODE",{});var n9t=s(D1e);fdr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),mdr=r(G0,":"),G0.forEach(t),gdr=i(Fa),uy=n(Fa,"UL",{});var JOe=s(uy);UT=n(JOe,"LI",{});var XRe=s(UT);G1e=n(XRe,"STRONG",{});var s9t=s(G1e);hdr=r(s9t,"detr"),s9t.forEach(t),pdr=r(XRe," \u2014 "),BW=n(XRe,"A",{href:!0});var l9t=s(BW);_dr=r(l9t,"DetrForObjectDetection"),l9t.forEach(t),udr=r(XRe," (DETR model)"),XRe.forEach(t),bdr=i(JOe),JT=n(JOe,"LI",{});var zRe=s(JT);O1e=n(zRe,"STRONG",{});var i9t=s(O1e);vdr=r(i9t,"yolos"),i9t.forEach(t),Fdr=r(zRe," \u2014 "),IW=n(zRe,"A",{href:!0});var d9t=s(IW);Tdr=r(d9t,"YolosForObjectDetection"),d9t.forEach(t),Mdr=r(zRe," (YOLOS model)"),zRe.forEach(t),JOe.forEach(t),Edr=i(Fa),YT=n(Fa,"P",{});var WRe=s(YT);Cdr=r(WRe,"The model is set in evaluation mode by default using "),V1e=n(WRe,"CODE",{});var c9t=s(V1e);wdr=r(c9t,"model.eval()"),c9t.forEach(t),Adr=r(WRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(WRe,"CODE",{});var f9t=s(X1e);Ldr=r(f9t,"model.train()"),f9t.forEach(t),WRe.forEach(t),ydr=i(Fa),T(KT.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),zDe=i(f),Pd=n(f,"H2",{class:!0});var YOe=s(Pd);ZT=n(YOe,"A",{id:!0,class:!0,href:!0});var m9t=s(ZT);z1e=n(m9t,"SPAN",{});var g9t=s(z1e);T(by.$$.fragment,g9t),g9t.forEach(t),m9t.forEach(t),xdr=i(YOe),W1e=n(YOe,"SPAN",{});var h9t=s(W1e);$dr=r(h9t,"AutoModelForImageSegmentation"),h9t.forEach(t),YOe.forEach(t),WDe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(vy.$$.fragment,ml),kdr=i(ml),Bd=n(ml,"P",{});var roe=s(Bd);Sdr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NW=n(roe,"A",{href:!0});var p9t=s(NW);Rdr=r(p9t,"from_pretrained()"),p9t.forEach(t),Pdr=r(roe," class method or the "),qW=n(roe,"A",{href:!0});var _9t=s(qW);Bdr=r(_9t,"from_config()"),_9t.forEach(t),Idr=r(roe,` class
method.`),roe.forEach(t),Ndr=i(ml),Fy=n(ml,"P",{});var KOe=s(Fy);qdr=r(KOe,"This class cannot be instantiated directly using "),Q1e=n(KOe,"CODE",{});var u9t=s(Q1e);jdr=r(u9t,"__init__()"),u9t.forEach(t),Ddr=r(KOe," (throws an error)."),KOe.forEach(t),Gdr=i(ml),Ct=n(ml,"DIV",{class:!0});var O0=s(Ct);T(Ty.$$.fragment,O0),Odr=i(O0),H1e=n(O0,"P",{});var b9t=s(H1e);Vdr=r(b9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),b9t.forEach(t),Xdr=i(O0),Id=n(O0,"P",{});var toe=s(Id);zdr=r(toe,`Note:
Loading a model from its configuration file does `),U1e=n(toe,"STRONG",{});var v9t=s(U1e);Wdr=r(v9t,"not"),v9t.forEach(t),Qdr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(toe,"A",{href:!0});var F9t=s(jW);Hdr=r(F9t,"from_pretrained()"),F9t.forEach(t),Udr=r(toe," to load the model weights."),toe.forEach(t),Jdr=i(O0),T(e7.$$.fragment,O0),O0.forEach(t),Ydr=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(My.$$.fragment,Ta),Kdr=i(Ta),J1e=n(Ta,"P",{});var T9t=s(J1e);Zdr=r(T9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),T9t.forEach(t),ecr=i(Ta),Ha=n(Ta,"P",{});var V0=s(Ha);ocr=r(V0,"The model class to instantiate is selected based on the "),Y1e=n(V0,"CODE",{});var M9t=s(Y1e);rcr=r(M9t,"model_type"),M9t.forEach(t),tcr=r(V0,` property of the config object (either
passed as an argument or loaded from `),K1e=n(V0,"CODE",{});var E9t=s(K1e);acr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),ncr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(V0,"CODE",{});var C9t=s(Z1e);scr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),lcr=r(V0,":"),V0.forEach(t),icr=i(Ta),ebe=n(Ta,"UL",{});var w9t=s(ebe);o7=n(w9t,"LI",{});var QRe=s(o7);obe=n(QRe,"STRONG",{});var A9t=s(obe);dcr=r(A9t,"detr"),A9t.forEach(t),ccr=r(QRe," \u2014 "),DW=n(QRe,"A",{href:!0});var L9t=s(DW);fcr=r(L9t,"DetrForSegmentation"),L9t.forEach(t),mcr=r(QRe," (DETR model)"),QRe.forEach(t),w9t.forEach(t),gcr=i(Ta),r7=n(Ta,"P",{});var HRe=s(r7);hcr=r(HRe,"The model is set in evaluation mode by default using "),rbe=n(HRe,"CODE",{});var y9t=s(rbe);pcr=r(y9t,"model.eval()"),y9t.forEach(t),_cr=r(HRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(HRe,"CODE",{});var x9t=s(tbe);ucr=r(x9t,"model.train()"),x9t.forEach(t),HRe.forEach(t),bcr=i(Ta),T(t7.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),QDe=i(f),Nd=n(f,"H2",{class:!0});var ZOe=s(Nd);a7=n(ZOe,"A",{id:!0,class:!0,href:!0});var $9t=s(a7);abe=n($9t,"SPAN",{});var k9t=s(abe);T(Ey.$$.fragment,k9t),k9t.forEach(t),$9t.forEach(t),vcr=i(ZOe),nbe=n(ZOe,"SPAN",{});var S9t=s(nbe);Fcr=r(S9t,"AutoModelForSemanticSegmentation"),S9t.forEach(t),ZOe.forEach(t),HDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(Cy.$$.fragment,gl),Tcr=i(gl),qd=n(gl,"P",{});var aoe=s(qd);Mcr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GW=n(aoe,"A",{href:!0});var R9t=s(GW);Ecr=r(R9t,"from_pretrained()"),R9t.forEach(t),Ccr=r(aoe," class method or the "),OW=n(aoe,"A",{href:!0});var P9t=s(OW);wcr=r(P9t,"from_config()"),P9t.forEach(t),Acr=r(aoe,` class
method.`),aoe.forEach(t),Lcr=i(gl),wy=n(gl,"P",{});var eVe=s(wy);ycr=r(eVe,"This class cannot be instantiated directly using "),sbe=n(eVe,"CODE",{});var B9t=s(sbe);xcr=r(B9t,"__init__()"),B9t.forEach(t),$cr=r(eVe," (throws an error)."),eVe.forEach(t),kcr=i(gl),wt=n(gl,"DIV",{class:!0});var X0=s(wt);T(Ay.$$.fragment,X0),Scr=i(X0),lbe=n(X0,"P",{});var I9t=s(lbe);Rcr=r(I9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),I9t.forEach(t),Pcr=i(X0),jd=n(X0,"P",{});var noe=s(jd);Bcr=r(noe,`Note:
Loading a model from its configuration file does `),ibe=n(noe,"STRONG",{});var N9t=s(ibe);Icr=r(N9t,"not"),N9t.forEach(t),Ncr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(noe,"A",{href:!0});var q9t=s(VW);qcr=r(q9t,"from_pretrained()"),q9t.forEach(t),jcr=r(noe," to load the model weights."),noe.forEach(t),Dcr=i(X0),T(n7.$$.fragment,X0),X0.forEach(t),Gcr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(Ly.$$.fragment,Ma),Ocr=i(Ma),dbe=n(Ma,"P",{});var j9t=s(dbe);Vcr=r(j9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),j9t.forEach(t),Xcr=i(Ma),Ua=n(Ma,"P",{});var z0=s(Ua);zcr=r(z0,"The model class to instantiate is selected based on the "),cbe=n(z0,"CODE",{});var D9t=s(cbe);Wcr=r(D9t,"model_type"),D9t.forEach(t),Qcr=r(z0,` property of the config object (either
passed as an argument or loaded from `),fbe=n(z0,"CODE",{});var G9t=s(fbe);Hcr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Ucr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(z0,"CODE",{});var O9t=s(mbe);Jcr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),Ycr=r(z0,":"),z0.forEach(t),Kcr=i(Ma),Ja=n(Ma,"UL",{});var W0=s(Ja);s7=n(W0,"LI",{});var URe=s(s7);gbe=n(URe,"STRONG",{});var V9t=s(gbe);Zcr=r(V9t,"beit"),V9t.forEach(t),efr=r(URe," \u2014 "),XW=n(URe,"A",{href:!0});var X9t=s(XW);ofr=r(X9t,"BeitForSemanticSegmentation"),X9t.forEach(t),rfr=r(URe," (BEiT model)"),URe.forEach(t),tfr=i(W0),l7=n(W0,"LI",{});var JRe=s(l7);hbe=n(JRe,"STRONG",{});var z9t=s(hbe);afr=r(z9t,"data2vec-vision"),z9t.forEach(t),nfr=r(JRe," \u2014 "),zW=n(JRe,"A",{href:!0});var W9t=s(zW);sfr=r(W9t,"Data2VecVisionForSemanticSegmentation"),W9t.forEach(t),lfr=r(JRe," (Data2VecVision model)"),JRe.forEach(t),ifr=i(W0),i7=n(W0,"LI",{});var YRe=s(i7);pbe=n(YRe,"STRONG",{});var Q9t=s(pbe);dfr=r(Q9t,"dpt"),Q9t.forEach(t),cfr=r(YRe," \u2014 "),WW=n(YRe,"A",{href:!0});var H9t=s(WW);ffr=r(H9t,"DPTForSemanticSegmentation"),H9t.forEach(t),mfr=r(YRe," (DPT model)"),YRe.forEach(t),gfr=i(W0),d7=n(W0,"LI",{});var KRe=s(d7);_be=n(KRe,"STRONG",{});var U9t=s(_be);hfr=r(U9t,"segformer"),U9t.forEach(t),pfr=r(KRe," \u2014 "),QW=n(KRe,"A",{href:!0});var J9t=s(QW);_fr=r(J9t,"SegformerForSemanticSegmentation"),J9t.forEach(t),ufr=r(KRe," (SegFormer model)"),KRe.forEach(t),W0.forEach(t),bfr=i(Ma),c7=n(Ma,"P",{});var ZRe=s(c7);vfr=r(ZRe,"The model is set in evaluation mode by default using "),ube=n(ZRe,"CODE",{});var Y9t=s(ube);Ffr=r(Y9t,"model.eval()"),Y9t.forEach(t),Tfr=r(ZRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=n(ZRe,"CODE",{});var K9t=s(bbe);Mfr=r(K9t,"model.train()"),K9t.forEach(t),ZRe.forEach(t),Efr=i(Ma),T(f7.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),UDe=i(f),Dd=n(f,"H2",{class:!0});var oVe=s(Dd);m7=n(oVe,"A",{id:!0,class:!0,href:!0});var Z9t=s(m7);vbe=n(Z9t,"SPAN",{});var eMt=s(vbe);T(yy.$$.fragment,eMt),eMt.forEach(t),Z9t.forEach(t),Cfr=i(oVe),Fbe=n(oVe,"SPAN",{});var oMt=s(Fbe);wfr=r(oMt,"AutoModelForInstanceSegmentation"),oMt.forEach(t),oVe.forEach(t),JDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(xy.$$.fragment,hl),Afr=i(hl),Gd=n(hl,"P",{});var soe=s(Gd);Lfr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HW=n(soe,"A",{href:!0});var rMt=s(HW);yfr=r(rMt,"from_pretrained()"),rMt.forEach(t),xfr=r(soe," class method or the "),UW=n(soe,"A",{href:!0});var tMt=s(UW);$fr=r(tMt,"from_config()"),tMt.forEach(t),kfr=r(soe,` class
method.`),soe.forEach(t),Sfr=i(hl),$y=n(hl,"P",{});var rVe=s($y);Rfr=r(rVe,"This class cannot be instantiated directly using "),Tbe=n(rVe,"CODE",{});var aMt=s(Tbe);Pfr=r(aMt,"__init__()"),aMt.forEach(t),Bfr=r(rVe," (throws an error)."),rVe.forEach(t),Ifr=i(hl),At=n(hl,"DIV",{class:!0});var Q0=s(At);T(ky.$$.fragment,Q0),Nfr=i(Q0),Mbe=n(Q0,"P",{});var nMt=s(Mbe);qfr=r(nMt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nMt.forEach(t),jfr=i(Q0),Od=n(Q0,"P",{});var loe=s(Od);Dfr=r(loe,`Note:
Loading a model from its configuration file does `),Ebe=n(loe,"STRONG",{});var sMt=s(Ebe);Gfr=r(sMt,"not"),sMt.forEach(t),Ofr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(loe,"A",{href:!0});var lMt=s(JW);Vfr=r(lMt,"from_pretrained()"),lMt.forEach(t),Xfr=r(loe," to load the model weights."),loe.forEach(t),zfr=i(Q0),T(g7.$$.fragment,Q0),Q0.forEach(t),Wfr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(Sy.$$.fragment,Ea),Qfr=i(Ea),Cbe=n(Ea,"P",{});var iMt=s(Cbe);Hfr=r(iMt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),iMt.forEach(t),Ufr=i(Ea),Ya=n(Ea,"P",{});var H0=s(Ya);Jfr=r(H0,"The model class to instantiate is selected based on the "),wbe=n(H0,"CODE",{});var dMt=s(wbe);Yfr=r(dMt,"model_type"),dMt.forEach(t),Kfr=r(H0,` property of the config object (either
passed as an argument or loaded from `),Abe=n(H0,"CODE",{});var cMt=s(Abe);Zfr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),emr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(H0,"CODE",{});var fMt=s(Lbe);omr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),rmr=r(H0,":"),H0.forEach(t),tmr=i(Ea),ybe=n(Ea,"UL",{});var mMt=s(ybe);h7=n(mMt,"LI",{});var ePe=s(h7);xbe=n(ePe,"STRONG",{});var gMt=s(xbe);amr=r(gMt,"maskformer"),gMt.forEach(t),nmr=r(ePe," \u2014 "),YW=n(ePe,"A",{href:!0});var hMt=s(YW);smr=r(hMt,"MaskFormerForInstanceSegmentation"),hMt.forEach(t),lmr=r(ePe," (MaskFormer model)"),ePe.forEach(t),mMt.forEach(t),imr=i(Ea),p7=n(Ea,"P",{});var oPe=s(p7);dmr=r(oPe,"The model is set in evaluation mode by default using "),$be=n(oPe,"CODE",{});var pMt=s($be);cmr=r(pMt,"model.eval()"),pMt.forEach(t),fmr=r(oPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=n(oPe,"CODE",{});var _Mt=s(kbe);mmr=r(_Mt,"model.train()"),_Mt.forEach(t),oPe.forEach(t),gmr=i(Ea),T(_7.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),YDe=i(f),Vd=n(f,"H2",{class:!0});var tVe=s(Vd);u7=n(tVe,"A",{id:!0,class:!0,href:!0});var uMt=s(u7);Sbe=n(uMt,"SPAN",{});var bMt=s(Sbe);T(Ry.$$.fragment,bMt),bMt.forEach(t),uMt.forEach(t),hmr=i(tVe),Rbe=n(tVe,"SPAN",{});var vMt=s(Rbe);pmr=r(vMt,"TFAutoModel"),vMt.forEach(t),tVe.forEach(t),KDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(Py.$$.fragment,pl),_mr=i(pl),Xd=n(pl,"P",{});var ioe=s(Xd);umr=r(ioe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KW=n(ioe,"A",{href:!0});var FMt=s(KW);bmr=r(FMt,"from_pretrained()"),FMt.forEach(t),vmr=r(ioe," class method or the "),ZW=n(ioe,"A",{href:!0});var TMt=s(ZW);Fmr=r(TMt,"from_config()"),TMt.forEach(t),Tmr=r(ioe,` class
method.`),ioe.forEach(t),Mmr=i(pl),By=n(pl,"P",{});var aVe=s(By);Emr=r(aVe,"This class cannot be instantiated directly using "),Pbe=n(aVe,"CODE",{});var MMt=s(Pbe);Cmr=r(MMt,"__init__()"),MMt.forEach(t),wmr=r(aVe," (throws an error)."),aVe.forEach(t),Amr=i(pl),Lt=n(pl,"DIV",{class:!0});var U0=s(Lt);T(Iy.$$.fragment,U0),Lmr=i(U0),Bbe=n(U0,"P",{});var EMt=s(Bbe);ymr=r(EMt,"Instantiates one of the base model classes of the library from a configuration."),EMt.forEach(t),xmr=i(U0),zd=n(U0,"P",{});var doe=s(zd);$mr=r(doe,`Note:
Loading a model from its configuration file does `),Ibe=n(doe,"STRONG",{});var CMt=s(Ibe);kmr=r(CMt,"not"),CMt.forEach(t),Smr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(doe,"A",{href:!0});var wMt=s(eQ);Rmr=r(wMt,"from_pretrained()"),wMt.forEach(t),Pmr=r(doe," to load the model weights."),doe.forEach(t),Bmr=i(U0),T(b7.$$.fragment,U0),U0.forEach(t),Imr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(Ny.$$.fragment,_l),Nmr=i(_l),Nbe=n(_l,"P",{});var AMt=s(Nbe);qmr=r(AMt,"Instantiate one of the base model classes of the library from a pretrained model."),AMt.forEach(t),jmr=i(_l),Ka=n(_l,"P",{});var J0=s(Ka);Dmr=r(J0,"The model class to instantiate is selected based on the "),qbe=n(J0,"CODE",{});var LMt=s(qbe);Gmr=r(LMt,"model_type"),LMt.forEach(t),Omr=r(J0,` property of the config object (either
passed as an argument or loaded from `),jbe=n(J0,"CODE",{});var yMt=s(jbe);Vmr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),Xmr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(J0,"CODE",{});var xMt=s(Dbe);zmr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),Wmr=r(J0,":"),J0.forEach(t),Qmr=i(_l),q=n(_l,"UL",{});var D=s(q);v7=n(D,"LI",{});var rPe=s(v7);Gbe=n(rPe,"STRONG",{});var $Mt=s(Gbe);Hmr=r($Mt,"albert"),$Mt.forEach(t),Umr=r(rPe," \u2014 "),oQ=n(rPe,"A",{href:!0});var kMt=s(oQ);Jmr=r(kMt,"TFAlbertModel"),kMt.forEach(t),Ymr=r(rPe," (ALBERT model)"),rPe.forEach(t),Kmr=i(D),F7=n(D,"LI",{});var tPe=s(F7);Obe=n(tPe,"STRONG",{});var SMt=s(Obe);Zmr=r(SMt,"bart"),SMt.forEach(t),egr=r(tPe," \u2014 "),rQ=n(tPe,"A",{href:!0});var RMt=s(rQ);ogr=r(RMt,"TFBartModel"),RMt.forEach(t),rgr=r(tPe," (BART model)"),tPe.forEach(t),tgr=i(D),T7=n(D,"LI",{});var aPe=s(T7);Vbe=n(aPe,"STRONG",{});var PMt=s(Vbe);agr=r(PMt,"bert"),PMt.forEach(t),ngr=r(aPe," \u2014 "),tQ=n(aPe,"A",{href:!0});var BMt=s(tQ);sgr=r(BMt,"TFBertModel"),BMt.forEach(t),lgr=r(aPe," (BERT model)"),aPe.forEach(t),igr=i(D),M7=n(D,"LI",{});var nPe=s(M7);Xbe=n(nPe,"STRONG",{});var IMt=s(Xbe);dgr=r(IMt,"blenderbot"),IMt.forEach(t),cgr=r(nPe," \u2014 "),aQ=n(nPe,"A",{href:!0});var NMt=s(aQ);fgr=r(NMt,"TFBlenderbotModel"),NMt.forEach(t),mgr=r(nPe," (Blenderbot model)"),nPe.forEach(t),ggr=i(D),E7=n(D,"LI",{});var sPe=s(E7);zbe=n(sPe,"STRONG",{});var qMt=s(zbe);hgr=r(qMt,"blenderbot-small"),qMt.forEach(t),pgr=r(sPe," \u2014 "),nQ=n(sPe,"A",{href:!0});var jMt=s(nQ);_gr=r(jMt,"TFBlenderbotSmallModel"),jMt.forEach(t),ugr=r(sPe," (BlenderbotSmall model)"),sPe.forEach(t),bgr=i(D),C7=n(D,"LI",{});var lPe=s(C7);Wbe=n(lPe,"STRONG",{});var DMt=s(Wbe);vgr=r(DMt,"camembert"),DMt.forEach(t),Fgr=r(lPe," \u2014 "),sQ=n(lPe,"A",{href:!0});var GMt=s(sQ);Tgr=r(GMt,"TFCamembertModel"),GMt.forEach(t),Mgr=r(lPe," (CamemBERT model)"),lPe.forEach(t),Egr=i(D),w7=n(D,"LI",{});var iPe=s(w7);Qbe=n(iPe,"STRONG",{});var OMt=s(Qbe);Cgr=r(OMt,"clip"),OMt.forEach(t),wgr=r(iPe," \u2014 "),lQ=n(iPe,"A",{href:!0});var VMt=s(lQ);Agr=r(VMt,"TFCLIPModel"),VMt.forEach(t),Lgr=r(iPe," (CLIP model)"),iPe.forEach(t),ygr=i(D),A7=n(D,"LI",{});var dPe=s(A7);Hbe=n(dPe,"STRONG",{});var XMt=s(Hbe);xgr=r(XMt,"convbert"),XMt.forEach(t),$gr=r(dPe," \u2014 "),iQ=n(dPe,"A",{href:!0});var zMt=s(iQ);kgr=r(zMt,"TFConvBertModel"),zMt.forEach(t),Sgr=r(dPe," (ConvBERT model)"),dPe.forEach(t),Rgr=i(D),L7=n(D,"LI",{});var cPe=s(L7);Ube=n(cPe,"STRONG",{});var WMt=s(Ube);Pgr=r(WMt,"convnext"),WMt.forEach(t),Bgr=r(cPe," \u2014 "),dQ=n(cPe,"A",{href:!0});var QMt=s(dQ);Igr=r(QMt,"TFConvNextModel"),QMt.forEach(t),Ngr=r(cPe," (ConvNeXT model)"),cPe.forEach(t),qgr=i(D),y7=n(D,"LI",{});var fPe=s(y7);Jbe=n(fPe,"STRONG",{});var HMt=s(Jbe);jgr=r(HMt,"ctrl"),HMt.forEach(t),Dgr=r(fPe," \u2014 "),cQ=n(fPe,"A",{href:!0});var UMt=s(cQ);Ggr=r(UMt,"TFCTRLModel"),UMt.forEach(t),Ogr=r(fPe," (CTRL model)"),fPe.forEach(t),Vgr=i(D),x7=n(D,"LI",{});var mPe=s(x7);Ybe=n(mPe,"STRONG",{});var JMt=s(Ybe);Xgr=r(JMt,"data2vec-vision"),JMt.forEach(t),zgr=r(mPe," \u2014 "),fQ=n(mPe,"A",{href:!0});var YMt=s(fQ);Wgr=r(YMt,"TFData2VecVisionModel"),YMt.forEach(t),Qgr=r(mPe," (Data2VecVision model)"),mPe.forEach(t),Hgr=i(D),$7=n(D,"LI",{});var gPe=s($7);Kbe=n(gPe,"STRONG",{});var KMt=s(Kbe);Ugr=r(KMt,"deberta"),KMt.forEach(t),Jgr=r(gPe," \u2014 "),mQ=n(gPe,"A",{href:!0});var ZMt=s(mQ);Ygr=r(ZMt,"TFDebertaModel"),ZMt.forEach(t),Kgr=r(gPe," (DeBERTa model)"),gPe.forEach(t),Zgr=i(D),k7=n(D,"LI",{});var hPe=s(k7);Zbe=n(hPe,"STRONG",{});var e4t=s(Zbe);ehr=r(e4t,"deberta-v2"),e4t.forEach(t),ohr=r(hPe," \u2014 "),gQ=n(hPe,"A",{href:!0});var o4t=s(gQ);rhr=r(o4t,"TFDebertaV2Model"),o4t.forEach(t),thr=r(hPe," (DeBERTa-v2 model)"),hPe.forEach(t),ahr=i(D),S7=n(D,"LI",{});var pPe=s(S7);eve=n(pPe,"STRONG",{});var r4t=s(eve);nhr=r(r4t,"distilbert"),r4t.forEach(t),shr=r(pPe," \u2014 "),hQ=n(pPe,"A",{href:!0});var t4t=s(hQ);lhr=r(t4t,"TFDistilBertModel"),t4t.forEach(t),ihr=r(pPe," (DistilBERT model)"),pPe.forEach(t),dhr=i(D),R7=n(D,"LI",{});var _Pe=s(R7);ove=n(_Pe,"STRONG",{});var a4t=s(ove);chr=r(a4t,"dpr"),a4t.forEach(t),fhr=r(_Pe," \u2014 "),pQ=n(_Pe,"A",{href:!0});var n4t=s(pQ);mhr=r(n4t,"TFDPRQuestionEncoder"),n4t.forEach(t),ghr=r(_Pe," (DPR model)"),_Pe.forEach(t),hhr=i(D),P7=n(D,"LI",{});var uPe=s(P7);rve=n(uPe,"STRONG",{});var s4t=s(rve);phr=r(s4t,"electra"),s4t.forEach(t),_hr=r(uPe," \u2014 "),_Q=n(uPe,"A",{href:!0});var l4t=s(_Q);uhr=r(l4t,"TFElectraModel"),l4t.forEach(t),bhr=r(uPe," (ELECTRA model)"),uPe.forEach(t),vhr=i(D),B7=n(D,"LI",{});var bPe=s(B7);tve=n(bPe,"STRONG",{});var i4t=s(tve);Fhr=r(i4t,"flaubert"),i4t.forEach(t),Thr=r(bPe," \u2014 "),uQ=n(bPe,"A",{href:!0});var d4t=s(uQ);Mhr=r(d4t,"TFFlaubertModel"),d4t.forEach(t),Ehr=r(bPe," (FlauBERT model)"),bPe.forEach(t),Chr=i(D),qs=n(D,"LI",{});var uk=s(qs);ave=n(uk,"STRONG",{});var c4t=s(ave);whr=r(c4t,"funnel"),c4t.forEach(t),Ahr=r(uk," \u2014 "),bQ=n(uk,"A",{href:!0});var f4t=s(bQ);Lhr=r(f4t,"TFFunnelModel"),f4t.forEach(t),yhr=r(uk," or "),vQ=n(uk,"A",{href:!0});var m4t=s(vQ);xhr=r(m4t,"TFFunnelBaseModel"),m4t.forEach(t),$hr=r(uk," (Funnel Transformer model)"),uk.forEach(t),khr=i(D),I7=n(D,"LI",{});var vPe=s(I7);nve=n(vPe,"STRONG",{});var g4t=s(nve);Shr=r(g4t,"gpt2"),g4t.forEach(t),Rhr=r(vPe," \u2014 "),FQ=n(vPe,"A",{href:!0});var h4t=s(FQ);Phr=r(h4t,"TFGPT2Model"),h4t.forEach(t),Bhr=r(vPe," (OpenAI GPT-2 model)"),vPe.forEach(t),Ihr=i(D),N7=n(D,"LI",{});var FPe=s(N7);sve=n(FPe,"STRONG",{});var p4t=s(sve);Nhr=r(p4t,"gptj"),p4t.forEach(t),qhr=r(FPe," \u2014 "),TQ=n(FPe,"A",{href:!0});var _4t=s(TQ);jhr=r(_4t,"TFGPTJModel"),_4t.forEach(t),Dhr=r(FPe," (GPT-J model)"),FPe.forEach(t),Ghr=i(D),q7=n(D,"LI",{});var TPe=s(q7);lve=n(TPe,"STRONG",{});var u4t=s(lve);Ohr=r(u4t,"hubert"),u4t.forEach(t),Vhr=r(TPe," \u2014 "),MQ=n(TPe,"A",{href:!0});var b4t=s(MQ);Xhr=r(b4t,"TFHubertModel"),b4t.forEach(t),zhr=r(TPe," (Hubert model)"),TPe.forEach(t),Whr=i(D),j7=n(D,"LI",{});var MPe=s(j7);ive=n(MPe,"STRONG",{});var v4t=s(ive);Qhr=r(v4t,"layoutlm"),v4t.forEach(t),Hhr=r(MPe," \u2014 "),EQ=n(MPe,"A",{href:!0});var F4t=s(EQ);Uhr=r(F4t,"TFLayoutLMModel"),F4t.forEach(t),Jhr=r(MPe," (LayoutLM model)"),MPe.forEach(t),Yhr=i(D),D7=n(D,"LI",{});var EPe=s(D7);dve=n(EPe,"STRONG",{});var T4t=s(dve);Khr=r(T4t,"led"),T4t.forEach(t),Zhr=r(EPe," \u2014 "),CQ=n(EPe,"A",{href:!0});var M4t=s(CQ);epr=r(M4t,"TFLEDModel"),M4t.forEach(t),opr=r(EPe," (LED model)"),EPe.forEach(t),rpr=i(D),G7=n(D,"LI",{});var CPe=s(G7);cve=n(CPe,"STRONG",{});var E4t=s(cve);tpr=r(E4t,"longformer"),E4t.forEach(t),apr=r(CPe," \u2014 "),wQ=n(CPe,"A",{href:!0});var C4t=s(wQ);npr=r(C4t,"TFLongformerModel"),C4t.forEach(t),spr=r(CPe," (Longformer model)"),CPe.forEach(t),lpr=i(D),O7=n(D,"LI",{});var wPe=s(O7);fve=n(wPe,"STRONG",{});var w4t=s(fve);ipr=r(w4t,"lxmert"),w4t.forEach(t),dpr=r(wPe," \u2014 "),AQ=n(wPe,"A",{href:!0});var A4t=s(AQ);cpr=r(A4t,"TFLxmertModel"),A4t.forEach(t),fpr=r(wPe," (LXMERT model)"),wPe.forEach(t),mpr=i(D),V7=n(D,"LI",{});var APe=s(V7);mve=n(APe,"STRONG",{});var L4t=s(mve);gpr=r(L4t,"marian"),L4t.forEach(t),hpr=r(APe," \u2014 "),LQ=n(APe,"A",{href:!0});var y4t=s(LQ);ppr=r(y4t,"TFMarianModel"),y4t.forEach(t),_pr=r(APe," (Marian model)"),APe.forEach(t),upr=i(D),X7=n(D,"LI",{});var LPe=s(X7);gve=n(LPe,"STRONG",{});var x4t=s(gve);bpr=r(x4t,"mbart"),x4t.forEach(t),vpr=r(LPe," \u2014 "),yQ=n(LPe,"A",{href:!0});var $4t=s(yQ);Fpr=r($4t,"TFMBartModel"),$4t.forEach(t),Tpr=r(LPe," (mBART model)"),LPe.forEach(t),Mpr=i(D),z7=n(D,"LI",{});var yPe=s(z7);hve=n(yPe,"STRONG",{});var k4t=s(hve);Epr=r(k4t,"mobilebert"),k4t.forEach(t),Cpr=r(yPe," \u2014 "),xQ=n(yPe,"A",{href:!0});var S4t=s(xQ);wpr=r(S4t,"TFMobileBertModel"),S4t.forEach(t),Apr=r(yPe," (MobileBERT model)"),yPe.forEach(t),Lpr=i(D),W7=n(D,"LI",{});var xPe=s(W7);pve=n(xPe,"STRONG",{});var R4t=s(pve);ypr=r(R4t,"mpnet"),R4t.forEach(t),xpr=r(xPe," \u2014 "),$Q=n(xPe,"A",{href:!0});var P4t=s($Q);$pr=r(P4t,"TFMPNetModel"),P4t.forEach(t),kpr=r(xPe," (MPNet model)"),xPe.forEach(t),Spr=i(D),Q7=n(D,"LI",{});var $Pe=s(Q7);_ve=n($Pe,"STRONG",{});var B4t=s(_ve);Rpr=r(B4t,"mt5"),B4t.forEach(t),Ppr=r($Pe," \u2014 "),kQ=n($Pe,"A",{href:!0});var I4t=s(kQ);Bpr=r(I4t,"TFMT5Model"),I4t.forEach(t),Ipr=r($Pe," (MT5 model)"),$Pe.forEach(t),Npr=i(D),H7=n(D,"LI",{});var kPe=s(H7);uve=n(kPe,"STRONG",{});var N4t=s(uve);qpr=r(N4t,"openai-gpt"),N4t.forEach(t),jpr=r(kPe," \u2014 "),SQ=n(kPe,"A",{href:!0});var q4t=s(SQ);Dpr=r(q4t,"TFOpenAIGPTModel"),q4t.forEach(t),Gpr=r(kPe," (OpenAI GPT model)"),kPe.forEach(t),Opr=i(D),U7=n(D,"LI",{});var SPe=s(U7);bve=n(SPe,"STRONG",{});var j4t=s(bve);Vpr=r(j4t,"opt"),j4t.forEach(t),Xpr=r(SPe," \u2014 "),RQ=n(SPe,"A",{href:!0});var D4t=s(RQ);zpr=r(D4t,"TFOPTModel"),D4t.forEach(t),Wpr=r(SPe," (OPT model)"),SPe.forEach(t),Qpr=i(D),J7=n(D,"LI",{});var RPe=s(J7);vve=n(RPe,"STRONG",{});var G4t=s(vve);Hpr=r(G4t,"pegasus"),G4t.forEach(t),Upr=r(RPe," \u2014 "),PQ=n(RPe,"A",{href:!0});var O4t=s(PQ);Jpr=r(O4t,"TFPegasusModel"),O4t.forEach(t),Ypr=r(RPe," (Pegasus model)"),RPe.forEach(t),Kpr=i(D),Y7=n(D,"LI",{});var PPe=s(Y7);Fve=n(PPe,"STRONG",{});var V4t=s(Fve);Zpr=r(V4t,"rembert"),V4t.forEach(t),e_r=r(PPe," \u2014 "),BQ=n(PPe,"A",{href:!0});var X4t=s(BQ);o_r=r(X4t,"TFRemBertModel"),X4t.forEach(t),r_r=r(PPe," (RemBERT model)"),PPe.forEach(t),t_r=i(D),K7=n(D,"LI",{});var BPe=s(K7);Tve=n(BPe,"STRONG",{});var z4t=s(Tve);a_r=r(z4t,"roberta"),z4t.forEach(t),n_r=r(BPe," \u2014 "),IQ=n(BPe,"A",{href:!0});var W4t=s(IQ);s_r=r(W4t,"TFRobertaModel"),W4t.forEach(t),l_r=r(BPe," (RoBERTa model)"),BPe.forEach(t),i_r=i(D),Z7=n(D,"LI",{});var IPe=s(Z7);Mve=n(IPe,"STRONG",{});var Q4t=s(Mve);d_r=r(Q4t,"roformer"),Q4t.forEach(t),c_r=r(IPe," \u2014 "),NQ=n(IPe,"A",{href:!0});var H4t=s(NQ);f_r=r(H4t,"TFRoFormerModel"),H4t.forEach(t),m_r=r(IPe," (RoFormer model)"),IPe.forEach(t),g_r=i(D),e9=n(D,"LI",{});var NPe=s(e9);Eve=n(NPe,"STRONG",{});var U4t=s(Eve);h_r=r(U4t,"speech_to_text"),U4t.forEach(t),p_r=r(NPe," \u2014 "),qQ=n(NPe,"A",{href:!0});var J4t=s(qQ);__r=r(J4t,"TFSpeech2TextModel"),J4t.forEach(t),u_r=r(NPe," (Speech2Text model)"),NPe.forEach(t),b_r=i(D),o9=n(D,"LI",{});var qPe=s(o9);Cve=n(qPe,"STRONG",{});var Y4t=s(Cve);v_r=r(Y4t,"swin"),Y4t.forEach(t),F_r=r(qPe," \u2014 "),jQ=n(qPe,"A",{href:!0});var K4t=s(jQ);T_r=r(K4t,"TFSwinModel"),K4t.forEach(t),M_r=r(qPe," (Swin Transformer model)"),qPe.forEach(t),E_r=i(D),r9=n(D,"LI",{});var jPe=s(r9);wve=n(jPe,"STRONG",{});var Z4t=s(wve);C_r=r(Z4t,"t5"),Z4t.forEach(t),w_r=r(jPe," \u2014 "),DQ=n(jPe,"A",{href:!0});var eEt=s(DQ);A_r=r(eEt,"TFT5Model"),eEt.forEach(t),L_r=r(jPe," (T5 model)"),jPe.forEach(t),y_r=i(D),t9=n(D,"LI",{});var DPe=s(t9);Ave=n(DPe,"STRONG",{});var oEt=s(Ave);x_r=r(oEt,"tapas"),oEt.forEach(t),$_r=r(DPe," \u2014 "),GQ=n(DPe,"A",{href:!0});var rEt=s(GQ);k_r=r(rEt,"TFTapasModel"),rEt.forEach(t),S_r=r(DPe," (TAPAS model)"),DPe.forEach(t),R_r=i(D),a9=n(D,"LI",{});var GPe=s(a9);Lve=n(GPe,"STRONG",{});var tEt=s(Lve);P_r=r(tEt,"transfo-xl"),tEt.forEach(t),B_r=r(GPe," \u2014 "),OQ=n(GPe,"A",{href:!0});var aEt=s(OQ);I_r=r(aEt,"TFTransfoXLModel"),aEt.forEach(t),N_r=r(GPe," (Transformer-XL model)"),GPe.forEach(t),q_r=i(D),n9=n(D,"LI",{});var OPe=s(n9);yve=n(OPe,"STRONG",{});var nEt=s(yve);j_r=r(nEt,"vit"),nEt.forEach(t),D_r=r(OPe," \u2014 "),VQ=n(OPe,"A",{href:!0});var sEt=s(VQ);G_r=r(sEt,"TFViTModel"),sEt.forEach(t),O_r=r(OPe," (ViT model)"),OPe.forEach(t),V_r=i(D),s9=n(D,"LI",{});var VPe=s(s9);xve=n(VPe,"STRONG",{});var lEt=s(xve);X_r=r(lEt,"vit_mae"),lEt.forEach(t),z_r=r(VPe," \u2014 "),XQ=n(VPe,"A",{href:!0});var iEt=s(XQ);W_r=r(iEt,"TFViTMAEModel"),iEt.forEach(t),Q_r=r(VPe," (ViTMAE model)"),VPe.forEach(t),H_r=i(D),l9=n(D,"LI",{});var XPe=s(l9);$ve=n(XPe,"STRONG",{});var dEt=s($ve);U_r=r(dEt,"wav2vec2"),dEt.forEach(t),J_r=r(XPe," \u2014 "),zQ=n(XPe,"A",{href:!0});var cEt=s(zQ);Y_r=r(cEt,"TFWav2Vec2Model"),cEt.forEach(t),K_r=r(XPe," (Wav2Vec2 model)"),XPe.forEach(t),Z_r=i(D),i9=n(D,"LI",{});var zPe=s(i9);kve=n(zPe,"STRONG",{});var fEt=s(kve);eur=r(fEt,"xlm"),fEt.forEach(t),our=r(zPe," \u2014 "),WQ=n(zPe,"A",{href:!0});var mEt=s(WQ);rur=r(mEt,"TFXLMModel"),mEt.forEach(t),tur=r(zPe," (XLM model)"),zPe.forEach(t),aur=i(D),d9=n(D,"LI",{});var WPe=s(d9);Sve=n(WPe,"STRONG",{});var gEt=s(Sve);nur=r(gEt,"xlm-roberta"),gEt.forEach(t),sur=r(WPe," \u2014 "),QQ=n(WPe,"A",{href:!0});var hEt=s(QQ);lur=r(hEt,"TFXLMRobertaModel"),hEt.forEach(t),iur=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),dur=i(D),c9=n(D,"LI",{});var QPe=s(c9);Rve=n(QPe,"STRONG",{});var pEt=s(Rve);cur=r(pEt,"xlnet"),pEt.forEach(t),fur=r(QPe," \u2014 "),HQ=n(QPe,"A",{href:!0});var _Et=s(HQ);mur=r(_Et,"TFXLNetModel"),_Et.forEach(t),gur=r(QPe," (XLNet model)"),QPe.forEach(t),D.forEach(t),hur=i(_l),T(f9.$$.fragment,_l),_l.forEach(t),pl.forEach(t),ZDe=i(f),Wd=n(f,"H2",{class:!0});var nVe=s(Wd);m9=n(nVe,"A",{id:!0,class:!0,href:!0});var uEt=s(m9);Pve=n(uEt,"SPAN",{});var bEt=s(Pve);T(qy.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),pur=i(nVe),Bve=n(nVe,"SPAN",{});var vEt=s(Bve);_ur=r(vEt,"TFAutoModelForPreTraining"),vEt.forEach(t),nVe.forEach(t),eGe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(jy.$$.fragment,ul),uur=i(ul),Qd=n(ul,"P",{});var coe=s(Qd);bur=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UQ=n(coe,"A",{href:!0});var FEt=s(UQ);vur=r(FEt,"from_pretrained()"),FEt.forEach(t),Fur=r(coe," class method or the "),JQ=n(coe,"A",{href:!0});var TEt=s(JQ);Tur=r(TEt,"from_config()"),TEt.forEach(t),Mur=r(coe,` class
method.`),coe.forEach(t),Eur=i(ul),Dy=n(ul,"P",{});var sVe=s(Dy);Cur=r(sVe,"This class cannot be instantiated directly using "),Ive=n(sVe,"CODE",{});var MEt=s(Ive);wur=r(MEt,"__init__()"),MEt.forEach(t),Aur=r(sVe," (throws an error)."),sVe.forEach(t),Lur=i(ul),yt=n(ul,"DIV",{class:!0});var Y0=s(yt);T(Gy.$$.fragment,Y0),yur=i(Y0),Nve=n(Y0,"P",{});var EEt=s(Nve);xur=r(EEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EEt.forEach(t),$ur=i(Y0),Hd=n(Y0,"P",{});var foe=s(Hd);kur=r(foe,`Note:
Loading a model from its configuration file does `),qve=n(foe,"STRONG",{});var CEt=s(qve);Sur=r(CEt,"not"),CEt.forEach(t),Rur=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(foe,"A",{href:!0});var wEt=s(YQ);Pur=r(wEt,"from_pretrained()"),wEt.forEach(t),Bur=r(foe," to load the model weights."),foe.forEach(t),Iur=i(Y0),T(g9.$$.fragment,Y0),Y0.forEach(t),Nur=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(Oy.$$.fragment,bl),qur=i(bl),jve=n(bl,"P",{});var AEt=s(jve);jur=r(AEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AEt.forEach(t),Dur=i(bl),Za=n(bl,"P",{});var K0=s(Za);Gur=r(K0,"The model class to instantiate is selected based on the "),Dve=n(K0,"CODE",{});var LEt=s(Dve);Our=r(LEt,"model_type"),LEt.forEach(t),Vur=r(K0,` property of the config object (either
passed as an argument or loaded from `),Gve=n(K0,"CODE",{});var yEt=s(Gve);Xur=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),zur=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(K0,"CODE",{});var xEt=s(Ove);Wur=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),Qur=r(K0,":"),K0.forEach(t),Hur=i(bl),se=n(bl,"UL",{});var le=s(se);h9=n(le,"LI",{});var HPe=s(h9);Vve=n(HPe,"STRONG",{});var $Et=s(Vve);Uur=r($Et,"albert"),$Et.forEach(t),Jur=r(HPe," \u2014 "),KQ=n(HPe,"A",{href:!0});var kEt=s(KQ);Yur=r(kEt,"TFAlbertForPreTraining"),kEt.forEach(t),Kur=r(HPe," (ALBERT model)"),HPe.forEach(t),Zur=i(le),p9=n(le,"LI",{});var UPe=s(p9);Xve=n(UPe,"STRONG",{});var SEt=s(Xve);e2r=r(SEt,"bart"),SEt.forEach(t),o2r=r(UPe," \u2014 "),ZQ=n(UPe,"A",{href:!0});var REt=s(ZQ);r2r=r(REt,"TFBartForConditionalGeneration"),REt.forEach(t),t2r=r(UPe," (BART model)"),UPe.forEach(t),a2r=i(le),_9=n(le,"LI",{});var JPe=s(_9);zve=n(JPe,"STRONG",{});var PEt=s(zve);n2r=r(PEt,"bert"),PEt.forEach(t),s2r=r(JPe," \u2014 "),eH=n(JPe,"A",{href:!0});var BEt=s(eH);l2r=r(BEt,"TFBertForPreTraining"),BEt.forEach(t),i2r=r(JPe," (BERT model)"),JPe.forEach(t),d2r=i(le),u9=n(le,"LI",{});var YPe=s(u9);Wve=n(YPe,"STRONG",{});var IEt=s(Wve);c2r=r(IEt,"camembert"),IEt.forEach(t),f2r=r(YPe," \u2014 "),oH=n(YPe,"A",{href:!0});var NEt=s(oH);m2r=r(NEt,"TFCamembertForMaskedLM"),NEt.forEach(t),g2r=r(YPe," (CamemBERT model)"),YPe.forEach(t),h2r=i(le),b9=n(le,"LI",{});var KPe=s(b9);Qve=n(KPe,"STRONG",{});var qEt=s(Qve);p2r=r(qEt,"ctrl"),qEt.forEach(t),_2r=r(KPe," \u2014 "),rH=n(KPe,"A",{href:!0});var jEt=s(rH);u2r=r(jEt,"TFCTRLLMHeadModel"),jEt.forEach(t),b2r=r(KPe," (CTRL model)"),KPe.forEach(t),v2r=i(le),v9=n(le,"LI",{});var ZPe=s(v9);Hve=n(ZPe,"STRONG",{});var DEt=s(Hve);F2r=r(DEt,"distilbert"),DEt.forEach(t),T2r=r(ZPe," \u2014 "),tH=n(ZPe,"A",{href:!0});var GEt=s(tH);M2r=r(GEt,"TFDistilBertForMaskedLM"),GEt.forEach(t),E2r=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),C2r=i(le),F9=n(le,"LI",{});var eBe=s(F9);Uve=n(eBe,"STRONG",{});var OEt=s(Uve);w2r=r(OEt,"electra"),OEt.forEach(t),A2r=r(eBe," \u2014 "),aH=n(eBe,"A",{href:!0});var VEt=s(aH);L2r=r(VEt,"TFElectraForPreTraining"),VEt.forEach(t),y2r=r(eBe," (ELECTRA model)"),eBe.forEach(t),x2r=i(le),T9=n(le,"LI",{});var oBe=s(T9);Jve=n(oBe,"STRONG",{});var XEt=s(Jve);$2r=r(XEt,"flaubert"),XEt.forEach(t),k2r=r(oBe," \u2014 "),nH=n(oBe,"A",{href:!0});var zEt=s(nH);S2r=r(zEt,"TFFlaubertWithLMHeadModel"),zEt.forEach(t),R2r=r(oBe," (FlauBERT model)"),oBe.forEach(t),P2r=i(le),M9=n(le,"LI",{});var rBe=s(M9);Yve=n(rBe,"STRONG",{});var WEt=s(Yve);B2r=r(WEt,"funnel"),WEt.forEach(t),I2r=r(rBe," \u2014 "),sH=n(rBe,"A",{href:!0});var QEt=s(sH);N2r=r(QEt,"TFFunnelForPreTraining"),QEt.forEach(t),q2r=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),j2r=i(le),E9=n(le,"LI",{});var tBe=s(E9);Kve=n(tBe,"STRONG",{});var HEt=s(Kve);D2r=r(HEt,"gpt2"),HEt.forEach(t),G2r=r(tBe," \u2014 "),lH=n(tBe,"A",{href:!0});var UEt=s(lH);O2r=r(UEt,"TFGPT2LMHeadModel"),UEt.forEach(t),V2r=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),X2r=i(le),C9=n(le,"LI",{});var aBe=s(C9);Zve=n(aBe,"STRONG",{});var JEt=s(Zve);z2r=r(JEt,"layoutlm"),JEt.forEach(t),W2r=r(aBe," \u2014 "),iH=n(aBe,"A",{href:!0});var YEt=s(iH);Q2r=r(YEt,"TFLayoutLMForMaskedLM"),YEt.forEach(t),H2r=r(aBe," (LayoutLM model)"),aBe.forEach(t),U2r=i(le),w9=n(le,"LI",{});var nBe=s(w9);eFe=n(nBe,"STRONG",{});var KEt=s(eFe);J2r=r(KEt,"lxmert"),KEt.forEach(t),Y2r=r(nBe," \u2014 "),dH=n(nBe,"A",{href:!0});var ZEt=s(dH);K2r=r(ZEt,"TFLxmertForPreTraining"),ZEt.forEach(t),Z2r=r(nBe," (LXMERT model)"),nBe.forEach(t),e1r=i(le),A9=n(le,"LI",{});var sBe=s(A9);oFe=n(sBe,"STRONG",{});var eCt=s(oFe);o1r=r(eCt,"mobilebert"),eCt.forEach(t),r1r=r(sBe," \u2014 "),cH=n(sBe,"A",{href:!0});var oCt=s(cH);t1r=r(oCt,"TFMobileBertForPreTraining"),oCt.forEach(t),a1r=r(sBe," (MobileBERT model)"),sBe.forEach(t),n1r=i(le),L9=n(le,"LI",{});var lBe=s(L9);rFe=n(lBe,"STRONG",{});var rCt=s(rFe);s1r=r(rCt,"mpnet"),rCt.forEach(t),l1r=r(lBe," \u2014 "),fH=n(lBe,"A",{href:!0});var tCt=s(fH);i1r=r(tCt,"TFMPNetForMaskedLM"),tCt.forEach(t),d1r=r(lBe," (MPNet model)"),lBe.forEach(t),c1r=i(le),y9=n(le,"LI",{});var iBe=s(y9);tFe=n(iBe,"STRONG",{});var aCt=s(tFe);f1r=r(aCt,"openai-gpt"),aCt.forEach(t),m1r=r(iBe," \u2014 "),mH=n(iBe,"A",{href:!0});var nCt=s(mH);g1r=r(nCt,"TFOpenAIGPTLMHeadModel"),nCt.forEach(t),h1r=r(iBe," (OpenAI GPT model)"),iBe.forEach(t),p1r=i(le),x9=n(le,"LI",{});var dBe=s(x9);aFe=n(dBe,"STRONG",{});var sCt=s(aFe);_1r=r(sCt,"roberta"),sCt.forEach(t),u1r=r(dBe," \u2014 "),gH=n(dBe,"A",{href:!0});var lCt=s(gH);b1r=r(lCt,"TFRobertaForMaskedLM"),lCt.forEach(t),v1r=r(dBe," (RoBERTa model)"),dBe.forEach(t),F1r=i(le),$9=n(le,"LI",{});var cBe=s($9);nFe=n(cBe,"STRONG",{});var iCt=s(nFe);T1r=r(iCt,"t5"),iCt.forEach(t),M1r=r(cBe," \u2014 "),hH=n(cBe,"A",{href:!0});var dCt=s(hH);E1r=r(dCt,"TFT5ForConditionalGeneration"),dCt.forEach(t),C1r=r(cBe," (T5 model)"),cBe.forEach(t),w1r=i(le),k9=n(le,"LI",{});var fBe=s(k9);sFe=n(fBe,"STRONG",{});var cCt=s(sFe);A1r=r(cCt,"tapas"),cCt.forEach(t),L1r=r(fBe," \u2014 "),pH=n(fBe,"A",{href:!0});var fCt=s(pH);y1r=r(fCt,"TFTapasForMaskedLM"),fCt.forEach(t),x1r=r(fBe," (TAPAS model)"),fBe.forEach(t),$1r=i(le),S9=n(le,"LI",{});var mBe=s(S9);lFe=n(mBe,"STRONG",{});var mCt=s(lFe);k1r=r(mCt,"transfo-xl"),mCt.forEach(t),S1r=r(mBe," \u2014 "),_H=n(mBe,"A",{href:!0});var gCt=s(_H);R1r=r(gCt,"TFTransfoXLLMHeadModel"),gCt.forEach(t),P1r=r(mBe," (Transformer-XL model)"),mBe.forEach(t),B1r=i(le),R9=n(le,"LI",{});var gBe=s(R9);iFe=n(gBe,"STRONG",{});var hCt=s(iFe);I1r=r(hCt,"vit_mae"),hCt.forEach(t),N1r=r(gBe," \u2014 "),uH=n(gBe,"A",{href:!0});var pCt=s(uH);q1r=r(pCt,"TFViTMAEForPreTraining"),pCt.forEach(t),j1r=r(gBe," (ViTMAE model)"),gBe.forEach(t),D1r=i(le),P9=n(le,"LI",{});var hBe=s(P9);dFe=n(hBe,"STRONG",{});var _Ct=s(dFe);G1r=r(_Ct,"xlm"),_Ct.forEach(t),O1r=r(hBe," \u2014 "),bH=n(hBe,"A",{href:!0});var uCt=s(bH);V1r=r(uCt,"TFXLMWithLMHeadModel"),uCt.forEach(t),X1r=r(hBe," (XLM model)"),hBe.forEach(t),z1r=i(le),B9=n(le,"LI",{});var pBe=s(B9);cFe=n(pBe,"STRONG",{});var bCt=s(cFe);W1r=r(bCt,"xlm-roberta"),bCt.forEach(t),Q1r=r(pBe," \u2014 "),vH=n(pBe,"A",{href:!0});var vCt=s(vH);H1r=r(vCt,"TFXLMRobertaForMaskedLM"),vCt.forEach(t),U1r=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),J1r=i(le),I9=n(le,"LI",{});var _Be=s(I9);fFe=n(_Be,"STRONG",{});var FCt=s(fFe);Y1r=r(FCt,"xlnet"),FCt.forEach(t),K1r=r(_Be," \u2014 "),FH=n(_Be,"A",{href:!0});var TCt=s(FH);Z1r=r(TCt,"TFXLNetLMHeadModel"),TCt.forEach(t),ebr=r(_Be," (XLNet model)"),_Be.forEach(t),le.forEach(t),obr=i(bl),T(N9.$$.fragment,bl),bl.forEach(t),ul.forEach(t),oGe=i(f),Ud=n(f,"H2",{class:!0});var lVe=s(Ud);q9=n(lVe,"A",{id:!0,class:!0,href:!0});var MCt=s(q9);mFe=n(MCt,"SPAN",{});var ECt=s(mFe);T(Vy.$$.fragment,ECt),ECt.forEach(t),MCt.forEach(t),rbr=i(lVe),gFe=n(lVe,"SPAN",{});var CCt=s(gFe);tbr=r(CCt,"TFAutoModelForCausalLM"),CCt.forEach(t),lVe.forEach(t),rGe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(Xy.$$.fragment,vl),abr=i(vl),Jd=n(vl,"P",{});var moe=s(Jd);nbr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TH=n(moe,"A",{href:!0});var wCt=s(TH);sbr=r(wCt,"from_pretrained()"),wCt.forEach(t),lbr=r(moe," class method or the "),MH=n(moe,"A",{href:!0});var ACt=s(MH);ibr=r(ACt,"from_config()"),ACt.forEach(t),dbr=r(moe,` class
method.`),moe.forEach(t),cbr=i(vl),zy=n(vl,"P",{});var iVe=s(zy);fbr=r(iVe,"This class cannot be instantiated directly using "),hFe=n(iVe,"CODE",{});var LCt=s(hFe);mbr=r(LCt,"__init__()"),LCt.forEach(t),gbr=r(iVe," (throws an error)."),iVe.forEach(t),hbr=i(vl),xt=n(vl,"DIV",{class:!0});var Z0=s(xt);T(Wy.$$.fragment,Z0),pbr=i(Z0),pFe=n(Z0,"P",{});var yCt=s(pFe);_br=r(yCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yCt.forEach(t),ubr=i(Z0),Yd=n(Z0,"P",{});var goe=s(Yd);bbr=r(goe,`Note:
Loading a model from its configuration file does `),_Fe=n(goe,"STRONG",{});var xCt=s(_Fe);vbr=r(xCt,"not"),xCt.forEach(t),Fbr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(goe,"A",{href:!0});var $Ct=s(EH);Tbr=r($Ct,"from_pretrained()"),$Ct.forEach(t),Mbr=r(goe," to load the model weights."),goe.forEach(t),Ebr=i(Z0),T(j9.$$.fragment,Z0),Z0.forEach(t),Cbr=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(Qy.$$.fragment,Fl),wbr=i(Fl),uFe=n(Fl,"P",{});var kCt=s(uFe);Abr=r(kCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kCt.forEach(t),Lbr=i(Fl),en=n(Fl,"P",{});var ew=s(en);ybr=r(ew,"The model class to instantiate is selected based on the "),bFe=n(ew,"CODE",{});var SCt=s(bFe);xbr=r(SCt,"model_type"),SCt.forEach(t),$br=r(ew,` property of the config object (either
passed as an argument or loaded from `),vFe=n(ew,"CODE",{});var RCt=s(vFe);kbr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),Sbr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(ew,"CODE",{});var PCt=s(FFe);Rbr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),Pbr=r(ew,":"),ew.forEach(t),Bbr=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);D9=n(Ce,"LI",{});var uBe=s(D9);TFe=n(uBe,"STRONG",{});var BCt=s(TFe);Ibr=r(BCt,"bert"),BCt.forEach(t),Nbr=r(uBe," \u2014 "),CH=n(uBe,"A",{href:!0});var ICt=s(CH);qbr=r(ICt,"TFBertLMHeadModel"),ICt.forEach(t),jbr=r(uBe," (BERT model)"),uBe.forEach(t),Dbr=i(Ce),G9=n(Ce,"LI",{});var bBe=s(G9);MFe=n(bBe,"STRONG",{});var NCt=s(MFe);Gbr=r(NCt,"camembert"),NCt.forEach(t),Obr=r(bBe," \u2014 "),wH=n(bBe,"A",{href:!0});var qCt=s(wH);Vbr=r(qCt,"TFCamembertForCausalLM"),qCt.forEach(t),Xbr=r(bBe," (CamemBERT model)"),bBe.forEach(t),zbr=i(Ce),O9=n(Ce,"LI",{});var vBe=s(O9);EFe=n(vBe,"STRONG",{});var jCt=s(EFe);Wbr=r(jCt,"ctrl"),jCt.forEach(t),Qbr=r(vBe," \u2014 "),AH=n(vBe,"A",{href:!0});var DCt=s(AH);Hbr=r(DCt,"TFCTRLLMHeadModel"),DCt.forEach(t),Ubr=r(vBe," (CTRL model)"),vBe.forEach(t),Jbr=i(Ce),V9=n(Ce,"LI",{});var FBe=s(V9);CFe=n(FBe,"STRONG",{});var GCt=s(CFe);Ybr=r(GCt,"gpt2"),GCt.forEach(t),Kbr=r(FBe," \u2014 "),LH=n(FBe,"A",{href:!0});var OCt=s(LH);Zbr=r(OCt,"TFGPT2LMHeadModel"),OCt.forEach(t),evr=r(FBe," (OpenAI GPT-2 model)"),FBe.forEach(t),ovr=i(Ce),X9=n(Ce,"LI",{});var TBe=s(X9);wFe=n(TBe,"STRONG",{});var VCt=s(wFe);rvr=r(VCt,"gptj"),VCt.forEach(t),tvr=r(TBe," \u2014 "),yH=n(TBe,"A",{href:!0});var XCt=s(yH);avr=r(XCt,"TFGPTJForCausalLM"),XCt.forEach(t),nvr=r(TBe," (GPT-J model)"),TBe.forEach(t),svr=i(Ce),z9=n(Ce,"LI",{});var MBe=s(z9);AFe=n(MBe,"STRONG",{});var zCt=s(AFe);lvr=r(zCt,"openai-gpt"),zCt.forEach(t),ivr=r(MBe," \u2014 "),xH=n(MBe,"A",{href:!0});var WCt=s(xH);dvr=r(WCt,"TFOpenAIGPTLMHeadModel"),WCt.forEach(t),cvr=r(MBe," (OpenAI GPT model)"),MBe.forEach(t),fvr=i(Ce),W9=n(Ce,"LI",{});var EBe=s(W9);LFe=n(EBe,"STRONG",{});var QCt=s(LFe);mvr=r(QCt,"opt"),QCt.forEach(t),gvr=r(EBe," \u2014 "),$H=n(EBe,"A",{href:!0});var HCt=s($H);hvr=r(HCt,"TFOPTForCausalLM"),HCt.forEach(t),pvr=r(EBe," (OPT model)"),EBe.forEach(t),_vr=i(Ce),Q9=n(Ce,"LI",{});var CBe=s(Q9);yFe=n(CBe,"STRONG",{});var UCt=s(yFe);uvr=r(UCt,"rembert"),UCt.forEach(t),bvr=r(CBe," \u2014 "),kH=n(CBe,"A",{href:!0});var JCt=s(kH);vvr=r(JCt,"TFRemBertForCausalLM"),JCt.forEach(t),Fvr=r(CBe," (RemBERT model)"),CBe.forEach(t),Tvr=i(Ce),H9=n(Ce,"LI",{});var wBe=s(H9);xFe=n(wBe,"STRONG",{});var YCt=s(xFe);Mvr=r(YCt,"roberta"),YCt.forEach(t),Evr=r(wBe," \u2014 "),SH=n(wBe,"A",{href:!0});var KCt=s(SH);Cvr=r(KCt,"TFRobertaForCausalLM"),KCt.forEach(t),wvr=r(wBe," (RoBERTa model)"),wBe.forEach(t),Avr=i(Ce),U9=n(Ce,"LI",{});var ABe=s(U9);$Fe=n(ABe,"STRONG",{});var ZCt=s($Fe);Lvr=r(ZCt,"roformer"),ZCt.forEach(t),yvr=r(ABe," \u2014 "),RH=n(ABe,"A",{href:!0});var e5t=s(RH);xvr=r(e5t,"TFRoFormerForCausalLM"),e5t.forEach(t),$vr=r(ABe," (RoFormer model)"),ABe.forEach(t),kvr=i(Ce),J9=n(Ce,"LI",{});var LBe=s(J9);kFe=n(LBe,"STRONG",{});var o5t=s(kFe);Svr=r(o5t,"transfo-xl"),o5t.forEach(t),Rvr=r(LBe," \u2014 "),PH=n(LBe,"A",{href:!0});var r5t=s(PH);Pvr=r(r5t,"TFTransfoXLLMHeadModel"),r5t.forEach(t),Bvr=r(LBe," (Transformer-XL model)"),LBe.forEach(t),Ivr=i(Ce),Y9=n(Ce,"LI",{});var yBe=s(Y9);SFe=n(yBe,"STRONG",{});var t5t=s(SFe);Nvr=r(t5t,"xlm"),t5t.forEach(t),qvr=r(yBe," \u2014 "),BH=n(yBe,"A",{href:!0});var a5t=s(BH);jvr=r(a5t,"TFXLMWithLMHeadModel"),a5t.forEach(t),Dvr=r(yBe," (XLM model)"),yBe.forEach(t),Gvr=i(Ce),K9=n(Ce,"LI",{});var xBe=s(K9);RFe=n(xBe,"STRONG",{});var n5t=s(RFe);Ovr=r(n5t,"xlnet"),n5t.forEach(t),Vvr=r(xBe," \u2014 "),IH=n(xBe,"A",{href:!0});var s5t=s(IH);Xvr=r(s5t,"TFXLNetLMHeadModel"),s5t.forEach(t),zvr=r(xBe," (XLNet model)"),xBe.forEach(t),Ce.forEach(t),Wvr=i(Fl),T(Z9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),tGe=i(f),Kd=n(f,"H2",{class:!0});var dVe=s(Kd);eM=n(dVe,"A",{id:!0,class:!0,href:!0});var l5t=s(eM);PFe=n(l5t,"SPAN",{});var i5t=s(PFe);T(Hy.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),Qvr=i(dVe),BFe=n(dVe,"SPAN",{});var d5t=s(BFe);Hvr=r(d5t,"TFAutoModelForImageClassification"),d5t.forEach(t),dVe.forEach(t),aGe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(Uy.$$.fragment,Tl),Uvr=i(Tl),Zd=n(Tl,"P",{});var hoe=s(Zd);Jvr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NH=n(hoe,"A",{href:!0});var c5t=s(NH);Yvr=r(c5t,"from_pretrained()"),c5t.forEach(t),Kvr=r(hoe," class method or the "),qH=n(hoe,"A",{href:!0});var f5t=s(qH);Zvr=r(f5t,"from_config()"),f5t.forEach(t),eFr=r(hoe,` class
method.`),hoe.forEach(t),oFr=i(Tl),Jy=n(Tl,"P",{});var cVe=s(Jy);rFr=r(cVe,"This class cannot be instantiated directly using "),IFe=n(cVe,"CODE",{});var m5t=s(IFe);tFr=r(m5t,"__init__()"),m5t.forEach(t),aFr=r(cVe," (throws an error)."),cVe.forEach(t),nFr=i(Tl),$t=n(Tl,"DIV",{class:!0});var ow=s($t);T(Yy.$$.fragment,ow),sFr=i(ow),NFe=n(ow,"P",{});var g5t=s(NFe);lFr=r(g5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g5t.forEach(t),iFr=i(ow),ec=n(ow,"P",{});var poe=s(ec);dFr=r(poe,`Note:
Loading a model from its configuration file does `),qFe=n(poe,"STRONG",{});var h5t=s(qFe);cFr=r(h5t,"not"),h5t.forEach(t),fFr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(poe,"A",{href:!0});var p5t=s(jH);mFr=r(p5t,"from_pretrained()"),p5t.forEach(t),gFr=r(poe," to load the model weights."),poe.forEach(t),hFr=i(ow),T(oM.$$.fragment,ow),ow.forEach(t),pFr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(Ky.$$.fragment,Ml),_Fr=i(Ml),jFe=n(Ml,"P",{});var _5t=s(jFe);uFr=r(_5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_5t.forEach(t),bFr=i(Ml),on=n(Ml,"P",{});var rw=s(on);vFr=r(rw,"The model class to instantiate is selected based on the "),DFe=n(rw,"CODE",{});var u5t=s(DFe);FFr=r(u5t,"model_type"),u5t.forEach(t),TFr=r(rw,` property of the config object (either
passed as an argument or loaded from `),GFe=n(rw,"CODE",{});var b5t=s(GFe);MFr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),EFr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(rw,"CODE",{});var v5t=s(OFe);CFr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),wFr=r(rw,":"),rw.forEach(t),AFr=i(Ml),rn=n(Ml,"UL",{});var tw=s(rn);rM=n(tw,"LI",{});var $Be=s(rM);VFe=n($Be,"STRONG",{});var F5t=s(VFe);LFr=r(F5t,"convnext"),F5t.forEach(t),yFr=r($Be," \u2014 "),DH=n($Be,"A",{href:!0});var T5t=s(DH);xFr=r(T5t,"TFConvNextForImageClassification"),T5t.forEach(t),$Fr=r($Be," (ConvNeXT model)"),$Be.forEach(t),kFr=i(tw),tM=n(tw,"LI",{});var kBe=s(tM);XFe=n(kBe,"STRONG",{});var M5t=s(XFe);SFr=r(M5t,"data2vec-vision"),M5t.forEach(t),RFr=r(kBe," \u2014 "),GH=n(kBe,"A",{href:!0});var E5t=s(GH);PFr=r(E5t,"TFData2VecVisionForImageClassification"),E5t.forEach(t),BFr=r(kBe," (Data2VecVision model)"),kBe.forEach(t),IFr=i(tw),aM=n(tw,"LI",{});var SBe=s(aM);zFe=n(SBe,"STRONG",{});var C5t=s(zFe);NFr=r(C5t,"swin"),C5t.forEach(t),qFr=r(SBe," \u2014 "),OH=n(SBe,"A",{href:!0});var w5t=s(OH);jFr=r(w5t,"TFSwinForImageClassification"),w5t.forEach(t),DFr=r(SBe," (Swin Transformer model)"),SBe.forEach(t),GFr=i(tw),nM=n(tw,"LI",{});var RBe=s(nM);WFe=n(RBe,"STRONG",{});var A5t=s(WFe);OFr=r(A5t,"vit"),A5t.forEach(t),VFr=r(RBe," \u2014 "),VH=n(RBe,"A",{href:!0});var L5t=s(VH);XFr=r(L5t,"TFViTForImageClassification"),L5t.forEach(t),zFr=r(RBe," (ViT model)"),RBe.forEach(t),tw.forEach(t),WFr=i(Ml),T(sM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),nGe=i(f),oc=n(f,"H2",{class:!0});var fVe=s(oc);lM=n(fVe,"A",{id:!0,class:!0,href:!0});var y5t=s(lM);QFe=n(y5t,"SPAN",{});var x5t=s(QFe);T(Zy.$$.fragment,x5t),x5t.forEach(t),y5t.forEach(t),QFr=i(fVe),HFe=n(fVe,"SPAN",{});var $5t=s(HFe);HFr=r($5t,"TFAutoModelForMaskedLM"),$5t.forEach(t),fVe.forEach(t),sGe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(e8.$$.fragment,El),UFr=i(El),rc=n(El,"P",{});var _oe=s(rc);JFr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XH=n(_oe,"A",{href:!0});var k5t=s(XH);YFr=r(k5t,"from_pretrained()"),k5t.forEach(t),KFr=r(_oe," class method or the "),zH=n(_oe,"A",{href:!0});var S5t=s(zH);ZFr=r(S5t,"from_config()"),S5t.forEach(t),e6r=r(_oe,` class
method.`),_oe.forEach(t),o6r=i(El),o8=n(El,"P",{});var mVe=s(o8);r6r=r(mVe,"This class cannot be instantiated directly using "),UFe=n(mVe,"CODE",{});var R5t=s(UFe);t6r=r(R5t,"__init__()"),R5t.forEach(t),a6r=r(mVe," (throws an error)."),mVe.forEach(t),n6r=i(El),kt=n(El,"DIV",{class:!0});var aw=s(kt);T(r8.$$.fragment,aw),s6r=i(aw),JFe=n(aw,"P",{});var P5t=s(JFe);l6r=r(P5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5t.forEach(t),i6r=i(aw),tc=n(aw,"P",{});var uoe=s(tc);d6r=r(uoe,`Note:
Loading a model from its configuration file does `),YFe=n(uoe,"STRONG",{});var B5t=s(YFe);c6r=r(B5t,"not"),B5t.forEach(t),f6r=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(uoe,"A",{href:!0});var I5t=s(WH);m6r=r(I5t,"from_pretrained()"),I5t.forEach(t),g6r=r(uoe," to load the model weights."),uoe.forEach(t),h6r=i(aw),T(iM.$$.fragment,aw),aw.forEach(t),p6r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(t8.$$.fragment,Cl),_6r=i(Cl),KFe=n(Cl,"P",{});var N5t=s(KFe);u6r=r(N5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N5t.forEach(t),b6r=i(Cl),tn=n(Cl,"P",{});var nw=s(tn);v6r=r(nw,"The model class to instantiate is selected based on the "),ZFe=n(nw,"CODE",{});var q5t=s(ZFe);F6r=r(q5t,"model_type"),q5t.forEach(t),T6r=r(nw,` property of the config object (either
passed as an argument or loaded from `),e6e=n(nw,"CODE",{});var j5t=s(e6e);M6r=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),E6r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(nw,"CODE",{});var D5t=s(o6e);C6r=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),w6r=r(nw,":"),nw.forEach(t),A6r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);dM=n(fe,"LI",{});var PBe=s(dM);r6e=n(PBe,"STRONG",{});var G5t=s(r6e);L6r=r(G5t,"albert"),G5t.forEach(t),y6r=r(PBe," \u2014 "),QH=n(PBe,"A",{href:!0});var O5t=s(QH);x6r=r(O5t,"TFAlbertForMaskedLM"),O5t.forEach(t),$6r=r(PBe," (ALBERT model)"),PBe.forEach(t),k6r=i(fe),cM=n(fe,"LI",{});var BBe=s(cM);t6e=n(BBe,"STRONG",{});var V5t=s(t6e);S6r=r(V5t,"bert"),V5t.forEach(t),R6r=r(BBe," \u2014 "),HH=n(BBe,"A",{href:!0});var X5t=s(HH);P6r=r(X5t,"TFBertForMaskedLM"),X5t.forEach(t),B6r=r(BBe," (BERT model)"),BBe.forEach(t),I6r=i(fe),fM=n(fe,"LI",{});var IBe=s(fM);a6e=n(IBe,"STRONG",{});var z5t=s(a6e);N6r=r(z5t,"camembert"),z5t.forEach(t),q6r=r(IBe," \u2014 "),UH=n(IBe,"A",{href:!0});var W5t=s(UH);j6r=r(W5t,"TFCamembertForMaskedLM"),W5t.forEach(t),D6r=r(IBe," (CamemBERT model)"),IBe.forEach(t),G6r=i(fe),mM=n(fe,"LI",{});var NBe=s(mM);n6e=n(NBe,"STRONG",{});var Q5t=s(n6e);O6r=r(Q5t,"convbert"),Q5t.forEach(t),V6r=r(NBe," \u2014 "),JH=n(NBe,"A",{href:!0});var H5t=s(JH);X6r=r(H5t,"TFConvBertForMaskedLM"),H5t.forEach(t),z6r=r(NBe," (ConvBERT model)"),NBe.forEach(t),W6r=i(fe),gM=n(fe,"LI",{});var qBe=s(gM);s6e=n(qBe,"STRONG",{});var U5t=s(s6e);Q6r=r(U5t,"deberta"),U5t.forEach(t),H6r=r(qBe," \u2014 "),YH=n(qBe,"A",{href:!0});var J5t=s(YH);U6r=r(J5t,"TFDebertaForMaskedLM"),J5t.forEach(t),J6r=r(qBe," (DeBERTa model)"),qBe.forEach(t),Y6r=i(fe),hM=n(fe,"LI",{});var jBe=s(hM);l6e=n(jBe,"STRONG",{});var Y5t=s(l6e);K6r=r(Y5t,"deberta-v2"),Y5t.forEach(t),Z6r=r(jBe," \u2014 "),KH=n(jBe,"A",{href:!0});var K5t=s(KH);eTr=r(K5t,"TFDebertaV2ForMaskedLM"),K5t.forEach(t),oTr=r(jBe," (DeBERTa-v2 model)"),jBe.forEach(t),rTr=i(fe),pM=n(fe,"LI",{});var DBe=s(pM);i6e=n(DBe,"STRONG",{});var Z5t=s(i6e);tTr=r(Z5t,"distilbert"),Z5t.forEach(t),aTr=r(DBe," \u2014 "),ZH=n(DBe,"A",{href:!0});var e3t=s(ZH);nTr=r(e3t,"TFDistilBertForMaskedLM"),e3t.forEach(t),sTr=r(DBe," (DistilBERT model)"),DBe.forEach(t),lTr=i(fe),_M=n(fe,"LI",{});var GBe=s(_M);d6e=n(GBe,"STRONG",{});var o3t=s(d6e);iTr=r(o3t,"electra"),o3t.forEach(t),dTr=r(GBe," \u2014 "),eU=n(GBe,"A",{href:!0});var r3t=s(eU);cTr=r(r3t,"TFElectraForMaskedLM"),r3t.forEach(t),fTr=r(GBe," (ELECTRA model)"),GBe.forEach(t),mTr=i(fe),uM=n(fe,"LI",{});var OBe=s(uM);c6e=n(OBe,"STRONG",{});var t3t=s(c6e);gTr=r(t3t,"flaubert"),t3t.forEach(t),hTr=r(OBe," \u2014 "),oU=n(OBe,"A",{href:!0});var a3t=s(oU);pTr=r(a3t,"TFFlaubertWithLMHeadModel"),a3t.forEach(t),_Tr=r(OBe," (FlauBERT model)"),OBe.forEach(t),uTr=i(fe),bM=n(fe,"LI",{});var VBe=s(bM);f6e=n(VBe,"STRONG",{});var n3t=s(f6e);bTr=r(n3t,"funnel"),n3t.forEach(t),vTr=r(VBe," \u2014 "),rU=n(VBe,"A",{href:!0});var s3t=s(rU);FTr=r(s3t,"TFFunnelForMaskedLM"),s3t.forEach(t),TTr=r(VBe," (Funnel Transformer model)"),VBe.forEach(t),MTr=i(fe),vM=n(fe,"LI",{});var XBe=s(vM);m6e=n(XBe,"STRONG",{});var l3t=s(m6e);ETr=r(l3t,"layoutlm"),l3t.forEach(t),CTr=r(XBe," \u2014 "),tU=n(XBe,"A",{href:!0});var i3t=s(tU);wTr=r(i3t,"TFLayoutLMForMaskedLM"),i3t.forEach(t),ATr=r(XBe," (LayoutLM model)"),XBe.forEach(t),LTr=i(fe),FM=n(fe,"LI",{});var zBe=s(FM);g6e=n(zBe,"STRONG",{});var d3t=s(g6e);yTr=r(d3t,"longformer"),d3t.forEach(t),xTr=r(zBe," \u2014 "),aU=n(zBe,"A",{href:!0});var c3t=s(aU);$Tr=r(c3t,"TFLongformerForMaskedLM"),c3t.forEach(t),kTr=r(zBe," (Longformer model)"),zBe.forEach(t),STr=i(fe),TM=n(fe,"LI",{});var WBe=s(TM);h6e=n(WBe,"STRONG",{});var f3t=s(h6e);RTr=r(f3t,"mobilebert"),f3t.forEach(t),PTr=r(WBe," \u2014 "),nU=n(WBe,"A",{href:!0});var m3t=s(nU);BTr=r(m3t,"TFMobileBertForMaskedLM"),m3t.forEach(t),ITr=r(WBe," (MobileBERT model)"),WBe.forEach(t),NTr=i(fe),MM=n(fe,"LI",{});var QBe=s(MM);p6e=n(QBe,"STRONG",{});var g3t=s(p6e);qTr=r(g3t,"mpnet"),g3t.forEach(t),jTr=r(QBe," \u2014 "),sU=n(QBe,"A",{href:!0});var h3t=s(sU);DTr=r(h3t,"TFMPNetForMaskedLM"),h3t.forEach(t),GTr=r(QBe," (MPNet model)"),QBe.forEach(t),OTr=i(fe),EM=n(fe,"LI",{});var HBe=s(EM);_6e=n(HBe,"STRONG",{});var p3t=s(_6e);VTr=r(p3t,"rembert"),p3t.forEach(t),XTr=r(HBe," \u2014 "),lU=n(HBe,"A",{href:!0});var _3t=s(lU);zTr=r(_3t,"TFRemBertForMaskedLM"),_3t.forEach(t),WTr=r(HBe," (RemBERT model)"),HBe.forEach(t),QTr=i(fe),CM=n(fe,"LI",{});var UBe=s(CM);u6e=n(UBe,"STRONG",{});var u3t=s(u6e);HTr=r(u3t,"roberta"),u3t.forEach(t),UTr=r(UBe," \u2014 "),iU=n(UBe,"A",{href:!0});var b3t=s(iU);JTr=r(b3t,"TFRobertaForMaskedLM"),b3t.forEach(t),YTr=r(UBe," (RoBERTa model)"),UBe.forEach(t),KTr=i(fe),wM=n(fe,"LI",{});var JBe=s(wM);b6e=n(JBe,"STRONG",{});var v3t=s(b6e);ZTr=r(v3t,"roformer"),v3t.forEach(t),e7r=r(JBe," \u2014 "),dU=n(JBe,"A",{href:!0});var F3t=s(dU);o7r=r(F3t,"TFRoFormerForMaskedLM"),F3t.forEach(t),r7r=r(JBe," (RoFormer model)"),JBe.forEach(t),t7r=i(fe),AM=n(fe,"LI",{});var YBe=s(AM);v6e=n(YBe,"STRONG",{});var T3t=s(v6e);a7r=r(T3t,"tapas"),T3t.forEach(t),n7r=r(YBe," \u2014 "),cU=n(YBe,"A",{href:!0});var M3t=s(cU);s7r=r(M3t,"TFTapasForMaskedLM"),M3t.forEach(t),l7r=r(YBe," (TAPAS model)"),YBe.forEach(t),i7r=i(fe),LM=n(fe,"LI",{});var KBe=s(LM);F6e=n(KBe,"STRONG",{});var E3t=s(F6e);d7r=r(E3t,"xlm"),E3t.forEach(t),c7r=r(KBe," \u2014 "),fU=n(KBe,"A",{href:!0});var C3t=s(fU);f7r=r(C3t,"TFXLMWithLMHeadModel"),C3t.forEach(t),m7r=r(KBe," (XLM model)"),KBe.forEach(t),g7r=i(fe),yM=n(fe,"LI",{});var ZBe=s(yM);T6e=n(ZBe,"STRONG",{});var w3t=s(T6e);h7r=r(w3t,"xlm-roberta"),w3t.forEach(t),p7r=r(ZBe," \u2014 "),mU=n(ZBe,"A",{href:!0});var A3t=s(mU);_7r=r(A3t,"TFXLMRobertaForMaskedLM"),A3t.forEach(t),u7r=r(ZBe," (XLM-RoBERTa model)"),ZBe.forEach(t),fe.forEach(t),b7r=i(Cl),T(xM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),lGe=i(f),ac=n(f,"H2",{class:!0});var gVe=s(ac);$M=n(gVe,"A",{id:!0,class:!0,href:!0});var L3t=s($M);M6e=n(L3t,"SPAN",{});var y3t=s(M6e);T(a8.$$.fragment,y3t),y3t.forEach(t),L3t.forEach(t),v7r=i(gVe),E6e=n(gVe,"SPAN",{});var x3t=s(E6e);F7r=r(x3t,"TFAutoModelForSeq2SeqLM"),x3t.forEach(t),gVe.forEach(t),iGe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(n8.$$.fragment,wl),T7r=i(wl),nc=n(wl,"P",{});var boe=s(nc);M7r=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gU=n(boe,"A",{href:!0});var $3t=s(gU);E7r=r($3t,"from_pretrained()"),$3t.forEach(t),C7r=r(boe," class method or the "),hU=n(boe,"A",{href:!0});var k3t=s(hU);w7r=r(k3t,"from_config()"),k3t.forEach(t),A7r=r(boe,` class
method.`),boe.forEach(t),L7r=i(wl),s8=n(wl,"P",{});var hVe=s(s8);y7r=r(hVe,"This class cannot be instantiated directly using "),C6e=n(hVe,"CODE",{});var S3t=s(C6e);x7r=r(S3t,"__init__()"),S3t.forEach(t),$7r=r(hVe," (throws an error)."),hVe.forEach(t),k7r=i(wl),St=n(wl,"DIV",{class:!0});var sw=s(St);T(l8.$$.fragment,sw),S7r=i(sw),w6e=n(sw,"P",{});var R3t=s(w6e);R7r=r(R3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R3t.forEach(t),P7r=i(sw),sc=n(sw,"P",{});var voe=s(sc);B7r=r(voe,`Note:
Loading a model from its configuration file does `),A6e=n(voe,"STRONG",{});var P3t=s(A6e);I7r=r(P3t,"not"),P3t.forEach(t),N7r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(voe,"A",{href:!0});var B3t=s(pU);q7r=r(B3t,"from_pretrained()"),B3t.forEach(t),j7r=r(voe," to load the model weights."),voe.forEach(t),D7r=i(sw),T(kM.$$.fragment,sw),sw.forEach(t),G7r=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(i8.$$.fragment,Al),O7r=i(Al),L6e=n(Al,"P",{});var I3t=s(L6e);V7r=r(I3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I3t.forEach(t),X7r=i(Al),an=n(Al,"P",{});var lw=s(an);z7r=r(lw,"The model class to instantiate is selected based on the "),y6e=n(lw,"CODE",{});var N3t=s(y6e);W7r=r(N3t,"model_type"),N3t.forEach(t),Q7r=r(lw,` property of the config object (either
passed as an argument or loaded from `),x6e=n(lw,"CODE",{});var q3t=s(x6e);H7r=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),U7r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(lw,"CODE",{});var j3t=s($6e);J7r=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),Y7r=r(lw,":"),lw.forEach(t),K7r=i(Al),ye=n(Al,"UL",{});var Ie=s(ye);SM=n(Ie,"LI",{});var eIe=s(SM);k6e=n(eIe,"STRONG",{});var D3t=s(k6e);Z7r=r(D3t,"bart"),D3t.forEach(t),e9r=r(eIe," \u2014 "),_U=n(eIe,"A",{href:!0});var G3t=s(_U);o9r=r(G3t,"TFBartForConditionalGeneration"),G3t.forEach(t),r9r=r(eIe," (BART model)"),eIe.forEach(t),t9r=i(Ie),RM=n(Ie,"LI",{});var oIe=s(RM);S6e=n(oIe,"STRONG",{});var O3t=s(S6e);a9r=r(O3t,"blenderbot"),O3t.forEach(t),n9r=r(oIe," \u2014 "),uU=n(oIe,"A",{href:!0});var V3t=s(uU);s9r=r(V3t,"TFBlenderbotForConditionalGeneration"),V3t.forEach(t),l9r=r(oIe," (Blenderbot model)"),oIe.forEach(t),i9r=i(Ie),PM=n(Ie,"LI",{});var rIe=s(PM);R6e=n(rIe,"STRONG",{});var X3t=s(R6e);d9r=r(X3t,"blenderbot-small"),X3t.forEach(t),c9r=r(rIe," \u2014 "),bU=n(rIe,"A",{href:!0});var z3t=s(bU);f9r=r(z3t,"TFBlenderbotSmallForConditionalGeneration"),z3t.forEach(t),m9r=r(rIe," (BlenderbotSmall model)"),rIe.forEach(t),g9r=i(Ie),BM=n(Ie,"LI",{});var tIe=s(BM);P6e=n(tIe,"STRONG",{});var W3t=s(P6e);h9r=r(W3t,"encoder-decoder"),W3t.forEach(t),p9r=r(tIe," \u2014 "),vU=n(tIe,"A",{href:!0});var Q3t=s(vU);_9r=r(Q3t,"TFEncoderDecoderModel"),Q3t.forEach(t),u9r=r(tIe," (Encoder decoder model)"),tIe.forEach(t),b9r=i(Ie),IM=n(Ie,"LI",{});var aIe=s(IM);B6e=n(aIe,"STRONG",{});var H3t=s(B6e);v9r=r(H3t,"led"),H3t.forEach(t),F9r=r(aIe," \u2014 "),FU=n(aIe,"A",{href:!0});var U3t=s(FU);T9r=r(U3t,"TFLEDForConditionalGeneration"),U3t.forEach(t),M9r=r(aIe," (LED model)"),aIe.forEach(t),E9r=i(Ie),NM=n(Ie,"LI",{});var nIe=s(NM);I6e=n(nIe,"STRONG",{});var J3t=s(I6e);C9r=r(J3t,"marian"),J3t.forEach(t),w9r=r(nIe," \u2014 "),TU=n(nIe,"A",{href:!0});var Y3t=s(TU);A9r=r(Y3t,"TFMarianMTModel"),Y3t.forEach(t),L9r=r(nIe," (Marian model)"),nIe.forEach(t),y9r=i(Ie),qM=n(Ie,"LI",{});var sIe=s(qM);N6e=n(sIe,"STRONG",{});var K3t=s(N6e);x9r=r(K3t,"mbart"),K3t.forEach(t),$9r=r(sIe," \u2014 "),MU=n(sIe,"A",{href:!0});var Z3t=s(MU);k9r=r(Z3t,"TFMBartForConditionalGeneration"),Z3t.forEach(t),S9r=r(sIe," (mBART model)"),sIe.forEach(t),R9r=i(Ie),jM=n(Ie,"LI",{});var lIe=s(jM);q6e=n(lIe,"STRONG",{});var e0t=s(q6e);P9r=r(e0t,"mt5"),e0t.forEach(t),B9r=r(lIe," \u2014 "),EU=n(lIe,"A",{href:!0});var o0t=s(EU);I9r=r(o0t,"TFMT5ForConditionalGeneration"),o0t.forEach(t),N9r=r(lIe," (MT5 model)"),lIe.forEach(t),q9r=i(Ie),DM=n(Ie,"LI",{});var iIe=s(DM);j6e=n(iIe,"STRONG",{});var r0t=s(j6e);j9r=r(r0t,"pegasus"),r0t.forEach(t),D9r=r(iIe," \u2014 "),CU=n(iIe,"A",{href:!0});var t0t=s(CU);G9r=r(t0t,"TFPegasusForConditionalGeneration"),t0t.forEach(t),O9r=r(iIe," (Pegasus model)"),iIe.forEach(t),V9r=i(Ie),GM=n(Ie,"LI",{});var dIe=s(GM);D6e=n(dIe,"STRONG",{});var a0t=s(D6e);X9r=r(a0t,"t5"),a0t.forEach(t),z9r=r(dIe," \u2014 "),wU=n(dIe,"A",{href:!0});var n0t=s(wU);W9r=r(n0t,"TFT5ForConditionalGeneration"),n0t.forEach(t),Q9r=r(dIe," (T5 model)"),dIe.forEach(t),Ie.forEach(t),H9r=i(Al),T(OM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),dGe=i(f),lc=n(f,"H2",{class:!0});var pVe=s(lc);VM=n(pVe,"A",{id:!0,class:!0,href:!0});var s0t=s(VM);G6e=n(s0t,"SPAN",{});var l0t=s(G6e);T(d8.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),U9r=i(pVe),O6e=n(pVe,"SPAN",{});var i0t=s(O6e);J9r=r(i0t,"TFAutoModelForSequenceClassification"),i0t.forEach(t),pVe.forEach(t),cGe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(c8.$$.fragment,Ll),Y9r=i(Ll),ic=n(Ll,"P",{});var Foe=s(ic);K9r=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AU=n(Foe,"A",{href:!0});var d0t=s(AU);Z9r=r(d0t,"from_pretrained()"),d0t.forEach(t),eMr=r(Foe," class method or the "),LU=n(Foe,"A",{href:!0});var c0t=s(LU);oMr=r(c0t,"from_config()"),c0t.forEach(t),rMr=r(Foe,` class
method.`),Foe.forEach(t),tMr=i(Ll),f8=n(Ll,"P",{});var _Ve=s(f8);aMr=r(_Ve,"This class cannot be instantiated directly using "),V6e=n(_Ve,"CODE",{});var f0t=s(V6e);nMr=r(f0t,"__init__()"),f0t.forEach(t),sMr=r(_Ve," (throws an error)."),_Ve.forEach(t),lMr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var iw=s(Rt);T(m8.$$.fragment,iw),iMr=i(iw),X6e=n(iw,"P",{});var m0t=s(X6e);dMr=r(m0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m0t.forEach(t),cMr=i(iw),dc=n(iw,"P",{});var Toe=s(dc);fMr=r(Toe,`Note:
Loading a model from its configuration file does `),z6e=n(Toe,"STRONG",{});var g0t=s(z6e);mMr=r(g0t,"not"),g0t.forEach(t),gMr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(Toe,"A",{href:!0});var h0t=s(yU);hMr=r(h0t,"from_pretrained()"),h0t.forEach(t),pMr=r(Toe," to load the model weights."),Toe.forEach(t),_Mr=i(iw),T(XM.$$.fragment,iw),iw.forEach(t),uMr=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(g8.$$.fragment,yl),bMr=i(yl),W6e=n(yl,"P",{});var p0t=s(W6e);vMr=r(p0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p0t.forEach(t),FMr=i(yl),nn=n(yl,"P",{});var dw=s(nn);TMr=r(dw,"The model class to instantiate is selected based on the "),Q6e=n(dw,"CODE",{});var _0t=s(Q6e);MMr=r(_0t,"model_type"),_0t.forEach(t),EMr=r(dw,` property of the config object (either
passed as an argument or loaded from `),H6e=n(dw,"CODE",{});var u0t=s(H6e);CMr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),wMr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(dw,"CODE",{});var b0t=s(U6e);AMr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),LMr=r(dw,":"),dw.forEach(t),yMr=i(yl),re=n(yl,"UL",{});var ne=s(re);zM=n(ne,"LI",{});var cIe=s(zM);J6e=n(cIe,"STRONG",{});var v0t=s(J6e);xMr=r(v0t,"albert"),v0t.forEach(t),$Mr=r(cIe," \u2014 "),xU=n(cIe,"A",{href:!0});var F0t=s(xU);kMr=r(F0t,"TFAlbertForSequenceClassification"),F0t.forEach(t),SMr=r(cIe," (ALBERT model)"),cIe.forEach(t),RMr=i(ne),WM=n(ne,"LI",{});var fIe=s(WM);Y6e=n(fIe,"STRONG",{});var T0t=s(Y6e);PMr=r(T0t,"bert"),T0t.forEach(t),BMr=r(fIe," \u2014 "),$U=n(fIe,"A",{href:!0});var M0t=s($U);IMr=r(M0t,"TFBertForSequenceClassification"),M0t.forEach(t),NMr=r(fIe," (BERT model)"),fIe.forEach(t),qMr=i(ne),QM=n(ne,"LI",{});var mIe=s(QM);K6e=n(mIe,"STRONG",{});var E0t=s(K6e);jMr=r(E0t,"camembert"),E0t.forEach(t),DMr=r(mIe," \u2014 "),kU=n(mIe,"A",{href:!0});var C0t=s(kU);GMr=r(C0t,"TFCamembertForSequenceClassification"),C0t.forEach(t),OMr=r(mIe," (CamemBERT model)"),mIe.forEach(t),VMr=i(ne),HM=n(ne,"LI",{});var gIe=s(HM);Z6e=n(gIe,"STRONG",{});var w0t=s(Z6e);XMr=r(w0t,"convbert"),w0t.forEach(t),zMr=r(gIe," \u2014 "),SU=n(gIe,"A",{href:!0});var A0t=s(SU);WMr=r(A0t,"TFConvBertForSequenceClassification"),A0t.forEach(t),QMr=r(gIe," (ConvBERT model)"),gIe.forEach(t),HMr=i(ne),UM=n(ne,"LI",{});var hIe=s(UM);eTe=n(hIe,"STRONG",{});var L0t=s(eTe);UMr=r(L0t,"ctrl"),L0t.forEach(t),JMr=r(hIe," \u2014 "),RU=n(hIe,"A",{href:!0});var y0t=s(RU);YMr=r(y0t,"TFCTRLForSequenceClassification"),y0t.forEach(t),KMr=r(hIe," (CTRL model)"),hIe.forEach(t),ZMr=i(ne),JM=n(ne,"LI",{});var pIe=s(JM);oTe=n(pIe,"STRONG",{});var x0t=s(oTe);e4r=r(x0t,"deberta"),x0t.forEach(t),o4r=r(pIe," \u2014 "),PU=n(pIe,"A",{href:!0});var $0t=s(PU);r4r=r($0t,"TFDebertaForSequenceClassification"),$0t.forEach(t),t4r=r(pIe," (DeBERTa model)"),pIe.forEach(t),a4r=i(ne),YM=n(ne,"LI",{});var _Ie=s(YM);rTe=n(_Ie,"STRONG",{});var k0t=s(rTe);n4r=r(k0t,"deberta-v2"),k0t.forEach(t),s4r=r(_Ie," \u2014 "),BU=n(_Ie,"A",{href:!0});var S0t=s(BU);l4r=r(S0t,"TFDebertaV2ForSequenceClassification"),S0t.forEach(t),i4r=r(_Ie," (DeBERTa-v2 model)"),_Ie.forEach(t),d4r=i(ne),KM=n(ne,"LI",{});var uIe=s(KM);tTe=n(uIe,"STRONG",{});var R0t=s(tTe);c4r=r(R0t,"distilbert"),R0t.forEach(t),f4r=r(uIe," \u2014 "),IU=n(uIe,"A",{href:!0});var P0t=s(IU);m4r=r(P0t,"TFDistilBertForSequenceClassification"),P0t.forEach(t),g4r=r(uIe," (DistilBERT model)"),uIe.forEach(t),h4r=i(ne),ZM=n(ne,"LI",{});var bIe=s(ZM);aTe=n(bIe,"STRONG",{});var B0t=s(aTe);p4r=r(B0t,"electra"),B0t.forEach(t),_4r=r(bIe," \u2014 "),NU=n(bIe,"A",{href:!0});var I0t=s(NU);u4r=r(I0t,"TFElectraForSequenceClassification"),I0t.forEach(t),b4r=r(bIe," (ELECTRA model)"),bIe.forEach(t),v4r=i(ne),e4=n(ne,"LI",{});var vIe=s(e4);nTe=n(vIe,"STRONG",{});var N0t=s(nTe);F4r=r(N0t,"flaubert"),N0t.forEach(t),T4r=r(vIe," \u2014 "),qU=n(vIe,"A",{href:!0});var q0t=s(qU);M4r=r(q0t,"TFFlaubertForSequenceClassification"),q0t.forEach(t),E4r=r(vIe," (FlauBERT model)"),vIe.forEach(t),C4r=i(ne),o4=n(ne,"LI",{});var FIe=s(o4);sTe=n(FIe,"STRONG",{});var j0t=s(sTe);w4r=r(j0t,"funnel"),j0t.forEach(t),A4r=r(FIe," \u2014 "),jU=n(FIe,"A",{href:!0});var D0t=s(jU);L4r=r(D0t,"TFFunnelForSequenceClassification"),D0t.forEach(t),y4r=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),x4r=i(ne),r4=n(ne,"LI",{});var TIe=s(r4);lTe=n(TIe,"STRONG",{});var G0t=s(lTe);$4r=r(G0t,"gpt2"),G0t.forEach(t),k4r=r(TIe," \u2014 "),DU=n(TIe,"A",{href:!0});var O0t=s(DU);S4r=r(O0t,"TFGPT2ForSequenceClassification"),O0t.forEach(t),R4r=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),P4r=i(ne),t4=n(ne,"LI",{});var MIe=s(t4);iTe=n(MIe,"STRONG",{});var V0t=s(iTe);B4r=r(V0t,"gptj"),V0t.forEach(t),I4r=r(MIe," \u2014 "),GU=n(MIe,"A",{href:!0});var X0t=s(GU);N4r=r(X0t,"TFGPTJForSequenceClassification"),X0t.forEach(t),q4r=r(MIe," (GPT-J model)"),MIe.forEach(t),j4r=i(ne),a4=n(ne,"LI",{});var EIe=s(a4);dTe=n(EIe,"STRONG",{});var z0t=s(dTe);D4r=r(z0t,"layoutlm"),z0t.forEach(t),G4r=r(EIe," \u2014 "),OU=n(EIe,"A",{href:!0});var W0t=s(OU);O4r=r(W0t,"TFLayoutLMForSequenceClassification"),W0t.forEach(t),V4r=r(EIe," (LayoutLM model)"),EIe.forEach(t),X4r=i(ne),n4=n(ne,"LI",{});var CIe=s(n4);cTe=n(CIe,"STRONG",{});var Q0t=s(cTe);z4r=r(Q0t,"longformer"),Q0t.forEach(t),W4r=r(CIe," \u2014 "),VU=n(CIe,"A",{href:!0});var H0t=s(VU);Q4r=r(H0t,"TFLongformerForSequenceClassification"),H0t.forEach(t),H4r=r(CIe," (Longformer model)"),CIe.forEach(t),U4r=i(ne),s4=n(ne,"LI",{});var wIe=s(s4);fTe=n(wIe,"STRONG",{});var U0t=s(fTe);J4r=r(U0t,"mobilebert"),U0t.forEach(t),Y4r=r(wIe," \u2014 "),XU=n(wIe,"A",{href:!0});var J0t=s(XU);K4r=r(J0t,"TFMobileBertForSequenceClassification"),J0t.forEach(t),Z4r=r(wIe," (MobileBERT model)"),wIe.forEach(t),eEr=i(ne),l4=n(ne,"LI",{});var AIe=s(l4);mTe=n(AIe,"STRONG",{});var Y0t=s(mTe);oEr=r(Y0t,"mpnet"),Y0t.forEach(t),rEr=r(AIe," \u2014 "),zU=n(AIe,"A",{href:!0});var K0t=s(zU);tEr=r(K0t,"TFMPNetForSequenceClassification"),K0t.forEach(t),aEr=r(AIe," (MPNet model)"),AIe.forEach(t),nEr=i(ne),i4=n(ne,"LI",{});var LIe=s(i4);gTe=n(LIe,"STRONG",{});var Z0t=s(gTe);sEr=r(Z0t,"openai-gpt"),Z0t.forEach(t),lEr=r(LIe," \u2014 "),WU=n(LIe,"A",{href:!0});var ewt=s(WU);iEr=r(ewt,"TFOpenAIGPTForSequenceClassification"),ewt.forEach(t),dEr=r(LIe," (OpenAI GPT model)"),LIe.forEach(t),cEr=i(ne),d4=n(ne,"LI",{});var yIe=s(d4);hTe=n(yIe,"STRONG",{});var owt=s(hTe);fEr=r(owt,"rembert"),owt.forEach(t),mEr=r(yIe," \u2014 "),QU=n(yIe,"A",{href:!0});var rwt=s(QU);gEr=r(rwt,"TFRemBertForSequenceClassification"),rwt.forEach(t),hEr=r(yIe," (RemBERT model)"),yIe.forEach(t),pEr=i(ne),c4=n(ne,"LI",{});var xIe=s(c4);pTe=n(xIe,"STRONG",{});var twt=s(pTe);_Er=r(twt,"roberta"),twt.forEach(t),uEr=r(xIe," \u2014 "),HU=n(xIe,"A",{href:!0});var awt=s(HU);bEr=r(awt,"TFRobertaForSequenceClassification"),awt.forEach(t),vEr=r(xIe," (RoBERTa model)"),xIe.forEach(t),FEr=i(ne),f4=n(ne,"LI",{});var $Ie=s(f4);_Te=n($Ie,"STRONG",{});var nwt=s(_Te);TEr=r(nwt,"roformer"),nwt.forEach(t),MEr=r($Ie," \u2014 "),UU=n($Ie,"A",{href:!0});var swt=s(UU);EEr=r(swt,"TFRoFormerForSequenceClassification"),swt.forEach(t),CEr=r($Ie," (RoFormer model)"),$Ie.forEach(t),wEr=i(ne),m4=n(ne,"LI",{});var kIe=s(m4);uTe=n(kIe,"STRONG",{});var lwt=s(uTe);AEr=r(lwt,"tapas"),lwt.forEach(t),LEr=r(kIe," \u2014 "),JU=n(kIe,"A",{href:!0});var iwt=s(JU);yEr=r(iwt,"TFTapasForSequenceClassification"),iwt.forEach(t),xEr=r(kIe," (TAPAS model)"),kIe.forEach(t),$Er=i(ne),g4=n(ne,"LI",{});var SIe=s(g4);bTe=n(SIe,"STRONG",{});var dwt=s(bTe);kEr=r(dwt,"transfo-xl"),dwt.forEach(t),SEr=r(SIe," \u2014 "),YU=n(SIe,"A",{href:!0});var cwt=s(YU);REr=r(cwt,"TFTransfoXLForSequenceClassification"),cwt.forEach(t),PEr=r(SIe," (Transformer-XL model)"),SIe.forEach(t),BEr=i(ne),h4=n(ne,"LI",{});var RIe=s(h4);vTe=n(RIe,"STRONG",{});var fwt=s(vTe);IEr=r(fwt,"xlm"),fwt.forEach(t),NEr=r(RIe," \u2014 "),KU=n(RIe,"A",{href:!0});var mwt=s(KU);qEr=r(mwt,"TFXLMForSequenceClassification"),mwt.forEach(t),jEr=r(RIe," (XLM model)"),RIe.forEach(t),DEr=i(ne),p4=n(ne,"LI",{});var PIe=s(p4);FTe=n(PIe,"STRONG",{});var gwt=s(FTe);GEr=r(gwt,"xlm-roberta"),gwt.forEach(t),OEr=r(PIe," \u2014 "),ZU=n(PIe,"A",{href:!0});var hwt=s(ZU);VEr=r(hwt,"TFXLMRobertaForSequenceClassification"),hwt.forEach(t),XEr=r(PIe," (XLM-RoBERTa model)"),PIe.forEach(t),zEr=i(ne),_4=n(ne,"LI",{});var BIe=s(_4);TTe=n(BIe,"STRONG",{});var pwt=s(TTe);WEr=r(pwt,"xlnet"),pwt.forEach(t),QEr=r(BIe," \u2014 "),eJ=n(BIe,"A",{href:!0});var _wt=s(eJ);HEr=r(_wt,"TFXLNetForSequenceClassification"),_wt.forEach(t),UEr=r(BIe," (XLNet model)"),BIe.forEach(t),ne.forEach(t),JEr=i(yl),T(u4.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),fGe=i(f),cc=n(f,"H2",{class:!0});var uVe=s(cc);b4=n(uVe,"A",{id:!0,class:!0,href:!0});var uwt=s(b4);MTe=n(uwt,"SPAN",{});var bwt=s(MTe);T(h8.$$.fragment,bwt),bwt.forEach(t),uwt.forEach(t),YEr=i(uVe),ETe=n(uVe,"SPAN",{});var vwt=s(ETe);KEr=r(vwt,"TFAutoModelForMultipleChoice"),vwt.forEach(t),uVe.forEach(t),mGe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(p8.$$.fragment,xl),ZEr=i(xl),fc=n(xl,"P",{});var Moe=s(fc);eCr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oJ=n(Moe,"A",{href:!0});var Fwt=s(oJ);oCr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),rCr=r(Moe," class method or the "),rJ=n(Moe,"A",{href:!0});var Twt=s(rJ);tCr=r(Twt,"from_config()"),Twt.forEach(t),aCr=r(Moe,` class
method.`),Moe.forEach(t),nCr=i(xl),_8=n(xl,"P",{});var bVe=s(_8);sCr=r(bVe,"This class cannot be instantiated directly using "),CTe=n(bVe,"CODE",{});var Mwt=s(CTe);lCr=r(Mwt,"__init__()"),Mwt.forEach(t),iCr=r(bVe," (throws an error)."),bVe.forEach(t),dCr=i(xl),Pt=n(xl,"DIV",{class:!0});var cw=s(Pt);T(u8.$$.fragment,cw),cCr=i(cw),wTe=n(cw,"P",{});var Ewt=s(wTe);fCr=r(Ewt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ewt.forEach(t),mCr=i(cw),mc=n(cw,"P",{});var Eoe=s(mc);gCr=r(Eoe,`Note:
Loading a model from its configuration file does `),ATe=n(Eoe,"STRONG",{});var Cwt=s(ATe);hCr=r(Cwt,"not"),Cwt.forEach(t),pCr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(Eoe,"A",{href:!0});var wwt=s(tJ);_Cr=r(wwt,"from_pretrained()"),wwt.forEach(t),uCr=r(Eoe," to load the model weights."),Eoe.forEach(t),bCr=i(cw),T(v4.$$.fragment,cw),cw.forEach(t),vCr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(b8.$$.fragment,$l),FCr=i($l),LTe=n($l,"P",{});var Awt=s(LTe);TCr=r(Awt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Awt.forEach(t),MCr=i($l),sn=n($l,"P",{});var fw=s(sn);ECr=r(fw,"The model class to instantiate is selected based on the "),yTe=n(fw,"CODE",{});var Lwt=s(yTe);CCr=r(Lwt,"model_type"),Lwt.forEach(t),wCr=r(fw,` property of the config object (either
passed as an argument or loaded from `),xTe=n(fw,"CODE",{});var ywt=s(xTe);ACr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),LCr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(fw,"CODE",{});var xwt=s($Te);yCr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),xCr=r(fw,":"),fw.forEach(t),$Cr=i($l),_e=n($l,"UL",{});var ve=s(_e);F4=n(ve,"LI",{});var IIe=s(F4);kTe=n(IIe,"STRONG",{});var $wt=s(kTe);kCr=r($wt,"albert"),$wt.forEach(t),SCr=r(IIe," \u2014 "),aJ=n(IIe,"A",{href:!0});var kwt=s(aJ);RCr=r(kwt,"TFAlbertForMultipleChoice"),kwt.forEach(t),PCr=r(IIe," (ALBERT model)"),IIe.forEach(t),BCr=i(ve),T4=n(ve,"LI",{});var NIe=s(T4);STe=n(NIe,"STRONG",{});var Swt=s(STe);ICr=r(Swt,"bert"),Swt.forEach(t),NCr=r(NIe," \u2014 "),nJ=n(NIe,"A",{href:!0});var Rwt=s(nJ);qCr=r(Rwt,"TFBertForMultipleChoice"),Rwt.forEach(t),jCr=r(NIe," (BERT model)"),NIe.forEach(t),DCr=i(ve),M4=n(ve,"LI",{});var qIe=s(M4);RTe=n(qIe,"STRONG",{});var Pwt=s(RTe);GCr=r(Pwt,"camembert"),Pwt.forEach(t),OCr=r(qIe," \u2014 "),sJ=n(qIe,"A",{href:!0});var Bwt=s(sJ);VCr=r(Bwt,"TFCamembertForMultipleChoice"),Bwt.forEach(t),XCr=r(qIe," (CamemBERT model)"),qIe.forEach(t),zCr=i(ve),E4=n(ve,"LI",{});var jIe=s(E4);PTe=n(jIe,"STRONG",{});var Iwt=s(PTe);WCr=r(Iwt,"convbert"),Iwt.forEach(t),QCr=r(jIe," \u2014 "),lJ=n(jIe,"A",{href:!0});var Nwt=s(lJ);HCr=r(Nwt,"TFConvBertForMultipleChoice"),Nwt.forEach(t),UCr=r(jIe," (ConvBERT model)"),jIe.forEach(t),JCr=i(ve),C4=n(ve,"LI",{});var DIe=s(C4);BTe=n(DIe,"STRONG",{});var qwt=s(BTe);YCr=r(qwt,"distilbert"),qwt.forEach(t),KCr=r(DIe," \u2014 "),iJ=n(DIe,"A",{href:!0});var jwt=s(iJ);ZCr=r(jwt,"TFDistilBertForMultipleChoice"),jwt.forEach(t),e5r=r(DIe," (DistilBERT model)"),DIe.forEach(t),o5r=i(ve),w4=n(ve,"LI",{});var GIe=s(w4);ITe=n(GIe,"STRONG",{});var Dwt=s(ITe);r5r=r(Dwt,"electra"),Dwt.forEach(t),t5r=r(GIe," \u2014 "),dJ=n(GIe,"A",{href:!0});var Gwt=s(dJ);a5r=r(Gwt,"TFElectraForMultipleChoice"),Gwt.forEach(t),n5r=r(GIe," (ELECTRA model)"),GIe.forEach(t),s5r=i(ve),A4=n(ve,"LI",{});var OIe=s(A4);NTe=n(OIe,"STRONG",{});var Owt=s(NTe);l5r=r(Owt,"flaubert"),Owt.forEach(t),i5r=r(OIe," \u2014 "),cJ=n(OIe,"A",{href:!0});var Vwt=s(cJ);d5r=r(Vwt,"TFFlaubertForMultipleChoice"),Vwt.forEach(t),c5r=r(OIe," (FlauBERT model)"),OIe.forEach(t),f5r=i(ve),L4=n(ve,"LI",{});var VIe=s(L4);qTe=n(VIe,"STRONG",{});var Xwt=s(qTe);m5r=r(Xwt,"funnel"),Xwt.forEach(t),g5r=r(VIe," \u2014 "),fJ=n(VIe,"A",{href:!0});var zwt=s(fJ);h5r=r(zwt,"TFFunnelForMultipleChoice"),zwt.forEach(t),p5r=r(VIe," (Funnel Transformer model)"),VIe.forEach(t),_5r=i(ve),y4=n(ve,"LI",{});var XIe=s(y4);jTe=n(XIe,"STRONG",{});var Wwt=s(jTe);u5r=r(Wwt,"longformer"),Wwt.forEach(t),b5r=r(XIe," \u2014 "),mJ=n(XIe,"A",{href:!0});var Qwt=s(mJ);v5r=r(Qwt,"TFLongformerForMultipleChoice"),Qwt.forEach(t),F5r=r(XIe," (Longformer model)"),XIe.forEach(t),T5r=i(ve),x4=n(ve,"LI",{});var zIe=s(x4);DTe=n(zIe,"STRONG",{});var Hwt=s(DTe);M5r=r(Hwt,"mobilebert"),Hwt.forEach(t),E5r=r(zIe," \u2014 "),gJ=n(zIe,"A",{href:!0});var Uwt=s(gJ);C5r=r(Uwt,"TFMobileBertForMultipleChoice"),Uwt.forEach(t),w5r=r(zIe," (MobileBERT model)"),zIe.forEach(t),A5r=i(ve),$4=n(ve,"LI",{});var WIe=s($4);GTe=n(WIe,"STRONG",{});var Jwt=s(GTe);L5r=r(Jwt,"mpnet"),Jwt.forEach(t),y5r=r(WIe," \u2014 "),hJ=n(WIe,"A",{href:!0});var Ywt=s(hJ);x5r=r(Ywt,"TFMPNetForMultipleChoice"),Ywt.forEach(t),$5r=r(WIe," (MPNet model)"),WIe.forEach(t),k5r=i(ve),k4=n(ve,"LI",{});var QIe=s(k4);OTe=n(QIe,"STRONG",{});var Kwt=s(OTe);S5r=r(Kwt,"rembert"),Kwt.forEach(t),R5r=r(QIe," \u2014 "),pJ=n(QIe,"A",{href:!0});var Zwt=s(pJ);P5r=r(Zwt,"TFRemBertForMultipleChoice"),Zwt.forEach(t),B5r=r(QIe," (RemBERT model)"),QIe.forEach(t),I5r=i(ve),S4=n(ve,"LI",{});var HIe=s(S4);VTe=n(HIe,"STRONG",{});var eAt=s(VTe);N5r=r(eAt,"roberta"),eAt.forEach(t),q5r=r(HIe," \u2014 "),_J=n(HIe,"A",{href:!0});var oAt=s(_J);j5r=r(oAt,"TFRobertaForMultipleChoice"),oAt.forEach(t),D5r=r(HIe," (RoBERTa model)"),HIe.forEach(t),G5r=i(ve),R4=n(ve,"LI",{});var UIe=s(R4);XTe=n(UIe,"STRONG",{});var rAt=s(XTe);O5r=r(rAt,"roformer"),rAt.forEach(t),V5r=r(UIe," \u2014 "),uJ=n(UIe,"A",{href:!0});var tAt=s(uJ);X5r=r(tAt,"TFRoFormerForMultipleChoice"),tAt.forEach(t),z5r=r(UIe," (RoFormer model)"),UIe.forEach(t),W5r=i(ve),P4=n(ve,"LI",{});var JIe=s(P4);zTe=n(JIe,"STRONG",{});var aAt=s(zTe);Q5r=r(aAt,"xlm"),aAt.forEach(t),H5r=r(JIe," \u2014 "),bJ=n(JIe,"A",{href:!0});var nAt=s(bJ);U5r=r(nAt,"TFXLMForMultipleChoice"),nAt.forEach(t),J5r=r(JIe," (XLM model)"),JIe.forEach(t),Y5r=i(ve),B4=n(ve,"LI",{});var YIe=s(B4);WTe=n(YIe,"STRONG",{});var sAt=s(WTe);K5r=r(sAt,"xlm-roberta"),sAt.forEach(t),Z5r=r(YIe," \u2014 "),vJ=n(YIe,"A",{href:!0});var lAt=s(vJ);e3r=r(lAt,"TFXLMRobertaForMultipleChoice"),lAt.forEach(t),o3r=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),r3r=i(ve),I4=n(ve,"LI",{});var KIe=s(I4);QTe=n(KIe,"STRONG",{});var iAt=s(QTe);t3r=r(iAt,"xlnet"),iAt.forEach(t),a3r=r(KIe," \u2014 "),FJ=n(KIe,"A",{href:!0});var dAt=s(FJ);n3r=r(dAt,"TFXLNetForMultipleChoice"),dAt.forEach(t),s3r=r(KIe," (XLNet model)"),KIe.forEach(t),ve.forEach(t),l3r=i($l),T(N4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),gGe=i(f),gc=n(f,"H2",{class:!0});var vVe=s(gc);q4=n(vVe,"A",{id:!0,class:!0,href:!0});var cAt=s(q4);HTe=n(cAt,"SPAN",{});var fAt=s(HTe);T(v8.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),i3r=i(vVe),UTe=n(vVe,"SPAN",{});var mAt=s(UTe);d3r=r(mAt,"TFAutoModelForNextSentencePrediction"),mAt.forEach(t),vVe.forEach(t),hGe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(F8.$$.fragment,kl),c3r=i(kl),hc=n(kl,"P",{});var Coe=s(hc);f3r=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TJ=n(Coe,"A",{href:!0});var gAt=s(TJ);m3r=r(gAt,"from_pretrained()"),gAt.forEach(t),g3r=r(Coe," class method or the "),MJ=n(Coe,"A",{href:!0});var hAt=s(MJ);h3r=r(hAt,"from_config()"),hAt.forEach(t),p3r=r(Coe,` class
method.`),Coe.forEach(t),_3r=i(kl),T8=n(kl,"P",{});var FVe=s(T8);u3r=r(FVe,"This class cannot be instantiated directly using "),JTe=n(FVe,"CODE",{});var pAt=s(JTe);b3r=r(pAt,"__init__()"),pAt.forEach(t),v3r=r(FVe," (throws an error)."),FVe.forEach(t),F3r=i(kl),Bt=n(kl,"DIV",{class:!0});var mw=s(Bt);T(M8.$$.fragment,mw),T3r=i(mw),YTe=n(mw,"P",{});var _At=s(YTe);M3r=r(_At,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_At.forEach(t),E3r=i(mw),pc=n(mw,"P",{});var woe=s(pc);C3r=r(woe,`Note:
Loading a model from its configuration file does `),KTe=n(woe,"STRONG",{});var uAt=s(KTe);w3r=r(uAt,"not"),uAt.forEach(t),A3r=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(woe,"A",{href:!0});var bAt=s(EJ);L3r=r(bAt,"from_pretrained()"),bAt.forEach(t),y3r=r(woe," to load the model weights."),woe.forEach(t),x3r=i(mw),T(j4.$$.fragment,mw),mw.forEach(t),$3r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(E8.$$.fragment,Sl),k3r=i(Sl),ZTe=n(Sl,"P",{});var vAt=s(ZTe);S3r=r(vAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vAt.forEach(t),R3r=i(Sl),ln=n(Sl,"P",{});var gw=s(ln);P3r=r(gw,"The model class to instantiate is selected based on the "),e7e=n(gw,"CODE",{});var FAt=s(e7e);B3r=r(FAt,"model_type"),FAt.forEach(t),I3r=r(gw,` property of the config object (either
passed as an argument or loaded from `),o7e=n(gw,"CODE",{});var TAt=s(o7e);N3r=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),q3r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(gw,"CODE",{});var MAt=s(r7e);j3r=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),D3r=r(gw,":"),gw.forEach(t),G3r=i(Sl),C8=n(Sl,"UL",{});var TVe=s(C8);D4=n(TVe,"LI",{});var ZIe=s(D4);t7e=n(ZIe,"STRONG",{});var EAt=s(t7e);O3r=r(EAt,"bert"),EAt.forEach(t),V3r=r(ZIe," \u2014 "),CJ=n(ZIe,"A",{href:!0});var CAt=s(CJ);X3r=r(CAt,"TFBertForNextSentencePrediction"),CAt.forEach(t),z3r=r(ZIe," (BERT model)"),ZIe.forEach(t),W3r=i(TVe),G4=n(TVe,"LI",{});var eNe=s(G4);a7e=n(eNe,"STRONG",{});var wAt=s(a7e);Q3r=r(wAt,"mobilebert"),wAt.forEach(t),H3r=r(eNe," \u2014 "),wJ=n(eNe,"A",{href:!0});var AAt=s(wJ);U3r=r(AAt,"TFMobileBertForNextSentencePrediction"),AAt.forEach(t),J3r=r(eNe," (MobileBERT model)"),eNe.forEach(t),TVe.forEach(t),Y3r=i(Sl),T(O4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),pGe=i(f),_c=n(f,"H2",{class:!0});var MVe=s(_c);V4=n(MVe,"A",{id:!0,class:!0,href:!0});var LAt=s(V4);n7e=n(LAt,"SPAN",{});var yAt=s(n7e);T(w8.$$.fragment,yAt),yAt.forEach(t),LAt.forEach(t),K3r=i(MVe),s7e=n(MVe,"SPAN",{});var xAt=s(s7e);Z3r=r(xAt,"TFAutoModelForTableQuestionAnswering"),xAt.forEach(t),MVe.forEach(t),_Ge=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(A8.$$.fragment,Rl),e0r=i(Rl),uc=n(Rl,"P",{});var Aoe=s(uc);o0r=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AJ=n(Aoe,"A",{href:!0});var $At=s(AJ);r0r=r($At,"from_pretrained()"),$At.forEach(t),t0r=r(Aoe," class method or the "),LJ=n(Aoe,"A",{href:!0});var kAt=s(LJ);a0r=r(kAt,"from_config()"),kAt.forEach(t),n0r=r(Aoe,` class
method.`),Aoe.forEach(t),s0r=i(Rl),L8=n(Rl,"P",{});var EVe=s(L8);l0r=r(EVe,"This class cannot be instantiated directly using "),l7e=n(EVe,"CODE",{});var SAt=s(l7e);i0r=r(SAt,"__init__()"),SAt.forEach(t),d0r=r(EVe," (throws an error)."),EVe.forEach(t),c0r=i(Rl),It=n(Rl,"DIV",{class:!0});var hw=s(It);T(y8.$$.fragment,hw),f0r=i(hw),i7e=n(hw,"P",{});var RAt=s(i7e);m0r=r(RAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RAt.forEach(t),g0r=i(hw),bc=n(hw,"P",{});var Loe=s(bc);h0r=r(Loe,`Note:
Loading a model from its configuration file does `),d7e=n(Loe,"STRONG",{});var PAt=s(d7e);p0r=r(PAt,"not"),PAt.forEach(t),_0r=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(Loe,"A",{href:!0});var BAt=s(yJ);u0r=r(BAt,"from_pretrained()"),BAt.forEach(t),b0r=r(Loe," to load the model weights."),Loe.forEach(t),v0r=i(hw),T(X4.$$.fragment,hw),hw.forEach(t),F0r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(x8.$$.fragment,Pl),T0r=i(Pl),c7e=n(Pl,"P",{});var IAt=s(c7e);M0r=r(IAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IAt.forEach(t),E0r=i(Pl),dn=n(Pl,"P",{});var pw=s(dn);C0r=r(pw,"The model class to instantiate is selected based on the "),f7e=n(pw,"CODE",{});var NAt=s(f7e);w0r=r(NAt,"model_type"),NAt.forEach(t),A0r=r(pw,` property of the config object (either
passed as an argument or loaded from `),m7e=n(pw,"CODE",{});var qAt=s(m7e);L0r=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),y0r=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(pw,"CODE",{});var jAt=s(g7e);x0r=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),$0r=r(pw,":"),pw.forEach(t),k0r=i(Pl),h7e=n(Pl,"UL",{});var DAt=s(h7e);z4=n(DAt,"LI",{});var oNe=s(z4);p7e=n(oNe,"STRONG",{});var GAt=s(p7e);S0r=r(GAt,"tapas"),GAt.forEach(t),R0r=r(oNe," \u2014 "),xJ=n(oNe,"A",{href:!0});var OAt=s(xJ);P0r=r(OAt,"TFTapasForQuestionAnswering"),OAt.forEach(t),B0r=r(oNe," (TAPAS model)"),oNe.forEach(t),DAt.forEach(t),I0r=i(Pl),T(W4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),uGe=i(f),vc=n(f,"H2",{class:!0});var CVe=s(vc);Q4=n(CVe,"A",{id:!0,class:!0,href:!0});var VAt=s(Q4);_7e=n(VAt,"SPAN",{});var XAt=s(_7e);T($8.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),N0r=i(CVe),u7e=n(CVe,"SPAN",{});var zAt=s(u7e);q0r=r(zAt,"TFAutoModelForTokenClassification"),zAt.forEach(t),CVe.forEach(t),bGe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(k8.$$.fragment,Bl),j0r=i(Bl),Fc=n(Bl,"P",{});var yoe=s(Fc);D0r=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$J=n(yoe,"A",{href:!0});var WAt=s($J);G0r=r(WAt,"from_pretrained()"),WAt.forEach(t),O0r=r(yoe," class method or the "),kJ=n(yoe,"A",{href:!0});var QAt=s(kJ);V0r=r(QAt,"from_config()"),QAt.forEach(t),X0r=r(yoe,` class
method.`),yoe.forEach(t),z0r=i(Bl),S8=n(Bl,"P",{});var wVe=s(S8);W0r=r(wVe,"This class cannot be instantiated directly using "),b7e=n(wVe,"CODE",{});var HAt=s(b7e);Q0r=r(HAt,"__init__()"),HAt.forEach(t),H0r=r(wVe," (throws an error)."),wVe.forEach(t),U0r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var _w=s(Nt);T(R8.$$.fragment,_w),J0r=i(_w),v7e=n(_w,"P",{});var UAt=s(v7e);Y0r=r(UAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UAt.forEach(t),K0r=i(_w),Tc=n(_w,"P",{});var xoe=s(Tc);Z0r=r(xoe,`Note:
Loading a model from its configuration file does `),F7e=n(xoe,"STRONG",{});var JAt=s(F7e);ewr=r(JAt,"not"),JAt.forEach(t),owr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(xoe,"A",{href:!0});var YAt=s(SJ);rwr=r(YAt,"from_pretrained()"),YAt.forEach(t),twr=r(xoe," to load the model weights."),xoe.forEach(t),awr=i(_w),T(H4.$$.fragment,_w),_w.forEach(t),nwr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(P8.$$.fragment,Il),swr=i(Il),T7e=n(Il,"P",{});var KAt=s(T7e);lwr=r(KAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KAt.forEach(t),iwr=i(Il),cn=n(Il,"P",{});var uw=s(cn);dwr=r(uw,"The model class to instantiate is selected based on the "),M7e=n(uw,"CODE",{});var ZAt=s(M7e);cwr=r(ZAt,"model_type"),ZAt.forEach(t),fwr=r(uw,` property of the config object (either
passed as an argument or loaded from `),E7e=n(uw,"CODE",{});var eLt=s(E7e);mwr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),gwr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(uw,"CODE",{});var oLt=s(C7e);hwr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),pwr=r(uw,":"),uw.forEach(t),_wr=i(Il),de=n(Il,"UL",{});var me=s(de);U4=n(me,"LI",{});var rNe=s(U4);w7e=n(rNe,"STRONG",{});var rLt=s(w7e);uwr=r(rLt,"albert"),rLt.forEach(t),bwr=r(rNe," \u2014 "),RJ=n(rNe,"A",{href:!0});var tLt=s(RJ);vwr=r(tLt,"TFAlbertForTokenClassification"),tLt.forEach(t),Fwr=r(rNe," (ALBERT model)"),rNe.forEach(t),Twr=i(me),J4=n(me,"LI",{});var tNe=s(J4);A7e=n(tNe,"STRONG",{});var aLt=s(A7e);Mwr=r(aLt,"bert"),aLt.forEach(t),Ewr=r(tNe," \u2014 "),PJ=n(tNe,"A",{href:!0});var nLt=s(PJ);Cwr=r(nLt,"TFBertForTokenClassification"),nLt.forEach(t),wwr=r(tNe," (BERT model)"),tNe.forEach(t),Awr=i(me),Y4=n(me,"LI",{});var aNe=s(Y4);L7e=n(aNe,"STRONG",{});var sLt=s(L7e);Lwr=r(sLt,"camembert"),sLt.forEach(t),ywr=r(aNe," \u2014 "),BJ=n(aNe,"A",{href:!0});var lLt=s(BJ);xwr=r(lLt,"TFCamembertForTokenClassification"),lLt.forEach(t),$wr=r(aNe," (CamemBERT model)"),aNe.forEach(t),kwr=i(me),K4=n(me,"LI",{});var nNe=s(K4);y7e=n(nNe,"STRONG",{});var iLt=s(y7e);Swr=r(iLt,"convbert"),iLt.forEach(t),Rwr=r(nNe," \u2014 "),IJ=n(nNe,"A",{href:!0});var dLt=s(IJ);Pwr=r(dLt,"TFConvBertForTokenClassification"),dLt.forEach(t),Bwr=r(nNe," (ConvBERT model)"),nNe.forEach(t),Iwr=i(me),Z4=n(me,"LI",{});var sNe=s(Z4);x7e=n(sNe,"STRONG",{});var cLt=s(x7e);Nwr=r(cLt,"deberta"),cLt.forEach(t),qwr=r(sNe," \u2014 "),NJ=n(sNe,"A",{href:!0});var fLt=s(NJ);jwr=r(fLt,"TFDebertaForTokenClassification"),fLt.forEach(t),Dwr=r(sNe," (DeBERTa model)"),sNe.forEach(t),Gwr=i(me),eE=n(me,"LI",{});var lNe=s(eE);$7e=n(lNe,"STRONG",{});var mLt=s($7e);Owr=r(mLt,"deberta-v2"),mLt.forEach(t),Vwr=r(lNe," \u2014 "),qJ=n(lNe,"A",{href:!0});var gLt=s(qJ);Xwr=r(gLt,"TFDebertaV2ForTokenClassification"),gLt.forEach(t),zwr=r(lNe," (DeBERTa-v2 model)"),lNe.forEach(t),Wwr=i(me),oE=n(me,"LI",{});var iNe=s(oE);k7e=n(iNe,"STRONG",{});var hLt=s(k7e);Qwr=r(hLt,"distilbert"),hLt.forEach(t),Hwr=r(iNe," \u2014 "),jJ=n(iNe,"A",{href:!0});var pLt=s(jJ);Uwr=r(pLt,"TFDistilBertForTokenClassification"),pLt.forEach(t),Jwr=r(iNe," (DistilBERT model)"),iNe.forEach(t),Ywr=i(me),rE=n(me,"LI",{});var dNe=s(rE);S7e=n(dNe,"STRONG",{});var _Lt=s(S7e);Kwr=r(_Lt,"electra"),_Lt.forEach(t),Zwr=r(dNe," \u2014 "),DJ=n(dNe,"A",{href:!0});var uLt=s(DJ);eAr=r(uLt,"TFElectraForTokenClassification"),uLt.forEach(t),oAr=r(dNe," (ELECTRA model)"),dNe.forEach(t),rAr=i(me),tE=n(me,"LI",{});var cNe=s(tE);R7e=n(cNe,"STRONG",{});var bLt=s(R7e);tAr=r(bLt,"flaubert"),bLt.forEach(t),aAr=r(cNe," \u2014 "),GJ=n(cNe,"A",{href:!0});var vLt=s(GJ);nAr=r(vLt,"TFFlaubertForTokenClassification"),vLt.forEach(t),sAr=r(cNe," (FlauBERT model)"),cNe.forEach(t),lAr=i(me),aE=n(me,"LI",{});var fNe=s(aE);P7e=n(fNe,"STRONG",{});var FLt=s(P7e);iAr=r(FLt,"funnel"),FLt.forEach(t),dAr=r(fNe," \u2014 "),OJ=n(fNe,"A",{href:!0});var TLt=s(OJ);cAr=r(TLt,"TFFunnelForTokenClassification"),TLt.forEach(t),fAr=r(fNe," (Funnel Transformer model)"),fNe.forEach(t),mAr=i(me),nE=n(me,"LI",{});var mNe=s(nE);B7e=n(mNe,"STRONG",{});var MLt=s(B7e);gAr=r(MLt,"layoutlm"),MLt.forEach(t),hAr=r(mNe," \u2014 "),VJ=n(mNe,"A",{href:!0});var ELt=s(VJ);pAr=r(ELt,"TFLayoutLMForTokenClassification"),ELt.forEach(t),_Ar=r(mNe," (LayoutLM model)"),mNe.forEach(t),uAr=i(me),sE=n(me,"LI",{});var gNe=s(sE);I7e=n(gNe,"STRONG",{});var CLt=s(I7e);bAr=r(CLt,"longformer"),CLt.forEach(t),vAr=r(gNe," \u2014 "),XJ=n(gNe,"A",{href:!0});var wLt=s(XJ);FAr=r(wLt,"TFLongformerForTokenClassification"),wLt.forEach(t),TAr=r(gNe," (Longformer model)"),gNe.forEach(t),MAr=i(me),lE=n(me,"LI",{});var hNe=s(lE);N7e=n(hNe,"STRONG",{});var ALt=s(N7e);EAr=r(ALt,"mobilebert"),ALt.forEach(t),CAr=r(hNe," \u2014 "),zJ=n(hNe,"A",{href:!0});var LLt=s(zJ);wAr=r(LLt,"TFMobileBertForTokenClassification"),LLt.forEach(t),AAr=r(hNe," (MobileBERT model)"),hNe.forEach(t),LAr=i(me),iE=n(me,"LI",{});var pNe=s(iE);q7e=n(pNe,"STRONG",{});var yLt=s(q7e);yAr=r(yLt,"mpnet"),yLt.forEach(t),xAr=r(pNe," \u2014 "),WJ=n(pNe,"A",{href:!0});var xLt=s(WJ);$Ar=r(xLt,"TFMPNetForTokenClassification"),xLt.forEach(t),kAr=r(pNe," (MPNet model)"),pNe.forEach(t),SAr=i(me),dE=n(me,"LI",{});var _Ne=s(dE);j7e=n(_Ne,"STRONG",{});var $Lt=s(j7e);RAr=r($Lt,"rembert"),$Lt.forEach(t),PAr=r(_Ne," \u2014 "),QJ=n(_Ne,"A",{href:!0});var kLt=s(QJ);BAr=r(kLt,"TFRemBertForTokenClassification"),kLt.forEach(t),IAr=r(_Ne," (RemBERT model)"),_Ne.forEach(t),NAr=i(me),cE=n(me,"LI",{});var uNe=s(cE);D7e=n(uNe,"STRONG",{});var SLt=s(D7e);qAr=r(SLt,"roberta"),SLt.forEach(t),jAr=r(uNe," \u2014 "),HJ=n(uNe,"A",{href:!0});var RLt=s(HJ);DAr=r(RLt,"TFRobertaForTokenClassification"),RLt.forEach(t),GAr=r(uNe," (RoBERTa model)"),uNe.forEach(t),OAr=i(me),fE=n(me,"LI",{});var bNe=s(fE);G7e=n(bNe,"STRONG",{});var PLt=s(G7e);VAr=r(PLt,"roformer"),PLt.forEach(t),XAr=r(bNe," \u2014 "),UJ=n(bNe,"A",{href:!0});var BLt=s(UJ);zAr=r(BLt,"TFRoFormerForTokenClassification"),BLt.forEach(t),WAr=r(bNe," (RoFormer model)"),bNe.forEach(t),QAr=i(me),mE=n(me,"LI",{});var vNe=s(mE);O7e=n(vNe,"STRONG",{});var ILt=s(O7e);HAr=r(ILt,"xlm"),ILt.forEach(t),UAr=r(vNe," \u2014 "),JJ=n(vNe,"A",{href:!0});var NLt=s(JJ);JAr=r(NLt,"TFXLMForTokenClassification"),NLt.forEach(t),YAr=r(vNe," (XLM model)"),vNe.forEach(t),KAr=i(me),gE=n(me,"LI",{});var FNe=s(gE);V7e=n(FNe,"STRONG",{});var qLt=s(V7e);ZAr=r(qLt,"xlm-roberta"),qLt.forEach(t),eLr=r(FNe," \u2014 "),YJ=n(FNe,"A",{href:!0});var jLt=s(YJ);oLr=r(jLt,"TFXLMRobertaForTokenClassification"),jLt.forEach(t),rLr=r(FNe," (XLM-RoBERTa model)"),FNe.forEach(t),tLr=i(me),hE=n(me,"LI",{});var TNe=s(hE);X7e=n(TNe,"STRONG",{});var DLt=s(X7e);aLr=r(DLt,"xlnet"),DLt.forEach(t),nLr=r(TNe," \u2014 "),KJ=n(TNe,"A",{href:!0});var GLt=s(KJ);sLr=r(GLt,"TFXLNetForTokenClassification"),GLt.forEach(t),lLr=r(TNe," (XLNet model)"),TNe.forEach(t),me.forEach(t),iLr=i(Il),T(pE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),vGe=i(f),Mc=n(f,"H2",{class:!0});var AVe=s(Mc);_E=n(AVe,"A",{id:!0,class:!0,href:!0});var OLt=s(_E);z7e=n(OLt,"SPAN",{});var VLt=s(z7e);T(B8.$$.fragment,VLt),VLt.forEach(t),OLt.forEach(t),dLr=i(AVe),W7e=n(AVe,"SPAN",{});var XLt=s(W7e);cLr=r(XLt,"TFAutoModelForQuestionAnswering"),XLt.forEach(t),AVe.forEach(t),FGe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(I8.$$.fragment,Nl),fLr=i(Nl),Ec=n(Nl,"P",{});var $oe=s(Ec);mLr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=n($oe,"A",{href:!0});var zLt=s(ZJ);gLr=r(zLt,"from_pretrained()"),zLt.forEach(t),hLr=r($oe," class method or the "),eY=n($oe,"A",{href:!0});var WLt=s(eY);pLr=r(WLt,"from_config()"),WLt.forEach(t),_Lr=r($oe,` class
method.`),$oe.forEach(t),uLr=i(Nl),N8=n(Nl,"P",{});var LVe=s(N8);bLr=r(LVe,"This class cannot be instantiated directly using "),Q7e=n(LVe,"CODE",{});var QLt=s(Q7e);vLr=r(QLt,"__init__()"),QLt.forEach(t),FLr=r(LVe," (throws an error)."),LVe.forEach(t),TLr=i(Nl),qt=n(Nl,"DIV",{class:!0});var bw=s(qt);T(q8.$$.fragment,bw),MLr=i(bw),H7e=n(bw,"P",{});var HLt=s(H7e);ELr=r(HLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HLt.forEach(t),CLr=i(bw),Cc=n(bw,"P",{});var koe=s(Cc);wLr=r(koe,`Note:
Loading a model from its configuration file does `),U7e=n(koe,"STRONG",{});var ULt=s(U7e);ALr=r(ULt,"not"),ULt.forEach(t),LLr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(koe,"A",{href:!0});var JLt=s(oY);yLr=r(JLt,"from_pretrained()"),JLt.forEach(t),xLr=r(koe," to load the model weights."),koe.forEach(t),$Lr=i(bw),T(uE.$$.fragment,bw),bw.forEach(t),kLr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(j8.$$.fragment,ql),SLr=i(ql),J7e=n(ql,"P",{});var YLt=s(J7e);RLr=r(YLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YLt.forEach(t),PLr=i(ql),fn=n(ql,"P",{});var vw=s(fn);BLr=r(vw,"The model class to instantiate is selected based on the "),Y7e=n(vw,"CODE",{});var KLt=s(Y7e);ILr=r(KLt,"model_type"),KLt.forEach(t),NLr=r(vw,` property of the config object (either
passed as an argument or loaded from `),K7e=n(vw,"CODE",{});var ZLt=s(K7e);qLr=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),jLr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(vw,"CODE",{});var eyt=s(Z7e);DLr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),GLr=r(vw,":"),vw.forEach(t),OLr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);bE=n(ge,"LI",{});var MNe=s(bE);e9e=n(MNe,"STRONG",{});var oyt=s(e9e);VLr=r(oyt,"albert"),oyt.forEach(t),XLr=r(MNe," \u2014 "),rY=n(MNe,"A",{href:!0});var ryt=s(rY);zLr=r(ryt,"TFAlbertForQuestionAnswering"),ryt.forEach(t),WLr=r(MNe," (ALBERT model)"),MNe.forEach(t),QLr=i(ge),vE=n(ge,"LI",{});var ENe=s(vE);o9e=n(ENe,"STRONG",{});var tyt=s(o9e);HLr=r(tyt,"bert"),tyt.forEach(t),ULr=r(ENe," \u2014 "),tY=n(ENe,"A",{href:!0});var ayt=s(tY);JLr=r(ayt,"TFBertForQuestionAnswering"),ayt.forEach(t),YLr=r(ENe," (BERT model)"),ENe.forEach(t),KLr=i(ge),FE=n(ge,"LI",{});var CNe=s(FE);r9e=n(CNe,"STRONG",{});var nyt=s(r9e);ZLr=r(nyt,"camembert"),nyt.forEach(t),eyr=r(CNe," \u2014 "),aY=n(CNe,"A",{href:!0});var syt=s(aY);oyr=r(syt,"TFCamembertForQuestionAnswering"),syt.forEach(t),ryr=r(CNe," (CamemBERT model)"),CNe.forEach(t),tyr=i(ge),TE=n(ge,"LI",{});var wNe=s(TE);t9e=n(wNe,"STRONG",{});var lyt=s(t9e);ayr=r(lyt,"convbert"),lyt.forEach(t),nyr=r(wNe," \u2014 "),nY=n(wNe,"A",{href:!0});var iyt=s(nY);syr=r(iyt,"TFConvBertForQuestionAnswering"),iyt.forEach(t),lyr=r(wNe," (ConvBERT model)"),wNe.forEach(t),iyr=i(ge),ME=n(ge,"LI",{});var ANe=s(ME);a9e=n(ANe,"STRONG",{});var dyt=s(a9e);dyr=r(dyt,"deberta"),dyt.forEach(t),cyr=r(ANe," \u2014 "),sY=n(ANe,"A",{href:!0});var cyt=s(sY);fyr=r(cyt,"TFDebertaForQuestionAnswering"),cyt.forEach(t),myr=r(ANe," (DeBERTa model)"),ANe.forEach(t),gyr=i(ge),EE=n(ge,"LI",{});var LNe=s(EE);n9e=n(LNe,"STRONG",{});var fyt=s(n9e);hyr=r(fyt,"deberta-v2"),fyt.forEach(t),pyr=r(LNe," \u2014 "),lY=n(LNe,"A",{href:!0});var myt=s(lY);_yr=r(myt,"TFDebertaV2ForQuestionAnswering"),myt.forEach(t),uyr=r(LNe," (DeBERTa-v2 model)"),LNe.forEach(t),byr=i(ge),CE=n(ge,"LI",{});var yNe=s(CE);s9e=n(yNe,"STRONG",{});var gyt=s(s9e);vyr=r(gyt,"distilbert"),gyt.forEach(t),Fyr=r(yNe," \u2014 "),iY=n(yNe,"A",{href:!0});var hyt=s(iY);Tyr=r(hyt,"TFDistilBertForQuestionAnswering"),hyt.forEach(t),Myr=r(yNe," (DistilBERT model)"),yNe.forEach(t),Eyr=i(ge),wE=n(ge,"LI",{});var xNe=s(wE);l9e=n(xNe,"STRONG",{});var pyt=s(l9e);Cyr=r(pyt,"electra"),pyt.forEach(t),wyr=r(xNe," \u2014 "),dY=n(xNe,"A",{href:!0});var _yt=s(dY);Ayr=r(_yt,"TFElectraForQuestionAnswering"),_yt.forEach(t),Lyr=r(xNe," (ELECTRA model)"),xNe.forEach(t),yyr=i(ge),AE=n(ge,"LI",{});var $Ne=s(AE);i9e=n($Ne,"STRONG",{});var uyt=s(i9e);xyr=r(uyt,"flaubert"),uyt.forEach(t),$yr=r($Ne," \u2014 "),cY=n($Ne,"A",{href:!0});var byt=s(cY);kyr=r(byt,"TFFlaubertForQuestionAnsweringSimple"),byt.forEach(t),Syr=r($Ne," (FlauBERT model)"),$Ne.forEach(t),Ryr=i(ge),LE=n(ge,"LI",{});var kNe=s(LE);d9e=n(kNe,"STRONG",{});var vyt=s(d9e);Pyr=r(vyt,"funnel"),vyt.forEach(t),Byr=r(kNe," \u2014 "),fY=n(kNe,"A",{href:!0});var Fyt=s(fY);Iyr=r(Fyt,"TFFunnelForQuestionAnswering"),Fyt.forEach(t),Nyr=r(kNe," (Funnel Transformer model)"),kNe.forEach(t),qyr=i(ge),yE=n(ge,"LI",{});var SNe=s(yE);c9e=n(SNe,"STRONG",{});var Tyt=s(c9e);jyr=r(Tyt,"gptj"),Tyt.forEach(t),Dyr=r(SNe," \u2014 "),mY=n(SNe,"A",{href:!0});var Myt=s(mY);Gyr=r(Myt,"TFGPTJForQuestionAnswering"),Myt.forEach(t),Oyr=r(SNe," (GPT-J model)"),SNe.forEach(t),Vyr=i(ge),xE=n(ge,"LI",{});var RNe=s(xE);f9e=n(RNe,"STRONG",{});var Eyt=s(f9e);Xyr=r(Eyt,"longformer"),Eyt.forEach(t),zyr=r(RNe," \u2014 "),gY=n(RNe,"A",{href:!0});var Cyt=s(gY);Wyr=r(Cyt,"TFLongformerForQuestionAnswering"),Cyt.forEach(t),Qyr=r(RNe," (Longformer model)"),RNe.forEach(t),Hyr=i(ge),$E=n(ge,"LI",{});var PNe=s($E);m9e=n(PNe,"STRONG",{});var wyt=s(m9e);Uyr=r(wyt,"mobilebert"),wyt.forEach(t),Jyr=r(PNe," \u2014 "),hY=n(PNe,"A",{href:!0});var Ayt=s(hY);Yyr=r(Ayt,"TFMobileBertForQuestionAnswering"),Ayt.forEach(t),Kyr=r(PNe," (MobileBERT model)"),PNe.forEach(t),Zyr=i(ge),kE=n(ge,"LI",{});var BNe=s(kE);g9e=n(BNe,"STRONG",{});var Lyt=s(g9e);e8r=r(Lyt,"mpnet"),Lyt.forEach(t),o8r=r(BNe," \u2014 "),pY=n(BNe,"A",{href:!0});var yyt=s(pY);r8r=r(yyt,"TFMPNetForQuestionAnswering"),yyt.forEach(t),t8r=r(BNe," (MPNet model)"),BNe.forEach(t),a8r=i(ge),SE=n(ge,"LI",{});var INe=s(SE);h9e=n(INe,"STRONG",{});var xyt=s(h9e);n8r=r(xyt,"rembert"),xyt.forEach(t),s8r=r(INe," \u2014 "),_Y=n(INe,"A",{href:!0});var $yt=s(_Y);l8r=r($yt,"TFRemBertForQuestionAnswering"),$yt.forEach(t),i8r=r(INe," (RemBERT model)"),INe.forEach(t),d8r=i(ge),RE=n(ge,"LI",{});var NNe=s(RE);p9e=n(NNe,"STRONG",{});var kyt=s(p9e);c8r=r(kyt,"roberta"),kyt.forEach(t),f8r=r(NNe," \u2014 "),uY=n(NNe,"A",{href:!0});var Syt=s(uY);m8r=r(Syt,"TFRobertaForQuestionAnswering"),Syt.forEach(t),g8r=r(NNe," (RoBERTa model)"),NNe.forEach(t),h8r=i(ge),PE=n(ge,"LI",{});var qNe=s(PE);_9e=n(qNe,"STRONG",{});var Ryt=s(_9e);p8r=r(Ryt,"roformer"),Ryt.forEach(t),_8r=r(qNe," \u2014 "),bY=n(qNe,"A",{href:!0});var Pyt=s(bY);u8r=r(Pyt,"TFRoFormerForQuestionAnswering"),Pyt.forEach(t),b8r=r(qNe," (RoFormer model)"),qNe.forEach(t),v8r=i(ge),BE=n(ge,"LI",{});var jNe=s(BE);u9e=n(jNe,"STRONG",{});var Byt=s(u9e);F8r=r(Byt,"xlm"),Byt.forEach(t),T8r=r(jNe," \u2014 "),vY=n(jNe,"A",{href:!0});var Iyt=s(vY);M8r=r(Iyt,"TFXLMForQuestionAnsweringSimple"),Iyt.forEach(t),E8r=r(jNe," (XLM model)"),jNe.forEach(t),C8r=i(ge),IE=n(ge,"LI",{});var DNe=s(IE);b9e=n(DNe,"STRONG",{});var Nyt=s(b9e);w8r=r(Nyt,"xlm-roberta"),Nyt.forEach(t),A8r=r(DNe," \u2014 "),FY=n(DNe,"A",{href:!0});var qyt=s(FY);L8r=r(qyt,"TFXLMRobertaForQuestionAnswering"),qyt.forEach(t),y8r=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),x8r=i(ge),NE=n(ge,"LI",{});var GNe=s(NE);v9e=n(GNe,"STRONG",{});var jyt=s(v9e);$8r=r(jyt,"xlnet"),jyt.forEach(t),k8r=r(GNe," \u2014 "),TY=n(GNe,"A",{href:!0});var Dyt=s(TY);S8r=r(Dyt,"TFXLNetForQuestionAnsweringSimple"),Dyt.forEach(t),R8r=r(GNe," (XLNet model)"),GNe.forEach(t),ge.forEach(t),P8r=i(ql),T(qE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),TGe=i(f),wc=n(f,"H2",{class:!0});var yVe=s(wc);jE=n(yVe,"A",{id:!0,class:!0,href:!0});var Gyt=s(jE);F9e=n(Gyt,"SPAN",{});var Oyt=s(F9e);T(D8.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),B8r=i(yVe),T9e=n(yVe,"SPAN",{});var Vyt=s(T9e);I8r=r(Vyt,"TFAutoModelForVision2Seq"),Vyt.forEach(t),yVe.forEach(t),MGe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(G8.$$.fragment,jl),N8r=i(jl),Ac=n(jl,"P",{});var Soe=s(Ac);q8r=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MY=n(Soe,"A",{href:!0});var Xyt=s(MY);j8r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),D8r=r(Soe," class method or the "),EY=n(Soe,"A",{href:!0});var zyt=s(EY);G8r=r(zyt,"from_config()"),zyt.forEach(t),O8r=r(Soe,` class
method.`),Soe.forEach(t),V8r=i(jl),O8=n(jl,"P",{});var xVe=s(O8);X8r=r(xVe,"This class cannot be instantiated directly using "),M9e=n(xVe,"CODE",{});var Wyt=s(M9e);z8r=r(Wyt,"__init__()"),Wyt.forEach(t),W8r=r(xVe," (throws an error)."),xVe.forEach(t),Q8r=i(jl),jt=n(jl,"DIV",{class:!0});var Fw=s(jt);T(V8.$$.fragment,Fw),H8r=i(Fw),E9e=n(Fw,"P",{});var Qyt=s(E9e);U8r=r(Qyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qyt.forEach(t),J8r=i(Fw),Lc=n(Fw,"P",{});var Roe=s(Lc);Y8r=r(Roe,`Note:
Loading a model from its configuration file does `),C9e=n(Roe,"STRONG",{});var Hyt=s(C9e);K8r=r(Hyt,"not"),Hyt.forEach(t),Z8r=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(Roe,"A",{href:!0});var Uyt=s(CY);exr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),oxr=r(Roe," to load the model weights."),Roe.forEach(t),rxr=i(Fw),T(DE.$$.fragment,Fw),Fw.forEach(t),txr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(X8.$$.fragment,Dl),axr=i(Dl),w9e=n(Dl,"P",{});var Jyt=s(w9e);nxr=r(Jyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jyt.forEach(t),sxr=i(Dl),mn=n(Dl,"P",{});var Tw=s(mn);lxr=r(Tw,"The model class to instantiate is selected based on the "),A9e=n(Tw,"CODE",{});var Yyt=s(A9e);ixr=r(Yyt,"model_type"),Yyt.forEach(t),dxr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),L9e=n(Tw,"CODE",{});var Kyt=s(L9e);cxr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),fxr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y9e=n(Tw,"CODE",{});var Zyt=s(y9e);mxr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),gxr=r(Tw,":"),Tw.forEach(t),hxr=i(Dl),x9e=n(Dl,"UL",{});var e8t=s(x9e);GE=n(e8t,"LI",{});var ONe=s(GE);$9e=n(ONe,"STRONG",{});var o8t=s($9e);pxr=r(o8t,"vision-encoder-decoder"),o8t.forEach(t),_xr=r(ONe," \u2014 "),wY=n(ONe,"A",{href:!0});var r8t=s(wY);uxr=r(r8t,"TFVisionEncoderDecoderModel"),r8t.forEach(t),bxr=r(ONe," (Vision Encoder decoder model)"),ONe.forEach(t),e8t.forEach(t),vxr=i(Dl),T(OE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),EGe=i(f),yc=n(f,"H2",{class:!0});var $Ve=s(yc);VE=n($Ve,"A",{id:!0,class:!0,href:!0});var t8t=s(VE);k9e=n(t8t,"SPAN",{});var a8t=s(k9e);T(z8.$$.fragment,a8t),a8t.forEach(t),t8t.forEach(t),Fxr=i($Ve),S9e=n($Ve,"SPAN",{});var n8t=s(S9e);Txr=r(n8t,"TFAutoModelForSpeechSeq2Seq"),n8t.forEach(t),$Ve.forEach(t),CGe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(W8.$$.fragment,Gl),Mxr=i(Gl),xc=n(Gl,"P",{});var Poe=s(xc);Exr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AY=n(Poe,"A",{href:!0});var s8t=s(AY);Cxr=r(s8t,"from_pretrained()"),s8t.forEach(t),wxr=r(Poe," class method or the "),LY=n(Poe,"A",{href:!0});var l8t=s(LY);Axr=r(l8t,"from_config()"),l8t.forEach(t),Lxr=r(Poe,` class
method.`),Poe.forEach(t),yxr=i(Gl),Q8=n(Gl,"P",{});var kVe=s(Q8);xxr=r(kVe,"This class cannot be instantiated directly using "),R9e=n(kVe,"CODE",{});var i8t=s(R9e);$xr=r(i8t,"__init__()"),i8t.forEach(t),kxr=r(kVe," (throws an error)."),kVe.forEach(t),Sxr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Mw=s(Dt);T(H8.$$.fragment,Mw),Rxr=i(Mw),P9e=n(Mw,"P",{});var d8t=s(P9e);Pxr=r(d8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d8t.forEach(t),Bxr=i(Mw),$c=n(Mw,"P",{});var Boe=s($c);Ixr=r(Boe,`Note:
Loading a model from its configuration file does `),B9e=n(Boe,"STRONG",{});var c8t=s(B9e);Nxr=r(c8t,"not"),c8t.forEach(t),qxr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Boe,"A",{href:!0});var f8t=s(yY);jxr=r(f8t,"from_pretrained()"),f8t.forEach(t),Dxr=r(Boe," to load the model weights."),Boe.forEach(t),Gxr=i(Mw),T(XE.$$.fragment,Mw),Mw.forEach(t),Oxr=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(U8.$$.fragment,Ol),Vxr=i(Ol),I9e=n(Ol,"P",{});var m8t=s(I9e);Xxr=r(m8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m8t.forEach(t),zxr=i(Ol),gn=n(Ol,"P",{});var Ew=s(gn);Wxr=r(Ew,"The model class to instantiate is selected based on the "),N9e=n(Ew,"CODE",{});var g8t=s(N9e);Qxr=r(g8t,"model_type"),g8t.forEach(t),Hxr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),q9e=n(Ew,"CODE",{});var h8t=s(q9e);Uxr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),Jxr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=n(Ew,"CODE",{});var p8t=s(j9e);Yxr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),Kxr=r(Ew,":"),Ew.forEach(t),Zxr=i(Ol),D9e=n(Ol,"UL",{});var _8t=s(D9e);zE=n(_8t,"LI",{});var VNe=s(zE);G9e=n(VNe,"STRONG",{});var u8t=s(G9e);e$r=r(u8t,"speech_to_text"),u8t.forEach(t),o$r=r(VNe," \u2014 "),xY=n(VNe,"A",{href:!0});var b8t=s(xY);r$r=r(b8t,"TFSpeech2TextForConditionalGeneration"),b8t.forEach(t),t$r=r(VNe," (Speech2Text model)"),VNe.forEach(t),_8t.forEach(t),a$r=i(Ol),T(WE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),wGe=i(f),kc=n(f,"H2",{class:!0});var SVe=s(kc);QE=n(SVe,"A",{id:!0,class:!0,href:!0});var v8t=s(QE);O9e=n(v8t,"SPAN",{});var F8t=s(O9e);T(J8.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),n$r=i(SVe),V9e=n(SVe,"SPAN",{});var T8t=s(V9e);s$r=r(T8t,"FlaxAutoModel"),T8t.forEach(t),SVe.forEach(t),AGe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(Y8.$$.fragment,Vl),l$r=i(Vl),Sc=n(Vl,"P",{});var Ioe=s(Sc);i$r=r(Ioe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Y=n(Ioe,"A",{href:!0});var M8t=s($Y);d$r=r(M8t,"from_pretrained()"),M8t.forEach(t),c$r=r(Ioe," class method or the "),kY=n(Ioe,"A",{href:!0});var E8t=s(kY);f$r=r(E8t,"from_config()"),E8t.forEach(t),m$r=r(Ioe,` class
method.`),Ioe.forEach(t),g$r=i(Vl),K8=n(Vl,"P",{});var RVe=s(K8);h$r=r(RVe,"This class cannot be instantiated directly using "),X9e=n(RVe,"CODE",{});var C8t=s(X9e);p$r=r(C8t,"__init__()"),C8t.forEach(t),_$r=r(RVe," (throws an error)."),RVe.forEach(t),u$r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var Cw=s(Gt);T(Z8.$$.fragment,Cw),b$r=i(Cw),z9e=n(Cw,"P",{});var w8t=s(z9e);v$r=r(w8t,"Instantiates one of the base model classes of the library from a configuration."),w8t.forEach(t),F$r=i(Cw),Rc=n(Cw,"P",{});var Noe=s(Rc);T$r=r(Noe,`Note:
Loading a model from its configuration file does `),W9e=n(Noe,"STRONG",{});var A8t=s(W9e);M$r=r(A8t,"not"),A8t.forEach(t),E$r=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=n(Noe,"A",{href:!0});var L8t=s(SY);C$r=r(L8t,"from_pretrained()"),L8t.forEach(t),w$r=r(Noe," to load the model weights."),Noe.forEach(t),A$r=i(Cw),T(HE.$$.fragment,Cw),Cw.forEach(t),L$r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(ex.$$.fragment,Xl),y$r=i(Xl),Q9e=n(Xl,"P",{});var y8t=s(Q9e);x$r=r(y8t,"Instantiate one of the base model classes of the library from a pretrained model."),y8t.forEach(t),$$r=i(Xl),hn=n(Xl,"P",{});var ww=s(hn);k$r=r(ww,"The model class to instantiate is selected based on the "),H9e=n(ww,"CODE",{});var x8t=s(H9e);S$r=r(x8t,"model_type"),x8t.forEach(t),R$r=r(ww,` property of the config object (either
passed as an argument or loaded from `),U9e=n(ww,"CODE",{});var $8t=s(U9e);P$r=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),B$r=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=n(ww,"CODE",{});var k8t=s(J9e);I$r=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),N$r=r(ww,":"),ww.forEach(t),q$r=i(Xl),oe=n(Xl,"UL",{});var ae=s(oe);UE=n(ae,"LI",{});var XNe=s(UE);Y9e=n(XNe,"STRONG",{});var S8t=s(Y9e);j$r=r(S8t,"albert"),S8t.forEach(t),D$r=r(XNe," \u2014 "),RY=n(XNe,"A",{href:!0});var R8t=s(RY);G$r=r(R8t,"FlaxAlbertModel"),R8t.forEach(t),O$r=r(XNe," (ALBERT model)"),XNe.forEach(t),V$r=i(ae),JE=n(ae,"LI",{});var zNe=s(JE);K9e=n(zNe,"STRONG",{});var P8t=s(K9e);X$r=r(P8t,"bart"),P8t.forEach(t),z$r=r(zNe," \u2014 "),PY=n(zNe,"A",{href:!0});var B8t=s(PY);W$r=r(B8t,"FlaxBartModel"),B8t.forEach(t),Q$r=r(zNe," (BART model)"),zNe.forEach(t),H$r=i(ae),YE=n(ae,"LI",{});var WNe=s(YE);Z9e=n(WNe,"STRONG",{});var I8t=s(Z9e);U$r=r(I8t,"beit"),I8t.forEach(t),J$r=r(WNe," \u2014 "),BY=n(WNe,"A",{href:!0});var N8t=s(BY);Y$r=r(N8t,"FlaxBeitModel"),N8t.forEach(t),K$r=r(WNe," (BEiT model)"),WNe.forEach(t),Z$r=i(ae),KE=n(ae,"LI",{});var QNe=s(KE);eMe=n(QNe,"STRONG",{});var q8t=s(eMe);ekr=r(q8t,"bert"),q8t.forEach(t),okr=r(QNe," \u2014 "),IY=n(QNe,"A",{href:!0});var j8t=s(IY);rkr=r(j8t,"FlaxBertModel"),j8t.forEach(t),tkr=r(QNe," (BERT model)"),QNe.forEach(t),akr=i(ae),ZE=n(ae,"LI",{});var HNe=s(ZE);oMe=n(HNe,"STRONG",{});var D8t=s(oMe);nkr=r(D8t,"big_bird"),D8t.forEach(t),skr=r(HNe," \u2014 "),NY=n(HNe,"A",{href:!0});var G8t=s(NY);lkr=r(G8t,"FlaxBigBirdModel"),G8t.forEach(t),ikr=r(HNe," (BigBird model)"),HNe.forEach(t),dkr=i(ae),eC=n(ae,"LI",{});var UNe=s(eC);rMe=n(UNe,"STRONG",{});var O8t=s(rMe);ckr=r(O8t,"blenderbot"),O8t.forEach(t),fkr=r(UNe," \u2014 "),qY=n(UNe,"A",{href:!0});var V8t=s(qY);mkr=r(V8t,"FlaxBlenderbotModel"),V8t.forEach(t),gkr=r(UNe," (Blenderbot model)"),UNe.forEach(t),hkr=i(ae),oC=n(ae,"LI",{});var JNe=s(oC);tMe=n(JNe,"STRONG",{});var X8t=s(tMe);pkr=r(X8t,"blenderbot-small"),X8t.forEach(t),_kr=r(JNe," \u2014 "),jY=n(JNe,"A",{href:!0});var z8t=s(jY);ukr=r(z8t,"FlaxBlenderbotSmallModel"),z8t.forEach(t),bkr=r(JNe," (BlenderbotSmall model)"),JNe.forEach(t),vkr=i(ae),rC=n(ae,"LI",{});var YNe=s(rC);aMe=n(YNe,"STRONG",{});var W8t=s(aMe);Fkr=r(W8t,"clip"),W8t.forEach(t),Tkr=r(YNe," \u2014 "),DY=n(YNe,"A",{href:!0});var Q8t=s(DY);Mkr=r(Q8t,"FlaxCLIPModel"),Q8t.forEach(t),Ekr=r(YNe," (CLIP model)"),YNe.forEach(t),Ckr=i(ae),tC=n(ae,"LI",{});var KNe=s(tC);nMe=n(KNe,"STRONG",{});var H8t=s(nMe);wkr=r(H8t,"distilbert"),H8t.forEach(t),Akr=r(KNe," \u2014 "),GY=n(KNe,"A",{href:!0});var U8t=s(GY);Lkr=r(U8t,"FlaxDistilBertModel"),U8t.forEach(t),ykr=r(KNe," (DistilBERT model)"),KNe.forEach(t),xkr=i(ae),aC=n(ae,"LI",{});var ZNe=s(aC);sMe=n(ZNe,"STRONG",{});var J8t=s(sMe);$kr=r(J8t,"electra"),J8t.forEach(t),kkr=r(ZNe," \u2014 "),OY=n(ZNe,"A",{href:!0});var Y8t=s(OY);Skr=r(Y8t,"FlaxElectraModel"),Y8t.forEach(t),Rkr=r(ZNe," (ELECTRA model)"),ZNe.forEach(t),Pkr=i(ae),nC=n(ae,"LI",{});var eqe=s(nC);lMe=n(eqe,"STRONG",{});var K8t=s(lMe);Bkr=r(K8t,"gpt2"),K8t.forEach(t),Ikr=r(eqe," \u2014 "),VY=n(eqe,"A",{href:!0});var Z8t=s(VY);Nkr=r(Z8t,"FlaxGPT2Model"),Z8t.forEach(t),qkr=r(eqe," (OpenAI GPT-2 model)"),eqe.forEach(t),jkr=i(ae),sC=n(ae,"LI",{});var oqe=s(sC);iMe=n(oqe,"STRONG",{});var ext=s(iMe);Dkr=r(ext,"gpt_neo"),ext.forEach(t),Gkr=r(oqe," \u2014 "),XY=n(oqe,"A",{href:!0});var oxt=s(XY);Okr=r(oxt,"FlaxGPTNeoModel"),oxt.forEach(t),Vkr=r(oqe," (GPT Neo model)"),oqe.forEach(t),Xkr=i(ae),lC=n(ae,"LI",{});var rqe=s(lC);dMe=n(rqe,"STRONG",{});var rxt=s(dMe);zkr=r(rxt,"gptj"),rxt.forEach(t),Wkr=r(rqe," \u2014 "),zY=n(rqe,"A",{href:!0});var txt=s(zY);Qkr=r(txt,"FlaxGPTJModel"),txt.forEach(t),Hkr=r(rqe," (GPT-J model)"),rqe.forEach(t),Ukr=i(ae),iC=n(ae,"LI",{});var tqe=s(iC);cMe=n(tqe,"STRONG",{});var axt=s(cMe);Jkr=r(axt,"longt5"),axt.forEach(t),Ykr=r(tqe," \u2014 "),WY=n(tqe,"A",{href:!0});var nxt=s(WY);Kkr=r(nxt,"FlaxLongT5Model"),nxt.forEach(t),Zkr=r(tqe," (LongT5 model)"),tqe.forEach(t),eSr=i(ae),dC=n(ae,"LI",{});var aqe=s(dC);fMe=n(aqe,"STRONG",{});var sxt=s(fMe);oSr=r(sxt,"marian"),sxt.forEach(t),rSr=r(aqe," \u2014 "),QY=n(aqe,"A",{href:!0});var lxt=s(QY);tSr=r(lxt,"FlaxMarianModel"),lxt.forEach(t),aSr=r(aqe," (Marian model)"),aqe.forEach(t),nSr=i(ae),cC=n(ae,"LI",{});var nqe=s(cC);mMe=n(nqe,"STRONG",{});var ixt=s(mMe);sSr=r(ixt,"mbart"),ixt.forEach(t),lSr=r(nqe," \u2014 "),HY=n(nqe,"A",{href:!0});var dxt=s(HY);iSr=r(dxt,"FlaxMBartModel"),dxt.forEach(t),dSr=r(nqe," (mBART model)"),nqe.forEach(t),cSr=i(ae),fC=n(ae,"LI",{});var sqe=s(fC);gMe=n(sqe,"STRONG",{});var cxt=s(gMe);fSr=r(cxt,"mt5"),cxt.forEach(t),mSr=r(sqe," \u2014 "),UY=n(sqe,"A",{href:!0});var fxt=s(UY);gSr=r(fxt,"FlaxMT5Model"),fxt.forEach(t),hSr=r(sqe," (MT5 model)"),sqe.forEach(t),pSr=i(ae),mC=n(ae,"LI",{});var lqe=s(mC);hMe=n(lqe,"STRONG",{});var mxt=s(hMe);_Sr=r(mxt,"opt"),mxt.forEach(t),uSr=r(lqe," \u2014 "),JY=n(lqe,"A",{href:!0});var gxt=s(JY);bSr=r(gxt,"FlaxOPTModel"),gxt.forEach(t),vSr=r(lqe," (OPT model)"),lqe.forEach(t),FSr=i(ae),gC=n(ae,"LI",{});var iqe=s(gC);pMe=n(iqe,"STRONG",{});var hxt=s(pMe);TSr=r(hxt,"pegasus"),hxt.forEach(t),MSr=r(iqe," \u2014 "),YY=n(iqe,"A",{href:!0});var pxt=s(YY);ESr=r(pxt,"FlaxPegasusModel"),pxt.forEach(t),CSr=r(iqe," (Pegasus model)"),iqe.forEach(t),wSr=i(ae),hC=n(ae,"LI",{});var dqe=s(hC);_Me=n(dqe,"STRONG",{});var _xt=s(_Me);ASr=r(_xt,"roberta"),_xt.forEach(t),LSr=r(dqe," \u2014 "),KY=n(dqe,"A",{href:!0});var uxt=s(KY);ySr=r(uxt,"FlaxRobertaModel"),uxt.forEach(t),xSr=r(dqe," (RoBERTa model)"),dqe.forEach(t),$Sr=i(ae),pC=n(ae,"LI",{});var cqe=s(pC);uMe=n(cqe,"STRONG",{});var bxt=s(uMe);kSr=r(bxt,"roformer"),bxt.forEach(t),SSr=r(cqe," \u2014 "),ZY=n(cqe,"A",{href:!0});var vxt=s(ZY);RSr=r(vxt,"FlaxRoFormerModel"),vxt.forEach(t),PSr=r(cqe," (RoFormer model)"),cqe.forEach(t),BSr=i(ae),_C=n(ae,"LI",{});var fqe=s(_C);bMe=n(fqe,"STRONG",{});var Fxt=s(bMe);ISr=r(Fxt,"t5"),Fxt.forEach(t),NSr=r(fqe," \u2014 "),eK=n(fqe,"A",{href:!0});var Txt=s(eK);qSr=r(Txt,"FlaxT5Model"),Txt.forEach(t),jSr=r(fqe," (T5 model)"),fqe.forEach(t),DSr=i(ae),uC=n(ae,"LI",{});var mqe=s(uC);vMe=n(mqe,"STRONG",{});var Mxt=s(vMe);GSr=r(Mxt,"vision-text-dual-encoder"),Mxt.forEach(t),OSr=r(mqe," \u2014 "),oK=n(mqe,"A",{href:!0});var Ext=s(oK);VSr=r(Ext,"FlaxVisionTextDualEncoderModel"),Ext.forEach(t),XSr=r(mqe," (VisionTextDualEncoder model)"),mqe.forEach(t),zSr=i(ae),bC=n(ae,"LI",{});var gqe=s(bC);FMe=n(gqe,"STRONG",{});var Cxt=s(FMe);WSr=r(Cxt,"vit"),Cxt.forEach(t),QSr=r(gqe," \u2014 "),rK=n(gqe,"A",{href:!0});var wxt=s(rK);HSr=r(wxt,"FlaxViTModel"),wxt.forEach(t),USr=r(gqe," (ViT model)"),gqe.forEach(t),JSr=i(ae),vC=n(ae,"LI",{});var hqe=s(vC);TMe=n(hqe,"STRONG",{});var Axt=s(TMe);YSr=r(Axt,"wav2vec2"),Axt.forEach(t),KSr=r(hqe," \u2014 "),tK=n(hqe,"A",{href:!0});var Lxt=s(tK);ZSr=r(Lxt,"FlaxWav2Vec2Model"),Lxt.forEach(t),eRr=r(hqe," (Wav2Vec2 model)"),hqe.forEach(t),oRr=i(ae),FC=n(ae,"LI",{});var pqe=s(FC);MMe=n(pqe,"STRONG",{});var yxt=s(MMe);rRr=r(yxt,"xglm"),yxt.forEach(t),tRr=r(pqe," \u2014 "),aK=n(pqe,"A",{href:!0});var xxt=s(aK);aRr=r(xxt,"FlaxXGLMModel"),xxt.forEach(t),nRr=r(pqe," (XGLM model)"),pqe.forEach(t),sRr=i(ae),TC=n(ae,"LI",{});var _qe=s(TC);EMe=n(_qe,"STRONG",{});var $xt=s(EMe);lRr=r($xt,"xlm-roberta"),$xt.forEach(t),iRr=r(_qe," \u2014 "),nK=n(_qe,"A",{href:!0});var kxt=s(nK);dRr=r(kxt,"FlaxXLMRobertaModel"),kxt.forEach(t),cRr=r(_qe," (XLM-RoBERTa model)"),_qe.forEach(t),ae.forEach(t),fRr=i(Xl),T(MC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),LGe=i(f),Pc=n(f,"H2",{class:!0});var PVe=s(Pc);EC=n(PVe,"A",{id:!0,class:!0,href:!0});var Sxt=s(EC);CMe=n(Sxt,"SPAN",{});var Rxt=s(CMe);T(ox.$$.fragment,Rxt),Rxt.forEach(t),Sxt.forEach(t),mRr=i(PVe),wMe=n(PVe,"SPAN",{});var Pxt=s(wMe);gRr=r(Pxt,"FlaxAutoModelForCausalLM"),Pxt.forEach(t),PVe.forEach(t),yGe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(rx.$$.fragment,zl),hRr=i(zl),Bc=n(zl,"P",{});var qoe=s(Bc);pRr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=n(qoe,"A",{href:!0});var Bxt=s(sK);_Rr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),uRr=r(qoe," class method or the "),lK=n(qoe,"A",{href:!0});var Ixt=s(lK);bRr=r(Ixt,"from_config()"),Ixt.forEach(t),vRr=r(qoe,` class
method.`),qoe.forEach(t),FRr=i(zl),tx=n(zl,"P",{});var BVe=s(tx);TRr=r(BVe,"This class cannot be instantiated directly using "),AMe=n(BVe,"CODE",{});var Nxt=s(AMe);MRr=r(Nxt,"__init__()"),Nxt.forEach(t),ERr=r(BVe," (throws an error)."),BVe.forEach(t),CRr=i(zl),Ot=n(zl,"DIV",{class:!0});var Aw=s(Ot);T(ax.$$.fragment,Aw),wRr=i(Aw),LMe=n(Aw,"P",{});var qxt=s(LMe);ARr=r(qxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qxt.forEach(t),LRr=i(Aw),Ic=n(Aw,"P",{});var joe=s(Ic);yRr=r(joe,`Note:
Loading a model from its configuration file does `),yMe=n(joe,"STRONG",{});var jxt=s(yMe);xRr=r(jxt,"not"),jxt.forEach(t),$Rr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(joe,"A",{href:!0});var Dxt=s(iK);kRr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),SRr=r(joe," to load the model weights."),joe.forEach(t),RRr=i(Aw),T(CC.$$.fragment,Aw),Aw.forEach(t),PRr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(nx.$$.fragment,Wl),BRr=i(Wl),xMe=n(Wl,"P",{});var Gxt=s(xMe);IRr=r(Gxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gxt.forEach(t),NRr=i(Wl),pn=n(Wl,"P",{});var Lw=s(pn);qRr=r(Lw,"The model class to instantiate is selected based on the "),$Me=n(Lw,"CODE",{});var Oxt=s($Me);jRr=r(Oxt,"model_type"),Oxt.forEach(t),DRr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),kMe=n(Lw,"CODE",{});var Vxt=s(kMe);GRr=r(Vxt,"pretrained_model_name_or_path"),Vxt.forEach(t),ORr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(Lw,"CODE",{});var Xxt=s(SMe);VRr=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),XRr=r(Lw,":"),Lw.forEach(t),zRr=i(Wl),xe=n(Wl,"UL",{});var Ne=s(xe);wC=n(Ne,"LI",{});var uqe=s(wC);RMe=n(uqe,"STRONG",{});var zxt=s(RMe);WRr=r(zxt,"bart"),zxt.forEach(t),QRr=r(uqe," \u2014 "),dK=n(uqe,"A",{href:!0});var Wxt=s(dK);HRr=r(Wxt,"FlaxBartForCausalLM"),Wxt.forEach(t),URr=r(uqe," (BART model)"),uqe.forEach(t),JRr=i(Ne),AC=n(Ne,"LI",{});var bqe=s(AC);PMe=n(bqe,"STRONG",{});var Qxt=s(PMe);YRr=r(Qxt,"bert"),Qxt.forEach(t),KRr=r(bqe," \u2014 "),cK=n(bqe,"A",{href:!0});var Hxt=s(cK);ZRr=r(Hxt,"FlaxBertForCausalLM"),Hxt.forEach(t),ePr=r(bqe," (BERT model)"),bqe.forEach(t),oPr=i(Ne),LC=n(Ne,"LI",{});var vqe=s(LC);BMe=n(vqe,"STRONG",{});var Uxt=s(BMe);rPr=r(Uxt,"big_bird"),Uxt.forEach(t),tPr=r(vqe," \u2014 "),fK=n(vqe,"A",{href:!0});var Jxt=s(fK);aPr=r(Jxt,"FlaxBigBirdForCausalLM"),Jxt.forEach(t),nPr=r(vqe," (BigBird model)"),vqe.forEach(t),sPr=i(Ne),yC=n(Ne,"LI",{});var Fqe=s(yC);IMe=n(Fqe,"STRONG",{});var Yxt=s(IMe);lPr=r(Yxt,"electra"),Yxt.forEach(t),iPr=r(Fqe," \u2014 "),mK=n(Fqe,"A",{href:!0});var Kxt=s(mK);dPr=r(Kxt,"FlaxElectraForCausalLM"),Kxt.forEach(t),cPr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),fPr=i(Ne),xC=n(Ne,"LI",{});var Tqe=s(xC);NMe=n(Tqe,"STRONG",{});var Zxt=s(NMe);mPr=r(Zxt,"gpt2"),Zxt.forEach(t),gPr=r(Tqe," \u2014 "),gK=n(Tqe,"A",{href:!0});var e$t=s(gK);hPr=r(e$t,"FlaxGPT2LMHeadModel"),e$t.forEach(t),pPr=r(Tqe," (OpenAI GPT-2 model)"),Tqe.forEach(t),_Pr=i(Ne),$C=n(Ne,"LI",{});var Mqe=s($C);qMe=n(Mqe,"STRONG",{});var o$t=s(qMe);uPr=r(o$t,"gpt_neo"),o$t.forEach(t),bPr=r(Mqe," \u2014 "),hK=n(Mqe,"A",{href:!0});var r$t=s(hK);vPr=r(r$t,"FlaxGPTNeoForCausalLM"),r$t.forEach(t),FPr=r(Mqe," (GPT Neo model)"),Mqe.forEach(t),TPr=i(Ne),kC=n(Ne,"LI",{});var Eqe=s(kC);jMe=n(Eqe,"STRONG",{});var t$t=s(jMe);MPr=r(t$t,"gptj"),t$t.forEach(t),EPr=r(Eqe," \u2014 "),pK=n(Eqe,"A",{href:!0});var a$t=s(pK);CPr=r(a$t,"FlaxGPTJForCausalLM"),a$t.forEach(t),wPr=r(Eqe," (GPT-J model)"),Eqe.forEach(t),APr=i(Ne),SC=n(Ne,"LI",{});var Cqe=s(SC);DMe=n(Cqe,"STRONG",{});var n$t=s(DMe);LPr=r(n$t,"opt"),n$t.forEach(t),yPr=r(Cqe," \u2014 "),_K=n(Cqe,"A",{href:!0});var s$t=s(_K);xPr=r(s$t,"FlaxOPTForCausalLM"),s$t.forEach(t),$Pr=r(Cqe," (OPT model)"),Cqe.forEach(t),kPr=i(Ne),RC=n(Ne,"LI",{});var wqe=s(RC);GMe=n(wqe,"STRONG",{});var l$t=s(GMe);SPr=r(l$t,"roberta"),l$t.forEach(t),RPr=r(wqe," \u2014 "),uK=n(wqe,"A",{href:!0});var i$t=s(uK);PPr=r(i$t,"FlaxRobertaForCausalLM"),i$t.forEach(t),BPr=r(wqe," (RoBERTa model)"),wqe.forEach(t),IPr=i(Ne),PC=n(Ne,"LI",{});var Aqe=s(PC);OMe=n(Aqe,"STRONG",{});var d$t=s(OMe);NPr=r(d$t,"xglm"),d$t.forEach(t),qPr=r(Aqe," \u2014 "),bK=n(Aqe,"A",{href:!0});var c$t=s(bK);jPr=r(c$t,"FlaxXGLMForCausalLM"),c$t.forEach(t),DPr=r(Aqe," (XGLM model)"),Aqe.forEach(t),Ne.forEach(t),GPr=i(Wl),T(BC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),xGe=i(f),Nc=n(f,"H2",{class:!0});var IVe=s(Nc);IC=n(IVe,"A",{id:!0,class:!0,href:!0});var f$t=s(IC);VMe=n(f$t,"SPAN",{});var m$t=s(VMe);T(sx.$$.fragment,m$t),m$t.forEach(t),f$t.forEach(t),OPr=i(IVe),XMe=n(IVe,"SPAN",{});var g$t=s(XMe);VPr=r(g$t,"FlaxAutoModelForPreTraining"),g$t.forEach(t),IVe.forEach(t),$Ge=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(lx.$$.fragment,Ql),XPr=i(Ql),qc=n(Ql,"P",{});var Doe=s(qc);zPr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=n(Doe,"A",{href:!0});var h$t=s(vK);WPr=r(h$t,"from_pretrained()"),h$t.forEach(t),QPr=r(Doe," class method or the "),FK=n(Doe,"A",{href:!0});var p$t=s(FK);HPr=r(p$t,"from_config()"),p$t.forEach(t),UPr=r(Doe,` class
method.`),Doe.forEach(t),JPr=i(Ql),ix=n(Ql,"P",{});var NVe=s(ix);YPr=r(NVe,"This class cannot be instantiated directly using "),zMe=n(NVe,"CODE",{});var _$t=s(zMe);KPr=r(_$t,"__init__()"),_$t.forEach(t),ZPr=r(NVe," (throws an error)."),NVe.forEach(t),eBr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var yw=s(Vt);T(dx.$$.fragment,yw),oBr=i(yw),WMe=n(yw,"P",{});var u$t=s(WMe);rBr=r(u$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u$t.forEach(t),tBr=i(yw),jc=n(yw,"P",{});var Goe=s(jc);aBr=r(Goe,`Note:
Loading a model from its configuration file does `),QMe=n(Goe,"STRONG",{});var b$t=s(QMe);nBr=r(b$t,"not"),b$t.forEach(t),sBr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(Goe,"A",{href:!0});var v$t=s(TK);lBr=r(v$t,"from_pretrained()"),v$t.forEach(t),iBr=r(Goe," to load the model weights."),Goe.forEach(t),dBr=i(yw),T(NC.$$.fragment,yw),yw.forEach(t),cBr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(cx.$$.fragment,Hl),fBr=i(Hl),HMe=n(Hl,"P",{});var F$t=s(HMe);mBr=r(F$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F$t.forEach(t),gBr=i(Hl),_n=n(Hl,"P",{});var xw=s(_n);hBr=r(xw,"The model class to instantiate is selected based on the "),UMe=n(xw,"CODE",{});var T$t=s(UMe);pBr=r(T$t,"model_type"),T$t.forEach(t),_Br=r(xw,` property of the config object (either
passed as an argument or loaded from `),JMe=n(xw,"CODE",{});var M$t=s(JMe);uBr=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),bBr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(xw,"CODE",{});var E$t=s(YMe);vBr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),FBr=r(xw,":"),xw.forEach(t),TBr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);qC=n(we,"LI",{});var Lqe=s(qC);KMe=n(Lqe,"STRONG",{});var C$t=s(KMe);MBr=r(C$t,"albert"),C$t.forEach(t),EBr=r(Lqe," \u2014 "),MK=n(Lqe,"A",{href:!0});var w$t=s(MK);CBr=r(w$t,"FlaxAlbertForPreTraining"),w$t.forEach(t),wBr=r(Lqe," (ALBERT model)"),Lqe.forEach(t),ABr=i(we),jC=n(we,"LI",{});var yqe=s(jC);ZMe=n(yqe,"STRONG",{});var A$t=s(ZMe);LBr=r(A$t,"bart"),A$t.forEach(t),yBr=r(yqe," \u2014 "),EK=n(yqe,"A",{href:!0});var L$t=s(EK);xBr=r(L$t,"FlaxBartForConditionalGeneration"),L$t.forEach(t),$Br=r(yqe," (BART model)"),yqe.forEach(t),kBr=i(we),DC=n(we,"LI",{});var xqe=s(DC);e4e=n(xqe,"STRONG",{});var y$t=s(e4e);SBr=r(y$t,"bert"),y$t.forEach(t),RBr=r(xqe," \u2014 "),CK=n(xqe,"A",{href:!0});var x$t=s(CK);PBr=r(x$t,"FlaxBertForPreTraining"),x$t.forEach(t),BBr=r(xqe," (BERT model)"),xqe.forEach(t),IBr=i(we),GC=n(we,"LI",{});var $qe=s(GC);o4e=n($qe,"STRONG",{});var $$t=s(o4e);NBr=r($$t,"big_bird"),$$t.forEach(t),qBr=r($qe," \u2014 "),wK=n($qe,"A",{href:!0});var k$t=s(wK);jBr=r(k$t,"FlaxBigBirdForPreTraining"),k$t.forEach(t),DBr=r($qe," (BigBird model)"),$qe.forEach(t),GBr=i(we),OC=n(we,"LI",{});var kqe=s(OC);r4e=n(kqe,"STRONG",{});var S$t=s(r4e);OBr=r(S$t,"electra"),S$t.forEach(t),VBr=r(kqe," \u2014 "),AK=n(kqe,"A",{href:!0});var R$t=s(AK);XBr=r(R$t,"FlaxElectraForPreTraining"),R$t.forEach(t),zBr=r(kqe," (ELECTRA model)"),kqe.forEach(t),WBr=i(we),VC=n(we,"LI",{});var Sqe=s(VC);t4e=n(Sqe,"STRONG",{});var P$t=s(t4e);QBr=r(P$t,"longt5"),P$t.forEach(t),HBr=r(Sqe," \u2014 "),LK=n(Sqe,"A",{href:!0});var B$t=s(LK);UBr=r(B$t,"FlaxLongT5ForConditionalGeneration"),B$t.forEach(t),JBr=r(Sqe," (LongT5 model)"),Sqe.forEach(t),YBr=i(we),XC=n(we,"LI",{});var Rqe=s(XC);a4e=n(Rqe,"STRONG",{});var I$t=s(a4e);KBr=r(I$t,"mbart"),I$t.forEach(t),ZBr=r(Rqe," \u2014 "),yK=n(Rqe,"A",{href:!0});var N$t=s(yK);eIr=r(N$t,"FlaxMBartForConditionalGeneration"),N$t.forEach(t),oIr=r(Rqe," (mBART model)"),Rqe.forEach(t),rIr=i(we),zC=n(we,"LI",{});var Pqe=s(zC);n4e=n(Pqe,"STRONG",{});var q$t=s(n4e);tIr=r(q$t,"mt5"),q$t.forEach(t),aIr=r(Pqe," \u2014 "),xK=n(Pqe,"A",{href:!0});var j$t=s(xK);nIr=r(j$t,"FlaxMT5ForConditionalGeneration"),j$t.forEach(t),sIr=r(Pqe," (MT5 model)"),Pqe.forEach(t),lIr=i(we),WC=n(we,"LI",{});var Bqe=s(WC);s4e=n(Bqe,"STRONG",{});var D$t=s(s4e);iIr=r(D$t,"roberta"),D$t.forEach(t),dIr=r(Bqe," \u2014 "),$K=n(Bqe,"A",{href:!0});var G$t=s($K);cIr=r(G$t,"FlaxRobertaForMaskedLM"),G$t.forEach(t),fIr=r(Bqe," (RoBERTa model)"),Bqe.forEach(t),mIr=i(we),QC=n(we,"LI",{});var Iqe=s(QC);l4e=n(Iqe,"STRONG",{});var O$t=s(l4e);gIr=r(O$t,"roformer"),O$t.forEach(t),hIr=r(Iqe," \u2014 "),kK=n(Iqe,"A",{href:!0});var V$t=s(kK);pIr=r(V$t,"FlaxRoFormerForMaskedLM"),V$t.forEach(t),_Ir=r(Iqe," (RoFormer model)"),Iqe.forEach(t),uIr=i(we),HC=n(we,"LI",{});var Nqe=s(HC);i4e=n(Nqe,"STRONG",{});var X$t=s(i4e);bIr=r(X$t,"t5"),X$t.forEach(t),vIr=r(Nqe," \u2014 "),SK=n(Nqe,"A",{href:!0});var z$t=s(SK);FIr=r(z$t,"FlaxT5ForConditionalGeneration"),z$t.forEach(t),TIr=r(Nqe," (T5 model)"),Nqe.forEach(t),MIr=i(we),UC=n(we,"LI",{});var qqe=s(UC);d4e=n(qqe,"STRONG",{});var W$t=s(d4e);EIr=r(W$t,"wav2vec2"),W$t.forEach(t),CIr=r(qqe," \u2014 "),RK=n(qqe,"A",{href:!0});var Q$t=s(RK);wIr=r(Q$t,"FlaxWav2Vec2ForPreTraining"),Q$t.forEach(t),AIr=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),LIr=i(we),JC=n(we,"LI",{});var jqe=s(JC);c4e=n(jqe,"STRONG",{});var H$t=s(c4e);yIr=r(H$t,"xlm-roberta"),H$t.forEach(t),xIr=r(jqe," \u2014 "),PK=n(jqe,"A",{href:!0});var U$t=s(PK);$Ir=r(U$t,"FlaxXLMRobertaForMaskedLM"),U$t.forEach(t),kIr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),we.forEach(t),SIr=i(Hl),T(YC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),kGe=i(f),Dc=n(f,"H2",{class:!0});var qVe=s(Dc);KC=n(qVe,"A",{id:!0,class:!0,href:!0});var J$t=s(KC);f4e=n(J$t,"SPAN",{});var Y$t=s(f4e);T(fx.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),RIr=i(qVe),m4e=n(qVe,"SPAN",{});var K$t=s(m4e);PIr=r(K$t,"FlaxAutoModelForMaskedLM"),K$t.forEach(t),qVe.forEach(t),SGe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(mx.$$.fragment,Ul),BIr=i(Ul),Gc=n(Ul,"P",{});var Ooe=s(Gc);IIr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BK=n(Ooe,"A",{href:!0});var Z$t=s(BK);NIr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),qIr=r(Ooe," class method or the "),IK=n(Ooe,"A",{href:!0});var ekt=s(IK);jIr=r(ekt,"from_config()"),ekt.forEach(t),DIr=r(Ooe,` class
method.`),Ooe.forEach(t),GIr=i(Ul),gx=n(Ul,"P",{});var jVe=s(gx);OIr=r(jVe,"This class cannot be instantiated directly using "),g4e=n(jVe,"CODE",{});var okt=s(g4e);VIr=r(okt,"__init__()"),okt.forEach(t),XIr=r(jVe," (throws an error)."),jVe.forEach(t),zIr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var $w=s(Xt);T(hx.$$.fragment,$w),WIr=i($w),h4e=n($w,"P",{});var rkt=s(h4e);QIr=r(rkt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rkt.forEach(t),HIr=i($w),Oc=n($w,"P",{});var Voe=s(Oc);UIr=r(Voe,`Note:
Loading a model from its configuration file does `),p4e=n(Voe,"STRONG",{});var tkt=s(p4e);JIr=r(tkt,"not"),tkt.forEach(t),YIr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(Voe,"A",{href:!0});var akt=s(NK);KIr=r(akt,"from_pretrained()"),akt.forEach(t),ZIr=r(Voe," to load the model weights."),Voe.forEach(t),eNr=i($w),T(ZC.$$.fragment,$w),$w.forEach(t),oNr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(px.$$.fragment,Jl),rNr=i(Jl),_4e=n(Jl,"P",{});var nkt=s(_4e);tNr=r(nkt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nkt.forEach(t),aNr=i(Jl),un=n(Jl,"P",{});var kw=s(un);nNr=r(kw,"The model class to instantiate is selected based on the "),u4e=n(kw,"CODE",{});var skt=s(u4e);sNr=r(skt,"model_type"),skt.forEach(t),lNr=r(kw,` property of the config object (either
passed as an argument or loaded from `),b4e=n(kw,"CODE",{});var lkt=s(b4e);iNr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),dNr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(kw,"CODE",{});var ikt=s(v4e);cNr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),fNr=r(kw,":"),kw.forEach(t),mNr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);e5=n(qe,"LI",{});var Dqe=s(e5);F4e=n(Dqe,"STRONG",{});var dkt=s(F4e);gNr=r(dkt,"albert"),dkt.forEach(t),hNr=r(Dqe," \u2014 "),qK=n(Dqe,"A",{href:!0});var ckt=s(qK);pNr=r(ckt,"FlaxAlbertForMaskedLM"),ckt.forEach(t),_Nr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),uNr=i(qe),o5=n(qe,"LI",{});var Gqe=s(o5);T4e=n(Gqe,"STRONG",{});var fkt=s(T4e);bNr=r(fkt,"bart"),fkt.forEach(t),vNr=r(Gqe," \u2014 "),jK=n(Gqe,"A",{href:!0});var mkt=s(jK);FNr=r(mkt,"FlaxBartForConditionalGeneration"),mkt.forEach(t),TNr=r(Gqe," (BART model)"),Gqe.forEach(t),MNr=i(qe),r5=n(qe,"LI",{});var Oqe=s(r5);M4e=n(Oqe,"STRONG",{});var gkt=s(M4e);ENr=r(gkt,"bert"),gkt.forEach(t),CNr=r(Oqe," \u2014 "),DK=n(Oqe,"A",{href:!0});var hkt=s(DK);wNr=r(hkt,"FlaxBertForMaskedLM"),hkt.forEach(t),ANr=r(Oqe," (BERT model)"),Oqe.forEach(t),LNr=i(qe),t5=n(qe,"LI",{});var Vqe=s(t5);E4e=n(Vqe,"STRONG",{});var pkt=s(E4e);yNr=r(pkt,"big_bird"),pkt.forEach(t),xNr=r(Vqe," \u2014 "),GK=n(Vqe,"A",{href:!0});var _kt=s(GK);$Nr=r(_kt,"FlaxBigBirdForMaskedLM"),_kt.forEach(t),kNr=r(Vqe," (BigBird model)"),Vqe.forEach(t),SNr=i(qe),a5=n(qe,"LI",{});var Xqe=s(a5);C4e=n(Xqe,"STRONG",{});var ukt=s(C4e);RNr=r(ukt,"distilbert"),ukt.forEach(t),PNr=r(Xqe," \u2014 "),OK=n(Xqe,"A",{href:!0});var bkt=s(OK);BNr=r(bkt,"FlaxDistilBertForMaskedLM"),bkt.forEach(t),INr=r(Xqe," (DistilBERT model)"),Xqe.forEach(t),NNr=i(qe),n5=n(qe,"LI",{});var zqe=s(n5);w4e=n(zqe,"STRONG",{});var vkt=s(w4e);qNr=r(vkt,"electra"),vkt.forEach(t),jNr=r(zqe," \u2014 "),VK=n(zqe,"A",{href:!0});var Fkt=s(VK);DNr=r(Fkt,"FlaxElectraForMaskedLM"),Fkt.forEach(t),GNr=r(zqe," (ELECTRA model)"),zqe.forEach(t),ONr=i(qe),s5=n(qe,"LI",{});var Wqe=s(s5);A4e=n(Wqe,"STRONG",{});var Tkt=s(A4e);VNr=r(Tkt,"mbart"),Tkt.forEach(t),XNr=r(Wqe," \u2014 "),XK=n(Wqe,"A",{href:!0});var Mkt=s(XK);zNr=r(Mkt,"FlaxMBartForConditionalGeneration"),Mkt.forEach(t),WNr=r(Wqe," (mBART model)"),Wqe.forEach(t),QNr=i(qe),l5=n(qe,"LI",{});var Qqe=s(l5);L4e=n(Qqe,"STRONG",{});var Ekt=s(L4e);HNr=r(Ekt,"roberta"),Ekt.forEach(t),UNr=r(Qqe," \u2014 "),zK=n(Qqe,"A",{href:!0});var Ckt=s(zK);JNr=r(Ckt,"FlaxRobertaForMaskedLM"),Ckt.forEach(t),YNr=r(Qqe," (RoBERTa model)"),Qqe.forEach(t),KNr=i(qe),i5=n(qe,"LI",{});var Hqe=s(i5);y4e=n(Hqe,"STRONG",{});var wkt=s(y4e);ZNr=r(wkt,"roformer"),wkt.forEach(t),eqr=r(Hqe," \u2014 "),WK=n(Hqe,"A",{href:!0});var Akt=s(WK);oqr=r(Akt,"FlaxRoFormerForMaskedLM"),Akt.forEach(t),rqr=r(Hqe," (RoFormer model)"),Hqe.forEach(t),tqr=i(qe),d5=n(qe,"LI",{});var Uqe=s(d5);x4e=n(Uqe,"STRONG",{});var Lkt=s(x4e);aqr=r(Lkt,"xlm-roberta"),Lkt.forEach(t),nqr=r(Uqe," \u2014 "),QK=n(Uqe,"A",{href:!0});var ykt=s(QK);sqr=r(ykt,"FlaxXLMRobertaForMaskedLM"),ykt.forEach(t),lqr=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),qe.forEach(t),iqr=i(Jl),T(c5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),RGe=i(f),Vc=n(f,"H2",{class:!0});var DVe=s(Vc);f5=n(DVe,"A",{id:!0,class:!0,href:!0});var xkt=s(f5);$4e=n(xkt,"SPAN",{});var $kt=s($4e);T(_x.$$.fragment,$kt),$kt.forEach(t),xkt.forEach(t),dqr=i(DVe),k4e=n(DVe,"SPAN",{});var kkt=s(k4e);cqr=r(kkt,"FlaxAutoModelForSeq2SeqLM"),kkt.forEach(t),DVe.forEach(t),PGe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(ux.$$.fragment,Yl),fqr=i(Yl),Xc=n(Yl,"P",{});var Xoe=s(Xc);mqr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HK=n(Xoe,"A",{href:!0});var Skt=s(HK);gqr=r(Skt,"from_pretrained()"),Skt.forEach(t),hqr=r(Xoe," class method or the "),UK=n(Xoe,"A",{href:!0});var Rkt=s(UK);pqr=r(Rkt,"from_config()"),Rkt.forEach(t),_qr=r(Xoe,` class
method.`),Xoe.forEach(t),uqr=i(Yl),bx=n(Yl,"P",{});var GVe=s(bx);bqr=r(GVe,"This class cannot be instantiated directly using "),S4e=n(GVe,"CODE",{});var Pkt=s(S4e);vqr=r(Pkt,"__init__()"),Pkt.forEach(t),Fqr=r(GVe," (throws an error)."),GVe.forEach(t),Tqr=i(Yl),zt=n(Yl,"DIV",{class:!0});var Sw=s(zt);T(vx.$$.fragment,Sw),Mqr=i(Sw),R4e=n(Sw,"P",{});var Bkt=s(R4e);Eqr=r(Bkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bkt.forEach(t),Cqr=i(Sw),zc=n(Sw,"P",{});var zoe=s(zc);wqr=r(zoe,`Note:
Loading a model from its configuration file does `),P4e=n(zoe,"STRONG",{});var Ikt=s(P4e);Aqr=r(Ikt,"not"),Ikt.forEach(t),Lqr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(zoe,"A",{href:!0});var Nkt=s(JK);yqr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),xqr=r(zoe," to load the model weights."),zoe.forEach(t),$qr=i(Sw),T(m5.$$.fragment,Sw),Sw.forEach(t),kqr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(Fx.$$.fragment,Kl),Sqr=i(Kl),B4e=n(Kl,"P",{});var qkt=s(B4e);Rqr=r(qkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qkt.forEach(t),Pqr=i(Kl),bn=n(Kl,"P",{});var Rw=s(bn);Bqr=r(Rw,"The model class to instantiate is selected based on the "),I4e=n(Rw,"CODE",{});var jkt=s(I4e);Iqr=r(jkt,"model_type"),jkt.forEach(t),Nqr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),N4e=n(Rw,"CODE",{});var Dkt=s(N4e);qqr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),jqr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(Rw,"CODE",{});var Gkt=s(q4e);Dqr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),Gqr=r(Rw,":"),Rw.forEach(t),Oqr=i(Kl),ke=n(Kl,"UL",{});var je=s(ke);g5=n(je,"LI",{});var Jqe=s(g5);j4e=n(Jqe,"STRONG",{});var Okt=s(j4e);Vqr=r(Okt,"bart"),Okt.forEach(t),Xqr=r(Jqe," \u2014 "),YK=n(Jqe,"A",{href:!0});var Vkt=s(YK);zqr=r(Vkt,"FlaxBartForConditionalGeneration"),Vkt.forEach(t),Wqr=r(Jqe," (BART model)"),Jqe.forEach(t),Qqr=i(je),h5=n(je,"LI",{});var Yqe=s(h5);D4e=n(Yqe,"STRONG",{});var Xkt=s(D4e);Hqr=r(Xkt,"blenderbot"),Xkt.forEach(t),Uqr=r(Yqe," \u2014 "),KK=n(Yqe,"A",{href:!0});var zkt=s(KK);Jqr=r(zkt,"FlaxBlenderbotForConditionalGeneration"),zkt.forEach(t),Yqr=r(Yqe," (Blenderbot model)"),Yqe.forEach(t),Kqr=i(je),p5=n(je,"LI",{});var Kqe=s(p5);G4e=n(Kqe,"STRONG",{});var Wkt=s(G4e);Zqr=r(Wkt,"blenderbot-small"),Wkt.forEach(t),ejr=r(Kqe," \u2014 "),ZK=n(Kqe,"A",{href:!0});var Qkt=s(ZK);ojr=r(Qkt,"FlaxBlenderbotSmallForConditionalGeneration"),Qkt.forEach(t),rjr=r(Kqe," (BlenderbotSmall model)"),Kqe.forEach(t),tjr=i(je),_5=n(je,"LI",{});var Zqe=s(_5);O4e=n(Zqe,"STRONG",{});var Hkt=s(O4e);ajr=r(Hkt,"encoder-decoder"),Hkt.forEach(t),njr=r(Zqe," \u2014 "),eZ=n(Zqe,"A",{href:!0});var Ukt=s(eZ);sjr=r(Ukt,"FlaxEncoderDecoderModel"),Ukt.forEach(t),ljr=r(Zqe," (Encoder decoder model)"),Zqe.forEach(t),ijr=i(je),u5=n(je,"LI",{});var eje=s(u5);V4e=n(eje,"STRONG",{});var Jkt=s(V4e);djr=r(Jkt,"longt5"),Jkt.forEach(t),cjr=r(eje," \u2014 "),oZ=n(eje,"A",{href:!0});var Ykt=s(oZ);fjr=r(Ykt,"FlaxLongT5ForConditionalGeneration"),Ykt.forEach(t),mjr=r(eje," (LongT5 model)"),eje.forEach(t),gjr=i(je),b5=n(je,"LI",{});var oje=s(b5);X4e=n(oje,"STRONG",{});var Kkt=s(X4e);hjr=r(Kkt,"marian"),Kkt.forEach(t),pjr=r(oje," \u2014 "),rZ=n(oje,"A",{href:!0});var Zkt=s(rZ);_jr=r(Zkt,"FlaxMarianMTModel"),Zkt.forEach(t),ujr=r(oje," (Marian model)"),oje.forEach(t),bjr=i(je),v5=n(je,"LI",{});var rje=s(v5);z4e=n(rje,"STRONG",{});var eSt=s(z4e);vjr=r(eSt,"mbart"),eSt.forEach(t),Fjr=r(rje," \u2014 "),tZ=n(rje,"A",{href:!0});var oSt=s(tZ);Tjr=r(oSt,"FlaxMBartForConditionalGeneration"),oSt.forEach(t),Mjr=r(rje," (mBART model)"),rje.forEach(t),Ejr=i(je),F5=n(je,"LI",{});var tje=s(F5);W4e=n(tje,"STRONG",{});var rSt=s(W4e);Cjr=r(rSt,"mt5"),rSt.forEach(t),wjr=r(tje," \u2014 "),aZ=n(tje,"A",{href:!0});var tSt=s(aZ);Ajr=r(tSt,"FlaxMT5ForConditionalGeneration"),tSt.forEach(t),Ljr=r(tje," (MT5 model)"),tje.forEach(t),yjr=i(je),T5=n(je,"LI",{});var aje=s(T5);Q4e=n(aje,"STRONG",{});var aSt=s(Q4e);xjr=r(aSt,"pegasus"),aSt.forEach(t),$jr=r(aje," \u2014 "),nZ=n(aje,"A",{href:!0});var nSt=s(nZ);kjr=r(nSt,"FlaxPegasusForConditionalGeneration"),nSt.forEach(t),Sjr=r(aje," (Pegasus model)"),aje.forEach(t),Rjr=i(je),M5=n(je,"LI",{});var nje=s(M5);H4e=n(nje,"STRONG",{});var sSt=s(H4e);Pjr=r(sSt,"t5"),sSt.forEach(t),Bjr=r(nje," \u2014 "),sZ=n(nje,"A",{href:!0});var lSt=s(sZ);Ijr=r(lSt,"FlaxT5ForConditionalGeneration"),lSt.forEach(t),Njr=r(nje," (T5 model)"),nje.forEach(t),je.forEach(t),qjr=i(Kl),T(E5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),BGe=i(f),Wc=n(f,"H2",{class:!0});var OVe=s(Wc);C5=n(OVe,"A",{id:!0,class:!0,href:!0});var iSt=s(C5);U4e=n(iSt,"SPAN",{});var dSt=s(U4e);T(Tx.$$.fragment,dSt),dSt.forEach(t),iSt.forEach(t),jjr=i(OVe),J4e=n(OVe,"SPAN",{});var cSt=s(J4e);Djr=r(cSt,"FlaxAutoModelForSequenceClassification"),cSt.forEach(t),OVe.forEach(t),IGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Mx.$$.fragment,Zl),Gjr=i(Zl),Qc=n(Zl,"P",{});var Woe=s(Qc);Ojr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lZ=n(Woe,"A",{href:!0});var fSt=s(lZ);Vjr=r(fSt,"from_pretrained()"),fSt.forEach(t),Xjr=r(Woe," class method or the "),iZ=n(Woe,"A",{href:!0});var mSt=s(iZ);zjr=r(mSt,"from_config()"),mSt.forEach(t),Wjr=r(Woe,` class
method.`),Woe.forEach(t),Qjr=i(Zl),Ex=n(Zl,"P",{});var VVe=s(Ex);Hjr=r(VVe,"This class cannot be instantiated directly using "),Y4e=n(VVe,"CODE",{});var gSt=s(Y4e);Ujr=r(gSt,"__init__()"),gSt.forEach(t),Jjr=r(VVe," (throws an error)."),VVe.forEach(t),Yjr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Pw=s(Wt);T(Cx.$$.fragment,Pw),Kjr=i(Pw),K4e=n(Pw,"P",{});var hSt=s(K4e);Zjr=r(hSt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hSt.forEach(t),eDr=i(Pw),Hc=n(Pw,"P",{});var Qoe=s(Hc);oDr=r(Qoe,`Note:
Loading a model from its configuration file does `),Z4e=n(Qoe,"STRONG",{});var pSt=s(Z4e);rDr=r(pSt,"not"),pSt.forEach(t),tDr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(Qoe,"A",{href:!0});var _St=s(dZ);aDr=r(_St,"from_pretrained()"),_St.forEach(t),nDr=r(Qoe," to load the model weights."),Qoe.forEach(t),sDr=i(Pw),T(w5.$$.fragment,Pw),Pw.forEach(t),lDr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(wx.$$.fragment,ei),iDr=i(ei),eEe=n(ei,"P",{});var uSt=s(eEe);dDr=r(uSt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uSt.forEach(t),cDr=i(ei),vn=n(ei,"P",{});var Bw=s(vn);fDr=r(Bw,"The model class to instantiate is selected based on the "),oEe=n(Bw,"CODE",{});var bSt=s(oEe);mDr=r(bSt,"model_type"),bSt.forEach(t),gDr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),rEe=n(Bw,"CODE",{});var vSt=s(rEe);hDr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),pDr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(Bw,"CODE",{});var FSt=s(tEe);_Dr=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),uDr=r(Bw,":"),Bw.forEach(t),bDr=i(ei),Se=n(ei,"UL",{});var De=s(Se);A5=n(De,"LI",{});var sje=s(A5);aEe=n(sje,"STRONG",{});var TSt=s(aEe);vDr=r(TSt,"albert"),TSt.forEach(t),FDr=r(sje," \u2014 "),cZ=n(sje,"A",{href:!0});var MSt=s(cZ);TDr=r(MSt,"FlaxAlbertForSequenceClassification"),MSt.forEach(t),MDr=r(sje," (ALBERT model)"),sje.forEach(t),EDr=i(De),L5=n(De,"LI",{});var lje=s(L5);nEe=n(lje,"STRONG",{});var ESt=s(nEe);CDr=r(ESt,"bart"),ESt.forEach(t),wDr=r(lje," \u2014 "),fZ=n(lje,"A",{href:!0});var CSt=s(fZ);ADr=r(CSt,"FlaxBartForSequenceClassification"),CSt.forEach(t),LDr=r(lje," (BART model)"),lje.forEach(t),yDr=i(De),y5=n(De,"LI",{});var ije=s(y5);sEe=n(ije,"STRONG",{});var wSt=s(sEe);xDr=r(wSt,"bert"),wSt.forEach(t),$Dr=r(ije," \u2014 "),mZ=n(ije,"A",{href:!0});var ASt=s(mZ);kDr=r(ASt,"FlaxBertForSequenceClassification"),ASt.forEach(t),SDr=r(ije," (BERT model)"),ije.forEach(t),RDr=i(De),x5=n(De,"LI",{});var dje=s(x5);lEe=n(dje,"STRONG",{});var LSt=s(lEe);PDr=r(LSt,"big_bird"),LSt.forEach(t),BDr=r(dje," \u2014 "),gZ=n(dje,"A",{href:!0});var ySt=s(gZ);IDr=r(ySt,"FlaxBigBirdForSequenceClassification"),ySt.forEach(t),NDr=r(dje," (BigBird model)"),dje.forEach(t),qDr=i(De),$5=n(De,"LI",{});var cje=s($5);iEe=n(cje,"STRONG",{});var xSt=s(iEe);jDr=r(xSt,"distilbert"),xSt.forEach(t),DDr=r(cje," \u2014 "),hZ=n(cje,"A",{href:!0});var $St=s(hZ);GDr=r($St,"FlaxDistilBertForSequenceClassification"),$St.forEach(t),ODr=r(cje," (DistilBERT model)"),cje.forEach(t),VDr=i(De),k5=n(De,"LI",{});var fje=s(k5);dEe=n(fje,"STRONG",{});var kSt=s(dEe);XDr=r(kSt,"electra"),kSt.forEach(t),zDr=r(fje," \u2014 "),pZ=n(fje,"A",{href:!0});var SSt=s(pZ);WDr=r(SSt,"FlaxElectraForSequenceClassification"),SSt.forEach(t),QDr=r(fje," (ELECTRA model)"),fje.forEach(t),HDr=i(De),S5=n(De,"LI",{});var mje=s(S5);cEe=n(mje,"STRONG",{});var RSt=s(cEe);UDr=r(RSt,"mbart"),RSt.forEach(t),JDr=r(mje," \u2014 "),_Z=n(mje,"A",{href:!0});var PSt=s(_Z);YDr=r(PSt,"FlaxMBartForSequenceClassification"),PSt.forEach(t),KDr=r(mje," (mBART model)"),mje.forEach(t),ZDr=i(De),R5=n(De,"LI",{});var gje=s(R5);fEe=n(gje,"STRONG",{});var BSt=s(fEe);eGr=r(BSt,"roberta"),BSt.forEach(t),oGr=r(gje," \u2014 "),uZ=n(gje,"A",{href:!0});var ISt=s(uZ);rGr=r(ISt,"FlaxRobertaForSequenceClassification"),ISt.forEach(t),tGr=r(gje," (RoBERTa model)"),gje.forEach(t),aGr=i(De),P5=n(De,"LI",{});var hje=s(P5);mEe=n(hje,"STRONG",{});var NSt=s(mEe);nGr=r(NSt,"roformer"),NSt.forEach(t),sGr=r(hje," \u2014 "),bZ=n(hje,"A",{href:!0});var qSt=s(bZ);lGr=r(qSt,"FlaxRoFormerForSequenceClassification"),qSt.forEach(t),iGr=r(hje," (RoFormer model)"),hje.forEach(t),dGr=i(De),B5=n(De,"LI",{});var pje=s(B5);gEe=n(pje,"STRONG",{});var jSt=s(gEe);cGr=r(jSt,"xlm-roberta"),jSt.forEach(t),fGr=r(pje," \u2014 "),vZ=n(pje,"A",{href:!0});var DSt=s(vZ);mGr=r(DSt,"FlaxXLMRobertaForSequenceClassification"),DSt.forEach(t),gGr=r(pje," (XLM-RoBERTa model)"),pje.forEach(t),De.forEach(t),hGr=i(ei),T(I5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),NGe=i(f),Uc=n(f,"H2",{class:!0});var XVe=s(Uc);N5=n(XVe,"A",{id:!0,class:!0,href:!0});var GSt=s(N5);hEe=n(GSt,"SPAN",{});var OSt=s(hEe);T(Ax.$$.fragment,OSt),OSt.forEach(t),GSt.forEach(t),pGr=i(XVe),pEe=n(XVe,"SPAN",{});var VSt=s(pEe);_Gr=r(VSt,"FlaxAutoModelForQuestionAnswering"),VSt.forEach(t),XVe.forEach(t),qGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(Lx.$$.fragment,oi),uGr=i(oi),Jc=n(oi,"P",{});var Hoe=s(Jc);bGr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FZ=n(Hoe,"A",{href:!0});var XSt=s(FZ);vGr=r(XSt,"from_pretrained()"),XSt.forEach(t),FGr=r(Hoe," class method or the "),TZ=n(Hoe,"A",{href:!0});var zSt=s(TZ);TGr=r(zSt,"from_config()"),zSt.forEach(t),MGr=r(Hoe,` class
method.`),Hoe.forEach(t),EGr=i(oi),yx=n(oi,"P",{});var zVe=s(yx);CGr=r(zVe,"This class cannot be instantiated directly using "),_Ee=n(zVe,"CODE",{});var WSt=s(_Ee);wGr=r(WSt,"__init__()"),WSt.forEach(t),AGr=r(zVe," (throws an error)."),zVe.forEach(t),LGr=i(oi),Qt=n(oi,"DIV",{class:!0});var Iw=s(Qt);T(xx.$$.fragment,Iw),yGr=i(Iw),uEe=n(Iw,"P",{});var QSt=s(uEe);xGr=r(QSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QSt.forEach(t),$Gr=i(Iw),Yc=n(Iw,"P",{});var Uoe=s(Yc);kGr=r(Uoe,`Note:
Loading a model from its configuration file does `),bEe=n(Uoe,"STRONG",{});var HSt=s(bEe);SGr=r(HSt,"not"),HSt.forEach(t),RGr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(Uoe,"A",{href:!0});var USt=s(MZ);PGr=r(USt,"from_pretrained()"),USt.forEach(t),BGr=r(Uoe," to load the model weights."),Uoe.forEach(t),IGr=i(Iw),T(q5.$$.fragment,Iw),Iw.forEach(t),NGr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T($x.$$.fragment,ri),qGr=i(ri),vEe=n(ri,"P",{});var JSt=s(vEe);jGr=r(JSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JSt.forEach(t),DGr=i(ri),Fn=n(ri,"P",{});var Nw=s(Fn);GGr=r(Nw,"The model class to instantiate is selected based on the "),FEe=n(Nw,"CODE",{});var YSt=s(FEe);OGr=r(YSt,"model_type"),YSt.forEach(t),VGr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),TEe=n(Nw,"CODE",{});var KSt=s(TEe);XGr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),zGr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(Nw,"CODE",{});var ZSt=s(MEe);WGr=r(ZSt,"pretrained_model_name_or_path"),ZSt.forEach(t),QGr=r(Nw,":"),Nw.forEach(t),HGr=i(ri),Re=n(ri,"UL",{});var Ge=s(Re);j5=n(Ge,"LI",{});var _je=s(j5);EEe=n(_je,"STRONG",{});var eRt=s(EEe);UGr=r(eRt,"albert"),eRt.forEach(t),JGr=r(_je," \u2014 "),EZ=n(_je,"A",{href:!0});var oRt=s(EZ);YGr=r(oRt,"FlaxAlbertForQuestionAnswering"),oRt.forEach(t),KGr=r(_je," (ALBERT model)"),_je.forEach(t),ZGr=i(Ge),D5=n(Ge,"LI",{});var uje=s(D5);CEe=n(uje,"STRONG",{});var rRt=s(CEe);eOr=r(rRt,"bart"),rRt.forEach(t),oOr=r(uje," \u2014 "),CZ=n(uje,"A",{href:!0});var tRt=s(CZ);rOr=r(tRt,"FlaxBartForQuestionAnswering"),tRt.forEach(t),tOr=r(uje," (BART model)"),uje.forEach(t),aOr=i(Ge),G5=n(Ge,"LI",{});var bje=s(G5);wEe=n(bje,"STRONG",{});var aRt=s(wEe);nOr=r(aRt,"bert"),aRt.forEach(t),sOr=r(bje," \u2014 "),wZ=n(bje,"A",{href:!0});var nRt=s(wZ);lOr=r(nRt,"FlaxBertForQuestionAnswering"),nRt.forEach(t),iOr=r(bje," (BERT model)"),bje.forEach(t),dOr=i(Ge),O5=n(Ge,"LI",{});var vje=s(O5);AEe=n(vje,"STRONG",{});var sRt=s(AEe);cOr=r(sRt,"big_bird"),sRt.forEach(t),fOr=r(vje," \u2014 "),AZ=n(vje,"A",{href:!0});var lRt=s(AZ);mOr=r(lRt,"FlaxBigBirdForQuestionAnswering"),lRt.forEach(t),gOr=r(vje," (BigBird model)"),vje.forEach(t),hOr=i(Ge),V5=n(Ge,"LI",{});var Fje=s(V5);LEe=n(Fje,"STRONG",{});var iRt=s(LEe);pOr=r(iRt,"distilbert"),iRt.forEach(t),_Or=r(Fje," \u2014 "),LZ=n(Fje,"A",{href:!0});var dRt=s(LZ);uOr=r(dRt,"FlaxDistilBertForQuestionAnswering"),dRt.forEach(t),bOr=r(Fje," (DistilBERT model)"),Fje.forEach(t),vOr=i(Ge),X5=n(Ge,"LI",{});var Tje=s(X5);yEe=n(Tje,"STRONG",{});var cRt=s(yEe);FOr=r(cRt,"electra"),cRt.forEach(t),TOr=r(Tje," \u2014 "),yZ=n(Tje,"A",{href:!0});var fRt=s(yZ);MOr=r(fRt,"FlaxElectraForQuestionAnswering"),fRt.forEach(t),EOr=r(Tje," (ELECTRA model)"),Tje.forEach(t),COr=i(Ge),z5=n(Ge,"LI",{});var Mje=s(z5);xEe=n(Mje,"STRONG",{});var mRt=s(xEe);wOr=r(mRt,"mbart"),mRt.forEach(t),AOr=r(Mje," \u2014 "),xZ=n(Mje,"A",{href:!0});var gRt=s(xZ);LOr=r(gRt,"FlaxMBartForQuestionAnswering"),gRt.forEach(t),yOr=r(Mje," (mBART model)"),Mje.forEach(t),xOr=i(Ge),W5=n(Ge,"LI",{});var Eje=s(W5);$Ee=n(Eje,"STRONG",{});var hRt=s($Ee);$Or=r(hRt,"roberta"),hRt.forEach(t),kOr=r(Eje," \u2014 "),$Z=n(Eje,"A",{href:!0});var pRt=s($Z);SOr=r(pRt,"FlaxRobertaForQuestionAnswering"),pRt.forEach(t),ROr=r(Eje," (RoBERTa model)"),Eje.forEach(t),POr=i(Ge),Q5=n(Ge,"LI",{});var Cje=s(Q5);kEe=n(Cje,"STRONG",{});var _Rt=s(kEe);BOr=r(_Rt,"roformer"),_Rt.forEach(t),IOr=r(Cje," \u2014 "),kZ=n(Cje,"A",{href:!0});var uRt=s(kZ);NOr=r(uRt,"FlaxRoFormerForQuestionAnswering"),uRt.forEach(t),qOr=r(Cje," (RoFormer model)"),Cje.forEach(t),jOr=i(Ge),H5=n(Ge,"LI",{});var wje=s(H5);SEe=n(wje,"STRONG",{});var bRt=s(SEe);DOr=r(bRt,"xlm-roberta"),bRt.forEach(t),GOr=r(wje," \u2014 "),SZ=n(wje,"A",{href:!0});var vRt=s(SZ);OOr=r(vRt,"FlaxXLMRobertaForQuestionAnswering"),vRt.forEach(t),VOr=r(wje," (XLM-RoBERTa model)"),wje.forEach(t),Ge.forEach(t),XOr=i(ri),T(U5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),jGe=i(f),Kc=n(f,"H2",{class:!0});var WVe=s(Kc);J5=n(WVe,"A",{id:!0,class:!0,href:!0});var FRt=s(J5);REe=n(FRt,"SPAN",{});var TRt=s(REe);T(kx.$$.fragment,TRt),TRt.forEach(t),FRt.forEach(t),zOr=i(WVe),PEe=n(WVe,"SPAN",{});var MRt=s(PEe);WOr=r(MRt,"FlaxAutoModelForTokenClassification"),MRt.forEach(t),WVe.forEach(t),DGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Sx.$$.fragment,ti),QOr=i(ti),Zc=n(ti,"P",{});var Joe=s(Zc);HOr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RZ=n(Joe,"A",{href:!0});var ERt=s(RZ);UOr=r(ERt,"from_pretrained()"),ERt.forEach(t),JOr=r(Joe," class method or the "),PZ=n(Joe,"A",{href:!0});var CRt=s(PZ);YOr=r(CRt,"from_config()"),CRt.forEach(t),KOr=r(Joe,` class
method.`),Joe.forEach(t),ZOr=i(ti),Rx=n(ti,"P",{});var QVe=s(Rx);eVr=r(QVe,"This class cannot be instantiated directly using "),BEe=n(QVe,"CODE",{});var wRt=s(BEe);oVr=r(wRt,"__init__()"),wRt.forEach(t),rVr=r(QVe," (throws an error)."),QVe.forEach(t),tVr=i(ti),Ht=n(ti,"DIV",{class:!0});var qw=s(Ht);T(Px.$$.fragment,qw),aVr=i(qw),IEe=n(qw,"P",{});var ARt=s(IEe);nVr=r(ARt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ARt.forEach(t),sVr=i(qw),ef=n(qw,"P",{});var Yoe=s(ef);lVr=r(Yoe,`Note:
Loading a model from its configuration file does `),NEe=n(Yoe,"STRONG",{});var LRt=s(NEe);iVr=r(LRt,"not"),LRt.forEach(t),dVr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(Yoe,"A",{href:!0});var yRt=s(BZ);cVr=r(yRt,"from_pretrained()"),yRt.forEach(t),fVr=r(Yoe," to load the model weights."),Yoe.forEach(t),mVr=i(qw),T(Y5.$$.fragment,qw),qw.forEach(t),gVr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Bx.$$.fragment,ai),hVr=i(ai),qEe=n(ai,"P",{});var xRt=s(qEe);pVr=r(xRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xRt.forEach(t),_Vr=i(ai),Tn=n(ai,"P",{});var jw=s(Tn);uVr=r(jw,"The model class to instantiate is selected based on the "),jEe=n(jw,"CODE",{});var $Rt=s(jEe);bVr=r($Rt,"model_type"),$Rt.forEach(t),vVr=r(jw,` property of the config object (either
passed as an argument or loaded from `),DEe=n(jw,"CODE",{});var kRt=s(DEe);FVr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),TVr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(jw,"CODE",{});var SRt=s(GEe);MVr=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),EVr=r(jw,":"),jw.forEach(t),CVr=i(ai),Ve=n(ai,"UL",{});var Fo=s(Ve);K5=n(Fo,"LI",{});var Aje=s(K5);OEe=n(Aje,"STRONG",{});var RRt=s(OEe);wVr=r(RRt,"albert"),RRt.forEach(t),AVr=r(Aje," \u2014 "),IZ=n(Aje,"A",{href:!0});var PRt=s(IZ);LVr=r(PRt,"FlaxAlbertForTokenClassification"),PRt.forEach(t),yVr=r(Aje," (ALBERT model)"),Aje.forEach(t),xVr=i(Fo),Z5=n(Fo,"LI",{});var Lje=s(Z5);VEe=n(Lje,"STRONG",{});var BRt=s(VEe);$Vr=r(BRt,"bert"),BRt.forEach(t),kVr=r(Lje," \u2014 "),NZ=n(Lje,"A",{href:!0});var IRt=s(NZ);SVr=r(IRt,"FlaxBertForTokenClassification"),IRt.forEach(t),RVr=r(Lje," (BERT model)"),Lje.forEach(t),PVr=i(Fo),e3=n(Fo,"LI",{});var yje=s(e3);XEe=n(yje,"STRONG",{});var NRt=s(XEe);BVr=r(NRt,"big_bird"),NRt.forEach(t),IVr=r(yje," \u2014 "),qZ=n(yje,"A",{href:!0});var qRt=s(qZ);NVr=r(qRt,"FlaxBigBirdForTokenClassification"),qRt.forEach(t),qVr=r(yje," (BigBird model)"),yje.forEach(t),jVr=i(Fo),o3=n(Fo,"LI",{});var xje=s(o3);zEe=n(xje,"STRONG",{});var jRt=s(zEe);DVr=r(jRt,"distilbert"),jRt.forEach(t),GVr=r(xje," \u2014 "),jZ=n(xje,"A",{href:!0});var DRt=s(jZ);OVr=r(DRt,"FlaxDistilBertForTokenClassification"),DRt.forEach(t),VVr=r(xje," (DistilBERT model)"),xje.forEach(t),XVr=i(Fo),r3=n(Fo,"LI",{});var $je=s(r3);WEe=n($je,"STRONG",{});var GRt=s(WEe);zVr=r(GRt,"electra"),GRt.forEach(t),WVr=r($je," \u2014 "),DZ=n($je,"A",{href:!0});var ORt=s(DZ);QVr=r(ORt,"FlaxElectraForTokenClassification"),ORt.forEach(t),HVr=r($je," (ELECTRA model)"),$je.forEach(t),UVr=i(Fo),t3=n(Fo,"LI",{});var kje=s(t3);QEe=n(kje,"STRONG",{});var VRt=s(QEe);JVr=r(VRt,"roberta"),VRt.forEach(t),YVr=r(kje," \u2014 "),GZ=n(kje,"A",{href:!0});var XRt=s(GZ);KVr=r(XRt,"FlaxRobertaForTokenClassification"),XRt.forEach(t),ZVr=r(kje," (RoBERTa model)"),kje.forEach(t),eXr=i(Fo),a3=n(Fo,"LI",{});var Sje=s(a3);HEe=n(Sje,"STRONG",{});var zRt=s(HEe);oXr=r(zRt,"roformer"),zRt.forEach(t),rXr=r(Sje," \u2014 "),OZ=n(Sje,"A",{href:!0});var WRt=s(OZ);tXr=r(WRt,"FlaxRoFormerForTokenClassification"),WRt.forEach(t),aXr=r(Sje," (RoFormer model)"),Sje.forEach(t),nXr=i(Fo),n3=n(Fo,"LI",{});var Rje=s(n3);UEe=n(Rje,"STRONG",{});var QRt=s(UEe);sXr=r(QRt,"xlm-roberta"),QRt.forEach(t),lXr=r(Rje," \u2014 "),VZ=n(Rje,"A",{href:!0});var HRt=s(VZ);iXr=r(HRt,"FlaxXLMRobertaForTokenClassification"),HRt.forEach(t),dXr=r(Rje," (XLM-RoBERTa model)"),Rje.forEach(t),Fo.forEach(t),cXr=i(ai),T(s3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),GGe=i(f),of=n(f,"H2",{class:!0});var HVe=s(of);l3=n(HVe,"A",{id:!0,class:!0,href:!0});var URt=s(l3);JEe=n(URt,"SPAN",{});var JRt=s(JEe);T(Ix.$$.fragment,JRt),JRt.forEach(t),URt.forEach(t),fXr=i(HVe),YEe=n(HVe,"SPAN",{});var YRt=s(YEe);mXr=r(YRt,"FlaxAutoModelForMultipleChoice"),YRt.forEach(t),HVe.forEach(t),OGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Nx.$$.fragment,ni),gXr=i(ni),rf=n(ni,"P",{});var Koe=s(rf);hXr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=n(Koe,"A",{href:!0});var KRt=s(XZ);pXr=r(KRt,"from_pretrained()"),KRt.forEach(t),_Xr=r(Koe," class method or the "),zZ=n(Koe,"A",{href:!0});var ZRt=s(zZ);uXr=r(ZRt,"from_config()"),ZRt.forEach(t),bXr=r(Koe,` class
method.`),Koe.forEach(t),vXr=i(ni),qx=n(ni,"P",{});var UVe=s(qx);FXr=r(UVe,"This class cannot be instantiated directly using "),KEe=n(UVe,"CODE",{});var ePt=s(KEe);TXr=r(ePt,"__init__()"),ePt.forEach(t),MXr=r(UVe," (throws an error)."),UVe.forEach(t),EXr=i(ni),Ut=n(ni,"DIV",{class:!0});var Dw=s(Ut);T(jx.$$.fragment,Dw),CXr=i(Dw),ZEe=n(Dw,"P",{});var oPt=s(ZEe);wXr=r(oPt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oPt.forEach(t),AXr=i(Dw),tf=n(Dw,"P",{});var Zoe=s(tf);LXr=r(Zoe,`Note:
Loading a model from its configuration file does `),eCe=n(Zoe,"STRONG",{});var rPt=s(eCe);yXr=r(rPt,"not"),rPt.forEach(t),xXr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(Zoe,"A",{href:!0});var tPt=s(WZ);$Xr=r(tPt,"from_pretrained()"),tPt.forEach(t),kXr=r(Zoe," to load the model weights."),Zoe.forEach(t),SXr=i(Dw),T(i3.$$.fragment,Dw),Dw.forEach(t),RXr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(Dx.$$.fragment,si),PXr=i(si),oCe=n(si,"P",{});var aPt=s(oCe);BXr=r(aPt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aPt.forEach(t),IXr=i(si),Mn=n(si,"P",{});var Gw=s(Mn);NXr=r(Gw,"The model class to instantiate is selected based on the "),rCe=n(Gw,"CODE",{});var nPt=s(rCe);qXr=r(nPt,"model_type"),nPt.forEach(t),jXr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),tCe=n(Gw,"CODE",{});var sPt=s(tCe);DXr=r(sPt,"pretrained_model_name_or_path"),sPt.forEach(t),GXr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(Gw,"CODE",{});var lPt=s(aCe);OXr=r(lPt,"pretrained_model_name_or_path"),lPt.forEach(t),VXr=r(Gw,":"),Gw.forEach(t),XXr=i(si),Xe=n(si,"UL",{});var To=s(Xe);d3=n(To,"LI",{});var Pje=s(d3);nCe=n(Pje,"STRONG",{});var iPt=s(nCe);zXr=r(iPt,"albert"),iPt.forEach(t),WXr=r(Pje," \u2014 "),QZ=n(Pje,"A",{href:!0});var dPt=s(QZ);QXr=r(dPt,"FlaxAlbertForMultipleChoice"),dPt.forEach(t),HXr=r(Pje," (ALBERT model)"),Pje.forEach(t),UXr=i(To),c3=n(To,"LI",{});var Bje=s(c3);sCe=n(Bje,"STRONG",{});var cPt=s(sCe);JXr=r(cPt,"bert"),cPt.forEach(t),YXr=r(Bje," \u2014 "),HZ=n(Bje,"A",{href:!0});var fPt=s(HZ);KXr=r(fPt,"FlaxBertForMultipleChoice"),fPt.forEach(t),ZXr=r(Bje," (BERT model)"),Bje.forEach(t),ezr=i(To),f3=n(To,"LI",{});var Ije=s(f3);lCe=n(Ije,"STRONG",{});var mPt=s(lCe);ozr=r(mPt,"big_bird"),mPt.forEach(t),rzr=r(Ije," \u2014 "),UZ=n(Ije,"A",{href:!0});var gPt=s(UZ);tzr=r(gPt,"FlaxBigBirdForMultipleChoice"),gPt.forEach(t),azr=r(Ije," (BigBird model)"),Ije.forEach(t),nzr=i(To),m3=n(To,"LI",{});var Nje=s(m3);iCe=n(Nje,"STRONG",{});var hPt=s(iCe);szr=r(hPt,"distilbert"),hPt.forEach(t),lzr=r(Nje," \u2014 "),JZ=n(Nje,"A",{href:!0});var pPt=s(JZ);izr=r(pPt,"FlaxDistilBertForMultipleChoice"),pPt.forEach(t),dzr=r(Nje," (DistilBERT model)"),Nje.forEach(t),czr=i(To),g3=n(To,"LI",{});var qje=s(g3);dCe=n(qje,"STRONG",{});var _Pt=s(dCe);fzr=r(_Pt,"electra"),_Pt.forEach(t),mzr=r(qje," \u2014 "),YZ=n(qje,"A",{href:!0});var uPt=s(YZ);gzr=r(uPt,"FlaxElectraForMultipleChoice"),uPt.forEach(t),hzr=r(qje," (ELECTRA model)"),qje.forEach(t),pzr=i(To),h3=n(To,"LI",{});var jje=s(h3);cCe=n(jje,"STRONG",{});var bPt=s(cCe);_zr=r(bPt,"roberta"),bPt.forEach(t),uzr=r(jje," \u2014 "),KZ=n(jje,"A",{href:!0});var vPt=s(KZ);bzr=r(vPt,"FlaxRobertaForMultipleChoice"),vPt.forEach(t),vzr=r(jje," (RoBERTa model)"),jje.forEach(t),Fzr=i(To),p3=n(To,"LI",{});var Dje=s(p3);fCe=n(Dje,"STRONG",{});var FPt=s(fCe);Tzr=r(FPt,"roformer"),FPt.forEach(t),Mzr=r(Dje," \u2014 "),ZZ=n(Dje,"A",{href:!0});var TPt=s(ZZ);Ezr=r(TPt,"FlaxRoFormerForMultipleChoice"),TPt.forEach(t),Czr=r(Dje," (RoFormer model)"),Dje.forEach(t),wzr=i(To),_3=n(To,"LI",{});var Gje=s(_3);mCe=n(Gje,"STRONG",{});var MPt=s(mCe);Azr=r(MPt,"xlm-roberta"),MPt.forEach(t),Lzr=r(Gje," \u2014 "),eee=n(Gje,"A",{href:!0});var EPt=s(eee);yzr=r(EPt,"FlaxXLMRobertaForMultipleChoice"),EPt.forEach(t),xzr=r(Gje," (XLM-RoBERTa model)"),Gje.forEach(t),To.forEach(t),$zr=i(si),T(u3.$$.fragment,si),si.forEach(t),ni.forEach(t),VGe=i(f),af=n(f,"H2",{class:!0});var JVe=s(af);b3=n(JVe,"A",{id:!0,class:!0,href:!0});var CPt=s(b3);gCe=n(CPt,"SPAN",{});var wPt=s(gCe);T(Gx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),kzr=i(JVe),hCe=n(JVe,"SPAN",{});var APt=s(hCe);Szr=r(APt,"FlaxAutoModelForNextSentencePrediction"),APt.forEach(t),JVe.forEach(t),XGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Ox.$$.fragment,li),Rzr=i(li),nf=n(li,"P",{});var ere=s(nf);Pzr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oee=n(ere,"A",{href:!0});var LPt=s(oee);Bzr=r(LPt,"from_pretrained()"),LPt.forEach(t),Izr=r(ere," class method or the "),ree=n(ere,"A",{href:!0});var yPt=s(ree);Nzr=r(yPt,"from_config()"),yPt.forEach(t),qzr=r(ere,` class
method.`),ere.forEach(t),jzr=i(li),Vx=n(li,"P",{});var YVe=s(Vx);Dzr=r(YVe,"This class cannot be instantiated directly using "),pCe=n(YVe,"CODE",{});var xPt=s(pCe);Gzr=r(xPt,"__init__()"),xPt.forEach(t),Ozr=r(YVe," (throws an error)."),YVe.forEach(t),Vzr=i(li),Jt=n(li,"DIV",{class:!0});var Ow=s(Jt);T(Xx.$$.fragment,Ow),Xzr=i(Ow),_Ce=n(Ow,"P",{});var $Pt=s(_Ce);zzr=r($Pt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Pt.forEach(t),Wzr=i(Ow),sf=n(Ow,"P",{});var ore=s(sf);Qzr=r(ore,`Note:
Loading a model from its configuration file does `),uCe=n(ore,"STRONG",{});var kPt=s(uCe);Hzr=r(kPt,"not"),kPt.forEach(t),Uzr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(ore,"A",{href:!0});var SPt=s(tee);Jzr=r(SPt,"from_pretrained()"),SPt.forEach(t),Yzr=r(ore," to load the model weights."),ore.forEach(t),Kzr=i(Ow),T(v3.$$.fragment,Ow),Ow.forEach(t),Zzr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(zx.$$.fragment,ii),eWr=i(ii),bCe=n(ii,"P",{});var RPt=s(bCe);oWr=r(RPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RPt.forEach(t),rWr=i(ii),En=n(ii,"P",{});var Vw=s(En);tWr=r(Vw,"The model class to instantiate is selected based on the "),vCe=n(Vw,"CODE",{});var PPt=s(vCe);aWr=r(PPt,"model_type"),PPt.forEach(t),nWr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),FCe=n(Vw,"CODE",{});var BPt=s(FCe);sWr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),lWr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=n(Vw,"CODE",{});var IPt=s(TCe);iWr=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),dWr=r(Vw,":"),Vw.forEach(t),cWr=i(ii),MCe=n(ii,"UL",{});var NPt=s(MCe);F3=n(NPt,"LI",{});var Oje=s(F3);ECe=n(Oje,"STRONG",{});var qPt=s(ECe);fWr=r(qPt,"bert"),qPt.forEach(t),mWr=r(Oje," \u2014 "),aee=n(Oje,"A",{href:!0});var jPt=s(aee);gWr=r(jPt,"FlaxBertForNextSentencePrediction"),jPt.forEach(t),hWr=r(Oje," (BERT model)"),Oje.forEach(t),NPt.forEach(t),pWr=i(ii),T(T3.$$.fragment,ii),ii.forEach(t),li.forEach(t),zGe=i(f),lf=n(f,"H2",{class:!0});var KVe=s(lf);M3=n(KVe,"A",{id:!0,class:!0,href:!0});var DPt=s(M3);CCe=n(DPt,"SPAN",{});var GPt=s(CCe);T(Wx.$$.fragment,GPt),GPt.forEach(t),DPt.forEach(t),_Wr=i(KVe),wCe=n(KVe,"SPAN",{});var OPt=s(wCe);uWr=r(OPt,"FlaxAutoModelForImageClassification"),OPt.forEach(t),KVe.forEach(t),WGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Qx.$$.fragment,di),bWr=i(di),df=n(di,"P",{});var rre=s(df);vWr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nee=n(rre,"A",{href:!0});var VPt=s(nee);FWr=r(VPt,"from_pretrained()"),VPt.forEach(t),TWr=r(rre," class method or the "),see=n(rre,"A",{href:!0});var XPt=s(see);MWr=r(XPt,"from_config()"),XPt.forEach(t),EWr=r(rre,` class
method.`),rre.forEach(t),CWr=i(di),Hx=n(di,"P",{});var ZVe=s(Hx);wWr=r(ZVe,"This class cannot be instantiated directly using "),ACe=n(ZVe,"CODE",{});var zPt=s(ACe);AWr=r(zPt,"__init__()"),zPt.forEach(t),LWr=r(ZVe," (throws an error)."),ZVe.forEach(t),yWr=i(di),Yt=n(di,"DIV",{class:!0});var Xw=s(Yt);T(Ux.$$.fragment,Xw),xWr=i(Xw),LCe=n(Xw,"P",{});var WPt=s(LCe);$Wr=r(WPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WPt.forEach(t),kWr=i(Xw),cf=n(Xw,"P",{});var tre=s(cf);SWr=r(tre,`Note:
Loading a model from its configuration file does `),yCe=n(tre,"STRONG",{});var QPt=s(yCe);RWr=r(QPt,"not"),QPt.forEach(t),PWr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(tre,"A",{href:!0});var HPt=s(lee);BWr=r(HPt,"from_pretrained()"),HPt.forEach(t),IWr=r(tre," to load the model weights."),tre.forEach(t),NWr=i(Xw),T(E3.$$.fragment,Xw),Xw.forEach(t),qWr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Jx.$$.fragment,ci),jWr=i(ci),xCe=n(ci,"P",{});var UPt=s(xCe);DWr=r(UPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UPt.forEach(t),GWr=i(ci),Cn=n(ci,"P",{});var zw=s(Cn);OWr=r(zw,"The model class to instantiate is selected based on the "),$Ce=n(zw,"CODE",{});var JPt=s($Ce);VWr=r(JPt,"model_type"),JPt.forEach(t),XWr=r(zw,` property of the config object (either
passed as an argument or loaded from `),kCe=n(zw,"CODE",{});var YPt=s(kCe);zWr=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),WWr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(zw,"CODE",{});var KPt=s(SCe);QWr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),HWr=r(zw,":"),zw.forEach(t),UWr=i(ci),Yx=n(ci,"UL",{});var eXe=s(Yx);C3=n(eXe,"LI",{});var Vje=s(C3);RCe=n(Vje,"STRONG",{});var ZPt=s(RCe);JWr=r(ZPt,"beit"),ZPt.forEach(t),YWr=r(Vje," \u2014 "),iee=n(Vje,"A",{href:!0});var eBt=s(iee);KWr=r(eBt,"FlaxBeitForImageClassification"),eBt.forEach(t),ZWr=r(Vje," (BEiT model)"),Vje.forEach(t),eQr=i(eXe),w3=n(eXe,"LI",{});var Xje=s(w3);PCe=n(Xje,"STRONG",{});var oBt=s(PCe);oQr=r(oBt,"vit"),oBt.forEach(t),rQr=r(Xje," \u2014 "),dee=n(Xje,"A",{href:!0});var rBt=s(dee);tQr=r(rBt,"FlaxViTForImageClassification"),rBt.forEach(t),aQr=r(Xje," (ViT model)"),Xje.forEach(t),eXe.forEach(t),nQr=i(ci),T(A3.$$.fragment,ci),ci.forEach(t),di.forEach(t),QGe=i(f),ff=n(f,"H2",{class:!0});var oXe=s(ff);L3=n(oXe,"A",{id:!0,class:!0,href:!0});var tBt=s(L3);BCe=n(tBt,"SPAN",{});var aBt=s(BCe);T(Kx.$$.fragment,aBt),aBt.forEach(t),tBt.forEach(t),sQr=i(oXe),ICe=n(oXe,"SPAN",{});var nBt=s(ICe);lQr=r(nBt,"FlaxAutoModelForVision2Seq"),nBt.forEach(t),oXe.forEach(t),HGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Zx.$$.fragment,fi),iQr=i(fi),mf=n(fi,"P",{});var are=s(mf);dQr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cee=n(are,"A",{href:!0});var sBt=s(cee);cQr=r(sBt,"from_pretrained()"),sBt.forEach(t),fQr=r(are," class method or the "),fee=n(are,"A",{href:!0});var lBt=s(fee);mQr=r(lBt,"from_config()"),lBt.forEach(t),gQr=r(are,` class
method.`),are.forEach(t),hQr=i(fi),e$=n(fi,"P",{});var rXe=s(e$);pQr=r(rXe,"This class cannot be instantiated directly using "),NCe=n(rXe,"CODE",{});var iBt=s(NCe);_Qr=r(iBt,"__init__()"),iBt.forEach(t),uQr=r(rXe," (throws an error)."),rXe.forEach(t),bQr=i(fi),Kt=n(fi,"DIV",{class:!0});var Ww=s(Kt);T(o$.$$.fragment,Ww),vQr=i(Ww),qCe=n(Ww,"P",{});var dBt=s(qCe);FQr=r(dBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dBt.forEach(t),TQr=i(Ww),gf=n(Ww,"P",{});var nre=s(gf);MQr=r(nre,`Note:
Loading a model from its configuration file does `),jCe=n(nre,"STRONG",{});var cBt=s(jCe);EQr=r(cBt,"not"),cBt.forEach(t),CQr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(nre,"A",{href:!0});var fBt=s(mee);wQr=r(fBt,"from_pretrained()"),fBt.forEach(t),AQr=r(nre," to load the model weights."),nre.forEach(t),LQr=i(Ww),T(y3.$$.fragment,Ww),Ww.forEach(t),yQr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(r$.$$.fragment,mi),xQr=i(mi),DCe=n(mi,"P",{});var mBt=s(DCe);$Qr=r(mBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mBt.forEach(t),kQr=i(mi),wn=n(mi,"P",{});var Qw=s(wn);SQr=r(Qw,"The model class to instantiate is selected based on the "),GCe=n(Qw,"CODE",{});var gBt=s(GCe);RQr=r(gBt,"model_type"),gBt.forEach(t),PQr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),OCe=n(Qw,"CODE",{});var hBt=s(OCe);BQr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),IQr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n(Qw,"CODE",{});var pBt=s(VCe);NQr=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),qQr=r(Qw,":"),Qw.forEach(t),jQr=i(mi),XCe=n(mi,"UL",{});var _Bt=s(XCe);x3=n(_Bt,"LI",{});var zje=s(x3);zCe=n(zje,"STRONG",{});var uBt=s(zCe);DQr=r(uBt,"vision-encoder-decoder"),uBt.forEach(t),GQr=r(zje," \u2014 "),gee=n(zje,"A",{href:!0});var bBt=s(gee);OQr=r(bBt,"FlaxVisionEncoderDecoderModel"),bBt.forEach(t),VQr=r(zje," (Vision Encoder decoder model)"),zje.forEach(t),_Bt.forEach(t),XQr=i(mi),T($3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(MNt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kg,"id","transformers.AutoTokenizer"),c(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoFeatureExtractor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hh,"id","transformers.AutoProcessor"),c(Hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"id","transformers.AutoModel"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d2,"id","transformers.AutoModelForCausalLM"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForMaskedLM"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForSeq2SeqLM"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForSequenceClassification"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForMultipleChoice"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForNextSentencePrediction"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForTokenClassification"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForQuestionAnswering"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForTableQuestionAnswering"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForImageClassification"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.AutoModelForVision2Seq"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.AutoModelForAudioClassification"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForAudioFrameClassification"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForCTC"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTForCTC"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForAudioXVector"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForMaskedImageModeling"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForObjectDetection"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForImageSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForSemanticSegmentation"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForInstanceSegmentation"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.TFAutoModel"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForPreTraining"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q9,"id","transformers.TFAutoModelForCausalLM"),c(q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q9,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForImageClassification"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMaskedLM"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForSeq2SeqLM"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForSequenceClassification"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForMultipleChoice"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForTokenClassification"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForQuestionAnswering"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForVision2Seq"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.FlaxAutoModel"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForCausalLM"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForPreTraining"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForMaskedLM"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aZ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nZ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(lZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(_Z,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(uZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(FZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForTokenClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(RZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(NZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(qZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(XZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eee,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(oee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ree,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aee,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForImageClassification"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(nee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(see,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iee,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dee,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForVision2Seq"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(cee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,Hw),e(rt,bf),b(f,Oe,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,Uw),e(We,yn),e(We,xn),e(xn,Jw),e(We,ui),e(We,$n),e($n,Yw),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,bk),e(Ae,vi),e(vi,vk),e(Ae,Fk),b(f,Eo,u),b(f,wa,u),e(wa,Tk),e(wa,Ff),e(Ff,Mk),e(wa,tXe),b(f,Wje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,sre),M(Kw,sre,null),e(Fi,aXe),e(Fi,lre),e(lre,nXe),b(f,Qje,u),b(f,kn,u),e(kn,sXe),e(kn,ire),e(ire,lXe),e(kn,iXe),e(kn,dre),e(dre,dXe),e(kn,cXe),b(f,Hje,u),M(Zw,f,u),b(f,Uje,u),b(f,Ek,u),e(Ek,fXe),b(f,Jje,u),M(Mf,f,u),b(f,Yje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,cre),M(eA,cre,null),e(Ti,mXe),e(Ti,fre),e(fre,gXe),b(f,Kje,u),b(f,Co,u),M(oA,Co,null),e(Co,hXe),e(Co,rA),e(rA,pXe),e(rA,Ck),e(Ck,_Xe),e(rA,uXe),e(Co,bXe),e(Co,tA),e(tA,vXe),e(tA,mre),e(mre,FXe),e(tA,TXe),e(Co,MXe),e(Co,Er),M(aA,Er,null),e(Er,EXe),e(Er,gre),e(gre,CXe),e(Er,wXe),e(Er,Mi),e(Mi,AXe),e(Mi,hre),e(hre,LXe),e(Mi,yXe),e(Mi,pre),e(pre,xXe),e(Mi,$Xe),e(Er,kXe),e(Er,A),e(A,Cf),e(Cf,_re),e(_re,SXe),e(Cf,RXe),e(Cf,wk),e(wk,PXe),e(Cf,BXe),e(A,IXe),e(A,wf),e(wf,ure),e(ure,NXe),e(wf,qXe),e(wf,Ak),e(Ak,jXe),e(wf,DXe),e(A,GXe),e(A,Af),e(Af,bre),e(bre,OXe),e(Af,VXe),e(Af,Lk),e(Lk,XXe),e(Af,zXe),e(A,WXe),e(A,Lf),e(Lf,vre),e(vre,QXe),e(Lf,HXe),e(Lf,yk),e(yk,UXe),e(Lf,JXe),e(A,YXe),e(A,yf),e(yf,Fre),e(Fre,KXe),e(yf,ZXe),e(yf,xk),e(xk,eze),e(yf,oze),e(A,rze),e(A,xf),e(xf,Tre),e(Tre,tze),e(xf,aze),e(xf,$k),e($k,nze),e(xf,sze),e(A,lze),e(A,$f),e($f,Mre),e(Mre,ize),e($f,dze),e($f,kk),e(kk,cze),e($f,fze),e(A,mze),e(A,kf),e(kf,Ere),e(Ere,gze),e(kf,hze),e(kf,Sk),e(Sk,pze),e(kf,_ze),e(A,uze),e(A,Sf),e(Sf,Cre),e(Cre,bze),e(Sf,vze),e(Sf,Rk),e(Rk,Fze),e(Sf,Tze),e(A,Mze),e(A,Rf),e(Rf,wre),e(wre,Eze),e(Rf,Cze),e(Rf,Pk),e(Pk,wze),e(Rf,Aze),e(A,Lze),e(A,Pf),e(Pf,Are),e(Are,yze),e(Pf,xze),e(Pf,Bk),e(Bk,$ze),e(Pf,kze),e(A,Sze),e(A,Bf),e(Bf,Lre),e(Lre,Rze),e(Bf,Pze),e(Bf,Ik),e(Ik,Bze),e(Bf,Ize),e(A,Nze),e(A,If),e(If,yre),e(yre,qze),e(If,jze),e(If,Nk),e(Nk,Dze),e(If,Gze),e(A,Oze),e(A,Nf),e(Nf,xre),e(xre,Vze),e(Nf,Xze),e(Nf,qk),e(qk,zze),e(Nf,Wze),e(A,Qze),e(A,qf),e(qf,$re),e($re,Hze),e(qf,Uze),e(qf,jk),e(jk,Jze),e(qf,Yze),e(A,Kze),e(A,jf),e(jf,kre),e(kre,Zze),e(jf,eWe),e(jf,Dk),e(Dk,oWe),e(jf,rWe),e(A,tWe),e(A,Df),e(Df,Sre),e(Sre,aWe),e(Df,nWe),e(Df,Gk),e(Gk,sWe),e(Df,lWe),e(A,iWe),e(A,Gf),e(Gf,Rre),e(Rre,dWe),e(Gf,cWe),e(Gf,Ok),e(Ok,fWe),e(Gf,mWe),e(A,gWe),e(A,Of),e(Of,Pre),e(Pre,hWe),e(Of,pWe),e(Of,Vk),e(Vk,_We),e(Of,uWe),e(A,bWe),e(A,Vf),e(Vf,Bre),e(Bre,vWe),e(Vf,FWe),e(Vf,Xk),e(Xk,TWe),e(Vf,MWe),e(A,EWe),e(A,Xf),e(Xf,Ire),e(Ire,CWe),e(Xf,wWe),e(Xf,zk),e(zk,AWe),e(Xf,LWe),e(A,yWe),e(A,zf),e(zf,Nre),e(Nre,xWe),e(zf,$We),e(zf,Wk),e(Wk,kWe),e(zf,SWe),e(A,RWe),e(A,Wf),e(Wf,qre),e(qre,PWe),e(Wf,BWe),e(Wf,Qk),e(Qk,IWe),e(Wf,NWe),e(A,qWe),e(A,Qf),e(Qf,jre),e(jre,jWe),e(Qf,DWe),e(Qf,Hk),e(Hk,GWe),e(Qf,OWe),e(A,VWe),e(A,Hf),e(Hf,Dre),e(Dre,XWe),e(Hf,zWe),e(Hf,Uk),e(Uk,WWe),e(Hf,QWe),e(A,HWe),e(A,Uf),e(Uf,Gre),e(Gre,UWe),e(Uf,JWe),e(Uf,Jk),e(Jk,YWe),e(Uf,KWe),e(A,ZWe),e(A,Jf),e(Jf,Ore),e(Ore,eQe),e(Jf,oQe),e(Jf,Yk),e(Yk,rQe),e(Jf,tQe),e(A,aQe),e(A,Yf),e(Yf,Vre),e(Vre,nQe),e(Yf,sQe),e(Yf,Kk),e(Kk,lQe),e(Yf,iQe),e(A,dQe),e(A,Kf),e(Kf,Xre),e(Xre,cQe),e(Kf,fQe),e(Kf,Zk),e(Zk,mQe),e(Kf,gQe),e(A,hQe),e(A,Zf),e(Zf,zre),e(zre,pQe),e(Zf,_Qe),e(Zf,eS),e(eS,uQe),e(Zf,bQe),e(A,vQe),e(A,em),e(em,Wre),e(Wre,FQe),e(em,TQe),e(em,oS),e(oS,MQe),e(em,EQe),e(A,CQe),e(A,om),e(om,Qre),e(Qre,wQe),e(om,AQe),e(om,rS),e(rS,LQe),e(om,yQe),e(A,xQe),e(A,rm),e(rm,Hre),e(Hre,$Qe),e(rm,kQe),e(rm,tS),e(tS,SQe),e(rm,RQe),e(A,PQe),e(A,tm),e(tm,Ure),e(Ure,BQe),e(tm,IQe),e(tm,aS),e(aS,NQe),e(tm,qQe),e(A,jQe),e(A,am),e(am,Jre),e(Jre,DQe),e(am,GQe),e(am,nS),e(nS,OQe),e(am,VQe),e(A,XQe),e(A,nm),e(nm,Yre),e(Yre,zQe),e(nm,WQe),e(nm,sS),e(sS,QQe),e(nm,HQe),e(A,UQe),e(A,sm),e(sm,Kre),e(Kre,JQe),e(sm,YQe),e(sm,lS),e(lS,KQe),e(sm,ZQe),e(A,eHe),e(A,lm),e(lm,Zre),e(Zre,oHe),e(lm,rHe),e(lm,iS),e(iS,tHe),e(lm,aHe),e(A,nHe),e(A,im),e(im,ete),e(ete,sHe),e(im,lHe),e(im,dS),e(dS,iHe),e(im,dHe),e(A,cHe),e(A,dm),e(dm,ote),e(ote,fHe),e(dm,mHe),e(dm,cS),e(cS,gHe),e(dm,hHe),e(A,pHe),e(A,cm),e(cm,rte),e(rte,_He),e(cm,uHe),e(cm,fS),e(fS,bHe),e(cm,vHe),e(A,FHe),e(A,fm),e(fm,tte),e(tte,THe),e(fm,MHe),e(fm,mS),e(mS,EHe),e(fm,CHe),e(A,wHe),e(A,mm),e(mm,ate),e(ate,AHe),e(mm,LHe),e(mm,gS),e(gS,yHe),e(mm,xHe),e(A,$He),e(A,gm),e(gm,nte),e(nte,kHe),e(gm,SHe),e(gm,hS),e(hS,RHe),e(gm,PHe),e(A,BHe),e(A,hm),e(hm,ste),e(ste,IHe),e(hm,NHe),e(hm,pS),e(pS,qHe),e(hm,jHe),e(A,DHe),e(A,pm),e(pm,lte),e(lte,GHe),e(pm,OHe),e(pm,_S),e(_S,VHe),e(pm,XHe),e(A,zHe),e(A,_m),e(_m,ite),e(ite,WHe),e(_m,QHe),e(_m,uS),e(uS,HHe),e(_m,UHe),e(A,JHe),e(A,um),e(um,dte),e(dte,YHe),e(um,KHe),e(um,bS),e(bS,ZHe),e(um,eUe),e(A,oUe),e(A,bm),e(bm,cte),e(cte,rUe),e(bm,tUe),e(bm,vS),e(vS,aUe),e(bm,nUe),e(A,sUe),e(A,vm),e(vm,fte),e(fte,lUe),e(vm,iUe),e(vm,FS),e(FS,dUe),e(vm,cUe),e(A,fUe),e(A,Fm),e(Fm,mte),e(mte,mUe),e(Fm,gUe),e(Fm,TS),e(TS,hUe),e(Fm,pUe),e(A,_Ue),e(A,Tm),e(Tm,gte),e(gte,uUe),e(Tm,bUe),e(Tm,MS),e(MS,vUe),e(Tm,FUe),e(A,TUe),e(A,Mm),e(Mm,hte),e(hte,MUe),e(Mm,EUe),e(Mm,ES),e(ES,CUe),e(Mm,wUe),e(A,AUe),e(A,Em),e(Em,pte),e(pte,LUe),e(Em,yUe),e(Em,CS),e(CS,xUe),e(Em,$Ue),e(A,kUe),e(A,Cm),e(Cm,_te),e(_te,SUe),e(Cm,RUe),e(Cm,wS),e(wS,PUe),e(Cm,BUe),e(A,IUe),e(A,wm),e(wm,ute),e(ute,NUe),e(wm,qUe),e(wm,AS),e(AS,jUe),e(wm,DUe),e(A,GUe),e(A,Am),e(Am,bte),e(bte,OUe),e(Am,VUe),e(Am,LS),e(LS,XUe),e(Am,zUe),e(A,WUe),e(A,Lm),e(Lm,vte),e(vte,QUe),e(Lm,HUe),e(Lm,yS),e(yS,UUe),e(Lm,JUe),e(A,YUe),e(A,ym),e(ym,Fte),e(Fte,KUe),e(ym,ZUe),e(ym,xS),e(xS,eJe),e(ym,oJe),e(A,rJe),e(A,xm),e(xm,Tte),e(Tte,tJe),e(xm,aJe),e(xm,$S),e($S,nJe),e(xm,sJe),e(A,lJe),e(A,$m),e($m,Mte),e(Mte,iJe),e($m,dJe),e($m,kS),e(kS,cJe),e($m,fJe),e(A,mJe),e(A,km),e(km,Ete),e(Ete,gJe),e(km,hJe),e(km,SS),e(SS,pJe),e(km,_Je),e(A,uJe),e(A,Sm),e(Sm,Cte),e(Cte,bJe),e(Sm,vJe),e(Sm,RS),e(RS,FJe),e(Sm,TJe),e(A,MJe),e(A,Rm),e(Rm,wte),e(wte,EJe),e(Rm,CJe),e(Rm,PS),e(PS,wJe),e(Rm,AJe),e(A,LJe),e(A,Pm),e(Pm,Ate),e(Ate,yJe),e(Pm,xJe),e(Pm,BS),e(BS,$Je),e(Pm,kJe),e(A,SJe),e(A,Bm),e(Bm,Lte),e(Lte,RJe),e(Bm,PJe),e(Bm,IS),e(IS,BJe),e(Bm,IJe),e(A,NJe),e(A,Im),e(Im,yte),e(yte,qJe),e(Im,jJe),e(Im,NS),e(NS,DJe),e(Im,GJe),e(A,OJe),e(A,Nm),e(Nm,xte),e(xte,VJe),e(Nm,XJe),e(Nm,qS),e(qS,zJe),e(Nm,WJe),e(A,QJe),e(A,qm),e(qm,$te),e($te,HJe),e(qm,UJe),e(qm,jS),e(jS,JJe),e(qm,YJe),e(A,KJe),e(A,jm),e(jm,kte),e(kte,ZJe),e(jm,eYe),e(jm,DS),e(DS,oYe),e(jm,rYe),e(A,tYe),e(A,Dm),e(Dm,Ste),e(Ste,aYe),e(Dm,nYe),e(Dm,GS),e(GS,sYe),e(Dm,lYe),e(A,iYe),e(A,Gm),e(Gm,Rte),e(Rte,dYe),e(Gm,cYe),e(Gm,OS),e(OS,fYe),e(Gm,mYe),e(A,gYe),e(A,Om),e(Om,Pte),e(Pte,hYe),e(Om,pYe),e(Om,VS),e(VS,_Ye),e(Om,uYe),e(A,bYe),e(A,Vm),e(Vm,Bte),e(Bte,vYe),e(Vm,FYe),e(Vm,XS),e(XS,TYe),e(Vm,MYe),e(A,EYe),e(A,Xm),e(Xm,Ite),e(Ite,CYe),e(Xm,wYe),e(Xm,zS),e(zS,AYe),e(Xm,LYe),e(A,yYe),e(A,zm),e(zm,Nte),e(Nte,xYe),e(zm,$Ye),e(zm,WS),e(WS,kYe),e(zm,SYe),e(A,RYe),e(A,Wm),e(Wm,qte),e(qte,PYe),e(Wm,BYe),e(Wm,QS),e(QS,IYe),e(Wm,NYe),e(A,qYe),e(A,Qm),e(Qm,jte),e(jte,jYe),e(Qm,DYe),e(Qm,HS),e(HS,GYe),e(Qm,OYe),e(A,VYe),e(A,Hm),e(Hm,Dte),e(Dte,XYe),e(Hm,zYe),e(Hm,US),e(US,WYe),e(Hm,QYe),e(A,HYe),e(A,Um),e(Um,Gte),e(Gte,UYe),e(Um,JYe),e(Um,JS),e(JS,YYe),e(Um,KYe),e(A,ZYe),e(A,Jm),e(Jm,Ote),e(Ote,eKe),e(Jm,oKe),e(Jm,YS),e(YS,rKe),e(Jm,tKe),e(A,aKe),e(A,Ym),e(Ym,Vte),e(Vte,nKe),e(Ym,sKe),e(Ym,KS),e(KS,lKe),e(Ym,iKe),e(A,dKe),e(A,Km),e(Km,Xte),e(Xte,cKe),e(Km,fKe),e(Km,ZS),e(ZS,mKe),e(Km,gKe),e(A,hKe),e(A,Zm),e(Zm,zte),e(zte,pKe),e(Zm,_Ke),e(Zm,eR),e(eR,uKe),e(Zm,bKe),e(A,vKe),e(A,eg),e(eg,Wte),e(Wte,FKe),e(eg,TKe),e(eg,oR),e(oR,MKe),e(eg,EKe),e(A,CKe),e(A,og),e(og,Qte),e(Qte,wKe),e(og,AKe),e(og,rR),e(rR,LKe),e(og,yKe),e(A,xKe),e(A,rg),e(rg,Hte),e(Hte,$Ke),e(rg,kKe),e(rg,tR),e(tR,SKe),e(rg,RKe),e(A,PKe),e(A,tg),e(tg,Ute),e(Ute,BKe),e(tg,IKe),e(tg,aR),e(aR,NKe),e(tg,qKe),e(A,jKe),e(A,ag),e(ag,Jte),e(Jte,DKe),e(ag,GKe),e(ag,nR),e(nR,OKe),e(ag,VKe),e(A,XKe),e(A,ng),e(ng,Yte),e(Yte,zKe),e(ng,WKe),e(ng,sR),e(sR,QKe),e(ng,HKe),e(A,UKe),e(A,sg),e(sg,Kte),e(Kte,JKe),e(sg,YKe),e(sg,lR),e(lR,KKe),e(sg,ZKe),e(A,eZe),e(A,lg),e(lg,Zte),e(Zte,oZe),e(lg,rZe),e(lg,iR),e(iR,tZe),e(lg,aZe),e(A,nZe),e(A,ig),e(ig,eae),e(eae,sZe),e(ig,lZe),e(ig,dR),e(dR,iZe),e(ig,dZe),e(A,cZe),e(A,dg),e(dg,oae),e(oae,fZe),e(dg,mZe),e(dg,cR),e(cR,gZe),e(dg,hZe),e(A,pZe),e(A,cg),e(cg,rae),e(rae,_Ze),e(cg,uZe),e(cg,fR),e(fR,bZe),e(cg,vZe),e(A,FZe),e(A,fg),e(fg,tae),e(tae,TZe),e(fg,MZe),e(fg,mR),e(mR,EZe),e(fg,CZe),e(A,wZe),e(A,mg),e(mg,aae),e(aae,AZe),e(mg,LZe),e(mg,gR),e(gR,yZe),e(mg,xZe),e(A,$Ze),e(A,gg),e(gg,nae),e(nae,kZe),e(gg,SZe),e(gg,hR),e(hR,RZe),e(gg,PZe),e(A,BZe),e(A,hg),e(hg,sae),e(sae,IZe),e(hg,NZe),e(hg,pR),e(pR,qZe),e(hg,jZe),e(A,DZe),e(A,pg),e(pg,lae),e(lae,GZe),e(pg,OZe),e(pg,_R),e(_R,VZe),e(pg,XZe),e(A,zZe),e(A,_g),e(_g,iae),e(iae,WZe),e(_g,QZe),e(_g,uR),e(uR,HZe),e(_g,UZe),e(A,JZe),e(A,ug),e(ug,dae),e(dae,YZe),e(ug,KZe),e(ug,bR),e(bR,ZZe),e(ug,eeo),e(A,oeo),e(A,bg),e(bg,cae),e(cae,reo),e(bg,teo),e(bg,vR),e(vR,aeo),e(bg,neo),e(A,seo),e(A,vg),e(vg,fae),e(fae,leo),e(vg,ieo),e(vg,FR),e(FR,deo),e(vg,ceo),e(A,feo),e(A,Fg),e(Fg,mae),e(mae,meo),e(Fg,geo),e(Fg,TR),e(TR,heo),e(Fg,peo),e(A,_eo),e(A,Tg),e(Tg,gae),e(gae,ueo),e(Tg,beo),e(Tg,MR),e(MR,veo),e(Tg,Feo),e(A,Teo),e(A,Mg),e(Mg,hae),e(hae,Meo),e(Mg,Eeo),e(Mg,ER),e(ER,Ceo),e(Mg,weo),e(A,Aeo),e(A,Eg),e(Eg,pae),e(pae,Leo),e(Eg,yeo),e(Eg,CR),e(CR,xeo),e(Eg,$eo),e(A,keo),e(A,Cg),e(Cg,_ae),e(_ae,Seo),e(Cg,Reo),e(Cg,wR),e(wR,Peo),e(Cg,Beo),e(A,Ieo),e(A,wg),e(wg,uae),e(uae,Neo),e(wg,qeo),e(wg,AR),e(AR,jeo),e(wg,Deo),e(A,Geo),e(A,Ag),e(Ag,bae),e(bae,Oeo),e(Ag,Veo),e(Ag,LR),e(LR,Xeo),e(Ag,zeo),e(A,Weo),e(A,Lg),e(Lg,vae),e(vae,Qeo),e(Lg,Heo),e(Lg,yR),e(yR,Ueo),e(Lg,Jeo),e(A,Yeo),e(A,yg),e(yg,Fae),e(Fae,Keo),e(yg,Zeo),e(yg,xR),e(xR,eoo),e(yg,ooo),e(Er,roo),M(xg,Er,null),e(Co,too),e(Co,$g),M(nA,$g,null),e($g,aoo),e($g,Tae),e(Tae,noo),b(f,Zje,u),b(f,Ei,u),e(Ei,kg),e(kg,Mae),M(sA,Mae,null),e(Ei,soo),e(Ei,Eae),e(Eae,loo),b(f,eDe,u),b(f,wo,u),M(lA,wo,null),e(wo,ioo),e(wo,iA),e(iA,doo),e(iA,$R),e($R,coo),e(iA,foo),e(wo,moo),e(wo,dA),e(dA,goo),e(dA,Cae),e(Cae,hoo),e(dA,poo),e(wo,_oo),e(wo,Cr),M(cA,Cr,null),e(Cr,uoo),e(Cr,wae),e(wae,boo),e(Cr,voo),e(Cr,Aa),e(Aa,Foo),e(Aa,Aae),e(Aae,Too),e(Aa,Moo),e(Aa,Lae),e(Lae,Eoo),e(Aa,Coo),e(Aa,yae),e(yae,woo),e(Aa,Aoo),e(Cr,Loo),e(Cr,k),e(k,Sn),e(Sn,xae),e(xae,yoo),e(Sn,xoo),e(Sn,kR),e(kR,$oo),e(Sn,koo),e(Sn,SR),e(SR,Soo),e(Sn,Roo),e(k,Poo),e(k,Rn),e(Rn,$ae),e($ae,Boo),e(Rn,Ioo),e(Rn,RR),e(RR,Noo),e(Rn,qoo),e(Rn,PR),e(PR,joo),e(Rn,Doo),e(k,Goo),e(k,Pn),e(Pn,kae),e(kae,Ooo),e(Pn,Voo),e(Pn,BR),e(BR,Xoo),e(Pn,zoo),e(Pn,IR),e(IR,Woo),e(Pn,Qoo),e(k,Hoo),e(k,Sg),e(Sg,Sae),e(Sae,Uoo),e(Sg,Joo),e(Sg,NR),e(NR,Yoo),e(Sg,Koo),e(k,Zoo),e(k,Bn),e(Bn,Rae),e(Rae,ero),e(Bn,oro),e(Bn,qR),e(qR,rro),e(Bn,tro),e(Bn,jR),e(jR,aro),e(Bn,nro),e(k,sro),e(k,Rg),e(Rg,Pae),e(Pae,lro),e(Rg,iro),e(Rg,DR),e(DR,dro),e(Rg,cro),e(k,fro),e(k,Pg),e(Pg,Bae),e(Bae,mro),e(Pg,gro),e(Pg,GR),e(GR,hro),e(Pg,pro),e(k,_ro),e(k,Bg),e(Bg,Iae),e(Iae,uro),e(Bg,bro),e(Bg,OR),e(OR,vro),e(Bg,Fro),e(k,Tro),e(k,In),e(In,Nae),e(Nae,Mro),e(In,Ero),e(In,VR),e(VR,Cro),e(In,wro),e(In,XR),e(XR,Aro),e(In,Lro),e(k,yro),e(k,Nn),e(Nn,qae),e(qae,xro),e(Nn,$ro),e(Nn,zR),e(zR,kro),e(Nn,Sro),e(Nn,WR),e(WR,Rro),e(Nn,Pro),e(k,Bro),e(k,qn),e(qn,jae),e(jae,Iro),e(qn,Nro),e(qn,QR),e(QR,qro),e(qn,jro),e(qn,HR),e(HR,Dro),e(qn,Gro),e(k,Oro),e(k,Ig),e(Ig,Dae),e(Dae,Vro),e(Ig,Xro),e(Ig,UR),e(UR,zro),e(Ig,Wro),e(k,Qro),e(k,Ng),e(Ng,Gae),e(Gae,Hro),e(Ng,Uro),e(Ng,JR),e(JR,Jro),e(Ng,Yro),e(k,Kro),e(k,qg),e(qg,Oae),e(Oae,Zro),e(qg,eto),e(qg,YR),e(YR,oto),e(qg,rto),e(k,tto),e(k,jn),e(jn,Vae),e(Vae,ato),e(jn,nto),e(jn,KR),e(KR,sto),e(jn,lto),e(jn,ZR),e(ZR,ito),e(jn,dto),e(k,cto),e(k,jg),e(jg,Xae),e(Xae,fto),e(jg,mto),e(jg,eP),e(eP,gto),e(jg,hto),e(k,pto),e(k,Dn),e(Dn,zae),e(zae,_to),e(Dn,uto),e(Dn,oP),e(oP,bto),e(Dn,vto),e(Dn,rP),e(rP,Fto),e(Dn,Tto),e(k,Mto),e(k,Gn),e(Gn,Wae),e(Wae,Eto),e(Gn,Cto),e(Gn,tP),e(tP,wto),e(Gn,Ato),e(Gn,aP),e(aP,Lto),e(Gn,yto),e(k,xto),e(k,On),e(On,Qae),e(Qae,$to),e(On,kto),e(On,nP),e(nP,Sto),e(On,Rto),e(On,sP),e(sP,Pto),e(On,Bto),e(k,Ito),e(k,Dg),e(Dg,Hae),e(Hae,Nto),e(Dg,qto),e(Dg,lP),e(lP,jto),e(Dg,Dto),e(k,Gto),e(k,Vn),e(Vn,Uae),e(Uae,Oto),e(Vn,Vto),e(Vn,iP),e(iP,Xto),e(Vn,zto),e(Vn,dP),e(dP,Wto),e(Vn,Qto),e(k,Hto),e(k,Xn),e(Xn,Jae),e(Jae,Uto),e(Xn,Jto),e(Xn,cP),e(cP,Yto),e(Xn,Kto),e(Xn,fP),e(fP,Zto),e(Xn,eao),e(k,oao),e(k,zn),e(zn,Yae),e(Yae,rao),e(zn,tao),e(zn,mP),e(mP,aao),e(zn,nao),e(zn,gP),e(gP,sao),e(zn,lao),e(k,iao),e(k,Wn),e(Wn,Kae),e(Kae,dao),e(Wn,cao),e(Wn,hP),e(hP,fao),e(Wn,mao),e(Wn,pP),e(pP,gao),e(Wn,hao),e(k,pao),e(k,Qn),e(Qn,Zae),e(Zae,_ao),e(Qn,uao),e(Qn,_P),e(_P,bao),e(Qn,vao),e(Qn,uP),e(uP,Fao),e(Qn,Tao),e(k,Mao),e(k,Hn),e(Hn,ene),e(ene,Eao),e(Hn,Cao),e(Hn,bP),e(bP,wao),e(Hn,Aao),e(Hn,vP),e(vP,Lao),e(Hn,yao),e(k,xao),e(k,Gg),e(Gg,one),e(one,$ao),e(Gg,kao),e(Gg,FP),e(FP,Sao),e(Gg,Rao),e(k,Pao),e(k,Un),e(Un,rne),e(rne,Bao),e(Un,Iao),e(Un,TP),e(TP,Nao),e(Un,qao),e(Un,MP),e(MP,jao),e(Un,Dao),e(k,Gao),e(k,Og),e(Og,tne),e(tne,Oao),e(Og,Vao),e(Og,EP),e(EP,Xao),e(Og,zao),e(k,Wao),e(k,Jn),e(Jn,ane),e(ane,Qao),e(Jn,Hao),e(Jn,CP),e(CP,Uao),e(Jn,Jao),e(Jn,wP),e(wP,Yao),e(Jn,Kao),e(k,Zao),e(k,Yn),e(Yn,nne),e(nne,eno),e(Yn,ono),e(Yn,AP),e(AP,rno),e(Yn,tno),e(Yn,LP),e(LP,ano),e(Yn,nno),e(k,sno),e(k,Kn),e(Kn,sne),e(sne,lno),e(Kn,ino),e(Kn,yP),e(yP,dno),e(Kn,cno),e(Kn,xP),e(xP,fno),e(Kn,mno),e(k,gno),e(k,Vg),e(Vg,lne),e(lne,hno),e(Vg,pno),e(Vg,$P),e($P,_no),e(Vg,uno),e(k,bno),e(k,Zn),e(Zn,ine),e(ine,vno),e(Zn,Fno),e(Zn,kP),e(kP,Tno),e(Zn,Mno),e(Zn,SP),e(SP,Eno),e(Zn,Cno),e(k,wno),e(k,es),e(es,dne),e(dne,Ano),e(es,Lno),e(es,RP),e(RP,yno),e(es,xno),e(es,PP),e(PP,$no),e(es,kno),e(k,Sno),e(k,Xg),e(Xg,cne),e(cne,Rno),e(Xg,Pno),e(Xg,BP),e(BP,Bno),e(Xg,Ino),e(k,Nno),e(k,os),e(os,fne),e(fne,qno),e(os,jno),e(os,IP),e(IP,Dno),e(os,Gno),e(os,NP),e(NP,Ono),e(os,Vno),e(k,Xno),e(k,rs),e(rs,mne),e(mne,zno),e(rs,Wno),e(rs,qP),e(qP,Qno),e(rs,Hno),e(rs,jP),e(jP,Uno),e(rs,Jno),e(k,Yno),e(k,ts),e(ts,gne),e(gne,Kno),e(ts,Zno),e(ts,DP),e(DP,eso),e(ts,oso),e(ts,GP),e(GP,rso),e(ts,tso),e(k,aso),e(k,as),e(as,hne),e(hne,nso),e(as,sso),e(as,OP),e(OP,lso),e(as,iso),e(as,VP),e(VP,dso),e(as,cso),e(k,fso),e(k,ns),e(ns,pne),e(pne,mso),e(ns,gso),e(ns,XP),e(XP,hso),e(ns,pso),e(ns,zP),e(zP,_so),e(ns,uso),e(k,bso),e(k,ss),e(ss,_ne),e(_ne,vso),e(ss,Fso),e(ss,WP),e(WP,Tso),e(ss,Mso),e(ss,QP),e(QP,Eso),e(ss,Cso),e(k,wso),e(k,ls),e(ls,une),e(une,Aso),e(ls,Lso),e(ls,HP),e(HP,yso),e(ls,xso),e(ls,UP),e(UP,$so),e(ls,kso),e(k,Sso),e(k,is),e(is,bne),e(bne,Rso),e(is,Pso),e(is,JP),e(JP,Bso),e(is,Iso),e(is,YP),e(YP,Nso),e(is,qso),e(k,jso),e(k,zg),e(zg,vne),e(vne,Dso),e(zg,Gso),e(zg,KP),e(KP,Oso),e(zg,Vso),e(k,Xso),e(k,ds),e(ds,Fne),e(Fne,zso),e(ds,Wso),e(ds,ZP),e(ZP,Qso),e(ds,Hso),e(ds,eB),e(eB,Uso),e(ds,Jso),e(k,Yso),e(k,Wg),e(Wg,Tne),e(Tne,Kso),e(Wg,Zso),e(Wg,oB),e(oB,elo),e(Wg,olo),e(k,rlo),e(k,Qg),e(Qg,Mne),e(Mne,tlo),e(Qg,alo),e(Qg,rB),e(rB,nlo),e(Qg,slo),e(k,llo),e(k,cs),e(cs,Ene),e(Ene,ilo),e(cs,dlo),e(cs,tB),e(tB,clo),e(cs,flo),e(cs,aB),e(aB,mlo),e(cs,glo),e(k,hlo),e(k,fs),e(fs,Cne),e(Cne,plo),e(fs,_lo),e(fs,nB),e(nB,ulo),e(fs,blo),e(fs,sB),e(sB,vlo),e(fs,Flo),e(k,Tlo),e(k,ms),e(ms,wne),e(wne,Mlo),e(ms,Elo),e(ms,lB),e(lB,Clo),e(ms,wlo),e(ms,iB),e(iB,Alo),e(ms,Llo),e(k,ylo),e(k,Hg),e(Hg,Ane),e(Ane,xlo),e(Hg,$lo),e(Hg,dB),e(dB,klo),e(Hg,Slo),e(k,Rlo),e(k,gs),e(gs,Lne),e(Lne,Plo),e(gs,Blo),e(gs,cB),e(cB,Ilo),e(gs,Nlo),e(gs,fB),e(fB,qlo),e(gs,jlo),e(k,Dlo),e(k,hs),e(hs,yne),e(yne,Glo),e(hs,Olo),e(hs,mB),e(mB,Vlo),e(hs,Xlo),e(hs,gB),e(gB,zlo),e(hs,Wlo),e(k,Qlo),e(k,ps),e(ps,xne),e(xne,Hlo),e(ps,Ulo),e(ps,hB),e(hB,Jlo),e(ps,Ylo),e(ps,pB),e(pB,Klo),e(ps,Zlo),e(k,eio),e(k,_s),e(_s,$ne),e($ne,oio),e(_s,rio),e(_s,_B),e(_B,tio),e(_s,aio),e(_s,uB),e(uB,nio),e(_s,sio),e(k,lio),e(k,us),e(us,kne),e(kne,iio),e(us,dio),e(us,bB),e(bB,cio),e(us,fio),e(us,vB),e(vB,mio),e(us,gio),e(k,hio),e(k,Ug),e(Ug,Sne),e(Sne,pio),e(Ug,_io),e(Ug,FB),e(FB,uio),e(Ug,bio),e(k,vio),e(k,bs),e(bs,Rne),e(Rne,Fio),e(bs,Tio),e(bs,TB),e(TB,Mio),e(bs,Eio),e(bs,MB),e(MB,Cio),e(bs,wio),e(k,Aio),e(k,Jg),e(Jg,Pne),e(Pne,Lio),e(Jg,yio),e(Jg,EB),e(EB,xio),e(Jg,$io),e(k,kio),e(k,Yg),e(Yg,Bne),e(Bne,Sio),e(Yg,Rio),e(Yg,CB),e(CB,Pio),e(Yg,Bio),e(k,Iio),e(k,Kg),e(Kg,Ine),e(Ine,Nio),e(Kg,qio),e(Kg,wB),e(wB,jio),e(Kg,Dio),e(k,Gio),e(k,Zg),e(Zg,Nne),e(Nne,Oio),e(Zg,Vio),e(Zg,AB),e(AB,Xio),e(Zg,zio),e(k,Wio),e(k,vs),e(vs,qne),e(qne,Qio),e(vs,Hio),e(vs,LB),e(LB,Uio),e(vs,Jio),e(vs,yB),e(yB,Yio),e(vs,Kio),e(k,Zio),e(k,eh),e(eh,jne),e(jne,edo),e(eh,odo),e(eh,xB),e(xB,rdo),e(eh,tdo),e(k,ado),e(k,Fs),e(Fs,Dne),e(Dne,ndo),e(Fs,sdo),e(Fs,$B),e($B,ldo),e(Fs,ido),e(Fs,kB),e(kB,ddo),e(Fs,cdo),e(k,fdo),e(k,Ts),e(Ts,Gne),e(Gne,mdo),e(Ts,gdo),e(Ts,SB),e(SB,hdo),e(Ts,pdo),e(Ts,RB),e(RB,_do),e(Ts,udo),e(k,bdo),e(k,Ms),e(Ms,One),e(One,vdo),e(Ms,Fdo),e(Ms,PB),e(PB,Tdo),e(Ms,Mdo),e(Ms,BB),e(BB,Edo),e(Ms,Cdo),e(k,wdo),e(k,Es),e(Es,Vne),e(Vne,Ado),e(Es,Ldo),e(Es,IB),e(IB,ydo),e(Es,xdo),e(Es,NB),e(NB,$do),e(Es,kdo),e(k,Sdo),e(k,Cs),e(Cs,Xne),e(Xne,Rdo),e(Cs,Pdo),e(Cs,qB),e(qB,Bdo),e(Cs,Ido),e(Cs,jB),e(jB,Ndo),e(Cs,qdo),e(k,jdo),e(k,ws),e(ws,zne),e(zne,Ddo),e(ws,Gdo),e(ws,DB),e(DB,Odo),e(ws,Vdo),e(ws,GB),e(GB,Xdo),e(ws,zdo),e(k,Wdo),e(k,oh),e(oh,Wne),e(Wne,Qdo),e(oh,Hdo),e(oh,OB),e(OB,Udo),e(oh,Jdo),e(k,Ydo),e(k,rh),e(rh,Qne),e(Qne,Kdo),e(rh,Zdo),e(rh,VB),e(VB,eco),e(rh,oco),e(k,rco),e(k,As),e(As,Hne),e(Hne,tco),e(As,aco),e(As,XB),e(XB,nco),e(As,sco),e(As,zB),e(zB,lco),e(As,ico),e(k,dco),e(k,Ls),e(Ls,Une),e(Une,cco),e(Ls,fco),e(Ls,WB),e(WB,mco),e(Ls,gco),e(Ls,QB),e(QB,hco),e(Ls,pco),e(k,_co),e(k,ys),e(ys,Jne),e(Jne,uco),e(ys,bco),e(ys,HB),e(HB,vco),e(ys,Fco),e(ys,UB),e(UB,Tco),e(ys,Mco),e(k,Eco),e(k,th),e(th,Yne),e(Yne,Cco),e(th,wco),e(th,JB),e(JB,Aco),e(th,Lco),e(k,yco),e(k,ah),e(ah,Kne),e(Kne,xco),e(ah,$co),e(ah,YB),e(YB,kco),e(ah,Sco),e(k,Rco),e(k,nh),e(nh,Zne),e(Zne,Pco),e(nh,Bco),e(nh,KB),e(KB,Ico),e(nh,Nco),e(k,qco),e(k,xs),e(xs,ese),e(ese,jco),e(xs,Dco),e(xs,ZB),e(ZB,Gco),e(xs,Oco),e(xs,eI),e(eI,Vco),e(xs,Xco),e(k,zco),e(k,sh),e(sh,ose),e(ose,Wco),e(sh,Qco),e(sh,oI),e(oI,Hco),e(sh,Uco),e(k,Jco),e(k,lh),e(lh,rse),e(rse,Yco),e(lh,Kco),e(lh,rI),e(rI,Zco),e(lh,efo),e(k,ofo),e(k,ih),e(ih,tse),e(tse,rfo),e(ih,tfo),e(ih,tI),e(tI,afo),e(ih,nfo),e(k,sfo),e(k,$s),e($s,ase),e(ase,lfo),e($s,ifo),e($s,aI),e(aI,dfo),e($s,cfo),e($s,nI),e(nI,ffo),e($s,mfo),e(k,gfo),e(k,dh),e(dh,nse),e(nse,hfo),e(dh,pfo),e(dh,sI),e(sI,_fo),e(dh,ufo),e(k,bfo),e(k,ch),e(ch,sse),e(sse,vfo),e(ch,Ffo),e(ch,lI),e(lI,Tfo),e(ch,Mfo),e(k,Efo),e(k,ks),e(ks,lse),e(lse,Cfo),e(ks,wfo),e(ks,iI),e(iI,Afo),e(ks,Lfo),e(ks,dI),e(dI,yfo),e(ks,xfo),e(k,$fo),e(k,Ss),e(Ss,ise),e(ise,kfo),e(Ss,Sfo),e(Ss,cI),e(cI,Rfo),e(Ss,Pfo),e(Ss,fI),e(fI,Bfo),e(Ss,Ifo),e(k,Nfo),e(k,Rs),e(Rs,dse),e(dse,qfo),e(Rs,jfo),e(Rs,mI),e(mI,Dfo),e(Rs,Gfo),e(Rs,gI),e(gI,Ofo),e(Rs,Vfo),e(k,Xfo),e(k,Ps),e(Ps,cse),e(cse,zfo),e(Ps,Wfo),e(Ps,hI),e(hI,Qfo),e(Ps,Hfo),e(Ps,pI),e(pI,Ufo),e(Ps,Jfo),e(Cr,Yfo),M(fh,Cr,null),e(wo,Kfo),e(wo,mh),M(fA,mh,null),e(mh,Zfo),e(mh,fse),e(fse,emo),b(f,oDe,u),b(f,Ci,u),e(Ci,gh),e(gh,mse),M(mA,mse,null),e(Ci,omo),e(Ci,gse),e(gse,rmo),b(f,rDe,u),b(f,Ao,u),M(gA,Ao,null),e(Ao,tmo),e(Ao,hA),e(hA,amo),e(hA,_I),e(_I,nmo),e(hA,smo),e(Ao,lmo),e(Ao,pA),e(pA,imo),e(pA,hse),e(hse,dmo),e(pA,cmo),e(Ao,fmo),e(Ao,He),M(_A,He,null),e(He,mmo),e(He,pse),e(pse,gmo),e(He,hmo),e(He,La),e(La,pmo),e(La,_se),e(_se,_mo),e(La,umo),e(La,use),e(use,bmo),e(La,vmo),e(La,bse),e(bse,Fmo),e(La,Tmo),e(He,Mmo),e(He,Y),e(Y,hh),e(hh,vse),e(vse,Emo),e(hh,Cmo),e(hh,uI),e(uI,wmo),e(hh,Amo),e(Y,Lmo),e(Y,ph),e(ph,Fse),e(Fse,ymo),e(ph,xmo),e(ph,bI),e(bI,$mo),e(ph,kmo),e(Y,Smo),e(Y,_h),e(_h,Tse),e(Tse,Rmo),e(_h,Pmo),e(_h,vI),e(vI,Bmo),e(_h,Imo),e(Y,Nmo),e(Y,uh),e(uh,Mse),e(Mse,qmo),e(uh,jmo),e(uh,FI),e(FI,Dmo),e(uh,Gmo),e(Y,Omo),e(Y,bh),e(bh,Ese),e(Ese,Vmo),e(bh,Xmo),e(bh,TI),e(TI,zmo),e(bh,Wmo),e(Y,Qmo),e(Y,vh),e(vh,Cse),e(Cse,Hmo),e(vh,Umo),e(vh,MI),e(MI,Jmo),e(vh,Ymo),e(Y,Kmo),e(Y,Fh),e(Fh,wse),e(wse,Zmo),e(Fh,ego),e(Fh,EI),e(EI,ogo),e(Fh,rgo),e(Y,tgo),e(Y,Th),e(Th,Ase),e(Ase,ago),e(Th,ngo),e(Th,CI),e(CI,sgo),e(Th,lgo),e(Y,igo),e(Y,Mh),e(Mh,Lse),e(Lse,dgo),e(Mh,cgo),e(Mh,wI),e(wI,fgo),e(Mh,mgo),e(Y,ggo),e(Y,Eh),e(Eh,yse),e(yse,hgo),e(Eh,pgo),e(Eh,AI),e(AI,_go),e(Eh,ugo),e(Y,bgo),e(Y,Ch),e(Ch,xse),e(xse,vgo),e(Ch,Fgo),e(Ch,LI),e(LI,Tgo),e(Ch,Mgo),e(Y,Ego),e(Y,wh),e(wh,$se),e($se,Cgo),e(wh,wgo),e(wh,yI),e(yI,Ago),e(wh,Lgo),e(Y,ygo),e(Y,Ah),e(Ah,kse),e(kse,xgo),e(Ah,$go),e(Ah,xI),e(xI,kgo),e(Ah,Sgo),e(Y,Rgo),e(Y,Lh),e(Lh,Sse),e(Sse,Pgo),e(Lh,Bgo),e(Lh,$I),e($I,Igo),e(Lh,Ngo),e(Y,qgo),e(Y,yh),e(yh,Rse),e(Rse,jgo),e(yh,Dgo),e(yh,kI),e(kI,Ggo),e(yh,Ogo),e(Y,Vgo),e(Y,xh),e(xh,Pse),e(Pse,Xgo),e(xh,zgo),e(xh,SI),e(SI,Wgo),e(xh,Qgo),e(Y,Hgo),e(Y,$h),e($h,Bse),e(Bse,Ugo),e($h,Jgo),e($h,RI),e(RI,Ygo),e($h,Kgo),e(Y,Zgo),e(Y,kh),e(kh,Ise),e(Ise,eho),e(kh,oho),e(kh,PI),e(PI,rho),e(kh,tho),e(Y,aho),e(Y,Sh),e(Sh,Nse),e(Nse,nho),e(Sh,sho),e(Sh,BI),e(BI,lho),e(Sh,iho),e(Y,dho),e(Y,Rh),e(Rh,qse),e(qse,cho),e(Rh,fho),e(Rh,II),e(II,mho),e(Rh,gho),e(Y,hho),e(Y,Ph),e(Ph,jse),e(jse,pho),e(Ph,_ho),e(Ph,NI),e(NI,uho),e(Ph,bho),e(Y,vho),e(Y,Bh),e(Bh,Dse),e(Dse,Fho),e(Bh,Tho),e(Bh,qI),e(qI,Mho),e(Bh,Eho),e(Y,Cho),e(Y,Ih),e(Ih,Gse),e(Gse,who),e(Ih,Aho),e(Ih,jI),e(jI,Lho),e(Ih,yho),e(Y,xho),e(Y,Nh),e(Nh,Ose),e(Ose,$ho),e(Nh,kho),e(Nh,DI),e(DI,Sho),e(Nh,Rho),e(Y,Pho),e(Y,qh),e(qh,Vse),e(Vse,Bho),e(qh,Iho),e(qh,GI),e(GI,Nho),e(qh,qho),e(Y,jho),e(Y,jh),e(jh,Xse),e(Xse,Dho),e(jh,Gho),e(jh,OI),e(OI,Oho),e(jh,Vho),e(Y,Xho),e(Y,Dh),e(Dh,zse),e(zse,zho),e(Dh,Who),e(Dh,VI),e(VI,Qho),e(Dh,Hho),e(Y,Uho),e(Y,Gh),e(Gh,Wse),e(Wse,Jho),e(Gh,Yho),e(Gh,XI),e(XI,Kho),e(Gh,Zho),e(Y,epo),e(Y,Oh),e(Oh,Qse),e(Qse,opo),e(Oh,rpo),e(Oh,zI),e(zI,tpo),e(Oh,apo),e(Y,npo),e(Y,Vh),e(Vh,Hse),e(Hse,spo),e(Vh,lpo),e(Vh,WI),e(WI,ipo),e(Vh,dpo),e(Y,cpo),e(Y,Xh),e(Xh,Use),e(Use,fpo),e(Xh,mpo),e(Xh,QI),e(QI,gpo),e(Xh,hpo),e(He,ppo),M(zh,He,null),e(He,_po),M(Wh,He,null),e(Ao,upo),e(Ao,Qh),M(uA,Qh,null),e(Qh,bpo),e(Qh,Jse),e(Jse,vpo),b(f,tDe,u),b(f,wi,u),e(wi,Hh),e(Hh,Yse),M(bA,Yse,null),e(wi,Fpo),e(wi,Kse),e(Kse,Tpo),b(f,aDe,u),b(f,Lo,u),M(vA,Lo,null),e(Lo,Mpo),e(Lo,FA),e(FA,Epo),e(FA,HI),e(HI,Cpo),e(FA,wpo),e(Lo,Apo),e(Lo,TA),e(TA,Lpo),e(TA,Zse),e(Zse,ypo),e(TA,xpo),e(Lo,$po),e(Lo,Ue),M(MA,Ue,null),e(Ue,kpo),e(Ue,ele),e(ele,Spo),e(Ue,Rpo),e(Ue,Ai),e(Ai,Ppo),e(Ai,ole),e(ole,Bpo),e(Ai,Ipo),e(Ai,rle),e(rle,Npo),e(Ai,qpo),e(Ue,jpo),e(Ue,he),e(he,Uh),e(Uh,tle),e(tle,Dpo),e(Uh,Gpo),e(Uh,UI),e(UI,Opo),e(Uh,Vpo),e(he,Xpo),e(he,Jh),e(Jh,ale),e(ale,zpo),e(Jh,Wpo),e(Jh,nle),e(nle,Qpo),e(Jh,Hpo),e(he,Upo),e(he,Yh),e(Yh,sle),e(sle,Jpo),e(Yh,Ypo),e(Yh,JI),e(JI,Kpo),e(Yh,Zpo),e(he,e_o),e(he,Kh),e(Kh,lle),e(lle,o_o),e(Kh,r_o),e(Kh,YI),e(YI,t_o),e(Kh,a_o),e(he,n_o),e(he,Zh),e(Zh,ile),e(ile,s_o),e(Zh,l_o),e(Zh,KI),e(KI,i_o),e(Zh,d_o),e(he,c_o),e(he,ep),e(ep,dle),e(dle,f_o),e(ep,m_o),e(ep,ZI),e(ZI,g_o),e(ep,h_o),e(he,p_o),e(he,op),e(op,cle),e(cle,__o),e(op,u_o),e(op,eN),e(eN,b_o),e(op,v_o),e(he,F_o),e(he,rp),e(rp,fle),e(fle,T_o),e(rp,M_o),e(rp,oN),e(oN,E_o),e(rp,C_o),e(he,w_o),e(he,tp),e(tp,mle),e(mle,A_o),e(tp,L_o),e(tp,rN),e(rN,y_o),e(tp,x_o),e(he,$_o),e(he,ap),e(ap,gle),e(gle,k_o),e(ap,S_o),e(ap,tN),e(tN,R_o),e(ap,P_o),e(he,B_o),e(he,np),e(np,hle),e(hle,I_o),e(np,N_o),e(np,aN),e(aN,q_o),e(np,j_o),e(he,D_o),e(he,sp),e(sp,ple),e(ple,G_o),e(sp,O_o),e(sp,nN),e(nN,V_o),e(sp,X_o),e(he,z_o),e(he,lp),e(lp,_le),e(_le,W_o),e(lp,Q_o),e(lp,sN),e(sN,H_o),e(lp,U_o),e(he,J_o),e(he,ip),e(ip,ule),e(ule,Y_o),e(ip,K_o),e(ip,lN),e(lN,Z_o),e(ip,euo),e(he,ouo),e(he,dp),e(dp,ble),e(ble,ruo),e(dp,tuo),e(dp,iN),e(iN,auo),e(dp,nuo),e(he,suo),e(he,cp),e(cp,vle),e(vle,luo),e(cp,iuo),e(cp,dN),e(dN,duo),e(cp,cuo),e(he,fuo),e(he,fp),e(fp,Fle),e(Fle,muo),e(fp,guo),e(fp,cN),e(cN,huo),e(fp,puo),e(Ue,_uo),M(mp,Ue,null),e(Ue,uuo),M(gp,Ue,null),e(Lo,buo),e(Lo,hp),M(EA,hp,null),e(hp,vuo),e(hp,Tle),e(Tle,Fuo),b(f,nDe,u),b(f,Li,u),e(Li,pp),e(pp,Mle),M(CA,Mle,null),e(Li,Tuo),e(Li,Ele),e(Ele,Muo),b(f,sDe,u),b(f,yo,u),M(wA,yo,null),e(yo,Euo),e(yo,yi),e(yi,Cuo),e(yi,fN),e(fN,wuo),e(yi,Auo),e(yi,mN),e(mN,Luo),e(yi,yuo),e(yo,xuo),e(yo,AA),e(AA,$uo),e(AA,Cle),e(Cle,kuo),e(AA,Suo),e(yo,Ruo),e(yo,tt),M(LA,tt,null),e(tt,Puo),e(tt,wle),e(wle,Buo),e(tt,Iuo),e(tt,xi),e(xi,Nuo),e(xi,Ale),e(Ale,quo),e(xi,juo),e(xi,gN),e(gN,Duo),e(xi,Guo),e(tt,Ouo),M(_p,tt,null),e(yo,Vuo),e(yo,Je),M(yA,Je,null),e(Je,Xuo),e(Je,Lle),e(Lle,zuo),e(Je,Wuo),e(Je,ya),e(ya,Quo),e(ya,yle),e(yle,Huo),e(ya,Uuo),e(ya,xle),e(xle,Juo),e(ya,Yuo),e(ya,$le),e($le,Kuo),e(ya,Zuo),e(Je,e2o),e(Je,y),e(y,up),e(up,kle),e(kle,o2o),e(up,r2o),e(up,hN),e(hN,t2o),e(up,a2o),e(y,n2o),e(y,bp),e(bp,Sle),e(Sle,s2o),e(bp,l2o),e(bp,pN),e(pN,i2o),e(bp,d2o),e(y,c2o),e(y,vp),e(vp,Rle),e(Rle,f2o),e(vp,m2o),e(vp,_N),e(_N,g2o),e(vp,h2o),e(y,p2o),e(y,Fp),e(Fp,Ple),e(Ple,_2o),e(Fp,u2o),e(Fp,uN),e(uN,b2o),e(Fp,v2o),e(y,F2o),e(y,Tp),e(Tp,Ble),e(Ble,T2o),e(Tp,M2o),e(Tp,bN),e(bN,E2o),e(Tp,C2o),e(y,w2o),e(y,Mp),e(Mp,Ile),e(Ile,A2o),e(Mp,L2o),e(Mp,vN),e(vN,y2o),e(Mp,x2o),e(y,$2o),e(y,Ep),e(Ep,Nle),e(Nle,k2o),e(Ep,S2o),e(Ep,FN),e(FN,R2o),e(Ep,P2o),e(y,B2o),e(y,Cp),e(Cp,qle),e(qle,I2o),e(Cp,N2o),e(Cp,TN),e(TN,q2o),e(Cp,j2o),e(y,D2o),e(y,wp),e(wp,jle),e(jle,G2o),e(wp,O2o),e(wp,MN),e(MN,V2o),e(wp,X2o),e(y,z2o),e(y,Ap),e(Ap,Dle),e(Dle,W2o),e(Ap,Q2o),e(Ap,EN),e(EN,H2o),e(Ap,U2o),e(y,J2o),e(y,Lp),e(Lp,Gle),e(Gle,Y2o),e(Lp,K2o),e(Lp,CN),e(CN,Z2o),e(Lp,e1o),e(y,o1o),e(y,yp),e(yp,Ole),e(Ole,r1o),e(yp,t1o),e(yp,wN),e(wN,a1o),e(yp,n1o),e(y,s1o),e(y,xp),e(xp,Vle),e(Vle,l1o),e(xp,i1o),e(xp,AN),e(AN,d1o),e(xp,c1o),e(y,f1o),e(y,$p),e($p,Xle),e(Xle,m1o),e($p,g1o),e($p,LN),e(LN,h1o),e($p,p1o),e(y,_1o),e(y,kp),e(kp,zle),e(zle,u1o),e(kp,b1o),e(kp,yN),e(yN,v1o),e(kp,F1o),e(y,T1o),e(y,Sp),e(Sp,Wle),e(Wle,M1o),e(Sp,E1o),e(Sp,xN),e(xN,C1o),e(Sp,w1o),e(y,A1o),e(y,Rp),e(Rp,Qle),e(Qle,L1o),e(Rp,y1o),e(Rp,$N),e($N,x1o),e(Rp,$1o),e(y,k1o),e(y,Pp),e(Pp,Hle),e(Hle,S1o),e(Pp,R1o),e(Pp,kN),e(kN,P1o),e(Pp,B1o),e(y,I1o),e(y,Bp),e(Bp,Ule),e(Ule,N1o),e(Bp,q1o),e(Bp,SN),e(SN,j1o),e(Bp,D1o),e(y,G1o),e(y,Ip),e(Ip,Jle),e(Jle,O1o),e(Ip,V1o),e(Ip,RN),e(RN,X1o),e(Ip,z1o),e(y,W1o),e(y,Np),e(Np,Yle),e(Yle,Q1o),e(Np,H1o),e(Np,PN),e(PN,U1o),e(Np,J1o),e(y,Y1o),e(y,qp),e(qp,Kle),e(Kle,K1o),e(qp,Z1o),e(qp,BN),e(BN,ebo),e(qp,obo),e(y,rbo),e(y,jp),e(jp,Zle),e(Zle,tbo),e(jp,abo),e(jp,IN),e(IN,nbo),e(jp,sbo),e(y,lbo),e(y,Dp),e(Dp,eie),e(eie,ibo),e(Dp,dbo),e(Dp,NN),e(NN,cbo),e(Dp,fbo),e(y,mbo),e(y,Gp),e(Gp,oie),e(oie,gbo),e(Gp,hbo),e(Gp,qN),e(qN,pbo),e(Gp,_bo),e(y,ubo),e(y,Op),e(Op,rie),e(rie,bbo),e(Op,vbo),e(Op,jN),e(jN,Fbo),e(Op,Tbo),e(y,Mbo),e(y,Vp),e(Vp,tie),e(tie,Ebo),e(Vp,Cbo),e(Vp,DN),e(DN,wbo),e(Vp,Abo),e(y,Lbo),e(y,Xp),e(Xp,aie),e(aie,ybo),e(Xp,xbo),e(Xp,GN),e(GN,$bo),e(Xp,kbo),e(y,Sbo),e(y,zp),e(zp,nie),e(nie,Rbo),e(zp,Pbo),e(zp,ON),e(ON,Bbo),e(zp,Ibo),e(y,Nbo),e(y,Wp),e(Wp,sie),e(sie,qbo),e(Wp,jbo),e(Wp,VN),e(VN,Dbo),e(Wp,Gbo),e(y,Obo),e(y,Qp),e(Qp,lie),e(lie,Vbo),e(Qp,Xbo),e(Qp,XN),e(XN,zbo),e(Qp,Wbo),e(y,Qbo),e(y,Hp),e(Hp,iie),e(iie,Hbo),e(Hp,Ubo),e(Hp,zN),e(zN,Jbo),e(Hp,Ybo),e(y,Kbo),e(y,Up),e(Up,die),e(die,Zbo),e(Up,evo),e(Up,WN),e(WN,ovo),e(Up,rvo),e(y,tvo),e(y,Bs),e(Bs,cie),e(cie,avo),e(Bs,nvo),e(Bs,QN),e(QN,svo),e(Bs,lvo),e(Bs,HN),e(HN,ivo),e(Bs,dvo),e(y,cvo),e(y,Jp),e(Jp,fie),e(fie,fvo),e(Jp,mvo),e(Jp,UN),e(UN,gvo),e(Jp,hvo),e(y,pvo),e(y,Yp),e(Yp,mie),e(mie,_vo),e(Yp,uvo),e(Yp,JN),e(JN,bvo),e(Yp,vvo),e(y,Fvo),e(y,Kp),e(Kp,gie),e(gie,Tvo),e(Kp,Mvo),e(Kp,YN),e(YN,Evo),e(Kp,Cvo),e(y,wvo),e(y,Zp),e(Zp,hie),e(hie,Avo),e(Zp,Lvo),e(Zp,KN),e(KN,yvo),e(Zp,xvo),e(y,$vo),e(y,e_),e(e_,pie),e(pie,kvo),e(e_,Svo),e(e_,ZN),e(ZN,Rvo),e(e_,Pvo),e(y,Bvo),e(y,o_),e(o_,_ie),e(_ie,Ivo),e(o_,Nvo),e(o_,eq),e(eq,qvo),e(o_,jvo),e(y,Dvo),e(y,r_),e(r_,uie),e(uie,Gvo),e(r_,Ovo),e(r_,oq),e(oq,Vvo),e(r_,Xvo),e(y,zvo),e(y,t_),e(t_,bie),e(bie,Wvo),e(t_,Qvo),e(t_,rq),e(rq,Hvo),e(t_,Uvo),e(y,Jvo),e(y,a_),e(a_,vie),e(vie,Yvo),e(a_,Kvo),e(a_,tq),e(tq,Zvo),e(a_,eFo),e(y,oFo),e(y,n_),e(n_,Fie),e(Fie,rFo),e(n_,tFo),e(n_,aq),e(aq,aFo),e(n_,nFo),e(y,sFo),e(y,s_),e(s_,Tie),e(Tie,lFo),e(s_,iFo),e(s_,nq),e(nq,dFo),e(s_,cFo),e(y,fFo),e(y,l_),e(l_,Mie),e(Mie,mFo),e(l_,gFo),e(l_,sq),e(sq,hFo),e(l_,pFo),e(y,_Fo),e(y,i_),e(i_,Eie),e(Eie,uFo),e(i_,bFo),e(i_,lq),e(lq,vFo),e(i_,FFo),e(y,TFo),e(y,d_),e(d_,Cie),e(Cie,MFo),e(d_,EFo),e(d_,iq),e(iq,CFo),e(d_,wFo),e(y,AFo),e(y,c_),e(c_,wie),e(wie,LFo),e(c_,yFo),e(c_,dq),e(dq,xFo),e(c_,$Fo),e(y,kFo),e(y,f_),e(f_,Aie),e(Aie,SFo),e(f_,RFo),e(f_,cq),e(cq,PFo),e(f_,BFo),e(y,IFo),e(y,m_),e(m_,Lie),e(Lie,NFo),e(m_,qFo),e(m_,fq),e(fq,jFo),e(m_,DFo),e(y,GFo),e(y,g_),e(g_,yie),e(yie,OFo),e(g_,VFo),e(g_,mq),e(mq,XFo),e(g_,zFo),e(y,WFo),e(y,h_),e(h_,xie),e(xie,QFo),e(h_,HFo),e(h_,gq),e(gq,UFo),e(h_,JFo),e(y,YFo),e(y,p_),e(p_,$ie),e($ie,KFo),e(p_,ZFo),e(p_,hq),e(hq,e6o),e(p_,o6o),e(y,r6o),e(y,__),e(__,kie),e(kie,t6o),e(__,a6o),e(__,pq),e(pq,n6o),e(__,s6o),e(y,l6o),e(y,u_),e(u_,Sie),e(Sie,i6o),e(u_,d6o),e(u_,_q),e(_q,c6o),e(u_,f6o),e(y,m6o),e(y,b_),e(b_,Rie),e(Rie,g6o),e(b_,h6o),e(b_,uq),e(uq,p6o),e(b_,_6o),e(y,u6o),e(y,v_),e(v_,Pie),e(Pie,b6o),e(v_,v6o),e(v_,bq),e(bq,F6o),e(v_,T6o),e(y,M6o),e(y,F_),e(F_,Bie),e(Bie,E6o),e(F_,C6o),e(F_,vq),e(vq,w6o),e(F_,A6o),e(y,L6o),e(y,T_),e(T_,Iie),e(Iie,y6o),e(T_,x6o),e(T_,Fq),e(Fq,$6o),e(T_,k6o),e(y,S6o),e(y,M_),e(M_,Nie),e(Nie,R6o),e(M_,P6o),e(M_,Tq),e(Tq,B6o),e(M_,I6o),e(y,N6o),e(y,E_),e(E_,qie),e(qie,q6o),e(E_,j6o),e(E_,Mq),e(Mq,D6o),e(E_,G6o),e(y,O6o),e(y,C_),e(C_,jie),e(jie,V6o),e(C_,X6o),e(C_,Eq),e(Eq,z6o),e(C_,W6o),e(y,Q6o),e(y,w_),e(w_,Die),e(Die,H6o),e(w_,U6o),e(w_,Cq),e(Cq,J6o),e(w_,Y6o),e(y,K6o),e(y,A_),e(A_,Gie),e(Gie,Z6o),e(A_,eTo),e(A_,wq),e(wq,oTo),e(A_,rTo),e(y,tTo),e(y,L_),e(L_,Oie),e(Oie,aTo),e(L_,nTo),e(L_,Aq),e(Aq,sTo),e(L_,lTo),e(y,iTo),e(y,y_),e(y_,Vie),e(Vie,dTo),e(y_,cTo),e(y_,Lq),e(Lq,fTo),e(y_,mTo),e(y,gTo),e(y,x_),e(x_,Xie),e(Xie,hTo),e(x_,pTo),e(x_,yq),e(yq,_To),e(x_,uTo),e(y,bTo),e(y,$_),e($_,zie),e(zie,vTo),e($_,FTo),e($_,xq),e(xq,TTo),e($_,MTo),e(y,ETo),e(y,k_),e(k_,Wie),e(Wie,CTo),e(k_,wTo),e(k_,$q),e($q,ATo),e(k_,LTo),e(y,yTo),e(y,S_),e(S_,Qie),e(Qie,xTo),e(S_,$To),e(S_,kq),e(kq,kTo),e(S_,STo),e(y,RTo),e(y,R_),e(R_,Hie),e(Hie,PTo),e(R_,BTo),e(R_,Sq),e(Sq,ITo),e(R_,NTo),e(y,qTo),e(y,P_),e(P_,Uie),e(Uie,jTo),e(P_,DTo),e(P_,Rq),e(Rq,GTo),e(P_,OTo),e(y,VTo),e(y,B_),e(B_,Jie),e(Jie,XTo),e(B_,zTo),e(B_,Pq),e(Pq,WTo),e(B_,QTo),e(y,HTo),e(y,I_),e(I_,Yie),e(Yie,UTo),e(I_,JTo),e(I_,Bq),e(Bq,YTo),e(I_,KTo),e(y,ZTo),e(y,N_),e(N_,Kie),e(Kie,e7o),e(N_,o7o),e(N_,Iq),e(Iq,r7o),e(N_,t7o),e(y,a7o),e(y,q_),e(q_,Zie),e(Zie,n7o),e(q_,s7o),e(q_,Nq),e(Nq,l7o),e(q_,i7o),e(y,d7o),e(y,j_),e(j_,ede),e(ede,c7o),e(j_,f7o),e(j_,qq),e(qq,m7o),e(j_,g7o),e(y,h7o),e(y,D_),e(D_,ode),e(ode,p7o),e(D_,_7o),e(D_,jq),e(jq,u7o),e(D_,b7o),e(y,v7o),e(y,G_),e(G_,rde),e(rde,F7o),e(G_,T7o),e(G_,Dq),e(Dq,M7o),e(G_,E7o),e(y,C7o),e(y,O_),e(O_,tde),e(tde,w7o),e(O_,A7o),e(O_,Gq),e(Gq,L7o),e(O_,y7o),e(y,x7o),e(y,V_),e(V_,ade),e(ade,$7o),e(V_,k7o),e(V_,Oq),e(Oq,S7o),e(V_,R7o),e(y,P7o),e(y,X_),e(X_,nde),e(nde,B7o),e(X_,I7o),e(X_,Vq),e(Vq,N7o),e(X_,q7o),e(y,j7o),e(y,z_),e(z_,sde),e(sde,D7o),e(z_,G7o),e(z_,Xq),e(Xq,O7o),e(z_,V7o),e(y,X7o),e(y,W_),e(W_,lde),e(lde,z7o),e(W_,W7o),e(W_,zq),e(zq,Q7o),e(W_,H7o),e(y,U7o),e(y,Q_),e(Q_,ide),e(ide,J7o),e(Q_,Y7o),e(Q_,Wq),e(Wq,K7o),e(Q_,Z7o),e(y,e9o),e(y,H_),e(H_,dde),e(dde,o9o),e(H_,r9o),e(H_,Qq),e(Qq,t9o),e(H_,a9o),e(y,n9o),e(y,U_),e(U_,cde),e(cde,s9o),e(U_,l9o),e(U_,Hq),e(Hq,i9o),e(U_,d9o),e(y,c9o),e(y,J_),e(J_,fde),e(fde,f9o),e(J_,m9o),e(J_,Uq),e(Uq,g9o),e(J_,h9o),e(y,p9o),e(y,Y_),e(Y_,mde),e(mde,_9o),e(Y_,u9o),e(Y_,Jq),e(Jq,b9o),e(Y_,v9o),e(y,F9o),e(y,K_),e(K_,gde),e(gde,T9o),e(K_,M9o),e(K_,Yq),e(Yq,E9o),e(K_,C9o),e(y,w9o),e(y,Z_),e(Z_,hde),e(hde,A9o),e(Z_,L9o),e(Z_,Kq),e(Kq,y9o),e(Z_,x9o),e(y,$9o),e(y,eu),e(eu,pde),e(pde,k9o),e(eu,S9o),e(eu,Zq),e(Zq,R9o),e(eu,P9o),e(y,B9o),e(y,ou),e(ou,_de),e(_de,I9o),e(ou,N9o),e(ou,ej),e(ej,q9o),e(ou,j9o),e(y,D9o),e(y,ru),e(ru,ude),e(ude,G9o),e(ru,O9o),e(ru,oj),e(oj,V9o),e(ru,X9o),e(y,z9o),e(y,tu),e(tu,bde),e(bde,W9o),e(tu,Q9o),e(tu,rj),e(rj,H9o),e(tu,U9o),e(y,J9o),e(y,au),e(au,vde),e(vde,Y9o),e(au,K9o),e(au,tj),e(tj,Z9o),e(au,eMo),e(y,oMo),e(y,nu),e(nu,Fde),e(Fde,rMo),e(nu,tMo),e(nu,aj),e(aj,aMo),e(nu,nMo),e(y,sMo),e(y,su),e(su,Tde),e(Tde,lMo),e(su,iMo),e(su,nj),e(nj,dMo),e(su,cMo),e(y,fMo),e(y,lu),e(lu,Mde),e(Mde,mMo),e(lu,gMo),e(lu,sj),e(sj,hMo),e(lu,pMo),e(y,_Mo),e(y,iu),e(iu,Ede),e(Ede,uMo),e(iu,bMo),e(iu,lj),e(lj,vMo),e(iu,FMo),e(y,TMo),e(y,du),e(du,Cde),e(Cde,MMo),e(du,EMo),e(du,ij),e(ij,CMo),e(du,wMo),e(y,AMo),e(y,cu),e(cu,wde),e(wde,LMo),e(cu,yMo),e(cu,dj),e(dj,xMo),e(cu,$Mo),e(y,kMo),e(y,fu),e(fu,Ade),e(Ade,SMo),e(fu,RMo),e(fu,cj),e(cj,PMo),e(fu,BMo),e(y,IMo),e(y,mu),e(mu,Lde),e(Lde,NMo),e(mu,qMo),e(mu,fj),e(fj,jMo),e(mu,DMo),e(y,GMo),e(y,gu),e(gu,yde),e(yde,OMo),e(gu,VMo),e(gu,mj),e(mj,XMo),e(gu,zMo),e(Je,WMo),e(Je,hu),e(hu,QMo),e(hu,xde),e(xde,HMo),e(hu,UMo),e(hu,$de),e($de,JMo),e(Je,YMo),M(pu,Je,null),b(f,lDe,u),b(f,$i,u),e($i,_u),e(_u,kde),M(xA,kde,null),e($i,KMo),e($i,Sde),e(Sde,ZMo),b(f,iDe,u),b(f,xo,u),M($A,xo,null),e(xo,e4o),e(xo,ki),e(ki,o4o),e(ki,gj),e(gj,r4o),e(ki,t4o),e(ki,hj),e(hj,a4o),e(ki,n4o),e(xo,s4o),e(xo,kA),e(kA,l4o),e(kA,Rde),e(Rde,i4o),e(kA,d4o),e(xo,c4o),e(xo,at),M(SA,at,null),e(at,f4o),e(at,Pde),e(Pde,m4o),e(at,g4o),e(at,Si),e(Si,h4o),e(Si,Bde),e(Bde,p4o),e(Si,_4o),e(Si,pj),e(pj,u4o),e(Si,b4o),e(at,v4o),M(uu,at,null),e(xo,F4o),e(xo,Ye),M(RA,Ye,null),e(Ye,T4o),e(Ye,Ide),e(Ide,M4o),e(Ye,E4o),e(Ye,xa),e(xa,C4o),e(xa,Nde),e(Nde,w4o),e(xa,A4o),e(xa,qde),e(qde,L4o),e(xa,y4o),e(xa,jde),e(jde,x4o),e(xa,$4o),e(Ye,k4o),e(Ye,G),e(G,bu),e(bu,Dde),e(Dde,S4o),e(bu,R4o),e(bu,_j),e(_j,P4o),e(bu,B4o),e(G,I4o),e(G,vu),e(vu,Gde),e(Gde,N4o),e(vu,q4o),e(vu,uj),e(uj,j4o),e(vu,D4o),e(G,G4o),e(G,Fu),e(Fu,Ode),e(Ode,O4o),e(Fu,V4o),e(Fu,bj),e(bj,X4o),e(Fu,z4o),e(G,W4o),e(G,Tu),e(Tu,Vde),e(Vde,Q4o),e(Tu,H4o),e(Tu,vj),e(vj,U4o),e(Tu,J4o),e(G,Y4o),e(G,Mu),e(Mu,Xde),e(Xde,K4o),e(Mu,Z4o),e(Mu,Fj),e(Fj,eEo),e(Mu,oEo),e(G,rEo),e(G,Eu),e(Eu,zde),e(zde,tEo),e(Eu,aEo),e(Eu,Tj),e(Tj,nEo),e(Eu,sEo),e(G,lEo),e(G,Cu),e(Cu,Wde),e(Wde,iEo),e(Cu,dEo),e(Cu,Mj),e(Mj,cEo),e(Cu,fEo),e(G,mEo),e(G,wu),e(wu,Qde),e(Qde,gEo),e(wu,hEo),e(wu,Ej),e(Ej,pEo),e(wu,_Eo),e(G,uEo),e(G,Au),e(Au,Hde),e(Hde,bEo),e(Au,vEo),e(Au,Cj),e(Cj,FEo),e(Au,TEo),e(G,MEo),e(G,Lu),e(Lu,Ude),e(Ude,EEo),e(Lu,CEo),e(Lu,wj),e(wj,wEo),e(Lu,AEo),e(G,LEo),e(G,yu),e(yu,Jde),e(Jde,yEo),e(yu,xEo),e(yu,Aj),e(Aj,$Eo),e(yu,kEo),e(G,SEo),e(G,xu),e(xu,Yde),e(Yde,REo),e(xu,PEo),e(xu,Lj),e(Lj,BEo),e(xu,IEo),e(G,NEo),e(G,$u),e($u,Kde),e(Kde,qEo),e($u,jEo),e($u,yj),e(yj,DEo),e($u,GEo),e(G,OEo),e(G,ku),e(ku,Zde),e(Zde,VEo),e(ku,XEo),e(ku,xj),e(xj,zEo),e(ku,WEo),e(G,QEo),e(G,Su),e(Su,ece),e(ece,HEo),e(Su,UEo),e(Su,$j),e($j,JEo),e(Su,YEo),e(G,KEo),e(G,Ru),e(Ru,oce),e(oce,ZEo),e(Ru,eCo),e(Ru,kj),e(kj,oCo),e(Ru,rCo),e(G,tCo),e(G,Pu),e(Pu,rce),e(rce,aCo),e(Pu,nCo),e(Pu,Sj),e(Sj,sCo),e(Pu,lCo),e(G,iCo),e(G,Bu),e(Bu,tce),e(tce,dCo),e(Bu,cCo),e(Bu,Rj),e(Rj,fCo),e(Bu,mCo),e(G,gCo),e(G,Iu),e(Iu,ace),e(ace,hCo),e(Iu,pCo),e(Iu,Pj),e(Pj,_Co),e(Iu,uCo),e(G,bCo),e(G,Nu),e(Nu,nce),e(nce,vCo),e(Nu,FCo),e(Nu,Bj),e(Bj,TCo),e(Nu,MCo),e(G,ECo),e(G,qu),e(qu,sce),e(sce,CCo),e(qu,wCo),e(qu,Ij),e(Ij,ACo),e(qu,LCo),e(G,yCo),e(G,ju),e(ju,lce),e(lce,xCo),e(ju,$Co),e(ju,Nj),e(Nj,kCo),e(ju,SCo),e(G,RCo),e(G,Du),e(Du,ice),e(ice,PCo),e(Du,BCo),e(Du,qj),e(qj,ICo),e(Du,NCo),e(G,qCo),e(G,Gu),e(Gu,dce),e(dce,jCo),e(Gu,DCo),e(Gu,jj),e(jj,GCo),e(Gu,OCo),e(G,VCo),e(G,Ou),e(Ou,cce),e(cce,XCo),e(Ou,zCo),e(Ou,Dj),e(Dj,WCo),e(Ou,QCo),e(G,HCo),e(G,Vu),e(Vu,fce),e(fce,UCo),e(Vu,JCo),e(Vu,Gj),e(Gj,YCo),e(Vu,KCo),e(G,ZCo),e(G,Xu),e(Xu,mce),e(mce,e5o),e(Xu,o5o),e(Xu,Oj),e(Oj,r5o),e(Xu,t5o),e(G,a5o),e(G,zu),e(zu,gce),e(gce,n5o),e(zu,s5o),e(zu,Vj),e(Vj,l5o),e(zu,i5o),e(G,d5o),e(G,Wu),e(Wu,hce),e(hce,c5o),e(Wu,f5o),e(Wu,Xj),e(Xj,m5o),e(Wu,g5o),e(G,h5o),e(G,Qu),e(Qu,pce),e(pce,p5o),e(Qu,_5o),e(Qu,zj),e(zj,u5o),e(Qu,b5o),e(G,v5o),e(G,Hu),e(Hu,_ce),e(_ce,F5o),e(Hu,T5o),e(Hu,Wj),e(Wj,M5o),e(Hu,E5o),e(G,C5o),e(G,Uu),e(Uu,uce),e(uce,w5o),e(Uu,A5o),e(Uu,Qj),e(Qj,L5o),e(Uu,y5o),e(G,x5o),e(G,Ju),e(Ju,bce),e(bce,$5o),e(Ju,k5o),e(Ju,Hj),e(Hj,S5o),e(Ju,R5o),e(G,P5o),e(G,Yu),e(Yu,vce),e(vce,B5o),e(Yu,I5o),e(Yu,Uj),e(Uj,N5o),e(Yu,q5o),e(G,j5o),e(G,Ku),e(Ku,Fce),e(Fce,D5o),e(Ku,G5o),e(Ku,Jj),e(Jj,O5o),e(Ku,V5o),e(G,X5o),e(G,Zu),e(Zu,Tce),e(Tce,z5o),e(Zu,W5o),e(Zu,Yj),e(Yj,Q5o),e(Zu,H5o),e(G,U5o),e(G,e2),e(e2,Mce),e(Mce,J5o),e(e2,Y5o),e(e2,Kj),e(Kj,K5o),e(e2,Z5o),e(G,e3o),e(G,o2),e(o2,Ece),e(Ece,o3o),e(o2,r3o),e(o2,Zj),e(Zj,t3o),e(o2,a3o),e(G,n3o),e(G,r2),e(r2,Cce),e(Cce,s3o),e(r2,l3o),e(r2,eD),e(eD,i3o),e(r2,d3o),e(G,c3o),e(G,t2),e(t2,wce),e(wce,f3o),e(t2,m3o),e(t2,oD),e(oD,g3o),e(t2,h3o),e(G,p3o),e(G,a2),e(a2,Ace),e(Ace,_3o),e(a2,u3o),e(a2,rD),e(rD,b3o),e(a2,v3o),e(G,F3o),e(G,n2),e(n2,Lce),e(Lce,T3o),e(n2,M3o),e(n2,tD),e(tD,E3o),e(n2,C3o),e(G,w3o),e(G,s2),e(s2,yce),e(yce,A3o),e(s2,L3o),e(s2,aD),e(aD,y3o),e(s2,x3o),e(Ye,$3o),e(Ye,l2),e(l2,k3o),e(l2,xce),e(xce,S3o),e(l2,R3o),e(l2,$ce),e($ce,P3o),e(Ye,B3o),M(i2,Ye,null),b(f,dDe,u),b(f,Ri,u),e(Ri,d2),e(d2,kce),M(PA,kce,null),e(Ri,I3o),e(Ri,Sce),e(Sce,N3o),b(f,cDe,u),b(f,$o,u),M(BA,$o,null),e($o,q3o),e($o,Pi),e(Pi,j3o),e(Pi,nD),e(nD,D3o),e(Pi,G3o),e(Pi,sD),e(sD,O3o),e(Pi,V3o),e($o,X3o),e($o,IA),e(IA,z3o),e(IA,Rce),e(Rce,W3o),e(IA,Q3o),e($o,H3o),e($o,nt),M(NA,nt,null),e(nt,U3o),e(nt,Pce),e(Pce,J3o),e(nt,Y3o),e(nt,Bi),e(Bi,K3o),e(Bi,Bce),e(Bce,Z3o),e(Bi,e0o),e(Bi,lD),e(lD,o0o),e(Bi,r0o),e(nt,t0o),M(c2,nt,null),e($o,a0o),e($o,Ke),M(qA,Ke,null),e(Ke,n0o),e(Ke,Ice),e(Ice,s0o),e(Ke,l0o),e(Ke,$a),e($a,i0o),e($a,Nce),e(Nce,d0o),e($a,c0o),e($a,qce),e(qce,f0o),e($a,m0o),e($a,jce),e(jce,g0o),e($a,h0o),e(Ke,p0o),e(Ke,z),e(z,f2),e(f2,Dce),e(Dce,_0o),e(f2,u0o),e(f2,iD),e(iD,b0o),e(f2,v0o),e(z,F0o),e(z,m2),e(m2,Gce),e(Gce,T0o),e(m2,M0o),e(m2,dD),e(dD,E0o),e(m2,C0o),e(z,w0o),e(z,g2),e(g2,Oce),e(Oce,A0o),e(g2,L0o),e(g2,cD),e(cD,y0o),e(g2,x0o),e(z,$0o),e(z,h2),e(h2,Vce),e(Vce,k0o),e(h2,S0o),e(h2,fD),e(fD,R0o),e(h2,P0o),e(z,B0o),e(z,p2),e(p2,Xce),e(Xce,I0o),e(p2,N0o),e(p2,mD),e(mD,q0o),e(p2,j0o),e(z,D0o),e(z,_2),e(_2,zce),e(zce,G0o),e(_2,O0o),e(_2,gD),e(gD,V0o),e(_2,X0o),e(z,z0o),e(z,u2),e(u2,Wce),e(Wce,W0o),e(u2,Q0o),e(u2,hD),e(hD,H0o),e(u2,U0o),e(z,J0o),e(z,b2),e(b2,Qce),e(Qce,Y0o),e(b2,K0o),e(b2,pD),e(pD,Z0o),e(b2,ewo),e(z,owo),e(z,v2),e(v2,Hce),e(Hce,rwo),e(v2,two),e(v2,_D),e(_D,awo),e(v2,nwo),e(z,swo),e(z,F2),e(F2,Uce),e(Uce,lwo),e(F2,iwo),e(F2,uD),e(uD,dwo),e(F2,cwo),e(z,fwo),e(z,T2),e(T2,Jce),e(Jce,mwo),e(T2,gwo),e(T2,bD),e(bD,hwo),e(T2,pwo),e(z,_wo),e(z,M2),e(M2,Yce),e(Yce,uwo),e(M2,bwo),e(M2,vD),e(vD,vwo),e(M2,Fwo),e(z,Two),e(z,E2),e(E2,Kce),e(Kce,Mwo),e(E2,Ewo),e(E2,FD),e(FD,Cwo),e(E2,wwo),e(z,Awo),e(z,C2),e(C2,Zce),e(Zce,Lwo),e(C2,ywo),e(C2,TD),e(TD,xwo),e(C2,$wo),e(z,kwo),e(z,w2),e(w2,efe),e(efe,Swo),e(w2,Rwo),e(w2,MD),e(MD,Pwo),e(w2,Bwo),e(z,Iwo),e(z,A2),e(A2,ofe),e(ofe,Nwo),e(A2,qwo),e(A2,ED),e(ED,jwo),e(A2,Dwo),e(z,Gwo),e(z,L2),e(L2,rfe),e(rfe,Owo),e(L2,Vwo),e(L2,CD),e(CD,Xwo),e(L2,zwo),e(z,Wwo),e(z,y2),e(y2,tfe),e(tfe,Qwo),e(y2,Hwo),e(y2,wD),e(wD,Uwo),e(y2,Jwo),e(z,Ywo),e(z,x2),e(x2,afe),e(afe,Kwo),e(x2,Zwo),e(x2,AD),e(AD,eAo),e(x2,oAo),e(z,rAo),e(z,$2),e($2,nfe),e(nfe,tAo),e($2,aAo),e($2,LD),e(LD,nAo),e($2,sAo),e(z,lAo),e(z,k2),e(k2,sfe),e(sfe,iAo),e(k2,dAo),e(k2,yD),e(yD,cAo),e(k2,fAo),e(z,mAo),e(z,S2),e(S2,lfe),e(lfe,gAo),e(S2,hAo),e(S2,xD),e(xD,pAo),e(S2,_Ao),e(z,uAo),e(z,R2),e(R2,ife),e(ife,bAo),e(R2,vAo),e(R2,$D),e($D,FAo),e(R2,TAo),e(z,MAo),e(z,P2),e(P2,dfe),e(dfe,EAo),e(P2,CAo),e(P2,kD),e(kD,wAo),e(P2,AAo),e(z,LAo),e(z,B2),e(B2,cfe),e(cfe,yAo),e(B2,xAo),e(B2,SD),e(SD,$Ao),e(B2,kAo),e(z,SAo),e(z,I2),e(I2,ffe),e(ffe,RAo),e(I2,PAo),e(I2,RD),e(RD,BAo),e(I2,IAo),e(z,NAo),e(z,N2),e(N2,mfe),e(mfe,qAo),e(N2,jAo),e(N2,PD),e(PD,DAo),e(N2,GAo),e(z,OAo),e(z,q2),e(q2,gfe),e(gfe,VAo),e(q2,XAo),e(q2,BD),e(BD,zAo),e(q2,WAo),e(z,QAo),e(z,j2),e(j2,hfe),e(hfe,HAo),e(j2,UAo),e(j2,ID),e(ID,JAo),e(j2,YAo),e(z,KAo),e(z,D2),e(D2,pfe),e(pfe,ZAo),e(D2,eLo),e(D2,ND),e(ND,oLo),e(D2,rLo),e(z,tLo),e(z,G2),e(G2,_fe),e(_fe,aLo),e(G2,nLo),e(G2,qD),e(qD,sLo),e(G2,lLo),e(z,iLo),e(z,O2),e(O2,ufe),e(ufe,dLo),e(O2,cLo),e(O2,jD),e(jD,fLo),e(O2,mLo),e(z,gLo),e(z,V2),e(V2,bfe),e(bfe,hLo),e(V2,pLo),e(V2,DD),e(DD,_Lo),e(V2,uLo),e(z,bLo),e(z,X2),e(X2,vfe),e(vfe,vLo),e(X2,FLo),e(X2,GD),e(GD,TLo),e(X2,MLo),e(z,ELo),e(z,z2),e(z2,Ffe),e(Ffe,CLo),e(z2,wLo),e(z2,OD),e(OD,ALo),e(z2,LLo),e(z,yLo),e(z,W2),e(W2,Tfe),e(Tfe,xLo),e(W2,$Lo),e(W2,VD),e(VD,kLo),e(W2,SLo),e(z,RLo),e(z,Q2),e(Q2,Mfe),e(Mfe,PLo),e(Q2,BLo),e(Q2,XD),e(XD,ILo),e(Q2,NLo),e(z,qLo),e(z,H2),e(H2,Efe),e(Efe,jLo),e(H2,DLo),e(H2,zD),e(zD,GLo),e(H2,OLo),e(Ke,VLo),e(Ke,U2),e(U2,XLo),e(U2,Cfe),e(Cfe,zLo),e(U2,WLo),e(U2,wfe),e(wfe,QLo),e(Ke,HLo),M(J2,Ke,null),b(f,fDe,u),b(f,Ii,u),e(Ii,Y2),e(Y2,Afe),M(jA,Afe,null),e(Ii,ULo),e(Ii,Lfe),e(Lfe,JLo),b(f,mDe,u),b(f,ko,u),M(DA,ko,null),e(ko,YLo),e(ko,Ni),e(Ni,KLo),e(Ni,WD),e(WD,ZLo),e(Ni,eyo),e(Ni,QD),e(QD,oyo),e(Ni,ryo),e(ko,tyo),e(ko,GA),e(GA,ayo),e(GA,yfe),e(yfe,nyo),e(GA,syo),e(ko,lyo),e(ko,st),M(OA,st,null),e(st,iyo),e(st,xfe),e(xfe,dyo),e(st,cyo),e(st,qi),e(qi,fyo),e(qi,$fe),e($fe,myo),e(qi,gyo),e(qi,HD),e(HD,hyo),e(qi,pyo),e(st,_yo),M(K2,st,null),e(ko,uyo),e(ko,Ze),M(VA,Ze,null),e(Ze,byo),e(Ze,kfe),e(kfe,vyo),e(Ze,Fyo),e(Ze,ka),e(ka,Tyo),e(ka,Sfe),e(Sfe,Myo),e(ka,Eyo),e(ka,Rfe),e(Rfe,Cyo),e(ka,wyo),e(ka,Pfe),e(Pfe,Ayo),e(ka,Lyo),e(Ze,yyo),e(Ze,Q),e(Q,Z2),e(Z2,Bfe),e(Bfe,xyo),e(Z2,$yo),e(Z2,UD),e(UD,kyo),e(Z2,Syo),e(Q,Ryo),e(Q,e1),e(e1,Ife),e(Ife,Pyo),e(e1,Byo),e(e1,JD),e(JD,Iyo),e(e1,Nyo),e(Q,qyo),e(Q,o1),e(o1,Nfe),e(Nfe,jyo),e(o1,Dyo),e(o1,YD),e(YD,Gyo),e(o1,Oyo),e(Q,Vyo),e(Q,r1),e(r1,qfe),e(qfe,Xyo),e(r1,zyo),e(r1,KD),e(KD,Wyo),e(r1,Qyo),e(Q,Hyo),e(Q,t1),e(t1,jfe),e(jfe,Uyo),e(t1,Jyo),e(t1,ZD),e(ZD,Yyo),e(t1,Kyo),e(Q,Zyo),e(Q,a1),e(a1,Dfe),e(Dfe,e8o),e(a1,o8o),e(a1,eG),e(eG,r8o),e(a1,t8o),e(Q,a8o),e(Q,n1),e(n1,Gfe),e(Gfe,n8o),e(n1,s8o),e(n1,oG),e(oG,l8o),e(n1,i8o),e(Q,d8o),e(Q,s1),e(s1,Ofe),e(Ofe,c8o),e(s1,f8o),e(s1,rG),e(rG,m8o),e(s1,g8o),e(Q,h8o),e(Q,l1),e(l1,Vfe),e(Vfe,p8o),e(l1,_8o),e(l1,tG),e(tG,u8o),e(l1,b8o),e(Q,v8o),e(Q,i1),e(i1,Xfe),e(Xfe,F8o),e(i1,T8o),e(i1,aG),e(aG,M8o),e(i1,E8o),e(Q,C8o),e(Q,d1),e(d1,zfe),e(zfe,w8o),e(d1,A8o),e(d1,nG),e(nG,L8o),e(d1,y8o),e(Q,x8o),e(Q,c1),e(c1,Wfe),e(Wfe,$8o),e(c1,k8o),e(c1,sG),e(sG,S8o),e(c1,R8o),e(Q,P8o),e(Q,f1),e(f1,Qfe),e(Qfe,B8o),e(f1,I8o),e(f1,lG),e(lG,N8o),e(f1,q8o),e(Q,j8o),e(Q,m1),e(m1,Hfe),e(Hfe,D8o),e(m1,G8o),e(m1,iG),e(iG,O8o),e(m1,V8o),e(Q,X8o),e(Q,g1),e(g1,Ufe),e(Ufe,z8o),e(g1,W8o),e(g1,dG),e(dG,Q8o),e(g1,H8o),e(Q,U8o),e(Q,h1),e(h1,Jfe),e(Jfe,J8o),e(h1,Y8o),e(h1,cG),e(cG,K8o),e(h1,Z8o),e(Q,exo),e(Q,p1),e(p1,Yfe),e(Yfe,oxo),e(p1,rxo),e(p1,fG),e(fG,txo),e(p1,axo),e(Q,nxo),e(Q,_1),e(_1,Kfe),e(Kfe,sxo),e(_1,lxo),e(_1,mG),e(mG,ixo),e(_1,dxo),e(Q,cxo),e(Q,u1),e(u1,Zfe),e(Zfe,fxo),e(u1,mxo),e(u1,gG),e(gG,gxo),e(u1,hxo),e(Q,pxo),e(Q,b1),e(b1,eme),e(eme,_xo),e(b1,uxo),e(b1,hG),e(hG,bxo),e(b1,vxo),e(Q,Fxo),e(Q,v1),e(v1,ome),e(ome,Txo),e(v1,Mxo),e(v1,pG),e(pG,Exo),e(v1,Cxo),e(Q,wxo),e(Q,F1),e(F1,rme),e(rme,Axo),e(F1,Lxo),e(F1,_G),e(_G,yxo),e(F1,xxo),e(Q,$xo),e(Q,T1),e(T1,tme),e(tme,kxo),e(T1,Sxo),e(T1,uG),e(uG,Rxo),e(T1,Pxo),e(Q,Bxo),e(Q,M1),e(M1,ame),e(ame,Ixo),e(M1,Nxo),e(M1,bG),e(bG,qxo),e(M1,jxo),e(Q,Dxo),e(Q,E1),e(E1,nme),e(nme,Gxo),e(E1,Oxo),e(E1,vG),e(vG,Vxo),e(E1,Xxo),e(Q,zxo),e(Q,C1),e(C1,sme),e(sme,Wxo),e(C1,Qxo),e(C1,FG),e(FG,Hxo),e(C1,Uxo),e(Q,Jxo),e(Q,w1),e(w1,lme),e(lme,Yxo),e(w1,Kxo),e(w1,TG),e(TG,Zxo),e(w1,e$o),e(Q,o$o),e(Q,A1),e(A1,ime),e(ime,r$o),e(A1,t$o),e(A1,MG),e(MG,a$o),e(A1,n$o),e(Q,s$o),e(Q,L1),e(L1,dme),e(dme,l$o),e(L1,i$o),e(L1,EG),e(EG,d$o),e(L1,c$o),e(Q,f$o),e(Q,y1),e(y1,cme),e(cme,m$o),e(y1,g$o),e(y1,CG),e(CG,h$o),e(y1,p$o),e(Q,_$o),e(Q,x1),e(x1,fme),e(fme,u$o),e(x1,b$o),e(x1,wG),e(wG,v$o),e(x1,F$o),e(Q,T$o),e(Q,$1),e($1,mme),e(mme,M$o),e($1,E$o),e($1,gme),e(gme,C$o),e($1,w$o),e(Q,A$o),e(Q,k1),e(k1,hme),e(hme,L$o),e(k1,y$o),e(k1,AG),e(AG,x$o),e(k1,$$o),e(Q,k$o),e(Q,S1),e(S1,pme),e(pme,S$o),e(S1,R$o),e(S1,LG),e(LG,P$o),e(S1,B$o),e(Q,I$o),e(Q,R1),e(R1,_me),e(_me,N$o),e(R1,q$o),e(R1,yG),e(yG,j$o),e(R1,D$o),e(Q,G$o),e(Q,P1),e(P1,ume),e(ume,O$o),e(P1,V$o),e(P1,xG),e(xG,X$o),e(P1,z$o),e(Ze,W$o),e(Ze,B1),e(B1,Q$o),e(B1,bme),e(bme,H$o),e(B1,U$o),e(B1,vme),e(vme,J$o),e(Ze,Y$o),M(I1,Ze,null),b(f,gDe,u),b(f,ji,u),e(ji,N1),e(N1,Fme),M(XA,Fme,null),e(ji,K$o),e(ji,Tme),e(Tme,Z$o),b(f,hDe,u),b(f,So,u),M(zA,So,null),e(So,eko),e(So,Di),e(Di,oko),e(Di,$G),e($G,rko),e(Di,tko),e(Di,kG),e(kG,ako),e(Di,nko),e(So,sko),e(So,WA),e(WA,lko),e(WA,Mme),e(Mme,iko),e(WA,dko),e(So,cko),e(So,lt),M(QA,lt,null),e(lt,fko),e(lt,Eme),e(Eme,mko),e(lt,gko),e(lt,Gi),e(Gi,hko),e(Gi,Cme),e(Cme,pko),e(Gi,_ko),e(Gi,SG),e(SG,uko),e(Gi,bko),e(lt,vko),M(q1,lt,null),e(So,Fko),e(So,eo),M(HA,eo,null),e(eo,Tko),e(eo,wme),e(wme,Mko),e(eo,Eko),e(eo,Sa),e(Sa,Cko),e(Sa,Ame),e(Ame,wko),e(Sa,Ako),e(Sa,Lme),e(Lme,Lko),e(Sa,yko),e(Sa,yme),e(yme,xko),e(Sa,$ko),e(eo,kko),e(eo,pe),e(pe,j1),e(j1,xme),e(xme,Sko),e(j1,Rko),e(j1,RG),e(RG,Pko),e(j1,Bko),e(pe,Iko),e(pe,D1),e(D1,$me),e($me,Nko),e(D1,qko),e(D1,PG),e(PG,jko),e(D1,Dko),e(pe,Gko),e(pe,G1),e(G1,kme),e(kme,Oko),e(G1,Vko),e(G1,BG),e(BG,Xko),e(G1,zko),e(pe,Wko),e(pe,O1),e(O1,Sme),e(Sme,Qko),e(O1,Hko),e(O1,IG),e(IG,Uko),e(O1,Jko),e(pe,Yko),e(pe,V1),e(V1,Rme),e(Rme,Kko),e(V1,Zko),e(V1,NG),e(NG,eSo),e(V1,oSo),e(pe,rSo),e(pe,X1),e(X1,Pme),e(Pme,tSo),e(X1,aSo),e(X1,qG),e(qG,nSo),e(X1,sSo),e(pe,lSo),e(pe,z1),e(z1,Bme),e(Bme,iSo),e(z1,dSo),e(z1,jG),e(jG,cSo),e(z1,fSo),e(pe,mSo),e(pe,W1),e(W1,Ime),e(Ime,gSo),e(W1,hSo),e(W1,DG),e(DG,pSo),e(W1,_So),e(pe,uSo),e(pe,Q1),e(Q1,Nme),e(Nme,bSo),e(Q1,vSo),e(Q1,GG),e(GG,FSo),e(Q1,TSo),e(pe,MSo),e(pe,H1),e(H1,qme),e(qme,ESo),e(H1,CSo),e(H1,OG),e(OG,wSo),e(H1,ASo),e(pe,LSo),e(pe,U1),e(U1,jme),e(jme,ySo),e(U1,xSo),e(U1,VG),e(VG,$So),e(U1,kSo),e(pe,SSo),e(pe,J1),e(J1,Dme),e(Dme,RSo),e(J1,PSo),e(J1,XG),e(XG,BSo),e(J1,ISo),e(pe,NSo),e(pe,Y1),e(Y1,Gme),e(Gme,qSo),e(Y1,jSo),e(Y1,zG),e(zG,DSo),e(Y1,GSo),e(pe,OSo),e(pe,K1),e(K1,Ome),e(Ome,VSo),e(K1,XSo),e(K1,WG),e(WG,zSo),e(K1,WSo),e(pe,QSo),e(pe,Z1),e(Z1,Vme),e(Vme,HSo),e(Z1,USo),e(Z1,QG),e(QG,JSo),e(Z1,YSo),e(pe,KSo),e(pe,eb),e(eb,Xme),e(Xme,ZSo),e(eb,eRo),e(eb,HG),e(HG,oRo),e(eb,rRo),e(pe,tRo),e(pe,ob),e(ob,zme),e(zme,aRo),e(ob,nRo),e(ob,UG),e(UG,sRo),e(ob,lRo),e(eo,iRo),e(eo,rb),e(rb,dRo),e(rb,Wme),e(Wme,cRo),e(rb,fRo),e(rb,Qme),e(Qme,mRo),e(eo,gRo),M(tb,eo,null),b(f,pDe,u),b(f,Oi,u),e(Oi,ab),e(ab,Hme),M(UA,Hme,null),e(Oi,hRo),e(Oi,Ume),e(Ume,pRo),b(f,_De,u),b(f,Ro,u),M(JA,Ro,null),e(Ro,_Ro),e(Ro,Vi),e(Vi,uRo),e(Vi,JG),e(JG,bRo),e(Vi,vRo),e(Vi,YG),e(YG,FRo),e(Vi,TRo),e(Ro,MRo),e(Ro,YA),e(YA,ERo),e(YA,Jme),e(Jme,CRo),e(YA,wRo),e(Ro,ARo),e(Ro,it),M(KA,it,null),e(it,LRo),e(it,Yme),e(Yme,yRo),e(it,xRo),e(it,Xi),e(Xi,$Ro),e(Xi,Kme),e(Kme,kRo),e(Xi,SRo),e(Xi,KG),e(KG,RRo),e(Xi,PRo),e(it,BRo),M(nb,it,null),e(Ro,IRo),e(Ro,oo),M(ZA,oo,null),e(oo,NRo),e(oo,Zme),e(Zme,qRo),e(oo,jRo),e(oo,Ra),e(Ra,DRo),e(Ra,ege),e(ege,GRo),e(Ra,ORo),e(Ra,oge),e(oge,VRo),e(Ra,XRo),e(Ra,rge),e(rge,zRo),e(Ra,WRo),e(oo,QRo),e(oo,N),e(N,sb),e(sb,tge),e(tge,HRo),e(sb,URo),e(sb,ZG),e(ZG,JRo),e(sb,YRo),e(N,KRo),e(N,lb),e(lb,age),e(age,ZRo),e(lb,ePo),e(lb,eO),e(eO,oPo),e(lb,rPo),e(N,tPo),e(N,ib),e(ib,nge),e(nge,aPo),e(ib,nPo),e(ib,oO),e(oO,sPo),e(ib,lPo),e(N,iPo),e(N,db),e(db,sge),e(sge,dPo),e(db,cPo),e(db,rO),e(rO,fPo),e(db,mPo),e(N,gPo),e(N,cb),e(cb,lge),e(lge,hPo),e(cb,pPo),e(cb,tO),e(tO,_Po),e(cb,uPo),e(N,bPo),e(N,fb),e(fb,ige),e(ige,vPo),e(fb,FPo),e(fb,aO),e(aO,TPo),e(fb,MPo),e(N,EPo),e(N,mb),e(mb,dge),e(dge,CPo),e(mb,wPo),e(mb,nO),e(nO,APo),e(mb,LPo),e(N,yPo),e(N,gb),e(gb,cge),e(cge,xPo),e(gb,$Po),e(gb,sO),e(sO,kPo),e(gb,SPo),e(N,RPo),e(N,hb),e(hb,fge),e(fge,PPo),e(hb,BPo),e(hb,lO),e(lO,IPo),e(hb,NPo),e(N,qPo),e(N,pb),e(pb,mge),e(mge,jPo),e(pb,DPo),e(pb,iO),e(iO,GPo),e(pb,OPo),e(N,VPo),e(N,_b),e(_b,gge),e(gge,XPo),e(_b,zPo),e(_b,dO),e(dO,WPo),e(_b,QPo),e(N,HPo),e(N,ub),e(ub,hge),e(hge,UPo),e(ub,JPo),e(ub,cO),e(cO,YPo),e(ub,KPo),e(N,ZPo),e(N,bb),e(bb,pge),e(pge,eBo),e(bb,oBo),e(bb,fO),e(fO,rBo),e(bb,tBo),e(N,aBo),e(N,vb),e(vb,_ge),e(_ge,nBo),e(vb,sBo),e(vb,mO),e(mO,lBo),e(vb,iBo),e(N,dBo),e(N,Fb),e(Fb,uge),e(uge,cBo),e(Fb,fBo),e(Fb,gO),e(gO,mBo),e(Fb,gBo),e(N,hBo),e(N,Tb),e(Tb,bge),e(bge,pBo),e(Tb,_Bo),e(Tb,hO),e(hO,uBo),e(Tb,bBo),e(N,vBo),e(N,Mb),e(Mb,vge),e(vge,FBo),e(Mb,TBo),e(Mb,pO),e(pO,MBo),e(Mb,EBo),e(N,CBo),e(N,Eb),e(Eb,Fge),e(Fge,wBo),e(Eb,ABo),e(Eb,_O),e(_O,LBo),e(Eb,yBo),e(N,xBo),e(N,Cb),e(Cb,Tge),e(Tge,$Bo),e(Cb,kBo),e(Cb,uO),e(uO,SBo),e(Cb,RBo),e(N,PBo),e(N,wb),e(wb,Mge),e(Mge,BBo),e(wb,IBo),e(wb,bO),e(bO,NBo),e(wb,qBo),e(N,jBo),e(N,Ab),e(Ab,Ege),e(Ege,DBo),e(Ab,GBo),e(Ab,vO),e(vO,OBo),e(Ab,VBo),e(N,XBo),e(N,Lb),e(Lb,Cge),e(Cge,zBo),e(Lb,WBo),e(Lb,FO),e(FO,QBo),e(Lb,HBo),e(N,UBo),e(N,yb),e(yb,wge),e(wge,JBo),e(yb,YBo),e(yb,TO),e(TO,KBo),e(yb,ZBo),e(N,eIo),e(N,xb),e(xb,Age),e(Age,oIo),e(xb,rIo),e(xb,MO),e(MO,tIo),e(xb,aIo),e(N,nIo),e(N,$b),e($b,Lge),e(Lge,sIo),e($b,lIo),e($b,EO),e(EO,iIo),e($b,dIo),e(N,cIo),e(N,kb),e(kb,yge),e(yge,fIo),e(kb,mIo),e(kb,CO),e(CO,gIo),e(kb,hIo),e(N,pIo),e(N,Sb),e(Sb,xge),e(xge,_Io),e(Sb,uIo),e(Sb,wO),e(wO,bIo),e(Sb,vIo),e(N,FIo),e(N,Rb),e(Rb,$ge),e($ge,TIo),e(Rb,MIo),e(Rb,AO),e(AO,EIo),e(Rb,CIo),e(N,wIo),e(N,Pb),e(Pb,kge),e(kge,AIo),e(Pb,LIo),e(Pb,LO),e(LO,yIo),e(Pb,xIo),e(N,$Io),e(N,Bb),e(Bb,Sge),e(Sge,kIo),e(Bb,SIo),e(Bb,yO),e(yO,RIo),e(Bb,PIo),e(N,BIo),e(N,Ib),e(Ib,Rge),e(Rge,IIo),e(Ib,NIo),e(Ib,xO),e(xO,qIo),e(Ib,jIo),e(N,DIo),e(N,Nb),e(Nb,Pge),e(Pge,GIo),e(Nb,OIo),e(Nb,$O),e($O,VIo),e(Nb,XIo),e(N,zIo),e(N,qb),e(qb,Bge),e(Bge,WIo),e(qb,QIo),e(qb,kO),e(kO,HIo),e(qb,UIo),e(N,JIo),e(N,jb),e(jb,Ige),e(Ige,YIo),e(jb,KIo),e(jb,SO),e(SO,ZIo),e(jb,eNo),e(N,oNo),e(N,Db),e(Db,Nge),e(Nge,rNo),e(Db,tNo),e(Db,RO),e(RO,aNo),e(Db,nNo),e(N,sNo),e(N,Gb),e(Gb,qge),e(qge,lNo),e(Gb,iNo),e(Gb,PO),e(PO,dNo),e(Gb,cNo),e(N,fNo),e(N,Ob),e(Ob,jge),e(jge,mNo),e(Ob,gNo),e(Ob,BO),e(BO,hNo),e(Ob,pNo),e(N,_No),e(N,Vb),e(Vb,Dge),e(Dge,uNo),e(Vb,bNo),e(Vb,IO),e(IO,vNo),e(Vb,FNo),e(N,TNo),e(N,Xb),e(Xb,Gge),e(Gge,MNo),e(Xb,ENo),e(Xb,NO),e(NO,CNo),e(Xb,wNo),e(N,ANo),e(N,zb),e(zb,Oge),e(Oge,LNo),e(zb,yNo),e(zb,qO),e(qO,xNo),e(zb,$No),e(N,kNo),e(N,Wb),e(Wb,Vge),e(Vge,SNo),e(Wb,RNo),e(Wb,jO),e(jO,PNo),e(Wb,BNo),e(N,INo),e(N,Qb),e(Qb,Xge),e(Xge,NNo),e(Qb,qNo),e(Qb,DO),e(DO,jNo),e(Qb,DNo),e(N,GNo),e(N,Hb),e(Hb,zge),e(zge,ONo),e(Hb,VNo),e(Hb,GO),e(GO,XNo),e(Hb,zNo),e(N,WNo),e(N,Ub),e(Ub,Wge),e(Wge,QNo),e(Ub,HNo),e(Ub,OO),e(OO,UNo),e(Ub,JNo),e(N,YNo),e(N,Jb),e(Jb,Qge),e(Qge,KNo),e(Jb,ZNo),e(Jb,VO),e(VO,eqo),e(Jb,oqo),e(N,rqo),e(N,Yb),e(Yb,Hge),e(Hge,tqo),e(Yb,aqo),e(Yb,XO),e(XO,nqo),e(Yb,sqo),e(N,lqo),e(N,Kb),e(Kb,Uge),e(Uge,iqo),e(Kb,dqo),e(Kb,zO),e(zO,cqo),e(Kb,fqo),e(oo,mqo),e(oo,Zb),e(Zb,gqo),e(Zb,Jge),e(Jge,hqo),e(Zb,pqo),e(Zb,Yge),e(Yge,_qo),e(oo,uqo),M(ev,oo,null),b(f,uDe,u),b(f,zi,u),e(zi,ov),e(ov,Kge),M(eL,Kge,null),e(zi,bqo),e(zi,Zge),e(Zge,vqo),b(f,bDe,u),b(f,Po,u),M(oL,Po,null),e(Po,Fqo),e(Po,Wi),e(Wi,Tqo),e(Wi,WO),e(WO,Mqo),e(Wi,Eqo),e(Wi,QO),e(QO,Cqo),e(Wi,wqo),e(Po,Aqo),e(Po,rL),e(rL,Lqo),e(rL,ehe),e(ehe,yqo),e(rL,xqo),e(Po,$qo),e(Po,dt),M(tL,dt,null),e(dt,kqo),e(dt,ohe),e(ohe,Sqo),e(dt,Rqo),e(dt,Qi),e(Qi,Pqo),e(Qi,rhe),e(rhe,Bqo),e(Qi,Iqo),e(Qi,HO),e(HO,Nqo),e(Qi,qqo),e(dt,jqo),M(rv,dt,null),e(Po,Dqo),e(Po,ro),M(aL,ro,null),e(ro,Gqo),e(ro,the),e(the,Oqo),e(ro,Vqo),e(ro,Pa),e(Pa,Xqo),e(Pa,ahe),e(ahe,zqo),e(Pa,Wqo),e(Pa,nhe),e(nhe,Qqo),e(Pa,Hqo),e(Pa,she),e(she,Uqo),e(Pa,Jqo),e(ro,Yqo),e(ro,Z),e(Z,tv),e(tv,lhe),e(lhe,Kqo),e(tv,Zqo),e(tv,UO),e(UO,ejo),e(tv,ojo),e(Z,rjo),e(Z,av),e(av,ihe),e(ihe,tjo),e(av,ajo),e(av,JO),e(JO,njo),e(av,sjo),e(Z,ljo),e(Z,nv),e(nv,dhe),e(dhe,ijo),e(nv,djo),e(nv,YO),e(YO,cjo),e(nv,fjo),e(Z,mjo),e(Z,sv),e(sv,che),e(che,gjo),e(sv,hjo),e(sv,KO),e(KO,pjo),e(sv,_jo),e(Z,ujo),e(Z,lv),e(lv,fhe),e(fhe,bjo),e(lv,vjo),e(lv,ZO),e(ZO,Fjo),e(lv,Tjo),e(Z,Mjo),e(Z,iv),e(iv,mhe),e(mhe,Ejo),e(iv,Cjo),e(iv,eV),e(eV,wjo),e(iv,Ajo),e(Z,Ljo),e(Z,dv),e(dv,ghe),e(ghe,yjo),e(dv,xjo),e(dv,oV),e(oV,$jo),e(dv,kjo),e(Z,Sjo),e(Z,cv),e(cv,hhe),e(hhe,Rjo),e(cv,Pjo),e(cv,rV),e(rV,Bjo),e(cv,Ijo),e(Z,Njo),e(Z,fv),e(fv,phe),e(phe,qjo),e(fv,jjo),e(fv,tV),e(tV,Djo),e(fv,Gjo),e(Z,Ojo),e(Z,mv),e(mv,_he),e(_he,Vjo),e(mv,Xjo),e(mv,aV),e(aV,zjo),e(mv,Wjo),e(Z,Qjo),e(Z,gv),e(gv,uhe),e(uhe,Hjo),e(gv,Ujo),e(gv,nV),e(nV,Jjo),e(gv,Yjo),e(Z,Kjo),e(Z,hv),e(hv,bhe),e(bhe,Zjo),e(hv,eDo),e(hv,sV),e(sV,oDo),e(hv,rDo),e(Z,tDo),e(Z,pv),e(pv,vhe),e(vhe,aDo),e(pv,nDo),e(pv,lV),e(lV,sDo),e(pv,lDo),e(Z,iDo),e(Z,_v),e(_v,Fhe),e(Fhe,dDo),e(_v,cDo),e(_v,iV),e(iV,fDo),e(_v,mDo),e(Z,gDo),e(Z,uv),e(uv,The),e(The,hDo),e(uv,pDo),e(uv,dV),e(dV,_Do),e(uv,uDo),e(Z,bDo),e(Z,bv),e(bv,Mhe),e(Mhe,vDo),e(bv,FDo),e(bv,cV),e(cV,TDo),e(bv,MDo),e(Z,EDo),e(Z,vv),e(vv,Ehe),e(Ehe,CDo),e(vv,wDo),e(vv,fV),e(fV,ADo),e(vv,LDo),e(Z,yDo),e(Z,Fv),e(Fv,Che),e(Che,xDo),e(Fv,$Do),e(Fv,mV),e(mV,kDo),e(Fv,SDo),e(Z,RDo),e(Z,Tv),e(Tv,whe),e(whe,PDo),e(Tv,BDo),e(Tv,gV),e(gV,IDo),e(Tv,NDo),e(Z,qDo),e(Z,Mv),e(Mv,Ahe),e(Ahe,jDo),e(Mv,DDo),e(Mv,hV),e(hV,GDo),e(Mv,ODo),e(Z,VDo),e(Z,Ev),e(Ev,Lhe),e(Lhe,XDo),e(Ev,zDo),e(Ev,pV),e(pV,WDo),e(Ev,QDo),e(Z,HDo),e(Z,Cv),e(Cv,yhe),e(yhe,UDo),e(Cv,JDo),e(Cv,_V),e(_V,YDo),e(Cv,KDo),e(Z,ZDo),e(Z,wv),e(wv,xhe),e(xhe,eGo),e(wv,oGo),e(wv,uV),e(uV,rGo),e(wv,tGo),e(Z,aGo),e(Z,Av),e(Av,$he),e($he,nGo),e(Av,sGo),e(Av,bV),e(bV,lGo),e(Av,iGo),e(Z,dGo),e(Z,Lv),e(Lv,khe),e(khe,cGo),e(Lv,fGo),e(Lv,vV),e(vV,mGo),e(Lv,gGo),e(Z,hGo),e(Z,yv),e(yv,She),e(She,pGo),e(yv,_Go),e(yv,FV),e(FV,uGo),e(yv,bGo),e(Z,vGo),e(Z,xv),e(xv,Rhe),e(Rhe,FGo),e(xv,TGo),e(xv,TV),e(TV,MGo),e(xv,EGo),e(Z,CGo),e(Z,$v),e($v,Phe),e(Phe,wGo),e($v,AGo),e($v,MV),e(MV,LGo),e($v,yGo),e(Z,xGo),e(Z,kv),e(kv,Bhe),e(Bhe,$Go),e(kv,kGo),e(kv,EV),e(EV,SGo),e(kv,RGo),e(ro,PGo),e(ro,Sv),e(Sv,BGo),e(Sv,Ihe),e(Ihe,IGo),e(Sv,NGo),e(Sv,Nhe),e(Nhe,qGo),e(ro,jGo),M(Rv,ro,null),b(f,vDe,u),b(f,Hi,u),e(Hi,Pv),e(Pv,qhe),M(nL,qhe,null),e(Hi,DGo),e(Hi,jhe),e(jhe,GGo),b(f,FDe,u),b(f,Bo,u),M(sL,Bo,null),e(Bo,OGo),e(Bo,Ui),e(Ui,VGo),e(Ui,CV),e(CV,XGo),e(Ui,zGo),e(Ui,wV),e(wV,WGo),e(Ui,QGo),e(Bo,HGo),e(Bo,lL),e(lL,UGo),e(lL,Dhe),e(Dhe,JGo),e(lL,YGo),e(Bo,KGo),e(Bo,ct),M(iL,ct,null),e(ct,ZGo),e(ct,Ghe),e(Ghe,eOo),e(ct,oOo),e(ct,Ji),e(Ji,rOo),e(Ji,Ohe),e(Ohe,tOo),e(Ji,aOo),e(Ji,AV),e(AV,nOo),e(Ji,sOo),e(ct,lOo),M(Bv,ct,null),e(Bo,iOo),e(Bo,to),M(dL,to,null),e(to,dOo),e(to,Vhe),e(Vhe,cOo),e(to,fOo),e(to,Ba),e(Ba,mOo),e(Ba,Xhe),e(Xhe,gOo),e(Ba,hOo),e(Ba,zhe),e(zhe,pOo),e(Ba,_Oo),e(Ba,Whe),e(Whe,uOo),e(Ba,bOo),e(to,vOo),e(to,Yr),e(Yr,Iv),e(Iv,Qhe),e(Qhe,FOo),e(Iv,TOo),e(Iv,LV),e(LV,MOo),e(Iv,EOo),e(Yr,COo),e(Yr,Nv),e(Nv,Hhe),e(Hhe,wOo),e(Nv,AOo),e(Nv,yV),e(yV,LOo),e(Nv,yOo),e(Yr,xOo),e(Yr,qv),e(qv,Uhe),e(Uhe,$Oo),e(qv,kOo),e(qv,xV),e(xV,SOo),e(qv,ROo),e(Yr,POo),e(Yr,jv),e(jv,Jhe),e(Jhe,BOo),e(jv,IOo),e(jv,$V),e($V,NOo),e(jv,qOo),e(Yr,jOo),e(Yr,Dv),e(Dv,Yhe),e(Yhe,DOo),e(Dv,GOo),e(Dv,kV),e(kV,OOo),e(Dv,VOo),e(to,XOo),e(to,Gv),e(Gv,zOo),e(Gv,Khe),e(Khe,WOo),e(Gv,QOo),e(Gv,Zhe),e(Zhe,HOo),e(to,UOo),M(Ov,to,null),b(f,TDe,u),b(f,Yi,u),e(Yi,Vv),e(Vv,epe),M(cL,epe,null),e(Yi,JOo),e(Yi,ope),e(ope,YOo),b(f,MDe,u),b(f,Io,u),M(fL,Io,null),e(Io,KOo),e(Io,Ki),e(Ki,ZOo),e(Ki,SV),e(SV,eVo),e(Ki,oVo),e(Ki,RV),e(RV,rVo),e(Ki,tVo),e(Io,aVo),e(Io,mL),e(mL,nVo),e(mL,rpe),e(rpe,sVo),e(mL,lVo),e(Io,iVo),e(Io,ft),M(gL,ft,null),e(ft,dVo),e(ft,tpe),e(tpe,cVo),e(ft,fVo),e(ft,Zi),e(Zi,mVo),e(Zi,ape),e(ape,gVo),e(Zi,hVo),e(Zi,PV),e(PV,pVo),e(Zi,_Vo),e(ft,uVo),M(Xv,ft,null),e(Io,bVo),e(Io,ao),M(hL,ao,null),e(ao,vVo),e(ao,npe),e(npe,FVo),e(ao,TVo),e(ao,Ia),e(Ia,MVo),e(Ia,spe),e(spe,EVo),e(Ia,CVo),e(Ia,lpe),e(lpe,wVo),e(Ia,AVo),e(Ia,ipe),e(ipe,LVo),e(Ia,yVo),e(ao,xVo),e(ao,U),e(U,zv),e(zv,dpe),e(dpe,$Vo),e(zv,kVo),e(zv,BV),e(BV,SVo),e(zv,RVo),e(U,PVo),e(U,Wv),e(Wv,cpe),e(cpe,BVo),e(Wv,IVo),e(Wv,IV),e(IV,NVo),e(Wv,qVo),e(U,jVo),e(U,Qv),e(Qv,fpe),e(fpe,DVo),e(Qv,GVo),e(Qv,NV),e(NV,OVo),e(Qv,VVo),e(U,XVo),e(U,Hv),e(Hv,mpe),e(mpe,zVo),e(Hv,WVo),e(Hv,qV),e(qV,QVo),e(Hv,HVo),e(U,UVo),e(U,Uv),e(Uv,gpe),e(gpe,JVo),e(Uv,YVo),e(Uv,jV),e(jV,KVo),e(Uv,ZVo),e(U,eXo),e(U,Jv),e(Jv,hpe),e(hpe,oXo),e(Jv,rXo),e(Jv,DV),e(DV,tXo),e(Jv,aXo),e(U,nXo),e(U,Yv),e(Yv,ppe),e(ppe,sXo),e(Yv,lXo),e(Yv,GV),e(GV,iXo),e(Yv,dXo),e(U,cXo),e(U,Kv),e(Kv,_pe),e(_pe,fXo),e(Kv,mXo),e(Kv,OV),e(OV,gXo),e(Kv,hXo),e(U,pXo),e(U,Zv),e(Zv,upe),e(upe,_Xo),e(Zv,uXo),e(Zv,VV),e(VV,bXo),e(Zv,vXo),e(U,FXo),e(U,eF),e(eF,bpe),e(bpe,TXo),e(eF,MXo),e(eF,XV),e(XV,EXo),e(eF,CXo),e(U,wXo),e(U,oF),e(oF,vpe),e(vpe,AXo),e(oF,LXo),e(oF,zV),e(zV,yXo),e(oF,xXo),e(U,$Xo),e(U,rF),e(rF,Fpe),e(Fpe,kXo),e(rF,SXo),e(rF,WV),e(WV,RXo),e(rF,PXo),e(U,BXo),e(U,tF),e(tF,Tpe),e(Tpe,IXo),e(tF,NXo),e(tF,QV),e(QV,qXo),e(tF,jXo),e(U,DXo),e(U,aF),e(aF,Mpe),e(Mpe,GXo),e(aF,OXo),e(aF,HV),e(HV,VXo),e(aF,XXo),e(U,zXo),e(U,nF),e(nF,Epe),e(Epe,WXo),e(nF,QXo),e(nF,UV),e(UV,HXo),e(nF,UXo),e(U,JXo),e(U,sF),e(sF,Cpe),e(Cpe,YXo),e(sF,KXo),e(sF,JV),e(JV,ZXo),e(sF,ezo),e(U,ozo),e(U,lF),e(lF,wpe),e(wpe,rzo),e(lF,tzo),e(lF,YV),e(YV,azo),e(lF,nzo),e(U,szo),e(U,iF),e(iF,Ape),e(Ape,lzo),e(iF,izo),e(iF,KV),e(KV,dzo),e(iF,czo),e(U,fzo),e(U,dF),e(dF,Lpe),e(Lpe,mzo),e(dF,gzo),e(dF,ZV),e(ZV,hzo),e(dF,pzo),e(U,_zo),e(U,cF),e(cF,ype),e(ype,uzo),e(cF,bzo),e(cF,eX),e(eX,vzo),e(cF,Fzo),e(U,Tzo),e(U,fF),e(fF,xpe),e(xpe,Mzo),e(fF,Ezo),e(fF,oX),e(oX,Czo),e(fF,wzo),e(U,Azo),e(U,mF),e(mF,$pe),e($pe,Lzo),e(mF,yzo),e(mF,rX),e(rX,xzo),e(mF,$zo),e(U,kzo),e(U,gF),e(gF,kpe),e(kpe,Szo),e(gF,Rzo),e(gF,tX),e(tX,Pzo),e(gF,Bzo),e(U,Izo),e(U,hF),e(hF,Spe),e(Spe,Nzo),e(hF,qzo),e(hF,aX),e(aX,jzo),e(hF,Dzo),e(U,Gzo),e(U,pF),e(pF,Rpe),e(Rpe,Ozo),e(pF,Vzo),e(pF,nX),e(nX,Xzo),e(pF,zzo),e(U,Wzo),e(U,_F),e(_F,Ppe),e(Ppe,Qzo),e(_F,Hzo),e(_F,sX),e(sX,Uzo),e(_F,Jzo),e(U,Yzo),e(U,uF),e(uF,Bpe),e(Bpe,Kzo),e(uF,Zzo),e(uF,lX),e(lX,eWo),e(uF,oWo),e(U,rWo),e(U,bF),e(bF,Ipe),e(Ipe,tWo),e(bF,aWo),e(bF,iX),e(iX,nWo),e(bF,sWo),e(U,lWo),e(U,vF),e(vF,Npe),e(Npe,iWo),e(vF,dWo),e(vF,dX),e(dX,cWo),e(vF,fWo),e(U,mWo),e(U,FF),e(FF,qpe),e(qpe,gWo),e(FF,hWo),e(FF,cX),e(cX,pWo),e(FF,_Wo),e(U,uWo),e(U,TF),e(TF,jpe),e(jpe,bWo),e(TF,vWo),e(TF,fX),e(fX,FWo),e(TF,TWo),e(U,MWo),e(U,MF),e(MF,Dpe),e(Dpe,EWo),e(MF,CWo),e(MF,mX),e(mX,wWo),e(MF,AWo),e(U,LWo),e(U,EF),e(EF,Gpe),e(Gpe,yWo),e(EF,xWo),e(EF,gX),e(gX,$Wo),e(EF,kWo),e(U,SWo),e(U,CF),e(CF,Ope),e(Ope,RWo),e(CF,PWo),e(CF,hX),e(hX,BWo),e(CF,IWo),e(ao,NWo),e(ao,wF),e(wF,qWo),e(wF,Vpe),e(Vpe,jWo),e(wF,DWo),e(wF,Xpe),e(Xpe,GWo),e(ao,OWo),M(AF,ao,null),b(f,EDe,u),b(f,ed,u),e(ed,LF),e(LF,zpe),M(pL,zpe,null),e(ed,VWo),e(ed,Wpe),e(Wpe,XWo),b(f,CDe,u),b(f,No,u),M(_L,No,null),e(No,zWo),e(No,od),e(od,WWo),e(od,pX),e(pX,QWo),e(od,HWo),e(od,_X),e(_X,UWo),e(od,JWo),e(No,YWo),e(No,uL),e(uL,KWo),e(uL,Qpe),e(Qpe,ZWo),e(uL,eQo),e(No,oQo),e(No,mt),M(bL,mt,null),e(mt,rQo),e(mt,Hpe),e(Hpe,tQo),e(mt,aQo),e(mt,rd),e(rd,nQo),e(rd,Upe),e(Upe,sQo),e(rd,lQo),e(rd,uX),e(uX,iQo),e(rd,dQo),e(mt,cQo),M(yF,mt,null),e(No,fQo),e(No,no),M(vL,no,null),e(no,mQo),e(no,Jpe),e(Jpe,gQo),e(no,hQo),e(no,Na),e(Na,pQo),e(Na,Ype),e(Ype,_Qo),e(Na,uQo),e(Na,Kpe),e(Kpe,bQo),e(Na,vQo),e(Na,Zpe),e(Zpe,FQo),e(Na,TQo),e(no,MQo),e(no,V),e(V,xF),e(xF,e_e),e(e_e,EQo),e(xF,CQo),e(xF,bX),e(bX,wQo),e(xF,AQo),e(V,LQo),e(V,$F),e($F,o_e),e(o_e,yQo),e($F,xQo),e($F,vX),e(vX,$Qo),e($F,kQo),e(V,SQo),e(V,kF),e(kF,r_e),e(r_e,RQo),e(kF,PQo),e(kF,FX),e(FX,BQo),e(kF,IQo),e(V,NQo),e(V,SF),e(SF,t_e),e(t_e,qQo),e(SF,jQo),e(SF,TX),e(TX,DQo),e(SF,GQo),e(V,OQo),e(V,RF),e(RF,a_e),e(a_e,VQo),e(RF,XQo),e(RF,MX),e(MX,zQo),e(RF,WQo),e(V,QQo),e(V,PF),e(PF,n_e),e(n_e,HQo),e(PF,UQo),e(PF,EX),e(EX,JQo),e(PF,YQo),e(V,KQo),e(V,BF),e(BF,s_e),e(s_e,ZQo),e(BF,eHo),e(BF,CX),e(CX,oHo),e(BF,rHo),e(V,tHo),e(V,IF),e(IF,l_e),e(l_e,aHo),e(IF,nHo),e(IF,wX),e(wX,sHo),e(IF,lHo),e(V,iHo),e(V,NF),e(NF,i_e),e(i_e,dHo),e(NF,cHo),e(NF,AX),e(AX,fHo),e(NF,mHo),e(V,gHo),e(V,qF),e(qF,d_e),e(d_e,hHo),e(qF,pHo),e(qF,LX),e(LX,_Ho),e(qF,uHo),e(V,bHo),e(V,jF),e(jF,c_e),e(c_e,vHo),e(jF,FHo),e(jF,yX),e(yX,THo),e(jF,MHo),e(V,EHo),e(V,DF),e(DF,f_e),e(f_e,CHo),e(DF,wHo),e(DF,xX),e(xX,AHo),e(DF,LHo),e(V,yHo),e(V,GF),e(GF,m_e),e(m_e,xHo),e(GF,$Ho),e(GF,$X),e($X,kHo),e(GF,SHo),e(V,RHo),e(V,OF),e(OF,g_e),e(g_e,PHo),e(OF,BHo),e(OF,kX),e(kX,IHo),e(OF,NHo),e(V,qHo),e(V,VF),e(VF,h_e),e(h_e,jHo),e(VF,DHo),e(VF,SX),e(SX,GHo),e(VF,OHo),e(V,VHo),e(V,XF),e(XF,p_e),e(p_e,XHo),e(XF,zHo),e(XF,RX),e(RX,WHo),e(XF,QHo),e(V,HHo),e(V,zF),e(zF,__e),e(__e,UHo),e(zF,JHo),e(zF,PX),e(PX,YHo),e(zF,KHo),e(V,ZHo),e(V,WF),e(WF,u_e),e(u_e,eUo),e(WF,oUo),e(WF,BX),e(BX,rUo),e(WF,tUo),e(V,aUo),e(V,QF),e(QF,b_e),e(b_e,nUo),e(QF,sUo),e(QF,IX),e(IX,lUo),e(QF,iUo),e(V,dUo),e(V,HF),e(HF,v_e),e(v_e,cUo),e(HF,fUo),e(HF,NX),e(NX,mUo),e(HF,gUo),e(V,hUo),e(V,UF),e(UF,F_e),e(F_e,pUo),e(UF,_Uo),e(UF,qX),e(qX,uUo),e(UF,bUo),e(V,vUo),e(V,JF),e(JF,T_e),e(T_e,FUo),e(JF,TUo),e(JF,jX),e(jX,MUo),e(JF,EUo),e(V,CUo),e(V,YF),e(YF,M_e),e(M_e,wUo),e(YF,AUo),e(YF,DX),e(DX,LUo),e(YF,yUo),e(V,xUo),e(V,KF),e(KF,E_e),e(E_e,$Uo),e(KF,kUo),e(KF,GX),e(GX,SUo),e(KF,RUo),e(V,PUo),e(V,ZF),e(ZF,C_e),e(C_e,BUo),e(ZF,IUo),e(ZF,OX),e(OX,NUo),e(ZF,qUo),e(V,jUo),e(V,e6),e(e6,w_e),e(w_e,DUo),e(e6,GUo),e(e6,VX),e(VX,OUo),e(e6,VUo),e(V,XUo),e(V,o6),e(o6,A_e),e(A_e,zUo),e(o6,WUo),e(o6,XX),e(XX,QUo),e(o6,HUo),e(V,UUo),e(V,r6),e(r6,L_e),e(L_e,JUo),e(r6,YUo),e(r6,zX),e(zX,KUo),e(r6,ZUo),e(V,eJo),e(V,t6),e(t6,y_e),e(y_e,oJo),e(t6,rJo),e(t6,WX),e(WX,tJo),e(t6,aJo),e(V,nJo),e(V,a6),e(a6,x_e),e(x_e,sJo),e(a6,lJo),e(a6,QX),e(QX,iJo),e(a6,dJo),e(V,cJo),e(V,n6),e(n6,$_e),e($_e,fJo),e(n6,mJo),e(n6,HX),e(HX,gJo),e(n6,hJo),e(V,pJo),e(V,s6),e(s6,k_e),e(k_e,_Jo),e(s6,uJo),e(s6,UX),e(UX,bJo),e(s6,vJo),e(V,FJo),e(V,l6),e(l6,S_e),e(S_e,TJo),e(l6,MJo),e(l6,JX),e(JX,EJo),e(l6,CJo),e(V,wJo),e(V,i6),e(i6,R_e),e(R_e,AJo),e(i6,LJo),e(i6,YX),e(YX,yJo),e(i6,xJo),e(V,$Jo),e(V,d6),e(d6,P_e),e(P_e,kJo),e(d6,SJo),e(d6,KX),e(KX,RJo),e(d6,PJo),e(V,BJo),e(V,c6),e(c6,B_e),e(B_e,IJo),e(c6,NJo),e(c6,ZX),e(ZX,qJo),e(c6,jJo),e(V,DJo),e(V,f6),e(f6,I_e),e(I_e,GJo),e(f6,OJo),e(f6,ez),e(ez,VJo),e(f6,XJo),e(V,zJo),e(V,m6),e(m6,N_e),e(N_e,WJo),e(m6,QJo),e(m6,oz),e(oz,HJo),e(m6,UJo),e(V,JJo),e(V,g6),e(g6,q_e),e(q_e,YJo),e(g6,KJo),e(g6,rz),e(rz,ZJo),e(g6,eYo),e(V,oYo),e(V,h6),e(h6,j_e),e(j_e,rYo),e(h6,tYo),e(h6,tz),e(tz,aYo),e(h6,nYo),e(no,sYo),e(no,p6),e(p6,lYo),e(p6,D_e),e(D_e,iYo),e(p6,dYo),e(p6,G_e),e(G_e,cYo),e(no,fYo),M(_6,no,null),b(f,wDe,u),b(f,td,u),e(td,u6),e(u6,O_e),M(FL,O_e,null),e(td,mYo),e(td,V_e),e(V_e,gYo),b(f,ADe,u),b(f,qo,u),M(TL,qo,null),e(qo,hYo),e(qo,ad),e(ad,pYo),e(ad,az),e(az,_Yo),e(ad,uYo),e(ad,nz),e(nz,bYo),e(ad,vYo),e(qo,FYo),e(qo,ML),e(ML,TYo),e(ML,X_e),e(X_e,MYo),e(ML,EYo),e(qo,CYo),e(qo,gt),M(EL,gt,null),e(gt,wYo),e(gt,z_e),e(z_e,AYo),e(gt,LYo),e(gt,nd),e(nd,yYo),e(nd,W_e),e(W_e,xYo),e(nd,$Yo),e(nd,sz),e(sz,kYo),e(nd,SYo),e(gt,RYo),M(b6,gt,null),e(qo,PYo),e(qo,so),M(CL,so,null),e(so,BYo),e(so,Q_e),e(Q_e,IYo),e(so,NYo),e(so,qa),e(qa,qYo),e(qa,H_e),e(H_e,jYo),e(qa,DYo),e(qa,U_e),e(U_e,GYo),e(qa,OYo),e(qa,J_e),e(J_e,VYo),e(qa,XYo),e(so,zYo),e(so,Y_e),e(Y_e,v6),e(v6,K_e),e(K_e,WYo),e(v6,QYo),e(v6,lz),e(lz,HYo),e(v6,UYo),e(so,JYo),e(so,F6),e(F6,YYo),e(F6,Z_e),e(Z_e,KYo),e(F6,ZYo),e(F6,eue),e(eue,eKo),e(so,oKo),M(T6,so,null),b(f,LDe,u),b(f,sd,u),e(sd,M6),e(M6,oue),M(wL,oue,null),e(sd,rKo),e(sd,rue),e(rue,tKo),b(f,yDe,u),b(f,jo,u),M(AL,jo,null),e(jo,aKo),e(jo,ld),e(ld,nKo),e(ld,iz),e(iz,sKo),e(ld,lKo),e(ld,dz),e(dz,iKo),e(ld,dKo),e(jo,cKo),e(jo,LL),e(LL,fKo),e(LL,tue),e(tue,mKo),e(LL,gKo),e(jo,hKo),e(jo,ht),M(yL,ht,null),e(ht,pKo),e(ht,aue),e(aue,_Ko),e(ht,uKo),e(ht,id),e(id,bKo),e(id,nue),e(nue,vKo),e(id,FKo),e(id,cz),e(cz,TKo),e(id,MKo),e(ht,EKo),M(E6,ht,null),e(jo,CKo),e(jo,lo),M(xL,lo,null),e(lo,wKo),e(lo,sue),e(sue,AKo),e(lo,LKo),e(lo,ja),e(ja,yKo),e(ja,lue),e(lue,xKo),e(ja,$Ko),e(ja,iue),e(iue,kKo),e(ja,SKo),e(ja,due),e(due,RKo),e(ja,PKo),e(lo,BKo),e(lo,Fe),e(Fe,C6),e(C6,cue),e(cue,IKo),e(C6,NKo),e(C6,fz),e(fz,qKo),e(C6,jKo),e(Fe,DKo),e(Fe,w6),e(w6,fue),e(fue,GKo),e(w6,OKo),e(w6,mz),e(mz,VKo),e(w6,XKo),e(Fe,zKo),e(Fe,A6),e(A6,mue),e(mue,WKo),e(A6,QKo),e(A6,gz),e(gz,HKo),e(A6,UKo),e(Fe,JKo),e(Fe,L6),e(L6,gue),e(gue,YKo),e(L6,KKo),e(L6,hz),e(hz,ZKo),e(L6,eZo),e(Fe,oZo),e(Fe,Is),e(Is,hue),e(hue,rZo),e(Is,tZo),e(Is,pz),e(pz,aZo),e(Is,nZo),e(Is,_z),e(_z,sZo),e(Is,lZo),e(Fe,iZo),e(Fe,y6),e(y6,pue),e(pue,dZo),e(y6,cZo),e(y6,uz),e(uz,fZo),e(y6,mZo),e(Fe,gZo),e(Fe,Ns),e(Ns,_ue),e(_ue,hZo),e(Ns,pZo),e(Ns,bz),e(bz,_Zo),e(Ns,uZo),e(Ns,vz),e(vz,bZo),e(Ns,vZo),e(Fe,FZo),e(Fe,pt),e(pt,uue),e(uue,TZo),e(pt,MZo),e(pt,Fz),e(Fz,EZo),e(pt,CZo),e(pt,Tz),e(Tz,wZo),e(pt,AZo),e(pt,Mz),e(Mz,LZo),e(pt,yZo),e(Fe,xZo),e(Fe,x6),e(x6,bue),e(bue,$Zo),e(x6,kZo),e(x6,Ez),e(Ez,SZo),e(x6,RZo),e(Fe,PZo),e(Fe,$6),e($6,vue),e(vue,BZo),e($6,IZo),e($6,Cz),e(Cz,NZo),e($6,qZo),e(Fe,jZo),e(Fe,k6),e(k6,Fue),e(Fue,DZo),e(k6,GZo),e(k6,wz),e(wz,OZo),e(k6,VZo),e(Fe,XZo),e(Fe,S6),e(S6,Tue),e(Tue,zZo),e(S6,WZo),e(S6,Az),e(Az,QZo),e(S6,HZo),e(Fe,UZo),e(Fe,R6),e(R6,Mue),e(Mue,JZo),e(R6,YZo),e(R6,Lz),e(Lz,KZo),e(R6,ZZo),e(Fe,eer),e(Fe,P6),e(P6,Eue),e(Eue,oer),e(P6,rer),e(P6,yz),e(yz,ter),e(P6,aer),e(Fe,ner),e(Fe,B6),e(B6,Cue),e(Cue,ser),e(B6,ler),e(B6,xz),e(xz,ier),e(B6,der),e(lo,cer),e(lo,I6),e(I6,fer),e(I6,wue),e(wue,mer),e(I6,ger),e(I6,Aue),e(Aue,her),e(lo,per),M(N6,lo,null),b(f,xDe,u),b(f,dd,u),e(dd,q6),e(q6,Lue),M($L,Lue,null),e(dd,_er),e(dd,yue),e(yue,uer),b(f,$De,u),b(f,Do,u),M(kL,Do,null),e(Do,ber),e(Do,cd),e(cd,ver),e(cd,$z),e($z,Fer),e(cd,Ter),e(cd,kz),e(kz,Mer),e(cd,Eer),e(Do,Cer),e(Do,SL),e(SL,wer),e(SL,xue),e(xue,Aer),e(SL,Ler),e(Do,yer),e(Do,_t),M(RL,_t,null),e(_t,xer),e(_t,$ue),e($ue,$er),e(_t,ker),e(_t,fd),e(fd,Ser),e(fd,kue),e(kue,Rer),e(fd,Per),e(fd,Sz),e(Sz,Ber),e(fd,Ier),e(_t,Ner),M(j6,_t,null),e(Do,qer),e(Do,io),M(PL,io,null),e(io,jer),e(io,Sue),e(Sue,Der),e(io,Ger),e(io,Da),e(Da,Oer),e(Da,Rue),e(Rue,Ver),e(Da,Xer),e(Da,Pue),e(Pue,zer),e(Da,Wer),e(Da,Bue),e(Bue,Qer),e(Da,Her),e(io,Uer),e(io,Iue),e(Iue,D6),e(D6,Nue),e(Nue,Jer),e(D6,Yer),e(D6,Rz),e(Rz,Ker),e(D6,Zer),e(io,eor),e(io,G6),e(G6,oor),e(G6,que),e(que,ror),e(G6,tor),e(G6,jue),e(jue,aor),e(io,nor),M(O6,io,null),b(f,kDe,u),b(f,md,u),e(md,V6),e(V6,Due),M(BL,Due,null),e(md,sor),e(md,Gue),e(Gue,lor),b(f,SDe,u),b(f,Go,u),M(IL,Go,null),e(Go,ior),e(Go,gd),e(gd,dor),e(gd,Pz),e(Pz,cor),e(gd,mor),e(gd,Bz),e(Bz,gor),e(gd,hor),e(Go,por),e(Go,NL),e(NL,_or),e(NL,Oue),e(Oue,uor),e(NL,bor),e(Go,vor),e(Go,ut),M(qL,ut,null),e(ut,For),e(ut,Vue),e(Vue,Tor),e(ut,Mor),e(ut,hd),e(hd,Eor),e(hd,Xue),e(Xue,Cor),e(hd,wor),e(hd,Iz),e(Iz,Aor),e(hd,Lor),e(ut,yor),M(X6,ut,null),e(Go,xor),e(Go,co),M(jL,co,null),e(co,$or),e(co,zue),e(zue,kor),e(co,Sor),e(co,Ga),e(Ga,Ror),e(Ga,Wue),e(Wue,Por),e(Ga,Bor),e(Ga,Que),e(Que,Ior),e(Ga,Nor),e(Ga,Hue),e(Hue,qor),e(Ga,jor),e(co,Dor),e(co,Pe),e(Pe,z6),e(z6,Uue),e(Uue,Gor),e(z6,Oor),e(z6,Nz),e(Nz,Vor),e(z6,Xor),e(Pe,zor),e(Pe,W6),e(W6,Jue),e(Jue,Wor),e(W6,Qor),e(W6,qz),e(qz,Hor),e(W6,Uor),e(Pe,Jor),e(Pe,Q6),e(Q6,Yue),e(Yue,Yor),e(Q6,Kor),e(Q6,jz),e(jz,Zor),e(Q6,err),e(Pe,orr),e(Pe,H6),e(H6,Kue),e(Kue,rrr),e(H6,trr),e(H6,Dz),e(Dz,arr),e(H6,nrr),e(Pe,srr),e(Pe,U6),e(U6,Zue),e(Zue,lrr),e(U6,irr),e(U6,Gz),e(Gz,drr),e(U6,crr),e(Pe,frr),e(Pe,J6),e(J6,e2e),e(e2e,mrr),e(J6,grr),e(J6,Oz),e(Oz,hrr),e(J6,prr),e(Pe,_rr),e(Pe,Y6),e(Y6,o2e),e(o2e,urr),e(Y6,brr),e(Y6,Vz),e(Vz,vrr),e(Y6,Frr),e(Pe,Trr),e(Pe,K6),e(K6,r2e),e(r2e,Mrr),e(K6,Err),e(K6,Xz),e(Xz,Crr),e(K6,wrr),e(Pe,Arr),e(Pe,Z6),e(Z6,t2e),e(t2e,Lrr),e(Z6,yrr),e(Z6,zz),e(zz,xrr),e(Z6,$rr),e(co,krr),e(co,eT),e(eT,Srr),e(eT,a2e),e(a2e,Rrr),e(eT,Prr),e(eT,n2e),e(n2e,Brr),e(co,Irr),M(oT,co,null),b(f,RDe,u),b(f,pd,u),e(pd,rT),e(rT,s2e),M(DL,s2e,null),e(pd,Nrr),e(pd,l2e),e(l2e,qrr),b(f,PDe,u),b(f,Oo,u),M(GL,Oo,null),e(Oo,jrr),e(Oo,_d),e(_d,Drr),e(_d,Wz),e(Wz,Grr),e(_d,Orr),e(_d,Qz),e(Qz,Vrr),e(_d,Xrr),e(Oo,zrr),e(Oo,OL),e(OL,Wrr),e(OL,i2e),e(i2e,Qrr),e(OL,Hrr),e(Oo,Urr),e(Oo,bt),M(VL,bt,null),e(bt,Jrr),e(bt,d2e),e(d2e,Yrr),e(bt,Krr),e(bt,ud),e(ud,Zrr),e(ud,c2e),e(c2e,etr),e(ud,otr),e(ud,Hz),e(Hz,rtr),e(ud,ttr),e(bt,atr),M(tT,bt,null),e(Oo,ntr),e(Oo,fo),M(XL,fo,null),e(fo,str),e(fo,f2e),e(f2e,ltr),e(fo,itr),e(fo,Oa),e(Oa,dtr),e(Oa,m2e),e(m2e,ctr),e(Oa,ftr),e(Oa,g2e),e(g2e,mtr),e(Oa,gtr),e(Oa,h2e),e(h2e,htr),e(Oa,ptr),e(fo,_tr),e(fo,Kr),e(Kr,aT),e(aT,p2e),e(p2e,utr),e(aT,btr),e(aT,Uz),e(Uz,vtr),e(aT,Ftr),e(Kr,Ttr),e(Kr,nT),e(nT,_2e),e(_2e,Mtr),e(nT,Etr),e(nT,Jz),e(Jz,Ctr),e(nT,wtr),e(Kr,Atr),e(Kr,sT),e(sT,u2e),e(u2e,Ltr),e(sT,ytr),e(sT,Yz),e(Yz,xtr),e(sT,$tr),e(Kr,ktr),e(Kr,lT),e(lT,b2e),e(b2e,Str),e(lT,Rtr),e(lT,Kz),e(Kz,Ptr),e(lT,Btr),e(Kr,Itr),e(Kr,iT),e(iT,v2e),e(v2e,Ntr),e(iT,qtr),e(iT,Zz),e(Zz,jtr),e(iT,Dtr),e(fo,Gtr),e(fo,dT),e(dT,Otr),e(dT,F2e),e(F2e,Vtr),e(dT,Xtr),e(dT,T2e),e(T2e,ztr),e(fo,Wtr),M(cT,fo,null),b(f,BDe,u),b(f,bd,u),e(bd,fT),e(fT,M2e),M(zL,M2e,null),e(bd,Qtr),e(bd,E2e),e(E2e,Htr),b(f,IDe,u),b(f,Vo,u),M(WL,Vo,null),e(Vo,Utr),e(Vo,vd),e(vd,Jtr),e(vd,eW),e(eW,Ytr),e(vd,Ktr),e(vd,oW),e(oW,Ztr),e(vd,ear),e(Vo,oar),e(Vo,QL),e(QL,rar),e(QL,C2e),e(C2e,tar),e(QL,aar),e(Vo,nar),e(Vo,vt),M(HL,vt,null),e(vt,sar),e(vt,w2e),e(w2e,lar),e(vt,iar),e(vt,Fd),e(Fd,dar),e(Fd,A2e),e(A2e,car),e(Fd,far),e(Fd,rW),e(rW,mar),e(Fd,gar),e(vt,har),M(mT,vt,null),e(Vo,par),e(Vo,mo),M(UL,mo,null),e(mo,_ar),e(mo,L2e),e(L2e,uar),e(mo,bar),e(mo,Va),e(Va,Far),e(Va,y2e),e(y2e,Tar),e(Va,Mar),e(Va,x2e),e(x2e,Ear),e(Va,Car),e(Va,$2e),e($2e,war),e(Va,Aar),e(mo,Lar),e(mo,Le),e(Le,gT),e(gT,k2e),e(k2e,yar),e(gT,xar),e(gT,tW),e(tW,$ar),e(gT,kar),e(Le,Sar),e(Le,hT),e(hT,S2e),e(S2e,Rar),e(hT,Par),e(hT,aW),e(aW,Bar),e(hT,Iar),e(Le,Nar),e(Le,pT),e(pT,R2e),e(R2e,qar),e(pT,jar),e(pT,nW),e(nW,Dar),e(pT,Gar),e(Le,Oar),e(Le,_T),e(_T,P2e),e(P2e,Var),e(_T,Xar),e(_T,sW),e(sW,zar),e(_T,War),e(Le,Qar),e(Le,uT),e(uT,B2e),e(B2e,Har),e(uT,Uar),e(uT,lW),e(lW,Jar),e(uT,Yar),e(Le,Kar),e(Le,bT),e(bT,I2e),e(I2e,Zar),e(bT,enr),e(bT,iW),e(iW,onr),e(bT,rnr),e(Le,tnr),e(Le,vT),e(vT,N2e),e(N2e,anr),e(vT,nnr),e(vT,dW),e(dW,snr),e(vT,lnr),e(Le,inr),e(Le,FT),e(FT,q2e),e(q2e,dnr),e(FT,cnr),e(FT,cW),e(cW,fnr),e(FT,mnr),e(Le,gnr),e(Le,TT),e(TT,j2e),e(j2e,hnr),e(TT,pnr),e(TT,fW),e(fW,_nr),e(TT,unr),e(Le,bnr),e(Le,MT),e(MT,D2e),e(D2e,vnr),e(MT,Fnr),e(MT,mW),e(mW,Tnr),e(MT,Mnr),e(mo,Enr),e(mo,ET),e(ET,Cnr),e(ET,G2e),e(G2e,wnr),e(ET,Anr),e(ET,O2e),e(O2e,Lnr),e(mo,ynr),M(CT,mo,null),b(f,NDe,u),b(f,Td,u),e(Td,wT),e(wT,V2e),M(JL,V2e,null),e(Td,xnr),e(Td,X2e),e(X2e,$nr),b(f,qDe,u),b(f,Xo,u),M(YL,Xo,null),e(Xo,knr),e(Xo,Md),e(Md,Snr),e(Md,gW),e(gW,Rnr),e(Md,Pnr),e(Md,hW),e(hW,Bnr),e(Md,Inr),e(Xo,Nnr),e(Xo,KL),e(KL,qnr),e(KL,z2e),e(z2e,jnr),e(KL,Dnr),e(Xo,Gnr),e(Xo,Ft),M(ZL,Ft,null),e(Ft,Onr),e(Ft,W2e),e(W2e,Vnr),e(Ft,Xnr),e(Ft,Ed),e(Ed,znr),e(Ed,Q2e),e(Q2e,Wnr),e(Ed,Qnr),e(Ed,pW),e(pW,Hnr),e(Ed,Unr),e(Ft,Jnr),M(AT,Ft,null),e(Xo,Ynr),e(Xo,go),M(ey,go,null),e(go,Knr),e(go,H2e),e(H2e,Znr),e(go,esr),e(go,Xa),e(Xa,osr),e(Xa,U2e),e(U2e,rsr),e(Xa,tsr),e(Xa,J2e),e(J2e,asr),e(Xa,nsr),e(Xa,Y2e),e(Y2e,ssr),e(Xa,lsr),e(go,isr),e(go,oy),e(oy,LT),e(LT,K2e),e(K2e,dsr),e(LT,csr),e(LT,_W),e(_W,fsr),e(LT,msr),e(oy,gsr),e(oy,yT),e(yT,Z2e),e(Z2e,hsr),e(yT,psr),e(yT,uW),e(uW,_sr),e(yT,usr),e(go,bsr),e(go,xT),e(xT,vsr),e(xT,e1e),e(e1e,Fsr),e(xT,Tsr),e(xT,o1e),e(o1e,Msr),e(go,Esr),M($T,go,null),b(f,jDe,u),b(f,Cd,u),e(Cd,kT),e(kT,r1e),M(ry,r1e,null),e(Cd,Csr),e(Cd,t1e),e(t1e,wsr),b(f,DDe,u),b(f,zo,u),M(ty,zo,null),e(zo,Asr),e(zo,wd),e(wd,Lsr),e(wd,bW),e(bW,ysr),e(wd,xsr),e(wd,vW),e(vW,$sr),e(wd,ksr),e(zo,Ssr),e(zo,ay),e(ay,Rsr),e(ay,a1e),e(a1e,Psr),e(ay,Bsr),e(zo,Isr),e(zo,Tt),M(ny,Tt,null),e(Tt,Nsr),e(Tt,n1e),e(n1e,qsr),e(Tt,jsr),e(Tt,Ad),e(Ad,Dsr),e(Ad,s1e),e(s1e,Gsr),e(Ad,Osr),e(Ad,FW),e(FW,Vsr),e(Ad,Xsr),e(Tt,zsr),M(ST,Tt,null),e(zo,Wsr),e(zo,ho),M(sy,ho,null),e(ho,Qsr),e(ho,l1e),e(l1e,Hsr),e(ho,Usr),e(ho,za),e(za,Jsr),e(za,i1e),e(i1e,Ysr),e(za,Ksr),e(za,d1e),e(d1e,Zsr),e(za,elr),e(za,c1e),e(c1e,olr),e(za,rlr),e(ho,tlr),e(ho,Zr),e(Zr,RT),e(RT,f1e),e(f1e,alr),e(RT,nlr),e(RT,TW),e(TW,slr),e(RT,llr),e(Zr,ilr),e(Zr,PT),e(PT,m1e),e(m1e,dlr),e(PT,clr),e(PT,MW),e(MW,flr),e(PT,mlr),e(Zr,glr),e(Zr,BT),e(BT,g1e),e(g1e,hlr),e(BT,plr),e(BT,EW),e(EW,_lr),e(BT,ulr),e(Zr,blr),e(Zr,IT),e(IT,h1e),e(h1e,vlr),e(IT,Flr),e(IT,CW),e(CW,Tlr),e(IT,Mlr),e(Zr,Elr),e(Zr,NT),e(NT,p1e),e(p1e,Clr),e(NT,wlr),e(NT,wW),e(wW,Alr),e(NT,Llr),e(ho,ylr),e(ho,qT),e(qT,xlr),e(qT,_1e),e(_1e,$lr),e(qT,klr),e(qT,u1e),e(u1e,Slr),e(ho,Rlr),M(jT,ho,null),b(f,GDe,u),b(f,Ld,u),e(Ld,DT),e(DT,b1e),M(ly,b1e,null),e(Ld,Plr),e(Ld,v1e),e(v1e,Blr),b(f,ODe,u),b(f,Wo,u),M(iy,Wo,null),e(Wo,Ilr),e(Wo,yd),e(yd,Nlr),e(yd,AW),e(AW,qlr),e(yd,jlr),e(yd,LW),e(LW,Dlr),e(yd,Glr),e(Wo,Olr),e(Wo,dy),e(dy,Vlr),e(dy,F1e),e(F1e,Xlr),e(dy,zlr),e(Wo,Wlr),e(Wo,Mt),M(cy,Mt,null),e(Mt,Qlr),e(Mt,T1e),e(T1e,Hlr),e(Mt,Ulr),e(Mt,xd),e(xd,Jlr),e(xd,M1e),e(M1e,Ylr),e(xd,Klr),e(xd,yW),e(yW,Zlr),e(xd,eir),e(Mt,oir),M(GT,Mt,null),e(Wo,rir),e(Wo,po),M(fy,po,null),e(po,tir),e(po,E1e),e(E1e,air),e(po,nir),e(po,Wa),e(Wa,sir),e(Wa,C1e),e(C1e,lir),e(Wa,iir),e(Wa,w1e),e(w1e,dir),e(Wa,cir),e(Wa,A1e),e(A1e,fir),e(Wa,mir),e(po,gir),e(po,$d),e($d,OT),e(OT,L1e),e(L1e,hir),e(OT,pir),e(OT,xW),e(xW,_ir),e(OT,uir),e($d,bir),e($d,VT),e(VT,y1e),e(y1e,vir),e(VT,Fir),e(VT,$W),e($W,Tir),e(VT,Mir),e($d,Eir),e($d,XT),e(XT,x1e),e(x1e,Cir),e(XT,wir),e(XT,kW),e(kW,Air),e(XT,Lir),e(po,yir),e(po,zT),e(zT,xir),e(zT,$1e),e($1e,$ir),e(zT,kir),e(zT,k1e),e(k1e,Sir),e(po,Rir),M(WT,po,null),b(f,VDe,u),b(f,kd,u),e(kd,QT),e(QT,S1e),M(my,S1e,null),e(kd,Pir),e(kd,R1e),e(R1e,Bir),b(f,XDe,u),b(f,Qo,u),M(gy,Qo,null),e(Qo,Iir),e(Qo,Sd),e(Sd,Nir),e(Sd,SW),e(SW,qir),e(Sd,jir),e(Sd,RW),e(RW,Dir),e(Sd,Gir),e(Qo,Oir),e(Qo,hy),e(hy,Vir),e(hy,P1e),e(P1e,Xir),e(hy,zir),e(Qo,Wir),e(Qo,Et),M(py,Et,null),e(Et,Qir),e(Et,B1e),e(B1e,Hir),e(Et,Uir),e(Et,Rd),e(Rd,Jir),e(Rd,I1e),e(I1e,Yir),e(Rd,Kir),e(Rd,PW),e(PW,Zir),e(Rd,edr),e(Et,odr),M(HT,Et,null),e(Qo,rdr),e(Qo,_o),M(_y,_o,null),e(_o,tdr),e(_o,N1e),e(N1e,adr),e(_o,ndr),e(_o,Qa),e(Qa,sdr),e(Qa,q1e),e(q1e,ldr),e(Qa,idr),e(Qa,j1e),e(j1e,ddr),e(Qa,cdr),e(Qa,D1e),e(D1e,fdr),e(Qa,mdr),e(_o,gdr),e(_o,uy),e(uy,UT),e(UT,G1e),e(G1e,hdr),e(UT,pdr),e(UT,BW),e(BW,_dr),e(UT,udr),e(uy,bdr),e(uy,JT),e(JT,O1e),e(O1e,vdr),e(JT,Fdr),e(JT,IW),e(IW,Tdr),e(JT,Mdr),e(_o,Edr),e(_o,YT),e(YT,Cdr),e(YT,V1e),e(V1e,wdr),e(YT,Adr),e(YT,X1e),e(X1e,Ldr),e(_o,ydr),M(KT,_o,null),b(f,zDe,u),b(f,Pd,u),e(Pd,ZT),e(ZT,z1e),M(by,z1e,null),e(Pd,xdr),e(Pd,W1e),e(W1e,$dr),b(f,WDe,u),b(f,Ho,u),M(vy,Ho,null),e(Ho,kdr),e(Ho,Bd),e(Bd,Sdr),e(Bd,NW),e(NW,Rdr),e(Bd,Pdr),e(Bd,qW),e(qW,Bdr),e(Bd,Idr),e(Ho,Ndr),e(Ho,Fy),e(Fy,qdr),e(Fy,Q1e),e(Q1e,jdr),e(Fy,Ddr),e(Ho,Gdr),e(Ho,Ct),M(Ty,Ct,null),e(Ct,Odr),e(Ct,H1e),e(H1e,Vdr),e(Ct,Xdr),e(Ct,Id),e(Id,zdr),e(Id,U1e),e(U1e,Wdr),e(Id,Qdr),e(Id,jW),e(jW,Hdr),e(Id,Udr),e(Ct,Jdr),M(e7,Ct,null),e(Ho,Ydr),e(Ho,uo),M(My,uo,null),e(uo,Kdr),e(uo,J1e),e(J1e,Zdr),e(uo,ecr),e(uo,Ha),e(Ha,ocr),e(Ha,Y1e),e(Y1e,rcr),e(Ha,tcr),e(Ha,K1e),e(K1e,acr),e(Ha,ncr),e(Ha,Z1e),e(Z1e,scr),e(Ha,lcr),e(uo,icr),e(uo,ebe),e(ebe,o7),e(o7,obe),e(obe,dcr),e(o7,ccr),e(o7,DW),e(DW,fcr),e(o7,mcr),e(uo,gcr),e(uo,r7),e(r7,hcr),e(r7,rbe),e(rbe,pcr),e(r7,_cr),e(r7,tbe),e(tbe,ucr),e(uo,bcr),M(t7,uo,null),b(f,QDe,u),b(f,Nd,u),e(Nd,a7),e(a7,abe),M(Ey,abe,null),e(Nd,vcr),e(Nd,nbe),e(nbe,Fcr),b(f,HDe,u),b(f,Uo,u),M(Cy,Uo,null),e(Uo,Tcr),e(Uo,qd),e(qd,Mcr),e(qd,GW),e(GW,Ecr),e(qd,Ccr),e(qd,OW),e(OW,wcr),e(qd,Acr),e(Uo,Lcr),e(Uo,wy),e(wy,ycr),e(wy,sbe),e(sbe,xcr),e(wy,$cr),e(Uo,kcr),e(Uo,wt),M(Ay,wt,null),e(wt,Scr),e(wt,lbe),e(lbe,Rcr),e(wt,Pcr),e(wt,jd),e(jd,Bcr),e(jd,ibe),e(ibe,Icr),e(jd,Ncr),e(jd,VW),e(VW,qcr),e(jd,jcr),e(wt,Dcr),M(n7,wt,null),e(Uo,Gcr),e(Uo,bo),M(Ly,bo,null),e(bo,Ocr),e(bo,dbe),e(dbe,Vcr),e(bo,Xcr),e(bo,Ua),e(Ua,zcr),e(Ua,cbe),e(cbe,Wcr),e(Ua,Qcr),e(Ua,fbe),e(fbe,Hcr),e(Ua,Ucr),e(Ua,mbe),e(mbe,Jcr),e(Ua,Ycr),e(bo,Kcr),e(bo,Ja),e(Ja,s7),e(s7,gbe),e(gbe,Zcr),e(s7,efr),e(s7,XW),e(XW,ofr),e(s7,rfr),e(Ja,tfr),e(Ja,l7),e(l7,hbe),e(hbe,afr),e(l7,nfr),e(l7,zW),e(zW,sfr),e(l7,lfr),e(Ja,ifr),e(Ja,i7),e(i7,pbe),e(pbe,dfr),e(i7,cfr),e(i7,WW),e(WW,ffr),e(i7,mfr),e(Ja,gfr),e(Ja,d7),e(d7,_be),e(_be,hfr),e(d7,pfr),e(d7,QW),e(QW,_fr),e(d7,ufr),e(bo,bfr),e(bo,c7),e(c7,vfr),e(c7,ube),e(ube,Ffr),e(c7,Tfr),e(c7,bbe),e(bbe,Mfr),e(bo,Efr),M(f7,bo,null),b(f,UDe,u),b(f,Dd,u),e(Dd,m7),e(m7,vbe),M(yy,vbe,null),e(Dd,Cfr),e(Dd,Fbe),e(Fbe,wfr),b(f,JDe,u),b(f,Jo,u),M(xy,Jo,null),e(Jo,Afr),e(Jo,Gd),e(Gd,Lfr),e(Gd,HW),e(HW,yfr),e(Gd,xfr),e(Gd,UW),e(UW,$fr),e(Gd,kfr),e(Jo,Sfr),e(Jo,$y),e($y,Rfr),e($y,Tbe),e(Tbe,Pfr),e($y,Bfr),e(Jo,Ifr),e(Jo,At),M(ky,At,null),e(At,Nfr),e(At,Mbe),e(Mbe,qfr),e(At,jfr),e(At,Od),e(Od,Dfr),e(Od,Ebe),e(Ebe,Gfr),e(Od,Ofr),e(Od,JW),e(JW,Vfr),e(Od,Xfr),e(At,zfr),M(g7,At,null),e(Jo,Wfr),e(Jo,vo),M(Sy,vo,null),e(vo,Qfr),e(vo,Cbe),e(Cbe,Hfr),e(vo,Ufr),e(vo,Ya),e(Ya,Jfr),e(Ya,wbe),e(wbe,Yfr),e(Ya,Kfr),e(Ya,Abe),e(Abe,Zfr),e(Ya,emr),e(Ya,Lbe),e(Lbe,omr),e(Ya,rmr),e(vo,tmr),e(vo,ybe),e(ybe,h7),e(h7,xbe),e(xbe,amr),e(h7,nmr),e(h7,YW),e(YW,smr),e(h7,lmr),e(vo,imr),e(vo,p7),e(p7,dmr),e(p7,$be),e($be,cmr),e(p7,fmr),e(p7,kbe),e(kbe,mmr),e(vo,gmr),M(_7,vo,null),b(f,YDe,u),b(f,Vd,u),e(Vd,u7),e(u7,Sbe),M(Ry,Sbe,null),e(Vd,hmr),e(Vd,Rbe),e(Rbe,pmr),b(f,KDe,u),b(f,Yo,u),M(Py,Yo,null),e(Yo,_mr),e(Yo,Xd),e(Xd,umr),e(Xd,KW),e(KW,bmr),e(Xd,vmr),e(Xd,ZW),e(ZW,Fmr),e(Xd,Tmr),e(Yo,Mmr),e(Yo,By),e(By,Emr),e(By,Pbe),e(Pbe,Cmr),e(By,wmr),e(Yo,Amr),e(Yo,Lt),M(Iy,Lt,null),e(Lt,Lmr),e(Lt,Bbe),e(Bbe,ymr),e(Lt,xmr),e(Lt,zd),e(zd,$mr),e(zd,Ibe),e(Ibe,kmr),e(zd,Smr),e(zd,eQ),e(eQ,Rmr),e(zd,Pmr),e(Lt,Bmr),M(b7,Lt,null),e(Yo,Imr),e(Yo,wr),M(Ny,wr,null),e(wr,Nmr),e(wr,Nbe),e(Nbe,qmr),e(wr,jmr),e(wr,Ka),e(Ka,Dmr),e(Ka,qbe),e(qbe,Gmr),e(Ka,Omr),e(Ka,jbe),e(jbe,Vmr),e(Ka,Xmr),e(Ka,Dbe),e(Dbe,zmr),e(Ka,Wmr),e(wr,Qmr),e(wr,q),e(q,v7),e(v7,Gbe),e(Gbe,Hmr),e(v7,Umr),e(v7,oQ),e(oQ,Jmr),e(v7,Ymr),e(q,Kmr),e(q,F7),e(F7,Obe),e(Obe,Zmr),e(F7,egr),e(F7,rQ),e(rQ,ogr),e(F7,rgr),e(q,tgr),e(q,T7),e(T7,Vbe),e(Vbe,agr),e(T7,ngr),e(T7,tQ),e(tQ,sgr),e(T7,lgr),e(q,igr),e(q,M7),e(M7,Xbe),e(Xbe,dgr),e(M7,cgr),e(M7,aQ),e(aQ,fgr),e(M7,mgr),e(q,ggr),e(q,E7),e(E7,zbe),e(zbe,hgr),e(E7,pgr),e(E7,nQ),e(nQ,_gr),e(E7,ugr),e(q,bgr),e(q,C7),e(C7,Wbe),e(Wbe,vgr),e(C7,Fgr),e(C7,sQ),e(sQ,Tgr),e(C7,Mgr),e(q,Egr),e(q,w7),e(w7,Qbe),e(Qbe,Cgr),e(w7,wgr),e(w7,lQ),e(lQ,Agr),e(w7,Lgr),e(q,ygr),e(q,A7),e(A7,Hbe),e(Hbe,xgr),e(A7,$gr),e(A7,iQ),e(iQ,kgr),e(A7,Sgr),e(q,Rgr),e(q,L7),e(L7,Ube),e(Ube,Pgr),e(L7,Bgr),e(L7,dQ),e(dQ,Igr),e(L7,Ngr),e(q,qgr),e(q,y7),e(y7,Jbe),e(Jbe,jgr),e(y7,Dgr),e(y7,cQ),e(cQ,Ggr),e(y7,Ogr),e(q,Vgr),e(q,x7),e(x7,Ybe),e(Ybe,Xgr),e(x7,zgr),e(x7,fQ),e(fQ,Wgr),e(x7,Qgr),e(q,Hgr),e(q,$7),e($7,Kbe),e(Kbe,Ugr),e($7,Jgr),e($7,mQ),e(mQ,Ygr),e($7,Kgr),e(q,Zgr),e(q,k7),e(k7,Zbe),e(Zbe,ehr),e(k7,ohr),e(k7,gQ),e(gQ,rhr),e(k7,thr),e(q,ahr),e(q,S7),e(S7,eve),e(eve,nhr),e(S7,shr),e(S7,hQ),e(hQ,lhr),e(S7,ihr),e(q,dhr),e(q,R7),e(R7,ove),e(ove,chr),e(R7,fhr),e(R7,pQ),e(pQ,mhr),e(R7,ghr),e(q,hhr),e(q,P7),e(P7,rve),e(rve,phr),e(P7,_hr),e(P7,_Q),e(_Q,uhr),e(P7,bhr),e(q,vhr),e(q,B7),e(B7,tve),e(tve,Fhr),e(B7,Thr),e(B7,uQ),e(uQ,Mhr),e(B7,Ehr),e(q,Chr),e(q,qs),e(qs,ave),e(ave,whr),e(qs,Ahr),e(qs,bQ),e(bQ,Lhr),e(qs,yhr),e(qs,vQ),e(vQ,xhr),e(qs,$hr),e(q,khr),e(q,I7),e(I7,nve),e(nve,Shr),e(I7,Rhr),e(I7,FQ),e(FQ,Phr),e(I7,Bhr),e(q,Ihr),e(q,N7),e(N7,sve),e(sve,Nhr),e(N7,qhr),e(N7,TQ),e(TQ,jhr),e(N7,Dhr),e(q,Ghr),e(q,q7),e(q7,lve),e(lve,Ohr),e(q7,Vhr),e(q7,MQ),e(MQ,Xhr),e(q7,zhr),e(q,Whr),e(q,j7),e(j7,ive),e(ive,Qhr),e(j7,Hhr),e(j7,EQ),e(EQ,Uhr),e(j7,Jhr),e(q,Yhr),e(q,D7),e(D7,dve),e(dve,Khr),e(D7,Zhr),e(D7,CQ),e(CQ,epr),e(D7,opr),e(q,rpr),e(q,G7),e(G7,cve),e(cve,tpr),e(G7,apr),e(G7,wQ),e(wQ,npr),e(G7,spr),e(q,lpr),e(q,O7),e(O7,fve),e(fve,ipr),e(O7,dpr),e(O7,AQ),e(AQ,cpr),e(O7,fpr),e(q,mpr),e(q,V7),e(V7,mve),e(mve,gpr),e(V7,hpr),e(V7,LQ),e(LQ,ppr),e(V7,_pr),e(q,upr),e(q,X7),e(X7,gve),e(gve,bpr),e(X7,vpr),e(X7,yQ),e(yQ,Fpr),e(X7,Tpr),e(q,Mpr),e(q,z7),e(z7,hve),e(hve,Epr),e(z7,Cpr),e(z7,xQ),e(xQ,wpr),e(z7,Apr),e(q,Lpr),e(q,W7),e(W7,pve),e(pve,ypr),e(W7,xpr),e(W7,$Q),e($Q,$pr),e(W7,kpr),e(q,Spr),e(q,Q7),e(Q7,_ve),e(_ve,Rpr),e(Q7,Ppr),e(Q7,kQ),e(kQ,Bpr),e(Q7,Ipr),e(q,Npr),e(q,H7),e(H7,uve),e(uve,qpr),e(H7,jpr),e(H7,SQ),e(SQ,Dpr),e(H7,Gpr),e(q,Opr),e(q,U7),e(U7,bve),e(bve,Vpr),e(U7,Xpr),e(U7,RQ),e(RQ,zpr),e(U7,Wpr),e(q,Qpr),e(q,J7),e(J7,vve),e(vve,Hpr),e(J7,Upr),e(J7,PQ),e(PQ,Jpr),e(J7,Ypr),e(q,Kpr),e(q,Y7),e(Y7,Fve),e(Fve,Zpr),e(Y7,e_r),e(Y7,BQ),e(BQ,o_r),e(Y7,r_r),e(q,t_r),e(q,K7),e(K7,Tve),e(Tve,a_r),e(K7,n_r),e(K7,IQ),e(IQ,s_r),e(K7,l_r),e(q,i_r),e(q,Z7),e(Z7,Mve),e(Mve,d_r),e(Z7,c_r),e(Z7,NQ),e(NQ,f_r),e(Z7,m_r),e(q,g_r),e(q,e9),e(e9,Eve),e(Eve,h_r),e(e9,p_r),e(e9,qQ),e(qQ,__r),e(e9,u_r),e(q,b_r),e(q,o9),e(o9,Cve),e(Cve,v_r),e(o9,F_r),e(o9,jQ),e(jQ,T_r),e(o9,M_r),e(q,E_r),e(q,r9),e(r9,wve),e(wve,C_r),e(r9,w_r),e(r9,DQ),e(DQ,A_r),e(r9,L_r),e(q,y_r),e(q,t9),e(t9,Ave),e(Ave,x_r),e(t9,$_r),e(t9,GQ),e(GQ,k_r),e(t9,S_r),e(q,R_r),e(q,a9),e(a9,Lve),e(Lve,P_r),e(a9,B_r),e(a9,OQ),e(OQ,I_r),e(a9,N_r),e(q,q_r),e(q,n9),e(n9,yve),e(yve,j_r),e(n9,D_r),e(n9,VQ),e(VQ,G_r),e(n9,O_r),e(q,V_r),e(q,s9),e(s9,xve),e(xve,X_r),e(s9,z_r),e(s9,XQ),e(XQ,W_r),e(s9,Q_r),e(q,H_r),e(q,l9),e(l9,$ve),e($ve,U_r),e(l9,J_r),e(l9,zQ),e(zQ,Y_r),e(l9,K_r),e(q,Z_r),e(q,i9),e(i9,kve),e(kve,eur),e(i9,our),e(i9,WQ),e(WQ,rur),e(i9,tur),e(q,aur),e(q,d9),e(d9,Sve),e(Sve,nur),e(d9,sur),e(d9,QQ),e(QQ,lur),e(d9,iur),e(q,dur),e(q,c9),e(c9,Rve),e(Rve,cur),e(c9,fur),e(c9,HQ),e(HQ,mur),e(c9,gur),e(wr,hur),M(f9,wr,null),b(f,ZDe,u),b(f,Wd,u),e(Wd,m9),e(m9,Pve),M(qy,Pve,null),e(Wd,pur),e(Wd,Bve),e(Bve,_ur),b(f,eGe,u),b(f,Ko,u),M(jy,Ko,null),e(Ko,uur),e(Ko,Qd),e(Qd,bur),e(Qd,UQ),e(UQ,vur),e(Qd,Fur),e(Qd,JQ),e(JQ,Tur),e(Qd,Mur),e(Ko,Eur),e(Ko,Dy),e(Dy,Cur),e(Dy,Ive),e(Ive,wur),e(Dy,Aur),e(Ko,Lur),e(Ko,yt),M(Gy,yt,null),e(yt,yur),e(yt,Nve),e(Nve,xur),e(yt,$ur),e(yt,Hd),e(Hd,kur),e(Hd,qve),e(qve,Sur),e(Hd,Rur),e(Hd,YQ),e(YQ,Pur),e(Hd,Bur),e(yt,Iur),M(g9,yt,null),e(Ko,Nur),e(Ko,Ar),M(Oy,Ar,null),e(Ar,qur),e(Ar,jve),e(jve,jur),e(Ar,Dur),e(Ar,Za),e(Za,Gur),e(Za,Dve),e(Dve,Our),e(Za,Vur),e(Za,Gve),e(Gve,Xur),e(Za,zur),e(Za,Ove),e(Ove,Wur),e(Za,Qur),e(Ar,Hur),e(Ar,se),e(se,h9),e(h9,Vve),e(Vve,Uur),e(h9,Jur),e(h9,KQ),e(KQ,Yur),e(h9,Kur),e(se,Zur),e(se,p9),e(p9,Xve),e(Xve,e2r),e(p9,o2r),e(p9,ZQ),e(ZQ,r2r),e(p9,t2r),e(se,a2r),e(se,_9),e(_9,zve),e(zve,n2r),e(_9,s2r),e(_9,eH),e(eH,l2r),e(_9,i2r),e(se,d2r),e(se,u9),e(u9,Wve),e(Wve,c2r),e(u9,f2r),e(u9,oH),e(oH,m2r),e(u9,g2r),e(se,h2r),e(se,b9),e(b9,Qve),e(Qve,p2r),e(b9,_2r),e(b9,rH),e(rH,u2r),e(b9,b2r),e(se,v2r),e(se,v9),e(v9,Hve),e(Hve,F2r),e(v9,T2r),e(v9,tH),e(tH,M2r),e(v9,E2r),e(se,C2r),e(se,F9),e(F9,Uve),e(Uve,w2r),e(F9,A2r),e(F9,aH),e(aH,L2r),e(F9,y2r),e(se,x2r),e(se,T9),e(T9,Jve),e(Jve,$2r),e(T9,k2r),e(T9,nH),e(nH,S2r),e(T9,R2r),e(se,P2r),e(se,M9),e(M9,Yve),e(Yve,B2r),e(M9,I2r),e(M9,sH),e(sH,N2r),e(M9,q2r),e(se,j2r),e(se,E9),e(E9,Kve),e(Kve,D2r),e(E9,G2r),e(E9,lH),e(lH,O2r),e(E9,V2r),e(se,X2r),e(se,C9),e(C9,Zve),e(Zve,z2r),e(C9,W2r),e(C9,iH),e(iH,Q2r),e(C9,H2r),e(se,U2r),e(se,w9),e(w9,eFe),e(eFe,J2r),e(w9,Y2r),e(w9,dH),e(dH,K2r),e(w9,Z2r),e(se,e1r),e(se,A9),e(A9,oFe),e(oFe,o1r),e(A9,r1r),e(A9,cH),e(cH,t1r),e(A9,a1r),e(se,n1r),e(se,L9),e(L9,rFe),e(rFe,s1r),e(L9,l1r),e(L9,fH),e(fH,i1r),e(L9,d1r),e(se,c1r),e(se,y9),e(y9,tFe),e(tFe,f1r),e(y9,m1r),e(y9,mH),e(mH,g1r),e(y9,h1r),e(se,p1r),e(se,x9),e(x9,aFe),e(aFe,_1r),e(x9,u1r),e(x9,gH),e(gH,b1r),e(x9,v1r),e(se,F1r),e(se,$9),e($9,nFe),e(nFe,T1r),e($9,M1r),e($9,hH),e(hH,E1r),e($9,C1r),e(se,w1r),e(se,k9),e(k9,sFe),e(sFe,A1r),e(k9,L1r),e(k9,pH),e(pH,y1r),e(k9,x1r),e(se,$1r),e(se,S9),e(S9,lFe),e(lFe,k1r),e(S9,S1r),e(S9,_H),e(_H,R1r),e(S9,P1r),e(se,B1r),e(se,R9),e(R9,iFe),e(iFe,I1r),e(R9,N1r),e(R9,uH),e(uH,q1r),e(R9,j1r),e(se,D1r),e(se,P9),e(P9,dFe),e(dFe,G1r),e(P9,O1r),e(P9,bH),e(bH,V1r),e(P9,X1r),e(se,z1r),e(se,B9),e(B9,cFe),e(cFe,W1r),e(B9,Q1r),e(B9,vH),e(vH,H1r),e(B9,U1r),e(se,J1r),e(se,I9),e(I9,fFe),e(fFe,Y1r),e(I9,K1r),e(I9,FH),e(FH,Z1r),e(I9,ebr),e(Ar,obr),M(N9,Ar,null),b(f,oGe,u),b(f,Ud,u),e(Ud,q9),e(q9,mFe),M(Vy,mFe,null),e(Ud,rbr),e(Ud,gFe),e(gFe,tbr),b(f,rGe,u),b(f,Zo,u),M(Xy,Zo,null),e(Zo,abr),e(Zo,Jd),e(Jd,nbr),e(Jd,TH),e(TH,sbr),e(Jd,lbr),e(Jd,MH),e(MH,ibr),e(Jd,dbr),e(Zo,cbr),e(Zo,zy),e(zy,fbr),e(zy,hFe),e(hFe,mbr),e(zy,gbr),e(Zo,hbr),e(Zo,xt),M(Wy,xt,null),e(xt,pbr),e(xt,pFe),e(pFe,_br),e(xt,ubr),e(xt,Yd),e(Yd,bbr),e(Yd,_Fe),e(_Fe,vbr),e(Yd,Fbr),e(Yd,EH),e(EH,Tbr),e(Yd,Mbr),e(xt,Ebr),M(j9,xt,null),e(Zo,Cbr),e(Zo,Lr),M(Qy,Lr,null),e(Lr,wbr),e(Lr,uFe),e(uFe,Abr),e(Lr,Lbr),e(Lr,en),e(en,ybr),e(en,bFe),e(bFe,xbr),e(en,$br),e(en,vFe),e(vFe,kbr),e(en,Sbr),e(en,FFe),e(FFe,Rbr),e(en,Pbr),e(Lr,Bbr),e(Lr,Me),e(Me,D9),e(D9,TFe),e(TFe,Ibr),e(D9,Nbr),e(D9,CH),e(CH,qbr),e(D9,jbr),e(Me,Dbr),e(Me,G9),e(G9,MFe),e(MFe,Gbr),e(G9,Obr),e(G9,wH),e(wH,Vbr),e(G9,Xbr),e(Me,zbr),e(Me,O9),e(O9,EFe),e(EFe,Wbr),e(O9,Qbr),e(O9,AH),e(AH,Hbr),e(O9,Ubr),e(Me,Jbr),e(Me,V9),e(V9,CFe),e(CFe,Ybr),e(V9,Kbr),e(V9,LH),e(LH,Zbr),e(V9,evr),e(Me,ovr),e(Me,X9),e(X9,wFe),e(wFe,rvr),e(X9,tvr),e(X9,yH),e(yH,avr),e(X9,nvr),e(Me,svr),e(Me,z9),e(z9,AFe),e(AFe,lvr),e(z9,ivr),e(z9,xH),e(xH,dvr),e(z9,cvr),e(Me,fvr),e(Me,W9),e(W9,LFe),e(LFe,mvr),e(W9,gvr),e(W9,$H),e($H,hvr),e(W9,pvr),e(Me,_vr),e(Me,Q9),e(Q9,yFe),e(yFe,uvr),e(Q9,bvr),e(Q9,kH),e(kH,vvr),e(Q9,Fvr),e(Me,Tvr),e(Me,H9),e(H9,xFe),e(xFe,Mvr),e(H9,Evr),e(H9,SH),e(SH,Cvr),e(H9,wvr),e(Me,Avr),e(Me,U9),e(U9,$Fe),e($Fe,Lvr),e(U9,yvr),e(U9,RH),e(RH,xvr),e(U9,$vr),e(Me,kvr),e(Me,J9),e(J9,kFe),e(kFe,Svr),e(J9,Rvr),e(J9,PH),e(PH,Pvr),e(J9,Bvr),e(Me,Ivr),e(Me,Y9),e(Y9,SFe),e(SFe,Nvr),e(Y9,qvr),e(Y9,BH),e(BH,jvr),e(Y9,Dvr),e(Me,Gvr),e(Me,K9),e(K9,RFe),e(RFe,Ovr),e(K9,Vvr),e(K9,IH),e(IH,Xvr),e(K9,zvr),e(Lr,Wvr),M(Z9,Lr,null),b(f,tGe,u),b(f,Kd,u),e(Kd,eM),e(eM,PFe),M(Hy,PFe,null),e(Kd,Qvr),e(Kd,BFe),e(BFe,Hvr),b(f,aGe,u),b(f,er,u),M(Uy,er,null),e(er,Uvr),e(er,Zd),e(Zd,Jvr),e(Zd,NH),e(NH,Yvr),e(Zd,Kvr),e(Zd,qH),e(qH,Zvr),e(Zd,eFr),e(er,oFr),e(er,Jy),e(Jy,rFr),e(Jy,IFe),e(IFe,tFr),e(Jy,aFr),e(er,nFr),e(er,$t),M(Yy,$t,null),e($t,sFr),e($t,NFe),e(NFe,lFr),e($t,iFr),e($t,ec),e(ec,dFr),e(ec,qFe),e(qFe,cFr),e(ec,fFr),e(ec,jH),e(jH,mFr),e(ec,gFr),e($t,hFr),M(oM,$t,null),e(er,pFr),e(er,yr),M(Ky,yr,null),e(yr,_Fr),e(yr,jFe),e(jFe,uFr),e(yr,bFr),e(yr,on),e(on,vFr),e(on,DFe),e(DFe,FFr),e(on,TFr),e(on,GFe),e(GFe,MFr),e(on,EFr),e(on,OFe),e(OFe,CFr),e(on,wFr),e(yr,AFr),e(yr,rn),e(rn,rM),e(rM,VFe),e(VFe,LFr),e(rM,yFr),e(rM,DH),e(DH,xFr),e(rM,$Fr),e(rn,kFr),e(rn,tM),e(tM,XFe),e(XFe,SFr),e(tM,RFr),e(tM,GH),e(GH,PFr),e(tM,BFr),e(rn,IFr),e(rn,aM),e(aM,zFe),e(zFe,NFr),e(aM,qFr),e(aM,OH),e(OH,jFr),e(aM,DFr),e(rn,GFr),e(rn,nM),e(nM,WFe),e(WFe,OFr),e(nM,VFr),e(nM,VH),e(VH,XFr),e(nM,zFr),e(yr,WFr),M(sM,yr,null),b(f,nGe,u),b(f,oc,u),e(oc,lM),e(lM,QFe),M(Zy,QFe,null),e(oc,QFr),e(oc,HFe),e(HFe,HFr),b(f,sGe,u),b(f,or,u),M(e8,or,null),e(or,UFr),e(or,rc),e(rc,JFr),e(rc,XH),e(XH,YFr),e(rc,KFr),e(rc,zH),e(zH,ZFr),e(rc,e6r),e(or,o6r),e(or,o8),e(o8,r6r),e(o8,UFe),e(UFe,t6r),e(o8,a6r),e(or,n6r),e(or,kt),M(r8,kt,null),e(kt,s6r),e(kt,JFe),e(JFe,l6r),e(kt,i6r),e(kt,tc),e(tc,d6r),e(tc,YFe),e(YFe,c6r),e(tc,f6r),e(tc,WH),e(WH,m6r),e(tc,g6r),e(kt,h6r),M(iM,kt,null),e(or,p6r),e(or,xr),M(t8,xr,null),e(xr,_6r),e(xr,KFe),e(KFe,u6r),e(xr,b6r),e(xr,tn),e(tn,v6r),e(tn,ZFe),e(ZFe,F6r),e(tn,T6r),e(tn,e6e),e(e6e,M6r),e(tn,E6r),e(tn,o6e),e(o6e,C6r),e(tn,w6r),e(xr,A6r),e(xr,ie),e(ie,dM),e(dM,r6e),e(r6e,L6r),e(dM,y6r),e(dM,QH),e(QH,x6r),e(dM,$6r),e(ie,k6r),e(ie,cM),e(cM,t6e),e(t6e,S6r),e(cM,R6r),e(cM,HH),e(HH,P6r),e(cM,B6r),e(ie,I6r),e(ie,fM),e(fM,a6e),e(a6e,N6r),e(fM,q6r),e(fM,UH),e(UH,j6r),e(fM,D6r),e(ie,G6r),e(ie,mM),e(mM,n6e),e(n6e,O6r),e(mM,V6r),e(mM,JH),e(JH,X6r),e(mM,z6r),e(ie,W6r),e(ie,gM),e(gM,s6e),e(s6e,Q6r),e(gM,H6r),e(gM,YH),e(YH,U6r),e(gM,J6r),e(ie,Y6r),e(ie,hM),e(hM,l6e),e(l6e,K6r),e(hM,Z6r),e(hM,KH),e(KH,eTr),e(hM,oTr),e(ie,rTr),e(ie,pM),e(pM,i6e),e(i6e,tTr),e(pM,aTr),e(pM,ZH),e(ZH,nTr),e(pM,sTr),e(ie,lTr),e(ie,_M),e(_M,d6e),e(d6e,iTr),e(_M,dTr),e(_M,eU),e(eU,cTr),e(_M,fTr),e(ie,mTr),e(ie,uM),e(uM,c6e),e(c6e,gTr),e(uM,hTr),e(uM,oU),e(oU,pTr),e(uM,_Tr),e(ie,uTr),e(ie,bM),e(bM,f6e),e(f6e,bTr),e(bM,vTr),e(bM,rU),e(rU,FTr),e(bM,TTr),e(ie,MTr),e(ie,vM),e(vM,m6e),e(m6e,ETr),e(vM,CTr),e(vM,tU),e(tU,wTr),e(vM,ATr),e(ie,LTr),e(ie,FM),e(FM,g6e),e(g6e,yTr),e(FM,xTr),e(FM,aU),e(aU,$Tr),e(FM,kTr),e(ie,STr),e(ie,TM),e(TM,h6e),e(h6e,RTr),e(TM,PTr),e(TM,nU),e(nU,BTr),e(TM,ITr),e(ie,NTr),e(ie,MM),e(MM,p6e),e(p6e,qTr),e(MM,jTr),e(MM,sU),e(sU,DTr),e(MM,GTr),e(ie,OTr),e(ie,EM),e(EM,_6e),e(_6e,VTr),e(EM,XTr),e(EM,lU),e(lU,zTr),e(EM,WTr),e(ie,QTr),e(ie,CM),e(CM,u6e),e(u6e,HTr),e(CM,UTr),e(CM,iU),e(iU,JTr),e(CM,YTr),e(ie,KTr),e(ie,wM),e(wM,b6e),e(b6e,ZTr),e(wM,e7r),e(wM,dU),e(dU,o7r),e(wM,r7r),e(ie,t7r),e(ie,AM),e(AM,v6e),e(v6e,a7r),e(AM,n7r),e(AM,cU),e(cU,s7r),e(AM,l7r),e(ie,i7r),e(ie,LM),e(LM,F6e),e(F6e,d7r),e(LM,c7r),e(LM,fU),e(fU,f7r),e(LM,m7r),e(ie,g7r),e(ie,yM),e(yM,T6e),e(T6e,h7r),e(yM,p7r),e(yM,mU),e(mU,_7r),e(yM,u7r),e(xr,b7r),M(xM,xr,null),b(f,lGe,u),b(f,ac,u),e(ac,$M),e($M,M6e),M(a8,M6e,null),e(ac,v7r),e(ac,E6e),e(E6e,F7r),b(f,iGe,u),b(f,rr,u),M(n8,rr,null),e(rr,T7r),e(rr,nc),e(nc,M7r),e(nc,gU),e(gU,E7r),e(nc,C7r),e(nc,hU),e(hU,w7r),e(nc,A7r),e(rr,L7r),e(rr,s8),e(s8,y7r),e(s8,C6e),e(C6e,x7r),e(s8,$7r),e(rr,k7r),e(rr,St),M(l8,St,null),e(St,S7r),e(St,w6e),e(w6e,R7r),e(St,P7r),e(St,sc),e(sc,B7r),e(sc,A6e),e(A6e,I7r),e(sc,N7r),e(sc,pU),e(pU,q7r),e(sc,j7r),e(St,D7r),M(kM,St,null),e(rr,G7r),e(rr,$r),M(i8,$r,null),e($r,O7r),e($r,L6e),e(L6e,V7r),e($r,X7r),e($r,an),e(an,z7r),e(an,y6e),e(y6e,W7r),e(an,Q7r),e(an,x6e),e(x6e,H7r),e(an,U7r),e(an,$6e),e($6e,J7r),e(an,Y7r),e($r,K7r),e($r,ye),e(ye,SM),e(SM,k6e),e(k6e,Z7r),e(SM,e9r),e(SM,_U),e(_U,o9r),e(SM,r9r),e(ye,t9r),e(ye,RM),e(RM,S6e),e(S6e,a9r),e(RM,n9r),e(RM,uU),e(uU,s9r),e(RM,l9r),e(ye,i9r),e(ye,PM),e(PM,R6e),e(R6e,d9r),e(PM,c9r),e(PM,bU),e(bU,f9r),e(PM,m9r),e(ye,g9r),e(ye,BM),e(BM,P6e),e(P6e,h9r),e(BM,p9r),e(BM,vU),e(vU,_9r),e(BM,u9r),e(ye,b9r),e(ye,IM),e(IM,B6e),e(B6e,v9r),e(IM,F9r),e(IM,FU),e(FU,T9r),e(IM,M9r),e(ye,E9r),e(ye,NM),e(NM,I6e),e(I6e,C9r),e(NM,w9r),e(NM,TU),e(TU,A9r),e(NM,L9r),e(ye,y9r),e(ye,qM),e(qM,N6e),e(N6e,x9r),e(qM,$9r),e(qM,MU),e(MU,k9r),e(qM,S9r),e(ye,R9r),e(ye,jM),e(jM,q6e),e(q6e,P9r),e(jM,B9r),e(jM,EU),e(EU,I9r),e(jM,N9r),e(ye,q9r),e(ye,DM),e(DM,j6e),e(j6e,j9r),e(DM,D9r),e(DM,CU),e(CU,G9r),e(DM,O9r),e(ye,V9r),e(ye,GM),e(GM,D6e),e(D6e,X9r),e(GM,z9r),e(GM,wU),e(wU,W9r),e(GM,Q9r),e($r,H9r),M(OM,$r,null),b(f,dGe,u),b(f,lc,u),e(lc,VM),e(VM,G6e),M(d8,G6e,null),e(lc,U9r),e(lc,O6e),e(O6e,J9r),b(f,cGe,u),b(f,tr,u),M(c8,tr,null),e(tr,Y9r),e(tr,ic),e(ic,K9r),e(ic,AU),e(AU,Z9r),e(ic,eMr),e(ic,LU),e(LU,oMr),e(ic,rMr),e(tr,tMr),e(tr,f8),e(f8,aMr),e(f8,V6e),e(V6e,nMr),e(f8,sMr),e(tr,lMr),e(tr,Rt),M(m8,Rt,null),e(Rt,iMr),e(Rt,X6e),e(X6e,dMr),e(Rt,cMr),e(Rt,dc),e(dc,fMr),e(dc,z6e),e(z6e,mMr),e(dc,gMr),e(dc,yU),e(yU,hMr),e(dc,pMr),e(Rt,_Mr),M(XM,Rt,null),e(tr,uMr),e(tr,kr),M(g8,kr,null),e(kr,bMr),e(kr,W6e),e(W6e,vMr),e(kr,FMr),e(kr,nn),e(nn,TMr),e(nn,Q6e),e(Q6e,MMr),e(nn,EMr),e(nn,H6e),e(H6e,CMr),e(nn,wMr),e(nn,U6e),e(U6e,AMr),e(nn,LMr),e(kr,yMr),e(kr,re),e(re,zM),e(zM,J6e),e(J6e,xMr),e(zM,$Mr),e(zM,xU),e(xU,kMr),e(zM,SMr),e(re,RMr),e(re,WM),e(WM,Y6e),e(Y6e,PMr),e(WM,BMr),e(WM,$U),e($U,IMr),e(WM,NMr),e(re,qMr),e(re,QM),e(QM,K6e),e(K6e,jMr),e(QM,DMr),e(QM,kU),e(kU,GMr),e(QM,OMr),e(re,VMr),e(re,HM),e(HM,Z6e),e(Z6e,XMr),e(HM,zMr),e(HM,SU),e(SU,WMr),e(HM,QMr),e(re,HMr),e(re,UM),e(UM,eTe),e(eTe,UMr),e(UM,JMr),e(UM,RU),e(RU,YMr),e(UM,KMr),e(re,ZMr),e(re,JM),e(JM,oTe),e(oTe,e4r),e(JM,o4r),e(JM,PU),e(PU,r4r),e(JM,t4r),e(re,a4r),e(re,YM),e(YM,rTe),e(rTe,n4r),e(YM,s4r),e(YM,BU),e(BU,l4r),e(YM,i4r),e(re,d4r),e(re,KM),e(KM,tTe),e(tTe,c4r),e(KM,f4r),e(KM,IU),e(IU,m4r),e(KM,g4r),e(re,h4r),e(re,ZM),e(ZM,aTe),e(aTe,p4r),e(ZM,_4r),e(ZM,NU),e(NU,u4r),e(ZM,b4r),e(re,v4r),e(re,e4),e(e4,nTe),e(nTe,F4r),e(e4,T4r),e(e4,qU),e(qU,M4r),e(e4,E4r),e(re,C4r),e(re,o4),e(o4,sTe),e(sTe,w4r),e(o4,A4r),e(o4,jU),e(jU,L4r),e(o4,y4r),e(re,x4r),e(re,r4),e(r4,lTe),e(lTe,$4r),e(r4,k4r),e(r4,DU),e(DU,S4r),e(r4,R4r),e(re,P4r),e(re,t4),e(t4,iTe),e(iTe,B4r),e(t4,I4r),e(t4,GU),e(GU,N4r),e(t4,q4r),e(re,j4r),e(re,a4),e(a4,dTe),e(dTe,D4r),e(a4,G4r),e(a4,OU),e(OU,O4r),e(a4,V4r),e(re,X4r),e(re,n4),e(n4,cTe),e(cTe,z4r),e(n4,W4r),e(n4,VU),e(VU,Q4r),e(n4,H4r),e(re,U4r),e(re,s4),e(s4,fTe),e(fTe,J4r),e(s4,Y4r),e(s4,XU),e(XU,K4r),e(s4,Z4r),e(re,eEr),e(re,l4),e(l4,mTe),e(mTe,oEr),e(l4,rEr),e(l4,zU),e(zU,tEr),e(l4,aEr),e(re,nEr),e(re,i4),e(i4,gTe),e(gTe,sEr),e(i4,lEr),e(i4,WU),e(WU,iEr),e(i4,dEr),e(re,cEr),e(re,d4),e(d4,hTe),e(hTe,fEr),e(d4,mEr),e(d4,QU),e(QU,gEr),e(d4,hEr),e(re,pEr),e(re,c4),e(c4,pTe),e(pTe,_Er),e(c4,uEr),e(c4,HU),e(HU,bEr),e(c4,vEr),e(re,FEr),e(re,f4),e(f4,_Te),e(_Te,TEr),e(f4,MEr),e(f4,UU),e(UU,EEr),e(f4,CEr),e(re,wEr),e(re,m4),e(m4,uTe),e(uTe,AEr),e(m4,LEr),e(m4,JU),e(JU,yEr),e(m4,xEr),e(re,$Er),e(re,g4),e(g4,bTe),e(bTe,kEr),e(g4,SEr),e(g4,YU),e(YU,REr),e(g4,PEr),e(re,BEr),e(re,h4),e(h4,vTe),e(vTe,IEr),e(h4,NEr),e(h4,KU),e(KU,qEr),e(h4,jEr),e(re,DEr),e(re,p4),e(p4,FTe),e(FTe,GEr),e(p4,OEr),e(p4,ZU),e(ZU,VEr),e(p4,XEr),e(re,zEr),e(re,_4),e(_4,TTe),e(TTe,WEr),e(_4,QEr),e(_4,eJ),e(eJ,HEr),e(_4,UEr),e(kr,JEr),M(u4,kr,null),b(f,fGe,u),b(f,cc,u),e(cc,b4),e(b4,MTe),M(h8,MTe,null),e(cc,YEr),e(cc,ETe),e(ETe,KEr),b(f,mGe,u),b(f,ar,u),M(p8,ar,null),e(ar,ZEr),e(ar,fc),e(fc,eCr),e(fc,oJ),e(oJ,oCr),e(fc,rCr),e(fc,rJ),e(rJ,tCr),e(fc,aCr),e(ar,nCr),e(ar,_8),e(_8,sCr),e(_8,CTe),e(CTe,lCr),e(_8,iCr),e(ar,dCr),e(ar,Pt),M(u8,Pt,null),e(Pt,cCr),e(Pt,wTe),e(wTe,fCr),e(Pt,mCr),e(Pt,mc),e(mc,gCr),e(mc,ATe),e(ATe,hCr),e(mc,pCr),e(mc,tJ),e(tJ,_Cr),e(mc,uCr),e(Pt,bCr),M(v4,Pt,null),e(ar,vCr),e(ar,Sr),M(b8,Sr,null),e(Sr,FCr),e(Sr,LTe),e(LTe,TCr),e(Sr,MCr),e(Sr,sn),e(sn,ECr),e(sn,yTe),e(yTe,CCr),e(sn,wCr),e(sn,xTe),e(xTe,ACr),e(sn,LCr),e(sn,$Te),e($Te,yCr),e(sn,xCr),e(Sr,$Cr),e(Sr,_e),e(_e,F4),e(F4,kTe),e(kTe,kCr),e(F4,SCr),e(F4,aJ),e(aJ,RCr),e(F4,PCr),e(_e,BCr),e(_e,T4),e(T4,STe),e(STe,ICr),e(T4,NCr),e(T4,nJ),e(nJ,qCr),e(T4,jCr),e(_e,DCr),e(_e,M4),e(M4,RTe),e(RTe,GCr),e(M4,OCr),e(M4,sJ),e(sJ,VCr),e(M4,XCr),e(_e,zCr),e(_e,E4),e(E4,PTe),e(PTe,WCr),e(E4,QCr),e(E4,lJ),e(lJ,HCr),e(E4,UCr),e(_e,JCr),e(_e,C4),e(C4,BTe),e(BTe,YCr),e(C4,KCr),e(C4,iJ),e(iJ,ZCr),e(C4,e5r),e(_e,o5r),e(_e,w4),e(w4,ITe),e(ITe,r5r),e(w4,t5r),e(w4,dJ),e(dJ,a5r),e(w4,n5r),e(_e,s5r),e(_e,A4),e(A4,NTe),e(NTe,l5r),e(A4,i5r),e(A4,cJ),e(cJ,d5r),e(A4,c5r),e(_e,f5r),e(_e,L4),e(L4,qTe),e(qTe,m5r),e(L4,g5r),e(L4,fJ),e(fJ,h5r),e(L4,p5r),e(_e,_5r),e(_e,y4),e(y4,jTe),e(jTe,u5r),e(y4,b5r),e(y4,mJ),e(mJ,v5r),e(y4,F5r),e(_e,T5r),e(_e,x4),e(x4,DTe),e(DTe,M5r),e(x4,E5r),e(x4,gJ),e(gJ,C5r),e(x4,w5r),e(_e,A5r),e(_e,$4),e($4,GTe),e(GTe,L5r),e($4,y5r),e($4,hJ),e(hJ,x5r),e($4,$5r),e(_e,k5r),e(_e,k4),e(k4,OTe),e(OTe,S5r),e(k4,R5r),e(k4,pJ),e(pJ,P5r),e(k4,B5r),e(_e,I5r),e(_e,S4),e(S4,VTe),e(VTe,N5r),e(S4,q5r),e(S4,_J),e(_J,j5r),e(S4,D5r),e(_e,G5r),e(_e,R4),e(R4,XTe),e(XTe,O5r),e(R4,V5r),e(R4,uJ),e(uJ,X5r),e(R4,z5r),e(_e,W5r),e(_e,P4),e(P4,zTe),e(zTe,Q5r),e(P4,H5r),e(P4,bJ),e(bJ,U5r),e(P4,J5r),e(_e,Y5r),e(_e,B4),e(B4,WTe),e(WTe,K5r),e(B4,Z5r),e(B4,vJ),e(vJ,e3r),e(B4,o3r),e(_e,r3r),e(_e,I4),e(I4,QTe),e(QTe,t3r),e(I4,a3r),e(I4,FJ),e(FJ,n3r),e(I4,s3r),e(Sr,l3r),M(N4,Sr,null),b(f,gGe,u),b(f,gc,u),e(gc,q4),e(q4,HTe),M(v8,HTe,null),e(gc,i3r),e(gc,UTe),e(UTe,d3r),b(f,hGe,u),b(f,nr,u),M(F8,nr,null),e(nr,c3r),e(nr,hc),e(hc,f3r),e(hc,TJ),e(TJ,m3r),e(hc,g3r),e(hc,MJ),e(MJ,h3r),e(hc,p3r),e(nr,_3r),e(nr,T8),e(T8,u3r),e(T8,JTe),e(JTe,b3r),e(T8,v3r),e(nr,F3r),e(nr,Bt),M(M8,Bt,null),e(Bt,T3r),e(Bt,YTe),e(YTe,M3r),e(Bt,E3r),e(Bt,pc),e(pc,C3r),e(pc,KTe),e(KTe,w3r),e(pc,A3r),e(pc,EJ),e(EJ,L3r),e(pc,y3r),e(Bt,x3r),M(j4,Bt,null),e(nr,$3r),e(nr,Rr),M(E8,Rr,null),e(Rr,k3r),e(Rr,ZTe),e(ZTe,S3r),e(Rr,R3r),e(Rr,ln),e(ln,P3r),e(ln,e7e),e(e7e,B3r),e(ln,I3r),e(ln,o7e),e(o7e,N3r),e(ln,q3r),e(ln,r7e),e(r7e,j3r),e(ln,D3r),e(Rr,G3r),e(Rr,C8),e(C8,D4),e(D4,t7e),e(t7e,O3r),e(D4,V3r),e(D4,CJ),e(CJ,X3r),e(D4,z3r),e(C8,W3r),e(C8,G4),e(G4,a7e),e(a7e,Q3r),e(G4,H3r),e(G4,wJ),e(wJ,U3r),e(G4,J3r),e(Rr,Y3r),M(O4,Rr,null),b(f,pGe,u),b(f,_c,u),e(_c,V4),e(V4,n7e),M(w8,n7e,null),e(_c,K3r),e(_c,s7e),e(s7e,Z3r),b(f,_Ge,u),b(f,sr,u),M(A8,sr,null),e(sr,e0r),e(sr,uc),e(uc,o0r),e(uc,AJ),e(AJ,r0r),e(uc,t0r),e(uc,LJ),e(LJ,a0r),e(uc,n0r),e(sr,s0r),e(sr,L8),e(L8,l0r),e(L8,l7e),e(l7e,i0r),e(L8,d0r),e(sr,c0r),e(sr,It),M(y8,It,null),e(It,f0r),e(It,i7e),e(i7e,m0r),e(It,g0r),e(It,bc),e(bc,h0r),e(bc,d7e),e(d7e,p0r),e(bc,_0r),e(bc,yJ),e(yJ,u0r),e(bc,b0r),e(It,v0r),M(X4,It,null),e(sr,F0r),e(sr,Pr),M(x8,Pr,null),e(Pr,T0r),e(Pr,c7e),e(c7e,M0r),e(Pr,E0r),e(Pr,dn),e(dn,C0r),e(dn,f7e),e(f7e,w0r),e(dn,A0r),e(dn,m7e),e(m7e,L0r),e(dn,y0r),e(dn,g7e),e(g7e,x0r),e(dn,$0r),e(Pr,k0r),e(Pr,h7e),e(h7e,z4),e(z4,p7e),e(p7e,S0r),e(z4,R0r),e(z4,xJ),e(xJ,P0r),e(z4,B0r),e(Pr,I0r),M(W4,Pr,null),b(f,uGe,u),b(f,vc,u),e(vc,Q4),e(Q4,_7e),M($8,_7e,null),e(vc,N0r),e(vc,u7e),e(u7e,q0r),b(f,bGe,u),b(f,lr,u),M(k8,lr,null),e(lr,j0r),e(lr,Fc),e(Fc,D0r),e(Fc,$J),e($J,G0r),e(Fc,O0r),e(Fc,kJ),e(kJ,V0r),e(Fc,X0r),e(lr,z0r),e(lr,S8),e(S8,W0r),e(S8,b7e),e(b7e,Q0r),e(S8,H0r),e(lr,U0r),e(lr,Nt),M(R8,Nt,null),e(Nt,J0r),e(Nt,v7e),e(v7e,Y0r),e(Nt,K0r),e(Nt,Tc),e(Tc,Z0r),e(Tc,F7e),e(F7e,ewr),e(Tc,owr),e(Tc,SJ),e(SJ,rwr),e(Tc,twr),e(Nt,awr),M(H4,Nt,null),e(lr,nwr),e(lr,Br),M(P8,Br,null),e(Br,swr),e(Br,T7e),e(T7e,lwr),e(Br,iwr),e(Br,cn),e(cn,dwr),e(cn,M7e),e(M7e,cwr),e(cn,fwr),e(cn,E7e),e(E7e,mwr),e(cn,gwr),e(cn,C7e),e(C7e,hwr),e(cn,pwr),e(Br,_wr),e(Br,de),e(de,U4),e(U4,w7e),e(w7e,uwr),e(U4,bwr),e(U4,RJ),e(RJ,vwr),e(U4,Fwr),e(de,Twr),e(de,J4),e(J4,A7e),e(A7e,Mwr),e(J4,Ewr),e(J4,PJ),e(PJ,Cwr),e(J4,wwr),e(de,Awr),e(de,Y4),e(Y4,L7e),e(L7e,Lwr),e(Y4,ywr),e(Y4,BJ),e(BJ,xwr),e(Y4,$wr),e(de,kwr),e(de,K4),e(K4,y7e),e(y7e,Swr),e(K4,Rwr),e(K4,IJ),e(IJ,Pwr),e(K4,Bwr),e(de,Iwr),e(de,Z4),e(Z4,x7e),e(x7e,Nwr),e(Z4,qwr),e(Z4,NJ),e(NJ,jwr),e(Z4,Dwr),e(de,Gwr),e(de,eE),e(eE,$7e),e($7e,Owr),e(eE,Vwr),e(eE,qJ),e(qJ,Xwr),e(eE,zwr),e(de,Wwr),e(de,oE),e(oE,k7e),e(k7e,Qwr),e(oE,Hwr),e(oE,jJ),e(jJ,Uwr),e(oE,Jwr),e(de,Ywr),e(de,rE),e(rE,S7e),e(S7e,Kwr),e(rE,Zwr),e(rE,DJ),e(DJ,eAr),e(rE,oAr),e(de,rAr),e(de,tE),e(tE,R7e),e(R7e,tAr),e(tE,aAr),e(tE,GJ),e(GJ,nAr),e(tE,sAr),e(de,lAr),e(de,aE),e(aE,P7e),e(P7e,iAr),e(aE,dAr),e(aE,OJ),e(OJ,cAr),e(aE,fAr),e(de,mAr),e(de,nE),e(nE,B7e),e(B7e,gAr),e(nE,hAr),e(nE,VJ),e(VJ,pAr),e(nE,_Ar),e(de,uAr),e(de,sE),e(sE,I7e),e(I7e,bAr),e(sE,vAr),e(sE,XJ),e(XJ,FAr),e(sE,TAr),e(de,MAr),e(de,lE),e(lE,N7e),e(N7e,EAr),e(lE,CAr),e(lE,zJ),e(zJ,wAr),e(lE,AAr),e(de,LAr),e(de,iE),e(iE,q7e),e(q7e,yAr),e(iE,xAr),e(iE,WJ),e(WJ,$Ar),e(iE,kAr),e(de,SAr),e(de,dE),e(dE,j7e),e(j7e,RAr),e(dE,PAr),e(dE,QJ),e(QJ,BAr),e(dE,IAr),e(de,NAr),e(de,cE),e(cE,D7e),e(D7e,qAr),e(cE,jAr),e(cE,HJ),e(HJ,DAr),e(cE,GAr),e(de,OAr),e(de,fE),e(fE,G7e),e(G7e,VAr),e(fE,XAr),e(fE,UJ),e(UJ,zAr),e(fE,WAr),e(de,QAr),e(de,mE),e(mE,O7e),e(O7e,HAr),e(mE,UAr),e(mE,JJ),e(JJ,JAr),e(mE,YAr),e(de,KAr),e(de,gE),e(gE,V7e),e(V7e,ZAr),e(gE,eLr),e(gE,YJ),e(YJ,oLr),e(gE,rLr),e(de,tLr),e(de,hE),e(hE,X7e),e(X7e,aLr),e(hE,nLr),e(hE,KJ),e(KJ,sLr),e(hE,lLr),e(Br,iLr),M(pE,Br,null),b(f,vGe,u),b(f,Mc,u),e(Mc,_E),e(_E,z7e),M(B8,z7e,null),e(Mc,dLr),e(Mc,W7e),e(W7e,cLr),b(f,FGe,u),b(f,ir,u),M(I8,ir,null),e(ir,fLr),e(ir,Ec),e(Ec,mLr),e(Ec,ZJ),e(ZJ,gLr),e(Ec,hLr),e(Ec,eY),e(eY,pLr),e(Ec,_Lr),e(ir,uLr),e(ir,N8),e(N8,bLr),e(N8,Q7e),e(Q7e,vLr),e(N8,FLr),e(ir,TLr),e(ir,qt),M(q8,qt,null),e(qt,MLr),e(qt,H7e),e(H7e,ELr),e(qt,CLr),e(qt,Cc),e(Cc,wLr),e(Cc,U7e),e(U7e,ALr),e(Cc,LLr),e(Cc,oY),e(oY,yLr),e(Cc,xLr),e(qt,$Lr),M(uE,qt,null),e(ir,kLr),e(ir,Ir),M(j8,Ir,null),e(Ir,SLr),e(Ir,J7e),e(J7e,RLr),e(Ir,PLr),e(Ir,fn),e(fn,BLr),e(fn,Y7e),e(Y7e,ILr),e(fn,NLr),e(fn,K7e),e(K7e,qLr),e(fn,jLr),e(fn,Z7e),e(Z7e,DLr),e(fn,GLr),e(Ir,OLr),e(Ir,ce),e(ce,bE),e(bE,e9e),e(e9e,VLr),e(bE,XLr),e(bE,rY),e(rY,zLr),e(bE,WLr),e(ce,QLr),e(ce,vE),e(vE,o9e),e(o9e,HLr),e(vE,ULr),e(vE,tY),e(tY,JLr),e(vE,YLr),e(ce,KLr),e(ce,FE),e(FE,r9e),e(r9e,ZLr),e(FE,eyr),e(FE,aY),e(aY,oyr),e(FE,ryr),e(ce,tyr),e(ce,TE),e(TE,t9e),e(t9e,ayr),e(TE,nyr),e(TE,nY),e(nY,syr),e(TE,lyr),e(ce,iyr),e(ce,ME),e(ME,a9e),e(a9e,dyr),e(ME,cyr),e(ME,sY),e(sY,fyr),e(ME,myr),e(ce,gyr),e(ce,EE),e(EE,n9e),e(n9e,hyr),e(EE,pyr),e(EE,lY),e(lY,_yr),e(EE,uyr),e(ce,byr),e(ce,CE),e(CE,s9e),e(s9e,vyr),e(CE,Fyr),e(CE,iY),e(iY,Tyr),e(CE,Myr),e(ce,Eyr),e(ce,wE),e(wE,l9e),e(l9e,Cyr),e(wE,wyr),e(wE,dY),e(dY,Ayr),e(wE,Lyr),e(ce,yyr),e(ce,AE),e(AE,i9e),e(i9e,xyr),e(AE,$yr),e(AE,cY),e(cY,kyr),e(AE,Syr),e(ce,Ryr),e(ce,LE),e(LE,d9e),e(d9e,Pyr),e(LE,Byr),e(LE,fY),e(fY,Iyr),e(LE,Nyr),e(ce,qyr),e(ce,yE),e(yE,c9e),e(c9e,jyr),e(yE,Dyr),e(yE,mY),e(mY,Gyr),e(yE,Oyr),e(ce,Vyr),e(ce,xE),e(xE,f9e),e(f9e,Xyr),e(xE,zyr),e(xE,gY),e(gY,Wyr),e(xE,Qyr),e(ce,Hyr),e(ce,$E),e($E,m9e),e(m9e,Uyr),e($E,Jyr),e($E,hY),e(hY,Yyr),e($E,Kyr),e(ce,Zyr),e(ce,kE),e(kE,g9e),e(g9e,e8r),e(kE,o8r),e(kE,pY),e(pY,r8r),e(kE,t8r),e(ce,a8r),e(ce,SE),e(SE,h9e),e(h9e,n8r),e(SE,s8r),e(SE,_Y),e(_Y,l8r),e(SE,i8r),e(ce,d8r),e(ce,RE),e(RE,p9e),e(p9e,c8r),e(RE,f8r),e(RE,uY),e(uY,m8r),e(RE,g8r),e(ce,h8r),e(ce,PE),e(PE,_9e),e(_9e,p8r),e(PE,_8r),e(PE,bY),e(bY,u8r),e(PE,b8r),e(ce,v8r),e(ce,BE),e(BE,u9e),e(u9e,F8r),e(BE,T8r),e(BE,vY),e(vY,M8r),e(BE,E8r),e(ce,C8r),e(ce,IE),e(IE,b9e),e(b9e,w8r),e(IE,A8r),e(IE,FY),e(FY,L8r),e(IE,y8r),e(ce,x8r),e(ce,NE),e(NE,v9e),e(v9e,$8r),e(NE,k8r),e(NE,TY),e(TY,S8r),e(NE,R8r),e(Ir,P8r),M(qE,Ir,null),b(f,TGe,u),b(f,wc,u),e(wc,jE),e(jE,F9e),M(D8,F9e,null),e(wc,B8r),e(wc,T9e),e(T9e,I8r),b(f,MGe,u),b(f,dr,u),M(G8,dr,null),e(dr,N8r),e(dr,Ac),e(Ac,q8r),e(Ac,MY),e(MY,j8r),e(Ac,D8r),e(Ac,EY),e(EY,G8r),e(Ac,O8r),e(dr,V8r),e(dr,O8),e(O8,X8r),e(O8,M9e),e(M9e,z8r),e(O8,W8r),e(dr,Q8r),e(dr,jt),M(V8,jt,null),e(jt,H8r),e(jt,E9e),e(E9e,U8r),e(jt,J8r),e(jt,Lc),e(Lc,Y8r),e(Lc,C9e),e(C9e,K8r),e(Lc,Z8r),e(Lc,CY),e(CY,exr),e(Lc,oxr),e(jt,rxr),M(DE,jt,null),e(dr,txr),e(dr,Nr),M(X8,Nr,null),e(Nr,axr),e(Nr,w9e),e(w9e,nxr),e(Nr,sxr),e(Nr,mn),e(mn,lxr),e(mn,A9e),e(A9e,ixr),e(mn,dxr),e(mn,L9e),e(L9e,cxr),e(mn,fxr),e(mn,y9e),e(y9e,mxr),e(mn,gxr),e(Nr,hxr),e(Nr,x9e),e(x9e,GE),e(GE,$9e),e($9e,pxr),e(GE,_xr),e(GE,wY),e(wY,uxr),e(GE,bxr),e(Nr,vxr),M(OE,Nr,null),b(f,EGe,u),b(f,yc,u),e(yc,VE),e(VE,k9e),M(z8,k9e,null),e(yc,Fxr),e(yc,S9e),e(S9e,Txr),b(f,CGe,u),b(f,cr,u),M(W8,cr,null),e(cr,Mxr),e(cr,xc),e(xc,Exr),e(xc,AY),e(AY,Cxr),e(xc,wxr),e(xc,LY),e(LY,Axr),e(xc,Lxr),e(cr,yxr),e(cr,Q8),e(Q8,xxr),e(Q8,R9e),e(R9e,$xr),e(Q8,kxr),e(cr,Sxr),e(cr,Dt),M(H8,Dt,null),e(Dt,Rxr),e(Dt,P9e),e(P9e,Pxr),e(Dt,Bxr),e(Dt,$c),e($c,Ixr),e($c,B9e),e(B9e,Nxr),e($c,qxr),e($c,yY),e(yY,jxr),e($c,Dxr),e(Dt,Gxr),M(XE,Dt,null),e(cr,Oxr),e(cr,qr),M(U8,qr,null),e(qr,Vxr),e(qr,I9e),e(I9e,Xxr),e(qr,zxr),e(qr,gn),e(gn,Wxr),e(gn,N9e),e(N9e,Qxr),e(gn,Hxr),e(gn,q9e),e(q9e,Uxr),e(gn,Jxr),e(gn,j9e),e(j9e,Yxr),e(gn,Kxr),e(qr,Zxr),e(qr,D9e),e(D9e,zE),e(zE,G9e),e(G9e,e$r),e(zE,o$r),e(zE,xY),e(xY,r$r),e(zE,t$r),e(qr,a$r),M(WE,qr,null),b(f,wGe,u),b(f,kc,u),e(kc,QE),e(QE,O9e),M(J8,O9e,null),e(kc,n$r),e(kc,V9e),e(V9e,s$r),b(f,AGe,u),b(f,fr,u),M(Y8,fr,null),e(fr,l$r),e(fr,Sc),e(Sc,i$r),e(Sc,$Y),e($Y,d$r),e(Sc,c$r),e(Sc,kY),e(kY,f$r),e(Sc,m$r),e(fr,g$r),e(fr,K8),e(K8,h$r),e(K8,X9e),e(X9e,p$r),e(K8,_$r),e(fr,u$r),e(fr,Gt),M(Z8,Gt,null),e(Gt,b$r),e(Gt,z9e),e(z9e,v$r),e(Gt,F$r),e(Gt,Rc),e(Rc,T$r),e(Rc,W9e),e(W9e,M$r),e(Rc,E$r),e(Rc,SY),e(SY,C$r),e(Rc,w$r),e(Gt,A$r),M(HE,Gt,null),e(fr,L$r),e(fr,jr),M(ex,jr,null),e(jr,y$r),e(jr,Q9e),e(Q9e,x$r),e(jr,$$r),e(jr,hn),e(hn,k$r),e(hn,H9e),e(H9e,S$r),e(hn,R$r),e(hn,U9e),e(U9e,P$r),e(hn,B$r),e(hn,J9e),e(J9e,I$r),e(hn,N$r),e(jr,q$r),e(jr,oe),e(oe,UE),e(UE,Y9e),e(Y9e,j$r),e(UE,D$r),e(UE,RY),e(RY,G$r),e(UE,O$r),e(oe,V$r),e(oe,JE),e(JE,K9e),e(K9e,X$r),e(JE,z$r),e(JE,PY),e(PY,W$r),e(JE,Q$r),e(oe,H$r),e(oe,YE),e(YE,Z9e),e(Z9e,U$r),e(YE,J$r),e(YE,BY),e(BY,Y$r),e(YE,K$r),e(oe,Z$r),e(oe,KE),e(KE,eMe),e(eMe,ekr),e(KE,okr),e(KE,IY),e(IY,rkr),e(KE,tkr),e(oe,akr),e(oe,ZE),e(ZE,oMe),e(oMe,nkr),e(ZE,skr),e(ZE,NY),e(NY,lkr),e(ZE,ikr),e(oe,dkr),e(oe,eC),e(eC,rMe),e(rMe,ckr),e(eC,fkr),e(eC,qY),e(qY,mkr),e(eC,gkr),e(oe,hkr),e(oe,oC),e(oC,tMe),e(tMe,pkr),e(oC,_kr),e(oC,jY),e(jY,ukr),e(oC,bkr),e(oe,vkr),e(oe,rC),e(rC,aMe),e(aMe,Fkr),e(rC,Tkr),e(rC,DY),e(DY,Mkr),e(rC,Ekr),e(oe,Ckr),e(oe,tC),e(tC,nMe),e(nMe,wkr),e(tC,Akr),e(tC,GY),e(GY,Lkr),e(tC,ykr),e(oe,xkr),e(oe,aC),e(aC,sMe),e(sMe,$kr),e(aC,kkr),e(aC,OY),e(OY,Skr),e(aC,Rkr),e(oe,Pkr),e(oe,nC),e(nC,lMe),e(lMe,Bkr),e(nC,Ikr),e(nC,VY),e(VY,Nkr),e(nC,qkr),e(oe,jkr),e(oe,sC),e(sC,iMe),e(iMe,Dkr),e(sC,Gkr),e(sC,XY),e(XY,Okr),e(sC,Vkr),e(oe,Xkr),e(oe,lC),e(lC,dMe),e(dMe,zkr),e(lC,Wkr),e(lC,zY),e(zY,Qkr),e(lC,Hkr),e(oe,Ukr),e(oe,iC),e(iC,cMe),e(cMe,Jkr),e(iC,Ykr),e(iC,WY),e(WY,Kkr),e(iC,Zkr),e(oe,eSr),e(oe,dC),e(dC,fMe),e(fMe,oSr),e(dC,rSr),e(dC,QY),e(QY,tSr),e(dC,aSr),e(oe,nSr),e(oe,cC),e(cC,mMe),e(mMe,sSr),e(cC,lSr),e(cC,HY),e(HY,iSr),e(cC,dSr),e(oe,cSr),e(oe,fC),e(fC,gMe),e(gMe,fSr),e(fC,mSr),e(fC,UY),e(UY,gSr),e(fC,hSr),e(oe,pSr),e(oe,mC),e(mC,hMe),e(hMe,_Sr),e(mC,uSr),e(mC,JY),e(JY,bSr),e(mC,vSr),e(oe,FSr),e(oe,gC),e(gC,pMe),e(pMe,TSr),e(gC,MSr),e(gC,YY),e(YY,ESr),e(gC,CSr),e(oe,wSr),e(oe,hC),e(hC,_Me),e(_Me,ASr),e(hC,LSr),e(hC,KY),e(KY,ySr),e(hC,xSr),e(oe,$Sr),e(oe,pC),e(pC,uMe),e(uMe,kSr),e(pC,SSr),e(pC,ZY),e(ZY,RSr),e(pC,PSr),e(oe,BSr),e(oe,_C),e(_C,bMe),e(bMe,ISr),e(_C,NSr),e(_C,eK),e(eK,qSr),e(_C,jSr),e(oe,DSr),e(oe,uC),e(uC,vMe),e(vMe,GSr),e(uC,OSr),e(uC,oK),e(oK,VSr),e(uC,XSr),e(oe,zSr),e(oe,bC),e(bC,FMe),e(FMe,WSr),e(bC,QSr),e(bC,rK),e(rK,HSr),e(bC,USr),e(oe,JSr),e(oe,vC),e(vC,TMe),e(TMe,YSr),e(vC,KSr),e(vC,tK),e(tK,ZSr),e(vC,eRr),e(oe,oRr),e(oe,FC),e(FC,MMe),e(MMe,rRr),e(FC,tRr),e(FC,aK),e(aK,aRr),e(FC,nRr),e(oe,sRr),e(oe,TC),e(TC,EMe),e(EMe,lRr),e(TC,iRr),e(TC,nK),e(nK,dRr),e(TC,cRr),e(jr,fRr),M(MC,jr,null),b(f,LGe,u),b(f,Pc,u),e(Pc,EC),e(EC,CMe),M(ox,CMe,null),e(Pc,mRr),e(Pc,wMe),e(wMe,gRr),b(f,yGe,u),b(f,mr,u),M(rx,mr,null),e(mr,hRr),e(mr,Bc),e(Bc,pRr),e(Bc,sK),e(sK,_Rr),e(Bc,uRr),e(Bc,lK),e(lK,bRr),e(Bc,vRr),e(mr,FRr),e(mr,tx),e(tx,TRr),e(tx,AMe),e(AMe,MRr),e(tx,ERr),e(mr,CRr),e(mr,Ot),M(ax,Ot,null),e(Ot,wRr),e(Ot,LMe),e(LMe,ARr),e(Ot,LRr),e(Ot,Ic),e(Ic,yRr),e(Ic,yMe),e(yMe,xRr),e(Ic,$Rr),e(Ic,iK),e(iK,kRr),e(Ic,SRr),e(Ot,RRr),M(CC,Ot,null),e(mr,PRr),e(mr,Dr),M(nx,Dr,null),e(Dr,BRr),e(Dr,xMe),e(xMe,IRr),e(Dr,NRr),e(Dr,pn),e(pn,qRr),e(pn,$Me),e($Me,jRr),e(pn,DRr),e(pn,kMe),e(kMe,GRr),e(pn,ORr),e(pn,SMe),e(SMe,VRr),e(pn,XRr),e(Dr,zRr),e(Dr,xe),e(xe,wC),e(wC,RMe),e(RMe,WRr),e(wC,QRr),e(wC,dK),e(dK,HRr),e(wC,URr),e(xe,JRr),e(xe,AC),e(AC,PMe),e(PMe,YRr),e(AC,KRr),e(AC,cK),e(cK,ZRr),e(AC,ePr),e(xe,oPr),e(xe,LC),e(LC,BMe),e(BMe,rPr),e(LC,tPr),e(LC,fK),e(fK,aPr),e(LC,nPr),e(xe,sPr),e(xe,yC),e(yC,IMe),e(IMe,lPr),e(yC,iPr),e(yC,mK),e(mK,dPr),e(yC,cPr),e(xe,fPr),e(xe,xC),e(xC,NMe),e(NMe,mPr),e(xC,gPr),e(xC,gK),e(gK,hPr),e(xC,pPr),e(xe,_Pr),e(xe,$C),e($C,qMe),e(qMe,uPr),e($C,bPr),e($C,hK),e(hK,vPr),e($C,FPr),e(xe,TPr),e(xe,kC),e(kC,jMe),e(jMe,MPr),e(kC,EPr),e(kC,pK),e(pK,CPr),e(kC,wPr),e(xe,APr),e(xe,SC),e(SC,DMe),e(DMe,LPr),e(SC,yPr),e(SC,_K),e(_K,xPr),e(SC,$Pr),e(xe,kPr),e(xe,RC),e(RC,GMe),e(GMe,SPr),e(RC,RPr),e(RC,uK),e(uK,PPr),e(RC,BPr),e(xe,IPr),e(xe,PC),e(PC,OMe),e(OMe,NPr),e(PC,qPr),e(PC,bK),e(bK,jPr),e(PC,DPr),e(Dr,GPr),M(BC,Dr,null),b(f,xGe,u),b(f,Nc,u),e(Nc,IC),e(IC,VMe),M(sx,VMe,null),e(Nc,OPr),e(Nc,XMe),e(XMe,VPr),b(f,$Ge,u),b(f,gr,u),M(lx,gr,null),e(gr,XPr),e(gr,qc),e(qc,zPr),e(qc,vK),e(vK,WPr),e(qc,QPr),e(qc,FK),e(FK,HPr),e(qc,UPr),e(gr,JPr),e(gr,ix),e(ix,YPr),e(ix,zMe),e(zMe,KPr),e(ix,ZPr),e(gr,eBr),e(gr,Vt),M(dx,Vt,null),e(Vt,oBr),e(Vt,WMe),e(WMe,rBr),e(Vt,tBr),e(Vt,jc),e(jc,aBr),e(jc,QMe),e(QMe,nBr),e(jc,sBr),e(jc,TK),e(TK,lBr),e(jc,iBr),e(Vt,dBr),M(NC,Vt,null),e(gr,cBr),e(gr,Gr),M(cx,Gr,null),e(Gr,fBr),e(Gr,HMe),e(HMe,mBr),e(Gr,gBr),e(Gr,_n),e(_n,hBr),e(_n,UMe),e(UMe,pBr),e(_n,_Br),e(_n,JMe),e(JMe,uBr),e(_n,bBr),e(_n,YMe),e(YMe,vBr),e(_n,FBr),e(Gr,TBr),e(Gr,Ee),e(Ee,qC),e(qC,KMe),e(KMe,MBr),e(qC,EBr),e(qC,MK),e(MK,CBr),e(qC,wBr),e(Ee,ABr),e(Ee,jC),e(jC,ZMe),e(ZMe,LBr),e(jC,yBr),e(jC,EK),e(EK,xBr),e(jC,$Br),e(Ee,kBr),e(Ee,DC),e(DC,e4e),e(e4e,SBr),e(DC,RBr),e(DC,CK),e(CK,PBr),e(DC,BBr),e(Ee,IBr),e(Ee,GC),e(GC,o4e),e(o4e,NBr),e(GC,qBr),e(GC,wK),e(wK,jBr),e(GC,DBr),e(Ee,GBr),e(Ee,OC),e(OC,r4e),e(r4e,OBr),e(OC,VBr),e(OC,AK),e(AK,XBr),e(OC,zBr),e(Ee,WBr),e(Ee,VC),e(VC,t4e),e(t4e,QBr),e(VC,HBr),e(VC,LK),e(LK,UBr),e(VC,JBr),e(Ee,YBr),e(Ee,XC),e(XC,a4e),e(a4e,KBr),e(XC,ZBr),e(XC,yK),e(yK,eIr),e(XC,oIr),e(Ee,rIr),e(Ee,zC),e(zC,n4e),e(n4e,tIr),e(zC,aIr),e(zC,xK),e(xK,nIr),e(zC,sIr),e(Ee,lIr),e(Ee,WC),e(WC,s4e),e(s4e,iIr),e(WC,dIr),e(WC,$K),e($K,cIr),e(WC,fIr),e(Ee,mIr),e(Ee,QC),e(QC,l4e),e(l4e,gIr),e(QC,hIr),e(QC,kK),e(kK,pIr),e(QC,_Ir),e(Ee,uIr),e(Ee,HC),e(HC,i4e),e(i4e,bIr),e(HC,vIr),e(HC,SK),e(SK,FIr),e(HC,TIr),e(Ee,MIr),e(Ee,UC),e(UC,d4e),e(d4e,EIr),e(UC,CIr),e(UC,RK),e(RK,wIr),e(UC,AIr),e(Ee,LIr),e(Ee,JC),e(JC,c4e),e(c4e,yIr),e(JC,xIr),e(JC,PK),e(PK,$Ir),e(JC,kIr),e(Gr,SIr),M(YC,Gr,null),b(f,kGe,u),b(f,Dc,u),e(Dc,KC),e(KC,f4e),M(fx,f4e,null),e(Dc,RIr),e(Dc,m4e),e(m4e,PIr),b(f,SGe,u),b(f,hr,u),M(mx,hr,null),e(hr,BIr),e(hr,Gc),e(Gc,IIr),e(Gc,BK),e(BK,NIr),e(Gc,qIr),e(Gc,IK),e(IK,jIr),e(Gc,DIr),e(hr,GIr),e(hr,gx),e(gx,OIr),e(gx,g4e),e(g4e,VIr),e(gx,XIr),e(hr,zIr),e(hr,Xt),M(hx,Xt,null),e(Xt,WIr),e(Xt,h4e),e(h4e,QIr),e(Xt,HIr),e(Xt,Oc),e(Oc,UIr),e(Oc,p4e),e(p4e,JIr),e(Oc,YIr),e(Oc,NK),e(NK,KIr),e(Oc,ZIr),e(Xt,eNr),M(ZC,Xt,null),e(hr,oNr),e(hr,Or),M(px,Or,null),e(Or,rNr),e(Or,_4e),e(_4e,tNr),e(Or,aNr),e(Or,un),e(un,nNr),e(un,u4e),e(u4e,sNr),e(un,lNr),e(un,b4e),e(b4e,iNr),e(un,dNr),e(un,v4e),e(v4e,cNr),e(un,fNr),e(Or,mNr),e(Or,$e),e($e,e5),e(e5,F4e),e(F4e,gNr),e(e5,hNr),e(e5,qK),e(qK,pNr),e(e5,_Nr),e($e,uNr),e($e,o5),e(o5,T4e),e(T4e,bNr),e(o5,vNr),e(o5,jK),e(jK,FNr),e(o5,TNr),e($e,MNr),e($e,r5),e(r5,M4e),e(M4e,ENr),e(r5,CNr),e(r5,DK),e(DK,wNr),e(r5,ANr),e($e,LNr),e($e,t5),e(t5,E4e),e(E4e,yNr),e(t5,xNr),e(t5,GK),e(GK,$Nr),e(t5,kNr),e($e,SNr),e($e,a5),e(a5,C4e),e(C4e,RNr),e(a5,PNr),e(a5,OK),e(OK,BNr),e(a5,INr),e($e,NNr),e($e,n5),e(n5,w4e),e(w4e,qNr),e(n5,jNr),e(n5,VK),e(VK,DNr),e(n5,GNr),e($e,ONr),e($e,s5),e(s5,A4e),e(A4e,VNr),e(s5,XNr),e(s5,XK),e(XK,zNr),e(s5,WNr),e($e,QNr),e($e,l5),e(l5,L4e),e(L4e,HNr),e(l5,UNr),e(l5,zK),e(zK,JNr),e(l5,YNr),e($e,KNr),e($e,i5),e(i5,y4e),e(y4e,ZNr),e(i5,eqr),e(i5,WK),e(WK,oqr),e(i5,rqr),e($e,tqr),e($e,d5),e(d5,x4e),e(x4e,aqr),e(d5,nqr),e(d5,QK),e(QK,sqr),e(d5,lqr),e(Or,iqr),M(c5,Or,null),b(f,RGe,u),b(f,Vc,u),e(Vc,f5),e(f5,$4e),M(_x,$4e,null),e(Vc,dqr),e(Vc,k4e),e(k4e,cqr),b(f,PGe,u),b(f,pr,u),M(ux,pr,null),e(pr,fqr),e(pr,Xc),e(Xc,mqr),e(Xc,HK),e(HK,gqr),e(Xc,hqr),e(Xc,UK),e(UK,pqr),e(Xc,_qr),e(pr,uqr),e(pr,bx),e(bx,bqr),e(bx,S4e),e(S4e,vqr),e(bx,Fqr),e(pr,Tqr),e(pr,zt),M(vx,zt,null),e(zt,Mqr),e(zt,R4e),e(R4e,Eqr),e(zt,Cqr),e(zt,zc),e(zc,wqr),e(zc,P4e),e(P4e,Aqr),e(zc,Lqr),e(zc,JK),e(JK,yqr),e(zc,xqr),e(zt,$qr),M(m5,zt,null),e(pr,kqr),e(pr,Vr),M(Fx,Vr,null),e(Vr,Sqr),e(Vr,B4e),e(B4e,Rqr),e(Vr,Pqr),e(Vr,bn),e(bn,Bqr),e(bn,I4e),e(I4e,Iqr),e(bn,Nqr),e(bn,N4e),e(N4e,qqr),e(bn,jqr),e(bn,q4e),e(q4e,Dqr),e(bn,Gqr),e(Vr,Oqr),e(Vr,ke),e(ke,g5),e(g5,j4e),e(j4e,Vqr),e(g5,Xqr),e(g5,YK),e(YK,zqr),e(g5,Wqr),e(ke,Qqr),e(ke,h5),e(h5,D4e),e(D4e,Hqr),e(h5,Uqr),e(h5,KK),e(KK,Jqr),e(h5,Yqr),e(ke,Kqr),e(ke,p5),e(p5,G4e),e(G4e,Zqr),e(p5,ejr),e(p5,ZK),e(ZK,ojr),e(p5,rjr),e(ke,tjr),e(ke,_5),e(_5,O4e),e(O4e,ajr),e(_5,njr),e(_5,eZ),e(eZ,sjr),e(_5,ljr),e(ke,ijr),e(ke,u5),e(u5,V4e),e(V4e,djr),e(u5,cjr),e(u5,oZ),e(oZ,fjr),e(u5,mjr),e(ke,gjr),e(ke,b5),e(b5,X4e),e(X4e,hjr),e(b5,pjr),e(b5,rZ),e(rZ,_jr),e(b5,ujr),e(ke,bjr),e(ke,v5),e(v5,z4e),e(z4e,vjr),e(v5,Fjr),e(v5,tZ),e(tZ,Tjr),e(v5,Mjr),e(ke,Ejr),e(ke,F5),e(F5,W4e),e(W4e,Cjr),e(F5,wjr),e(F5,aZ),e(aZ,Ajr),e(F5,Ljr),e(ke,yjr),e(ke,T5),e(T5,Q4e),e(Q4e,xjr),e(T5,$jr),e(T5,nZ),e(nZ,kjr),e(T5,Sjr),e(ke,Rjr),e(ke,M5),e(M5,H4e),e(H4e,Pjr),e(M5,Bjr),e(M5,sZ),e(sZ,Ijr),e(M5,Njr),e(Vr,qjr),M(E5,Vr,null),b(f,BGe,u),b(f,Wc,u),e(Wc,C5),e(C5,U4e),M(Tx,U4e,null),e(Wc,jjr),e(Wc,J4e),e(J4e,Djr),b(f,IGe,u),b(f,_r,u),M(Mx,_r,null),e(_r,Gjr),e(_r,Qc),e(Qc,Ojr),e(Qc,lZ),e(lZ,Vjr),e(Qc,Xjr),e(Qc,iZ),e(iZ,zjr),e(Qc,Wjr),e(_r,Qjr),e(_r,Ex),e(Ex,Hjr),e(Ex,Y4e),e(Y4e,Ujr),e(Ex,Jjr),e(_r,Yjr),e(_r,Wt),M(Cx,Wt,null),e(Wt,Kjr),e(Wt,K4e),e(K4e,Zjr),e(Wt,eDr),e(Wt,Hc),e(Hc,oDr),e(Hc,Z4e),e(Z4e,rDr),e(Hc,tDr),e(Hc,dZ),e(dZ,aDr),e(Hc,nDr),e(Wt,sDr),M(w5,Wt,null),e(_r,lDr),e(_r,Xr),M(wx,Xr,null),e(Xr,iDr),e(Xr,eEe),e(eEe,dDr),e(Xr,cDr),e(Xr,vn),e(vn,fDr),e(vn,oEe),e(oEe,mDr),e(vn,gDr),e(vn,rEe),e(rEe,hDr),e(vn,pDr),e(vn,tEe),e(tEe,_Dr),e(vn,uDr),e(Xr,bDr),e(Xr,Se),e(Se,A5),e(A5,aEe),e(aEe,vDr),e(A5,FDr),e(A5,cZ),e(cZ,TDr),e(A5,MDr),e(Se,EDr),e(Se,L5),e(L5,nEe),e(nEe,CDr),e(L5,wDr),e(L5,fZ),e(fZ,ADr),e(L5,LDr),e(Se,yDr),e(Se,y5),e(y5,sEe),e(sEe,xDr),e(y5,$Dr),e(y5,mZ),e(mZ,kDr),e(y5,SDr),e(Se,RDr),e(Se,x5),e(x5,lEe),e(lEe,PDr),e(x5,BDr),e(x5,gZ),e(gZ,IDr),e(x5,NDr),e(Se,qDr),e(Se,$5),e($5,iEe),e(iEe,jDr),e($5,DDr),e($5,hZ),e(hZ,GDr),e($5,ODr),e(Se,VDr),e(Se,k5),e(k5,dEe),e(dEe,XDr),e(k5,zDr),e(k5,pZ),e(pZ,WDr),e(k5,QDr),e(Se,HDr),e(Se,S5),e(S5,cEe),e(cEe,UDr),e(S5,JDr),e(S5,_Z),e(_Z,YDr),e(S5,KDr),e(Se,ZDr),e(Se,R5),e(R5,fEe),e(fEe,eGr),e(R5,oGr),e(R5,uZ),e(uZ,rGr),e(R5,tGr),e(Se,aGr),e(Se,P5),e(P5,mEe),e(mEe,nGr),e(P5,sGr),e(P5,bZ),e(bZ,lGr),e(P5,iGr),e(Se,dGr),e(Se,B5),e(B5,gEe),e(gEe,cGr),e(B5,fGr),e(B5,vZ),e(vZ,mGr),e(B5,gGr),e(Xr,hGr),M(I5,Xr,null),b(f,NGe,u),b(f,Uc,u),e(Uc,N5),e(N5,hEe),M(Ax,hEe,null),e(Uc,pGr),e(Uc,pEe),e(pEe,_Gr),b(f,qGe,u),b(f,ur,u),M(Lx,ur,null),e(ur,uGr),e(ur,Jc),e(Jc,bGr),e(Jc,FZ),e(FZ,vGr),e(Jc,FGr),e(Jc,TZ),e(TZ,TGr),e(Jc,MGr),e(ur,EGr),e(ur,yx),e(yx,CGr),e(yx,_Ee),e(_Ee,wGr),e(yx,AGr),e(ur,LGr),e(ur,Qt),M(xx,Qt,null),e(Qt,yGr),e(Qt,uEe),e(uEe,xGr),e(Qt,$Gr),e(Qt,Yc),e(Yc,kGr),e(Yc,bEe),e(bEe,SGr),e(Yc,RGr),e(Yc,MZ),e(MZ,PGr),e(Yc,BGr),e(Qt,IGr),M(q5,Qt,null),e(ur,NGr),e(ur,zr),M($x,zr,null),e(zr,qGr),e(zr,vEe),e(vEe,jGr),e(zr,DGr),e(zr,Fn),e(Fn,GGr),e(Fn,FEe),e(FEe,OGr),e(Fn,VGr),e(Fn,TEe),e(TEe,XGr),e(Fn,zGr),e(Fn,MEe),e(MEe,WGr),e(Fn,QGr),e(zr,HGr),e(zr,Re),e(Re,j5),e(j5,EEe),e(EEe,UGr),e(j5,JGr),e(j5,EZ),e(EZ,YGr),e(j5,KGr),e(Re,ZGr),e(Re,D5),e(D5,CEe),e(CEe,eOr),e(D5,oOr),e(D5,CZ),e(CZ,rOr),e(D5,tOr),e(Re,aOr),e(Re,G5),e(G5,wEe),e(wEe,nOr),e(G5,sOr),e(G5,wZ),e(wZ,lOr),e(G5,iOr),e(Re,dOr),e(Re,O5),e(O5,AEe),e(AEe,cOr),e(O5,fOr),e(O5,AZ),e(AZ,mOr),e(O5,gOr),e(Re,hOr),e(Re,V5),e(V5,LEe),e(LEe,pOr),e(V5,_Or),e(V5,LZ),e(LZ,uOr),e(V5,bOr),e(Re,vOr),e(Re,X5),e(X5,yEe),e(yEe,FOr),e(X5,TOr),e(X5,yZ),e(yZ,MOr),e(X5,EOr),e(Re,COr),e(Re,z5),e(z5,xEe),e(xEe,wOr),e(z5,AOr),e(z5,xZ),e(xZ,LOr),e(z5,yOr),e(Re,xOr),e(Re,W5),e(W5,$Ee),e($Ee,$Or),e(W5,kOr),e(W5,$Z),e($Z,SOr),e(W5,ROr),e(Re,POr),e(Re,Q5),e(Q5,kEe),e(kEe,BOr),e(Q5,IOr),e(Q5,kZ),e(kZ,NOr),e(Q5,qOr),e(Re,jOr),e(Re,H5),e(H5,SEe),e(SEe,DOr),e(H5,GOr),e(H5,SZ),e(SZ,OOr),e(H5,VOr),e(zr,XOr),M(U5,zr,null),b(f,jGe,u),b(f,Kc,u),e(Kc,J5),e(J5,REe),M(kx,REe,null),e(Kc,zOr),e(Kc,PEe),e(PEe,WOr),b(f,DGe,u),b(f,br,u),M(Sx,br,null),e(br,QOr),e(br,Zc),e(Zc,HOr),e(Zc,RZ),e(RZ,UOr),e(Zc,JOr),e(Zc,PZ),e(PZ,YOr),e(Zc,KOr),e(br,ZOr),e(br,Rx),e(Rx,eVr),e(Rx,BEe),e(BEe,oVr),e(Rx,rVr),e(br,tVr),e(br,Ht),M(Px,Ht,null),e(Ht,aVr),e(Ht,IEe),e(IEe,nVr),e(Ht,sVr),e(Ht,ef),e(ef,lVr),e(ef,NEe),e(NEe,iVr),e(ef,dVr),e(ef,BZ),e(BZ,cVr),e(ef,fVr),e(Ht,mVr),M(Y5,Ht,null),e(br,gVr),e(br,Wr),M(Bx,Wr,null),e(Wr,hVr),e(Wr,qEe),e(qEe,pVr),e(Wr,_Vr),e(Wr,Tn),e(Tn,uVr),e(Tn,jEe),e(jEe,bVr),e(Tn,vVr),e(Tn,DEe),e(DEe,FVr),e(Tn,TVr),e(Tn,GEe),e(GEe,MVr),e(Tn,EVr),e(Wr,CVr),e(Wr,Ve),e(Ve,K5),e(K5,OEe),e(OEe,wVr),e(K5,AVr),e(K5,IZ),e(IZ,LVr),e(K5,yVr),e(Ve,xVr),e(Ve,Z5),e(Z5,VEe),e(VEe,$Vr),e(Z5,kVr),e(Z5,NZ),e(NZ,SVr),e(Z5,RVr),e(Ve,PVr),e(Ve,e3),e(e3,XEe),e(XEe,BVr),e(e3,IVr),e(e3,qZ),e(qZ,NVr),e(e3,qVr),e(Ve,jVr),e(Ve,o3),e(o3,zEe),e(zEe,DVr),e(o3,GVr),e(o3,jZ),e(jZ,OVr),e(o3,VVr),e(Ve,XVr),e(Ve,r3),e(r3,WEe),e(WEe,zVr),e(r3,WVr),e(r3,DZ),e(DZ,QVr),e(r3,HVr),e(Ve,UVr),e(Ve,t3),e(t3,QEe),e(QEe,JVr),e(t3,YVr),e(t3,GZ),e(GZ,KVr),e(t3,ZVr),e(Ve,eXr),e(Ve,a3),e(a3,HEe),e(HEe,oXr),e(a3,rXr),e(a3,OZ),e(OZ,tXr),e(a3,aXr),e(Ve,nXr),e(Ve,n3),e(n3,UEe),e(UEe,sXr),e(n3,lXr),e(n3,VZ),e(VZ,iXr),e(n3,dXr),e(Wr,cXr),M(s3,Wr,null),b(f,GGe,u),b(f,of,u),e(of,l3),e(l3,JEe),M(Ix,JEe,null),e(of,fXr),e(of,YEe),e(YEe,mXr),b(f,OGe,u),b(f,vr,u),M(Nx,vr,null),e(vr,gXr),e(vr,rf),e(rf,hXr),e(rf,XZ),e(XZ,pXr),e(rf,_Xr),e(rf,zZ),e(zZ,uXr),e(rf,bXr),e(vr,vXr),e(vr,qx),e(qx,FXr),e(qx,KEe),e(KEe,TXr),e(qx,MXr),e(vr,EXr),e(vr,Ut),M(jx,Ut,null),e(Ut,CXr),e(Ut,ZEe),e(ZEe,wXr),e(Ut,AXr),e(Ut,tf),e(tf,LXr),e(tf,eCe),e(eCe,yXr),e(tf,xXr),e(tf,WZ),e(WZ,$Xr),e(tf,kXr),e(Ut,SXr),M(i3,Ut,null),e(vr,RXr),e(vr,Qr),M(Dx,Qr,null),e(Qr,PXr),e(Qr,oCe),e(oCe,BXr),e(Qr,IXr),e(Qr,Mn),e(Mn,NXr),e(Mn,rCe),e(rCe,qXr),e(Mn,jXr),e(Mn,tCe),e(tCe,DXr),e(Mn,GXr),e(Mn,aCe),e(aCe,OXr),e(Mn,VXr),e(Qr,XXr),e(Qr,Xe),e(Xe,d3),e(d3,nCe),e(nCe,zXr),e(d3,WXr),e(d3,QZ),e(QZ,QXr),e(d3,HXr),e(Xe,UXr),e(Xe,c3),e(c3,sCe),e(sCe,JXr),e(c3,YXr),e(c3,HZ),e(HZ,KXr),e(c3,ZXr),e(Xe,ezr),e(Xe,f3),e(f3,lCe),e(lCe,ozr),e(f3,rzr),e(f3,UZ),e(UZ,tzr),e(f3,azr),e(Xe,nzr),e(Xe,m3),e(m3,iCe),e(iCe,szr),e(m3,lzr),e(m3,JZ),e(JZ,izr),e(m3,dzr),e(Xe,czr),e(Xe,g3),e(g3,dCe),e(dCe,fzr),e(g3,mzr),e(g3,YZ),e(YZ,gzr),e(g3,hzr),e(Xe,pzr),e(Xe,h3),e(h3,cCe),e(cCe,_zr),e(h3,uzr),e(h3,KZ),e(KZ,bzr),e(h3,vzr),e(Xe,Fzr),e(Xe,p3),e(p3,fCe),e(fCe,Tzr),e(p3,Mzr),e(p3,ZZ),e(ZZ,Ezr),e(p3,Czr),e(Xe,wzr),e(Xe,_3),e(_3,mCe),e(mCe,Azr),e(_3,Lzr),e(_3,eee),e(eee,yzr),e(_3,xzr),e(Qr,$zr),M(u3,Qr,null),b(f,VGe,u),b(f,af,u),e(af,b3),e(b3,gCe),M(Gx,gCe,null),e(af,kzr),e(af,hCe),e(hCe,Szr),b(f,XGe,u),b(f,Fr,u),M(Ox,Fr,null),e(Fr,Rzr),e(Fr,nf),e(nf,Pzr),e(nf,oee),e(oee,Bzr),e(nf,Izr),e(nf,ree),e(ree,Nzr),e(nf,qzr),e(Fr,jzr),e(Fr,Vx),e(Vx,Dzr),e(Vx,pCe),e(pCe,Gzr),e(Vx,Ozr),e(Fr,Vzr),e(Fr,Jt),M(Xx,Jt,null),e(Jt,Xzr),e(Jt,_Ce),e(_Ce,zzr),e(Jt,Wzr),e(Jt,sf),e(sf,Qzr),e(sf,uCe),e(uCe,Hzr),e(sf,Uzr),e(sf,tee),e(tee,Jzr),e(sf,Yzr),e(Jt,Kzr),M(v3,Jt,null),e(Fr,Zzr),e(Fr,Hr),M(zx,Hr,null),e(Hr,eWr),e(Hr,bCe),e(bCe,oWr),e(Hr,rWr),e(Hr,En),e(En,tWr),e(En,vCe),e(vCe,aWr),e(En,nWr),e(En,FCe),e(FCe,sWr),e(En,lWr),e(En,TCe),e(TCe,iWr),e(En,dWr),e(Hr,cWr),e(Hr,MCe),e(MCe,F3),e(F3,ECe),e(ECe,fWr),e(F3,mWr),e(F3,aee),e(aee,gWr),e(F3,hWr),e(Hr,pWr),M(T3,Hr,null),b(f,zGe,u),b(f,lf,u),e(lf,M3),e(M3,CCe),M(Wx,CCe,null),e(lf,_Wr),e(lf,wCe),e(wCe,uWr),b(f,WGe,u),b(f,Tr,u),M(Qx,Tr,null),e(Tr,bWr),e(Tr,df),e(df,vWr),e(df,nee),e(nee,FWr),e(df,TWr),e(df,see),e(see,MWr),e(df,EWr),e(Tr,CWr),e(Tr,Hx),e(Hx,wWr),e(Hx,ACe),e(ACe,AWr),e(Hx,LWr),e(Tr,yWr),e(Tr,Yt),M(Ux,Yt,null),e(Yt,xWr),e(Yt,LCe),e(LCe,$Wr),e(Yt,kWr),e(Yt,cf),e(cf,SWr),e(cf,yCe),e(yCe,RWr),e(cf,PWr),e(cf,lee),e(lee,BWr),e(cf,IWr),e(Yt,NWr),M(E3,Yt,null),e(Tr,qWr),e(Tr,Ur),M(Jx,Ur,null),e(Ur,jWr),e(Ur,xCe),e(xCe,DWr),e(Ur,GWr),e(Ur,Cn),e(Cn,OWr),e(Cn,$Ce),e($Ce,VWr),e(Cn,XWr),e(Cn,kCe),e(kCe,zWr),e(Cn,WWr),e(Cn,SCe),e(SCe,QWr),e(Cn,HWr),e(Ur,UWr),e(Ur,Yx),e(Yx,C3),e(C3,RCe),e(RCe,JWr),e(C3,YWr),e(C3,iee),e(iee,KWr),e(C3,ZWr),e(Yx,eQr),e(Yx,w3),e(w3,PCe),e(PCe,oQr),e(w3,rQr),e(w3,dee),e(dee,tQr),e(w3,aQr),e(Ur,nQr),M(A3,Ur,null),b(f,QGe,u),b(f,ff,u),e(ff,L3),e(L3,BCe),M(Kx,BCe,null),e(ff,sQr),e(ff,ICe),e(ICe,lQr),b(f,HGe,u),b(f,Mr,u),M(Zx,Mr,null),e(Mr,iQr),e(Mr,mf),e(mf,dQr),e(mf,cee),e(cee,cQr),e(mf,fQr),e(mf,fee),e(fee,mQr),e(mf,gQr),e(Mr,hQr),e(Mr,e$),e(e$,pQr),e(e$,NCe),e(NCe,_Qr),e(e$,uQr),e(Mr,bQr),e(Mr,Kt),M(o$,Kt,null),e(Kt,vQr),e(Kt,qCe),e(qCe,FQr),e(Kt,TQr),e(Kt,gf),e(gf,MQr),e(gf,jCe),e(jCe,EQr),e(gf,CQr),e(gf,mee),e(mee,wQr),e(gf,AQr),e(Kt,LQr),M(y3,Kt,null),e(Mr,yQr),e(Mr,Jr),M(r$,Jr,null),e(Jr,xQr),e(Jr,DCe),e(DCe,$Qr),e(Jr,kQr),e(Jr,wn),e(wn,SQr),e(wn,GCe),e(GCe,RQr),e(wn,PQr),e(wn,OCe),e(OCe,BQr),e(wn,IQr),e(wn,VCe),e(VCe,NQr),e(wn,qQr),e(Jr,jQr),e(Jr,XCe),e(XCe,x3),e(x3,zCe),e(zCe,DQr),e(x3,GQr),e(x3,gee),e(gee,OQr),e(x3,VQr),e(Jr,XQr),M($3,Jr,null),UGe=!0},p(f,[u]){const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),Mf.$set(t$);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),xg.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),fh.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),zh.$set(HCe);const a$={};u&2&&(a$.$$scope={dirty:u,ctx:f}),Wh.$set(a$);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),mp.$set(UCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),gp.$set(An);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),_p.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),pu.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),uu.$set(KCe);const n$={};u&2&&(n$.$$scope={dirty:u,ctx:f}),i2.$set(n$);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),c2.$set(ZCe);const s$={};u&2&&(s$.$$scope={dirty:u,ctx:f}),J2.$set(s$);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),K2.$set(e5e);const l$={};u&2&&(l$.$$scope={dirty:u,ctx:f}),I1.$set(l$);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),q1.$set(o5e);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),tb.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),nb.$set(t5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),ev.$set(hf);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),rv.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),Rv.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),Bv.$set(s5e);const i$={};u&2&&(i$.$$scope={dirty:u,ctx:f}),Ov.$set(i$);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),Xv.$set(l5e);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),AF.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),yF.$set(d5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),_6.$set(et);const d$={};u&2&&(d$.$$scope={dirty:u,ctx:f}),b6.$set(d$);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),T6.$set(c5e);const c$={};u&2&&(c$.$$scope={dirty:u,ctx:f}),E6.$set(c$);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),N6.$set(f5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),j6.$set(ot);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),O6.$set(m5e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),X6.$set(pf);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),oT.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),tT.$set(h5e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),cT.$set(L);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),mT.$set(k3);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),CT.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),AT.$set(_5e);const S3={};u&2&&(S3.$$scope={dirty:u,ctx:f}),$T.$set(S3);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),ST.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),jT.$set(b5e);const R3={};u&2&&(R3.$$scope={dirty:u,ctx:f}),GT.$set(R3);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),WT.$set(v5e);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),HT.$set(F5e);const P3={};u&2&&(P3.$$scope={dirty:u,ctx:f}),KT.$set(P3);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),e7.$set(T5e);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),t7.$set(M5e);const B3={};u&2&&(B3.$$scope={dirty:u,ctx:f}),n7.$set(B3);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),f7.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),g7.$set(C5e);const I3={};u&2&&(I3.$$scope={dirty:u,ctx:f}),_7.$set(I3);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),b7.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),f9.$set(A5e);const N3={};u&2&&(N3.$$scope={dirty:u,ctx:f}),g9.$set(N3);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),N9.$set(L5e);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),j9.$set(y5e);const q3={};u&2&&(q3.$$scope={dirty:u,ctx:f}),Z9.$set(q3);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),oM.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),sM.$set($5e);const j3={};u&2&&(j3.$$scope={dirty:u,ctx:f}),iM.$set(j3);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),xM.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),kM.$set(S5e);const D3={};u&2&&(D3.$$scope={dirty:u,ctx:f}),OM.$set(D3);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),XM.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),u4.$set(P5e);const G3={};u&2&&(G3.$$scope={dirty:u,ctx:f}),v4.$set(G3);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),N4.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),j4.$set(I5e);const O3={};u&2&&(O3.$$scope={dirty:u,ctx:f}),O4.$set(O3);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),X4.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),W4.$set(q5e);const V3={};u&2&&(V3.$$scope={dirty:u,ctx:f}),H4.$set(V3);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),pE.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),uE.$set(D5e);const X3={};u&2&&(X3.$$scope={dirty:u,ctx:f}),qE.$set(X3);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),DE.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),OE.$set(O5e);const z3={};u&2&&(z3.$$scope={dirty:u,ctx:f}),XE.$set(z3);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),WE.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),HE.$set(X5e);const W3={};u&2&&(W3.$$scope={dirty:u,ctx:f}),MC.$set(W3);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),CC.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),BC.$set(W5e);const Q3={};u&2&&(Q3.$$scope={dirty:u,ctx:f}),NC.$set(Q3);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),YC.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),ZC.$set(H5e);const H3={};u&2&&(H3.$$scope={dirty:u,ctx:f}),c5.$set(H3);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),m5.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),E5.$set(J5e);const U3={};u&2&&(U3.$$scope={dirty:u,ctx:f}),w5.$set(U3);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),I5.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),q5.$set(K5e);const J3={};u&2&&(J3.$$scope={dirty:u,ctx:f}),U5.$set(J3);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),Y5.$set(Z5e);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),s3.$set(e3e);const Y3={};u&2&&(Y3.$$scope={dirty:u,ctx:f}),i3.$set(Y3);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),u3.$set(o3e);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),v3.$set(r3e);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),T3.$set(K3);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),E3.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),A3.$set(a3e);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),y3.$set(Z3);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),$3.$set(n3e)},i(f){UGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(Mf.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(aA.$$.fragment,f),E(xg.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(cA.$$.fragment,f),E(fh.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(_A.$$.fragment,f),E(zh.$$.fragment,f),E(Wh.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(MA.$$.fragment,f),E(mp.$$.fragment,f),E(gp.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(LA.$$.fragment,f),E(_p.$$.fragment,f),E(yA.$$.fragment,f),E(pu.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(uu.$$.fragment,f),E(RA.$$.fragment,f),E(i2.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(NA.$$.fragment,f),E(c2.$$.fragment,f),E(qA.$$.fragment,f),E(J2.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(K2.$$.fragment,f),E(VA.$$.fragment,f),E(I1.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(q1.$$.fragment,f),E(HA.$$.fragment,f),E(tb.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(nb.$$.fragment,f),E(ZA.$$.fragment,f),E(ev.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(rv.$$.fragment,f),E(aL.$$.fragment,f),E(Rv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Bv.$$.fragment,f),E(dL.$$.fragment,f),E(Ov.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(Xv.$$.fragment,f),E(hL.$$.fragment,f),E(AF.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(yF.$$.fragment,f),E(vL.$$.fragment,f),E(_6.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(b6.$$.fragment,f),E(CL.$$.fragment,f),E(T6.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(E6.$$.fragment,f),E(xL.$$.fragment,f),E(N6.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(j6.$$.fragment,f),E(PL.$$.fragment,f),E(O6.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(X6.$$.fragment,f),E(jL.$$.fragment,f),E(oT.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(tT.$$.fragment,f),E(XL.$$.fragment,f),E(cT.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(mT.$$.fragment,f),E(UL.$$.fragment,f),E(CT.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(AT.$$.fragment,f),E(ey.$$.fragment,f),E($T.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(ST.$$.fragment,f),E(sy.$$.fragment,f),E(jT.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(GT.$$.fragment,f),E(fy.$$.fragment,f),E(WT.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(HT.$$.fragment,f),E(_y.$$.fragment,f),E(KT.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(e7.$$.fragment,f),E(My.$$.fragment,f),E(t7.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(n7.$$.fragment,f),E(Ly.$$.fragment,f),E(f7.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(g7.$$.fragment,f),E(Sy.$$.fragment,f),E(_7.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(b7.$$.fragment,f),E(Ny.$$.fragment,f),E(f9.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(g9.$$.fragment,f),E(Oy.$$.fragment,f),E(N9.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(j9.$$.fragment,f),E(Qy.$$.fragment,f),E(Z9.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(oM.$$.fragment,f),E(Ky.$$.fragment,f),E(sM.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(iM.$$.fragment,f),E(t8.$$.fragment,f),E(xM.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(kM.$$.fragment,f),E(i8.$$.fragment,f),E(OM.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(XM.$$.fragment,f),E(g8.$$.fragment,f),E(u4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(v4.$$.fragment,f),E(b8.$$.fragment,f),E(N4.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(j4.$$.fragment,f),E(E8.$$.fragment,f),E(O4.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(X4.$$.fragment,f),E(x8.$$.fragment,f),E(W4.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(H4.$$.fragment,f),E(P8.$$.fragment,f),E(pE.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(uE.$$.fragment,f),E(j8.$$.fragment,f),E(qE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(DE.$$.fragment,f),E(X8.$$.fragment,f),E(OE.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(XE.$$.fragment,f),E(U8.$$.fragment,f),E(WE.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(HE.$$.fragment,f),E(ex.$$.fragment,f),E(MC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(CC.$$.fragment,f),E(nx.$$.fragment,f),E(BC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(NC.$$.fragment,f),E(cx.$$.fragment,f),E(YC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(ZC.$$.fragment,f),E(px.$$.fragment,f),E(c5.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(m5.$$.fragment,f),E(Fx.$$.fragment,f),E(E5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(w5.$$.fragment,f),E(wx.$$.fragment,f),E(I5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(q5.$$.fragment,f),E($x.$$.fragment,f),E(U5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(Y5.$$.fragment,f),E(Bx.$$.fragment,f),E(s3.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(i3.$$.fragment,f),E(Dx.$$.fragment,f),E(u3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(v3.$$.fragment,f),E(zx.$$.fragment,f),E(T3.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(E3.$$.fragment,f),E(Jx.$$.fragment,f),E(A3.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(y3.$$.fragment,f),E(r$.$$.fragment,f),E($3.$$.fragment,f),UGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(Mf.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(aA.$$.fragment,f),C(xg.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(cA.$$.fragment,f),C(fh.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(_A.$$.fragment,f),C(zh.$$.fragment,f),C(Wh.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(MA.$$.fragment,f),C(mp.$$.fragment,f),C(gp.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(LA.$$.fragment,f),C(_p.$$.fragment,f),C(yA.$$.fragment,f),C(pu.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(uu.$$.fragment,f),C(RA.$$.fragment,f),C(i2.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(NA.$$.fragment,f),C(c2.$$.fragment,f),C(qA.$$.fragment,f),C(J2.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(K2.$$.fragment,f),C(VA.$$.fragment,f),C(I1.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(q1.$$.fragment,f),C(HA.$$.fragment,f),C(tb.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(nb.$$.fragment,f),C(ZA.$$.fragment,f),C(ev.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(rv.$$.fragment,f),C(aL.$$.fragment,f),C(Rv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Bv.$$.fragment,f),C(dL.$$.fragment,f),C(Ov.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(Xv.$$.fragment,f),C(hL.$$.fragment,f),C(AF.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(yF.$$.fragment,f),C(vL.$$.fragment,f),C(_6.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(b6.$$.fragment,f),C(CL.$$.fragment,f),C(T6.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(E6.$$.fragment,f),C(xL.$$.fragment,f),C(N6.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(j6.$$.fragment,f),C(PL.$$.fragment,f),C(O6.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(X6.$$.fragment,f),C(jL.$$.fragment,f),C(oT.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(tT.$$.fragment,f),C(XL.$$.fragment,f),C(cT.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(mT.$$.fragment,f),C(UL.$$.fragment,f),C(CT.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(AT.$$.fragment,f),C(ey.$$.fragment,f),C($T.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(ST.$$.fragment,f),C(sy.$$.fragment,f),C(jT.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(GT.$$.fragment,f),C(fy.$$.fragment,f),C(WT.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(HT.$$.fragment,f),C(_y.$$.fragment,f),C(KT.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(e7.$$.fragment,f),C(My.$$.fragment,f),C(t7.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(n7.$$.fragment,f),C(Ly.$$.fragment,f),C(f7.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(g7.$$.fragment,f),C(Sy.$$.fragment,f),C(_7.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(b7.$$.fragment,f),C(Ny.$$.fragment,f),C(f9.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(g9.$$.fragment,f),C(Oy.$$.fragment,f),C(N9.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(j9.$$.fragment,f),C(Qy.$$.fragment,f),C(Z9.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(oM.$$.fragment,f),C(Ky.$$.fragment,f),C(sM.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(iM.$$.fragment,f),C(t8.$$.fragment,f),C(xM.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(kM.$$.fragment,f),C(i8.$$.fragment,f),C(OM.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(XM.$$.fragment,f),C(g8.$$.fragment,f),C(u4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(v4.$$.fragment,f),C(b8.$$.fragment,f),C(N4.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(j4.$$.fragment,f),C(E8.$$.fragment,f),C(O4.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(X4.$$.fragment,f),C(x8.$$.fragment,f),C(W4.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(H4.$$.fragment,f),C(P8.$$.fragment,f),C(pE.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(uE.$$.fragment,f),C(j8.$$.fragment,f),C(qE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(DE.$$.fragment,f),C(X8.$$.fragment,f),C(OE.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(XE.$$.fragment,f),C(U8.$$.fragment,f),C(WE.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(HE.$$.fragment,f),C(ex.$$.fragment,f),C(MC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(CC.$$.fragment,f),C(nx.$$.fragment,f),C(BC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(NC.$$.fragment,f),C(cx.$$.fragment,f),C(YC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(ZC.$$.fragment,f),C(px.$$.fragment,f),C(c5.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(m5.$$.fragment,f),C(Fx.$$.fragment,f),C(E5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(w5.$$.fragment,f),C(wx.$$.fragment,f),C(I5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(q5.$$.fragment,f),C($x.$$.fragment,f),C(U5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(Y5.$$.fragment,f),C(Bx.$$.fragment,f),C(s3.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(i3.$$.fragment,f),C(Dx.$$.fragment,f),C(u3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(v3.$$.fragment,f),C(zx.$$.fragment,f),C(T3.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(E3.$$.fragment,f),C(Jx.$$.fragment,f),C(A3.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(y3.$$.fragment,f),C(r$.$$.fragment,f),C($3.$$.fragment,f),UGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(Oe),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Wje),f&&t(Fi),w(Kw),f&&t(Qje),f&&t(kn),f&&t(Hje),w(Zw,f),f&&t(Uje),f&&t(Ek),f&&t(Jje),w(Mf,f),f&&t(Yje),f&&t(Ti),w(eA),f&&t(Kje),f&&t(Co),w(oA),w(aA),w(xg),w(nA),f&&t(Zje),f&&t(Ei),w(sA),f&&t(eDe),f&&t(wo),w(lA),w(cA),w(fh),w(fA),f&&t(oDe),f&&t(Ci),w(mA),f&&t(rDe),f&&t(Ao),w(gA),w(_A),w(zh),w(Wh),w(uA),f&&t(tDe),f&&t(wi),w(bA),f&&t(aDe),f&&t(Lo),w(vA),w(MA),w(mp),w(gp),w(EA),f&&t(nDe),f&&t(Li),w(CA),f&&t(sDe),f&&t(yo),w(wA),w(LA),w(_p),w(yA),w(pu),f&&t(lDe),f&&t($i),w(xA),f&&t(iDe),f&&t(xo),w($A),w(SA),w(uu),w(RA),w(i2),f&&t(dDe),f&&t(Ri),w(PA),f&&t(cDe),f&&t($o),w(BA),w(NA),w(c2),w(qA),w(J2),f&&t(fDe),f&&t(Ii),w(jA),f&&t(mDe),f&&t(ko),w(DA),w(OA),w(K2),w(VA),w(I1),f&&t(gDe),f&&t(ji),w(XA),f&&t(hDe),f&&t(So),w(zA),w(QA),w(q1),w(HA),w(tb),f&&t(pDe),f&&t(Oi),w(UA),f&&t(_De),f&&t(Ro),w(JA),w(KA),w(nb),w(ZA),w(ev),f&&t(uDe),f&&t(zi),w(eL),f&&t(bDe),f&&t(Po),w(oL),w(tL),w(rv),w(aL),w(Rv),f&&t(vDe),f&&t(Hi),w(nL),f&&t(FDe),f&&t(Bo),w(sL),w(iL),w(Bv),w(dL),w(Ov),f&&t(TDe),f&&t(Yi),w(cL),f&&t(MDe),f&&t(Io),w(fL),w(gL),w(Xv),w(hL),w(AF),f&&t(EDe),f&&t(ed),w(pL),f&&t(CDe),f&&t(No),w(_L),w(bL),w(yF),w(vL),w(_6),f&&t(wDe),f&&t(td),w(FL),f&&t(ADe),f&&t(qo),w(TL),w(EL),w(b6),w(CL),w(T6),f&&t(LDe),f&&t(sd),w(wL),f&&t(yDe),f&&t(jo),w(AL),w(yL),w(E6),w(xL),w(N6),f&&t(xDe),f&&t(dd),w($L),f&&t($De),f&&t(Do),w(kL),w(RL),w(j6),w(PL),w(O6),f&&t(kDe),f&&t(md),w(BL),f&&t(SDe),f&&t(Go),w(IL),w(qL),w(X6),w(jL),w(oT),f&&t(RDe),f&&t(pd),w(DL),f&&t(PDe),f&&t(Oo),w(GL),w(VL),w(tT),w(XL),w(cT),f&&t(BDe),f&&t(bd),w(zL),f&&t(IDe),f&&t(Vo),w(WL),w(HL),w(mT),w(UL),w(CT),f&&t(NDe),f&&t(Td),w(JL),f&&t(qDe),f&&t(Xo),w(YL),w(ZL),w(AT),w(ey),w($T),f&&t(jDe),f&&t(Cd),w(ry),f&&t(DDe),f&&t(zo),w(ty),w(ny),w(ST),w(sy),w(jT),f&&t(GDe),f&&t(Ld),w(ly),f&&t(ODe),f&&t(Wo),w(iy),w(cy),w(GT),w(fy),w(WT),f&&t(VDe),f&&t(kd),w(my),f&&t(XDe),f&&t(Qo),w(gy),w(py),w(HT),w(_y),w(KT),f&&t(zDe),f&&t(Pd),w(by),f&&t(WDe),f&&t(Ho),w(vy),w(Ty),w(e7),w(My),w(t7),f&&t(QDe),f&&t(Nd),w(Ey),f&&t(HDe),f&&t(Uo),w(Cy),w(Ay),w(n7),w(Ly),w(f7),f&&t(UDe),f&&t(Dd),w(yy),f&&t(JDe),f&&t(Jo),w(xy),w(ky),w(g7),w(Sy),w(_7),f&&t(YDe),f&&t(Vd),w(Ry),f&&t(KDe),f&&t(Yo),w(Py),w(Iy),w(b7),w(Ny),w(f9),f&&t(ZDe),f&&t(Wd),w(qy),f&&t(eGe),f&&t(Ko),w(jy),w(Gy),w(g9),w(Oy),w(N9),f&&t(oGe),f&&t(Ud),w(Vy),f&&t(rGe),f&&t(Zo),w(Xy),w(Wy),w(j9),w(Qy),w(Z9),f&&t(tGe),f&&t(Kd),w(Hy),f&&t(aGe),f&&t(er),w(Uy),w(Yy),w(oM),w(Ky),w(sM),f&&t(nGe),f&&t(oc),w(Zy),f&&t(sGe),f&&t(or),w(e8),w(r8),w(iM),w(t8),w(xM),f&&t(lGe),f&&t(ac),w(a8),f&&t(iGe),f&&t(rr),w(n8),w(l8),w(kM),w(i8),w(OM),f&&t(dGe),f&&t(lc),w(d8),f&&t(cGe),f&&t(tr),w(c8),w(m8),w(XM),w(g8),w(u4),f&&t(fGe),f&&t(cc),w(h8),f&&t(mGe),f&&t(ar),w(p8),w(u8),w(v4),w(b8),w(N4),f&&t(gGe),f&&t(gc),w(v8),f&&t(hGe),f&&t(nr),w(F8),w(M8),w(j4),w(E8),w(O4),f&&t(pGe),f&&t(_c),w(w8),f&&t(_Ge),f&&t(sr),w(A8),w(y8),w(X4),w(x8),w(W4),f&&t(uGe),f&&t(vc),w($8),f&&t(bGe),f&&t(lr),w(k8),w(R8),w(H4),w(P8),w(pE),f&&t(vGe),f&&t(Mc),w(B8),f&&t(FGe),f&&t(ir),w(I8),w(q8),w(uE),w(j8),w(qE),f&&t(TGe),f&&t(wc),w(D8),f&&t(MGe),f&&t(dr),w(G8),w(V8),w(DE),w(X8),w(OE),f&&t(EGe),f&&t(yc),w(z8),f&&t(CGe),f&&t(cr),w(W8),w(H8),w(XE),w(U8),w(WE),f&&t(wGe),f&&t(kc),w(J8),f&&t(AGe),f&&t(fr),w(Y8),w(Z8),w(HE),w(ex),w(MC),f&&t(LGe),f&&t(Pc),w(ox),f&&t(yGe),f&&t(mr),w(rx),w(ax),w(CC),w(nx),w(BC),f&&t(xGe),f&&t(Nc),w(sx),f&&t($Ge),f&&t(gr),w(lx),w(dx),w(NC),w(cx),w(YC),f&&t(kGe),f&&t(Dc),w(fx),f&&t(SGe),f&&t(hr),w(mx),w(hx),w(ZC),w(px),w(c5),f&&t(RGe),f&&t(Vc),w(_x),f&&t(PGe),f&&t(pr),w(ux),w(vx),w(m5),w(Fx),w(E5),f&&t(BGe),f&&t(Wc),w(Tx),f&&t(IGe),f&&t(_r),w(Mx),w(Cx),w(w5),w(wx),w(I5),f&&t(NGe),f&&t(Uc),w(Ax),f&&t(qGe),f&&t(ur),w(Lx),w(xx),w(q5),w($x),w(U5),f&&t(jGe),f&&t(Kc),w(kx),f&&t(DGe),f&&t(br),w(Sx),w(Px),w(Y5),w(Bx),w(s3),f&&t(GGe),f&&t(of),w(Ix),f&&t(OGe),f&&t(vr),w(Nx),w(jx),w(i3),w(Dx),w(u3),f&&t(VGe),f&&t(af),w(Gx),f&&t(XGe),f&&t(Fr),w(Ox),w(Xx),w(v3),w(zx),w(T3),f&&t(zGe),f&&t(lf),w(Wx),f&&t(WGe),f&&t(Tr),w(Qx),w(Ux),w(E3),w(Jx),w(A3),f&&t(QGe),f&&t(ff),w(Kx),f&&t(HGe),f&&t(Mr),w(Zx),w(o$),w(y3),w(r$),w($3)}}}const MNt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ENt(x){return EBt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $Nt extends vBt{constructor(g){super();FBt(this,g,ENt,TNt,TBt,{})}}export{$Nt as default,MNt as metadata};
